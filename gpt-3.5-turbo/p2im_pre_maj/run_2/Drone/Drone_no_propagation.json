{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_values_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateValues_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_string_length_08000150",
            "code": "\nchar * find_string_length_08000150(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_pos;\n  \n  current_pos = input_string;\n  do {\n    next_char = current_pos + 1;\n    current_char = *current_pos;\n    current_pos = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_string_length_08000150",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_pos"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_result_08000168",
            "code": "\nulonglong calculate_result_08000168(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int shift_count_1;\n  byte carry_1;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  int shift_count_2;\n  uint temp_6;\n  uint temp_7;\n  uint temp_8;\n  uint temp_9;\n  bool is_condition_1_met;\n  bool is_condition_2_met;\n  bool is_condition_3_met;\n  \n  temp_4 = input_4 ^ 0x80000000;\n  temp_6 = input_2 << 1;\n  input_4 = input_4 << 1;\n  is_condition_1_met = ((input_2 ^ temp_4) & 0x7fffffff) == 0;\n  is_condition_2_met = is_condition_1_met && input_1 == input_3;\n  if (!is_condition_1_met || input_1 != input_3) {\n    is_condition_2_met = (temp_6 | input_1) == 0;\n  }\n  if (!is_condition_2_met) {\n    is_condition_2_met = (input_4 | input_3) == 0;\n  }\n  shift_count_2 = (int)temp_6 >> 0x15;\n  if (!is_condition_2_met) {\n    is_condition_2_met = shift_count_2 == -1;\n  }\n  shift_count_1 = (int)input_4 >> 0x15;\n  if (!is_condition_2_met) {\n    is_condition_2_met = shift_count_1 == -1;\n  }\n  if (is_condition_2_met) {\n    if (shift_count_2 == -1 || shift_count_1 == -1) {\n      temp_6 = temp_4;\n      temp_8 = input_3;\n      if (shift_count_2 == -1) {\n        temp_6 = input_2;\n        temp_8 = input_1;\n      }\n      if (shift_count_2 != -1 || shift_count_1 != -1) {\n        input_3 = temp_8;\n        temp_4 = temp_6;\n      }\n      is_condition_2_met = (temp_8 | temp_6 << 0xc) == 0;\n      if (is_condition_2_met) {\n        is_condition_2_met = (input_3 | temp_4 << 0xc) == 0;\n      }\n      if (is_condition_2_met) {\n        is_condition_2_met = temp_6 == temp_4;\n      }\n      if (!is_condition_2_met) {\n        temp_6 = temp_6 | 0x80000;\n      }\n      return CONCAT44(temp_6,temp_8);\n    }\n    if (((input_2 ^ temp_4) & 0x7fffffff) != 0 || input_1 != input_3) {\n      if ((temp_6 | input_1) == 0) {\n        input_1 = input_3;\n        input_2 = temp_4;\n      }\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != temp_4) {\n      return 0;\n    }\n    if (temp_6 >> 0x15 == 0) {\n      is_condition_2_met = (input_1 & 0x80000000) != 0;\n      temp_4 = input_2 * 2 + (uint)is_condition_2_met;\n      if (CARRY4(input_2,input_2) || CARRY4(input_2 * 2,(uint)is_condition_2_met)) {\n        temp_4 = temp_4 | 0x80000000;\n      }\n      return CONCAT44(temp_4,input_1 << 1);\n    }\n    if (temp_6 < 0xffc00000) {\n      return CONCAT44(input_2 + 0x100000,input_1);\n    }\n    input_2 = input_2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_2 | 0x7ff00000) << 0x20;\n  }\n  temp_6 = temp_6 >> 0x15;\n  input_4 = input_4 >> 0x15;\n  temp_8 = input_4 - temp_6;\n  is_condition_2_met = temp_8 != 0;\n  if (input_4 < temp_6) {\n    temp_8 = -temp_8;\n  }\n  temp_7 = input_1;\n  temp_5 = input_2;\n  if (is_condition_2_met && temp_6 <= input_4) {\n    temp_6 = temp_6 + temp_8;\n    temp_7 = input_3;\n    temp_5 = temp_4;\n    input_3 = input_1;\n    temp_4 = input_2;\n  }\n  if (0x36 < temp_8) {\n    return CONCAT44(temp_5,temp_7);\n  }\n  temp_2 = temp_5 & 0xfffff | 0x100000;\n  if ((temp_5 & 0x80000000) != 0) {\n    is_condition_2_met = temp_7 != 0;\n    temp_7 = -temp_7;\n    temp_2 = -temp_2 - (uint)is_condition_2_met;\n  }\n  temp_5 = temp_4 & 0xfffff | 0x100000;\n  if ((temp_4 & 0x80000000) != 0) {\n    is_condition_2_met = input_3 != 0;\n    input_3 = -input_3;\n    temp_5 = -temp_5 - (uint)is_condition_2_met;\n  }\n  if (temp_6 == temp_8) {\n    temp_5 = temp_5 ^ 0x100000;\n    if (temp_6 == 0) {\n      temp_2 = temp_2 ^ 0x100000;\n      temp_6 = 1;\n    }\n    else {\n      temp_8 = temp_8 - 1;\n    }\n  }\n  temp_4 = -temp_8 + 0x20;\n  if ((int)temp_8 < 0x21) {\n    temp_9 = input_3 << (temp_4 & 0xff);\n    input_3 = input_3 >> (temp_8 & 0xff);\n    temp_1 = temp_7 + input_3;\n    temp_3 = temp_5 << (temp_4 & 0xff);\n    temp_4 = temp_1 + temp_3;\n    temp_2 = temp_2 + CARRY4(temp_7,input_3) + ((int)temp_5 >> (temp_8 & 0xff)) +\n            (uint)CARRY4(temp_1,temp_3);\n  }\n  else {\n    temp_9 = temp_5 << (-temp_8 + 0x40 & 0xff);\n    if (input_3 != 0) {\n      temp_9 = temp_9 | 2;\n    }\n    temp_5 = (int)temp_5 >> (temp_8 - 0x20 & 0xff);\n    temp_4 = temp_7 + temp_5;\n    temp_2 = temp_2 + ((int)temp_5 >> 0x1f) + (uint)CARRY4(temp_7,temp_5);\n  }\n  input_2 = temp_2 & 0x80000000;\n  temp_8 = temp_2;\n  if ((int)temp_2 < 0) {\n    is_condition_2_met = temp_9 == 0;\n    temp_9 = -temp_9;\n    temp_8 = -temp_4;\n    temp_4 = -(uint)!is_condition_2_met - temp_4;\n    temp_8 = -(uint)(is_condition_2_met <= temp_8) - temp_2;\n  }\n  if (0xfffff < temp_8) {\n    temp_7 = temp_6 - 1;\n    if (0x1fffff < temp_8) {\n      temp_7 = temp_8 & 1;\n      temp_8 = temp_8 >> 1;\n      carry_1 = (byte)temp_4;\n      temp_4 = (uint)(temp_7 != 0) << 0x1f | temp_4 >> 1;\n      temp_9 = (uint)(carry_1 & 1) << 0x1f | temp_9 >> 1;\n      temp_7 = temp_6;\n      if (0xffbfffff < temp_6 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_condition_2_met = 0x7fffffff < temp_9;\n    if (temp_9 == 0x80000000) {\n      is_condition_2_met = (temp_4 & 1) != 0;\n    }\n    return CONCAT44(temp_8 + temp_7 * 0x100000 + (uint)CARRY4(temp_4,(uint)is_condition_2_met) | input_2,\n                    temp_4 + is_condition_2_met);\n  }\n  is_condition_1_met = (temp_9 & 0x80000000) != 0;\n  temp_9 = temp_9 << 1;\n  temp_7 = temp_4 * 2;\n  is_condition_2_met = CARRY4(temp_4,temp_4);\n  temp_4 = temp_4 * 2 + (uint)is_condition_1_met;\n  temp_8 = temp_8 * 2 + (uint)(is_condition_2_met || CARRY4(temp_7,(uint)is_condition_1_met));\n  temp_7 = temp_6 - 2;\n  if ((temp_8 & 0x100000) != 0) goto LAB_08000278;\n  temp_5 = temp_4;\n  temp_6 = temp_8;\n  if (temp_8 == 0) {\n    temp_5 = 0;\n    temp_6 = temp_4;\n  }\n  shift_count_2 = LZCOUNT(temp_6);\n  if (temp_8 == 0) {\n    shift_count_2 = shift_count_2 + 0x20;\n  }\n  temp_8 = shift_count_2 - 0xb;\n  is_condition_3_met = SBORROW4(temp_8,0x20);\n  temp_4 = shift_count_2 - 0x2b;\n  is_condition_2_met = (int)temp_4 < 0;\n  is_condition_1_met = temp_4 == 0;\n  if ((int)temp_8 < 0x20) {\n    is_condition_3_met = SCARRY4(temp_4,0xc);\n    shift_count_2 = shift_count_2 + -0x1f;\n    is_condition_2_met = shift_count_2 < 0;\n    is_condition_1_met = shift_count_2 == 0;\n    temp_4 = temp_8;\n    if (!is_condition_1_met && is_condition_2_met == is_condition_3_met) {\n      temp_5 = temp_6 << (temp_8 & 0xff);\n      temp_6 = temp_6 >> (0xcU - shift_count_2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_condition_1_met || is_condition_2_met != is_condition_3_met) {\n    temp_9 = 0x20 - temp_4;\n  }\n  temp_6 = temp_6 << (temp_4 & 0xff);\n  if (is_condition_1_met || is_condition_2_met != is_condition_3_met) {\n    temp_6 = temp_6 | temp_5 >> (temp_9 & 0xff);\n  }\n  if (is_condition_1_met || is_condition_2_met != is_condition_3_met) {\n    temp_5 = temp_5 << (temp_4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_8 <= (int)temp_7) {\n    return CONCAT44(temp_6 + (temp_7 - temp_8) * 0x100000 | input_2,temp_5);\n  }\n  temp_4 = ~(temp_7 - temp_8);\n  if ((int)temp_4 < 0x1f) {\n    shift_count_2 = temp_4 - 0x13;\n    if (shift_count_2 != 0 && shift_count_2 < 0 == SCARRY4(temp_4 - 0x1f,0xc)) {\n      return CONCAT44(temp_2,temp_5 >> (0x20 - (0xcU - shift_count_2) & 0xff) | temp_6 << (0xcU - shift_count_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp_4 = temp_4 + 1;\n    return CONCAT44(input_2 | temp_6 >> (temp_4 & 0xff),\n                    temp_5 >> (temp_4 & 0xff) | temp_6 << (0x20 - temp_4 & 0xff));\n  }\n  return CONCAT44(temp_2,temp_6 >> (temp_4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_result_08000168",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shift_count_1",
                "bVar2": "carry_1",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "uVar6": "temp_4",
                "uVar7": "temp_5",
                "iVar8": "shift_count_2",
                "uVar9": "temp_6",
                "uVar10": "temp_7",
                "uVar11": "temp_8",
                "uVar12": "temp_9",
                "bVar13": "is_condition_1_met",
                "bVar14": "is_condition_2_met",
                "bVar15": "is_condition_3_met"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_quotient_and_remainder_0800016c",
            "code": "\nulonglong calculateQuotientAndRemainder_0800016c(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  int quotientNegative;\n  byte carry;\n  uint dividendShifted;\n  uint divisorShifted;\n  uint remainderShifted;\n  int quotientShifted;\n  uint dividendSignBit;\n  uint remainderSignBit;\n  uint quotientResult;\n  uint remainderResult;\n  uint remainderTemp;\n  uint quotientTemp;\n  bool isQuotientZero;\n  bool isRemainderZero;\n  bool isCarrySet;\n  \n  dividendSignBit = divisor << 1;\n  quotientResult = remainder << 1;\n  isQuotientZero = ((divisor ^ remainder) & 0x7fffffff) == 0;\n  isRemainderZero = isQuotientZero && dividend == quotient;\n  if (!isQuotientZero || dividend != quotient) {\n    isRemainderZero = (dividendSignBit | dividend) == 0;\n  }\n  if (!isRemainderZero) {\n    isRemainderZero = (quotientResult | quotient) == 0;\n  }\n  quotientShifted = (int)dividendSignBit >> 0x15;\n  if (!isRemainderZero) {\n    isRemainderZero = quotientShifted == -1;\n  }\n  quotientNegative = (int)quotientResult >> 0x15;\n  if (!isRemainderZero) {\n    isRemainderZero = quotientNegative == -1;\n  }\n  if (isRemainderZero) {\n    if (quotientShifted == -1 || quotientNegative == -1) {\n      quotientResult = remainder;\n      dividendSignBit = quotient;\n      if (quotientShifted == -1) {\n        quotientResult = divisor;\n        dividendSignBit = dividend;\n      }\n      if (quotientShifted != -1 || quotientNegative != -1) {\n        quotient = dividendSignBit;\n        remainder = quotientResult;\n      }\n      isRemainderZero = (dividendSignBit | quotientResult << 0xc) == 0;\n      if (isRemainderZero) {\n        isRemainderZero = (quotient | remainder << 0xc) == 0;\n      }\n      if (isRemainderZero) {\n        isRemainderZero = quotientResult == remainder;\n      }\n      if (!isRemainderZero) {\n        quotientResult = quotientResult | 0x80000;\n      }\n      return CONCAT44(quotientResult,dividendSignBit);\n    }\n    if (((divisor ^ remainder) & 0x7fffffff) != 0 || dividend != quotient) {\n      if ((dividendSignBit | dividend) == 0) {\n        dividend = quotient;\n        divisor = remainder;\n      }\n      return CONCAT44(divisor,dividend);\n    }\n    if (divisor != remainder) {\n      return 0;\n    }\n    if (dividendSignBit >> 0x15 == 0) {\n      isRemainderZero = (dividend & 0x80000000) != 0;\n      quotientResult = divisor * 2 + (uint)isRemainderZero;\n      if (CARRY4(divisor,divisor) || CARRY4(divisor * 2,(uint)isRemainderZero)) {\n        quotientResult = quotientResult | 0x80000000;\n      }\n      return CONCAT44(quotientResult,dividend << 1);\n    }\n    if (dividendSignBit < 0xffc00000) {\n      return CONCAT44(divisor + 0x100000,dividend);\n    }\n    divisor = divisor & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(divisor | 0x7ff00000) << 0x20;\n  }\n  dividendSignBit = dividendSignBit >> 0x15;\n  quotientResult = quotientResult >> 0x15;\n  remainderResult = quotientResult - dividendSignBit;\n  isRemainderZero = remainderResult != 0;\n  if (quotientResult < dividendSignBit) {\n    remainderResult = -remainderResult;\n  }\n  remainderSignBit = dividend;\n  remainderShifted = divisor;\n  if (isRemainderZero && dividendSignBit <= quotientResult) {\n    dividendSignBit = dividendSignBit + remainderResult;\n    remainderSignBit = quotient;\n    remainderShifted = remainder;\n    quotient = dividend;\n    remainder = divisor;\n  }\n  if (0x36 < remainderResult) {\n    return CONCAT44(remainderShifted,remainderSignBit);\n  }\n  quotientResult = remainderShifted & 0xfffff | 0x100000;\n  if ((remainderShifted & 0x80000000) != 0) {\n    isRemainderZero = remainderSignBit != 0;\n    remainderSignBit = -remainderSignBit;\n    quotientResult = -quotientResult - (uint)isRemainderZero;\n  }\n  remainderShifted = remainder & 0xfffff | 0x100000;\n  if ((remainder & 0x80000000) != 0) {\n    isRemainderZero = quotient != 0;\n    quotient = -quotient;\n    remainderShifted = -remainderShifted - (uint)isRemainderZero;\n  }\n  if (dividendSignBit == remainderResult) {\n    remainderShifted = remainderShifted ^ 0x100000;\n    if (dividendSignBit == 0) {\n      quotientResult = quotientResult ^ 0x100000;\n      dividendSignBit = 1;\n    }\n    else {\n      remainderResult = remainderResult - 1;\n    }\n  }\n  quotientTemp = -remainderResult + 0x20;\n  if ((int)remainderResult < 0x21) {\n    remainderTemp = quotient << (quotientTemp & 0xff);\n    quotient = quotient >> (remainderResult & 0xff);\n    dividendShifted = remainderSignBit + quotient;\n    divisorShifted = remainderShifted << (quotientTemp & 0xff);\n    quotientTemp = dividendShifted + divisorShifted;\n    quotientResult = quotientResult + CARRY4(remainderSignBit,quotient) + ((int)remainderShifted >> (remainderResult & 0xff)) +\n            (uint)CARRY4(dividendShifted,divisorShifted);\n  }\n  else {\n    remainderTemp = remainderShifted << (-remainderResult + 0x40 & 0xff);\n    if (quotient != 0) {\n      remainderTemp = remainderTemp | 2;\n    }\n    remainderShifted = (int)remainderShifted >> (remainderResult - 0x20 & 0xff);\n    quotientTemp = remainderSignBit + remainderShifted;\n    quotientResult = quotientResult + ((int)remainderShifted >> 0x1f) + (uint)CARRY4(remainderSignBit,remainderShifted);\n  }\n  divisor = quotientResult & 0x80000000;\n  remainderResult = quotientResult;\n  if ((int)quotientResult < 0) {\n    isRemainderZero = remainderTemp == 0;\n    remainderTemp = -remainderTemp;\n    remainderResult = -quotientTemp;\n    quotientTemp = -(uint)!isRemainderZero - quotientTemp;\n    remainderResult = -(uint)(isRemainderZero <= remainderResult) - quotientResult;\n  }\n  if (0xfffff < remainderResult) {\n    remainderSignBit = dividendSignBit - 1;\n    if (0x1fffff < remainderResult) {\n      quotientResult = remainderResult & 1;\n      remainderResult = remainderResult >> 1;\n      carry = (byte)quotientTemp;\n      quotientTemp = (uint)(quotientResult != 0) << 0x1f | quotientTemp >> 1;\n      remainderTemp = (uint)(carry & 1) << 0x1f | remainderTemp >> 1;\n      remainderSignBit = dividendSignBit;\n      if (0xffbfffff < dividendSignBit * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    isRemainderZero = 0x7fffffff < remainderTemp;\n    if (remainderTemp == 0x80000000) {\n      isRemainderZero = (quotientTemp & 1) != 0;\n    }\n    return CONCAT44(remainderResult + remainderSignBit * 0x100000 + (uint)CARRY4(quotientTemp,(uint)isRemainderZero) | divisor,\n                    quotientTemp + isRemainderZero);\n  }\n  isQuotientZero = (remainderTemp & 0x80000000) != 0;\n  remainderTemp = remainderTemp << 1;\n  remainderSignBit = quotientTemp * 2;\n  isRemainderZero = CARRY4(quotientTemp,quotientTemp);\n  quotientTemp = quotientTemp * 2 + (uint)isQuotientZero;\n  remainderResult = remainderResult * 2 + (uint)(isRemainderZero || CARRY4(remainderSignBit,(uint)isQuotientZero));\n  remainderSignBit = dividendSignBit - 2;\n  if ((remainderResult & 0x100000) != 0) goto LAB_08000278;\n  remainderShifted = quotientTemp;\n  dividendSignBit = remainderResult;\n  if (remainderResult == 0) {\n    remainderShifted = 0;\n    dividendSignBit = quotientTemp;\n  }\n  quotientShifted = LZCOUNT(dividendSignBit);\n  if (remainderResult == 0) {\n    quotientShifted = quotientShifted + 0x20;\n  }\n  quotientTemp = quotientShifted - 0xb;\n  isCarrySet = SBORROW4(quotientTemp,0x20);\n  remainderResult = quotientShifted - 0x2b;\n  isRemainderZero = (int)remainderResult < 0;\n  isQuotientZero = remainderResult == 0;\n  if ((int)quotientTemp < 0x20) {\n    isCarrySet = SCARRY4(remainderResult,0xc);\n    quotientShifted = quotientShifted + -0x1f;\n    isRemainderZero = quotientShifted < 0;\n    isQuotientZero = quotientShifted == 0;\n    remainderResult = quotientTemp;\n    if (!isQuotientZero && isRemainderZero == isCarrySet) {\n      remainderShifted = dividendSignBit << (quotientTemp & 0xff);\n      dividendSignBit = dividendSignBit >> (0xcU - quotientShifted & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isQuotientZero || isRemainderZero != isCarrySet) {\n    remainderTemp = 0x20 - remainderResult;\n  }\n  dividendSignBit = dividendSignBit << (remainderResult & 0xff);\n  if (isQuotientZero || isRemainderZero != isCarrySet) {\n    dividendSignBit = dividendSignBit | remainderShifted >> (remainderTemp & 0xff);\n  }\n  if (isQuotientZero || isRemainderZero != isCarrySet) {\n    remainderShifted = remainderShifted << (remainderResult & 0xff);\n  }\nLAB_080002f0:\n  if ((int)quotientTemp <= (int)remainderSignBit) {\n    return CONCAT44(dividendSignBit + (remainderSignBit - quotientTemp) * 0x100000 | divisor,remainderShifted);\n  }\n  remainderResult = ~(remainderSignBit - quotientTemp);\n  if ((int)remainderResult < 0x1f) {\n    quotientShifted = remainderResult - 0x13;\n    if (quotientShifted != 0 && quotientShifted < 0 == SCARRY4(remainderResult - 0x1f,0xc)) {\n      return CONCAT44(quotientResult,remainderShifted >> (0x20 - (0xcU - quotientShifted) & 0xff) | dividendSignBit << (0xcU - quotientShifted & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    remainderResult = remainderResult + 1;\n    return CONCAT44(divisor | dividendSignBit >> (remainderResult & 0xff),\n                    remainderShifted >> (remainderResult & 0xff) | dividendSignBit << (0x20 - remainderResult & 0xff));\n  }\n  return CONCAT44(quotientResult,dividendSignBit >> (remainderResult - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_quotient_and_remainder_0800016c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "iVar1": "quotientNegative",
                "bVar2": "carry",
                "uVar3": "dividendShifted",
                "uVar4": "divisorShifted",
                "uVar5": "remainderShifted",
                "iVar6": "quotientShifted",
                "uVar7": "dividendSignBit",
                "uVar8": "remainderSignBit",
                "uVar9": "quotientResult",
                "uVar10": "remainderResult",
                "uVar11": "remainderTemp",
                "uVar12": "quotientTemp",
                "bVar13": "isQuotientZero",
                "bVar14": "isRemainderZero",
                "bVar15": "isCarrySet"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_080070b0",
                "FUN_08006c0c",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "calculate_shifted_value_08000404",
            "code": "\nulonglong calculateShiftedValue_08000404(uint input)\n\n{\n  uint result;\n  uint absValue;\n  uint shiftAmount;\n  int leadingZeros;\n  uint shiftedValue;\n  uint signBit;\n  uint shiftedSignBit;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absValue = input;\n  if ((int)signBit < 0) {\n    absValue = -input;\n  }\n  result = 0;\n  leadingZeros = LZCOUNT(absValue);\n  shiftedValue = leadingZeros + 0x15;\n  isCarry = SBORROW4(shiftedValue,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (shiftedValue < 0x20) {\n    isCarry = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = shiftedValue;\n    if (!isZero && isCarry == false) {\n      result = absValue << shiftedValue;\n      absValue = absValue >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    shiftedSignBit = 0x20 - shiftAmount;\n  }\n  absValue = absValue << (shiftAmount & 0xff);\n  if (isZero || isNegative != isCarry) {\n    absValue = absValue | 0U >> (shiftedSignBit & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    result = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (shiftedValue < 0x433) {\n    return CONCAT44(absValue + (0x432 - shiftedValue) * 0x100000 | signBit,result);\n  }\n  shiftAmount = ~(0x432 - shiftedValue);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absValue >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absValue >> (shiftAmount & 0xff),\n                    result >> (shiftAmount & 0xff) | absValue << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,result >> (0x20 - (0xcU - leadingZeros) & 0xff) | absValue << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "calculate_shifted_value_08000404",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "absValue",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedValue",
                "uVar6": "signBit",
                "in_r12": "shiftedSignBit",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isCarry"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "reverse_bits_08000428",
            "code": "\nulonglong reverseBits_08000428(uint input,undefined4 var1,undefined4 var2,uint mask)\n\n{\n  uint msbFlag;\n  uint result;\n  uint combined;\n  uint shiftAmount;\n  uint temp;\n  int count;\n  uint shiftVal;\n  uint remVal;\n  bool isNegative;\n  bool isZero;\n  bool carryFlag;\n  \n  temp = input << 1;\n  isZero = temp == 0;\n  msbFlag = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftAmount = (uint)((int)temp >> 3) >> 1;\n  combined = msbFlag | shiftAmount;\n  input = input << 0x1d;\n  if (!isZero) {\n    mask = temp & 0xff000000;\n    isZero = mask == 0;\n  }\n  if (!isZero) {\n    isZero = mask == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(combined,input) ^ 0x3800000000000000;\n  }\n  if (temp == 0 || mask == 0xff000000) {\n    return CONCAT44(combined,input);\n  }\n  result = input;\n  temp = shiftAmount;\n  if (shiftAmount == 0) {\n    result = 0;\n    temp = input;\n  }\n  count = LZCOUNT(temp);\n  if (shiftAmount == 0) {\n    count = count + 0x20;\n  }\n  shiftVal = count - 0xb;\n  carryFlag = SBORROW4(shiftVal,0x20);\n  shiftAmount = count - 0x2b;\n  isZero = (int)shiftAmount < 0;\n  isNegative = shiftAmount == 0;\n  if ((int)shiftVal < 0x20) {\n    carryFlag = SCARRY4(shiftAmount,0xc);\n    count = count + -0x1f;\n    isZero = count < 0;\n    isNegative = count == 0;\n    shiftAmount = shiftVal;\n    if (!isNegative && isZero == carryFlag) {\n      result = temp << (shiftVal & 0xff);\n      temp = temp >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isNegative || isZero != carryFlag) {\n    remVal = 0x20 - shiftAmount;\n  }\n  temp = temp << (shiftAmount & 0xff);\n  if (isNegative || isZero != carryFlag) {\n    temp = temp | result >> (remVal & 0xff);\n  }\n  if (isNegative || isZero != carryFlag) {\n    result = result << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shiftVal < 0x381) {\n    return CONCAT44(temp + (0x380 - shiftVal) * 0x100000 | msbFlag,result);\n  }\n  shiftAmount = ~(0x380 - shiftVal);\n  if ((int)shiftAmount < 0x1f) {\n    count = shiftAmount - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(shiftAmount - 0x1f,0xc)) {\n      return CONCAT44(combined,result >> (0x20 - (0xcU - count) & 0xff) | temp << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(msbFlag | temp >> (shiftAmount & 0xff),\n                    result >> (shiftAmount & 0xff) | temp << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(combined,temp >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "reverse_bits_08000428",
                "param_1": "input",
                "param_2": "var1",
                "param_3": "var2",
                "param_4": "mask",
                "uVar1": "msbFlag",
                "uVar2": "result",
                "uVar3": "combined",
                "uVar4": "shiftAmount",
                "uVar5": "temp",
                "iVar6": "count",
                "uVar7": "shiftVal",
                "in_r12": "remVal",
                "bVar8": "isNegative",
                "bVar9": "isZero",
                "bVar10": "carryFlag"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_product_080004d0",
            "code": "\nulonglong calculateProduct_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong concatenatedInput;\n  \n  concatenatedInput = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    concatenatedInput = FUN_080006ac();\n  }\n  temp1 = (uint)(concatenatedInput >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)concatenatedInput | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)concatenatedInput | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (concatenatedInput & 0xffffffff) * (ulonglong)input3;\n    concatenatedInput = (concatenatedInput & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)concatenatedInput;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (concatenatedInput >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_product_080004d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "temp3",
                "uVar6": "temp4",
                "unaff_r5": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "concatenatedInput"
            },
            "calling": [
                "FUN_080071c0",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08003330"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "reverse_bitwise_operation_080006ac",
            "code": "\nulonglong reverse_bitwise_operation_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_check1;\n  uint bit_check2;\n  uint bit_check3;\n  uint bit_check4;\n  uint bit_check5;\n  bool is_zero;\n  \n  bit_check3 = bit_check5 & input_4 >> 0x14;\n  if (bit_check2 != bit_check5 && bit_check3 != bit_check5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_check2 == 0) {\n      bit_check4 = input_2 & 0x80000000;\n      do {\n        bit_check1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_check1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_check4;\n      if (bit_check3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_check3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_check3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit_check4 = input_2;\n  if (((!is_zero) && ((bit_check2 != bit_check5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_check3 != bit_check5 || (input_1 = input_3, bit_check4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_check4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "reverse_bitwise_operation_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_check1",
                "unaff_r4": "bit_check2",
                "uVar2": "bit_check3",
                "uVar3": "bit_check4",
                "in_r12": "bit_check5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_floating_point_08000724",
            "code": "\nulonglong calculateFloatingPoint_08000724(undefined4 sign,uint exponent,uint mantissa,uint flags)\n\n{\n  uint mantissaBit;\n  uint exponentBit;\n  uint mantissaShifted;\n  uint exponentShifted;\n  uint mantissaComparison;\n  uint mantissaDiff;\n  uint resultSign;\n  int exponentDiff;\n  uint resultBit;\n  uint flagsShifted;\n  uint exponentComparison;\n  uint resultExponent;\n  uint mantissaRemainder;\n  uint checkBits;\n  bool isZero;\n  bool isEqual;\n  bool isNegative;\n  undefined8 mantissaBit7;\n  \n  mantissaBit7 = CONCAT44(exponent,sign);\n  checkBits = 0x7ff;\n  resultSign = exponent >> 0x14 & 0x7ff;\n  isZero = resultSign == 0;\n  if (!isZero) {\n    flagsShifted = flags >> 0x14 & 0x7ff;\n    isZero = flagsShifted == 0;\n  }\n  if (!isZero) {\n    isZero = resultSign == 0x7ff;\n  }\n  if (!isZero) {\n    isZero = flagsShifted == 0x7ff;\n  }\n  if (isZero) {\n    mantissaBit7 = FUN_08000892();\n  }\n  resultBit = (uint)((ulonglong)mantissaBit7 >> 0x20);\n  resultExponent = (uint)mantissaBit7;\n  exponentDiff = resultSign - flagsShifted;\n  if ((mantissa | flags << 0xc) == 0) {\n    resultSign = (resultBit ^ flags) & 0x80000000 | resultBit & 0xfffff;\n    isNegative = SCARRY4(exponentDiff,checkBits >> 1);\n    resultBit = exponentDiff + (checkBits >> 1);\n    isZero = (int)resultBit < 0;\n    isEqual = resultBit == 0;\n    if (!isEqual && isZero == isNegative) {\n      isNegative = SBORROW4(checkBits,resultBit);\n      isZero = (int)(checkBits - resultBit) < 0;\n      isEqual = checkBits == resultBit;\n    }\n    if (!isEqual && isZero == isNegative) {\n      resultSign = resultSign | resultBit * 0x100000;\n    }\n    if (!isEqual && isZero == isNegative) {\n      return CONCAT44(resultSign,resultExponent);\n    }\n    resultSign = resultSign | 0x100000;\n    checkBits = 0;\n    isEqual = SBORROW4(resultBit,1);\n    resultBit = resultBit - 1;\n    isZero = resultBit == 0;\n    mantissaShifted = resultBit;\n  }\n  else {\n    mantissaShifted = (flags << 0xc) >> 4 | 0x10000000 | mantissa >> 0x18;\n    checkBits = mantissa << 8;\n    exponentComparison = (resultBit << 0xc) >> 4 | 0x10000000 | resultExponent >> 0x18;\n    resultExponent = resultExponent * 0x100;\n    resultSign = (resultBit ^ flags) & 0x80000000;\n    isZero = mantissaShifted <= exponentComparison;\n    if (exponentComparison == mantissaShifted) {\n      isZero = checkBits <= resultExponent;\n    }\n    exponentDiff = exponentDiff + (uint)isZero;\n    resultBit = exponentDiff + 0x3fd;\n    if (isZero == false) {\n      mantissaShifted = mantissaShifted >> 1;\n      checkBits = (uint)((mantissa >> 0x18 & 1) != 0) << 0x1f | checkBits >> 1;\n    }\n    mantissaRemainder = resultExponent - checkBits;\n    exponentComparison = (exponentComparison - mantissaShifted) - (uint)(resultExponent < checkBits);\n    exponentShifted = mantissaShifted >> 1;\n    mantissaBit = (uint)((mantissaShifted & 1) != 0) << 0x1f | checkBits >> 1;\n    resultExponent = 0x100000;\n    mantissaShifted = 0x80000;\n    while( true ) {\n      isZero = mantissaBit <= mantissaRemainder;\n      if (exponentShifted < exponentComparison || exponentComparison - exponentShifted < (uint)isZero) {\n        mantissaRemainder = mantissaRemainder - mantissaBit;\n        resultExponent = resultExponent | mantissaShifted;\n        exponentComparison = (exponentComparison - exponentShifted) - (uint)!isZero;\n      }\n      mantissaComparison = exponentShifted >> 1;\n      mantissaBit = (uint)((exponentShifted & 1) != 0) << 0x1f | mantissaBit >> 1;\n      isEqual = mantissaBit <= mantissaRemainder;\n      isZero = exponentComparison - mantissaComparison < (uint)isEqual;\n      checkBits = exponentComparison;\n      if (mantissaComparison < exponentComparison || isZero) {\n        mantissaRemainder = mantissaRemainder - mantissaBit;\n        checkBits = (exponentComparison - mantissaComparison) - (uint)!isEqual;\n      }\n      if (mantissaComparison < exponentComparison || isZero) {\n        resultExponent = resultExponent | mantissaShifted >> 1;\n      }\n      exponentComparison = exponentShifted >> 2;\n      exponentBit = (uint)((mantissaComparison & 1) != 0) << 0x1f | mantissaBit >> 1;\n      isEqual = exponentBit <= mantissaRemainder;\n      isZero = checkBits - exponentComparison < (uint)isEqual;\n      mantissaComparison = checkBits;\n      if (exponentComparison < checkBits || isZero) {\n        mantissaRemainder = mantissaRemainder - exponentBit;\n        mantissaComparison = (checkBits - exponentComparison) - (uint)!isEqual;\n      }\n      if (exponentComparison < checkBits || isZero) {\n        resultExponent = resultExponent | mantissaShifted >> 2;\n      }\n      mantissaDiff = exponentShifted >> 3;\n      mantissaBit = (uint)((exponentComparison & 1) != 0) << 0x1f | exponentBit >> 1;\n      isEqual = mantissaBit <= mantissaRemainder;\n      isZero = mantissaComparison - mantissaDiff < (uint)isEqual;\n      exponentComparison = mantissaComparison;\n      if (mantissaDiff < mantissaComparison || isZero) {\n        mantissaRemainder = mantissaRemainder - mantissaBit;\n        exponentComparison = (mantissaComparison - mantissaDiff) - (uint)!isEqual;\n      }\n      if (mantissaDiff < mantissaComparison || isZero) {\n        resultExponent = resultExponent | mantissaShifted >> 3;\n      }\n      checkBits = exponentComparison | mantissaRemainder;\n      if (checkBits == 0) break;\n      exponentComparison = exponentComparison << 4 | mantissaRemainder >> 0x1c;\n      mantissaRemainder = mantissaRemainder << 4;\n      exponentShifted = exponentShifted & 0xfffffff8 | mantissaBit >> 0x1d;\n      mantissaBit = (exponentBit >> 1) << 3;\n      mantissaShifted = mantissaShifted >> 4;\n      if (mantissaShifted == 0) {\n        mantissaDiff = exponentShifted;\n        if ((resultSign & 0x100000) != 0) goto LAB_08000842;\n        resultSign = resultSign | resultExponent;\n        resultExponent = 0;\n        mantissaShifted = 0x80000000;\n      }\n    }\n    if ((resultSign & 0x100000) == 0) {\n      resultSign = resultSign | resultExponent;\n      resultExponent = 0;\n    }\nLAB_08000842:\n    isNegative = 0xfc < resultBit;\n    isEqual = SBORROW4(resultBit,0xfd);\n    exponentShifted = exponentDiff + 0x300;\n    isZero = exponentShifted == 0;\n    mantissaShifted = exponentShifted;\n    if (isNegative && !isZero) {\n      isNegative = 0x6ff < exponentShifted;\n      isEqual = SBORROW4(exponentShifted,0x700);\n      mantissaShifted = exponentDiff - 0x400;\n      isZero = exponentShifted == 0x700;\n    }\n    if (!isNegative || isZero) {\n      isZero = mantissaDiff <= exponentComparison;\n      if (exponentComparison == mantissaDiff) {\n        isZero = mantissaBit <= mantissaRemainder;\n      }\n      if (exponentComparison == mantissaDiff && mantissaRemainder == mantissaBit) {\n        isZero = (resultExponent & 1) != 0;\n      }\n      return CONCAT44(resultSign + resultBit * 0x100000 + (uint)CARRY4(resultExponent,(uint)isZero),resultExponent + isZero);\n    }\n  }\n  if (!isZero && (int)mantissaShifted < 0 == isEqual) {\n    return (ulonglong)(resultSign & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isNegative = SCARRY4(resultBit,0x36);\n  isZero = (int)(resultBit + 0x36) < 0;\n  isEqual = resultBit == 0xffffffca;\n  if (isEqual || isZero != isNegative) {\n    resultExponent = 0;\n  }\n  if (isEqual || isZero != isNegative) {\n    resultSign = resultSign & 0x80000000;\n  }\n  if (isEqual || isZero != isNegative) {\n    return CONCAT44(resultSign,resultExponent);\n  }\n  mantissaShifted = -resultBit;\n  exponentComparison = mantissaShifted - 0x20;\n  if (0x1f < (int)mantissaShifted) {\n    mantissaShifted = resultExponent >> (exponentComparison & 0xff) | resultSign << (0x20 - exponentComparison & 0xff);\n    resultBit = (resultSign >> (exponentComparison & 0xff) & ~((resultSign & 0x80000000) >> (exponentComparison & 0xff))) -\n            ((int)mantissaShifted >> 0x1f);\n    if ((checkBits | resultExponent << (0x20 - exponentComparison & 0xff) | mantissaShifted << 1) == 0) {\n      resultBit = resultBit & ~(mantissaShifted >> 0x1f);\n    }\n    return CONCAT44(resultSign,resultBit) & 0x80000000ffffffff;\n  }\n  exponentDiff = mantissaShifted - 0x14;\n  if (exponentDiff != 0 && exponentDiff < 0 == SCARRY4(exponentComparison,0xc)) {\n    resultBit = 0xc - exponentDiff;\n    mantissaShifted = resultExponent << (resultBit & 0xff);\n    resultExponent = resultExponent >> (0x20 - resultBit & 0xff) | resultSign << (resultBit & 0xff);\n    resultBit = resultExponent + -((int)mantissaShifted >> 0x1f);\n    if ((checkBits | mantissaShifted << 1) == 0) {\n      resultBit = resultBit & ~(mantissaShifted >> 0x1f);\n    }\n    return CONCAT44((resultSign & 0x80000000) + (uint)CARRY4(resultExponent,-((int)mantissaShifted >> 0x1f)),resultBit);\n  }\n  exponentComparison = resultExponent << (resultBit + 0x20 & 0xff);\n  resultExponent = resultExponent >> (mantissaShifted & 0xff) | resultSign << (resultBit + 0x20 & 0xff);\n  resultBit = resultExponent + -((int)exponentComparison >> 0x1f);\n  if ((checkBits | exponentComparison << 1) == 0) {\n    resultBit = resultBit & ~(exponentComparison >> 0x1f);\n  }\n  return CONCAT44((resultSign & 0x80000000) +\n                  ((resultSign & 0x7fffffff) >> (mantissaShifted & 0xff)) +\n                  (uint)CARRY4(resultExponent,-((int)exponentComparison >> 0x1f)),resultBit);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_floating_point_08000724",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "mantissa",
                "param_4": "flags",
                "uVar1": "mantissaBit",
                "uVar2": "exponentBit",
                "uVar3": "mantissaShifted",
                "uVar4": "exponentShifted",
                "uVar5": "mantissaComparison",
                "uVar6": "mantissaDiff",
                "uVar7": "resultSign",
                "iVar8": "exponentDiff",
                "uVar9": "resultBit",
                "unaff_r5": "flagsShifted",
                "uVar10": "exponentComparison",
                "uVar11": "resultExponent",
                "uVar12": "mantissaRemainder",
                "uVar13": "checkBits",
                "bVar14": "isZero",
                "bVar15": "isEqual",
                "bVar16": "isNegative"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005900",
                "FUN_08006c0c",
                "FUN_08005bc8",
                "FUN_08006228",
                "FUN_08003330",
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "calculate_floating_point_08000892",
            "code": "\nulonglong calculateFloatingPoint_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool isZero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "calculate_floating_point_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equality_and_conditions_08000904",
            "code": "\nuint checkEqualityAndConditions_08000904(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (input_1 | input_2 << 1) == 0;\n  if (isZero) {\n    isZero = (input_3 | input_4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = input_2 == input_4;\n  }\n  if (isZero) {\n    isZero = input_1 == input_3;\n  }\n  if (!isZero) {\n    result = input_2 ^ input_4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = input_2 == input_4;\n    }\n    isNegative = -1 < (int)result && input_4 <= input_2;\n    if (isZero) {\n      isNegative = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!isNegative) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equality_and_conditions_08000904",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "initialize_parameters_08000980",
            "code": "\nvoid initializeParameters_08000980(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  FUN_08000990(input3,input4,input1,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "initialize_parameters_08000980",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "execute_and_return_param_08000990",
            "code": "\nundefined4 execute_and_return_param_08000990(undefined4 input_value)\n\n{\n  FUN_08000904();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "execute_and_return_param_08000990",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009c8",
                "FUN_080009a0",
                "FUN_080009b4"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_if_data_exists_080009a0",
            "code": "\nbool check_if_data_exists_080009a0(void)\n\n{\n  char result;\n  \n  FUN_08000990();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_if_data_exists_080009a0",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "check_null_termination_080009b4",
            "code": "\nbool check_null_termination_080009b4(void)\n\n{\n  char input_character;\n  \n  FUN_08000990();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "check_null_termination_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005bc8"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_cy_zr_080009c8",
            "code": "\nbool check_CY_ZR_080009c8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000990();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_cy_zr_080009c8",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_if_null_terminated_080009f0",
            "code": "\nbool check_if_null_terminated_080009f0(void)\n\n{\n  char input_character;\n  \n  FUN_08000980();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_if_null_terminated_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "is_valid_parameters_08000a04",
            "code": "\nundefined4 is_valid_parameters_08000a04(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "is_valid_parameters_08000a04",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint inputA,uint inputB)\n\n{\n  uint result;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  bool isZero;\n  bool isLessThan;\n  \n  tempVar1 = inputB * 2;\n  isLessThan = tempVar1 < 0x70000000;\n  tempVar2 = tempVar1 + 0x90000000;\n  result = tempVar2;\n  if (!isLessThan) {\n    tempVar3 = tempVar1 + 0x8fe00000;\n    result = tempVar3;\n  }\n  isZero = result == 0;\n  if (!isLessThan && tempVar2 >= 0x200000) {\n    isZero = tempVar3 == 0x1fc00000;\n  }\n  if (((isLessThan || tempVar2 < 0x200000) || 0x1fc00000 < tempVar3) || isZero) {\n    if ((inputB & 0x40000000) != 0) {\n      if (((int)tempVar1 >> 0x15 == -1) && ((inputA | inputB << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputB & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(tempVar1 + 0x92e00000) < 0 != SCARRY4(tempVar2,0x2e00000)) {\n      return inputB & 0x80000000;\n    }\n    tempVar1 = 0x18 - (tempVar1 + 0x92e00000 >> 0x15);\n    result = inputA >> (tempVar1 & 0xff);\n    if (inputA << (0x20 - tempVar1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    tempVar2 = inputB & 0x1fffff | 0x100000;\n    inputA = result | tempVar2 << (0x20 - tempVar1 & 0xff);\n    tempVar2 = (tempVar2 >> (tempVar1 & 0xff)) << 1;\n  }\n  result = (inputB & 0x80000000 | inputA >> 0x1d) + tempVar2 * 4 + (uint)(0x7fffffff < inputA * 8);\n  if (inputA * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "inputA",
                "param_2": "inputB",
                "uVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "in_r12": "tempVar3",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_floating_point_08000ad8",
            "code": "\nuint calculateFloatingPoint_08000ad8(uint inputValue,uint inputMask,undefined4 param_3,uint invertedMask)\n\n{\n  int shiftedValue;\n  int shiftedInputMask;\n  uint inputMaskInverted;\n  uint tempValue;\n  uint shiftedValue;\n  uint constantValue;\n  uint difference;\n  bool isConditionMet;\n  \n  inputMaskInverted = inputMask ^ 0x80000000;\n  shiftedValue = inputValue << 1;\n  isConditionMet = shiftedValue == 0;\n  if (!isConditionMet) {\n    invertedMask = inputMask << 1;\n    isConditionMet = invertedMask == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = shiftedValue == invertedMask;\n  }\n  shiftedValue = (int)shiftedValue >> 0x18;\n  if (!isConditionMet) {\n    isConditionMet = shiftedValue == -1;\n  }\n  if (!isConditionMet) {\n    isConditionMet = (int)invertedMask >> 0x18 == -1;\n  }\n  if (isConditionMet) {\n    shiftedInputMask = (int)(inputMask << 1) >> 0x18;\n    if (shiftedValue == -1 || shiftedInputMask == -1) {\n      shiftedValue = inputMaskInverted;\n      if (shiftedValue == -1) {\n        shiftedValue = inputValue;\n      }\n      if (shiftedValue != -1 || shiftedInputMask != -1) {\n        inputMaskInverted = shiftedValue;\n      }\n      isConditionMet = (shiftedValue & 0x7fffff) == 0;\n      if (isConditionMet) {\n        isConditionMet = (inputMaskInverted & 0x7fffff) == 0;\n      }\n      if (isConditionMet) {\n        isConditionMet = shiftedValue == inputMaskInverted;\n      }\n      if (!isConditionMet) {\n        shiftedValue = shiftedValue | 0x400000;\n      }\n      return shiftedValue;\n    }\n    if (((inputValue ^ inputMaskInverted) & 0x7fffffff) != 0) {\n      if (shiftedValue == 0) {\n        inputValue = inputMaskInverted;\n      }\n      return inputValue;\n    }\n    if (inputValue != inputMaskInverted) {\n      return 0;\n    }\n    if ((shiftedValue & 0xff000000) == 0) {\n      inputMaskInverted = inputValue << 1;\n      if ((inputValue & 0x80000000) != 0) {\n        inputMaskInverted = inputMaskInverted | 0x80000000;\n      }\n      return inputMaskInverted;\n    }\n    if (shiftedValue < 0xfe000000) {\n      return inputValue + 0x800000;\n    }\n    inputValue = inputValue & 0x80000000;\nLAB_08000c12:\n    return inputValue | 0x7f800000;\n  }\n  shiftedValue = shiftedValue >> 0x18;\n  invertedMask = invertedMask >> 0x18;\n  difference = invertedMask - shiftedValue;\n  isConditionMet = difference != 0;\n  constantValue = shiftedValue;\n  if (isConditionMet && shiftedValue <= invertedMask) {\n    constantValue = shiftedValue + difference;\n  }\n  if (isConditionMet && shiftedValue <= invertedMask) {\n    inputMaskInverted = inputMaskInverted ^ inputValue;\n  }\n  if (isConditionMet && shiftedValue <= invertedMask) {\n    inputValue = inputValue ^ inputMaskInverted;\n  }\n  if (isConditionMet && shiftedValue <= invertedMask) {\n    inputMaskInverted = inputMaskInverted ^ inputValue;\n  }\n  if (invertedMask < shiftedValue) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputValue;\n  }\n  shiftedValue = inputValue & 0xffffff | 0x800000;\n  if ((inputValue & 0x80000000) != 0) {\n    shiftedValue = -shiftedValue;\n  }\n  tempValue = inputMaskInverted & 0xffffff | 0x800000;\n  if ((inputMaskInverted & 0x80000000) != 0) {\n    tempValue = -tempValue;\n  }\n  if (constantValue == difference) {\n    tempValue = tempValue ^ 0x800000;\n    if (constantValue == 0) {\n      shiftedValue = shiftedValue ^ 0x800000;\n      constantValue = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedValue = shiftedValue + ((int)tempValue >> (difference & 0xff));\n  tempValue = tempValue << (0x20 - difference & 0xff);\n  inputValue = shiftedValue & 0x80000000;\n  if ((int)shiftedValue < 0) {\n    isConditionMet = tempValue != 0;\n    tempValue = -tempValue;\n    shiftedValue = -shiftedValue - (uint)isConditionMet;\n  }\n  if (shiftedValue < 0x800000) {\n    inputMaskInverted = tempValue & 0x80000000;\n    tempValue = tempValue << 1;\n    shiftedValue = shiftedValue * 2 + (uint)(inputMaskInverted != 0);\n    inputMaskInverted = constantValue - 2;\n    if ((shiftedValue & 0x800000) == 0) {\n      difference = LZCOUNT(shiftedValue) - 8;\n      shiftedValue = shiftedValue << (difference & 0xff);\n      if ((int)inputMaskInverted < (int)difference) {\n        shiftedValue = shiftedValue >> (-(inputMaskInverted - difference) & 0xff);\n      }\n      else {\n        shiftedValue = shiftedValue + (inputMaskInverted - difference) * 0x800000;\n      }\n      return shiftedValue | inputValue;\n    }\n  }\n  else {\n    inputMaskInverted = constantValue - 1;\n    if (0xffffff < shiftedValue) {\n      inputMaskInverted = shiftedValue & 1;\n      shiftedValue = shiftedValue >> 1;\n      tempValue = (uint)(inputMaskInverted != 0) << 0x1f | tempValue >> 1;\n      inputMaskInverted = constantValue;\n      if (0xfd < constantValue) goto LAB_08000c12;\n    }\n  }\n  shiftedValue = shiftedValue + inputMaskInverted * 0x800000 + (uint)(0x7fffffff < tempValue);\n  if (tempValue == 0x80000000) {\n    shiftedValue = shiftedValue & 0xfffffffe;\n  }\n  return shiftedValue | inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_floating_point_08000ad8",
                "param_1": "inputValue",
                "param_2": "inputMask",
                "param_4": "invertedMask",
                "iVar1": "shiftedValue",
                "iVar2": "shiftedInputMask",
                "uVar3": "inputMaskInverted",
                "uVar4": "tempValue",
                "uVar5": "shiftedValue",
                "uVar6": "constantValue",
                "uVar7": "difference",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08002ee8",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_floating_point_08000adc",
            "code": "\nuint calculateFloatingPoint_08000adc(uint number1,uint number2,undefined4 parameter3,uint parameter4)\n\n{\n  int int1;\n  int int2;\n  uint uint1;\n  uint uint2;\n  uint uint3;\n  uint uint4;\n  bool bool1;\n  \n  uint2 = number1 << 1;\n  bool1 = uint2 == 0;\n  if (!bool1) {\n    parameter4 = number2 << 1;\n    bool1 = parameter4 == 0;\n  }\n  if (!bool1) {\n    bool1 = uint2 == parameter4;\n  }\n  int1 = (int)uint2 >> 0x18;\n  if (!bool1) {\n    bool1 = int1 == -1;\n  }\n  if (!bool1) {\n    bool1 = (int)parameter4 >> 0x18 == -1;\n  }\n  if (bool1) {\n    int2 = (int)(number2 << 1) >> 0x18;\n    if (int1 == -1 || int2 == -1) {\n      uint2 = number2;\n      if (int1 == -1) {\n        uint2 = number1;\n      }\n      if (int1 != -1 || int2 != -1) {\n        number2 = uint2;\n      }\n      bool1 = (uint2 & 0x7fffff) == 0;\n      if (bool1) {\n        bool1 = (number2 & 0x7fffff) == 0;\n      }\n      if (bool1) {\n        bool1 = uint2 == number2;\n      }\n      if (!bool1) {\n        uint2 = uint2 | 0x400000;\n      }\n      return uint2;\n    }\n    if (((number1 ^ number2) & 0x7fffffff) != 0) {\n      if (uint2 == 0) {\n        number1 = number2;\n      }\n      return number1;\n    }\n    if (number1 != number2) {\n      return 0;\n    }\n    if ((uint2 & 0xff000000) == 0) {\n      uint2 = number1 << 1;\n      if ((number1 & 0x80000000) != 0) {\n        uint2 = uint2 | 0x80000000;\n      }\n      return uint2;\n    }\n    if (uint2 < 0xfe000000) {\n      return number1 + 0x800000;\n    }\n    number1 = number1 & 0x80000000;\nLAB_08000c12:\n    return number1 | 0x7f800000;\n  }\n  uint2 = uint2 >> 0x18;\n  parameter4 = parameter4 >> 0x18;\n  uint4 = parameter4 - uint2;\n  bool1 = uint4 != 0;\n  uint3 = uint2;\n  if (bool1 && uint2 <= parameter4) {\n    uint3 = uint2 + uint4;\n  }\n  if (bool1 && uint2 <= parameter4) {\n    number2 = number2 ^ number1;\n  }\n  if (bool1 && uint2 <= parameter4) {\n    number1 = number1 ^ number2;\n  }\n  if (bool1 && uint2 <= parameter4) {\n    number2 = number2 ^ number1;\n  }\n  if (parameter4 < uint2) {\n    uint4 = -uint4;\n  }\n  if (0x19 < uint4) {\n    return number1;\n  }\n  uint2 = number1 & 0xffffff | 0x800000;\n  if ((number1 & 0x80000000) != 0) {\n    uint2 = -uint2;\n  }\n  uint1 = number2 & 0xffffff | 0x800000;\n  if ((number2 & 0x80000000) != 0) {\n    uint1 = -uint1;\n  }\n  if (uint3 == uint4) {\n    uint1 = uint1 ^ 0x800000;\n    if (uint3 == 0) {\n      uint2 = uint2 ^ 0x800000;\n      uint3 = 1;\n    }\n    else {\n      uint4 = uint4 - 1;\n    }\n  }\n  uint2 = uint2 + ((int)uint1 >> (uint4 & 0xff));\n  uint1 = uint1 << (0x20 - uint4 & 0xff);\n  number1 = uint2 & 0x80000000;\n  if ((int)uint2 < 0) {\n    bool1 = uint1 != 0;\n    uint1 = -uint1;\n    uint2 = -uint2 - (uint)bool1;\n  }\n  if (uint2 < 0x800000) {\n    uint4 = uint1 & 0x80000000;\n    uint1 = uint1 << 1;\n    uint2 = uint2 * 2 + (uint)(uint4 != 0);\n    uint4 = uint3 - 2;\n    if ((uint2 & 0x800000) == 0) {\n      uint3 = LZCOUNT(uint2) - 8;\n      uint2 = uint2 << (uint3 & 0xff);\n      if ((int)uint4 < (int)uint3) {\n        uint2 = uint2 >> (-(uint4 - uint3) & 0xff);\n      }\n      else {\n        uint2 = uint2 + (uint4 - uint3) * 0x800000;\n      }\n      return uint2 | number1;\n    }\n  }\n  else {\n    uint4 = uint3 - 1;\n    if (0xffffff < uint2) {\n      uint4 = uint2 & 1;\n      uint2 = uint2 >> 1;\n      uint1 = (uint)(uint4 != 0) << 0x1f | uint1 >> 1;\n      uint4 = uint3;\n      if (0xfd < uint3) goto LAB_08000c12;\n    }\n  }\n  uint2 = uint2 + uint4 * 0x800000 + (uint)(0x7fffffff < uint1);\n  if (uint1 == 0x80000000) {\n    uint2 = uint2 & 0xfffffffe;\n  }\n  return uint2 | number1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_08000adc",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "iVar1": "int1",
                "iVar2": "int2",
                "uVar3": "uint1",
                "uVar4": "uint2",
                "uVar5": "uint3",
                "uVar6": "uint4",
                "bVar7": "bool1"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_hash_08000c3c",
            "code": "\nuint calculateHash_08000c3c(uint input)\n\n{\n  uint leadingZeros;\n  uint shift;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shift = leadingZeros - 8;\n  constant = shift * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shift & 0xff);\n    leadingZeros = constant + (input << (shift & 0xff)) +\n            (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shift = input << leadingZeros + 0x18;\n  leadingZeros = constant + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n  if ((shift & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shift >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_hash_08000c3c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shift",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "compute_unsigned_result_08000c44",
            "code": "\nuint computeUnsignedResult_08000c44(uint inputValue)\n\n{\n  uint leadingZerosCount;\n  uint shiftCount;\n  uint signBit;\n  int intermediateResult;\n  \n  signBit = inputValue & 0x80000000;\n  if ((int)signBit < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZerosCount = LZCOUNT(inputValue);\n  shiftCount = leadingZerosCount - 8;\n  intermediateResult = ((signBit | 0x4b000000) - 0x800000) + shiftCount * -0x800000;\n  if (7 < leadingZerosCount) {\n    leadingZerosCount = 0 << (shiftCount & 0xff);\n    signBit = intermediateResult + (inputValue << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < leadingZerosCount);\n    if (leadingZerosCount == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftCount = inputValue << leadingZerosCount + 0x18;\n  signBit = intermediateResult + ((inputValue >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftCount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "compute_unsigned_result_08000c44",
                "param_1": "inputValue",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftCount",
                "uVar3": "signBit",
                "iVar4": "intermediateResult"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_0800411c",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002bf0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint num1,uint num2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sumExponents;\n  int adjustedExponent;\n  uint productLo;\n  int adjustedExponent2;\n  uint mangledBits;\n  bool check;\n  bool borrow;\n  \n  exponent1 = num1 >> 0x17 & 0xff;\n  check = exponent1 == 0;\n  if (!check) {\n    param4 = num2 >> 0x17 & 0xff;\n    check = param4 == 0;\n  }\n  if (!check) {\n    check = exponent1 == 0xff;\n  }\n  if (!check) {\n    check = param4 == 0xff;\n  }\n  if (check) {\n    param4 = num2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      check = num1 == 0 || num1 == 0x80000000;\n      result = num2;\n      if (num1 != 0 && num1 != 0x80000000) {\n        check = num2 == 0;\n        result = num1;\n      }\n      if (!check) {\n        check = num2 == 0x80000000;\n      }\n      mangledBits = result;\n      if (((check) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (mangledBits = num2, (num2 & 0x7fffff) != 0)))) {\n        return mangledBits | 0x7fc00000;\n      }\n      result = result ^ num2;\n      goto LAB_08000e3c;\n    }\n    check = (num1 & 0x7fffffff) == 0;\n    if (!check) {\n      check = (num2 & 0x7fffffff) == 0;\n    }\n    if (check) {\n      return (num1 ^ num2) & 0x80000000;\n    }\n    check = exponent1 == 0;\n    result = num1 & 0x80000000;\n    while( true ) {\n      if (check) {\n        num1 = num1 << 1;\n        check = (num1 & 0x800000) == 0;\n      }\n      if (!check) break;\n      exponent1 = exponent1 - 1;\n    }\n    num1 = num1 | result;\n    check = param4 == 0;\n    result = num2 & 0x80000000;\n    while( true ) {\n      if (check) {\n        num2 = num2 << 1;\n        check = (num2 & 0x800000) == 0;\n      }\n      if (!check) break;\n      param4 = param4 - 1;\n    }\n    num2 = num2 | result;\n  }\n  sumExponents = exponent1 + param4;\n  mangledBits = num1 ^ num2;\n  exponent1 = num1 << 9;\n  check = exponent1 == 0;\n  if (!check) {\n    num2 = num2 << 9;\n    check = num2 == 0;\n  }\n  if (check) {\n    if (exponent1 == 0) {\n      num2 = num2 << 9;\n    }\n    result = mangledBits & 0x80000000 | num1 & 0x7fffff | num2 >> 9;\n    borrow = SBORROW4(sumExponents,0x7f);\n    adjustedExponent = sumExponents + -0x7f;\n    check = adjustedExponent == 0;\n    adjustedExponent2 = adjustedExponent;\n    if (!check && 0x7e < sumExponents) {\n      borrow = SBORROW4(0xff,adjustedExponent);\n      adjustedExponent2 = 0xff - adjustedExponent;\n      check = adjustedExponent == 0xff;\n    }\n    if (!check && adjustedExponent2 < 0 == borrow) {\n      result = result | adjustedExponent * 0x800000;\n    }\n    if (!check && adjustedExponent2 < 0 == borrow) {\n      return result;\n    }\n    result = result | 0x800000;\n    productLo = 0;\n    borrow = SBORROW4(adjustedExponent,1);\n    mangledBits = sumExponents - 0x80;\n    check = mangledBits == 0;\n    exponent1 = mangledBits;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(num2 >> 5 | 0x8000000);\n    productLo = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    check = result < 0x800000;\n    if (check) {\n      result = result << 1;\n    }\n    if (check) {\n      result = result | productLo >> 0x1f;\n      productLo = productLo << 1;\n    }\n    result = mangledBits & 0x80000000 | result;\n    mangledBits = (sumExponents + -0x7f) - (uint)check;\n    borrow = SBORROW4(mangledBits,0xfd);\n    check = mangledBits == 0xfd;\n    exponent1 = mangledBits - 0xfd;\n    if (mangledBits < 0xfe) {\n      result = result + mangledBits * 0x800000 + (uint)(0x7fffffff < productLo);\n      if (productLo == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (check || (int)exponent1 < 0 != borrow) {\n    check = (int)(mangledBits + 0x19) < 0;\n    if (mangledBits == 0xffffffe7 || check != SCARRY4(mangledBits,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (mangledBits != 0xffffffe7 && check == SCARRY4(mangledBits,0x19)) {\n      exponent1 = (result << 1) >> (-mangledBits & 0xff);\n      mangledBits = result << (mangledBits + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((productLo | mangledBits << 1) == 0) {\n        exponent1 = exponent1 & ~(mangledBits >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "exponent1",
                "iVar4": "sumExponents",
                "iVar5": "adjustedExponent",
                "uVar6": "productLo",
                "iVar7": "adjustedExponent2",
                "uVar8": "mangledBits",
                "bVar9": "check",
                "bVar10": "borrow"
            },
            "calling": [
                "FUN_08004a30",
                "FUN_08002b48",
                "FUN_08004a84",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28",
                "FUN_08002bf0",
                "FUN_08002ec0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_float_08000e54",
            "code": "\nuint calculate_float_08000e54(uint input_1,uint input_2,undefined4 input_3,uint input_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  int temp_3;\n  uint temp_4;\n  int temp_5;\n  uint temp_6;\n  bool isZero;\n  bool isNegative;\n  bool temp_7;\n  \n  temp_2 = input_1 >> 0x17 & 0xff;\n  isZero = temp_2 == 0;\n  if (!isZero) {\n    input_4 = input_2 >> 0x17 & 0xff;\n    isZero = input_4 == 0;\n  }\n  if (!isZero) {\n    isZero = temp_2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = input_4 == 0xff;\n  }\n  if (isZero) {\n    input_4 = input_2 >> 0x17 & 0xff;\n    temp_6 = input_1;\n    if (temp_2 == 0xff) {\n      if (((input_1 & 0x7fffff) != 0) || (temp_6 = input_2, input_4 == 0xff)) {\nLAB_08000e4a:\n        return temp_6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (input_4 == 0xff) {\n        temp_6 = input_2;\n        if ((input_2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input_1 ^ input_2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      isZero = (input_1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (input_2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = temp_2 == 0;\n        temp_6 = input_1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input_1 = input_1 << 1;\n            isZero = (input_1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          temp_2 = temp_2 - 1;\n        }\n        input_1 = input_1 | temp_6;\n        isZero = input_4 == 0;\n        temp_6 = input_2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input_2 = input_2 << 1;\n            isZero = (input_2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          input_4 = input_4 - 1;\n        }\n        input_2 = input_2 | temp_6;\n        goto LAB_08000e6c;\n      }\n      if ((input_1 & 0x7fffffff) == 0) {\n        if ((input_2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input_1 = input_1 ^ input_2;\n  }\n  else {\nLAB_08000e6c:\n    temp_3 = temp_2 - input_4;\n    if (input_2 << 9 == 0) {\n      input_1 = (input_1 ^ input_2) & 0x80000000 | input_1 & 0x7fffff;\n      temp_7 = SCARRY4(temp_3,0x7f);\n      temp_5 = temp_3 + 0x7f;\n      isZero = temp_5 < 0;\n      isNegative = temp_5 == 0;\n      if (!isNegative && isZero == temp_7) {\n        temp_7 = SBORROW4(0xff,temp_5);\n        isZero = 0xff - temp_5 < 0;\n        isNegative = temp_5 == 0xff;\n      }\n      if (!isNegative && isZero == temp_7) {\n        input_1 = input_1 | temp_5 * 0x800000;\n      }\n      if (!isNegative && isZero == temp_7) {\n        return input_1;\n      }\n      input_1 = input_1 | 0x800000;\n      temp_2 = 0;\n      isNegative = SBORROW4(temp_5,1);\n      temp_4 = temp_3 + 0x7e;\n      isZero = temp_4 == 0;\n      temp_6 = temp_4;\n    }\n    else {\n      temp_1 = (input_2 << 9) >> 4 | 0x10000000;\n      temp_2 = (input_1 << 9) >> 4 | 0x10000000;\n      input_1 = (input_1 ^ input_2) & 0x80000000;\n      isZero = temp_1 <= temp_2;\n      if (!isZero) {\n        temp_2 = temp_2 << 1;\n      }\n      temp_4 = temp_3 + 0x7d + (uint)isZero;\n      temp_6 = 0x800000;\n      do {\n        if (temp_1 <= temp_2) {\n          temp_2 = temp_2 - temp_1;\n          input_1 = input_1 | temp_6;\n        }\n        isZero = temp_1 >> 1 <= temp_2;\n        if (isZero) {\n          temp_2 = temp_2 - (temp_1 >> 1);\n        }\n        if (isZero) {\n          input_1 = input_1 | temp_6 >> 1;\n        }\n        isZero = temp_1 >> 2 <= temp_2;\n        if (isZero) {\n          temp_2 = temp_2 - (temp_1 >> 2);\n        }\n        if (isZero) {\n          input_1 = input_1 | temp_6 >> 2;\n        }\n        isZero = temp_1 >> 3 <= temp_2;\n        if (isZero) {\n          temp_2 = temp_2 - (temp_1 >> 3);\n        }\n        if (isZero) {\n          input_1 = input_1 | temp_6 >> 3;\n        }\n        temp_2 = temp_2 * 0x10;\n        isZero = temp_2 == 0;\n        if (!isZero) {\n          temp_6 = temp_6 >> 4;\n          isZero = temp_6 == 0;\n        }\n      } while (!isZero);\n      isNegative = SBORROW4(temp_4,0xfd);\n      isZero = temp_4 == 0xfd;\n      temp_6 = temp_4 - 0xfd;\n      if (temp_4 < 0xfe) {\n        input_1 = input_1 + temp_4 * 0x800000 + (uint)(temp_1 <= temp_2);\n        if (temp_2 - temp_1 == 0) {\n          input_1 = input_1 & 0xfffffffe;\n        }\n        return input_1;\n      }\n    }\n    if (isZero || (int)temp_6 < 0 != isNegative) {\n      isZero = (int)(temp_4 + 0x19) < 0;\n      if (temp_4 == 0xffffffe7 || isZero != SCARRY4(temp_4,0x19)) {\n        input_1 = input_1 & 0x80000000;\n      }\n      if (temp_4 == 0xffffffe7 || isZero != SCARRY4(temp_4,0x19)) {\n        return input_1;\n      }\n      temp_6 = (input_1 << 1) >> (-temp_4 & 0xff);\n      temp_4 = input_1 << (temp_4 + 0x20 & 0xff);\n      temp_6 = ((uint)((input_1 & 0x80000000) != 0) << 0x1f | temp_6 >> 1) + (uint)((byte)temp_6 & 1);\n      if ((temp_2 | temp_4 << 1) == 0) {\n        temp_6 = temp_6 & ~(temp_4 >> 0x1f);\n      }\n      return temp_6;\n    }\n  }\n  return input_1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_float_08000e54",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "iVar3": "temp_3",
                "uVar4": "temp_4",
                "iVar5": "temp_5",
                "uVar6": "temp_6",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "temp_7"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08003330",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_comparison_08000f9c",
            "code": "\nuint calculate_comparison_08000f9c(uint operand_1,uint operand_2)\n\n{\n  bool is_negative;\n  uint operand_1_shifted;\n  uint operand_2_shifted;\n  uint combined_operands;\n  bool is_zero;\n  \n  operand_1_shifted = operand_1 * 2;\n  operand_2_shifted = operand_2 * 2;\n  if (((int)operand_1_shifted >> 0x18 == -1 || (int)operand_2_shifted >> 0x18 == -1) &&\n     ((((int)operand_1_shifted >> 0x18 == -1 && ((operand_1 & 0x7fffff) != 0)) ||\n      (((int)operand_2_shifted >> 0x18 == -1 && ((operand_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_operands = operand_1_shifted | operand_2 & 0x7fffffff;\n  is_zero = combined_operands == 0;\n  if (!is_zero) {\n    combined_operands = operand_1 ^ operand_2;\n    is_zero = combined_operands == 0;\n  }\n  is_negative = -1 < (int)combined_operands;\n  if (is_negative) {\n    operand_1 = operand_1_shifted + operand_2 * -2;\n    is_zero = operand_1 == 0;\n  }\n  if ((is_negative && operand_2_shifted <= operand_1_shifted) && !is_zero) {\n    operand_1 = (int)operand_2 >> 0x1f;\n  }\n  if (!is_negative || operand_2_shifted > operand_1_shifted) {\n    operand_1 = ~((int)operand_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    operand_1 = operand_1 | 1;\n  }\n  return operand_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_comparison_08000f9c",
                "param_1": "operand_1",
                "param_2": "operand_2",
                "uVar2": "operand_1_shifted",
                "uVar3": "operand_2_shifted",
                "uVar4": "combined_operands",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "initialize_data_08000ffc",
            "code": "\nvoid initializeData_08000ffc(undefined4 sourcePtr,undefined4 destinationPtr)\n\n{\n  FUN_08001004(destinationPtr,sourcePtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "initialize_data_08000ffc",
                "param_1": "sourcePtr",
                "param_2": "destinationPtr"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_parameters_08001004",
            "code": "\nundefined8 concatenate_parameters_08001004(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  FUN_08000f9c();\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_parameters_08001004",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "calling": [
                "FUN_08001014",
                "FUN_08001028",
                "FUN_08000ffc"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_if_not_zero_08001014",
            "code": "\nbool checkIfNotZero_08001014(void)\n\n{\n  char inputChar;\n  \n  FUN_08001004();\n  return inputChar != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_if_not_zero_08001014",
                "in_ZR": "inputChar"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "is_null_terminated_08001028",
            "code": "\nbool is_null_terminated_08001028(void)\n\n{\n  char input_char;\n  \n  FUN_08001004();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "is_null_terminated_08001028",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_cy_zr_08001050",
            "code": "\nbool check_CY_ZR_08001050(void)\n\n{\n  undefined is_zero;\n  undefined is_carry_flag;\n  \n  FUN_08000ffc();\n  return !(bool)is_carry_flag || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_cy_zr_08001050",
                "in_ZR": "is_zero",
                "in_CY": "is_carry_flag"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "is_null_terminated_08001064",
            "code": "\nbool is_null_terminated_08001064(void)\n\n{\n  char input_char;\n  \n  FUN_08000ffc();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "is_null_terminated_08001064",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "reverse_uint_08001078",
            "code": "\nuint reverse_uint_08001078(uint input)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08001078": "reverse_uint_08001078",
                "param_1": "input",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "get_shifted_value_080010c4",
            "code": "\nuint getShiftedValue_080010c4(uint value)\n\n{\n  uint shiftAmount;\n  \n  if (((value & 0x80000000) != 0) || (value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftAmount = 0x9e - ((value << 1) >> 0x18);\n  if (-1 < (int)shiftAmount) {\n    return (value << 8 | 0x80000000) >> (shiftAmount & 0xff);\n  }\n  if ((shiftAmount == 0xffffff9f) && ((value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "get_shifted_value_080010c4",
                "param_1": "value",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_program_08001104",
            "code": "\nundefined4 initializeProgram_08001104(undefined4 inputParameter)\n\n{\n  uint currentTime;\n  \n  currentTime = FUN_08002214();\n  FUN_08001214(currentTime / 1000);\n  FUN_08001194(0xffffffff,inputParameter,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_program_08001104",
                "param_1": "inputParameter",
                "uVar1": "currentTime"
            },
            "calling": [
                "FUN_0800209c",
                "FUN_08001128"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001194",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_system_08001128",
            "code": "\n\n\nundefined4 initializeSystem_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001170(3);\n  FUN_08001104(0);\n  FUN_08004ccc();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_system_08001128"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001104",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_data_counter_0800114c",
            "code": "\nvoid incrementDataCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_data_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08004c18",
                "FUN_0800209c",
                "FUN_08001828",
                "FUN_08001938",
                "FUN_080014e2",
                "thunk_FUN_0800115c",
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_08001460"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "update_config_flags_08001170",
            "code": "\n\n\nvoid updateConfigFlags_08001170(uint configFlags)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (configFlags & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "update_config_flags_08001170",
                "param_1": "configFlags"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "write_to_memory_08001194",
            "code": "\n\n\nvoid writeToMemory_08001194(uint address,uint data1,uint data2)\n\n{\n  undefined maskedData;\n  uint numShifts;\n  uint shiftedBits;\n  uint shiftedBitsPlusFour;\n  \n  shiftedBits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  numShifts = 7 - shiftedBits;\n  shiftedBitsPlusFour = shiftedBits + 4;\n  if (3 < numShifts) {\n    numShifts = 4;\n  }\n  if (shiftedBitsPlusFour < 7) {\n    shiftedBits = 0;\n  }\n  numShifts = (1 << (numShifts & 0xff)) - 1;\n  if (6 < shiftedBitsPlusFour) {\n    shiftedBits = shiftedBits - 3;\n  }\n  maskedData = (undefined)\n          ((data2 & (1 << (shiftedBits & 0xff)) - 1U | (data1 & numShifts) << (shiftedBits & 0xff)) << 4);\n  if (-1 < (int)address) {\n    shiftedBits = address + 0xe000e100;\n  }\n  else {\n    numShifts = 0xe000ed14;\n    shiftedBits = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(shiftedBits + 0x300) = maskedData;\n  }\n  else {\n    *(undefined *)(numShifts + shiftedBits) = maskedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "write_to_memory_08001194",
                "param_1": "address",
                "param_2": "data1",
                "param_3": "data2",
                "uVar1": "maskedData",
                "uVar2": "numShifts",
                "uVar3": "shiftedBits",
                "uVar4": "shiftedBitsPlusFour"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08001104",
                "FUN_08004514",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_080011fc",
            "code": "\nvoid setBit_080011fc(uint input)\n\n{\n  *(int *)((input >> 5) * 4 + -0x1fff1f00) = 1 << (input & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_080011fc",
                "param_1": "input"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "set_data_registers_08001214",
            "code": "\n\n\nundefined4 set_data_registers_08001214(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "set_data_registers_08001214",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_value_08001240",
            "code": "\n\n\nvoid setFlagValue_08001240(int flag)\n\n{\n  if (flag == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_value_08001240",
                "param_1": "flag"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_flags_and_values_08001264",
            "code": "\n\n\nvoid updateFlagsAndValues_08001264(uint *inputFlags,uint *outputFlags)\n\n{\n  uint newValue;\n  uint bitMask;\n  uint outputValue;\n  int index;\n  uint i;\n  uint shiftedBit;\n  uint checkValue;\n  uint *currentPointer;\n  int iVar;\n  \n  newValue = 0;\n  i = 0;\n  do {\n    shiftedBit = 1 << (i & 0xff);\n    bitMask = shiftedBit & *outputFlags;\n    if (shiftedBit == bitMask) {\n      outputValue = outputFlags[1];\n      if (outputValue == 0x12) {\n        newValue = outputFlags[3] + 0xc;\n      }\n      else if (outputValue < 0x13) {\n        if (outputValue == 2) {\n          newValue = outputFlags[3] + 8;\n        }\n        else if (outputValue < 3) {\n          if (outputValue == 0) goto LAB_080013be;\n          if (outputValue == 1) {\n            newValue = outputFlags[3];\n          }\n        }\n        else if (outputValue == 3) {\n          newValue = 0;\n        }\n        else if (outputValue == 0x11) {\n          newValue = outputFlags[3] + 4;\n        }\n      }\n      else {\n        if (outputValue != 0x10210000) {\n          if (outputValue < 0x10210001) {\n            if (outputValue != 0x10110000) {\n              checkValue = 0x10120000;\nLAB_080013b8:\n              if (outputValue != checkValue) goto LAB_080012a8;\n            }\n          }\n          else if ((outputValue != 0x10310000) && (outputValue != 0x10320000)) {\n            checkValue = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        newValue = outputFlags[2];\n        if (newValue == 0) {\n          newValue = 4;\n        }\n        else {\n          if (newValue == 1) {\n            inputFlags[4] = shiftedBit;\n          }\n          if (newValue != 1) {\n            inputFlags[5] = shiftedBit;\n          }\n          newValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        shiftedBit = *inputFlags;\n        outputValue = i << 2;\n        currentPointer = inputFlags;\n      }\n      else {\n        shiftedBit = inputFlags[1];\n        outputValue = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        currentPointer = inputFlags + 1;\n      }\n      *currentPointer = shiftedBit & ~(0xf << (outputValue & 0xff)) | newValue << (outputValue & 0xff);\n      currentPointer = (uint *)outputFlags[1];\n      if (((uint)currentPointer & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        iVar = (i & 3) << 2;\n        if (inputFlags == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (inputFlags == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (inputFlags == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (inputFlags == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             index << iVar | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << iVar);\n        if (((uint)currentPointer & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitMask;\n        }\n        if (((uint)currentPointer & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitMask;\n        }\n        if (((uint)currentPointer & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitMask;\n        }\n        if (((uint)currentPointer & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitMask;\n        }\n        else {\n          _DAT_4001040c = bitMask | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_flags_and_values_08001264",
                "param_1": "inputFlags",
                "param_2": "outputFlags",
                "uVar1": "newValue",
                "uVar2": "bitMask",
                "uVar3": "outputValue",
                "iVar4": "index",
                "uVar5": "i",
                "uVar6": "shiftedBit",
                "uVar7": "checkValue",
                "unaff_r10": "currentPointer",
                "iVar8": "iVar"
            },
            "calling": [
                "FUN_08004e14",
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int target_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(target_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "target_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "bitwise_xor_0800142e",
            "code": "\nvoid bitwiseXor_0800142e(int dataAddress,uint value)\n\n{\n  *(uint *)(dataAddress + 0xc) = value ^ *(uint *)(dataAddress + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "bitwise_xor_0800142e",
                "param_1": "dataAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_and_update_flag_08001436",
            "code": "\nundefined4 checkAndUpdateFlag_08001436(int *pointer)\n\n{\n  int value;\n  \n  value = *pointer;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)pointer + 0x35) = 0x20;\n    *(undefined *)(pointer + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_and_update_flag_08001436",
                "param_1": "pointer",
                "iVar1": "value",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_flag_validity_08001460",
            "code": "\nundefined4 checkFlagValidity_08001460(uint **flagData,uint flagValue,uint timeout)\n\n{\n  int initialTime;\n  int currentTime;\n  uint comparisonValue;\n  uint *flagPtr;\n  \n  initialTime = FUN_0800115c();\n  do {\n    flagPtr = *flagData;\n    if ((flagValue << 8) >> 0x18 == 1) {\n      comparisonValue = flagPtr[5];\n    }\n    else {\n      comparisonValue = flagPtr[6];\n    }\n    if ((flagValue & 0xffff & ~comparisonValue) == 0) {\n      return 0;\n    }\n    if ((int)(flagPtr[5] << 0x15) < 0) {\n      *flagPtr = *flagPtr | 0x200;\n      flagPtr[5] = flagPtr[5] & 0xfffffbff;\n      flagData[0xe] = (uint *)0x4;\n      *(undefined *)((int)flagData + 0x35) = 0x20;\n      *(undefined *)(flagData + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTime = FUN_0800115c(), (uint)(currentTime - initialTime) <= timeout))));\n  *(undefined *)((int)flagData + 0x35) = 0x20;\n  *(undefined *)(flagData + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_flag_validity_08001460",
                "param_1": "flagData",
                "param_2": "flagValue",
                "param_3": "timeout",
                "iVar1": "initialTime",
                "iVar2": "currentTime",
                "uVar3": "comparisonValue",
                "puVar4": "flagPtr"
            },
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_and_process_data_080014e2",
            "code": "\nundefined4 checkAndProcessData_080014e2(int *data,uint size)\n\n{\n  int initialValue;\n  int result;\n  \n  initialValue = FUN_0800115c();\n  while( true ) {\n    if (*(int *)(*data + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    result = FUN_08001436(data);\n    if (result != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (result = FUN_0800115c(), size < (uint)(result - initialValue))))) {\n      data[0xe] = data[0xe] | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_and_process_data_080014e2",
                "param_1": "data",
                "param_2": "size",
                "iVar1": "initialValue",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_flags_and_process_data_08001530",
            "code": "\nundefined4 updateFlagsAndProcessData_08001530(uint **data,uint flag,uint mask,int condition,uint value)\n\n{\n  int start;\n  int end;\n  uint *ptr;\n  uint **ptrPtr;\n  uint flagCopy;\n  uint maskCopy;\n  \n  **data = **data | 0x100;\n  ptrPtr = data;\n  flagCopy = flag;\n  maskCopy = mask;\n  start = FUN_0800115c();\n  do {\n    ptr = *data;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = flag & 0xfe;\n        start = FUN_08001460(data,0x10002,value,ptr,ptrPtr,flagCopy,maskCopy);\n        if (start == 0) {\n          start = FUN_080014e2(data,value,(*data)[5],(*data)[6]);\n          if (start == 0) {\n            ptr = *data;\n            if (condition == 1) {\nLAB_080015ca:\n              ptr[4] = mask & 0xff;\n              return 0;\n            }\n            ptr[4] = mask >> 8;\n            start = FUN_080014e2(data,value);\n            if (start == 0) {\n              ptr = *data;\n              goto LAB_080015ca;\n            }\n          }\n          if (data[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **data = **data | 0x200;\n        }\n        else if (data[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (value == 0xffffffff);\n    if ((value == 0) || (end = FUN_0800115c(), value < (uint)(end - start))) {\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_flags_and_process_data_08001530",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "mask",
                "param_4": "condition",
                "param_5": "value",
                "iVar1": "start",
                "iVar2": "end",
                "puVar3": "ptr",
                "ppuVar4": "ptrPtr",
                "uVar5": "flagCopy",
                "uVar6": "maskCopy"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_080014e2",
                "FUN_0800115c",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "update_flags_and_values_080015e8",
            "code": "\nundefined4 updateFlagsAndValues_080015e8(uint **pointer_array,uint value_1,uint value_2,int value_3,uint value_4)\n\n{\n  int result;\n  int result_2;\n  uint *pointer_1;\n  uint **pointer_array_2;\n  uint temp_1;\n  uint temp_2;\n  \n  pointer_1 = *pointer_array;\n  *pointer_1 = *pointer_1 | 0x400;\n  *pointer_1 = *pointer_1 | 0x100;\n  pointer_array_2 = pointer_array;\n  temp_1 = value_1;\n  temp_2 = value_2;\n  result = FUN_0800115c();\nLAB_0800160e:\n  pointer_1 = *pointer_array;\n  while (-1 < (int)(pointer_1[5] << 0x1f)) {\n    if (value_4 != 0xffffffff) goto code_r0x08001658;\n  }\n  pointer_1[4] = value_1 & 0xfe;\n  result = FUN_08001460(pointer_array,0x10002,value_4,pointer_1,pointer_array_2,temp_1,temp_2);\n  if (result != 0) goto LAB_080016ba;\n  result = FUN_080014e2(pointer_array,value_4,(*pointer_array)[5],(*pointer_array)[6]);\n  if (result == 0) {\n    pointer_1 = *pointer_array;\n    if (value_3 != 1) {\n      pointer_1[4] = value_2 >> 8;\n      result = FUN_080014e2(pointer_array,value_4);\n      if (result != 0) goto LAB_08001642;\n      pointer_1 = *pointer_array;\n    }\n    pointer_1[4] = value_2 & 0xff;\n    result = FUN_080014e2(pointer_array,value_4);\n    if (result == 0) {\n      **pointer_array = **pointer_array | 0x100;\n      result = FUN_0800115c();\n      do {\n        do {\n          if ((int)((*pointer_array)[5] << 0x1f) < 0) {\n            (*pointer_array)[4] = value_1 & 0xff | 1;\n            result = FUN_08001460(pointer_array,0x10002,value_4);\n            if (result == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (pointer_array[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (value_4 == 0xffffffff);\n      } while ((value_4 != 0) && (result_2 = FUN_0800115c(), (uint)(result_2 - result) <= value_4));\nLAB_0800165a:\n      *(undefined *)((int)pointer_array + 0x35) = 0x20;\n      *(undefined *)(pointer_array + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (pointer_array[0xe] == (uint *)0x4) {\n    **pointer_array = **pointer_array | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((value_4 == 0) || (result_2 = FUN_0800115c(), value_4 < (uint)(result_2 - result)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "update_flags_and_values_080015e8",
                "param_1": "pointer_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "param_5": "value_4",
                "iVar1": "result",
                "iVar2": "result_2",
                "puVar3": "pointer_1",
                "ppuVar4": "pointer_array_2",
                "uVar5": "temp_1",
                "uVar6": "temp_2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080014e2",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_and_modify_value_080016f4",
            "code": "\nundefined4 checkAndModifyValue_080016f4(int *values,uint length)\n\n{\n  int startValue;\n  int currentValue;\n  \n  startValue = FUN_0800115c();\n  while( true ) {\n    currentValue = *values;\n    if ((*(uint *)(currentValue + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentValue + 0x14) << 0x1b < 0) break;\n    if ((length == 0) || (currentValue = FUN_0800115c(), length < (uint)(currentValue - startValue))) {\n      values[0xe] = values[0xe] | 0x20;\n      *(undefined *)((int)values + 0x35) = 0x20;\n      *(undefined *)(values + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentValue + 0x14) = *(uint *)(currentValue + 0x14) & 0xffffffef;\n  values[0xe] = 0;\n  *(undefined *)(values + 0xd) = 0;\n  *(undefined *)((int)values + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_and_modify_value_080016f4",
                "param_1": "values",
                "param_2": "length",
                "iVar1": "startValue",
                "iVar2": "currentValue"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_data_08001754",
            "code": "\nundefined4 initializeData_08001754(uint **data)\n\n{\n  uint quotient;\n  uint remainder;\n  uint *dataPointer;\n  uint *value1;\n  uint *value2;\n  uint temp1;\n  undefined8 result;\n  \n  if (data != (uint **)0x0) {\n    if (*(char *)((int)data + 0x35) == '\\0') {\n      *(undefined *)(data + 0xd) = 0;\n      FUN_08004d48();\n    }\n    *(undefined *)((int)data + 0x35) = 0x24;\n    **data = **data & 0xfffffffe;\n    result = FUN_08002220();\n    remainder = (uint)((ulonglong)result >> 0x20);\n    quotient = (uint)result;\n    value1 = data[1];\n    temp1 = quotient / 1000000;\n    if ((uint *)0x186a0 < value1) {\n      remainder = 300;\n    }\n    dataPointer = *data;\n    if ((uint *)0x186a0 < value1) {\n      remainder = temp1 * remainder;\n    }\n    dataPointer[1] = temp1;\n    if ((uint *)0x186a0 < value1) {\n      temp1 = remainder / 1000;\n    }\n    dataPointer[8] = temp1 + 1;\n    if (value1 < (uint *)0x186a1) {\n      quotient = quotient / (uint)((int)value1 << 1);\n      if ((quotient & 0xfff) < 4) {\n        quotient = 4;\n      }\n    }\n    else {\n      if (data[2] == (uint *)0x0) {\n        quotient = quotient / (uint)((int)value1 * 3) | 0x8000;\n      }\n      else {\n        quotient = quotient / (uint)((int)value1 * 0x19) | 0xc000;\n      }\n      if ((quotient & 0xfff) == 0) {\n        quotient = 1;\n      }\n    }\n    value1 = data[8];\n    value2 = data[7];\n    dataPointer[7] = quotient;\n    *dataPointer = (uint)value2 | (uint)value1;\n    dataPointer[2] = (uint)data[4] | (uint)data[3];\n    dataPointer[3] = (uint)data[5] | (uint)data[6];\n    *dataPointer = *dataPointer | 1;\n    data[0xe] = (uint *)0x0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_data_08001754",
                "param_1": "data",
                "uVar1": "quotient",
                "uVar2": "remainder",
                "puVar3": "dataPointer",
                "puVar4": "value1",
                "puVar5": "value2",
                "uVar6": "temp1",
                "uVar7": "result"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08004d48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **data,undefined4 param1,undefined4 param2,undefined4 param3,byte *byteArray,\n            short byteCount,undefined4 param4)\n\n{\n  int result1;\n  int result2;\n  uint *ptrData;\n  uint tempVar;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (byteArray == (byte *)0x0) {\n      return 1;\n    }\n    if (byteCount == 0) {\n      return 1;\n    }\n    result1 = FUN_0800115c();\n    do {\n      ptrData = *data;\n      if ((~ptrData[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        tempVar = *ptrData;\n        *(undefined *)(data + 0xd) = 1;\n        *ptrData = tempVar & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        result1 = FUN_08001530(data,param1,param2,param3,param4);\n        if (result1 != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      result2 = FUN_0800115c();\n    } while ((uint)(result2 - result1) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (byteCount != 0) {\nLAB_080018e2:\n    result1 = FUN_080014e2(data,param4);\n    if (result1 != 0) goto LAB_080018ee;\n    ptrData = *data;\n    ptrData[4] = (uint)*byteArray;\n    if ((int)(ptrData[5] << 0x1d) < 0) {\n      if ((short)(byteCount + -1) == 0) break;\n      byteCount = byteCount + -2;\n      ptrData[4] = (uint)byteArray[1];\n      byteArray = byteArray + 2;\n    }\n    else {\n      byteArray = byteArray + 1;\n      byteCount = byteCount + -1;\n    }\n  }\n  result1 = FUN_080014e2(data,param4);\n  if (result1 == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "byteArray",
                "param_6": "byteCount",
                "param_7": "param4",
                "iVar1": "result1",
                "iVar2": "result2",
                "puVar3": "ptrData",
                "uVar4": "tempVar"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **inputData,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *outputData,ushort outputSize,uint maxDuration)\n\n{\n  undefined *ptr1;\n  int startTime;\n  int currentTime;\n  uint *ptr2;\n  uint var1;\n  undefined *ptr3;\n  bool flag;\n  \n  if (*(char *)((int)inputData + 0x35) != ' ') {\n    return 2;\n  }\n  if (outputData == (undefined *)0x0) {\n    return 1;\n  }\n  if (outputSize == 0) {\n    return 1;\n  }\n  startTime = FUN_0800115c();\n  while (ptr2 = *inputData, (~ptr2[6] & 2) == 0) {\n    currentTime = FUN_0800115c();\n    if (10000 < (uint)(currentTime - startTime)) {\n      *(undefined *)(inputData + 0xd) = 0;\n      *(undefined *)((int)inputData + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(inputData + 0xd) == '\\x01') {\n    return 2;\n  }\n  var1 = *ptr2;\n  *(undefined *)(inputData + 0xd) = 1;\n  *ptr2 = var1 & 0xfffff7ff;\n  *(undefined *)((int)inputData + 0x35) = 0x22;\n  *(undefined *)((int)inputData + 0x36) = 0x40;\n  inputData[0xe] = (uint *)0x0;\n  startTime = FUN_080015e8(inputData,param2,param3,param4,maxDuration);\n  if (startTime != 0) {\n    *(undefined *)(inputData + 0xd) = 0;\n    if (inputData[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *inputData;\n  var1 = *ptr2;\n  if (outputSize == 1) {\n    *ptr2 = var1 & 0xfffffbff;\n    disableIRQ();\n    **inputData = **inputData | 0x200;\n    enableIRQ();\n    startTime = FUN_080016f4(inputData,maxDuration);\n    if (startTime == 0) {\n      *outputData = (char)(*inputData)[4];\nLAB_08001ab8:\n      *(undefined *)((int)inputData + 0x35) = 0x20;\n      *(undefined *)((int)inputData + 0x36) = 0;\n      *(undefined *)(inputData + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (inputData[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (outputSize == 2) {\n    *ptr2 = var1 | 0x800;\n    disableIRQ();\n    **inputData = **inputData & 0xfffffbff;\n    enableIRQ();\n  }\n  else {\n    *ptr2 = var1 | 0x400;\n    while (3 < outputSize) {\n      startTime = FUN_080016f4(inputData,maxDuration);\n      if (startTime != 0) goto LAB_08001a18;\n      *outputData = (char)(*inputData)[4];\n      ptr2 = *inputData;\n      flag = (int)(ptr2[5] << 0x1d) < 0;\n      if (flag) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = outputData + 2;\n        outputSize = outputSize - 2;\n      }\n      else {\n        ptr3 = outputData + 1;\n        outputSize = outputSize - 1;\n      }\n      ptr1 = outputData + 1;\n      outputData = ptr3;\n      if (flag) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (outputSize != 2) {\n      startTime = FUN_0800115c();\n      do {\n        ptr2 = *inputData;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disableIRQ();\n            *outputData = (char)(*inputData)[4];\n            startTime = FUN_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (maxDuration == 0xffffffff);\n      } while ((maxDuration != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= maxDuration));\n      goto LAB_08001afa;\n    }\n  }\n  startTime = FUN_0800115c();\n  do {\n    do {\n      if ((int)((*inputData)[5] << 0x1d) < 0) {\n        disableIRQ();\n        ptr2 = *inputData;\n        *ptr2 = *ptr2 | 0x200;\n        *outputData = (char)ptr2[4];\n        enableIRQ();\n        outputData[1] = (char)(*inputData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (maxDuration == 0xffffffff);\n  } while ((maxDuration != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= maxDuration));\nLAB_08001afa:\n  *(undefined *)((int)inputData + 0x35) = 0x20;\n  *(undefined *)(inputData + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptr2 = *inputData;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        outputData[1] = (char)ptr2[4];\n        enableIRQ();\n        outputData[2] = (char)(*inputData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (maxDuration == 0xffffffff);\n  } while ((maxDuration != 0) && (currentTime = FUN_0800115c(), (uint)(currentTime - startTime) <= maxDuration));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "outputData",
                "param_6": "outputSize",
                "param_7": "maxDuration",
                "puVar1": "ptr1",
                "iVar2": "startTime",
                "iVar3": "currentTime",
                "puVar4": "ptr2",
                "uVar5": "var1",
                "puVar6": "ptr3",
                "bVar7": "flag",
                "disableIRQinterrupts": "disableIRQ",
                "enableIRQinterrupts": "enableIRQ"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_080016f4",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "verify_settings_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 verifySettings_08001b58(int *settings)\n\n{\n  int value;\n  int currentValue;\n  \n  if (*settings << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (settings[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value = settings[1];\n      if (value == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (value == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          value = FUN_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            currentValue = FUN_0800115c();\n            if (100 < (uint)(currentValue - value)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (value == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      value = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        currentValue = FUN_0800115c();\n        if (100 < (uint)(currentValue - value)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*settings << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (flag_2 != 1)) {\n        return 1;\n      }\n    }\n    else {\n      flag_1 = flag_2;\n      if (flag_1 == 0) {\n        value = FUN_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          currentValue = FUN_0800115c();\n          if (2 < (uint)(currentValue - value)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      flag_1 = 1;\n      value = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        currentValue = FUN_0800115c();\n        if (2 < (uint)(currentValue - value)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = settings[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*settings << 0x1c < 0) {\n    value_3 = value_2;\n    if (value_3 == 0) {\n      value = FUN_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        currentValue = FUN_0800115c();\n        if (2 < (uint)(currentValue - value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      value_3 = 1;\n      value = FUN_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        currentValue = FUN_0800115c();\n        if (2 < (uint)(currentValue - value)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *settings << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  value = FUN_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    currentValue = FUN_0800115c();\n    if (100 < (uint)(currentValue - value)) {\n      return 3;\n    }\n  }\n  value = mode;\n  if (value == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (value == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      value = FUN_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        currentValue = FUN_0800115c();\n        if (5000 < (uint)(currentValue - value)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (value == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  value = FUN_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    currentValue = FUN_0800115c();\n    if (5000 < (uint)(currentValue - value)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (flag_4 == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (flag_4 != 2) {\n      flag_5 = 0;\n      value = FUN_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        currentValue = FUN_0800115c();\n      } while ((uint)(currentValue - value) < 3);\n      return 3;\n    }\n    flag_5 = 0;\n    value = FUN_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (value_4 == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | settings[2];\n        }\n        _DAT_40021004 = value_4 | value_5 | _DAT_40021004 & 0xffc2ffff;\n        flag_5 = 1;\n        value = FUN_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          currentValue = FUN_0800115c();\n        } while ((uint)(currentValue - value) < 3);\n        return 3;\n      }\n      currentValue = FUN_0800115c();\n    } while ((uint)(currentValue - value) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "verify_settings_08001b58",
                "param_1": "settings",
                "iVar1": "value",
                "iVar2": "currentValue",
                "iRam42420000": "flag_1",
                "param_1[4]": "flag_2",
                "iRam42420480": "value_3",
                "param_1[6]": "value_2",
                "param_1[3]": "mode",
                "param_1[7]": "flag_4",
                "uRam42420060": "flag_5",
                "param_1[8]": "value_4",
                "param_1[9]": "value_5"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_clock_frequency_08002008",
            "code": "\n\n\nint calculateClockFrequency_08002008(void)\n\n{\n  undefined4 firstElement;\n  int result;\n  undefined4 secondElement;\n  undefined4 *sourceArray;\n  uint clockFrequency;\n  undefined4 *destinationArray;\n  byte localValues [4];\n  undefined4 constantArray [5];\n  \n  sourceArray = &DAT_080072f0;\n  destinationArray = constantArray;\n  do {\n    firstElement = *sourceArray;\n    secondElement = sourceArray[1];\n    sourceArray = sourceArray + 2;\n    *destinationArray = firstElement;\n    destinationArray[1] = secondElement;\n    destinationArray = destinationArray + 2;\n  } while (sourceArray != (undefined4 *)\"../Src/MPU9250.c\");\n  localValues[0] = 1;\n  localValues[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockFrequency = 8000000 / localValues[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockFrequency = 4000000;\n    }\n    result = clockFrequency * *(byte *)((int)constantArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    result = 8000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_clock_frequency_08002008",
                "puVar4": "sourceArray",
                "puVar6": "destinationArray",
                "uVar1": "firstElement",
                "uVar3": "secondElement",
                "uVar5": "clockFrequency",
                "local_24": "localValues",
                "local_20": "constantArray",
                "iVar2": "result"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "validate_and_process_data_0800209c",
            "code": "\n\n\nundefined4 validate_and_process_data_0800209c(uint *data_ptr,uint data_length)\n\n{\n  char bit_flag_1;\n  char bit_flag_2;\n  int shift_count;\n  uint temp_var_1;\n  int iteration_count;\n  uint temp_var_2;\n  \n  if ((data_length <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_length, data_length == (data_length & 7))) {\n    if ((int)(*data_ptr << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data_ptr[2];\n    }\n    shift_count = *data_ptr << 0x1f;\n    if (-1 < shift_count) {\nLAB_080020ba:\n      if ((data_length < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_length, data_length != (data_length & 7))) {\n        return 1;\n      }\n      if ((*data_ptr & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data_ptr[3];\n      }\n      if ((int)(*data_ptr << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data_ptr[4] << 3;\n      }\n      temp_var_1 = FUN_08002008();\n      DAT_200001bc = temp_var_1 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      FUN_08001104(0);\n      return 0;\n    }\n    temp_var_1 = data_ptr[1];\n    if (temp_var_1 == 1) {\n      bit_flag_2 = '\\x01';\n      bit_flag_1 = '\\0';\n    }\n    else {\n      temp_var_2 = _DAT_40021000;\n      if (temp_var_1 == 2) goto LAB_08002176;\n      bit_flag_2 = '\\0';\n      bit_flag_1 = '\\x01';\n    }\n    temp_var_2 = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(bit_flag_1 << 6) << 0x18 | (uint)(byte)(bit_flag_2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)temp_var_2 < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | temp_var_1;\n      shift_count = FUN_0800115c(shift_count,temp_var_2);\n      if (data_ptr[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          iteration_count = FUN_0800115c();\n        } while ((uint)(iteration_count - shift_count) < 0x1389);\n      }\n      else if (data_ptr[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          iteration_count = FUN_0800115c();\n        } while ((uint)(iteration_count - shift_count) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          iteration_count = FUN_0800115c();\n        } while ((uint)(iteration_count - shift_count) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "validate_and_process_data_0800209c",
                "param_1": "data_ptr",
                "param_2": "data_length",
                "cVar1": "bit_flag_1",
                "cVar2": "bit_flag_2",
                "iVar3": "shift_count",
                "uVar4": "temp_var_1",
                "iVar5": "iteration_count",
                "uVar6": "temp_var_2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_pointer_08002214",
            "code": "\nundefined4 get_data_pointer_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_pointer_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "calculate_shifted_value_08002220",
            "code": "\n\n\nuint calculateShiftedValue_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "calculate_shifted_value_08002220"
            },
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "extracted_bits_08002250",
            "code": "\n\n\nuint extractedBits_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "extracted_bits_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_memory_registers_08002280",
            "code": "\nvoid updateMemoryRegisters_08002280(int memoryBaseAddress,uint *paramArray)\n\n{\n  uint updatedVar1;\n  uint updatedVar2;\n  uint updatedVar3;\n  \n  *(uint *)(memoryBaseAddress + 0x20) = *(uint *)(memoryBaseAddress + 0x20) & 0xfffffffe;\n  updatedVar2 = *(uint *)(memoryBaseAddress + 4);\n  updatedVar3 = *paramArray;\n  updatedVar1 = *(uint *)(memoryBaseAddress + 0x20) & 0xfffffffd | paramArray[2];\n  if (memoryBaseAddress == 0x40012c00) {\n    updatedVar1 = (updatedVar1 & 0xfffffff7 | paramArray[3]) & 0xfffffffb;\n    updatedVar2 = updatedVar2 & 0xfffffcff | paramArray[5] | paramArray[6];\n  }\n  *(uint *)(memoryBaseAddress + 4) = updatedVar2;\n  *(uint *)(memoryBaseAddress + 0x18) = *(uint *)(memoryBaseAddress + 0x18) & 0xffffff8c | updatedVar3;\n  *(uint *)(memoryBaseAddress + 0x34) = paramArray[1];\n  *(uint *)(memoryBaseAddress + 0x20) = updatedVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_memory_registers_08002280",
                "param_1": "memoryBaseAddress",
                "param_2": "paramArray",
                "uVar1": "updatedVar1",
                "uVar2": "updatedVar2",
                "uVar3": "updatedVar3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "set_configuration_080022d0",
            "code": "\nvoid setConfiguration_080022d0(int configAddress,uint *configData)\n\n{\n  uint modifiedConfig1;\n  uint modifiedConfig2;\n  uint originalConfig;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffeff;\n  modifiedConfig2 = *(uint *)(configAddress + 4);\n  originalConfig = *configData;\n  modifiedConfig1 = *(uint *)(configAddress + 0x20) & 0xfffffdff | configModifier1 << 8;\n  if (configAddress == 0x40012c00) {\n    modifiedConfig1 = (modifiedConfig1 & 0xfffff7ff | configModifier2 << 8) & 0xfffffbff;\n    modifiedConfig2 = modifiedConfig2 & 0xffffcfff | (configModifier3 | configModifier4) << 4;\n  }\n  *(uint *)(configAddress + 4) = modifiedConfig2;\n  *(uint *)(configAddress + 0x1c) = *(uint *)(configAddress + 0x1c) & 0xffffff8c | originalConfig;\n  *(uint *)(configAddress + 0x3c) = configValue4Original;\n  *(uint *)(configAddress + 0x20) = modifiedConfig1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "set_configuration_080022d0",
                "param_1": "configAddress",
                "param_2": "configData",
                "uVar1": "modifiedConfig1",
                "uVar2": "modifiedConfig2",
                "uVar3": "originalConfig",
                "param_2[2]": "configModifier1",
                "param_2[3]": "configModifier2",
                "param_2[5]": "configModifier3",
                "param_2[6]": "configModifier4",
                "param_2[1]": "configValue4Original"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_parameters_08002324",
            "code": "\nvoid updateParameters_08002324(int ptr1,int *ptr2)\n\n{\n  uint var1;\n  int var2;\n  int var3;\n  int var4;\n  \n  *(uint *)(ptr1 + 0x20) = *(uint *)(ptr1 + 0x20) & 0xffffefff;\n  var1 = *(uint *)(ptr1 + 4);\n  var2 = *ptr2;\n  var3 = ptr2[2];\n  var4 = 0x40012c00;\n  if (ptr1 == 0x40012c00) {\n    var4 = ptr2[5];\n    var1 = var1 & 0xffffbfff;\n  }\n  if (ptr1 == 0x40012c00) {\n    var1 = var1 | var4 << 6;\n  }\n  *(uint *)(ptr1 + 4) = var1;\n  *(uint *)(ptr1 + 0x1c) = *(uint *)(ptr1 + 0x1c) & 0xffff8cff | var2 << 8;\n  *(int *)(ptr1 + 0x40) = ptr2[1];\n  *(uint *)(ptr1 + 0x20) = *(uint *)(ptr1 + 0x20) & 0xffffdfff | var3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_parameters_08002324",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "uVar1": "var1",
                "iVar2": "var2",
                "iVar3": "var3",
                "iVar4": "var4"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_parameters_08002368",
            "code": "\nvoid updateParameters_08002368(uint *inputParams,uint *newParams)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *inputParams;\n  if (((((inputParams == (uint *)0x40012c00) || (inputParams == (uint *)0x40000000)) ||\n       (inputParams == (uint *)0x40000400)) || (inputParams == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | newParams[1], inputParams == (uint *)0x40012c00 ||\n       (inputParams == (uint *)0x40000000)) ||\n      ((inputParams == (uint *)0x40000400 || (inputParams == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | newParams[3];\n  }\n  *inputParams = updatedValue;\n  inputParams[0xb] = newParams[2];\n  inputParams[10] = *newParams;\n  updatedValue = 0x40012c00;\n  if (inputParams == (uint *)0x40012c00) {\n    updatedValue = newParams[4];\n  }\n  if (inputParams == (uint *)0x40012c00) {\n    inputParams[0xc] = updatedValue;\n  }\n  inputParams[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_parameters_08002368",
                "param_1": "inputParams",
                "param_2": "newParams",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initiate_process_080023d0",
            "code": "\nundefined4 initiateProcess_080023d0(undefined4 *inputParams)\n\n{\n  if (inputParams != (undefined4 *)0x0) {\n    if (*(char *)((int)inputParams + 0x39) == '\\0') {\n      *(undefined *)(inputParams + 0xe) = 0;\n      FUN_08004d8c();\n    }\n    *(undefined *)((int)inputParams + 0x39) = 2;\n    FUN_08002368(*inputParams,inputParams + 1);\n    *(undefined *)((int)inputParams + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initiate_process_080023d0",
                "param_1": "inputParams"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002368",
                "FUN_08004d8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_params_08002404",
            "code": "\nvoid updateParams_08002404(int address,int *params)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int paramValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(address + 4);\n  paramValue = *params;\n  updatedValue1 = *(uint *)(address + 0x20) & 0xffffffdf | params[2] << 4;\n  if (address == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | params[3] << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | (params[5] | params[6]) << 2;\n  }\n  *(uint *)(address + 4) = updatedValue2;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffff8cff | paramValue << 8;\n  *(int *)(address + 0x38) = params[1];\n  *(uint *)(address + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_params_08002404",
                "param_1": "address",
                "param_2": "params",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "paramValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_flag_0800245c",
            "code": "\nvoid updateFlag_0800245c(int *param,undefined4 value1,undefined4 value2)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int temp5;\n  uint updatedValue;\n  int paramValue;\n  \n  if (*(char *)(param + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)param + 0x39) = 2;\n  *(undefined *)(param + 0xe) = 1;\n  switch(value2) {\n  case 0:\n    FUN_08002280(*param);\n    paramValue = *param;\n    updatedValue = *(uint *)(temp1 + 0x10);\n    *(uint *)(paramValue + 0x18) = *(uint *)(paramValue + 0x18) | 8;\n    *(uint *)(paramValue + 0x18) = *(uint *)(paramValue + 0x18) & 0xfffffffb;\n    updatedValue = *(uint *)(paramValue + 0x18) | updatedValue;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    FUN_08002404(*param);\n    paramValue = *param;\n    temp5 = *(int *)(temp2 + 0x10);\n    *(uint *)(paramValue + 0x18) = *(uint *)(paramValue + 0x18) | 0x800;\n    *(uint *)(paramValue + 0x18) = *(uint *)(paramValue + 0x18) & 0xfffffbff;\n    updatedValue = *(uint *)(paramValue + 0x18) | temp5 << 8;\n    break;\n  case 8:\n    FUN_080022d0(*param);\n    paramValue = *param;\n    updatedValue = *(uint *)(temp3 + 0x10);\n    *(uint *)(paramValue + 0x1c) = *(uint *)(paramValue + 0x1c) | 8;\n    *(uint *)(paramValue + 0x1c) = *(uint *)(paramValue + 0x1c) & 0xfffffffb;\n    updatedValue = *(uint *)(paramValue + 0x1c) | updatedValue;\n    goto LAB_080024fa;\n  case 0xc:\n    FUN_08002324(*param);\n    paramValue = *param;\n    temp5 = *(int *)(temp4 + 0x10);\n    *(uint *)(paramValue + 0x1c) = *(uint *)(paramValue + 0x1c) | 0x800;\n    *(uint *)(paramValue + 0x1c) = *(uint *)(paramValue + 0x1c) & 0xfffffbff;\n    updatedValue = *(uint *)(paramValue + 0x1c) | temp5 << 8;\nLAB_080024fa:\n    *(uint *)(paramValue + 0x1c) = updatedValue;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(paramValue + 0x18) = updatedValue;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)param + 0x39) = 1;\n  *(undefined *)(param + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_flag_0800245c",
                "param_1": "param",
                "param_2": "value1",
                "param_3": "value2",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "extraout_r1_02": "temp4",
                "iVar1": "temp5",
                "uVar2": "updatedValue",
                "iVar3": "paramValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002324",
                "FUN_08002404",
                "FUN_08002280"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_08002520",
            "code": "\nvoid updateBit_08002520(int data,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(data + 0x20) = bitValue << (bitPosition & 0xff) | *(uint *)(data + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_08002520",
                "param_1": "data",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "initialize_flags_08002538",
            "code": "\nundefined4 initializeFlags_08002538(uint **flagList,undefined4 initialFlagValue)\n\n{\n  uint newFlagValue;\n  uint *flagPtr;\n  \n  FUN_08002520(*flagList,initialFlagValue,1);\n  flagPtr = *flagList;\n  newFlagValue = 0x40012c00;\n  if (flagPtr == (uint *)0x40012c00) {\n    newFlagValue = uRam40012c44 | 0x8000;\n  }\n  if (flagPtr == (uint *)0x40012c00) {\n    flagPtr[0x11] = newFlagValue;\n  }\n  *flagPtr = *flagPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "initialize_flags_08002538",
                "param_1": "flagList",
                "param_2": "initialFlagValue",
                "uVar1": "newFlagValue",
                "puVar2": "flagPtr"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_value_08002564",
            "code": "\nundefined4 checkAndUpdateValue_08002564(int *array,uint *values)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(array + 0xe) != '\\x01') {\n    *(undefined *)((int)array + 0x39) = 2;\n    *(uint *)(*array + 0x44) =\n         *values | values[1] | values[2] | values[3] | values[4] | values[5] | values[6];\n    *(undefined *)((int)array + 0x39) = 1;\n    result = 0;\n    *(undefined *)(array + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_value_08002564",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_data_080025a4",
            "code": "\nundefined4 updateData_080025a4(int *data,uint *mask)\n\n{\n  uint temp1;\n  undefined4 result;\n  int ptr;\n  uint temp2;\n  \n  result = 2;\n  if (*(char *)(data + 0xe) != '\\x01') {\n    *(undefined *)((int)data + 0x39) = 2;\n    ptr = *data;\n    temp2 = *mask;\n    temp1 = mask[1];\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) & 0xffffff8f;\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) | temp2;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) & 0xffffff7f;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) | temp1;\n    *(undefined *)((int)data + 0x39) = 1;\n    result = 0;\n    *(undefined *)(data + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_data_080025a4",
                "param_1": "data",
                "param_2": "mask",
                "uVar1": "temp1",
                "uVar2": "result",
                "iVar3": "ptr",
                "uVar4": "temp2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_data_080025e8",
            "code": "\nvoid updateData_080025e8(int *data)\n\n{\n  int result1;\n  int result2;\n  uint value;\n  int calculation1;\n  int parameter;\n  int pointer;\n  \n  pointer = *data;\n  value = data[4];\n  *(uint *)(pointer + 0x10) = *(uint *)(pointer + 0x10) & 0xffffcfff | data[3];\n  *(uint *)(pointer + 0xc) = data[2] | value | data[5] | *(uint *)(pointer + 0xc) & 0xffffe9f3;\n  *(uint *)(pointer + 0x14) = *(uint *)(pointer + 0x14) & 0xfffffcff | data[6];\n  if (pointer == 0x40013800) {\n    result1 = FUN_08002250();\n    calculation1 = (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100);\n    result1 = FUN_08002250();\n    parameter = data[1];\n    result2 = FUN_08002250();\n    result2 = (uint)(result1 * 0x19) / (uint)(parameter << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) *\n            -100;\n    result1 = FUN_08002250();\n    value = (uint)(result1 * 0x19) / (uint)(data[1] << 2);\n    result1 = FUN_08002250();\n  }\n  else {\n    result1 = FUN_08002220();\n    calculation1 = (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100);\n    result1 = FUN_08002220();\n    parameter = data[1];\n    result2 = FUN_08002220();\n    result2 = (uint)(result1 * 0x19) / (uint)(parameter << 2) +\n            (int)(((ulonglong)(uint)(result2 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) *\n            -100;\n    result1 = FUN_08002220();\n    value = (uint)(result1 * 0x19) / (uint)(data[1] << 2);\n    result1 = FUN_08002220();\n  }\n  *(uint *)(pointer + 8) =\n       (((value + (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (result2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       calculation1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_data_080025e8",
                "param_1": "data",
                "iVar1": "result1",
                "iVar2": "result2",
                "uVar3": "value",
                "iVar4": "calculation1",
                "iVar5": "parameter",
                "iVar6": "pointer"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "check_and_set_flags_08002724",
            "code": "\nundefined4 check_and_set_flags_08002724(int *pointer)\n\n{\n  int var1;\n  \n  if (pointer != (int *)0x0) {\n    if (*(char *)((int)pointer + 0x39) == '\\0') {\n      *(undefined *)(pointer + 0xe) = 0;\n      FUN_08004e7c();\n    }\n    *(undefined *)((int)pointer + 0x39) = 2;\n    *(uint *)(*pointer + 0xc) = *(uint *)(*pointer + 0xc) & 0xffffdfff;\n    FUN_080025e8(pointer);\n    var1 = *pointer;\n    *(uint *)(var1 + 0x10) = *(uint *)(var1 + 0x10) & 0xffffb7ff;\n    *(uint *)(var1 + 0x14) = *(uint *)(var1 + 0x14) & 0xffffffd5;\n    *(uint *)(var1 + 0xc) = *(uint *)(var1 + 0xc) | 0x2000;\n    pointer[0xf] = 0;\n    *(undefined *)((int)pointer + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "check_and_set_flags_08002724",
                "param_1": "pointer",
                "iVar1": "var1"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *inputData)\n\n{\n  byte byteValue;\n  int data;\n  uint tempVar;\n  undefined4 tempVar2;\n  short count;\n  ushort *startPtr;\n  ushort *updatedPtr;\n  bool isConditionMet;\n  \n  if ((*(byte *)((int)inputData + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  data = *inputData;\n  startPtr = (ushort *)inputData[10];\n  if (inputData[2] == 0x1000) {\n    if (inputData[4] == 0) {\n      updatedPtr = startPtr + 1;\n      *startPtr = (ushort)((uint)(*(int *)(data + 4) << 0x17) >> 0x17);\n    }\n    else {\n      updatedPtr = (ushort *)((int)startPtr + 1);\n      *startPtr = (ushort)*(int *)(data + 4) & 0xff;\n    }\n    inputData[10] = (int)updatedPtr;\n  }\n  else {\n    if (inputData[4] == 0) {\n      byteValue = (byte)*(undefined4 *)(data + 4);\n      inputData[10] = (int)startPtr + 1;\n    }\n    else {\n      tempVar2 = *(undefined4 *)(data + 4);\n      inputData[10] = (int)startPtr + 1;\n      byteValue = (byte)tempVar2 & 0x7f;\n    }\n    *(byte *)startPtr = byteValue;\n  }\n  count = *(short *)((int)inputData + 0x2e) + -1;\n  *(short *)((int)inputData + 0x2e) = count;\n  if (count == 0) {\n    data = *inputData;\n    *(uint *)(data + 0xc) = *(uint *)(data + 0xc) & 0xffffffdf;\n    isConditionMet = *(char *)((int)inputData + 0x39) != '2';\n    if (isConditionMet) {\n      tempVar = *(uint *)(data + 0xc) & 0xfffffeff;\n    }\n    else {\n      data = 0x12;\n      tempVar = 0x32;\n    }\n    if (isConditionMet) {\n      *(uint *)(data + 0xc) = tempVar;\n      tempVar = *(uint *)(data + 0x14) & 0xfffffffe;\n    }\n    if (isConditionMet) {\n      *(uint *)(data + 0x14) = tempVar;\n      data = 1;\n    }\n    *(char *)((int)inputData + 0x39) = (char)data;\n    FUN_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "inputData",
                "bVar1": "byteValue",
                "iVar2": "data",
                "uVar3": "tempVar",
                "uVar4": "tempVar2",
                "sVar5": "count",
                "puVar6": "startPtr",
                "puVar7": "updatedPtr",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid processData_0800299a(uint **inputData)\n\n{\n  uint value1;\n  short count;\n  uint value2;\n  uint *ptr1;\n  undefined flag;\n  uint *ptr2;\n  uint flag2;\n  bool condition;\n  \n  ptr2 = *inputData;\n  value2 = *ptr2;\n  value1 = ptr2[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      FUN_0800290c();\n      return;\n    }\n  }\n  else {\n    flag2 = ptr2[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      ptr2 = (uint *)(value2 << 0x1f);\n      if ((int)ptr2 < 0) {\n        condition = (int)(value1 << 0x17) < 0;\n        if (condition) {\n          ptr2 = (uint *)((uint)inputData[0xf] | 1);\n        }\n        if (condition) {\n          inputData[0xf] = ptr2;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        inputData[0xf] = (uint *)((uint)inputData[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        inputData[0xf] = (uint *)((uint)inputData[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        inputData[0xf] = (uint *)((uint)inputData[0xf] | 8);\n      }\n      if (inputData[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        FUN_0800290c(inputData);\n      }\n      ptr2 = *inputData;\n      if ((-1 < (int)inputData[0xf] << 0x1c) && ((ptr2[5] & 0x40) == 0)) {\n        FUNC_08002998(inputData);\n        inputData[0xf] = (uint *)0x0;\n        return;\n      }\n      ptr2[3] = ptr2[3] & 0xfffffedf;\n      ptr2[5] = ptr2[5] & 0xfffffffe;\n      *(undefined *)((int)inputData + 0x39) = 1;\n      FUNC_08002998(inputData);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)inputData + 0x39) & 0xdf) == 0x12) {\n      ptr1 = inputData[8];\n      if (inputData[2] == (uint *)0x1000) {\n        ptr2[1] = *(ushort *)ptr1 & 0x1ff;\n        if (inputData[4] == (uint *)0x0) {\n          ptr1 = (uint *)((int)ptr1 + 2);\n        }\n        else {\n          ptr1 = (uint *)((int)ptr1 + 1);\n        }\n        inputData[8] = ptr1;\n      }\n      else {\n        inputData[8] = (uint *)((int)ptr1 + 1);\n        ptr2[1] = (uint)*(byte *)ptr1;\n      }\n      count = *(short *)((int)inputData + 0x26) + -1;\n      *(short *)((int)inputData + 0x26) = count;\n      if (count == 0) {\n        ptr2[3] = ptr2[3] & 0xffffff7f;\n        ptr2[3] = ptr2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    ptr2[3] = ptr2[3] & 0xffffffbf;\n    if (*(char *)((int)inputData + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)inputData + 0x39) = flag;\n    FUNC_0800290a(inputData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "inputData",
                "uVar1": "value1",
                "sVar2": "count",
                "uVar3": "value2",
                "puVar4": "ptr1",
                "uVar5": "flag",
                "puVar6": "ptr2",
                "uVar7": "flag2",
                "bVar8": "condition"
            },
            "calling": [],
            "called": [
                "FUN_08002998",
                "FUN_0800290a",
                "FUN_0800290c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  FUN_0800407c(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  FUN_0800403c(0xd0,0x6b,0x80,1);\n  FUN_0800403c(0xd0,0x6b,1);\n  FUN_0800403c(0xd0,0x6c,0,1);\n  FUN_0800403c(0xd0,0x19,0,1);\n  FUN_0800403c(0xd0,0x1d,3,1);\n  FUN_0800403c(0xd0,0x1a,3,1);\n  FUN_0800403c(0xd0,0x1b,0x10,1);\n  FUN_0800403c(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 uVar1;\n  uint inputValue;\n  int iVar2;\n  int iVar3;\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = 0;\n  result_2 = inputValue & 0xffff0000;\n  FUN_080040e8(0xd0,0x3b,&result_1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(result_1._2_1_,result_1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)result_1,result_1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)result_2,result_2._1_1_);\n  iVar3 = (int)DAT_200002f6;\n  iVar2 = (int)DAT_200002f8;\n  uVar1 = FUN_08000c44();\n  uVar1 = FUN_08000cec(uVar1,0x40800000);\n  DAT_200002d0 = FUN_08000cec(uVar1,0x38000000);\n  uVar1 = FUN_08000c44(iVar3);\n  uVar1 = FUN_08000cec(uVar1,0x40800000);\n  DAT_200002d4 = FUN_08000cec(uVar1,0x38000000);\n  uVar1 = FUN_08000c44(iVar2);\n  uVar1 = FUN_08000cec(uVar1,0x40800000);\n  DAT_200002d8 = FUN_08000cec(uVar1,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputValue",
                "local_18": "result_1",
                "local_14": "result_2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_08002bf0",
            "code": "\nvoid initializeMPU9250_08002bf0(void)\n\n{\n  undefined4 result;\n  int sensorOffset1;\n  int sensorOffset2;\n  undefined4 calibrationData;\n  undefined2 offsetData;\n  \n  calibrationData = 0;\n  offsetData = 0;\n  FUN_080040e8(0xd0,0x43,&calibrationData,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(calibrationData._2_1_,calibrationData._3_1_);\n  DAT_200002be = CONCAT11((undefined)calibrationData,calibrationData._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)offsetData,offsetData._1_1_);\n  sensorOffset2 = (int)DAT_200002c0;\n  sensorOffset1 = (int)DAT_200002c2;\n  result = FUN_08000c44();\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c4 = FUN_08000ad8(result,DAT_20000000);\n  result = FUN_08000c44(sensorOffset2);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002c8 = FUN_08000ad8(result,DAT_20000004);\n  result = FUN_08000c44(sensorOffset1);\n  result = FUN_08000cec(result,0x447a0000);\n  result = FUN_08000cec(result,0x38000000);\n  DAT_200002cc = FUN_08000ad8(result,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "local_20": "calibrationData",
                "local_1c": "offsetData",
                "iVar2": "sensorOffset1",
                "iVar3": "sensorOffset2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 config1,undefined4 config2,undefined4 config3,uint config4)\n\n{\n  undefined4 result;\n  uint configValue;\n  \n  configValue = config4;\n  FUN_0800403c(0xd0,0x37,0x22,1,config1,config2,config3);\n  FUN_0800403c(0xd0,0x6a,1);\n  FUN_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  FUN_0800403c(0x18,0xb,1);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0xf,1);\n  FUN_080040e8(0x18,0x10,&configValue,3,\"../Src/MPU9250.c\",0xb6);\n  result = FUN_08000c44((configValue & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002e8 = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((configValue >> 8 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002ec = FUN_08000adc(result,0x3f800000);\n  result = FUN_08000c44((configValue >> 0x10 & 0xff) - 0x80);\n  result = FUN_08000cec(result,0x3b800000);\n  DAT_200002f0 = FUN_08000adc(result,0x3f800000);\n  FUN_0800403c(0x18,10,0,1);\n  FUN_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "config1",
                "param_2": "config2",
                "param_3": "config3",
                "param_4": "config4",
                "uVar1": "result",
                "local_c": "configValue"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "initialize_mpu9250_08002d88",
            "code": "\nvoid initializeMPU9250_08002d88(undefined4 dataSize,undefined4 inputSize,undefined4 param_3,undefined4 param_4)\n\n{\n  int status;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  int tempVar3;\n  undefined2 initializedFlag;\n  undefined unnamedVar1;\n  undefined unnamedVar2;\n  undefined unnamedVar3;\n  undefined unnamedVar4;\n  byte byteVar;\n  undefined unnamedVar5;\n  \n  unnamedVar5 = (undefined)((uint)param_4 >> 0x18);\n  initializedFlag = 0;\n  unnamedVar1 = 0;\n  unnamedVar2 = 0;\n  unnamedVar3 = 0;\n  unnamedVar4 = 0;\n  byteVar = 0;\n  status = FUN_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,dataSize,inputSize);\n  if (status << 0x1f < 0) {\n    FUN_080040e8(0x18,3,&initializedFlag,7,\"../Src/MPU9250.c\",0xda);\n    tempVar2 = DAT_2000001c;\n    if ((int)((uint)byteVar << 0x1c) < 0) {\n      DAT_200013b9._2_2_ = DAT_200013b9._2_2_ + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(unnamedVar2,unnamedVar1);\n      DAT_200002bc = CONCAT11(unnamedVar4,unnamedVar3);\n      tempVar3 = (int)DAT_200002ba;\n      status = (int)DAT_200002bc;\n      DAT_200002b8 = initializedFlag;\n      tempVar1 = FUN_08000c44();\n      tempVar1 = FUN_08000cec(tempVar1,tempVar2);\n      tempVar1 = FUN_08000cec(tempVar1,DAT_200002e8);\n      tempVar1 = FUN_08000ad8(tempVar1,DAT_20000020);\n      DAT_200002dc = FUN_08000cec(tempVar1,DAT_2000002c);\n      tempVar1 = FUN_08000c44(tempVar3);\n      tempVar1 = FUN_08000cec(tempVar1,tempVar2);\n      tempVar1 = FUN_08000cec(tempVar1,DAT_200002ec);\n      tempVar1 = FUN_08000ad8(tempVar1,DAT_20000024);\n      DAT_200002e0 = FUN_08000cec(tempVar1,DAT_20000030);\n      tempVar1 = FUN_08000c44(status);\n      tempVar2 = FUN_08000cec(tempVar1,tempVar2);\n      tempVar2 = FUN_08000cec(tempVar2,DAT_200002f0);\n      tempVar2 = FUN_08000ad8(tempVar2,DAT_20000028);\n      DAT_200002e4 = FUN_08000cec(tempVar2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "initialize_mpu9250_08002d88",
                "param_1": "dataSize",
                "param_2": "inputSize",
                "iVar1": "status",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "iVar4": "tempVar3",
                "local_28": "initializedFlag",
                "uStack_26": "unnamedVar1",
                "uStack_25": "unnamedVar2",
                "local_24": "unnamedVar3",
                "local_23": "unnamedVar4",
                "local_22": "byteVar",
                "uStack_21": "unnamedVar5"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_08002ea0",
            "code": "\nvoid initialize_08002ea0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  FUN_08002ad0();\n  FUN_08002cb0();\n  FUN_08003314(0x3f19999a);\n  FUN_08003320(0,result,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_08002ea0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "result"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08002ad0",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08003314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_and_store_result_08002ec0",
            "code": "\nvoid calculateAndStoreResult_08002ec0(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  \n  uVar2 = DAT_2000024c;\n  uVar3 = DAT_20000010;\n  uVar1 = FUN_08000ad8(0x3f800000,DAT_20000010);\n  uVar2 = FUN_08000cec(uVar1,uVar2);\n  uVar3 = FUN_08000cec(uVar3,DAT_2000000c);\n  DAT_2000000c = FUN_08000adc(uVar3,uVar2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_and_store_result_08002ec0"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_ram_value_08002ed4",
            "code": "\nvoid calculateRAMValue_08002ed4(void)\n\n{\n  undefined4 floatValue;\n  undefined4 previousDataValue;\n  undefined4 currentDataValue;\n  \n  previousDataValue = DAT_20000248;\n  currentDataValue = uRam20000018;\n  floatValue = FUN_08000ad8(0x3f800000,uRam20000018);\n  previousDataValue = FUN_08000cec(floatValue,previousDataValue);\n  currentDataValue = FUN_08000cec(currentDataValue,uRam20000014);\n  uRam20000014 = FUN_08000adc(currentDataValue,previousDataValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_ram_value_08002ed4",
                "uVar1": "floatValue",
                "uVar2": "previousDataValue",
                "uVar3": "currentDataValue"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "initialize_connection_08002ee8",
            "code": "\nvoid initializeConnection_08002ee8(void)\n\n{\n  undefined4 data;\n  int status;\n  \n  data = DAT_20000250;\n  status = FUN_08001050(DAT_20000250,0xc3340000);\n  if ((status != 0) && (status = FUN_08001028(data,0x42b40000), status != 0)) {\n    FUN_08000adc(data,0x42b40000);\n    return;\n  }\n  FUN_08000ad8(data,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "initialize_connection_08002ee8",
                "uVar1": "data",
                "iVar2": "status"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08001050",
                "FUN_08001028",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "initialize_system_08002f28",
            "code": "\n\n\nvoid initializeSystem_08002f28(void)\n\n{\n  undefined4 result;\n  \n  FUN_08002b48();\n  FUN_08002bf0();\n  FUN_08002d88();\n  DAT_20000258 = thunk_FUN_0800115c();\n  result = FUN_08000c3c(DAT_20000258 - DAT_20000254);\n  FUN_08000e54(result,0x447a0000);\n  FUN_08003320();\n  DAT_20000254 = DAT_20000258;\n  FUN_08003330(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  result = FUN_08002ed4();\n  FUN_08000cec(result,0x41200000);\n  DAT_20001395._0_2_ = FUN_08001078();\n  result = FUN_08002ec0();\n  FUN_08000cec(result,0x41200000);\n  DAT_20001395._2_2_ = FUN_08001078();\n  FUN_08002ee8();\n  DAT_20001399 = FUN_08001078();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "initialize_system_08002f28",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08000e54",
                "FUN_08000c3c",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002bf0",
                "FUN_08002ed4",
                "FUN_08002b48",
                "thunk_FUN_0800115c",
                "FUN_08002d88",
                "FUN_08003330",
                "FUN_08001078",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "decompiled_function_08003034",
            "code": "\nuint decompiledFunction_08003034(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 localVariable;\n  \n  localVariable = param4;\n  FUN_080040b8(0xee,0,&localVariable,3,\"../Src/MS5611.c\",0x8c,param3);\n  return (uint)CONCAT12((undefined)localVariable,CONCAT11(localVariable._1_1_,localVariable._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "decompiled_function_08003034",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "local_c": "localVariable"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_ms5611_08003298",
            "code": "\nvoid initializeMS5611_08003298(void)\n\n{\n  int index;\n  undefined value1;\n  undefined value2;\n  \n  index = 0;\n  FUN_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    value1 = 0;\n    value2 = 0;\n    FUN_080040e8(0xee,index + 0xa0U & 0xffff,&value1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(value1,value2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_ms5611_08003298",
                "local_1c": "value1",
                "local_1b": "value2",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_global_value_08003314",
            "code": "\nvoid setGlobalValue_08003314(undefined4 newValue)\n\n{\n  DAT_2000035c = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_global_value_08003314",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_data_08003320",
            "code": "\nvoid initializeData_08003320(undefined4 newValue)\n\n{\n  DAT_20000360 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_data_08003320",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "process_data_08003330",
            "code": "\nvoid processData_08003330(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined4 param9,undefined4 *outputParamsArray)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  int result8;\n  undefined4 result9;\n  undefined4 result10;\n  undefined4 result11;\n  undefined4 result12;\n  undefined4 result13;\n  undefined4 result14;\n  undefined4 result15;\n  undefined4 result16;\n  undefined4 result17;\n  undefined4 result18;\n  int result19;\n  undefined4 result20;\n  undefined4 result21;\n  undefined4 result22;\n  undefined4 result23;\n  undefined4 result24;\n  undefined4 result25;\n  int result26;\n  undefined4 result27;\n  undefined4 result28;\n  undefined4 result29;\n  int result30;\n  undefined8 result31;\n  undefined8 result32;\n  \n  result29 = DAT_20000048;\n  result28 = DAT_20000044;\n  result30 = DAT_20000040;\n  result27 = DAT_2000003c;\n  result1 = FUN_08000cec(input1,input1);\n  result2 = FUN_08000cec(input2);\n  result1 = FUN_08000adc(result1,result2);\n  result2 = FUN_08000cec(input3);\n  FUN_08000adc(result1,result2);\n  FUN_08000428();\n  FUN_08005bc8();\n  result1 = FUN_08000a30();\n  result3 = FUN_08001014(result1,0);\n  if (result3 == 0) {\n    result2 = FUN_08000cec(param7);\n    result4 = FUN_08000cec(param8);\n    result2 = FUN_08000adc(result2,result4);\n    result4 = FUN_08000cec(param9);\n    FUN_08000adc(result2,result4);\n    FUN_08000428();\n    FUN_08005bc8();\n    result2 = FUN_08000a30();\n    result3 = FUN_08001014(result2,0);\n    if (result3 == 0) {\n      result31 = FUN_08000428(param4);\n      FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0xa2529d39,0x3f91df46);\n      result4 = FUN_08000a30();\n      result31 = FUN_08000428(param5);\n      FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0xa2529d39,0x3f91df46);\n      result5 = FUN_08000a30();\n      result31 = FUN_08000428(param6);\n      FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0xa2529d39,0x3f91df46);\n      result6 = FUN_08000a30();\n      result3 = FUN_08000adc(result27);\n      result7 = FUN_08000adc(result30);\n      result8 = FUN_08000adc(result28,result28);\n      result9 = FUN_08000adc(result29,result29);\n      result10 = FUN_08000cec(result27);\n      result11 = FUN_08000cec(result27,result30);\n      result12 = FUN_08000cec(result27,result28);\n      result13 = FUN_08000cec(result30);\n      result14 = FUN_08000cec(result30,result29);\n      result15 = FUN_08000cec(result28,result28);\n      result16 = FUN_08000cec(result29,result29);\n      result1 = FUN_08000e54(0x3f800000,result1);\n      result2 = FUN_08000e54(0x3f800000,result2);\n      result17 = FUN_08000cec(param7,result2);\n      result18 = FUN_08000cec(param8,result2);\n      result2 = FUN_08000cec(param9,result2);\n      result19 = FUN_08000cec(result3,result17);\n      result20 = FUN_08000cec(result3,result18);\n      result21 = FUN_08000cec(result3,result2);\n      result22 = FUN_08000cec(result7,result17);\n      result23 = FUN_08000cec(result10,result17);\n      result24 = FUN_08000cec(result29,result20);\n      result23 = FUN_08000ad8(result23,result24);\n      result24 = FUN_08000cec(result28,result21);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result13,result17);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result7,result18);\n      result24 = FUN_08000cec(result24,result28);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result7,result2);\n      result24 = FUN_08000cec(result24,result29);\n      result23 = FUN_08000adc(result23,result24);\n      result24 = FUN_08000cec(result15,result17);\n      result23 = FUN_08000ad8(result23,result24);\n      result24 = FUN_08000cec(result16,result17);\n      result23 = FUN_08000ad8(result23,result24);\n      result24 = FUN_08000cec(result29,result19);\n      result25 = FUN_08000cec(result10,result18);\n      result24 = FUN_08000adc(result24,result25);\n      result21 = FUN_08000cec(result30,result21);\n      result21 = FUN_08000ad8(result24,result21);\n      result24 = FUN_08000cec(result28,result22);\n      result21 = FUN_08000adc(result21,result24);\n      result24 = FUN_08000cec(result13,result18);\n      result21 = FUN_08000ad8(result21,result24);\n      result24 = FUN_08000cec(result15,result18);\n      result21 = FUN_08000adc(result21,result24);\n      result24 = FUN_08000cec(result8,result2);\n      result24 = FUN_08000cec(result24,result29);\n      result21 = FUN_08000adc(result21,result24);\n      result24 = FUN_08000cec(result16,result18);\n      result21 = FUN_08000ad8(result21,result24);\n      result23 = FUN_08000cec(result23,result23);\n      result21 = FUN_08000cec(result21,result21);\n      FUN_08000adc(result23,result21);\n      FUN_08000428();\n      FUN_08005bc8();\n      result26 = FUN_08000a30();\n      result21 = FUN_08000cec(result19 + -0x80000000,result28);\n      result20 = FUN_08000cec(result30,result20);\n      result20 = FUN_08000adc(result21,result20);\n      result10 = FUN_08000cec(result10,result2);\n      result10 = FUN_08000adc(result20,result10);\n      result20 = FUN_08000cec(result29,result22);\n      result10 = FUN_08000adc(result10,result20);\n      result20 = FUN_08000cec(result13,result2);\n      result10 = FUN_08000ad8(result10,result20);\n      result20 = FUN_08000cec(result8,result18);\n      result20 = FUN_08000cec(result20,result29);\n      result10 = FUN_08000adc(result10,result20);\n      result20 = FUN_08000cec(result15,result2);\n      result10 = FUN_08000ad8(result10,result20);\n      result20 = FUN_08000cec(result16,result2);\n      result10 = FUN_08000adc(result10,result20);\n      result20 = FUN_08000adc(result10,result10);\n      result21 = FUN_08000adc(result14);\n      result22 = FUN_08000cec(result28,result3);\n      result21 = FUN_08000ad8(result21,result22);\n      result22 = FUN_08000cec(input1,result1);\n      result21 = FUN_08000ad8(result21,result22);\n      result22 = FUN_08000cec(result29,result8);\n      result23 = FUN_08000adc(result11);\n      result22 = FUN_08000adc(result22,result23);\n      result23 = FUN_08000cec(input2,result1);\n      result22 = FUN_08000ad8(result22,result23);\n      result23 = FUN_08000cec(result28,result10);\n      result24 = FUN_08000ad8(0x3f000000,result15);\n      result16 = FUN_08000ad8(result24,result16);\n      result16 = FUN_08000cec(result16,result26);\n      result24 = FUN_08000ad8(result14,result12);\n      result24 = FUN_08000cec(result24,result10);\n      result16 = FUN_08000adc(result16,result24);\n      result16 = FUN_08000ad8(result16,result17);\n      result17 = FUN_08000cec(result30,result10);\n      result24 = FUN_08000cec(result30,result28);\n      result25 = FUN_08000cec(result27,result29);\n      result24 = FUN_08000ad8(result24,result25);\n      result24 = FUN_08000cec(result24,result26);\n      result25 = FUN_08000cec(result28,result29);\n      result11 = FUN_08000adc(result25,result11);\n      result11 = FUN_08000cec(result11,result10);\n      result11 = FUN_08000adc(result24,result11);\n      result11 = FUN_08000ad8(result11,result18);\n      result18 = FUN_08000cec(result28,result26);\n      result24 = FUN_08000ad8(0x3f000000,result13);\n      result24 = FUN_08000ad8(result24,result15);\n      result24 = FUN_08000cec(result24,result10);\n      result12 = FUN_08000adc(result12,result14);\n      result12 = FUN_08000cec(result12,result26);\n      result12 = FUN_08000adc(result24,result12);\n      result2 = FUN_08000ad8(result12,result2);\n      result12 = FUN_08000cec(result8 + -0x80000000,result21);\n      result14 = FUN_08000cec(result7,result22);\n      result12 = FUN_08000adc(result12,result14);\n      result14 = FUN_08000cec(result23,result16);\n      result12 = FUN_08000ad8(result12,result14);\n      result14 = FUN_08000cec(result29,result26 + -0x80000000);\n      result14 = FUN_08000adc(result14,result17);\n      result14 = FUN_08000cec(result14,result11);\n      result12 = FUN_08000adc(result12,result14);\n      result14 = FUN_08000cec(result18,result2);\n      result12 = FUN_08000adc(result12,result14);\n      result13 = FUN_08000adc(result13);\n      result13 = FUN_08000ad8(0x3f800000,result13);\n      result14 = FUN_08000adc(result15);\n      result13 = FUN_08000ad8(result13,result14);\n      result1 = FUN_08000cec(input3,result1);\n      result1 = FUN_08000ad8(result13,result1);\n      result13 = FUN_08000cec(result29,result10);\n      result10 = FUN_08000cec(result27,result10);\n      result14 = FUN_08000cec(result9,result21);\n      result15 = FUN_08000cec(result3,result22);\n      result14 = FUN_08000adc(result14,result15);\n      result15 = FUN_08000cec(result30,0x40800000);\n      result15 = FUN_08000cec(result15,result1);\n      result14 = FUN_08000ad8(result14,result15);\n      result15 = FUN_08000cec(result16,result13);\n      result14 = FUN_08000adc(result14,result15);\n      result15 = FUN_08000adc(result18,result10);\n      result15 = FUN_08000cec(result15,result11);\n      result14 = FUN_08000adc(result14,result15);\n      result15 = FUN_08000cec(result29,result26);\n      result18 = FUN_08000cec(result30,result20);\n      result15 = FUN_08000ad8(result15,result18);\n      result15 = FUN_08000cec(result15,result2);\n      result14 = FUN_08000adc(result14,result15);\n      result19 = FUN_08000adc(result26,result26);\n      result15 = FUN_08000cec(result30,result26);\n      result18 = FUN_08000cec(result3 + -0x80000000,result21);\n      result9 = FUN_08000cec(result9,result22);\n      result9 = FUN_08000adc(result18,result9);\n      result18 = FUN_08000cec(result28,0x40800000);\n      result1 = FUN_08000cec(result18,result1);\n      result1 = FUN_08000ad8(result9,result1);\n      result9 = FUN_08000cec(result28,result19 + -0x80000000);\n      result9 = FUN_08000ad8(result9,result10);\n      result9 = FUN_08000cec(result9,result16);\n      result1 = FUN_08000adc(result1,result9);\n      result9 = FUN_08000adc(result13,result15);\n      result9 = FUN_08000cec(result9,result11);\n      result1 = FUN_08000adc(result1,result9);\n      result9 = FUN_08000cec(result27,result26);\n      result10 = FUN_08000cec(result28,result20);\n      result9 = FUN_08000ad8(result9,result10);\n      result9 = FUN_08000cec(result9,result2);\n      result9 = FUN_08000adc(result1,result9);\n      result1 = FUN_08000cec(result7,result21);\n      result7 = FUN_08000cec(result8,result22);\n      result1 = FUN_08000adc(result1,result7);\n      result7 = FUN_08000cec(result29,result19 + -0x80000000);\n      result7 = FUN_08000adc(result7,result17);\n      result7 = FUN_08000cec(result7,result16);\n      result1 = FUN_08000adc(result1,result7);\n      result7 = FUN_08000cec(result27,result26 + -0x80000000);\n      result7 = FUN_08000adc(result7,result23);\n      result7 = FUN_08000cec(result7,result11);\n      result1 = FUN_08000adc(result1,result7);\n      result2 = FUN_08000cec(result2,result15);\n      result7 = FUN_08000adc(result1,result2);\n      result1 = FUN_08000cec(result12);\n      result2 = FUN_08000cec(result14);\n      result1 = FUN_08000adc(result1,result2);\n      result2 = FUN_08000cec(result9,result9);\n      result1 = FUN_08000adc(result1,result2);\n      result2 = FUN_08000cec(result7,result7);\n      FUN_08000adc(result1,result2);\n      FUN_08000428();\n      FUN_08005bc8();\n      result1 = FUN_08000a30();\n      result10 = FUN_08000e54(0x3f800000,result1);\n      result1 = DAT_2000035c;\n      result2 = FUN_08000cec(result30 + -0x80000000,result4);\n      result11 = FUN_08000cec(result28,result5);\n      result2 = FUN_08000ad8(result2,result11);\n      result11 = FUN_08000cec(result29,result6);\n      result2 = FUN_08000ad8(result2,result11);\n      result11 = FUN_08000cec(result2,0x3f000000);\n      result12 = FUN_08000cec(result12,result10);\n      result2 = DAT_20000360;\n      result12 = FUN_08000cec(result12,result1);\n      result11 = FUN_08000ad8(result11,result12);\n      result2 = FUN_08000cec(result11,result2);\n      result11 = FUN_08000adc(result2,result27);\n      result12 = FUN_08000cec(result27,result4);\n      result13 = FUN_08000cec(result28,result6);\n      result2 = DAT_20000360;\n      result12 = FUN_08000adc(result12,result13);\n      result13 = FUN_08000cec(result29,result5);\n      result12 = FUN_08000ad8(result12,result13);\n      result12 = FUN_08000cec(result12,0x3f000000);\n      result13 = FUN_08000cec(result14,result10);\n      result13 = FUN_08000cec(result13,result1);\n      result12 = FUN_08000ad8(result12,result13);\n      result2 = FUN_08000cec(result12,result2);\n      result12 = FUN_08000adc(result2,result30);\n      result2 = DAT_20000360;\n      result13 = FUN_08000cec(result27,result5);\n      result14 = FUN_08000cec(result30,result6);\n      result13 = FUN_08000ad8(result13,result14);\n      result14 = FUN_08000cec(result29,result4);\n      result13 = FUN_08000adc(result13,result14);\n      result13 = FUN_08000cec(result13,0x3f000000);\n      result9 = FUN_08000cec(result9,result10);\n      result9 = FUN_08000cec(result9,result1);\n      result9 = FUN_08000ad8(result13,result9);\n      result2 = FUN_08000cec(result9,result2);\n      result2 = FUN_08000adc(result2,result28);\n      result27 = FUN_08000cec(result27,result6);\n      result5 = FUN_08000cec(result30,result5);\n      result27 = FUN_08000adc(result27,result5);\n      result28 = FUN_08000cec(result28,result4);\n      result27 = FUN_08000ad8(result27,result28);\n      result28 = FUN_08000cec(result27,0x3f000000);\n      result27 = FUN_08000cec(result7,result10);\n      result1 = FUN_08000cec(result27,result1);\n      result27 = DAT_20000360;\n      result28 = FUN_08000ad8(result28,result1);\n      result27 = FUN_08000cec(result28,result27);\n      result27 = FUN_08000adc(result27,result29);\n      result28 = FUN_08000cec(result11,result11);\n      result29 = FUN_08000cec(result12,result12);\n      result28 = FUN_08000adc(result28,result29);\n      result29 = FUN_08000cec(result2,result2);\n      result28 = FUN_08000adc(result28,result29);\n      result29 = FUN_08000cec(result27,result27);\n      FUN_08000adc(result28,result29);\n      FUN_08000428();\n      FUN_08005bc8();\n      result28 = FUN_08000a30();\n      result28 = FUN_08000e54(0x3f800000,result28);\n      result29 = FUN_08000cec(result11,result28);\n      DAT_2000003c = result29;\n      result30 = FUN_08000cec(result12,result28);\n      DAT_20000040 = result30;\n      result1 = FUN_08000cec(result2,result28);\n      DAT_20000044 = result1;\n      DAT_20000048 = FUN_08000cec(result27,result28);\n      result27 = FUN_08000cec(result30,DAT_20000048);\n      result28 = FUN_08000cec(result29,result1);\n      result27 = FUN_08000ad8(result27,result28);\n      FUN_08000adc(result27,result27);\n      FUN_08000428();\n      result31 = FUN_08005854();\n      result31 = FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result31,(int)((ulonglong)result31 >> 0x20),0x54442d18,0x400921fb);\n      result27 = FUN_08000a30();\n      *outputParamsArray = result27;\n      result30 = DAT_20000040;\n      result27 = DAT_2000003c;\n      result28 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result29 = FUN_08000cec(result30,result30);\n      result29 = FUN_08000ad8(result28,result29);\n      result28 = DAT_20000044;\n      result1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result1 = FUN_08000ad8(result29,result1);\n      result29 = DAT_20000048;\n      result2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000adc(result1,result2);\n      result31 = FUN_08000428();\n      result27 = FUN_08000cec(result27,result30);\n      result28 = FUN_08000cec(result28,result29);\n      result27 = FUN_08000adc(result27,result28);\n      FUN_08000adc(result27,result27);\n      result32 = FUN_08000428();\n      result31 = thunk_FUN_08006070((int)result32,(int)((ulonglong)result32 >> 0x20),(int)result31,\n                                  (int)((ulonglong)result31 >> 0x20));\n      result31 = FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result31,(int)((ulonglong)result31 >> 0x20),0x54442d18,0x400921fb);\n      result27 = FUN_08000a30();\n      outputParamsArray[1] = result27;\n      result30 = DAT_20000040;\n      result27 = DAT_2000003c;\n      result28 = FUN_08000cec(DAT_2000003c,DAT_2000003c);\n      result29 = FUN_08000cec(result30,result30);\n      result29 = FUN_08000adc(result28,result29);\n      result28 = DAT_20000044;\n      result1 = FUN_08000cec(DAT_20000044,DAT_20000044);\n      result1 = FUN_08000ad8(result29,result1);\n      result29 = DAT_20000048;\n      result2 = FUN_08000cec(DAT_20000048,DAT_20000048);\n      FUN_08000ad8(result1,result2);\n      result31 = FUN_08000428();\n      result28 = FUN_08000cec(result30,result28);\n      result27 = FUN_08000cec(result27,result29);\n      result27 = FUN_08000adc(result28,result27);\n      FUN_08000adc(result27,result27);\n      result32 = FUN_08000428();\n      result31 = thunk_FUN_08006070((int)result32,(int)((ulonglong)result32 >> 0x20),(int)result31,\n                                  (int)((ulonglong)result31 >> 0x20));\n      result31 = FUN_080004d0((int)result31,(int)((ulonglong)result31 >> 0x20),0,0x40668000);\n      FUN_08000724((int)result31,(int)((ulonglong)result31 >> 0x20),0x54442d18,0x400921fb);\n      result27 = FUN_08000a30();\n      outputParamsArray[2] = result27;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "process_data_08003330",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "outputParamsArray",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "iVar8": "result8",
                "uVar9": "result9",
                "uVar10": "result10",
                "uVar11": "result11",
                "uVar12": "result12",
                "uVar13": "result13",
                "uVar14": "result14",
                "uVar15": "result15",
                "uVar16": "result16",
                "uVar17": "result17",
                "uVar18": "result18",
                "iVar19": "result19",
                "uVar20": "result20",
                "uVar21": "result21",
                "uVar22": "result22",
                "uVar23": "result23",
                "uVar24": "result24",
                "uVar25": "result25",
                "iVar26": "result26",
                "uVar27": "result27",
                "uVar28": "result28",
                "uVar29": "result29",
                "iVar30": "result30",
                "uVar31": "result31",
                "uVar32": "result32"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_080004d0",
                "FUN_08001014",
                "FUN_08000e54",
                "thunk_FUN_08006070",
                "FUN_08000a30",
                "FUN_08005854",
                "FUN_08005bc8",
                "FUN_08000cec",
                "FUN_08000428",
                "FUN_08000724",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "convert_to64_bit_08003eb0",
            "code": "\nlonglong convertTo64Bit_08003eb0(uint inputValue)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combine64BitValues(inputValue,1);\n  }\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "convert_to64_bit_08003eb0",
                "param_1": "inputValue",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combine64BitValues"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_08003ec8",
            "code": "\nundefined4 incrementAndStore_08003ec8(int baseAddress,undefined value)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = value;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "initialize_flags_08003f3c",
            "code": "\nvoid initializeFlags_08003f3c(int flag1,int flag2,int flag3)\n\n{\n  FUN_08001424(0x40011000,0x8000,flag1 == 0);\n  FUN_08001424(0x40011000,0x4000,flag2 == 0);\n  FUN_08001424(0x40011000,0x2000,flag3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "initialize_flags_08003f3c",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param_value_08003fc4",
            "code": "\nvoid setParamValue_08003fc4(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param_value_08003fc4",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_value_08003fd0",
            "code": "\nvoid setParamValue_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_value_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_global_parameter_08003fdc",
            "code": "\nvoid setGlobalParameter_08003fdc(undefined4 newParameter)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = newParameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_global_parameter_08003fdc",
                "param_1": "newParameter"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_value_08003fe8",
            "code": "\nvoid setParamValue_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_value_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_data_08003ff4",
            "code": "\nvoid initializeData_08003ff4(void)\n\n{\n  FUN_08002538(&DAT_200015f8,4);\n  FUN_08002538(&DAT_20001540,8);\n  FUN_08002538(&DAT_200014c8,8);\n  FUN_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_data_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "perform_operation_08004028",
            "code": "\nvoid performOperation_08004028(void)\n\n{\n  int loopCounter;\n  \n  FUN_0800458c();\n  FUN_08003ff4();\n  loopCounter = 3;\n  do {\n    FUN_08003f3c(1,0);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,1);\n    thunk_FUNC_08001168(100);\n    FUN_08003f3c(0,0,1);\n    thunk_FUNC_08001168(100);\n    loopCounter = loopCounter + -1;\n  } while (loopCounter != 0);\n  FUN_08003f3c(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "perform_operation_08004028",
                "iVar1": "loopCounter"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "check_i2_c_communication_0800403c",
            "code": "\nvoid checkI2CCommunication_0800403c(undefined4 param1,undefined4 param2,undefined communicationType,int performOperation)\n\n{\n  int status;\n  undefined buffer [8];\n  \n  buffer[0] = communicationType;\n  status = FUN_08001828(&DAT_20001504,param1,param2,1,buffer,1,200);\n  if (status != 0) {\n    FUN_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (performOperation != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "check_i2_c_communication_0800403c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "communicationType",
                "param_4": "performOperation",
                "iVar1": "status",
                "local_14": "buffer"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "check_and_execute_function_0800407c",
            "code": "\nundefined checkAndExecuteFunction_0800407c(undefined4 dataPointer,undefined4 inputParameter1,undefined4 buffer1,undefined4 buffer2)\n\n{\n  int iVar1;\n  undefined returnValue [8];\n  \n  returnValue[0] = 0;\n  iVar1 = FUN_08001938(&DAT_20001504,dataPointer,inputParameter1,1,returnValue,1,200);\n  if (iVar1 != 0) {\n    FUN_08004490(buffer1,buffer2);\n  }\n  return returnValue[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "check_and_execute_function_0800407c",
                "param_1": "dataPointer",
                "param_2": "inputParameter1",
                "param_3": "buffer1",
                "param_4": "buffer2",
                "local_14": "returnValue"
            },
            "calling": [
                "FUN_08002ad0",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "check_and_execute_function_080040b8",
            "code": "\nvoid checkAndExecuteFunction_080040b8(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 output1,undefined4 output2)\n\n{\n  int result;\n  \n  result = FUN_08001938(&DAT_20001504,input1,input2,1,input3,input4,200,input4);\n  if (result != 0) {\n    FUN_08004490(output1,output2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "check_and_execute_function_080040b8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "output1",
                "param_6": "output2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "copy_data_to_buffer_080040e8",
            "code": "\nvoid copyDataToBuffer_080040e8(undefined4 sourceBuffer,int index,int destBuffer,int length)\n\n{\n  undefined value;\n  int i;\n  undefined *destPointer;\n  int sourceOffset;\n  \n  destPointer = (undefined *)(destBuffer + -1);\n  sourceOffset = length;\n  for (i = 0; i < length; i = i + 1) {\n    value = FUN_0800407c(sourceBuffer,index + i & 0xffff,\"../Src/i2c.c\",0x4c,sourceOffset);\n    destPointer = destPointer + 1;\n    *destPointer = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "copy_data_to_buffer_080040e8",
                "param_1": "sourceBuffer",
                "param_2": "index",
                "param_3": "destBuffer",
                "param_4": "length",
                "uVar1": "value",
                "iVar2": "i",
                "puVar3": "destPointer",
                "iVar4": "sourceOffset"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002bf0"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "update_data_0800411c",
            "code": "\nvoid updateData_0800411c(void)\n\n{\n  undefined4 *pointer1;\n  longlong longVar;\n  uint var3;\n  uint var4;\n  uint var5;\n  undefined4 var6;\n  undefined4 var7;\n  int count;\n  uint var9;\n  uint var10;\n  uint var11;\n  uint var12;\n  undefined4 *pointer2;\n  undefined4 unaffectedVar;\n  int var14;\n  int var15;\n  bool boolVar;\n  undefined8 var17;\n  \n  count = thunk_FUN_0800115c();\n  if (1 < (uint)(count - DAT_2000028c)) {\n    DAT_2000028c = thunk_FUN_0800115c();\n    FUN_08002f28();\n  }\n  count = thunk_FUN_0800115c();\n  if (2 < (uint)(count - DAT_20000294)) {\n    DAT_20000294 = thunk_FUN_0800115c();\n    FUN_08004a84();\n  }\n  count = thunk_FUN_0800115c();\n  if (3 < (uint)(count - DAT_20000290)) {\n    DAT_20000290 = thunk_FUN_0800115c();\n    FUN_08004348();\n    FUN_08004384();\n    FUN_080043f0();\n    FUN_08004410();\n    FUN_08004434();\n    FUN_080043bc();\n    FUN_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    var15 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    var9 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)var15) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)var15) >> 0x20) << 9;\n    var10 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)var15 >> 7);\n    var11 = var10 + (uint)DAT_20000260 * 0x10000;\n    var4 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)var15) >> 8);\n    count = var9 + 2000;\n    var5 = var4 + (uint)DAT_2000025e * 0x8000;\n    boolVar = (int)var9 < 0;\n    if (1999 < count) {\n      var9 = 0;\n    }\n    var3 = var9;\n    if (boolVar != SBORROW4(count,2000)) {\n      var14 = var9 * var9 * 5;\n      var9 = var14 >> 2;\n      var3 = var14 >> 1;\n    }\n    var12 = var11 - var3;\n    longVar = (ulonglong)(var5 - var9) * (ulonglong)DAT_2000026c;\n    var14 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)var15 >> 0x28) +\n               (uint)CARRY4(var4,(uint)DAT_2000025e * 0x8000)) - ((int)var9 >> 0x1f)) -\n             (uint)(var5 < var9)) + (int)((ulonglong)longVar >> 0x20);\n    var4 = (uint)longVar >> 0x15 | var14 * 0x800;\n    var6 = FUN_08000c44(var4 - var12 >> 0xf |\n                         (((var14 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)var15 >> 0x27) +\n                            (uint)CARRY4(var10,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)var3 >> 0x1f)) - (uint)(var11 < var3))) - (uint)(var4 < var12)\n                         ) * 0x20000);\n    var6 = FUN_08000e54(var6,0x42c80000);\n    DAT_20000354 = var6;\n    var7 = FUN_08000c44(count);\n    DAT_20000358 = FUN_08000e54(var7,0x42c80000);\n    FUN_08000e54(var6,0x447d5000);\n    var17 = FUN_08000428();\n    var17 = FUN_08005900((int)var17,(int)((ulonglong)var17 >> 0x20),0x60000000,0x3fc85b95);\n    var17 = FUN_08000168(0,0x3ff00000,(int)var17,(int)((ulonglong)var17 >> 0x20));\n    FUN_080004d0((int)var17,(int)((ulonglong)var17 >> 0x20),0,0x40e5a540);\n    var6 = FUN_08000a30();\n    var7 = 0;\n    pointer2 = &DAT_20000300;\n    DAT_20000350 = var6;\n    do {\n      pointer1 = pointer2 + 1;\n      *pointer2 = *pointer1;\n      var7 = FUN_08000adc(var7);\n      pointer2 = pointer1;\n    } while (pointer1 != &DAT_2000034c);\n    DAT_2000034c = var6;\n    var6 = FUN_08000adc(var7,var6);\n    DAT_200002fc = FUN_08000e54(var6,0x41a00000);\n    count = FUN_08001078();\n    DAT_200014ab = count * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    FUN_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_FUN_0800115c();\n  }\n  count = thunk_FUN_0800115c();\n  if (((10 < (uint)(count - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = FUN_08003034();\n    DAT_20000275 = '\\x01';\n    FUN_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaffectedVar);\n    DAT_20000278 = thunk_FUN_0800115c();\n  }\n  count = thunk_FUN_0800115c();\n  if (((10 < (uint)(count - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = FUN_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "update_data_0800411c",
                "puVar1": "pointer1",
                "lVar2": "longVar",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "iVar8": "count",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "puVar13": "pointer2",
                "unaff_r4": "unaffectedVar",
                "iVar14": "var14",
                "iVar15": "var15",
                "bVar16": "boolVar",
                "uVar17": "var17"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_080004d0",
                "FUN_08000e54",
                "FUN_08003034",
                "FUN_08000a30",
                "FUN_08000c44",
                "FUN_08004410",
                "FUN_08005900",
                "FUN_08004348",
                "FUN_08000168",
                "FUN_08000428",
                "FUN_08002f28",
                "FUN_08004458",
                "FUN_080043bc",
                "FUN_08004384",
                "FUN_0800403c",
                "FUN_08004a84",
                "FUN_080043f0",
                "FUN_08004434",
                "FUN_08001078",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_game_data_08004194",
            "code": "\nvoid initializeGameData_08004194(void)\n\n{\n  FUN_08004028();\n  FUN_08004c70();\n  FUN_08002ea0();\n  FUN_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_game_data_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08002ea0",
                "FUN_08004c70",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "main_loop_080041ae",
            "code": "\nvoid mainLoop_080041ae(void)\n\n{\n  FUN_08003eb0(0);\n  FUN_08004194();\n  do {\n    FUN_0800114c();\n    FUN_0800411c();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "main_loop_080041ae"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08003eb0",
                "FUN_08004194",
                "FUN_0800411c",
                "FUN_0800114c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_application_080041c4",
            "code": "\nvoid initializeApplication_080041c4(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 returnValue;\n  \n  FUN_08003fc4(0);\n  FUN_08003fd0(0);\n  FUN_08003fdc(0);\n  FUN_08003fe8(0,returnValue,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_application_080041c4",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "returnValue"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_thresholds_0800426c",
            "code": "\n\n\nvoid calculate_thresholds_0800426c(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint result4;\n  uint result5;\n  uint result6;\n  uint result7;\n  \n  result1 = FUN_08000ad8();\n  result2 = FUN_08000adc(input_param1,input_param2);\n  result3 = FUN_08000ad8(result1,input_param3);\n  result3 = FUN_08000adc(result3,input_param4);\n  FUN_08000ad8(result3,0x447a0000);\n  result4 = FUN_08001078();\n  result3 = FUN_08000ad8(result2,input_param3);\n  result3 = FUN_08000ad8(result3,input_param4);\n  FUN_08000ad8(result3,0x447a0000);\n  result5 = FUN_08001078();\n  result1 = FUN_08000adc(result1,input_param3);\n  result1 = FUN_08000ad8(result1,input_param4);\n  FUN_08000ad8(result1,0x447a0000);\n  result6 = FUN_08001078();\n  result1 = FUN_08000adc(input_param3,result2);\n  result1 = FUN_08000adc(result1,input_param4);\n  FUN_08000ad8(result1,0x447a0000);\n  result7 = FUN_08001078();\n  if (999 < (int)result7) {\n    result7 = 1000;\n  }\n  if (999 < (int)result6) {\n    result6 = 1000;\n  }\n  if (999 < (int)result5) {\n    result5 = 1000;\n  }\n  if (999 < (int)result4) {\n    result4 = 1000;\n  }\n  DAT_200002a0 = result5 & ~((int)result5 >> 0x1f);\n  DAT_200002a4 = result4 & ~((int)result4 >> 0x1f);\n  DAT_2000029c = result6 & ~((int)result6 >> 0x1f);\n  DAT_20000298 = result7 & ~((int)result7 >> 0x1f);\n  FUN_08003fc4();\n  FUN_08003fd0(DAT_2000029c);\n  FUN_08003fdc(DAT_200002a0);\n  FUN_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_thresholds_0800426c",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08003fe8",
                "FUN_08003fc4",
                "FUN_08003fdc",
                "FUN_08001078",
                "FUN_08000adc",
                "FUN_08003fd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "checksum_08004300",
            "code": "\nvoid checksum_08004300(uint input_value,byte *byte_array,uint array_length)\n\n{\n  uint result;\n  byte *current_byte;\n  \n  FUN_08004c8c(&DAT_0800732e);\n  FUN_08004c18(array_length & 0xff);\n  result = array_length & 0xff ^ input_value;\n  FUN_08004c18(input_value);\n  for (current_byte = byte_array; (int)current_byte - (int)byte_array < (int)array_length; current_byte = current_byte + 1) {\n    FUN_08004c18(*current_byte);\n    result = result ^ *current_byte;\n  }\n  FUN_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "checksum_08004300",
                "param_1": "input_value",
                "param_2": "byte_array",
                "param_3": "array_length",
                "uVar1": "result",
                "pbVar2": "current_byte"
            },
            "calling": [
                "FUN_08004458",
                "FUN_08004384",
                "FUN_080043bc",
                "FUN_08004410",
                "FUN_08004348",
                "FUN_080043f0",
                "FUN_08004434"
            ],
            "called": [
                "FUN_08004c18",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initializeData_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 constantValue;\n  uint maskedParam2;\n  undefined4 param3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  constantValue = 0x40003e9;\n  maskedParam2 = param2 & 0xff000000;\n  param3Copy = param3;\n  FUN_08004300(100,&constantValue,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "constantValue",
                "local_c": "maskedParam2",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_data_08004384",
            "code": "\n\n\nvoid initializeData_08004384(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,uint inputParam4)\n\n{\n  undefined4 localVar1;\n  undefined4 localVar2;\n  uint localVar3;\n  \n  _DAT_200013bd = 0x2a0007;\n  localVar1 = DAT_200013b9;\n  localVar2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  localVar3 = inputParam4 & 0xff000000;\n  FUN_08004300(0x65,&localVar1,0xb,0,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_data_08004384",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_14": "localVar1",
                "uStack_10": "localVar2",
                "local_c": "localVar3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_call_function_080043bc",
            "code": "\nvoid copyAndCallFunction_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *destinationPointer;\n  undefined4 *sourcePointer;\n  undefined4 tempArray [2];\n  undefined2 tempArray2 [6];\n  \n  sourcePointer = (undefined4 *)&DAT_2000142a;\n  destinationPointer = tempArray;\n  do {\n    value1 = *sourcePointer;\n    value2 = sourcePointer[1];\n    sourcePointer = sourcePointer + 2;\n    *destinationPointer = value1;\n    destinationPointer[1] = value2;\n    destinationPointer = destinationPointer + 2;\n  } while (sourcePointer != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destinationPointer = DAT_2000143a;\n  FUN_08004300(0x66,tempArray,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_call_function_080043bc",
                "puVar4": "sourcePointer",
                "puVar3": "destinationPointer",
                "local_24": "tempArray",
                "local_1c": "tempArray2",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "extract_and_process_data_080043f0",
            "code": "\n\n\nvoid extract_and_process_data_080043f0(undefined4 data_address,undefined4 data_size,undefined4 input_data)\n\n{\n  undefined4 data;\n  undefined4 data_end;\n  undefined4 input_data_array [2];\n  \n  data = _DAT_200013dd;\n  data_end = _DAT_200013e1;\n  input_data_array[0] = input_data;\n  FUN_08004300(0x68,&data,8,input_data_array);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "extract_and_process_data_080043f0",
                "param_1": "data_address",
                "param_2": "data_size",
                "param_3": "input_data",
                "local_10": "data",
                "uStack_c": "data_end",
                "auStack_8": "input_data_array"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "initialize_data_08004410",
            "code": "\nvoid initializeData_08004410(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 dataPointer;\n  undefined4 concatenatedValue;\n  undefined4 stackVariable;\n  \n  dataPointer = DAT_20001395;\n  concatenatedValue = CONCAT22((short)((uint)arg2 >> 0x10),DAT_20001399);\n  stackVariable = arg3;\n  FUN_08004300(0x6c,&dataPointer,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "initialize_data_08004410",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "dataPointer",
                "local_c": "concatenatedValue",
                "uStack_8": "stackVariable"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "initialize_data_08004434",
            "code": "\nvoid initializeData_08004434(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 dataPointer;\n  undefined4 combinedData;\n  undefined4 stackData;\n  \n  dataPointer = DAT_200014ab;\n  combinedData = CONCAT22((short)((uint)param2 >> 0x10),DAT_200014af);\n  stackData = param3;\n  FUN_08004300(0x6d,&dataPointer,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "initialize_data_08004434",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "dataPointer",
                "local_c": "combinedData",
                "uStack_8": "stackData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_data_to_buffer_08004458",
            "code": "\nvoid copy_data_to_buffer_08004458(void)\n\n{\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 temp;\n  undefined4 *current_destination;\n  undefined4 *current_source;\n  undefined4 buffer [3];\n  undefined2 temp_buffer [10];\n  \n  destination = buffer;\n  source = &DAT_2000139b;\n  do {\n    current_source = source;\n    current_destination = destination;\n    temp = current_source[1];\n    *current_destination = *current_source;\n    current_destination[1] = temp;\n    destination = current_destination + 2;\n    source = current_source + 2;\n  } while (current_source + 2 != (undefined4 *)0x200013b3);\n  current_destination[2] = uRam200013b3;\n  *(undefined2 *)(current_destination + 3) = *(undefined2 *)(current_source + 3);\n  FUN_08004300(0x70,buffer,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_data_to_buffer_08004458",
                "puVar1": "destination",
                "puVar2": "source",
                "uVar3": "temp",
                "puVar4": "current_destination",
                "puVar5": "current_source",
                "local_30": "buffer",
                "local_24": "temp_buffer"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "check_and_print_error_08004490",
            "code": "\nvoid checkAndPrintError_08004490(undefined4 errorName,undefined4 lineNumber)\n\n{\n  FUN_08001424(0x40011000,0x4000,1);\n  FUN_08001424(0x40011000,0x8000,0);\n  FUN_08001424(0x40011000,0x2000,0);\n  do {\n    FUN_0800142e(0x40011000,0x4000);\n    FUN_0800142e(0x40011000,0x8000);\n    FUN_0800142e(0x40011000,0x2000);\n    FUN_08004c8c(\"Error with \");\n    FUN_08004c8c(errorName);\n    FUN_08004c8c(\" at line: \");\n    FUN_08004cac(lineNumber);\n    FUN_08004c18(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "check_and_print_error_08004490",
                "param_1": "errorName",
                "param_2": "lineNumber"
            },
            "calling": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08004514",
                "FUN_080040b8",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004cac",
                "FUN_08004c18",
                "FUN_0800142e",
                "thunk_FUN_08001168",
                "FUN_08001424",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripheral_08004514",
            "code": "\nvoid initializePeripheral_08004514(void)\n\n{\n  int result;\n  uint timeInMilliseconds;\n  undefined4 initialValue;\n  int counter;\n  undefined4 numberOfBits;\n  int loopCounter;\n  int fileIndex;\n  undefined4 bufferSize;\n  int fileIndexCopy;\n  undefined4 fileIndices [4];\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  undefined4 flag4;\n  undefined4 constant;\n  \n  flag1 = 1;\n  flag2 = 0x10;\n  counter = 2;\n  flag4 = 0;\n  fileIndices[0] = 2;\n  flag3 = 2;\n  constant = 0x380000;\n  result = FUN_08001b58(fileIndices);\n  if (result == 0) goto LAB_08004540;\n  initialValue = 0x3c;\n  while( true ) {\n    result = FUN_08004490(\"../Src/peripherals.c\",initialValue);\nLAB_08004540:\n    numberOfBits = 0xf;\n    bufferSize = 0x400;\n    loopCounter = counter;\n    fileIndex = result;\n    fileIndexCopy = result;\n    counter = FUN_0800209c(&numberOfBits,counter);\n    if (counter == 0) break;\n    initialValue = 0x49;\n  }\n  timeInMilliseconds = FUN_08002214();\n  FUN_08001214(timeInMilliseconds / 1000);\n  FUN_08001240(4);\n  FUN_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripheral_08004514",
                "iVar1": "result",
                "uVar2": "timeInMilliseconds",
                "uVar3": "initialValue",
                "iVar4": "counter",
                "local_44": "numberOfBits",
                "local_40": "loopCounter",
                "local_3c": "fileIndex",
                "local_38": "bufferSize",
                "local_34": "fileIndexCopy",
                "local_30": "fileIndices",
                "local_20": "flag1",
                "local_1c": "flag2",
                "local_14": "flag3",
                "local_10": "flag4",
                "local_c": "constant"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08002214",
                "FUN_08001b58",
                "FUN_08004490",
                "FUN_0800209c",
                "FUN_08001194",
                "FUN_08001214",
                "FUN_08001240"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripherals_0800458c",
            "code": "\n\n\nvoid initializePeripherals_0800458c(void)\n\n{\n  int result;\n  undefined4 constant;\n  int counter;\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int temp5;\n  int temp6;\n  int temp7;\n  int temp8;\n  int size;\n  int offset;\n  int length;\n  int value;\n  int index;\n  undefined4 flag;\n  int var;\n  \n  FUN_08001128();\n  FUN_08004514();\n  counter = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  FUN_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  FUN_08001424(0x40010800,0x20,0);\n  size = 0xe000;\n  offset = 1;\n  value = 2;\n  FUN_08001264(0x40011000,&size);\n  size = 0x20;\n  offset = 1;\n  value = 2;\n  FUN_08001264(0x40010800,&size);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = FUN_08001754();\n  if (result == 0) goto LAB_0800463a;\n  constant = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = FUN_08004490(\"../Src/peripherals.c\",constant);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = FUN_08002724(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  constant = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = counter;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = FUN_080023d0(&DAT_200015bc);\n                                if (result == 0) break;\n                                constant = 0x88;\n                              }\n                              temp1 = result;\n                              temp2 = result;\n                              result = FUN_080025a4(&DAT_200015bc,&temp1);\n                              if (result == 0) break;\n                              constant = 0x8f;\n                            }\n                            temp3 = 0x60;\n                            temp4 = result;\n                            temp5 = result;\n                            temp6 = result;\n                            temp7 = result;\n                            temp8 = result;\n                            result = FUN_0800245c(&DAT_200015bc,&temp3,0xc);\n                            if (result == 0) break;\n                            constant = 0x9a;\n                          }\n                          flag = 0x2000;\n                          size = result;\n                          offset = result;\n                          length = result;\n                          value = result;\n                          index = result;\n                          var = result;\n                          result = FUN_08002564(&DAT_200015bc,&size);\n                          if (result == 0) break;\n                          constant = 0xa6;\n                        }\n                        FUN_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = counter;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = FUN_080023d0(&DAT_200015f8);\n                        if (result == 0) break;\n                        constant = 0xc3;\n                      }\n                      temp3 = result;\n                      temp4 = result;\n                      result = FUN_080025a4(&DAT_200015f8,&temp3);\n                      if (result == 0) break;\n                      constant = 0xca;\n                    }\n                    size = 0x60;\n                    offset = result;\n                    length = result;\n                    index = result;\n                    result = FUN_0800245c(&DAT_200015f8,&size,4);\n                    if (result == 0) break;\n                    constant = 0xd3;\n                  }\n                  FUN_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = counter;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = FUN_080023d0();\n                  if (result == 0) break;\n                  constant = 0xf0;\n                }\n                temp3 = 0;\n                temp4 = 0;\n                result = FUN_080025a4(&DAT_20001540,&temp3);\n                if (result == 0) break;\n                constant = 0xf7;\n              }\n              size = 0x60;\n              offset = result;\n              length = result;\n              index = result;\n              result = FUN_0800245c(&DAT_20001540,&size,8);\n              if (result == 0) break;\n              constant = 0x100;\n            }\n            counter = FUN_0800245c(&DAT_20001540,&size,0xc);\n            if (counter == 0) break;\n            constant = 0x105;\n          }\n          FUN_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = counter;\n          DAT_200014d8 = counter;\n          result = FUN_080023d0(&DAT_200014c8);\n          if (result == 0) break;\n          constant = 0x122;\n        }\n        temp3 = result;\n        temp4 = result;\n        result = FUN_080025a4(&DAT_200014c8,&temp3);\n        if (result == 0) break;\n        constant = 0x129;\n      }\n      size = 0x60;\n      offset = result;\n      length = result;\n      index = result;\n      result = FUN_0800245c(&DAT_200014c8,&size,8);\n      if (result == 0) break;\n      constant = 0x132;\n    }\n    result = FUN_0800245c(&DAT_200014c8,&size,0xc);\n    if (result == 0) break;\n    constant = 0x137;\n  }\n  FUN_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripherals_0800458c",
                "iVar1": "result",
                "uVar2": "constant",
                "iVar3": "counter",
                "local_58": "temp1",
                "local_54": "temp2",
                "local_50": "temp3",
                "local_4c": "temp4",
                "local_48": "temp5",
                "local_40": "temp6",
                "local_3c": "temp7",
                "local_38": "temp8",
                "local_34": "size",
                "local_30": "offset",
                "local_2c": "length",
                "local_28": "value",
                "local_24": "index",
                "local_20": "flag",
                "local_1c": "var"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004490",
                "FUN_0800245c",
                "FUN_08004514",
                "FUN_080023d0",
                "FUN_08001128",
                "FUN_08001424",
                "FUN_080025a4",
                "FUN_08002724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_values_0800483c",
            "code": "\nvoid calculateValues_0800483c(int *values)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int value1;\n  int value2;\n  int value3;\n  \n  value2 = values[0xc];\n  result1 = FUN_08000adc(values[7],values[9]);\n  value2 = FUN_08000ad8(result1,value2);\n  values[10] = value2;\n  if (*values == 3) {\n    value2 = FUN_08001064(values[10],0);\n    if (value2 == 0) {\n      value2 = FUN_08001028(values[10],0xc3340000);\n    }\n    else {\n      value2 = FUN_08001064(values[10],0x43340000);\n    }\n    if (value2 != 0) {\n      value3 = values[10];\n      result1 = FUN_08000cec(values[10],0x43b40000);\n      value2 = FUN_08001064(values[10],0);\n      value1 = values[10];\n      if (value2 == 0) {\n        value1 = value1 + -0x80000000;\n      }\n      result1 = FUN_08000e54(result1,value1);\n      value2 = FUN_08000ad8(value3,result1);\n      values[10] = value2;\n    }\n  }\n  value3 = values[2];\n  value1 = values[3];\n  value2 = FUN_08000cec(values[1],values[10]);\n  values[0xe] = value2;\n  value2 = FUN_08000adc(values[10],values[0xf]);\n  values[0xf] = value2;\n  value2 = FUN_08001028(values[0xf],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = FUN_08001064(values[0xf],0x43fa0000);\n    if (value2 == 0) {\n      value2 = values[0xf];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  values[0xf] = value2;\n  value2 = FUN_08000ad8(values[0xc],values[0xd]);\n  values[0x10] = value2;\n  value2 = values[0xe];\n  result1 = FUN_08000cec(value3,values[0xf]);\n  result1 = FUN_08000adc(result1,value2);\n  result2 = FUN_08000cec(value1,values[0x10]);\n  value2 = FUN_08000ad8(result1,result2);\n  values[0x12] = value2;\n  result1 = FUN_08000c44(values[0x13]);\n  value2 = FUN_08001028(values[0x12],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = FUN_08001064(values[0x12],0x43fa0000);\n    if (value2 == 0) {\n      value2 = values[0x12];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  value2 = FUN_08000cec(value2,result1);\n  values[0x12] = value2;\n  values[0xd] = values[0xc];\n  values[0xb] = values[10];\n  values[0x15] = values[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_values_0800483c",
                "param_1": "values",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000e54",
                "FUN_08001028",
                "FUN_08000c44",
                "FUN_08001064",
                "FUN_08000cec",
                "FUN_08000adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_function_08004a30",
            "code": "\nvoid initializeFunction_08004a30(void)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      returnValue = FUN_08003068();\n      DAT_20000068 = FUN_08000cec(returnValue,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      returnValue = FUN_08003068();\n      DAT_2000007c = FUN_08000cec(returnValue,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_function_08004a30",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "initialize_components_08004a84",
            "code": "\nvoid initializeComponents_08004a84(void)\n\n{\n  int result;\n  \n  DAT_200000d8 = FUN_08002ec0();\n  DAT_20000134 = FUN_08002ed4();\n  DAT_20000190 = FUN_08002ee8();\n  FUN_08004a30();\n  result = FUN_08001064(DAT_200000d8,0);\n  if (result == 0) {\n    result = FUN_08001028(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    result = FUN_08001064(DAT_200000d8,0x42a00000);\n  }\n  if (result == 0) {\n    result = FUN_08001064(DAT_20000134,0);\n    if (result == 0) {\n      result = FUN_08001028(DAT_20000134,0xc2a00000);\n    }\n    else {\n      result = FUN_08001064(DAT_20000134,0x42a00000);\n    }\n    if (result == 0) {\n      FUN_08003f3c(1,1);\n      FUN_0800483c(&DAT_200000a8);\n      FUN_0800483c(&DAT_20000104);\n      FUN_0800483c(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        FUN_0800483c(&DAT_2000004c);\n        FUN_08000adc(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        FUN_080041c4();\n      }\n      else {\n        FUN_0800426c(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      FUN_08000cec(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = FUN_080010c4();\n      FUN_08000cec(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = FUN_080010c4();\n      return;\n    }\n  }\n  FUN_080041c4();\n  FUN_08003f3c(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "initialize_components_08004a84",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08001028",
                "FUN_08002ee8",
                "FUN_080041c4",
                "FUN_0800483c",
                "FUN_08000cec",
                "FUN_08002ed4",
                "FUN_08004a30",
                "FUN_0800426c",
                "FUN_08001064",
                "FUN_080010c4",
                "FUN_08003f3c",
                "FUN_08000adc",
                "FUN_08002ec0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "parse_input_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 parseInput_08004c18(undefined input)\n\n{\n  int *pointerVar1;\n  int intVar2;\n  int intVar3;\n  ushort *pointerVar4;\n  \n  DAT_20001636._0_1_ = input;\n  pointerVar4 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      intVar2 = FUN_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        intVar3 = FUN_0800115c();\n      } while ((uint)(intVar3 - intVar2) < 6);\nLAB_0800281c:\n      pointerVar1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      pointerVar1[3] = pointerVar1[3] & 0xffffffdf;\n      pointerVar1[3] = pointerVar1[3] & 0xfffffeff;\n      pointerVar1[5] = pointerVar1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      intVar2 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        intVar3 = FUN_0800115c();\n        if (5 < (uint)(intVar3 - intVar2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *pointerVar4 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        pointerVar4 = pointerVar4 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      intVar2 = FUN_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        intVar3 = FUN_0800115c();\n        if (5 < (uint)(intVar3 - intVar2)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)pointerVar4;\n    }\n    pointerVar4 = (ushort *)((int)pointerVar4 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "parse_input_08004c18",
                "param_1": "input",
                "piVar1": "pointerVar1",
                "iVar2": "intVar2",
                "iVar3": "intVar3",
                "puVar4": "pointerVar4"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "check_and_modify_values_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * checkAndModifyValues_08004c30(int *input_ptr)\n\n{\n  int data_variable;\n  \n  if (*input_ptr != 0x40013800) {\n    return input_ptr;\n  }\n  FUN_08003ec8(&DAT_20000364,DAT_20001634);\n  data_variable = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(data_variable + 0x14) = *(uint *)(data_variable + 0x14) | 1;\n    *(uint *)(data_variable + 0xc) = *(uint *)(data_variable + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "check_and_modify_values_08004c30",
                "param_1": "input_ptr",
                "iVar1": "data_variable"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_device_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initializeDevice_08004c70(void)\n\n{\n  int status;\n  \n  FUN_08004c64();\n  status = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(status + 0x14) = *(uint *)(status + 0x14) | 1;\n    *(uint *)(status + 0xc) = *(uint *)(status + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_device_08004c70",
                "iVar1": "status"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_data_08004c8c",
            "code": "\nvoid process_data_08004c8c(undefined *input_data)\n\n{\n  uint result;\n  undefined *current_element;\n  \n  current_element = input_data;\n  while( true ) {\n    result = FUN_08000150(input_data);\n    if (result <= (uint)((int)current_element - (int)input_data)) break;\n    FUN_08004c18(*current_element);\n    current_element = current_element + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_data_08004c8c",
                "param_1": "input_data",
                "uVar1": "result",
                "puVar2": "current_element"
            },
            "calling": [
                "FUN_08004cac",
                "FUN_08004490",
                "FUN_08004300"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_data_08004cac",
            "code": "\nvoid initializeData_08004cac(undefined4 inputData)\n\n{\n  FUN_08004ffc(&DAT_20001636,&DAT_0800735e,inputData);\n  FUN_08004c8c(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_data_08004cac",
                "param_1": "inputData"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004ffc",
                "FUN_08004c8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "set_flag_and_call_functions_08004ccc",
            "code": "\n\n\nvoid setFlagAndCallFunctions_08004ccc(undefined4 flagParam,undefined4 param2,undefined4 param3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  FUN_08001170(3,param2,_DAT_40021018,1,flagParam,1,param3);\n  FUN_08001194(0xfffffff4,0);\n  FUN_08001194(0xfffffff5,0);\n  FUN_08001194(0xfffffff6,0);\n  FUN_08001194(0xfffffffb,0);\n  FUN_08001194(0xfffffffc,0);\n  FUN_08001194(0xfffffffe,0);\n  FUN_08001194(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "set_flag_and_call_functions_08004ccc",
                "param_1": "flagParam",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001170",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "check_and_modify_08004d48",
            "code": "\n\n\nvoid checkAndModify_08004d48(int *inputPtr,undefined4 value)\n\n{\n  undefined4 constantValue1;\n  undefined4 constantValue2;\n  \n  if (*inputPtr == 0x40005400) {\n    constantValue1 = 0xc0;\n    constantValue2 = 0x12;\n    FUN_08001264(0x40010c00,&constantValue1,0x40005400,3,inputPtr,value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "check_and_modify_08004d48",
                "param_1": "inputPtr",
                "param_2": "value",
                "local_18": "constantValue1",
                "local_14": "constantValue2"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateFlags_08004d8c(int *data)\n\n{\n  int value;\n  \n  value = *data;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_flags_08004d8c",
                "param_1": "data",
                "iVar1": "value"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "initialize_values_08004e14",
            "code": "\nvoid initializeValues_08004e14(int *value_ptr,undefined4 param_2,undefined4 param_3)\n\n{\n  undefined4 constant_1;\n  int var_value;\n  undefined4 local_variable_1;\n  undefined4 local_variable_2;\n  undefined4 local_variable_3;\n  undefined4 local_variable_4;\n  \n  var_value = *value_ptr;\n  if (var_value == 0x40012c00) {\n    local_variable_1 = 0x800;\n  }\n  else {\n    if (var_value != 0x40000000) {\n      if (var_value == 0x40000400) {\n        local_variable_1 = 3;\n      }\n      else {\n        if (var_value != 0x40000800) {\n          return;\n        }\n        local_variable_1 = 0x300;\n      }\n      constant_1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    local_variable_1 = 2;\n  }\n  constant_1 = 0x40010800;\nLAB_08004e2e:\n  local_variable_4 = 2;\n  local_variable_2 = 2;\n  local_variable_3 = param_3;\n  FUN_08001264(constant_1,&local_variable_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "initialize_values_08004e14",
                "param_1": "value_ptr",
                "uVar1": "constant_1",
                "iVar2": "var_value",
                "local_18": "local_variable_1",
                "local_14": "local_variable_2",
                "uStack_10": "local_variable_3",
                "local_c": "local_variable_4"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_and_configure_08004e7c",
            "code": "\n\n\nvoid initializeAndConfigure_08004e7c(int *pointer)\n\n{\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  if (*pointer == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    constant1 = 0x200;\n    constant2 = 2;\n    constant4 = 3;\n    FUN_08001264(0x40010800,&constant1);\n    constant1 = 0x400;\n    constant2 = 0;\n    constant3 = 0;\n    FUN_08001264(0x40010800,&constant1);\n    FUN_08001194(0x25,0,0);\n    FUN_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_and_configure_08004e7c",
                "param_1": "pointer",
                "local_18": "constant1",
                "local_14": "constant2",
                "local_10": "constant3",
                "local_c": "constant4"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_08001194",
                "FUN_080011fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_hardware_08004f10",
            "code": "\n\n\nvoid initializeHardware_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_hardware_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_global_variable_thunk_0800115c",
            "code": "\nundefined4 get_global_variable_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_global_variable_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_0800403c",
                "FUN_08004490",
                "FUN_08004028",
                "FUN_08003298"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08004f10();\n  FUN_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  FUN_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004f10",
                "FUN_08004fb4",
                "FUN_080041ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000134",
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_function_08004ffc",
            "code": "\nvoid initializeFunction_08004ffc(undefined *data,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *dataArray [2];\n  undefined4 maxValue;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined *currentData;\n  undefined4 maxValue2;\n  undefined4 tempValue1;\n  undefined4 tempValue2;\n  undefined4 tempValue3;\n  \n  constant1 = 0x208;\n  maxValue = 0x7fffffff;\n  maxValue2 = 0x7fffffff;\n  constant2 = 0xffff;\n  dataArray[0] = data;\n  currentData = data;\n  tempValue1 = value1;\n  tempValue2 = value2;\n  tempValue3 = value3;\n  FUN_080050fc(DAT_200001c0,dataArray,value1);\n  *dataArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_function_08004ffc",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "dataArray",
                "local_70": "maxValue",
                "local_6c": "constant1",
                "local_6a": "constant2",
                "local_68": "currentData",
                "local_64": "maxValue2",
                "uStack_c": "tempValue1",
                "uStack_8": "tempValue2",
                "uStack_4": "tempValue3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "update_data_08005044",
            "code": "\nundefined4 updateData_08005044(undefined4 *dataPointer,int *infoPointer,undefined4 value,uint limit)\n\n{\n  int resultVar;\n  uint updatedLimit;\n  uint currentLimit;\n  int offset;\n  \n  currentLimit = infoPointer[2];\n  if ((currentLimit <= limit) && ((*(ushort *)(infoPointer + 3) & 0x480) != 0)) {\n    offset = *infoPointer - infoPointer[4];\n    currentLimit = (uint)(infoPointer[5] * 3) / 2;\n    updatedLimit = limit + 1 + offset;\n    if (currentLimit < updatedLimit) {\n      currentLimit = updatedLimit;\n    }\n    if ((int)((uint)*(ushort *)(infoPointer + 3) << 0x15) < 0) {\n      resultVar = FUN_08005714(dataPointer,currentLimit);\n      if (resultVar == 0) {\nLAB_0800508a:\n        *dataPointer = 0xc;\n        *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      FUN_08005630(resultVar,infoPointer[4],offset);\n      *(ushort *)(infoPointer + 3) = *(ushort *)(infoPointer + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      resultVar = FUN_080057d0(dataPointer,infoPointer[4],currentLimit);\n      if (resultVar == 0) {\n        FUN_0800567c(dataPointer,infoPointer[4]);\n        goto LAB_0800508a;\n      }\n    }\n    infoPointer[4] = resultVar;\n    *infoPointer = resultVar + offset;\n    infoPointer[5] = currentLimit;\n    infoPointer[2] = currentLimit - offset;\n    currentLimit = limit;\n  }\n  if (limit <= currentLimit) {\n    currentLimit = limit;\n  }\n  FUN_08005646(*infoPointer,value,currentLimit);\n  infoPointer[2] = infoPointer[2] - currentLimit;\n  *infoPointer = currentLimit + *infoPointer;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "update_data_08005044",
                "param_1": "dataPointer",
                "param_2": "infoPointer",
                "param_3": "value",
                "param_4": "limit",
                "iVar1": "resultVar",
                "uVar2": "updatedLimit",
                "uVar3": "currentLimit",
                "iVar4": "offset"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_080057d0",
                "FUN_08005646",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "extracted_function_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint extractedFunction_080050fc(undefined4 *pointerParam1,int *pointerParam2,byte *byteParam,int *pointerParam4)\n\n{\n  int tempVar1;\n  int tempVar2;\n  int *pointerVar3;\n  bool boolVar;\n  byte *byteVar1;\n  byte *byteVar2;\n  int unaff_r9;\n  int *localPointerVar;\n  uint localVar1;\n  int localVar2;\n  undefined4 localVar3;\n  int localVar4;\n  int localVar5;\n  byte localVar6;\n  undefined localVar7;\n  undefined localVar8;\n  undefined localVar9;\n  undefined4 localVar10;\n  \n  localPointerVar = pointerParam4;\n  if (((int)((uint)*(ushort *)(pointerParam2 + 3) << 0x18) < 0) && (pointerParam2[4] == 0)) {\n    tempVar1 = FUN_08005714(pointerParam1,0x40);\n    *pointerParam2 = tempVar1;\n    pointerParam2[4] = tempVar1;\n    if (tempVar1 == 0) {\n      *pointerParam1 = 0xc;\n      return -1;\n    }\n    pointerParam2[5] = 0x40;\n  }\n  localVar5 = 0;\n  localVar7 = 0x20;\n  localVar8 = 0x30;\n  byteVar1 = byteParam;\nLAB_08005146:\n  byteVar2 = byteVar1;\n  if (*byteVar2 != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  byteVar1 = byteVar2 + 1;\n  if (*byteVar2 != 0x25) goto LAB_08005146;\nLAB_08005150:\n  tempVar1 = (int)byteVar2 - (int)byteParam;\n  if (tempVar1 != 0) {\n    tempVar2 = FUN_08005044(pointerParam1,pointerParam2,byteParam,tempVar1);\n    if (tempVar2 == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(pointerParam2 + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return localVar5;\n    }\n    localVar5 = localVar5 + tempVar1;\n  }\n  if (*byteVar2 == 0) goto LAB_080052ac;\n  localVar1 = 0;\n  localVar4 = 0;\n  localVar2 = -1;\n  localVar3 = 0;\n  localVar9 = 0;\n  localVar10 = 0;\n  byteVar1 = byteVar2 + 1;\n  while( true ) {\n    tempVar1 = FUN_08005614(&DAT_08007379,*byteVar1);\n    byteParam = byteVar1 + 1;\n    if (tempVar1 == 0) break;\n    localVar1 = 1 << (tempVar1 + 0xf7ff8c87U & 0xff) | localVar1;\n    byteVar1 = byteParam;\n  }\n  if ((int)(localVar1 << 0x1b) < 0) {\n    localVar9 = 0x20;\n  }\n  if ((int)(localVar1 << 0x1c) < 0) {\n    localVar9 = 0x2b;\n  }\n  if (*byteVar1 == 0x2a) {\n    pointerVar3 = localPointerVar + 1;\n    tempVar1 = *localPointerVar;\n    localPointerVar = pointerVar3;\n    if (tempVar1 < 0) {\n      localVar4 = -tempVar1;\n      localVar1 = localVar1 | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    boolVar = false;\n    tempVar1 = localVar4;\n    byteParam = byteVar1;\n    while( true ) {\n      if (9 < *byteParam - 0x30) break;\n      tempVar1 = tempVar1 * 10 + (*byteParam - 0x30);\n      boolVar = true;\n      byteParam = byteParam + 1;\n    }\n    if (!boolVar) goto LAB_080051fc;\n  }\n  localVar4 = tempVar1;\nLAB_080051fc:\n  if (*byteParam == 0x2e) {\n    if (byteParam[1] == 0x2a) {\n      byteParam = byteParam + 2;\n      pointerVar3 = localPointerVar + 1;\n      localVar2 = *localPointerVar;\n      localPointerVar = pointerVar3;\n      if (localVar2 < 0) {\n        localVar2 = -1;\n      }\n    }\n    else {\n      boolVar = false;\n      tempVar1 = 0;\n      localVar2 = 0;\n      while( true ) {\n        byteParam = byteParam + 1;\n        if (9 < *byteParam - 0x30) break;\n        tempVar1 = tempVar1 * 10 + (*byteParam - 0x30);\n        boolVar = true;\n      }\n      if (boolVar) {\n        localVar2 = tempVar1;\n      }\n    }\n  }\n  tempVar1 = FUN_08005614(&DAT_0800737f,*byteParam,3);\n  if (tempVar1 != 0) {\n    byteParam = byteParam + 1;\n    localVar1 = localVar1 | 0x40 << (tempVar1 + 0xf7ff8c81U & 0xff);\n  }\n  localVar6 = *byteParam;\n  byteParam = byteParam + 1;\n  tempVar1 = FUN_08005614(\"efgEFG\",localVar6,6);\n  if (tempVar1 == 0) {\n    unaff_r9 = FUN_080053d4(pointerParam1,&localVar1,pointerParam2,0x8005045,&localPointerVar);\n    if (unaff_r9 == -1) goto LAB_080052ac;\n  }\n  else {\n    localPointerVar = (int *)(((int)localPointerVar + 7U & 0xfffffff8) + 8);\n  }\n  localVar5 = localVar5 + unaff_r9;\n  byteVar1 = byteParam;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "extracted_function_080050fc",
                "param_1": "pointerParam1",
                "param_2": "pointerParam2",
                "param_3": "byteParam",
                "param_4": "pointerParam4",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "piVar3": "pointerVar3",
                "bVar4": "boolVar",
                "pbVar5": "byteVar1",
                "pbVar6": "byteVar2",
                "local_8c": "localPointerVar",
                "local_88": "localVar1",
                "local_84": "localVar2",
                "local_80": "localVar3",
                "local_7c": "localVar4",
                "local_74": "localVar5",
                "local_70": "localVar6",
                "local_6f": "localVar7",
                "local_6e": "localVar8",
                "local_45": "localVar9",
                "local_30": "localVar10"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005044",
                "FUN_080053d4",
                "FUN_08005714",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 inputValue,uint *dataPointer,uint *outputPointer,undefined4 param4Value,code *callbackFunction)\n\n{\n  int loopCounter1;\n  int loopCounter2;\n  uint maxValue;\n  uint initialValue;\n  bool flag;\n  \n  maxValue = dataPointer[4];\n  if ((int)dataPointer[4] < (int)dataPointer[2]) {\n    maxValue = dataPointer[2];\n  }\n  *outputPointer = maxValue;\n  if (*(char *)((int)dataPointer + 0x43) != '\\0') {\n    *outputPointer = maxValue + 1;\n  }\n  if ((int)(*dataPointer << 0x1a) < 0) {\n    *outputPointer = *outputPointer + 2;\n  }\n  if ((*dataPointer & 6) == 0) {\n    for (loopCounter1 = 0; loopCounter1 < (int)(dataPointer[3] - *outputPointer); loopCounter1 = loopCounter1 + 1) {\n      loopCounter2 = (*callbackFunction)(inputValue,param4Value,(int)dataPointer + 0x19,1);\n      if (loopCounter2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)dataPointer + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  initialValue = maxValue;\n  if ((int)(*dataPointer << 0x1a) < 0) {\n    *(undefined *)((int)dataPointer + maxValue + 0x43) = 0x30;\n    initialValue = maxValue + 2;\n    *(undefined *)((int)dataPointer + maxValue + 0x44) = *(undefined *)((int)dataPointer + 0x45);\n  }\n  loopCounter1 = (*callbackFunction)(inputValue,param4Value,(int)dataPointer + 0x43,initialValue);\n  if (loopCounter1 != -1) {\n    maxValue = dataPointer[3];\n    flag = (*dataPointer & 6) != 4;\n    if (flag) {\n      maxValue = 0;\n    }\n    initialValue = 0;\n    if (!flag) {\n      maxValue = maxValue - *outputPointer;\n    }\n    if (!flag) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)dataPointer[4] < (int)dataPointer[2]) {\n      maxValue = maxValue + (dataPointer[2] - dataPointer[4]);\n    }\n    while( true ) {\n      if (maxValue == initialValue) {\n        return 0;\n      }\n      loopCounter1 = (*callbackFunction)(inputValue,param4Value,(int)dataPointer + 0x1a,1);\n      if (loopCounter1 == -1) break;\n      initialValue = initialValue + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "inputValue",
                "param_2": "dataPointer",
                "param_3": "outputPointer",
                "param_4": "param4Value",
                "param_5": "callbackFunction",
                "iVar1": "loopCounter1",
                "iVar2": "loopCounter2",
                "uVar3": "maxValue",
                "uVar4": "initialValue",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "convert_to_hex_string_080053d4",
            "code": "\nuint convertToHexString_080053d4(undefined4 input,uint *array,undefined4 size,code *conversionFunc,uint **outputArray)\n\n{\n  byte firstByte;\n  int index;\n  uint *ptr;\n  int result;\n  char *hexDigits;\n  uint flags;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint tempValue;\n  char *destPointer;\n  char *srcPointer;\n  uint localArray [2];\n  \n  firstByte = *(byte *)(array + 6);\n  srcPointer = (char *)((int)array + 0x43);\n  if (firstByte != 0x6e) {\n    if (firstByte < 0x6f) {\n      if (firstByte != 99) {\n        if (firstByte < 100) {\n          if (firstByte == 0) goto LAB_0800558e;\n          if (firstByte != 0x58) goto LAB_08005404;\n          *(undefined *)((int)array + 0x45) = 0x58;\n          hexDigits = \"0123456789ABCDEF\";\nLAB_0800551e:\n          flags = *array;\n          ptr = *outputArray;\n          *outputArray = ptr + 1;\n          if (((flags & 0x80) == 0) && ((int)(flags << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(flags << 0x1f) < 0) {\n            *array = flags | 0x20;\n          }\n          if (value == 0) {\n            *array = *array & 0xffffffdf;\n          }\n          flags = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)array + 0x43) = 0;\n        }\n        else {\n          if ((firstByte != 100) && (firstByte != 0x69)) goto LAB_08005404;\n          value = *array;\n          ptr = *outputArray;\n          if ((value & 0x80) == 0) {\n            *outputArray = ptr + 1;\n            if ((value & 0x40) == 0) goto LAB_08005424;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *outputArray = ptr + 1;\nLAB_08005424:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)array + 0x43) = 0x2d;\n          }\n          hexDigits = \"0123456789ABCDEF\";\n          flags = 10;\n        }\n        tempValue = array[1];\n        array[2] = tempValue;\n        destPointer = srcPointer;\n        if ((int)tempValue < 0) {\n          if (value != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)array + 0x42) = *hexDigits;\n          destPointer = (char *)((int)array + 0x42);\n        }\n        else {\n          *array = *array & 0xfffffffb;\n          if (value == 0) {\n            if (tempValue != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              tempValue = value / flags;\n              destPointer = destPointer + -1;\n              *destPointer = hexDigits[value - flags * tempValue];\n              value = tempValue;\n            } while (tempValue != 0);\n          }\n        }\n        if (((flags == 8) && ((int)(*array << 0x1f) < 0)) && ((int)array[1] <= (int)array[4]))\n        {\n          destPointer[-1] = '0';\n          destPointer = destPointer + -1;\n        }\n        array[4] = (int)srcPointer - (int)destPointer;\n        srcPointer = destPointer;\n        goto LAB_080054fa;\n      }\n      ptr = *outputArray;\n      *outputArray = ptr + 1;\n      *(char *)((int)array + 0x42) = (char)*ptr;\nLAB_08005464:\n      srcPointer = (char *)((int)array + 0x42);\n      value = 1;\n    }\n    else {\n      if (firstByte != 0x73) {\n        if (firstByte < 0x74) {\n          if (firstByte == 0x6f) {\nLAB_0800548a:\n            value = *array;\n            ptr = *outputArray;\n            if ((value & 0x80) == 0) {\n              *outputArray = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *outputArray = ptr + 1;\nLAB_08005498:\n              value = *ptr;\n            }\n            if (firstByte == 0x6f) {\n              flags = 8;\n            }\n            else {\n              flags = 10;\n            }\n            hexDigits = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (firstByte == 0x70) {\n            *array = *array | 0x20;\nLAB_0800544a:\n            hexDigits = \"0123456789abcdef\";\n            *(undefined *)((int)array + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (firstByte == 0x75) goto LAB_0800548a;\n          if (firstByte == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)array + 0x42) = firstByte;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*outputArray;\n      *outputArray = (uint *)(ppcVar8 + 1);\n      srcPointer = *ppcVar8;\n      index = FUN_08005614(srcPointer,0,array[1]);\n      if (index != 0) {\n        array[1] = index - (int)srcPointer;\n      }\n      value = array[1];\n    }\n    array[4] = value;\n    *(undefined *)((int)array + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value = *array;\n  ppuVar7 = (uint **)*outputArray;\n  flags = array[5];\n  if ((value & 0x80) == 0) {\n    *outputArray = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)flags;\n  }\n  else {\n    *outputArray = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800557a:\n    *ptr = flags;\n  }\nLAB_0800558e:\n  array[4] = 0;\nLAB_080054fa:\n  index = FUN_080052e4(input,array,localArray,size,conversionFunc);\n  if ((index == -1) || (index = (*conversionFunc)(input,size,srcPointer,array[4]), index == -1)) {\nLAB_0800550e:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*array << 0x1e) < 0) {\n      for (index = 0; index < (int)(array[3] - localArray[0]); index = index + 1) {\n        result = (*conversionFunc)(input,size,(int)array + 0x19,1);\n        if (result == -1) goto LAB_0800550e;\n      }\n    }\n    value = array[3];\n    if ((int)array[3] < (int)localArray[0]) {\n      value = localArray[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "convert_to_hex_string_080053d4",
                "param_1": "input",
                "param_2": "array",
                "param_3": "size",
                "param_4": "conversionFunc",
                "param_5": "outputArray",
                "bVar1": "firstByte",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "result",
                "pcVar5": "hexDigits",
                "uVar6": "flags",
                "uVar9": "value",
                "uVar10": "tempValue",
                "pcVar11": "destPointer",
                "pcVar12": "srcPointer",
                "local_24": "localArray"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_080052e4",
                "FUN_08005614"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *string,char character,int length)\n\n{\n  char *ptr;\n  char *current_ptr;\n  \n  ptr = string;\n  do {\n    current_ptr = ptr;\n    if (current_ptr == string + length) {\n      return (char *)0x0;\n    }\n    ptr = current_ptr + 1;\n  } while (*current_ptr != character);\n  return current_ptr;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "ptr",
                "pcVar2": "current_ptr"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_memory_08005630",
            "code": "\nvoid copyMemory_08005630(int destPtr,undefined *srcPtr,int size)\n\n{\n  undefined *srcEndPtr;\n  undefined *destEndPtr;\n  \n  destEndPtr = (undefined *)(destPtr + -1);\n  srcEndPtr = srcPtr + size;\n  for (; srcPtr != srcEndPtr; srcPtr = srcPtr + 1) {\n    destEndPtr = destEndPtr + 1;\n    *destEndPtr = *srcPtr;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_memory_08005630",
                "param_1": "destPtr",
                "param_2": "srcPtr",
                "param_3": "size",
                "puVar1": "srcEndPtr",
                "puVar2": "destEndPtr"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_shift_08005646",
            "code": "\nvoid copyAndShift_08005646(undefined *destination,undefined *source,int length)\n\n{\n  undefined *sourceEnd;\n  \n  sourceEnd = source + length;\n  if ((source < destination) && (destination < sourceEnd)) {\n    destination = destination + length;\n    length = length - (int)sourceEnd;\n    while (sourceEnd + length != (undefined *)0x0) {\n      sourceEnd = sourceEnd + -1;\n      destination = destination + -1;\n      *destination = *sourceEnd;\n    }\n    return;\n  }\n  destination = destination + -1;\n  for (; source != sourceEnd; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_shift_08005646",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "sourceEnd"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "update_data_0800567c",
            "code": "\nvoid updateData_0800567c(undefined4 *resultPtr,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **outPtr;\n  int **currentPtr;\n  int **nextPtr;\n  int *tempPtr;\n  int **prevPtr;\n  int **dataPtr;\n  \n  if (size == 0) {\n    return;\n  }\n  dataPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    dataPtr = (int **)((int)dataPtr + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  nextPtr = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    dataPtr[1] = (int *)0x0;\n    currentPtr = outPtr;\n    DAT_200002ac = dataPtr;\n  }\n  else {\n    nextPtr = DAT_200002ac;\n    if (dataPtr < DAT_200002ac) {\n      currentPtr = (int **)*dataPtr;\n      nextPtr = (int **)((int)dataPtr + (int)currentPtr);\n      if (DAT_200002ac == nextPtr) {\n        tempPtr = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        nextPtr = (int **)((int)tempPtr + (int)currentPtr);\n        *dataPtr = (int *)nextPtr;\n      }\n      dataPtr[1] = (int *)DAT_200002ac;\n      DAT_200002ac = dataPtr;\n    }\n    else {\n      do {\n        prevPtr = nextPtr;\n        nextPtr = (int **)prevPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= dataPtr);\n      currentPtr = (int **)*prevPtr;\n      if ((int **)((int)prevPtr + (int)currentPtr) == dataPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*dataPtr);\n        *prevPtr = (int *)currentPtr;\n        if (nextPtr == (int **)((int)prevPtr + (int)currentPtr)) {\n          tempPtr = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)tempPtr);\n          *prevPtr = (int *)currentPtr;\n          prevPtr[1] = (int *)nextPtr;\n        }\n      }\n      else if (dataPtr < (int **)((int)prevPtr + (int)currentPtr)) {\n        *resultPtr = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)dataPtr + (int)*dataPtr);\n        if (nextPtr == currentPtr) {\n          tempPtr = *nextPtr;\n          nextPtr = (int **)nextPtr[1];\n          currentPtr = (int **)((int)tempPtr + (int)*dataPtr);\n          *dataPtr = (int *)currentPtr;\n        }\n        dataPtr[1] = (int *)nextPtr;\n        prevPtr[1] = (int *)dataPtr;\n      }\n    }\n  }\n  FUNC_0800583e(resultPtr,currentPtr,nextPtr,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "update_data_0800567c",
                "param_1": "resultPtr",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "outPtr",
                "ppiVar1": "currentPtr",
                "ppiVar2": "nextPtr",
                "piVar3": "tempPtr",
                "ppiVar4": "prevPtr",
                "ppiVar5": "dataPtr"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_and_initialize_08005714",
            "code": "\nuint allocate_and_initialize_08005714(undefined4 *pointer_to_length,uint requested_size)\n\n{\n  uint *current_block;\n  int block_difference;\n  uint *previous_block;\n  uint free_space;\n  uint *previous_block_link;\n  uint allocated_block_size;\n  \n  allocated_block_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (allocated_block_size < 0xc) {\n    allocated_block_size = 0xc;\n  }\n  if (((int)allocated_block_size < 0) || (allocated_block_size < requested_size)) {\n    *pointer_to_length = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    previous_block_link = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      free_space = *previous_block - allocated_block_size;\n      if (-1 < (int)free_space) {\n        if (free_space < 0xc) {\n          if (previous_block_link == previous_block) {\n            current_block = (uint *)previous_block_link[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block_link != previous_block) {\n            previous_block_link[1] = (uint)current_block;\n            previous_block_link = previous_block;\n          }\n        }\n        else {\n          *previous_block = free_space;\n          *(uint *)((int)previous_block + free_space) = allocated_block_size;\n          previous_block_link = (uint *)((int)previous_block + free_space);\n        }\n        goto LAB_08005778;\n      }\n      previous_block_link = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = FUN_0800581c(pointer_to_length);\n    }\n    current_block = (uint *)FUN_0800581c(pointer_to_length,allocated_block_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block_link = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block_link ||\n        (block_difference = FUN_0800581c(pointer_to_length,(int)previous_block_link - (int)current_block), block_difference != -1)))) {\n      *previous_block_link = allocated_block_size;\nLAB_08005778:\n      FUNC_0800583e(pointer_to_length);\n      allocated_block_size = (int)previous_block_link + 0xbU & 0xfffffff8;\n      block_difference = allocated_block_size - (int)(previous_block_link + 1);\n      if (block_difference != 0) {\n        *(int *)((int)previous_block_link + block_difference) = -block_difference;\n        return allocated_block_size;\n      }\n      return allocated_block_size;\n    }\n    *pointer_to_length = 0xc;\n    FUNC_0800583e(pointer_to_length);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_and_initialize_08005714",
                "param_1": "pointer_to_length",
                "param_2": "requested_size",
                "puVar1": "current_block",
                "iVar2": "block_difference",
                "puVar3": "previous_block",
                "uVar4": "free_space",
                "puVar5": "previous_block_link",
                "uVar6": "allocated_block_size"
            },
            "calling": [
                "FUN_08005044",
                "FUN_080050fc",
                "FUN_080057d0"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_0800581c",
                "FUN_0800583e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "process_data_080057d0",
            "code": "\nint processData_080057d0(undefined4 input,int size,uint threshold,undefined4 temp)\n\n{\n  int result;\n  uint randomValue;\n  \n  if (size != 0) {\n    if (threshold == 0) {\n      FUN_0800567c();\n      result = 0;\n    }\n    else {\n      randomValue = FUN_08005840();\n      result = size;\n      if ((randomValue < threshold) && (result = FUN_08005714(input,threshold), result != 0)) {\n        FUN_08005630(result,size,threshold);\n        FUN_0800567c(input,size);\n      }\n    }\n    return result;\n  }\n  result = FUN_08005714(input,threshold,threshold,temp);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "process_data_080057d0",
                "param_1": "input",
                "param_2": "size",
                "param_3": "threshold",
                "param_4": "temp",
                "iVar1": "result",
                "uVar2": "randomValue"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800567c",
                "FUN_08005714",
                "FUN_08005840",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "evaluate_result_and_assign_0800581c",
            "code": "\nvoid evaluateResultAndAssign_0800581c(int *resultPointer,undefined4 inputValue)\n\n{\n  int evaluationResult;\n  \n  DAT_2000169c = 0;\n  evaluationResult = FUN_080072b8(inputValue);\n  if ((evaluationResult == -1) && (DAT_2000169c != 0)) {\n    *resultPointer = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "evaluate_result_and_assign_0800581c",
                "param_1": "resultPointer",
                "param_2": "inputValue",
                "iVar1": "evaluationResult"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculate_sum_08005840(undefined4 value,int array_start)\n\n{\n  int result;\n  \n  result = *(int *)(array_start + -4) + -4;\n  if (*(int *)(array_start + -4) < 0) {\n    result = result + *(int *)(array_start + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "value",
                "param_2": "array_start",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "decode_and_process_data_08005854",
            "code": "\nundefined8 decodeAndProcessData_08005854(undefined4 input1,undefined4 input2)\n\n{\n  int result;\n  undefined4 *ptrVar;\n  int *intPtr;\n  undefined8 returnValue;\n  undefined8 decodedValue;\n  undefined4 flag;\n  undefined *dataPtr;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined8 processedData;\n  int processResult;\n  \n  returnValue = FUN_08005c70();\n  if (DAT_20000224 == -1) {\n    return returnValue;\n  }\n  processResult = FUN_08000a04(input1,input2,input1,input2);\n  if (processResult != 0) {\n    return returnValue;\n  }\n  decodedValue = FUNC_0800708c(input1,input2);\n  result = FUN_080009f0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return returnValue;\n  }\n  flag = 1;\n  dataPtr = &DAT_080073ac;\n  param1 = input1;\n  param2 = input2;\n  param3 = input1;\n  param4 = input2;\n  processedData = FUN_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = FUN_0800709e(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  ptrVar = (undefined4 *)FUN_080072ac();\n  *ptrVar = 0x21;\nLAB_080058d0:\n  if (processResult != 0) {\n    intPtr = (int *)FUN_080072ac();\n    *intPtr = processResult;\n  }\n  return processedData;\n}\n\n",
            "renaming": {
                "FUN_08005854": "decode_and_process_data_08005854",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "puVar2": "ptrVar",
                "piVar3": "intPtr",
                "uVar4": "returnValue",
                "uVar5": "decodedValue",
                "local_48": "flag",
                "local_44": "dataPtr",
                "local_40": "param1",
                "uStack_3c": "param2",
                "local_38": "param3",
                "uStack_34": "param4",
                "local_30": "processedData",
                "local_28": "processResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_080072ac",
                "FUN_080070a4",
                "FUN_08005c70",
                "FUN_080009f0",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "convert_floating_point_thunk_08006070",
            "code": "\nundefined8 convertFloatingPoint_thunk_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint condition1;\n  uint temp1;\n  int temp2;\n  uint condition2;\n  undefined8 output;\n  undefined8 result2;\n  \n  condition2 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (condition2 | (-input3 | input3) >> 0x1f)) ||\n     (temp1 = input2 & 0x7fffffff, 0x7ff00000 < (temp1 | (-input1 | input1) >> 0x1f))) {\n    output = FUN_0800016c(input1,input2,input3,input4,input4);\n    return output;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    output = FUN_08006d68();\n    return output;\n  }\n  condition1 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | temp1) == 0) {\n    if (condition1 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (condition1 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    output = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | condition2) != 0) {\n      if (condition2 == 0x7ff00000) {\n        if (temp1 == 0x7ff00000) {\n          if (condition1 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (condition1 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (condition1 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (condition1 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (condition1 != 3) {\n          if (condition1 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp1 != 0x7ff00000) {\n        temp2 = (int)(temp1 - condition2) >> 0x14;\n        if (temp2 < 0x3d) {\n          if (((int)input4 < 0) && (temp2 + 0x3c < 0 != SCARRY4(temp2,0x3c))) {\n            output = 0;\n          }\n          else {\n            FUN_08000724(input1,input2);\n            FUNC_0800708c();\n            output = FUN_08006d68();\n          }\n        }\n        else {\n          output = 0x3ff921fb54442d18;\n        }\n        temp2 = (int)((ulonglong)output >> 0x20);\n        result1 = (undefined4)output;\n        if (condition1 == 1) {\n          return CONCAT44(temp2 + -0x80000000,result1);\n        }\n        if (condition1 == 2) {\n          result2 = FUN_08000168(result1,temp2,0x33145c07,0x3ca1a626);\n          output = 0x400921fb54442d18;\n        }\n        else {\n          if (condition1 == 0) {\n            return output;\n          }\n          output = FUN_08000168(result1,temp2,0x33145c07,0x3ca1a626);\n          result2 = 0x400921fb54442d18;\n        }\n        output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),(int)result2,\n                             (int)((ulonglong)result2 >> 0x20));\n        return output;\n      }\n    }\n    if ((int)input2 < 0) {\n      output = 0xbff921fb54442d18;\n    }\n    else {\n      output = 0x3ff921fb54442d18;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "convert_floating_point_thunk_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "condition1",
                "uVar3": "temp1",
                "iVar4": "temp2",
                "uVar5": "condition2",
                "uVar6": "output",
                "uVar7": "result2"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "process_data_08005900",
            "code": "\nundefined8 processData_08005900(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  char flag;\n  int result;\n  int *resultPtr;\n  undefined4 *valuePtr;\n  int checkResult;\n  undefined4 upperBits;\n  undefined4 value;\n  undefined8 returnValue1;\n  undefined8 returnValue2;\n  undefined4 status;\n  undefined *message;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined8 returnStruct;\n  int checkValue;\n  \n  returnValue1 = FUN_08006228();\n  flag = DAT_20000224;\n  upperBits = (undefined4)((ulonglong)returnValue1 >> 0x20);\n  value = (undefined4)returnValue1;\n  if (DAT_20000224 == -1) {\n    return returnValue1;\n  }\n  result = FUN_08000a04(input3,input4,input3,input4);\n  if (result != 0) {\n    return returnValue1;\n  }\n  result = FUN_08000a04(input1,input2,input1,input2);\n  input1_copy = input1;\n  input2_copy = input2;\n  input3_copy = input3;\n  input4_copy = input4;\n  if (result == 0) {\n    result = FUN_080009a0(input1,input2,0,0);\n    if (result != 0) {\n      result = FUN_080009a0(input3,input4,0,0);\n      if (result != 0) {\n        status = 1;\n        message = &DAT_080073b1;\n        returnStruct = 0;\n        checkValue = 0;\n        if (flag != '\\0') {\n          returnStruct = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = FUN_08007092(input3,input4);\n      if (result == 0) {\n        return returnValue1;\n      }\n      result = FUN_080009b4(input3,input4,0,0);\n      if (result == 0) {\n        return returnValue1;\n      }\n      status = 1;\n      message = &DAT_080073b1;\n      checkValue = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      returnStruct = 0xfff0000000000000;\n      checkValue = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = FUN_08007092(value,upperBits);\n    if (((result != 0) || (checkResult = FUN_08007092(input1,input2), checkResult == 0)) ||\n       (checkResult = FUN_08007092(input3,input4), checkResult == 0)) {\n      result = FUN_080009a0(value,upperBits,0,0);\n      if (result == 0) {\n        return returnValue1;\n      }\n      result = FUN_08007092(input1,input2);\n      if (result == 0) {\n        return returnValue1;\n      }\n      result = FUN_08007092(input3,input4);\n      if (result == 0) {\n        return returnValue1;\n      }\n      status = 4;\n      message = &DAT_080073b1;\n      checkValue = 0;\n      returnStruct._0_4_ = 0;\n      returnStruct._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    checkValue = FUN_08000a04(value,upperBits);\n    flag = DAT_20000224;\n    if (checkValue != 0) {\n      message = &DAT_080073b1;\n      status = 1;\n      checkValue = result;\n      if (DAT_20000224 != '\\0') {\n        returnStruct = FUN_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      message = &DAT_080073b1;\n      status = 1;\n      returnStruct = 0;\n      goto LAB_08005978;\n    }\n    message = &DAT_080073b1;\n    status = 3;\n    if (DAT_20000224 == '\\0') {\n      returnStruct._0_4_ = 0xe0000000;\n      returnStruct._4_4_ = 0x47efffff;\n      result = FUN_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        returnValue1 = FUN_080004d0(input3,input4,0,0x3fe00000);\n        returnValue2 = FUN_080070b0();\n        result = FUN_080009a0((int)returnValue1,(int)((ulonglong)returnValue1 >> 0x20),(int)returnValue2,\n                             (int)((ulonglong)returnValue2 >> 0x20));\n        if (result == 0) {\n          returnStruct._0_4_ = 0xe0000000;\n          returnStruct._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = FUN_0800709e(&status);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      returnStruct._0_4_ = 0;\n      returnStruct._4_4_ = 0x7ff00000;\n      result = FUN_080009b4(input1,input2,0,0);\n      if (result != 0) {\n        returnValue1 = FUN_080004d0(input3,input4,0,0x3fe00000);\n        returnValue2 = FUN_080070b0();\n        result = FUN_080009a0((int)returnValue1,(int)((ulonglong)returnValue1 >> 0x20),(int)returnValue2,\n                             (int)((ulonglong)returnValue2 >> 0x20));\n        if (result == 0) {\n          returnStruct._0_4_ = 0;\n          returnStruct._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    valuePtr = (undefined4 *)FUN_080072ac();\n    value = 0x22;\n  }\n  else {\n    result = FUN_080009a0(input3,input4,0,0);\n    if (result == 0) {\n      return returnValue1;\n    }\n    status = 1;\n    message = &DAT_080073b1;\n    returnStruct = 0x3ff0000000000000;\n    checkValue = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = FUN_0800709e(&status);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    valuePtr = (undefined4 *)FUN_080072ac();\n    value = 0x21;\n  }\n  *valuePtr = value;\nLAB_080059d0:\n  if (checkValue != 0) {\n    resultPtr = (int *)FUN_080072ac();\n    *resultPtr = checkValue;\n  }\n  return returnStruct;\n}\n\n",
            "renaming": {
                "FUN_08005900": "process_data_08005900",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "resultPtr",
                "puVar4": "valuePtr",
                "iVar5": "checkResult",
                "uVar6": "upperBits",
                "uVar7": "value",
                "uVar8": "returnValue1",
                "uVar9": "returnValue2",
                "local_50": "status",
                "local_4c": "message",
                "local_48": "input1_copy",
                "uStack_44": "input2_copy",
                "local_40": "input3_copy",
                "uStack_3c": "input4_copy",
                "local_38": "returnStruct",
                "local_30": "checkValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08007092",
                "FUN_080072ac",
                "FUN_080070b0",
                "FUN_08006228",
                "FUN_080009a0",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "check_and_process_data_08005bc8",
            "code": "\nundefined8 check_and_process_data_08005bc8(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  char data_status;\n  int result;\n  int *ptr_result;\n  undefined4 *ptr_data;\n  undefined8 return_value;\n  undefined4 flag;\n  undefined *data_ptr;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_1_copy_2;\n  undefined4 param_2_copy_2;\n  undefined8 processed_data;\n  int data_result;\n  \n  return_value = FUN_08006c0c();\n  data_status = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return return_value;\n  }\n  data_result = FUN_08000a04(input_param_1,input_param_2,input_param_1,input_param_2);\n  if (data_result != 0) {\n    return return_value;\n  }\n  result = FUN_080009b4(input_param_1,input_param_2,0,0);\n  if (result == 0) {\n    return return_value;\n  }\n  flag = 1;\n  data_ptr = &DAT_080073b5;\n  param_1_copy = input_param_1;\n  param_2_copy = input_param_2;\n  param_1_copy_2 = input_param_1;\n  param_2_copy_2 = input_param_2;\n  if (data_status == '\\0') {\n    processed_data = 0;\nLAB_08005c26:\n    result = FUN_0800709e(&flag);\n    if (result != 0) goto LAB_08005c2e;\n  }\n  else {\n    processed_data = FUN_08000724(0,0,0,0);\n    if (data_status != '\\x02') goto LAB_08005c26;\n  }\n  ptr_data = (undefined4 *)FUN_080072ac();\n  *ptr_data = 0x21;\nLAB_08005c2e:\n  if (data_result != 0) {\n    ptr_result = (int *)FUN_080072ac();\n    *ptr_result = data_result;\n  }\n  return processed_data;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "check_and_process_data_08005bc8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "cVar1": "data_status",
                "iVar2": "result",
                "piVar3": "ptr_result",
                "puVar4": "ptr_data",
                "uVar5": "return_value",
                "local_50": "flag",
                "local_4c": "data_ptr",
                "local_48": "param_1_copy",
                "uStack_44": "param_2_copy",
                "local_40": "param_1_copy_2",
                "uStack_3c": "param_2_copy_2",
                "local_38": "processed_data",
                "local_30": "data_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_080072ac",
                "FUN_08006c0c",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_0800709e",
                "FUN_08000a04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "perform_calculation_08005c70",
            "code": "\nundefined8 performCalculation_08005c70(uint input_1,uint input_2)\n\n{\n  int result;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  uint maskedInput_2;\n  undefined8 output;\n  undefined8 temp1;\n  undefined8 temp2;\n  \n  output = CONCAT44(input_2,input_1);\n  maskedInput_2 = input_2 & 0x7fffffff;\n  if (maskedInput_2 < 0x3ff00000) {\n    if (maskedInput_2 < 0x3fe00000) {\n      if (0x3e3fffff < maskedInput_2) {\n        temp1 = FUN_080004d0(input_1,input_2,input_1,input_2);\n        var6 = (undefined4)((ulonglong)temp1 >> 0x20);\n        var5 = (undefined4)temp1;\n        temp1 = FUN_080004d0(var5,var6,0xdfdf709,0x3f023de1);\n        temp1 = FUN_0800016c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x7501b288,0x3f49efe0);\n        temp1 = FUN_080004d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),var5,var6);\n        temp1 = FUN_08000168((int)temp1,(int)((ulonglong)temp1 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp1 = FUN_080004d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),var5,var6);\n        temp1 = FUN_0800016c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0xe884455,0x3fc9c155);\n        temp1 = FUN_080004d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),var5,var6);\n        temp1 = FUN_08000168((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp1 = FUN_080004d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),var5,var6);\n        temp1 = FUN_0800016c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x55555555,0x3fc55555);\n        temp1 = FUN_080004d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),var5,var6);\n        temp2 = FUN_080004d0(var5,var6,0xb12e9282,0x3fb3b8c5);\n        temp2 = FUN_08000168((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp2 = FUN_080004d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),var5,var6);\n        temp2 = FUN_0800016c((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp2 = FUN_080004d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),var5,var6);\n        temp2 = FUN_08000168((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp2 = FUN_080004d0((int)temp2,(int)((ulonglong)temp2 >> 0x20),var5,var6);\n        temp2 = FUN_0800016c((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3ff00000);\n        temp1 = FUN_08000724((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                              (int)((ulonglong)temp2 >> 0x20));\n        temp1 = FUN_080004d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      temp1 = FUN_0800016c(input_1,input_2,0x8800759c,0x7e37e43c);\n      result = FUN_080009f0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x3ff00000);\n      if (result != 0) {\n        return output;\n      }\n    }\n    output = FUNC_0800708c(input_1,input_2);\n    output = FUN_08000168(0,0x3ff00000,(int)output,(int)((ulonglong)output >> 0x20));\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),0,0x3fe00000);\n    var1 = (undefined4)((ulonglong)output >> 0x20);\n    var5 = (undefined4)output;\n    output = FUN_080004d0(var5,var1,0xdfdf709,0x3f023de1);\n    output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),0x7501b288,0x3f49efe0);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),var5,var1);\n    output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),0xb5688f3b,0x3fa48228);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),var5,var1);\n    output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),0xe884455,0x3fc9c155);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),var5,var1);\n    output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),0x3eb6f7d,0x3fd4d612);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),var5,var1);\n    output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),0x55555555,0x3fc55555);\n    output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),var5,var1);\n    var2 = (undefined4)((ulonglong)output >> 0x20);\n    temp1 = FUN_080004d0(var5,var1,0xb12e9282,0x3fb3b8c5);\n    temp1 = FUN_08000168((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp1 = FUN_080004d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),var5,var1);\n    temp1 = FUN_0800016c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp1 = FUN_080004d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),var5,var1);\n    temp1 = FUN_08000168((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp1 = FUN_080004d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),var5,var1);\n    temp1 = FUN_0800016c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x3ff00000);\n    var3 = (undefined4)((ulonglong)temp1 >> 0x20);\n    temp2 = FUN_08006c0c(var5,var1);\n    var4 = (undefined4)((ulonglong)temp2 >> 0x20);\n    var6 = (undefined4)temp2;\n    if (maskedInput_2 < 0x3fef3333) {\n      output = FUN_08000724((int)output,var2,(int)temp1,var3);\n      temp1 = FUN_0800016c(var6,var4,var6,var4);\n      output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),(int)temp1,\n                           (int)((ulonglong)temp1 >> 0x20));\n      temp1 = FUN_080004d0(0,var4,0,var4);\n      temp1 = FUN_08000168(var5,var1,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n      temp2 = FUN_0800016c(var6,var4,0,var4);\n      temp1 = FUN_08000724((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                            (int)((ulonglong)temp2 >> 0x20));\n      var5 = (undefined4)((ulonglong)temp1 >> 0x20);\n      temp1 = FUN_0800016c((int)temp1,var5,(int)temp1,var5);\n      temp1 = FUN_08000168(0x33145c07,0x3c91a626,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n      output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),(int)temp1,\n                           (int)((ulonglong)temp1 >> 0x20));\n      temp1 = FUN_0800016c(0,var4,0,var4);\n      temp1 = FUN_08000168(0x54442d18,0x3fe921fb,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n      output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),(int)temp1,\n                           (int)((ulonglong)temp1 >> 0x20));\n      var5 = 0x3fe921fb;\n    }\n    else {\n      output = FUN_08000724((int)output,var2,(int)temp1,var3);\n      output = FUN_080004d0((int)output,(int)((ulonglong)output >> 0x20),var6,var4);\n      output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),var6,var4);\n      var5 = (undefined4)((ulonglong)output >> 0x20);\n      output = FUN_0800016c((int)output,var5,(int)output,var5);\n      output = FUN_08000168((int)output,(int)((ulonglong)output >> 0x20),0x33145c07,0x3c91a626);\n      var5 = 0x3ff921fb;\n    }\n    output = FUN_08000168(0x54442d18,var5,(int)output,(int)((ulonglong)output >> 0x20));\n    if ((int)input_2 < 1) {\n      output = CONCAT44((int)((ulonglong)output >> 0x20) + -0x80000000,(int)output);\n    }\n  }\n  else {\n    if ((maskedInput_2 + 0xc0100000 | input_1) != 0) {\n      output = FUN_08000168(input_1,input_2,input_1,input_2);\n      var5 = (undefined4)((ulonglong)output >> 0x20);\n      output = FUN_08000724((int)output,var5,(int)output,var5);\n      return output;\n    }\n    output = FUN_080004d0(input_1,input_2,0x54442d18,0x3ff921fb);\n    temp1 = FUN_080004d0(input_1,input_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    output = FUN_0800016c((int)output,(int)((ulonglong)output >> 0x20),(int)temp1,\n                         (int)((ulonglong)temp1 >> 0x20));\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "perform_calculation_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "result",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "uVar8": "maskedInput_2",
                "uVar9": "output",
                "uVar10": "temp1",
                "uVar11": "temp2"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_floating_point_value_08006070",
            "code": "\nundefined8 calculateFloatingPointValue_08006070(uint value1,uint value2,uint value3,uint value4)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  undefined8 result;\n  undefined8 temp6;\n  \n  temp5 = value4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp5 | (-value3 | value3) >> 0x1f)) ||\n     (temp3 = value2 & 0x7fffffff, 0x7ff00000 < (temp3 | (-value1 | value1) >> 0x1f))) {\n    result = FUN_0800016c(value1,value2,value3,value4,value4);\n    return result;\n  }\n  if ((value4 + 0xc0100000 | value3) == 0) {\n    result = FUN_08006d68();\n    return result;\n  }\n  temp2 = (int)value4 >> 0x1e & 2U | value2 >> 0x1f;\n  if ((value1 | temp3) == 0) {\n    if (temp2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (temp2 != 3) {\n      return CONCAT44(value2,value1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((value3 | temp5) != 0) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 0x7ff00000) {\n          if (temp2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (temp2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (temp2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (temp2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (temp2 != 3) {\n          if (temp2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp3 != 0x7ff00000) {\n        temp4 = (int)(temp3 - temp5) >> 0x14;\n        if (temp4 < 0x3d) {\n          if (((int)value4 < 0) && (temp4 + 0x3c < 0 != SCARRY4(temp4,0x3c))) {\n            result = 0;\n          }\n          else {\n            FUN_08000724(value1,value2);\n            FUNC_0800708c();\n            result = FUN_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        temp4 = (int)((ulonglong)result >> 0x20);\n        temp1 = (undefined4)result;\n        if (temp2 == 1) {\n          return CONCAT44(temp4 + -0x80000000,temp1);\n        }\n        if (temp2 == 2) {\n          temp6 = FUN_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (temp2 == 0) {\n            return result;\n          }\n          result = FUN_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          temp6 = 0x400921fb54442d18;\n        }\n        result = FUN_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)temp6,\n                             (int)((ulonglong)temp6 >> 0x20));\n        return result;\n      }\n    }\n    if ((int)value2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_floating_point_value_08006070",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "result",
                "uVar7": "temp6"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08006d68",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_number_08006228",
            "code": "\nuint calculateFloatingPointNumber_08006228(uint signBits,uint exponentBits,uint mantissaBits,uint significandBits)\n\n{\n  undefined4 signBits_uVar;\n  uint exponentBits_uVar;\n  uint extraout_r1_uVar;\n  undefined4 mantissaBits_undefined4;\n  undefined4 significandBits_undefined4;\n  undefined4 extraout_r1_00_uVar;\n  undefined4 extraout_r1_01_uVar;\n  uint extraout_r1_02_uVar;\n  undefined4 extraout_r1_03_uVar;\n  int iVar5;\n  int iVar6;\n  undefined4 uVar7;\n  uint exponentSignBits;\n  undefined4 uVar9;\n  int iVar10;\n  uint roundedValue;\n  undefined4 temporarySignBits;\n  undefined4 temporaryExponentBits;\n  undefined8 temporaryBits1;\n  undefined8 temporaryBits2;\n  undefined8 temporaryBits3;\n  undefined8 temporaryBits4;\n  longlong temporaryBits5;\n  ulonglong temporaryBits6;\n  undefined8 temporaryBits7;\n  uint isZero;\n  undefined4 temporaryBits8;\n  undefined4 temporaryBits9;\n  int temporaryValue;\n  \n  temporaryBits2 = CONCAT44(exponentBits,signBits);\n  roundedValue = significandBits & 0x7fffffff;\n  if ((roundedValue | mantissaBits) == 0) {\n    return 0;\n  }\n  exponentSignBits = exponentBits & 0x7fffffff;\n  if (exponentSignBits < 0x7ff00001) {\n    if (exponentSignBits == 0x7ff00000) {\n      if (signBits == 0) {\n        if (0x7ff00000 < roundedValue) goto LAB_08006278;\nLAB_08006262:\n        if ((roundedValue != 0x7ff00000) || (mantissaBits == 0)) {\n          if (-1 < (int)exponentBits) goto LAB_0800632a;\n          if (roundedValue < 0x43400000) {\n            if (roundedValue < 0x3ff00000) {\nLAB_0800632a:\n              isZero = 0;\n              goto LAB_080062ba;\n            }\n            iVar5 = ((int)roundedValue >> 0x14) + -0x3ff;\n            if (0x14 < iVar5) {\n              exponentBits_uVar = mantissaBits >> (0x34U - iVar5 & 0xff);\n              if (mantissaBits == exponentBits_uVar << (0x34U - iVar5 & 0xff)) {\n                isZero = 2 - (exponentBits_uVar & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (mantissaBits == 0) {\n              exponentBits_uVar = (int)roundedValue >> (0x14U - iVar5 & 0xff);\n              if (roundedValue == exponentBits_uVar << (0x14U - iVar5 & 0xff)) {\n                isZero = 2 - (exponentBits_uVar & 1);\n              }\n              else {\n                isZero = 0;\n              }\n              goto LAB_0800630c;\n            }\n            isZero = 0;\n          }\n          else {\n            isZero = 2;\nLAB_080062ba:\n            if (mantissaBits == 0) {\n              if (roundedValue == 0x7ff00000) {\n                if ((exponentSignBits + 0xc0100000 | signBits) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < exponentSignBits) {\n                  if ((int)significandBits < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)significandBits) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (roundedValue == 0x3ff00000) {\n                if (-1 < (int)significandBits) {\n                  return signBits;\n                }\n                temporaryBits1 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (significandBits == 0x40000000) goto LAB_0800634a;\n              if ((significandBits == 0x3fe00000) && (-1 < (int)exponentBits)) {\n                roundedValue = FUN_08006c0c(signBits,exponentBits);\n                return roundedValue;\n              }\n            }\n          }\n          temporaryBits1 = FUNC_0800708c(signBits,exponentBits);\n          temporarySignBits = (undefined4)((ulonglong)temporaryBits1 >> 0x20);\n          signBits_uVar = (undefined4)temporaryBits1;\n          temporaryBits6 = CONCAT44(exponentBits,signBits_uVar) & 0x7fffffffffffffff;\n          if ((signBits == 0) && ((exponentSignBits == 0 || ((exponentBits & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)significandBits < 0) {\n              temporaryBits1 = FUN_08000724(0,0x3ff00000,signBits_uVar,temporarySignBits);\n            }\n            if (-1 < (int)exponentBits) {\n              return (uint)temporaryBits1;\n            }\n            if ((isZero | exponentSignBits + 0xc0100000) != 0) {\n              return (uint)temporaryBits1;\n            }\n          }\n          else {\n            exponentBits_uVar = 0xffffffff - ((int)exponentBits >> 0x1f);\n            temporaryBits1 = temporaryBits2;\n            if ((isZero | exponentBits_uVar) != 0) {\n              if (roundedValue < 0x41e00001) {\n                temporaryValue = 0;\n                if (exponentSignBits < 0x100000) {\n                  temporaryBits6 = FUN_080004d0();\n                  temporaryValue = -0x35;\n                }\n                roundedValue = (uint)(temporaryBits6 >> 0x20);\n                signBits_uVar = (undefined4)temporaryBits6;\n                temporaryValue = ((int)roundedValue >> 0x14) + -0x3ff + temporaryValue;\n                roundedValue = roundedValue & 0xfffff;\n                exponentSignBits = roundedValue | 0x3ff00000;\n                if (roundedValue < 0x3988f) {\nLAB_08006628:\n                  iVar5 = 0;\n                }\n                else {\n                  if (0xbb679 < roundedValue) {\n                    exponentSignBits = exponentSignBits - 0x100000;\n                    temporaryValue = temporaryValue + 1;\n                    goto LAB_08006628;\n                  }\n                  iVar5 = 1;\n                }\n                iVar6 = iVar5 * 8;\n                uVar7 = (&DAT_080073c0)[iVar5 * 2];\n                uVar9 = (&DAT_080073c4)[iVar5 * 2];\n                temporaryBits2 = FUN_08000168(signBits_uVar,exponentSignBits,uVar7,uVar9);\n                temporaryExponentBits = (undefined4)((ulonglong)temporaryBits2 >> 0x20);\n                temporaryBits1 = FUN_0800016c(signBits_uVar,exponentSignBits,uVar7,uVar9);\n                temporaryBits1 = FUN_08000724(0,0x3ff00000,(int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20));\n                mantissaBits_undefined4 = (undefined4)((ulonglong)temporaryBits1 >> 0x20);\n                temporaryBits3 = FUN_080004d0((int)temporaryBits2,temporaryExponentBits,(int)temporaryBits1,mantissaBits_undefined4);\n                significandBits_undefined4 = (undefined4)((ulonglong)temporaryBits3 >> 0x20);\n                temporarySignBits = (undefined4)temporaryBits3;\n                temporaryBits3 = FUN_080004d0(0,significandBits_undefined4);\n                temporaryBits2 = FUN_08000168((int)temporaryBits2,temporaryExponentBits,(int)temporaryBits3,\n                                      (int)((ulonglong)temporaryBits3 >> 0x20));\n                temporaryBits3 = FUN_08000168(0,((int)exponentSignBits >> 1 | 0x20000000U) + 0x80000 + iVar5 * 0x40000,\n                                      uVar7,uVar9);\n                temporaryBits3 = FUN_08000168(signBits_uVar,exponentSignBits,(int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20));\n                temporaryBits3 = FUN_080004d0((int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20),0,significandBits_undefined4);\n                temporaryBits2 = FUN_08000168((int)temporaryBits2,(int)((ulonglong)temporaryBits2 >> 0x20),(int)temporaryBits3,\n                                      (int)((ulonglong)temporaryBits3 >> 0x20));\n                temporaryBits2 = FUN_080004d0((int)temporaryBits2,(int)((ulonglong)temporaryBits2 >> 0x20),(int)temporaryBits1,mantissaBits_undefined4\n                                     );\n                temporaryExponentBits = (undefined4)((ulonglong)temporaryBits2 >> 0x20);\n                temporaryBits1 = FUN_080004d0(temporarySignBits,significandBits_undefined4);\n                mantissaBits_undefined4 = (undefined4)((ulonglong)temporaryBits1 >> 0x20);\n                signBits_uVar = (undefined4)temporaryBits1;\n                temporaryBits1 = FUN_080004d0(signBits_uVar,mantissaBits_undefined4,0x4a454eef,0x3fca7e28);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),signBits_uVar,mantissaBits_undefined4);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),signBits_uVar,mantissaBits_undefined4);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),signBits_uVar,mantissaBits_undefined4);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),signBits_uVar,mantissaBits_undefined4);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temporaryBits3 = FUN_080004d0(signBits_uVar,mantissaBits_undefined4,signBits_uVar,mantissaBits_undefined4);\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits3,\n                                      (int)((ulonglong)temporaryBits3 >> 0x20));\n                temporaryBits3 = FUN_0800016c(temporarySignBits,significandBits_undefined4,0,significandBits_undefined4);\n                temporaryBits3 = FUN_080004d0((int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20),(int)temporaryBits2,\n                                      temporaryExponentBits);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20),(int)temporaryBits1,\n                                      (int)((ulonglong)temporaryBits1 >> 0x20));\n                signBits_uVar = (undefined4)((ulonglong)temporaryBits1 >> 0x20);\n                temporaryBits3 = FUN_080004d0(0,significandBits_undefined4,0,significandBits_undefined4);\n                mantissaBits_undefined4 = (undefined4)((ulonglong)temporaryBits3 >> 0x20);\n                temporaryBits4 = FUN_0800016c((int)temporaryBits3,mantissaBits_undefined4,0,0x40080000);\n                FUN_0800016c((int)temporaryBits4,(int)((ulonglong)temporaryBits4 >> 0x20),(int)temporaryBits1,signBits_uVar);\n                temporaryBits4 = FUN_080004d0(0,significandBits_undefined4,0,extraout_r1_00_uVar);\n                uVar7 = (undefined4)((ulonglong)temporaryBits4 >> 0x20);\n                temporaryBits7 = FUN_08000168(0,extraout_r1_00_uVar,0,0x40080000);\n                temporaryBits3 = FUN_08000168((int)temporaryBits7,(int)((ulonglong)temporaryBits7 >> 0x20),(int)temporaryBits3,mantissaBits_undefined4\n                                     );\n                temporaryBits1 = FUN_08000168((int)temporaryBits1,signBits_uVar,(int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20)\n                                     );\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),temporarySignBits,significandBits_undefined4);\n                temporaryBits2 = FUN_080004d0((int)temporaryBits2,temporaryExponentBits,0,extraout_r1_00_uVar);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits2,\n                                      (int)((ulonglong)temporaryBits2 >> 0x20));\n                signBits_uVar = (undefined4)((ulonglong)temporaryBits1 >> 0x20);\n                FUN_0800016c((int)temporaryBits4,uVar7,(int)temporaryBits1,signBits_uVar);\n                temporaryBits2 = FUN_080004d0(0,extraout_r1_01_uVar,0xe0000000,0x3feec709);\n                temporaryBits3 = FUN_08000168(0,extraout_r1_01_uVar,(int)temporaryBits4,uVar7);\n                temporaryBits1 = FUN_08000168((int)temporaryBits1,signBits_uVar,(int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20)\n                                     );\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temporaryBits3 = FUN_080004d0(0,extraout_r1_01_uVar,0x145b01f5,0xbe3e2fe0);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits3,\n                                      (int)((ulonglong)temporaryBits3 >> 0x20));\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + iVar6),\n                                      *(undefined4 *)(&DAT_080073e4 + iVar6));\n                temporaryBits3 = FUN_08000404(temporaryValue);\n                signBits_uVar = (undefined4)((ulonglong)temporaryBits3 >> 0x20);\n                temporarySignBits = *(undefined4 *)(&DAT_080073d0 + iVar6);\n                temporaryExponentBits = *(undefined4 *)(&DAT_080073d4 + iVar6);\n                temporaryBits4 = FUN_0800016c((int)temporaryBits2,(int)((ulonglong)temporaryBits2 >> 0x20),(int)temporaryBits1,\n                                      (int)((ulonglong)temporaryBits1 >> 0x20));\n                temporaryBits4 = FUN_0800016c((int)temporaryBits4,(int)((ulonglong)temporaryBits4 >> 0x20),temporarySignBits,temporaryExponentBits);\n                FUN_0800016c((int)temporaryBits4,(int)((ulonglong)temporaryBits4 >> 0x20),(int)temporaryBits3,signBits_uVar);\n                temporaryBits3 = FUN_08000168(0,extraout_r1_02_uVar,(int)temporaryBits3,signBits_uVar);\n                temporaryBits5 = FUN_08000168((int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20),temporarySignBits,temporaryExponentBits);\n                roundedValue = extraout_r1_02_uVar;\n              }\n              else {\n                if (0x43f00000 < roundedValue) {\n                  if (exponentSignBits < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)significandBits < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  signBits = 0x8800759c;\n                  exponentBits = 0x7e37e43c;\n                  temporaryBits2 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (exponentSignBits < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)significandBits) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < exponentSignBits) goto LAB_08006418;\n                temporaryBits2 = FUN_08000168(signBits_uVar,temporarySignBits,0,0x3ff00000);\n                temporarySignBits = (undefined4)((ulonglong)temporaryBits2 >> 0x20);\n                signBits_uVar = (undefined4)temporaryBits2;\n                temporaryBits2 = FUN_080004d0(signBits_uVar,temporarySignBits,0x60000000,0x3ff71547);\n                temporaryBits1 = FUN_080004d0(signBits_uVar,temporarySignBits,0xf85ddf44,0x3e54ae0b);\n                temporaryBits3 = FUN_080004d0(signBits_uVar,temporarySignBits,0,0x3fd00000);\n                temporaryBits3 = FUN_08000168(0x55555555,0x3fd55555,(int)temporaryBits3,\n                                      (int)((ulonglong)temporaryBits3 >> 0x20));\n                temporaryBits3 = FUN_080004d0((int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20),signBits_uVar,temporarySignBits);\n                temporaryBits3 = FUN_08000168(0,0x3fe00000,(int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20));\n                temporaryBits4 = FUN_080004d0(signBits_uVar,temporarySignBits,signBits_uVar,temporarySignBits);\n                temporaryBits3 = FUN_080004d0((int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20),(int)temporaryBits4,\n                                      (int)((ulonglong)temporaryBits4 >> 0x20));\n                temporaryBits3 = FUN_080004d0((int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temporaryBits1 = FUN_08000168((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits3,\n                                      (int)((ulonglong)temporaryBits3 >> 0x20));\n                FUN_0800016c((int)temporaryBits2,(int)((ulonglong)temporaryBits2 >> 0x20),(int)temporaryBits1,\n                             (int)((ulonglong)temporaryBits1 >> 0x20));\n                temporaryBits5 = (ulonglong)extraout_r1_uVar << 0x20;\n                roundedValue = extraout_r1_uVar;\n              }\n              temporaryBits2 = FUN_08000168((int)temporaryBits5,(int)((ulonglong)temporaryBits5 >> 0x20),(int)temporaryBits2,\n                                    (int)((ulonglong)temporaryBits2 >> 0x20));\n              temporaryBits2 = FUN_08000168((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits2,\n                                    (int)((ulonglong)temporaryBits2 >> 0x20));\n              if ((isZero - 1 | exponentBits_uVar) == 0) {\n                exponentBits = 0xbff00000;\n              }\n              else {\n                exponentBits = 0x3ff00000;\n              }\n              isZero = 0;\n              temporaryBits1 = FUN_08000168(mantissaBits,significandBits,0,significandBits);\n              temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0,roundedValue);\n              temporaryBits2 = FUN_080004d0((int)temporaryBits2,(int)((ulonglong)temporaryBits2 >> 0x20),mantissaBits,significandBits);\n              temporaryBits2 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits2,\n                                    (int)((ulonglong)temporaryBits2 >> 0x20));\n              temporaryExponentBits = (undefined4)((ulonglong)temporaryBits2 >> 0x20);\n              signBits_uVar = (undefined4)temporaryBits2;\n              temporaryBits2 = FUN_080004d0(0,roundedValue,0,significandBits);\n              mantissaBits_undefined4 = (undefined4)((ulonglong)temporaryBits2 >> 0x20);\n              temporarySignBits = (undefined4)temporaryBits2;\n              temporaryBits5 = FUN_0800016c(signBits_uVar,temporaryExponentBits,temporarySignBits,mantissaBits_undefined4);\n              exponentSignBits = (uint)((ulonglong)temporaryBits5 >> 0x20);\n              roundedValue = (uint)temporaryBits5;\n              if (0x408fffffffffffff < temporaryBits5) {\n                if ((exponentSignBits + 0xbf700000 | roundedValue) == 0) {\n                  temporaryBits1 = FUN_0800016c(signBits_uVar,temporaryExponentBits,0x652b82fe,0x3c971547);\n                  temporaryBits3 = FUN_08000168(roundedValue,exponentSignBits,temporarySignBits,mantissaBits_undefined4);\n                  iVar5 = FUN_080009f0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits3,\n                                       (int)((ulonglong)temporaryBits3 >> 0x20));\n                  if (iVar5 == 0) goto LAB_08006968;\n                }\n                temporaryBits2 = FUN_080004d0(0,exponentBits,0x8800759c,0x7e37e43c);\n                signBits = 0x8800759c;\n                exponentBits = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((exponentSignBits & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((exponentSignBits & 0x7fffffff) < 0x3fe00001) {\n                  iVar5 = 0;\n                }\n                else {\n                  exponentSignBits = (0x100000 >> (((int)(exponentSignBits & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          exponentSignBits;\n                  roundedValue = (exponentSignBits * 2 >> 0x15) - 0x3ff;\n                  iVar5 = (int)(exponentSignBits & 0xfffff | 0x100000) >> (0x14 - roundedValue & 0xff);\n                  if (temporaryBits5 < 0) {\n                    iVar5 = -iVar5;\n                  }\n                  temporaryBits2 = FUN_08000168(temporarySignBits,mantissaBits_undefined4,0,exponentSignBits & ~(0xfffff >> (roundedValue & 0xff)));\n                }\n                temporaryBits9 = (undefined4)((ulonglong)temporaryBits2 >> 0x20);\n                temporaryBits8 = (undefined4)temporaryBits2;\n                FUN_0800016c(temporaryBits8,temporaryBits9,signBits_uVar,temporaryExponentBits);\n                temporaryBits2 = FUN_080004d0(0,extraout_r1_03_uVar,0,0x3fe62e43);\n                temporarySignBits = (undefined4)((ulonglong)temporaryBits2 >> 0x20);\n                temporaryBits1 = FUN_08000168(0,extraout_r1_03_uVar,temporaryBits8,temporaryBits9);\n                temporaryBits1 = FUN_08000168(signBits_uVar,temporaryExponentBits,(int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20));\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temporaryBits3 = FUN_080004d0(0,extraout_r1_03_uVar,0xca86c39,0xbe205c61);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits3,\n                                      (int)((ulonglong)temporaryBits3 >> 0x20));\n                temporaryExponentBits = (undefined4)((ulonglong)temporaryBits1 >> 0x20);\n                temporaryBits3 = FUN_0800016c((int)temporaryBits2,temporarySignBits,(int)temporaryBits1,temporaryExponentBits);\n                mantissaBits_undefined4 = (undefined4)((ulonglong)temporaryBits3 >> 0x20);\n                signBits_uVar = (undefined4)temporaryBits3;\n                temporaryBits2 = FUN_08000168(signBits_uVar,mantissaBits_undefined4,(int)temporaryBits2,temporarySignBits);\n                temporaryBits2 = FUN_08000168((int)temporaryBits1,temporaryExponentBits,(int)temporaryBits2,\n                                      (int)((ulonglong)temporaryBits2 >> 0x20));\n                temporaryExponentBits = (undefined4)((ulonglong)temporaryBits2 >> 0x20);\n                temporaryBits1 = FUN_080004d0(signBits_uVar,mantissaBits_undefined4,signBits_uVar,mantissaBits_undefined4);\n                significandBits_undefined4 = (undefined4)((ulonglong)temporaryBits1 >> 0x20);\n                temporarySignBits = (undefined4)temporaryBits1;\n                temporaryBits1 = FUN_080004d0(temporarySignBits,significandBits_undefined4,0x72bea4d0,0x3e663769);\n                temporaryBits1 = FUN_08000168((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),temporarySignBits,significandBits_undefined4);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),temporarySignBits,significandBits_undefined4);\n                temporaryBits1 = FUN_08000168((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),temporarySignBits,significandBits_undefined4);\n                temporaryBits1 = FUN_0800016c((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temporaryBits1 = FUN_080004d0((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),temporarySignBits,significandBits_undefined4);\n                temporaryBits1 = FUN_08000168(signBits_uVar,mantissaBits_undefined4,(int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20));\n                temporarySignBits = (undefined4)((ulonglong)temporaryBits1 >> 0x20);\n                temporaryBits3 = FUN_080004d0(signBits_uVar,mantissaBits_undefined4,(int)temporaryBits1,temporarySignBits);\n                temporaryBits1 = FUN_08000168((int)temporaryBits1,temporarySignBits,0,0x40000000);\n                temporaryBits1 = FUN_08000724((int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20),(int)temporaryBits1,\n                                      (int)((ulonglong)temporaryBits1 >> 0x20));\n                temporaryBits3 = FUN_080004d0(signBits_uVar,mantissaBits_undefined4,(int)temporaryBits2,temporaryExponentBits);\n                temporaryBits2 = FUN_0800016c((int)temporaryBits3,(int)((ulonglong)temporaryBits3 >> 0x20),(int)temporaryBits2,\n                                      temporaryExponentBits);\n                temporaryBits2 = FUN_08000168((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits2,\n                                      (int)((ulonglong)temporaryBits2 >> 0x20));\n                temporaryBits2 = FUN_08000168((int)temporaryBits2,(int)((ulonglong)temporaryBits2 >> 0x20),signBits_uVar,mantissaBits_undefined4);\n                temporaryBits1 = FUN_08000168(0,0x3ff00000,(int)temporaryBits2,(int)((ulonglong)temporaryBits2 >> 0x20));\n                iVar6 = (int)((ulonglong)temporaryBits1 >> 0x20);\n                iVar10 = iVar6 + iVar5 * 0x100000;\n                temporaryBits2 = CONCAT44(iVar10,(int)temporaryBits1);\n                signBits = isZero;\n                if (iVar10 < 0x100000) {\n                  temporaryBits2 = FUN_080071c0((int)temporaryBits1,iVar6,iVar5);\n                }\n              }\n              else {\n                if ((exponentSignBits + 0x3f6f3400 | roundedValue) == 0) {\n                  temporaryBits1 = FUN_08000168(roundedValue,exponentSignBits,temporarySignBits,mantissaBits_undefined4);\n                  iVar5 = FUN_080009c8(signBits_uVar,temporaryExponentBits,(int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20));\n                  if (iVar5 == 0) goto LAB_08006968;\n                }\n                temporaryBits2 = FUN_080004d0(0,exponentBits,0xc2f8f359,0x1a56e1f);\n                signBits = 0xc2f8f359;\n                exponentBits = 0x1a56e1f;\n              }\nLAB_0800634a:\n              roundedValue = FUN_080004d0((int)temporaryBits2,(int)((ulonglong)temporaryBits2 >> 0x20),signBits,exponentBits);\n              return roundedValue;\n            }\n          }\n          signBits_uVar = (undefined4)((ulonglong)temporaryBits1 >> 0x20);\n          temporaryBits1 = FUN_08000168((int)temporaryBits1,signBits_uVar,(int)temporaryBits1,signBits_uVar);\n          temporaryBits2 = temporaryBits1;\nLAB_08006320:\n          roundedValue = FUN_08000724((int)temporaryBits1,(int)((ulonglong)temporaryBits1 >> 0x20),(int)temporaryBits2,\n                                (int)((ulonglong)temporaryBits2 >> 0x20));\n          return roundedValue;\n        }\n      }\n    }\n    else if (roundedValue < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((exponentSignBits + 0xc0100000 | signBits) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  roundedValue = FUN_080070a4(&DAT_0800737e);\n  return roundedValue;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_number_08006228",
                "param_1": "signBits",
                "param_2": "exponentBits",
                "param_3": "mantissaBits",
                "param_4": "significandBits",
                "uVar1": "signBits_uVar",
                "uVar2": "exponentBits_uVar",
                "extraout_r1": "extraout_r1_uVar",
                "uVar3": "mantissaBits_undefined4",
                "uVar4": "significandBits_undefined4",
                "extraout_r1_00": "extraout_r1_00_uVar",
                "extraout_r1_01": "extraout_r1_01_uVar",
                "extraout_r1_02": "extraout_r1_02_uVar",
                "extraout_r1_03": "extraout_r1_03_uVar",
                "uVar8": "exponentSignBits",
                "uVar11": "roundedValue",
                "uVar12": "temporarySignBits",
                "uVar13": "temporaryExponentBits",
                "uVar14": "temporaryBits1",
                "uVar15": "temporaryBits2",
                "uVar16": "temporaryBits3",
                "uVar17": "temporaryBits4",
                "lVar18": "temporaryBits5",
                "uVar19": "temporaryBits6",
                "uVar20": "temporaryBits7",
                "local_70": "isZero",
                "local_68": "temporaryBits8",
                "local_64": "temporaryBits9",
                "local_54": "temporaryValue"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_080071c0",
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_value_08006c0c",
            "code": "\nundefined8 calculateFloatValue_08006c0c(uint inputValue1,uint inputValue2)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  int shiftAmount;\n  int count;\n  uint temp3;\n  uint temp4;\n  int accumulator;\n  uint result;\n  uint temp5;\n  int shiftCount;\n  uint temp6;\n  undefined8 finalResult;\n  \n  if ((~inputValue2 & 0x7ff00000) == 0) {\n    finalResult = FUN_080004d0(inputValue1,inputValue2,inputValue1,inputValue2);\n    finalResult = FUN_0800016c(inputValue1,inputValue2,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n    return finalResult;\n  }\n  if ((int)inputValue2 < 1) {\n    if ((inputValue2 & 0x7fffffff | inputValue1) == 0) {\n      return CONCAT44(inputValue2,inputValue1);\n    }\n    if (inputValue2 != 0) {\n      finalResult = FUN_08000168(inputValue1,inputValue2,inputValue1,inputValue2);\n      temp1 = (undefined4)((ulonglong)finalResult >> 0x20);\n      finalResult = FUN_08000724((int)finalResult,temp1,(int)finalResult,temp1);\n      return finalResult;\n    }\n  }\n  shiftAmount = (int)inputValue2 >> 0x14;\n  if (shiftAmount == 0) {\n    while (inputValue2 == 0) {\n      shiftAmount = shiftAmount + -0x15;\n      inputValue2 = inputValue1 >> 0xb;\n      inputValue1 = inputValue1 << 0x15;\n    }\n    temp2 = 0;\n    for (; -1 < (int)(inputValue2 << 0xb); inputValue2 = inputValue2 << 1) {\n      temp2 = temp2 + 1;\n    }\n    shiftAmount = shiftAmount - (temp2 - 1);\n    inputValue2 = inputValue2 | inputValue1 >> (0x20 - temp2 & 0xff);\n    inputValue1 = inputValue1 << (temp2 & 0xff);\n  }\n  accumulator = 0;\n  temp2 = inputValue2 & 0xfffff | 0x100000;\n  if ((shiftAmount + -0x3ff) * -0x80000000 < 0) {\n    temp2 = temp2 * 2 - ((int)inputValue1 >> 0x1f);\n    inputValue1 = inputValue1 << 1;\n  }\n  temp2 = temp2 * 2 - ((int)inputValue1 >> 0x1f);\n  count = 0x16;\n  temp3 = 0;\n  result = 0x200000;\n  inputValue1 = inputValue1 << 1;\n  do {\n    shiftCount = temp3 + result;\n    if (shiftCount <= (int)temp2) {\n      temp2 = temp2 - shiftCount;\n      temp3 = shiftCount + result;\n      accumulator = accumulator + result;\n    }\n    count = count + -1;\n    temp2 = temp2 * 2 - ((int)inputValue1 >> 0x1f);\n    result = result >> 1;\n    inputValue1 = inputValue1 << 1;\n  } while (count != 0);\n  shiftCount = 0x20;\n  temp5 = 0x80000000;\n  result = 0;\n  count = 0;\n  do {\n    temp6 = temp5 + count;\n    temp4 = temp3;\n    if (((int)temp3 < (int)temp2) || ((temp2 == temp3 && (temp6 <= inputValue1)))) {\n      count = temp6 + temp5;\n      if (((int)temp6 < 0) && (-1 < count)) {\n        temp4 = temp3 + 1;\n      }\n      temp2 = temp2 - temp3;\n      if (inputValue1 < temp6) {\n        temp2 = temp2 - 1;\n      }\n      inputValue1 = inputValue1 - temp6;\n      result = result + temp5;\n    }\n    temp2 = temp2 * 2 - ((int)inputValue1 >> 0x1f);\n    shiftCount = shiftCount + -1;\n    inputValue1 = inputValue1 << 1;\n    temp5 = temp5 >> 1;\n    temp3 = temp4;\n  } while (shiftCount != 0);\n  if ((inputValue1 | temp2) != 0) {\n    if (result == 0xffffffff) {\n      accumulator = accumulator + 1;\n      result = 0;\n    }\n    else {\n      result = result + 1 & 0xfffffffe;\n    }\n  }\n  result = result >> 1;\n  if (accumulator << 0x1f < 0) {\n    result = result | 0x80000000;\n  }\n  return CONCAT44((accumulator >> 1) + 0x3fe00000 + (shiftAmount + -0x3ff >> 1) * 0x100000,result);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_value_08006c0c",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "shiftAmount",
                "iVar4": "count",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "iVar7": "accumulator",
                "uVar8": "result",
                "uVar9": "temp5",
                "iVar10": "shiftCount",
                "uVar11": "temp6",
                "uVar12": "finalResult"
            },
            "calling": [
                "FUN_08005c70",
                "FUN_08005bc8",
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_08000168",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculate_result_08006d68(int input_1,uint input_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int result;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  uint positive_input_2;\n  undefined8 temp_result;\n  undefined8 temp_result_2;\n  \n  temp_result = CONCAT44(input_2,input_1);\n  positive_input_2 = input_2 & 0x7fffffff;\n  if (positive_input_2 < 0x44100000) {\n    if (positive_input_2 < 0x3fdc0000) {\n      if (positive_input_2 < 0x3e200000) {\n        temp_result_2 = FUN_0800016c(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n        result = FUN_080009f0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return temp_result;\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp_result = FUNC_0800708c();\n      var2 = (undefined4)((ulonglong)temp_result >> 0x20);\n      var1 = (undefined4)temp_result;\n      if (positive_input_2 < 0x3ff30000) {\n        if (positive_input_2 < 0x3fe60000) {\n          temp_result = FUN_0800016c(var1,var2,var1,var2);\n          temp_result = FUN_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n          temp_result_2 = FUN_0800016c(var1,var2,0,0x40000000);\n          temp_result = FUN_08000724((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result_2,\n                               (int)((ulonglong)temp_result_2 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp_result = FUN_08000168(var1,var2,0,0x3ff00000);\n          temp_result_2 = FUN_0800016c(var1,var2,0,0x3ff00000);\n          temp_result = FUN_08000724((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result_2,\n                               (int)((ulonglong)temp_result_2 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (positive_input_2 < 0x40038000) {\n        temp_result = FUN_08000168(var1,var2,0,0x3ff80000);\n        temp_result_2 = FUN_080004d0(var1,var2,0,0x3ff80000);\n        temp_result_2 = FUN_0800016c((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0,0x3ff00000);\n        temp_result = FUN_08000724((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp_result_2,\n                             (int)((ulonglong)temp_result_2 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp_result = FUN_08000724(0,0xbff00000,var1,var2);\n        result = 3;\n      }\n    }\n    var6 = (undefined4)((ulonglong)temp_result >> 0x20);\n    var5 = (undefined4)temp_result;\n    temp_result = FUN_080004d0(var5,var6,var5,var6);\n    var3 = (undefined4)((ulonglong)temp_result >> 0x20);\n    var1 = (undefined4)temp_result;\n    temp_result = FUN_080004d0(var1,var3,var1,var3);\n    var4 = (undefined4)((ulonglong)temp_result >> 0x20);\n    var2 = (undefined4)temp_result;\n    temp_result = FUN_080004d0(var2,var4,0xe322da11,0x3f90ad3a);\n    temp_result = FUN_0800016c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var2,var4);\n    temp_result = FUN_0800016c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var2,var4);\n    temp_result = FUN_0800016c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var2,var4);\n    temp_result = FUN_0800016c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x920083ff,0x3fc24924);\n    temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var2,var4);\n    temp_result = FUN_0800016c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x5555550d,0x3fd55555);\n    temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var1,var3);\n    var1 = (undefined4)((ulonglong)temp_result >> 0x20);\n    temp_result_2 = FUN_080004d0(var2,var4,0x2c6a6c2f,0xbfa2b444);\n    temp_result_2 = FUN_08000168((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result_2 = FUN_080004d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),var2,var4);\n    temp_result_2 = FUN_08000168((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result_2 = FUN_080004d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),var2,var4);\n    temp_result_2 = FUN_08000168((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result_2 = FUN_080004d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),var2,var4);\n    temp_result_2 = FUN_08000168((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result_2 = FUN_080004d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),var2,var4);\n    var2 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n    if (result == -1) {\n      temp_result = FUN_0800016c((int)temp_result,var1,(int)temp_result_2,var2);\n      temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var5,var6);\n      temp_result = FUN_08000168(var5,var6,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n    }\n    else {\n      temp_result = FUN_0800016c((int)temp_result,var1,(int)temp_result_2,var2);\n      temp_result = FUN_080004d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var5,var6);\n      result = result * 8;\n      temp_result = FUN_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      temp_result = FUN_08000168((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var5,var6);\n      temp_result = FUN_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)temp_result,\n                           (int)((ulonglong)temp_result >> 0x20));\n      if ((int)input_2 < 0) {\n        temp_result = CONCAT44((int)((ulonglong)temp_result >> 0x20) + -0x80000000,(int)temp_result);\n      }\n    }\n  }\n  else if ((positive_input_2 < 0x7ff00001) && ((positive_input_2 != 0x7ff00000 || (input_1 == 0)))) {\n    if ((int)input_2 < 1) {\n      temp_result = 0xbff921fb54442d18;\n    }\n    else {\n      temp_result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    temp_result = FUN_0800016c(input_1,input_2,input_1,input_2,constant_2);\n  }\n  return temp_result;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "iVar1": "result",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "uVar8": "positive_input_2",
                "uVar9": "temp_result",
                "uVar10": "temp_result_2"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800708c",
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228",
                "FUN_08006070"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "calculate_shift_value_08007092",
            "code": "\nuint calculateShiftValue_08007092(undefined4 startValue,uint inputValue)\n\n{\n  return (inputValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "calculate_shift_value_08007092",
                "param_1": "startValue",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_program_0800709e",
            "code": "\nundefined4 initializeProgram_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_program_0800709e"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\nundefined8 getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "perform_calculation_080070b0",
            "code": "\nundefined8 performCalculation_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  undefined4 tempVar4;\n  uint tempVar5;\n  uint tempVar6;\n  uint tempVar7;\n  undefined8 tempVar8;\n  \n  tempVar7 = (input2 << 1) >> 0x15;\n  tempVar6 = tempVar7 - 0x3ff;\n  tempVar3 = input2;\n  if ((int)tempVar6 < 0x14) {\n    if ((int)tempVar6 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      tempVar3 = input2 & 0xfffff | input1;\n      tempVar1 = ((int)input2 >> 0x1f) * -8;\n      tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n      tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n      tempVar8 = FUN_0800016c(input1,(-tempVar3 | tempVar3) >> 0xc & 0x80000 | input2 & 0xfffe0000,tempVar2,\n                           tempVar4,input1,input2,input3);\n      tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar2,tempVar4);\n      return CONCAT44((uint)((ulonglong)tempVar8 >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)tempVar8);\n    }\n    tempVar7 = 0xfffff >> (tempVar6 & 0xff);\n    if ((input2 & tempVar7 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar7 = tempVar7 >> 1;\n    tempVar5 = input2 & tempVar7 | input1;\n    if (tempVar5 != 0) {\n      if (tempVar6 == 0x13) {\n        tempVar5 = 0x80000000;\n      }\n      else {\n        tempVar5 = 0;\n      }\n      tempVar3 = 0x40000 >> (tempVar6 & 0xff) | input2 & ~tempVar7;\n    }\n  }\n  else {\n    if (0x33 < (int)tempVar6) {\n      if (tempVar6 != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      tempVar8 = FUN_0800016c();\n      return tempVar8;\n    }\n    tempVar7 = tempVar7 - 0x413;\n    tempVar6 = 0xffffffff >> (tempVar7 & 0xff);\n    if ((input1 & tempVar6) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    tempVar6 = tempVar6 >> 1;\n    tempVar5 = input1;\n    if ((input1 & tempVar6) != 0) {\n      tempVar5 = 0x40000000 >> (tempVar7 & 0xff) | input1 & ~tempVar6;\n    }\n  }\n  tempVar1 = ((int)input2 >> 0x1f) * -8;\n  tempVar2 = *(undefined4 *)(&DAT_08007430 + tempVar1);\n  tempVar4 = *(undefined4 *)(&DAT_08007434 + tempVar1);\n  tempVar8 = FUN_0800016c(tempVar5,tempVar3,tempVar2,tempVar4,input1,input2,input3);\n  tempVar8 = FUN_08000168((int)tempVar8,(int)((ulonglong)tempVar8 >> 0x20),tempVar2,tempVar4);\n  return tempVar8;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "perform_calculation_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6",
                "uVar7": "tempVar7",
                "uVar8": "tempVar8"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_float_value_080071c0",
            "code": "\nundefined8 calculateFloatValue_080071c0(uint floatValue1,uint floatValue2,int offset,undefined4 constant)\n\n{\n  uint shiftedValue;\n  undefined4 defaultFloat1;\n  int sum;\n  undefined4 defaultFloat2;\n  uint upperBits;\n  undefined8 result;\n  \n  result = CONCAT44(floatValue2,floatValue1);\n  shiftedValue = (floatValue2 << 1) >> 0x15;\n  if (shiftedValue == 0) {\n    if ((floatValue2 & 0x7fffffff | floatValue1) == 0) {\n      return result;\n    }\n    result = FUN_080004d0(floatValue1,floatValue2,0,0x43500000);\n    if (-0xc351 < offset) {\n      shiftedValue = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    defaultFloat1 = 0xc2f8f359;\n    defaultFloat2 = 0x1a56e1f;\n  }\n  else {\n    if (shiftedValue == 0x7ff) {\n      result = FUN_0800016c(floatValue1,floatValue2,floatValue1,floatValue2,constant);\n      return result;\n    }\nLAB_08007210:\n    upperBits = (uint)((ulonglong)result >> 0x20);\n    defaultFloat1 = (undefined4)result;\n    sum = shiftedValue + offset;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return CONCAT44(upperBits & 0x800fffff | sum * 0x100000,defaultFloat1);\n      }\n      if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n        result = CONCAT44(upperBits & 0x800fffff | (sum + 0x36) * 0x100000,defaultFloat1);\n        defaultFloat1 = 0;\n        defaultFloat2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (offset < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,defaultFloat1,upperBits);\n        goto LAB_080071ec;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,defaultFloat1,upperBits);\n    defaultFloat1 = 0x8800759c;\n    defaultFloat2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = FUN_080004d0((int)result,(int)((ulonglong)result >> 0x20),defaultFloat1,defaultFloat2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_float_value_080071c0",
                "param_1": "floatValue1",
                "param_2": "floatValue2",
                "param_3": "offset",
                "param_4": "constant",
                "uVar1": "shiftedValue",
                "uVar2": "defaultFloat1",
                "iVar3": "sum",
                "uVar4": "defaultFloat2",
                "uVar5": "upperBits",
                "uVar6": "result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800729c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "FUN_08005900",
                "FUN_08005854",
                "FUN_08005bc8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_pointer_080072b8",
            "code": "\nvoid updatePointer_080072b8(int increment)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + increment;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_pointer_080072b8",
                "param_1": "increment"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08000134",
                "FUN_08004fb4",
                "FUN_08000110"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 167077,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080004d0",
            "FUN_080006ac",
            "FUN_08000724",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ]
    ],
    "locked_functions": []
}