{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_param_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_param_08000134(undefined4 first_param,undefined4 second_param)\n\n{\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_param_08000134",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_string_end_08000150",
            "code": "\nchar * find_string_end_08000150(char *string)\n\n{\n  char current_char_value;\n  char *next_char;\n  char *current_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char + 1;\n    current_char_value = *current_char;\n    current_char = next_char;\n  } while (current_char_value != '\\0');\n  return next_char + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_string_end_08000150",
                "param_1": "string",
                "pcVar2": "next_char",
                "pcVar3": "current_char",
                "cVar1": "current_char_value"
            },
            "calling": [
                "serialPrint"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_sum_08000168",
            "code": "\nulonglong calculateSum_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shiftedInput1;\n  byte carryBit;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint result1;\n  uint result2;\n  int shiftedInput2;\n  uint shiftedResult1;\n  uint shiftedResult2;\n  uint tempResult1;\n  uint tempResult2;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  result1 = input4 ^ 0x80000000;\n  shiftedResult1 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ result1) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (shiftedResult1 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shiftedInput2 = (int)shiftedResult1 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftedInput2 == -1;\n  }\n  shiftedInput1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shiftedInput1 == -1;\n  }\n  if (condition2) {\n    if (shiftedInput2 == -1 || shiftedInput1 == -1) {\n      shiftedResult1 = result1;\n      tempResult1 = input3;\n      if (shiftedInput2 == -1) {\n        shiftedResult1 = input2;\n        tempResult1 = input1;\n      }\n      if (shiftedInput2 != -1 || shiftedInput1 != -1) {\n        input3 = tempResult1;\n        result1 = shiftedResult1;\n      }\n      condition2 = (tempResult1 | shiftedResult1 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | result1 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = shiftedResult1 == result1;\n      }\n      if (!condition2) {\n        shiftedResult1 = shiftedResult1 | 0x80000;\n      }\n      return CONCAT44(shiftedResult1,tempResult1);\n    }\n    if (((input2 ^ result1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shiftedResult1 | input1) == 0) {\n        input1 = input3;\n        input2 = result1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != result1) {\n      return 0;\n    }\n    if (shiftedResult1 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      result1 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,input1 << 1);\n    }\n    if (shiftedResult1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shiftedResult1 = shiftedResult1 >> 0x15;\n  input4 = input4 >> 0x15;\n  tempResult1 = input4 - shiftedResult1;\n  condition2 = tempResult1 != 0;\n  if (input4 < shiftedResult1) {\n    tempResult1 = -tempResult1;\n  }\n  shiftedResult2 = input1;\n  result2 = input2;\n  if (condition2 && shiftedResult1 <= input4) {\n    shiftedResult1 = shiftedResult1 + tempResult1;\n    shiftedResult2 = input3;\n    result2 = result1;\n    input3 = input1;\n    result1 = input2;\n  }\n  if (0x36 < tempResult1) {\n    return CONCAT44(result2,shiftedResult2);\n  }\n  temp2 = result2 & 0xfffff | 0x100000;\n  if ((result2 & 0x80000000) != 0) {\n    condition2 = shiftedResult2 != 0;\n    shiftedResult2 = -shiftedResult2;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  result2 = result1 & 0xfffff | 0x100000;\n  if ((result1 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    result2 = -result2 - (uint)condition2;\n  }\n  if (shiftedResult1 == tempResult1) {\n    result2 = result2 ^ 0x100000;\n    if (shiftedResult1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      shiftedResult1 = 1;\n    }\n    else {\n      tempResult1 = tempResult1 - 1;\n    }\n  }\n  result1 = -tempResult1 + 0x20;\n  if ((int)tempResult1 < 0x21) {\n    tempResult2 = input3 << (result1 & 0xff);\n    input3 = input3 >> (tempResult1 & 0xff);\n    temp1 = shiftedResult2 + input3;\n    temp3 = result2 << (result1 & 0xff);\n    result1 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(shiftedResult2,input3) + ((int)result2 >> (tempResult1 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    tempResult2 = result2 << (-tempResult1 + 0x40 & 0xff);\n    if (input3 != 0) {\n      tempResult2 = tempResult2 | 2;\n    }\n    result2 = (int)result2 >> (tempResult1 - 0x20 & 0xff);\n    result1 = shiftedResult2 + result2;\n    temp2 = temp2 + ((int)result2 >> 0x1f) + (uint)CARRY4(shiftedResult2,result2);\n  }\n  input2 = temp2 & 0x80000000;\n  tempResult1 = temp2;\n  if ((int)temp2 < 0) {\n    condition2 = tempResult2 == 0;\n    tempResult2 = -tempResult2;\n    tempResult1 = -result1;\n    result1 = -(uint)!condition2 - result1;\n    tempResult1 = -(uint)(condition2 <= tempResult1) - temp2;\n  }\n  if (0xfffff < tempResult1) {\n    shiftedResult2 = shiftedResult1 - 1;\n    if (0x1fffff < tempResult1) {\n      shiftedResult2 = tempResult1 & 1;\n      tempResult1 = tempResult1 >> 1;\n      carryBit = (byte)result1;\n      result1 = (uint)(shiftedResult2 != 0) << 0x1f | result1 >> 1;\n      tempResult2 = (uint)(carryBit & 1) << 0x1f | tempResult2 >> 1;\n      shiftedResult2 = shiftedResult1;\n      if (0xffbfffff < shiftedResult1 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition2 = 0x7fffffff < tempResult2;\n    if (tempResult2 == 0x80000000) {\n      condition2 = (result1 & 1) != 0;\n    }\n    return CONCAT44(tempResult1 + shiftedResult2 * 0x100000 + (uint)CARRY4(result1,(uint)condition2) | input2,\n                    result1 + condition2);\n  }\n  condition1 = (tempResult2 & 0x80000000) != 0;\n  tempResult2 = tempResult2 << 1;\n  shiftedResult2 = result1 * 2;\n  condition2 = CARRY4(result1,result1);\n  result1 = result1 * 2 + (uint)condition1;\n  tempResult1 = tempResult1 * 2 + (uint)(condition2 || CARRY4(shiftedResult2,(uint)condition1));\n  shiftedResult2 = shiftedResult1 - 2;\n  if ((tempResult1 & 0x100000) != 0) goto LAB_08000278;\n  result2 = result1;\n  shiftedResult1 = tempResult1;\n  if (tempResult1 == 0) {\n    result2 = 0;\n    shiftedResult1 = result1;\n  }\n  shiftedInput2 = LZCOUNT(shiftedResult1);\n  if (tempResult1 == 0) {\n    shiftedInput2 = shiftedInput2 + 0x20;\n  }\n  tempResult1 = shiftedInput2 - 0xb;\n  condition3 = SBORROW4(tempResult1,0x20);\n  result1 = shiftedInput2 - 0x2b;\n  condition2 = (int)result1 < 0;\n  condition1 = result1 == 0;\n  if ((int)tempResult1 < 0x20) {\n    condition3 = SCARRY4(result1,0xc);\n    shiftedInput2 = shiftedInput2 + -0x1f;\n    condition2 = shiftedInput2 < 0;\n    condition1 = shiftedInput2 == 0;\n    result1 = tempResult1;\n    if (!condition1 && condition2 == condition3) {\n      result2 = shiftedResult1 << (tempResult1 & 0xff);\n      shiftedResult1 = shiftedResult1 >> (0xcU - shiftedInput2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    tempResult2 = 0x20 - result1;\n  }\n  shiftedResult1 = shiftedResult1 << (result1 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    shiftedResult1 = shiftedResult1 | result2 >> (tempResult2 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    result2 = result2 << (result1 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)tempResult1 <= (int)shiftedResult2) {\n    return CONCAT44(shiftedResult1 + (shiftedResult2 - tempResult1) * 0x100000 | input2,result2);\n  }\n  result1 = ~(shiftedResult2 - tempResult1);\n  if ((int)result1 < 0x1f) {\n    shiftedInput2 = result1 - 0x13;\n    if (shiftedInput2 != 0 && shiftedInput2 < 0 == SCARRY4(result1 - 0x1f,0xc)) {\n      return CONCAT44(temp2,result2 >> (0x20 - (0xcU - shiftedInput2) & 0xff) | shiftedResult1 << (0xcU - shiftedInput2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result1 = result1 + 1;\n    return CONCAT44(input2 | shiftedResult1 >> (result1 & 0xff),\n                    result2 >> (result1 & 0xff) | shiftedResult1 << (0x20 - result1 & 0xff));\n  }\n  return CONCAT44(temp2,shiftedResult1 >> (result1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_sum_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "bVar2": "carryBit",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "result1",
                "uVar7": "result2",
                "iVar8": "shiftedInput2",
                "uVar9": "shiftedResult1",
                "uVar10": "shiftedResult2",
                "uVar11": "tempResult1",
                "uVar12": "tempResult2",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "taskScheduler",
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_result_0800016c",
            "code": "\nulonglong calculate_result_0800016c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry_flag1;\n  uint result1;\n  uint shifted_input1;\n  uint shifted_input2;\n  int shift2;\n  uint shifted_input1_high;\n  uint shifted_result1_high;\n  uint result2;\n  uint difference;\n  uint result2_shifted;\n  uint result3;\n  bool equal_flag;\n  bool condition_flag1;\n  bool condition_flag2;\n  \n  shifted_input1_high = input2 << 1;\n  result2 = input4 << 1;\n  equal_flag = ((input2 ^ input4) & 0x7fffffff) == 0;\n  condition_flag1 = equal_flag && input1 == input3;\n  if (!equal_flag || input1 != input3) {\n    condition_flag1 = (shifted_input1_high | input1) == 0;\n  }\n  if (!condition_flag1) {\n    condition_flag1 = (result2 | input3) == 0;\n  }\n  shift2 = (int)shifted_input1_high >> 0x15;\n  if (!condition_flag1) {\n    condition_flag1 = shift2 == -1;\n  }\n  shift1 = (int)result2 >> 0x15;\n  if (!condition_flag1) {\n    condition_flag1 = shift1 == -1;\n  }\n  if (condition_flag1) {\n    if (shift2 == -1 || shift1 == -1) {\n      result2 = input4;\n      shifted_input1_high = input3;\n      if (shift2 == -1) {\n        result2 = input2;\n        shifted_input1_high = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input1_high;\n        input4 = result2;\n      }\n      condition_flag1 = (shifted_input1_high | result2 << 0xc) == 0;\n      if (condition_flag1) {\n        condition_flag1 = (input3 | input4 << 0xc) == 0;\n      }\n      if (condition_flag1) {\n        condition_flag1 = result2 == input4;\n      }\n      if (!condition_flag1) {\n        result2 = result2 | 0x80000;\n      }\n      return CONCAT44(result2,shifted_input1_high);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input1_high | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input1_high >> 0x15 == 0) {\n      condition_flag1 = (input1 & 0x80000000) != 0;\n      result2 = input2 * 2 + (uint)condition_flag1;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition_flag1)) {\n        result2 = result2 | 0x80000000;\n      }\n      return CONCAT44(result2,input1 << 1);\n    }\n    if (shifted_input1_high < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input1_high = shifted_input1_high >> 0x15;\n  result2 = result2 >> 0x15;\n  difference = result2 - shifted_input1_high;\n  condition_flag1 = difference != 0;\n  if (result2 < shifted_input1_high) {\n    difference = -difference;\n  }\n  shifted_result1_high = input1;\n  shifted_input2 = input2;\n  if (condition_flag1 && shifted_input1_high <= result2) {\n    shifted_input1_high = shifted_input1_high + difference;\n    shifted_result1_high = input3;\n    shifted_input2 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(shifted_input2,shifted_result1_high);\n  }\n  result2 = shifted_input2 & 0xfffff | 0x100000;\n  if ((shifted_input2 & 0x80000000) != 0) {\n    condition_flag1 = shifted_result1_high != 0;\n    shifted_result1_high = -shifted_result1_high;\n    result2 = -result2 - (uint)condition_flag1;\n  }\n  shifted_input2 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    condition_flag1 = input3 != 0;\n    input3 = -input3;\n    shifted_input2 = -shifted_input2 - (uint)condition_flag1;\n  }\n  if (shifted_input1_high == difference) {\n    shifted_input2 = shifted_input2 ^ 0x100000;\n    if (shifted_input1_high == 0) {\n      result2 = result2 ^ 0x100000;\n      shifted_input1_high = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result3 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    result2_shifted = input3 << (result3 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    result1 = shifted_result1_high + input3;\n    shifted_input1 = shifted_input2 << (result3 & 0xff);\n    result3 = result1 + shifted_input1;\n    result2 = result2 + CARRY4(shifted_result1_high,input3) + ((int)shifted_input2 >> (difference & 0xff)) +\n            (uint)CARRY4(result1,shifted_input1);\n  }\n  else {\n    result2_shifted = shifted_input2 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      result2_shifted = result2_shifted | 2;\n    }\n    shifted_input2 = (int)shifted_input2 >> (difference - 0x20 & 0xff);\n    result3 = shifted_result1_high + shifted_input2;\n    result2 = result2 + ((int)shifted_input2 >> 0x1f) + (uint)CARRY4(shifted_result1_high,shifted_input2);\n  }\n  input2 = result2 & 0x80000000;\n  difference = result2;\n  if ((int)result2 < 0) {\n    condition_flag1 = result2_shifted == 0;\n    result2_shifted = -result2_shifted;\n    difference = -result3;\n    result3 = -(uint)!condition_flag1 - result3;\n    difference = -(uint)(condition_flag1 <= difference) - result2;\n  }\n  if (0xfffff < difference) {\n    shifted_result1_high = shifted_input1_high - 1;\n    if (0x1fffff < difference) {\n      result2 = difference & 1;\n      difference = difference >> 1;\n      carry_flag1 = (byte)result3;\n      result3 = (uint)(result2 != 0) << 0x1f | result3 >> 1;\n      result2_shifted = (uint)(carry_flag1 & 1) << 0x1f | result2_shifted >> 1;\n      shifted_result1_high = shifted_input1_high;\n      if (0xffbfffff < shifted_input1_high * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition_flag1 = 0x7fffffff < result2_shifted;\n    if (result2_shifted == 0x80000000) {\n      condition_flag1 = (result3 & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_result1_high * 0x100000 + (uint)CARRY4(result3,(uint)condition_flag1) | input2,\n                    result3 + condition_flag1);\n  }\n  equal_flag = (result2_shifted & 0x80000000) != 0;\n  result2_shifted = result2_shifted << 1;\n  shifted_result1_high = result3 * 2;\n  condition_flag1 = CARRY4(result3,result3);\n  result3 = result3 * 2 + (uint)equal_flag;\n  difference = difference * 2 + (uint)(condition_flag1 || CARRY4(shifted_result1_high,(uint)equal_flag));\n  shifted_result1_high = shifted_input1_high - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  shifted_input2 = result3;\n  shifted_input1_high = difference;\n  if (difference == 0) {\n    shifted_input2 = 0;\n    shifted_input1_high = result3;\n  }\n  shift2 = LZCOUNT(shifted_input1_high);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  condition_flag2 = SBORROW4(result3,0x20);\n  difference = shift2 - 0x2b;\n  condition_flag1 = (int)difference < 0;\n  equal_flag = difference == 0;\n  if ((int)result3 < 0x20) {\n    condition_flag2 = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    condition_flag1 = shift2 < 0;\n    equal_flag = shift2 == 0;\n    difference = result3;\n    if (!equal_flag && condition_flag1 == condition_flag2) {\n      shifted_input2 = shifted_input1_high << (result3 & 0xff);\n      shifted_input1_high = shifted_input1_high >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (equal_flag || condition_flag1 != condition_flag2) {\n    result2_shifted = 0x20 - difference;\n  }\n  shifted_input1_high = shifted_input1_high << (difference & 0xff);\n  if (equal_flag || condition_flag1 != condition_flag2) {\n    shifted_input1_high = shifted_input1_high | shifted_input2 >> (result2_shifted & 0xff);\n  }\n  if (equal_flag || condition_flag1 != condition_flag2) {\n    shifted_input2 = shifted_input2 << (difference & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result3 <= (int)shifted_result1_high) {\n    return CONCAT44(shifted_input1_high + (shifted_result1_high - result3) * 0x100000 | input2,shifted_input2);\n  }\n  difference = ~(shifted_result1_high - result3);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(result2,shifted_input2 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input1_high << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input1_high >> (difference & 0xff),\n                    shifted_input2 >> (difference & 0xff) | shifted_input1_high << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(result2,shifted_input1_high >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_result_0800016c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shift1",
                "bVar2": "carry_flag1",
                "uVar3": "result1",
                "uVar4": "shifted_input1",
                "uVar5": "shifted_input2",
                "iVar6": "shift2",
                "uVar7": "shifted_input1_high",
                "uVar8": "shifted_result1_high",
                "uVar9": "result2",
                "uVar10": "difference",
                "uVar11": "result2_shifted",
                "uVar12": "result3",
                "bVar13": "equal_flag",
                "bVar14": "condition_flag1",
                "bVar15": "condition_flag2"
            },
            "calling": [
                "__ieee754_atan2",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "shift_and_mask_08000404",
            "code": "\nulonglong shiftAndMask_08000404(uint input)\n\n{\n  uint maskLength;\n  uint absInput;\n  uint shift;\n  int count;\n  uint shiftedInput;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  maskLength = 0;\n  count = leadingZeros(absInput);\n  shiftedInput = count + 0x15;\n  isCarry = isSubtractionOverflow(shiftedInput,0x20);\n  shift = count - 0xb;\n  isNegative = (int)shift < 0;\n  isZero = shift == 0;\n  if (shiftedInput < 0x20) {\n    isCarry = isAdditionOverflow(shift,0xc);\n    isNegative = false;\n    isZero = count + 1 == 0;\n    shift = shiftedInput;\n    if (!isZero && isCarry == false) {\n      maskLength = absInput << shiftedInput;\n      absInput = absInput >> (0xcU - (count + 1) & 0xff);\n      goto finalShift;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    remainingBits = 0x20 - shift;\n  }\n  absInput = absInput << (shift & 0xff);\n  if (isZero || isNegative != isCarry) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    maskLength = 0 << (shift & 0xff);\n  }\nfinalShift:\n  if (shiftedInput < 0x433) {\n    return CONCAT44(absInput + (0x432 - shiftedInput) * 0x100000 | signBit,maskLength);\n  }\n  shift = ~(0x432 - shiftedInput);\n  if (0x1e < (int)shift) {\n    return CONCAT44(input,absInput >> (shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shift - 0x13;\n  if (count == 0 || count < 0 != isAdditionOverflow(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(signBit | absInput >> (shift & 0xff),\n                    maskLength >> (shift & 0xff) | absInput << (0x20 - shift & 0xff));\n  }\n  return CONCAT44(input,maskLength >> (0x20 - (0xcU - count) & 0xff) | absInput << (0xcU - count & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "shift_and_mask_08000404",
                "param_1": "input",
                "uVar1": "maskLength",
                "uVar2": "absInput",
                "uVar3": "shift",
                "iVar4": "count",
                "uVar5": "shiftedInput",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isCarry",
                "LZCOUNT": "leadingZeros",
                "SBORROW4": "isSubtractionOverflow",
                "SCARRY4": "isAdditionOverflow",
                "LAB_080002f0": "finalShift"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "bitwise_manipulation_function_08000428",
            "code": "\nulonglong bitwiseManipulationFunction_08000428(uint inputValue,undefined4 paramA,undefined4 paramB,uint paramC)\n\n{\n  uint maskedInputValue;\n  uint tempVarA;\n  uint adjustedValue;\n  uint shiftedValue;\n  uint tempVarB;\n  int shiftCount;\n  uint maskedShiftedValue;\n  uint tempVarC;\n  bool flagA;\n  bool flagB;\n  bool flagC;\n  \n  tempVarB = inputValue << 1;\n  flagB = tempVarB == 0;\n  maskedInputValue = (uint)((inputValue & 0x80000000) != 0) << 0x1f;\n  shiftedValue = (uint)((int)tempVarB >> 3) >> 1;\n  adjustedValue = maskedInputValue | shiftedValue;\n  inputValue = inputValue << 0x1d;\n  if (!flagB) {\n    paramC = tempVarB & 0xff000000;\n    flagB = paramC == 0;\n  }\n  if (!flagB) {\n    flagB = paramC == 0xff000000;\n  }\n  if (!flagB) {\n    return CONCAT44(adjustedValue,inputValue) ^ 0x3800000000000000;\n  }\n  if (tempVarB == 0 || paramC == 0xff000000) {\n    return CONCAT44(adjustedValue,inputValue);\n  }\n  tempVarA = inputValue;\n  tempVarB = shiftedValue;\n  if (shiftedValue == 0) {\n    tempVarA = 0;\n    tempVarB = inputValue;\n  }\n  shiftCount = LZCOUNT(tempVarB);\n  if (shiftedValue == 0) {\n    shiftCount = shiftCount + 0x20;\n  }\n  maskedShiftedValue = shiftCount - 0xb;\n  flagC = SBORROW4(maskedShiftedValue,0x20);\n  shiftedValue = shiftCount - 0x2b;\n  flagB = (int)shiftedValue < 0;\n  flagA = shiftedValue == 0;\n  if ((int)maskedShiftedValue < 0x20) {\n    flagC = SCARRY4(shiftedValue,0xc);\n    shiftCount = shiftCount + -0x1f;\n    flagB = shiftCount < 0;\n    flagA = shiftCount == 0;\n    shiftedValue = maskedShiftedValue;\n    if (!flagA && flagB == flagC) {\n      tempVarA = tempVarB << (maskedShiftedValue & 0xff);\n      tempVarB = tempVarB >> (0xcU - shiftCount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flagA || flagB != flagC) {\n    tempVarC = 0x20 - shiftedValue;\n  }\n  tempVarB = tempVarB << (shiftedValue & 0xff);\n  if (flagA || flagB != flagC) {\n    tempVarB = tempVarB | tempVarA >> (tempVarC & 0xff);\n  }\n  if (flagA || flagB != flagC) {\n    tempVarA = tempVarA << (shiftedValue & 0xff);\n  }\nLAB_080002f0:\n  if ((int)maskedShiftedValue < 0x381) {\n    return CONCAT44(tempVarB + (0x380 - maskedShiftedValue) * 0x100000 | maskedInputValue,tempVarA);\n  }\n  shiftedValue = ~(0x380 - maskedShiftedValue);\n  if ((int)shiftedValue < 0x1f) {\n    shiftCount = shiftedValue - 0x13;\n    if (shiftCount != 0 && shiftCount < 0 == SCARRY4(shiftedValue - 0x1f,0xc)) {\n      return CONCAT44(adjustedValue,tempVarA >> (0x20 - (0xcU - shiftCount) & 0xff) | tempVarB << (0xcU - shiftCount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedValue = shiftedValue + 1;\n    return CONCAT44(maskedInputValue | tempVarB >> (shiftedValue & 0xff),\n                    tempVarA >> (shiftedValue & 0xff) | tempVarB << (0x20 - shiftedValue & 0xff));\n  }\n  return CONCAT44(adjustedValue,tempVarB >> (shiftedValue - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "bitwise_manipulation_function_08000428",
                "param_1": "inputValue",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "uVar1": "maskedInputValue",
                "uVar2": "tempVarA",
                "uVar3": "adjustedValue",
                "uVar4": "shiftedValue",
                "uVar5": "tempVarB",
                "iVar6": "shiftCount",
                "uVar7": "maskedShiftedValue",
                "in_r12": "tempVarC",
                "bVar8": "flagA",
                "bVar9": "flagB",
                "bVar10": "flagC"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_result_080004d0",
            "code": "\nulonglong calculate_result_080004d0(undefined4 input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  ulonglong result;\n  longlong temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  int temp_var_4;\n  uint temp_var_5;\n  uint temp_var_6;\n  uint temp_var_7;\n  uint temp_var_8;\n  bool temp_var_9;\n  bool temp_var_10;\n  bool temp_var_11;\n  ulonglong temp_var_12;\n  \n  temp_var_12 = CONCAT44(input_2,input_1);\n  temp_var_7 = 0x7ff;\n  temp_var_3 = input_2 >> 0x14 & 0x7ff;\n  temp_var_9 = temp_var_3 == 0;\n  if (!temp_var_9) {\n    temp_var_6 = input_4 >> 0x14 & 0x7ff;\n    temp_var_9 = temp_var_6 == 0;\n  }\n  if (!temp_var_9) {\n    temp_var_9 = temp_var_3 == 0x7ff;\n  }\n  if (!temp_var_9) {\n    temp_var_9 = temp_var_6 == 0x7ff;\n  }\n  if (temp_var_9) {\n    temp_var_12 = calculate_bitwise_operation_080006ac();\n  }\n  temp_var_2 = (uint)(temp_var_12 >> 0x20);\n  temp_var_4 = temp_var_3 + temp_var_6;\n  temp_var_3 = temp_var_2 ^ input_4;\n  temp_var_2 = temp_var_2 & ~(temp_var_7 << 0x15);\n  input_4 = input_4 & ~(temp_var_7 << 0x15);\n  temp_var_9 = ((uint)temp_var_12 | temp_var_2 << 0xc) == 0;\n  if (!temp_var_9) {\n    temp_var_9 = (input_3 | input_4 << 0xc) == 0;\n  }\n  temp_var_2 = temp_var_2 | 0x100000;\n  input_4 = input_4 | 0x100000;\n  if (temp_var_9) {\n    input_3 = (uint)temp_var_12 | input_3;\n    input_4 = (temp_var_3 & 0x80000000 | temp_var_2) ^ input_4;\n    temp_var_3 = temp_var_7 >> 1;\n    temp_var_11 = SBORROW4(temp_var_4,temp_var_3);\n    temp_var_5 = temp_var_4 - temp_var_3;\n    temp_var_9 = temp_var_5 == 0;\n    temp_var_2 = temp_var_5;\n    if (!temp_var_9 && (int)temp_var_3 <= temp_var_4) {\n      temp_var_11 = SBORROW4(temp_var_7,temp_var_5);\n      temp_var_2 = temp_var_7 - temp_var_5;\n      temp_var_9 = temp_var_7 == temp_var_5;\n    }\n    if (!temp_var_9 && (int)temp_var_2 < 0 == temp_var_11) {\n      input_4 = input_4 | temp_var_5 * 0x100000;\n    }\n    if (!temp_var_9 && (int)temp_var_2 < 0 == temp_var_11) {\n      return CONCAT44(input_4,input_3);\n    }\n    input_4 = input_4 | 0x100000;\n    temp_var_7 = 0;\n    temp_var_11 = SBORROW4(temp_var_5,1);\n    temp_var_5 = temp_var_5 - 1;\n    temp_var_9 = temp_var_5 == 0;\n    temp_var_3 = temp_var_5;\n  }\n  else {\n    result = (temp_var_12 & 0xffffffff) * (ulonglong)input_3;\n    temp_var_12 = (temp_var_12 & 0xffffffff) * (ulonglong)input_4 +\n             (ulonglong)temp_var_2 * (ulonglong)input_3 + (result >> 0x20);\n    temp_var_8 = (uint)temp_var_12;\n    temp_var_1 = (ulonglong)temp_var_2 * (ulonglong)input_4 + (temp_var_12 >> 0x20);\n    temp_var_7 = (uint)temp_var_1;\n    temp_var_2 = (uint)((ulonglong)temp_var_1 >> 0x20);\n    if ((int)result != 0) {\n      temp_var_8 = temp_var_8 | 1;\n    }\n    temp_var_5 = (temp_var_4 + -0x3ff) - (uint)(temp_var_2 < 0x200);\n    if (temp_var_2 < 0x200) {\n      temp_var_9 = (temp_var_8 & 0x80000000) != 0;\n      temp_var_8 = temp_var_8 << 1;\n      temp_var_1 = CONCAT44(temp_var_2 * 2 + (uint)(CARRY4(temp_var_7,temp_var_7) || CARRY4(temp_var_7 * 2,(uint)temp_var_9)),\n                       temp_var_7 * 2 + (uint)temp_var_9);\n    }\n    input_4 = temp_var_3 & 0x80000000 | (int)((ulonglong)temp_var_1 >> 0x20) << 0xb | (uint)temp_var_1 >> 0x15;\n    input_3 = (uint)temp_var_1 << 0xb | temp_var_8 >> 0x15;\n    temp_var_7 = temp_var_8 * 0x800;\n    temp_var_10 = 0xfc < temp_var_5;\n    temp_var_11 = SBORROW4(temp_var_5,0xfd);\n    temp_var_2 = temp_var_5 - 0xfd;\n    temp_var_9 = temp_var_2 == 0;\n    temp_var_3 = temp_var_2;\n    if (temp_var_10 && !temp_var_9) {\n      temp_var_10 = 0x6ff < temp_var_2;\n      temp_var_11 = SBORROW4(temp_var_2,0x700);\n      temp_var_3 = temp_var_5 - 0x7fd;\n      temp_var_9 = temp_var_2 == 0x700;\n    }\n    if (!temp_var_10 || temp_var_9) {\n      temp_var_9 = 0x7fffffff < temp_var_7;\n      if (temp_var_7 == 0x80000000) {\n        temp_var_9 = (temp_var_8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_4 + temp_var_5 * 0x100000 + (uint)CARRY4(input_3,(uint)temp_var_9),input_3 + temp_var_9\n                     );\n    }\n  }\n  if (!temp_var_9 && (int)temp_var_3 < 0 == temp_var_11) {\n    return (ulonglong)(input_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp_var_10 = SCARRY4(temp_var_5,0x36);\n  temp_var_9 = (int)(temp_var_5 + 0x36) < 0;\n  temp_var_11 = temp_var_5 == 0xffffffca;\n  if (temp_var_11 || temp_var_9 != temp_var_10) {\n    input_3 = 0;\n  }\n  if (temp_var_11 || temp_var_9 != temp_var_10) {\n    input_4 = input_4 & 0x80000000;\n  }\n  if (temp_var_11 || temp_var_9 != temp_var_10) {\n    return CONCAT44(input_4,input_3);\n  }\n  temp_var_3 = -temp_var_5;\n  temp_var_2 = temp_var_3 - 0x20;\n  if (0x1f < (int)temp_var_3) {\n    temp_var_5 = input_3 >> (temp_var_2 & 0xff) | input_4 << (0x20 - temp_var_2 & 0xff);\n    temp_var_3 = (input_4 >> (temp_var_2 & 0xff) & ~((input_4 & 0x80000000) >> (temp_var_2 & 0xff))) -\n            ((int)temp_var_5 >> 0x1f);\n    if ((temp_var_7 | input_3 << (0x20 - temp_var_2 & 0xff) | temp_var_5 << 1) == 0) {\n      temp_var_3 = temp_var_3 & ~(temp_var_5 >> 0x1f);\n    }\n    return CONCAT44(input_4,temp_var_3) & 0x80000000ffffffff;\n  }\n  temp_var_4 = temp_var_3 - 0x14;\n  if (temp_var_4 == 0 || temp_var_4 < 0 != SCARRY4(temp_var_2,0xc)) {\n    temp_var_8 = input_3 << (temp_var_5 + 0x20 & 0xff);\n    temp_var_2 = input_3 >> (temp_var_3 & 0xff) | input_4 << (temp_var_5 + 0x20 & 0xff);\n    temp_var_5 = temp_var_2 + -((int)temp_var_8 >> 0x1f);\n    if ((temp_var_7 | temp_var_8 << 1) == 0) {\n      temp_var_5 = temp_var_5 & ~(temp_var_8 >> 0x1f);\n    }\n    return CONCAT44((input_4 & 0x80000000) +\n                    ((input_4 & 0x7fffffff) >> (temp_var_3 & 0xff)) +\n                    (uint)CARRY4(temp_var_2,-((int)temp_var_8 >> 0x1f)),temp_var_5);\n  }\n  temp_var_3 = 0xc - temp_var_4;\n  temp_var_5 = input_3 << (temp_var_3 & 0xff);\n  temp_var_3 = input_3 >> (0x20 - temp_var_3 & 0xff) | input_4 << (temp_var_3 & 0xff);\n  temp_var_2 = temp_var_3 + -((int)temp_var_5 >> 0x1f);\n  if ((temp_var_7 | temp_var_5 << 1) == 0) {\n    temp_var_2 = temp_var_2 & ~(temp_var_5 >> 0x1f);\n  }\n  return CONCAT44((input_4 & 0x80000000) + (uint)CARRY4(temp_var_3,-((int)temp_var_5 >> 0x1f)),temp_var_2);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_result_080004d0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "lVar2": "temp_var_1",
                "uVar3": "temp_var_2",
                "uVar4": "temp_var_3",
                "iVar5": "temp_var_4",
                "uVar6": "temp_var_5",
                "unaff_r5": "temp_var_6",
                "uVar7": "temp_var_7",
                "uVar8": "temp_var_8",
                "bVar9": "temp_var_9",
                "bVar10": "temp_var_10",
                "bVar11": "temp_var_11",
                "uVar12": "temp_var_12"
            },
            "calling": [
                "taskScheduler",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_bitwise_operation_080006ac",
            "code": "\nulonglong calculate_bitwise_operation_080006ac(uint value_1,uint value_2,uint value_3,uint value_4)\n\n{\n  uint temp_2;\n  uint temp_1;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  bool isZero;\n  \n  temp_3 = temp_5 & value_4 >> 0x14;\n  if (temp_1 != temp_5 && temp_3 != temp_5) {\n    isZero = (value_1 | value_2 << 1) == 0;\n    if (!isZero) {\n      isZero = (value_3 | value_4 << 1) == 0;\n    }\n    if (isZero) {\n      return (ulonglong)((value_2 ^ value_4) & 0x80000000) << 0x20;\n    }\n    if (temp_1 == 0) {\n      temp_4 = value_2 & 0x80000000;\n      do {\n        temp_2 = value_1 & 0x80000000;\n        value_1 = value_1 << 1;\n        value_2 = value_2 * 2 + (uint)(temp_2 != 0);\n      } while ((value_2 & 0x100000) == 0);\n      value_2 = value_2 | temp_4;\n      if (temp_3 != 0) {\n        return CONCAT44(value_2,value_1);\n      }\n    }\n    do {\n      temp_3 = value_3 & 0x80000000;\n      value_3 = value_3 << 1;\n      value_4 = value_4 * 2 + (uint)(temp_3 != 0);\n    } while ((value_4 & 0x100000) == 0);\n    return CONCAT44(value_2,value_1);\n  }\n  isZero = (value_1 | value_2 << 1) == 0;\n  if (isZero) {\n    value_2 = value_4;\n    value_1 = value_3;\n  }\n  if (!isZero) {\n    isZero = (value_3 | value_4 << 1) == 0;\n  }\n  temp_4 = value_2;\n  if (((!isZero) && ((temp_1 != temp_5 || ((value_1 | value_2 << 0xc) == 0)))) &&\n     ((temp_3 != temp_5 || (value_1 = value_3, temp_4 = value_4, (value_3 | value_4 << 0xc) == 0)))) {\n    return (ulonglong)((value_2 ^ value_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_4,value_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_operation_080006ac",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "unaff_r4": "temp_1",
                "uVar1": "temp_2",
                "uVar2": "temp_3",
                "uVar3": "temp_4",
                "in_r12": "temp_5",
                "bVar4": "isZero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_float_08000724",
            "code": "\nulonglong calculate_float_08000724(undefined4 param1,uint mantissa,uint param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint exponent_temp;\n  uint unaff_r5;\n  uint exponent;\n  uint result_mantissa;\n  uint temp12;\n  uint temp13;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(mantissa,param1);\n  temp13 = 0x7ff;\n  temp7 = mantissa >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    unaff_r5 = param4 >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_float_08000724_08000892();\n  }\n  exponent_temp = (uint)((ulonglong)result >> 0x20);\n  result_mantissa = (uint)result;\n  temp8 = temp7 - unaff_r5;\n  if ((param3 | param4 << 0xc) == 0) {\n    temp7 = (exponent_temp ^ param4) & 0x80000000 | exponent_temp & 0xfffff;\n    flag3 = SCARRY4(temp8,temp13 >> 1);\n    exponent_temp = temp8 + (temp13 >> 1);\n    flag1 = (int)exponent_temp < 0;\n    flag2 = exponent_temp == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp13,exponent_temp);\n      flag1 = (int)(temp13 - exponent_temp) < 0;\n      flag2 = temp13 == exponent_temp;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | exponent_temp * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,result_mantissa);\n    }\n    temp7 = temp7 | 0x100000;\n    temp13 = 0;\n    flag2 = SBORROW4(exponent_temp,1);\n    exponent_temp = exponent_temp - 1;\n    flag1 = exponent_temp == 0;\n    temp3 = exponent_temp;\n  }\n  else {\n    temp3 = (param4 << 0xc) >> 4 | 0x10000000 | param3 >> 0x18;\n    temp13 = param3 << 8;\n    exponent = (exponent_temp << 0xc) >> 4 | 0x10000000 | result_mantissa >> 0x18;\n    result_mantissa = result_mantissa * 0x100;\n    temp7 = (exponent_temp ^ param4) & 0x80000000;\n    flag1 = temp3 <= exponent;\n    if (exponent == temp3) {\n      flag1 = temp13 <= result_mantissa;\n    }\n    temp8 = temp8 + (uint)flag1;\n    exponent_temp = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp13 = (uint)((param3 >> 0x18 & 1) != 0) << 0x1f | temp13 >> 1;\n    }\n    temp12 = result_mantissa - temp13;\n    exponent = (exponent - temp3) - (uint)(result_mantissa < temp13);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp13 >> 1;\n    result_mantissa = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp12;\n      if (temp4 < exponent || exponent - temp4 < (uint)flag1) {\n        temp12 = temp12 - temp1;\n        result_mantissa = result_mantissa | temp3;\n        exponent = (exponent - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = exponent - temp5 < (uint)flag2;\n      temp13 = exponent;\n      if (temp5 < exponent || flag1) {\n        temp12 = temp12 - temp1;\n        temp13 = (exponent - temp5) - (uint)!flag2;\n      }\n      if (temp5 < exponent || flag1) {\n        result_mantissa = result_mantissa | temp3 >> 1;\n      }\n      exponent = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp12;\n      flag1 = temp13 - exponent < (uint)flag2;\n      temp5 = temp13;\n      if (exponent < temp13 || flag1) {\n        temp12 = temp12 - temp2;\n        temp5 = (temp13 - exponent) - (uint)!flag2;\n      }\n      if (exponent < temp13 || flag1) {\n        result_mantissa = result_mantissa | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((exponent & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      exponent = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 - temp1;\n        exponent = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        result_mantissa = result_mantissa | temp3 >> 3;\n      }\n      temp13 = exponent | temp12;\n      if (temp13 == 0) break;\n      exponent = exponent << 4 | temp12 >> 0x1c;\n      temp12 = temp12 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | result_mantissa;\n        result_mantissa = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | result_mantissa;\n      result_mantissa = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < exponent_temp;\n    flag2 = SBORROW4(exponent_temp,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= exponent;\n      if (exponent == temp6) {\n        flag1 = temp1 <= temp12;\n      }\n      if (exponent == temp6 && temp12 == temp1) {\n        flag1 = (result_mantissa & 1) != 0;\n      }\n      return CONCAT44(temp7 + exponent_temp * 0x100000 + (uint)CARRY4(result_mantissa,(uint)flag1),result_mantissa + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(exponent_temp,0x36);\n  flag1 = (int)(exponent_temp + 0x36) < 0;\n  flag2 = exponent_temp == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    result_mantissa = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,result_mantissa);\n  }\n  temp3 = -exponent_temp;\n  exponent = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = result_mantissa >> (exponent & 0xff) | temp7 << (0x20 - exponent & 0xff);\n    exponent_temp = (temp7 >> (exponent & 0xff) & ~((temp7 & 0x80000000) >> (exponent & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp13 | result_mantissa << (0x20 - exponent & 0xff) | temp3 << 1) == 0) {\n      exponent_temp = exponent_temp & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,exponent_temp) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(exponent,0xc)) {\n    exponent_temp = 0xc - temp8;\n    temp3 = result_mantissa << (exponent_temp & 0xff);\n    result_mantissa = result_mantissa >> (0x20 - exponent_temp & 0xff) | temp7 << (exponent_temp & 0xff);\n    exponent_temp = result_mantissa + -((int)temp3 >> 0x1f);\n    if ((temp13 | temp3 << 1) == 0) {\n      exponent_temp = exponent_temp & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(result_mantissa,-((int)temp3 >> 0x1f)),exponent_temp);\n  }\n  exponent = result_mantissa << (exponent_temp + 0x20 & 0xff);\n  result_mantissa = result_mantissa >> (temp3 & 0xff) | temp7 << (exponent_temp + 0x20 & 0xff);\n  exponent_temp = result_mantissa + -((int)exponent >> 0x1f);\n  if ((temp13 | exponent << 1) == 0) {\n    exponent_temp = exponent_temp & ~(exponent >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(result_mantissa,-((int)exponent >> 0x1f)),exponent_temp);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_float_08000724",
                "param_1": "param1",
                "param_2": "mantissa",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "exponent_temp",
                "uVar10": "exponent",
                "uVar11": "result_mantissa",
                "uVar12": "temp12",
                "uVar13": "temp13",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "__ieee754_atan2",
                "sqrt",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "calculate_float_08000892",
            "code": "\nulonglong calculate_float_08000892(uint input1,uint input2,uint operand1,uint operand2)\n\n{\n  uint bit1;\n  uint result1;\n  uint bit2;\n  uint result2;\n  uint constant;\n  bool isZero;\n  \n  bit2 = constant & operand2 >> 0x14;\n  result2 = input2;\n  if (result1 != constant || bit2 != constant) {\n    if (result1 == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = operand1, result2 = operand2, bit2 != constant)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ operand2) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == constant) {\n      input1 = operand1;\n      result2 = operand2;\n      if ((operand1 | operand2 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ operand2) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (operand1 | operand2 << 1) == 0;\n      }\n      if (!isZero) {\n        if (result1 == 0) {\n          result2 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | result2;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          result2 = operand1 & 0x80000000;\n          operand1 = operand1 << 1;\n          operand2 = operand2 * 2 + (uint)(result2 != 0);\n        } while ((operand2 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((operand1 | operand2 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(result2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "calculate_float_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "operand1",
                "param_4": "operand2",
                "uVar1": "bit1",
                "unaff_r4": "result1",
                "uVar2": "bit2",
                "uVar3": "result2",
                "in_r12": "constant",
                "bVar4": "isZero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equality_and_bitwise_08000904",
            "code": "\nuint checkEqualityAndBitwise_08000904(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint result;\n  bool areInputsZero;\n  bool isNegativeCheck;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  areInputsZero = (input_1 | input_2 << 1) == 0;\n  if (areInputsZero) {\n    areInputsZero = (input_3 | input_4 << 1) == 0;\n  }\n  if (!areInputsZero) {\n    areInputsZero = input_2 == input_4;\n  }\n  if (areInputsZero) {\n    areInputsZero = input_1 == input_3;\n  }\n  if (!areInputsZero) {\n    result = input_2 ^ input_4;\n    areInputsZero = result == 0;\n    if (-1 < (int)result) {\n      areInputsZero = input_2 == input_4;\n    }\n    isNegativeCheck = -1 < (int)result && input_4 <= input_2;\n    if (areInputsZero) {\n      isNegativeCheck = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!isNegativeCheck) {\n      input_4 = ~input_4;\n    }\n    return input_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equality_and_bitwise_08000904",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result",
                "bVar2": "areInputsZero",
                "bVar3": "isNegativeCheck"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "compare_floating_point_numbers_08000980",
            "code": "\nvoid compareFloatingPointNumbers_08000980(undefined4 result,undefined4 result_length,undefined4 number1,undefined4 number2)\n\n{\n  __aeabi_cdcmpeq(number1,number2,result,result_length);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "compare_floating_point_numbers_08000980",
                "param_1": "result",
                "param_2": "result_length",
                "param_3": "number1",
                "param_4": "number2"
            },
            "calling": [
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "float_to_undefined_08000990",
            "code": "\nundefined4 float_to_undefined_08000990(undefined4 input_value)\n\n{\n  conversion_function();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "float_to_undefined_08000990",
                "param_1": "input_value",
                "__nedf2": "conversion_function"
            },
            "calling": [
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_dcmpeq"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "is_zero_comparison_080009a0",
            "code": "\nbool is_zero_comparison_080009a0(void)\n\n{\n  char result_of_comparison;\n  \n  __aeabi_cdcmpeq();\n  return result_of_comparison != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "is_zero_comparison_080009a0",
                "in_ZR": "result_of_comparison"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "check_if_carry_flag_is_unset_080009b4",
            "code": "\nbool check_if_carry_flag_is_unset_080009b4(void)\n\n{\n  char carry_flag;\n  \n  compare_carry_flag_with_zero();\n  return carry_flag == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "check_if_carry_flag_is_unset_080009b4",
                "in_CY": "carry_flag",
                "__aeabi_cdcmpeq": "compare_carry_flag_with_zero"
            },
            "calling": [
                "sqrt",
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "compare_condition_codes_080009c8",
            "code": "\nbool compareConditionCodes_080009c8(void)\n\n{\n  undefined zeroFlag;\n  undefined carryFlag;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)carryFlag || (bool)zeroFlag;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "compare_condition_codes_080009c8",
                "in_ZR": "zeroFlag",
                "in_CY": "carryFlag"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "is_null_character_080009f0",
            "code": "\nbool is_null_character_080009f0(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "is_null_character_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_params_08000a04",
            "code": "\nundefined4 checkParams_08000a04(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_params_08000a04",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_float_bits_08000a30",
            "code": "\nuint calculateFloatBits_08000a30(uint floatValue,uint bits)\n\n{\n  uint result;\n  uint bitsTimes2;\n  uint modifiedBits;\n  uint conditionalBits;\n  bool isZero;\n  bool isLessThan0x70000000;\n  \n  bitsTimes2 = bits * 2;\n  isLessThan0x70000000 = bitsTimes2 < 0x70000000;\n  modifiedBits = bitsTimes2 + 0x90000000;\n  result = modifiedBits;\n  if (!isLessThan0x70000000) {\n    conditionalBits = bitsTimes2 + 0x8fe00000;\n    result = conditionalBits;\n  }\n  isZero = result == 0;\n  if (!isLessThan0x70000000 && modifiedBits >= 0x200000) {\n    isZero = conditionalBits == 0x1fc00000;\n  }\n  if (((isLessThan0x70000000 || modifiedBits < 0x200000) || 0x1fc00000 < conditionalBits) || isZero) {\n    if ((bits & 0x40000000) != 0) {\n      if (((int)bitsTimes2 >> 0x15 == -1) && ((floatValue | bits << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return bits & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(bitsTimes2 + 0x92e00000) < 0 != SCARRY4(modifiedBits,0x2e00000)) {\n      return bits & 0x80000000;\n    }\n    bitsTimes2 = 0x18 - (bitsTimes2 + 0x92e00000 >> 0x15);\n    result = floatValue >> (bitsTimes2 & 0xff);\n    if (floatValue << (0x20 - bitsTimes2 & 0xff) != 0) {\n      result = result | 1;\n    }\n    modifiedBits = bits & 0x1fffff | 0x100000;\n    floatValue = result | modifiedBits << (0x20 - bitsTimes2 & 0xff);\n    modifiedBits = (modifiedBits >> (bitsTimes2 & 0xff)) << 1;\n  }\n  result = (bits & 0x80000000 | floatValue >> 0x1d) + modifiedBits * 4 + (uint)(0x7fffffff < floatValue * 8);\n  if (floatValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_float_bits_08000a30",
                "param_1": "floatValue",
                "param_2": "bits",
                "uVar1": "result",
                "uVar2": "bitsTimes2",
                "uVar3": "modifiedBits",
                "in_r12": "conditionalBits",
                "bVar4": "isZero",
                "bVar5": "isLessThan0x70000000"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "perform_arithmetic_operation_08000ad8",
            "code": "\nuint performArithmeticOperation_08000ad8(uint inputA,uint inputB,undefined4 inputC,uint inputD)\n\n{\n  int shiftAmount1;\n  int shiftAmount2;\n  uint xorResult;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  bool isConditionTrue;\n  \n  xorResult = inputB ^ 0x80000000;\n  tempVar2 = inputA << 1;\n  isConditionTrue = tempVar2 == 0;\n  if (!isConditionTrue) {\n    inputD = inputB << 1;\n    isConditionTrue = inputD == 0;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = tempVar2 == inputD;\n  }\n  shiftAmount1 = (int)tempVar2 >> 0x18;\n  if (!isConditionTrue) {\n    isConditionTrue = shiftAmount1 == -1;\n  }\n  if (!isConditionTrue) {\n    isConditionTrue = (int)inputD >> 0x18 == -1;\n  }\n  if (isConditionTrue) {\n    shiftAmount2 = (int)(inputB << 1) >> 0x18;\n    if (shiftAmount1 == -1 || shiftAmount2 == -1) {\n      tempVar2 = xorResult;\n      if (shiftAmount1 == -1) {\n        tempVar2 = inputA;\n      }\n      if (shiftAmount1 != -1 || shiftAmount2 != -1) {\n        xorResult = tempVar2;\n      }\n      isConditionTrue = (tempVar2 & 0x7fffff) == 0;\n      if (isConditionTrue) {\n        isConditionTrue = (xorResult & 0x7fffff) == 0;\n      }\n      if (isConditionTrue) {\n        isConditionTrue = tempVar2 == xorResult;\n      }\n      if (!isConditionTrue) {\n        tempVar2 = tempVar2 | 0x400000;\n      }\n      return tempVar2;\n    }\n    if (((inputA ^ xorResult) & 0x7fffffff) != 0) {\n      if (tempVar2 == 0) {\n        inputA = xorResult;\n      }\n      return inputA;\n    }\n    if (inputA != xorResult) {\n      return 0;\n    }\n    if ((tempVar2 & 0xff000000) == 0) {\n      xorResult = inputA << 1;\n      if ((inputA & 0x80000000) != 0) {\n        xorResult = xorResult | 0x80000000;\n      }\n      return xorResult;\n    }\n    if (tempVar2 < 0xfe000000) {\n      return inputA + 0x800000;\n    }\n    inputA = inputA & 0x80000000;\nLAB_08000c12:\n    return inputA | 0x7f800000;\n  }\n  tempVar2 = tempVar2 >> 0x18;\n  inputD = inputD >> 0x18;\n  tempVar4 = inputD - tempVar2;\n  isConditionTrue = tempVar4 != 0;\n  tempVar3 = tempVar2;\n  if (isConditionTrue && tempVar2 <= inputD) {\n    tempVar3 = tempVar2 + tempVar4;\n  }\n  if (isConditionTrue && tempVar2 <= inputD) {\n    xorResult = xorResult ^ inputA;\n  }\n  if (isConditionTrue && tempVar2 <= inputD) {\n    inputA = inputA ^ xorResult;\n  }\n  if (isConditionTrue && tempVar2 <= inputD) {\n    xorResult = xorResult ^ inputA;\n  }\n  if (inputD < tempVar2) {\n    tempVar4 = -tempVar4;\n  }\n  if (0x19 < tempVar4) {\n    return inputA;\n  }\n  tempVar2 = inputA & 0xffffff | 0x800000;\n  if ((inputA & 0x80000000) != 0) {\n    tempVar2 = -tempVar2;\n  }\n  tempVar1 = xorResult & 0xffffff | 0x800000;\n  if ((xorResult & 0x80000000) != 0) {\n    tempVar1 = -tempVar1;\n  }\n  if (tempVar3 == tempVar4) {\n    tempVar1 = tempVar1 ^ 0x800000;\n    if (tempVar3 == 0) {\n      tempVar2 = tempVar2 ^ 0x800000;\n      tempVar3 = 1;\n    }\n    else {\n      tempVar4 = tempVar4 - 1;\n    }\n  }\n  tempVar2 = tempVar2 + ((int)tempVar1 >> (tempVar4 & 0xff));\n  tempVar1 = tempVar1 << (0x20 - tempVar4 & 0xff);\n  inputA = tempVar2 & 0x80000000;\n  if ((int)tempVar2 < 0) {\n    isConditionTrue = tempVar1 != 0;\n    tempVar1 = -tempVar1;\n    tempVar2 = -tempVar2 - (uint)isConditionTrue;\n  }\n  if (tempVar2 < 0x800000) {\n    xorResult = tempVar1 & 0x80000000;\n    tempVar1 = tempVar1 << 1;\n    tempVar2 = tempVar2 * 2 + (uint)(xorResult != 0);\n    xorResult = tempVar3 - 2;\n    if ((tempVar2 & 0x800000) == 0) {\n      tempVar4 = LZCOUNT(tempVar2) - 8;\n      tempVar2 = tempVar2 << (tempVar4 & 0xff);\n      if ((int)xorResult < (int)tempVar4) {\n        tempVar2 = tempVar2 >> (-(xorResult - tempVar4) & 0xff);\n      }\n      else {\n        tempVar2 = tempVar2 + (xorResult - tempVar4) * 0x800000;\n      }\n      return tempVar2 | inputA;\n    }\n  }\n  else {\n    xorResult = tempVar3 - 1;\n    if (0xffffff < tempVar2) {\n      xorResult = tempVar2 & 1;\n      tempVar2 = tempVar2 >> 1;\n      tempVar1 = (uint)(xorResult != 0) << 0x1f | tempVar1 >> 1;\n      xorResult = tempVar3;\n      if (0xfd < tempVar3) goto LAB_08000c12;\n    }\n  }\n  tempVar2 = tempVar2 + xorResult * 0x800000 + (uint)(0x7fffffff < tempVar1);\n  if (tempVar1 == 0x80000000) {\n    tempVar2 = tempVar2 & 0xfffffffe;\n  }\n  return tempVar2 | inputA;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "perform_arithmetic_operation_08000ad8",
                "param_1": "inputA",
                "param_2": "inputB",
                "param_3": "inputC",
                "param_4": "inputD",
                "iVar1": "shiftAmount1",
                "iVar2": "shiftAmount2",
                "uVar3": "xorResult",
                "uVar4": "tempVar1",
                "uVar5": "tempVar2",
                "uVar6": "tempVar3",
                "uVar7": "tempVar4",
                "bVar8": "isConditionTrue"
            },
            "calling": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_floating_point_08000adc",
            "code": "\nuint calculateFloatingPoint_08000adc(uint input1,uint input2,undefined4 unused,uint input3)\n\n{\n  int shiftVal1;\n  int shiftVal2;\n  uint result1;\n  uint temp1;\n  uint temp2;\n  uint diff;\n  bool isZero;\n  \n  temp1 = input1 << 1;\n  isZero = temp1 == 0;\n  if (!isZero) {\n    input3 = input2 << 1;\n    isZero = input3 == 0;\n  }\n  if (!isZero) {\n    isZero = temp1 == input3;\n  }\n  shiftVal1 = (int)temp1 >> 0x18;\n  if (!isZero) {\n    isZero = shiftVal1 == -1;\n  }\n  if (!isZero) {\n    isZero = (int)input3 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftVal2 = (int)(input2 << 1) >> 0x18;\n    if (shiftVal1 == -1 || shiftVal2 == -1) {\n      temp1 = input2;\n      if (shiftVal1 == -1) {\n        temp1 = input1;\n      }\n      if (shiftVal1 != -1 || shiftVal2 != -1) {\n        input2 = temp1;\n      }\n      isZero = (temp1 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = temp1 == input2;\n      }\n      if (!isZero) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input3 = input3 >> 0x18;\n  diff = input3 - temp1;\n  isZero = diff != 0;\n  temp2 = temp1;\n  if (isZero && temp1 <= input3) {\n    temp2 = temp1 + diff;\n  }\n  if (isZero && temp1 <= input3) {\n    input2 = input2 ^ input1;\n  }\n  if (isZero && temp1 <= input3) {\n    input1 = input1 ^ input2;\n  }\n  if (isZero && temp1 <= input3) {\n    input2 = input2 ^ input1;\n  }\n  if (input3 < temp1) {\n    diff = -diff;\n  }\n  if (0x19 < diff) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp2 == diff) {\n    result1 = result1 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result1 >> (diff & 0xff));\n  result1 = result1 << (0x20 - diff & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    isZero = result1 != 0;\n    result1 = -result1;\n    temp1 = -temp1 - (uint)isZero;\n  }\n  if (temp1 < 0x800000) {\n    diff = result1 & 0x80000000;\n    result1 = result1 << 1;\n    temp1 = temp1 * 2 + (uint)(diff != 0);\n    diff = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp2 = leadingZeroCount(temp1) - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)diff < (int)temp2) {\n        temp1 = temp1 >> (-(diff - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (diff - temp2) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    diff = temp2 - 1;\n    if (0xffffff < temp1) {\n      diff = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result1 = (uint)(diff != 0) << 0x1f | result1 >> 1;\n      diff = temp2;\n      if (0xfd < temp2) goto LAB_08000c12;\n    }\n  }\n  temp1 = temp1 + diff * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused",
                "param_4": "input3",
                "iVar1": "shiftVal1",
                "iVar2": "shiftVal2",
                "uVar3": "result1",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "diff",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "taskScheduler",
                "AHRS_GetPitch",
                "AK8963_Init",
                "Motor_DistributeSpeed",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_result_08000c3c",
            "code": "\nuint calculateResult_08000c3c(uint input)\n\n{\n  uint leadingZerosCount;\n  uint shiftAmount;\n  int calculationResult;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZerosCount = LZCOUNT(input);\n  shiftAmount = leadingZerosCount - 8;\n  calculationResult = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZerosCount) {\n    mask = 0 << (shiftAmount & 0xff);\n    leadingZerosCount = calculationResult + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZerosCount = leadingZerosCount & 0xfffffffe;\n    }\n    return leadingZerosCount;\n  }\n  shiftAmount = input << leadingZerosCount + 0x18;\n  leadingZerosCount = calculationResult + ((input >> (0x20 - (leadingZerosCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZerosCount = leadingZerosCount & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_result_08000c3c",
                "param_1": "input",
                "uVar1": "leadingZerosCount",
                "uVar2": "shiftAmount",
                "iVar3": "calculationResult",
                "uVar4": "mask"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_value_08000c44",
            "code": "\nuint calculateValue_08000c44(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shift;\n  uint isNegative;\n  int result;\n  \n  isNegative = inputValue & 0x80000000;\n  if ((int)isNegative < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(inputValue);\n  shift = leadingZeros - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shift * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shift & 0xff);\n    isNegative = result + (inputValue << (shift & 0xff)) +\n            (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shift = inputValue << leadingZeros + 0x18;\n  isNegative = result + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n  if ((shift & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shift >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_value_08000c44",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shift",
                "uVar3": "isNegative",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "taskScheduler",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint exponentA,uint exponentB,undefined4 param3,uint exponentC)\n\n{\n  longlong tempLongVar;\n  uint resultVar;\n  uint aBitRange;\n  int sumExponents;\n  int diffExponents;\n  uint tempResult;\n  int tempDiffExponents;\n  uint finalResult;\n  bool isZero;\n  bool isNegative;\n  \n  aBitRange = exponentA >> 0x17 & 0xff;\n  isZero = aBitRange == 0;\n  if (!isZero) {\n    exponentC = exponentB >> 0x17 & 0xff;\n    isZero = exponentC == 0;\n  }\n  if (!isZero) {\n    isZero = aBitRange == 0xff;\n  }\n  if (!isZero) {\n    isZero = exponentC == 0xff;\n  }\n  if (isZero) {\n    exponentC = exponentB >> 0x17 & 0xff;\n    if (aBitRange == 0xff || exponentC == 0xff) {\n      isZero = exponentA == 0 || exponentA == 0x80000000;\n      resultVar = exponentB;\n      if (exponentA != 0 && exponentA != 0x80000000) {\n        isZero = exponentB == 0;\n        resultVar = exponentA;\n      }\n      if (!isZero) {\n        isZero = exponentB == 0x80000000;\n      }\n      finalResult = resultVar;\n      if (((isZero) || ((aBitRange == 0xff && ((resultVar & 0x7fffff) != 0)))) ||\n         ((exponentC == 0xff && (finalResult = exponentB, (exponentB & 0x7fffff) != 0)))) {\n        return finalResult | 0x7fc00000;\n      }\n      resultVar = resultVar ^ exponentB;\n      goto LAB_08000e3c;\n    }\n    isZero = (exponentA & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (exponentB & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (exponentA ^ exponentB) & 0x80000000;\n    }\n    isZero = aBitRange == 0;\n    resultVar = exponentA & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        exponentA = exponentA << 1;\n        isZero = (exponentA & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      aBitRange = aBitRange - 1;\n    }\n    exponentA = exponentA | resultVar;\n    isZero = exponentC == 0;\n    resultVar = exponentB & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        exponentB = exponentB << 1;\n        isZero = (exponentB & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exponentC = exponentC - 1;\n    }\n    exponentB = exponentB | resultVar;\n  }\n  sumExponents = aBitRange + exponentC;\n  finalResult = exponentA ^ exponentB;\n  aBitRange = exponentA << 9;\n  isZero = aBitRange == 0;\n  if (!isZero) {\n    exponentB = exponentB << 9;\n    isZero = exponentB == 0;\n  }\n  if (isZero) {\n    if (aBitRange == 0) {\n      exponentB = exponentB << 9;\n    }\n    resultVar = finalResult & 0x80000000 | exponentA & 0x7fffff | exponentB >> 9;\n    isNegative = SBORROW4(sumExponents,0x7f);\n    diffExponents = sumExponents + -0x7f;\n    isZero = diffExponents == 0;\n    tempDiffExponents = diffExponents;\n    if (!isZero && 0x7e < sumExponents) {\n      isNegative = SBORROW4(0xff,diffExponents);\n      tempDiffExponents = 0xff - diffExponents;\n      isZero = diffExponents == 0xff;\n    }\n    if (!isZero && tempDiffExponents < 0 == isNegative) {\n      resultVar = resultVar | diffExponents * 0x800000;\n    }\n    if (!isZero && tempDiffExponents < 0 == isNegative) {\n      return resultVar;\n    }\n    resultVar = resultVar | 0x800000;\n    tempResult = 0;\n    isNegative = SBORROW4(diffExponents,1);\n    finalResult = sumExponents - 0x80;\n    isZero = finalResult == 0;\n    aBitRange = finalResult;\n  }\n  else {\n    tempLongVar = (ulonglong)(aBitRange >> 5 | 0x8000000) * (ulonglong)(exponentB >> 5 | 0x8000000);\n    tempResult = (uint)tempLongVar;\n    resultVar = (uint)((ulonglong)tempLongVar >> 0x20);\n    isZero = resultVar < 0x800000;\n    if (isZero) {\n      resultVar = resultVar << 1;\n    }\n    if (isZero) {\n      resultVar = resultVar | tempResult >> 0x1f;\n      tempResult = tempResult << 1;\n    }\n    resultVar = finalResult & 0x80000000 | resultVar;\n    finalResult = (sumExponents + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(finalResult,0xfd);\n    isZero = finalResult == 0xfd;\n    aBitRange = finalResult - 0xfd;\n    if (finalResult < 0xfe) {\n      resultVar = resultVar + finalResult * 0x800000 + (uint)(0x7fffffff < tempResult);\n      if (tempResult == 0x80000000) {\n        resultVar = resultVar & 0xfffffffe;\n      }\n      return resultVar;\n    }\n  }\n  if (isZero || (int)aBitRange < 0 != isNegative) {\n    isZero = (int)(finalResult + 0x19) < 0;\n    if (finalResult == 0xffffffe7 || isZero != SCARRY4(finalResult,0x19)) {\n      resultVar = resultVar & 0x80000000;\n    }\n    if (finalResult != 0xffffffe7 && isZero == SCARRY4(finalResult,0x19)) {\n      aBitRange = (resultVar << 1) >> (-finalResult & 0xff);\n      finalResult = resultVar << (finalResult + 0x20 & 0xff);\n      aBitRange = ((uint)((resultVar & 0x80000000) != 0) << 0x1f | aBitRange >> 1) + (uint)((byte)aBitRange & 1);\n      if ((tempResult | finalResult << 1) == 0) {\n        aBitRange = aBitRange & ~(finalResult >> 0x1f);\n      }\n      return aBitRange;\n    }\n    return resultVar;\n  }\nLAB_08000e3c:\n  return resultVar & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "exponentA",
                "param_2": "exponentB",
                "param_3": "param3",
                "param_4": "exponentC",
                "lVar1": "tempLongVar",
                "uVar2": "resultVar",
                "uVar3": "aBitRange",
                "iVar4": "sumExponents",
                "iVar5": "diffExponents",
                "uVar6": "tempResult",
                "iVar7": "tempDiffExponents",
                "uVar8": "finalResult",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "AHRS_GetPitch",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "PID_UpdateAltitude",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Update",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_floating_point_08000e54",
            "code": "\nuint calculateFloatingPoint_08000e54(uint inputParam1,uint inputParam2,undefined4 inputParam3,uint inputParam4)\n\n{\n  uint var1;\n  uint var2;\n  int var3;\n  uint var4;\n  int var5;\n  uint var6;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  var2 = inputParam1 >> 0x17 & 0xff;\n  condition1 = var2 == 0;\n  if (!condition1) {\n    inputParam4 = inputParam2 >> 0x17 & 0xff;\n    condition1 = inputParam4 == 0;\n  }\n  if (!condition1) {\n    condition1 = var2 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = inputParam4 == 0xff;\n  }\n  if (condition1) {\n    inputParam4 = inputParam2 >> 0x17 & 0xff;\n    var6 = inputParam1;\n    if (var2 == 0xff) {\n      if (((inputParam1 & 0x7fffff) != 0) || (var6 = inputParam2, inputParam4 == 0xff)) {\nLAB_08000e4a:\n        return var6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (inputParam4 == 0xff) {\n        var6 = inputParam2;\n        if ((inputParam2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (inputParam1 ^ inputParam2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      condition1 = (inputParam1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (inputParam2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = var2 == 0;\n        var6 = inputParam1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            inputParam1 = inputParam1 << 1;\n            condition1 = (inputParam1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          var2 = var2 - 1;\n        }\n        inputParam1 = inputParam1 | var6;\n        condition1 = inputParam4 == 0;\n        var6 = inputParam2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            inputParam2 = inputParam2 << 1;\n            condition1 = (inputParam2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          inputParam4 = inputParam4 - 1;\n        }\n        inputParam2 = inputParam2 | var6;\n        goto LAB_08000e6c;\n      }\n      if ((inputParam1 & 0x7fffffff) == 0) {\n        if ((inputParam2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    inputParam1 = inputParam1 ^ inputParam2;\n  }\n  else {\nLAB_08000e6c:\n    var3 = var2 - inputParam4;\n    if (inputParam2 << 9 == 0) {\n      inputParam1 = (inputParam1 ^ inputParam2) & 0x80000000 | inputParam1 & 0x7fffff;\n      condition3 = SCARRY4(var3,0x7f);\n      var5 = var3 + 0x7f;\n      condition1 = var5 < 0;\n      condition2 = var5 == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,var5);\n        condition1 = 0xff - var5 < 0;\n        condition2 = var5 == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        inputParam1 = inputParam1 | var5 * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return inputParam1;\n      }\n      inputParam1 = inputParam1 | 0x800000;\n      var2 = 0;\n      condition2 = SBORROW4(var5,1);\n      var4 = var3 + 0x7e;\n      condition1 = var4 == 0;\n      var6 = var4;\n    }\n    else {\n      var1 = (inputParam2 << 9) >> 4 | 0x10000000;\n      var2 = (inputParam1 << 9) >> 4 | 0x10000000;\n      inputParam1 = (inputParam1 ^ inputParam2) & 0x80000000;\n      condition1 = var1 <= var2;\n      if (!condition1) {\n        var2 = var2 << 1;\n      }\n      var4 = var3 + 0x7d + (uint)condition1;\n      var6 = 0x800000;\n      do {\n        if (var1 <= var2) {\n          var2 = var2 - var1;\n          inputParam1 = inputParam1 | var6;\n        }\n        condition1 = var1 >> 1 <= var2;\n        if (condition1) {\n          var2 = var2 - (var1 >> 1);\n        }\n        if (condition1) {\n          inputParam1 = inputParam1 | var6 >> 1;\n        }\n        condition1 = var1 >> 2 <= var2;\n        if (condition1) {\n          var2 = var2 - (var1 >> 2);\n        }\n        if (condition1) {\n          inputParam1 = inputParam1 | var6 >> 2;\n        }\n        condition1 = var1 >> 3 <= var2;\n        if (condition1) {\n          var2 = var2 - (var1 >> 3);\n        }\n        if (condition1) {\n          inputParam1 = inputParam1 | var6 >> 3;\n        }\n        var2 = var2 * 0x10;\n        condition1 = var2 == 0;\n        if (!condition1) {\n          var6 = var6 >> 4;\n          condition1 = var6 == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(var4,0xfd);\n      condition1 = var4 == 0xfd;\n      var6 = var4 - 0xfd;\n      if (var4 < 0xfe) {\n        inputParam1 = inputParam1 + var4 * 0x800000 + (uint)(var1 <= var2);\n        if (var2 - var1 == 0) {\n          inputParam1 = inputParam1 & 0xfffffffe;\n        }\n        return inputParam1;\n      }\n    }\n    if (condition1 || (int)var6 < 0 != condition2) {\n      condition1 = (int)(var4 + 0x19) < 0;\n      if (var4 == 0xffffffe7 || condition1 != SCARRY4(var4,0x19)) {\n        inputParam1 = inputParam1 & 0x80000000;\n      }\n      if (var4 == 0xffffffe7 || condition1 != SCARRY4(var4,0x19)) {\n        return inputParam1;\n      }\n      var6 = (inputParam1 << 1) >> (-var4 & 0xff);\n      var4 = inputParam1 << (var4 + 0x20 & 0xff);\n      var6 = ((uint)((inputParam1 & 0x80000000) != 0) << 0x1f | var6 >> 1) + (uint)((byte)var6 & 1);\n      if ((var2 | var4 << 1) == 0) {\n        var6 = var6 & ~(var4 >> 0x1f);\n      }\n      return var6;\n    }\n  }\n  return inputParam1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_floating_point_08000e54",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "var1",
                "uVar2": "var2",
                "iVar3": "var3",
                "uVar4": "var4",
                "iVar5": "var5",
                "uVar6": "var6",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "calling": [
                "taskScheduler",
                "PID_Compute",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_result_08000f9c",
            "code": "\nuint calculateResult_08000f9c(uint input1,uint input2)\n\n{\n  bool isInput1GreaterThanInput2;\n  uint input1TimesTwo;\n  uint input2TimesTwo;\n  uint result;\n  bool isResultZero;\n  \n  input1TimesTwo = input1 * 2;\n  input2TimesTwo = input2 * 2;\n  if (((int)input1TimesTwo >> 0x18 == -1 || (int)input2TimesTwo >> 0x18 == -1) &&\n     ((((int)input1TimesTwo >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)input2TimesTwo >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  result = input1TimesTwo | input2 & 0x7fffffff;\n  isResultZero = result == 0;\n  if (!isResultZero) {\n    result = input1 ^ input2;\n    isResultZero = result == 0;\n  }\n  isInput1GreaterThanInput2 = -1 < (int)result;\n  if (isInput1GreaterThanInput2) {\n    input1 = input1TimesTwo + input2 * -2;\n    isResultZero = input1 == 0;\n  }\n  if ((isInput1GreaterThanInput2 && input2TimesTwo <= input1TimesTwo) && !isResultZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isInput1GreaterThanInput2 || input2TimesTwo > input1TimesTwo) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isResultZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "input1TimesTwo",
                "uVar3": "input2TimesTwo",
                "uVar4": "result",
                "bVar1": "isInput1GreaterThanInput2",
                "bVar5": "isResultZero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "compare_floats_08000ffc",
            "code": "\nvoid compareFloats_08000ffc(undefined4 firstFloat,undefined4 secondFloat)\n\n{\n  __aeabi_cfcmpeq(secondFloat,firstFloat);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "compare_floats_08000ffc",
                "param_1": "firstFloat",
                "param_2": "secondFloat"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_param_and_return_08001004",
            "code": "\nundefined8 concatenateParamAndReturn_08001004(undefined4 src,undefined4 dest)\n\n{\n  __cmpsf2();\n  return CONCAT44(dest,src);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_param_and_return_08001004",
                "param_1": "src",
                "param_2": "dest"
            },
            "calling": [
                "__aeabi_fcmpeq",
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_equality_08001014",
            "code": "\nbool check_equality_08001014(void)\n\n{\n  char result;\n  \n  __aeabi_cfcmpeq();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_equality_08001014",
                "in_ZR": "result"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "is_null_check_08001028",
            "code": "\nbool is_null_check_08001028(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "is_null_check_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "PID_Compute",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "is_zero_or_less_or_equal_08001050",
            "code": "\nbool isZeroOrLessOrEqual_08001050(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_08001050": "is_zero_or_less_or_equal_08001050",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [
                "AHRS_GetYaw"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "is_null_terminated_08001064",
            "code": "\nbool is_null_terminated_08001064(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "is_null_terminated_08001064",
                "in_CY": "input_character"
            },
            "calling": [
                "PID_Compute",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "decode_parameter_08001078",
            "code": "\nuint decode_parameter_08001078(uint encoded_value)\n\n{\n  uint shifted_encoded_value;\n  uint remaining_bits;\n  \n  if (encoded_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_encoded_value = (encoded_value << 1) >> 0x18;\n  remaining_bits = 0x9e - shifted_encoded_value;\n  if (shifted_encoded_value < 0x9f && remaining_bits != 0) {\n    shifted_encoded_value = (encoded_value << 8 | 0x80000000) >> (remaining_bits & 0xff);\n    if ((encoded_value & 0x80000000) != 0) {\n      shifted_encoded_value = -shifted_encoded_value;\n    }\n    return shifted_encoded_value;\n  }\n  if ((remaining_bits == 0xffffff9f) && ((encoded_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  encoded_value = encoded_value & 0x80000000;\n  if (encoded_value == 0) {\n    encoded_value = 0x7fffffff;\n  }\n  return encoded_value;\n}\n\n",
            "renaming": {
                "FUN_08001078": "decode_parameter_08001078",
                "param_1": "encoded_value",
                "uVar1": "shifted_encoded_value",
                "uVar2": "remaining_bits"
            },
            "calling": [
                "taskScheduler",
                "Motor_DistributeSpeed",
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "check_param_validity_080010c4",
            "code": "\nuint checkParamValidity_080010c4(uint inputValue)\n\n{\n  uint tempValue;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  tempValue = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)tempValue) {\n    return (inputValue << 8 | 0x80000000) >> (tempValue & 0xff);\n  }\n  if ((tempValue == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "check_param_validity_080010c4",
                "param_1": "inputValue",
                "uVar1": "tempValue"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_system_08001104",
            "code": "\nundefined4 initializeSystem_08001104(undefined4 priority)\n\n{\n  uint systemClock;\n  \n  systemClock = getSystemClockFrequency();\n  configureSysTick(systemClock / 1000);\n  setInterruptPriority(0xffffffff,priority,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_system_08001104",
                "param_1": "priority",
                "uVar1": "systemClock",
                "HAL_RCC_GetHCLKFreq": "getSystemClockFrequency",
                "HAL_SYSTICK_Config": "configureSysTick",
                "HAL_NVIC_SetPriority": "setInterruptPriority"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_hal_components_08001128",
            "code": "\n\n\nundefined4 initialize_HAL_components_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_priority_grouping(3);\n  initialize_tick(0);\n  initialize_HAL_peripherals();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_hal_components_08001128",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "HAL_InitTick": "initialize_tick",
                "HAL_MspInit": "initialize_HAL_peripherals"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "micros",
                "HAL_I2C_Mem_Read",
                "serialWrite",
                "HAL_RCC_OscConfig",
                "millis",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "delay_ms"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "set_bitmask_08001170",
            "code": "\n\n\nvoid setBitmask_08001170(uint input)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (input & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "set_bitmask_08001170",
                "param_1": "input"
            },
            "calling": [
                "HAL_MspInit",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "set_memory_value_08001194",
            "code": "\n\n\nvoid setMemoryValue_08001194(uint address,uint value1,uint value2)\n\n{\n  undefined memoryValue;\n  uint shiftAmount;\n  uint bitMask1;\n  uint bitMask2;\n  \n  bitMask1 = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - bitMask1;\n  bitMask2 = bitMask1 + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (bitMask2 < 7) {\n    bitMask1 = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < bitMask2) {\n    bitMask1 = bitMask1 - 3;\n  }\n  memoryValue = (undefined)\n          ((value2 & (1 << (bitMask1 & 0xff)) - 1U | (value1 & shiftAmount) << (bitMask1 & 0xff)) << 4);\n  if (-1 < (int)address) {\n    bitMask1 = address + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    bitMask1 = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(bitMask1 + 0x300) = memoryValue;\n  }\n  else {\n    *(undefined *)(shiftAmount + bitMask1) = memoryValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "set_memory_value_08001194",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "memoryValue",
                "uVar2": "shiftAmount",
                "uVar3": "bitMask1",
                "uVar4": "bitMask2"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config",
                "HAL_UART_MspInit",
                "HAL_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid setBitInArray_080011fc(uint bitIndex)\n\n{\n  *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bitIndex"
            },
            "calling": [
                "HAL_UART_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "check_input_range_08001214",
            "code": "\n\n\nundefined4 check_input_range_08001214(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "check_input_range_08001214",
                "param_1": "input_value"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_08001240",
            "code": "\n\n\nvoid set_flag_08001240(int flag)\n\n{\n  if (flag == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "flag"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "process_flags_08001264",
            "code": "\n\n\nvoid processFlags_08001264(uint *outputFlags,uint *inputFlags)\n\n{\n  uint output;\n  uint bit;\n  uint opcode;\n  int index;\n  uint i;\n  uint mask;\n  uint constant;\n  uint *target;\n  int shift;\n  \n  output = 0;\n  i = 0;\n  do {\n    mask = 1 << (i & 0xff);\n    bit = mask & *inputFlags;\n    if (mask == bit) {\n      opcode = inputFlags[1];\n      if (opcode == 0x12) {\n        output = inputFlags[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          output = inputFlags[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_080013be;\n          if (opcode == 1) {\n            output = inputFlags[3];\n          }\n        }\n        else if (opcode == 3) {\n          output = 0;\n        }\n        else if (opcode == 0x11) {\n          output = inputFlags[3] + 4;\n        }\n      }\n      else {\n        if (opcode != 0x10210000) {\n          if (opcode < 0x10210001) {\n            if (opcode != 0x10110000) {\n              constant = 0x10120000;\nLAB_080013b8:\n              if (opcode != constant) goto LAB_080012a8;\n            }\n          }\n          else if ((opcode != 0x10310000) && (opcode != 0x10320000)) {\n            constant = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        output = inputFlags[2];\n        if (output == 0) {\n          output = 4;\n        }\n        else {\n          if (output == 1) {\n            outputFlags[4] = mask;\n          }\n          if (output != 1) {\n            outputFlags[5] = mask;\n          }\n          output = 8;\n        }\n      }\nLAB_080012a8:\n      if (bit < 0x100) {\n        mask = *outputFlags;\n        opcode = i << 2;\n        target = outputFlags;\n      }\n      else {\n        mask = outputFlags[1];\n        opcode = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < bit) {\n        target = outputFlags + 1;\n      }\n      *target = mask & ~(0xf << (opcode & 0xff)) | output << (opcode & 0xff);\n      target = (uint *)inputFlags[1];\n      if (((uint)target & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift = (i & 3) << 2;\n        if (outputFlags == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (outputFlags == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (outputFlags == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (outputFlags == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             index << shift | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << shift);\n        if (((uint)target & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit;\n        }\n        if (((uint)target & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit;\n        }\n        if (((uint)target & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit;\n        }\n        if (((uint)target & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit;\n        }\n        else {\n          _DAT_4001040c = bit | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "process_flags_08001264",
                "param_1": "outputFlags",
                "param_2": "inputFlags",
                "uVar1": "output",
                "uVar2": "bit",
                "uVar3": "opcode",
                "iVar4": "index",
                "uVar5": "i",
                "uVar6": "mask",
                "uVar7": "constant",
                "unaff_r10": "target",
                "iVar8": "shift"
            },
            "calling": [
                "Peripherals_Init",
                "HAL_UART_MspInit",
                "HAL_TIM_MspPostInit",
                "HAL_I2C_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int destination_address,int new_value,int flag)\n\n{\n  if (flag == 0) {\n    new_value = new_value << 0x10;\n  }\n  *(int *)(destination_address + 0x10) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "destination_address",
                "param_2": "new_value",
                "param_3": "flag"
            },
            "calling": [
                "Peripherals_Init",
                "toggleLED",
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "combine_param_with_xor_0800142e",
            "code": "\nvoid combineParamWithXOR_0800142e(int inputAddress,uint xorValue)\n\n{\n  *(uint *)(inputAddress + 0xc) = xorValue ^ *(uint *)(inputAddress + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "combine_param_with_xor_0800142e",
                "param_1": "inputAddress",
                "param_2": "xorValue"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_and_modify_flags_08001436",
            "code": "\nundefined4 checkAndModifyFlags_08001436(int *inputPtr)\n\n{\n  int value;\n  \n  value = *inputPtr;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    outputValue = 4;\n    *(undefined *)((int)inputPtr + 0x35) = 0x20;\n    *(undefined *)(inputPtr + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_and_modify_flags_08001436",
                "param_1": "inputPtr",
                "iVar1": "value",
                "param_1[0xe]": "outputValue"
            },
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_data_validity_08001460",
            "code": "\nundefined4 checkDataValidity_08001460(uint **data,uint flag,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint value;\n  uint *dataArray;\n  \n  startTime = HAL_GetTick();\n  do {\n    dataArray = *data;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = dataArray[5];\n    }\n    else {\n      value = dataArray[6];\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(dataArray[5] << 0x15) < 0) {\n      *dataArray = *dataArray | 0x200;\n      dataArray[5] = dataArray[5] & 0xfffffbff;\n      data[0xe] = (uint *)0x4;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout))));\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_data_validity_08001460",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "value",
                "puVar4": "dataArray"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_i2_c_acknowledgement_080014e2",
            "code": "\nundefined4 checkI2CAcknowledgement_080014e2(int *i2cPointer,uint timeout)\n\n{\n  int startTime;\n  int acknowledgeFailed;\n  \n  startTime = HAL_GetTick();\n  while( true ) {\n    if (*(int *)(*i2cPointer + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    acknowledgeFailed = I2C_IsAcknowledgeFailed(i2cPointer);\n    if (acknowledgeFailed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (acknowledgeFailed = HAL_GetTick(), timeout < (uint)(acknowledgeFailed - startTime))))) {\n      i2cPointer[0xe] = i2cPointer[0xe] | 0x20;\n      *(undefined *)((int)i2cPointer + 0x35) = 0x20;\n      *(undefined *)(i2cPointer + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_i2_c_acknowledgement_080014e2",
                "param_1": "i2cPointer",
                "param_2": "timeout",
                "iVar1": "startTime",
                "iVar2": "acknowledgeFailed"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "process_i2_c_transactions_08001530",
            "code": "\nundefined4 processI2CTransactions_08001530(uint **i2cTransaction,uint registerAddress,uint data,int isSingleByte,uint timeout)\n\n{\n  int startTick;\n  int currentTick;\n  uint *transactionPtr;\n  uint **transactionPtrPtr;\n  uint registerAddressValue;\n  uint dataValue;\n  \n  **i2cTransaction = **i2cTransaction | 0x100;\n  transactionPtrPtr = i2cTransaction;\n  registerAddressValue = registerAddress;\n  dataValue = data;\n  startTick = HAL_GetTick();\n  do {\n    transactionPtr = *i2cTransaction;\n    do {\n      if ((int)(transactionPtr[5] << 0x1f) < 0) {\n        transactionPtr[4] = registerAddress & 0xfe;\n        startTick = I2C_WaitOnMasterAddressFlagUntilTimeout\n                          (i2cTransaction,0x10002,timeout,transactionPtr,transactionPtrPtr,registerAddressValue,dataValue);\n        if (startTick == 0) {\n          startTick = I2C_WaitOnTXEFlagUntilTimeout(i2cTransaction,timeout,(*i2cTransaction)[5],(*i2cTransaction)[6]);\n          if (startTick == 0) {\n            transactionPtr = *i2cTransaction;\n            if (isSingleByte == 1) {\nLAB_080015ca:\n              transactionPtr[4] = data & 0xff;\n              return 0;\n            }\n            transactionPtr[4] = data >> 8;\n            startTick = I2C_WaitOnTXEFlagUntilTimeout(i2cTransaction,timeout);\n            if (startTick == 0) {\n              transactionPtr = *i2cTransaction;\n              goto LAB_080015ca;\n            }\n          }\n          if (i2cTransaction[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **i2cTransaction = **i2cTransaction | 0x200;\n        }\n        else if (i2cTransaction[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (timeout == 0xffffffff);\n    if ((timeout == 0) || (currentTick = HAL_GetTick(), timeout < (uint)(currentTick - startTick))) {\n      *(undefined *)((int)i2cTransaction + 0x35) = 0x20;\n      *(undefined *)(i2cTransaction + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "process_i2_c_transactions_08001530",
                "param_1": "i2cTransaction",
                "param_2": "registerAddress",
                "param_3": "data",
                "param_4": "isSingleByte",
                "param_5": "timeout",
                "iVar1": "startTick",
                "iVar2": "currentTick",
                "puVar3": "transactionPtr",
                "ppuVar4": "transactionPtrPtr",
                "uVar5": "registerAddressValue",
                "uVar6": "dataValue"
            },
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "transmit_data_080015e8",
            "code": "\nundefined4 transmitData_080015e8(uint **dataPointer,uint address,uint value,int byteMode,uint timeout)\n\n{\n  int startTick;\n  int currentTick;\n  uint *currentState;\n  uint **dataPointerPointer;\n  uint addressMask;\n  uint valueMask;\n  \n  currentState = *dataPointer;\n  *currentState = *currentState | 0x400;\n  *currentState = *currentState | 0x100;\n  dataPointerPointer = dataPointer;\n  addressMask = address;\n  valueMask = value;\n  startTick = HAL_GetTick();\nLAB_0800160e:\n  currentState = *dataPointer;\n  while (-1 < (int)(currentState[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  currentState[4] = address & 0xfe;\n  startTick = I2C_WaitOnMasterAddressFlagUntilTimeout\n                    (dataPointer,0x10002,timeout,currentState,dataPointerPointer,addressMask,valueMask);\n  if (startTick != 0) goto LAB_080016ba;\n  startTick = I2C_WaitOnTXEFlagUntilTimeout(dataPointer,timeout,(*dataPointer)[5],(*dataPointer)[6]);\n  if (startTick == 0) {\n    currentState = *dataPointer;\n    if (byteMode != 1) {\n      currentState[4] = value >> 8;\n      startTick = I2C_WaitOnTXEFlagUntilTimeout(dataPointer,timeout);\n      if (startTick != 0) goto LAB_08001642;\n      currentState = *dataPointer;\n    }\n    currentState[4] = value & 0xff;\n    startTick = I2C_WaitOnTXEFlagUntilTimeout(dataPointer,timeout);\n    if (startTick == 0) {\n      **dataPointer = **dataPointer | 0x100;\n      startTick = HAL_GetTick();\n      do {\n        do {\n          if ((int)((*dataPointer)[5] << 0x1f) < 0) {\n            (*dataPointer)[4] = address & 0xff | 1;\n            startTick = I2C_WaitOnMasterAddressFlagUntilTimeout(dataPointer,0x10002,timeout);\n            if (startTick == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (dataPointer[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTick = HAL_GetTick(), (uint)(currentTick - startTick) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (dataPointer[0xe] == (uint *)0x4) {\n    **dataPointer = **dataPointer | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (currentTick = HAL_GetTick(), timeout < (uint)(currentTick - startTick))) goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "transmit_data_080015e8",
                "param_1": "dataPointer",
                "param_2": "address",
                "param_3": "value",
                "param_4": "byteMode",
                "param_5": "timeout",
                "iVar1": "startTick",
                "iVar2": "currentTick",
                "puVar3": "currentState",
                "ppuVar4": "dataPointerPointer",
                "uVar5": "addressMask",
                "uVar6": "valueMask"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_status_080016f4",
            "code": "\nundefined4 checkStatus_080016f4(int *data,uint timeout)\n\n{\n  int startTicks;\n  int currentTicks;\n  \n  startTicks = HAL_GetTick();\n  while( true ) {\n    currentTicks = *data;\n    if ((*(uint *)(currentTicks + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentTicks + 0x14) << 0x1b < 0) break;\n    if ((timeout == 0) || (currentTicks = HAL_GetTick(), timeout < (uint)(currentTicks - startTicks))) {\n      data[0xe] = data[0xe] | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentTicks + 0x14) = *(uint *)(currentTicks + 0x14) & 0xffffffef;\n  data[0xe] = 0;\n  *(undefined *)(data + 0xd) = 0;\n  *(undefined *)((int)data + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_status_080016f4",
                "param_1": "data",
                "param_2": "timeout",
                "iVar1": "startTicks",
                "iVar2": "currentTicks"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_i2_c_08001754",
            "code": "\nundefined4 initializeI2C_08001754(uint **paramList)\n\n{\n  uint var1;\n  uint var2;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr5;\n  uint var6;\n  undefined8 var7;\n  \n  if (paramList != (uint **)0x0) {\n    if (*(char *)((int)paramList + 0x35) == '\\0') {\n      *(undefined *)(paramList + 0xd) = 0;\n      HAL_I2C_MspInit();\n    }\n    *(undefined *)((int)paramList + 0x35) = 0x24;\n    **paramList = **paramList & 0xfffffffe;\n    var7 = HAL_RCC_GetPCLK1Freq();\n    var2 = (uint)((ulonglong)var7 >> 0x20);\n    var1 = (uint)var7;\n    ptr4 = paramList[1];\n    var6 = var1 / 1000000;\n    if ((uint *)0x186a0 < ptr4) {\n      var2 = 300;\n    }\n    ptr3 = *paramList;\n    if ((uint *)0x186a0 < ptr4) {\n      var2 = var6 * var2;\n    }\n    ptr3[1] = var6;\n    if ((uint *)0x186a0 < ptr4) {\n      var6 = var2 / 1000;\n    }\n    ptr3[8] = var6 + 1;\n    if (ptr4 < (uint *)0x186a1) {\n      var1 = var1 / (uint)((int)ptr4 << 1);\n      if ((var1 & 0xfff) < 4) {\n        var1 = 4;\n      }\n    }\n    else {\n      if (paramList[2] == (uint *)0x0) {\n        var1 = var1 / (uint)((int)ptr4 * 3) | 0x8000;\n      }\n      else {\n        var1 = var1 / (uint)((int)ptr4 * 0x19) | 0xc000;\n      }\n      if ((var1 & 0xfff) == 0) {\n        var1 = 1;\n      }\n    }\n    ptr4 = paramList[8];\n    ptr5 = paramList[7];\n    ptr3[7] = var1;\n    *ptr3 = (uint)ptr5 | (uint)ptr4;\n    ptr3[2] = (uint)paramList[4] | (uint)paramList[3];\n    ptr3[3] = (uint)paramList[5] | (uint)paramList[6];\n    *ptr3 = *ptr3 | 1;\n    paramList[0xe] = (uint *)0x0;\n    *(undefined *)((int)paramList + 0x35) = 0x20;\n    *(undefined *)((int)paramList + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_i2_c_08001754",
                "param_1": "paramList",
                "uVar1": "var1",
                "uVar2": "var2",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "puVar5": "ptr5",
                "uVar6": "var6",
                "uVar7": "var7"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "transmit_data_08001828",
            "code": "\nundefined4\ntransmitData_08001828(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,byte *buffer,\n            short length,undefined4 param7)\n\n{\n  int startTime;\n  int currentTime;\n  uint *dataPtr;\n  uint value;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (buffer == (byte *)0x0) {\n      return 1;\n    }\n    if (length == 0) {\n      return 1;\n    }\n    startTime = HAL_GetTick();\n    do {\n      dataPtr = *data;\n      if ((~dataPtr[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        value = *dataPtr;\n        *(undefined *)(data + 0xd) = 1;\n        *dataPtr = value & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        startTime = requestMemoryWrite(data,param2,param3,param4,param7);\n        if (startTime != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto transmitLoopExit;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (length != 0) {\ntransmitLoopExit:\n    startTime = waitOnTXEFlagUntilTimeout(data,param7);\n    if (startTime != 0) goto errorExit;\n    dataPtr = *data;\n    dataPtr[4] = (uint)*buffer;\n    if ((int)(dataPtr[5] << 0x1d) < 0) {\n      if ((short)(length + -1) == 0) break;\n      length = length + -2;\n      dataPtr[4] = (uint)buffer[1];\n      buffer = buffer + 2;\n    }\n    else {\n      buffer = buffer + 1;\n      length = length + -1;\n    }\n  }\n  startTime = waitOnTXEFlagUntilTimeout(data,param7);\n  if (startTime == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nerrorExit:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "transmit_data_08001828",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "buffer",
                "param_6": "length",
                "param_7": "param7",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "puVar3": "dataPtr",
                "uVar4": "value",
                "I2C_RequestMemoryWrite": "requestMemoryWrite",
                "I2C_WaitOnTXEFlagUntilTimeout": "waitOnTXEFlagUntilTimeout",
                "LAB_080018e2": "transmitLoopExit",
                "LAB_080018ee": "errorExit"
            },
            "calling": [
                "I2C_WriteByte"
            ],
            "called": [
                "I2C_RequestMemoryWrite",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "perform_memory_read_08001938",
            "code": "\nundefined4\nperformMemoryRead_08001938(uint **data,undefined4 arg1,undefined4 arg2,undefined4 arg3,\n            undefined *buffer,ushort size,uint timeout)\n\n{\n  undefined *ptr;\n  int startTime;\n  int currentTime;\n  uint *dataPtr;\n  uint value;\n  undefined *bufferPtr;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (buffer == (undefined *)0x0) {\n    return 1;\n  }\n  if (size == 0) {\n    return 1;\n  }\n  startTime = HAL_GetTick();\n  while (dataPtr = *data, (~dataPtr[6] & 2) == 0) {\n    currentTime = HAL_GetTick();\n    if (10000 < (uint)(currentTime - startTime)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *dataPtr;\n  *(undefined *)(data + 0xd) = 1;\n  *dataPtr = value & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  startTime = I2C_RequestMemoryRead(data,arg1,arg2,arg3,timeout);\n  if (startTime != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  dataPtr = *data;\n  value = *dataPtr;\n  if (size == 1) {\n    *dataPtr = value & 0xfffffbff;\n    disableIRQinterrupts();\n    **data = **data | 0x200;\n    enableIRQinterrupts();\n    startTime = I2C_WaitOnRXNEFlagUntilTimeout(data,timeout);\n    if (startTime == 0) {\n      *buffer = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (size == 2) {\n    *dataPtr = value | 0x800;\n    disableIRQinterrupts();\n    **data = **data & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *dataPtr = value | 0x400;\n    while (3 < size) {\n      startTime = I2C_WaitOnRXNEFlagUntilTimeout(data,timeout);\n      if (startTime != 0) goto LAB_08001a18;\n      *buffer = (char)(*data)[4];\n      dataPtr = *data;\n      flag = (int)(dataPtr[5] << 0x1d) < 0;\n      if (flag) {\n        dataPtr = (uint *)dataPtr[4];\n        bufferPtr = buffer + 2;\n        size = size - 2;\n      }\n      else {\n        bufferPtr = buffer + 1;\n        size = size - 1;\n      }\n      ptr = buffer + 1;\n      buffer = bufferPtr;\n      if (flag) {\n        *ptr = (char)dataPtr;\n      }\n    }\n    if (size != 2) {\n      startTime = HAL_GetTick();\n      do {\n        dataPtr = *data;\n        do {\n          if ((int)(dataPtr[5] << 0x1d) < 0) {\n            *dataPtr = *dataPtr & 0xfffffbff;\n            disableIRQinterrupts();\n            *buffer = (char)(*data)[4];\n            startTime = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  startTime = HAL_GetTick();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        dataPtr = *data;\n        *dataPtr = *dataPtr | 0x200;\n        *buffer = (char)dataPtr[4];\n        enableIRQinterrupts();\n        buffer[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    dataPtr = *data;\n    do {\n      if ((int)(dataPtr[5] << 0x1d) < 0) {\n        *dataPtr = *dataPtr | 0x200;\n        buffer[1] = (char)dataPtr[4];\n        enableIRQinterrupts();\n        buffer[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "perform_memory_read_08001938",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "param_5": "buffer",
                "param_6": "size",
                "param_7": "timeout",
                "puVar1": "ptr",
                "iVar2": "startTime",
                "iVar3": "currentTime",
                "puVar4": "dataPtr",
                "uVar5": "value",
                "puVar6": "bufferPtr",
                "bVar7": "flag"
            },
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "HAL_GetTick",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_status_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 checkStatus_08001b58(int *statusData)\n\n{\n  int tempVar1;\n  int tempVar2;\n  \n  if (*statusData << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (statusData[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      tempVar1 = statusData[1];\n      if (tempVar1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (tempVar1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          tempVar1 = HAL_GetTick();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            tempVar2 = HAL_GetTick();\n            if (100 < (uint)(tempVar2 - tempVar1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (tempVar1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      tempVar1 = HAL_GetTick();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        tempVar2 = HAL_GetTick();\n        if (100 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*statusData << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (statusData[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = statusData[4];\n      if (iRam42420000 == 0) {\n        tempVar1 = HAL_GetTick();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          tempVar2 = HAL_GetTick();\n          if (2 < (uint)(tempVar2 - tempVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      tempVar1 = HAL_GetTick();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        tempVar2 = HAL_GetTick();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = statusData[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*statusData << 0x1c < 0) {\n    iRam42420480 = statusData[6];\n    if (iRam42420480 == 0) {\n      tempVar1 = HAL_GetTick();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        tempVar2 = HAL_GetTick();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      tempVar1 = HAL_GetTick();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        tempVar2 = HAL_GetTick();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n      HAL_Delay(1);\n    }\n  }\n  if (-1 < *statusData << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  tempVar1 = HAL_GetTick();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    tempVar2 = HAL_GetTick();\n    if (100 < (uint)(tempVar2 - tempVar1)) {\n      return 3;\n    }\n  }\n  tempVar1 = statusData[3];\n  if (tempVar1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (tempVar1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      tempVar1 = HAL_GetTick();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        tempVar2 = HAL_GetTick();\n        if (5000 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (tempVar1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  tempVar1 = HAL_GetTick();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    tempVar2 = HAL_GetTick();\n    if (5000 < (uint)(tempVar2 - tempVar1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (statusData[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (statusData[7] != 2) {\n      uRam42420060 = 0;\n      tempVar1 = HAL_GetTick();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        tempVar2 = HAL_GetTick();\n      } while ((uint)(tempVar2 - tempVar1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    tempVar1 = HAL_GetTick();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (statusData[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | statusData[2];\n        }\n        _DAT_40021004 = statusData[8] | statusData[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        tempVar1 = HAL_GetTick();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          tempVar2 = HAL_GetTick();\n        } while ((uint)(tempVar2 - tempVar1) < 3);\n        return 3;\n      }\n      tempVar2 = HAL_GetTick();\n    } while ((uint)(tempVar2 - tempVar1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_status_08001b58",
                "param_1": "statusData",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu_clock_freq_08002008",
            "code": "\n\n\nint calculateMpuClockFreq_08002008(void)\n\n{\n  undefined4 value1;\n  int clockFreq;\n  undefined4 value2;\n  undefined4 *dataPtr;\n  uint divider;\n  undefined4 *destPtr;\n  byte flags [4];\n  undefined4 dataArray [5];\n  \n  dataPtr = &DAT_080072f0;\n  destPtr = dataArray;\n  do {\n    value1 = *dataPtr;\n    value2 = dataPtr[1];\n    dataPtr = dataPtr + 2;\n    *destPtr = value1;\n    destPtr[1] = value2;\n    destPtr = destPtr + 2;\n  } while (dataPtr != (undefined4 *)\"../Src/MPU9250.c\");\n  flags[0] = 1;\n  flags[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      divider = 8000000 / flags[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      divider = 4000000;\n    }\n    clockFreq = divider * *(byte *)((int)dataArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockFreq = 8000000;\n  }\n  return clockFreq;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu_clock_freq_08002008",
                "uVar1": "value1",
                "iVar2": "clockFreq",
                "uVar3": "value2",
                "puVar4": "dataPtr",
                "uVar5": "divider",
                "puVar6": "destPtr",
                "local_24": "flags",
                "local_20": "dataArray"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "initialize_system_0800209c",
            "code": "\n\n\nundefined4 initializeSystem_0800209c(uint *configParams,uint paramFlag)\n\n{\n  char isFlagSet;\n  char isFlagClear;\n  int shiftedBitCount;\n  uint configValue;\n  int currentTick;\n  uint shiftedValue;\n  \n  if ((paramFlag <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | paramFlag, paramFlag == (paramFlag & 7))) {\n    if ((int)(*configParams << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | configParams[2];\n    }\n    shiftedBitCount = *configParams << 0x1f;\n    if (-1 < shiftedBitCount) {\nLAB_080020ba:\n      if ((paramFlag < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | paramFlag, paramFlag != (paramFlag & 7))) {\n        return 1;\n      }\n      if ((*configParams & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | configParams[3];\n      }\n      if ((int)(*configParams << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | configParams[4] << 3;\n      }\n      configValue = HAL_RCC_GetSysClockFreq();\n      DAT_200001bc = configValue >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      HAL_InitTick(0);\n      return 0;\n    }\n    configValue = configParams[1];\n    if (configValue == 1) {\n      isFlagClear = '\\x01';\n      isFlagSet = '\\0';\n    }\n    else {\n      shiftedValue = _DAT_40021000;\n      if (configValue == 2) goto LAB_08002176;\n      isFlagClear = '\\0';\n      isFlagSet = '\\x01';\n    }\n    shiftedValue = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(isFlagSet << 6) << 0x18 | (uint)(byte)(isFlagClear << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shiftedValue < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | configValue;\n      shiftedBitCount = HAL_GetTick(shiftedBitCount,shiftedValue);\n      if (configParams[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - shiftedBitCount) < 0x1389);\n      }\n      else if (configParams[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - shiftedBitCount) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - shiftedBitCount) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "initialize_system_0800209c",
                "param_1": "configParams",
                "param_2": "paramFlag",
                "cVar1": "isFlagSet",
                "cVar2": "isFlagClear",
                "iVar3": "shiftedBitCount",
                "uVar4": "configValue",
                "iVar5": "currentTick",
                "uVar6": "shiftedValue"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_from_memory_08002214",
            "code": "\nundefined4 get_data_from_memory_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_from_memory_08002214"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "extracted_value_from_binary_08002220",
            "code": "\n\n\nuint extractedValueFromBinary_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "extracted_value_from_binary_08002220"
            },
            "calling": [
                "HAL_I2C_Init",
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "retrieve_shifted_data_08002250",
            "code": "\n\n\nuint retrieveShiftedData_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "retrieve_shifted_data_08002250"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_param_values_08002280",
            "code": "\nvoid updateParamValues_08002280(int param_address,uint *param_values)\n\n{\n  uint updated_value;\n  uint value1;\n  uint value2;\n  \n  *(uint *)(param_address + 0x20) = *(uint *)(param_address + 0x20) & 0xfffffffe;\n  value1 = *(uint *)(param_address + 4);\n  value2 = *param_values;\n  updated_value = *(uint *)(param_address + 0x20) & 0xfffffffd | param_values[2];\n  if (param_address == 0x40012c00) {\n    updated_value = (updated_value & 0xfffffff7 | param_values[3]) & 0xfffffffb;\n    value1 = value1 & 0xfffffcff | param_values[5] | param_values[6];\n  }\n  *(uint *)(param_address + 4) = value1;\n  *(uint *)(param_address + 0x18) = *(uint *)(param_address + 0x18) & 0xffffff8c | value2;\n  *(uint *)(param_address + 0x34) = param_values[1];\n  *(uint *)(param_address + 0x20) = updated_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_param_values_08002280",
                "param_1": "param_address",
                "param_2": "param_values",
                "uVar1": "updated_value",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_registers_080022d0",
            "code": "\nvoid updateRegisters_080022d0(int register_address,uint *parameters)\n\n{\n  uint modified_register1;\n  uint modified_register2;\n  uint modified_register3;\n  \n  *(uint *)(register_address + 0x20) = *(uint *)(register_address + 0x20) & 0xfffffeff;\n  modified_register2 = *(uint *)(register_address + 4);\n  modified_register3 = *parameters;\n  modified_register1 = *(uint *)(register_address + 0x20) & 0xfffffdff | parameters[2] << 8;\n  if (register_address == 0x40012c00) {\n    modified_register1 = (modified_register1 & 0xfffff7ff | parameters[3] << 8) & 0xfffffbff;\n    modified_register2 = modified_register2 & 0xffffcfff | (parameters[5] | parameters[6]) << 4;\n  }\n  *(uint *)(register_address + 4) = modified_register2;\n  *(uint *)(register_address + 0x1c) = *(uint *)(register_address + 0x1c) & 0xffffff8c | modified_register3;\n  *(uint *)(register_address + 0x3c) = parameters[1];\n  *(uint *)(register_address + 0x20) = modified_register1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_registers_080022d0",
                "param_1": "register_address",
                "param_2": "parameters",
                "uVar1": "modified_register1",
                "uVar2": "modified_register2",
                "uVar3": "modified_register3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_parameters_08002324",
            "code": "\nvoid update_parameters_08002324(int base_address,int *parameters)\n\n{\n  uint flags;\n  int value1;\n  int value2;\n  int constant_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  flags = *(uint *)(base_address + 4);\n  value1 = *parameters;\n  value2 = parameters[2];\n  constant_value = 0x40012c00;\n  if (base_address == 0x40012c00) {\n    constant_value = parameters[5];\n    flags = flags & 0xffffbfff;\n  }\n  if (base_address == 0x40012c00) {\n    flags = flags | constant_value << 6;\n  }\n  *(uint *)(base_address + 4) = flags;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(base_address + 0x40) = parameters[1];\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_parameters_08002324",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "flags",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "constant_value"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_values_08002368",
            "code": "\nvoid updateMemoryValues_08002368(uint *memoryBlock,uint *newValues)\n\n{\n  uint modifiedValue;\n  \n  modifiedValue = *memoryBlock;\n  if (((((memoryBlock == (uint *)0x40012c00) || (memoryBlock == (uint *)0x40000000)) ||\n       (memoryBlock == (uint *)0x40000400)) || (memoryBlock == (uint *)0x40000800)) &&\n     (((modifiedValue = modifiedValue & 0xffffff8f | newValues[1], memoryBlock == (uint *)0x40012c00 ||\n       (memoryBlock == (uint *)0x40000000)) ||\n      ((memoryBlock == (uint *)0x40000400 || (memoryBlock == (uint *)0x40000800)))))) {\n    modifiedValue = modifiedValue & 0xfffffcff | newValues[3];\n  }\n  *memoryBlock = modifiedValue;\n  memoryBlock[0xb] = newValues[2];\n  memoryBlock[10] = *newValues;\n  modifiedValue = 0x40012c00;\n  if (memoryBlock == (uint *)0x40012c00) {\n    modifiedValue = newValues[4];\n  }\n  if (memoryBlock == (uint *)0x40012c00) {\n    memoryBlock[0xc] = modifiedValue;\n  }\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_values_08002368",
                "param_1": "memoryBlock",
                "param_2": "newValues",
                "uVar1": "modifiedValue"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_pwm_timer_080023d0",
            "code": "\nundefined4 initialize_pwm_timer_080023d0(undefined4 *config_ptr)\n\n{\n  if (config_ptr != (undefined4 *)0x0) {\n    if (*(char *)((int)config_ptr + 0x39) == '\\0') {\n      *(undefined *)(config_ptr + 0xe) = 0;\n      initialize_pwm_peripherals();\n    }\n    *(undefined *)((int)config_ptr + 0x39) = 2;\n    set_timer_configuration(*config_ptr,config_ptr + 1);\n    *(undefined *)((int)config_ptr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_pwm_timer_080023d0",
                "param_1": "config_ptr",
                "HAL_TIM_PWM_MspInit": "initialize_pwm_peripherals",
                "TIM_Base_SetConfig": "set_timer_configuration"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_params_08002404",
            "code": "\nvoid updateParams_08002404(int baseAddress,int *paramsArray)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int paramValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(baseAddress + 4);\n  paramValue = *paramsArray;\n  updatedValue1 = *(uint *)(baseAddress + 0x20) & 0xffffffdf | param2Value1 << 4;\n  if (baseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | param2Value2 << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | (param2Value3 | param2Value4) << 2;\n  }\n  *(uint *)(baseAddress + 4) = updatedValue2;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffff8cff | paramValue << 8;\n  *(int *)(baseAddress + 0x38) = paramsArray[1];\n  *(uint *)(baseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_params_08002404",
                "param_1": "baseAddress",
                "param_2": "paramsArray",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "paramValue",
                "param_2[2]": "param2Value1",
                "param_2[3]": "param2Value2",
                "param_2[5]": "param2Value3",
                "param_2[6]": "param2Value4"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_tim_config_0800245c",
            "code": "\nvoid updateTimConfig_0800245c(int *timConfig,undefined4 param2,undefined4 configType)\n\n{\n  int tempVar1;\n  int tempVar2;\n  int tempVar3;\n  int tempVar4;\n  int var1;\n  uint var2;\n  int var3;\n  \n  if (*(char *)(timConfig + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)timConfig + 0x39) = 2;\n  *(undefined *)(timConfig + 0xe) = 1;\n  switch(configType) {\n  case 0:\n    TIM_OC1_SetConfig(*timConfig);\n    var3 = *timConfig;\n    var2 = *(uint *)(tempVar1 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 8;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffffb;\n    var2 = *(uint *)(var3 + 0x18) | var2;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    TIM_OC2_SetConfig(*timConfig);\n    var3 = *timConfig;\n    var1 = *(int *)(tempVar2 + 0x10);\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) | 0x800;\n    *(uint *)(var3 + 0x18) = *(uint *)(var3 + 0x18) & 0xfffffbff;\n    var2 = *(uint *)(var3 + 0x18) | var1 << 8;\n    break;\n  case 8:\n    TIM_OC3_SetConfig(*timConfig);\n    var3 = *timConfig;\n    var2 = *(uint *)(tempVar3 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 8;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffffb;\n    var2 = *(uint *)(var3 + 0x1c) | var2;\n    goto LAB_080024fa;\n  case 0xc:\n    TIM_OC4_SetConfig(*timConfig);\n    var3 = *timConfig;\n    var1 = *(int *)(tempVar4 + 0x10);\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) | 0x800;\n    *(uint *)(var3 + 0x1c) = *(uint *)(var3 + 0x1c) & 0xfffffbff;\n    var2 = *(uint *)(var3 + 0x1c) | var1 << 8;\nLAB_080024fa:\n    *(uint *)(var3 + 0x1c) = var2;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(var3 + 0x18) = var2;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)timConfig + 0x39) = 1;\n  *(undefined *)(timConfig + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_tim_config_0800245c",
                "param_1": "timConfig",
                "param_2": "param2",
                "param_3": "configType",
                "extraout_r1": "tempVar1",
                "extraout_r1_00": "tempVar2",
                "extraout_r1_01": "tempVar3",
                "extraout_r1_02": "tempVar4",
                "iVar1": "var1",
                "uVar2": "var2",
                "iVar3": "var3"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_OC2_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_value_08002520",
            "code": "\nvoid updateBitValue_08002520(int address,uint bitIndex,int newValue)\n\n{\n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(address + 0x20) = newValue << (bitIndex & 0xff) | *(uint *)(address + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_value_08002520",
                "param_1": "address",
                "param_2": "bitIndex",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "initialize_tim_cc_channel_08002538",
            "code": "\nundefined4 initializeTimCcChannel_08002538(uint **channelConfig,undefined4 command)\n\n{\n  uint defaultValue;\n  uint *channelParams;\n  \n  TIM_CCxChannelCmd(*channelConfig,command,1);\n  channelParams = *channelConfig;\n  defaultValue = 0x40012c00;\n  if (channelParams == (uint *)0x40012c00) {\n    defaultValue = uRam40012c44 | 0x8000;\n  }\n  if (channelParams == (uint *)0x40012c00) {\n    channelParams[0x11] = defaultValue;\n  }\n  *channelParams = *channelParams | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "initialize_tim_cc_channel_08002538",
                "param_1": "channelConfig",
                "param_2": "command",
                "uVar1": "defaultValue",
                "puVar2": "channelParams"
            },
            "calling": [
                "PWM_Init"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "update_flag_and_set_values_08002564",
            "code": "\nundefined4 updateFlagAndSetValues_08002564(int *data,uint *values)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(data + 0xe) != '\\x01') {\n    *(undefined *)((int)data + 0x39) = 2;\n    *(uint *)(*data + 0x44) =\n         *values | values[1] | values[2] | values[3] | values[4] | values[5] | values[6];\n    *(undefined *)((int)data + 0x39) = 1;\n    result = 0;\n    *(undefined *)(data + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002564": "update_flag_and_set_values_08002564",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "result"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_memory_addresses_080025a4",
            "code": "\nundefined4 updateMemoryAddresses_080025a4(int *addressPtr,uint *valuePtr)\n\n{\n  uint value1;\n  undefined4 returnValue;\n  int address;\n  uint value2;\n  \n  returnValue = 2;\n  if (*(char *)(addressPtr + 0xe) != '\\x01') {\n    *(undefined *)((int)addressPtr + 0x39) = 2;\n    address = *addressPtr;\n    value2 = *valuePtr;\n    value1 = valuePtr[1];\n    *(uint *)(address + 4) = *(uint *)(address + 4) & 0xffffff8f;\n    *(uint *)(address + 4) = *(uint *)(address + 4) | value2;\n    *(uint *)(address + 8) = *(uint *)(address + 8) & 0xffffff7f;\n    *(uint *)(address + 8) = *(uint *)(address + 8) | value1;\n    *(undefined *)((int)addressPtr + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(addressPtr + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_memory_addresses_080025a4",
                "param_1": "addressPtr",
                "param_2": "valuePtr",
                "uVar1": "value1",
                "uVar2": "returnValue",
                "iVar3": "address",
                "uVar4": "value2"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_configuration_080025e8",
            "code": "\nvoid updateConfiguration_080025e8(int *config)\n\n{\n  int pclkFreq;\n  int adjustedFreq;\n  uint dividedFreq;\n  int dividedByHundred;\n  int divider;\n  int baseAddress;\n  \n  baseAddress = *config;\n  dividedFreq = config[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | config[3];\n  *(uint *)(baseAddress + 0xc) = config[2] | dividedFreq | config[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | config[6];\n  if (baseAddress == 0x40013800) {\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    dividedByHundred = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    divider = config[1];\n    adjustedFreq = HAL_RCC_GetPCLK2Freq();\n    adjustedFreq = (uint)(pclkFreq * 0x19) / (uint)(divider << 2) +\n            (int)(((ulonglong)(uint)(adjustedFreq * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    dividedFreq = (uint)(pclkFreq * 0x19) / (uint)(config[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    dividedByHundred = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    divider = config[1];\n    adjustedFreq = HAL_RCC_GetPCLK1Freq();\n    adjustedFreq = (uint)(pclkFreq * 0x19) / (uint)(divider << 2) +\n            (int)(((ulonglong)(uint)(adjustedFreq * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    dividedFreq = (uint)(pclkFreq * 0x19) / (uint)(config[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((dividedFreq + (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(config[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (adjustedFreq * 0x10 + 0x32U) / 100 & 0xf0) +\n       dividedByHundred * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_configuration_080025e8",
                "param_1": "config",
                "iVar1": "pclkFreq",
                "iVar2": "adjustedFreq",
                "uVar3": "dividedFreq",
                "iVar4": "dividedByHundred",
                "iVar5": "divider",
                "iVar6": "baseAddress"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_uart_08002724",
            "code": "\nundefined4 initialize_UART_08002724(int *uart_data)\n\n{\n  int uart_ptr;\n  \n  if (uart_data != (int *)0x0) {\n    if (*(char *)((int)uart_data + 0x39) == '\\0') {\n      *(undefined *)(uart_data + 0xe) = 0;\n      HAL_UART_MspInit();\n    }\n    *(undefined *)((int)uart_data + 0x39) = 2;\n    *(uint *)(*uart_data + 0xc) = *(uint *)(*uart_data + 0xc) & 0xffffdfff;\n    UART_SetConfig(uart_data);\n    uart_ptr = *uart_data;\n    *(uint *)(uart_ptr + 0x10) = *(uint *)(uart_ptr + 0x10) & 0xffffb7ff;\n    *(uint *)(uart_ptr + 0x14) = *(uint *)(uart_ptr + 0x14) & 0xffffffd5;\n    *(uint *)(uart_ptr + 0xc) = *(uint *)(uart_ptr + 0xc) | 0x2000;\n    uart_data[0xf] = 0;\n    *(undefined *)((int)uart_data + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_uart_08002724",
                "param_1": "uart_data",
                "iVar1": "uart_ptr"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *data)\n\n{\n  byte byteValue;\n  int address;\n  uint tempVar;\n  undefined4 value;\n  short counter;\n  ushort *shortPtr;\n  ushort *shortPtr2;\n  bool condition;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  address = *data;\n  shortPtr = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      shortPtr2 = shortPtr + 1;\n      *shortPtr = (ushort)((uint)(*(int *)(address + 4) << 0x17) >> 0x17);\n    }\n    else {\n      shortPtr2 = (ushort *)((int)shortPtr + 1);\n      *shortPtr = (ushort)*(int *)(address + 4) & 0xff;\n    }\n    data[10] = (int)shortPtr2;\n  }\n  else {\n    if (data[4] == 0) {\n      byteValue = (byte)*(undefined4 *)(address + 4);\n      data[10] = (int)shortPtr + 1;\n    }\n    else {\n      value = *(undefined4 *)(address + 4);\n      data[10] = (int)shortPtr + 1;\n      byteValue = (byte)value & 0x7f;\n    }\n    *(byte *)shortPtr = byteValue;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter == 0) {\n    address = *data;\n    *(uint *)(address + 0xc) = *(uint *)(address + 0xc) & 0xffffffdf;\n    condition = *(char *)((int)data + 0x39) != '2';\n    if (condition) {\n      tempVar = *(uint *)(address + 0xc) & 0xfffffeff;\n    }\n    else {\n      address = 0x12;\n      tempVar = 0x32;\n    }\n    if (condition) {\n      *(uint *)(address + 0xc) = tempVar;\n      tempVar = *(uint *)(address + 0x14) & 0xfffffffe;\n    }\n    if (condition) {\n      *(uint *)(address + 0x14) = tempVar;\n      address = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)address;\n    HAL_UART_RxCpltCallback();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "byteValue",
                "iVar2": "address",
                "uVar3": "tempVar",
                "uVar4": "value",
                "sVar5": "counter",
                "puVar6": "shortPtr",
                "puVar7": "shortPtr2",
                "bVar8": "condition"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid processData_0800299a(uint **data)\n\n{\n  uint firstElement;\n  short counter;\n  uint value1;\n  uint *pointer1;\n  undefined condition;\n  uint *ptrData;\n  uint flag;\n  bool checkFlag;\n  \n  ptrData = *data;\n  value1 = *ptrData;\n  firstElement = ptrData[3];\n  if ((value1 & 0xf) == 0) {\n    if (((int)(value1 << 0x1a) < 0) && ((int)(firstElement << 0x1a) < 0)) {\n      UART_Receive_IT();\n      return;\n    }\n  }\n  else {\n    flag = ptrData[5] & 1;\n    if ((flag != 0) || ((firstElement & 0x120) != 0)) {\n      ptrData = (uint *)(value1 << 0x1f);\n      if ((int)ptrData < 0) {\n        checkFlag = (int)(firstElement << 0x17) < 0;\n        if (checkFlag) {\n          ptrData = (uint *)((uint)data[0xf] | 1);\n        }\n        if (checkFlag) {\n          data[0xf] = ptrData;\n        }\n      }\n      if (((int)(value1 << 0x1d) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value1 << 0x1e) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value1 << 0x1c) < 0) && (flag != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value1 << 0x1a) < 0) && ((int)(firstElement << 0x1a) < 0)) {\n        UART_Receive_IT(data);\n      }\n      ptrData = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((ptrData[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      ptrData[3] = ptrData[3] & 0xfffffedf;\n      ptrData[5] = ptrData[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      HAL_UART_ErrorCallback(data);\n      return;\n    }\n  }\n  if (((int)(value1 << 0x18) < 0) && ((int)(firstElement << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer1 = data[8];\n      if (data[2] == (uint *)0x1000) {\n        ptrData[1] = *(ushort *)pointer1 & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointer1 = (uint *)((int)pointer1 + 2);\n        }\n        else {\n          pointer1 = (uint *)((int)pointer1 + 1);\n        }\n        data[8] = pointer1;\n      }\n      else {\n        data[8] = (uint *)((int)pointer1 + 1);\n        ptrData[1] = (uint)*(byte *)pointer1;\n      }\n      counter = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = counter;\n      if (counter == 0) {\n        ptrData[3] = ptrData[3] & 0xffffff7f;\n        ptrData[3] = ptrData[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value1 << 0x19) < 0) && ((int)(firstElement << 0x19) < 0)) {\n    ptrData[3] = ptrData[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      condition = 0x22;\n    }\n    else {\n      condition = 1;\n    }\n    *(undefined *)((int)data + 0x39) = condition;\n    HAL_UART_TxCpltCallback(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "firstElement",
                "sVar2": "counter",
                "uVar3": "value1",
                "puVar4": "pointer1",
                "uVar5": "condition",
                "puVar6": "ptrData",
                "uVar7": "flag",
                "bVar8": "checkFlag"
            },
            "calling": [],
            "called": [
                "UART_Receive_IT",
                "HAL_UART_TxCpltCallback",
                "HAL_UART_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  readByteFromI2C(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  writeByteToI2C(0xd0,0x6b,0x80,1);\n  writeByteToI2C(0xd0,0x6b,1);\n  writeByteToI2C(0xd0,0x6c,0,1);\n  writeByteToI2C(0xd0,0x19,0,1);\n  writeByteToI2C(0xd0,0x1d,3,1);\n  writeByteToI2C(0xd0,0x1a,3,1);\n  writeByteToI2C(0xd0,0x1b,0x10,1);\n  writeByteToI2C(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "I2C_ReadByte": "readByteFromI2C",
                "I2C_WriteByte": "writeByteToI2C"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "read_and_process_sensor_data_08002b48",
            "code": "\nvoid readAndProcessSensorData_08002b48(void)\n\n{\n  undefined4 uVar1;\n  uint sensorData;\n  int integerVar1;\n  int integerVar2;\n  undefined4 readBuffer;\n  undefined4 mask;\n  \n  readBuffer = 0;\n  mask = sensorData & 0xffff0000;\n  I2C_ReadByteArray(0xd0,0x3b,&readBuffer,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(readBuffer._2_1_,readBuffer._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)readBuffer,readBuffer._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)mask,mask._1_1_);\n  integerVar2 = (int)DAT_200002f6;\n  integerVar1 = (int)DAT_200002f8;\n  uVar1 = __floatsisf();\n  uVar1 = __aeabi_fmul(uVar1,0x40800000);\n  DAT_200002d0 = __aeabi_fmul(uVar1,0x38000000);\n  uVar1 = __floatsisf(integerVar2);\n  uVar1 = __aeabi_fmul(uVar1,0x40800000);\n  DAT_200002d4 = __aeabi_fmul(uVar1,0x38000000);\n  uVar1 = __floatsisf(integerVar1);\n  uVar1 = __aeabi_fmul(uVar1,0x40800000);\n  DAT_200002d8 = __aeabi_fmul(uVar1,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "read_and_process_sensor_data_08002b48",
                "in_r3": "sensorData",
                "iVar2": "integerVar1",
                "iVar3": "integerVar2",
                "local_18": "readBuffer",
                "local_14": "mask"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_sensor_data_08002bf0",
            "code": "\nvoid initializeSensorData_08002bf0(void)\n\n{\n  undefined4 floatValue;\n  int intValue2;\n  int intValue1;\n  undefined4 sensorData1;\n  undefined2 sensorData2;\n  \n  sensorData1 = 0;\n  sensorData2 = 0;\n  readSensorData(0xd0,0x43,&sensorData1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(sensorData1._2_1_,sensorData1._3_1_);\n  DAT_200002be = CONCAT11((undefined)sensorData1,sensorData1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)sensorData2,sensorData2._1_1_);\n  intValue1 = (int)DAT_200002c0;\n  intValue2 = (int)DAT_200002c2;\n  floatValue = __floatsisf();\n  floatValue = __aeabi_fmul(floatValue,0x447a0000);\n  floatValue = __aeabi_fmul(floatValue,0x38000000);\n  DAT_200002c4 = __aeabi_fsub(floatValue,DAT_20000000);\n  floatValue = __floatsisf(intValue1);\n  floatValue = __aeabi_fmul(floatValue,0x447a0000);\n  floatValue = __aeabi_fmul(floatValue,0x38000000);\n  DAT_200002c8 = __aeabi_fsub(floatValue,DAT_20000004);\n  floatValue = __floatsisf(intValue2);\n  floatValue = __aeabi_fmul(floatValue,0x447a0000);\n  floatValue = __aeabi_fmul(floatValue,0x38000000);\n  DAT_200002cc = __aeabi_fsub(floatValue,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_sensor_data_08002bf0",
                "local_20": "sensorData1",
                "local_1c": "sensorData2",
                "I2C_ReadByteArray": "readSensorData",
                "iVar3": "intValue1",
                "iVar2": "intValue2",
                "uVar1": "floatValue"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "initialize_mpu9250_08002cb0",
            "code": "\nvoid initializeMPU9250_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 tempVar;\n  uint localData;\n  \n  localData = param4;\n  writeByte(0xd0,0x37,0x22,1,param1,param2,param3);\n  writeByte(0xd0,0x6a,1);\n  readByte(0x18,0,\"../Src/MPU9250.c\",0xad);\n  writeByte(0x18,0xb,1);\n  writeByte(0x18,10,0,1);\n  writeByte(0x18,10,0xf,1);\n  readByteArray(0x18,0x10,&localData,3,\"../Src/MPU9250.c\",0xb6);\n  tempVar = convertToFloat((localData & 0xff) - 0x80);\n  tempVar = multiplyFloats(tempVar,0x3b800000);\n  DAT_200002e8 = addFloats(tempVar,0x3f800000);\n  tempVar = convertToFloat((localData >> 8 & 0xff) - 0x80);\n  tempVar = multiplyFloats(tempVar,0x3b800000);\n  DAT_200002ec = addFloats(tempVar,0x3f800000);\n  tempVar = convertToFloat((localData >> 0x10 & 0xff) - 0x80);\n  tempVar = multiplyFloats(tempVar,0x3b800000);\n  DAT_200002f0 = addFloats(tempVar,0x3f800000);\n  writeByte(0x18,10,0,1);\n  writeByte(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "initialize_mpu9250_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "tempVar",
                "local_c": "localData",
                "I2C_WriteByte": "writeByte",
                "I2C_ReadByte": "readByte",
                "I2C_ReadByteArray": "readByteArray",
                "__floatsisf": "convertToFloat",
                "__aeabi_fmul": "multiplyFloats",
                "__addsf3": "addFloats"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "__floatsisf",
                "I2C_WriteByte",
                "I2C_ReadByte",
                "__addsf3",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "read_sensor_data_08002d88",
            "code": "\nvoid read_sensor_data_08002d88(undefined4 device_address,undefined4 register_address,undefined4 data_length,undefined4 data_buffer)\n\n{\n  int read_result;\n  undefined4 scaled_value;\n  undefined4 conversion_factor;\n  int integer_value;\n  undefined2 high_byte;\n  undefined unused_byte_1;\n  undefined unused_byte_2;\n  undefined unused_byte_3;\n  undefined unused_byte_4;\n  byte byte_value;\n  undefined uStack_21;\n  \n  uStack_21 = (undefined)((uint)data_buffer >> 0x18);\n  high_byte = 0;\n  unused_byte_1 = 0;\n  unused_byte_2 = 0;\n  unused_byte_3 = 0;\n  unused_byte_4 = 0;\n  byte_value = 0;\n  read_result = I2C_ReadByte(0x18,2,\"../Src/MPU9250.c\",0xd7,device_address,register_address);\n  if (read_result << 0x1f < 0) {\n    I2C_ReadByteArray(0x18,3,&high_byte,7,\"../Src/MPU9250.c\",0xda);\n    conversion_factor = DAT_2000001c;\n    if ((int)((uint)byte_value << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(unused_byte_2,unused_byte_1);\n      DAT_200002bc = CONCAT11(unused_byte_4,unused_byte_3);\n      integer_value = (int)DAT_200002ba;\n      read_result = (int)DAT_200002bc;\n      DAT_200002b8 = high_byte;\n      scaled_value = __floatsisf();\n      scaled_value = __aeabi_fmul(scaled_value,conversion_factor);\n      scaled_value = __aeabi_fmul(scaled_value,DAT_200002e8);\n      scaled_value = __aeabi_fsub(scaled_value,DAT_20000020);\n      DAT_200002dc = __aeabi_fmul(scaled_value,DAT_2000002c);\n      scaled_value = __floatsisf(integer_value);\n      scaled_value = __aeabi_fmul(scaled_value,conversion_factor);\n      scaled_value = __aeabi_fmul(scaled_value,DAT_200002ec);\n      scaled_value = __aeabi_fsub(scaled_value,DAT_20000024);\n      DAT_200002e0 = __aeabi_fmul(scaled_value,DAT_20000030);\n      scaled_value = __floatsisf(read_result);\n      conversion_factor = __aeabi_fmul(scaled_value,conversion_factor);\n      conversion_factor = __aeabi_fmul(conversion_factor,DAT_200002f0);\n      conversion_factor = __aeabi_fsub(conversion_factor,DAT_20000028);\n      DAT_200002e4 = __aeabi_fmul(conversion_factor,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "read_sensor_data_08002d88",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data_length",
                "param_4": "data_buffer",
                "iVar1": "read_result",
                "uVar2": "scaled_value",
                "uVar3": "conversion_factor",
                "iVar4": "integer_value",
                "local_28": "high_byte",
                "uStack_26": "unused_byte_1",
                "uStack_25": "unused_byte_2",
                "local_24": "unused_byte_3",
                "local_23": "unused_byte_4",
                "local_22": "byte_value"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByte",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_sensors_08002ea0",
            "code": "\nvoid initializeSensors_08002ea0(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extraOutput;\n  \n  initializeMPU9250();\n  initializeAK8963();\n  setMadgwickBeta(0x3f19999a);\n  setMadgwickDelta(0,extraOutput,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "extraOutput",
                "MPU9250_Init": "initializeMPU9250",
                "AK8963_Init": "initializeAK8963",
                "MadgwickSetBeta": "setMadgwickBeta",
                "MadgwickSetDelta": "setMadgwickDelta"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "MPU9250_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta",
                "AK8963_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_sum_of_multiplication_08002ec0",
            "code": "\nvoid calculateSumOfMultiplication_08002ec0(void)\n\n{\n  undefined4 difference;\n  undefined4 value1;\n  undefined4 value2;\n  \n  value1 = DAT_2000024c;\n  value2 = DAT_20000010;\n  difference = __aeabi_fsub(0x3f800000,DAT_20000010);\n  value1 = __aeabi_fmul(difference,value1);\n  value2 = __aeabi_fmul(value2,DAT_2000000c);\n  DAT_2000000c = __addsf3(value2,value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_sum_of_multiplication_08002ec0",
                "uVar1": "difference",
                "uVar2": "value1",
                "uVar3": "value2"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_sum_08002ed4",
            "code": "\nvoid calculateSum_08002ed4(void)\n\n{\n  undefined4 difference;\n  undefined4 constant;\n  undefined4 product;\n  \n  constant = DAT_20000248;\n  product = value1;\n  difference = __aeabi_fsub(0x3f800000,value1);\n  constant = __aeabi_fmul(difference,constant);\n  product = __aeabi_fmul(product,value2);\n  value2 = __addsf3(product,constant);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_sum_08002ed4",
                "uVar1": "difference",
                "uVar2": "constant",
                "uVar3": "product",
                "uRam20000018": "value1",
                "uRam20000014": "value2"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "adjust_float_value_08002ee8",
            "code": "\nvoid adjustFloatValue_08002ee8(void)\n\n{\n  undefined4 originalValue;\n  int isGreater;\n  \n  originalValue = DAT_20000250;\n  isGreater = isGreaterOrEqual(DAT_20000250,0xc3340000);\n  if ((isGreater != 0) && (isGreater = isLessThan(originalValue,0x42b40000), isGreater != 0)) {\n    addFloat(originalValue,0x42b40000);\n    return;\n  }\n  subtractFloat(originalValue,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "adjust_float_value_08002ee8",
                "uVar1": "originalValue",
                "iVar2": "isGreater",
                "__aeabi_fcmpge": "isGreaterOrEqual",
                "__aeabi_fcmplt": "isLessThan",
                "__addsf3": "addFloat",
                "__aeabi_fsub": "subtractFloat"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fcmplt",
                "__aeabi_fcmpge"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "sensor_data_processing_08002f28",
            "code": "\n\n\nvoid sensorDataProcessing_08002f28(void)\n\n{\n  undefined4 timeDifference;\n  \n  readAccelerometerData();\n  readGyroData();\n  readMagnetometerData();\n  DAT_20000258 = micros();\n  timeDifference = calculateTimeDifference(DAT_20000258 - DAT_20000254);\n  normalizeTimeDifference(timeDifference,0x447a0000);\n  setMadgwickDelta();\n  DAT_20000254 = DAT_20000258;\n  updateQuaternion\n            (DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n             DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n             &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  timeDifference = getRoll();\n  multiplyRoll(timeDifference,0x41200000);\n  DAT_20001395._0_2_ = __aeabi_f2iz();\n  timeDifference = getPitch();\n  multiplyRoll(timeDifference,0x41200000);\n  DAT_20001395._2_2_ = __aeabi_f2iz();\n  getYaw();\n  DAT_20001399 = __aeabi_f2iz();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "sensor_data_processing_08002f28",
                "uVar1": "timeDifference",
                "MPU9250_ReadAccelData": "readAccelerometerData",
                "MPU9250_ReadGyroData": "readGyroData",
                "AK8963_ReadData": "readMagnetometerData",
                "__floatunsisf": "calculateTimeDifference",
                "__aeabi_fdiv": "normalizeTimeDifference",
                "MadgwickSetDelta": "setMadgwickDelta",
                "MadgwickQuaternionUpdate": "updateQuaternion",
                "AHRS_GetRoll": "getRoll",
                "__aeabi_fmul": "multiplyRoll",
                "AHRS_GetPitch": "getPitch",
                "AHRS_GetYaw": "getYaw"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MadgwickSetDelta",
                "AHRS_GetPitch",
                "MPU9250_ReadGyroData",
                "__aeabi_f2iz",
                "__floatunsisf",
                "MPU9250_ReadAccelData",
                "__aeabi_fmul",
                "AK8963_ReadData",
                "micros",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "__aeabi_fdiv",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "read_i2_c_bytes_08003034",
            "code": "\nuint readI2CBytes_08003034(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  result = arg4;\n  I2C_ReadBytes(0xee,0,&result,3,\"../Src/MS5611.c\",0x8c,arg3);\n  return (uint)CONCAT12((undefined)result,CONCAT11(result._1_1_,result._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "read_i2_c_bytes_08003034",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "local_c": "result"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "I2C_ReadBytes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_08003068",
            "code": "\nundefined4 get_data_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_08003068"
            },
            "calling": [
                "PID_UpdateAltitude"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_08003298",
            "code": "\nvoid initializeSensor_08003298(void)\n\n{\n  int loopIndex;\n  undefined byte1;\n  undefined byte2;\n  \n  loopIndex = 0;\n  writeI2CByte(0xee,0x1e,1);\n  delayMilliseconds(10);\n  DAT_20000038 = 8;\n  do {\n    byte1 = 0;\n    byte2 = 0;\n    readI2CByteArray(0xee,loopIndex + 0xa0U & 0xffff,&byte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + loopIndex) = CONCAT11(byte1,byte2);\n    loopIndex = loopIndex + 2;\n  } while (loopIndex != 0x10);\n  loopIndex = 0;\n  do {\n    (&DAT_20000300)[loopIndex] = 0;\n    loopIndex = loopIndex + 1;\n  } while (loopIndex != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_08003298",
                "local_1c": "byte1",
                "local_1b": "byte2",
                "iVar1": "loopIndex",
                "I2C_WriteByte": "writeI2CByte",
                "delay_ms": "delayMilliseconds",
                "I2C_ReadByteArray": "readI2CByteArray"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "I2C_WriteByte",
                "delay_ms",
                "I2C_ReadByteArray"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_variable_08003314",
            "code": "\nvoid initializeVariable_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_variable_08003314",
                "param_1": "value"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_global_variable_08003320",
            "code": "\nvoid set_global_variable_08003320(undefined4 new_value)\n\n{\n  DAT_20000360 = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_global_variable_08003320",
                "param_1": "new_value"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_angles_08003330",
            "code": "\nvoid calculateAngles_08003330(undefined4 side1,undefined4 side2,undefined4 side3,undefined4 angle1,\n                 undefined4 angle2,undefined4 angle3,undefined4 cosine1,undefined4 cosine2,\n                 undefined4 cosine3,undefined4 *resultArray)\n\n{\n  undefined4 sideSquareSum;\n  undefined4 temp;\n  int isSideSquareSumZero;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  int temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined4 temp11;\n  undefined4 temp12;\n  undefined4 temp13;\n  undefined4 temp14;\n  undefined4 temp15;\n  int temp16;\n  undefined4 temp17;\n  undefined4 temp18;\n  undefined4 temp19;\n  undefined4 temp20;\n  undefined4 temp21;\n  undefined4 temp22;\n  int temp23;\n  undefined4 temp24;\n  undefined4 temp25;\n  undefined4 temp26;\n  int temp27;\n  undefined8 PI;\n  undefined8 radians;\n  \n  temp26 = DAT_20000048;\n  temp25 = DAT_20000044;\n  temp27 = DAT_20000040;\n  temp24 = DAT_2000003c;\n  sideSquareSum = __aeabi_fmul(side1,side1);\n  temp = __aeabi_fmul(side2);\n  sideSquareSum = __addsf3(sideSquareSum,temp);\n  temp = __aeabi_fmul(side3);\n  __addsf3(sideSquareSum,temp);\n  __aeabi_f2d();\n  sqrt();\n  sideSquareSum = __truncdfsf2();\n  isSideSquareSumZero = __aeabi_fcmpeq(sideSquareSum,0);\n  if (isSideSquareSumZero == 0) {\n    temp = __aeabi_fmul(cosine1);\n    temp1 = __aeabi_fmul(cosine2);\n    temp = __addsf3(temp,temp1);\n    temp1 = __aeabi_fmul(cosine3);\n    __addsf3(temp,temp1);\n    __aeabi_f2d();\n    sqrt();\n    temp = __truncdfsf2();\n    isSideSquareSumZero = __aeabi_fcmpeq(temp,0);\n    if (isSideSquareSumZero == 0) {\n      PI = __aeabi_f2d(angle1);\n      __muldf3((int)PI,(int)((ulonglong)PI >> 0x20),0xa2529d39,0x3f91df46);\n      temp1 = __truncdfsf2();\n      PI = __aeabi_f2d(angle2);\n      __muldf3((int)PI,(int)((ulonglong)PI >> 0x20),0xa2529d39,0x3f91df46);\n      temp2 = __truncdfsf2();\n      PI = __aeabi_f2d(angle3);\n      __muldf3((int)PI,(int)((ulonglong)PI >> 0x20),0xa2529d39,0x3f91df46);\n      temp3 = __truncdfsf2();\n      isSideSquareSumZero = __addsf3(temp24);\n      temp4 = __addsf3(temp27);\n      temp5 = __addsf3(temp25,temp25);\n      temp6 = __addsf3(temp26,temp26);\n      temp7 = __aeabi_fmul(temp24);\n      temp8 = __aeabi_fmul(temp24,temp27);\n      temp9 = __aeabi_fmul(temp24,temp25);\n      temp10 = __aeabi_fmul(temp27);\n      temp11 = __aeabi_fmul(temp27,temp26);\n      temp12 = __aeabi_fmul(temp25,temp25);\n      temp13 = __aeabi_fmul(temp26,temp26);\n      sideSquareSum = __aeabi_fdiv(0x3f800000,sideSquareSum);\n      temp = __aeabi_fdiv(0x3f800000,temp);\n      temp14 = __aeabi_fmul(cosine1,temp);\n      temp15 = __aeabi_fmul(cosine2,temp);\n      temp = __aeabi_fmul(cosine3,temp);\n      temp16 = __aeabi_fmul(isSideSquareSumZero,temp14);\n      temp17 = __aeabi_fmul(isSideSquareSumZero,temp15);\n      temp18 = __aeabi_fmul(isSideSquareSumZero,temp);\n      temp19 = __aeabi_fmul(temp4,temp14);\n      temp20 = __aeabi_fmul(temp7,temp14);\n      temp21 = __aeabi_fmul(temp26,temp17);\n      temp20 = __aeabi_fsub(temp20,temp21);\n      temp21 = __aeabi_fmul(temp25,temp18);\n      temp20 = __addsf3(temp20,temp21);\n      temp21 = __aeabi_fmul(temp10,temp14);\n      temp20 = __addsf3(temp20,temp21);\n      temp21 = __aeabi_fmul(temp4,temp15);\n      temp21 = __aeabi_fmul(temp21,temp25);\n      temp20 = __addsf3(temp20,temp21);\n      temp21 = __aeabi_fmul(temp4,temp);\n      temp21 = __aeabi_fmul(temp21,temp26);\n      temp20 = __addsf3(temp20,temp21);\n      temp21 = __aeabi_fmul(temp12,temp14);\n      temp20 = __aeabi_fsub(temp20,temp21);\n      temp21 = __aeabi_fmul(temp13,temp14);\n      temp20 = __aeabi_fsub(temp20,temp21);\n      temp21 = __aeabi_fmul(temp26,temp16);\n      temp22 = __aeabi_fmul(temp7,temp15);\n      temp21 = __addsf3(temp21,temp22);\n      temp18 = __aeabi_fmul(temp27,temp18);\n      temp18 = __aeabi_fsub(temp21,temp18);\n      temp21 = __aeabi_fmul(temp25,temp19);\n      temp18 = __addsf3(temp18,temp21);\n      temp21 = __aeabi_fmul(temp10,temp15);\n      temp18 = __aeabi_fsub(temp18,temp21);\n      temp21 = __aeabi_fmul(temp12,temp15);\n      temp18 = __addsf3(temp18,temp21);\n      temp21 = __aeabi_fmul(temp5,temp);\n      temp21 = __aeabi_fmul(temp21,temp26);\n      temp18 = __addsf3(temp18,temp21);\n      temp21 = __aeabi_fmul(temp13,temp15);\n      temp18 = __aeabi_fsub(temp18,temp21);\n      temp20 = __aeabi_fmul(temp20,temp20);\n      temp18 = __aeabi_fmul(temp18,temp18);\n      __addsf3(temp20,temp18);\n      __aeabi_f2d();\n      sqrt();\n      temp23 = __truncdfsf2();\n      temp18 = __aeabi_fmul(temp16 + -0x80000000,temp25);\n      temp17 = __aeabi_fmul(temp27,temp17);\n      temp17 = __addsf3(temp18,temp17);\n      temp7 = __aeabi_fmul(temp7,temp);\n      temp7 = __addsf3(temp17,temp7);\n      temp17 = __aeabi_fmul(temp26,temp19);\n      temp7 = __addsf3(temp7,temp17);\n      temp17 = __aeabi_fmul(temp10,temp);\n      temp7 = __aeabi_fsub(temp7,temp17);\n      temp17 = __aeabi_fmul(temp5,temp15);\n      temp17 = __aeabi_fmul(temp17,temp26);\n      temp7 = __addsf3(temp7,temp17);\n      temp17 = __aeabi_fmul(temp12,temp);\n      temp7 = __aeabi_fsub(temp7,temp17);\n      temp17 = __aeabi_fmul(temp13,temp);\n      temp7 = __addsf3(temp7,temp17);\n      temp17 = __addsf3(temp7,temp7);\n      temp18 = __addsf3(temp11);\n      temp19 = __aeabi_fmul(temp25,isSideSquareSumZero);\n      temp18 = __aeabi_fsub(temp18,temp19);\n      temp19 = __aeabi_fmul(side1,sideSquareSum);\n      temp18 = __aeabi_fsub(temp18,temp19);\n      temp19 = __aeabi_fmul(temp26,temp5);\n      temp20 = __addsf3(temp8);\n      temp19 = __addsf3(temp19,temp20);\n      temp20 = __aeabi_fmul(side2,sideSquareSum);\n      temp19 = __aeabi_fsub(temp19,temp20);\n      temp20 = __aeabi_fmul(temp25,temp7);\n      temp21 = __aeabi_fsub(0x3f000000,temp12);\n      temp13 = __aeabi_fsub(temp21,temp13);\n      temp13 = __aeabi_fmul(temp13,temp23);\n      temp21 = __aeabi_fsub(temp11,temp9);\n      temp21 = __aeabi_fmul(temp21,temp7);\n      temp13 = __addsf3(temp13,temp21);\n      temp13 = __aeabi_fsub(temp13,temp14);\n      temp14 = __aeabi_fmul(temp27,temp7);\n      temp21 = __aeabi_fmul(temp27,temp25);\n      temp22 = __aeabi_fmul(temp24,temp26);\n      temp21 = __aeabi_fsub(temp21,temp22);\n      temp21 = __aeabi_fmul(temp21,temp23);\n      temp22 = __aeabi_fmul(temp25,temp26);\n      temp8 = __addsf3(temp22,temp8);\n      temp8 = __aeabi_fmul(temp8,temp7);\n      temp8 = __addsf3(temp21,temp8);\n      temp8 = __aeabi_fsub(temp8,temp15);\n      temp15 = __aeabi_fmul(temp25,temp23);\n      temp21 = __aeabi_fsub(0x3f000000,temp10);\n      temp21 = __aeabi_fsub(temp21,temp12);\n      temp21 = __aeabi_fmul(temp21,temp7);\n      temp9 = __addsf3(temp9,temp11);\n      temp9 = __aeabi_fmul(temp9,temp23);\n      temp9 = __addsf3(temp21,temp9);\n      temp = __aeabi_fsub(temp9,temp);\n      temp9 = __aeabi_fmul(temp5 + -0x80000000,temp18);\n      temp11 = __aeabi_fmul(temp4,temp19);\n      temp9 = __addsf3(temp9,temp11);\n      temp11 = __aeabi_fmul(temp20,temp13);\n      temp9 = __aeabi_fsub(temp9,temp11);\n      temp11 = __aeabi_fmul(temp26,temp23 + -0x80000000);\n      temp11 = __addsf3(temp11,temp14);\n      temp11 = __aeabi_fmul(temp11,temp8);\n      temp9 = __addsf3(temp9,temp11);\n      temp11 = __aeabi_fmul(temp15,temp);\n      temp9 = __addsf3(temp9,temp11);\n      temp10 = __addsf3(temp10);\n      temp10 = __aeabi_fsub(0x3f800000,temp10);\n      temp11 = __addsf3(temp12);\n      temp10 = __aeabi_fsub(temp10,temp11);\n      sideSquareSum = __aeabi_fmul(side3,sideSquareSum);\n      sideSquareSum = __aeabi_fsub(temp10,sideSquareSum);\n      temp10 = __aeabi_fmul(temp26,temp7);\n      temp7 = __aeabi_fmul(temp24,temp7);\n      temp11 = __aeabi_fmul(temp6,temp18);\n      temp12 = __aeabi_fmul(isSideSquareSumZero,temp19);\n      temp11 = __addsf3(temp11,temp12);\n      temp12 = __aeabi_fmul(temp27,0x40800000);\n      temp12 = __aeabi_fmul(temp12,sideSquareSum);\n      temp11 = __aeabi_fsub(temp11,temp12);\n      temp12 = __aeabi_fmul(temp13,temp10);\n      temp11 = __addsf3(temp11,temp12);\n      temp12 = __addsf3(temp15,temp7);\n      temp12 = __aeabi_fmul(temp12,temp8);\n      temp11 = __addsf3(temp11,temp12);\n      temp12 = __aeabi_fmul(temp26,temp23);\n      temp15 = __aeabi_fmul(temp27,temp17);\n      temp12 = __aeabi_fsub(temp12,temp15);\n      temp12 = __aeabi_fmul(temp12,temp);\n      temp11 = __addsf3(temp11,temp12);\n      temp16 = __addsf3(temp23,temp23);\n      temp12 = __aeabi_fmul(temp27,temp23);\n      temp15 = __aeabi_fmul(isSideSquareSumZero + -0x80000000,temp18);\n      temp6 = __aeabi_fmul(temp6,temp19);\n      temp6 = __addsf3(temp15,temp6);\n      temp15 = __aeabi_fmul(temp25,0x40800000);\n      sideSquareSum = __aeabi_fmul(temp15,sideSquareSum);\n      sideSquareSum = __aeabi_fsub(temp6,sideSquareSum);\n      temp6 = __aeabi_fmul(temp25,temp16 + -0x80000000);\n      temp6 = __aeabi_fsub(temp6,temp7);\n      temp6 = __aeabi_fmul(temp6,temp13);\n      sideSquareSum = __addsf3(sideSquareSum,temp6);\n      temp6 = __addsf3(temp10,temp12);\n      temp6 = __aeabi_fmul(temp6,temp8);\n      sideSquareSum = __addsf3(sideSquareSum,temp6);\n      temp6 = __aeabi_fmul(temp24,temp23);\n      temp7 = __aeabi_fmul(temp25,temp17);\n      temp6 = __aeabi_fsub(temp6,temp7);\n      temp6 = __aeabi_fmul(temp6,temp);\n      temp6 = __addsf3(sideSquareSum,temp6);\n      sideSquareSum = __aeabi_fmul(temp4,temp18);\n      temp4 = __aeabi_fmul(temp5,temp19);\n      sideSquareSum = __addsf3(sideSquareSum,temp4);\n      temp4 = __aeabi_fmul(temp26,temp16 + -0x80000000);\n      temp4 = __addsf3(temp4,temp14);\n      temp4 = __aeabi_fmul(temp4,temp13);\n      sideSquareSum = __addsf3(sideSquareSum,temp4);\n      temp4 = __aeabi_fmul(temp24,temp23 + -0x80000000);\n      temp4 = __addsf3(temp4,temp20);\n      temp4 = __aeabi_fmul(temp4,temp8);\n      sideSquareSum = __addsf3(sideSquareSum,temp4);\n      temp = __aeabi_fmul(temp,temp12);\n      temp4 = __addsf3(sideSquareSum,temp);\n      sideSquareSum = __aeabi_fmul(temp9);\n      temp = __aeabi_fmul(temp11);\n      sideSquareSum = __addsf3(sideSquareSum,temp);\n      temp = __aeabi_fmul(temp6,temp6);\n      sideSquareSum = __addsf3(sideSquareSum,temp);\n      temp = __aeabi_fmul(temp4,temp4);\n      __addsf3(sideSquareSum,temp);\n      __aeabi_f2d();\n      sqrt();\n      sideSquareSum = __truncdfsf2();\n      temp7 = __aeabi_fdiv(0x3f800000,sideSquareSum);\n      sideSquareSum = DAT_2000035c;\n      temp = __aeabi_fmul(temp27 + -0x80000000,temp1);\n      temp8 = __aeabi_fmul(temp25,temp2);\n      temp = __aeabi_fsub(temp,temp8);\n      temp8 = __aeabi_fmul(temp26,temp3);\n      temp = __aeabi_fsub(temp,temp8);\n      temp8 = __aeabi_fmul(temp,0x3f000000);\n      temp9 = __aeabi_fmul(temp9,temp7);\n      temp = DAT_20000360;\n      temp9 = __aeabi_fmul(temp9,sideSquareSum);\n      temp8 = __aeabi_fsub(temp8,temp9);\n      temp = __aeabi_fmul(temp8,temp);\n      temp8 = __addsf3(temp,temp24);\n      temp9 = __aeabi_fmul(temp24,temp1);\n      temp10 = __aeabi_fmul(temp25,temp3);\n      temp = DAT_20000360;\n      temp9 = __addsf3(temp9,temp10);\n      temp10 = __aeabi_fmul(temp26,temp2);\n      temp9 = __aeabi_fsub(temp9,temp10);\n      temp9 = __aeabi_fmul(temp9,0x3f000000);\n      temp10 = __aeabi_fmul(temp11,temp7);\n      temp10 = __aeabi_fmul(temp10,sideSquareSum);\n      temp9 = __aeabi_fsub(temp9,temp10);\n      temp = __aeabi_fmul(temp9,temp);\n      temp9 = __addsf3(temp,temp27);\n      temp = DAT_20000360;\n      temp10 = __aeabi_fmul(temp24,temp2);\n      temp11 = __aeabi_fmul(temp27,temp3);\n      temp10 = __aeabi_fsub(temp10,temp11);\n      temp11 = __aeabi_fmul(temp26,temp1);\n      temp10 = __addsf3(temp10,temp11);\n      temp10 = __aeabi_fmul(temp10,0x3f000000);\n      temp6 = __aeabi_fmul(temp6,temp7);\n      temp6 = __aeabi_fmul(temp6,sideSquareSum);\n      temp6 = __aeabi_fsub(temp10,temp6);\n      temp = __aeabi_fmul(temp6,temp);\n      temp = __addsf3(temp,temp25);\n      temp24 = __aeabi_fmul(temp24,temp3);\n      temp2 = __aeabi_fmul(temp27,temp2);\n      temp24 = __addsf3(temp24,temp2);\n      temp25 = __aeabi_fmul(temp25,temp1);\n      temp24 = __aeabi_fsub(temp24,temp25);\n      temp25 = __aeabi_fmul(temp24,0x3f000000);\n      temp24 = __aeabi_fmul(temp4,temp7);\n      sideSquareSum = __aeabi_fmul(temp24,sideSquareSum);\n      temp24 = DAT_20000360;\n      temp25 = __aeabi_fsub(temp25,sideSquareSum);\n      temp24 = __aeabi_fmul(temp25,temp24);\n      temp24 = __addsf3(temp24,temp26);\n      temp25 = __aeabi_fmul(temp8,temp8);\n      temp26 = __aeabi_fmul(temp9,temp9);\n      temp25 = __addsf3(temp25,temp26);\n      temp26 = __aeabi_fmul(temp,temp);\n      temp25 = __addsf3(temp25,temp26);\n      temp26 = __aeabi_fmul(temp24,temp24);\n      __addsf3(temp25,temp26);\n      __aeabi_f2d();\n      sqrt();\n      temp25 = __truncdfsf2();\n      temp25 = __aeabi_fdiv(0x3f800000,temp25);\n      temp26 = __aeabi_fmul(temp8,temp25);\n      DAT_2000003c = temp26;\n      temp27 = __aeabi_fmul(temp9,temp25);\n      DAT_20000040 = temp27;\n      sideSquareSum = __aeabi_fmul(temp,temp25);\n      DAT_20000044 = sideSquareSum;\n      DAT_20000048 = __aeabi_fmul(temp24,temp25);\n      temp24 = __aeabi_fmul(temp27,DAT_20000048);\n      temp25 = __aeabi_fmul(temp26,sideSquareSum);\n      temp24 = __aeabi_fsub(temp24,temp25);\n      __addsf3(temp24,temp24);\n      __aeabi_f2d();\n      PI = asin();\n      PI = __muldf3((int)PI,(int)((ulonglong)PI >> 0x20),0,0x40668000);\n      __divdf3((int)PI,(int)((ulonglong)PI >> 0x20),0x54442d18,0x400921fb);\n      temp24 = __truncdfsf2();\n      *resultArray = temp24;\n      temp27 = DAT_20000040;\n      temp24 = DAT_2000003c;\n      temp25 = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      temp26 = __aeabi_fmul(temp27,temp27);\n      temp26 = __aeabi_fsub(temp25,temp26);\n      temp25 = DAT_20000044;\n      sideSquareSum = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      sideSquareSum = __aeabi_fsub(temp26,sideSquareSum);\n      temp26 = DAT_20000048;\n      temp = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __addsf3(sideSquareSum,temp);\n      PI = __aeabi_f2d();\n      temp24 = __aeabi_fmul(temp24,temp27);\n      temp25 = __aeabi_fmul(temp25,temp26);\n      temp24 = __addsf3(temp24,temp25);\n      __addsf3(temp24,temp24);\n      radians = __aeabi_f2d();\n      PI = atan2((int)radians,(int)((ulonglong)radians >> 0x20),(int)PI,\n                     (int)((ulonglong)PI >> 0x20));\n      PI = __muldf3((int)PI,(int)((ulonglong)PI >> 0x20),0,0x40668000);\n      __divdf3((int)PI,(int)((ulonglong)PI >> 0x20),0x54442d18,0x400921fb);\n      temp24 = __truncdfsf2();\n      resultArray[1] = temp24;\n      temp27 = DAT_20000040;\n      temp24 = DAT_2000003c;\n      temp25 = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      temp26 = __aeabi_fmul(temp27,temp27);\n      temp26 = __addsf3(temp25,temp26);\n      temp25 = DAT_20000044;\n      sideSquareSum = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      sideSquareSum = __aeabi_fsub(temp26,sideSquareSum);\n      temp26 = DAT_20000048;\n      temp = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __aeabi_fsub(sideSquareSum,temp);\n      PI = __aeabi_f2d();\n      temp25 = __aeabi_fmul(temp27,temp25);\n      temp24 = __aeabi_fmul(temp24,temp26);\n      temp24 = __addsf3(temp25,temp24);\n      __addsf3(temp24,temp24);\n      radians = __aeabi_f2d();\n      PI = atan2((int)radians,(int)((ulonglong)radians >> 0x20),(int)PI,\n                     (int)((ulonglong)PI >> 0x20));\n      PI = __muldf3((int)PI,(int)((ulonglong)PI >> 0x20),0,0x40668000);\n      __divdf3((int)PI,(int)((ulonglong)PI >> 0x20),0x54442d18,0x400921fb);\n      temp24 = __truncdfsf2();\n      resultArray[2] = temp24;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_angles_08003330",
                "param_1": "side1",
                "param_2": "side2",
                "param_3": "side3",
                "param_4": "angle1",
                "param_5": "angle2",
                "param_6": "angle3",
                "param_7": "cosine1",
                "param_8": "cosine2",
                "param_9": "cosine3",
                "param_10": "resultArray",
                "uVar1": "sideSquareSum",
                "uVar2": "temp",
                "iVar3": "isSideSquareSumZero",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4",
                "iVar8": "temp5",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "uVar13": "temp10",
                "uVar14": "temp11",
                "uVar15": "temp12",
                "uVar16": "temp13",
                "uVar17": "temp14",
                "uVar18": "temp15",
                "iVar19": "temp16",
                "uVar20": "temp17",
                "uVar21": "temp18",
                "uVar22": "temp19",
                "uVar23": "temp20",
                "uVar24": "temp21",
                "uVar25": "temp22",
                "iVar26": "temp23",
                "uVar27": "temp24",
                "uVar28": "temp25",
                "uVar29": "temp26",
                "iVar30": "temp27",
                "uVar31": "PI",
                "uVar32": "radians"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "atan2",
                "sqrt",
                "__aeabi_fcmpeq",
                "__aeabi_fsub",
                "__aeabi_f2d",
                "__addsf3",
                "__muldf3",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "__aeabi_fmul",
                "asin",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_left_by32_bits_08003eb0",
            "code": "\nlonglong shiftLeftBy32Bits_08003eb0(uint inputValue)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combineValues(inputValue,1);\n  }\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_left_by32_bits_08003eb0",
                "param_1": "inputValue",
                "CONCAT44": "combineValues",
                "software_interrupt": "triggerInterrupt"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increase_counter_and_store_08003ec8",
            "code": "\nundefined4 increaseCounterAndStore_08003ec8(int baseAddress,undefined value)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = value;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increase_counter_and_store_08003ec8",
                "param_1": "baseAddress",
                "param_2": "value"
            },
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_gpio_pin_states_08003f3c",
            "code": "\nvoid set_gpio_pin_states_08003f3c(int gpio_pin1_state,int gpio_pin2_state,int gpio_pin3_state)\n\n{\n  set_pin_state(0x40011000,0x8000,gpio_pin1_state == 0);\n  set_pin_state(0x40011000,0x4000,gpio_pin2_state == 0);\n  set_pin_state(0x40011000,0x2000,gpio_pin3_state == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_gpio_pin_states_08003f3c",
                "param_1": "gpio_pin1_state",
                "param_2": "gpio_pin2_state",
                "param_3": "gpio_pin3_state",
                "HAL_GPIO_WritePin": "set_pin_state"
            },
            "calling": [
                "PID_Update",
                "Devices_Init"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_pointer_08003fc4",
            "code": "\nvoid setPointer_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_pointer_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_value_08003fd0",
            "code": "\nvoid setParamValue_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_value_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_value_08003fdc",
            "code": "\nvoid setParamValue_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_value_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_value_in_memory_08003fe8",
            "code": "\nvoid setParamValueInMemory_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_value_in_memory_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "Motor_DistributeSpeed",
                "Motor_StopAll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "start_pwm_timers_08003ff4",
            "code": "\nvoid start_pwm_timers_08003ff4(void)\n\n{\n  HAL_TIM_PWM_Start(&DAT_200015f8,4);\n  HAL_TIM_PWM_Start(&DAT_20001540,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "start_pwm_timers_08003ff4"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_blink_led_08004028",
            "code": "\nvoid initializeAndBlinkLED_08004028(void)\n\n{\n  int iterationCount;\n  \n  Peripherals_Init();\n  PWM_Init();\n  iterationCount = 3;\n  do {\n    toggleLED(1,0);\n    delay_ms(100);\n    toggleLED(0,1);\n    delay_ms(100);\n    toggleLED(0,0,1);\n    delay_ms(100);\n    iterationCount = iterationCount + -1;\n  } while (iterationCount != 0);\n  toggleLED(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_blink_led_08004028",
                "iVar1": "iterationCount"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "Peripherals_Init",
                "PWM_Init",
                "delay_ms",
                "toggleLED"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "write_data_to_i2_c_0800403c",
            "code": "\nvoid writeDataToI2C_0800403c(undefined4 deviceAddress,undefined4 memAddress,undefined data,int delayEnabled)\n\n{\n  int iVar1;\n  undefined buffer [8];\n  \n  buffer[0] = data;\n  iVar1 = HAL_I2C_Mem_Write(&DAT_20001504,deviceAddress,memAddress,1,buffer,1,200);\n  if (iVar1 != 0) {\n    _Error_Handler(\"../Src/i2c.c\",0x1b);\n  }\n  if (delayEnabled != 0) {\n    delay_ms(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "write_data_to_i2_c_0800403c",
                "param_1": "deviceAddress",
                "param_2": "memAddress",
                "param_3": "data",
                "param_4": "delayEnabled",
                "local_14": "buffer"
            },
            "calling": [
                "taskScheduler",
                "MPU9250_Init",
                "AK8963_Init",
                "MS5611_Init"
            ],
            "called": [
                "HAL_I2C_Mem_Write",
                "delay_ms",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "read_i2_c_memory_0800407c",
            "code": "\nundefined readI2CMemory_0800407c(undefined4 deviceAddress,undefined4 memoryAddress,undefined4 errorCode,undefined4 errorInfo)\n\n{\n  int iVar1;\n  undefined readValue [8];\n  \n  readValue[0] = 0;\n  iVar1 = HAL_I2C_Mem_Read(&DAT_20001504,deviceAddress,memoryAddress,1,readValue,1,200);\n  if (iVar1 != 0) {\n    _Error_Handler(errorCode,errorInfo);\n  }\n  return readValue[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "read_i2_c_memory_0800407c",
                "param_1": "deviceAddress",
                "param_2": "memoryAddress",
                "param_3": "errorCode",
                "param_4": "errorInfo",
                "local_14": "readValue"
            },
            "calling": [
                "MPU9250_Init",
                "AK8963_Init",
                "I2C_ReadByteArray",
                "AK8963_ReadData"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "read_memory_data_080040b8",
            "code": "\nvoid readMemoryData_080040b8(undefined4 slaveAddress,undefined4 memAddress,undefined4 memAddressSize,undefined4 pData,\n                 undefined4 errorHandlerParam1,undefined4 errorHandlerParam2)\n\n{\n  int readResult;\n  \n  readResult = HAL_I2C_Mem_Read(&DAT_20001504,slaveAddress,memAddress,1,memAddressSize,pData,200,pData);\n  if (readResult != 0) {\n    _Error_Handler(errorHandlerParam1,errorHandlerParam2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "read_memory_data_080040b8",
                "param_1": "slaveAddress",
                "param_2": "memAddress",
                "param_3": "memAddressSize",
                "param_4": "pData",
                "param_5": "errorHandlerParam1",
                "param_6": "errorHandlerParam2",
                "iVar1": "readResult"
            },
            "calling": [
                "MS5611_ReadADC"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "read_multiple_bytes_080040e8",
            "code": "\nvoid readMultipleBytes_080040e8(undefined4 deviceAddress,int registerAddress,int bufferAddress,int numBytes)\n\n{\n  undefined byte;\n  int index;\n  undefined *bufferPointer;\n  int lineNumber;\n  \n  bufferPointer = (undefined *)(bufferAddress + -1);\n  lineNumber = numBytes;\n  for (index = 0; index < numBytes; index = index + 1) {\n    byte = I2C_ReadByte(deviceAddress,registerAddress + index & 0xffff,\"../Src/i2c.c\",0x4c,lineNumber);\n    bufferPointer = bufferPointer + 1;\n    *bufferPointer = byte;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "read_multiple_bytes_080040e8",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "param_3": "bufferAddress",
                "param_4": "numBytes",
                "uVar1": "byte",
                "iVar2": "index",
                "puVar3": "bufferPointer",
                "iVar4": "lineNumber"
            },
            "calling": [
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "MS5611_Init",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "update_flight_controller_0800411c",
            "code": "\nvoid updateFlightController_0800411c(void)\n\n{\n  undefined4 *ptr1;\n  longlong temp;\n  uint timeDiff1;\n  uint temp2;\n  uint temp3;\n  undefined4 val1;\n  undefined4 val2;\n  int currentTime;\n  uint val3;\n  uint val4;\n  uint val5;\n  uint val6;\n  undefined4 *ptr13;\n  undefined4 arg1;\n  int temp4;\n  int temp5;\n  bool flag;\n  undefined8 result;\n  \n  currentTime = millis();\n  if (1 < (uint)(currentTime - DAT_2000028c)) {\n    DAT_2000028c = millis();\n    AHRS_ComputeAngles();\n  }\n  currentTime = millis();\n  if (2 < (uint)(currentTime - DAT_20000294)) {\n    DAT_20000294 = millis();\n    PID_Update();\n  }\n  currentTime = millis();\n  if (3 < (uint)(currentTime - DAT_20000290)) {\n    DAT_20000290 = millis();\n    MSP_SendIdent();\n    MSP_SendStatus();\n    MSP_SendMotor();\n    MSP_SendAttitude();\n    MSP_SendAltitude();\n    MSP_SendRawIMU();\n    MSP_SendPID();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    temp5 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    val3 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)temp5) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)temp5) >> 0x20) << 9;\n    val4 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)temp5 >> 7);\n    val5 = val4 + (uint)DAT_20000260 * 0x10000;\n    temp2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)temp5) >> 8);\n    currentTime = val3 + 2000;\n    temp3 = temp2 + (uint)DAT_2000025e * 0x8000;\n    flag = (int)val3 < 0;\n    if (1999 < currentTime) {\n      val3 = 0;\n    }\n    timeDiff1 = val3;\n    if (flag != SBORROW4(currentTime,2000)) {\n      temp4 = val3 * val3 * 5;\n      val3 = temp4 >> 2;\n      timeDiff1 = temp4 >> 1;\n    }\n    val6 = val5 - timeDiff1;\n    temp = (ulonglong)(temp3 - val3) * (ulonglong)DAT_2000026c;\n    temp4 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)temp5 >> 0x28) +\n               (uint)CARRY4(temp2,(uint)DAT_2000025e * 0x8000)) - ((int)val3 >> 0x1f)) -\n             (uint)(temp3 < val3)) + (int)((ulonglong)temp >> 0x20);\n    temp2 = (uint)temp >> 0x15 | temp4 * 0x800;\n    val1 = __floatsisf(temp2 - val6 >> 0xf |\n                        (((temp4 >> 0x15) -\n                         ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)temp5 >> 0x27) +\n                           (uint)CARRY4(val4,(uint)DAT_20000260 * 0x10000)) - ((int)timeDiff1 >> 0x1f)\n                          ) - (uint)(val5 < timeDiff1))) - (uint)(temp2 < val6)) * 0x20000);\n    val1 = __aeabi_fdiv(val1,0x42c80000);\n    DAT_20000354 = val1;\n    val2 = __floatsisf(currentTime);\n    DAT_20000358 = __aeabi_fdiv(val2,0x42c80000);\n    __aeabi_fdiv(val1,0x447d5000);\n    result = __aeabi_f2d();\n    result = pow((int)result,(int)((ulonglong)result >> 0x20),0x60000000,0x3fc85b95);\n    result = __subdf3(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x40e5a540);\n    val1 = __truncdfsf2();\n    val2 = 0;\n    ptr13 = &DAT_20000300;\n    DAT_20000350 = val1;\n    do {\n      ptr1 = ptr13 + 1;\n      *ptr13 = *ptr1;\n      val2 = __addsf3(val2);\n      ptr13 = ptr1;\n    } while (ptr1 != &DAT_2000034c);\n    DAT_2000034c = val1;\n    val1 = __addsf3(val2,val1);\n    DAT_200002fc = __aeabi_fdiv(val1,0x41a00000);\n    currentTime = __aeabi_f2iz();\n    DAT_200014ab = currentTime * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = millis();\n  }\n  currentTime = millis();\n  if (((10 < (uint)(currentTime - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = MS5611_ReadADC();\n    DAT_20000275 = '\\x01';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x40,1,0,arg1);\n    DAT_20000278 = millis();\n  }\n  currentTime = millis();\n  if (((10 < (uint)(currentTime - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = MS5611_ReadADC();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "update_flight_controller_0800411c",
                "puVar1": "ptr1",
                "lVar2": "temp",
                "uVar3": "timeDiff1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "val1",
                "uVar7": "val2",
                "iVar8": "currentTime",
                "uVar9": "val3",
                "uVar10": "val4",
                "uVar11": "val5",
                "uVar12": "val6",
                "uVar13": "ptr2",
                "unaff_r4": "arg1",
                "iVar14": "temp4",
                "iVar15": "temp5",
                "bVar16": "flag",
                "uVar17": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MSP_SendPID",
                "I2C_WriteByte",
                "MSP_SendMotor",
                "millis",
                "MSP_SendAltitude",
                "__subdf3",
                "__addsf3",
                "AHRS_ComputeAngles",
                "__aeabi_f2iz",
                "__muldf3",
                "pow",
                "MSP_SendIdent",
                "__truncdfsf2",
                "__floatsisf",
                "MSP_SendRawIMU",
                "__aeabi_f2d",
                "MSP_SendAttitude",
                "MS5611_ReadADC",
                "PID_Update",
                "__aeabi_fdiv",
                "MSP_SendStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_devices_08004194",
            "code": "\nvoid initializeDevices_08004194(void)\n\n{\n  initializeDevices_08004194();\n  initializeSerial();\n  initializeIMU();\n  initializeMS5611();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_devices_08004194",
                "Devices_Init": "initializeDevices",
                "serialBegin": "initializeSerial",
                "IMU_Init": "initializeIMU",
                "MS5611_Init": "initializeMS5611"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MS5611_Init",
                "serialBegin",
                "IMU_Init",
                "Devices_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "continuous_task_080041ae",
            "code": "\nvoid continuousTask_080041ae(void)\n\n{\n  initializeForkserver(0);\n  initializeEnvironment();\n  do {\n    incrementTick();\n    scheduleTasks();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "continuous_task_080041ae",
                "startForkserver": "initializeForkserver",
                "setup": "initializeEnvironment",
                "HAL_IncTick": "incrementTick",
                "taskScheduler": "scheduleTasks"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "taskScheduler",
                "startForkserver",
                "HAL_IncTick",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "stop_all_motors_080041c4",
            "code": "\nvoid stopAllMotors_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extraOutput;\n  \n  setMotor1PWM(0);\n  setMotor2PWM(0);\n  setMotor3PWM(0);\n  setMotor4PWM(0,extraOutput,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "stop_all_motors_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "extraOutput",
                "Motor1_SetPWM": "setMotor1PWM",
                "Motor2_SetPWM": "setMotor2PWM",
                "Motor3_SetPWM": "setMotor3PWM",
                "Motor4_SetPWM": "setMotor4PWM"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "control_motors_0800426c",
            "code": "\n\n\nvoid controlMotors_0800426c(undefined4 speed1,undefined4 speed2,undefined4 speed3,undefined4 speed4)\n\n{\n  undefined4 subtractionResult1;\n  undefined4 additionResult1;\n  undefined4 subtractionResult2;\n  uint conversion1;\n  uint conversion2;\n  uint conversion3;\n  uint conversion4;\n  \n  subtractionResult1 = __aeabi_fsub();\n  additionResult1 = __addsf3(speed1,speed2);\n  subtractionResult2 = __aeabi_fsub(subtractionResult1,speed3);\n  subtractionResult2 = __addsf3(subtractionResult2,speed4);\n  __aeabi_fsub(subtractionResult2,0x447a0000);\n  conversion1 = __aeabi_f2iz();\n  subtractionResult2 = __aeabi_fsub(additionResult1,speed3);\n  subtractionResult2 = __aeabi_fsub(subtractionResult2,speed4);\n  __aeabi_fsub(subtractionResult2,0x447a0000);\n  conversion2 = __aeabi_f2iz();\n  subtractionResult1 = __addsf3(subtractionResult1,speed3);\n  subtractionResult1 = __aeabi_fsub(subtractionResult1,speed4);\n  __aeabi_fsub(subtractionResult1,0x447a0000);\n  conversion3 = __aeabi_f2iz();\n  subtractionResult1 = __addsf3(speed3,additionResult1);\n  subtractionResult1 = __addsf3(subtractionResult1,speed4);\n  __aeabi_fsub(subtractionResult1,0x447a0000);\n  conversion4 = __aeabi_f2iz();\n  if (999 < (int)conversion4) {\n    conversion4 = 1000;\n  }\n  if (999 < (int)conversion3) {\n    conversion3 = 1000;\n  }\n  if (999 < (int)conversion2) {\n    conversion2 = 1000;\n  }\n  if (999 < (int)conversion1) {\n    conversion1 = 1000;\n  }\n  DAT_200002a0 = conversion2 & ~((int)conversion2 >> 0x1f);\n  DAT_200002a4 = conversion1 & ~((int)conversion1 >> 0x1f);\n  DAT_2000029c = conversion3 & ~((int)conversion3 >> 0x1f);\n  DAT_20000298 = conversion4 & ~((int)conversion4 >> 0x1f);\n  Motor1_SetPWM();\n  Motor2_SetPWM(DAT_2000029c);\n  Motor3_SetPWM(DAT_200002a0);\n  Motor4_SetPWM(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "control_motors_0800426c",
                "param_1": "speed1",
                "param_2": "speed2",
                "param_3": "speed3",
                "param_4": "speed4",
                "uVar1": "subtractionResult1",
                "uVar2": "additionResult1",
                "uVar3": "subtractionResult2",
                "uVar4": "conversion1",
                "uVar5": "conversion2",
                "uVar6": "conversion3",
                "uVar7": "conversion4"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "__addsf3",
                "__aeabi_f2iz",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "print_and_write_data_08004300",
            "code": "\nvoid printAndWriteData_08004300(uint inputValue,byte *data,uint length)\n\n{\n  uint xoredValue;\n  byte *currentByte;\n  \n  serialPrint(&DAT_0800732e);\n  serialWrite(length & 0xff);\n  xoredValue = length & 0xff ^ inputValue;\n  serialWrite(inputValue);\n  for (currentByte = data; (int)currentByte - (int)data < (int)length; currentByte = currentByte + 1) {\n    serialWrite(*currentByte);\n    xoredValue = xoredValue ^ *currentByte;\n  }\n  serialWrite(xoredValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "print_and_write_data_08004300",
                "param_1": "inputValue",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "xoredValue",
                "pbVar2": "currentByte"
            },
            "calling": [
                "MSP_SendPID",
                "MSP_SendMotor",
                "MSP_SendAltitude",
                "MSP_SendRawIMU",
                "MSP_SendAttitude",
                "MSP_SendIdent",
                "MSP_SendStatus"
            ],
            "called": [
                "serialWrite",
                "serialPrint"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "send_frame_to_msp_08004348",
            "code": "\n\n\nvoid sendFrameToMSP_08004348(undefined4 statusCode,uint frameData,undefined4 frameSize)\n\n{\n  undefined4 mspAddress;\n  uint maskedFrameSize;\n  undefined4 framePointer;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  mspAddress = 0x40003e9;\n  maskedFrameSize = frameData & 0xff000000;\n  framePointer = frameSize;\n  MSP_SendFrame(100,&mspAddress,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "send_frame_to_msp_08004348",
                "param_1": "statusCode",
                "param_2": "frameData",
                "param_3": "frameSize",
                "local_10": "mspAddress",
                "local_c": "maskedFrameSize",
                "uStack_8": "framePointer"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "send_frame_with_data_08004384",
            "code": "\n\n\nvoid sendFrameWithData_08004384(undefined4 frameData,undefined4 param2,undefined4 param3,uint frameDataSize)\n\n{\n  undefined4 framePointer;\n  undefined4 constantValue;\n  uint maskedFrameSize;\n  \n  _DAT_200013bd = 0x2a0007;\n  framePointer = _DAT_200013b9;\n  constantValue = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedFrameSize = frameDataSize & 0xff000000;\n  MSP_SendFrame(0x65,&framePointer,0xb,0,frameData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "send_frame_with_data_08004384",
                "param_1": "frameData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "frameDataSize",
                "local_14": "framePointer",
                "uStack_10": "constantValue",
                "local_c": "maskedFrameSize"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "send_frame_080043bc",
            "code": "\nvoid sendFrame_080043bc(void)\n\n{\n  undefined4 firstValue;\n  undefined4 secondValue;\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 copiedValues [2];\n  undefined2 copiedData [6];\n  \n  source = (undefined4 *)&DAT_2000142a;\n  destination = copiedValues;\n  do {\n    firstValue = *source;\n    secondValue = source[1];\n    source = source + 2;\n    *destination = firstValue;\n    destination[1] = secondValue;\n    destination = destination + 2;\n  } while (source != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destination = DAT_2000143a;\n  MSP_SendFrame(0x66,copiedValues,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "send_frame_080043bc",
                "uVar1": "firstValue",
                "uVar2": "secondValue",
                "puVar3": "destination",
                "puVar4": "source",
                "local_24": "copiedValues",
                "local_1c": "copiedData"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "send_frame_with_data_080043f0",
            "code": "\n\n\nvoid sendFrameWithData_080043f0(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 dataArr [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  dataArr[0] = param3;\n  MSP_SendFrame(0x68,&data1,8,dataArr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "send_frame_with_data_080043f0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "dataArr"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "send_frame_to_msp_08004410",
            "code": "\nvoid sendFrameToMSP_08004410(undefined4 unusedParam1,undefined4 unusedParam2,undefined4 frameData)\n\n{\n  undefined4 MSP;\n  undefined4 frameHeader;\n  undefined4 stackVar;\n  \n  MSP = DAT_20001395;\n  frameHeader = CONCAT22((short)((uint)unusedParam2 >> 0x10),DAT_20001399);\n  stackVar = frameData;\n  MSP_SendFrame(0x6c,&MSP,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "send_frame_to_msp_08004410",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "param_3": "frameData",
                "local_10": "MSP",
                "local_c": "frameHeader",
                "uStack_8": "stackVar"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "send_frame_to_msp_08004434",
            "code": "\nvoid sendFrameToMSP_08004434(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 mspData;\n  undefined4 frameInfo;\n  undefined4 stackData;\n  \n  mspData = DAT_200014ab;\n  frameInfo = CONCAT22((short)((uint)param2 >> 0x10),DAT_200014af);\n  stackData = param3;\n  MSP_SendFrame(0x6d,&mspData,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "send_frame_to_msp_08004434",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "mspData",
                "local_c": "frameInfo",
                "uStack_8": "stackData"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "send_frame_with_data_08004458",
            "code": "\nvoid sendFrameWithData_08004458(void)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 tempValue;\n  undefined4 *destPtrTemp;\n  undefined4 *srcPtrTemp;\n  undefined4 dataBuffer [3];\n  undefined2 tempArray [10];\n  \n  destPtr = dataBuffer;\n  srcPtr = &DAT_2000139b;\n  do {\n    srcPtrTemp = srcPtr;\n    destPtrTemp = destPtr;\n    tempValue = srcPtrTemp[1];\n    *destPtrTemp = *srcPtrTemp;\n    destPtrTemp[1] = tempValue;\n    destPtr = destPtrTemp + 2;\n    srcPtr = srcPtrTemp + 2;\n  } while (srcPtrTemp + 2 != (undefined4 *)0x200013b3);\n  destPtrTemp[2] = uRam200013b3;\n  *(undefined2 *)(destPtrTemp + 3) = *(undefined2 *)(srcPtrTemp + 3);\n  MSP_SendFrame(0x70,dataBuffer,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "send_frame_with_data_08004458",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "uVar3": "tempValue",
                "puVar4": "destPtrTemp",
                "puVar5": "srcPtrTemp",
                "local_30": "dataBuffer",
                "local_24": "tempArray"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "handle_error_08004490",
            "code": "\nvoid handleError_08004490(undefined4 deviceName,undefined4 lineNumber)\n\n{\n  HAL_GPIO_WritePin(0x40011000,0x4000,1);\n  HAL_GPIO_WritePin(0x40011000,0x8000,0);\n  HAL_GPIO_WritePin(0x40011000,0x2000,0);\n  do {\n    HAL_GPIO_TogglePin(0x40011000,0x4000);\n    HAL_GPIO_TogglePin(0x40011000,0x8000);\n    HAL_GPIO_TogglePin(0x40011000,0x2000);\n    serialPrint(\"Error with \");\n    serialPrint(deviceName);\n    serialPrint(\" at line: \");\n    serialInt(lineNumber);\n    serialWrite(10);\n    delay_ms(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "handle_error_08004490",
                "param_1": "deviceName",
                "param_2": "lineNumber"
            },
            "calling": [
                "Peripherals_Init",
                "I2C_WriteByte",
                "SystemClock_Config",
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "serialInt",
                "serialWrite",
                "delay_ms",
                "serialPrint",
                "HAL_GPIO_WritePin",
                "HAL_GPIO_TogglePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_system_08004514",
            "code": "\nvoid initializeSystem_08004514(void)\n\n{\n  int oscConfigResult;\n  uint hclkFrequency;\n  undefined4 errorLine;\n  int clockConfigResult;\n  undefined4 errorType;\n  int clockConfigParam;\n  int oscResult;\n  undefined4 clockConfigUnit;\n  int clockConfigResult;\n  undefined4 oscConfigParams [4];\n  undefined4 oscInitResult;\n  undefined4 oscInitFlag;\n  undefined4 oscConfigFlag;\n  undefined4 oscFlag;\n  undefined4 oscFrequency;\n  \n  oscInitResult = 1;\n  oscInitFlag = 0x10;\n  clockConfigResult = 2;\n  oscFlag = 0;\n  oscConfigParams[0] = 2;\n  oscConfigFlag = 2;\n  oscFrequency = 0x380000;\n  oscConfigResult = HAL_RCC_OscConfig(oscConfigParams);\n  if (oscConfigResult == 0) goto LAB_08004540;\n  errorLine = 0x3c;\n  while( true ) {\n    oscConfigResult = _Error_Handler(\"../Src/peripherals.c\",errorLine);\nLAB_08004540:\n    errorType = 0xf;\n    clockConfigUnit = 0x400;\n    clockConfigParam = clockConfigResult;\n    oscResult = oscConfigResult;\n    clockConfigResult = oscConfigResult;\n    clockConfigResult = HAL_RCC_ClockConfig(&errorType,clockConfigResult);\n    if (clockConfigResult == 0) break;\n    errorLine = 0x49;\n  }\n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFrequency / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_system_08004514",
                "local_44": "errorType",
                "local_40": "clockConfigParam",
                "local_3c": "oscResult",
                "local_38": "clockConfigUnit",
                "local_34": "clockConfigResult",
                "local_30": "oscConfigParams",
                "local_20": "oscInitResult",
                "local_1c": "oscInitFlag",
                "local_14": "oscConfigFlag",
                "local_10": "oscFlag",
                "local_c": "oscFrequency",
                "iVar1": "oscConfigResult",
                "uVar2": "hclkFrequency",
                "uVar3": "errorLine",
                "iVar4": "clockConfigResult"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "_Error_Handler",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripherals_0800458c",
            "code": "\n\n\nvoid initializePeripherals_0800458c(void)\n\n{\n  int errorCode;\n  undefined4 lineNumber;\n  int configValue;\n  int timExValue1;\n  int timExValue2;\n  int timPwmConfigValue1;\n  int timPwmConfigValue2;\n  int timPwmConfigValue3;\n  int timPwmConfigValue4;\n  int timPwmConfigValue5;\n  int timPwmConfigValue6;\n  int gpioConfigValue1;\n  int gpioConfigValue2;\n  int gpioConfigValue3;\n  int gpioConfigValue4;\n  int gpioConfigValue5;\n  undefined4 timExConfigValue;\n  int timExConfigValue2;\n  \n  HAL_Init();\n  SystemClock_Config();\n  configValue = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  HAL_GPIO_WritePin(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  HAL_GPIO_WritePin(0x40010800,0x20,0);\n  gpioConfigValue1 = 0xe000;\n  gpioConfigValue2 = 1;\n  gpioConfigValue4 = 2;\n  HAL_GPIO_Init(0x40011000,&gpioConfigValue1);\n  gpioConfigValue1 = 0x20;\n  gpioConfigValue2 = 1;\n  gpioConfigValue4 = 2;\n  HAL_GPIO_Init(0x40010800,&gpioConfigValue1);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  errorCode = HAL_I2C_Init();\n  if (errorCode == 0) goto LAB_0800463a;\n  lineNumber = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  errorCode = _Error_Handler(\"../Src/peripherals.c\",lineNumber);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = errorCode;\n                                  DAT_20001588 = errorCode;\n                                  DAT_2000158c = errorCode;\n                                  DAT_20001594 = errorCode;\n                                  DAT_20001598 = errorCode;\n                                  errorCode = HAL_UART_Init(&DAT_2000157c);\n                                  if (errorCode == 0) break;\n                                  lineNumber = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = configValue;\n                                DAT_200015c4 = errorCode;\n                                DAT_200015cc = errorCode;\n                                DAT_200015d0 = errorCode;\n                                errorCode = HAL_TIM_PWM_Init(&DAT_200015bc);\n                                if (errorCode == 0) break;\n                                lineNumber = 0x88;\n                              }\n                              timExValue1 = errorCode;\n                              timExValue2 = errorCode;\n                              errorCode = HAL_TIMEx_MasterConfigSynchronization(&DAT_200015bc,&timExValue1)\n                              ;\n                              if (errorCode == 0) break;\n                              lineNumber = 0x8f;\n                            }\n                            timPwmConfigValue1 = 0x60;\n                            timPwmConfigValue2 = errorCode;\n                            timPwmConfigValue3 = errorCode;\n                            timPwmConfigValue4 = errorCode;\n                            timPwmConfigValue5 = errorCode;\n                            timPwmConfigValue6 = errorCode;\n                            errorCode = HAL_TIM_PWM_ConfigChannel(&DAT_200015bc,&timPwmConfigValue1,0xc);\n                            if (errorCode == 0) break;\n                            lineNumber = 0x9a;\n                          }\n                          timExConfigValue = 0x2000;\n                          gpioConfigValue1 = errorCode;\n                          gpioConfigValue2 = errorCode;\n                          gpioConfigValue3 = errorCode;\n                          gpioConfigValue4 = errorCode;\n                          gpioConfigValue5 = errorCode;\n                          timExConfigValue2 = errorCode;\n                          errorCode = HAL_TIMEx_ConfigBreakDeadTime(&DAT_200015bc,&gpioConfigValue1);\n                          if (errorCode == 0) break;\n                          lineNumber = 0xa6;\n                        }\n                        HAL_TIM_MspPostInit(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = configValue;\n                        DAT_20001600 = errorCode;\n                        DAT_20001608 = errorCode;\n                        errorCode = HAL_TIM_PWM_Init(&DAT_200015f8);\n                        if (errorCode == 0) break;\n                        lineNumber = 0xc3;\n                      }\n                      timPwmConfigValue1 = errorCode;\n                      timPwmConfigValue2 = errorCode;\n                      errorCode = HAL_TIMEx_MasterConfigSynchronization(&DAT_200015f8,&timPwmConfigValue1);\n                      if (errorCode == 0) break;\n                      lineNumber = 0xca;\n                    }\n                    gpioConfigValue1 = 0x60;\n                    gpioConfigValue2 = errorCode;\n                    gpioConfigValue3 = errorCode;\n                    gpioConfigValue5 = errorCode;\n                    errorCode = HAL_TIM_PWM_ConfigChannel(&DAT_200015f8,&gpioConfigValue1,4);\n                    if (errorCode == 0) break;\n                    lineNumber = 0xd3;\n                  }\n                  HAL_TIM_MspPostInit(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = configValue;\n                  DAT_20001548 = errorCode;\n                  DAT_20001550 = errorCode;\n                  errorCode = HAL_TIM_PWM_Init();\n                  if (errorCode == 0) break;\n                  lineNumber = 0xf0;\n                }\n                timPwmConfigValue1 = 0;\n                timPwmConfigValue2 = 0;\n                errorCode = HAL_TIMEx_MasterConfigSynchronization(&DAT_20001540,&timPwmConfigValue1);\n                if (errorCode == 0) break;\n                lineNumber = 0xf7;\n              }\n              gpioConfigValue1 = 0x60;\n              gpioConfigValue2 = errorCode;\n              gpioConfigValue3 = errorCode;\n              gpioConfigValue5 = errorCode;\n              errorCode = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&gpioConfigValue1,8);\n              if (errorCode == 0) break;\n              lineNumber = 0x100;\n            }\n            configValue = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&gpioConfigValue1,0xc);\n            if (configValue == 0) break;\n            lineNumber = 0x105;\n          }\n          HAL_TIM_MspPostInit(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = configValue;\n          DAT_200014d8 = configValue;\n          errorCode = HAL_TIM_PWM_Init(&DAT_200014c8);\n          if (errorCode == 0) break;\n          lineNumber = 0x122;\n        }\n        timPwmConfigValue1 = errorCode;\n        timPwmConfigValue2 = errorCode;\n        errorCode = HAL_TIMEx_MasterConfigSynchronization(&DAT_200014c8,&timPwmConfigValue1);\n        if (errorCode == 0) break;\n        lineNumber = 0x129;\n      }\n      gpioConfigValue1 = 0x60;\n      gpioConfigValue2 = errorCode;\n      gpioConfigValue3 = errorCode;\n      gpioConfigValue5 = errorCode;\n      errorCode = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&gpioConfigValue1,8);\n      if (errorCode == 0) break;\n      lineNumber = 0x132;\n    }\n    errorCode = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&gpioConfigValue1,0xc);\n    if (errorCode == 0) break;\n    lineNumber = 0x137;\n  }\n  HAL_TIM_MspPostInit(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripherals_0800458c",
                "iVar1": "errorCode",
                "uVar2": "lineNumber",
                "iVar3": "configValue",
                "local_58": "timExValue1",
                "local_54": "timExValue2",
                "local_50": "timPwmConfigValue1",
                "local_4c": "timPwmConfigValue2",
                "local_48": "timPwmConfigValue3",
                "local_40": "timPwmConfigValue4",
                "local_3c": "timPwmConfigValue5",
                "local_38": "timPwmConfigValue6",
                "local_34": "gpioConfigValue1",
                "local_30": "gpioConfigValue2",
                "local_2c": "gpioConfigValue3",
                "local_28": "gpioConfigValue4",
                "local_24": "gpioConfigValue5",
                "local_20": "timExConfigValue",
                "local_1c": "timExConfigValue2"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_I2C_Init",
                "HAL_TIM_PWM_Init",
                "HAL_UART_Init",
                "SystemClock_Config",
                "HAL_TIM_MspPostInit",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "_Error_Handler",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_GPIO_WritePin",
                "HAL_Init",
                "HAL_GPIO_Init",
                "HAL_TIMEx_MasterConfigSynchronization"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_values_0800483c",
            "code": "\nvoid calculate_values_0800483c(int *parameters)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int value1;\n  int value2;\n  int value3;\n  \n  value2 = parameters[0xc];\n  result1 = __addsf3(parameters[7],parameters[9]);\n  value2 = __aeabi_fsub(result1,value2);\n  parameters[10] = value2;\n  if (*parameters == 3) {\n    value2 = __aeabi_fcmpgt(parameters[10],0);\n    if (value2 == 0) {\n      value2 = __aeabi_fcmplt(parameters[10],0xc3340000);\n    }\n    else {\n      value2 = __aeabi_fcmpgt(parameters[10],0x43340000);\n    }\n    if (value2 != 0) {\n      value3 = parameters[10];\n      result1 = __aeabi_fmul(parameters[10],0x43b40000);\n      value2 = __aeabi_fcmpgt(parameters[10],0);\n      value1 = parameters[10];\n      if (value2 == 0) {\n        value1 = value1 + -0x80000000;\n      }\n      result1 = __aeabi_fdiv(result1,value1);\n      value2 = __aeabi_fsub(value3,result1);\n      parameters[10] = value2;\n    }\n  }\n  value3 = parameters[2];\n  value1 = parameters[3];\n  value2 = __aeabi_fmul(parameters[1],parameters[10]);\n  parameters[0xe] = value2;\n  value2 = __addsf3(parameters[10],parameters[0xf]);\n  parameters[0xf] = value2;\n  value2 = __aeabi_fcmplt(parameters[0xf],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = __aeabi_fcmpgt(parameters[0xf],0x43fa0000);\n    if (value2 == 0) {\n      value2 = parameters[0xf];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  parameters[0xf] = value2;\n  value2 = __aeabi_fsub(parameters[0xc],parameters[0xd]);\n  parameters[0x10] = value2;\n  value2 = parameters[0xe];\n  result1 = __aeabi_fmul(value3,parameters[0xf]);\n  result1 = __addsf3(result1,value2);\n  result2 = __aeabi_fmul(value1,parameters[0x10]);\n  value2 = __aeabi_fsub(result1,result2);\n  parameters[0x12] = value2;\n  result1 = __floatsisf(parameters[0x13]);\n  value2 = __aeabi_fcmplt(parameters[0x12],0xc3fa0000);\n  if (value2 == 0) {\n    value2 = __aeabi_fcmpgt(parameters[0x12],0x43fa0000);\n    if (value2 == 0) {\n      value2 = parameters[0x12];\n    }\n    else {\n      value2 = 0x43fa0000;\n    }\n  }\n  else {\n    value2 = -0x3c060000;\n  }\n  value2 = __aeabi_fmul(value2,result1);\n  parameters[0x12] = value2;\n  parameters[0xd] = parameters[0xc];\n  parameters[0xb] = parameters[10];\n  parameters[0x15] = parameters[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_values_0800483c",
                "param_1": "parameters",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "value1",
                "iVar4": "value2",
                "iVar5": "value3"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fdiv",
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_altitude_data_08004a30",
            "code": "\nvoid updateAltitudeData_08004a30(void)\n\n{\n  undefined4 filteredAltitude;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      filteredAltitude = MS5611_GetFilteredAltitude();\n      DAT_20000068 = __aeabi_fmul(filteredAltitude,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      filteredAltitude = MS5611_GetFilteredAltitude();\n      DAT_2000007c = __aeabi_fmul(filteredAltitude,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_altitude_data_08004a30",
                "uVar1": "filteredAltitude"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "MS5611_GetFilteredAltitude",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "calculate_and_set_yaw_roll_pitch_08004a84",
            "code": "\nvoid calculateAndSetYawRollPitch_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = getPitchAngle();\n  DAT_20000134 = getRollAngle();\n  DAT_20000190 = getYawAngle();\n  updateAltitudeUsingPID();\n  iVar1 = __aeabi_fcmpgt(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = __aeabi_fcmplt(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = __aeabi_fcmpgt(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = __aeabi_fcmpgt(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = __aeabi_fcmplt(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = __aeabi_fcmpgt(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      toggleLEDStatus(1,1);\n      PID_Compute(&DAT_200000a8);\n      PID_Compute(&DAT_20000104);\n      PID_Compute(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        PID_Compute(&DAT_2000004c);\n        addSingleFloats(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        stopAllMotors();\n      }\n      else {\n        distributeSpeedToMotors(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      __aeabi_fmul(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = __fixunssfsi();\n      __aeabi_fmul(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = __fixunssfsi();\n      return;\n    }\n  }\n  stopAllMotors();\n  toggleLEDStatus(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "calculate_and_set_yaw_roll_pitch_08004a84",
                "AHRS_GetPitch": "getPitchAngle",
                "AHRS_GetRoll": "getRollAngle",
                "AHRS_GetYaw": "getYawAngle",
                "PID_UpdateAltitude": "updateAltitudeUsingPID",
                "Motor_StopAll": "stopAllMotors",
                "Motor_DistributeSpeed": "distributeSpeedToMotors",
                "__addsf3": "addSingleFloats",
                "toggleLED": "toggleLEDStatus"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "Motor_StopAll",
                "PID_Compute",
                "__addsf3",
                "toggleLED",
                "__aeabi_fcmpgt",
                "__aeabi_fmul",
                "__fixunssfsi",
                "PID_UpdateAltitude",
                "AHRS_GetYaw",
                "__aeabi_fcmplt",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_input_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 processInput_08004c18(undefined input)\n\n{\n  int *pointer1;\n  int counter1;\n  int counter2;\n  ushort *pointer2;\n  \n  DAT_20001636._0_1_ = input;\n  pointer2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      counter1 = HAL_GetTick();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        counter2 = HAL_GetTick();\n      } while ((uint)(counter2 - counter1) < 6);\nLAB_0800281c:\n      pointer1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      pointer1[3] = pointer1[3] & 0xffffffdf;\n      pointer1[3] = pointer1[3] & 0xfffffeff;\n      pointer1[5] = pointer1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      counter1 = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        counter2 = HAL_GetTick();\n        if (5 < (uint)(counter2 - counter1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *pointer2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        pointer2 = pointer2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      counter1 = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        counter2 = HAL_GetTick();\n        if (5 < (uint)(counter2 - counter1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)pointer2;\n    }\n    pointer2 = (ushort *)((int)pointer2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_input_08004c18",
                "param_1": "input",
                "piVar1": "pointer1",
                "iVar2": "counter1",
                "iVar3": "counter2",
                "puVar4": "pointer2"
            },
            "calling": [
                "MSP_SendFrame",
                "serialPrint",
                "_Error_Handler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "process_data_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * processData_08004c30(int *input)\n\n{\n  int tempVar;\n  \n  if (*input != 0x40013800) {\n    return input;\n  }\n  CB_Write(&DAT_20000364,DAT_20001634);\n  tempVar = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) | 1;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "process_data_08004c30",
                "param_1": "input",
                "iVar1": "tempVar"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "CB_Write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "serialBegin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_serial_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initializeSerial_08004c70(void)\n\n{\n  int serialFlushVar;\n  \n  serialFlush();\n  serialFlushVar = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(serialFlushVar + 0x14) = *(uint *)(serialFlushVar + 0x14) | 1;\n    *(uint *)(serialFlushVar + 0xc) = *(uint *)(serialFlushVar + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_serial_08004c70",
                "iVar1": "serialFlushVar"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "serialFlush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "print_string_08004c8c",
            "code": "\nvoid printString_08004c8c(undefined *str)\n\n{\n  uint strLength;\n  undefined *currentChar;\n  \n  currentChar = str;\n  while( true ) {\n    strLength = strlen(str);\n    if (strLength <= (uint)((int)currentChar - (int)str)) break;\n    serialWrite(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "print_string_08004c8c",
                "param_1": "str",
                "uVar1": "strLength",
                "puVar2": "currentChar"
            },
            "calling": [
                "serialInt",
                "MSP_SendFrame",
                "_Error_Handler"
            ],
            "called": [
                "serialWrite",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "print_formatted_data_08004cac",
            "code": "\nvoid printFormattedData_08004cac(undefined4 inputValue)\n\n{\n  siprintf(&DAT_20001636,&DAT_0800735e,inputValue);\n  printToSerial(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "print_formatted_data_08004cac",
                "param_1": "inputValue",
                "serialPrint": "printToSerial"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "configure_interrupt_priorities_08004ccc",
            "code": "\n\n\nvoid configureInterruptPriorities_08004ccc(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  setInterruptPriorityGrouping(3,arg2,_DAT_40021018,1,arg1,1,arg3);\n  setInterruptPriority(0xfffffff4,0);\n  setInterruptPriority(0xfffffff5,0);\n  setInterruptPriority(0xfffffff6,0);\n  setInterruptPriority(0xfffffffb,0);\n  setInterruptPriority(0xfffffffc,0);\n  setInterruptPriority(0xfffffffe,0);\n  setInterruptPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "configure_interrupt_priorities_08004ccc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_NVIC_SetPriority": "setInterruptPriority"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "initialize_gpio_08004d48",
            "code": "\n\n\nvoid initializeGPIO_08004d48(int *gpioAddress,undefined4 param2)\n\n{\n  undefined4 gpioConfig1;\n  undefined4 gpioConfig2;\n  \n  if (*gpioAddress == 0x40005400) {\n    gpioConfig1 = 0xc0;\n    gpioConfig2 = 0x12;\n    HAL_GPIO_Init(0x40010c00,&gpioConfig1,0x40005400,3,gpioAddress,param2);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "initialize_gpio_08004d48",
                "param_1": "gpioAddress",
                "param_2": "param2",
                "local_18": "gpioConfig1",
                "local_14": "gpioConfig2"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataFlags_08004d8c(int *dataAddress)\n\n{\n  int dataValue;\n  \n  dataValue = *dataAddress;\n  if (dataValue == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (dataValue == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (dataValue == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (dataValue == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "param_1": "dataAddress",
                "iVar1": "dataValue"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "initialize_gpio_08004e14",
            "code": "\nvoid initializeGPIO_08004e14(int *gpioPin,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 GPIO_BaseAddress;\n  int gpioValue;\n  undefined4 GPIO_InitValue;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  gpioValue = *gpioPin;\n  if (gpioValue == 0x40012c00) {\n    GPIO_InitValue = 0x800;\n  }\n  else {\n    if (gpioValue != 0x40000000) {\n      if (gpioValue == 0x40000400) {\n        GPIO_InitValue = 3;\n      }\n      else {\n        if (gpioValue != 0x40000800) {\n          return;\n        }\n        GPIO_InitValue = 0x300;\n      }\n      GPIO_BaseAddress = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    GPIO_InitValue = 2;\n  }\n  GPIO_BaseAddress = 0x40010800;\nLAB_08004e2e:\n  localVar3 = 2;\n  localVar1 = 2;\n  localVar2 = param3;\n  HAL_GPIO_Init(GPIO_BaseAddress,&GPIO_InitValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "initialize_gpio_08004e14",
                "param_1": "gpioPin",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "GPIO_BaseAddress",
                "iVar2": "gpioValue",
                "local_18": "GPIO_InitValue",
                "local_14": "localVar1",
                "uStack_10": "localVar2",
                "local_c": "localVar3"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_gpio_pins_08004e7c",
            "code": "\n\n\nvoid initializeGPIOPins_08004e7c(int *pinNumber)\n\n{\n  undefined4 gpioConfig1;\n  undefined4 gpioConfig2;\n  undefined4 gpioConfig3;\n  undefined4 gpioConfig4;\n  \n  if (*pinNumber == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    gpioConfig1 = 0x200;\n    gpioConfig2 = 2;\n    gpioConfig4 = 3;\n    HAL_GPIO_Init(0x40010800,&gpioConfig1);\n    gpioConfig1 = 0x400;\n    gpioConfig2 = 0;\n    gpioConfig3 = 0;\n    HAL_GPIO_Init(0x40010800,&gpioConfig1);\n    HAL_NVIC_SetPriority(0x25,0,0);\n    HAL_NVIC_EnableIRQ(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_gpio_pins_08004e7c",
                "param_1": "pinNumber",
                "local_18": "gpioConfig1",
                "local_14": "gpioConfig2",
                "local_10": "gpioConfig3",
                "local_c": "gpioConfig4"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_EnableIRQ",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_memory_08004f10",
            "code": "\n\n\nvoid initializeMemory_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_memory_08004f10"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f5c": {
            "entrypoint": "0x08004f5c",
            "current_name": "FUN_08004f5c",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "FUN_08004f60",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f64": {
            "entrypoint": "0x08004f64",
            "current_name": "FUN_08004f64",
            "code": "\nvoid HAL_Delay(void)\n\n{\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "I2C_WriteByte",
                "MS5611_Init",
                "_Error_Handler",
                "Devices_Init"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f68": {
            "entrypoint": "0x08004f68",
            "current_name": "initialize_memory_and_call_main_08004f68",
            "code": "\nvoid initializeMemoryAndCallMain_08004f68(void)\n\n{\n  int offset;\n  undefined4 *dataPointer;\n  code *jumpTable;\n  \n  for (offset = 0; (undefined4 *)(offset + 0x20000000) < &DAT_20000228; offset = offset + 4) {\n    *(undefined4 *)(offset + 0x20000000) = *(undefined4 *)(offset + 0x8007448);\n  }\n  for (dataPointer = &DAT_20000228; dataPointer < &DAT_200016a0; dataPointer = dataPointer + 1) {\n    *dataPointer = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x8004f9a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f68": "initialize_memory_and_call_main_08004f68",
                "iVar1": "offset",
                "puVar2": "dataPointer",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  _init();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "frame_dummy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "print_and_reset_string_08004ffc",
            "code": "\nvoid printAndResetString_08004ffc(undefined *string,undefined4 length,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined *printBuffer [2];\n  undefined4 maxStringLength;\n  undefined2 initialStringLength;\n  undefined2 initialArg3;\n  undefined *currentString;\n  undefined4 currentStringLength;\n  undefined4 functionPointer;\n  undefined4 arg2;\n  undefined4 arg1;\n  \n  initialStringLength = 0x208;\n  maxStringLength = 0x7fffffff;\n  currentStringLength = 0x7fffffff;\n  initialArg3 = 0xffff;\n  printBuffer[0] = string;\n  currentString = string;\n  functionPointer = length;\n  arg2 = arg3;\n  arg1 = arg4;\n  _svfiprintf_r(DAT_200001c0,printBuffer,length);\n  *printBuffer[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "print_and_reset_string_08004ffc",
                "param_1": "string",
                "param_2": "length",
                "param_3": "arg3",
                "param_4": "arg4",
                "local_78": "printBuffer",
                "local_70": "maxStringLength",
                "local_6c": "initialStringLength",
                "local_6a": "initialArg3",
                "local_68": "currentString",
                "local_64": "currentStringLength",
                "uStack_c": "functionPointer",
                "uStack_8": "arg2",
                "uStack_4": "arg1"
            },
            "calling": [
                "serialInt"
            ],
            "called": [
                "_svfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "resize_and_copy_buffer_data_08005044",
            "code": "\nundefined4 resizeAndCopyBufferData_08005044(undefined4 *outBuffer,int *bufferInfo,undefined4 inputData,uint inputDataLength)\n\n{\n  int allocatedMemory;\n  uint newBufferSize;\n  uint currentBufferSize;\n  int dataOffset;\n  \n  currentBufferSize = bufferInfo[2];\n  if ((currentBufferSize <= inputDataLength) && ((*(ushort *)(bufferInfo + 3) & 0x480) != 0)) {\n    dataOffset = *bufferInfo - bufferInfo[4];\n    currentBufferSize = (uint)(bufferInfo[5] * 3) / 2;\n    newBufferSize = inputDataLength + 1 + dataOffset;\n    if (currentBufferSize < newBufferSize) {\n      currentBufferSize = newBufferSize;\n    }\n    if ((int)((uint)*(ushort *)(bufferInfo + 3) << 0x15) < 0) {\n      allocatedMemory = _malloc_r(outBuffer,currentBufferSize);\n      if (allocatedMemory == 0) {\nLAB_0800508a:\n        *outBuffer = 0xc;\n        *(ushort *)(bufferInfo + 3) = *(ushort *)(bufferInfo + 3) | 0x40;\n        return 0xffffffff;\n      }\n      memcpy(allocatedMemory,bufferInfo[4],dataOffset);\n      *(ushort *)(bufferInfo + 3) = *(ushort *)(bufferInfo + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      allocatedMemory = _realloc_r(outBuffer,bufferInfo[4],currentBufferSize);\n      if (allocatedMemory == 0) {\n        _free_r(outBuffer,bufferInfo[4]);\n        goto LAB_0800508a;\n      }\n    }\n    bufferInfo[4] = allocatedMemory;\n    *bufferInfo = allocatedMemory + dataOffset;\n    bufferInfo[5] = currentBufferSize;\n    bufferInfo[2] = currentBufferSize - dataOffset;\n    currentBufferSize = inputDataLength;\n  }\n  if (inputDataLength <= currentBufferSize) {\n    currentBufferSize = inputDataLength;\n  }\n  memmove(*bufferInfo,inputData,currentBufferSize);\n  bufferInfo[2] = bufferInfo[2] - currentBufferSize;\n  *bufferInfo = currentBufferSize + *bufferInfo;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "resize_and_copy_buffer_data_08005044",
                "param_1": "outBuffer",
                "param_2": "bufferInfo",
                "param_3": "inputData",
                "param_4": "inputDataLength",
                "iVar1": "allocatedMemory",
                "uVar2": "newBufferSize",
                "uVar3": "currentBufferSize",
                "iVar4": "dataOffset"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "memmove",
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "formatted_output_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint formattedOutput_080050fc(undefined4 *paramBuffer,int *flags,byte *format,int *argList)\n\n{\n  int result;\n  int numChars;\n  int *argListPtr;\n  bool isNumber;\n  byte *currentByte;\n  byte *nextByte;\n  int mallocStatus;\n  int *argListPtr;\n  uint argFlags;\n  int fieldWidth;\n  undefined4 padding;\n  int precision;\n  int totalChars;\n  byte conversionSpecifier;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined hashFlag;\n  undefined4 zeroFlag;\n  \n  argListPtr = argList;\n  if (((int)((uint)*(ushort *)(flags + 3) << 0x18) < 0) && (flags[4] == 0)) {\n    result = _malloc_r(paramBuffer,0x40);\n    *flags = result;\n    flags[4] = result;\n    if (result == 0) {\n      *paramBuffer = 0xc;\n      return -1;\n    }\n    flags[5] = 0x40;\n  }\n  totalChars = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  currentByte = format;\nLAB_08005146:\n  nextByte = currentByte;\n  if (*nextByte != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  currentByte = nextByte + 1;\n  if (*nextByte != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)nextByte - (int)format;\n  if (result != 0) {\n    numChars = __ssputs_r(paramBuffer,flags,format,result);\n    if (numChars == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(flags + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return totalChars;\n    }\n    totalChars = totalChars + result;\n  }\n  if (*nextByte == 0) goto LAB_080052ac;\n  argFlags = 0;\n  precision = 0;\n  fieldWidth = -1;\n  padding = 0;\n  hashFlag = 0;\n  zeroFlag = 0;\n  currentByte = nextByte + 1;\n  while( true ) {\n    result = memchr(&DAT_08007379,*currentByte);\n    format = currentByte + 1;\n    if (result == 0) break;\n    argFlags = 1 << (result + 0xf7ff8c87U & 0xff) | argFlags;\n    currentByte = format;\n  }\n  if ((int)(argFlags << 0x1b) < 0) {\n    hashFlag = 0x20;\n  }\n  if ((int)(argFlags << 0x1c) < 0) {\n    hashFlag = 0x2b;\n  }\n  if (*currentByte == 0x2a) {\n    argListPtr = argListPtr + 1;\n    result = *argListPtr;\n    argListPtr = argListPtr;\n    if (result < 0) {\n      precision = -result;\n      argFlags = argFlags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    isNumber = false;\n    result = precision;\n    format = currentByte;\n    while( true ) {\n      if (9 < *format - 0x30) break;\n      result = result * 10 + (*format - 0x30);\n      isNumber = true;\n      format = format + 1;\n    }\n    if (!isNumber) goto LAB_080051fc;\n  }\n  precision = result;\nLAB_080051fc:\n  if (*format == 0x2e) {\n    if (format[1] == 0x2a) {\n      format = format + 2;\n      argListPtr = argListPtr + 1;\n      fieldWidth = *argListPtr;\n      argListPtr = argListPtr;\n      if (fieldWidth < 0) {\n        fieldWidth = -1;\n      }\n    }\n    else {\n      isNumber = false;\n      result = 0;\n      fieldWidth = 0;\n      while( true ) {\n        format = format + 1;\n        if (9 < *format - 0x30) break;\n        result = result * 10 + (*format - 0x30);\n        isNumber = true;\n      }\n      if (isNumber) {\n        fieldWidth = result;\n      }\n    }\n  }\n  result = memchr(&DAT_0800737f,*format,3);\n  if (result != 0) {\n    format = format + 1;\n    argFlags = argFlags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  conversionSpecifier = *format;\n  format = format + 1;\n  result = memchr(\"efgEFG\",conversionSpecifier,6);\n  if (result == 0) {\n    mallocStatus = _printf_i(paramBuffer,&argFlags,flags,0x8005045,&argListPtr);\n    if (mallocStatus == -1) goto LAB_080052ac;\n  }\n  else {\n    argListPtr = (int *)(((int)argListPtr + 7U & 0xfffffff8) + 8);\n  }\n  totalChars = totalChars + mallocStatus;\n  currentByte = format;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "formatted_output_080050fc",
                "param_1": "paramBuffer",
                "param_2": "flags",
                "param_3": "format",
                "param_4": "argList",
                "iVar1": "result",
                "iVar2": "numChars",
                "piVar3": "argListPtr",
                "bVar4": "isNumber",
                "pbVar5": "currentByte",
                "pbVar6": "nextByte",
                "unaff_r9": "mallocStatus",
                "local_8c": "argListPtr",
                "local_88": "argFlags",
                "local_84": "fieldWidth",
                "local_80": "padding",
                "local_7c": "precision",
                "local_74": "totalChars",
                "local_70": "conversionSpecifier",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "hashFlag",
                "local_30": "zeroFlag"
            },
            "calling": [
                "siprintf"
            ],
            "called": [
                "memchr",
                "_malloc_r",
                "__ssputs_r",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 inputValue,uint *data,uint *outputCount,undefined4 param4,code *callback)\n\n{\n  int index;\n  int result;\n  uint maxCount;\n  uint count;\n  bool flag;\n  \n  maxCount = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxCount = data[2];\n  }\n  *outputCount = maxCount;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *outputCount = maxCount + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *outputCount = *outputCount + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *outputCount); index = index + 1) {\n      result = (*callback)(inputValue,param4,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxCount = (uint)*(byte *)((int)data + 0x43);\n  if (maxCount != 0) {\n    maxCount = 1;\n  }\n  count = maxCount;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxCount + 0x43) = 0x30;\n    count = maxCount + 2;\n    *(undefined *)((int)data + maxCount + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(inputValue,param4,(int)data + 0x43,count);\n  if (index != -1) {\n    maxCount = data[3];\n    flag = (*data & 6) != 4;\n    if (flag) {\n      maxCount = 0;\n    }\n    count = 0;\n    if (!flag) {\n      maxCount = maxCount - *outputCount;\n    }\n    if (!flag) {\n      maxCount = maxCount & ~((int)maxCount >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxCount = maxCount + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (maxCount == count) {\n        return 0;\n      }\n      index = (*callback)(inputValue,param4,(int)data + 0x1a,1);\n      if (index == -1) break;\n      count = count + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "inputValue",
                "param_2": "data",
                "param_3": "outputCount",
                "param_4": "param4",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "maxCount",
                "uVar4": "count",
                "bVar5": "flag"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "perform_formatted_output_080053d4",
            "code": "\nuint performFormattedOutput_080053d4(undefined4 flags,uint *argList,undefined4 width,code *outputFunction,uint **numArgsStored)\n\n{\n  byte byteValue;\n  int index;\n  uint *argPtr;\n  int returnValue;\n  char *digitChars;\n  uint numValue;\n  uint **argPtrPtr;\n  char **strPtrPtr;\n  uint value1;\n  uint value2;\n  char *strPtr1;\n  char *strPtr2;\n  uint localArray [2];\n  \n  byteValue = *(byte *)(argList + 6);\n  strPtr2 = (char *)((int)argList + 0x43);\n  if (byteValue != 0x6e) {\n    if (byteValue < 0x6f) {\n      if (byteValue != 99) {\n        if (byteValue < 100) {\n          if (byteValue == 0) goto LAB_0800558e;\n          if (byteValue != 0x58) goto LAB_08005404;\n          *(undefined *)((int)argList + 0x45) = 0x58;\n          digitChars = \"0123456789ABCDEF\";\nLAB_0800551e:\n          numValue = *argList;\n          argPtr = *numArgsStored;\n          *numArgsStored = argPtr + 1;\n          if (((numValue & 0x80) == 0) && ((int)(numValue << 0x19) < 0)) {\n            value1 = (uint)*(ushort *)argPtr;\n          }\n          else {\n            value1 = *argPtr;\n          }\n          if ((int)(numValue << 0x1f) < 0) {\n            *argList = numValue | 0x20;\n          }\n          if (value1 == 0) {\n            *argList = *argList & 0xffffffdf;\n          }\n          numValue = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)argList + 0x43) = 0;\n        }\n        else {\n          if ((byteValue != 100) && (byteValue != 0x69)) goto LAB_08005404;\n          value1 = *argList;\n          argPtr = *numArgsStored;\n          if ((value1 & 0x80) == 0) {\n            *numArgsStored = argPtr + 1;\n            if ((value1 & 0x40) == 0) goto LAB_08005424;\n            value1 = (uint)(short)*(ushort *)argPtr;\n          }\n          else {\n            *numArgsStored = argPtr + 1;\nLAB_08005424:\n            value1 = *argPtr;\n          }\n          if ((int)value1 < 0) {\n            value1 = -value1;\n            *(undefined *)((int)argList + 0x43) = 0x2d;\n          }\n          digitChars = \"0123456789ABCDEF\";\n          numValue = 10;\n        }\n        value2 = argList[1];\n        argList[2] = value2;\n        strPtr1 = strPtr2;\n        if ((int)value2 < 0) {\n          if (value1 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)argList + 0x42) = *digitChars;\n          strPtr1 = (char *)((int)argList + 0x42);\n        }\n        else {\n          *argList = *argList & 0xfffffffb;\n          if (value1 == 0) {\n            if (value2 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              value2 = value1 / numValue;\n              strPtr1 = strPtr1 + -1;\n              *strPtr1 = digitChars[value1 - numValue * value2];\n              value1 = value2;\n            } while (value2 != 0);\n          }\n        }\n        if (((numValue == 8) && ((int)(*argList << 0x1f) < 0)) && ((int)argList[1] <= (int)argList[4]))\n        {\n          strPtr1[-1] = '0';\n          strPtr1 = strPtr1 + -1;\n        }\n        argList[4] = (int)strPtr2 - (int)strPtr1;\n        strPtr2 = strPtr1;\n        goto LAB_080054fa;\n      }\n      argPtr = *numArgsStored;\n      *numArgsStored = argPtr + 1;\n      *(char *)((int)argList + 0x42) = (char)*argPtr;\nLAB_08005464:\n      strPtr2 = (char *)((int)argList + 0x42);\n      value1 = 1;\n    }\n    else {\n      if (byteValue != 0x73) {\n        if (byteValue < 0x74) {\n          if (byteValue == 0x6f) {\nLAB_0800548a:\n            value1 = *argList;\n            argPtr = *numArgsStored;\n            if ((value1 & 0x80) == 0) {\n              *numArgsStored = argPtr + 1;\n              if ((value1 & 0x40) == 0) goto LAB_08005498;\n              value1 = (uint)*(ushort *)argPtr;\n            }\n            else {\n              *numArgsStored = argPtr + 1;\nLAB_08005498:\n              value1 = *argPtr;\n            }\n            if (byteValue == 0x6f) {\n              numValue = 8;\n            }\n            else {\n              numValue = 10;\n            }\n            digitChars = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byteValue == 0x70) {\n            *argList = *argList | 0x20;\nLAB_0800544a:\n            digitChars = \"0123456789abcdef\";\n            *(undefined *)((int)argList + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byteValue == 0x75) goto LAB_0800548a;\n          if (byteValue == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)argList + 0x42) = byteValue;\n        goto LAB_08005464;\n      }\n      strPtrPtr = (char **)*numArgsStored;\n      *numArgsStored = (uint *)(strPtrPtr + 1);\n      strPtr2 = *strPtrPtr;\n      index = memchr(strPtr2,0,argList[1]);\n      if (index != 0) {\n        argList[1] = index - (int)strPtr2;\n      }\n      value1 = argList[1];\n    }\n    argList[4] = value1;\n    *(undefined *)((int)argList + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  value1 = *argList;\n  argPtrPtr = (uint **)*numArgsStored;\n  numValue = argList[5];\n  if ((value1 & 0x80) == 0) {\n    *numArgsStored = (uint *)(argPtrPtr + 1);\n    argPtr = *argPtrPtr;\n    if ((value1 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)argPtr = (short)numValue;\n  }\n  else {\n    *numArgsStored = (uint *)(argPtrPtr + 1);\n    argPtr = *argPtrPtr;\nLAB_0800557a:\n    *argPtr = numValue;\n  }\nLAB_0800558e:\n  argList[4] = 0;\nLAB_080054fa:\n  index = _printf_common(flags,argList,localArray,width,outputFunction);\n  if ((index == -1) || (index = (*outputFunction)(flags,width,strPtr2,argList[4]), index == -1)) {\nLAB_0800550e:\n    value1 = 0xffffffff;\n  }\n  else {\n    if ((int)(*argList << 0x1e) < 0) {\n      for (index = 0; index < (int)(argList[3] - localArray[0]); index = index + 1) {\n        returnValue = (*outputFunction)(flags,width,(int)argList + 0x19,1);\n        if (returnValue == -1) goto LAB_0800550e;\n      }\n    }\n    value1 = argList[3];\n    if ((int)argList[3] < (int)localArray[0]) {\n      value1 = localArray[0];\n    }\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "perform_formatted_output_080053d4",
                "param_1": "flags",
                "param_2": "argList",
                "param_3": "width",
                "param_4": "outputFunction",
                "param_5": "numArgsStored",
                "bVar1": "byteValue",
                "iVar2": "index",
                "puVar3": "argPtr",
                "iVar4": "returnValue",
                "pcVar5": "digitChars",
                "uVar6": "numValue",
                "ppuVar7": "argPtrPtr",
                "ppcVar8": "strPtrPtr",
                "uVar9": "value1",
                "uVar10": "value2",
                "pcVar11": "strPtr1",
                "pcVar12": "strPtr2",
                "local_24": "localArray"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *string,char target_character,int string_length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + string_length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != target_character);\n  return next_char;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "target_character",
                "param_3": "string_length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "calling": [
                "_svfiprintf_r",
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int startIndex,undefined *source,int length)\n\n{\n  undefined *destinationEnd;\n  undefined *destination;\n  \n  destination = (undefined *)(startIndex + -1);\n  destinationEnd = source + length;\n  for (; source != destinationEnd; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "startIndex",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destinationEnd",
                "puVar2": "destination"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_modify_array_08005646",
            "code": "\nvoid copyAndModifyArray_08005646(undefined *destinationArray,undefined *sourceArray,int arrayLength)\n\n{\n  undefined *endOfSourceArray;\n  \n  endOfSourceArray = sourceArray + arrayLength;\n  if ((sourceArray < destinationArray) && (destinationArray < endOfSourceArray)) {\n    destinationArray = destinationArray + arrayLength;\n    arrayLength = arrayLength - (int)endOfSourceArray;\n    while (endOfSourceArray + arrayLength != (undefined *)0x0) {\n      endOfSourceArray = endOfSourceArray + -1;\n      destinationArray = destinationArray + -1;\n      *destinationArray = *endOfSourceArray;\n    }\n    return;\n  }\n  destinationArray = destinationArray + -1;\n  for (; sourceArray != endOfSourceArray; sourceArray = sourceArray + 1) {\n    destinationArray = destinationArray + 1;\n    *destinationArray = *sourceArray;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_modify_array_08005646",
                "param_1": "destinationArray",
                "param_2": "sourceArray",
                "param_3": "arrayLength",
                "puVar1": "endOfSourceArray"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "allocate_memory_block_0800567c",
            "code": "\nvoid allocateMemoryBlock_0800567c(undefined4 *resultPtr,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int **tempPtr;\n  int **tempPtr1;\n  int **tempPtr2;\n  int *tempPtr3;\n  int **tempPtr4;\n  int **tempPtr5;\n  \n  if (size == 0) {\n    return;\n  }\n  tempPtr5 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    tempPtr5 = (int **)((int)tempPtr5 + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  tempPtr2 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    tempPtr5[1] = (int *)0x0;\n    tempPtr1 = tempPtr;\n    DAT_200002ac = tempPtr5;\n  }\n  else {\n    tempPtr2 = DAT_200002ac;\n    if (tempPtr5 < DAT_200002ac) {\n      tempPtr1 = (int **)*tempPtr5;\n      tempPtr2 = (int **)((int)tempPtr5 + (int)tempPtr1);\n      if (DAT_200002ac == tempPtr2) {\n        tempPtr3 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        tempPtr2 = (int **)((int)tempPtr3 + (int)tempPtr1);\n        *tempPtr5 = (int *)tempPtr2;\n      }\n      tempPtr5[1] = (int *)DAT_200002ac;\n      DAT_200002ac = tempPtr5;\n    }\n    else {\n      do {\n        tempPtr4 = tempPtr2;\n        tempPtr2 = (int **)tempPtr4[1];\n        if (tempPtr2 == (int **)0x0) break;\n      } while (tempPtr2 <= tempPtr5);\n      tempPtr1 = (int **)*tempPtr4;\n      if ((int **)((int)tempPtr4 + (int)tempPtr1) == tempPtr5) {\n        tempPtr1 = (int **)((int)tempPtr1 + (int)*tempPtr5);\n        *tempPtr4 = (int *)tempPtr1;\n        if (tempPtr2 == (int **)((int)tempPtr4 + (int)tempPtr1)) {\n          tempPtr3 = *tempPtr2;\n          tempPtr2 = (int **)tempPtr2[1];\n          tempPtr1 = (int **)((int)tempPtr1 + (int)tempPtr3);\n          *tempPtr4 = (int *)tempPtr1;\n          tempPtr4[1] = (int *)tempPtr2;\n        }\n      }\n      else if (tempPtr5 < (int **)((int)tempPtr4 + (int)tempPtr1)) {\n        *resultPtr = 0xc;\n      }\n      else {\n        tempPtr1 = (int **)((int)tempPtr5 + (int)*tempPtr5);\n        if (tempPtr2 == tempPtr1) {\n          tempPtr3 = *tempPtr2;\n          tempPtr2 = (int **)tempPtr2[1];\n          tempPtr1 = (int **)((int)tempPtr3 + (int)*tempPtr5);\n          *tempPtr5 = (int *)tempPtr1;\n        }\n        tempPtr5[1] = (int *)tempPtr2;\n        tempPtr4[1] = (int *)tempPtr5;\n      }\n    }\n  }\n  __malloc_unlock(resultPtr,tempPtr1,tempPtr2,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "allocate_memory_block_0800567c",
                "param_1": "resultPtr",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "tempPtr",
                "ppiVar1": "tempPtr1",
                "ppiVar2": "tempPtr2",
                "piVar3": "tempPtr3",
                "ppiVar4": "tempPtr4",
                "ppiVar5": "tempPtr5"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *size_out,uint size_in)\n\n{\n  uint *current_block;\n  int remaining_size;\n  uint *previous_block;\n  uint difference;\n  uint *new_block;\n  uint total_size;\n  \n  total_size = (size_in + 3 & 0xfffffffc) + 8;\n  if (total_size < 0xc) {\n    total_size = 0xc;\n  }\n  if (((int)total_size < 0) || (total_size < size_in)) {\n    *size_out = 0xc;\n  }\n  else {\n    __malloc_lock();\n    current_block = DAT_200002ac;\n    new_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - total_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (new_block == previous_block) {\n            current_block = (uint *)new_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (new_block != previous_block) {\n            new_block[1] = (uint)current_block;\n            new_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = total_size;\n          new_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_08005778;\n      }\n      new_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = _sbrk_r(size_out);\n    }\n    current_block = (uint *)_sbrk_r(size_out,total_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((new_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == new_block ||\n        (remaining_size = _sbrk_r(size_out,(int)new_block - (int)current_block), remaining_size != -1)))) {\n      *new_block = total_size;\nLAB_08005778:\n      __malloc_unlock(size_out);\n      total_size = (int)new_block + 0xbU & 0xfffffff8;\n      remaining_size = total_size - (int)(new_block + 1);\n      if (remaining_size != 0) {\n        *(int *)((int)new_block + remaining_size) = -remaining_size;\n        return total_size;\n      }\n      return total_size;\n    }\n    *size_out = 0xc;\n    __malloc_unlock(size_out);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "size_out",
                "param_2": "size_in",
                "puVar1": "current_block",
                "iVar2": "remaining_size",
                "puVar3": "previous_block",
                "uVar4": "difference",
                "puVar5": "new_block",
                "uVar6": "total_size"
            },
            "calling": [
                "_svfiprintf_r",
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_or_copy_data_080057d0",
            "code": "\nint allocate_or_copy_data_080057d0(undefined4 source,int data,uint size,undefined4 extra_param)\n\n{\n  int result;\n  uint usable_size;\n  \n  if (data != 0) {\n    if (size == 0) {\n      _free_r();\n      result = 0;\n    }\n    else {\n      usable_size = _malloc_usable_size_r();\n      result = data;\n      if ((usable_size < size) && (result = _malloc_r(source,size), result != 0)) {\n        memcpy(result,data,size);\n        _free_r(source,data);\n      }\n    }\n    return result;\n  }\n  result = _malloc_r(source,size,size,extra_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_or_copy_data_080057d0",
                "param_1": "source",
                "param_2": "data",
                "param_3": "size",
                "param_4": "extra_param",
                "iVar1": "result",
                "uVar2": "usable_size"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "allocate_memory_block_0800581c",
            "code": "\nvoid allocateMemoryBlock_0800581c(int *outputAddress,undefined4 size)\n\n{\n  int allocatedAddress;\n  \n  DAT_2000169c = 0;\n  allocatedAddress = _sbrk(size);\n  if ((allocatedAddress == -1) && (DAT_2000169c != 0)) {\n    *outputAddress = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "allocate_memory_block_0800581c",
                "param_1": "outputAddress",
                "param_2": "size",
                "iVar1": "allocatedAddress"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_result_08005840",
            "code": "\nint calculateResult_08005840(undefined4 arg1,int arg2)\n\n{\n  int result;\n  \n  result = *(int *)(arg2 + -4) + -4;\n  if (*(int *)(arg2 + -4) < 0) {\n    result = result + *(int *)(arg2 + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "calculate_asin_08005854",
            "code": "\nundefined8 calculate_asin_08005854(undefined4 input_1,undefined4 input_2)\n\n{\n  int comparison_result;\n  undefined4 *errno_ptr;\n  int *errno_value_ptr;\n  undefined8 asin_result;\n  undefined8 absolute_value;\n  undefined4 math_code;\n  undefined *math_code_name;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_1_copy_2;\n  undefined4 input_2_copy_2;\n  undefined8 nan_value;\n  int comparison_result_2;\n  \n  asin_result = __ieee754_asin();\n  if (DAT_20000224 == -1) {\n    return asin_result;\n  }\n  comparison_result_2 = __unorddf2(input_1,input_2,input_1,input_2);\n  if (comparison_result_2 != 0) {\n    return asin_result;\n  }\n  absolute_value = fabs(input_1,input_2);\n  comparison_result = __aeabi_dcmpgt((int)absolute_value,(int)((ulonglong)absolute_value >> 0x20),0,0x3ff00000);\n  if (comparison_result == 0) {\n    return asin_result;\n  }\n  math_code = 1;\n  math_code_name = &DAT_080073ac;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_1_copy_2 = input_1;\n  input_2_copy_2 = input_2;\n  nan_value = nan(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    comparison_result = matherr(&math_code);\n    if (comparison_result != 0) goto LAB_080058d0;\n  }\n  errno_ptr = (undefined4 *)__errno();\n  *errno_ptr = 0x21;\nLAB_080058d0:\n  if (comparison_result_2 != 0) {\n    errno_value_ptr = (int *)__errno();\n    *errno_value_ptr = comparison_result_2;\n  }\n  return nan_value;\n}\n\n",
            "renaming": {
                "FUN_08005854": "calculate_asin_08005854",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "comparison_result",
                "puVar2": "errno_ptr",
                "piVar3": "errno_value_ptr",
                "uVar4": "asin_result",
                "uVar5": "absolute_value",
                "local_48": "math_code",
                "local_44": "math_code_name",
                "local_40": "input_1_copy",
                "uStack_3c": "input_2_copy",
                "local_38": "input_1_copy_2",
                "uStack_34": "input_2_copy_2",
                "local_30": "nan_value",
                "local_28": "comparison_result_2"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "fabs",
                "nan",
                "__unorddf2",
                "__errno",
                "__ieee754_asin",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058fc": {
            "entrypoint": "0x080058fc",
            "current_name": "FUN_080058fc",
            "code": "\nundefined8 __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  \n  uVar5 = param_4 & 0x7fffffff;\n  if ((0x7ff00000 < (uVar5 | (-param_3 | param_3) >> 0x1f)) ||\n     (uVar3 = param_2 & 0x7fffffff, 0x7ff00000 < (uVar3 | (-param_1 | param_1) >> 0x1f))) {\n    uVar6 = __aeabi_dadd(param_1,param_2,param_3,param_4,param_4);\n    return uVar6;\n  }\n  if ((param_4 + 0xc0100000 | param_3) == 0) {\n    uVar6 = atan();\n    return uVar6;\n  }\n  uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n  if ((param_1 | uVar3) == 0) {\n    if (uVar2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (uVar2 != 3) {\n      return CONCAT44(param_2,param_1);\n    }\nLAB_0800613e:\n    uVar6 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((param_3 | uVar5) != 0) {\n      if (uVar5 == 0x7ff00000) {\n        if (uVar3 == 0x7ff00000) {\n          if (uVar2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (uVar2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (uVar2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (uVar2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (uVar2 != 3) {\n          if (uVar2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (uVar3 != 0x7ff00000) {\n        iVar4 = (int)(uVar3 - uVar5) >> 0x14;\n        if (iVar4 < 0x3d) {\n          if (((int)param_4 < 0) && (iVar4 + 0x3c < 0 != SCARRY4(iVar4,0x3c))) {\n            uVar6 = 0;\n          }\n          else {\n            __divdf3(param_1,param_2);\n            fabs();\n            uVar6 = atan();\n          }\n        }\n        else {\n          uVar6 = 0x3ff921fb54442d18;\n        }\n        iVar4 = (int)((ulonglong)uVar6 >> 0x20);\n        uVar1 = (undefined4)uVar6;\n        if (uVar2 == 1) {\n          return CONCAT44(iVar4 + -0x80000000,uVar1);\n        }\n        if (uVar2 == 2) {\n          uVar7 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar6 = 0x400921fb54442d18;\n        }\n        else {\n          if (uVar2 == 0) {\n            return uVar6;\n          }\n          uVar6 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar7 = 0x400921fb54442d18;\n        }\n        uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                         (int)((ulonglong)uVar7 >> 0x20));\n        return uVar6;\n      }\n    }\n    if ((int)param_2 < 0) {\n      uVar6 = 0xbff921fb54442d18;\n    }\n    else {\n      uVar6 = 0x3ff921fb54442d18;\n    }\n  }\n  return uVar6;\n}\n\n",
            "renaming": {},
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_power_08005900",
            "code": "\nundefined8 calculate_power_08005900(undefined4 base1,undefined4 base2,undefined4 exp1,undefined4 exp2)\n\n{\n  char flag;\n  int result;\n  int *errnoPtr;\n  undefined4 *errnoValPtr;\n  int finiteResult;\n  undefined4 power1;\n  undefined4 power2;\n  undefined8 result1;\n  undefined8 result2;\n  undefined4 errorCode;\n  undefined *errorMsgPtr;\n  undefined4 base1Cpy;\n  undefined4 base2Cpy;\n  undefined4 exp1Cpy;\n  undefined4 exp2Cpy;\n  undefined8 finalResult;\n  int errorValue;\n  \n  result1 = __ieee754_pow();\n  flag = DAT_20000224;\n  power1 = (undefined4)((ulonglong)result1 >> 0x20);\n  power2 = (undefined4)result1;\n  if (DAT_20000224 == -1) {\n    return result1;\n  }\n  result = __unorddf2(exp1,exp2,exp1,exp2);\n  if (result != 0) {\n    return result1;\n  }\n  result = __unorddf2(base1,base2,base1,base2);\n  base1Cpy = base1;\n  base2Cpy = base2;\n  exp1Cpy = exp1;\n  exp2Cpy = exp2;\n  if (result == 0) {\n    result = __aeabi_dcmpeq(base1,base2,0,0);\n    if (result != 0) {\n      result = __aeabi_dcmpeq(exp1,exp2,0,0);\n      if (result != 0) {\n        errorCode = 1;\n        errorMsgPtr = &DAT_080073b1;\n        finalResult = 0;\n        errorValue = 0;\n        if (flag != '\\0') {\n          finalResult = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = finite(exp1,exp2);\n      if (result == 0) {\n        return result1;\n      }\n      result = __aeabi_dcmplt(exp1,exp2,0,0);\n      if (result == 0) {\n        return result1;\n      }\n      errorCode = 1;\n      errorMsgPtr = &DAT_080073b1;\n      errorValue = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      finalResult = 0xfff0000000000000;\n      errorValue = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = finite(power2,power1);\n    if (((result != 0) || (finiteResult = finite(base1,base2), finiteResult == 0)) ||\n       (finiteResult = finite(exp1,exp2), finiteResult == 0)) {\n      result = __aeabi_dcmpeq(power2,power1,0,0);\n      if (result == 0) {\n        return result1;\n      }\n      result = finite(base1,base2);\n      if (result == 0) {\n        return result1;\n      }\n      result = finite(exp1,exp2);\n      if (result == 0) {\n        return result1;\n      }\n      errorCode = 4;\n      errorMsgPtr = &DAT_080073b1;\n      errorValue = 0;\n      finalResult._0_4_ = 0;\n      finalResult._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    errorValue = __unorddf2(power2,power1);\n    flag = DAT_20000224;\n    if (errorValue != 0) {\n      errorMsgPtr = &DAT_080073b1;\n      errorCode = 1;\n      errorValue = result;\n      if (DAT_20000224 != '\\0') {\n        finalResult = __divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      errorMsgPtr = &DAT_080073b1;\n      errorCode = 1;\n      finalResult = 0;\n      goto LAB_08005978;\n    }\n    errorMsgPtr = &DAT_080073b1;\n    errorCode = 3;\n    if (DAT_20000224 == '\\0') {\n      finalResult._0_4_ = 0xe0000000;\n      finalResult._4_4_ = 0x47efffff;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        result1 = __muldf3(exp1,exp2,0,0x3fe00000);\n        result2 = rint();\n        result = __aeabi_dcmpeq((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                               (int)((ulonglong)result2 >> 0x20));\n        if (result == 0) {\n          finalResult._0_4_ = 0xe0000000;\n          finalResult._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = matherr(&errorCode);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      finalResult._0_4_ = 0;\n      finalResult._4_4_ = 0x7ff00000;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        result1 = __muldf3(exp1,exp2,0,0x3fe00000);\n        result2 = rint();\n        result = __aeabi_dcmpeq((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                               (int)((ulonglong)result2 >> 0x20));\n        if (result == 0) {\n          finalResult._0_4_ = 0;\n          finalResult._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    errnoValPtr = (undefined4 *)__errno();\n    power2 = 0x22;\n  }\n  else {\n    result = __aeabi_dcmpeq(exp1,exp2,0,0);\n    if (result == 0) {\n      return result1;\n    }\n    errorCode = 1;\n    errorMsgPtr = &DAT_080073b1;\n    finalResult = 0x3ff0000000000000;\n    errorValue = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = matherr(&errorCode);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    errnoValPtr = (undefined4 *)__errno();\n    power2 = 0x21;\n  }\n  *errnoValPtr = power2;\nLAB_080059d0:\n  if (errorValue != 0) {\n    errnoPtr = (int *)__errno();\n    *errnoPtr = errorValue;\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_power_08005900",
                "param_1": "base1",
                "param_2": "base2",
                "param_3": "exp1",
                "param_4": "exp2",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "errnoPtr",
                "puVar4": "errnoValPtr",
                "iVar5": "finiteResult",
                "uVar6": "power1",
                "uVar7": "power2",
                "uVar8": "result1",
                "uVar9": "result2",
                "local_50": "errorCode",
                "local_4c": "errorMsgPtr",
                "local_48": "base1Cpy",
                "uStack_44": "base2Cpy",
                "local_40": "exp1Cpy",
                "uStack_3c": "exp2Cpy",
                "local_38": "finalResult",
                "local_30": "errorValue"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__ieee754_pow",
                "__unorddf2",
                "finite",
                "__muldf3",
                "__errno",
                "__aeabi_dcmpeq",
                "rint",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "calculate_square_root_08005bc8",
            "code": "\nundefined8 calculateSquareRoot_08005bc8(undefined4 input1,undefined4 input2)\n\n{\n  char charVariable;\n  int intVariable;\n  int *pointerToInt;\n  undefined4 *pointerToUint;\n  undefined8 result;\n  undefined4 placeholder1;\n  undefined *placeholder2;\n  undefined4 copyOfInput1;\n  undefined4 copyOfInput2;\n  undefined4 placeholder3;\n  undefined4 placeholder4;\n  undefined8 output;\n  int comparisonResult;\n  \n  result = __ieee754_sqrt();\n  charVariable = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  comparisonResult = __unorddf2(input1,input2,input1,input2);\n  if (comparisonResult != 0) {\n    return result;\n  }\n  intVariable = __aeabi_dcmplt(input1,input2,0,0);\n  if (intVariable == 0) {\n    return result;\n  }\n  placeholder1 = 1;\n  placeholder2 = &DAT_080073b5;\n  copyOfInput1 = input1;\n  copyOfInput2 = input2;\n  placeholder3 = input1;\n  placeholder4 = input2;\n  if (charVariable == '\\0') {\n    output = 0;\nLAB_08005c26:\n    intVariable = matherr(&placeholder1);\n    if (intVariable != 0) goto LAB_08005c2e;\n  }\n  else {\n    output = __divdf3(0,0,0,0);\n    if (charVariable != '\\x02') goto LAB_08005c26;\n  }\n  pointerToUint = (undefined4 *)__errno();\n  *pointerToUint = 0x21;\nLAB_08005c2e:\n  if (comparisonResult != 0) {\n    pointerToInt = (int *)__errno();\n    *pointerToInt = comparisonResult;\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "calculate_square_root_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "charVariable",
                "iVar2": "intVariable",
                "piVar3": "pointerToInt",
                "puVar4": "pointerToUint",
                "uVar5": "result",
                "local_50": "placeholder1",
                "local_4c": "placeholder2",
                "local_48": "copyOfInput1",
                "uStack_44": "copyOfInput2",
                "local_40": "placeholder3",
                "uStack_3c": "placeholder4",
                "local_38": "output",
                "local_30": "comparisonResult"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__ieee754_sqrt",
                "__errno",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_square_root_08005c70",
            "code": "\nundefined8 calculate_square_root_08005c70(uint input_value,uint flags)\n\n{\n  int comparison_result;\n  undefined4 temp_var_1;\n  undefined4 temp_var_2;\n  undefined4 temp_var_3;\n  undefined4 temp_var_4;\n  undefined4 temp_var_5;\n  undefined4 temp_var_6;\n  uint flag_mask;\n  undefined8 result;\n  undefined8 calculation_1;\n  undefined8 calculation_2;\n  \n  result = CONCAT44(flags,input_value);\n  flag_mask = flags & 0x7fffffff;\n  if (flag_mask < 0x3ff00000) {\n    if (flag_mask < 0x3fe00000) {\n      if (0x3e3fffff < flag_mask) {\n        calculation_1 = __muldf3(input_value,flags,input_value,flags);\n        temp_var_6 = (undefined4)((ulonglong)calculation_1 >> 0x20);\n        temp_var_5 = (undefined4)calculation_1;\n        calculation_1 = __muldf3(temp_var_5,temp_var_6,0xdfdf709,0x3f023de1);\n        calculation_1 = __aeabi_dadd((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0x7501b288,0x3f49efe0);\n        calculation_1 = __muldf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),temp_var_5,temp_var_6);\n        calculation_1 = __subdf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0xb5688f3b,0x3fa48228);\n        calculation_1 = __muldf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),temp_var_5,temp_var_6);\n        calculation_1 = __aeabi_dadd((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0xe884455,0x3fc9c155);\n        calculation_1 = __muldf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),temp_var_5,temp_var_6);\n        calculation_1 = __subdf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        calculation_1 = __muldf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),temp_var_5,temp_var_6);\n        calculation_1 = __aeabi_dadd((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0x55555555,0x3fc55555);\n        calculation_1 = __muldf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),temp_var_5,temp_var_6);\n        calculation_2 = __muldf3(temp_var_5,temp_var_6,0xb12e9282,0x3fb3b8c5);\n        calculation_2 = __subdf3((int)calculation_2,(int)((ulonglong)calculation_2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        calculation_2 = __muldf3((int)calculation_2,(int)((ulonglong)calculation_2 >> 0x20),temp_var_5,temp_var_6);\n        calculation_2 = __aeabi_dadd((int)calculation_2,(int)((ulonglong)calculation_2 >> 0x20),0x9c598ac8,0x40002ae5);\n        calculation_2 = __muldf3((int)calculation_2,(int)((ulonglong)calculation_2 >> 0x20),temp_var_5,temp_var_6);\n        calculation_2 = __subdf3((int)calculation_2,(int)((ulonglong)calculation_2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        calculation_2 = __muldf3((int)calculation_2,(int)((ulonglong)calculation_2 >> 0x20),temp_var_5,temp_var_6);\n        calculation_2 = __aeabi_dadd((int)calculation_2,(int)((ulonglong)calculation_2 >> 0x20),0,0x3ff00000);\n        calculation_1 = __divdf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),(int)calculation_2,\n                          (int)((ulonglong)calculation_2 >> 0x20));\n        calculation_1 = __muldf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),input_value,flags);\n        goto LAB_08005cba;\n      }\n      calculation_1 = __aeabi_dadd(input_value,flags,0x8800759c,0x7e37e43c);\n      comparison_result = __aeabi_dcmpgt((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0,0x3ff00000);\n      if (comparison_result != 0) {\n        return result;\n      }\n    }\n    result = fabs(input_value,flags);\n    result = __subdf3(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),0,0x3fe00000);\n    temp_var_1 = (undefined4)((ulonglong)result >> 0x20);\n    temp_var_5 = (undefined4)result;\n    result = __muldf3(temp_var_5,temp_var_1,0xdfdf709,0x3f023de1);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x7501b288,0x3f49efe0);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_1);\n    result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),0xb5688f3b,0x3fa48228);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_1);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0xe884455,0x3fc9c155);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_1);\n    result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_1);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x55555555,0x3fc55555);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_1);\n    temp_var_2 = (undefined4)((ulonglong)result >> 0x20);\n    calculation_1 = __muldf3(temp_var_5,temp_var_1,0xb12e9282,0x3fb3b8c5);\n    calculation_1 = __subdf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    calculation_1 = __muldf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),temp_var_5,temp_var_1);\n    calculation_1 = __aeabi_dadd((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0x9c598ac8,0x40002ae5);\n    calculation_1 = __muldf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),temp_var_5,temp_var_1);\n    calculation_1 = __subdf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    calculation_1 = __muldf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),temp_var_5,temp_var_1);\n    calculation_1 = __aeabi_dadd((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),0,0x3ff00000);\n    temp_var_3 = (undefined4)((ulonglong)calculation_1 >> 0x20);\n    calculation_2 = __ieee754_sqrt(temp_var_5,temp_var_1);\n    temp_var_4 = (undefined4)((ulonglong)calculation_2 >> 0x20);\n    temp_var_6 = (undefined4)calculation_2;\n    if (flag_mask < 0x3fef3333) {\n      result = __divdf3((int)result,temp_var_2,(int)calculation_1,temp_var_3);\n      calculation_1 = __aeabi_dadd(temp_var_6,temp_var_4,temp_var_6,temp_var_4);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),(int)calculation_1,\n                       (int)((ulonglong)calculation_1 >> 0x20));\n      calculation_1 = __muldf3(0,temp_var_4,0,temp_var_4);\n      calculation_1 = __subdf3(temp_var_5,temp_var_1,(int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20));\n      calculation_2 = __aeabi_dadd(temp_var_6,temp_var_4,0,temp_var_4);\n      calculation_1 = __divdf3((int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20),(int)calculation_2,\n                        (int)((ulonglong)calculation_2 >> 0x20));\n      temp_var_5 = (undefined4)((ulonglong)calculation_1 >> 0x20);\n      calculation_1 = __aeabi_dadd((int)calculation_1,temp_var_5,(int)calculation_1,temp_var_5);\n      calculation_1 = __subdf3(0x33145c07,0x3c91a626,(int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20));\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),(int)calculation_1,\n                       (int)((ulonglong)calculation_1 >> 0x20));\n      calculation_1 = __aeabi_dadd(0,temp_var_4,0,temp_var_4);\n      calculation_1 = __subdf3(0x54442d18,0x3fe921fb,(int)calculation_1,(int)((ulonglong)calculation_1 >> 0x20));\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),(int)calculation_1,\n                       (int)((ulonglong)calculation_1 >> 0x20));\n      temp_var_5 = 0x3fe921fb;\n    }\n    else {\n      result = __divdf3((int)result,temp_var_2,(int)calculation_1,temp_var_3);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_6,temp_var_4);\n      result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),temp_var_6,temp_var_4);\n      temp_var_5 = (undefined4)((ulonglong)result >> 0x20);\n      result = __aeabi_dadd((int)result,temp_var_5,(int)result,temp_var_5);\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),0x33145c07,0x3c91a626);\n      temp_var_5 = 0x3ff921fb;\n    }\n    result = __subdf3(0x54442d18,temp_var_5,(int)result,(int)((ulonglong)result >> 0x20));\n    if ((int)flags < 1) {\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n  }\n  else {\n    if ((flag_mask + 0xc0100000 | input_value) != 0) {\n      result = __subdf3(input_value,flags,input_value,flags);\n      temp_var_5 = (undefined4)((ulonglong)result >> 0x20);\n      result = __divdf3((int)result,temp_var_5,(int)result,temp_var_5);\n      return result;\n    }\n    result = __muldf3(input_value,flags,0x54442d18,0x3ff921fb);\n    calculation_1 = __muldf3(input_value,flags,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),(int)calculation_1,\n                         (int)((ulonglong)calculation_1 >> 0x20));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_square_root_08005c70",
                "param_1": "input_value",
                "param_2": "flags",
                "iVar1": "comparison_result",
                "uVar2": "temp_var_1",
                "uVar3": "temp_var_2",
                "uVar4": "temp_var_3",
                "uVar5": "temp_var_4",
                "uVar6": "temp_var_5",
                "uVar7": "temp_var_6",
                "uVar8": "flag_mask",
                "uVar9": "result",
                "uVar10": "calculation_1",
                "uVar11": "calculation_2"
            },
            "calling": [
                "asin"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculateResult_08006070(uint inputParam1,uint inputParam2,uint inputParam3,uint inputParam4)\n\n{\n  undefined4 localVar1;\n  uint localVar2;\n  uint localVar3;\n  int localVar4;\n  uint localVar5;\n  undefined8 resultVar1;\n  undefined8 resultVar2;\n  \n  localVar5 = inputParam4 & 0x7fffffff;\n  if ((0x7ff00000 < (localVar5 | (-inputParam3 | inputParam3) >> 0x1f)) ||\n     (localVar3 = inputParam2 & 0x7fffffff, 0x7ff00000 < (localVar3 | (-inputParam1 | inputParam1) >> 0x1f))) {\n    resultVar1 = __aeabi_dadd(inputParam1,inputParam2,inputParam3,inputParam4,inputParam4);\n    return resultVar1;\n  }\n  if ((inputParam4 + 0xc0100000 | inputParam3) == 0) {\n    resultVar1 = atan();\n    return resultVar1;\n  }\n  localVar2 = (int)inputParam4 >> 0x1e & 2U | inputParam2 >> 0x1f;\n  if ((inputParam1 | localVar3) == 0) {\n    if (localVar2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (localVar2 != 3) {\n      return CONCAT44(inputParam2,inputParam1);\n    }\nLAB_0800613e:\n    resultVar1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((inputParam3 | localVar5) != 0) {\n      if (localVar5 == 0x7ff00000) {\n        if (localVar3 == 0x7ff00000) {\n          if (localVar2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (localVar2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (localVar2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (localVar2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (localVar2 != 3) {\n          if (localVar2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (localVar3 != 0x7ff00000) {\n        localVar4 = (int)(localVar3 - localVar5) >> 0x14;\n        if (localVar4 < 0x3d) {\n          if (((int)inputParam4 < 0) && (localVar4 + 0x3c < 0 != SCARRY4(localVar4,0x3c))) {\n            resultVar1 = 0;\n          }\n          else {\n            __divdf3(inputParam1,inputParam2);\n            fabs();\n            resultVar1 = atan();\n          }\n        }\n        else {\n          resultVar1 = 0x3ff921fb54442d18;\n        }\n        localVar4 = (int)((ulonglong)resultVar1 >> 0x20);\n        localVar1 = (undefined4)resultVar1;\n        if (localVar2 == 1) {\n          return CONCAT44(localVar4 + -0x80000000,localVar1);\n        }\n        if (localVar2 == 2) {\n          resultVar2 = __subdf3(localVar1,localVar4,0x33145c07,0x3ca1a626);\n          resultVar1 = 0x400921fb54442d18;\n        }\n        else {\n          if (localVar2 == 0) {\n            return resultVar1;\n          }\n          resultVar1 = __subdf3(localVar1,localVar4,0x33145c07,0x3ca1a626);\n          resultVar2 = 0x400921fb54442d18;\n        }\n        resultVar1 = __subdf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),(int)resultVar2,\n                         (int)((ulonglong)resultVar2 >> 0x20));\n        return resultVar1;\n      }\n    }\n    if ((int)inputParam2 < 0) {\n      resultVar1 = 0xbff921fb54442d18;\n    }\n    else {\n      resultVar1 = 0x3ff921fb54442d18;\n    }\n  }\n  return resultVar1;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "localVar1",
                "uVar2": "localVar2",
                "uVar3": "localVar3",
                "iVar4": "localVar4",
                "uVar5": "localVar5",
                "uVar6": "resultVar1",
                "uVar7": "resultVar2"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "atan",
                "__aeabi_dadd",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_square_root_08006228",
            "code": "\nuint calculateSquareRoot_08006228(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 output1;\n  uint output2;\n  uint output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  uint output8;\n  undefined4 output9;\n  int tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  uint tempVar4;\n  undefined4 tempVar5;\n  int tempVar6;\n  uint tempVar7;\n  undefined4 tempVar8;\n  undefined4 tempVar9;\n  undefined8 tempVar10;\n  undefined8 tempVar11;\n  undefined8 tempVar12;\n  undefined8 tempVar13;\n  longlong tempVar14;\n  ulonglong tempVar15;\n  undefined8 tempVar16;\n  uint localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  int localVar4;\n  \n  tempVar11 = CONCAT44(input2,input1);\n  tempVar7 = input4 & 0x7fffffff;\n  if ((tempVar7 | input3) == 0) {\n    return 0;\n  }\n  tempVar4 = input2 & 0x7fffffff;\n  if (tempVar4 < 0x7ff00001) {\n    if (tempVar4 == 0x7ff00000) {\n      if (input1 == 0) {\n        if (0x7ff00000 < tempVar7) goto LAB_08006278;\nLAB_08006262:\n        if ((tempVar7 != 0x7ff00000) || (input3 == 0)) {\n          if (-1 < (int)input2) goto LAB_0800632a;\n          if (tempVar7 < 0x43400000) {\n            if (tempVar7 < 0x3ff00000) {\nLAB_0800632a:\n              localVar1 = 0;\n              goto LAB_080062ba;\n            }\n            tempVar1 = ((int)tempVar7 >> 0x14) + -0x3ff;\n            if (0x14 < tempVar1) {\n              output2 = input3 >> (0x34U - tempVar1 & 0xff);\n              if (input3 == output2 << (0x34U - tempVar1 & 0xff)) {\n                localVar1 = 2 - (output2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input3 == 0) {\n              output2 = (int)tempVar7 >> (0x14U - tempVar1 & 0xff);\n              if (tempVar7 == output2 << (0x14U - tempVar1 & 0xff)) {\n                localVar1 = 2 - (output2 & 1);\n              }\n              else {\n                localVar1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            localVar1 = 0;\n          }\n          else {\n            localVar1 = 2;\nLAB_080062ba:\n            if (input3 == 0) {\n              if (tempVar7 == 0x7ff00000) {\n                if ((tempVar4 + 0xc0100000 | input1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < tempVar4) {\n                  if ((int)input4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (tempVar7 == 0x3ff00000) {\n                if (-1 < (int)input4) {\n                  return input1;\n                }\n                tempVar10 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input4 == 0x40000000) goto LAB_0800634a;\n              if ((input4 == 0x3fe00000) && (-1 < (int)input2)) {\n                tempVar7 = __ieee754_sqrt(input1,input2);\n                return tempVar7;\n              }\n            }\n          }\n          tempVar10 = fabs(input1,input2);\n          tempVar8 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n          output1 = (undefined4)tempVar10;\n          tempVar15 = CONCAT44(input2,output1) & 0x7fffffffffffffff;\n          if ((input1 == 0) && ((tempVar4 == 0 || ((input2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input4 < 0) {\n              tempVar10 = __divdf3(0,0x3ff00000,output1,tempVar8);\n            }\n            if (-1 < (int)input2) {\n              return (uint)tempVar10;\n            }\n            if ((localVar1 | tempVar4 + 0xc0100000) != 0) {\n              return (uint)tempVar10;\n            }\n          }\n          else {\n            output2 = 0xffffffff - ((int)input2 >> 0x1f);\n            tempVar10 = tempVar11;\n            if ((localVar1 | output2) != 0) {\n              if (tempVar7 < 0x41e00001) {\n                localVar4 = 0;\n                if (tempVar4 < 0x100000) {\n                  tempVar15 = __muldf3();\n                  localVar4 = -0x35;\n                }\n                tempVar7 = (uint)(tempVar15 >> 0x20);\n                output1 = (undefined4)tempVar15;\n                localVar4 = ((int)tempVar7 >> 0x14) + -0x3ff + localVar4;\n                tempVar7 = tempVar7 & 0xfffff;\n                tempVar4 = tempVar7 | 0x3ff00000;\n                if (tempVar7 < 0x3988f) {\nLAB_08006628:\n                  tempVar1 = 0;\n                }\n                else {\n                  if (0xbb679 < tempVar7) {\n                    tempVar4 = tempVar4 - 0x100000;\n                    localVar4 = localVar4 + 1;\n                    goto LAB_08006628;\n                  }\n                  tempVar1 = 1;\n                }\n                tempVar2 = tempVar1 * 8;\n                tempVar3 = (&DAT_080073c0)[tempVar1 * 2];\n                tempVar5 = (&DAT_080073c4)[tempVar1 * 2];\n                tempVar11 = __subdf3(output1,tempVar4,tempVar3,tempVar5);\n                tempVar9 = (undefined4)((ulonglong)tempVar11 >> 0x20);\n                tempVar10 = __aeabi_dadd(output1,tempVar4,tempVar3,tempVar5);\n                tempVar10 = __divdf3(0,0x3ff00000,(int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20));\n                output4 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n                tempVar12 = __muldf3((int)tempVar11,tempVar9,(int)tempVar10,output4);\n                output5 = (undefined4)((ulonglong)tempVar12 >> 0x20);\n                tempVar8 = (undefined4)tempVar12;\n                tempVar12 = __muldf3(0,output5);\n                tempVar11 = __subdf3((int)tempVar11,tempVar9,(int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20));\n                tempVar12 = __subdf3(0,((int)tempVar4 >> 1 | 0x20000000U) + 0x80000 + tempVar1 * 0x40000,\n                                  tempVar3,tempVar5);\n                tempVar12 = __subdf3(output1,tempVar4,(int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20));\n                tempVar12 = __muldf3((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),0,output5);\n                tempVar11 = __subdf3((int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20),(int)tempVar12,\n                                  (int)((ulonglong)tempVar12 >> 0x20));\n                tempVar11 = __muldf3((int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20),(int)tempVar10,output4);\n                tempVar9 = (undefined4)((ulonglong)tempVar11 >> 0x20);\n                tempVar10 = __muldf3(tempVar8,output5);\n                output4 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n                output1 = (undefined4)tempVar10;\n                tempVar10 = __muldf3(output1,output4,0x4a454eef,0x3fca7e28);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),output1,output4);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),output1,output4);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),output1,output4);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),output1,output4);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                tempVar12 = __muldf3(output1,output4,output1,output4);\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar12,\n                                  (int)((ulonglong)tempVar12 >> 0x20));\n                tempVar12 = __aeabi_dadd(tempVar8,output5,0,output5);\n                tempVar12 = __muldf3((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),(int)tempVar11,tempVar9);\n                tempVar10 = __aeabi_dadd((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),(int)tempVar10,\n                                      (int)((ulonglong)tempVar10 >> 0x20));\n                output1 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n                tempVar12 = __muldf3(0,output5,0,output5);\n                output4 = (undefined4)((ulonglong)tempVar12 >> 0x20);\n                tempVar13 = __aeabi_dadd((int)tempVar12,output4,0,0x40080000);\n                __aeabi_dadd((int)tempVar13,(int)((ulonglong)tempVar13 >> 0x20),(int)tempVar10,output1);\n                tempVar13 = __muldf3(0,output5,0,output6);\n                tempVar3 = (undefined4)((ulonglong)tempVar13 >> 0x20);\n                tempVar16 = __subdf3(0,output6,0,0x40080000);\n                tempVar12 = __subdf3((int)tempVar16,(int)((ulonglong)tempVar16 >> 0x20),(int)tempVar12,output4);\n                tempVar10 = __subdf3((int)tempVar10,output1,(int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20));\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),tempVar8,output5);\n                tempVar11 = __muldf3((int)tempVar11,tempVar9,0,output6);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar11,\n                                      (int)((ulonglong)tempVar11 >> 0x20));\n                output1 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n                __aeabi_dadd((int)tempVar13,tempVar3,(int)tempVar10,output1);\n                tempVar11 = __muldf3(0,output7,0xe0000000,0x3feec709);\n                tempVar12 = __subdf3(0,output7,(int)tempVar13,tempVar3);\n                tempVar10 = __subdf3((int)tempVar10,output1,(int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20));\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0xdc3a03fd,0x3feec709\n                                 );\n                tempVar12 = __muldf3(0,output7,0x145b01f5,0xbe3e2fe0);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar12,\n                                      (int)((ulonglong)tempVar12 >> 0x20));\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + tempVar2),\n                                      *(undefined4 *)(&DAT_080073e4 + tempVar2));\n                tempVar12 = __aeabi_i2d(localVar4);\n                output1 = (undefined4)((ulonglong)tempVar12 >> 0x20);\n                tempVar8 = *(undefined4 *)(&DAT_080073d0 + tempVar2);\n                tempVar9 = *(undefined4 *)(&DAT_080073d4 + tempVar2);\n                tempVar13 = __aeabi_dadd((int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20),(int)tempVar10,\n                                      (int)((ulonglong)tempVar10 >> 0x20));\n                tempVar13 = __aeabi_dadd((int)tempVar13,(int)((ulonglong)tempVar13 >> 0x20),tempVar8,tempVar9);\n                __aeabi_dadd((int)tempVar13,(int)((ulonglong)tempVar13 >> 0x20),(int)tempVar12,output1);\n                tempVar12 = __subdf3(0,output8,(int)tempVar12,output1);\n                tempVar14 = __subdf3((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),tempVar8,tempVar9);\n                tempVar7 = output8;\n              }\n              else {\n                if (0x43f00000 < tempVar7) {\n                  if (tempVar4 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input1 = 0x8800759c;\n                  input2 = 0x7e37e43c;\n                  tempVar11 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (tempVar4 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < tempVar4) goto LAB_08006418;\n                tempVar11 = __subdf3(output1,tempVar8,0,0x3ff00000);\n                tempVar8 = (undefined4)((ulonglong)tempVar11 >> 0x20);\n                output1 = (undefined4)tempVar11;\n                tempVar11 = __muldf3(output1,tempVar8,0x60000000,0x3ff71547);\n                tempVar10 = __muldf3(output1,tempVar8,0xf85ddf44,0x3e54ae0b);\n                tempVar12 = __muldf3(output1,tempVar8,0,0x3fd00000);\n                tempVar12 = __subdf3(0x55555555,0x3fd55555,(int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20)\n                                 );\n                tempVar12 = __muldf3((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),output1,tempVar8);\n                tempVar12 = __subdf3(0,0x3fe00000,(int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20));\n                tempVar13 = __muldf3(output1,tempVar8,output1,tempVar8);\n                tempVar12 = __muldf3((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),(int)tempVar13,\n                                  (int)((ulonglong)tempVar13 >> 0x20));\n                tempVar12 = __muldf3((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),0x652b82fe,0x3ff71547\n                                 );\n                tempVar10 = __subdf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar12,\n                                  (int)((ulonglong)tempVar12 >> 0x20));\n                __aeabi_dadd((int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20),(int)tempVar10,\n                             (int)((ulonglong)tempVar10 >> 0x20));\n                tempVar14 = (ulonglong)output3 << 0x20;\n                tempVar7 = output3;\n              }\n              tempVar11 = __subdf3((int)tempVar14,(int)((ulonglong)tempVar14 >> 0x20),(int)tempVar11,\n                                (int)((ulonglong)tempVar11 >> 0x20));\n              tempVar11 = __subdf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar11,\n                                (int)((ulonglong)tempVar11 >> 0x20));\n              if ((localVar1 - 1 | output2) == 0) {\n                input2 = 0xbff00000;\n              }\n              else {\n                input2 = 0x3ff00000;\n              }\n              localVar1 = 0;\n              tempVar10 = __subdf3(input3,input4,0,input4);\n              tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0,tempVar7);\n              tempVar11 = __muldf3((int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20),input3,input4);\n              tempVar11 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar11,\n                                    (int)((ulonglong)tempVar11 >> 0x20));\n              tempVar9 = (undefined4)((ulonglong)tempVar11 >> 0x20);\n              output1 = (undefined4)tempVar11;\n              tempVar11 = __muldf3(0,tempVar7,0,input4);\n              output4 = (undefined4)((ulonglong)tempVar11 >> 0x20);\n              tempVar8 = (undefined4)tempVar11;\n              tempVar14 = __aeabi_dadd(output1,tempVar9,tempVar8,output4);\n              tempVar4 = (uint)((ulonglong)tempVar14 >> 0x20);\n              tempVar7 = (uint)tempVar14;\n              if (0x408fffffffffffff < tempVar14) {\n                if ((tempVar4 + 0xbf700000 | tempVar7) == 0) {\n                  tempVar10 = __aeabi_dadd(output1,tempVar9,0x652b82fe,0x3c971547);\n                  tempVar12 = __subdf3(tempVar7,tempVar4,tempVar8,output4);\n                  tempVar1 = __aeabi_dcmpgt((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar12,\n                                         (int)((ulonglong)tempVar12 >> 0x20));\n                  if (tempVar1 == 0) goto LAB_08006968;\n                }\n                tempVar11 = __muldf3(0,input2,0x8800759c,0x7e37e43c);\n                input1 = 0x8800759c;\n                input2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((tempVar4 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((tempVar4 & 0x7fffffff) < 0x3fe00001) {\n                  tempVar1 = 0;\n                }\n                else {\n                  tempVar4 = (0x100000 >> (((int)(tempVar4 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          tempVar4;\n                  tempVar7 = (tempVar4 * 2 >> 0x15) - 0x3ff;\n                  tempVar1 = (int)(tempVar4 & 0xfffff | 0x100000) >> (0x14 - tempVar7 & 0xff);\n                  if (tempVar14 < 0) {\n                    tempVar1 = -tempVar1;\n                  }\n                  tempVar11 = __subdf3(tempVar8,output4,0,tempVar4 & ~(0xfffff >> (tempVar7 & 0xff)));\n                }\n                localVar3 = (undefined4)((ulonglong)tempVar11 >> 0x20);\n                localVar2 = (undefined4)tempVar11;\n                __aeabi_dadd(localVar2,localVar3,output1,tempVar9);\n                tempVar11 = __muldf3(0,output9,0,0x3fe62e43);\n                tempVar8 = (undefined4)((ulonglong)tempVar11 >> 0x20);\n                tempVar10 = __subdf3(0,output9,localVar2,localVar3);\n                tempVar10 = __subdf3(output1,tempVar9,(int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20));\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0xfefa39ef,0x3fe62e42\n                                 );\n                tempVar12 = __muldf3(0,output9,0xca86c39,0xbe205c61);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar12,\n                                      (int)((ulonglong)tempVar12 >> 0x20));\n                tempVar9 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n                tempVar12 = __aeabi_dadd((int)tempVar11,tempVar8,(int)tempVar10,tempVar9);\n                output4 = (undefined4)((ulonglong)tempVar12 >> 0x20);\n                output1 = (undefined4)tempVar12;\n                tempVar11 = __subdf3(output1,output4,(int)tempVar11,tempVar8);\n                tempVar11 = __subdf3((int)tempVar10,tempVar9,(int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20));\n                tempVar9 = (undefined4)((ulonglong)tempVar11 >> 0x20);\n                tempVar10 = __muldf3(output1,output4,output1,output4);\n                output5 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n                tempVar8 = (undefined4)tempVar10;\n                tempVar10 = __muldf3(tempVar8,output5,0x72bea4d0,0x3e663769);\n                tempVar10 = __subdf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0xc5d26bf1,0x3ebbbd41\n                                 );\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),tempVar8,output5);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),tempVar8,output5);\n                tempVar10 = __subdf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0x16bebd93,0x3f66c16c\n                                 );\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),tempVar8,output5);\n                tempVar10 = __aeabi_dadd((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                tempVar10 = __muldf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),tempVar8,output5);\n                tempVar10 = __subdf3(output1,output4,(int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20));\n                tempVar8 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n                tempVar12 = __muldf3(output1,output4,(int)tempVar10,tempVar8);\n                tempVar10 = __subdf3((int)tempVar10,tempVar8,0,0x40000000);\n                tempVar10 = __divdf3((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),(int)tempVar10,\n                                  (int)((ulonglong)tempVar10 >> 0x20));\n                tempVar12 = __muldf3(output1,output4,(int)tempVar11,tempVar9);\n                tempVar11 = __aeabi_dadd((int)tempVar12,(int)((ulonglong)tempVar12 >> 0x20),(int)tempVar11,\n                                      tempVar9);\n                tempVar11 = __subdf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar11,\n                                  (int)((ulonglong)tempVar11 >> 0x20));\n                tempVar11 = __subdf3((int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20),output1,output4);\n                tempVar10 = __subdf3(0,0x3ff00000,(int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20));\n                tempVar2 = (int)((ulonglong)tempVar10 >> 0x20);\n                tempVar6 = tempVar2 + tempVar1 * 0x100000;\n                tempVar11 = CONCAT44(tempVar6,(int)tempVar10);\n                input1 = localVar1;\n                if (tempVar6 < 0x100000) {\n                  tempVar11 = scalbn((int)tempVar10,tempVar2,tempVar1);\n                }\n              }\n              else {\n                if ((tempVar4 + 0x3f6f3400 | tempVar7) == 0) {\n                  tempVar10 = __subdf3(tempVar7,tempVar4,tempVar8,output4);\n                  tempVar1 = __aeabi_dcmple(output1,tempVar9,(int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20));\n                  if (tempVar1 == 0) goto LAB_08006968;\n                }\n                tempVar11 = __muldf3(0,input2,0xc2f8f359,0x1a56e1f);\n                input1 = 0xc2f8f359;\n                input2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              tempVar7 = __muldf3((int)tempVar11,(int)((ulonglong)tempVar11 >> 0x20),input1,input2);\n              return tempVar7;\n            }\n          }\n          output1 = (undefined4)((ulonglong)tempVar10 >> 0x20);\n          tempVar10 = __subdf3((int)tempVar10,output1,(int)tempVar10,output1);\n          tempVar11 = tempVar10;\nLAB_08006320:\n          tempVar7 = __divdf3((int)tempVar10,(int)((ulonglong)tempVar10 >> 0x20),(int)tempVar11,\n                            (int)((ulonglong)tempVar11 >> 0x20));\n          return tempVar7;\n        }\n      }\n    }\n    else if (tempVar7 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((tempVar4 + 0xc0100000 | input1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  tempVar7 = nan(&DAT_0800737e);\n  return tempVar7;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_square_root_08006228",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "output1",
                "uVar2": "output2",
                "extraout_r1": "output3",
                "uVar3": "output4",
                "uVar4": "output5",
                "extraout_r1_00": "output6",
                "extraout_r1_01": "output7",
                "extraout_r1_02": "output8",
                "extraout_r1_03": "output9",
                "iVar5": "tempVar1",
                "iVar6": "tempVar2",
                "uVar7": "tempVar3",
                "uVar8": "tempVar4",
                "uVar9": "tempVar5",
                "iVar10": "tempVar6",
                "uVar11": "tempVar7",
                "uVar12": "tempVar8",
                "uVar13": "tempVar9",
                "uVar14": "tempVar10",
                "uVar15": "tempVar11",
                "uVar16": "tempVar12",
                "uVar17": "tempVar13",
                "lVar18": "tempVar14",
                "uVar19": "tempVar15",
                "uVar20": "tempVar16",
                "local_70": "localVar1",
                "local_68": "localVar2",
                "local_64": "localVar3",
                "local_54": "localVar4"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "nan",
                "scalbn",
                "__aeabi_dadd",
                "__muldf3",
                "__aeabi_dcmple",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_floating_point_08006c0c",
            "code": "\nundefined8 calculateFloatingPoint_08006c0c(uint multiplier,uint multiplicand)\n\n{\n  undefined4 result_high;\n  uint exponent;\n  int exponent_temp;\n  int temp;\n  uint temp_high;\n  uint temp2;\n  int sum;\n  uint exponent_sum;\n  uint mask;\n  int counter;\n  uint temp3;\n  undefined8 final_result;\n  \n  if ((~multiplicand & 0x7ff00000) == 0) {\n    final_result = __muldf3(multiplier,multiplicand,multiplier,multiplicand);\n    final_result = __aeabi_dadd(multiplier,multiplicand,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    return final_result;\n  }\n  if ((int)multiplicand < 1) {\n    if ((multiplicand & 0x7fffffff | multiplier) == 0) {\n      return CONCAT44(multiplicand,multiplier);\n    }\n    if (multiplicand != 0) {\n      final_result = __subdf3(multiplier,multiplicand,multiplier,multiplicand);\n      result_high = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = __divdf3((int)final_result,result_high,(int)final_result,result_high);\n      return final_result;\n    }\n  }\n  exponent_temp = (int)multiplicand >> 0x14;\n  if (exponent_temp == 0) {\n    while (multiplicand == 0) {\n      exponent_temp = exponent_temp + -0x15;\n      multiplicand = multiplier >> 0xb;\n      multiplier = multiplier << 0x15;\n    }\n    exponent = 0;\n    for (; -1 < (int)(multiplicand << 0xb); multiplicand = multiplicand << 1) {\n      exponent = exponent + 1;\n    }\n    exponent_temp = exponent_temp - (exponent - 1);\n    multiplicand = multiplicand | multiplier >> (0x20 - exponent & 0xff);\n    multiplier = multiplier << (exponent & 0xff);\n  }\n  sum = 0;\n  exponent = multiplicand & 0xfffff | 0x100000;\n  if ((exponent_temp + -0x3ff) * -0x80000000 < 0) {\n    exponent = exponent * 2 - ((int)multiplier >> 0x1f);\n    multiplier = multiplier << 1;\n  }\n  exponent = exponent * 2 - ((int)multiplier >> 0x1f);\n  temp = 0x16;\n  temp_high = 0;\n  exponent_sum = 0x200000;\n  multiplier = multiplier << 1;\n  do {\n    counter = temp_high + exponent_sum;\n    if (counter <= (int)exponent) {\n      exponent = exponent - counter;\n      temp_high = counter + exponent_sum;\n      sum = sum + exponent_sum;\n    }\n    temp = temp + -1;\n    exponent = exponent * 2 - ((int)multiplier >> 0x1f);\n    exponent_sum = exponent_sum >> 1;\n    multiplier = multiplier << 1;\n  } while (temp != 0);\n  counter = 0x20;\n  mask = 0x80000000;\n  exponent_sum = 0;\n  temp = 0;\n  do {\n    temp3 = mask + temp;\n    temp2 = temp_high;\n    if (((int)temp_high < (int)exponent) || ((exponent == temp_high && (temp3 <= multiplier)))) {\n      temp = temp3 + mask;\n      if (((int)temp3 < 0) && (-1 < temp)) {\n        temp2 = temp_high + 1;\n      }\n      exponent = exponent - temp_high;\n      if (multiplier < temp3) {\n        exponent = exponent - 1;\n      }\n      multiplier = multiplier - temp3;\n      exponent_sum = exponent_sum + mask;\n    }\n    exponent = exponent * 2 - ((int)multiplier >> 0x1f);\n    counter = counter + -1;\n    multiplier = multiplier << 1;\n    mask = mask >> 1;\n    temp_high = temp2;\n  } while (counter != 0);\n  if ((multiplier | exponent) != 0) {\n    if (exponent_sum == 0xffffffff) {\n      sum = sum + 1;\n      exponent_sum = 0;\n    }\n    else {\n      exponent_sum = exponent_sum + 1 & 0xfffffffe;\n    }\n  }\n  exponent_sum = exponent_sum >> 1;\n  if (sum << 0x1f < 0) {\n    exponent_sum = exponent_sum | 0x80000000;\n  }\n  return CONCAT44((sum >> 1) + 0x3fe00000 + (exponent_temp + -0x3ff >> 1) * 0x100000,exponent_sum);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_floating_point_08006c0c",
                "param_1": "multiplier",
                "param_2": "multiplicand",
                "uVar1": "result_high",
                "uVar2": "exponent",
                "iVar3": "exponent_temp",
                "iVar4": "temp",
                "uVar5": "temp_high",
                "uVar6": "temp2",
                "iVar7": "sum",
                "uVar8": "exponent_sum",
                "uVar9": "mask",
                "iVar10": "counter",
                "uVar11": "temp3",
                "uVar12": "final_result"
            },
            "calling": [
                "sqrt",
                "__ieee754_pow",
                "__ieee754_asin"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd",
                "__muldf3",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_square_root_08006d68",
            "code": "\nundefined8 calculateSquareRoot_08006d68(int input_value_1,uint input_value_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int comparison_result;\n  undefined4 temp_var_1;\n  undefined4 temp_var_2;\n  undefined4 temp_var_3;\n  undefined4 temp_var_4;\n  undefined4 temp_var_5;\n  undefined4 temp_var_6;\n  uint abs_value;\n  undefined8 result;\n  undefined8 temp_result;\n  \n  result = CONCAT44(input_value_2,input_value_1);\n  abs_value = input_value_2 & 0x7fffffff;\n  if (abs_value < 0x44100000) {\n    if (abs_value < 0x3fdc0000) {\n      if (abs_value < 0x3e200000) {\n        temp_result = __aeabi_dadd(input_value_1,input_value_2,0x8800759c,0x7e37e43c,param_4);\n        comparison_result = __aeabi_dcmpgt((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (comparison_result != 0) {\n          return result;\n        }\n      }\n      comparison_result = -1;\n    }\n    else {\n      result = fabs();\n      temp_var_2 = (undefined4)((ulonglong)result >> 0x20);\n      temp_var_1 = (undefined4)result;\n      if (abs_value < 0x3ff30000) {\n        if (abs_value < 0x3fe60000) {\n          result = __aeabi_dadd(temp_var_1,temp_var_2,temp_var_1,temp_var_2);\n          result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000);\n          temp_result = __aeabi_dadd(temp_var_1,temp_var_2,0,0x40000000);\n          result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                           (int)((ulonglong)temp_result >> 0x20));\n          comparison_result = 0;\n        }\n        else {\n          result = __subdf3(temp_var_1,temp_var_2,0,0x3ff00000);\n          temp_result = __aeabi_dadd(temp_var_1,temp_var_2,0,0x3ff00000);\n          result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                           (int)((ulonglong)temp_result >> 0x20));\n          comparison_result = 1;\n        }\n      }\n      else if (abs_value < 0x40038000) {\n        result = __subdf3(temp_var_1,temp_var_2,0,0x3ff80000);\n        temp_result = __muldf3(temp_var_1,temp_var_2,0,0x3ff80000);\n        temp_result = __aeabi_dadd((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result,\n                         (int)((ulonglong)temp_result >> 0x20));\n        comparison_result = 2;\n      }\n      else {\n        result = __divdf3(0,0xbff00000,temp_var_1,temp_var_2);\n        comparison_result = 3;\n      }\n    }\n    temp_var_6 = (undefined4)((ulonglong)result >> 0x20);\n    temp_var_5 = (undefined4)result;\n    result = __muldf3(temp_var_5,temp_var_6,temp_var_5,temp_var_6);\n    temp_var_3 = (undefined4)((ulonglong)result >> 0x20);\n    temp_var_1 = (undefined4)result;\n    result = __muldf3(temp_var_1,temp_var_3,temp_var_1,temp_var_3);\n    temp_var_4 = (undefined4)((ulonglong)result >> 0x20);\n    temp_var_2 = (undefined4)result;\n    result = __muldf3(temp_var_2,temp_var_4,0xe322da11,0x3f90ad3a);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x24760deb,0x3fa97b4b);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_2,temp_var_4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0xa0d03d51,0x3fb10d66);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_2,temp_var_4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0xc54c206e,0x3fb745cd);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_2,temp_var_4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x920083ff,0x3fc24924);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_2,temp_var_4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x5555550d,0x3fd55555);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_1,temp_var_3);\n    temp_var_1 = (undefined4)((ulonglong)result >> 0x20);\n    temp_result = __muldf3(temp_var_2,temp_var_4,0x2c6a6c2f,0xbfa2b444);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp_var_2,temp_var_4);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp_var_2,temp_var_4);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp_var_2,temp_var_4);\n    temp_result = __subdf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = __muldf3((int)temp_result,(int)((ulonglong)temp_result >> 0x20),temp_var_2,temp_var_4);\n    temp_var_2 = (undefined4)((ulonglong)temp_result >> 0x20);\n    if (comparison_result == -1) {\n      result = __aeabi_dadd((int)result,temp_var_1,(int)temp_result,temp_var_2);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_6);\n      result = __subdf3(temp_var_5,temp_var_6,(int)result,(int)((ulonglong)result >> 0x20));\n    }\n    else {\n      result = __aeabi_dadd((int)result,temp_var_1,(int)temp_result,temp_var_2);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_6);\n      comparison_result = comparison_result * 8;\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),\n                       *(undefined4 *)(&UNK_08007410 + comparison_result),*(undefined4 *)(&UNK_08007414 + comparison_result)\n                      );\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),temp_var_5,temp_var_6);\n      result = __subdf3(*(undefined4 *)(&UNK_080073f0 + comparison_result),*(undefined4 *)(&UNK_080073f4 + comparison_result)\n                       ,(int)result,(int)((ulonglong)result >> 0x20));\n      if ((int)input_value_2 < 0) {\n        result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n      }\n    }\n  }\n  else if ((abs_value < 0x7ff00001) && ((abs_value != 0x7ff00000 || (input_value_1 == 0)))) {\n    if ((int)input_value_2 < 1) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    result = __aeabi_dadd(input_value_1,input_value_2,input_value_1,input_value_2,param_4);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_square_root_08006d68",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "iVar1": "comparison_result",
                "uVar2": "temp_var_1",
                "uVar3": "temp_var_2",
                "uVar4": "temp_var_3",
                "uVar5": "temp_var_4",
                "uVar6": "temp_var_5",
                "uVar7": "temp_var_6",
                "uVar8": "abs_value",
                "uVar9": "result",
                "uVar10": "temp_result"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "compute_unsigned_shift_08007092",
            "code": "\nuint computeUnsignedShift_08007092(undefined4 input1,uint input2)\n\n{\n  return (input2 | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "compute_unsigned_shift_08007092",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_program_0800709e",
            "code": "\nvoid initializeProgram_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_program_0800709e",
                "undefined4": "void"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_positive_infinity_080070a4",
            "code": "\nundefined8 getPositiveInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_positive_infinity_080070a4"
            },
            "calling": [
                "__ieee754_pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_double_precision_080070b0",
            "code": "\nundefined8 calculate_double_precision_080070b0(uint input_value_1,uint input_value_2,undefined4 input_value_3)\n\n{\n  int shifted_input_2;\n  undefined4 data_1;\n  uint adjusted_input_2;\n  undefined4 data_2;\n  uint adjusted_input;\n  uint adjusted_bits;\n  uint shifted_bits;\n  undefined8 result;\n  \n  shifted_bits = (input_value_2 << 1) >> 0x15;\n  adjusted_bits = shifted_bits - 0x3ff;\n  adjusted_input_2 = input_value_2;\n  if ((int)adjusted_bits < 0x14) {\n    if ((int)adjusted_bits < 0) {\n      if ((input_value_2 & 0x7fffffff | input_value_1) == 0) {\n        return CONCAT44(input_value_2,input_value_1);\n      }\n      adjusted_input_2 = input_value_2 & 0xfffff | input_value_1;\n      shifted_input_2 = ((int)input_value_2 >> 0x1f) * -8;\n      data_1 = *(undefined4 *)(&DAT_08007430 + shifted_input_2);\n      data_2 = *(undefined4 *)(&DAT_08007434 + shifted_input_2);\n      result = __aeabi_dadd(input_value_1,(-adjusted_input_2 | adjusted_input_2) >> 0xc & 0x80000 | input_value_2 & 0xfffe0000,data_1,\n                           data_2,input_value_1,input_value_2,input_value_3);\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),data_1,data_2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input_value_2 & 0x80000000,\n                      (int)result);\n    }\n    shifted_bits = 0xfffff >> (adjusted_bits & 0xff);\n    if ((input_value_2 & shifted_bits | input_value_1) == 0) {\n      return CONCAT44(input_value_2,input_value_1);\n    }\n    shifted_bits = shifted_bits >> 1;\n    adjusted_input = input_value_2 & shifted_bits | input_value_1;\n    if (adjusted_input != 0) {\n      if (adjusted_bits == 0x13) {\n        adjusted_input = 0x80000000;\n      }\n      else {\n        adjusted_input = 0;\n      }\n      adjusted_input_2 = 0x40000 >> (adjusted_bits & 0xff) | input_value_2 & ~shifted_bits;\n    }\n  }\n  else {\n    if (0x33 < (int)adjusted_bits) {\n      if (adjusted_bits != 0x400) {\n        return CONCAT44(input_value_2,input_value_1);\n      }\n      result = __aeabi_dadd();\n      return result;\n    }\n    shifted_bits = shifted_bits - 0x413;\n    adjusted_bits = 0xffffffff >> (shifted_bits & 0xff);\n    if ((input_value_1 & adjusted_bits) == 0) {\n      return CONCAT44(input_value_2,input_value_1);\n    }\n    adjusted_bits = adjusted_bits >> 1;\n    adjusted_input = input_value_1;\n    if ((input_value_1 & adjusted_bits) != 0) {\n      adjusted_input = 0x40000000 >> (shifted_bits & 0xff) | input_value_1 & ~adjusted_bits;\n    }\n  }\n  shifted_input_2 = ((int)input_value_2 >> 0x1f) * -8;\n  data_1 = *(undefined4 *)(&DAT_08007430 + shifted_input_2);\n  data_2 = *(undefined4 *)(&DAT_08007434 + shifted_input_2);\n  result = __aeabi_dadd(adjusted_input,adjusted_input_2,data_1,data_2,input_value_1,input_value_2,input_value_3);\n  result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),data_1,data_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_double_precision_080070b0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "input_value_3",
                "uVar7": "shifted_bits",
                "uVar6": "adjusted_bits",
                "uVar3": "adjusted_input_2",
                "uVar2": "data_1",
                "uVar4": "data_2",
                "uVar5": "adjusted_input",
                "uVar8": "result",
                "iVar1": "shifted_input_2"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_power_080071c0",
            "code": "\nundefined8 calculate_power_080071c0(uint base,uint exponent,int power_offset,undefined4 rounding_mode)\n\n{\n  uint shifted_exponent;\n  undefined4 lower_half_uint;\n  int adjusted_exponent;\n  undefined4 constant_1;\n  uint upper_half_uint;\n  undefined8 result;\n  \n  result = CONCAT44(exponent,base);\n  shifted_exponent = (exponent << 1) >> 0x15;\n  if (shifted_exponent == 0) {\n    if ((exponent & 0x7fffffff | base) == 0) {\n      return result;\n    }\n    result = __muldf3(base,exponent,0,0x43500000);\n    if (-0xc351 < power_offset) {\n      shifted_exponent = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    lower_half_uint = 0xc2f8f359;\n    constant_1 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_exponent == 0x7ff) {\n      result = __aeabi_dadd(base,exponent,base,exponent,rounding_mode);\n      return result;\n    }\nLAB_08007210:\n    upper_half_uint = (uint)((ulonglong)result >> 0x20);\n    lower_half_uint = (undefined4)result;\n    adjusted_exponent = shifted_exponent + power_offset;\n    if (adjusted_exponent < 0x7ff) {\n      if (0 < adjusted_exponent) {\n        return CONCAT44(upper_half_uint & 0x800fffff | adjusted_exponent * 0x100000,lower_half_uint);\n      }\n      if (adjusted_exponent + 0x35 < 0 == SCARRY4(adjusted_exponent,0x35)) {\n        result = CONCAT44(upper_half_uint & 0x800fffff | (adjusted_exponent + 0x36) * 0x100000,lower_half_uint);\n        lower_half_uint = 0;\n        constant_1 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (power_offset < 0xc351) {\n        result = copysign(0xc2f8f359,0x1a56e1f,lower_half_uint,upper_half_uint);\n        goto LAB_080071ec;\n      }\n    }\n    result = copysign(0x8800759c,0x7e37e43c,lower_half_uint,upper_half_uint);\n    lower_half_uint = 0x8800759c;\n    constant_1 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),lower_half_uint,constant_1);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_power_080071c0",
                "param_1": "base",
                "param_2": "exponent",
                "param_3": "power_offset",
                "param_4": "rounding_mode",
                "uVar1": "shifted_exponent",
                "uVar2": "lower_half_uint",
                "iVar3": "adjusted_exponent",
                "uVar4": "constant_1",
                "uVar5": "upper_half_uint",
                "uVar6": "result"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "copysign",
                "__muldf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "scalbn"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "increment_pointer_080072b8",
            "code": "\nvoid incrementPointer_080072b8(int incrementAmount)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + incrementAmount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "increment_pointer_080072b8",
                "param_1": "incrementAmount"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array",
                "frame_dummy"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 156555,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "FUN_08004f68",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724"
        ]
    ],
    "locked_functions": []
}