{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "set_flag_if_not_set_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 setFlagIfNotSet_080001ac(undefined4 input)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "set_flag_if_not_set_080001ac",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *input_array,uint byte_to_find,uint array_length)\n\n{\n  byte current_byte;\n  char is_zero_lowest_byte;\n  char is_zero_2nd_lowest_byte;\n  char is_zero_3rd_lowest_byte;\n  char is_zero_highest_byte;\n  byte *result_ptr;\n  uint *updated_input_array;\n  byte *updated_result_ptr;\n  uint offset;\n  uint updated_array_length;\n  uint result1;\n  uint result2;\n  bool is_nonzero_lowest_byte;\n  bool is_nonzero_2nd_lowest_byte;\n  bool is_nonzero_3rd_lowest_byte;\n  bool is_nonzero_highest_byte;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)array_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n      updated_input_array = (uint *)((int)input_array + 1);\n      current_byte = *(byte *)input_array;\n      array_length = array_length - 1;\n      input_array = updated_input_array;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    offset = (uint)input_array & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = byte_to_find | byte_to_find << 8;\n        offset = offset | offset << 0x10;\n        updated_array_length = array_length & 0xfffffff8;\n        do {\n          updated_input_array = input_array + 2;\n          updated_array_length = updated_array_length - 8;\n          result1 = *input_array ^ offset;\n          result2 = input_array[1] ^ offset;\n          is_zero_lowest_byte = -((char)result1 == '\\0');\n          is_zero_2nd_lowest_byte = -((char)(result1 >> 8) == '\\0');\n          is_zero_3rd_lowest_byte = -((char)(result1 >> 0x10) == '\\0');\n          is_zero_highest_byte = -((char)(result1 >> 0x18) == '\\0');\n          result1 = CONCAT13(is_zero_highest_byte,CONCAT12(is_zero_3rd_lowest_byte,CONCAT11(is_zero_2nd_lowest_byte,is_zero_lowest_byte)));\n          is_nonzero_lowest_byte = (char)result2 != '\\0';\n          is_nonzero_2nd_lowest_byte = (char)(result2 >> 8) != '\\0';\n          is_nonzero_3rd_lowest_byte = (char)(result2 >> 0x10) != '\\0';\n          is_nonzero_highest_byte = (char)(result2 >> 0x18) != '\\0';\n          result2 = CONCAT13(is_nonzero_highest_byte * is_zero_highest_byte - !is_nonzero_highest_byte,\n                            CONCAT12(is_nonzero_3rd_lowest_byte * is_zero_3rd_lowest_byte - !is_nonzero_3rd_lowest_byte,\n                                     CONCAT11(is_nonzero_2nd_lowest_byte * is_zero_2nd_lowest_byte - !is_nonzero_2nd_lowest_byte,is_nonzero_lowest_byte * is_zero_lowest_byte - !is_nonzero_lowest_byte)));\n          if (result2 != 0) {\n            if (result1 == 0) {\n              updated_result_ptr = (byte *)((int)input_array + 5);\n              result1 = result2;\n            }\n            else {\n              updated_result_ptr = (byte *)((int)input_array + 1);\n            }\n            if ((result1 & 1) == 0) {\n              is_nonzero_lowest_byte = (result1 & 0x100) == 0;\n              result_ptr = updated_result_ptr + 1;\n              if (is_nonzero_lowest_byte) {\n                is_nonzero_lowest_byte = (result1 & 0x18000) == 0;\n                result_ptr = updated_result_ptr + 2;\n              }\n              updated_result_ptr = result_ptr;\n              if (is_nonzero_lowest_byte) {\n                updated_result_ptr = updated_result_ptr + 1;\n              }\n            }\n            return updated_result_ptr + -1;\n          }\n          input_array = updated_input_array;\n        } while (updated_array_length != 0);\n        array_length = array_length & 7;\n        goto joined_r0x08000290;\n      }\n      updated_input_array = (uint *)((int)input_array + 1);\n      array_length = array_length - 1;\n      if (*(byte *)input_array == byte_to_find) break;\n      offset = (uint)updated_input_array & 7;\n      input_array = updated_input_array;\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)updated_input_array + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "input_array",
                "param_2": "byte_to_find",
                "param_3": "array_length",
                "bVar1": "current_byte",
                "cVar2": "is_zero_lowest_byte",
                "cVar3": "is_zero_2nd_lowest_byte",
                "cVar4": "is_zero_3rd_lowest_byte",
                "cVar5": "is_zero_highest_byte",
                "pbVar6": "result_ptr",
                "puVar7": "updated_input_array",
                "pbVar8": "updated_result_ptr",
                "uVar9": "offset",
                "uVar10": "updated_array_length",
                "uVar11": "result1",
                "uVar12": "result2",
                "bVar13": "is_nonzero_lowest_byte",
                "bVar14": "is_nonzero_2nd_lowest_byte",
                "bVar15": "is_nonzero_3rd_lowest_byte",
                "bVar16": "is_nonzero_highest_byte"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "calculate_result_080002d0",
            "code": "\nundefined8 calculateResult_080002d0(int value1,int value2,int value3,int value4)\n\n{\n  undefined8 result;\n  \n  if ((value4 == 0) && (value3 == 0)) {\n    if (value2 != 0 || value1 != 0) {\n      value2 = -1;\n      value1 = -1;\n    }\n    return CONCAT44(value2,value1);\n  }\n  result = div_mod_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "calculate_result_080002d0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "div_mod_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divMod_08000300(uint dividend,uint dividend_low,uint divisor,uint divisor_low,uint *remainder_and_quotient)\n\n{\n  ulonglong quotient_high;\n  uint temp_1;\n  uint quotient_low;\n  uint quotient;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  int leading_zeros;\n  bool carry_flag;\n  \n  if (divisor_low == 0) {\n    if (dividend_low < divisor) {\n      leading_zeros = LZCOUNT(divisor);\n      if (leading_zeros != 0) {\n        divisor = divisor << leading_zeros;\n        dividend_low = dividend >> (0x20U - leading_zeros & 0xff) | dividend_low << leading_zeros;\n        dividend = dividend << leading_zeros;\n      }\n      temp_5 = divisor >> 0x10;\n      temp_3 = dividend_low / temp_5;\n      temp_2 = dividend >> 0x10 | (dividend_low - temp_5 * temp_3) * 0x10000;\n      quotient = temp_3 * (divisor & 0xffff);\n      quotient_low = temp_3;\n      if (temp_2 <= quotient && quotient - temp_2 != 0) {\n        carry_flag = CARRY4(temp_2,divisor);\n        temp_2 = temp_2 + divisor;\n        quotient_low = temp_3 - 1;\n        if ((carry_flag == false) && (temp_2 <= quotient && quotient - temp_2 != 0)) {\n          quotient_low = temp_3 - 2;\n          temp_2 = temp_2 + divisor;\n        }\n      }\n      temp_3 = (temp_2 - quotient) / temp_5;\n      temp_2 = dividend & 0xffff | ((temp_2 - quotient) - temp_5 * temp_3) * 0x10000;\n      temp_5 = temp_3 * (divisor & 0xffff);\n      quotient = temp_3;\n      if (temp_2 <= temp_5 && temp_5 - temp_2 != 0) {\n        carry_flag = CARRY4(temp_2,divisor);\n        temp_2 = temp_2 + divisor;\n        quotient = temp_3 - 1;\n        if ((carry_flag == false) && (temp_2 <= temp_5 && temp_5 - temp_2 != 0)) {\n          quotient = temp_3 - 2;\n          temp_2 = temp_2 + divisor;\n        }\n      }\n      temp_2 = temp_2 - temp_5;\n      quotient = quotient | quotient_low << 0x10;\n      quotient_low = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      leading_zeros = LZCOUNT(divisor);\n      if (leading_zeros == 0) {\n        dividend_low = dividend_low - divisor;\n        temp_2 = divisor >> 0x10;\n        temp_6 = divisor & 0xffff;\n        quotient_low = 1;\n      }\n      else {\n        divisor = divisor << leading_zeros;\n        temp_2 = divisor >> 0x10;\n        quotient = dividend_low >> (0x20U - leading_zeros & 0xff);\n        temp_4 = dividend >> (0x20U - leading_zeros & 0xff) | dividend_low << leading_zeros;\n        quotient_low = quotient / temp_2;\n        temp_6 = divisor & 0xffff;\n        temp_5 = temp_4 >> 0x10 | (quotient - temp_2 * quotient_low) * 0x10000;\n        temp_3 = quotient_low * temp_6;\n        dividend = dividend << leading_zeros;\n        quotient = quotient_low;\n        if (temp_5 <= temp_3 && temp_3 - temp_5 != 0) {\n          carry_flag = CARRY4(temp_5,divisor);\n          temp_5 = temp_5 + divisor;\n          quotient = quotient_low - 1;\n          if ((carry_flag == false) && (temp_5 <= temp_3 && temp_3 - temp_5 != 0)) {\n            quotient = quotient_low - 2;\n            temp_5 = temp_5 + divisor;\n          }\n        }\n        temp_1 = (temp_5 - temp_3) / temp_2;\n        dividend_low = temp_4 & 0xffff | ((temp_5 - temp_3) - temp_2 * temp_1) * 0x10000;\n        temp_3 = temp_1 * temp_6;\n        quotient_low = temp_1;\n        if (dividend_low <= temp_3 && temp_3 - dividend_low != 0) {\n          carry_flag = CARRY4(dividend_low,divisor);\n          dividend_low = dividend_low + divisor;\n          quotient_low = temp_1 - 1;\n          if ((carry_flag == false) && (dividend_low <= temp_3 && temp_3 - dividend_low != 0)) {\n            quotient_low = temp_1 - 2;\n            dividend_low = dividend_low + divisor;\n          }\n        }\n        dividend_low = dividend_low - temp_3;\n        quotient_low = quotient_low | quotient << 0x10;\n      }\n      temp_4 = dividend_low / temp_2;\n      temp_5 = dividend >> 0x10 | (dividend_low - temp_2 * temp_4) * 0x10000;\n      quotient = temp_6 * temp_4;\n      temp_3 = temp_4;\n      if (temp_5 <= quotient && quotient - temp_5 != 0) {\n        carry_flag = CARRY4(temp_5,divisor);\n        temp_5 = temp_5 + divisor;\n        temp_3 = temp_4 - 1;\n        if ((carry_flag == false) && (temp_5 <= quotient && quotient - temp_5 != 0)) {\n          temp_3 = temp_4 - 2;\n          temp_5 = temp_5 + divisor;\n        }\n      }\n      temp_4 = (temp_5 - quotient) / temp_2;\n      temp_2 = dividend & 0xffff | ((temp_5 - quotient) - temp_2 * temp_4) * 0x10000;\n      temp_6 = temp_6 * temp_4;\n      quotient = temp_4;\n      if (temp_2 <= temp_6 && temp_6 - temp_2 != 0) {\n        carry_flag = CARRY4(temp_2,divisor);\n        temp_2 = temp_2 + divisor;\n        quotient = temp_4 - 1;\n        if ((carry_flag == false) && (temp_2 <= temp_6 && temp_6 - temp_2 != 0)) {\n          quotient = temp_4 - 2;\n          temp_2 = temp_2 + divisor;\n        }\n      }\n      temp_2 = temp_2 - temp_6;\n      quotient = quotient | temp_3 << 0x10;\n    }\n    if (remainder_and_quotient != (uint *)0x0) {\n      *remainder_and_quotient = temp_2 >> leading_zeros;\n      remainder_and_quotient[1] = 0;\n      return CONCAT44(quotient_low,quotient);\n    }\n  }\n  else if (dividend_low < divisor_low) {\n    if (remainder_and_quotient != (uint *)0x0) {\n      *remainder_and_quotient = dividend;\n      remainder_and_quotient[1] = dividend_low;\n      return 0;\n    }\n    quotient = 0;\n    quotient_low = 0;\n  }\n  else {\n    leading_zeros = LZCOUNT(divisor_low);\n    if (leading_zeros != 0) {\n      temp_5 = 0x20 - leading_zeros;\n      quotient_low = divisor >> (temp_5 & 0xff) | divisor_low << leading_zeros;\n      temp_6 = quotient_low >> 0x10;\n      quotient = dividend_low >> (temp_5 & 0xff);\n      temp_1 = dividend >> (temp_5 & 0xff) | dividend_low << leading_zeros;\n      temp_4 = quotient / temp_6;\n      temp_3 = temp_1 >> 0x10 | (quotient - temp_6 * temp_4) * 0x10000;\n      temp_2 = temp_4 * (quotient_low & 0xffff);\n      dividend = dividend << leading_zeros;\n      quotient = temp_4;\n      if (temp_3 <= temp_2 && temp_2 - temp_3 != 0) {\n        carry_flag = CARRY4(temp_3,quotient_low);\n        temp_3 = temp_3 + quotient_low;\n        quotient = temp_4 - 1;\n        if ((carry_flag == false) && (temp_3 <= temp_2 && temp_2 - temp_3 != 0)) {\n          quotient = temp_4 - 2;\n          temp_3 = temp_3 + quotient_low;\n        }\n      }\n      temp_4 = (temp_3 - temp_2) / temp_6;\n      temp_3 = temp_1 & 0xffff | ((temp_3 - temp_2) - temp_6 * temp_4) * 0x10000;\n      temp_6 = temp_4 * (quotient_low & 0xffff);\n      temp_2 = temp_4;\n      if (temp_3 <= temp_6 && temp_6 - temp_3 != 0) {\n        carry_flag = CARRY4(temp_3,quotient_low);\n        temp_3 = temp_3 + quotient_low;\n        temp_2 = temp_4 - 1;\n        if ((carry_flag == false) && (temp_3 <= temp_6 && temp_6 - temp_3 != 0)) {\n          temp_2 = temp_4 - 2;\n          temp_3 = temp_3 + quotient_low;\n        }\n      }\n      temp_2 = temp_2 | quotient << 0x10;\n      quotient_high = (ulonglong)temp_2 * (ulonglong)(divisor << leading_zeros);\n      if (CONCAT44(temp_3 - temp_6,dividend) < quotient_high) {\n        quotient_high = quotient_high - CONCAT44(quotient_low,divisor << leading_zeros);\n        temp_2 = temp_2 - 1;\n      }\n      if (remainder_and_quotient != (uint *)0x0) {\n        quotient = ((temp_3 - temp_6) - (int)(quotient_high >> 0x20)) - (uint)(dividend < (uint)quotient_high);\n        *remainder_and_quotient = quotient << (temp_5 & 0xff) | dividend - (uint)quotient_high >> leading_zeros;\n        remainder_and_quotient[1] = quotient >> leading_zeros;\n      }\n      return (ulonglong)temp_2;\n    }\n    if ((divisor_low < dividend_low) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_low = (dividend_low - divisor_low) - (uint)carry_flag;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    quotient_low = 0;\n    if (remainder_and_quotient != (uint *)0x0) {\n      *remainder_and_quotient = dividend;\n      remainder_and_quotient[1] = dividend_low;\n      return (ulonglong)quotient;\n    }\n  }\n  return CONCAT44(quotient_low,quotient);\n}\n\n",
            "renaming": {
                "FUN_08000300": "div_mod_08000300",
                "param_1": "dividend",
                "param_2": "dividend_low",
                "param_3": "divisor",
                "param_4": "divisor_low",
                "param_5": "remainder_and_quotient",
                "uVar1": "quotient_high",
                "uVar2": "temp_1",
                "uVar3": "quotient_low",
                "uVar4": "quotient",
                "uVar5": "temp_2",
                "uVar6": "temp_3",
                "uVar7": "temp_4",
                "uVar8": "temp_5",
                "uVar9": "temp_6",
                "bVar11": "carry_flag",
                "iVar10": "leading_zeros"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "send_software_interrupt_080005e0",
            "code": "\nvoid sendSoftwareInterrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "send_software_interrupt_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "handle_software_interrupt_080005e4",
            "code": "\nundefined4 handleSoftwareInterrupt_080005e4(undefined4 interruptType,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = send_software_interrupt_080005e0(1,interruptType,0,0,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "handle_software_interrupt_080005e4",
                "param_1": "interruptType",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_communication_08000600",
            "code": "\nvoid initializeCommunication_08000600(int **communicationData,undefined4 configParam)\n\n{\n  char communicationMode;\n  int returnStatus;\n  \n  communicationMode = *(char *)((int)communicationData + 5);\n  if (communicationMode == '\\x02') {\n    *communicationData = &DAT_20000338;\n  }\n  else if (communicationMode == '\\x03') {\n    *communicationData = &DAT_20000338;\n  }\n  else if (communicationMode == '\\x01') {\n    *communicationData = &DAT_20000338;\n  }\n  else {\n    *communicationData = &DAT_20000338;\n  }\n  configure_serial_port_08004388(*communicationData,configParam,6);\n  if (1 < *(byte *)((int)communicationData + 6)) {\n    process_parameter_08004110(*(byte *)((int)communicationData + 6),1);\n    process_data_080041bc(*(undefined *)((int)communicationData + 6),0);\n  }\n  do {\n    returnStatus = (**(code **)(**communicationData + 0xc))();\n  } while (-1 < returnStatus);\n  *(undefined *)((int)communicationData + 0x49) = 0;\n  *(undefined *)((int)communicationData + 0x4a) = 0;\n  *(undefined2 *)(communicationData + 0x15) = 0;\n  *(undefined2 *)((int)communicationData + 0x52) = 0;\n  *(undefined2 *)(communicationData + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_communication_08000600",
                "param_1": "communicationData",
                "param_2": "configParam",
                "cVar1": "communicationMode",
                "iVar2": "returnStatus"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "set_configuration_0800066c",
            "code": "\nvoid setConfiguration_0800066c(int configStruct,undefined value1,int value2,undefined value3)\n\n{\n  *(undefined *)(configStruct + 4) = value1;\n  if (3 < value2) {\n    value2 = 0;\n  }\n  *(char *)(configStruct + 5) = (char)value2;\n  *(undefined *)(configStruct + 6) = value3;\n  *(undefined2 *)(configStruct + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "set_configuration_0800066c",
                "param_1": "configStruct",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_configuration_08000682",
            "code": "\nundefined4 initialize_configuration_08000682(undefined4 input_param)\n\n{\n  set_configuration();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_configuration_08000682",
                "param_1": "input_param",
                "set_configuration_0800066c": "set_configuration"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "initialize_configuration_if_needed_08000690",
            "code": "\nvoid initialize_configuration_if_needed_08000690(int condition,int value,undefined4 param_3,undefined4 param_4)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_configuration_08000682(&DAT_20000124,1,0,0,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "initialize_configuration_if_needed_08000690",
                "param_1": "condition",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_and_count_data_080006b4",
            "code": "\nint process_and_count_data_080006b4(int **data)\n\n{\n  bool isFull;\n  undefined result;\n  int status;\n  byte count;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    process_data(*(byte *)((int)data + 6),0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    isFull = false;\n    while (status = (**(code **)(**data + 8))(), status != 0) {\n      count = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      *(undefined *)((int)data + count + 9) = result;\n      count = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = count;\n      if (0x3f < count) {\n        isFull = true;\n      }\n    }\n  }\n  else {\n    isFull = false;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (isFull) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)data + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_and_count_data_080006b4",
                "param_1": "data",
                "bVar1": "isFull",
                "uVar2": "result",
                "iVar3": "status",
                "bVar4": "count",
                "process_data_080041bc": "process_data"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculateChecksum_08000728(int dataAddress,int dataLength)\n\n{\n  byte bitPosition;\n  uint checksum;\n  uint bit;\n  uint i;\n  \n  checksum = 0xffff;\n  for (i = 0; (int)i < dataLength; i = i + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(dataAddress + i + 9);\n    for (bitPosition = 1; bitPosition < 9; bitPosition = bitPosition + 1) {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "dataAddress",
                "param_2": "dataLength",
                "bVar1": "bitPosition",
                "uVar2": "checksum",
                "uVar3": "bit",
                "uVar4": "i"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_checksum_and_process_data_0800076c",
            "code": "\nvoid updateChecksumAndProcessData_0800076c(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 checksum;\n  int result;\n  uint nextIndex;\n  \n  nextIndex = (uint)*(byte *)((int)data + 0x49);\n  checksum = calculate_checksum_08000728(data,nextIndex,param3,param4,param4);\n  *(char *)((int)data + nextIndex + 9) = (char)((ushort)checksum >> 8);\n  nextIndex = nextIndex + 1 & 0xff;\n  *(char *)((int)data + nextIndex + 9) = (char)checksum;\n  *(char *)((int)data + 0x49) = (char)nextIndex + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    process_data_080041bc(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    process_data_080041bc(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result = initialize_data_08004204();\n  data[0x17] = (int *)(result + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_checksum_and_process_data_0800076c",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "checksum",
                "iVar2": "result",
                "uVar3": "nextIndex"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_08000b54",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_condition_and_combine_values_080007f0",
            "code": "\nundefined4 check_condition_and_combine_values_080007f0(int input_ptr,undefined4 value_ptr,uint data_size,undefined4 extra_value)\n\n{\n  bool is_match;\n  byte combined_byte;\n  char combined_char_1;\n  char combined_char_2;\n  int combined_value_1;\n  uint index;\n  int combined_value_2;\n  \n  index = 0;\n  do {\n    if (7 < index) {\n      is_match = false;\nLAB_0800080a:\n      if (!is_match) {\n        *(short *)(input_ptr + 0x54) = *(short *)(input_ptr + 0x54) + 1;\n        return 1;\n      }\n      combined_value_2 = *(byte *)(input_ptr + 10) - 1;\n      switch(*(byte *)(input_ptr + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        combined_char_1 = combine_values_08004640(*(undefined *)(input_ptr + 0xb),*(undefined *)(input_ptr + 0xc),data_size,\n                             combined_value_2,extra_value);\n        combined_char_2 = combine_values_08004640(*(undefined *)(input_ptr + 0xd),*(undefined *)(input_ptr + 0xe));\n        if (*(byte *)(input_ptr + 0x60) < (byte)(combined_char_2 + combined_char_1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        combined_value_2 = combine_values_08004640(*(undefined *)(input_ptr + 0xb),*(undefined *)(input_ptr + 0xc),data_size,\n                             combined_value_2,extra_value);\n        if ((uint)*(byte *)(input_ptr + 0x60) < (uint)(combined_value_2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        combined_byte = combine_values_08004640(*(undefined *)(input_ptr + 0xb),*(undefined *)(input_ptr + 0xc),data_size,\n                             combined_value_2,extra_value);\n        if (*(byte *)(input_ptr + 0x60) < combined_byte) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    data_size = (uint)*(byte *)(input_ptr + 10);\n    if ((byte)(&DAT_08005a10)[index] == data_size) {\n      is_match = true;\n      goto LAB_0800080a;\n    }\n    index = index + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  combined_value_2 = combine_values_08004640(*(undefined *)(input_ptr + 0xb),*(undefined *)(input_ptr + 0xc),data_size,combined_value_2,\n                       extra_value);\n  combined_value_1 = combine_values_08004640(*(undefined *)(input_ptr + 0xd),*(undefined *)(input_ptr + 0xe));\n  if ((uint)*(byte *)(input_ptr + 0x60) <\n      (((uint)(combined_value_2 << 0xc) >> 0x10) + ((uint)(combined_value_1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_condition_and_combine_values_080007f0",
                "param_1": "input_ptr",
                "param_2": "value_ptr",
                "param_3": "data_size",
                "param_4": "extra_value",
                "bVar1": "is_match",
                "bVar2": "combined_byte",
                "cVar3": "combined_char_1",
                "cVar4": "combined_char_2",
                "iVar5": "combined_value_1",
                "uVar6": "index",
                "iVar7": "combined_value_2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_data_and_modify_080008cc",
            "code": "\nvoid copyDataAndModify_080008cc(int dataAddress,undefined value)\n\n{\n  *(undefined *)(dataAddress + 9) = *(undefined *)(dataAddress + 4);\n  *(byte *)(dataAddress + 10) = *(byte *)(dataAddress + 10) ^ 0x80;\n  *(undefined *)(dataAddress + 0xb) = value;\n  *(undefined *)(dataAddress + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_data_and_modify_080008cc",
                "param_1": "dataAddress",
                "param_2": "value"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "process_data_080008e2",
            "code": "\nint processData_080008e2(int dataPtr,int arrayPtr,undefined4 val1,undefined4 val2)\n\n{\n  int combinedValue;\n  uint arraySize;\n  uint loopCounter;\n  uint bitCounter;\n  char shiftedByte;\n  int bytePtr;\n  \n  combinedValue = combineValues(*(undefined *)(dataPtr + 0xb),*(undefined *)(dataPtr + 0xc),val1,val2,\n                       val2);\n  arraySize = combineValues(*(undefined *)(dataPtr + 0xd),*(undefined *)(dataPtr + 0xe));\n  shiftedByte = (char)((arraySize << 0x15) >> 0x18);\n  if ((arraySize & 7) != 0) {\n    shiftedByte = shiftedByte + '\\x01';\n  }\n  *(char *)(dataPtr + 0xb) = shiftedByte;\n  *(undefined *)(dataPtr + 0x49) = 3;\n  bitCounter = 0;\n  for (loopCounter = 0; (int)loopCounter < (int)arraySize; loopCounter = loopCounter + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(arrayPtr + ((loopCounter + combinedValue) * 0x100000 >> 0x18) * 2) >>\n         (loopCounter + combinedValue & 0xf) & 1U) == 0) {\n      bytePtr = (uint)*(byte *)(dataPtr + 0x49) + dataPtr;\n      *(byte *)(bytePtr + 9) = *(byte *)(bytePtr + 9) & ~(byte)(1 << bitCounter);\n    }\n    else {\n      bytePtr = (uint)*(byte *)(dataPtr + 0x49) + dataPtr;\n      *(byte *)(bytePtr + 9) = *(byte *)(bytePtr + 9) | (byte)(1 << bitCounter);\n    }\n    bitCounter = bitCounter + 1 & 0xff;\n    if (7 < bitCounter) {\n      *(char *)(dataPtr + 0x49) = *(char *)(dataPtr + 0x49) + '\\x01';\n      bitCounter = 0;\n    }\n  }\n  if ((arraySize & 7) != 0) {\n    *(char *)(dataPtr + 0x49) = *(char *)(dataPtr + 0x49) + '\\x01';\n  }\n  shiftedByte = *(char *)(dataPtr + 0x49);\n  updateChecksumAndProcessData(dataPtr);\n  return (int)(char)(shiftedByte + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "dataPtr",
                "param_2": "arrayPtr",
                "param_3": "val1",
                "param_4": "val2",
                "iVar1": "combinedValue",
                "uVar2": "arraySize",
                "uVar3": "loopCounter",
                "uVar4": "bitCounter",
                "cVar5": "shiftedByte",
                "iVar6": "bytePtr",
                "combine_values_08004640": "combineValues",
                "update_checksum_and_process_data_0800076c": "updateChecksumAndProcessData"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "extract_and_process_data_08000998",
            "code": "\nint extract_and_process_data_08000998(int data_ptr,int input_ptr,undefined4 param_a,undefined4 param_b)\n\n{\n  byte byte_var_1;\n  char char_var_2;\n  byte byte_var_3;\n  byte byte_var_4;\n  uint uint_var_1;\n  uint uint_var_2;\n  \n  byte_var_3 = combine_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_a,param_b,\n                       param_b);\n  byte_var_4 = combine_values_08004640(*(undefined *)(data_ptr + 0xd),*(undefined *)(data_ptr + 0xe));\n  *(byte *)(data_ptr + 0xb) = byte_var_4 << 1;\n  *(undefined *)(data_ptr + 0x49) = 3;\n  for (uint_var_1 = (uint)byte_var_3; uint_var_1 < (uint)byte_var_3 + (uint)byte_var_4; uint_var_1 = uint_var_1 + 1 & 0xff) {\n    byte_var_1 = *(byte *)(data_ptr + 0x49);\n    *(char *)(data_ptr + (uint)byte_var_1 + 9) = (char)((ushort)*(undefined2 *)(input_ptr + uint_var_1 * 2) >> 8)\n    ;\n    uint_var_2 = byte_var_1 + 1 & 0xff;\n    char_var_2 = (char)uint_var_2;\n    *(char *)(data_ptr + 0x49) = char_var_2;\n    *(undefined *)(data_ptr + uint_var_2 + 9) = *(undefined *)(input_ptr + uint_var_1 * 2);\n    *(char *)(data_ptr + 0x49) = char_var_2 + '\\x01';\n  }\n  char_var_2 = *(char *)(data_ptr + 0x49);\n  update_checksum_and_process_data_0800076c(data_ptr);\n  return (int)(char)(char_var_2 + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "extract_and_process_data_08000998",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "param_3": "param_a",
                "param_4": "param_b",
                "bVar1": "byte_var_1",
                "cVar2": "char_var_2",
                "bVar3": "byte_var_3",
                "bVar4": "byte_var_4",
                "uVar5": "uint_var_1",
                "uVar6": "uint_var_2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_value_in_array_08000a00",
            "code": "\nundefined4 updateValueInArray_08000a00(int arrayIndex,int arrayPointer,undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  uint combinedValue;\n  uint shiftedValue;\n  \n  combinedValue = combine_values_08004640(*(undefined *)(arrayIndex + 0xb),*(undefined *)(arrayIndex + 0xc),firstParameter,secondParameter,\n                       secondParameter);\n  shiftedValue = (combinedValue << 0x14) >> 0x18;\n  if (*(char *)(arrayIndex + 0xd) == -1) {\n    *(ushort *)(arrayPointer + shiftedValue * 2) =\n         (ushort)(1 << (combinedValue & 0xf)) | *(ushort *)(arrayPointer + shiftedValue * 2);\n  }\n  else {\n    *(ushort *)(arrayPointer + shiftedValue * 2) =\n         *(ushort *)(arrayPointer + shiftedValue * 2) & ~(ushort)(1 << (combinedValue & 0xf));\n  }\n  *(undefined *)(arrayIndex + 0x49) = 6;\n  processData(arrayIndex);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_value_in_array_08000a00",
                "param_1": "arrayIndex",
                "param_2": "arrayPointer",
                "param_3": "firstParameter",
                "param_4": "secondParameter",
                "uVar1": "combinedValue",
                "uVar2": "shiftedValue",
                "update_checksum_and_process_data_0800076c": "processData"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_data_and_calculate_checksum_08000a4e",
            "code": "\nundefined4 updateDataAndCalculateChecksum_08000a4e(int dataPointer,int resultPointer)\n\n{\n  byte combinedByte;\n  undefined2 combinedValue;\n  \n  combinedByte = combine_values_08004640(*(undefined *)(dataPointer + 0xb),*(undefined *)(dataPointer + 0xc));\n  combinedValue = combine_values_08004640(*(undefined *)(dataPointer + 0xd),*(undefined *)(dataPointer + 0xe));\n  *(undefined2 *)(resultPointer + (uint)combinedByte * 2) = combinedValue;\n  *(undefined *)(dataPointer + 0x49) = 6;\n  update_checksum_and_process_data_0800076c(dataPointer);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_data_and_calculate_checksum_08000a4e",
                "param_1": "dataPointer",
                "param_2": "resultPointer",
                "bVar1": "combinedByte",
                "uVar2": "combinedValue"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_memory_values_08000a7a",
            "code": "\nundefined4 update_memory_values_08000a7a(int memory_address,int memory_location,undefined4 param_3,undefined4 param_4)\n\n{\n  int combined_value_1;\n  int combined_value_2;\n  uint counter_1;\n  uint counter_2;\n  uint bit_position;\n  uint byte_position;\n  uint loop_counter_1;\n  \n  combined_value_1 = combine_values_08004640(*(undefined *)(memory_address + 0xb),*(undefined *)(memory_address + 0xc),param_3,param_4,\n                       param_4);\n  combined_value_2 = combine_values_08004640(*(undefined *)(memory_address + 0xd),*(undefined *)(memory_address + 0xe));\n  counter_2 = 0;\n  loop_counter_1 = 7;\n  for (counter_1 = 0; (int)counter_1 < combined_value_2; counter_1 = counter_1 + 1 & 0xffff) {\n    byte_position = (counter_1 + combined_value_1) * 0x100000 >> 0x18;\n    bit_position = counter_1 + combined_value_1 & 0xf;\n    if (((int)(uint)*(byte *)(memory_address + loop_counter_1 + 9) >> counter_2 & 1U) == 0) {\n      *(ushort *)(memory_location + byte_position * 2) = *(ushort *)(memory_location + byte_position * 2) & ~(ushort)(1 << bit_position);\n    }\n    else {\n      *(ushort *)(memory_location + byte_position * 2) = (ushort)(1 << bit_position) | *(ushort *)(memory_location + byte_position * 2);\n    }\n    counter_2 = counter_2 + 1 & 0xff;\n    if (7 < counter_2) {\n      loop_counter_1 = loop_counter_1 + 1 & 0xff;\n      counter_2 = 0;\n    }\n  }\n  *(undefined *)(memory_address + 0x49) = 6;\n  update_checksum_and_process_data_0800076c(memory_address);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_memory_values_08000a7a",
                "param_1": "memory_address",
                "param_2": "memory_location",
                "iVar1": "combined_value_1",
                "iVar2": "combined_value_2",
                "uVar3": "counter_1",
                "uVar4": "counter_2",
                "uVar5": "bit_position",
                "uVar6": "byte_position",
                "uVar7": "loop_counter_1"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "combine_and_process_data_08000b04",
            "code": "\nint combineAndProcessData_08000b04(int inputData,int outputData)\n\n{\n  byte byteValue1;\n  byte byteValue2;\n  char charValue;\n  undefined2 combinedValue;\n  uint loopIndex;\n  \n  byteValue1 = *(byte *)(inputData + 0xc);\n  byteValue2 = *(byte *)(inputData + 0xe);\n  *(undefined *)(inputData + 0xd) = 0;\n  *(byte *)(inputData + 0xe) = byteValue2;\n  *(undefined *)(inputData + 0x49) = 6;\n  for (loopIndex = 0; loopIndex < byteValue2; loopIndex = loopIndex + 1 & 0xff) {\n    combinedValue = combine_values_08004640(*(undefined *)(loopIndex * 2 + inputData + 0x10),\n                         *(undefined *)(inputData + (loopIndex + 4) * 2 + 9));\n    *(undefined2 *)(outputData + (byteValue1 + loopIndex) * 2) = combinedValue;\n  }\n  charValue = *(char *)(inputData + 0x49);\n  update_checksum_and_process_data_0800076c(inputData);\n  return (int)(char)(charValue + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "combine_and_process_data_08000b04",
                "param_1": "inputData",
                "param_2": "outputData",
                "bVar1": "byteValue1",
                "bVar2": "byteValue2",
                "cVar3": "charValue",
                "uVar4": "combinedValue",
                "uVar5": "loopIndex"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_and_return_result_08000b54",
            "code": "\nint process_and_return_result_08000b54(int **pointer_array,int *data_array,undefined4 value)\n\n{\n  byte result_byte;\n  int result_int;\n  uint byte_value;\n  int final_result;\n  \n  pointer_array[0x13] = data_array;\n  *(char *)(pointer_array + 0x18) = (char)value;\n  if (*(byte *)((int)pointer_array + 5) < 4) {\n    result_byte = (**(code **)(**pointer_array + 8))();\n    byte_value = (uint)result_byte;\n  }\n  if (byte_value == 0) {\n    final_result = 0;\n  }\n  else if ((int)byte_value < 8) {\n    final_result = 0;\n  }\n  else {\n    final_result = process_and_count_data_080006b4(pointer_array);\n    *(char *)(pointer_array + 2) = (char)final_result;\n    if (*(char *)((int)pointer_array + 9) == *(char *)(pointer_array + 1)) {\n      result_int = check_condition_and_combine_values_080007f0(pointer_array);\n      if (result_int < 1) {\n        result_int = initialize_data_08004204();\n        pointer_array[0x17] = (int *)((uint)*(ushort *)((int)pointer_array + 0x56) + result_int);\n        *(undefined *)(pointer_array + 2) = 0;\n        switch(*(undefined *)((int)pointer_array + 10)) {\n        case 1:\n        case 2:\n          final_result = process_data_080008e2(pointer_array,data_array,value);\n          break;\n        case 3:\n        case 4:\n          final_result = extract_and_process_data_08000998(pointer_array,data_array,value);\n          break;\n        case 5:\n          final_result = update_value_in_array_08000a00(pointer_array,data_array,value);\n          break;\n        case 6:\n          final_result = update_data_and_calculate_checksum_08000a4e(pointer_array,data_array,value);\n          break;\n        case 0xf:\n          final_result = update_memory_values_08000a7a(pointer_array,data_array,value);\n          break;\n        case 0x10:\n          final_result = combine_and_process_data_08000b04(pointer_array,data_array,value);\n        }\n      }\n      else {\n        if (result_int != 0xff) {\n          copy_data_and_modify_080008cc(pointer_array,result_int);\n          update_checksum_and_process_data_0800076c(pointer_array);\n        }\n        *(char *)(pointer_array + 2) = (char)result_int;\n        final_result = (int)(char)result_int;\n      }\n    }\n    else {\n      final_result = 0;\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_and_return_result_08000b54",
                "param_1": "pointer_array",
                "param_2": "data_array",
                "param_3": "value",
                "bVar1": "result_byte",
                "iVar2": "result_int",
                "unaff_r5": "byte_value",
                "iVar3": "final_result"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a7a",
                "FUN_0800076c",
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a00",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_and_setup_08000c4c",
            "code": "\nvoid initialize_and_setup_08000c4c(void)\n\n{\n  handle_software_interrupt(0);\n  initialize_communication(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_and_setup_08000c4c",
                "handle_software_interrupt_080005e4": "handle_software_interrupt",
                "initialize_communication_08000600": "initialize_communication"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "process_data_08000c64",
            "code": "\nvoid process_data_08000c64(void)\n\n{\n  undefined4 input_value;\n  \n  process_and_return_result_08000b54(&DAT_20000124,&DAT_20000004,0x10,input_value,input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "process_data_08000c64",
                "in_r3": "input_value"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initializeSystem_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 configFlag;\n  undefined4 configValue;\n  undefined4 dataFlag;\n  undefined4 dataValue;\n  undefined4 peripheralFlag;\n  undefined4 peripheralValue;\n  undefined4 characterFlag;\n  undefined4 characterValue;\n  undefined4 updateFlag;\n  undefined4 updateValue;\n  undefined4 configureFlag;\n  undefined4 configureValue;\n  undefined4 setFlag;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  configFlag = 1;\n  configValue = 0x50000;\n  dataFlag = 2;\n  dataValue = 0x400000;\n  peripheralFlag = 8;\n  peripheralValue = 0x150;\n  characterFlag = 2;\n  characterValue = 7;\n  improve_and_validate_parameters_0800201c(&configFlag);\n  check_data_consistency_08001f9c();\n  updateFlag = 0xf;\n  updateValue = 2;\n  configureFlag = 0;\n  configureValue = 0x1400;\n  setFlag = 0x1000;\n  configure_peripheral_08002488(&updateFlag,5);\n  uVar1 = get_data_080025e0();\n  set_config_values_08000ee0(uVar1 / 1000);\n  update_e000e010_flag_08000f2c(4);\n  update_character_data_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "configFlag",
                "local_50": "configValue",
                "local_3c": "dataFlag",
                "local_38": "dataValue",
                "local_34": "peripheralFlag",
                "local_30": "peripheralValue",
                "local_2c": "characterFlag",
                "local_28": "characterValue",
                "local_24": "updateFlag",
                "local_20": "updateValue",
                "local_1c": "configureFlag",
                "local_18": "configureValue",
                "local_14": "setFlag"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_registers_080035bc();\n  execute_callbacks_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  initialize_and_process_data_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_system_08000d8e",
            "code": "\nvoid initialize_system_08000d8e(void)\n\n{\n  initialize_system_08000d8e_and_configuration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_system_08000d8e",
                "initialize_system_and_configuration_080034ce": "initialize_system_and_configuration"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "set_and_update_config_08000d98",
            "code": "\nundefined4 setAndUpdateConfig_08000d98(uint configValue)\n\n{\n  int configResult;\n  \n  configResult = set_config_values_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (configResult != 0) {\n    return 1;\n  }\n  if (0xf < configValue) {\n    return 1;\n  }\n  update_character_data_08000e60(0xffffffff,configValue,0);\n  DAT_20000028 = configValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "set_and_update_config_08000d98",
                "param_1": "configValue",
                "iVar1": "configResult"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_configuration_08000de4",
            "code": "\n\n\nundefined4 initialize_configuration_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  updateConfig(3);\n  setAndUpdateConfig(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_configuration_08000de4",
                "update_configuration_08000e3c": "updateConfig",
                "set_and_update_config_08000d98": "setAndUpdateConfig"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000d96",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "add_values_and_store_result_08000e18",
            "code": "\nvoid addValuesAndStoreResult_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "add_values_and_store_result_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_data_value_08000e30",
            "code": "\nundefined4 get_data_value_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_data_value_08000e30"
            },
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_configuration_08000e3c",
            "code": "\n\n\nvoid updateConfiguration_08000e3c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_configuration_08000e3c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_character_data_08000e60",
            "code": "\n\n\nvoid updateCharacterData_08000e60(uint characterIndex,uint inputBits,uint existingData)\n\n{\n  uint newData;\n  uint remainingBits;\n  \n  newData = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - newData;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (newData + 4 < 7) {\n    newData = 0;\n  }\n  else {\n    newData = newData - 3;\n  }\n  newData = (inputBits & (1 << (remainingBits & 0xff)) - 1U) << (newData & 0xff) |\n          (1 << (newData & 0xff)) - 1U & existingData;\n  if ((int)characterIndex < 0) {\n    *(char *)((characterIndex & 0xf) + 0xe000ed14) = (char)(newData << 4);\n  }\n  else {\n    *(char *)(characterIndex + 0xe000e400) = (char)(newData << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_character_data_08000e60",
                "param_1": "characterIndex",
                "param_2": "inputBits",
                "param_3": "existingData",
                "uVar1": "newData",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_08000ec4",
            "code": "\nvoid setBit_08000ec4(uint value)\n\n{\n  if (-1 < (int)value) {\n    *(int *)((value >> 5) * 4 + -0x1fff1f00) = 1 << (value & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_08000ec4",
                "param_1": "value"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "set_config_values_08000ee0",
            "code": "\n\n\nundefined4 set_config_values_08000ee0(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "set_config_values_08000ee0",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_value_08000f0c",
            "code": "\nvoid setBitValue_08000f0c(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_value_08000f0c",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_e000e010_flag_08000f2c",
            "code": "\n\n\nvoid update_e000e010_flag_08000f2c(int flag_value)\n\n{\n  if (flag_value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_e000e010_flag_08000f2c",
                "param_1": "flag_value"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "execute_preparation_routine_08000f4e",
            "code": "\nvoid executePreparationRoutine_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "execute_preparation_routine_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_data_08000f56",
            "code": "\nundefined4 initializeData_08000f56(int dataPointer)\n\n{\n  if (dataPointer != 0) {\n    *(undefined *)(dataPointer + 4) = 2;\n    clearTopBit;\n    *(undefined4 *)(dataPointer + 0x10) = 0;\n    *(undefined *)(dataPointer + 4) = 0;\n    *(undefined *)(dataPointer + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_data_08000f56",
                "param_1": "dataPointer",
                "clear_top_bit_080033c8()": "clearTopBit"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **inputPointer,uint bitPosition)\n\n{\n  **inputPointer = **inputPointer & ~(1 << (bitPosition & 0xff));\n  *(undefined *)(inputPointer + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "inputPointer",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "set_flag_08000f8c",
            "code": "\nundefined4 setFlag_08000f8c(uint **inputParams)\n\n{\n  if (*(char *)((int)inputParams + 0x35) != '\\x02') {\n    inputParams[0x15] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)inputParams + 0x35) = 5;\n  **inputParams = **inputParams & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "set_flag_08000f8c",
                "param_1": "inputParams"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid updateRegisters_08000fb4(uint *outputData,uint *inputData)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint loopIndex;\n  uint bitMask;\n  uint tempVar3;\n  int index1;\n  uint offset;\n  int index2;\n  \n  for (loopIndex = 0; loopIndex < 0x10; loopIndex = loopIndex + 1) {\n    tempVar2 = 1 << (loopIndex & 0xff);\n    bitMask = tempVar2 & *inputData;\n    tempVar1 = _DAT_40013c0c;\n    if (tempVar2 == bitMask) {\n      if ((inputData[1] == 2) || (inputData[1] == 0x12)) {\n        index1 = (loopIndex >> 3) + 8;\n        index2 = (loopIndex & 7) << 2;\n        outputData[index1] = outputData[index1] & ~(0xf << index2) | inputData[4] << index2;\n      }\n      offset = loopIndex << 1;\n      tempVar1 = ~(3 << (offset & 0xff));\n      *outputData = *outputData & tempVar1 | (inputData[1] & 3) << (offset & 0xff);\n      tempVar3 = inputData[1];\n      if (((tempVar3 - 1 < 2) || (tempVar3 == 0x11)) || (tempVar3 == 0x12)) {\n        outputData[2] = outputData[2] & tempVar1 | inputData[3] << (offset & 0xff);\n        outputData[1] = outputData[1] & ~tempVar2 | ((inputData[1] << 0x1b) >> 0x1f) << (loopIndex & 0xff);\n      }\n      outputData[3] = tempVar1 & outputData[3] | inputData[2] << (offset & 0xff);\n      tempVar1 = _DAT_40013c0c;\n      if ((inputData[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index2 = (loopIndex & 3) << 2;\n        if (outputData == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (outputData == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (outputData == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (outputData == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (outputData == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (outputData == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (outputData == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (outputData == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (outputData == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (outputData == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index2) | index1 << index2;\n        tempVar1 = ~bitMask;\n        tempVar2 = _DAT_40013c00 & tempVar1;\n        if ((inputData[1] & 0x10000) != 0) {\n          tempVar2 = bitMask | _DAT_40013c00;\n        }\n        tempVar3 = tempVar1 & _DAT_40013c04;\n        if ((inputData[1] & 0x20000) != 0) {\n          tempVar3 = bitMask | _DAT_40013c04;\n        }\n        offset = tempVar1 & _DAT_40013c08;\n        if ((inputData[1] & 0x100000) != 0) {\n          offset = bitMask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = tempVar2;\n        _DAT_40013c04 = tempVar3;\n        _DAT_40013c08 = offset;\n        tempVar1 = tempVar1 & _DAT_40013c0c;\n        if ((inputData[1] & 0x200000) != 0) {\n          tempVar1 = bitMask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = tempVar1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "outputData",
                "param_2": "inputData",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "loopIndex",
                "uVar4": "bitMask",
                "uVar5": "tempVar3",
                "iVar6": "index1",
                "uVar7": "offset",
                "iVar8": "index2"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "set_param_value_08001198",
            "code": "\nvoid setParamValue_08001198(int objectAddress,int newValue,int shiftFlag)\n\n{\n  if (shiftFlag == 0) {\n    *(int *)(objectAddress + 0x18) = newValue << 0x10;\n    return;\n  }\n  *(int *)(objectAddress + 0x18) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "objectAddress",
                "param_2": "newValue",
                "param_3": "shiftFlag"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_and_execute_check_080011a4",
            "code": "\n\n\nvoid update_and_execute_check_080011a4(uint flags)\n\n{\n  if ((_DAT_40013c14 & flags) != 0) {\n    _DAT_40013c14 = flags;\n    execute_check_function();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_and_execute_check_080011a4",
                "param_1": "flags",
                "check_and_execute_function_080047d0": "execute_check_function"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_flag_based_on_conditions_080011c0",
            "code": "\nundefined4 updateFlagBasedOnConditions_080011c0(int *params)\n\n{\n  if (*(char *)((int)params + 0x3e) == '@') {\n    if (condition_1 == 0) {\n      *(uint *)(*params + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*params + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (condition_2 == 0x4000) {\n    if (*(char *)((int)params + 0x3d) == '!') {\n      *(uint *)(*params + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*params + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (condition_1 == 0) {\n    *(uint *)(*params + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (condition_1 == 1) {\n    *(uint *)(*params + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_flag_based_on_conditions_080011c0",
                "param_1": "params",
                "param_1[0x14]": "condition_1",
                "param_1[0x11]": "value",
                "param_1[4]": "condition_2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "set_param_1_value_0800124a",
            "code": "\nundefined4 set_param_1_value_0800124a(int *ptr_param_1)\n\n{\n  *(uint *)(*ptr_param_1 + 0x10) = ptr_param_1[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "set_param_1_value_0800124a",
                "param_1": "ptr_param_1"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "process_flags_08001256",
            "code": "\nundefined4 processFlags_08001256(uint **parameters)\n\n{\n  uint *currentValue;\n  \n  currentValue = puVar1;\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((puVar2 != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((puVar2 == (uint *)0x0) && (puVar3 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      puVar2 = (uint *)((int)puVar2 + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (currentValue == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          currentValue = *parameters;\n          if ((currentValue[1] & 0x800) == 0) {\n            *currentValue = *currentValue | 0x200;\n          }\n          else {\n            *currentValue = *currentValue & 0xfffffbff;\n          }\n        }\n        else if (((currentValue == (uint *)0x4) || (currentValue == (uint *)0x8)) ||\n                (puVar4 == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (puVar1 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (puVar1 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        currentValue = *parameters;\n        if ((currentValue[1] & 0x800) != 0) {\n          currentValue[1] = currentValue[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        currentValue = *parameters;\n        if ((currentValue[1] & 0x800) != 0) {\n          currentValue[1] = currentValue[1] | 0x1000;\n        }\n      }\n      puVar2 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "process_flags_08001256",
                "param_1": "parameters",
                "puVar1": "currentValue",
                "param_1[0xb]": "puVar1",
                "param_1[0x14]": "puVar2",
                "param_1[4]": "puVar3",
                "param_1[0xc]": "puVar4"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_byte_array_08001420",
            "code": "\nundefined4 updateByteArray_08001420(int *arrayPtr)\n\n{\n  byte *bytePtr;\n  \n  if (*(short *)((int)arrayPtr + 0x2a) != 0) {\n    bytePtr = (byte *)array;\n    array = (int)(bytePtr + 1);\n    *(uint *)(*arrayPtr + 0x10) = (uint)*bytePtr;\n    *(short *)((int)arrayPtr + 0x2a) = *(short *)((int)arrayPtr + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_byte_array_08001420",
                "param_1": "arrayPtr",
                "pbVar1": "bytePtr",
                "param_1[9]": "array"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_array_08001440",
            "code": "\nundefined4 updateArray_08001440(int *array)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptr = (undefined *)array[9];\n    array[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_array_08001440",
                "param_1": "array",
                "puVar1": "ptr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "process_parameters_08001460",
            "code": "\nundefined4 processParameters_08001460(uint **parameterPointer,uint *paramPointer,int sizeParam,uint *bufferPointer)\n\n{\n  undefined4 result;\n  uint *pointerVar;\n  \n  if (*(char *)((int)parameterPointer + 0x3d) == '(') {\n    if (paramPointer == (uint *)0x0) {\n      result = 1;\n    }\n    else if (sizeParam == 0) {\n      result = 1;\n    }\n    else if (*(char *)(parameterPointer + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(parameterPointer + 0xf) = 1;\n      pointerVar = *parameterPointer;\n      if ((*pointerVar & 1) == 0) {\n        *pointerVar = *pointerVar | 1;\n      }\n      **parameterPointer = **parameterPointer & 0xfffff7ff;\n      *(undefined *)((int)parameterPointer + 0x3d) = 0x29;\n      *(undefined *)((int)parameterPointer + 0x3e) = 0x20;\n      result = 0;\n      parameterPointer[0x10] = (uint *)0x0;\n      parameterPointer[9] = paramPointer;\n      *(short *)((int)parameterPointer + 0x2a) = (short)sizeParam;\n      parameterPointer[0xb] = bufferPointer;\n      *(undefined2 *)(parameterPointer + 10) = *(undefined2 *)((int)parameterPointer + 0x2a);\n      *(undefined *)(parameterPointer + 0xf) = 0;\n      (*parameterPointer)[1] = (*parameterPointer)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "process_parameters_08001460",
                "param_1": "parameterPointer",
                "param_2": "paramPointer",
                "param_3": "sizeParam",
                "param_4": "bufferPointer",
                "uVar1": "result",
                "puVar2": "pointerVar"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "check_param_080014ec",
            "code": "\nundefined4 checkParam_080014ec(uint **data,uint *ptr,int size,uint *ptr2)\n\n{\n  undefined4 result;\n  uint *ptrData;\n  \n  if (*(char *)((int)data + 0x3d) == '(') {\n    if (ptr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (size == 0) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xf) = 1;\n      ptrData = *data;\n      if ((*ptrData & 1) == 0) {\n        *ptrData = *ptrData | 1;\n      }\n      **data = **data & 0xfffff7ff;\n      *(undefined *)((int)data + 0x3d) = 0x2a;\n      *(undefined *)((int)data + 0x3e) = 0x20;\n      result = 0;\n      data[0x10] = (uint *)0x0;\n      data[9] = ptr;\n      *(short *)((int)data + 0x2a) = (short)size;\n      data[0xb] = ptr2;\n      *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n      *(undefined *)(data + 0xf) = 0;\n      (*data)[1] = (*data)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "check_param_080014ec",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "size",
                "param_4": "ptr2",
                "uVar1": "result",
                "puVar2": "ptrData"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_data_08001578",
            "code": "\nundefined4 initializeData_08001578(uint **dataPointer)\n\n{\n  uint *valuePointer;\n  \n  if (*(char *)((int)dataPointer + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataPointer + 0x3d) = 0x28;\n  valuePointer = *dataPointer;\n  if ((*valuePointer & 1) == 0) {\n    *valuePointer = *valuePointer | 1;\n  }\n  **dataPointer = **dataPointer | 0x400;\n  (*dataPointer)[1] = (*dataPointer)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_data_08001578",
                "param_1": "dataPointer",
                "puVar1": "valuePointer"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "increment_and_check_080015bc",
            "code": "\nundefined4 incrementAndCheck_080015bc(int *array)\n\n{\n  char arrayCharacter;\n  byte *bytePointer;\n  \n  arrayCharacter = *(char *)((int)array + 0x3d);\n  if (*(short *)((int)array + 0x2a) != 0) {\n    bytePointer = (byte *)array[9];\n    array[9] = (int)(bytePointer + 1);\n    *(uint *)(*array + 0x10) = (uint)*bytePointer;\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n    if ((*(short *)((int)array + 0x2a) == 0) && (arrayCharacter == ')')) {\n      *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xfffffbff;\n      array[0xc] = 0x21;\n      *(undefined *)((int)array + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "increment_and_check_080015bc",
                "param_1": "array",
                "cVar1": "arrayCharacter",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "process_data_0800160e",
            "code": "\nundefined4 processData_0800160e(int *data)\n\n{\n  char charValue;\n  undefined *ptr;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)ptrArray[9];\n    ptrArray[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "process_data_0800160e",
                "param_1": "data",
                "cVar1": "charValue",
                "puVar2": "ptr",
                "param_1[9]": "ptrArray[9]",
                "param_1[0xc]": "data[0xc]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_params_0800165a",
            "code": "\nundefined4 process_params_0800165a(int *arg_pointer,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 value;\n  uint flag;\n  \n  flag = *(uint *)(*arg_pointer + 0x18);\n  if ((flag & 0x80) == 0) {\n    value = *(undefined2 *)(arg_pointer + 3);\n  }\n  else {\n    value = *(undefined2 *)(arg_pointer + 6);\n  }\n  process_params_0800165a_08003880(arg_pointer,(*(uint *)(*arg_pointer + 0x18) & 4) == 0,value,flag,param_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_params_0800165a",
                "param_1": "arg_pointer",
                "uVar1": "value",
                "uVar2": "flag"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "process_parameter_08001684",
            "code": "\nundefined4 processParameter_08001684(uint **parameter)\n\n{\n  if (((parameter[11] == (uint *)0x4) || (parameter[11] == (uint *)0x8)) &&\n     (*(char *)((int)parameter + 0x3d) == '(')) {\n    parameter[11] = (uint *)0xffff0000;\n    (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n    (*parameter)[5] = 0xfffffbff;\n    **parameter = **parameter & 0xfffffbff;\n    parameter[0xc] = (uint *)0x0;\n    *(undefined *)((int)parameter + 0x3d) = 0x20;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n    initializeAndExecuteFunction1();\n  }\n  else if (*(char *)((int)parameter + 0x3d) == '!') {\n    parameter[11] = (uint *)0xffff0000;\n    parameter[0xc] = (uint *)0x21;\n    *(undefined *)((int)parameter + 0x3d) = 0x20;\n    *(undefined *)((int)parameter + 0x3e) = 0;\n    (*parameter)[1] = (*parameter)[1] & 0xfffff8ff;\n    (*parameter)[5] = 0xfffffbff;\n    **parameter = **parameter & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*parameter)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "process_parameter_08001684",
                "param_1": "parameter",
                "param_1[0xb]": "parameter[11]",
                "initialize_and_execute_080038d0()": "initializeAndExecuteFunction1()"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "decode_parameter_0800171a",
            "code": "\nundefined4 decode_parameter_0800171a(uint **param)\n\n{\n  char char_value;\n  uint *pointer_value;\n  \n  char_value = *(char *)((int)param + 0x3d);\n  pointer_value = param[0xb];\n  if ((*(short *)(param + 10) == 0) && (char_value == '!')) {\n    if ((pointer_value == (uint *)0x4) || ((pointer_value == (uint *)0x8 || (pointer_value == (uint *)0xffff0000)))) {\n      (*param)[1] = (*param)[1] & 0xfffff8ff;\n      **param = **param | 0x200;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      if (*(char *)((int)param + 0x3e) == '@') {\n        *(undefined *)((int)param + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)param + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*param)[1] = (*param)[1] & 0xfffff8ff;\n      param[0xc] = (uint *)0x11;\n      *(undefined *)((int)param + 0x3e) = 0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((char_value == '!') || ((*(char *)((int)param + 0x3e) == '@' && (char_value == '\\\"')))) {\n    if (*(short *)((int)param + 0x2a) == 0) {\n      (*param)[1] = (*param)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)param + 0x3e) == '@') {\n      if (param[0x14] == (uint *)0x0) {\n        if (param[0x13] == (uint *)0x1) {\n          (*param)[4] = (uint)param[0x12] & 0xff;\n          param[0x14] = (uint *)((int)param[0x14] + 2);\n        }\n        else {\n          (*param)[4] = (uint)((int)param[0x12] << 0x10) >> 0x18;\n          param[0x14] = (uint *)((int)param[0x14] + 1);\n        }\n      }\n      else if (param[0x14] == (uint *)0x1) {\n        (*param)[4] = (uint)param[0x12] & 0xff;\n        param[0x14] = (uint *)((int)param[0x14] + 1);\n      }\n      else if (param[0x14] == (uint *)0x2) {\n        if (*(char *)((int)param + 0x3d) == '\\\"') {\n          **param = **param | 0x100;\n        }\n        else if (*(char *)((int)param + 0x3d) == '!') {\n          pointer_value = param[9];\n          param[9] = (uint *)((int)pointer_value + 1);\n          (*param)[4] = (uint)*(byte *)pointer_value;\n          *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer_value = param[9];\n      param[9] = (uint *)((int)pointer_value + 1);\n      (*param)[4] = (uint)*(byte *)pointer_value;\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "decode_parameter_0800171a",
                "param_1": "param",
                "cVar1": "char_value",
                "puVar2": "pointer_value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_param_08001864",
            "code": "\nundefined4 processParam_08001864(uint **paramArray)\n\n{\n  uint *ptrVal1;\n  \n  ptrVal1 = paramArray[0xb];\n  if (*(char *)((int)paramArray + 0x3d) == '!') {\n    if (*(short *)((int)paramArray + 0x2a) == 0) {\n      if (((ptrVal1 == (uint *)0x4) || (ptrVal1 == (uint *)0x8)) || (ptrVal1 == (uint *)0xffff0000)) {\n        (*paramArray)[1] = (*paramArray)[1] & 0xfffff8ff;\n        **paramArray = **paramArray | 0x200;\n        paramVal3 = (uint *)0x0;\n        *(undefined *)((int)paramArray + 0x3d) = 0x20;\n        if (*(char *)((int)paramArray + 0x3e) == '@') {\n          *(undefined *)((int)paramArray + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)paramArray + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*paramArray)[1] = (*paramArray)[1] & 0xfffff8ff;\n        paramVal3 = (uint *)0x11;\n        *(undefined *)((int)paramArray + 0x3e) = 0;\n        *(undefined *)((int)paramArray + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      ptrVal1 = paramArray[9];\n      paramArray[9] = (uint *)((int)ptrVal1 + 1);\n      (*paramArray)[4] = (uint)*(byte *)ptrVal1;\n      *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_param_08001864",
                "param_1": "paramArray",
                "puVar1": "ptrVal1",
                "param_1[0xc]": "paramVal3"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_param_08001904",
            "code": "\nundefined4 processParam_08001904(uint **params)\n\n{\n  uint *tempPtr;\n  \n  if (*(char *)((int)params + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)params + 0x2a) < 4) {\n      if (*(ushort *)((int)params + 0x2a) < 2) {\n        **params = **params & 0xfffffbff;\n        (*params)[1] = (*params)[1] & 0xfffff8ff;\n        tempPtr = params[9];\n        params[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)(*params)[4];\n        *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n        *(undefined *)((int)params + 0x3d) = 0x20;\n        params[0xc] = (uint *)0x0;\n        if (*(char *)((int)params + 0x3e) == '@') {\n          *(undefined *)((int)params + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)params + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      tempPtr = params[9];\n      params[9] = (uint *)((int)tempPtr + 1);\n      *(char *)tempPtr = (char)(*params)[4];\n      *(short *)((int)params + 0x2a) = *(short *)((int)params + 0x2a) + -1;\n      if (*(short *)((int)params + 0x2a) == 3) {\n        (*params)[1] = (*params)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_param_08001904",
                "param_1": "params",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_parameter_080019a0",
            "code": "\nundefined4 processParameter_080019a0(uint **paramList)\n\n{\n  uint *tempPtr;\n  \n  if (*(short *)((int)paramList + 0x2a) == 4) {\n    (*paramList)[1] = (*paramList)[1] & 0xfffffbff;\n    tempPtr = paramList[9];\n    paramList[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n  }\n  else if (*(short *)((int)paramList + 0x2a) == 3) {\n    (*paramList)[1] = (*paramList)[1] & 0xfffffbff;\n    **paramList = **paramList & 0xfffffbff;\n    tempPtr = paramList[9];\n    paramList[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n  }\n  else if (*(short *)((int)paramList + 0x2a) == 2) {\n    if ((int)paramList[0xb] - 1U < 2) {\n      **paramList = **paramList & 0xfffffbff;\n      **paramList = **paramList | 0x100;\n    }\n    else {\n      **paramList = **paramList | 0x200;\n    }\n    tempPtr = paramList[9];\n    paramList[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n    tempPtr = paramList[9];\n    paramList[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n    (*paramList)[1] = (*paramList)[1] & 0xfffffcff;\n    *(undefined *)((int)paramList + 0x3d) = 0x20;\n    paramList[0xc] = (uint *)0x0;\n    if (*(char *)((int)paramList + 0x3e) == '@') {\n      *(undefined *)((int)paramList + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)paramList + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    tempPtr = paramList[9];\n    paramList[9] = (uint *)((int)tempPtr + 1);\n    *(char *)tempPtr = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_parameter_080019a0",
                "param_1": "paramList",
                "puVar1": "tempPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_data_08001ab0",
            "code": "\nvoid processData_08001ab0(uint **data)\n\n{\n  int status;\n  uint *ptr1;\n  uint *ptr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  ptr2 = *data;\n  if ((ptr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08001aac(data);\n    }\n    else {\n      if ((ptr2[5] & 0x40) != 0) {\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)ptr2[4];\n      }\n      initializeData(data);\n    }\n  }\n  else {\n    ptr2[1] = ptr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x35) == '\\x01') {\n      data[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      status = setFlag(data[0xe]);\n      if (status != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          *(char *)ptr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0x14])();\n      }\n    }\n    else {\n      data[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      status = setFlag(data[0xd]);\n      if (status != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    executeInitialization(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_data_08001ab0",
                "param_1": "data",
                "iVar1": "status",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "check_and_initialize_data_08003900": "initializeData",
                "set_flag_08000f8c": "setFlag",
                "initialize_and_execute_080038d0": "executeInitialization"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_and_execute_data_08001bfc",
            "code": "\nundefined4 process_and_execute_data_08001bfc(uint **parameters)\n\n{\n  char character;\n  uint *pointer_1;\n  uint *pointer_2;\n  \n  character = *(char *)((int)parameters + 0x3d);\n  (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n  **parameters = **parameters | 1;\n  **parameters = **parameters & 0xfffffbff;\n  pointer_1 = *parameters;\n  if ((pointer_1[1] & 0x800) != 0) {\n    if ((*(char *)((int)parameters + 0x3d) == '\\\"') || (*(char *)((int)parameters + 0x3d) == '*')) {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xe] + 4);\n    }\n    else {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)parameters + 0x2a) != 0) {\n    if ((pointer_1[5] & 4) != 0) {\n      pointer_2 = parameters[9];\n      parameters[9] = (uint *)((int)pointer_2 + 1);\n      *(char *)pointer_2 = (char)pointer_1[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    if (((*parameters)[5] & 0x40) != 0) {\n      pointer_1 = parameters[9];\n      parameters[9] = (uint *)((int)pointer_1 + 1);\n      *(char *)pointer_1 = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n  }\n  if (parameters[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      parameters[0xb] = (uint *)0xffff0000;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      initialize_and_execute_080038d0();\n    }\n    else if ((parameters[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    process_data_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_and_execute_data_08001bfc",
                "param_1": "parameters",
                "cVar1": "character",
                "puVar2": "pointer_1",
                "puVar3": "pointer_2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_parameter_08001d00",
            "code": "\nvoid process_parameter_08001d00(int *input)\n\n{\n  int ptr;\n  uint flag;\n  uint condition;\n  uint param;\n  \n  ptr = *input;\n  param = *(uint *)(ptr + 0x18);\n  flag = *(uint *)(ptr + 0x14);\n  condition = *(uint *)(ptr + 4);\n  if ((*(char *)((int)input + 0x3e) == '\\x10') || (*(char *)((int)input + 0x3e) == '@')) {\n    if (((flag & 0x10001) == 0) || ((condition & 0x200) == 0)) {\n      if (((flag & 0x10008) == 0) || ((condition & 0x200) == 0)) {\n        if (((flag & 0x10002) != 0) && ((condition & 0x200) != 0)) {\n          processFlags(input);\n        }\n      }\n      else {\n        setInputValue(input);\n      }\n    }\n    else {\n      updateFlagBasedOnConditions(input);\n    }\n    if ((param & 0x100004) == 0) {\n      if ((((flag & 0x10040) != 0) && ((condition & 0x400) != 0)) && ((flag & 0x10004) == 0)) {\n        processParam(input);\n        return;\n      }\n      if (((flag & 0x10004) != 0) && ((condition & 0x200) != 0)) {\n        processParameter(input);\n        return;\n      }\n    }\n    else {\n      if ((((flag & 0x10080) != 0) && ((condition & 0x400) != 0)) && ((flag & 0x10004) == 0)) {\n        decodeParameter(input);\n        return;\n      }\n      if (((flag & 0x10004) != 0) && ((condition & 0x200) != 0)) {\n        processParam(input);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag & 0x10002) != 0) && ((condition & 0x200) != 0)) {\n      processParams();\n      return;\n    }\n    if (((flag & 0x10010) != 0) && ((condition & 0x200) != 0)) {\n      processAndExecuteData(input);\n      return;\n    }\n    if ((param & 0x100004) == 0) {\n      if ((((flag & 0x10040) != 0) && ((condition & 0x400) != 0)) && ((flag & 0x10004) == 0)) {\n        processData(input);\n        return;\n      }\n      if (((flag & 0x10004) != 0) && ((condition & 0x200) != 0)) {\n        updateArray(input);\n      }\n    }\n    else {\n      if ((((flag & 0x10080) != 0) && ((condition & 0x400) != 0)) && ((flag & 0x10004) == 0)) {\n        incrementAndCheck(input);\n        return;\n      }\n      if (((flag & 0x10004) != 0) && ((condition & 0x200) != 0)) {\n        updateByteArray(input);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_parameter_08001d00",
                "param_1": "input",
                "iVar1": "ptr",
                "uVar2": "flag",
                "uVar3": "condition",
                "uVar4": "param",
                "process_flags_08001256": "processFlags",
                "set_param_1_value_0800124a": "setInputValue",
                "update_flag_based_on_conditions_080011c0": "updateFlagBasedOnConditions",
                "process_param_08001904": "processParam",
                "process_parameter_080019a0": "processParameter",
                "decode_parameter_0800171a": "decodeParameter",
                "process_param_08001864": "processParam",
                "process_params_0800165a": "processParams",
                "process_and_execute_data_08001bfc": "processAndExecuteData",
                "process_data_0800160e": "processData",
                "update_array_08001440": "updateArray",
                "increment_and_check_080015bc": "incrementAndCheck",
                "update_byte_array_08001420": "updateByteArray"
            },
            "calling": [],
            "called": [
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800160e",
                "FUN_0800171a",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_0800124a",
                "FUN_080011c0",
                "FUN_08001bfc",
                "FUN_08001864"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "update_flags_and_process_data_08001e68",
            "code": "\nvoid updateFlagsAndProcessData_08001e68(uint **inputData)\n\n{\n  char charValue;\n  uint *ptrToInputData;\n  uint flag1;\n  uint flag2;\n  \n  ptrToInputData = *inputData;\n  flag1 = ptrToInputData[5];\n  flag2 = ptrToInputData[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    inputData[0x10] = (uint *)((uint)inputData[0x10] | 1);\n    ptrToInputData[5] = 0xfffffeff;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    inputData[0x10] = (uint *)((uint)inputData[0x10] | 2);\n    (*inputData)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    charValue = *(char *)((int)inputData + 0x3d);\n    if (((*(char *)((int)inputData + 0x3e) == ' ') && (*(short *)((int)inputData + 0x2a) == 0)) &&\n       (((charValue == '!' || (charValue == ')')) || ((charValue == '(' && (inputData[0xc] == (uint *)0x21)))))) {\n      process_parameter_08001684(inputData);\n    }\n    else {\n      inputData[0x10] = (uint *)((uint)inputData[0x10] | 4);\n      if (*(char *)((int)inputData + 0x3e) == '\\x10') {\n        **inputData = **inputData | 0x200;\n      }\n      (*inputData)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    inputData[0x10] = (uint *)((uint)inputData[0x10] | 8);\n    (*inputData)[5] = 0xfffff7ff;\n  }\n  if (inputData[0x10] != (uint *)0x0) {\n    process_data_08001ab0(inputData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "update_flags_and_process_data_08001e68",
                "param_1": "inputData",
                "cVar1": "charValue",
                "puVar2": "ptrToInputData",
                "uVar3": "flag1",
                "uVar4": "flag2"
            },
            "calling": [],
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "check_data_consistency_08001f9c",
            "code": "\n\n\nundefined4 check_data_consistency_08001f9c(void)\n\n{\n  int initialValue;\n  int currentValue;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  initialValue = get_data_value_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      initialValue = get_data_value_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        currentValue = get_data_value_08000e30();\n      } while ((uint)(currentValue - initialValue) < 0x3e9);\n      return 3;\n    }\n    currentValue = get_data_value_08000e30();\n  } while ((uint)(currentValue - initialValue) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "check_data_consistency_08001f9c",
                "iVar1": "initialValue",
                "iVar2": "currentValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "improve_and_validate_parameters_0800201c",
            "code": "\n\n\nundefined4 improve_and_validate_parameters_0800201c(uint *parameters)\n\n{\n  int initial_value;\n  int current_value;\n  undefined4 validation_result;\n  bool is_condition_met;\n  \n  if (parameters == (uint *)0x0) {\n    return 1;\n  }\n  if ((*parameters & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (parameters[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (parameters[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (parameters[1] == 0) {\n        initial_value = get_data_value_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          current_value = get_data_value_08000e30();\n          if (100 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        initial_value = get_data_value_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          current_value = get_data_value_08000e30();\n          if (100 < (uint)(current_value - initial_value)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (parameters[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | parameters[4] << 3;\n    }\n    else if (parameters[3] == 0) {\n      _DAT_42470000 = 0;\n      initial_value = get_data_value_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        current_value = get_data_value_08000e30();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      initial_value = get_data_value_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        current_value = get_data_value_08000e30();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | parameters[4] << 3;\n    }\n  }\n  if ((*parameters & 8) != 0) {\n    if (parameters[5] == 0) {\n      _DAT_42470e80 = 0;\n      initial_value = get_data_value_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        current_value = get_data_value_08000e30();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      initial_value = get_data_value_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        current_value = get_data_value_08000e30();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    is_condition_met = (_DAT_40023840 & 0x10000000) == 0;\n    if (is_condition_met) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      initial_value = get_data_value_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_value = get_data_value_08000e30();\n        if (2 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    if (parameters[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (parameters[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (parameters[2] == 0) {\n      initial_value = get_data_value_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        current_value = get_data_value_08000e30();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      initial_value = get_data_value_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        current_value = get_data_value_08000e30();\n        if (5000 < (uint)(current_value - initial_value)) {\n          return 3;\n        }\n      }\n    }\n    if (is_condition_met) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (parameters[6] == 0) {\n    validation_result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    validation_result = 1;\n  }\n  else if (parameters[6] == 2) {\n    _DAT_42470060 = 0;\n    initial_value = get_data_value_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             parameters[7] | parameters[8] | parameters[9] << 6 | ((parameters[10] >> 1) - 1) * 0x10000 |\n             parameters[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        initial_value = get_data_value_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          current_value = get_data_value_08000e30();\n        } while ((uint)(current_value - initial_value) < 3);\n        return 3;\n      }\n      current_value = get_data_value_08000e30();\n    } while ((uint)(current_value - initial_value) < 3);\n    validation_result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    initial_value = get_data_value_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      current_value = get_data_value_08000e30();\n    } while ((uint)(current_value - initial_value) < 3);\n    validation_result = 3;\n  }\n  return validation_result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "improve_and_validate_parameters_0800201c",
                "param_1": "parameters",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "uVar3": "validation_result",
                "bVar4": "is_condition_met"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_frequency_080023b4",
            "code": "\n\n\nuint calculate_frequency_080023b4(void)\n\n{\n  undefined4 input_parameter;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result_080002d0(result * 16000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)CARRY4(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,input_parameter);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result_080002d0(result * 8000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)CARRY4(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,input_parameter);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_frequency_080023b4",
                "in_r3": "input_parameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "configure_peripheral_08002488",
            "code": "\n\n\nundefined4 configurePeripheral_08002488(uint *peripheralSettings,uint numSettings)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  if (peripheralSettings == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < numSettings) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numSettings);\n    if (numSettings != (numSettings & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*peripheralSettings & 2) != 0) {\n    if ((*peripheralSettings & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*peripheralSettings & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | peripheralSettings[2];\n  }\n  if ((*peripheralSettings & 1) != 0) {\n    uVar3 = peripheralSettings[1];\n    if (uVar3 == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (uVar3 - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = uVar3 | _DAT_40023808 & 0xfffffffc;\n    iVar1 = getDataValue();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == peripheralSettings[1] * 4) break;\n      iVar2 = getDataValue();\n      if (5000 < (uint)(iVar2 - iVar1)) {\n        return 3;\n      }\n    }\n  }\n  if (numSettings < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numSettings);\n    if (numSettings != (numSettings & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*peripheralSettings & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | peripheralSettings[3];\n  }\n  if ((*peripheralSettings & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | peripheralSettings[4] << 3;\n  }\n  uVar3 = calculateFrequency();\n  DAT_2000002c = uVar3 >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  setAndUpdateConfig(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "configure_peripheral_08002488",
                "param_1": "peripheralSettings",
                "param_2": "numSettings",
                "get_data_value_08000e30": "getDataValue",
                "calculate_frequency_080023b4": "calculateFrequency",
                "set_and_update_config_08000d98": "setAndUpdateConfig"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_080025e0",
            "code": "\nundefined4 get_data_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_080025e0"
            },
            "calling": [
                "FUN_0800260c",
                "FUN_080025ec",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "calculate_shifted_value_080025ec",
            "code": "\n\n\nuint calculate_shifted_value_080025ec(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "calculate_shifted_value_080025ec",
                "uVar1": "data",
                "get_data_080025e0": "get_data"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "extracted_data_shift_0800260c",
            "code": "\n\n\nuint extracted_data_shift_0800260c(void)\n\n{\n  uint data;\n  \n  data = get_data();\n  return data >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "extracted_data_shift_0800260c",
                "uVar1": "data",
                "get_data_080025e0": "get_data"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "process_data_0800262c",
            "code": "\n\n\nvoid processData_0800262c(int *dataPointer)\n\n{\n  if (((*(uint *)(*dataPointer + 0xc) & 0x100) != 0) && ((*(uint *)(*dataPointer + 8) & 0x1000) != 0)) {\n    execute_callback_08003594();\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*dataPointer + 0xc) & 0x200) != 0) && ((*(uint *)(*dataPointer + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(dataPointer);\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)dataPointer + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "process_data_0800262c",
                "param_1": "dataPointer"
            },
            "calling": [],
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "update_registers_0800268e",
            "code": "\nvoid update_registers_0800268e(uint **registers)\n\n{\n  uint *temp;\n  \n  *(undefined *)((int)registers + 0x39) = 2;\n  temp = *registers;\n  if ((temp[8] & 0x1111) == 0) {\n    if ((temp[8] & 0x444) == 0) {\n      *temp = *temp & 0xfffffffe;\n    }\n  }\n  update_register_value(registers);\n  *(undefined *)((int)registers + 0x39) = 0;\n  *(undefined *)(registers + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "update_registers_0800268e",
                "param_1": "registers",
                "puVar1": "temp",
                "update_register_value_0800340c": "update_register_value"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_flags_080026ce",
            "code": "\nvoid processFlags_080026ce(int *flags)\n\n{\n  int value1;\n  \n  value1 = *flags;\n  if (((*(uint *)(value1 + 0x10) & 2) != 0) && ((*(uint *)(value1 + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value1 + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 6) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      executeAndCheckFlag();\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  value1 = *flags;\n  if (((*(uint *)(value1 + 0x10) & 4) != 0) && ((*(uint *)(value1 + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value1 + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 6) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      executeAndCheckFlag(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  value1 = *flags;\n  if (((*(uint *)(value1 + 0x10) & 8) != 0) && ((*(uint *)(value1 + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value1 + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 6) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      executeAndCheckFlag(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  value1 = *flags;\n  if (((*(uint *)(value1 + 0x10) & 0x10) != 0) && ((*(uint *)(value1 + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value1 + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 6) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      executeAndCheckFlag(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  value1 = *flags;\n  if (((*(uint *)(value1 + 0x10) & 1) != 0) && ((*(uint *)(value1 + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value1 + 0x10) = 0xfffffffe;\n    executeSubtractFour(flags);\n  }\n  value1 = *flags;\n  if (((*(uint *)(value1 + 0x10) & 0x80) != 0) && ((*(uint *)(value1 + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value1 + 0x10) = 0xffffff7f;\n    FUNC_0800293e(flags);\n  }\n  value1 = *flags;\n  if (((*(uint *)(value1 + 0x10) & 0x40) != 0) && ((*(uint *)(value1 + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value1 + 0x10) = 0xffffffbf;\n    FUNC_080026cc(flags);\n  }\n  value1 = *flags;\n  if (((*(uint *)(value1 + 0x10) & 0x20) != 0) && ((*(uint *)(value1 + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value1 + 0x10) = 0xffffffdf;\n    FUNC_0800293c(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "flags",
                "iVar1": "value1",
                "execute_and_check_flag_08003754": "executeAndCheckFlag",
                "execute_subtract_four_0800376e": "executeSubtractFour"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800376e",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_0800293e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "set_bit_value_08002848",
            "code": "\nvoid setBitValue_08002848(int data,uint bitPosition,int value)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | value << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "set_bit_value_08002848",
                "param_1": "data",
                "param_2": "bitPosition",
                "param_3": "value"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "clear_bit_and_set_flag_08002864",
            "code": "\nundefined4 clearBitAndSetFlag_08002864(uint **bitArrayPtr,undefined4 bitIndex)\n\n{\n  bool isSpecialAddress;\n  uint *bitArrayPtr;\n  \n  setBitValue(*bitArrayPtr,bitIndex,0);\n  bitArrayPtr = *bitArrayPtr;\n  if (bitArrayPtr == (uint *)0x40010000) {\n    isSpecialAddress = true;\n  }\n  else if (bitArrayPtr == (uint *)0x40010400) {\n    isSpecialAddress = true;\n  }\n  else {\n    isSpecialAddress = false;\n  }\n  if (((isSpecialAddress) && ((bitArrayPtr[8] & 0x1111) == 0)) && ((bitArrayPtr[8] & 0x444) == 0)) {\n    bitArrayPtr[0x11] = bitArrayPtr[0x11] & 0xffff7fff;\n  }\n  bitArrayPtr = *bitArrayPtr;\n  if (((bitArrayPtr[8] & 0x1111) == 0) && ((bitArrayPtr[8] & 0x444) == 0)) {\n    *bitArrayPtr = *bitArrayPtr & 0xfffffffe;\n  }\n  *(undefined *)((int)bitArrayPtr + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "clear_bit_and_set_flag_08002864",
                "param_1": "bitArrayPtr",
                "param_2": "bitIndex",
                "bVar1": "isSpecialAddress",
                "puVar2": "bitArrayPtr",
                "set_bit_value_08002848": "setBitValue"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bitwise_value_080028d4",
            "code": "\nvoid updateBitwiseValue_080028d4(int data,uint position,int value)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(4 << (position & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | value << (position & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bitwise_value_080028d4",
                "param_1": "data",
                "param_2": "position",
                "param_3": "value"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_bitwise_values_080028f0",
            "code": "\nundefined4 update_bitwise_values_080028f0(uint **bitwise_array,undefined4 bitwise_value)\n\n{\n  uint *array_ptr;\n  \n  update_bitwise_value_080028d4(*bitwise_array,bitwise_value,0);\n  array_ptr = *bitwise_array;\n  if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n    array_ptr[0x11] = array_ptr[0x11] & 0xffff7fff;\n  }\n  array_ptr = *bitwise_array;\n  if (((array_ptr[8] & 0x1111) == 0) && ((array_ptr[8] & 0x444) == 0)) {\n    *array_ptr = *array_ptr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_bitwise_values_080028f0",
                "param_1": "bitwise_array",
                "param_2": "bitwise_value",
                "puVar1": "array_ptr"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "update_memory_values_08002940",
            "code": "\nvoid updateMemoryValues_08002940(int *memoryPointer)\n\n{\n  *(uint *)(*memoryPointer + 0xc) = *(uint *)(*memoryPointer + 0xc) & 0xfffffedf;\n  *(uint *)(*memoryPointer + 0x14) = *(uint *)(*memoryPointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)memoryPointer + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "update_memory_values_08002940",
                "param_1": "memoryPointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_data_0800295c",
            "code": "\nundefined4 process_data_0800295c(int *data)\n\n{\n  short decrement;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (value == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)pointer_value & 0x1ff;\n    if (flag == 0) {\n      pointer_value = pointer_value + 2;\n    }\n    else {\n      pointer_value = pointer_value + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)pointer_value;\n    pointer_value = (int)(byte_ptr + 1);\n    *(uint *)(*data + 4) = (uint)*byte_ptr;\n  }\n  decrement = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = decrement;\n  if (decrement == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_data_0800295c",
                "param_1": "data",
                "sVar1": "decrement",
                "pbVar2": "byte_ptr",
                "param_1[2]": "value",
                "param_1[4]": "flag",
                "param_1[8]": "pointer_value"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "update_configuration_080029c8",
            "code": "\nvoid updateConfiguration_080029c8(int *configArray)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int param1Value1;\n  int param1Value2;\n  int param1Value3;\n  int param1Value4;\n  int configAddress;\n  \n  *(uint *)(*configArray + 0x10) = *(uint *)(*configArray + 0x10) & 0xffffcfff | configArray[3];\n  *(uint *)(*configArray + 0xc) =\n       *(uint *)(*configArray + 0xc) & 0xffff69f3 | configArray[2] | configArray[4] | configArray[5] | configArray[7];\n  *(uint *)(*configArray + 0x14) = *(uint *)(*configArray + 0x14) & 0xfffffcff | configArray[6];\n  if (configArray[7] == 0x8000) {\n    configAddress = *configArray;\n    if ((configAddress != 0x40011000) && (configAddress != 0x40011400)) {\n      shiftedValue1 = calculate_shifted_value_080025ec();\n      param1Value1 = configArray[1];\n      shiftedValue2 = calculate_shifted_value_080025ec();\n      param1Value2 = configArray[1];\n      shiftedValue3 = calculate_shifted_value_080025ec();\n      param1Value3 = configArray[1];\n      shiftedValue4 = calculate_shifted_value_080025ec();\n      param1Value4 = configArray[1];\n      shiftedValue5 = calculate_shifted_value_080025ec();\n      *(uint *)(configAddress + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 1) +\n                          (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) /\n                                (ulonglong)(uint)(configArray[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 1) +\n             (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 1)) / 100) * 0x10;\n      return;\n    }\n    shiftedValue1 = extracted_data_shift_0800260c();\n    param1Value1 = configArray[1];\n    shiftedValue2 = extracted_data_shift_0800260c();\n    param1Value2 = configArray[1];\n    shiftedValue3 = extracted_data_shift_0800260c();\n    param1Value3 = configArray[1];\n    shiftedValue4 = extracted_data_shift_0800260c();\n    param1Value4 = configArray[1];\n    shiftedValue5 = extracted_data_shift_0800260c();\n    *(uint *)(configAddress + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 1) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(configArray[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 1) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 1)) / 100) * 0x10;\n    return;\n  }\n  configAddress = *configArray;\n  if ((configAddress != 0x40011000) && (configAddress != 0x40011400)) {\n    shiftedValue1 = calculate_shifted_value_080025ec();\n    param1Value1 = configArray[1];\n    shiftedValue2 = calculate_shifted_value_080025ec();\n    param1Value2 = configArray[1];\n    shiftedValue3 = calculate_shifted_value_080025ec();\n    param1Value3 = configArray[1];\n    shiftedValue4 = calculate_shifted_value_080025ec();\n    param1Value4 = configArray[1];\n    shiftedValue5 = calculate_shifted_value_080025ec();\n    *(uint *)(configAddress + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(configArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedValue1 = extracted_data_shift_0800260c();\n  param1Value1 = configArray[1];\n  shiftedValue2 = extracted_data_shift_0800260c();\n  param1Value2 = configArray[1];\n  shiftedValue3 = extracted_data_shift_0800260c();\n  param1Value3 = configArray[1];\n  shiftedValue4 = extracted_data_shift_0800260c();\n  param1Value4 = configArray[1];\n  shiftedValue5 = extracted_data_shift_0800260c();\n  *(uint *)(configAddress + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 2) +\n                      (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(configArray[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 2) +\n         (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "update_configuration_080029c8",
                "param_1": "configArray",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "param1Value1",
                "iVar7": "param1Value2",
                "iVar8": "param1Value3",
                "iVar9": "param1Value4",
                "iVar10": "configAddress"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_0800260c",
                "FUN_080025ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_validity_08002d0c",
            "code": "\nundefined4 checkValidity_08002d0c(uint **data,uint mask,uint expectedOutcome,int condition,uint threshold)\n\n{\n  int dataValue;\n  \n  do {\n    if (((mask & ~**data) == 0) != expectedOutcome) {\n      return 0;\n    }\n  } while ((threshold == 0xffffffff) ||\n          ((threshold != 0 && (dataValue = getDataValue(), (uint)(dataValue - condition) <= threshold))));\n  (*data)[3] = (*data)[3] & 0xfffffe5f;\n  (*data)[5] = (*data)[5] & 0xfffffffe;\n  *(undefined *)((int)data + 0x39) = 0x20;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  *(undefined *)(data + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_validity_08002d0c",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "expectedOutcome",
                "param_4": "condition",
                "param_5": "threshold",
                "iVar1": "dataValue",
                "get_data_value_08000e30": "getDataValue"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "update_parameters_08002d72",
            "code": "\nundefined4 update_parameters_08002d72(int *parameters)\n\n{\n  if (parameters != (int *)0x0) {\n    if (*(char *)((int)parameters + 0x39) == '\\0') {\n      *(undefined *)(parameters + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)parameters + 0x39) = 0x24;\n    *(uint *)(*parameters + 0xc) = *(uint *)(*parameters + 0xc) & 0xffffdfff;\n    update_configuration(parameters);\n    *(uint *)(*parameters + 0x10) = *(uint *)(*parameters + 0x10) & 0xffffb7ff;\n    *(uint *)(*parameters + 0x14) = *(uint *)(*parameters + 0x14) & 0xffffffd5;\n    *(uint *)(*parameters + 0xc) = *(uint *)(*parameters + 0xc) | 0x2000;\n    some_other_variable = 0;\n    *(undefined *)((int)parameters + 0x39) = 0x20;\n    *(undefined *)((int)parameters + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "update_parameters_08002d72",
                "param_1": "parameters",
                "update_configuration_080029c8": "update_configuration",
                "param_1[0xf]": "some_other_variable"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 processData_08002dd0(int *data_ptr,ushort *input_ptr,int input_length,undefined4 config)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (*(char *)((int)data_ptr + 0x39) == ' ') {\n    if (input_ptr == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (input_length == 0) {\n      status = 1;\n    }\n    else if (*(char *)(data_ptr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_ptr + 0xe) = 1;\n      data_ptr[0xf] = 0;\n      *(undefined *)((int)data_ptr + 0x39) = 0x21;\n      status = get_data_value();\n      *(short *)(data_ptr + 9) = (short)input_length;\n      *(short *)((int)data_ptr + 0x26) = (short)input_length;\n      while (*(short *)((int)data_ptr + 0x26) != 0) {\n        *(short *)((int)data_ptr + 0x26) = *(short *)((int)data_ptr + 0x26) + -1;\n        if (data_ptr[2] == 0x1000) {\n          result = check_validity(data_ptr,0x80,0,status,config);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = *input_ptr & 0x1ff;\n          if (data_ptr[4] == 0) {\n            input_ptr = input_ptr + 1;\n          }\n          else {\n            input_ptr = (ushort *)((int)input_ptr + 1);\n          }\n        }\n        else {\n          result = check_validity(data_ptr,0x80,0,status,config);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_ptr + 4) = (uint)*(byte *)input_ptr;\n          input_ptr = (ushort *)((int)input_ptr + 1);\n        }\n      }\n      result = check_validity(data_ptr,0x40,0,status,config);\n      if (result == 0) {\n        *(undefined *)((int)data_ptr + 0x39) = 0x20;\n        *(undefined *)(data_ptr + 0xe) = 0;\n        status = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_ptr",
                "param_2": "input_ptr",
                "param_3": "input_length",
                "param_4": "config",
                "iVar1": "result",
                "uVar2": "status",
                "get_data_value_08000e30": "get_data_value",
                "check_validity_08002d0c": "check_validity"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08002d0c",
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_input_08002eb2",
            "code": "\nundefined4 validate_input_08002eb2(int *input_array,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = value_1;\n    *(short *)(input_array + 9) = (short)value_2;\n    *(short *)((int)input_array + 0x26) = (short)value_2;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_input_08002eb2",
                "param_1": "input_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[8]": "input_array[8]",
                "param_1[0xf]": "input_array[0xf]"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_and_update_08002efa",
            "code": "\nundefined4 validate_and_update_08002efa(int *array,int value1,int value2)\n\n{\n  if (*(char *)((int)array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(array + 0xe) != '\\x01') {\n    array[10] = value1;\n    *(short *)(array + 0xb) = (short)value2;\n    *(short *)((int)array + 0x2e) = (short)value2;\n    array[15] = 0;\n    *(undefined *)((int)array + 0x3a) = 0x22;\n    *(undefined *)(array + 0xe) = 0;\n    *(uint *)(*array + 0x14) = *(uint *)(*array + 0x14) | 1;\n    *(uint *)(*array + 0xc) = *(uint *)(*array + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_and_update_08002efa",
                "param_1": "array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "array[10]",
                "param_1[0xf]": "array[15]"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "modify_data_08002f4c",
            "code": "\nundefined4 modify_data_08002f4c(int *data_ptr)\n\n{\n  *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)data_ptr + 0x39) = 0x20;\n  process_data_08003f48();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "modify_data_08002f4c",
                "param_1": "data_ptr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_binary_data_08002f66",
            "code": "\nundefined4 processBinaryData_08002f66(int *data)\n\n{\n  byte *bytePtr;\n  short tempShort;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)data + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      *(ushort *)data[10] = (ushort)((uint)(*(int *)(*data + 4) << 0x17) >> 0x17);\n      data[10] = data[10] + 2;\n    }\n    else {\n      *(ushort *)data[10] = (ushort)*(undefined4 *)(*data + 4) & 0xff;\n      data[10] = data[10] + 1;\n    }\n  }\n  else if (data[4] == 0) {\n    undefinedPtr = (undefined *)data[10];\n    data[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*data + 4);\n  }\n  else {\n    bytePtr = (byte *)data[10];\n    data[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*data + 4) & 0x7f;\n  }\n  tempShort = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = tempShort;\n  if (tempShort != 0) {\n    return 0;\n  }\n  *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xfffffedf;\n  *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xfffffffe;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  execute_function_at_index_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_binary_data_08002f66",
                "param_1": "data",
                "pbVar1": "bytePtr",
                "sVar2": "tempShort",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_data_08002ffc",
            "code": "\nvoid process_data_08002ffc(uint **parameters)\n\n{\n  int result;\n  uint value_3;\n  uint *pointer;\n  uint value_4;\n  uint value_5;\n  \n  pointer = *parameters;\n  value_5 = *pointer;\n  value_3 = pointer[3];\n  if ((((value_5 & 0xf) == 0) && ((value_5 & 0x20) != 0)) && ((value_3 & 0x20) != 0)) {\n    process_binary_data_08002f66(parameters);\n    return;\n  }\n  if (((value_5 & 0xf) == 0) || ((value_4 = pointer[5] & 1, value_4 == 0 && ((value_3 & 0x120) == 0)))) {\n    if (((value_5 & 0x80) != 0) && ((value_3 & 0x80) != 0)) {\n      process_data_08002ffc_0800295c(parameters);\n      return;\n    }\n    if (((value_5 & 0x40) != 0) && ((value_3 & 0x40) != 0)) {\n      modify_data_08002f4c(parameters);\n    }\n  }\n  else {\n    if (((value_5 & 1) != 0) && ((value_3 & 0x100) != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 1);\n    }\n    if (((value_5 & 4) != 0) && (value_4 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 2);\n    }\n    if (((value_5 & 2) != 0) && (value_4 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 4);\n    }\n    if (((value_5 & 8) != 0) && (value_4 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 8);\n    }\n    if (parameters[0xf] != (uint *)0x0) {\n      if (((value_5 & 0x20) != 0) && ((value_3 & 0x20) != 0)) {\n        process_binary_data_08002f66(parameters);\n      }\n      if ((((uint)parameters[0xf] & 8) == 0) && (((*parameters)[5] & 0x40) == 0)) {\n        FUNC_08003f94(parameters);\n        parameters[0xf] = (uint *)0x0;\n        return;\n      }\n      update_memory_values_08002940(parameters);\n      pointer = *parameters;\n      if ((pointer[5] & 0x40) == 0) {\n        FUNC_08003f94(parameters);\n        return;\n      }\n      pointer[5] = pointer[5] & 0xffffffbf;\n      if (parameters[0xd] == (uint *)0x0) {\n        FUNC_08003f94(parameters);\n        return;\n      }\n      parameters[0xd][0x14] = (uint)&LAB_0800311c_1;\n      result = set_flag_08000f8c(parameters[0xd]);\n      if (result != 0) {\n        (*(code *)parameters[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_data_08002ffc",
                "param_1": "parameters",
                "iVar1": "result",
                "uVar2": "value_3",
                "puVar3": "pointer",
                "uVar4": "value_4",
                "uVar5": "value_5"
            },
            "calling": [],
            "called": [
                "FUN_08002940",
                "FUN_08000f8c",
                "FUN_08002f4c",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "address"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "retrieve_bit_value_08003138",
            "code": "\nuint retrieveBitValue_08003138(uint index,int baseAddress)\n\n{\n  return *(uint *)(baseAddress + ((index << 0x18) >> 0x1c) * 4) >> (index & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "retrieve_bit_value_08003138",
                "param_1": "index",
                "param_2": "baseAddress"
            },
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "update_bit_0800314e",
            "code": "\nvoid updateBit_0800314e(uint index,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (index << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) | 1 << (index & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "update_bit_0800314e",
                "param_1": "index",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_bit_value_0800316c",
            "code": "\nvoid updateBitValue_0800316c(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_bit_value_0800316c",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 value)\n\n{\n  switch(value) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_register_bits_080031fc",
            "code": "\n\n\nundefined4 setRegisterBits_080031fc(undefined4 registerIndex)\n\n{\n  undefined4 registerValue;\n  \n  switch(registerIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    registerValue = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    registerValue = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    registerValue = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    registerValue = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    registerValue = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    registerValue = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    registerValue = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    registerValue = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    registerValue = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    registerValue = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    registerValue = 0x40022800;\n    break;\n  default:\n    registerValue = 0;\n  }\n  return registerValue;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_register_bits_080031fc",
                "param_1": "registerIndex",
                "uVar1": "registerValue"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "validate_array_08003380",
            "code": "\nundefined4 validate_array_08003380(undefined4 array_ptr,undefined4 data_ptr,undefined4 size_1,undefined4 size_2)\n\n{\n  int array_value;\n  \n  array_value = get_array_value_0800354a(array_ptr,&DAT_08005a18,size_1,size_2,size_2);\n  if ((uint)(array_value << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "validate_array_08003380",
                "param_1": "array_ptr",
                "param_2": "data_ptr",
                "param_3": "size_1",
                "param_4": "size_2",
                "iVar1": "array_value"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "get_array_value_and_return_0800339c",
            "code": "\nundefined4 getArrayValueAndReturn_0800339c(undefined4 inputArray,undefined4 unknownParam,undefined4 paramX,undefined4 paramY)\n\n{\n  int arrayValue;\n  uint shiftedBits;\n  \n  arrayValue = get_array_value_0800354a(inputArray,&DAT_08005a3c,paramX,paramY,paramY);\n  shiftedBits = (uint)(arrayValue << 0xc) >> 0x1b;\n  if (shiftedBits == 3) {\n    return 8;\n  }\n  if (shiftedBits != 4) {\n    if (shiftedBits != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "get_array_value_and_return_0800339c",
                "param_1": "inputArray",
                "param_2": "unknownParam",
                "param_3": "paramX",
                "param_4": "paramY",
                "iVar1": "arrayValue",
                "uVar2": "shiftedBits"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_top_bit_080033c8",
            "code": "\n\n\nvoid clearTopBit_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_top_bit_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "process_valid_parameter_080033d8",
            "code": "\nvoid processValidParameter_080033d8(undefined4 parameter)\n\n{\n  int validationResult;\n  int parameterArray [5];\n  \n  parameterArray[0] = check_valid_parameter_080034f4(parameter,&DAT_08005a18);\n  if ((parameterArray[0] != 0) && ((validationResult = validate_array_08003380(parameter), validationResult == 0 || (validationResult == 0x10)))) {\n    clear_bit_and_set_flag_08000f72(parameterArray,validationResult);\n    initialize_data_08000f56(parameterArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "process_valid_parameter_080033d8",
                "param_1": "parameter",
                "iVar1": "validationResult",
                "local_1c": "parameterArray"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "update_register_value_0800340c",
            "code": "\nvoid update_register_value_0800340c(void)\n\n{\n  update_register_value_0800340c_080035fc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "update_register_value_0800340c"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "process_parameter_08003414",
            "code": "\nvoid processParameter_08003414(undefined4 parameter)\n\n{\n  int arrayValue;\n  uint arrayValueFlags;\n  int arrayValues [16];\n  \n  arrayValues[0] = check_valid_parameter_080034f4(parameter,&DAT_08005a3c);\n  if ((arrayValues[0] != 0) &&\n     ((((arrayValue = get_array_value_and_return_0800339c(parameter), arrayValue == 0 || (arrayValue == 4)) || (arrayValue == 8)) ||\n      ((arrayValue == 0xc || (arrayValue == 0x18)))))) {\n    arrayValueFlags = get_array_value_0800354a(parameter,&DAT_08005a3c);\n    if ((arrayValueFlags & 0x100000) == 0) {\n      clear_bit_and_set_flag_08002864(arrayValues,arrayValue);\n    }\n    else {\n      update_bitwise_values_080028f0(arrayValues,arrayValue);\n    }\n    update_registers_0800268e(arrayValues);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "process_parameter_08003414",
                "param_1": "parameter",
                "iVar1": "arrayValue",
                "uVar2": "arrayValueFlags",
                "local_4c": "arrayValues"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_080028f0",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_data_0800346c",
            "code": "\nvoid initializeData_0800346c(void)\n\n{\n  getDataValue();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_data_0800346c",
                "get_data_value_08000e30": "getDataValue"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "execute_main_function_08003476",
            "code": "\nvoid execute_main_function_08003476(void)\n\n{\n  perform_calculation();\n  prepare_data();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "execute_main_function_08003476",
                "add_values_and_store_result_08000e18": "perform_calculation",
                "execute_preparation_routine_08000f4e": "prepare_data"
            },
            "calling": [],
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "update_registers_08003486",
            "code": "\nvoid update_registers_08003486(uint input_value,undefined4 register_param,undefined4 another_param)\n\n{\n  undefined4 register_bits;\n  uint bit_mask;\n  undefined4 register_param_copy;\n  undefined4 another_param_copy;\n  undefined4 constant_2;\n  \n  register_bits = set_register_bits_080031fc((input_value << 0x18) >> 0x1c);\n  bit_mask = 1 << (input_value & 0xf) & 0xffff;\n  constant_2 = 2;\n  register_param_copy = register_param;\n  another_param_copy = another_param;\n  update_registers_08003486_08000fb4(register_bits,&bit_mask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "update_registers_08003486",
                "param_1": "input_value",
                "param_2": "register_param",
                "param_3": "another_param",
                "uVar1": "register_bits",
                "local_24": "bit_mask",
                "local_20": "register_param_copy",
                "local_1c": "another_param_copy",
                "local_18": "constant_2"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "set_param_value_080034b6",
            "code": "\nvoid setParamValue_080034b6(undefined4 valuePointer,undefined2 flag,int condition,undefined4 defaultValue)\n\n{\n  if (condition == 0) {\n    set_param_value_08001198(valuePointer,flag,0,defaultValue,defaultValue);\n    return;\n  }\n  set_param_value_08001198(valuePointer,flag,1,defaultValue,defaultValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "set_param_value_080034b6",
                "param_1": "valuePointer",
                "param_2": "flag",
                "param_3": "condition",
                "param_4": "defaultValue"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_system_and_configuration_080034ce",
            "code": "\nvoid initialize_system_and_configuration_080034ce(void)\n\n{\n  initialize_configuration();\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_system_and_configuration_080034ce",
                "initialize_configuration_08000de4": "initialize_configuration",
                "initialize_system_08000c8c": "initialize_system"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_substring_080034da",
            "code": "\nundefined4 find_substring_080034da(int target,short *string_array)\n\n{\n  while( true ) {\n    if (*string_array == -1) {\n      return 0;\n    }\n    if (*string_array == target) break;\n    string_array = string_array + 6;\n  }\n  return *(undefined4 *)(string_array + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_substring_080034da",
                "param_1": "target",
                "param_2": "string_array"
            },
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "check_valid_parameter_080034f4",
            "code": "\nundefined4 check_valid_parameter_080034f4(int input_parameter)\n\n{\n  undefined4 substring_index;\n  \n  if (input_parameter != -1) {\n    substring_index = find_substring_080034da();\n    return substring_index;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "check_valid_parameter_080034f4",
                "param_1": "input_parameter",
                "uVar1": "substring_index"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003978",
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_first_match_08003506",
            "code": "\nint findFirstMatch_08003506(int searchValue,short *dataArray)\n\n{\n  while( true ) {\n    if (*(int *)(dataArray + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(dataArray + 2) == searchValue) break;\n    dataArray = dataArray + 6;\n  }\n  return (int)*dataArray;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_first_match_08003506",
                "param_1": "searchValue",
                "param_2": "dataArray"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_first_match_or_error_0800351e",
            "code": "\nundefined4 findFirstMatchOrError_0800351e(int inputParam)\n\n{\n  undefined4 result;\n  \n  if (inputParam != 0) {\n    result = find_first_match_08003506();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_first_match_or_error_0800351e",
                "param_1": "inputParam",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_in_array_0800352e",
            "code": "\nundefined4 find_value_in_array_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_in_array_0800352e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "get_array_value_0800354a",
            "code": "\nundefined4 getArrayValue_0800354a(int input)\n\n{\n  undefined4 foundValue;\n  \n  if (input == -1) {\n    return 0xffffffff;\n  }\n  foundValue = find_value_in_array_0800352e();\n  return foundValue;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "get_array_value_0800354a",
                "param_1": "input",
                "uVar1": "foundValue"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003978",
                "FUN_08003380"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "check_value_in_array_0800355e",
            "code": "\nundefined4 check_value_in_array_0800355e(int value_to_check,short *array)\n\n{\n  if (value_to_check == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (value_to_check == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "check_value_in_array_0800355e",
                "param_1": "value_to_check",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_and_return_value_08003582",
            "code": "\nint compareAndReturnValue_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_and_return_value_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_08003594",
            "code": "\nvoid executeCallback_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_08003594"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_registers_080035bc",
            "code": "\n\n\nvoid initializeRegisters_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_registers_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "update_register_value_080035fc",
            "code": "\n\n\nvoid updateRegisterValue_080035fc(int *registerValue)\n\n{\n  if (*registerValue == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*registerValue == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*registerValue == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*registerValue == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*registerValue == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*registerValue == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*registerValue == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*registerValue == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*registerValue == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*registerValue == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*registerValue == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*registerValue == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*registerValue == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*registerValue == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "update_register_value_080035fc",
                "param_1": "registerValue"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtractFour_08003750(int num)\n\n{\n  return num + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "num"
            },
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_and_check_flag_08003754",
            "code": "\nvoid executeAndCheckFlag_08003754(int inputValue)\n\n{\n  int functionResult;\n  \n  functionResult = calculateFunctionAddress();\n  if ((*(functionPointer **)(functionResult + 0x48) != (functionPointer *)0x0) && (*(char *)(inputValue + 0x18) == '\\x01')) {\n    (**(functionPointer **)(functionResult + 0x48))(functionResult,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_and_check_flag_08003754",
                "param_1": "inputValue",
                "iVar1": "functionResult",
                "subtract_four_08003750": "calculateFunctionAddress",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_subtract_four_0800376e",
            "code": "\nvoid executeSubtractFour_0800376e(void)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (*(functionPointer **)(result + 0x44) != (functionPointer *)0x0) {\n    (**(functionPointer **)(result + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_subtract_four_0800376e",
                "iVar1": "result",
                "subtract_four_08003750": "subtractFour",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "process_flag_0800377c",
            "code": "\nvoid process_flag_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    process_flag_0800377cs_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    process_flag_0800377cs_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "process_flag_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtract_four_0800387c(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "process_params_08003880",
            "code": "\nvoid processParams_08003880(int input,int isZero,int comparison,undefined4 paramFour)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (comparison == *(int *)(input + 0xc)) {\n    if (isZero == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      processParams_080038802(input,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    checkParam(input,result + 0x68,0x20,8,paramFour);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "process_params_08003880",
                "param_1": "input",
                "param_2": "isZero",
                "param_3": "comparison",
                "param_4": "paramFour",
                "iVar1": "result",
                "subtract_four_0800387c": "subtractFour",
                "process_parameters_08001460": "processParams2",
                "check_param_080014ec": "checkParam"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "initialize_and_execute_080038d0",
            "code": "\nvoid initialize_and_execute_080038d0(undefined4 input_parameter)\n\n{\n  int result;\n  \n  result = get_function_address();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data(input_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "initialize_and_execute_080038d0",
                "param_1": "input_parameter",
                "iVar1": "result",
                "subtract_four_0800387c": "get_function_address",
                "initialize_data_08001578": "initialize_data"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08001684",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "check_and_initialize_data_08003900",
            "code": "\nvoid checkAndInitializeData_08003900(undefined4 inputParam)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    initializeData(inputParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "check_and_initialize_data_08003900",
                "param_1": "inputParam",
                "iVar1": "result",
                "subtract_four_0800387c": "subtractFour",
                "initialize_data_08001578": "initializeData"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "initialize_uart_pins_08003978",
            "code": "\n\n\nvoid initializeUARTPins_08003978(int *uartPins)\n\n{\n  int pin1Valid;\n  int pin2Valid;\n  undefined4 registerBits1;\n  uint arrayValue1;\n  uint pin1Bitmask;\n  uint pin2Bitmask;\n  uint pin2Bits;\n  undefined4 constantValue;\n  uint pin1Bits;\n  \n  if (uartPins != (int *)0x0) {\n    pin1Valid = check_valid_parameter_080034f4((int)*(short *)(uartPins + 0x16),&DAT_08005ca0);\n    pin2Valid = check_valid_parameter_080034f4((int)*(short *)((int)uartPins + 0x5a),&DAT_08005c10);\n    if ((pin2Valid == 0) || (pin1Valid == 0)) {\n      process_and_initialize_data_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",pin2Valid);\n    }\n    else {\n      pin1Valid = compare_and_return_value_08003582(pin1Valid);\n      *uartPins = pin1Valid;\n      if (pin1Valid == 0) {\n        process_and_initialize_data_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (pin1Valid == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(uartPins + 0x11) = 0;\n          *(undefined *)(uartPins + 0x17) = 0x25;\n        }\n        else if (pin1Valid == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(uartPins + 0x11) = 1;\n          *(undefined *)(uartPins + 0x17) = 0x26;\n        }\n        else if (pin1Valid == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(uartPins + 0x11) = 2;\n          *(undefined *)(uartPins + 0x17) = 0x27;\n        }\n        else if (pin1Valid == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(uartPins + 0x11) = 3;\n          *(undefined *)(uartPins + 0x17) = 0x34;\n        }\n        else if (pin1Valid == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(uartPins + 0x11) = 4;\n          *(undefined *)(uartPins + 0x17) = 0x35;\n        }\n        else if (pin1Valid == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(uartPins + 0x11) = 5;\n          *(undefined *)(uartPins + 0x17) = 0x47;\n        }\n        else if (pin1Valid == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(uartPins + 0x11) = 6;\n          *(undefined *)(uartPins + 0x17) = 0x52;\n        }\n        else if (pin1Valid == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(uartPins + 0x11) = 7;\n          *(undefined *)(uartPins + 0x17) = 0x53;\n        }\n        registerBits1 = set_register_bits_080031fc((uint)((int)*(short *)((int)uartPins + 0x5a) << 0x18) >> 0x1c);\n        arrayValue1 = get_array_value_0800354a((int)*(short *)((int)uartPins + 0x5a),&DAT_08005c10);\n        pin1Bitmask = 1 << (*(ushort *)((int)uartPins + 0x5a) & 0xf) & 0xffff;\n        pin2Bitmask = (arrayValue1 >> 3 & 1) << 4 | arrayValue1 & 7;\n        pin2Bits = (arrayValue1 << 0x1a) >> 0x1e;\n        pin1Bits = (arrayValue1 << 0x11) >> 0x19;\n        constantValue = 3;\n        update_registers_08000fb4(registerBits1,&pin1Bitmask);\n        registerBits1 = set_register_bits_080031fc((uint)((int)*(short *)(uartPins + 0x16) << 0x18) >> 0x1c);\n        arrayValue1 = get_array_value_0800354a((int)*(short *)(uartPins + 0x16),&DAT_08005ca0);\n        pin1Bitmask = 1 << (*(ushort *)(uartPins + 0x16) & 0xf) & 0xffff;\n        pin2Bitmask = (arrayValue1 >> 3 & 1) << 4 | arrayValue1 & 7;\n        pin2Bits = (arrayValue1 << 0x1a) >> 0x1e;\n        update_registers_08000fb4(registerBits1,&pin1Bitmask);\n        (&DAT_200002b4)[*(byte *)(uartPins + 0x11)] = uartPins + 1;\n        uartPins[1] = *uartPins;\n        uartPins[2] = uartPins[0x12];\n        uartPins[3] = uartPins[0x13];\n        uartPins[4] = uartPins[0x14];\n        uartPins[5] = uartPins[0x15];\n        uartPins[6] = 0xc;\n        uartPins[7] = 0;\n        uartPins[8] = 0;\n        update_parameters_08002d72(uartPins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "initialize_uart_pins_08003978",
                "param_1": "uartPins",
                "iVar1": "pin1Valid",
                "iVar2": "pin2Valid",
                "uVar3": "registerBits1",
                "uVar4": "arrayValue1",
                "local_2c": "pin1Bitmask",
                "local_28": "pin2Bitmask",
                "local_24": "pin2Bits",
                "local_20": "constantValue",
                "local_1c": "pin1Bits"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "called": [
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_08003cc8",
            "code": "\nvoid initialize_uart_08003cc8(void)\n\n{\n  int validParamResult;\n  undefined4 secondValidParamResult;\n  \n  validParamResult = check_valid_parameter_080034f4(0x38,&DAT_08005ca0);\n  if (validParamResult != 0) {\n    secondValidParamResult = check_valid_parameter_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = find_first_match_or_error_0800351e(secondValidParamResult,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    initialize_uart_08003cc8_pins_08003978(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "iVar1": "validParamResult",
                "uVar2": "secondValidParamResult"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "process_and_validate_data_08003d18",
            "code": "\nuint processAndValidateData_08003d18(undefined4 input1,uint input2)\n\n{\n  int dataValue1;\n  int isValid;\n  uint index;\n  \n  dataValue1 = getDataValue();\n  isValid = checkParameterValidity(0x38,&DAT_08005ca0);\n  if (isValid == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 10 &&\n      (((&DAT_200002b4)[index] == 0 ||\n       (isValid = checkParameterValidity(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[index] != isValid))));\n      index = index + 1 & 0xff) {\n  }\n  if (9 < index) {\n    if ((9 < DAT_20000074) && (initializeUart(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    index = (uint)DAT_20000074;\n  }\n  do {\n    isValid = processData((&DAT_200002b4)[index],input1,input2 & 0xffff,1000);\n    if (isValid == 0) {\n      return input2;\n    }\n    isValid = getDataValue();\n  } while ((uint)(isValid - dataValue1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "process_and_validate_data_08003d18",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "dataValue1",
                "iVar2": "isValid",
                "uVar3": "index",
                "initialize_uart_08003cc8": "initializeUart",
                "check_valid_parameter_080034f4": "checkParameterValidity",
                "get_data_value_08000e30": "getDataValue",
                "process_data_08002dd0": "processData"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_08003cc8",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "has_desired_condition_08003dd0",
            "code": "\nbool hasDesiredCondition_08003dd0(int inputValue)\n\n{\n  uint combinedBytesResult;\n  \n  combinedBytesResult = combine_bytes_0800312c((&DAT_200002b4)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytesResult & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "has_desired_condition_08003dd0",
                "param_1": "inputValue",
                "uVar1": "combinedBytesResult"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "is_combination_valid_08003df4",
            "code": "\nbool isCombinationValid_08003df4(int inputValue)\n\n{\n  uint combinedValue;\n  \n  combinedValue = combine_bytes_0800312c((&DAT_200002b4)[*(byte *)(inputValue + 0x44)]);\n  return (combinedValue & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "is_combination_valid_08003df4",
                "param_1": "inputValue",
                "uVar1": "combinedValue"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "validate_and_update_08003e18",
            "code": "\nundefined4 validate_and_update_08003e18(int input,undefined *output,undefined4 condition,undefined4 update_value)\n\n{\n  int condition_result;\n  \n  if (input == 0) {\n    return 0xffffffff;\n  }\n  condition_result = has_desired_condition_08003dd0();\n  if (condition_result == 0) {\n    *output = *(undefined *)(input + 0x45);\n    validate_and_update_08003e18_08002efa((&DAT_200002b4)[*(byte *)(input + 0x44)],input + 0x45,1,&DAT_200002b4,update_value);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "validate_and_update_08003e18",
                "param_1": "input",
                "param_2": "output",
                "param_3": "condition",
                "param_4": "update_value",
                "iVar1": "condition_result"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_character_data_08003e54",
            "code": "\nvoid updateCharacterData_08003e54(int character,undefined4 data,undefined4 unused,undefined4 extraData)\n\n{\n  int condition;\n  uint index;\n  \n  if (character != 0) {\n    condition = has_desired_condition_08003dd0();\n    if (condition == 0) {\n      index = (uint)*(byte *)(character + 0x44);\n      *(undefined4 *)(&DAT_20000214 + index * 4) = data;\n      *(int *)(&DAT_2000023c + index * 4) = character;\n      update_character_data_08000e60((int)*(char *)(character + 0x5c),0,1,index,extraData);\n      set_bit_08000ec4((int)*(char *)(character + 0x5c));\n      validate_and_update_08002efa((&DAT_200002b4)[*(byte *)(character + 0x44)],character + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_character_data_08003e54",
                "param_1": "character",
                "param_2": "data",
                "param_3": "unused",
                "param_4": "extraData",
                "iVar1": "condition",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_character_data_08003eac",
            "code": "\nvoid updateCharacterData_08003eac(int characterPtr,undefined4 dataPtr)\n\n{\n  byte byteValue;\n  \n  if (characterPtr != 0) {\n    byteValue = *(byte *)(characterPtr + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byteValue * 4) = dataPtr;\n    *(int *)(&DAT_2000028c + (uint)byteValue * 4) = characterPtr;\n    updateCharacterData_08003eac_08000e60((int)*(char *)(characterPtr + 0x5c),0,2);\n    setBit_08000ec4((int)*(char *)(characterPtr + 0x5c));\n    validateInput_08002eb2((&DAT_200002b4)[*(byte *)(characterPtr + 0x44)],\n                 *(int *)(characterPtr + 0x68) + (uint)*(ushort *)(characterPtr + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_character_data_08003eac",
                "param_1": "characterPtr",
                "param_2": "dataPtr",
                "bVar1": "byteValue",
                "update_character_data_08000e60": "updateCharacterData_08000e60",
                "set_bit_08000ec4": "setBit_08000ec4",
                "validate_input_08002eb2": "validateInput_08002eb2"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_index_08003f00",
            "code": "\nuint find_index_08003f00(int input)\n\n{\n  uint index;\n  \n  if (input == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (input == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_index_08003f00",
                "param_1": "input",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_function_at_index_08003f24",
            "code": "\nvoid executeFunctionAtIndex_08003f24(void)\n\n{\n  uint index;\n  \n  index = findIndex();\n  if (index < 10) {\n    (**(code **)(&DAT_20000214 + index * 4))(*(undefined4 *)(&DAT_2000023c + index * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_function_at_index_08003f24",
                "uVar1": "index",
                "find_index_08003f00": "findIndex"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "process_data_08003f48",
            "code": "\nvoid processData_08003f48(void)\n\n{\n  uint index;\n  int resultCode;\n  int dataPtr;\n  \n  index = findIndex();\n  dataPtr = *(int *)(&DAT_2000028c + index * 4);\n  if ((index < 10) && (resultCode = (**(code **)(&DAT_20000264 + index * 4))(dataPtr), resultCode != -1)) {\n    validateInput((&DAT_200002b4)[*(byte *)(dataPtr + 0x44)],\n                 *(int *)(dataPtr + 0x68) + (uint)*(ushort *)(dataPtr + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "process_data_08003f48",
                "uVar1": "index",
                "iVar2": "resultCode",
                "iVar3": "dataPtr",
                "find_index_08003f00": "findIndex",
                "validate_input_08002eb2": "validateInput"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocateMemory_08004094(int size)\n\n{\n  undefined *allocatedPtr;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocatedPtr = DAT_200002dc;\n  if (DAT_200002dc + size <= &stack0x00000000) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocatedPtr;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocatedPtr"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_error_code_080040d0",
            "code": "\nundefined4 get_error_code_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_error_code_080040d0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "set_memory_value_080040d6",
            "code": "\nundefined4 setMemoryValue_080040d6(undefined4 memoryAddress,int offset)\n\n{\n  *(undefined4 *)(offset + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "set_memory_value_080040d6",
                "param_1": "memoryAddress",
                "param_2": "offset"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "check_return_value_080040e0",
            "code": "\nundefined4 check_return_value_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "check_return_value_080040e0"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "get_zero_080040e4",
            "code": "\nuint32_t getZero_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "get_zero_080040e4",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_application_080040e8",
            "code": "\nvoid initializeApplication_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_application_080040e8",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "validate_and_process_data_080040ec",
            "code": "\nvoid validate_and_process_data_080040ec(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  process_and_validate_data_08003d18(input_2,input_3,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "validate_and_process_data_080040ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "run_infinite_loop_080040f8",
            "code": "\nvoid run_infinite_loop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "run_infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initializeData_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "initialize_0800410c",
            "code": "\nvoid initialize_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "initialize_0800410c",
                "undefined4": "void"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "process_parameter_08004110",
            "code": "\nvoid processParameter_08004110(uint inputValue,undefined4 mode,undefined4 arg,undefined *data)\n\n{\n  int bitValue;\n  undefined *arrayPtr;\n  int arrayIndex;\n  \n  if (inputValue < 0x60) {\n    arrayIndex = (int)*(short *)(&DAT_08005d3c + inputValue * 2);\n    arrayPtr = &DAT_08005d3c;\n  }\n  else {\n    arrayIndex = -1;\n    arrayPtr = data;\n  }\n  if (arrayIndex != -1) {\n    bitValue = retrieve_bit_value_08003138(arrayIndex,&DAT_200002e0,arg,arrayPtr,data);\n    if (bitValue != 0) {\n      bitValue = check_value_in_array_0800355e(arrayIndex,&DAT_08005a18);\n      if (bitValue == 0) {\n        bitValue = check_value_in_array_0800355e(arrayIndex,&DAT_08005a3c);\n        if (bitValue != 0) {\n          process_parameter_08003414(arrayIndex);\n        }\n      }\n      else {\n        process_valid_parameter_080033d8(arrayIndex);\n      }\n      update_bit_value_0800316c(arrayIndex,&DAT_200002e0);\n    }\n    switch(mode) {\n    case 0:\n      update_registers_08003486(arrayIndex,0);\n      break;\n    case 1:\n      update_registers_08003486(arrayIndex,1,0);\n      break;\n    case 2:\n      update_registers_08003486(arrayIndex,0,1);\n      break;\n    case 3:\n      update_registers_08003486(arrayIndex,0,2);\n    }\n    update_bit_0800314e(arrayIndex,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "process_parameter_08004110",
                "param_1": "inputValue",
                "param_2": "mode",
                "param_3": "arg",
                "param_4": "data",
                "iVar1": "bitValue",
                "puVar2": "arrayPtr",
                "iVar3": "arrayIndex"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08003138",
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_080033d8",
                "FUN_0800355e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "process_data_080041bc",
            "code": "\nvoid processData_080041bc(uint dataIndex,undefined4 value1,undefined4 value2,undefined *dataPtr)\n\n{\n  int bitValue;\n  undefined4 address;\n  undefined *shortDataPtr;\n  uint shortDataValue;\n  \n  if (dataIndex < 0x60) {\n    shortDataValue = (uint)*(short *)(&DAT_08005d3c + dataIndex * 2);\n    shortDataPtr = &DAT_08005d3c;\n  }\n  else {\n    shortDataValue = 0xffffffff;\n    shortDataPtr = dataPtr;\n  }\n  if ((shortDataValue != 0xffffffff) &&\n     (bitValue = retrieve_bit_value_08003138(shortDataValue,&DAT_2000030c,value2,shortDataPtr,dataPtr), bitValue != 0)) {\n    address = get_memory_address_0800318c((shortDataValue << 0x18) >> 0x1c);\n    set_param_value_080034b6(address,1 << (shortDataValue & 0xf) & 0xffff,value1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "dataIndex",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "dataPtr",
                "iVar1": "bitValue",
                "uVar2": "address",
                "puVar3": "shortDataPtr",
                "uVar4": "shortDataValue"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_data_08004204",
            "code": "\nvoid initializeData_08004204(void)\n\n{\n  initializeData_08004204Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_data_08004204",
                "initialize_data_0800346c": "initializeDataHelper"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_offset_08004240",
            "code": "\nushort calculateOffset_08004240(int baseAddress)\n\n{\n  return (*(short *)(baseAddress + 0x138) + 0x40) - *(short *)(baseAddress + 0x13a) bitwiseAnd 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "baseAddress",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_parameter_value_080042ac",
            "code": "\nvoid updateParameterValue_080042ac(int value)\n\n{\n  int result;\n  ushort newIndex;\n  undefined newValue;\n  \n  result = validate_and_update_08003e18(value,&newValue);\n  if ((result == 0) &&\n     (newIndex = *(short *)(value + 100) + 1U & 0x3f, newIndex != *(ushort *)(value + 0x66))) {\n    *(undefined *)(*(int *)(value + 0x60) + (uint)*(ushort *)(value + 100)) = newValue;\n    *(ushort *)(value + 100) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_parameter_value_080042ac",
                "param_1": "value",
                "iVar1": "result",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "handle_combination_080042e8",
            "code": "\nundefined4 handleCombination_080042e8(int data,undefined value)\n\n{\n  byte byteValue;\n  byte maskedByteValue;\n  int totalCount;\n  \n  *(undefined *)(data + 0x10) = 1;\n  totalCount = *(ushort *)(data + 0x140) + 1;\n  byteValue = (byte)totalCount;\n  maskedByteValue = byteValue & 0x7f;\n  if (totalCount == 0) {\n    maskedByteValue = -(-byteValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(data + 0x142) == (ushort)maskedByteValue);\n  *(undefined *)(*(int *)(data + 0x13c) + (uint)*(ushort *)(data + 0x140)) = value;\n  *(ushort *)(data + 0x140) = (ushort)maskedByteValue;\n  totalCount = isCombinationValid(data + 0xd4);\n  if (totalCount == 0) {\n    updateCharacterData(data + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "handle_combination_080042e8",
                "param_1": "data",
                "param_2": "value",
                "bVar1": "byteValue",
                "bVar2": "maskedByteValue",
                "iVar3": "totalCount",
                "update_character_data_08003eac": "updateCharacterData",
                "is_combination_valid_08003df4": "isCombinationValid"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_function_08004364",
            "code": "\nvoid initializeFunction_08004364(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x134) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x138) = 0;\n  *(undefined2 *)(baseAddress + 0x13a) = 0;\n  *(int *)(baseAddress + 0x13c) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x140) = 0;\n  *(undefined2 *)(baseAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_function_08004364",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "configure_serial_port_08004388",
            "code": "\nvoid configureSerialPort_08004388(int portAddress,undefined4 baudRate,byte serialConfig)\n\n{\n  uint tempExtraVal;\n  byte serialConfigBit;\n  int configValue;\n  code *jumptable;\n  \n  *(undefined4 *)(portAddress + 0x11c) = baudRate;\n  *(byte *)(portAddress + 0x144) = serialConfig;\n  serialConfigBit = serialConfig & 7;\n  if (serialConfigBit == 4) {\n    configValue = 7;\n  }\n  else if (serialConfigBit == 6) {\n    configValue = 8;\n  }\n  else if (serialConfigBit == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((serialConfig & 0x30) == 0x30) {\n    *(undefined4 *)(portAddress + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((serialConfig & 0x20) == 0) {\n    *(undefined4 *)(portAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(portAddress + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((serialConfig & 8) == 0) {\n    *(undefined4 *)(portAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(portAddress + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(portAddress + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(portAddress + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    initialize_uart_pins_08003978(portAddress + 0xd4);\n    update_character_data_08003e54(portAddress + 0xd4,0x80042ad);\n    return;\n  }\n  jumptable = (code *)0x8004432;\n  process_assertion_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (tempExtraVal < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + tempExtraVal * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "configure_serial_port_08004388",
                "param_1": "portAddress",
                "param_2": "baudRate",
                "param_3": "serialConfig",
                "extraout_r1": "tempExtraVal",
                "bVar1": "serialConfigBit",
                "iVar2": "configValue",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "set_return_value_08004444",
            "code": "\nvoid setReturnValue_08004444(int destination,uint valueIndex)\n\n{\n  undefined2 returnValue;\n  code *jumpTable;\n  \n  if (valueIndex < 0x60) {\n    returnValue = *(undefined2 *)(&DAT_08005d3c + valueIndex * 2);\n  }\n  else {\n    returnValue = 0xffff;\n  }\n  *(undefined2 *)(destination + 0x12e) = returnValue;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "set_return_value_08004444",
                "param_1": "destination",
                "param_2": "valueIndex",
                "uVar1": "returnValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_default_value_08004460",
            "code": "\nvoid setDefaultValue_08004460(int targetAddress,uint offset)\n\n{\n  undefined2 defaultValue;\n  \n  if (offset < 0x60) {\n    defaultValue = *(undefined2 *)(&DAT_08005d3c + offset * 2);\n  }\n  else {\n    defaultValue = 0xffff;\n  }\n  *(undefined2 *)(targetAddress + 300) = defaultValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_default_value_08004460",
                "param_1": "targetAddress",
                "param_2": "offset",
                "uVar1": "defaultValue"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_params_0800447c",
            "code": "\nundefined4 *\ninitialize_params_0800447c(undefined4 *params,undefined4 input_data,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 first_match;\n  \n  params[1] = 0;\n  params[2] = 1000;\n  *params = &PTR_FUN_080042e8_1_08005ed4;\n  if (params == &DAT_20000338) {\n    set_return_value(&DAT_20000338,0x4c,param_3,&DAT_20000338,param_4);\n    set_default_value(&DAT_20000338,0x4d);\n  }\n  else {\n    first_match = find_first_match(input_data,&DAT_08005c10);\n    *(undefined2 *)((int)params + 0x12e) = first_match;\n    first_match = find_first_match(input_data,&DAT_08005ca0);\n    *(undefined2 *)(params + 0x4b) = first_match;\n  }\n  initialize_function(params);\n  return params;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_params_0800447c",
                "param_1": "params",
                "param_2": "input_data",
                "uVar1": "first_match",
                "set_return_value_08004444": "set_return_value",
                "set_default_value_08004460": "set_default_value",
                "find_first_match_or_error_0800351e": "find_first_match",
                "initialize_function_08004364": "initialize_function"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004460",
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_if_param1_is_1_080044d8",
            "code": "\nvoid initialize_if_param1_is_1_080044d8(int is_param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  if (is_param1 != 1) {\n    return;\n  }\n  if (param2 == 0xffff) {\n    initialize_params(&DAT_20000338,0x40004800,param3,0xffff,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_if_param1_is_1_080044d8",
                "param_1": "is_param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "initialize_params_0800447c": "initialize_params"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initializeData_08004544(undefined4 *dataPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPointer = &DAT_08005f28;\n  *(undefined *)(dataPointer + 1) = value1;\n  *(undefined *)((int)dataPointer + 5) = value2;\n  *(undefined *)((int)dataPointer + 6) = value3;\n  *(undefined *)((int)dataPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_special_data_08004560",
            "code": "\nvoid initialize_special_data_08004560(int condition,int value)\n\n{\n  if ((condition == 1) && (value == 0xffff)) {\n    initialize_data_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_special_data_08004560",
                "param_1": "condition",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_values_08004640",
            "code": "\nuint combineValues_08004640(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_and_update_system_08004648",
            "code": "\nvoid initialize_and_update_system_08004648(void)\n\n{\n  update_configuration(3);\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_and_update_system_08004648",
                "update_configuration_08000e3c": "update_configuration",
                "initialize_system_08000d8e": "initialize_system"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "initialize_and_process_data_08004658",
            "code": "\nvoid initialize_and_process_data_08004658(void)\n\n{\n  FUNC_08004646();\n  initialize_setup();\n  do {\n    process_data();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "initialize_and_process_data_08004658",
                "initialize_and_setup_08000c4c": "initialize_setup",
                "process_data_08000c64": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000c4c",
                "FUN_08004646",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar countSetBits_08004678(uint input)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; input != 1; input = input >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "input",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_important_data_080046b4",
            "code": "\nvoid initializeImportantData_080046b4(int isInitializationSuccessful,int valueToCheck,undefined4 param3,undefined4 param4)\n\n{\n  if (isInitializationSuccessful != 1) {\n    return;\n  }\n  if (valueToCheck == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    shiftLeftBy32Bits(0,&LAB_0800468c_1,&DAT_20000000,&DAT_20000488,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_important_data_080046b4",
                "param_1": "isInitializationSuccessful",
                "param_2": "valueToCheck",
                "param_3": "param3",
                "param_4": "param4",
                "shift_left_by32_bits_080047fe": "shiftLeftBy32Bits"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "execute_function_080047c0",
            "code": "\nvoid executeFunction_080047c0(int inputParam)\n\n{\n  int bitsCount;\n  \n  if (*(int *)(inputParam + 8) != 0) {\n    (**(code **)(inputParam + 0xc))();\n    return;\n  }\n  initializeAndExecute();\n  bitsCount = countSetBits();\n  if ((&DAT_20000494)[bitsCount * 5] != 0) {\n    executeFunction_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "execute_function_080047c0",
                "param_1": "inputParam",
                "iVar1": "bitsCount",
                "initialize_and_execute_08005760": "initializeAndExecute",
                "count_set_bits_08004678": "countSetBits"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_execute_function_080047d0",
            "code": "\nvoid checkAndExecuteFunction_080047d0(void)\n\n{\n  int numSetBits;\n  \n  numSetBits = count_set_bits_08004678();\n  if ((&DAT_20000494)[numSetBits * 5] != 0) {\n    executeFunction();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_execute_function_080047d0",
                "iVar1": "numSetBits",
                "execute_function_080047c0": "executeFunction"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "shift_left_by32_bits_080047fe",
            "code": "\nvoid shiftLeftBy32Bits_080047fe(undefined4 inputPtr,undefined4 outputPtr)\n\n{\n  left_shift_by32_bits_08004844(outputPtr,inputPtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "shift_left_by32_bits_080047fe",
                "param_1": "inputPtr",
                "param_2": "outputPtr"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "process_assertion_08004808",
            "code": "\nvoid processAssertion_08004808(undefined4 file,undefined4 line,char *assertionMessage,undefined4 function)\n\n{\n  undefined4 dataOffset;\n  char *additionalInfo;\n  undefined8 result;\n  undefined4 extraInfo;\n  \n  dataOffset = *(undefined4 *)(DAT_200000a0 + 0xc);\n  extraInfo = function;\n  if (assertionMessage == (char *)0x0) goto LAB_0800482c;\n  additionalInfo = \", function: \";\n  do {\n    process_and_send_data_08004860(dataOffset,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",function,file,line\n                 ,additionalInfo,assertionMessage,extraInfo);\n    result = process_and_run_080051ac();\n    line = (undefined4)((ulonglong)result >> 0x20);\n    dataOffset = (undefined4)result;\nLAB_0800482c:\n    assertionMessage = \"\";\n    additionalInfo = assertionMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "process_assertion_08004808",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertionMessage",
                "param_4": "function",
                "uVar1": "dataOffset",
                "pcVar2": "additionalInfo",
                "uVar3": "result",
                "uVar4": "extraInfo"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "left_shift_by32_bits_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong leftShiftBy32Bits_08004844(undefined4 uninitializedValue,uint inputValue)\n\n{\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "left_shift_by32_bits_08004844",
                "param_1": "uninitializedValue",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "process_and_send_data_08004860",
            "code": "\nvoid process_and_send_data_08004860(undefined4 data_input,undefined4 data_output,undefined4 data_buffer,undefined4 data_length)\n\n{\n  undefined4 buffer_ptr;\n  undefined4 length_ptr;\n  \n  buffer_ptr = data_buffer;\n  length_ptr = data_length;\n  process_data_08004a84(DAT_200000a0,data_input,data_output,&buffer_ptr,data_input,&buffer_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "process_and_send_data_08004860",
                "param_1": "data_input",
                "param_2": "data_output",
                "param_3": "data_buffer",
                "param_4": "data_length",
                "uStack_8": "buffer_ptr",
                "uStack_4": "length_ptr"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_callbacks_08004884",
            "code": "\nvoid executeCallbacks_08004884(void)\n\n{\n  int callbackIndex;\n  \n  for (callbackIndex = 0; callbackIndex != 0; callbackIndex = callbackIndex + 1) {\n    (*(code *)(&DAT_08006008)[callbackIndex])();\n  }\n  FUNC_080059f8();\n  for (callbackIndex = 0; callbackIndex != 10; callbackIndex = callbackIndex + 1) {\n    (*(code *)(&DAT_08006008)[callbackIndex])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_callbacks_08004884",
                "iVar1": "callbackIndex"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "set_range_to_value_080048cc",
            "code": "\nvoid setRangeToValue_080048cc(undefined *array,undefined value,int length)\n\n{\n  undefined *endPtr;\n  \n  endPtr = array + length;\n  for (; array != endPtr; array = array + 1) {\n    *array = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "set_range_to_value_080048cc",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endPtr"
            },
            "calling": [
                "FUN_0800532c",
                "FUN_08005374",
                "FUN_08005400"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "process_function_080048dc",
            "code": "\nvoid process_function_080048dc(undefined4 *output_ptr,int size,undefined4 input1,undefined4 input2)\n\n{\n  int *temp1;\n  int **temp2;\n  int **ptr1;\n  int **ptr2;\n  int **ptr3;\n  int **ptr4;\n  bool is_true;\n  \n  if (size == 0) {\n    return;\n  }\n  ptr4 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    ptr4 = (int **)((int)ptr4 + *(int *)(size + -4));\n  }\n  FUNC_0800557c();\n  ptr2 = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    ptr4[1] = (int *)0x0;\n    ptr1 = temp2;\n    DAT_200005c8 = ptr4;\n  }\n  else {\n    ptr2 = DAT_200005c8;\n    if (ptr4 < DAT_200005c8) {\n      ptr1 = (int **)*ptr4;\n      ptr2 = (int **)((int)ptr4 + (int)ptr1);\n      is_true = DAT_200005c8 == ptr2;\n      if (is_true) {\n        ptr2 = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      ptr4[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = ptr4;\n      if (is_true) {\n        ptr2 = (int **)((int)ptr2 + (int)ptr1);\n        *ptr4 = (int *)ptr2;\n      }\n    }\n    else {\n      do {\n        ptr3 = ptr2;\n        ptr2 = (int **)ptr3[1];\n        if (ptr2 == (int **)0x0) break;\n      } while (ptr2 <= ptr4);\n      ptr1 = (int **)*ptr3;\n      if ((int **)((int)ptr3 + (int)ptr1) == ptr4) {\n        ptr1 = (int **)((int)ptr1 + (int)*ptr4);\n        *ptr3 = (int *)ptr1;\n        if (ptr2 == (int **)((int)ptr3 + (int)ptr1)) {\n          temp1 = *ptr2;\n          ptr2 = (int **)ptr2[1];\n          ptr3[1] = (int *)ptr2;\n          ptr1 = (int **)((int)ptr1 + (int)temp1);\n          *ptr3 = (int *)ptr1;\n        }\n      }\n      else if (ptr4 < (int **)((int)ptr3 + (int)ptr1)) {\n        *output_ptr = 0xc;\n      }\n      else {\n        ptr1 = (int **)((int)ptr4 + (int)*ptr4);\n        is_true = ptr2 == ptr1;\n        if (is_true) {\n          ptr1 = (int **)*ptr2;\n          ptr2 = (int **)ptr2[1];\n        }\n        ptr4[1] = (int *)ptr2;\n        if (is_true) {\n          ptr1 = (int **)((int)ptr1 + (int)*ptr4);\n          *ptr4 = (int *)ptr1;\n        }\n        ptr3[1] = (int *)ptr4;\n      }\n    }\n  }\n  FUNC_0800557e(output_ptr,ptr1,ptr2,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "process_function_080048dc",
                "param_1": "output_ptr",
                "param_2": "size",
                "param_3": "input1",
                "param_4": "input2",
                "piVar1": "temp1",
                "extraout_r1": "temp2",
                "ppiVar2": "ptr1",
                "ppiVar3": "ptr2",
                "ppiVar4": "ptr3",
                "ppiVar5": "ptr4",
                "bVar6": "is_true"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_and_initialize_08004978",
            "code": "\nuint allocate_memory_and_initialize_08004978(undefined4 *output_buffer,uint input_size)\n\n{\n  uint *current_chunk;\n  int remaining_space;\n  uint *next_chunk;\n  uint size_difference;\n  uint *previous_chunk;\n  uint total_size;\n  \n  total_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (total_size < 0xc) {\n    total_size = 0xc;\n  }\n  if (((int)total_size < 0) || (total_size < input_size)) {\n    *output_buffer = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_chunk = DAT_200005c8;\n    previous_chunk = DAT_200005c8;\n    while (next_chunk = current_chunk, next_chunk != (uint *)0x0) {\n      size_difference = *next_chunk - total_size;\n      if (-1 < (int)size_difference) {\n        if (size_difference < 0xc) {\n          if (previous_chunk == next_chunk) {\n            current_chunk = (uint *)previous_chunk[1];\n          }\n          else {\n            current_chunk = (uint *)next_chunk[1];\n          }\n          if (previous_chunk != next_chunk) {\n            previous_chunk[1] = (uint)current_chunk;\n            previous_chunk = next_chunk;\n            current_chunk = DAT_200005c8;\n          }\n        }\n        else {\n          *next_chunk = size_difference;\n          *(uint *)((int)next_chunk + size_difference) = total_size;\n          previous_chunk = (uint *)((int)next_chunk + size_difference);\n          current_chunk = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      previous_chunk = next_chunk;\n      current_chunk = (uint *)next_chunk[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = allocate_and_assign_memory_0800500c(output_buffer);\n    }\n    current_chunk = (uint *)allocate_and_assign_memory_0800500c(output_buffer,total_size);\n    if ((current_chunk != (uint *)0xffffffff) &&\n       ((previous_chunk = (uint *)((int)current_chunk + 3U & 0xfffffffc), current_chunk == previous_chunk ||\n        (remaining_space = allocate_and_assign_memory_0800500c(output_buffer,(int)previous_chunk - (int)current_chunk), remaining_space != -1)))) {\n      *previous_chunk = total_size;\n      current_chunk = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_chunk;\n      FUNC_0800557e(output_buffer);\n      total_size = (int)previous_chunk + 0xbU & 0xfffffff8;\n      remaining_space = total_size - (int)(previous_chunk + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)previous_chunk + remaining_space) = -remaining_space;\n        return total_size;\n      }\n      return total_size;\n    }\n    *output_buffer = 0xc;\n    FUNC_0800557e(output_buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_and_initialize_08004978",
                "param_1": "output_buffer",
                "param_2": "input_size",
                "puVar1": "current_chunk",
                "iVar2": "remaining_space",
                "puVar3": "next_chunk",
                "uVar4": "size_difference",
                "puVar5": "previous_chunk",
                "uVar6": "total_size"
            },
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_data_08004a34",
            "code": "\nuint process_input_data_08004a34(int input_param,byte input_byte,byte **input_byte_ptr)\n\n{\n  int index;\n  byte *byte_ptr_2;\n  byte *byte_ptr_3;\n  uint return_value;\n  \n  byte_ptr_2 = input_byte_ptr[2] + -1;\n  input_byte_ptr[2] = byte_ptr_2;\n  if ((-1 < (int)byte_ptr_2) ||\n     (((int)input_byte_ptr[6] <= (int)byte_ptr_2 && (byte_ptr_2 = (byte *)(uint)input_byte, byte_ptr_2 != (byte *)0xa))))\n  {\n    byte_ptr_2 = *input_byte_ptr;\n    *input_byte_ptr = byte_ptr_2 + 1;\n    *byte_ptr_2 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_param != 0) && (*(int *)(input_param + 0x18) == 0)) {\n    initialize_memory_and_data_080053a0();\n  }\n  if (input_byte_ptr == (byte **)&DAT_08005fc0) {\n    input_byte_ptr = *(byte ***)(input_param + 4);\n  }\n  else if (input_byte_ptr == (byte **)&DAT_08005fe0) {\n    input_byte_ptr = *(byte ***)(input_param + 8);\n  }\n  else if (input_byte_ptr == (byte **)&DAT_08005fa0) {\n    input_byte_ptr = *(byte ***)(input_param + 0xc);\n  }\n  input_byte_ptr[2] = input_byte_ptr[6];\n  byte_ptr_3 = (byte *)(uint)*(ushort *)(input_byte_ptr + 3);\n  index = (int)byte_ptr_3 << 0x1c;\n  if (((index < 0) && (byte_ptr_3 = input_byte_ptr[4], byte_ptr_3 != (byte *)0x0)) ||\n     (index = process_data_080050d0(input_param,input_byte_ptr,index,byte_ptr_3,byte_ptr_2), index == 0)) {\n    index = (int)*input_byte_ptr - (int)input_byte_ptr[4];\n    return_value = (uint)input_byte;\n    if ((index < (int)input_byte_ptr[5]) || (index = process_function_080052cc(input_param,input_byte_ptr), index == 0)) {\n      input_byte_ptr[2] = input_byte_ptr[2] + -1;\n      byte_ptr_2 = *input_byte_ptr;\n      *input_byte_ptr = byte_ptr_2 + 1;\n      *byte_ptr_2 = input_byte;\n      if ((byte *)(index + 1) != input_byte_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_byte_ptr + 3) << 0x1f)) {\n          return return_value;\n        }\n        if (return_value != 10) {\n          return return_value;\n        }\n      }\n      index = process_function_080052cc(input_param,input_byte_ptr);\n      if (index == 0) {\n        return return_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_data_08004a34",
                "param_1": "input_param",
                "param_2": "input_byte",
                "param_3": "input_byte_ptr",
                "iVar1": "index",
                "pbVar2": "byte_ptr_2",
                "pbVar3": "byte_ptr_3",
                "uVar4": "return_value"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_080052cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_input_data_08004a60",
            "code": "\nint process_input_data_08004a60(undefined4 input_param_1,undefined4 input_param_2,undefined *input_data,int data_length)\n\n{\n  int result;\n  undefined *end_of_data;\n  int current_length;\n  \n  end_of_data = input_data + data_length;\n  current_length = data_length;\n  do {\n    if (input_data == end_of_data) {\n      return 0;\n    }\n    result = process_input_data_08004a60_08004a34(input_param_1,*input_data,input_param_2,data_length,current_length);\n    data_length = result + 1;\n    input_data = input_data + 1;\n  } while (data_length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_input_data_08004a60",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_data",
                "param_4": "data_length",
                "iVar1": "result",
                "puVar2": "end_of_data",
                "iVar3": "current_length"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_data_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint processData_08004a84(int input,undefined4 *paramList,byte *data,int *output)\n\n{\n  int result;\n  int *ptr_i;\n  bool foundDigits;\n  byte *ptr_b;\n  byte *ptr_b_end;\n  int returnValue;\n  int tempVar;\n  int *outputPtr;\n  uint flags;\n  int width;\n  undefined4 precision;\n  int length;\n  int processedData;\n  byte flagChar;\n  undefined spaceFlag;\n  undefined plusFlag;\n  undefined hashFlag;\n  undefined4 zeroFlag;\n  \n  outputPtr = output;\n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize_memory_and_data_080053a0();\n  }\n  if (paramList == &DAT_08005fc0) {\n    paramList = *(undefined4 **)(input + 4);\n  }\n  else if (paramList == (undefined4 *)&DAT_08005fe0) {\n    paramList = *(undefined4 **)(input + 8);\n  }\n  else if (paramList == (undefined4 *)&DAT_08005fa0) {\n    paramList = *(undefined4 **)(input + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(paramList + 3) << 0x1c)) || (paramList[4] == 0)) &&\n     (tempVar = process_data_080050d0(input,paramList), tempVar != 0)) {\n    return -1;\n  }\n  processedData = 0;\n  spaceFlag = 0x20;\n  plusFlag = 0x30;\n  ptr_b = data;\nLAB_08004ac6:\n  ptr_b_end = ptr_b;\n  if (*ptr_b_end != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  ptr_b = ptr_b_end + 1;\n  if (*ptr_b_end != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  tempVar = (int)ptr_b_end - (int)data;\n  if (tempVar != 0) {\n    result = process_input_data_08004a60(input,paramList,data,tempVar);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(paramList + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return processedData;\n    }\n    processedData = processedData + tempVar;\n  }\n  if (*ptr_b_end == 0) goto LAB_08004c70;\n  flags = 0;\n  length = 0;\n  width = -1;\n  precision = 0;\n  hashFlag = 0;\n  zeroFlag = 0;\n  ptr_b = ptr_b_end + 1;\n  while( true ) {\n    tempVar = find_byte_sequence_08000230(\"#-0+ \",*ptr_b);\n    data = ptr_b + 1;\n    if (tempVar == 0) break;\n    flags = 1 << (tempVar + 0xf7ffa094U & 0xff) | flags;\n    ptr_b = data;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    hashFlag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    hashFlag = 0x2b;\n  }\n  if (*ptr_b == 0x2a) {\n    ptr_i = outputPtr + 1;\n    tempVar = *outputPtr;\n    outputPtr = ptr_i;\n    if (tempVar < 0) {\n      length = -tempVar;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    foundDigits = false;\n    tempVar = length;\n    data = ptr_b;\n    while( true ) {\n      if (9 < *data - 0x30) break;\n      tempVar = tempVar * 10 + (*data - 0x30);\n      foundDigits = true;\n      data = data + 1;\n    }\n    if (!foundDigits) goto LAB_08004bae;\n  }\n  length = tempVar;\nLAB_08004bae:\n  if (*data == 0x2e) {\n    if (data[1] == 0x2a) {\n      width = *outputPtr;\n      if (width < 0) {\n        width = -1;\n      }\n      data = data + 2;\n      outputPtr = outputPtr + 1;\n    }\n    else {\n      foundDigits = false;\n      width = 0;\n      tempVar = 0;\n      while( true ) {\n        data = data + 1;\n        if (9 < *data - 0x30) break;\n        tempVar = tempVar * 10 + (*data - 0x30);\n        foundDigits = true;\n      }\n      if (foundDigits) {\n        width = tempVar;\n      }\n    }\n  }\n  tempVar = find_byte_sequence_08000230(&DAT_08005f72,*data,3);\n  if (tempVar != 0) {\n    flags = flags | 0x40 << (tempVar + 0xf7ffa08eU & 0xff);\n    data = data + 1;\n  }\n  flagChar = *data;\n  data = data + 1;\n  tempVar = find_byte_sequence_08000230(\"efgEFG\",flagChar,6);\n  if (tempVar == 0) {\n    returnValue = decompile_and_execute_08004d9c(input,&flags,paramList,0x8004a61,&outputPtr);\n    if (returnValue == -1) goto LAB_08004c70;\n  }\n  else {\n    outputPtr = (int *)(((int)outputPtr + 7U & 0xfffffff8) + 8);\n  }\n  processedData = processedData + returnValue;\n  ptr_b = data;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "param_1": "input",
                "param_2": "paramList",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "result",
                "piVar2": "ptr_i",
                "bVar3": "foundDigits",
                "pbVar4": "ptr_b",
                "pbVar5": "ptr_b_end",
                "unaff_r9": "returnValue",
                "iVar6": "tempVar",
                "local_8c": "outputPtr",
                "local_88": "flags",
                "local_84": "width",
                "local_80": "precision",
                "local_7c": "length",
                "local_74": "processedData",
                "local_70": "flagChar",
                "local_6f": "spaceFlag",
                "local_6e": "plusFlag",
                "local_45": "hashFlag",
                "local_30": "zeroFlag"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_08000230",
                "FUN_08004a60",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "decompile_and_improve_08004cb0",
            "code": "\nundefined4\ndecompile_and_improve_08004cb0(undefined4 input_value_1,uint *input_array,uint *output_array,undefined4 input_value_2,code *callback_function)\n\n{\n  int loop_counter_1;\n  int loop_counter_2;\n  uint temp_variable_1;\n  uint temp_variable_2;\n  bool is_condition_true;\n  \n  temp_variable_1 = input_array[4];\n  if ((int)input_array[4] < (int)input_array[2]) {\n    temp_variable_1 = input_array[2];\n  }\n  *output_array = temp_variable_1;\n  if (*(char *)((int)input_array + 0x43) != '\\0') {\n    *output_array = temp_variable_1 + 1;\n  }\n  if ((int)(*input_array << 0x1a) < 0) {\n    *output_array = *output_array + 2;\n  }\n  if ((*input_array & 6) == 0) {\n    for (loop_counter_1 = 0; loop_counter_1 < (int)(input_array[3] - *output_array); loop_counter_1 = loop_counter_1 + 1) {\n      loop_counter_2 = (*callback_function)(input_value_1,input_value_2,(int)input_array + 0x19,1);\n      if (loop_counter_2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  temp_variable_1 = (uint)*(byte *)((int)input_array + 0x43);\n  if (temp_variable_1 != 0) {\n    temp_variable_1 = 1;\n  }\n  if ((int)(*input_array << 0x1a) < 0) {\n    *(undefined *)((int)input_array + temp_variable_1 + 0x43) = 0x30;\n    *(undefined *)((int)input_array + temp_variable_1 + 0x44) = *(undefined *)((int)input_array + 0x45);\n    temp_variable_1 = temp_variable_1 + 2;\n  }\n  loop_counter_1 = (*callback_function)(input_value_1,input_value_2,(int)input_array + 0x43,temp_variable_1);\n  if (loop_counter_1 != -1) {\n    temp_variable_1 = input_array[3];\n    is_condition_true = (*input_array & 6) == 4;\n    if (is_condition_true) {\n      temp_variable_1 = temp_variable_1 - *output_array;\n    }\n    if (is_condition_true) {\n      temp_variable_1 = temp_variable_1 & ~((int)temp_variable_1 >> 0x1f);\n    }\n    else {\n      temp_variable_1 = 0;\n    }\n    if ((int)input_array[4] < (int)input_array[2]) {\n      temp_variable_1 = temp_variable_1 + (input_array[2] - input_array[4]);\n    }\n    temp_variable_2 = 0;\n    while( true ) {\n      if (temp_variable_1 == temp_variable_2) {\n        return 0;\n      }\n      loop_counter_1 = (*callback_function)(input_value_1,input_value_2,(int)input_array + 0x1a,1);\n      if (loop_counter_1 == -1) break;\n      temp_variable_2 = temp_variable_2 + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "decompile_and_improve_08004cb0",
                "param_1": "input_value_1",
                "param_2": "input_array",
                "param_3": "output_array",
                "param_4": "input_value_2",
                "param_5": "callback_function",
                "iVar1": "loop_counter_1",
                "iVar2": "loop_counter_2",
                "uVar3": "temp_variable_1",
                "uVar4": "temp_variable_2",
                "bVar5": "is_condition_true"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "decompile_and_execute_08004d9c",
            "code": "\nuint decompile_and_execute_08004d9c(undefined4 param_1,uint *input,undefined4 param_3,code *execute_callback,uint **param_5)\n\n{\n  byte byte_value;\n  int index;\n  uint *pointer;\n  int loop_index;\n  char *hex_digits;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint size;\n  char *result;\n  char *output;\n  uint output_size [2];\n  \n  byte_value = *(byte *)(input + 6);\n  output = (char *)((int)input + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08004f56;\n          if (byte_value != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)input + 0x45) = 0x58;\n          hex_digits = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          base = *input;\n          pointer = *param_5;\n          *param_5 = pointer + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)pointer;\n          }\n          else {\n            value = *pointer;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *input = base | 0x20;\n          }\n          if (value == 0) {\n            *input = *input & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)input + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_08004dcc;\n          value = *input;\n          pointer = *param_5;\n          if ((value & 0x80) == 0) {\n            *param_5 = pointer + 1;\n            if ((value & 0x40) == 0) goto LAB_08004dec;\n            value = (uint)(short)*(ushort *)pointer;\n          }\n          else {\n            *param_5 = pointer + 1;\nLAB_08004dec:\n            value = *pointer;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)input + 0x43) = 0x2d;\n          }\n          hex_digits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        size = input[1];\n        input[2] = size;\n        result = output;\n        if ((int)size < 0) {\n          if (value != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)input + 0x42) = *hex_digits;\n          result = (char *)((int)input + 0x42);\n        }\n        else {\n          *input = *input & 0xfffffffb;\n          if (value == 0) {\n            if (size != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              size = value / base;\n              result = result + -1;\n              *result = hex_digits[value - base * size];\n              value = size;\n            } while (size != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*input << 0x1f) < 0)) && ((int)input[1] <= (int)input[4]))\n        {\n          result[-1] = '0';\n          result = result + -1;\n        }\n        input[4] = (int)output - (int)result;\n        output = result;\n        goto LAB_08004ec2;\n      }\n      pointer = *param_5;\n      *param_5 = pointer + 1;\n      *(char *)((int)input + 0x42) = (char)*pointer;\nLAB_08004e2c:\n      output = (char *)((int)input + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08004e52:\n            value = *input;\n            pointer = *param_5;\n            if ((value & 0x80) == 0) {\n              *param_5 = pointer + 1;\n              if ((value & 0x40) == 0) goto LAB_08004e60;\n              value = (uint)*(ushort *)pointer;\n            }\n            else {\n              *param_5 = pointer + 1;\nLAB_08004e60:\n              value = *pointer;\n            }\n            hex_digits = \"0123456789ABCDEF\";\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byte_value == 0x70) {\n            *input = *input | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)input + 0x45) = 0x78;\n            hex_digits = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08004e52;\n          if (byte_value == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)input + 0x42) = byte_value;\n        goto LAB_08004e2c;\n      }\n      ppcVar8 = (char **)*param_5;\n      *param_5 = (uint *)(ppcVar8 + 1);\n      output = *ppcVar8;\n      index = find_byte_sequence_08000230(output,0,input[1]);\n      if (index != 0) {\n        input[1] = index - (int)output;\n      }\n      value = input[1];\n    }\n    input[4] = value;\n    *(undefined *)((int)input + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  value = *input;\n  ppuVar7 = (uint **)*param_5;\n  base = input[5];\n  if ((value & 0x80) == 0) {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    pointer = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_08004f42;\n    *(short *)pointer = (short)base;\n  }\n  else {\n    *param_5 = (uint *)(ppuVar7 + 1);\n    pointer = *ppuVar7;\nLAB_08004f42:\n    *pointer = base;\n  }\nLAB_08004f56:\n  input[4] = 0;\nLAB_08004ec2:\n  index = decompile_and_improve_08004cb0(param_1,input,output_size,param_3,execute_callback);\n  if ((index == -1) || (index = (*execute_callback)(param_1,param_3,output,input[4]), index == -1)) {\nLAB_08004ed6:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*input << 0x1e) < 0) {\n      for (index = 0; index < (int)(input[3] - output_size[0]); index = index + 1) {\n        loop_index = (*execute_callback)(param_1,param_3,(int)input + 0x19,1);\n        if (loop_index == -1) goto LAB_08004ed6;\n      }\n    }\n    value = input[3];\n    if ((int)input[3] < (int)output_size[0]) {\n      value = output_size[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "decompile_and_execute_08004d9c",
                "param_2": "input",
                "param_4": "execute_callback",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "pointer",
                "iVar4": "loop_index",
                "pcVar5": "hex_digits",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "size",
                "pcVar11": "result",
                "pcVar12": "output",
                "local_24": "output_size"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "process_and_initialize_data_08004fdc",
            "code": "\nvoid process_and_initialize_data_08004fdc(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  int data_address;\n  undefined4 temp_param_1;\n  undefined4 temp_param_2;\n  undefined4 temp_param_3;\n  undefined4 temp_param_4;\n  \n  data_address = DAT_200000a0;\n  temp_param_1 = input_param_1;\n  temp_param_2 = input_param_2;\n  temp_param_3 = input_param_3;\n  temp_param_4 = input_param_4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_memory_and_data_080053a0(DAT_200000a0);\n  }\n  process_data_08004a84(data_address,*(undefined4 *)(data_address + 8),input_param_1,&temp_param_2,temp_param_1,&temp_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "process_and_initialize_data_08004fdc",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "data_address",
                "uVar2": "temp_param_1",
                "uStack_c": "temp_param_2",
                "uStack_8": "temp_param_3",
                "uStack_4": "temp_param_4"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "allocate_and_assign_memory_0800500c",
            "code": "\nvoid allocateAndAssignMemory_0800500c(int *outputPointer,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_20000674 = 0;\n  allocationResult = allocate_memory_08004094(size);\n  if ((allocationResult == -1) && (DAT_20000674 != 0)) {\n    *outputPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "allocate_and_assign_memory_0800500c",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_data_080050d0",
            "code": "\nuint processData_080050d0(undefined4 *output,undefined4 *input)\n\n{\n  int data;\n  uint result;\n  ushort flag;\n  \n  data = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_memory_and_data_080053a0(DAT_200000a0);\n  }\n  if (input == &DAT_08005fc0) {\n    input = *(undefined4 **)(data + 4);\n  }\n  else if (input == (undefined4 *)&DAT_08005fe0) {\n    input = *(undefined4 **)(data + 8);\n  }\n  else if (input == (undefined4 *)&DAT_08005fa0) {\n    input = *(undefined4 **)(data + 0xc);\n  }\n  flag = *(ushort *)(input + 3);\n  result = (uint)flag;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          process_function_080048dc(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    initialize_memory_080054fc(output,input);\n  }\n  flag = *(ushort *)(input + 3);\n  result = flag & 1;\n  if ((flag & 1) == 0) {\n    if (-1 < (int)((uint)flag << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flag = *(ushort *)(input + 3);\n    result = (int)(short)flag & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(input + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "data",
                "uVar2": "result",
                "uVar3": "flag"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080053a0",
                "FUN_080054fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUNC_080053a0(DAT_200000a0);\n  }\n  if (param_2 == &DAT_08005fc0) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fe0) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fa0) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          process_function_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_memory_080054fc(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_and_run_080051ac",
            "code": "\nvoid processAndRun_080051ac(void)\n\n{\n  uint *ptrValue1;\n  int intValue1;\n  int *ptrArray1;\n  int *ptrArray2;\n  uint uintValue1;\n  ushort ushortValue1;\n  int intValue2;\n  code *functionPointer;\n  int intValue3;\n  uint uintValue2;\n  code *jmpTable;\n  bool boolValue;\n  undefined8 ulonglongValue;\n  \n  process_parameter_080055d0(6);\n  jmpTable = (code *)0x80051bb;\n  ulonglongValue = run_infinite_loop_080040f8(1);\n  ptrArray1 = (int *)((ulonglong)ulonglongValue >> 0x20);\n  ptrValue1 = (uint *)ulonglongValue;\n  ushortValue1 = *(ushort *)(ptrArray1 + 3);\n  uintValue1 = (uint)ushortValue1;\n  if ((int)(uintValue1 << 0x1c) < 0) {\n    intValue1 = ptrArray1[4];\n    if (intValue1 != 0) {\n      intValue2 = uintValue1 << 0x1e;\n      boolValue = intValue2 == 0;\n      intValue3 = *ptrArray1;\n      if (boolValue) {\n        intValue2 = ptrArray1[5];\n      }\n      *ptrArray1 = intValue1;\n      if (!boolValue) {\n        intValue2 = 0;\n      }\n      ptrArray1[2] = intValue2;\n      for (intValue3 = intValue3 - intValue1; 0 < intValue3; intValue3 = intValue3 - intValue2) {\n        intValue2 = (*(code *)ptrArray1[10])(ptrValue1,ptrArray1[8],intValue1,intValue3);\n        if (intValue2 < 1) {\n          ushortValue1 = *(ushort *)(ptrArray1 + 3);\n          goto LAB_080052b2;\n        }\n        intValue1 = intValue1 + intValue2;\n      }\n    }\n  }\n  else if (((0 < ptrArray1[1]) || (0 < ptrArray1[0x10])) &&\n          (functionPointer = (code *)ptrArray1[0xb], functionPointer != (code *)0x0)) {\n    uintValue2 = *ptrValue1;\n    *ptrValue1 = 0;\n    if ((ushortValue1 & 0x1000) == 0) {\n      intValue1 = (*functionPointer)(ptrValue1,ptrArray1[8],uintValue1 & 0x1000,1);\n      if ((intValue1 == -1) && (uintValue1 = *ptrValue1, uintValue1 != 0)) {\n        if ((uintValue1 != 0x1d) && (uintValue1 != 0x16)) {\n          *(ushort *)(ptrArray1 + 3) = *(ushort *)(ptrArray1 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jmpTable)();\n          return;\n        }\n        *ptrValue1 = uintValue2;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      intValue1 = ptrArray1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptrArray1 + 3) << 0x1d) < 0) &&\n       (intValue1 = intValue1 - ptrArray1[1], ptrArray1[0xd] != 0)) {\n      intValue1 = intValue1 - ptrArray1[0x10];\n    }\n    intValue1 = (*(code *)ptrArray1[0xb])(ptrValue1,ptrArray1[8],intValue1,0);\n    ushortValue1 = *(ushort *)(ptrArray1 + 3);\n    if ((intValue1 == -1) &&\n       ((0x1d < *ptrValue1 || (-1 < (int)((0x20400001U >> (*ptrValue1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(ptrArray1 + 3) = ushortValue1 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jmpTable)(0xffffffff);\n      return;\n    }\n    ptrArray1[1] = 0;\n    *ptrArray1 = ptrArray1[4];\n    if (((int)((uint)ushortValue1 << 0x13) < 0) && ((intValue1 != -1 || (*ptrValue1 == 0)))) {\n      ptrArray1[0x15] = intValue1;\n    }\n    ptrArray2 = (int *)ptrArray1[0xd];\n    *ptrValue1 = uintValue2;\n    if (ptrArray2 != (int *)0x0) {\n      if (ptrArray2 != ptrArray1 + 0x11) {\n        process_function_080048dc(ptrValue1);\n      }\n      ptrArray1[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jmpTable)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jmpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "process_and_run_080051ac",
                "puVar1": "ptrValue1",
                "iVar2": "intValue1",
                "piVar3": "ptrArray1",
                "piVar4": "ptrArray2",
                "uVar5": "uintValue1",
                "uVar6": "ushortValue1",
                "iVar7": "intValue2",
                "pcVar8": "functionPointer",
                "iVar9": "intValue3",
                "uVar10": "uintValue2",
                "UNRECOVERED_JUMPTABLE_00": "jmpTable",
                "bVar11": "boolValue",
                "uVar12": "ulonglongValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080055d0",
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_function_080052cc",
            "code": "\nundefined4 processFunction_080052cc(uint *inputParams,int *outputParams)\n\n{\n  undefined4 returnValue;\n  int tempVar1;\n  int *tempVar2;\n  uint tempVar3;\n  ushort tempVar4;\n  int tempVar5;\n  undefined4 tempVar6;\n  undefined4 tempVar7;\n  code *functionPointer;\n  int tempVar8;\n  uint tempVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool flagVar;\n  \n  if (outputParams[4] != 0) {\n    if ((inputParams != (uint *)0x0) && (inputParams[6] == 0)) {\n      initialize_memory_and_data_080053a0();\n    }\n    if (outputParams == &DAT_08005fc0) {\n      outputParams = (int *)inputParams[1];\n    }\n    else if (outputParams == (int *)&DAT_08005fe0) {\n      outputParams = (int *)inputParams[2];\n    }\n    else if (outputParams == (int *)&DAT_08005fa0) {\n      outputParams = (int *)inputParams[3];\n    }\n    if (*(short *)(outputParams + 3) != 0) {\n      tempVar4 = *(ushort *)(outputParams + 3);\n      tempVar3 = (uint)tempVar4;\n      if ((int)(tempVar3 << 0x1c) < 0) {\n        tempVar1 = outputParams[4];\n        if (tempVar1 != 0) {\n          tempVar5 = tempVar3 << 0x1e;\n          flagVar = tempVar5 == 0;\n          tempVar8 = *outputParams;\n          if (flagVar) {\n            tempVar5 = outputParams[5];\n          }\n          *outputParams = tempVar1;\n          if (!flagVar) {\n            tempVar5 = 0;\n          }\n          outputParams[2] = tempVar5;\n          for (tempVar8 = tempVar8 - tempVar1; 0 < tempVar8; tempVar8 = tempVar8 - tempVar5) {\n            tempVar5 = (*(code *)outputParams[10])(inputParams,outputParams[8],tempVar1,tempVar8,tempVar6,tempVar7);\n            if (tempVar5 < 1) {\n              tempVar4 = *(ushort *)(outputParams + 3);\n              goto LAB_080052b2;\n            }\n            tempVar1 = tempVar1 + tempVar5;\n          }\n        }\n      }\n      else if (((0 < outputParams[1]) || (0 < outputParams[0x10])) &&\n              (functionPointer = (code *)outputParams[0xb], functionPointer != (code *)0x0)) {\n        tempVar9 = *inputParams;\n        *inputParams = 0;\n        if ((tempVar4 & 0x1000) == 0) {\n          tempVar1 = (*functionPointer)(inputParams,outputParams[8],tempVar3 & 0x1000,1);\n          if ((tempVar1 == -1) && (tempVar3 = *inputParams, tempVar3 != 0)) {\n            if ((tempVar3 != 0x1d) && (tempVar3 != 0x16)) {\n              *(ushort *)(outputParams + 3) = *(ushort *)(outputParams + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n              return returnValue;\n            }\n            *inputParams = tempVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          tempVar1 = outputParams[0x15];\n        }\n        if (((int)((uint)*(ushort *)(outputParams + 3) << 0x1d) < 0) &&\n           (tempVar1 = tempVar1 - outputParams[1], outputParams[0xd] != 0)) {\n          tempVar1 = tempVar1 - outputParams[0x10];\n        }\n        tempVar1 = (*(code *)outputParams[0xb])(inputParams,outputParams[8],tempVar1,0);\n        tempVar4 = *(ushort *)(outputParams + 3);\n        if ((tempVar1 == -1) &&\n           ((0x1d < *inputParams || (-1 < (int)((0x20400001U >> (*inputParams & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(outputParams + 3) = tempVar4 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return returnValue;\n        }\n        outputParams[1] = 0;\n        *outputParams = outputParams[4];\n        if (((int)((uint)tempVar4 << 0x13) < 0) && ((tempVar1 != -1 || (*inputParams == 0)))) {\n          outputParams[0x15] = tempVar1;\n        }\n        tempVar2 = (int *)outputParams[0xd];\n        *inputParams = tempVar9;\n        if (tempVar2 != (int *)0x0) {\n          if (tempVar2 != outputParams + 0x11) {\n            process_function_080048dc(inputParams);\n          }\n          outputParams[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*UNRECOVERED_JUMPTABLE_00)();\n          return returnValue;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_function_080052cc",
                "param_1": "inputParams",
                "param_2": "outputParams",
                "uVar1": "returnValue",
                "iVar2": "tempVar1",
                "piVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "iVar6": "tempVar5",
                "unaff_r4": "tempVar6",
                "unaff_r5": "tempVar7",
                "pcVar7": "functionPointer",
                "iVar8": "tempVar8",
                "uVar9": "tempVar9",
                "bVar10": "flagVar"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == &DAT_08005fc0) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08005fe0) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_08005fa0) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            process_function_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_data_0800532c",
            "code": "\nvoid initializeData_0800532c(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[25] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  set_range_to_value_080048cc(data + 0x17,0,8);\n  data[9] = 0x8005609;\n  data[10] = 0x800562b;\n  data[11] = 0x8005663;\n  data[8] = data;\n  data[0xc] = &LAB_08005686_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_data_0800532c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "data[1]",
                "param_1[2]": "data[2]",
                "param_1[0x19]": "data[25]",
                "param_1[4]": "data[4]",
                "param_1[5]": "data[5]",
                "param_1[6]": "data[6]",
                "param_1[9]": "data[9]",
                "param_1[10]": "data[10]",
                "param_1[0xb]": "data[11]"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "initialize_memory_08005374",
            "code": "\nundefined4 * initialize_memory_08005374(undefined4 param1,int param2)\n\n{\n  undefined4 *ptr;\n  int index;\n  \n  index = (param2 + -1) * 0x68;\n  ptr = (undefined4 *)allocate_memory_and_initialize_08004978(param1,index + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = param2;\n    ptr[2] = ptr + 3;\n    set_range_to_value(ptr + 3,0,index + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_08005374": "initialize_memory_08005374",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "ptr",
                "iVar2": "index",
                "puVar1[1]": "ptr[1]",
                "puVar1[2]": "ptr[2]",
                "set_range_to_value_080048cc": "set_range_to_value"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_memory_and_data_080053a0",
            "code": "\nvoid initialize_memory_and_data_080053a0(undefined4 *param)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (param[6] == 0) {\n    param[0x12] = 0;\n    param[0x13] = 0;\n    param[0x14] = 0;\n    pointer = &DAT_200000a4;\n    param[10] = &label;\n    if (param == &DAT_200000a4) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (param == &DAT_200000a4) {\n      param[6] = pointer;\n    }\n    result = initialize_memory_if_needed_08005400();\n    param[1] = result;\n    result = initialize_memory_if_needed_08005400(param);\n    param[2] = result;\n    result = initialize_memory_if_needed_08005400(param);\n    param[3] = result;\n    initialize_data_0800532c(param[1],4,0);\n    initialize_data_0800532c(param[2],9,1);\n    initialize_data_0800532c(param[3],0x12,2);\n    param[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_memory_and_data_080053a0",
                "param_1": "param",
                "uVar1": "result",
                "puVar2": "pointer",
                "LAB_08005320_1": "label"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_0800532c",
                "FUN_08005400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_memory_if_needed_08005400",
            "code": "\nint * initialize_memory_if_needed_08005400(undefined4 *error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *current_ptr_1;\n  int *current_ptr_2;\n  int **ptr_to_ptr_to_data;\n  \n  if (DAT_200000bc == 0) {\n    initialize_memory_and_data_080053a0(&DAT_200000a4);\n  }\n  ptr_to_ptr_to_data = (int **)&DAT_200000ec;\n  do {\n    current_ptr_2 = ptr_to_ptr_to_data[2];\n    current_ptr_1 = ptr_to_ptr_to_data[1];\n    while (current_ptr_1 = (int *)((int)current_ptr_1 + -1), -1 < (int)current_ptr_1) {\n      if (*(short *)(current_ptr_2 + 3) == 0) {\n        *(undefined2 *)((int)current_ptr_2 + 0xe) = 0xffff;\n        *(undefined2 *)(current_ptr_2 + 3) = 1;\n        current_ptr_2[0x19] = 0;\n        *current_ptr_2 = 0;\n        current_ptr_2[2] = 0;\n        current_ptr_2[1] = 0;\n        current_ptr_2[4] = 0;\n        current_ptr_2[5] = 0;\n        current_ptr_2[6] = 0;\n        set_range_to_value_080048cc(current_ptr_2 + 0x17,0,8,1,param_4);\n        current_ptr_2[0xd] = 0;\n        current_ptr_2[0xe] = 0;\n        current_ptr_2[0x12] = 0;\n        current_ptr_2[0x13] = 0;\n        return current_ptr_2;\n      }\n      current_ptr_2 = current_ptr_2 + 0x1a;\n    }\n    if (*ptr_to_ptr_to_data == (int *)0x0) {\n      current_ptr_1 = (int *)set_range_to_value_080048cc(error_code,4);\n      *ptr_to_ptr_to_data = current_ptr_1;\n      if (current_ptr_1 == (int *)0x0) {\n        *error_code = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ptr_to_ptr_to_data = (int **)*ptr_to_ptr_to_data;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_memory_if_needed_08005400",
                "param_1": "error_code",
                "piVar1": "current_ptr_1",
                "piVar2": "current_ptr_2",
                "ppiVar3": "ptr_to_ptr_to_data",
                "initialize_memory_08005374": "set_range_to_value_080048cc"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    FUNC_080053a0(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        set_range_to_value_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)initialize_memory_08005374(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "set_and_check_memory_value_080054b4",
            "code": "\nundefined4 set_and_check_memory_value_080054b4(undefined4 input_1,int input_2,undefined4 *output_1,uint *output_2)\n\n{\n  int result;\n  undefined4 status;\n  undefined buffer [4];\n  uint value_1;\n  \n  if ((*(short *)(input_2 + 0xe) < 0) ||\n     (result = set_memory_value_and_save_error_080056d4(input_1,(int)*(short *)(input_2 + 0xe),buffer), result < 0)) {\n    *output_2 = 0;\n    if ((int)((uint)*(ushort *)(input_2 + 0xc) << 0x18) < 0) {\n      status = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *output_2 = (uint)((value_1 & 0xf000) == 0x2000);\n  }\n  status = 0x400;\nLAB_080054f4:\n  *output_1 = status;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "set_and_check_memory_value_080054b4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "output_1",
                "param_4": "output_2",
                "iVar1": "result",
                "uVar2": "status",
                "auStack_4c": "buffer",
                "local_48": "value_1"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "initialize_memory_080054fc",
            "code": "\nvoid initializeMemory_080054fc(int baseAddress,int *memoryBlock)\n\n{\n  ushort returnValue;\n  int allocatedMemory;\n  int localAddress;\n  int *localBlock;\n  \n  if (-1 < (int)((uint)*(ushort *)(memoryBlock + 3) << 0x1e)) {\n    localAddress = baseAddress;\n    localBlock = memoryBlock;\n    returnValue = set_and_check_memory_value_080054b4(baseAddress,memoryBlock,&localAddress,&localBlock);\n    allocatedMemory = allocate_memory_and_initialize_08004978(baseAddress,localAddress);\n    if (allocatedMemory != 0) {\n      *(undefined **)(baseAddress + 0x28) = &LAB_08005320_1;\n      *memoryBlock = allocatedMemory;\n      *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) | 0x80;\n      memoryBlock[5] = localAddress;\n      memoryBlock[4] = allocatedMemory;\n      if ((localBlock != (int *)0x0) &&\n         (allocatedMemory = update_return_value_080056f8(baseAddress,(int)*(short *)((int)memoryBlock + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memoryBlock + 3) = returnValue | *(ushort *)(memoryBlock + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memoryBlock + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 2;\n  }\n  *memoryBlock = (int)memoryBlock + 0x47;\n  memoryBlock[4] = (int)memoryBlock + 0x47;\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "initialize_memory_080054fc",
                "param_1": "baseAddress",
                "param_2": "memoryBlock",
                "uVar1": "returnValue",
                "iVar2": "allocatedMemory",
                "local_18": "localAddress",
                "local_14": "localBlock"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "process_parameter_080055d0",
            "code": "\nint processParameter_080055d0(uint param)\n\n{\n  int *dataPtr;\n  undefined4 returnValue;\n  int data;\n  code *functionPtr;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  undefined4 *dataPtrPtr;\n  \n  dataPtr = DAT_200000a0;\n  dataPtrPtr = &DAT_200000a0;\n  if (0x1f < param) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  data = DAT_200000a0[0x11];\n  if ((data != 0) && (functionPtr = *(code **)(data + param * 4), functionPtr != (code *)0x0)) {\n    if (functionPtr != (code *)0x1) {\n      if (functionPtr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(data + param * 4) = 0;\n      (*functionPtr)(param);\n    }\n    return 0;\n  }\n  returnValue = thunk_initialize_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  data = initialize_data_080040fc(returnValue,param,param,0,dataPtrPtr,unaff_r4,unaff_r5,in_lr);\n  if ((data == -1) && (DAT_20000674 != 0)) {\n    *dataPtr = DAT_20000674;\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "process_parameter_080055d0",
                "param_1": "param",
                "piVar1": "dataPtr",
                "uVar2": "returnValue",
                "iVar3": "data",
                "pcVar4": "functionPtr",
                "puVar5": "dataPtrPtr"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "get_return_value_thunk_0800410c",
            "code": "\nundefined4 getReturnValue_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "get_return_value_thunk_0800410c"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_parameter_08005608",
            "code": "\nvoid updateParameter_08005608(undefined4 applicationData,int binaryData)\n\n{\n  int result;\n  uint updatedValue;\n  bool isSuccessful;\n  \n  result = initialize_application_0800573c(applicationData,(int)*(short *)(binaryData + 0xe));\n  isSuccessful = -1 < result;\n  if (isSuccessful) {\n    updatedValue = *(int *)(binaryData + 0x54) + result;\n  }\n  else {\n    updatedValue = *(ushort *)(binaryData + 0xc) & 0xffffefff;\n  }\n  if (isSuccessful) {\n    *(uint *)(binaryData + 0x54) = updatedValue;\n  }\n  if (!isSuccessful) {\n    *(short *)(binaryData + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_parameter_08005608",
                "param_1": "applicationData",
                "param_2": "binaryData",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isSuccessful"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "process_data_0800562a",
            "code": "\nvoid processData_0800562a(int *dataPtr,int structPtr,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  \n  if ((int)((uint)*(ushort *)(structPtr + 0xc) << 0x17) < 0) {\n    check_and_assign_08005718(dataPtr,(int)*(short *)(structPtr + 0xe),0,2);\n  }\n  *(ushort *)(structPtr + 0xc) = *(ushort *)(structPtr + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = validate_and_process_data_080040ec((int)*(short *)(structPtr + 0xe),param1,param2,param2,param2,unused1,\n                       unused2,unused3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *dataPtr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "process_data_0800562a",
                "param_1": "dataPtr",
                "param_2": "structPtr",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3"
            },
            "calling": [],
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "update_value_08005662",
            "code": "\nvoid updateValue_08005662(undefined4 input1,int input2)\n\n{\n  int result;\n  ushort updatedValue;\n  bool isNegative;\n  \n  result = check_and_assign_08005718(input1,(int)*(short *)(input2 + 0xe));\n  isNegative = result == -1;\n  if (isNegative) {\n    updatedValue = *(ushort *)(input2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(input2 + 0x54) = result;\n    updatedValue = *(ushort *)(input2 + 0xc) | 0x1000;\n  }\n  if (isNegative) {\n    *(ushort *)(input2 + 0xc) = updatedValue;\n  }\n  if (!isNegative) {\n    *(ushort *)(input2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "update_value_08005662",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isNegative"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "set_memory_value_and_save_error_080056d4",
            "code": "\nvoid set_memory_value_and_save_error_080056d4(int *result,undefined4 value_1,undefined4 value_2,undefined4 value_3)\n\n{\n  int set_memory_result;\n  \n  DAT_20000674 = 0;\n  set_memory_result = set_memory_value_080040d6(value_1,value_2,value_2,0,value_3);\n  if ((set_memory_result == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "set_memory_value_and_save_error_080056d4",
                "param_1": "result",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "iVar1": "set_memory_result"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "update_return_value_080056f8",
            "code": "\nvoid updateReturnValue_080056f8(int *outputPointer,undefined4 inputValue)\n\n{\n  int returnValueCheck;\n  \n  DAT_20000674 = 0;\n  returnValueCheck = check_return_value_080040e0(inputValue);\n  if ((returnValueCheck == -1) && (DAT_20000674 != 0)) {\n    *outputPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "update_return_value_080056f8",
                "param_1": "outputPointer",
                "param_2": "inputValue",
                "iVar1": "returnValueCheck"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "check_and_assign_08005718",
            "code": "\nvoid checkAndAssign_08005718(int *resultPointer,undefined4 paramA,undefined4 paramB,undefined4 paramC)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = get_zero_080040e4(paramA,paramB,paramC,paramC,paramC);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *resultPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "check_and_assign_08005718",
                "param_1": "resultPointer",
                "param_2": "paramA",
                "param_3": "paramB",
                "param_4": "paramC",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "initialize_application_0800573c",
            "code": "\nvoid initializeApplication_0800573c(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_20000674 = 0;\n  initResult = initialize_application_080040e8(arg1,arg2,arg3,arg3,arg3);\n  if ((initResult == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "initialize_application_0800573c",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_and_execute_08005760",
            "code": "\nvoid initializeAndExecute_08005760(void)\n\n{\n  code *functionPointer;\n  \n  functionPointer = initializeAndExecute_08005760;\n  process_and_run_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_and_execute_08005760",
                "UNRECOVERED_JUMPTABLE": "functionPointer"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 118156,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_0800066c",
            "FUN_08000728",
            "FUN_080008cc",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_080025e0",
            "FUN_08002848",
            "FUN_080028d4",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_080033c8",
            "FUN_080034da",
            "FUN_08003506",
            "FUN_0800352e",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_0800387c",
            "FUN_08003f00",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_08004544",
            "FUN_08004640",
            "FUN_08004678",
            "FUN_08004844",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004cb0",
            "thunk_FUN_0800410c"
        ],
        [
            "FUN_080002d0",
            "FUN_080005e4",
            "FUN_08000682",
            "FUN_080007f0",
            "FUN_08000d98",
            "FUN_08000f56",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_08002864",
            "FUN_080028f0",
            "FUN_08002d0c",
            "FUN_0800340c",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034f4",
            "FUN_0800351e",
            "FUN_0800354a",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003eac",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004560",
            "FUN_080047fe",
            "FUN_08004d9c",
            "FUN_0800500c",
            "FUN_0800532c",
            "FUN_080055d0",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_08001ab0",
            "FUN_080023b4",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_080029c8",
            "FUN_08002dd0",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_080042e8",
            "FUN_0800447c",
            "FUN_080046b4",
            "FUN_08004978",
            "FUN_080051ac",
            "FUN_080054b4",
            "FUN_08005608",
            "FUN_08005662"
        ],
        [
            "FUN_080006b4",
            "FUN_0800076c",
            "FUN_08001bfc",
            "FUN_08001e68",
            "FUN_08002488",
            "FUN_08002d72",
            "FUN_08002ffc",
            "FUN_080033d8",
            "FUN_08003414",
            "FUN_0800377c",
            "FUN_080042ac",
            "FUN_080044d8",
            "FUN_08005374",
            "FUN_080054fc"
        ],
        [
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000c8c",
            "FUN_08001d00",
            "FUN_08004110"
        ],
        [
            "FUN_08000b54",
            "FUN_080034ce"
        ],
        [
            "FUN_08000c64",
            "FUN_08000d8e"
        ],
        [
            "FUN_08004648"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_080050d0",
            "FUN_080052cc",
            "FUN_08005400"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_08004a84"
        ],
        [
            "FUN_08004860",
            "FUN_08004fdc"
        ],
        [
            "FUN_08003978",
            "FUN_08004808"
        ],
        [
            "FUN_08003cc8",
            "FUN_08004388"
        ],
        [
            "FUN_08000600",
            "FUN_08003d18"
        ],
        [
            "FUN_08000c4c",
            "FUN_080040ec"
        ],
        [
            "FUN_08004658",
            "FUN_0800562a"
        ]
    ],
    "locked_functions": []
}