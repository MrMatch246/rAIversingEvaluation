{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_if_empty_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlagIfEmpty_08000110(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_if_empty_08000110",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_params_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateParams_08000134(undefined4 firstParam,undefined4 secondParam)\n\n{\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_params_08000134",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "get_string_length_08000150",
            "code": "\nchar * get_string_length_08000150(char *input_string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = input_string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000150": "get_string_length_08000150",
                "param_1": "input_string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_bitwise_xor_08000168",
            "code": "\nulonglong calculate_bitwise_xor_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int right_shift_count1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int right_shift_count2;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp4 = input4 ^ 0x80000000;\n  uVar9 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (uVar9 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  right_shift_count2 = (int)uVar9 >> 0x15;\n  if (!condition2) {\n    condition2 = right_shift_count2 == -1;\n  }\n  right_shift_count1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = right_shift_count1 == -1;\n  }\n  if (condition2) {\n    if (right_shift_count2 == -1 || right_shift_count1 == -1) {\n      uVar9 = temp4;\n      uVar11 = input3;\n      if (right_shift_count2 == -1) {\n        uVar9 = input2;\n        uVar11 = input1;\n      }\n      if (right_shift_count2 != -1 || right_shift_count1 != -1) {\n        input3 = uVar11;\n        temp4 = uVar9;\n      }\n      condition2 = (uVar11 | uVar9 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = uVar9 == temp4;\n      }\n      if (!condition2) {\n        uVar9 = uVar9 | 0x80000;\n      }\n      return CONCAT44(uVar9,uVar11);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((uVar9 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (uVar9 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (uVar9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  uVar9 = uVar9 >> 0x15;\n  input4 = input4 >> 0x15;\n  uVar11 = input4 - uVar9;\n  condition2 = uVar11 != 0;\n  if (input4 < uVar9) {\n    uVar11 = -uVar11;\n  }\n  uVar10 = input1;\n  temp5 = input2;\n  if (condition2 && uVar9 <= input4) {\n    uVar9 = uVar9 + uVar11;\n    uVar10 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < uVar11) {\n    return CONCAT44(temp5,uVar10);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    condition2 = uVar10 != 0;\n    uVar10 = -uVar10;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)condition2;\n  }\n  if (uVar9 == uVar11) {\n    temp5 = temp5 ^ 0x100000;\n    if (uVar9 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      uVar9 = 1;\n    }\n    else {\n      uVar11 = uVar11 - 1;\n    }\n  }\n  temp4 = -uVar11 + 0x20;\n  if ((int)uVar11 < 0x21) {\n    uVar12 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (uVar11 & 0xff);\n    temp1 = uVar10 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(uVar10,input3) + ((int)temp5 >> (uVar11 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    uVar12 = temp5 << (-uVar11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      uVar12 = uVar12 | 2;\n    }\n    temp5 = (int)temp5 >> (uVar11 - 0x20 & 0xff);\n    temp4 = uVar10 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(uVar10,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  uVar11 = temp2;\n  if ((int)temp2 < 0) {\n    condition2 = uVar12 == 0;\n    uVar12 = -uVar12;\n    uVar11 = -temp4;\n    temp4 = -(uint)!condition2 - temp4;\n    uVar11 = -(uint)(condition2 <= uVar11) - temp2;\n  }\n  if (0xfffff < uVar11) {\n    uVar10 = uVar9 - 1;\n    if (0x1fffff < uVar11) {\n      uVar10 = uVar11 & 1;\n      uVar11 = uVar11 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(uVar10 != 0) << 0x1f | temp4 >> 1;\n      uVar12 = (uint)(carry & 1) << 0x1f | uVar12 >> 1;\n      uVar10 = uVar9;\n      if (0xffbfffff < uVar9 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition2 = 0x7fffffff < uVar12;\n    if (uVar12 == 0x80000000) {\n      condition2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(uVar11 + uVar10 * 0x100000 + (uint)CARRY4(temp4,(uint)condition2) | input2,\n                    temp4 + condition2);\n  }\n  condition1 = (uVar12 & 0x80000000) != 0;\n  uVar12 = uVar12 << 1;\n  uVar10 = temp4 * 2;\n  condition2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)condition1;\n  uVar11 = uVar11 * 2 + (uint)(condition2 || CARRY4(uVar10,(uint)condition1));\n  uVar10 = uVar9 - 2;\n  if ((uVar11 & 0x100000) != 0) goto LAB_08000278;\n  temp5 = temp4;\n  uVar9 = uVar11;\n  if (uVar11 == 0) {\n    temp5 = 0;\n    uVar9 = temp4;\n  }\n  right_shift_count2 = LZCOUNT(uVar9);\n  if (uVar11 == 0) {\n    right_shift_count2 = right_shift_count2 + 0x20;\n  }\n  uVar11 = right_shift_count2 - 0xb;\n  condition3 = SBORROW4(uVar11,0x20);\n  temp4 = right_shift_count2 - 0x2b;\n  condition2 = (int)temp4 < 0;\n  condition1 = temp4 == 0;\n  if ((int)uVar11 < 0x20) {\n    condition3 = SCARRY4(temp4,0xc);\n    right_shift_count2 = right_shift_count2 + -0x1f;\n    condition2 = right_shift_count2 < 0;\n    condition1 = right_shift_count2 == 0;\n    temp4 = uVar11;\n    if (!condition1 && condition2 == condition3) {\n      temp5 = uVar9 << (uVar11 & 0xff);\n      uVar9 = uVar9 >> (0xcU - right_shift_count2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    uVar12 = 0x20 - temp4;\n  }\n  uVar9 = uVar9 << (temp4 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    uVar9 = uVar9 | temp5 >> (uVar12 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)uVar11 <= (int)uVar10) {\n    return CONCAT44(uVar9 + (uVar10 - uVar11) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(uVar10 - uVar11);\n  if ((int)temp4 < 0x1f) {\n    right_shift_count2 = temp4 - 0x13;\n    if (right_shift_count2 != 0 && right_shift_count2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - right_shift_count2) & 0xff) | uVar9 << (0xcU - right_shift_count2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | uVar9 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | uVar9 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,uVar9 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_bitwise_xor_08000168",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "right_shift_count1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "right_shift_count2",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_sum_0800016c",
            "code": "\nulonglong calculate_sum_0800016c(uint value1,uint value2,uint value3,uint value4)\n\n{\n  int shifted_value1;\n  byte carry1;\n  uint sum1;\n  uint carry2;\n  uint sum2;\n  int shifted_value2;\n  uint shifted_value1_unsigned;\n  uint shifted_value2_unsigned;\n  uint shifted_sum1_unsigned;\n  uint shifted_sum2_unsigned;\n  uint carry3;\n  uint sum3;\n  bool isEqual1;\n  bool isEqual2;\n  bool carry4;\n  \n  shifted_value1_unsigned = value2 << 1;\n  shifted_sum1_unsigned = value4 << 1;\n  isEqual1 = ((value2 ^ value4) & 0x7fffffff) == 0;\n  isEqual2 = isEqual1 && value1 == value3;\n  if (!isEqual1 || value1 != value3) {\n    isEqual2 = (shifted_value1_unsigned | value1) == 0;\n  }\n  if (!isEqual2) {\n    isEqual2 = (shifted_sum1_unsigned | value3) == 0;\n  }\n  shifted_value2 = (int)shifted_value1_unsigned >> 0x15;\n  if (!isEqual2) {\n    isEqual2 = shifted_value2 == -1;\n  }\n  shifted_value1 = (int)shifted_sum1_unsigned >> 0x15;\n  if (!isEqual2) {\n    isEqual2 = shifted_value1 == -1;\n  }\n  if (isEqual2) {\n    if (shifted_value2 == -1 || shifted_value1 == -1) {\n      shifted_sum1_unsigned = value4;\n      shifted_value1_unsigned = value3;\n      if (shifted_value2 == -1) {\n        shifted_sum1_unsigned = value2;\n        shifted_value1_unsigned = value1;\n      }\n      if (shifted_value2 != -1 || shifted_value1 != -1) {\n        value3 = shifted_value1_unsigned;\n        value4 = shifted_sum1_unsigned;\n      }\n      isEqual2 = (shifted_value1_unsigned | shifted_sum1_unsigned << 0xc) == 0;\n      if (isEqual2) {\n        isEqual2 = (value3 | value4 << 0xc) == 0;\n      }\n      if (isEqual2) {\n        isEqual2 = shifted_sum1_unsigned == value4;\n      }\n      if (!isEqual2) {\n        shifted_sum1_unsigned = shifted_sum1_unsigned | 0x80000;\n      }\n      return CONCAT44(shifted_sum1_unsigned,shifted_value1_unsigned);\n    }\n    if (((value2 ^ value4) & 0x7fffffff) != 0 || value1 != value3) {\n      if ((shifted_value1_unsigned | value1) == 0) {\n        value1 = value3;\n        value2 = value4;\n      }\n      return CONCAT44(value2,value1);\n    }\n    if (value2 != value4) {\n      return 0;\n    }\n    if (shifted_value1_unsigned >> 0x15 == 0) {\n      isEqual2 = (value1 & 0x80000000) != 0;\n      shifted_sum1_unsigned = value2 * 2 + (uint)isEqual2;\n      if (CARRY4(value2,value2) || CARRY4(value2 * 2,(uint)isEqual2)) {\n        shifted_sum1_unsigned = shifted_sum1_unsigned | 0x80000000;\n      }\n      return CONCAT44(shifted_sum1_unsigned,value1 << 1);\n    }\n    if (shifted_value1_unsigned < 0xffc00000) {\n      return CONCAT44(value2 + 0x100000,value1);\n    }\n    value2 = value2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(value2 | 0x7ff00000) << 0x20;\n  }\n  shifted_value1_unsigned = shifted_value1_unsigned >> 0x15;\n  shifted_sum1_unsigned = shifted_sum1_unsigned >> 0x15;\n  shifted_sum2_unsigned = shifted_sum1_unsigned - shifted_value1_unsigned;\n  isEqual2 = shifted_sum2_unsigned != 0;\n  if (shifted_sum1_unsigned < shifted_value1_unsigned) {\n    shifted_sum2_unsigned = -shifted_sum2_unsigned;\n  }\n  shifted_value2_unsigned = value1;\n  sum2 = value2;\n  if (isEqual2 && shifted_value1_unsigned <= shifted_sum1_unsigned) {\n    shifted_value1_unsigned = shifted_value1_unsigned + shifted_sum2_unsigned;\n    shifted_value2_unsigned = value3;\n    sum2 = value4;\n    value3 = value1;\n    value4 = value2;\n  }\n  if (0x36 < shifted_sum2_unsigned) {\n    return CONCAT44(sum2,shifted_value2_unsigned);\n  }\n  shifted_sum1_unsigned = sum2 & 0xfffff | 0x100000;\n  if ((sum2 & 0x80000000) != 0) {\n    isEqual2 = shifted_value2_unsigned != 0;\n    shifted_value2_unsigned = -shifted_value2_unsigned;\n    shifted_sum1_unsigned = -shifted_sum1_unsigned - (uint)isEqual2;\n  }\n  sum2 = value4 & 0xfffff | 0x100000;\n  if ((value4 & 0x80000000) != 0) {\n    isEqual2 = value3 != 0;\n    value3 = -value3;\n    sum2 = -sum2 - (uint)isEqual2;\n  }\n  if (shifted_value1_unsigned == shifted_sum2_unsigned) {\n    sum2 = sum2 ^ 0x100000;\n    if (shifted_value1_unsigned == 0) {\n      shifted_sum1_unsigned = shifted_sum1_unsigned ^ 0x100000;\n      shifted_value1_unsigned = 1;\n    }\n    else {\n      shifted_sum2_unsigned = shifted_sum2_unsigned - 1;\n    }\n  }\n  sum3 = -shifted_sum2_unsigned + 0x20;\n  if ((int)shifted_sum2_unsigned < 0x21) {\n    carry3 = value3 << (sum3 & 0xff);\n    value3 = value3 >> (shifted_sum2_unsigned & 0xff);\n    sum1 = shifted_value2_unsigned + value3;\n    carry2 = sum2 << (sum3 & 0xff);\n    sum3 = sum1 + carry2;\n    shifted_sum1_unsigned = shifted_sum1_unsigned + CARRY4(shifted_value2_unsigned,value3) + ((int)sum2 >> (shifted_sum2_unsigned & 0xff)) +\n            (uint)CARRY4(sum1,carry2);\n  }\n  else {\n    carry3 = sum2 << (-shifted_sum2_unsigned + 0x40 & 0xff);\n    if (value3 != 0) {\n      carry3 = carry3 | 2;\n    }\n    sum2 = (int)sum2 >> (shifted_sum2_unsigned - 0x20 & 0xff);\n    sum3 = shifted_value2_unsigned + sum2;\n    shifted_sum1_unsigned = shifted_sum1_unsigned + ((int)sum2 >> 0x1f) + (uint)CARRY4(shifted_value2_unsigned,sum2);\n  }\n  value2 = shifted_sum1_unsigned & 0x80000000;\n  shifted_sum2_unsigned = shifted_sum1_unsigned;\n  if ((int)shifted_sum1_unsigned < 0) {\n    isEqual2 = carry3 == 0;\n    carry3 = -carry3;\n    shifted_sum2_unsigned = -sum3;\n    sum3 = -(uint)!isEqual2 - sum3;\n    shifted_sum2_unsigned = -(uint)(isEqual2 <= shifted_sum2_unsigned) - shifted_sum1_unsigned;\n  }\n  if (0xfffff < shifted_sum2_unsigned) {\n    shifted_value2_unsigned = shifted_value1_unsigned - 1;\n    if (0x1fffff < shifted_sum2_unsigned) {\n      shifted_sum1_unsigned = shifted_sum2_unsigned & 1;\n      shifted_sum2_unsigned = shifted_sum2_unsigned >> 1;\n      carry1 = (byte)sum3;\n      sum3 = (uint)(shifted_sum1_unsigned != 0) << 0x1f | sum3 >> 1;\n      carry3 = (uint)(carry1 & 1) << 0x1f | carry3 >> 1;\n      shifted_value2_unsigned = shifted_value1_unsigned;\n      if (0xffbfffff < shifted_value1_unsigned * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    isEqual2 = 0x7fffffff < carry3;\n    if (carry3 == 0x80000000) {\n      isEqual2 = (sum3 & 1) != 0;\n    }\n    return CONCAT44(shifted_sum2_unsigned + shifted_value2_unsigned * 0x100000 + (uint)CARRY4(sum3,(uint)isEqual2) | value2,\n                    sum3 + isEqual2);\n  }\n  isEqual1 = (carry3 & 0x80000000) != 0;\n  carry3 = carry3 << 1;\n  shifted_value2_unsigned = sum3 * 2;\n  isEqual2 = CARRY4(sum3,sum3);\n  sum3 = sum3 * 2 + (uint)isEqual1;\n  shifted_sum2_unsigned = shifted_sum2_unsigned * 2 + (uint)(isEqual2 || CARRY4(shifted_value2_unsigned,(uint)isEqual1));\n  shifted_value2_unsigned = shifted_value1_unsigned - 2;\n  if ((shifted_sum2_unsigned & 0x100000) != 0) goto LAB_08000278;\n  sum2 = sum3;\n  shifted_value1_unsigned = shifted_sum2_unsigned;\n  if (shifted_sum2_unsigned == 0) {\n    sum2 = 0;\n    shifted_value1_unsigned = sum3;\n  }\n  shifted_value2 = LZCOUNT(shifted_value1_unsigned);\n  if (shifted_sum2_unsigned == 0) {\n    shifted_value2 = shifted_value2 + 0x20;\n  }\n  sum3 = shifted_value2 - 0xb;\n  carry4 = SBORROW4(sum3,0x20);\n  shifted_sum2_unsigned = shifted_value2 - 0x2b;\n  isEqual2 = (int)shifted_sum2_unsigned < 0;\n  isEqual1 = shifted_sum2_unsigned == 0;\n  if ((int)sum3 < 0x20) {\n    carry4 = SCARRY4(shifted_sum2_unsigned,0xc);\n    shifted_value2 = shifted_value2 + -0x1f;\n    isEqual2 = shifted_value2 < 0;\n    isEqual1 = shifted_value2 == 0;\n    shifted_sum2_unsigned = sum3;\n    if (!isEqual1 && isEqual2 == carry4) {\n      sum2 = shifted_value1_unsigned << (sum3 & 0xff);\n      shifted_value1_unsigned = shifted_value1_unsigned >> (0xcU - shifted_value2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isEqual1 || isEqual2 != carry4) {\n    carry3 = 0x20 - shifted_sum2_unsigned;\n  }\n  shifted_value1_unsigned = shifted_value1_unsigned << (shifted_sum2_unsigned & 0xff);\n  if (isEqual1 || isEqual2 != carry4) {\n    shifted_value1_unsigned = shifted_value1_unsigned | sum2 >> (carry3 & 0xff);\n  }\n  if (isEqual1 || isEqual2 != carry4) {\n    sum2 = sum2 << (shifted_sum2_unsigned & 0xff);\n  }\nLAB_080002f0:\n  if ((int)sum3 <= (int)shifted_value2_unsigned) {\n    return CONCAT44(shifted_value1_unsigned + (shifted_value2_unsigned - sum3) * 0x100000 | value2,sum2);\n  }\n  shifted_sum2_unsigned = ~(shifted_value2_unsigned - sum3);\n  if ((int)shifted_sum2_unsigned < 0x1f) {\n    shifted_value2 = shifted_sum2_unsigned - 0x13;\n    if (shifted_value2 != 0 && shifted_value2 < 0 == SCARRY4(shifted_sum2_unsigned - 0x1f,0xc)) {\n      return CONCAT44(shifted_sum1_unsigned,sum2 >> (0x20 - (0xcU - shifted_value2) & 0xff) | shifted_value1_unsigned << (0xcU - shifted_value2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_sum2_unsigned = shifted_sum2_unsigned + 1;\n    return CONCAT44(value2 | shifted_value1_unsigned >> (shifted_sum2_unsigned & 0xff),\n                    sum2 >> (shifted_sum2_unsigned & 0xff) | shifted_value1_unsigned << (0x20 - shifted_sum2_unsigned & 0xff));\n  }\n  return CONCAT44(shifted_sum1_unsigned,shifted_value1_unsigned >> (shifted_sum2_unsigned - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_sum_0800016c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "shifted_value1",
                "bVar2": "carry1",
                "uVar3": "sum1",
                "uVar4": "carry2",
                "uVar5": "sum2",
                "iVar6": "shifted_value2",
                "uVar7": "shifted_value1_unsigned",
                "uVar8": "shifted_value2_unsigned",
                "uVar9": "shifted_sum1_unsigned",
                "uVar10": "shifted_sum2_unsigned",
                "uVar11": "carry3",
                "uVar12": "sum3",
                "bVar13": "isEqual1",
                "bVar14": "isEqual2",
                "bVar15": "carry4"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "shift_and_concat_08000404",
            "code": "\nulonglong shiftAndConcat_08000404(uint input)\n\n{\n  uint countShiftedBits;\n  uint absInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint shiftedBits;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absInput = input;\n  if ((int)signBit < 0) {\n    absInput = -input;\n  }\n  countShiftedBits = 0;\n  leadingZeros = LZCOUNT(absInput);\n  shiftedBits = leadingZeros + 0x15;\n  isCarry = SBORROW4(shiftedBits,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (shiftedBits < 0x20) {\n    isCarry = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = shiftedBits;\n    if (!isZero && isCarry == false) {\n      countShiftedBits = absInput << shiftedBits;\n      absInput = absInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absInput = absInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != isCarry) {\n    absInput = absInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    countShiftedBits = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (shiftedBits < 0x433) {\n    return CONCAT44(absInput + (0x432 - shiftedBits) * 0x100000 | signBit,countShiftedBits);\n  }\n  shiftAmount = ~(0x432 - shiftedBits);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absInput >> (shiftAmount & 0xff),\n                    countShiftedBits >> (shiftAmount & 0xff) | absInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,countShiftedBits >> (0x20 - (0xcU - leadingZeros) & 0xff) | absInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "shift_and_concat_08000404",
                "param_1": "input",
                "uVar1": "countShiftedBits",
                "uVar2": "absInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedBits",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isCarry"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "compute_value_08000428",
            "code": "\nulonglong compute_value_08000428(uint input,undefined4 unused_param,undefined4 unused_param_2,uint condition)\n\n{\n  uint flag;\n  uint temp_var_1;\n  uint result;\n  uint shifted_input;\n  uint shifted_input_2;\n  int count;\n  uint temp_var_2;\n  uint constant;\n  bool check_1;\n  bool check_2;\n  bool check_3;\n  \n  shifted_input_2 = input << 1;\n  check_2 = shifted_input_2 == 0;\n  flag = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)shifted_input_2 >> 3) >> 1;\n  result = flag | shifted_input;\n  input = input << 0x1d;\n  if (!check_2) {\n    condition = shifted_input_2 & 0xff000000;\n    check_2 = condition == 0;\n  }\n  if (!check_2) {\n    check_2 = condition == 0xff000000;\n  }\n  if (!check_2) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if (shifted_input_2 == 0 || condition == 0xff000000) {\n    return CONCAT44(result,input);\n  }\n  temp_var_1 = input;\n  shifted_input_2 = shifted_input;\n  if (shifted_input == 0) {\n    temp_var_1 = 0;\n    shifted_input_2 = input;\n  }\n  count = LZCOUNT(shifted_input_2);\n  if (shifted_input == 0) {\n    count = count + 0x20;\n  }\n  temp_var_2 = count - 0xb;\n  check_3 = SBORROW4(temp_var_2,0x20);\n  shifted_input = count - 0x2b;\n  check_2 = (int)shifted_input < 0;\n  check_1 = shifted_input == 0;\n  if ((int)temp_var_2 < 0x20) {\n    check_3 = SCARRY4(shifted_input,0xc);\n    count = count + -0x1f;\n    check_2 = count < 0;\n    check_1 = count == 0;\n    shifted_input = temp_var_2;\n    if (!check_1 && check_2 == check_3) {\n      temp_var_1 = shifted_input_2 << (temp_var_2 & 0xff);\n      shifted_input_2 = shifted_input_2 >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (check_1 || check_2 != check_3) {\n    constant = 0x20 - shifted_input;\n  }\n  shifted_input_2 = shifted_input_2 << (shifted_input & 0xff);\n  if (check_1 || check_2 != check_3) {\n    shifted_input_2 = shifted_input_2 | temp_var_1 >> (constant & 0xff);\n  }\n  if (check_1 || check_2 != check_3) {\n    temp_var_1 = temp_var_1 << (shifted_input & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp_var_2 < 0x381) {\n    return CONCAT44(shifted_input_2 + (0x380 - temp_var_2) * 0x100000 | flag,temp_var_1);\n  }\n  shifted_input = ~(0x380 - temp_var_2);\n  if ((int)shifted_input < 0x1f) {\n    count = shifted_input - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(shifted_input - 0x1f,0xc)) {\n      return CONCAT44(result,temp_var_1 >> (0x20 - (0xcU - count) & 0xff) | shifted_input_2 << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_input = shifted_input + 1;\n    return CONCAT44(flag | shifted_input_2 >> (shifted_input & 0xff),\n                    temp_var_1 >> (shifted_input & 0xff) | shifted_input_2 << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,shifted_input_2 >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "compute_value_08000428",
                "param_1": "input",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "condition",
                "uVar1": "flag",
                "uVar2": "temp_var_1",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "shifted_input_2",
                "iVar6": "count",
                "uVar7": "temp_var_2",
                "in_r12": "constant",
                "bVar8": "check_1",
                "bVar9": "check_2",
                "bVar10": "check_3"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_result_080004d0",
            "code": "\nulonglong calculate_result_080004d0(undefined4 input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  ulonglong result_var1;\n  longlong result_var2;\n  uint temp_var1;\n  uint temp_var2;\n  int temp_var3;\n  uint temp_var4;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input_params;\n  \n  combined_input_params = CONCAT44(input_param2,input_param1);\n  temp_var6 = 0x7ff;\n  temp_var2 = input_param2 >> 0x14 & 0x7ff;\n  flag1 = temp_var2 == 0;\n  if (!flag1) {\n    temp_var5 = input_param4 >> 0x14 & 0x7ff;\n    flag1 = temp_var5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp_var2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp_var5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input_params = calculate_bitwise_080006ac();\n  }\n  temp_var1 = (uint)(combined_input_params >> 0x20);\n  temp_var3 = temp_var2 + temp_var5;\n  temp_var2 = temp_var1 ^ input_param4;\n  temp_var1 = temp_var1 & ~(temp_var6 << 0x15);\n  input_param4 = input_param4 & ~(temp_var6 << 0x15);\n  flag1 = ((uint)combined_input_params | temp_var1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input_param3 | input_param4 << 0xc) == 0;\n  }\n  temp_var1 = temp_var1 | 0x100000;\n  input_param4 = input_param4 | 0x100000;\n  if (flag1) {\n    input_param3 = (uint)combined_input_params | input_param3;\n    input_param4 = (temp_var2 & 0x80000000 | temp_var1) ^ input_param4;\n    temp_var2 = temp_var6 >> 1;\n    flag3 = SBORROW4(temp_var3,temp_var2);\n    temp_var4 = temp_var3 - temp_var2;\n    flag1 = temp_var4 == 0;\n    temp_var1 = temp_var4;\n    if (!flag1 && (int)temp_var2 <= temp_var3) {\n      flag3 = SBORROW4(temp_var6,temp_var4);\n      temp_var1 = temp_var6 - temp_var4;\n      flag1 = temp_var6 == temp_var4;\n    }\n    if (!flag1 && (int)temp_var1 < 0 == flag3) {\n      input_param4 = input_param4 | temp_var4 * 0x100000;\n    }\n    if (!flag1 && (int)temp_var1 < 0 == flag3) {\n      return CONCAT44(input_param4,input_param3);\n    }\n    input_param4 = input_param4 | 0x100000;\n    temp_var6 = 0;\n    flag3 = SBORROW4(temp_var4,1);\n    temp_var4 = temp_var4 - 1;\n    flag1 = temp_var4 == 0;\n    temp_var2 = temp_var4;\n  }\n  else {\n    result_var1 = (combined_input_params & 0xffffffff) * (ulonglong)input_param3;\n    combined_input_params = (combined_input_params & 0xffffffff) * (ulonglong)input_param4 +\n             (ulonglong)temp_var1 * (ulonglong)input_param3 + (result_var1 >> 0x20);\n    temp_var7 = (uint)combined_input_params;\n    result_var2 = (ulonglong)temp_var1 * (ulonglong)input_param4 + (combined_input_params >> 0x20);\n    temp_var6 = (uint)result_var2;\n    temp_var1 = (uint)((ulonglong)result_var2 >> 0x20);\n    if ((int)result_var1 != 0) {\n      temp_var7 = temp_var7 | 1;\n    }\n    temp_var4 = (temp_var3 + -0x3ff) - (uint)(temp_var1 < 0x200);\n    if (temp_var1 < 0x200) {\n      flag1 = (temp_var7 & 0x80000000) != 0;\n      temp_var7 = temp_var7 << 1;\n      result_var2 = CONCAT44(temp_var1 * 2 + (uint)(CARRY4(temp_var6,temp_var6) || CARRY4(temp_var6 * 2,(uint)flag1)),\n                       temp_var6 * 2 + (uint)flag1);\n    }\n    input_param4 = temp_var2 & 0x80000000 | (int)((ulonglong)result_var2 >> 0x20) << 0xb | (uint)result_var2 >> 0x15;\n    input_param3 = (uint)result_var2 << 0xb | temp_var7 >> 0x15;\n    temp_var6 = temp_var7 * 0x800;\n    flag2 = 0xfc < temp_var4;\n    flag3 = SBORROW4(temp_var4,0xfd);\n    temp_var1 = temp_var4 - 0xfd;\n    flag1 = temp_var1 == 0;\n    temp_var2 = temp_var1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp_var1;\n      flag3 = SBORROW4(temp_var1,0x700);\n      temp_var2 = temp_var4 - 0x7fd;\n      flag1 = temp_var1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp_var6;\n      if (temp_var6 == 0x80000000) {\n        flag1 = (temp_var7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param4 + temp_var4 * 0x100000 + (uint)CARRY4(input_param3,(uint)flag1),input_param3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp_var2 < 0 == flag3) {\n    return (ulonglong)(input_param4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp_var4,0x36);\n  flag1 = (int)(temp_var4 + 0x36) < 0;\n  flag3 = temp_var4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input_param3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input_param4 = input_param4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input_param4,input_param3);\n  }\n  temp_var2 = -temp_var4;\n  temp_var1 = temp_var2 - 0x20;\n  if (0x1f < (int)temp_var2) {\n    temp_var4 = input_param3 >> (temp_var1 & 0xff) | input_param4 << (0x20 - temp_var1 & 0xff);\n    temp_var2 = (input_param4 >> (temp_var1 & 0xff) & ~((input_param4 & 0x80000000) >> (temp_var1 & 0xff))) -\n            ((int)temp_var4 >> 0x1f);\n    if ((temp_var6 | input_param3 << (0x20 - temp_var1 & 0xff) | temp_var4 << 1) == 0) {\n      temp_var2 = temp_var2 & ~(temp_var4 >> 0x1f);\n    }\n    return CONCAT44(input_param4,temp_var2) & 0x80000000ffffffff;\n  }\n  temp_var3 = temp_var2 - 0x14;\n  if (temp_var3 == 0 || temp_var3 < 0 != SCARRY4(temp_var1,0xc)) {\n    temp_var7 = input_param3 << (temp_var4 + 0x20 & 0xff);\n    temp_var1 = input_param3 >> (temp_var2 & 0xff) | input_param4 << (temp_var4 + 0x20 & 0xff);\n    temp_var4 = temp_var1 + -((int)temp_var7 >> 0x1f);\n    if ((temp_var6 | temp_var7 << 1) == 0) {\n      temp_var4 = temp_var4 & ~(temp_var7 >> 0x1f);\n    }\n    return CONCAT44((input_param4 & 0x80000000) +\n                    ((input_param4 & 0x7fffffff) >> (temp_var2 & 0xff)) +\n                    (uint)CARRY4(temp_var1,-((int)temp_var7 >> 0x1f)),temp_var4);\n  }\n  temp_var2 = 0xc - temp_var3;\n  temp_var4 = input_param3 << (temp_var2 & 0xff);\n  temp_var2 = input_param3 >> (0x20 - temp_var2 & 0xff) | input_param4 << (temp_var2 & 0xff);\n  temp_var1 = temp_var2 + -((int)temp_var4 >> 0x1f);\n  if ((temp_var6 | temp_var4 << 1) == 0) {\n    temp_var1 = temp_var1 & ~(temp_var4 >> 0x1f);\n  }\n  return CONCAT44((input_param4 & 0x80000000) + (uint)CARRY4(temp_var2,-((int)temp_var4 >> 0x1f)),temp_var1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_result_080004d0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "result_var1",
                "lVar2": "result_var2",
                "uVar3": "temp_var1",
                "uVar4": "temp_var2",
                "iVar5": "temp_var3",
                "uVar6": "temp_var4",
                "unaff_r5": "temp_var5",
                "uVar7": "temp_var6",
                "uVar8": "temp_var7",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combined_input_params"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_bitwise_080006ac",
            "code": "\nulonglong calculate_bitwise_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint max_bit;\n  bool check_1;\n  \n  bit_3 = max_bit & input_4 >> 0x14;\n  if (bit_2 != max_bit && bit_3 != max_bit) {\n    check_1 = (input_1 | input_2 << 1) == 0;\n    if (!check_1) {\n      check_1 = (input_3 | input_4 << 1) == 0;\n    }\n    if (check_1) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input_2 & 0x80000000;\n      do {\n        bit_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit_4;\n      if (bit_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  check_1 = (input_1 | input_2 << 1) == 0;\n  if (check_1) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!check_1) {\n    check_1 = (input_3 | input_4 << 1) == 0;\n  }\n  bit_4 = input_2;\n  if (((!check_1) && ((bit_2 != max_bit || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit_3 != max_bit || (input_1 = input_3, bit_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "max_bit",
                "bVar4": "check_1"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_floating_point_08000724",
            "code": "\nulonglong calculateFloatingPoint_08000724(undefined4 sign_and_exponent,uint mantissa_high,uint mantissa_low,uint control_bits)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint exponent;\n  uint unaff_r5;\n  uint temp10;\n  uint mantissa_low;\n  uint difference;\n  uint temp13;\n  bool condition1;\n  bool condition2;\n  bool carry;\n  undefined8 result;\n  \n  result = CONCAT44(mantissa_high,sign_and_exponent);\n  temp13 = 0x7ff;\n  temp7 = mantissa_high >> 0x14 & 0x7ff;\n  condition1 = temp7 == 0;\n  if (!condition1) {\n    unaff_r5 = control_bits >> 0x14 & 0x7ff;\n    condition1 = unaff_r5 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp7 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = unaff_r5 == 0x7ff;\n  }\n  if (condition1) {\n    result = reverse_bits_08000892();\n  }\n  exponent = (uint)((ulonglong)result >> 0x20);\n  mantissa_low = (uint)result;\n  difference = temp7 - unaff_r5;\n  if ((mantissa_low | control_bits << 0xc) == 0) {\n    temp7 = (exponent ^ control_bits) & 0x80000000 | exponent & 0xfffff;\n    carry = SCARRY4(difference,temp13 >> 1);\n    exponent = difference + (temp13 >> 1);\n    condition1 = (int)exponent < 0;\n    condition2 = exponent == 0;\n    if (!condition2 && condition1 == carry) {\n      carry = SBORROW4(temp13,exponent);\n      condition1 = (int)(temp13 - exponent) < 0;\n      condition2 = temp13 == exponent;\n    }\n    if (!condition2 && condition1 == carry) {\n      temp7 = temp7 | exponent * 0x100000;\n    }\n    if (!condition2 && condition1 == carry) {\n      return CONCAT44(temp7,mantissa_low);\n    }\n    temp7 = temp7 | 0x100000;\n    temp13 = 0;\n    condition2 = SBORROW4(exponent,1);\n    exponent = exponent - 1;\n    condition1 = exponent == 0;\n    temp3 = exponent;\n  }\n  else {\n    temp3 = (control_bits << 0xc) >> 4 | 0x10000000 | mantissa_low >> 0x18;\n    temp13 = mantissa_low << 8;\n    temp10 = (exponent << 0xc) >> 4 | 0x10000000 | mantissa_low >> 0x18;\n    mantissa_low = mantissa_low * 0x100;\n    temp7 = (exponent ^ control_bits) & 0x80000000;\n    condition1 = temp3 <= temp10;\n    if (temp10 == temp3) {\n      condition1 = temp13 <= mantissa_low;\n    }\n    difference = difference + (uint)condition1;\n    exponent = difference + 0x3fd;\n    if (condition1 == false) {\n      temp3 = temp3 >> 1;\n      temp13 = (uint)((mantissa_low >> 0x18 & 1) != 0) << 0x1f | temp13 >> 1;\n    }\n    difference = mantissa_low - temp13;\n    temp10 = (temp10 - temp3) - (uint)(mantissa_low < temp13);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp13 >> 1;\n    mantissa_low = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      condition1 = temp1 <= difference;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)condition1) {\n        difference = difference - temp1;\n        mantissa_low = mantissa_low | temp3;\n        temp10 = (temp10 - temp4) - (uint)!condition1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      condition2 = temp1 <= difference;\n      condition1 = temp10 - temp5 < (uint)condition2;\n      temp13 = temp10;\n      if (temp5 < temp10 || condition1) {\n        difference = difference - temp1;\n        temp13 = (temp10 - temp5) - (uint)!condition2;\n      }\n      if (temp5 < temp10 || condition1) {\n        mantissa_low = mantissa_low | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      condition2 = temp2 <= difference;\n      condition1 = temp13 - temp10 < (uint)condition2;\n      temp5 = temp13;\n      if (temp10 < temp13 || condition1) {\n        difference = difference - temp2;\n        temp5 = (temp13 - temp10) - (uint)!condition2;\n      }\n      if (temp10 < temp13 || condition1) {\n        mantissa_low = mantissa_low | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      condition2 = temp1 <= difference;\n      condition1 = temp5 - temp6 < (uint)condition2;\n      temp10 = temp5;\n      if (temp6 < temp5 || condition1) {\n        difference = difference - temp1;\n        temp10 = (temp5 - temp6) - (uint)!condition2;\n      }\n      if (temp6 < temp5 || condition1) {\n        mantissa_low = mantissa_low | temp3 >> 3;\n      }\n      temp13 = temp10 | difference;\n      if (temp13 == 0) break;\n      temp10 = temp10 << 4 | difference >> 0x1c;\n      difference = difference << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | mantissa_low;\n        mantissa_low = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | mantissa_low;\n      mantissa_low = 0;\n    }\nLAB_08000842:\n    carry = 0xfc < exponent;\n    condition2 = SBORROW4(exponent,0xfd);\n    temp4 = difference + 0x300;\n    condition1 = temp4 == 0;\n    temp3 = temp4;\n    if (carry && !condition1) {\n      carry = 0x6ff < temp4;\n      condition2 = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      condition1 = temp4 == 0x700;\n    }\n    if (!carry || condition1) {\n      condition1 = temp6 <= temp10;\n      if (temp10 == temp6) {\n        condition1 = temp1 <= difference;\n      }\n      if (temp10 == temp6 && difference == temp1) {\n        condition1 = (mantissa_low & 1) != 0;\n      }\n      return CONCAT44(temp7 + exponent * 0x100000 + (uint)CARRY4(mantissa_low,(uint)condition1),mantissa_low + condition1);\n    }\n  }\n  if (!condition1 && (int)temp3 < 0 == condition2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carry = SCARRY4(exponent,0x36);\n  condition1 = (int)(exponent + 0x36) < 0;\n  condition2 = exponent == 0xffffffca;\n  if (condition2 || condition1 != carry) {\n    mantissa_low = 0;\n  }\n  if (condition2 || condition1 != carry) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (condition2 || condition1 != carry) {\n    return CONCAT44(temp7,mantissa_low);\n  }\n  temp3 = -exponent;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = mantissa_low >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    exponent = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp13 | mantissa_low << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      exponent = exponent & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,exponent) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp10,0xc)) {\n    exponent = 0xc - difference;\n    temp3 = mantissa_low << (exponent & 0xff);\n    mantissa_low = mantissa_low >> (0x20 - exponent & 0xff) | temp7 << (exponent & 0xff);\n    exponent = mantissa_low + -((int)temp3 >> 0x1f);\n    if ((temp13 | temp3 << 1) == 0) {\n      exponent = exponent & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(mantissa_low,-((int)temp3 >> 0x1f)),exponent);\n  }\n  temp10 = mantissa_low << (exponent + 0x20 & 0xff);\n  mantissa_low = mantissa_low >> (temp3 & 0xff) | temp7 << (exponent + 0x20 & 0xff);\n  exponent = mantissa_low + -((int)temp10 >> 0x1f);\n  if ((temp13 | temp10 << 1) == 0) {\n    exponent = exponent & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(mantissa_low,-((int)temp10 >> 0x1f)),exponent);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_floating_point_08000724",
                "param_1": "sign_and_exponent",
                "param_2": "mantissa_high",
                "param_3": "mantissa_low",
                "param_4": "control_bits",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "difference",
                "uVar9": "exponent",
                "uVar10": "temp10",
                "uVar11": "mantissa_low",
                "uVar12": "difference",
                "uVar13": "temp13",
                "bVar14": "condition1",
                "bVar15": "condition2",
                "bVar16": "carry",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "reverse_bits_08000892",
            "code": "\nulonglong reverseBits_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool flag;\n  \n  temp3 = temp5 & input4 >> 0x14;\n  temp4 = input2;\n  if (temp2 != temp5 || temp3 != temp5) {\n    if (temp2 == temp5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp4 = input4, temp3 != temp5)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp3 == temp5) {\n      input1 = input3;\n      temp4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      flag = (input1 | input2 << 1) == 0;\n      if (!flag) {\n        flag = (input3 | input4 << 1) == 0;\n      }\n      if (!flag) {\n        if (temp2 == 0) {\n          temp4 = input2 & 0x80000000;\n          do {\n            temp1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(temp1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp4;\n          if (temp3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "reverse_bits_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "unaff_r4": "temp2",
                "uVar2": "temp3",
                "uVar3": "temp4",
                "in_r12": "temp5",
                "bVar4": "flag"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_parameters_08000904",
            "code": "\nuint check_parameters_08000904(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  uint xor_result;\n  bool are_inputs_zero;\n  bool is_param_4_less_than_or_equal_to_param_2;\n  \n  if (((int)(input_b << 1) >> 0x15 == -1 || (int)(input_d << 1) >> 0x15 == -1) &&\n     ((((int)(input_b << 1) >> 0x15 == -1 && ((input_a | input_b << 0xc) != 0)) ||\n      (((int)(input_d << 1) >> 0x15 == -1 && ((input_c | input_d << 0xc) != 0)))))) {\n    return 1;\n  }\n  are_inputs_zero = (input_a | input_b << 1) == 0;\n  if (are_inputs_zero) {\n    are_inputs_zero = (input_c | input_d << 1) == 0;\n  }\n  if (!are_inputs_zero) {\n    are_inputs_zero = input_b == input_d;\n  }\n  if (are_inputs_zero) {\n    are_inputs_zero = input_a == input_c;\n  }\n  if (!are_inputs_zero) {\n    xor_result = input_b ^ input_d;\n    are_inputs_zero = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      are_inputs_zero = input_b == input_d;\n    }\n    is_param_4_less_than_or_equal_to_param_2 = -1 < (int)xor_result && input_d <= input_b;\n    if (are_inputs_zero) {\n      is_param_4_less_than_or_equal_to_param_2 = input_c <= input_a;\n    }\n    input_d = (int)input_d >> 0x1f;\n    if (!is_param_4_less_than_or_equal_to_param_2) {\n      input_d = ~input_d;\n    }\n    return input_d | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_parameters_08000904",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "uVar1": "xor_result",
                "bVar2": "are_inputs_zero",
                "bVar3": "is_param_4_less_than_or_equal_to_param_2"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "validate_and_process_input_08000980",
            "code": "\nvoid validate_and_process_input_08000980(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  validate_input_08000990(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "validate_and_process_input_08000980",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "validate_input_08000990",
            "code": "\nundefined4 validate_input_08000990(undefined4 input_value)\n\n{\n  check_parameters_08000904();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "validate_input_08000990",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_input_080009a0",
            "code": "\nbool check_input_080009a0(void)\n\n{\n  char input_valid;\n  \n  validate_input();\n  return input_valid != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_input_080009a0",
                "in_ZR": "input_valid",
                "validate_input_08000990": "validate_input"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_input_valid_080009b4",
            "code": "\nbool is_input_valid_080009b4(void)\n\n{\n  char input_character;\n  \n  validate_input_08000990();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_input_valid_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "validate_and_return_result_080009c8",
            "code": "\nbool validate_and_return_result_080009c8(void)\n\n{\n  undefined is_carry_zero;\n  undefined is_zero_result;\n  \n  validate_input_08000990();\n  return !(bool)is_zero_result || (bool)is_carry_zero;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "validate_and_return_result_080009c8",
                "in_ZR": "is_carry_zero",
                "in_CY": "is_zero_result"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "is_input_valid_080009f0",
            "code": "\nbool is_input_valid_080009f0(void)\n\n{\n  char input_char;\n  \n  validate_and_process_input_08000980();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "is_input_valid_080009f0",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_valid_inputs_08000a04",
            "code": "\nundefined4 check_valid_inputs_08000a04(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_valid_inputs_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint input1,uint input2)\n\n{\n  uint result;\n  uint multipliedInput2;\n  uint sum;\n  uint temp;\n  bool isZero;\n  bool isLessThan;\n  \n  multipliedInput2 = input2 * 2;\n  isLessThan = multipliedInput2 < 0x70000000;\n  sum = multipliedInput2 + 0x90000000;\n  result = sum;\n  if (!isLessThan) {\n    temp = multipliedInput2 + 0x8fe00000;\n    result = temp;\n  }\n  isZero = result == 0;\n  if (!isLessThan && sum >= 0x200000) {\n    isZero = temp == 0x1fc00000;\n  }\n  if (((isLessThan || sum < 0x200000) || 0x1fc00000 < temp) || isZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)multipliedInput2 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multipliedInput2 + 0x92e00000) < 0 != SCARRY4(sum,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    multipliedInput2 = 0x18 - (multipliedInput2 + 0x92e00000 >> 0x15);\n    result = input1 >> (multipliedInput2 & 0xff);\n    if (input1 << (0x20 - multipliedInput2 & 0xff) != 0) {\n      result = result | 1;\n    }\n    sum = input2 & 0x1fffff | 0x100000;\n    input1 = result | sum << (0x20 - multipliedInput2 & 0xff);\n    sum = (sum >> (multipliedInput2 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + sum * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "multipliedInput2",
                "uVar3": "sum",
                "in_r12": "temp",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_bitwise_operation_08000ad8",
            "code": "\nuint calculate_bitwise_operation_08000ad8(uint input_1,uint input_2,undefined4 input_3,uint input_4)\n\n{\n  int shifted_value;\n  int shifted_value_2;\n  uint result_1;\n  uint result_2;\n  uint temp_1;\n  uint temp_2;\n  uint difference;\n  bool boolean_flag;\n  \n  result_1 = input_2 ^ 0x80000000;\n  temp_1 = input_1 << 1;\n  boolean_flag = temp_1 == 0;\n  if (!boolean_flag) {\n    input_4 = input_2 << 1;\n    boolean_flag = input_4 == 0;\n  }\n  if (!boolean_flag) {\n    boolean_flag = temp_1 == input_4;\n  }\n  shifted_value = (int)temp_1 >> 0x18;\n  if (!boolean_flag) {\n    boolean_flag = shifted_value == -1;\n  }\n  if (!boolean_flag) {\n    boolean_flag = (int)input_4 >> 0x18 == -1;\n  }\n  if (boolean_flag) {\n    shifted_value_2 = (int)(input_2 << 1) >> 0x18;\n    if (shifted_value == -1 || shifted_value_2 == -1) {\n      temp_1 = result_1;\n      if (shifted_value == -1) {\n        temp_1 = input_1;\n      }\n      if (shifted_value != -1 || shifted_value_2 != -1) {\n        result_1 = temp_1;\n      }\n      boolean_flag = (temp_1 & 0x7fffff) == 0;\n      if (boolean_flag) {\n        boolean_flag = (result_1 & 0x7fffff) == 0;\n      }\n      if (boolean_flag) {\n        boolean_flag = temp_1 == result_1;\n      }\n      if (!boolean_flag) {\n        temp_1 = temp_1 | 0x400000;\n      }\n      return temp_1;\n    }\n    if (((input_1 ^ result_1) & 0x7fffffff) != 0) {\n      if (temp_1 == 0) {\n        input_1 = result_1;\n      }\n      return input_1;\n    }\n    if (input_1 != result_1) {\n      return 0;\n    }\n    if ((temp_1 & 0xff000000) == 0) {\n      result_1 = input_1 << 1;\n      if ((input_1 & 0x80000000) != 0) {\n        result_1 = result_1 | 0x80000000;\n      }\n      return result_1;\n    }\n    if (temp_1 < 0xfe000000) {\n      return input_1 + 0x800000;\n    }\n    input_1 = input_1 & 0x80000000;\nLAB_08000c12:\n    return input_1 | 0x7f800000;\n  }\n  temp_1 = temp_1 >> 0x18;\n  input_4 = input_4 >> 0x18;\n  difference = input_4 - temp_1;\n  boolean_flag = difference != 0;\n  temp_2 = temp_1;\n  if (boolean_flag && temp_1 <= input_4) {\n    temp_2 = temp_1 + difference;\n  }\n  if (boolean_flag && temp_1 <= input_4) {\n    result_1 = result_1 ^ input_1;\n  }\n  if (boolean_flag && temp_1 <= input_4) {\n    input_1 = input_1 ^ result_1;\n  }\n  if (boolean_flag && temp_1 <= input_4) {\n    result_1 = result_1 ^ input_1;\n  }\n  if (input_4 < temp_1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_1;\n  }\n  temp_1 = input_1 & 0xffffff | 0x800000;\n  if ((input_1 & 0x80000000) != 0) {\n    temp_1 = -temp_1;\n  }\n  result_2 = result_1 & 0xffffff | 0x800000;\n  if ((result_1 & 0x80000000) != 0) {\n    result_2 = -result_2;\n  }\n  if (temp_2 == difference) {\n    result_2 = result_2 ^ 0x800000;\n    if (temp_2 == 0) {\n      temp_1 = temp_1 ^ 0x800000;\n      temp_2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp_1 = temp_1 + ((int)result_2 >> (difference & 0xff));\n  result_2 = result_2 << (0x20 - difference & 0xff);\n  input_1 = temp_1 & 0x80000000;\n  if ((int)temp_1 < 0) {\n    boolean_flag = result_2 != 0;\n    result_2 = -result_2;\n    temp_1 = -temp_1 - (uint)boolean_flag;\n  }\n  if (temp_1 < 0x800000) {\n    result_1 = result_2 & 0x80000000;\n    result_2 = result_2 << 1;\n    temp_1 = temp_1 * 2 + (uint)(result_1 != 0);\n    result_1 = temp_2 - 2;\n    if ((temp_1 & 0x800000) == 0) {\n      difference = LZCOUNT(temp_1) - 8;\n      temp_1 = temp_1 << (difference & 0xff);\n      if ((int)result_1 < (int)difference) {\n        temp_1 = temp_1 >> (-(result_1 - difference) & 0xff);\n      }\n      else {\n        temp_1 = temp_1 + (result_1 - difference) * 0x800000;\n      }\n      return temp_1 | input_1;\n    }\n  }\n  else {\n    result_1 = temp_2 - 1;\n    if (0xffffff < temp_1) {\n      result_1 = temp_1 & 1;\n      temp_1 = temp_1 >> 1;\n      result_2 = (uint)(result_1 != 0) << 0x1f | result_2 >> 1;\n      result_1 = temp_2;\n      if (0xfd < temp_2) goto LAB_08000c12;\n    }\n  }\n  temp_1 = temp_1 + result_1 * 0x800000 + (uint)(0x7fffffff < result_2);\n  if (result_2 == 0x80000000) {\n    temp_1 = temp_1 & 0xfffffffe;\n  }\n  return temp_1 | input_1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_bitwise_operation_08000ad8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "shifted_value",
                "iVar2": "shifted_value_2",
                "uVar3": "result_1",
                "uVar4": "result_2",
                "uVar5": "temp_1",
                "uVar6": "temp_2",
                "uVar7": "difference",
                "bVar8": "boolean_flag"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_floating_point_value_08000adc",
            "code": "\nuint calculateFloatingPointValue_08000adc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint mantissa1;\n  uint mantissa2;\n  uint exponent1;\n  uint exponent2;\n  bool isEqualOrZero;\n  \n  mantissa2 = input1 << 1;\n  isEqualOrZero = mantissa2 == 0;\n  if (!isEqualOrZero) {\n    input4 = input2 << 1;\n    isEqualOrZero = input4 == 0;\n  }\n  if (!isEqualOrZero) {\n    isEqualOrZero = mantissa2 == input4;\n  }\n  shiftedInput1 = (int)mantissa2 >> 0x18;\n  if (!isEqualOrZero) {\n    isEqualOrZero = shiftedInput1 == -1;\n  }\n  if (!isEqualOrZero) {\n    isEqualOrZero = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqualOrZero) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      mantissa2 = input2;\n      if (shiftedInput1 == -1) {\n        mantissa2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = mantissa2;\n      }\n      isEqualOrZero = (mantissa2 & 0x7fffff) == 0;\n      if (isEqualOrZero) {\n        isEqualOrZero = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqualOrZero) {\n        isEqualOrZero = mantissa2 == input2;\n      }\n      if (!isEqualOrZero) {\n        mantissa2 = mantissa2 | 0x400000;\n      }\n      return mantissa2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (mantissa2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((mantissa2 & 0xff000000) == 0) {\n      mantissa2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        mantissa2 = mantissa2 | 0x80000000;\n      }\n      return mantissa2;\n    }\n    if (mantissa2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  mantissa2 = mantissa2 >> 0x18;\n  input4 = input4 >> 0x18;\n  exponent2 = input4 - mantissa2;\n  isEqualOrZero = exponent2 != 0;\n  exponent1 = mantissa2;\n  if (isEqualOrZero && mantissa2 <= input4) {\n    exponent1 = mantissa2 + exponent2;\n  }\n  if (isEqualOrZero && mantissa2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqualOrZero && mantissa2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqualOrZero && mantissa2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < mantissa2) {\n    exponent2 = -exponent2;\n  }\n  if (0x19 < exponent2) {\n    return input1;\n  }\n  mantissa2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    mantissa2 = -mantissa2;\n  }\n  mantissa1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    mantissa1 = -mantissa1;\n  }\n  if (exponent1 == exponent2) {\n    mantissa1 = mantissa1 ^ 0x800000;\n    if (exponent1 == 0) {\n      mantissa2 = mantissa2 ^ 0x800000;\n      exponent1 = 1;\n    }\n    else {\n      exponent2 = exponent2 - 1;\n    }\n  }\n  mantissa2 = mantissa2 + ((int)mantissa1 >> (exponent2 & 0xff));\n  mantissa1 = mantissa1 << (0x20 - exponent2 & 0xff);\n  input1 = mantissa2 & 0x80000000;\n  if ((int)mantissa2 < 0) {\n    isEqualOrZero = mantissa1 != 0;\n    mantissa1 = -mantissa1;\n    mantissa2 = -mantissa2 - (uint)isEqualOrZero;\n  }\n  if (mantissa2 < 0x800000) {\n    exponent2 = mantissa1 & 0x80000000;\n    mantissa1 = mantissa1 << 1;\n    mantissa2 = mantissa2 * 2 + (uint)(exponent2 != 0);\n    exponent2 = exponent1 - 2;\n    if ((mantissa2 & 0x800000) == 0) {\n      exponent1 = LZCOUNT(mantissa2) - 8;\n      mantissa2 = mantissa2 << (exponent1 & 0xff);\n      if ((int)exponent2 < (int)exponent1) {\n        mantissa2 = mantissa2 >> (-(exponent2 - exponent1) & 0xff);\n      }\n      else {\n        mantissa2 = mantissa2 + (exponent2 - exponent1) * 0x800000;\n      }\n      return mantissa2 | input1;\n    }\n  }\n  else {\n    exponent2 = exponent1 - 1;\n    if (0xffffff < mantissa2) {\n      exponent2 = mantissa2 & 1;\n      mantissa2 = mantissa2 >> 1;\n      mantissa1 = (uint)(exponent2 != 0) << 0x1f | mantissa1 >> 1;\n      exponent2 = exponent1;\n      if (0xfd < exponent1) goto LAB_08000c12;\n    }\n  }\n  mantissa2 = mantissa2 + exponent2 * 0x800000 + (uint)(0x7fffffff < mantissa1);\n  if (mantissa1 == 0x80000000) {\n    mantissa2 = mantissa2 & 0xfffffffe;\n  }\n  return mantissa2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_value_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "mantissa1",
                "uVar4": "mantissa2",
                "uVar5": "exponent1",
                "uVar6": "exponent2",
                "bVar7": "isEqualOrZero"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "count_leading_zeros_08000c3c",
            "code": "\nuint countLeadingZeros_08000c3c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int shiftedValue;\n  uint upperHalf;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  shiftedValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    upperHalf = 0 << (shiftAmount & 0xff);\n    leadingZeros = shiftedValue + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < upperHalf);\n    if (upperHalf == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  leadingZeros = shiftedValue + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "count_leading_zeros_08000c3c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "shiftedValue",
                "uVar4": "upperHalf"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "count_bits_08000c44",
            "code": "\nuint countBits_08000c44(uint inputNumber)\n\n{\n  uint bitCount;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = inputNumber & 0x80000000;\n  if ((int)signBit < 0) {\n    inputNumber = -inputNumber;\n  }\n  if (inputNumber == 0) {\n    return 0;\n  }\n  bitCount = LZCOUNT(inputNumber);\n  shiftAmount = bitCount - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < bitCount) {\n    bitCount = 0 << (shiftAmount & 0xff);\n    signBit = result + (inputNumber << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < bitCount);\n    if (bitCount == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = inputNumber << bitCount + 0x18;\n  signBit = result + ((inputNumber >> (0x20 - (bitCount + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "count_bits_08000c44",
                "param_1": "inputNumber",
                "uVar1": "bitCount",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_float_08000cec",
            "code": "\nuint calculateFloat_08000cec(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong longResult;\n  uint result;\n  uint upperBits1;\n  int sum;\n  int diff;\n  uint multiplicationResult;\n  int counter;\n  uint upperBits2;\n  bool isZero;\n  bool isNegative;\n  \n  upperBits1 = input1 >> 0x17 & 0xff;\n  isZero = upperBits1 == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = upperBits1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (upperBits1 == 0xff || param4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      upperBits2 = result;\n      if (((isZero) || ((upperBits1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (upperBits2 = input2, (input2 & 0x7fffff) != 0)))) {\n        return upperBits2 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = upperBits1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      upperBits1 = upperBits1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = upperBits1 + param4;\n  upperBits2 = input1 ^ input2;\n  upperBits1 = input1 << 9;\n  isZero = upperBits1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (upperBits1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = upperBits2 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    isZero = diff == 0;\n    counter = diff;\n    if (!isZero && 0x7e < sum) {\n      isNegative = SBORROW4(0xff,diff);\n      counter = 0xff - diff;\n      isZero = diff == 0xff;\n    }\n    if (!isZero && counter < 0 == isNegative) {\n      result = result | diff * 0x800000;\n    }\n    if (!isZero && counter < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    multiplicationResult = 0;\n    isNegative = SBORROW4(diff,1);\n    upperBits2 = sum - 0x80;\n    isZero = upperBits2 == 0;\n    upperBits1 = upperBits2;\n  }\n  else {\n    longResult = (ulonglong)(upperBits1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    multiplicationResult = (uint)longResult;\n    result = (uint)((ulonglong)longResult >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | multiplicationResult >> 0x1f;\n      multiplicationResult = multiplicationResult << 1;\n    }\n    result = upperBits2 & 0x80000000 | result;\n    upperBits2 = (sum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(upperBits2,0xfd);\n    isZero = upperBits2 == 0xfd;\n    upperBits1 = upperBits2 - 0xfd;\n    if (upperBits2 < 0xfe) {\n      result = result + upperBits2 * 0x800000 + (uint)(0x7fffffff < multiplicationResult);\n      if (multiplicationResult == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)upperBits1 < 0 != isNegative) {\n    isZero = (int)(upperBits2 + 0x19) < 0;\n    if (upperBits2 == 0xffffffe7 || isZero != SCARRY4(upperBits2,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (upperBits2 != 0xffffffe7 && isZero == SCARRY4(upperBits2,0x19)) {\n      upperBits1 = (result << 1) >> (-upperBits2 & 0xff);\n      upperBits2 = result << (upperBits2 + 0x20 & 0xff);\n      upperBits1 = ((uint)((result & 0x80000000) != 0) << 0x1f | upperBits1 >> 1) + (uint)((byte)upperBits1 & 1);\n      if ((multiplicationResult | upperBits2 << 1) == 0) {\n        upperBits1 = upperBits1 & ~(upperBits2 >> 0x1f);\n      }\n      return upperBits1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_float_08000cec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "upperBits1",
                "uVar2": "result",
                "iVar4": "sum",
                "iVar5": "diff",
                "uVar6": "multiplicationResult",
                "iVar7": "counter",
                "uVar8": "upperBits2",
                "bVar9": "isZero",
                "bVar10": "isNegative",
                "lVar1": "longResult"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_float_value_08000e54",
            "code": "\nuint calculateFloatValue_08000e54(uint float1,uint float2,undefined4 value1,uint value2)\n\n{\n  uint temp1;\n  uint temp2;\n  int count1;\n  uint count2;\n  int count3;\n  uint result;\n  bool bVar7;\n  bool bVar8;\n  bool bVar9;\n  \n  temp2 = float1 >> 0x17 & 0xff;\n  bVar7 = temp2 == 0;\n  if (!bVar7) {\n    value2 = float2 >> 0x17 & 0xff;\n    bVar7 = value2 == 0;\n  }\n  if (!bVar7) {\n    bVar7 = temp2 == 0xff;\n  }\n  if (!bVar7) {\n    bVar7 = value2 == 0xff;\n  }\n  if (bVar7) {\n    value2 = float2 >> 0x17 & 0xff;\n    result = float1;\n    if (temp2 == 0xff) {\n      if (((float1 & 0x7fffff) != 0) || (result = float2, value2 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (value2 == 0xff) {\n        result = float2;\n        if ((float2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (float1 ^ float2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      bVar7 = (float1 & 0x7fffffff) == 0;\n      if (!bVar7) {\n        bVar7 = (float2 & 0x7fffffff) == 0;\n      }\n      if (!bVar7) {\n        bVar7 = temp2 == 0;\n        result = float1 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            float1 = float1 << 1;\n            bVar7 = (float1 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          temp2 = temp2 - 1;\n        }\n        float1 = float1 | result;\n        bVar7 = value2 == 0;\n        result = float2 & 0x80000000;\n        while( true ) {\n          if (bVar7) {\n            float2 = float2 << 1;\n            bVar7 = (float2 & 0x800000) == 0;\n          }\n          if (!bVar7) break;\n          value2 = value2 - 1;\n        }\n        float2 = float2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((float1 & 0x7fffffff) == 0) {\n        if ((float2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    float1 = float1 ^ float2;\n  }\n  else {\nLAB_08000e6c:\n    count1 = temp2 - value2;\n    if (float2 << 9 == 0) {\n      float1 = (float1 ^ float2) & 0x80000000 | float1 & 0x7fffff;\n      bVar9 = SCARRY4(count1,0x7f);\n      count3 = count1 + 0x7f;\n      bVar7 = count3 < 0;\n      bVar8 = count3 == 0;\n      if (!bVar8 && bVar7 == bVar9) {\n        bVar9 = SBORROW4(0xff,count3);\n        bVar7 = 0xff - count3 < 0;\n        bVar8 = count3 == 0xff;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        float1 = float1 | count3 * 0x800000;\n      }\n      if (!bVar8 && bVar7 == bVar9) {\n        return float1;\n      }\n      float1 = float1 | 0x800000;\n      temp2 = 0;\n      bVar8 = SBORROW4(count3,1);\n      count2 = count1 + 0x7e;\n      bVar7 = count2 == 0;\n      result = count2;\n    }\n    else {\n      temp1 = (float2 << 9) >> 4 | 0x10000000;\n      temp2 = (float1 << 9) >> 4 | 0x10000000;\n      float1 = (float1 ^ float2) & 0x80000000;\n      bVar7 = temp1 <= temp2;\n      if (!bVar7) {\n        temp2 = temp2 << 1;\n      }\n      count2 = count1 + 0x7d + (uint)bVar7;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          float1 = float1 | result;\n        }\n        bVar7 = temp1 >> 1 <= temp2;\n        if (bVar7) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (bVar7) {\n          float1 = float1 | result >> 1;\n        }\n        bVar7 = temp1 >> 2 <= temp2;\n        if (bVar7) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (bVar7) {\n          float1 = float1 | result >> 2;\n        }\n        bVar7 = temp1 >> 3 <= temp2;\n        if (bVar7) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (bVar7) {\n          float1 = float1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        bVar7 = temp2 == 0;\n        if (!bVar7) {\n          result = result >> 4;\n          bVar7 = result == 0;\n        }\n      } while (!bVar7);\n      bVar8 = SBORROW4(count2,0xfd);\n      bVar7 = count2 == 0xfd;\n      result = count2 - 0xfd;\n      if (count2 < 0xfe) {\n        float1 = float1 + count2 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          float1 = float1 & 0xfffffffe;\n        }\n        return float1;\n      }\n    }\n    if (bVar7 || (int)result < 0 != bVar8) {\n      bVar7 = (int)(count2 + 0x19) < 0;\n      if (count2 == 0xffffffe7 || bVar7 != SCARRY4(count2,0x19)) {\n        float1 = float1 & 0x80000000;\n      }\n      if (count2 == 0xffffffe7 || bVar7 != SCARRY4(count2,0x19)) {\n        return float1;\n      }\n      result = (float1 << 1) >> (-count2 & 0xff);\n      count2 = float1 << (count2 + 0x20 & 0xff);\n      result = ((uint)((float1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | count2 << 1) == 0) {\n        result = result & ~(count2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return float1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_float_value_08000e54",
                "param_1": "float1",
                "param_2": "float2",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "count1",
                "uVar4": "count2",
                "iVar5": "count3",
                "uVar6": "result"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "check_overflow_08000f9c",
            "code": "\nuint check_overflow_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint multiplied_input_1;\n  uint multiplied_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  multiplied_input_1 = input_1 * 2;\n  multiplied_input_2 = input_2 * 2;\n  if (((int)multiplied_input_1 >> 0x18 == -1 || (int)multiplied_input_2 >> 0x18 == -1) &&\n     ((((int)multiplied_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)multiplied_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = multiplied_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = multiplied_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && multiplied_input_2 <= multiplied_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || multiplied_input_2 > multiplied_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "check_overflow_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "multiplied_input_1",
                "uVar3": "multiplied_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_integers_08000ffc",
            "code": "\nvoid concatenateIntegers_08000ffc(undefined4 number1,undefined4 number2)\n\n{\n  concatenate_integers_08001004(number2,number1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_integers_08000ffc",
                "param_1": "number1",
                "param_2": "number2"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_integers_08001004",
            "code": "\nundefined8 concatenate_integers_08001004(undefined4 first_integer,undefined4 second_integer)\n\n{\n  check_overflow_08000f9c();\n  return CONCAT44(second_integer,first_integer);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_integers_08001004",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "is_concatenation_successful_08001014",
            "code": "\nbool is_concatenation_successful_08001014(void)\n\n{\n  char result;\n  \n  concatenate_integers_08001004();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "is_concatenation_successful_08001014",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_for_null_termination_08001028",
            "code": "\nbool check_for_null_termination_08001028(void)\n\n{\n  char input_character;\n  \n  concatenate_integers_08001004();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_for_null_termination_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_concatenation_result_08001050",
            "code": "\nbool check_concatenation_result_08001050(void)\n\n{\n  undefined zero_result;\n  undefined carry_bit;\n  \n  concatenate_integers_08000ffc();\n  return !(bool)carry_bit || (bool)zero_result;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_concatenation_result_08001050",
                "in_CY": "carry_bit",
                "in_ZR": "zero_result"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_concatenation_result_08001064",
            "code": "\nbool check_concatenation_result_08001064(void)\n\n{\n  char concatenation_result;\n  \n  concatenate_integers_08000ffc();\n  return concatenation_result == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_concatenation_result_08001064",
                "in_CY": "concatenation_result"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "convert_unsigned_to_signed_08001078",
            "code": "\nuint convertUnsignedToSigned_08001078(uint inputValue)\n\n{\n  uint shiftedValue;\n  uint difference;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (inputValue << 1) >> 0x18;\n  difference = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && difference != 0) {\n    shiftedValue = (inputValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((difference == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08001078": "convert_unsigned_to_signed_08001078",
                "param_1": "inputValue",
                "uVar1": "shiftedValue",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "extract_bits_080010c4",
            "code": "\nuint extract_bits_080010c4(uint input)\n\n{\n  uint shift_amount;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "extract_bits_080010c4",
                "param_1": "input",
                "uVar1": "shift_amount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_and_set_memory_08001104",
            "code": "\nundefined4 initializeAndSetMemory_08001104(undefined4 inputValue)\n\n{\n  uint dataValue;\n  \n  dataValue = getDataValue();\n  initializeMemory(dataValue / 1000);\n  setMemoryValue(0xffffffff,inputValue,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_and_set_memory_08001104",
                "param_1": "inputValue",
                "uVar1": "dataValue",
                "get_data_value_08002214": "getDataValue",
                "initialize_memory_08001214": "initializeMemory",
                "set_memory_value_08001194": "setMemoryValue"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_and_set_adc_08001128",
            "code": "\n\n\nundefined4 initializeAndSetADC_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setADCInputMux(3);\n  initializeAndSetMemory(0);\n  initializeADCSettings();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_and_set_adc_08001128",
                "set_adc_input_mux_08001170": "setADCInputMux",
                "initialize_and_set_memory_08001104": "initializeAndSetMemory",
                "initialize_adc_settings_08004ccc": "initializeADCSettings"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_data_counter_0800114c",
            "code": "\nvoid incrementDataCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_data_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_Data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "set_adc_input_mux_08001170",
            "code": "\n\n\nvoid set_ADC_Input_MUX_08001170(uint ADC_Channel)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (ADC_Channel & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "set_adc_input_mux_08001170",
                "param_1": "ADC_Channel"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "set_memory_value_08001194",
            "code": "\n\n\nvoid setMemoryValue_08001194(uint address,uint data,uint mask)\n\n{\n  undefined maskedData;\n  uint shiftAmount;\n  uint shiftedMask;\n  uint addedShift;\n  \n  shiftedMask = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - shiftedMask;\n  addedShift = shiftedMask + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (addedShift < 7) {\n    shiftedMask = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < addedShift) {\n    shiftedMask = shiftedMask - 3;\n  }\n  maskedData = (undefined)\n          ((mask & (1 << (shiftedMask & 0xff)) - 1U | (data & shiftAmount) << (shiftedMask & 0xff)) << 4);\n  if (-1 < (int)address) {\n    shiftedMask = address + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    shiftedMask = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(shiftedMask + 0x300) = maskedData;\n  }\n  else {\n    *(undefined *)(shiftAmount + shiftedMask) = maskedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "set_memory_value_08001194",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "maskedData",
                "uVar2": "shiftAmount",
                "uVar3": "shiftedMask",
                "uVar4": "addedShift"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_at_position_080011fc",
            "code": "\nvoid setBitAtPosition_080011fc(uint bitPosition)\n\n{\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_at_position_080011fc",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "initialize_memory_08001214",
            "code": "\n\n\nundefined4 initializeMemory_08001214(int size)\n\n{\n  if (size - 1U < 0x1000000) {\n    _DAT_e000e014 = size - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "initialize_memory_08001214",
                "param_1": "size"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_value_08001240",
            "code": "\n\n\nvoid setFlagValue_08001240(int flagValue)\n\n{\n  if (flagValue == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_value_08001240",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_param_values_08001264",
            "code": "\n\n\nvoid updateParamValues_08001264(uint *dstParams,uint *srcParams)\n\n{\n  uint updatedValue;\n  uint bitMask;\n  uint type;\n  int index;\n  uint i;\n  uint bitShift;\n  uint typeFlag;\n  uint *dstAddress;\n  int shiftOffset;\n  \n  updatedValue = 0;\n  i = 0;\n  do {\n    bitShift = 1 << (i & 0xff);\n    bitMask = bitShift & *srcParams;\n    if (bitShift == bitMask) {\n      type = srcParams[1];\n      if (type == 0x12) {\n        updatedValue = srcParams[3] + 0xc;\n      }\n      else if (type < 0x13) {\n        if (type == 2) {\n          updatedValue = srcParams[3] + 8;\n        }\n        else if (type < 3) {\n          if (type == 0) goto LAB_080013be;\n          if (type == 1) {\n            updatedValue = srcParams[3];\n          }\n        }\n        else if (type == 3) {\n          updatedValue = 0;\n        }\n        else if (type == 0x11) {\n          updatedValue = srcParams[3] + 4;\n        }\n      }\n      else {\n        if (type != 0x10210000) {\n          if (type < 0x10210001) {\n            if (type != 0x10110000) {\n              typeFlag = 0x10120000;\nLAB_080013b8:\n              if (type != typeFlag) goto LAB_080012a8;\n            }\n          }\n          else if ((type != 0x10310000) && (type != 0x10320000)) {\n            typeFlag = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        updatedValue = srcParams[2];\n        if (updatedValue == 0) {\n          updatedValue = 4;\n        }\n        else {\n          if (updatedValue == 1) {\n            dstParams[4] = bitShift;\n          }\n          if (updatedValue != 1) {\n            dstParams[5] = bitShift;\n          }\n          updatedValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        bitShift = *dstParams;\n        type = i << 2;\n        dstAddress = dstParams;\n      }\n      else {\n        bitShift = dstParams[1];\n        type = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        dstAddress = dstParams + 1;\n      }\n      *dstAddress = bitShift & ~(0xf << (type & 0xff)) | updatedValue << (type & 0xff);\n      dstAddress = (uint *)srcParams[1];\n      if (((uint)dstAddress & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftOffset = (i & 3) << 2;\n        if (dstParams == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (dstParams == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (dstParams == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (dstParams == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             index << shiftOffset | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << shiftOffset);\n        if (((uint)dstAddress & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitMask;\n        }\n        if (((uint)dstAddress & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitMask;\n        }\n        if (((uint)dstAddress & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitMask;\n        }\n        if (((uint)dstAddress & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitMask;\n        }\n        else {\n          _DAT_4001040c = bitMask | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_param_values_08001264",
                "param_1": "dstParams",
                "param_2": "srcParams",
                "uVar1": "updatedValue",
                "uVar2": "bitMask",
                "uVar3": "type",
                "iVar4": "index",
                "uVar5": "i",
                "uVar6": "bitShift",
                "uVar7": "typeFlag",
                "unaff_r10": "dstAddress",
                "iVar8": "shiftOffset"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int object_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(object_address + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_and_store_0800142e",
            "code": "\nvoid xor_and_store_0800142e(int input_address,uint input_value)\n\n{\n  *(uint *)(input_address + 0xc) = input_value ^ *(uint *)(input_address + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_and_store_0800142e",
                "param_1": "input_address",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "update_status_flag_08001436",
            "code": "\nundefined4 updateStatusFlag_08001436(int *statusFlag)\n\n{\n  int value;\n  \n  value = *statusFlag;\n  if ((*(uint *)(value + 0x14) & 0x400) != 0) {\n    *(uint *)(value + 0x14) = *(uint *)(value + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)statusFlag + 0x35) = 0x20;\n    *(undefined *)(statusFlag + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "update_status_flag_08001436",
                "param_1": "statusFlag",
                "iVar1": "value",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "validate_data_08001460",
            "code": "\nundefined4 validate_data_08001460(uint **data_ptr,uint flag,uint timeout)\n\n{\n  int start_time;\n  int current_time;\n  uint selected_value;\n  uint *current_data_ptr;\n  \n  start_time = get_data_0800115c();\n  do {\n    current_data_ptr = *data_ptr;\n    if ((flag << 8) >> 0x18 == 1) {\n      selected_value = current_data_ptr[5];\n    }\n    else {\n      selected_value = current_data_ptr[6];\n    }\n    if ((flag & 0xffff & ~selected_value) == 0) {\n      return 0;\n    }\n    if ((int)(current_data_ptr[5] << 0x15) < 0) {\n      *current_data_ptr = *current_data_ptr | 0x200;\n      current_data_ptr[5] = current_data_ptr[5] & 0xfffffbff;\n      data_ptr[0xe] = (uint *)0x4;\n      *(undefined *)((int)data_ptr + 0x35) = 0x20;\n      *(undefined *)(data_ptr + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_time = get_data_0800115c(), (uint)(current_time - start_time) <= timeout))));\n  *(undefined *)((int)data_ptr + 0x35) = 0x20;\n  *(undefined *)(data_ptr + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "validate_data_08001460",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "uVar3": "selected_value",
                "puVar4": "current_data_ptr"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_and_update_status_080014e2",
            "code": "\nundefined4 checkAndUpdateStatus_080014e2(int *data,uint size)\n\n{\n  int dataStart;\n  int statusFlag;\n  \n  dataStart = get_data_0800115c();\n  while( true ) {\n    if (*(int *)(*data + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    statusFlag = update_status_flag_08001436(data);\n    if (statusFlag != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (statusFlag = get_data_0800115c(), size < (uint)(statusFlag - dataStart))))) {\n      data[0xe] = data[0xe] | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_and_update_status_080014e2",
                "param_1": "data",
                "param_2": "size",
                "iVar1": "dataStart",
                "iVar2": "statusFlag"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "update_data_status_08001530",
            "code": "\nundefined4 updateDataStatus_08001530(uint **data,uint value1,uint value2,int flag,uint param)\n\n{\n  int startingPoint;\n  int endingPoint;\n  uint *ptr;\n  uint **ptrPtr;\n  uint var1;\n  uint var2;\n  \n  **data = **data | 0x100;\n  ptrPtr = data;\n  var1 = value1;\n  var2 = value2;\n  startingPoint = get_data_0800115c();\n  do {\n    ptr = *data;\n    do {\n      if ((int)(ptr[5] << 0x1f) < 0) {\n        ptr[4] = value1 & 0xfe;\n        startingPoint = validate_data_08001460(data,0x10002,param,ptr,ptrPtr,var1,var2);\n        if (startingPoint == 0) {\n          startingPoint = check_and_update_status_080014e2(data,param,(*data)[5],(*data)[6]);\n          if (startingPoint == 0) {\n            ptr = *data;\n            if (flag == 1) {\nLAB_080015ca:\n              ptr[4] = value2 & 0xff;\n              return 0;\n            }\n            ptr[4] = value2 >> 8;\n            startingPoint = check_and_update_status_080014e2(data,param);\n            if (startingPoint == 0) {\n              ptr = *data;\n              goto LAB_080015ca;\n            }\n          }\n          if (data[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **data = **data | 0x200;\n        }\n        else if (data[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (param == 0xffffffff);\n    if ((param == 0) || (endingPoint = get_data_0800115c(), param < (uint)(endingPoint - startingPoint))) {\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "update_data_status_08001530",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "param",
                "iVar1": "startingPoint",
                "iVar2": "endingPoint",
                "puVar3": "ptr",
                "ppuVar4": "ptrPtr",
                "uVar5": "var1",
                "uVar6": "var2"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "process_data_080015e8",
            "code": "\nundefined4 processData_080015e8(uint **dataPointer,uint value1,uint value2,int flag,uint limit)\n\n{\n  int data;\n  int currentData;\n  uint *currentPointer;\n  uint **originalDataPointer;\n  uint newValue1;\n  uint newValue2;\n  \n  currentPointer = *dataPointer;\n  *currentPointer = *currentPointer | 0x400;\n  *currentPointer = *currentPointer | 0x100;\n  originalDataPointer = dataPointer;\n  newValue1 = value1;\n  newValue2 = value2;\n  data = get_data_0800115c();\nLAB_0800160e:\n  currentPointer = *dataPointer;\n  while (-1 < (int)(currentPointer[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  currentPointer[4] = value1 & 0xfe;\n  data = validate_data_08001460(dataPointer,0x10002,limit,currentPointer,originalDataPointer,newValue1,newValue2);\n  if (data != 0) goto LAB_080016ba;\n  data = check_and_update_status_080014e2(dataPointer,limit,(*dataPointer)[5],(*dataPointer)[6]);\n  if (data == 0) {\n    currentPointer = *dataPointer;\n    if (flag != 1) {\n      currentPointer[4] = value2 >> 8;\n      data = check_and_update_status_080014e2(dataPointer,limit);\n      if (data != 0) goto LAB_08001642;\n      currentPointer = *dataPointer;\n    }\n    currentPointer[4] = value2 & 0xff;\n    data = check_and_update_status_080014e2(dataPointer,limit);\n    if (data == 0) {\n      **dataPointer = **dataPointer | 0x100;\n      data = get_data_0800115c();\n      do {\n        do {\n          if ((int)((*dataPointer)[5] << 0x1f) < 0) {\n            (*dataPointer)[4] = value1 & 0xff | 1;\n            data = validate_data_08001460(dataPointer,0x10002,limit);\n            if (data == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (dataPointer[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (currentData = get_data_0800115c(), (uint)(currentData - data) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)dataPointer + 0x35) = 0x20;\n      *(undefined *)(dataPointer + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (dataPointer[0xe] == (uint *)0x4) {\n    **dataPointer = **dataPointer | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (currentData = get_data_0800115c(), limit < (uint)(currentData - data)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "process_data_080015e8",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "limit",
                "iVar1": "data",
                "iVar2": "currentData",
                "puVar3": "currentPointer",
                "ppuVar4": "originalDataPointer",
                "uVar5": "newValue1",
                "uVar6": "newValue2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "process_data_080016f4",
            "code": "\nundefined4 process_data_080016f4(int *data_array,uint array_length)\n\n{\n  int initial_data_value;\n  int current_data_value;\n  \n  initial_data_value = get_data_0800115c();\n  while( true ) {\n    current_data_value = *data_array;\n    if ((*(uint *)(current_data_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_data_value + 0x14) << 0x1b < 0) break;\n    if ((array_length == 0) || (current_data_value = get_data_0800115c(), array_length < (uint)(current_data_value - initial_data_value))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_data_value + 0x14) = *(uint *)(current_data_value + 0x14) & 0xffffffef;\n  data_array[0xe] = 0;\n  *(undefined *)(data_array + 0xd) = 0;\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "process_data_080016f4",
                "param_1": "data_array",
                "param_2": "array_length",
                "iVar1": "initial_data_value",
                "iVar2": "current_data_value"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "update_param_08001754",
            "code": "\nundefined4 updateParam_08001754(uint **paramList)\n\n{\n  uint value1;\n  uint value2;\n  uint *pointer1;\n  uint *pointer2;\n  uint *pointer3;\n  uint value3;\n  undefined8 shiftedValue;\n  \n  if (paramList != (uint **)0x0) {\n    if (*(char *)((int)paramList + 0x35) == '\\0') {\n      *(undefined *)(paramList + 0xd) = 0;\n      update_param_and_toggle_flag_08004d48();\n    }\n    *(undefined *)((int)paramList + 0x35) = 0x24;\n    **paramList = **paramList & 0xfffffffe;\n    shiftedValue = get_shifted_value_08002220();\n    value2 = (uint)((ulonglong)shiftedValue >> 0x20);\n    value1 = (uint)shiftedValue;\n    pointer2 = paramList[1];\n    value3 = value1 / 1000000;\n    if ((uint *)0x186a0 < pointer2) {\n      value2 = 300;\n    }\n    pointer1 = *paramList;\n    if ((uint *)0x186a0 < pointer2) {\n      value2 = value3 * value2;\n    }\n    pointer1[1] = value3;\n    if ((uint *)0x186a0 < pointer2) {\n      value3 = value2 / 1000;\n    }\n    pointer1[8] = value3 + 1;\n    if (pointer2 < (uint *)0x186a1) {\n      value1 = value1 / (uint)((int)pointer2 << 1);\n      if ((value1 & 0xfff) < 4) {\n        value1 = 4;\n      }\n    }\n    else {\n      if (paramList[2] == (uint *)0x0) {\n        value1 = value1 / (uint)((int)pointer2 * 3) | 0x8000;\n      }\n      else {\n        value1 = value1 / (uint)((int)pointer2 * 0x19) | 0xc000;\n      }\n      if ((value1 & 0xfff) == 0) {\n        value1 = 1;\n      }\n    }\n    pointer2 = paramList[8];\n    pointer3 = paramList[7];\n    pointer1[7] = value1;\n    *pointer1 = (uint)pointer3 | (uint)pointer2;\n    pointer1[2] = (uint)paramList[4] | (uint)paramList[3];\n    pointer1[3] = (uint)paramList[5] | (uint)paramList[6];\n    *pointer1 = *pointer1 | 1;\n    paramList[0xe] = (uint *)0x0;\n    *(undefined *)((int)paramList + 0x35) = 0x20;\n    *(undefined *)((int)paramList + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "update_param_08001754",
                "param_1": "paramList",
                "uVar1": "value1",
                "uVar2": "value2",
                "puVar3": "pointer1",
                "puVar4": "pointer2",
                "puVar5": "pointer3",
                "uVar6": "value3",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **dataArray,undefined4 param2,undefined4 param3,undefined4 param4,byte *byteArray,\n            short byteCount,undefined4 param7)\n\n{\n  int data1;\n  int data2;\n  uint *dataPtr;\n  uint dataValue;\n  \n  if (*(char *)((int)dataArray + 0x35) == ' ') {\n    if (byteArray == (byte *)0x0) {\n      return 1;\n    }\n    if (byteCount == 0) {\n      return 1;\n    }\n    data1 = get_data_0800115c();\n    do {\n      dataPtr = *dataArray;\n      if ((~dataPtr[6] & 2) != 0) {\n        if (*(char *)(dataArray + 0xd) == '\\x01') {\n          return 2;\n        }\n        dataValue = *dataPtr;\n        *(undefined *)(dataArray + 0xd) = 1;\n        *dataPtr = dataValue & 0xfffff7ff;\n        *(undefined *)((int)dataArray + 0x35) = 0x21;\n        *(undefined *)((int)dataArray + 0x36) = 0x40;\n        dataArray[0xe] = (uint *)0x0;\n        data1 = update_data_status_08001530(dataArray,param2,param3,param4,param7);\n        if (data1 != 0) {\n          *(undefined *)(dataArray + 0xd) = 0;\n          if (dataArray[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      data2 = get_data_0800115c();\n    } while ((uint)(data2 - data1) < 0x2711);\n    *(undefined *)(dataArray + 0xd) = 0;\n    *(undefined *)((int)dataArray + 0x35) = 0x20;\n  }\n  return 2;\n  while (byteCount != 0) {\nLAB_080018e2:\n    data1 = check_and_update_status_080014e2(dataArray,param7);\n    if (data1 != 0) goto LAB_080018ee;\n    dataPtr = *dataArray;\n    dataPtr[4] = (uint)*byteArray;\n    if ((int)(dataPtr[5] << 0x1d) < 0) {\n      if ((short)(byteCount + -1) == 0) break;\n      byteCount = byteCount + -2;\n      dataPtr[4] = (uint)byteArray[1];\n      byteArray = byteArray + 2;\n    }\n    else {\n      byteArray = byteArray + 1;\n      byteCount = byteCount + -1;\n    }\n  }\n  data1 = check_and_update_status_080014e2(dataArray,param7);\n  if (data1 == 0) {\n    **dataArray = **dataArray | 0x200;\n    *(undefined *)(dataArray + 0xd) = 0;\n    *(undefined *)((int)dataArray + 0x35) = 0x20;\n    *(undefined *)((int)dataArray + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (dataArray[0xe] == (uint *)0x4) {\n    **dataArray = **dataArray | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "dataArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "byteArray",
                "param_6": "byteCount",
                "param_7": "param7",
                "iVar1": "data1",
                "iVar2": "data2",
                "puVar3": "dataPtr",
                "uVar4": "dataValue"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *result,ushort length,uint timeout)\n\n{\n  undefined *ptr1;\n  int timeStart;\n  int timeCurrent;\n  uint *ptrData;\n  uint dataValue;\n  undefined *resultPtr;\n  bool flag;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (result == (undefined *)0x0) {\n    return 1;\n  }\n  if (length == 0) {\n    return 1;\n  }\n  timeStart = getCurrentTime();\n  while (ptrData = *data, (~ptrData[6] & 2) == 0) {\n    timeCurrent = getCurrentTime();\n    if (10000 < (uint)(timeCurrent - timeStart)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  dataValue = *ptrData;\n  *(undefined *)(data + 0xd) = 1;\n  *ptrData = dataValue & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[14] = (uint *)0x0;\n  timeStart = process_data_080015e8(data,param2,param3,param4,timeout);\n  if (timeStart != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[14] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptrData = *data;\n  dataValue = *ptrData;\n  if (length == 1) {\n    *ptrData = dataValue & 0xfffffbff;\n    disableIRQinterrupts();\n    **data = **data | 0x200;\n    enableIRQinterrupts();\n    timeStart = process_data_080016f4(data,timeout);\n    if (timeStart == 0) {\n      *result = (char)(*data)[4];\nLAB_08001ab8:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (data[14] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (length == 2) {\n    *ptrData = dataValue | 0x800;\n    disableIRQinterrupts();\n    **data = **data & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *ptrData = dataValue | 0x400;\n    while (3 < length) {\n      timeStart = process_data_080016f4(data,timeout);\n      if (timeStart != 0) goto LAB_08001a18;\n      *result = (char)(*data)[4];\n      ptrData = *data;\n      flag = (int)(ptrData[5] << 0x1d) < 0;\n      if (flag) {\n        ptrData = (uint *)ptrData[4];\n        resultPtr = result + 2;\n        length = length - 2;\n      }\n      else {\n        resultPtr = result + 1;\n        length = length - 1;\n      }\n      ptr1 = result + 1;\n      result = resultPtr;\n      if (flag) {\n        *ptr1 = (char)ptrData;\n      }\n    }\n    if (length != 2) {\n      timeStart = getCurrentTime();\n      do {\n        ptrData = *data;\n        do {\n          if ((int)(ptrData[5] << 0x1d) < 0) {\n            *ptrData = *ptrData & 0xfffffbff;\n            disableIRQinterrupts();\n            *result = (char)(*data)[4];\n            timeStart = getCurrentTime();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (timeCurrent = getCurrentTime(), (uint)(timeCurrent - timeStart) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  timeStart = getCurrentTime();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        ptrData = *data;\n        *ptrData = *ptrData | 0x200;\n        *result = (char)ptrData[4];\n        enableIRQinterrupts();\n        result[1] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (timeCurrent = getCurrentTime(), (uint)(timeCurrent - timeStart) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptrData = *data;\n    do {\n      if ((int)(ptrData[5] << 0x1d) < 0) {\n        *ptrData = *ptrData | 0x200;\n        result[1] = (char)ptrData[4];\n        enableIRQinterrupts();\n        result[2] = (char)(*data)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (timeCurrent = getCurrentTime(), (uint)(timeCurrent - timeStart) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result",
                "param_6": "length",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "timeStart",
                "iVar3": "timeCurrent",
                "puVar4": "ptrData",
                "uVar5": "dataValue",
                "puVar6": "resultPtr",
                "bVar7": "flag",
                "param_1[0xe]": "data[14]",
                "get_data_0800115c": "getCurrentTime"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_and_update_settings_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_and_update_settings_08001b58(int *settings)\n\n{\n  int tempVar1;\n  int tempVar2;\n  \n  if (*settings << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (settings[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      tempVar1 = settings[1];\n      if (tempVar1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (tempVar1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          tempVar1 = get_data();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            tempVar2 = get_data();\n            if (100 < (uint)(tempVar2 - tempVar1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (tempVar1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      tempVar1 = get_data();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        tempVar2 = get_data();\n        if (100 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*settings << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (settings[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      ramVar1 = settings[4];\n      if (ramVar1 == 0) {\n        tempVar1 = get_data();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          tempVar2 = get_data();\n          if (2 < (uint)(tempVar2 - tempVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      ramVar1 = 1;\n      tempVar1 = get_data();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        tempVar2 = get_data();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = settings[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*settings << 0x1c < 0) {\n    ramVar2 = settings[6];\n    if (ramVar2 == 0) {\n      tempVar1 = get_data();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        tempVar2 = get_data();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      ramVar2 = 1;\n      tempVar1 = get_data();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        tempVar2 = get_data();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *settings << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  tempVar1 = get_data();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    tempVar2 = get_data();\n    if (100 < (uint)(tempVar2 - tempVar1)) {\n      return 3;\n    }\n  }\n  tempVar1 = settings[3];\n  if (tempVar1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (tempVar1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      tempVar1 = get_data();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        tempVar2 = get_data();\n        if (5000 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (tempVar1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  tempVar1 = get_data();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    tempVar2 = get_data();\n    if (5000 < (uint)(tempVar2 - tempVar1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (condition == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (condition != 2) {\n      ramVar3 = 0;\n      tempVar1 = get_data();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        tempVar2 = get_data();\n      } while ((uint)(tempVar2 - tempVar1) < 3);\n      return 3;\n    }\n    ramVar3 = 0;\n    tempVar1 = get_data();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (settings[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | settings[2];\n        }\n        _DAT_40021004 = settings[8] | settings[9] | _DAT_40021004 & 0xffc2ffff;\n        ramVar3 = 1;\n        tempVar1 = get_data();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          tempVar2 = get_data();\n        } while ((uint)(tempVar2 - tempVar1) < 3);\n        return 3;\n      }\n      tempVar2 = get_data();\n    } while ((uint)(tempVar2 - tempVar1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_and_update_settings_08001b58",
                "param_1": "settings",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "get_data_0800115c": "get_data",
                "iRam42420000": "ramVar1",
                "iRam42420480": "ramVar2",
                "param_1[7]": "condition",
                "uRam42420060": "ramVar3"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu_clock_08002008",
            "code": "\n\n\nint calculateMpuClock_08002008(void)\n\n{\n  undefined4 clockValue1;\n  int clockValue2;\n  undefined4 clockValue3;\n  undefined4 *dataptr;\n  uint clockDivisor;\n  undefined4 *localArrayPtr;\n  byte local_24 [4];\n  undefined4 local_20 [5];\n  \n  dataptr = &DAT_080072f0;\n  localArrayPtr = local_20;\n  do {\n    clockValue1 = *dataptr;\n    clockValue3 = dataptr[1];\n    dataptr = dataptr + 2;\n    *localArrayPtr = clockValue1;\n    localArrayPtr[1] = clockValue3;\n    localArrayPtr = localArrayPtr + 2;\n  } while (dataptr != (undefined4 *)\"../Src/MPU9250.c\");\n  local_24[0] = 1;\n  local_24[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockDivisor = 8000000 / local_24[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockDivisor = 4000000;\n    }\n    clockValue2 = clockDivisor * *(byte *)((int)local_20 + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockValue2 = 8000000;\n  }\n  return clockValue2;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu_clock_08002008",
                "uVar1": "clockValue1",
                "iVar2": "clockValue2",
                "uVar3": "clockValue3",
                "puVar4": "dataptr",
                "uVar5": "clockDivisor",
                "puVar6": "localArrayPtr"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "handle_mpu_configuration_0800209c",
            "code": "\n\n\nundefined4 handle_mpu_configuration_0800209c(uint *mpu_registers,uint access_permission)\n\n{\n  char flag_1;\n  char flag_2;\n  int shift_amount;\n  uint value_1;\n  int data_value;\n  uint shifted_value;\n  \n  if ((access_permission <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | access_permission, access_permission == (access_permission & 7))) {\n    if ((int)(*mpu_registers << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | mpu_registers[2];\n    }\n    shift_amount = *mpu_registers << 0x1f;\n    if (-1 < shift_amount) {\nLAB_080020ba:\n      if ((access_permission < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | access_permission, access_permission != (access_permission & 7))) {\n        return 1;\n      }\n      if ((*mpu_registers & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | mpu_registers[3];\n      }\n      if ((int)(*mpu_registers << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | mpu_registers[4] << 3;\n      }\n      value_1 = calculate_mpu_clock_08002008();\n      DAT_200001bc = value_1 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_and_set_memory_08001104(0);\n      return 0;\n    }\n    value_1 = mpu_registers[1];\n    if (value_1 == 1) {\n      flag_2 = '\\x01';\n      flag_1 = '\\0';\n    }\n    else {\n      shifted_value = _DAT_40021000;\n      if (value_1 == 2) goto LAB_08002176;\n      flag_2 = '\\0';\n      flag_1 = '\\x01';\n    }\n    shifted_value = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(flag_1 << 6) << 0x18 | (uint)(byte)(flag_2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | value_1;\n      shift_amount = get_data_0800115c(shift_amount,shifted_value);\n      if (mpu_registers[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          data_value = get_data_0800115c();\n        } while ((uint)(data_value - shift_amount) < 0x1389);\n      }\n      else if (mpu_registers[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          data_value = get_data_0800115c();\n        } while ((uint)(data_value - shift_amount) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          data_value = get_data_0800115c();\n        } while ((uint)(data_value - shift_amount) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "handle_mpu_configuration_0800209c",
                "param_1": "mpu_registers",
                "param_2": "access_permission",
                "cVar1": "flag_1",
                "cVar2": "flag_2",
                "iVar3": "shift_amount",
                "uVar4": "value_1",
                "iVar5": "data_value",
                "uVar6": "shifted_value"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_value_08002214",
            "code": "\nundefined4 get_data_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_value_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "retrieve_shifted_value_08002250",
            "code": "\n\n\nuint retrieve_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "retrieve_shifted_value_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_parameters_08002280",
            "code": "\nvoid updateParameters_08002280(int functionPointer,uint *paramsArray)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(functionPointer + 0x20) = *(uint *)(functionPointer + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(functionPointer + 4);\n  updatedValue3 = *paramsArray;\n  updatedValue1 = *(uint *)(functionPointer + 0x20) & 0xfffffffd | paramsArray[2];\n  if (functionPointer == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | paramsArray[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | paramsArray[5] | paramsArray[6];\n  }\n  *(uint *)(functionPointer + 4) = updatedValue2;\n  *(uint *)(functionPointer + 0x18) = *(uint *)(functionPointer + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(functionPointer + 0x34) = paramsArray[1];\n  *(uint *)(functionPointer + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_parameters_08002280",
                "param_1": "functionPointer",
                "param_2": "paramsArray",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "set_flags_and_values_080022d0",
            "code": "\nvoid setFlagsAndValues_080022d0(int address,uint *values)\n\n{\n  uint result1;\n  uint result2;\n  uint result3;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffeff;\n  result2 = *(uint *)(address + 4);\n  result3 = *values;\n  result1 = *(uint *)(address + 0x20) & 0xfffffdff | values[2] << 8;\n  if (address == 0x40012c00) {\n    result1 = (result1 & 0xfffff7ff | values[3] << 8) & 0xfffffbff;\n    result2 = result2 & 0xffffcfff | (values[5] | values[6]) << 4;\n  }\n  *(uint *)(address + 4) = result2;\n  *(uint *)(address + 0x1c) = *(uint *)(address + 0x1c) & 0xffffff8c | result3;\n  *(uint *)(address + 0x3c) = values[1];\n  *(uint *)(address + 0x20) = result1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "set_flags_and_values_080022d0",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_parameters_08002324",
            "code": "\nvoid updateParameters_08002324(int baseAddress,int *parameters)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  int value4;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  value1 = *(uint *)(baseAddress + 4);\n  value2 = *parameters;\n  value3 = parameters[2];\n  value4 = 0x40012c00;\n  if (baseAddress == 0x40012c00) {\n    value4 = parameters[5];\n    value1 = value1 & 0xffffbfff;\n  }\n  if (baseAddress == 0x40012c00) {\n    value1 = value1 | value4 << 6;\n  }\n  *(uint *)(baseAddress + 4) = value1;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(baseAddress + 0x40) = parameters[1];\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_parameters_08002324",
                "param_1": "baseAddress",
                "param_2": "parameters",
                "uVar1": "value1",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_memory_08002368",
            "code": "\nvoid updateMemory_08002368(uint *memoryBlock,uint *dataBlock)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *memoryBlock;\n  if (((((memoryBlock == (uint *)0x40012c00) || (memoryBlock == (uint *)0x40000000)) ||\n       (memoryBlock == (uint *)0x40000400)) || (memoryBlock == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | dataBlock[1], memoryBlock == (uint *)0x40012c00 ||\n       (memoryBlock == (uint *)0x40000000)) ||\n      ((memoryBlock == (uint *)0x40000400 || (memoryBlock == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | dataBlock[3];\n  }\n  *memoryBlock = updatedValue;\n  memoryBlock[0xb] = dataBlock[2];\n  memoryBlock[10] = *dataBlock;\n  updatedValue = 0x40012c00;\n  if (memoryBlock == (uint *)0x40012c00) {\n    updatedValue = dataBlock[4];\n  }\n  if (memoryBlock == (uint *)0x40012c00) {\n    memoryBlock[0xc] = updatedValue;\n  }\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_memory_08002368",
                "param_1": "memoryBlock",
                "param_2": "dataBlock",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "update_data_flags_080023d0",
            "code": "\nundefined4 updateDataFlags_080023d0(undefined4 *inputPtr)\n\n{\n  if (inputPtr != (undefined4 *)0x0) {\n    if (*(char *)((int)inputPtr + 0x39) == '\\0') {\n      *(undefined *)(inputPtr + 0xe) = 0;\n      updateDataFlags_080023d0Helper;\n    }\n    *(undefined *)((int)inputPtr + 0x39) = 2;\n    update_memory_08002368(*inputPtr,inputPtr + 1);\n    *(undefined *)((int)inputPtr + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "update_data_flags_080023d0",
                "param_1": "inputPtr",
                "update_data_flags_08004d8c()": "updateDataFlagsHelper"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_parameters_08002404",
            "code": "\nvoid updateParameters_08002404(int param1,int *param2)\n\n{\n  uint updatedVar1;\n  uint updatedVar2;\n  int updatedVar3;\n  \n  *(uint *)(param1 + 0x20) = *(uint *)(param1 + 0x20) & 0xffffffef;\n  updatedVar2 = *(uint *)(param1 + 4);\n  updatedVar3 = *param2;\n  updatedVar1 = *(uint *)(param1 + 0x20) & 0xffffffdf | param2[2] << 4;\n  if (param1 == 0x40012c00) {\n    updatedVar1 = (updatedVar1 & 0xffffff7f | param2[3] << 4) & 0xffffffbf;\n    updatedVar2 = updatedVar2 & 0xfffff3ff | (param2[5] | param2[6]) << 2;\n  }\n  *(uint *)(param1 + 4) = updatedVar2;\n  *(uint *)(param1 + 0x18) = *(uint *)(param1 + 0x18) & 0xffff8cff | updatedVar3 << 8;\n  *(int *)(param1 + 0x38) = param2[1];\n  *(uint *)(param1 + 0x20) = updatedVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_parameters_08002404",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "updatedVar1",
                "uVar2": "updatedVar2",
                "iVar3": "updatedVar3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_flags_and_values_0800245c",
            "code": "\nvoid update_flags_and_values_0800245c(int *data_ptr,undefined4 param_2,undefined4 param_3)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int temp5;\n  uint flags;\n  int data;\n  \n  if (*(char *)(data_ptr + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)data_ptr + 0x39) = 2;\n  *(undefined *)(data_ptr + 0xe) = 1;\n  switch(param_3) {\n  case 0:\n    update_parameters_08002280(*data_ptr);\n    data = *data_ptr;\n    flags = *(uint *)(temp1 + 0x10);\n    *(uint *)(data + 0x18) = *(uint *)(data + 0x18) | 8;\n    *(uint *)(data + 0x18) = *(uint *)(data + 0x18) & 0xfffffffb;\n    flags = *(uint *)(data + 0x18) | flags;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_parameters_08002404(*data_ptr);\n    data = *data_ptr;\n    temp5 = *(int *)(temp2 + 0x10);\n    *(uint *)(data + 0x18) = *(uint *)(data + 0x18) | 0x800;\n    *(uint *)(data + 0x18) = *(uint *)(data + 0x18) & 0xfffffbff;\n    flags = *(uint *)(data + 0x18) | temp5 << 8;\n    break;\n  case 8:\n    set_flags_and_values_080022d0(*data_ptr);\n    data = *data_ptr;\n    flags = *(uint *)(temp3 + 0x10);\n    *(uint *)(data + 0x1c) = *(uint *)(data + 0x1c) | 8;\n    *(uint *)(data + 0x1c) = *(uint *)(data + 0x1c) & 0xfffffffb;\n    flags = *(uint *)(data + 0x1c) | flags;\n    goto LAB_080024fa;\n  case 0xc:\n    update_parameters_08002324(*data_ptr);\n    data = *data_ptr;\n    temp5 = *(int *)(temp4 + 0x10);\n    *(uint *)(data + 0x1c) = *(uint *)(data + 0x1c) | 0x800;\n    *(uint *)(data + 0x1c) = *(uint *)(data + 0x1c) & 0xfffffbff;\n    flags = *(uint *)(data + 0x1c) | temp5 << 8;\nLAB_080024fa:\n    *(uint *)(data + 0x1c) = flags;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(data + 0x18) = flags;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)data_ptr + 0x39) = 1;\n  *(undefined *)(data_ptr + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_flags_and_values_0800245c",
                "param_1": "data_ptr",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "extraout_r1_02": "temp4",
                "iVar1": "temp5",
                "uVar2": "flags",
                "iVar3": "data"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bitwise_value_08002520",
            "code": "\nvoid updateBitwiseValue_08002520(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = newValue << (bitPosition & 0xff) | *(uint *)(baseAddress + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bitwise_value_08002520",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "update_bitwise_value_08002538",
            "code": "\nundefined4 updateBitwiseValue_08002538(uint **ptr,undefined4 value)\n\n{\n  uint updatedValue;\n  uint *ptrValue;\n  \n  update_bitwise_value_08002520(*ptr,value,1);\n  ptrValue = *ptr;\n  updatedValue = 0x40012c00;\n  if (ptrValue == (uint *)0x40012c00) {\n    updatedValue = uRam40012c44 | 0x8000;\n  }\n  if (ptrValue == (uint *)0x40012c00) {\n    ptrValue[0x11] = updatedValue;\n  }\n  *ptrValue = *ptrValue | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "update_bitwise_value_08002538",
                "param_1": "ptr",
                "param_2": "value",
                "uVar1": "updatedValue",
                "puVar2": "ptrValue"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "initialize_flag_if_needed_08002564",
            "code": "\nundefined4 initializeFlagIfNeeded_08002564(int *flag,uint *data)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(flag + 0xe) != '\\x01') {\n    *(undefined *)((int)flag + 0x39) = 2;\n    *(uint *)(*flag + 0x44) =\n         *data | data[1] | data[2] | data[3] | data[4] | data[5] | data[6];\n    *(undefined *)((int)flag + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(flag + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "initialize_flag_if_needed_08002564",
                "param_1": "flag",
                "param_2": "data",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_permissions_080025a4",
            "code": "\nundefined4 updatePermissions_080025a4(int *permissions,uint *values)\n\n{\n  uint mask2;\n  undefined4 returnValue;\n  int data;\n  uint mask1;\n  \n  returnValue = 2;\n  if (*(char *)(permissions + 0xe) != '\\x01') {\n    *(undefined *)((int)permissions + 0x39) = 2;\n    data = *permissions;\n    mask1 = *values;\n    mask2 = values[1];\n    *(uint *)(data + 4) = *(uint *)(data + 4) & 0xffffff8f;\n    *(uint *)(data + 4) = *(uint *)(data + 4) | mask1;\n    *(uint *)(data + 8) = *(uint *)(data + 8) & 0xffffff7f;\n    *(uint *)(data + 8) = *(uint *)(data + 8) | mask2;\n    *(undefined *)((int)permissions + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(permissions + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_permissions_080025a4",
                "param_1": "permissions",
                "param_2": "values",
                "uVar2": "returnValue",
                "iVar3": "data",
                "uVar4": "mask1",
                "uVar1": "mask2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_values_080025e8",
            "code": "\nvoid updateValues_080025e8(int *inputArray)\n\n{\n  int firstValue;\n  int secondValue;\n  uint shiftedValue;\n  int calculatedValue1;\n  int calculatedValue2;\n  int baseAddress;\n  \n  baseAddress = *inputArray;\n  shiftedValue = inputArray[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(baseAddress + 0xc) = inputArray[2] | shiftedValue | inputArray[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | inputArray[6];\n  if (baseAddress == 0x40013800) {\n    firstValue = retrieve_shifted_value_08002250();\n    calculatedValue1 = (int)(((ulonglong)(uint)(firstValue * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100);\n    firstValue = retrieve_shifted_value_08002250();\n    calculatedValue2 = inputArray[1];\n    secondValue = retrieve_shifted_value_08002250();\n    secondValue = (uint)(firstValue * 0x19) / (uint)(calculatedValue2 << 2) +\n            (int)(((ulonglong)(uint)(secondValue * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100) *\n            -100;\n    firstValue = retrieve_shifted_value_08002250();\n    shiftedValue = (uint)(firstValue * 0x19) / (uint)(inputArray[1] << 2);\n    firstValue = retrieve_shifted_value_08002250();\n  }\n  else {\n    firstValue = get_shifted_value_08002220();\n    calculatedValue1 = (int)(((ulonglong)(uint)(firstValue * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100);\n    firstValue = get_shifted_value_08002220();\n    calculatedValue2 = inputArray[1];\n    secondValue = get_shifted_value_08002220();\n    secondValue = (uint)(firstValue * 0x19) / (uint)(calculatedValue2 << 2) +\n            (int)(((ulonglong)(uint)(secondValue * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100) *\n            -100;\n    firstValue = get_shifted_value_08002220();\n    shiftedValue = (uint)(firstValue * 0x19) / (uint)(inputArray[1] << 2);\n    firstValue = get_shifted_value_08002220();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((shiftedValue + (int)(((ulonglong)(uint)(firstValue * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (secondValue * 0x10 + 0x32U) / 100 & 0xf0) +\n       calculatedValue1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "param_1": "inputArray",
                "iVar1": "firstValue",
                "iVar2": "secondValue",
                "uVar3": "shiftedValue",
                "iVar4": "calculatedValue1",
                "iVar5": "calculatedValue2",
                "iVar6": "baseAddress"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_memory_08002724",
            "code": "\nundefined4 initializeMemory_08002724(int *memoryPointer)\n\n{\n  int tempVar;\n  \n  if (memoryPointer != (int *)0x0) {\n    if (*(char *)((int)memoryPointer + 0x39) == '\\0') {\n      *(undefined *)(memoryPointer + 0xe) = 0;\n      updateMemoryAndValues;\n    }\n    *(undefined *)((int)memoryPointer + 0x39) = 2;\n    *(uint *)(*memoryPointer + 0xc) = *(uint *)(*memoryPointer + 0xc) & 0xffffdfff;\n    updateValues;\n    tempVar = *memoryPointer;\n    *(uint *)(tempVar + 0x10) = *(uint *)(tempVar + 0x10) & 0xffffb7ff;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) & 0xffffffd5;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x2000;\n    memoryPointer[0xf] = 0;\n    *(undefined *)((int)memoryPointer + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_memory_08002724",
                "param_1": "memoryPointer",
                "iVar1": "tempVar",
                "update_memory_and_values_08004e7c()": "updateMemoryAndValues",
                "update_values_080025e8(param_1)": "updateValues"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "update_data_0800290c",
            "code": "\nundefined4 updateData_0800290c(int *data)\n\n{\n  byte byteValue;\n  int var1;\n  uint var2;\n  undefined4 var3;\n  short var4;\n  ushort *ptr1;\n  ushort *ptr2;\n  bool condition;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  var1 = *data;\n  ptr1 = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      ptr2 = ptr1 + 1;\n      *ptr1 = (ushort)((uint)(*(int *)(var1 + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ptr2 = (ushort *)((int)ptr1 + 1);\n      *ptr1 = (ushort)*(int *)(var1 + 4) & 0xff;\n    }\n    data[10] = (int)ptr2;\n  }\n  else {\n    if (data[4] == 0) {\n      byteValue = (byte)*(undefined4 *)(var1 + 4);\n      data[10] = (int)ptr1 + 1;\n    }\n    else {\n      var3 = *(undefined4 *)(var1 + 4);\n      data[10] = (int)ptr1 + 1;\n      byteValue = (byte)var3 & 0x7f;\n    }\n    *(byte *)ptr1 = byteValue;\n  }\n  var4 = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = var4;\n  if (var4 == 0) {\n    var1 = *data;\n    *(uint *)(var1 + 0xc) = *(uint *)(var1 + 0xc) & 0xffffffdf;\n    condition = *(char *)((int)data + 0x39) != '2';\n    if (condition) {\n      var2 = *(uint *)(var1 + 0xc) & 0xfffffeff;\n    }\n    else {\n      var1 = 0x12;\n      var2 = 0x32;\n    }\n    if (condition) {\n      *(uint *)(var1 + 0xc) = var2;\n      var2 = *(uint *)(var1 + 0x14) & 0xfffffffe;\n    }\n    if (condition) {\n      *(uint *)(var1 + 0x14) = var2;\n      var1 = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)var1;\n    check_and_update_data_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "update_data_0800290c",
                "param_1": "data",
                "bVar1": "byteValue",
                "iVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "sVar5": "var4",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "bVar8": "condition"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "check_and_update_data_0800299a",
            "code": "\nvoid checkAndUpdateData_0800299a(uint **data)\n\n{\n  uint var1;\n  short var2;\n  uint var3;\n  uint *var4;\n  undefined var5;\n  uint *var6;\n  uint var7;\n  bool var8;\n  \n  var6 = *data;\n  var3 = *var6;\n  var1 = var6[3];\n  if ((var3 & 0xf) == 0) {\n    if (((int)(var3 << 0x1a) < 0) && ((int)(var1 << 0x1a) < 0)) {\n      update_data_0800290c();\n      return;\n    }\n  }\n  else {\n    var7 = var6[5] & 1;\n    if ((var7 != 0) || ((var1 & 0x120) != 0)) {\n      var6 = (uint *)(var3 << 0x1f);\n      if ((int)var6 < 0) {\n        var8 = (int)(var1 << 0x17) < 0;\n        if (var8) {\n          var6 = (uint *)((uint)data[0xf] | 1);\n        }\n        if (var8) {\n          data[0xf] = var6;\n        }\n      }\n      if (((int)(var3 << 0x1d) < 0) && (var7 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(var3 << 0x1e) < 0) && (var7 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(var3 << 0x1c) < 0) && (var7 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(var3 << 0x1a) < 0) && ((int)(var1 << 0x1a) < 0)) {\n        update_data_0800290c(data);\n      }\n      var6 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((var6[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      var6[3] = var6[3] & 0xfffffedf;\n      var6[5] = var6[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(var3 << 0x18) < 0) && ((int)(var1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      var4 = data[8];\n      if (data[2] == (uint *)0x1000) {\n        var6[1] = *(ushort *)var4 & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          var4 = (uint *)((int)var4 + 2);\n        }\n        else {\n          var4 = (uint *)((int)var4 + 1);\n        }\n        data[8] = var4;\n      }\n      else {\n        data[8] = (uint *)((int)var4 + 1);\n        var6[1] = (uint)*(byte *)var4;\n      }\n      var2 = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = var2;\n      if (var2 == 0) {\n        var6[3] = var6[3] & 0xffffff7f;\n        var6[3] = var6[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(var3 << 0x19) < 0) && ((int)(var1 << 0x19) < 0)) {\n    var6[3] = var6[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      var5 = 0x22;\n    }\n    else {\n      var5 = 1;\n    }\n    *(undefined *)((int)data + 0x39) = var5;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "check_and_update_data_0800299a",
                "param_1": "data",
                "uVar1": "var1",
                "sVar2": "var2",
                "uVar3": "var3",
                "puVar4": "var4",
                "uVar5": "var5",
                "puVar6": "var6",
                "uVar7": "var7",
                "bVar8": "var8"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  processAndHandleData(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  processI2CData(0xd0,0x6b,0x80,1);\n  processI2CData(0xd0,0x6b,1);\n  processI2CData(0xd0,0x6c,0,1);\n  processI2CData(0xd0,0x19,0,1);\n  processI2CData(0xd0,0x1d,3,1);\n  processI2CData(0xd0,0x1a,3,1);\n  processI2CData(0xd0,0x1b,0x10,1);\n  processI2CData(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "process_and_handle_data_0800407c": "processAndHandleData",
                "process_i2c_data_0800403c": "processI2CData"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "calculate_sensor_data_08002b48",
            "code": "\nvoid calculateSensorData_08002b48(void)\n\n{\n  undefined4 uVar1;\n  uint inputValue;\n  int sensorData1;\n  int sensorData2;\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = 0;\n  result2 = inputValue & 0xffff0000;\n  process_and_store_data_080040e8(0xd0,0x3b,&result1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(result1._2_1_,result1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)result1,result1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)result2,result2._1_1_);\n  sensorData2 = (int)DAT_200002f6;\n  sensorData1 = (int)DAT_200002f8;\n  uVar1 = count_bits_08000c44();\n  uVar1 = calculate_float_08000cec(uVar1,0x40800000);\n  DAT_200002d0 = calculate_float_08000cec(uVar1,0x38000000);\n  uVar1 = count_bits_08000c44(sensorData2);\n  uVar1 = calculate_float_08000cec(uVar1,0x40800000);\n  DAT_200002d4 = calculate_float_08000cec(uVar1,0x38000000);\n  uVar1 = count_bits_08000c44(sensorData1);\n  uVar1 = calculate_float_08000cec(uVar1,0x40800000);\n  DAT_200002d8 = calculate_float_08000cec(uVar1,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "calculate_sensor_data_08002b48",
                "in_r3": "inputValue",
                "iVar2": "sensorData1",
                "iVar3": "sensorData2",
                "local_18": "result1",
                "local_14": "result2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "initialize_mpu9250_data_08002bf0",
            "code": "\nvoid initialize_MPU9250_data_08002bf0(void)\n\n{\n  undefined4 bit_count;\n  int int_data2;\n  int int_data1;\n  undefined4 data1;\n  undefined2 data2;\n  \n  data1 = 0;\n  data2 = 0;\n  process_and_store_data_080040e8(0xd0,0x43,&data1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(data1._2_1_,data1._3_1_);\n  DAT_200002be = CONCAT11((undefined)data1,data1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)data2,data2._1_1_);\n  int_data1 = (int)DAT_200002c0;\n  int_data2 = (int)DAT_200002c2;\n  bit_count = count_bits_08000c44();\n  bit_count = calculate_float_08000cec(bit_count,0x447a0000);\n  bit_count = calculate_float_08000cec(bit_count,0x38000000);\n  DAT_200002c4 = calculate_bitwise_operation_08000ad8(bit_count,DAT_20000000);\n  bit_count = count_bits_08000c44(int_data1);\n  bit_count = calculate_float_08000cec(bit_count,0x447a0000);\n  bit_count = calculate_float_08000cec(bit_count,0x38000000);\n  DAT_200002c8 = calculate_bitwise_operation_08000ad8(bit_count,DAT_20000004);\n  bit_count = count_bits_08000c44(int_data2);\n  bit_count = calculate_float_08000cec(bit_count,0x447a0000);\n  bit_count = calculate_float_08000cec(bit_count,0x38000000);\n  DAT_200002cc = calculate_bitwise_operation_08000ad8(bit_count,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_data_08002bf0",
                "local_20": "data1",
                "local_1c": "data2",
                "iVar3": "int_data1",
                "iVar2": "int_data2",
                "uVar1": "bit_count"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "process_sensor_data_08002cb0",
            "code": "\nvoid process_sensor_data_08002cb0(undefined4 data_param_1,undefined4 data_param_2,undefined4 data_param_3,uint data_param_4)\n\n{\n  undefined4 bit_count;\n  uint sensor_data;\n  \n  sensor_data = data_param_4;\n  send_i2c_data(0xd0,0x37,0x22,1,data_param_1,data_param_2,data_param_3);\n  send_i2c_data(0xd0,0x6a,1);\n  process_and_handle_data(0x18,0,\"../Src/MPU9250.c\",0xad);\n  send_i2c_data(0x18,0xb,1);\n  send_i2c_data(0x18,10,0,1);\n  send_i2c_data(0x18,10,0xf,1);\n  process_and_store_data(0x18,0x10,&sensor_data,3,\"../Src/MPU9250.c\",0xb6);\n  bit_count = count_set_bits((sensor_data & 0xff) - 0x80);\n  bit_count = calculate_float(bit_count,0x3b800000);\n  DAT_200002e8 = calculate_floating_point_value(bit_count,0x3f800000);\n  bit_count = count_set_bits((sensor_data >> 8 & 0xff) - 0x80);\n  bit_count = calculate_float(bit_count,0x3b800000);\n  DAT_200002ec = calculate_floating_point_value(bit_count,0x3f800000);\n  bit_count = count_set_bits((sensor_data >> 0x10 & 0xff) - 0x80);\n  bit_count = calculate_float(bit_count,0x3b800000);\n  DAT_200002f0 = calculate_floating_point_value(bit_count,0x3f800000);\n  send_i2c_data(0x18,10,0,1);\n  send_i2c_data(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "process_sensor_data_08002cb0",
                "param_1": "data_param_1",
                "param_2": "data_param_2",
                "param_3": "data_param_3",
                "param_4": "data_param_4",
                "uVar1": "bit_count",
                "local_c": "sensor_data",
                "process_i2c_data_0800403c": "send_i2c_data",
                "process_and_handle_data_0800407c": "process_and_handle_data",
                "process_and_store_data_080040e8": "process_and_store_data",
                "count_bits_08000c44": "count_set_bits",
                "calculate_float_08000cec": "calculate_float",
                "calculate_floating_point_value_08000adc": "calculate_floating_point_value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_mpu9250_data_08002d88",
            "code": "\nvoid process_MPU9250_data_08002d88(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  undefined4 floatResult1;\n  undefined4 floatResult2;\n  int intValue;\n  undefined2 dataSize;\n  undefined stackVar1;\n  undefined stackVar2;\n  undefined localVar1;\n  undefined localVar2;\n  byte byteVar;\n  undefined stackVar3;\n  \n  stackVar3 = (undefined)((uint)param4 >> 0x18);\n  dataSize = 0;\n  stackVar1 = 0;\n  stackVar2 = 0;\n  localVar1 = 0;\n  localVar2 = 0;\n  byteVar = 0;\n  result = process_and_handle_data_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,param1,param2);\n  if (result << 0x1f < 0) {\n    process_and_store_data_080040e8(0x18,3,&dataSize,7,\"../Src/MPU9250.c\",0xda);\n    floatResult2 = DAT_2000001c;\n    if ((int)((uint)byteVar << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(stackVar2,stackVar1);\n      DAT_200002bc = CONCAT11(localVar2,localVar1);\n      intValue = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = dataSize;\n      floatResult1 = count_bits_08000c44();\n      floatResult1 = calculate_float_08000cec(floatResult1,floatResult2);\n      floatResult1 = calculate_float_08000cec(floatResult1,DAT_200002e8);\n      floatResult1 = calculate_bitwise_operation_08000ad8(floatResult1,DAT_20000020);\n      DAT_200002dc = calculate_float_08000cec(floatResult1,DAT_2000002c);\n      floatResult1 = count_bits_08000c44(intValue);\n      floatResult1 = calculate_float_08000cec(floatResult1,floatResult2);\n      floatResult1 = calculate_float_08000cec(floatResult1,DAT_200002ec);\n      floatResult1 = calculate_bitwise_operation_08000ad8(floatResult1,DAT_20000024);\n      DAT_200002e0 = calculate_float_08000cec(floatResult1,DAT_20000030);\n      floatResult1 = count_bits_08000c44(result);\n      floatResult2 = calculate_float_08000cec(floatResult1,floatResult2);\n      floatResult2 = calculate_float_08000cec(floatResult2,DAT_200002f0);\n      floatResult2 = calculate_bitwise_operation_08000ad8(floatResult2,DAT_20000028);\n      DAT_200002e4 = calculate_float_08000cec(floatResult2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_mpu9250_data_08002d88",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "floatResult1",
                "uVar3": "floatResult2",
                "iVar4": "intValue",
                "local_28": "dataSize",
                "uStack_26": "stackVar1",
                "uStack_25": "stackVar2",
                "local_24": "localVar1",
                "local_23": "localVar2",
                "local_22": "byteVar",
                "uStack_21": "stackVar3"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_sensor_system_08002ea0",
            "code": "\nvoid initialize_sensor_system_08002ea0(undefined4 config_param_1,undefined4 config_param_2,undefined4 config_param_3,undefined4 config_param_4)\n\n{\n  undefined4 extra_output;\n  \n  initialize_mpu9250();\n  process_sensor_data();\n  set_global_sensor_value(0x3f19999a);\n  set_global_sensor_parameter(0,extra_output,config_param_3,config_param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_sensor_system_08002ea0",
                "param_1": "config_param_1",
                "param_2": "config_param_2",
                "param_3": "config_param_3",
                "param_4": "config_param_4",
                "extraout_r1": "extra_output",
                "initialize_mpu9250_08002ad0": "initialize_mpu9250",
                "process_sensor_data_08002cb0": "process_sensor_data",
                "set_global_value_08003314": "set_global_sensor_value",
                "set_global_parameter_08003320": "set_global_sensor_parameter"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_floating_point_value_08002ec0",
            "code": "\nvoid calculateFloatingPointValue_08002ec0(void)\n\n{\n  undefined4 input1;\n  undefined4 input2;\n  undefined4 input3;\n  \n  input2 = DAT_2000024c;\n  input3 = DAT_20000010;\n  input1 = calculate_bitwise_operation_08000ad8(0x3f800000,DAT_20000010);\n  input2 = calculate_float_08000cec(input1,input2);\n  input3 = calculate_float_08000cec(input3,DAT_2000000c);\n  DAT_2000000c = calculate_floating_point_value_08000adc(input3,input2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_floating_point_value_08002ec0",
                "uVar1": "input1",
                "uVar2": "input2",
                "uVar3": "input3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "initialize_memory_08002ed4",
            "code": "\nvoid initializeMemory_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 data1;\n  undefined4 data2;\n  \n  data1 = DAT_20000248;\n  data2 = uRam20000018;\n  result1 = FUN_08000ad8(0x3f800000,uRam20000018);\n  data1 = FUN_08000cec(result1,data1);\n  data2 = FUN_08000cec(data2,uRam20000014);\n  uRam20000014 = FUN_08000adc(data2,data1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "initialize_memory_08002ed4",
                "uVar1": "result1",
                "uVar2": "data1",
                "uVar3": "data2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "process_data_08002ee8",
            "code": "\nvoid processData_08002ee8(void)\n\n{\n  undefined4 dataPointer;\n  int concatenationResult;\n  \n  dataPointer = DAT_20000250;\n  concatenationResult = checkConcatenationResult(DAT_20000250,0xc3340000);\n  if ((concatenationResult != 0) && (concatenationResult = checkNullTermination(dataPointer,0x42b40000), concatenationResult != 0)) {\n    calculateFloatingPointValue(dataPointer,0x42b40000);\n    return;\n  }\n  calculateBitwiseOperation(dataPointer,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "process_data_08002ee8",
                "uVar1": "dataPointer",
                "iVar2": "concatenationResult",
                "check_concatenation_result_08001050": "checkConcatenationResult",
                "check_for_null_termination_08001028": "checkNullTermination",
                "calculate_floating_point_value_08000adc": "calculateFloatingPointValue",
                "calculate_bitwise_operation_08000ad8": "calculateBitwiseOperation"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "process_sensor_values_08002f28",
            "code": "\n\n\nvoid process_sensor_values_08002f28(void)\n\n{\n  undefined4 leading_zeros_count;\n  \n  calculate_sensor_data();\n  initialize_mpu9250_data();\n  process_mpu9250_data();\n  DAT_20000258 = get_data();\n  leading_zeros_count = count_leading_zeros(DAT_20000258 - DAT_20000254);\n  calculate_float_value(leading_zeros_count,0x447a0000);\n  set_global_parameter();\n  DAT_20000254 = DAT_20000258;\n  improved_calculate_values(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  leading_zeros_count = initialize_memory();\n  calculate_float(leading_zeros_count,0x41200000);\n  DAT_20001395._0_2_ = convert_unsigned_to_signed();\n  leading_zeros_count = calculate_floating_point_value();\n  calculate_float(leading_zeros_count,0x41200000);\n  DAT_20001395._2_2_ = convert_unsigned_to_signed();\n  process_data();\n  DAT_20001399 = convert_unsigned_to_signed();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "process_sensor_values_08002f28",
                "uVar1": "leading_zeros_count",
                "calculate_sensor_data_08002b48": "calculate_sensor_data",
                "initialize_mpu9250_data_08002bf0": "initialize_mpu9250_data",
                "process_mpu9250_data_08002d88": "process_mpu9250_data",
                "thunk_get_data_0800115c": "get_data",
                "count_leading_zeros_08000c3c": "count_leading_zeros",
                "calculate_float_value_08000e54": "calculate_float_value",
                "set_global_parameter_08003320": "set_global_parameter",
                "improved_calculate_values_08003330": "improved_calculate_values",
                "initialize_memory_08002ed4": "initialize_memory",
                "calculate_float_08000cec": "calculate_float",
                "convert_unsigned_to_signed_08001078": "convert_unsigned_to_signed",
                "calculate_floating_point_value_08002ec0": "calculate_floating_point_value",
                "process_data_08002ee8": "process_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "convert_local_cto_int_08003034",
            "code": "\nuint convertLocalCtoInt_08003034(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 convertedValue;\n  \n  convertedValue = input4;\n  process_data_validation_080040b8(0xee,0,&convertedValue,3,\"../Src/MS5611.c\",0x8c,input3);\n  return (uint)CONCAT12((undefined)convertedValue,CONCAT11(convertedValue._1_1_,convertedValue._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "convert_local_cto_int_08003034",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_c": "convertedValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_initial_value_08003068",
            "code": "\nundefined4 getInitialValue_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_initial_value_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "initialize_sensor_data_08003298",
            "code": "\nvoid initializeSensorData_08003298(void)\n\n{\n  int index;\n  undefined tempByte1;\n  undefined tempByte2;\n  \n  index = 0;\n  readI2CData(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    tempByte1 = 0;\n    tempByte2 = 0;\n    processAndStoreData(0xee,index + 0xa0U & 0xffff,&tempByte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(tempByte1,tempByte2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "initialize_sensor_data_08003298",
                "local_1c": "tempByte1",
                "local_1b": "tempByte2",
                "process_i2c_data_0800403c": "readI2CData",
                "iVar1": "index",
                "process_and_store_data_080040e8": "processAndStoreData"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_global_value_08003314",
            "code": "\nvoid set_global_value_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_global_value_08003314",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_global_parameter_08003320",
            "code": "\nvoid setGlobalParameter_08003320(undefined4 newValue)\n\n{\n  DAT_20000360 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_global_parameter_08003320",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "improved_calculate_values_08003330",
            "code": "\nvoid improved_calculate_values_08003330(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4,\n                 undefined4 input_param_5,undefined4 input_param_6,undefined4 input_param_7,undefined4 input_param_8,\n                 undefined4 input_param_9,undefined4 *output_params)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  int concatenation_success;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  int result_7;\n  undefined4 result_8;\n  undefined4 result_9;\n  undefined4 result_10;\n  undefined4 result_11;\n  undefined4 result_12;\n  undefined4 result_13;\n  undefined4 result_14;\n  undefined4 result_15;\n  undefined4 result_16;\n  undefined4 result_17;\n  int result_18;\n  undefined4 result_19;\n  undefined4 result_20;\n  undefined4 result_21;\n  undefined4 result_22;\n  undefined4 result_23;\n  undefined4 result_24;\n  int result_25;\n  undefined4 result_26;\n  undefined4 result_27;\n  undefined4 result_28;\n  int result_29;\n  undefined8 result_30;\n  undefined8 result_31;\n  \n  result_28 = DAT_20000048;\n  result_27 = DAT_20000044;\n  result_29 = DAT_20000040;\n  result_26 = DAT_2000003c;\n  result_1 = calculate_float_08000cec(input_param_1,input_param_1);\n  result_2 = calculate_float_08000cec(input_param_2);\n  result_1 = calculate_floating_point_value_08000adc(result_1,result_2);\n  result_2 = calculate_float_08000cec(input_param_3);\n  calculate_floating_point_value_08000adc(result_1,result_2);\n  compute_value_08000428();\n  perform_calculation_08005bc8();\n  result_1 = calculate_floating_point_08000a30();\n  concatenation_success = is_concatenation_successful_08001014(result_1,0);\n  if (concatenation_success == 0) {\n    result_2 = calculate_float_08000cec(input_param_7);\n    result_3 = calculate_float_08000cec(input_param_8);\n    result_2 = calculate_floating_point_value_08000adc(result_2,result_3);\n    result_3 = calculate_float_08000cec(input_param_9);\n    calculate_floating_point_value_08000adc(result_2,result_3);\n    compute_value_08000428();\n    perform_calculation_08005bc8();\n    result_2 = calculate_floating_point_08000a30();\n    concatenation_success = is_concatenation_successful_08001014(result_2,0);\n    if (concatenation_success == 0) {\n      result_30 = compute_value_08000428(input_param_4);\n      calculate_result_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0xa2529d39,0x3f91df46);\n      result_3 = calculate_floating_point_08000a30();\n      result_30 = compute_value_08000428(input_param_5);\n      calculate_result_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0xa2529d39,0x3f91df46);\n      result_4 = calculate_floating_point_08000a30();\n      result_30 = compute_value_08000428(input_param_6);\n      calculate_result_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0xa2529d39,0x3f91df46);\n      result_5 = calculate_floating_point_08000a30();\n      concatenation_success = calculate_floating_point_value_08000adc(result_26);\n      result_6 = calculate_floating_point_value_08000adc(result_29);\n      result_7 = calculate_floating_point_value_08000adc(result_27,result_27);\n      result_8 = calculate_floating_point_value_08000adc(result_28,result_28);\n      result_9 = calculate_float_08000cec(result_26);\n      result_10 = calculate_float_08000cec(result_26,result_29);\n      result_11 = calculate_float_08000cec(result_26,result_27);\n      result_12 = calculate_float_08000cec(result_29);\n      result_13 = calculate_float_08000cec(result_29,result_28);\n      result_14 = calculate_float_08000cec(result_27,result_27);\n      result_15 = calculate_float_08000cec(result_28,result_28);\n      result_1 = calculate_float_value_08000e54(0x3f800000,result_1);\n      result_2 = calculate_float_value_08000e54(0x3f800000,result_2);\n      result_16 = calculate_float_08000cec(input_param_7,result_2);\n      result_17 = calculate_float_08000cec(input_param_8,result_2);\n      result_2 = calculate_float_08000cec(input_param_9,result_2);\n      result_18 = calculate_float_08000cec(concatenation_success,result_16);\n      result_19 = calculate_float_08000cec(concatenation_success,result_17);\n      result_20 = calculate_float_08000cec(concatenation_success,result_2);\n      result_21 = calculate_float_08000cec(result_6,result_16);\n      result_22 = calculate_float_08000cec(result_9,result_16);\n      result_23 = calculate_float_08000cec(result_28,result_19);\n      result_22 = calculate_bitwise_operation_08000ad8(result_22,result_23);\n      result_23 = calculate_float_08000cec(result_27,result_20);\n      result_22 = calculate_floating_point_value_08000adc(result_22,result_23);\n      result_23 = calculate_float_08000cec(result_12,result_16);\n      result_22 = calculate_floating_point_value_08000adc(result_22,result_23);\n      result_23 = calculate_float_08000cec(result_6,result_17);\n      result_23 = calculate_float_08000cec(result_23,result_27);\n      result_22 = calculate_floating_point_value_08000adc(result_22,result_23);\n      result_23 = calculate_float_08000cec(result_6,result_2);\n      result_23 = calculate_float_08000cec(result_23,result_28);\n      result_22 = calculate_floating_point_value_08000adc(result_22,result_23);\n      result_23 = calculate_float_08000cec(result_14,result_16);\n      result_22 = calculate_bitwise_operation_08000ad8(result_22,result_23);\n      result_23 = calculate_float_08000cec(result_15,result_16);\n      result_22 = calculate_bitwise_operation_08000ad8(result_22,result_23);\n      result_23 = calculate_float_08000cec(result_28,result_18);\n      result_24 = calculate_float_08000cec(result_9,result_17);\n      result_23 = calculate_floating_point_value_08000adc(result_23,result_24);\n      result_20 = calculate_float_08000cec(result_29,result_20);\n      result_20 = calculate_bitwise_operation_08000ad8(result_23,result_20);\n      result_23 = calculate_float_08000cec(result_27,result_21);\n      result_20 = calculate_floating_point_value_08000adc(result_20,result_23);\n      result_23 = calculate_float_08000cec(result_12,result_17);\n      result_20 = calculate_bitwise_operation_08000ad8(result_20,result_23);\n      result_23 = calculate_float_08000cec(result_14,result_17);\n      result_20 = calculate_floating_point_value_08000adc(result_20,result_23);\n      result_23 = calculate_float_08000cec(result_7,result_2);\n      result_23 = calculate_float_08000cec(result_23,result_28);\n      result_20 = calculate_floating_point_value_08000adc(result_20,result_23);\n      result_23 = calculate_float_08000cec(result_15,result_17);\n      result_20 = calculate_bitwise_operation_08000ad8(result_20,result_23);\n      result_22 = calculate_float_08000cec(result_22,result_22);\n      result_20 = calculate_float_08000cec(result_20,result_20);\n      calculate_floating_point_value_08000adc(result_22,result_20);\n      compute_value_08000428();\n      perform_calculation_08005bc8();\n      result_25 = calculate_floating_point_08000a30();\n      result_20 = calculate_float_08000cec(result_18 + -0x80000000,result_27);\n      result_19 = calculate_float_08000cec(result_29,result_19);\n      result_19 = calculate_floating_point_value_08000adc(result_20,result_19);\n      result_9 = calculate_float_08000cec(result_9,result_2);\n      result_9 = calculate_floating_point_value_08000adc(result_19,result_9);\n      result_19 = calculate_float_08000cec(result_28,result_21);\n      result_9 = calculate_floating_point_value_08000adc(result_9,result_19);\n      result_19 = calculate_float_08000cec(result_12,result_2);\n      result_9 = calculate_bitwise_operation_08000ad8(result_9,result_19);\n      result_19 = calculate_float_08000cec(result_7,result_17);\n      result_19 = calculate_float_08000cec(result_19,result_28);\n      result_9 = calculate_floating_point_value_08000adc(result_9,result_19);\n      result_19 = calculate_float_08000cec(result_14,result_2);\n      result_9 = calculate_bitwise_operation_08000ad8(result_9,result_19);\n      result_19 = calculate_float_08000cec(result_15,result_2);\n      result_9 = calculate_floating_point_value_08000adc(result_9,result_19);\n      result_19 = calculate_floating_point_value_08000adc(result_9,result_9);\n      result_20 = calculate_floating_point_value_08000adc(result_13);\n      result_21 = calculate_float_08000cec(result_27,concatenation_success);\n      result_20 = calculate_bitwise_operation_08000ad8(result_20,result_21);\n      result_21 = calculate_float_08000cec(input_param_1,result_1);\n      result_20 = calculate_bitwise_operation_08000ad8(result_20,result_21);\n      result_21 = calculate_float_08000cec(result_28,result_7);\n      result_22 = calculate_floating_point_value_08000adc(result_10);\n      result_21 = calculate_floating_point_value_08000adc(result_21,result_22);\n      result_22 = calculate_float_08000cec(input_param_2,result_1);\n      result_21 = calculate_bitwise_operation_08000ad8(result_21,result_22);\n      result_22 = calculate_float_08000cec(result_27,result_9);\n      result_23 = calculate_bitwise_operation_08000ad8(0x3f000000,result_14);\n      result_15 = calculate_bitwise_operation_08000ad8(result_23,result_15);\n      result_15 = calculate_float_08000cec(result_15,result_25);\n      result_23 = calculate_bitwise_operation_08000ad8(result_13,result_11);\n      result_23 = calculate_float_08000cec(result_23,result_9);\n      result_15 = calculate_floating_point_value_08000adc(result_15,result_23);\n      result_15 = calculate_bitwise_operation_08000ad8(result_15,result_16);\n      result_16 = calculate_float_08000cec(result_29,result_9);\n      result_23 = calculate_float_08000cec(result_29,result_27);\n      result_24 = calculate_float_08000cec(result_26,result_28);\n      result_23 = calculate_bitwise_operation_08000ad8(result_23,result_24);\n      result_23 = calculate_float_08000cec(result_23,result_25);\n      result_24 = calculate_float_08000cec(result_27,result_28);\n      result_10 = calculate_floating_point_value_08000adc(result_24,result_10);\n      result_10 = calculate_float_08000cec(result_10,result_9);\n      result_10 = calculate_floating_point_value_08000adc(result_23,result_10);\n      result_10 = calculate_bitwise_operation_08000ad8(result_10,result_17);\n      result_17 = calculate_float_08000cec(result_27,result_25);\n      result_23 = calculate_bitwise_operation_08000ad8(0x3f000000,result_12);\n      result_23 = calculate_bitwise_operation_08000ad8(result_23,result_14);\n      result_23 = calculate_float_08000cec(result_23,result_9);\n      result_11 = calculate_floating_point_value_08000adc(result_11,result_13);\n      result_11 = calculate_float_08000cec(result_11,result_25);\n      result_11 = calculate_floating_point_value_08000adc(result_23,result_11);\n      result_2 = calculate_bitwise_operation_08000ad8(result_11,result_2);\n      result_11 = calculate_float_08000cec(result_7 + -0x80000000,result_20);\n      result_13 = calculate_float_08000cec(result_6,result_21);\n      result_11 = calculate_floating_point_value_08000adc(result_11,result_13);\n      result_13 = calculate_float_08000cec(result_22,result_15);\n      result_11 = calculate_bitwise_operation_08000ad8(result_11,result_13);\n      result_13 = calculate_float_08000cec(result_28,result_25 + -0x80000000);\n      result_13 = calculate_floating_point_value_08000adc(result_13,result_16);\n      result_13 = calculate_float_08000cec(result_13,result_10);\n      result_11 = calculate_floating_point_value_08000adc(result_11,result_13);\n      result_13 = calculate_float_08000cec(result_17,result_2);\n      result_11 = calculate_floating_point_value_08000adc(result_11,result_13);\n      result_12 = calculate_floating_point_value_08000adc(result_12);\n      result_12 = calculate_bitwise_operation_08000ad8(0x3f800000,result_12);\n      result_13 = calculate_floating_point_value_08000adc(result_14);\n      result_12 = calculate_bitwise_operation_08000ad8(result_12,result_13);\n      result_1 = calculate_float_08000cec(input_param_3,result_1);\n      result_1 = calculate_bitwise_operation_08000ad8(result_12,result_1);\n      result_12 = calculate_float_08000cec(result_28,result_9);\n      result_9 = calculate_float_08000cec(result_26,result_9);\n      result_13 = calculate_float_08000cec(result_8,result_20);\n      result_14 = calculate_float_08000cec(concatenation_success,result_21);\n      result_13 = calculate_floating_point_value_08000adc(result_13,result_14);\n      result_14 = calculate_float_08000cec(result_29,0x40800000);\n      result_14 = calculate_float_08000cec(result_14,result_1);\n      result_13 = calculate_bitwise_operation_08000ad8(result_13,result_14);\n      result_14 = calculate_float_08000cec(result_15,result_12);\n      result_13 = calculate_floating_point_value_08000adc(result_13,result_14);\n      result_14 = calculate_floating_point_value_08000adc(result_17,result_9);\n      result_14 = calculate_float_08000cec(result_14,result_10);\n      result_13 = calculate_floating_point_value_08000adc(result_13,result_14);\n      result_14 = calculate_float_08000cec(result_28,result_25);\n      result_17 = calculate_float_08000cec(result_29,result_19);\n      result_14 = calculate_bitwise_operation_08000ad8(result_14,result_17);\n      result_14 = calculate_float_08000cec(result_14,result_2);\n      result_13 = calculate_floating_point_value_08000adc(result_13,result_14);\n      result_18 = calculate_floating_point_value_08000adc(result_25,result_25);\n      result_14 = calculate_float_08000cec(result_29,result_25);\n      result_17 = calculate_float_08000cec(concatenation_success + -0x80000000,result_20);\n      result_8 = calculate_float_08000cec(result_8,result_21);\n      result_8 = calculate_floating_point_value_08000adc(result_17,result_8);\n      result_17 = calculate_float_08000cec(result_27,0x40800000);\n      result_1 = calculate_float_08000cec(result_17,result_1);\n      result_1 = calculate_bitwise_operation_08000ad8(result_8,result_1);\n      result_8 = calculate_float_08000cec(result_27,result_18 + -0x80000000);\n      result_8 = calculate_bitwise_operation_08000ad8(result_8,result_9);\n      result_8 = calculate_float_08000cec(result_8,result_15);\n      result_1 = calculate_floating_point_value_08000adc(result_1,result_8);\n      result_8 = calculate_floating_point_value_08000adc(result_12,result_14);\n      result_8 = calculate_float_08000cec(result_8,result_10);\n      result_1 = calculate_floating_point_value_08000adc(result_1,result_8);\n      result_8 = calculate_float_08000cec(result_26,result_25);\n      result_9 = calculate_float_08000cec(result_27,result_19);\n      result_8 = calculate_bitwise_operation_08000ad8(result_8,result_9);\n      result_8 = calculate_float_08000cec(result_8,result_2);\n      result_8 = calculate_floating_point_value_08000adc(result_1,result_8);\n      result_1 = calculate_float_08000cec(result_6,result_20);\n      result_6 = calculate_float_08000cec(result_7,result_21);\n      result_1 = calculate_floating_point_value_08000adc(result_1,result_6);\n      result_6 = calculate_float_08000cec(result_28,result_18 + -0x80000000);\n      result_6 = calculate_floating_point_value_08000adc(result_6,result_16);\n      result_6 = calculate_float_08000cec(result_6,result_15);\n      result_1 = calculate_floating_point_value_08000adc(result_1,result_6);\n      result_6 = calculate_float_08000cec(result_26,result_25 + -0x80000000);\n      result_6 = calculate_floating_point_value_08000adc(result_6,result_22);\n      result_6 = calculate_float_08000cec(result_6,result_10);\n      result_1 = calculate_floating_point_value_08000adc(result_1,result_6);\n      result_2 = calculate_float_08000cec(result_2,result_14);\n      result_6 = calculate_floating_point_value_08000adc(result_1,result_2);\n      result_1 = calculate_float_08000cec(result_11);\n      result_2 = calculate_float_08000cec(result_13);\n      result_1 = calculate_floating_point_value_08000adc(result_1,result_2);\n      result_2 = calculate_float_08000cec(result_8,result_8);\n      result_1 = calculate_floating_point_value_08000adc(result_1,result_2);\n      result_2 = calculate_float_08000cec(result_6,result_6);\n      calculate_floating_point_value_08000adc(result_1,result_2);\n      compute_value_08000428();\n      perform_calculation_08005bc8();\n      result_1 = calculate_floating_point_08000a30();\n      result_9 = calculate_float_value_08000e54(0x3f800000,result_1);\n      result_1 = DAT_2000035c;\n      result_2 = calculate_float_08000cec(result_29 + -0x80000000,result_3);\n      result_10 = calculate_float_08000cec(result_27,result_4);\n      result_2 = calculate_bitwise_operation_08000ad8(result_2,result_10);\n      result_10 = calculate_float_08000cec(result_28,result_5);\n      result_2 = calculate_bitwise_operation_08000ad8(result_2,result_10);\n      result_10 = calculate_float_08000cec(result_2,0x3f000000);\n      result_11 = calculate_float_08000cec(result_11,result_9);\n      result_2 = DAT_20000360;\n      result_11 = calculate_float_08000cec(result_11,result_1);\n      result_10 = calculate_bitwise_operation_08000ad8(result_10,result_11);\n      result_2 = calculate_float_08000cec(result_10,result_2);\n      result_10 = calculate_floating_point_value_08000adc(result_2,result_26);\n      result_11 = calculate_float_08000cec(result_26,result_3);\n      result_12 = calculate_float_08000cec(result_27,result_5);\n      result_2 = DAT_20000360;\n      result_11 = calculate_floating_point_value_08000adc(result_11,result_12);\n      result_12 = calculate_float_08000cec(result_28,result_4);\n      result_11 = calculate_bitwise_operation_08000ad8(result_11,result_12);\n      result_11 = calculate_float_08000cec(result_11,0x3f000000);\n      result_12 = calculate_float_08000cec(result_13,result_9);\n      result_12 = calculate_float_08000cec(result_12,result_1);\n      result_11 = calculate_bitwise_operation_08000ad8(result_11,result_12);\n      result_2 = calculate_float_08000cec(result_11,result_2);\n      result_11 = calculate_floating_point_value_08000adc(result_2,result_29);\n      result_2 = DAT_20000360;\n      result_12 = calculate_float_08000cec(result_26,result_4);\n      result_13 = calculate_float_08000cec(result_29,result_5);\n      result_12 = calculate_bitwise_operation_08000ad8(result_12,result_13);\n      result_13 = calculate_float_08000cec(result_28,result_3);\n      result_12 = calculate_floating_point_value_08000adc(result_12,result_13);\n      result_12 = calculate_float_08000cec(result_12,0x3f000000);\n      result_8 = calculate_float_08000cec(result_8,result_9);\n      result_8 = calculate_float_08000cec(result_8,result_1);\n      result_8 = calculate_bitwise_operation_08000ad8(result_12,result_8);\n      result_2 = calculate_float_08000cec(result_8,result_2);\n      result_2 = calculate_floating_point_value_08000adc(result_2,result_27);\n      result_26 = calculate_float_08000cec(result_26,result_5);\n      result_4 = calculate_float_08000cec(result_29,result_4);\n      result_26 = calculate_floating_point_value_08000adc(result_26,result_4);\n      result_27 = calculate_float_08000cec(result_27,result_3);\n      result_26 = calculate_bitwise_operation_08000ad8(result_26,result_27);\n      result_27 = calculate_float_08000cec(result_26,0x3f000000);\n      result_26 = calculate_float_08000cec(result_6,result_9);\n      result_1 = calculate_float_08000cec(result_26,result_1);\n      result_26 = DAT_20000360;\n      result_27 = calculate_bitwise_operation_08000ad8(result_27,result_1);\n      result_26 = calculate_float_08000cec(result_27,result_26);\n      result_26 = calculate_floating_point_value_08000adc(result_26,result_28);\n      result_27 = calculate_float_08000cec(result_10,result_10);\n      result_28 = calculate_float_08000cec(result_11,result_11);\n      result_27 = calculate_floating_point_value_08000adc(result_27,result_28);\n      result_28 = calculate_float_08000cec(result_2,result_2);\n      result_27 = calculate_floating_point_value_08000adc(result_27,result_28);\n      result_28 = calculate_float_08000cec(result_26,result_26);\n      calculate_floating_point_value_08000adc(result_27,result_28);\n      compute_value_08000428();\n      perform_calculation_08005bc8();\n      result_27 = calculate_floating_point_08000a30();\n      result_27 = calculate_float_value_08000e54(0x3f800000,result_27);\n      result_28 = calculate_float_08000cec(result_10,result_27);\n      DAT_2000003c = result_28;\n      result_29 = calculate_float_08000cec(result_11,result_27);\n      DAT_20000040 = result_29;\n      result_1 = calculate_float_08000cec(result_2,result_27);\n      DAT_20000044 = result_1;\n      DAT_20000048 = calculate_float_08000cec(result_26,result_27);\n      result_26 = calculate_float_08000cec(result_29,DAT_20000048);\n      result_27 = calculate_float_08000cec(result_28,result_1);\n      result_26 = calculate_bitwise_operation_08000ad8(result_26,result_27);\n      calculate_floating_point_value_08000adc(result_26,result_26);\n      compute_value_08000428();\n      result_30 = validate_and_initialize_data_08005854();\n      result_30 = calculate_result_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)result_30,(int)((ulonglong)result_30 >> 0x20),0x54442d18,0x400921fb);\n      result_26 = calculate_floating_point_08000a30();\n      *output_params = result_26;\n      result_29 = DAT_20000040;\n      result_26 = DAT_2000003c;\n      result_27 = calculate_float_08000cec(DAT_2000003c,DAT_2000003c);\n      result_28 = calculate_float_08000cec(result_29,result_29);\n      result_28 = calculate_bitwise_operation_08000ad8(result_27,result_28);\n      result_27 = DAT_20000044;\n      result_1 = calculate_float_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_bitwise_operation_08000ad8(result_28,result_1);\n      result_28 = DAT_20000048;\n      result_2 = calculate_float_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_value_08000adc(result_1,result_2);\n      result_30 = compute_value_08000428();\n      result_26 = calculate_float_08000cec(result_26,result_29);\n      result_27 = calculate_float_08000cec(result_27,result_28);\n      result_26 = calculate_floating_point_value_08000adc(result_26,result_27);\n      calculate_floating_point_value_08000adc(result_26,result_26);\n      result_31 = compute_value_08000428();\n      result_30 = thunk_calculate_value_08006070((int)result_31,(int)((ulonglong)result_31 >> 0x20),(int)result_30,\n                                  (int)((ulonglong)result_30 >> 0x20));\n      result_30 = calculate_result_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)result_30,(int)((ulonglong)result_30 >> 0x20),0x54442d18,0x400921fb);\n      result_26 = calculate_floating_point_08000a30();\n      output_params[1] = result_26;\n      result_29 = DAT_20000040;\n      result_26 = DAT_2000003c;\n      result_27 = calculate_float_08000cec(DAT_2000003c,DAT_2000003c);\n      result_28 = calculate_float_08000cec(result_29,result_29);\n      result_28 = calculate_floating_point_value_08000adc(result_27,result_28);\n      result_27 = DAT_20000044;\n      result_1 = calculate_float_08000cec(DAT_20000044,DAT_20000044);\n      result_1 = calculate_bitwise_operation_08000ad8(result_28,result_1);\n      result_28 = DAT_20000048;\n      result_2 = calculate_float_08000cec(DAT_20000048,DAT_20000048);\n      calculate_bitwise_operation_08000ad8(result_1,result_2);\n      result_30 = compute_value_08000428();\n      result_27 = calculate_float_08000cec(result_29,result_27);\n      result_26 = calculate_float_08000cec(result_26,result_28);\n      result_26 = calculate_floating_point_value_08000adc(result_27,result_26);\n      calculate_floating_point_value_08000adc(result_26,result_26);\n      result_31 = compute_value_08000428();\n      result_30 = thunk_calculate_value_08006070((int)result_31,(int)((ulonglong)result_31 >> 0x20),(int)result_30,\n                                  (int)((ulonglong)result_30 >> 0x20));\n      result_30 = calculate_result_080004d0((int)result_30,(int)((ulonglong)result_30 >> 0x20),0,0x40668000);\n      calculate_floating_point_08000724((int)result_30,(int)((ulonglong)result_30 >> 0x20),0x54442d18,0x400921fb);\n      result_26 = calculate_floating_point_08000a30();\n      output_params[2] = result_26;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "improved_calculate_values_08003330",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "param_5": "input_param_5",
                "param_6": "input_param_6",
                "param_7": "input_param_7",
                "param_8": "input_param_8",
                "param_9": "input_param_9",
                "param_10": "output_params",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "iVar3": "concatenation_success",
                "uVar4": "result_3",
                "uVar5": "result_4",
                "uVar6": "result_5",
                "uVar7": "result_6",
                "iVar8": "result_7",
                "uVar9": "result_8",
                "uVar10": "result_9",
                "uVar11": "result_10",
                "uVar12": "result_11",
                "uVar13": "result_12",
                "uVar14": "result_13",
                "uVar15": "result_14",
                "uVar16": "result_15",
                "uVar17": "result_16",
                "uVar18": "result_17",
                "iVar19": "result_18",
                "uVar20": "result_19",
                "uVar21": "result_20",
                "uVar22": "result_21",
                "uVar23": "result_22",
                "uVar24": "result_23",
                "uVar25": "result_24",
                "iVar26": "result_25",
                "uVar27": "result_26",
                "uVar28": "result_27",
                "uVar29": "result_28",
                "iVar30": "result_29",
                "uVar31": "result_30",
                "uVar32": "result_31"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "convert_to_u_int64_08003eb0",
            "code": "\nlonglong convertToUInt64_08003eb0(uint inputValue)\n\n{\n  if (DAT_20000280 == 0) {\n    software_interrupt(0x3f);\n    return CONCAT44(inputValue,1);\n  }\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "convert_to_u_int64_08003eb0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_08003ec8",
            "code": "\nundefined4 incrementAndStore_08003ec8(int dataAddress,undefined valueToStore)\n\n{\n  *(short *)(dataAddress + 0x804) = *(short *)(dataAddress + 0x804) + 1;\n  *(undefined *)(dataAddress + (uint)*(ushort *)(dataAddress + 0x802)) = valueToStore;\n  *(ushort *)(dataAddress + 0x802) = *(short *)(dataAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_08003ec8",
                "param_1": "dataAddress",
                "param_2": "valueToStore"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_param_values_08003f3c",
            "code": "\nvoid setParamValues_08003f3c(int value1,int value2,int value3)\n\n{\n  set_param_value_08001424(0x40011000,0x8000,value1 == 0);\n  set_param_value_08001424(0x40011000,0x4000,value2 == 0);\n  set_param_value_08001424(0x40011000,0x2000,value3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "update_parameter_in_memory_08003fc4",
            "code": "\nvoid updateParameterInMemory_08003fc4(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "update_parameter_in_memory_08003fc4",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_value_08003fd0",
            "code": "\nvoid setParamValue_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_value_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_08003fdc",
            "code": "\nvoid setParam_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_at_offset_08003fe8",
            "code": "\nvoid setParamAtOffset_08003fe8(undefined4 newParam)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = newParam;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_at_offset_08003fe8",
                "param_1": "newParam"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "update_bitwise_values_08003ff4",
            "code": "\nvoid update_bitwise_values_08003ff4(void)\n\n{\n  update_bitwise_value_08002538(&DAT_200015f8,4);\n  update_bitwise_value_08002538(&DAT_20001540,8);\n  update_bitwise_value_08002538(&DAT_200014c8,8);\n  update_bitwise_value_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "update_bitwise_values_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_update_device_08004028",
            "code": "\nvoid initialize_and_update_device_08004028(void)\n\n{\n  int loop_counter;\n  \n  initialize_device();\n  update_bitwise_values();\n  loop_counter = 3;\n  do {\n    set_parameter_values(1,0);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,1);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,0,1);\n    thunk_FUNC_08001168(100);\n    loop_counter = loop_counter + -1;\n  } while (loop_counter != 0);\n  set_parameter_values(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_update_device_08004028",
                "iVar1": "loop_counter",
                "initialize_device_0800458c": "initialize_device",
                "update_bitwise_values_08003ff4": "update_bitwise_values",
                "set_param_values_08003f3c": "set_parameter_values"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "process_i2c_data_0800403c",
            "code": "\nvoid process_i2c_data_0800403c(undefined4 device_address,undefined4 register_address,undefined data,int enable_error_handling)\n\n{\n  int result;\n  undefined buffer [8];\n  \n  buffer[0] = data;\n  result = process_data_08001828(&DAT_20001504,device_address,register_address,1,buffer,1,200);\n  if (result != 0) {\n    process_error_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (enable_error_handling != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "process_i2c_data_0800403c",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "enable_error_handling",
                "iVar1": "result",
                "local_14": "buffer"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "process_and_handle_data_0800407c",
            "code": "\nundefined processAndHandleData_0800407c(undefined4 dataPointer,undefined4 param2,undefined4 errorParam1,undefined4 errorParam2)\n\n{\n  int iVar1;\n  undefined result [8];\n  \n  result[0] = 0;\n  iVar1 = process_data_08001938(&DAT_20001504,dataPointer,param2,1,result,1,200);\n  if (iVar1 != 0) {\n    process_error_08004490(errorParam1,errorParam2);\n  }\n  return result[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "process_and_handle_data_0800407c",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "errorParam1",
                "param_4": "errorParam2",
                "local_14": "result"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_data_validation_080040b8",
            "code": "\nvoid process_data_validation_080040b8(undefined4 data_ptr,undefined4 param_ptr,undefined4 flag,undefined4 error_ptr,\n                 undefined4 error_code,undefined4 error_msg)\n\n{\n  int result;\n  \n  result = process_data_08001938(&DAT_20001504,data_ptr,param_ptr,1,flag,error_ptr,200,error_ptr);\n  if (result != 0) {\n    process_error_08004490(error_code,error_msg);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_data_validation_080040b8",
                "param_1": "data_ptr",
                "param_2": "param_ptr",
                "param_3": "flag",
                "param_4": "error_ptr",
                "param_5": "error_code",
                "param_6": "error_msg",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "process_and_store_data_080040e8",
            "code": "\nvoid process_and_store_data_080040e8(undefined4 input_param,int start_index,int array_length,int data_count)\n\n{\n  undefined processed_data;\n  int index;\n  undefined *array_ptr;\n  int source_index;\n  \n  array_ptr = (undefined *)(array_length + -1);\n  source_index = data_count;\n  for (index = 0; index < data_count; index = index + 1) {\n    processed_data = process_and_handle_data_0800407c(input_param,start_index + index & 0xffff,\"../Src/i2c.c\",0x4c,source_index);\n    array_ptr = array_ptr + 1;\n    *array_ptr = processed_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "process_and_store_data_080040e8",
                "param_1": "input_param",
                "param_2": "start_index",
                "param_3": "array_length",
                "param_4": "data_count",
                "uVar1": "processed_data",
                "iVar2": "index",
                "puVar3": "array_ptr",
                "iVar4": "source_index"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_sensor_data_0800411c",
            "code": "\nvoid process_sensor_data_0800411c(void)\n\n{\n  undefined4 *pointer_var1;\n  longlong long_var2;\n  uint value_3;\n  uint value_4;\n  uint value_5;\n  undefined4 value_6;\n  undefined4 value_7;\n  int index_var;\n  uint value_9;\n  uint value_10;\n  uint value_11;\n  uint value_12;\n  undefined4 *pointer_var13;\n  undefined4 unaffected_var4;\n  int index_var2;\n  int index_var3;\n  bool bool_var16;\n  undefined8 value_17;\n  \n  index_var = thunk_get_data_0800115c();\n  if (1 < (uint)(index_var - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_data_0800115c();\n    process_sensor_values_08002f28();\n  }\n  index_var = thunk_get_data_0800115c();\n  if (2 < (uint)(index_var - DAT_20000294)) {\n    DAT_20000294 = thunk_get_data_0800115c();\n    process_data_08004a84();\n  }\n  index_var = thunk_get_data_0800115c();\n  if (3 < (uint)(index_var - DAT_20000290)) {\n    DAT_20000290 = thunk_get_data_0800115c();\n    initialize_data_08004348();\n    initialize_data_08004384();\n    process_string_function_080043f0();\n    initialize_data_08004410();\n    process_string_data_08004434();\n    copy_and_process_string_data_080043bc();\n    copy_and_process_string_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    index_var3 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    value_9 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)index_var3) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)index_var3) >> 0x20) << 9;\n    value_10 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)index_var3 >> 7);\n    value_11 = value_10 + (uint)DAT_20000260 * 0x10000;\n    value_4 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)index_var3) >> 8);\n    index_var = value_9 + 2000;\n    value_5 = value_4 + (uint)DAT_2000025e * 0x8000;\n    bool_var16 = (int)value_9 < 0;\n    if (1999 < index_var) {\n      value_9 = 0;\n    }\n    value_3 = value_9;\n    if (bool_var16 != SBORROW4(index_var,2000)) {\n      index_var2 = value_9 * value_9 * 5;\n      value_9 = index_var2 >> 2;\n      value_3 = index_var2 >> 1;\n    }\n    value_12 = value_11 - value_3;\n    long_var2 = (ulonglong)(value_5 - value_9) * (ulonglong)DAT_2000026c;\n    index_var2 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)index_var3 >> 0x28) +\n               (uint)CARRY4(value_4,(uint)DAT_2000025e * 0x8000)) - ((int)value_9 >> 0x1f)) -\n             (uint)(value_5 < value_9)) + (int)((ulonglong)long_var2 >> 0x20);\n    value_4 = (uint)long_var2 >> 0x15 | index_var2 * 0x800;\n    value_6 = count_bits_08000c44(value_4 - value_12 >> 0xf |\n                         (((index_var2 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)index_var3 >> 0x27) +\n                            (uint)CARRY4(value_10,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)value_3 >> 0x1f)) - (uint)(value_11 < value_3))) - (uint)(value_4 < value_12)\n                         ) * 0x20000);\n    value_6 = calculate_float_value_08000e54(value_6,0x42c80000);\n    DAT_20000354 = value_6;\n    value_7 = count_bits_08000c44(index_var);\n    DAT_20000358 = calculate_float_value_08000e54(value_7,0x42c80000);\n    calculate_float_value_08000e54(value_6,0x447d5000);\n    value_17 = compute_value_08000428();\n    value_17 = calculate_result_08005900((int)value_17,(int)((ulonglong)value_17 >> 0x20),0x60000000,0x3fc85b95);\n    value_17 = calculate_bitwise_xor_08000168(0,0x3ff00000,(int)value_17,(int)((ulonglong)value_17 >> 0x20));\n    calculate_result_080004d0((int)value_17,(int)((ulonglong)value_17 >> 0x20),0,0x40e5a540);\n    value_6 = calculate_floating_point_08000a30();\n    value_7 = 0;\n    pointer_var13 = &DAT_20000300;\n    DAT_20000350 = value_6;\n    do {\n      pointer_var1 = pointer_var13 + 1;\n      *pointer_var13 = *pointer_var1;\n      value_7 = calculate_floating_point_value_08000adc(value_7);\n      pointer_var13 = pointer_var1;\n    } while (pointer_var1 != &DAT_2000034c);\n    DAT_2000034c = value_6;\n    value_6 = calculate_floating_point_value_08000adc(value_7,value_6);\n    DAT_200002fc = calculate_float_value_08000e54(value_6,0x41a00000);\n    index_var = convert_unsigned_to_signed_08001078();\n    DAT_200014ab = index_var * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_i2c_data_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_data_0800115c();\n  }\n  index_var = thunk_get_data_0800115c();\n  if (((10 < (uint)(index_var - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = convert_local_cto_int_08003034();\n    DAT_20000275 = '\\x01';\n    process_i2c_data_0800403c(0xee,DAT_20000038 + 0x40,1,0,unaffected_var4);\n    DAT_20000278 = thunk_get_data_0800115c();\n  }\n  index_var = thunk_get_data_0800115c();\n  if (((10 < (uint)(index_var - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = convert_local_cto_int_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_sensor_data_0800411c",
                "puVar1": "pointer_var1",
                "lVar2": "long_var2",
                "uVar3": "value_3",
                "uVar4": "value_4",
                "uVar5": "value_5",
                "uVar6": "value_6",
                "uVar7": "value_7",
                "iVar8": "index_var",
                "uVar9": "value_9",
                "uVar10": "value_10",
                "uVar11": "value_11",
                "uVar12": "value_12",
                "puVar13": "pointer_var13",
                "unaff_r4": "unaffected_var4",
                "iVar14": "index_var2",
                "iVar15": "index_var3",
                "bVar16": "bool_var16",
                "uVar17": "value_17"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_08004194",
            "code": "\nvoid initialize_system_08004194(void)\n\n{\n  initialize_and_update_device();\n  initialize_and_check_flags();\n  initialize_sensor_system();\n  initialize_sensor_data();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_08004194",
                "initialize_and_update_device_08004028": "initialize_and_update_device",
                "initialize_and_check_flags_08004c70": "initialize_and_check_flags",
                "initialize_sensor_system_08002ea0": "initialize_sensor_system",
                "initialize_sensor_data_08003298": "initialize_sensor_data"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "continuous_data_processing_080041ae",
            "code": "\nvoid continuous_data_processing_080041ae(void)\n\n{\n  convert_to_uint64(0);\n  initialize_system();\n  do {\n    increment_data_counter();\n    process_sensor_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "continuous_data_processing_080041ae",
                "convert_to_u_int64_08003eb0": "convert_to_uint64",
                "initialize_system_08004194": "initialize_system",
                "increment_data_counter_0800114c": "increment_data_counter",
                "process_sensor_data_0800411c": "process_sensor_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_parameters_080041c4",
            "code": "\nvoid initializeParameters_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 returnValue;\n  \n  updateParameterInMemory(0);\n  setParameterValue(0);\n  setParam(0);\n  setParamAtOffset(0,returnValue,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_parameters_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "returnValue",
                "update_parameter_in_memory_08003fc4": "updateParameterInMemory",
                "set_param_value_08003fd0": "setParameterValue",
                "set_param_08003fdc": "setParam",
                "set_param_at_offset_08003fe8": "setParamAtOffset"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_and_update_parameters_0800426c",
            "code": "\n\n\nvoid calculateAndUpdateParameters_0800426c(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint signedResult1;\n  uint signedResult2;\n  uint signedResult3;\n  uint signedResult4;\n  \n  result1 = calculate_bitwise_operation_08000ad8();\n  result2 = calculate_floating_point_value_08000adc(value1,value2);\n  result3 = calculate_bitwise_operation_08000ad8(result1,value3);\n  result3 = calculate_floating_point_value_08000adc(result3,value4);\n  calculate_bitwise_operation_08000ad8(result3,0x447a0000);\n  signedResult1 = convert_unsigned_to_signed_08001078();\n  result3 = calculate_bitwise_operation_08000ad8(result2,value3);\n  result3 = calculate_bitwise_operation_08000ad8(result3,value4);\n  calculate_bitwise_operation_08000ad8(result3,0x447a0000);\n  signedResult2 = convert_unsigned_to_signed_08001078();\n  result1 = calculate_floating_point_value_08000adc(result1,value3);\n  result1 = calculate_bitwise_operation_08000ad8(result1,value4);\n  calculate_bitwise_operation_08000ad8(result1,0x447a0000);\n  signedResult3 = convert_unsigned_to_signed_08001078();\n  result1 = calculate_floating_point_value_08000adc(value3,result2);\n  result1 = calculate_floating_point_value_08000adc(result1,value4);\n  calculate_bitwise_operation_08000ad8(result1,0x447a0000);\n  signedResult4 = convert_unsigned_to_signed_08001078();\n  if (999 < (int)signedResult4) {\n    signedResult4 = 1000;\n  }\n  if (999 < (int)signedResult3) {\n    signedResult3 = 1000;\n  }\n  if (999 < (int)signedResult2) {\n    signedResult2 = 1000;\n  }\n  if (999 < (int)signedResult1) {\n    signedResult1 = 1000;\n  }\n  DAT_200002a0 = signedResult2 & ~((int)signedResult2 >> 0x1f);\n  DAT_200002a4 = signedResult1 & ~((int)signedResult1 >> 0x1f);\n  DAT_2000029c = signedResult3 & ~((int)signedResult3 >> 0x1f);\n  DAT_20000298 = signedResult4 & ~((int)signedResult4 >> 0x1f);\n  update_parameter_in_memory_08003fc4();\n  set_param_value_08003fd0(DAT_2000029c);\n  set_param_08003fdc(DAT_200002a0);\n  set_param_at_offset_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_and_update_parameters_0800426c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "signedResult1",
                "uVar5": "signedResult2",
                "uVar6": "signedResult3",
                "uVar7": "signedResult4"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "process_string_data_08004300",
            "code": "\nvoid process_string_data_08004300(uint input_value,byte *byte_array,uint array_length)\n\n{\n  uint result;\n  byte *current_byte;\n  \n  process_string_array_08004c8c(&DAT_0800732e);\n  process_data_08004c18(array_length & 0xff);\n  result = array_length & 0xff ^ input_value;\n  process_data_08004c18(input_value);\n  for (current_byte = byte_array; (int)current_byte - (int)byte_array < (int)array_length; current_byte = current_byte + 1) {\n    process_data_08004c18(*current_byte);\n    result = result ^ *current_byte;\n  }\n  process_data_08004c18(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "process_string_data_08004300",
                "param_1": "input_value",
                "param_2": "byte_array",
                "param_3": "array_length",
                "uVar1": "result",
                "pbVar2": "current_byte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_08004348",
            "code": "\n\n\nvoid initializeData_08004348(undefined4 param1,uint param2,undefined4 param3)\n\n{\n  undefined4 dataAddress;\n  uint maskedParam2;\n  undefined4 param3Copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  dataAddress = 0x40003e9;\n  maskedParam2 = param2 & 0xff000000;\n  param3Copy = param3;\n  process_string_data_08004300(100,&dataAddress,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "dataAddress",
                "local_c": "maskedParam2",
                "uStack_8": "param3Copy"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "initialize_data_08004384",
            "code": "\n\n\nvoid initializeData_08004384(undefined4 arg1,undefined4 arg2,undefined4 arg3,uint data)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  uint maskedData;\n  \n  _DAT_200013bd = 0x2a0007;\n  tempVar1 = _DAT_200013b9;\n  tempVar2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedData = data & 0xff000000;\n  process_string_data_08004300(0x65,&tempVar1,0xb,0,arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "initialize_data_08004384",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "data",
                "local_14": "tempVar1",
                "uStack_10": "tempVar2",
                "local_c": "maskedData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_process_string_data_080043bc",
            "code": "\nvoid copyAndProcessStringData_080043bc(void)\n\n{\n  undefined4 firstValue;\n  undefined4 secondValue;\n  undefined4 *destinationPointer;\n  undefined4 *sourcePointer;\n  undefined4 copiedData [2];\n  undefined2 buffer [6];\n  \n  sourcePointer = (undefined4 *)&DAT_2000142a;\n  destinationPointer = copiedData;\n  do {\n    firstValue = *sourcePointer;\n    secondValue = sourcePointer[1];\n    sourcePointer = sourcePointer + 2;\n    *destinationPointer = firstValue;\n    destinationPointer[1] = secondValue;\n    destinationPointer = destinationPointer + 2;\n  } while (sourcePointer != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destinationPointer = DAT_2000143a;\n  process_string_data_08004300(0x66,copiedData,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_process_string_data_080043bc",
                "puVar4": "sourcePointer",
                "puVar3": "destinationPointer",
                "local_24": "copiedData",
                "local_1c": "buffer",
                "uVar1": "firstValue",
                "uVar2": "secondValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "process_string_function_080043f0",
            "code": "\n\n\nvoid process_string_function_080043f0(undefined4 data,undefined4 offset,undefined4 length)\n\n{\n  undefined4 string_data;\n  undefined4 string_offset;\n  undefined4 string_arguments [2];\n  \n  string_data = _DAT_200013dd;\n  string_offset = _DAT_200013e1;\n  string_arguments[0] = length;\n  process_string_data_08004300(0x68,&string_data,8,string_arguments);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "process_string_function_080043f0",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "length",
                "local_10": "string_data",
                "uStack_c": "string_offset",
                "auStack_8": "string_arguments"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "initialize_data_08004410",
            "code": "\nvoid initializeData_08004410(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  undefined4 dataBlock;\n  undefined4 concatenatedData;\n  undefined4 stackVariable;\n  \n  dataBlock = DAT_20001395;\n  concatenatedData = CONCAT22((short)((uint)inputParam2 >> 0x10),DAT_20001399);\n  stackVariable = inputParam3;\n  process_string_data_08004300(0x6c,&dataBlock,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "initialize_data_08004410",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "local_10": "dataBlock",
                "local_c": "concatenatedData",
                "uStack_8": "stackVariable"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "process_string_data_08004434",
            "code": "\nvoid processStringData_08004434(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 dataPointer;\n  undefined4 combinedValue;\n  undefined4 input3Stack;\n  \n  dataPointer = DAT_200014ab;\n  combinedValue = CONCAT22((short)((uint)input2 >> 0x10),DAT_200014af);\n  input3Stack = input3;\n  process_string_data_08004300(0x6d,&dataPointer,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "process_string_data_08004434",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "dataPointer",
                "local_c": "combinedValue",
                "uStack_8": "input3Stack"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_and_process_string_data_08004458",
            "code": "\nvoid copyAndProcessStringData_08004458(void)\n\n{\n  undefined4 *destinationPtr;\n  undefined4 *sourcePtr;\n  undefined4 tempValue;\n  undefined4 *destinationPtrTemp;\n  undefined4 *sourcePtrTemp;\n  undefined4 destinationArray [3];\n  undefined2 sourceArray [10];\n  \n  destinationPtr = destinationArray;\n  sourcePtr = &DAT_2000139b;\n  do {\n    sourcePtrTemp = sourcePtr;\n    destinationPtrTemp = destinationPtr;\n    tempValue = sourcePtrTemp[1];\n    *destinationPtrTemp = *sourcePtrTemp;\n    destinationPtrTemp[1] = tempValue;\n    destinationPtr = destinationPtrTemp + 2;\n    sourcePtr = sourcePtrTemp + 2;\n  } while (sourcePtrTemp + 2 != (undefined4 *)0x200013b3);\n  destinationPtrTemp[2] = uRam200013b3;\n  *(undefined2 *)(destinationPtrTemp + 3) = *(undefined2 *)(sourcePtrTemp + 3);\n  process_string_data_08004300(0x70,destinationArray,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_and_process_string_data_08004458",
                "puVar1": "destinationPtr",
                "puVar2": "sourcePtr",
                "uVar3": "tempValue",
                "puVar4": "destinationPtrTemp",
                "puVar5": "sourcePtrTemp",
                "local_30": "destinationArray",
                "local_24": "sourceArray"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "process_error_08004490",
            "code": "\nvoid process_error_08004490(undefined4 error_message,undefined4 line_number)\n\n{\n  set_param_value(0x40011000,0x4000,1);\n  set_param_value(0x40011000,0x8000,0);\n  set_param_value(0x40011000,0x2000,0);\n  do {\n    xor_and_store_0800142e(0x40011000,0x4000);\n    xor_and_store_0800142e(0x40011000,0x8000);\n    xor_and_store_0800142e(0x40011000,0x2000);\n    print_error_message(\"Error with \");\n    print_error_message(error_message);\n    print_error_message(\" at line: \");\n    initialize_and_process_line_number(line_number);\n    process_newline(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "process_error_08004490",
                "param_1": "error_message",
                "param_2": "line_number",
                "set_param_value_08001424": "set_param_value",
                "process_string_array_08004c8c": "print_error_message",
                "initialize_and_process_data_08004cac": "initialize_and_process_line_number",
                "process_data_08004c18": "process_newline"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_system_08004514",
            "code": "\nvoid initialize_system_08004514(void)\n\n{\n  int result;\n  uint dataValue;\n  undefined4 fileIndex;\n  int configIndex;\n  undefined4 errorCode;\n  int configParam1;\n  int errorParam1;\n  undefined4 configParam2;\n  int errorParam2;\n  undefined4 configParams [4];\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  \n  param1 = 1;\n  param2 = 0x10;\n  configIndex = 2;\n  param4 = 0;\n  configParams[0] = 2;\n  param3 = 2;\n  param5 = 0x380000;\n  result = check_and_update_settings_08001b58(configParams);\n  if (result == 0) goto LAB_08004540;\n  fileIndex = 0x3c;\n  while( true ) {\n    result = process_error_08004490(\"../Src/peripherals.c\",fileIndex);\nLAB_08004540:\n    errorCode = 0xf;\n    configParam2 = 0x400;\n    configParam1 = configIndex;\n    errorParam1 = result;\n    errorParam2 = result;\n    configIndex = handle_mpu_configuration_0800209c(&errorCode,configIndex);\n    if (configIndex == 0) break;\n    fileIndex = 0x49;\n  }\n  dataValue = get_data_value_08002214();\n  initialize_memory_08001214(dataValue / 1000);\n  set_flag_value_08001240(4);\n  set_memory_value_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_system_08004514",
                "iVar1": "result",
                "uVar2": "dataValue",
                "uVar3": "fileIndex",
                "iVar4": "configIndex",
                "local_44": "errorCode",
                "local_40": "configParam1",
                "local_3c": "errorParam1",
                "local_38": "configParam2",
                "local_34": "errorParam2",
                "local_30": "configParams",
                "local_20": "param1",
                "local_1c": "param2",
                "local_14": "param3",
                "local_10": "param4",
                "local_c": "param5"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_device_0800458c",
            "code": "\n\n\nvoid initialize_device_0800458c(void)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  int iVar3;\n  int local_58;\n  int local_54;\n  int local_50;\n  int local_4c;\n  int local_48;\n  int local_40;\n  int local_3c;\n  int local_38;\n  int local_34;\n  int local_30;\n  int local_2c;\n  int local_28;\n  int local_24;\n  undefined4 local_20;\n  int local_1c;\n  \n  initialize_and_set_adc();\n  initialize_system();\n  iVar3 = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_param_value(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_param_value(0x40010800,0x20,0);\n  local_34 = 0xe000;\n  local_30 = 1;\n  local_28 = 2;\n  update_param_values(0x40011000,&local_34);\n  local_34 = 0x20;\n  local_30 = 1;\n  local_28 = 2;\n  update_param_values(0x40010800,&local_34);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  iVar1 = update_param_08001754();\n  if (iVar1 == 0) goto LAB_0800463a;\n  uVar2 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  iVar1 = process_error(\"../Src/peripherals.c\",uVar2);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = iVar1;\n                                  DAT_20001588 = iVar1;\n                                  DAT_2000158c = iVar1;\n                                  DAT_20001594 = iVar1;\n                                  DAT_20001598 = iVar1;\n                                  iVar1 = initialize_memory(&DAT_2000157c);\n                                  if (iVar1 == 0) break;\n                                  uVar2 = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = iVar3;\n                                DAT_200015c4 = iVar1;\n                                DAT_200015cc = iVar1;\n                                DAT_200015d0 = iVar1;\n                                iVar1 = update_data_flags(&DAT_200015bc);\n                                if (iVar1 == 0) break;\n                                uVar2 = 0x88;\n                              }\n                              local_58 = iVar1;\n                              local_54 = iVar1;\n                              iVar1 = update_permissions(&DAT_200015bc,&local_58);\n                              if (iVar1 == 0) break;\n                              uVar2 = 0x8f;\n                            }\n                            local_50 = 0x60;\n                            local_4c = iVar1;\n                            local_48 = iVar1;\n                            local_40 = iVar1;\n                            local_3c = iVar1;\n                            local_38 = iVar1;\n                            iVar1 = update_flags_and_values(&DAT_200015bc,&local_50,0xc);\n                            if (iVar1 == 0) break;\n                            uVar2 = 0x9a;\n                          }\n                          local_20 = 0x2000;\n                          local_34 = iVar1;\n                          local_30 = iVar1;\n                          local_2c = iVar1;\n                          local_28 = iVar1;\n                          local_24 = iVar1;\n                          local_1c = iVar1;\n                          iVar1 = initialize_flag_if_needed(&DAT_200015bc,&local_34);\n                          if (iVar1 == 0) break;\n                          uVar2 = 0xa6;\n                        }\n                        update_param_values(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = iVar3;\n                        DAT_20001600 = iVar1;\n                        DAT_20001608 = iVar1;\n                        iVar1 = update_data_flags(&DAT_200015f8);\n                        if (iVar1 == 0) break;\n                        uVar2 = 0xc3;\n                      }\n                      local_50 = iVar1;\n                      local_4c = iVar1;\n                      iVar1 = update_permissions(&DAT_200015f8,&local_50);\n                      if (iVar1 == 0) break;\n                      uVar2 = 0xca;\n                    }\n                    local_34 = 0x60;\n                    local_30 = iVar1;\n                    local_2c = iVar1;\n                    local_24 = iVar1;\n                    iVar1 = update_flags_and_values(&DAT_200015f8,&local_34,4);\n                    if (iVar1 == 0) break;\n                    uVar2 = 0xd3;\n                  }\n                  update_param_values(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = iVar3;\n                  DAT_20001548 = iVar1;\n                  DAT_20001550 = iVar1;\n                  iVar1 = update_data_flags();\n                  if (iVar1 == 0) break;\n                  uVar2 = 0xf0;\n                }\n                local_50 = 0;\n                local_4c = 0;\n                iVar1 = update_permissions(&DAT_20001540,&local_50);\n                if (iVar1 == 0) break;\n                uVar2 = 0xf7;\n              }\n              local_34 = 0x60;\n              local_30 = iVar1;\n              local_2c = iVar1;\n              local_24 = iVar1;\n              iVar1 = update_flags_and_values(&DAT_20001540,&local_34,8);\n              if (iVar1 == 0) break;\n              uVar2 = 0x100;\n            }\n            iVar3 = update_flags_and_values(&DAT_20001540,&local_34,0xc);\n            if (iVar3 == 0) break;\n            uVar2 = 0x105;\n          }\n          update_param_values(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = iVar3;\n          DAT_200014d8 = iVar3;\n          iVar1 = update_data_flags(&DAT_200014c8);\n          if (iVar1 == 0) break;\n          uVar2 = 0x122;\n        }\n        local_50 = iVar1;\n        local_4c = iVar1;\n        iVar1 = update_permissions(&DAT_200014c8,&local_50);\n        if (iVar1 == 0) break;\n        uVar2 = 0x129;\n      }\n      local_34 = 0x60;\n      local_30 = iVar1;\n      local_2c = iVar1;\n      local_24 = iVar1;\n      iVar1 = update_flags_and_values(&DAT_200014c8,&local_34,8);\n      if (iVar1 == 0) break;\n      uVar2 = 0x132;\n    }\n    iVar1 = update_flags_and_values(&DAT_200014c8,&local_34,0xc);\n    if (iVar1 == 0) break;\n    uVar2 = 0x137;\n  }\n  update_param_values(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_device_0800458c",
                "initialize_and_set_adc_08001128": "initialize_and_set_adc",
                "initialize_system_08004514": "initialize_system",
                "set_param_value_08001424": "set_param_value",
                "update_param_values_08001264": "update_param_values",
                "process_error_08004490": "process_error",
                "initialize_memory_08002724": "initialize_memory",
                "update_data_flags_080023d0": "update_data_flags",
                "update_permissions_080025a4": "update_permissions",
                "update_flags_and_values_0800245c": "update_flags_and_values",
                "initialize_flag_if_needed_08002564": "initialize_flag_if_needed",
                "update_param_values_08004e14": "update_param_values"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "perform_calculation_0800483c",
            "code": "\nvoid performCalculation_0800483c(int *array)\n\n{\n  undefined4 floatValue1;\n  undefined4 floatValue2;\n  int value3;\n  int result;\n  int value5;\n  \n  result = array[0xc];\n  floatValue1 = calculate_floating_point_value_08000adc(array[7],array[9]);\n  result = calculate_bitwise_operation_08000ad8(floatValue1,result);\n  array[10] = result;\n  if (*array == 3) {\n    result = check_concatenation_result_08001064(array[10],0);\n    if (result == 0) {\n      result = check_for_null_termination_08001028(array[10],0xc3340000);\n    }\n    else {\n      result = check_concatenation_result_08001064(array[10],0x43340000);\n    }\n    if (result != 0) {\n      value5 = array[10];\n      floatValue1 = calculate_float_08000cec(array[10],0x43b40000);\n      result = check_concatenation_result_08001064(array[10],0);\n      value3 = array[10];\n      if (result == 0) {\n        value3 = value3 + -0x80000000;\n      }\n      floatValue1 = calculate_float_value_08000e54(floatValue1,value3);\n      result = calculate_bitwise_operation_08000ad8(value5,floatValue1);\n      array[10] = result;\n    }\n  }\n  value5 = array[2];\n  value3 = array[3];\n  result = calculate_float_08000cec(array[1],array[10]);\n  array[0xe] = result;\n  result = calculate_floating_point_value_08000adc(array[10],array[0xf]);\n  array[0xf] = result;\n  result = check_for_null_termination_08001028(array[0xf],0xc3fa0000);\n  if (result == 0) {\n    result = check_concatenation_result_08001064(array[0xf],0x43fa0000);\n    if (result == 0) {\n      result = array[0xf];\n    }\n    else {\n      result = 0x43fa0000;\n    }\n  }\n  else {\n    result = -0x3c060000;\n  }\n  array[0xf] = result;\n  result = calculate_bitwise_operation_08000ad8(array[0xc],array[0xd]);\n  array[0x10] = result;\n  result = array[0xe];\n  floatValue1 = calculate_float_08000cec(value5,array[0xf]);\n  floatValue1 = calculate_floating_point_value_08000adc(floatValue1,result);\n  floatValue2 = calculate_float_08000cec(value3,array[0x10]);\n  result = calculate_bitwise_operation_08000ad8(floatValue1,floatValue2);\n  array[0x12] = result;\n  floatValue1 = count_bits_08000c44(array[0x13]);\n  result = check_for_null_termination_08001028(array[0x12],0xc3fa0000);\n  if (result == 0) {\n    result = check_concatenation_result_08001064(array[0x12],0x43fa0000);\n    if (result == 0) {\n      result = array[0x12];\n    }\n    else {\n      result = 0x43fa0000;\n    }\n  }\n  else {\n    result = -0x3c060000;\n  }\n  result = calculate_float_08000cec(result,floatValue1);\n  array[0x12] = result;\n  array[0xd] = array[0xc];\n  array[0xb] = array[10];\n  array[0x15] = array[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "perform_calculation_0800483c",
                "param_1": "array",
                "uVar1": "floatValue1",
                "uVar2": "floatValue2",
                "iVar3": "value3",
                "iVar4": "result",
                "iVar5": "value5"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "initialize_float_values_08004a30",
            "code": "\nvoid initializeFloatValues_08004a30(void)\n\n{\n  undefined4 initialValue;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      initialValue = getInitialValue();\n      DAT_20000068 = calculateFloat(initialValue,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      initialValue = getInitialValue();\n      DAT_2000007c = calculateFloat(initialValue,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "initialize_float_values_08004a30",
                "uVar1": "initialValue",
                "get_initial_value_08003068": "getInitialValue",
                "calculate_float_08000cec": "calculateFloat"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_data_08004a84",
            "code": "\nvoid processData_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = calculateFloatingPointValue();\n  DAT_20000134 = initializeMemory();\n  DAT_20000190 = processData_08004a84();\n  initializeFloatValues();\n  iVar1 = checkConcatenationResult(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = checkForNullTermination(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = checkConcatenationResult(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = checkConcatenationResult(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = checkForNullTermination(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = checkConcatenationResult(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      setParamValues(1,1);\n      performCalculation(&DAT_200000a8);\n      performCalculation(&DAT_20000104);\n      performCalculation(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        performCalculation(&DAT_2000004c);\n        calculateFloatingPointValue(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initializeParameters();\n      }\n      else {\n        calculateAndUpdateParameters(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculateFloat(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = extractBits();\n      calculateFloat(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = extractBits();\n      calculateFloat(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = extractBits();\n      calculateFloat(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = extractBits();\n      calculateFloat(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = extractBits();\n      calculateFloat(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = extractBits();\n      calculateFloat(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = extractBits();\n      calculateFloat(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = extractBits();\n      calculateFloat(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = extractBits();\n      calculateFloat(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = extractBits();\n      calculateFloat(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = extractBits();\n      return;\n    }\n  }\n  initializeParameters();\n  setParamValues(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_data_08004a84",
                "calculate_floating_point_value_08002ec0": "calculateFloatingPointValue",
                "initialize_memory_08002ed4": "initializeMemory",
                "process_data_08002ee8": "processData",
                "initialize_float_values_08004a30": "initializeFloatValues",
                "check_concatenation_result_08001064": "checkConcatenationResult",
                "check_for_null_termination_08001028": "checkForNullTermination",
                "set_param_values_08003f3c": "setParamValues",
                "perform_calculation_0800483c": "performCalculation",
                "calculate_floating_point_value_08000adc": "calculateFloatingPointValue",
                "initialize_parameters_080041c4": "initializeParameters",
                "calculate_and_update_parameters_0800426c": "calculateAndUpdateParameters",
                "calculate_float_08000cec": "calculateFloat",
                "extract_bits_080010c4": "extractBits"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 processData_08004c18(undefined input)\n\n{\n  int *ptr1;\n  int var1;\n  int var2;\n  ushort *ptr2;\n  \n  DAT_20001636._0_1_ = input;\n  ptr2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      var1 = get_data_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        var2 = get_data_0800115c();\n      } while ((uint)(var2 - var1) < 6);\nLAB_0800281c:\n      ptr1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr1[3] = ptr1[3] & 0xffffffdf;\n      ptr1[3] = ptr1[3] & 0xfffffeff;\n      ptr1[5] = ptr1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      var1 = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = get_data_0800115c();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr2 = ptr2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      var1 = get_data_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = get_data_0800115c();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr2;\n    }\n    ptr2 = (ushort *)((int)ptr2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "input",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "iVar3": "var2",
                "puVar4": "ptr2"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "check_and_update_data_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * checkAndUpdateData_08004c30(int *inputData)\n\n{\n  int tempVar;\n  \n  if (*inputData != 0x40013800) {\n    return inputData;\n  }\n  increment_and_store_08003ec8(&DAT_20000364,DAT_20001634);\n  tempVar = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) | 1;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "check_and_update_data_08004c30",
                "param_1": "inputData",
                "iVar1": "tempVar"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_and_check_flags_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_and_check_flags_08004c70(void)\n\n{\n  int temporary_variable;\n  \n  initialize_data();\n  temporary_variable = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(temporary_variable + 0x14) = *(uint *)(temporary_variable + 0x14) | 1;\n    *(uint *)(temporary_variable + 0xc) = *(uint *)(temporary_variable + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_and_check_flags_08004c70",
                "initialize_data_08004c64": "initialize_data",
                "iVar1": "temporary_variable"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "process_string_array_08004c8c",
            "code": "\nvoid process_string_array_08004c8c(undefined *string_array)\n\n{\n  uint string_length;\n  undefined *current_string;\n  \n  current_string = string_array;\n  while( true ) {\n    string_length = get_string_length(string_array);\n    if (string_length <= (uint)((int)current_string - (int)string_array)) break;\n    process_data(*current_string);\n    current_string = current_string + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "process_string_array_08004c8c",
                "param_1": "string_array",
                "uVar1": "string_length",
                "puVar2": "current_string",
                "get_string_length_08000150": "get_string_length",
                "process_data_08004c18": "process_data"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_and_process_data_08004cac",
            "code": "\nvoid initializeAndProcessData_08004cac(undefined4 inputData)\n\n{\n  initializeData(&DAT_20001636,&DAT_0800735e,inputData);\n  processStringArray(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_and_process_data_08004cac",
                "param_1": "inputData",
                "process_string_array_08004c8c": "processStringArray",
                "initialize_data_08004ffc": "initializeData"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_adc_settings_08004ccc",
            "code": "\n\n\nvoid initializeADCSettings_08004ccc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  setADCInputMux(3,input2,_DAT_40021018,1,input1,1,input3);\n  setMemoryValue(0xfffffff4,0);\n  setMemoryValue(0xfffffff5,0);\n  setMemoryValue(0xfffffff6,0);\n  setMemoryValue(0xfffffffb,0);\n  setMemoryValue(0xfffffffc,0);\n  setMemoryValue(0xfffffffe,0);\n  setMemoryValue(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_adc_settings_08004ccc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "set_adc_input_mux_08001170": "setADCInputMux",
                "set_memory_value_08001194": "setMemoryValue"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "update_param_and_toggle_flag_08004d48",
            "code": "\n\n\nvoid updateParamAndToggleFlag_08004d48(int *valuePtr,undefined4 flag)\n\n{\n  undefined4 newValue1;\n  undefined4 newValue2;\n  \n  if (*valuePtr == 0x40005400) {\n    newValue1 = 0xc0;\n    newValue2 = 0x12;\n    update_param_values_08001264(0x40010c00,&newValue1,0x40005400,3,valuePtr,flag);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "update_param_and_toggle_flag_08004d48",
                "param_1": "valuePtr",
                "param_2": "flag",
                "local_18": "newValue1",
                "local_14": "newValue2"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataFlags_08004d8c(int *dataPtr)\n\n{\n  int value;\n  \n  value = *dataPtr;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "param_1": "dataPtr",
                "iVar1": "value"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "update_param_values_08004e14",
            "code": "\nvoid updateParamValues_08004e14(int *paramArray,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 constant1;\n  int param1Value;\n  undefined4 modifiedParam1;\n  undefined4 modifiedParam2;\n  undefined4 modifiedParam3;\n  undefined4 constant2;\n  \n  param1Value = *paramArray;\n  if (param1Value == 0x40012c00) {\n    modifiedParam1 = 0x800;\n  }\n  else {\n    if (param1Value != 0x40000000) {\n      if (param1Value == 0x40000400) {\n        modifiedParam1 = 3;\n      }\n      else {\n        if (param1Value != 0x40000800) {\n          return;\n        }\n        modifiedParam1 = 0x300;\n      }\n      constant1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    modifiedParam1 = 2;\n  }\n  constant1 = 0x40010800;\nLAB_08004e2e:\n  constant2 = 2;\n  modifiedParam2 = 2;\n  modifiedParam3 = param3;\n  update_param_values_08001264(constant1,&modifiedParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "update_param_values_08004e14",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "constant1",
                "iVar2": "param1Value",
                "local_18": "modifiedParam1",
                "local_14": "modifiedParam2",
                "uStack_10": "modifiedParam3",
                "local_c": "constant2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_memory_and_values_08004e7c",
            "code": "\n\n\nvoid updateMemoryAndValues_08004e7c(int *inputParam)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  \n  if (*inputParam == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    value1 = 0x200;\n    value2 = 2;\n    value4 = 3;\n    update_param_values_08001264(0x40010800,&value1);\n    value1 = 0x400;\n    value2 = 0;\n    value3 = 0;\n    update_param_values_08001264(0x40010800,&value1);\n    set_memory_value_08001194(0x25,0,0);\n    set_bit_at_position_080011fc(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_memory_and_values_08004e7c",
                "param_1": "inputParam",
                "local_18": "value1",
                "local_14": "value2",
                "local_10": "value3",
                "local_c": "value4"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "configure_memory_08004f10",
            "code": "\n\n\nvoid configureMemory_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "configure_memory_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_value_thunk_0800115c",
            "code": "\nundefined4 get_data_value_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_value_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  configure_memory_08004f10();\n  run_function_array_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  continuous_data_processing_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "run_function_array_08004fb4",
            "code": "\nvoid runFunctionArray_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "run_function_array_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_data_08004ffc",
            "code": "\nvoid initializeData_08004ffc(undefined *dataPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined *localDataArray [2];\n  undefined4 localVariableA;\n  undefined2 localVariableB;\n  undefined2 localVariableC;\n  undefined *localDataPointer;\n  undefined4 localVariableD;\n  undefined4 stackVariable1;\n  undefined4 stackVariable2;\n  undefined4 stackVariable3;\n  \n  localVariableB = 0x208;\n  localVariableA = 0x7fffffff;\n  localVariableD = 0x7fffffff;\n  localVariableC = 0xffff;\n  localDataArray[0] = dataPointer;\n  localDataPointer = dataPointer;\n  stackVariable1 = param2;\n  stackVariable2 = param3;\n  stackVariable3 = param4;\n  process_data_080050fc(DAT_200001c0,localDataArray,param2);\n  *localDataArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_data_08004ffc",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "local_78": "localDataArray",
                "local_70": "localVariableA",
                "local_6c": "localVariableB",
                "local_6a": "localVariableC",
                "local_68": "localDataPointer",
                "local_64": "localVariableD",
                "uStack_c": "stackVariable1",
                "uStack_8": "stackVariable2",
                "uStack_4": "stackVariable3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "memory_allocation_and_copy_08005044",
            "code": "\nundefined4 memoryAllocationAndCopy_08005044(undefined4 *outBuffer,int *inputData,undefined4 dataSize,uint targetSize)\n\n{\n  int allocationResult;\n  uint calculatedSize;\n  uint currentSize;\n  int difference;\n  \n  currentSize = inputData[2];\n  if ((currentSize <= targetSize) && ((*(ushort *)(inputData + 3) & 0x480) != 0)) {\n    difference = *inputData - inputData[4];\n    currentSize = (uint)(inputData[5] * 3) / 2;\n    calculatedSize = targetSize + 1 + difference;\n    if (currentSize < calculatedSize) {\n      currentSize = calculatedSize;\n    }\n    if ((int)((uint)*(ushort *)(inputData + 3) << 0x15) < 0) {\n      allocationResult = allocate_and_initialize_memory_08005714(outBuffer,currentSize);\n      if (allocationResult == 0) {\nLAB_0800508a:\n        *outBuffer = 0xc;\n        *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_data_08005630(allocationResult,inputData[4],difference);\n      *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      allocationResult = allocate_and_initialize_memory_or_copy_data_080057d0(outBuffer,inputData[4],currentSize);\n      if (allocationResult == 0) {\n        update_linked_list_0800567c(outBuffer,inputData[4]);\n        goto LAB_0800508a;\n      }\n    }\n    inputData[4] = allocationResult;\n    *inputData = allocationResult + difference;\n    inputData[5] = currentSize;\n    inputData[2] = currentSize - difference;\n    currentSize = targetSize;\n  }\n  if (targetSize <= currentSize) {\n    currentSize = targetSize;\n  }\n  copy_and_reverse_08005646(*inputData,dataSize,currentSize);\n  inputData[2] = inputData[2] - currentSize;\n  *inputData = currentSize + *inputData;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "memory_allocation_and_copy_08005044",
                "param_1": "outBuffer",
                "param_2": "inputData",
                "param_3": "dataSize",
                "param_4": "targetSize",
                "iVar1": "allocationResult",
                "uVar2": "calculatedSize",
                "uVar3": "currentSize",
                "iVar4": "difference"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "process_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint processData_080050fc(undefined4 *dest_ptr,int *src_ptr,byte *input_data,int *ptr_to_allocated_memory)\n\n{\n  int result;\n  int copy_result;\n  int *ptr_val;\n  bool is_digit;\n  byte *data_ptr;\n  byte *temp_ptr;\n  int unaff_var1;\n  int *local_ptr;\n  uint char_flag;\n  int int_val;\n  undefined4 constant_val;\n  int num_val;\n  int total_length;\n  byte current_char;\n  undefined flag1;\n  undefined flag2;\n  undefined flag3;\n  undefined4 flag4;\n  \n  local_ptr = ptr_to_allocated_memory;\n  if (((int)((uint)*(ushort *)(src_ptr + 3) << 0x18) < 0) && (src_ptr[4] == 0)) {\n    result = allocate_and_initialize_memory_08005714(dest_ptr,0x40);\n    *src_ptr = result;\n    src_ptr[4] = result;\n    if (result == 0) {\n      *dest_ptr = 0xc;\n      return -1;\n    }\n    src_ptr[5] = 0x40;\n  }\n  total_length = 0;\n  flag1 = 0x20;\n  flag2 = 0x30;\n  data_ptr = input_data;\nLAB_08005146:\n  temp_ptr = data_ptr;\n  if (*temp_ptr != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  data_ptr = temp_ptr + 1;\n  if (*temp_ptr != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)temp_ptr - (int)input_data;\n  if (result != 0) {\n    copy_result = memory_allocation_and_copy_08005044(dest_ptr,src_ptr,input_data,result);\n    if (copy_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(src_ptr + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + result;\n  }\n  if (*temp_ptr == 0) goto LAB_080052ac;\n  char_flag = 0;\n  num_val = 0;\n  int_val = -1;\n  constant_val = 0;\n  flag3 = 0;\n  flag4 = 0;\n  data_ptr = temp_ptr + 1;\n  while( true ) {\n    result = find_character_08005614(&DAT_08007379,*data_ptr);\n    input_data = data_ptr + 1;\n    if (result == 0) break;\n    char_flag = 1 << (result + 0xf7ff8c87U & 0xff) | char_flag;\n    data_ptr = input_data;\n  }\n  if ((int)(char_flag << 0x1b) < 0) {\n    flag3 = 0x20;\n  }\n  if ((int)(char_flag << 0x1c) < 0) {\n    flag3 = 0x2b;\n  }\n  if (*data_ptr == 0x2a) {\n    ptr_val = local_ptr + 1;\n    result = *local_ptr;\n    local_ptr = ptr_val;\n    if (result < 0) {\n      num_val = -result;\n      char_flag = char_flag | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_digit = false;\n    result = num_val;\n    input_data = data_ptr;\n    while( true ) {\n      if (9 < *input_data - 0x30) break;\n      result = result * 10 + (*input_data - 0x30);\n      is_digit = true;\n      input_data = input_data + 1;\n    }\n    if (!is_digit) goto LAB_080051fc;\n  }\n  num_val = result;\nLAB_080051fc:\n  if (*input_data == 0x2e) {\n    if (input_data[1] == 0x2a) {\n      input_data = input_data + 2;\n      ptr_val = local_ptr + 1;\n      int_val = *local_ptr;\n      local_ptr = ptr_val;\n      if (int_val < 0) {\n        int_val = -1;\n      }\n    }\n    else {\n      is_digit = false;\n      result = 0;\n      int_val = 0;\n      while( true ) {\n        input_data = input_data + 1;\n        if (9 < *input_data - 0x30) break;\n        result = result * 10 + (*input_data - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        int_val = result;\n      }\n    }\n  }\n  result = find_character_08005614(&DAT_0800737f,*input_data,3);\n  if (result != 0) {\n    input_data = input_data + 1;\n    char_flag = char_flag | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  current_char = *input_data;\n  input_data = input_data + 1;\n  result = find_character_08005614(\"efgEFG\",current_char,6);\n  if (result == 0) {\n    unaff_var1 = format_and_write_080053d4(dest_ptr,&char_flag,src_ptr,0x8005045,&local_ptr);\n    if (unaff_var1 == -1) goto LAB_080052ac;\n  }\n  else {\n    local_ptr = (int *)(((int)local_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + unaff_var1;\n  data_ptr = input_data;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "process_data_080050fc",
                "param_1": "dest_ptr",
                "param_2": "src_ptr",
                "param_3": "input_data",
                "param_4": "ptr_to_allocated_memory",
                "iVar1": "result",
                "iVar2": "copy_result",
                "piVar3": "ptr_val",
                "bVar4": "is_digit",
                "pbVar5": "data_ptr",
                "pbVar6": "temp_ptr",
                "unaff_r9": "unaff_var1",
                "local_8c": "local_ptr",
                "local_88": "char_flag",
                "local_84": "int_val",
                "local_80": "constant_val",
                "local_7c": "num_val",
                "local_74": "total_length",
                "local_70": "current_char",
                "local_6f": "flag1",
                "local_6e": "flag2",
                "local_45": "flag3",
                "local_30": "flag4"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "calculate_length_080052e4",
            "code": "\nundefined4\ncalculateLength_080052e4(undefined4 input,uint *data,uint *length,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_length;\n  uint extra_length;\n  bool condition;\n  \n  max_length = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_length = data[2];\n  }\n  *length = max_length;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *length = max_length + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *length = *length + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *length); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_length = (uint)*(byte *)((int)data + 0x43);\n  if (max_length != 0) {\n    max_length = 1;\n  }\n  extra_length = max_length;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_length + 0x43) = 0x30;\n    extra_length = max_length + 2;\n    *(undefined *)((int)data + max_length + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param,(int)data + 0x43,extra_length);\n  if (index != -1) {\n    max_length = data[3];\n    condition = (*data & 6) != 4;\n    if (condition) {\n      max_length = 0;\n    }\n    extra_length = 0;\n    if (!condition) {\n      max_length = max_length - *length;\n    }\n    if (!condition) {\n      max_length = max_length & ~((int)max_length >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_length = max_length + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_length == extra_length) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      extra_length = extra_length + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "calculate_length_080052e4",
                "param_1": "input",
                "param_2": "data",
                "param_3": "length",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "max_length",
                "uVar4": "extra_length",
                "bVar5": "condition"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "format_and_write_080053d4",
            "code": "\nuint format_and_write_080053d4(undefined4 file,uint *format_str,undefined4 arg_count,code *output_func,uint **arg_list)\n\n{\n  byte first_char;\n  int result;\n  uint *ptr;\n  int tmp;\n  char *digits;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint arg;\n  uint str_length;\n  char *ptr;\n  char *formatted_str;\n  uint lengths [2];\n  \n  first_char = *(byte *)(format_str + 6);\n  formatted_str = (char *)((int)format_str + 0x43);\n  if (first_char != 0x6e) {\n    if (first_char < 0x6f) {\n      if (first_char != 99) {\n        if (first_char < 100) {\n          if (first_char == 0) goto LAB_0800558e;\n          if (first_char != 0x58) goto LAB_08005404;\n          *(undefined *)((int)format_str + 0x45) = 0x58;\n          digits = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *format_str;\n          ptr = *arg_list;\n          *arg_list = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            arg = (uint)*(ushort *)ptr;\n          }\n          else {\n            arg = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *format_str = base | 0x20;\n          }\n          if (arg == 0) {\n            *format_str = *format_str & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)format_str + 0x43) = 0;\n        }\n        else {\n          if ((first_char != 100) && (first_char != 0x69)) goto LAB_08005404;\n          arg = *format_str;\n          ptr = *arg_list;\n          if ((arg & 0x80) == 0) {\n            *arg_list = ptr + 1;\n            if ((arg & 0x40) == 0) goto LAB_08005424;\n            arg = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *arg_list = ptr + 1;\nLAB_08005424:\n            arg = *ptr;\n          }\n          if ((int)arg < 0) {\n            arg = -arg;\n            *(undefined *)((int)format_str + 0x43) = 0x2d;\n          }\n          digits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        str_length = format_str[1];\n        format_str[2] = str_length;\n        ptr = formatted_str;\n        if ((int)str_length < 0) {\n          if (arg != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)format_str + 0x42) = *digits;\n          ptr = (char *)((int)format_str + 0x42);\n        }\n        else {\n          *format_str = *format_str & 0xfffffffb;\n          if (arg == 0) {\n            if (str_length != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              str_length = arg / base;\n              ptr = ptr + -1;\n              *ptr = digits[arg - base * str_length];\n              arg = str_length;\n            } while (str_length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*format_str << 0x1f) < 0)) && ((int)format_str[1] <= (int)format_str[4]))\n        {\n          ptr[-1] = '0';\n          ptr = ptr + -1;\n        }\n        format_str[4] = (int)formatted_str - (int)ptr;\n        formatted_str = ptr;\n        goto LAB_080054fa;\n      }\n      ptr = *arg_list;\n      *arg_list = ptr + 1;\n      *(char *)((int)format_str + 0x42) = (char)*ptr;\nLAB_08005464:\n      formatted_str = (char *)((int)format_str + 0x42);\n      arg = 1;\n    }\n    else {\n      if (first_char != 0x73) {\n        if (first_char < 0x74) {\n          if (first_char == 0x6f) {\nLAB_0800548a:\n            arg = *format_str;\n            ptr = *arg_list;\n            if ((arg & 0x80) == 0) {\n              *arg_list = ptr + 1;\n              if ((arg & 0x40) == 0) goto LAB_08005498;\n              arg = (uint)*(ushort *)ptr;\n            }\n            else {\n              *arg_list = ptr + 1;\nLAB_08005498:\n              arg = *ptr;\n            }\n            if (first_char == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            digits = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (first_char == 0x70) {\n            *format_str = *format_str | 0x20;\nLAB_0800544a:\n            digits = \"0123456789abcdef\";\n            *(undefined *)((int)format_str + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (first_char == 0x75) goto LAB_0800548a;\n          if (first_char == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)format_str + 0x42) = first_char;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*arg_list;\n      *arg_list = (uint *)(ppcVar8 + 1);\n      formatted_str = *ppcVar8;\n      result = find_character_08005614(formatted_str,0,format_str[1]);\n      if (result != 0) {\n        format_str[1] = result - (int)formatted_str;\n      }\n      arg = format_str[1];\n    }\n    format_str[4] = arg;\n    *(undefined *)((int)format_str + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  arg = *format_str;\n  ppuVar7 = (uint **)*arg_list;\n  base = format_str[5];\n  if ((arg & 0x80) == 0) {\n    *arg_list = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((arg & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *arg_list = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800557a:\n    *ptr = base;\n  }\nLAB_0800558e:\n  format_str[4] = 0;\nLAB_080054fa:\n  result = calculate_length_080052e4(file,format_str,lengths,arg_count,output_func);\n  if ((result == -1) || (result = (*output_func)(file,arg_count,formatted_str,format_str[4]), result == -1)) {\nLAB_0800550e:\n    arg = 0xffffffff;\n  }\n  else {\n    if ((int)(*format_str << 0x1e) < 0) {\n      for (result = 0; result < (int)(format_str[3] - lengths[0]); result = result + 1) {\n        tmp = (*output_func)(file,arg_count,(int)format_str + 0x19,1);\n        if (tmp == -1) goto LAB_0800550e;\n      }\n    }\n    arg = format_str[3];\n    if ((int)format_str[3] < (int)lengths[0]) {\n      arg = lengths[0];\n    }\n  }\n  return arg;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "format_and_write_080053d4",
                "param_1": "file",
                "param_2": "format_str",
                "param_3": "arg_count",
                "param_4": "output_func",
                "param_5": "arg_list",
                "bVar1": "first_char",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "tmp",
                "pcVar5": "digits",
                "uVar6": "base",
                "uVar9": "arg",
                "uVar10": "str_length",
                "pcVar11": "ptr",
                "pcVar12": "formatted_str",
                "local_24": "lengths"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *str,char character,int length)\n\n{\n  char *current_character;\n  char *next_character;\n  \n  current_character = str;\n  do {\n    next_character = current_character;\n    if (next_character == str + length) {\n      return (char *)0x0;\n    }\n    current_character = next_character + 1;\n  } while (*next_character != character);\n  return next_character;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "str",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_character",
                "pcVar2": "next_character"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int destinationPtr,undefined *sourcePtr,int size)\n\n{\n  undefined *destEndPtr;\n  undefined *destPtr;\n  \n  destPtr = (undefined *)(destinationPtr + -1);\n  destEndPtr = sourcePtr + size;\n  for (; sourcePtr != destEndPtr; sourcePtr = sourcePtr + 1) {\n    destPtr = destPtr + 1;\n    *destPtr = *sourcePtr;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "destinationPtr",
                "param_2": "sourcePtr",
                "param_3": "size",
                "puVar1": "destEndPtr",
                "puVar2": "destPtr"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_reverse_08005646",
            "code": "\nvoid copyAndReverse_08005646(undefined *dest,undefined *src,int size)\n\n{\n  undefined *srcEnd;\n  \n  srcEnd = src + size;\n  if ((src < dest) && (dest < srcEnd)) {\n    dest = dest + size;\n    size = size - (int)srcEnd;\n    while (srcEnd + size != (undefined *)0x0) {\n      srcEnd = srcEnd + -1;\n      dest = dest + -1;\n      *dest = *srcEnd;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != srcEnd; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_reverse_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "srcEnd"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "update_linked_list_0800567c",
            "code": "\nvoid updateLinkedList_0800567c(undefined4 *resultPtr,int numElements,undefined4 arg3,undefined4 arg4)\n\n{\n  int **tempPtr1;\n  int **tempPtr2;\n  int **tempPtr3;\n  int *tempPtr4;\n  int **tempPtr5;\n  int **currentPtr;\n  \n  if (numElements == 0) {\n    return;\n  }\n  currentPtr = (int **)(numElements + -4);\n  if (*(int *)(numElements + -4) < 0) {\n    currentPtr = (int **)((int)currentPtr + *(int *)(numElements + -4));\n  }\n  FUNC_0800583c();\n  tempPtr3 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    currentPtr[1] = (int *)0x0;\n    tempPtr2 = tempPtr1;\n    DAT_200002ac = currentPtr;\n  }\n  else {\n    tempPtr3 = DAT_200002ac;\n    if (currentPtr < DAT_200002ac) {\n      tempPtr2 = (int **)*currentPtr;\n      tempPtr3 = (int **)((int)currentPtr + (int)tempPtr2);\n      if (DAT_200002ac == tempPtr3) {\n        tempPtr4 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        tempPtr3 = (int **)((int)tempPtr4 + (int)tempPtr2);\n        *currentPtr = (int *)tempPtr3;\n      }\n      currentPtr[1] = (int *)DAT_200002ac;\n      DAT_200002ac = currentPtr;\n    }\n    else {\n      do {\n        tempPtr5 = tempPtr3;\n        tempPtr3 = (int **)tempPtr5[1];\n        if (tempPtr3 == (int **)0x0) break;\n      } while (tempPtr3 <= currentPtr);\n      tempPtr2 = (int **)*tempPtr5;\n      if ((int **)((int)tempPtr5 + (int)tempPtr2) == currentPtr) {\n        tempPtr2 = (int **)((int)tempPtr2 + (int)*currentPtr);\n        *tempPtr5 = (int *)tempPtr2;\n        if (tempPtr3 == (int **)((int)tempPtr5 + (int)tempPtr2)) {\n          tempPtr4 = *tempPtr3;\n          tempPtr3 = (int **)tempPtr3[1];\n          tempPtr2 = (int **)((int)tempPtr2 + (int)tempPtr4);\n          *tempPtr5 = (int *)tempPtr2;\n          tempPtr5[1] = (int *)tempPtr3;\n        }\n      }\n      else if (currentPtr < (int **)((int)tempPtr5 + (int)tempPtr2)) {\n        *resultPtr = 0xc;\n      }\n      else {\n        tempPtr2 = (int **)((int)currentPtr + (int)*currentPtr);\n        if (tempPtr3 == tempPtr2) {\n          tempPtr4 = *tempPtr3;\n          tempPtr3 = (int **)tempPtr3[1];\n          tempPtr2 = (int **)((int)tempPtr4 + (int)*currentPtr);\n          *currentPtr = (int *)tempPtr2;\n        }\n        currentPtr[1] = (int *)tempPtr3;\n        tempPtr5[1] = (int *)currentPtr;\n      }\n    }\n  }\n  FUNC_0800583e(resultPtr,tempPtr2,tempPtr3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "update_linked_list_0800567c",
                "param_1": "resultPtr",
                "param_2": "numElements",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "tempPtr1",
                "ppiVar1": "tempPtr2",
                "ppiVar2": "tempPtr3",
                "piVar3": "tempPtr4",
                "ppiVar4": "tempPtr5",
                "ppiVar5": "currentPtr"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_and_initialize_memory_08005714",
            "code": "\nuint allocate_and_initialize_memory_08005714(undefined4 *output_ptr,uint input_size)\n\n{\n  uint *current_node;\n  int offset;\n  uint *previous_node;\n  uint adjusted_size;\n  uint *insertion_point;\n  uint allocated_size;\n  \n  allocated_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < input_size)) {\n    *output_ptr = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_node = DAT_200002ac;\n    insertion_point = DAT_200002ac;\n    while (previous_node = current_node, previous_node != (uint *)0x0) {\n      adjusted_size = *previous_node - allocated_size;\n      if (-1 < (int)adjusted_size) {\n        if (adjusted_size < 0xc) {\n          if (insertion_point == previous_node) {\n            current_node = (uint *)insertion_point[1];\n            DAT_200002ac = current_node;\n          }\n          else {\n            current_node = (uint *)previous_node[1];\n          }\n          if (insertion_point != previous_node) {\n            insertion_point[1] = (uint)current_node;\n            insertion_point = previous_node;\n          }\n        }\n        else {\n          *previous_node = adjusted_size;\n          *(uint *)((int)previous_node + adjusted_size) = allocated_size;\n          insertion_point = (uint *)((int)previous_node + adjusted_size);\n        }\n        goto LAB_08005778;\n      }\n      insertion_point = previous_node;\n      current_node = (uint *)previous_node[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_and_check_pointer_0800581c(output_ptr);\n    }\n    current_node = (uint *)update_and_check_pointer_0800581c(output_ptr,allocated_size);\n    if ((current_node != (uint *)0xffffffff) &&\n       ((insertion_point = (uint *)((int)current_node + 3U & 0xfffffffc), current_node == insertion_point ||\n        (offset = update_and_check_pointer_0800581c(output_ptr,(int)insertion_point - (int)current_node), offset != -1)))) {\n      *insertion_point = allocated_size;\nLAB_08005778:\n      FUNC_0800583e(output_ptr);\n      allocated_size = (int)insertion_point + 0xbU & 0xfffffff8;\n      offset = allocated_size - (int)(insertion_point + 1);\n      if (offset != 0) {\n        *(int *)((int)insertion_point + offset) = -offset;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output_ptr = 0xc;\n    FUNC_0800583e(output_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_and_initialize_memory_08005714",
                "param_1": "output_ptr",
                "param_2": "input_size",
                "puVar1": "current_node",
                "iVar2": "offset",
                "puVar3": "previous_node",
                "uVar4": "adjusted_size",
                "puVar5": "insertion_point",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_and_initialize_memory_or_copy_data_080057d0",
            "code": "\nint allocateAndInitializeMemoryOrCopyData_080057d0(undefined4 ptr1,int size,uint limit,undefined4 param4)\n\n{\n  int result;\n  uint calculatedValue;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      update_linked_list_0800567c();\n      result = 0;\n    }\n    else {\n      calculatedValue = calculate_value_08005840();\n      result = size;\n      if ((calculatedValue < limit) && (result = allocate_and_initialize_memory_08005714(ptr1,limit), result != 0)) {\n        copy_data_08005630(result,size,limit);\n        update_linked_list_0800567c(ptr1,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_initialize_memory_08005714(ptr1,limit,limit,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_and_initialize_memory_or_copy_data_080057d0",
                "param_1": "ptr1",
                "param_2": "size",
                "param_3": "limit",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "calculatedValue"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_and_check_pointer_0800581c",
            "code": "\nvoid updateAndCheckPointer_0800581c(int *result,undefined4 value)\n\n{\n  int updateResult;\n  \n  DAT_2000169c = 0;\n  updateResult = update_pointer_080072b8(value);\n  if ((updateResult == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_and_check_pointer_0800581c",
                "param_1": "result",
                "param_2": "value",
                "iVar1": "updateResult"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_value_08005840",
            "code": "\nint calculateValue_08005840(undefined4 param1,int param2)\n\n{\n  int result;\n  \n  result = *(int *)(param2 + -4) + -4;\n  if (*(int *)(param2 + -4) < 0) {\n    result = result + *(int *)(param2 + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_value_08005840",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "validate_and_initialize_data_08005854",
            "code": "\nundefined8 validateAndInitializeData_08005854(undefined4 input1,undefined4 input2)\n\n{\n  int isValid;\n  undefined4 *ptrDataValue;\n  int *ptrDataValueInt;\n  undefined8 finalValue;\n  undefined8 funcResult;\n  undefined4 flag;\n  undefined *data;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input1Copy2;\n  undefined4 input2Copy2;\n  undefined8 infinityValue;\n  int validInputCheck;\n  \n  finalValue = calculate_final_value_08005c70();\n  if (DAT_20000224 == -1) {\n    return finalValue;\n  }\n  validInputCheck = check_valid_inputs_08000a04(input1,input2,input1,input2);\n  if (validInputCheck != 0) {\n    return finalValue;\n  }\n  funcResult = FUNC_0800708c(input1,input2);\n  isValid = is_input_valid_080009f0((int)funcResult,(int)((ulonglong)funcResult >> 0x20),0,0x3ff00000);\n  if (isValid == 0) {\n    return finalValue;\n  }\n  flag = 1;\n  data = &DAT_080073ac;\n  input1Copy = input1;\n  input2Copy = input2;\n  input1Copy2 = input1;\n  input2Copy2 = input2;\n  infinityValue = get_infinity_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    isValid = initialize_zero_0800709e(&flag);\n    if (isValid != 0) goto LAB_080058d0;\n  }\n  ptrDataValue = (undefined4 *)get_data_value_080072ac();\n  *ptrDataValue = 0x21;\nLAB_080058d0:\n  if (validInputCheck != 0) {\n    ptrDataValueInt = (int *)get_data_value_080072ac();\n    *ptrDataValueInt = validInputCheck;\n  }\n  return infinityValue;\n}\n\n",
            "renaming": {
                "FUN_08005854": "validate_and_initialize_data_08005854",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "isValid",
                "puVar2": "ptrDataValue",
                "piVar3": "ptrDataValueInt",
                "uVar4": "finalValue",
                "uVar5": "funcResult",
                "local_48": "flag",
                "local_44": "data",
                "local_40": "input1Copy",
                "uStack_3c": "input2Copy",
                "local_38": "input1Copy2",
                "uStack_34": "input2Copy2",
                "local_30": "infinityValue",
                "local_28": "validInputCheck"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_floating_point_value_thunk_08006070",
            "code": "\nundefined8 calculateFloatingPointValue_thunk_08006070(uint operand1,uint operand2,uint operand3,uint operand4)\n\n{\n  undefined4 resultUpper32;\n  uint bitwiseShift;\n  uint uVar3;\n  int difference;\n  uint uVar5;\n  undefined8 result;\n  undefined8 xorResult;\n  \n  uVar5 = operand4 & 0x7fffffff;\n  if ((0x7ff00000 < (uVar5 | (-operand3 | operand3) >> 0x1f)) ||\n     (uVar3 = operand2 & 0x7fffffff, 0x7ff00000 < (uVar3 | (-operand1 | operand1) >> 0x1f))) {\n    result = calculate_sum_0800016c(operand1,operand2,operand3,operand4,operand4);\n    return result;\n  }\n  if ((operand4 + 0xc0100000 | operand3) == 0) {\n    result = calculate_value_08006d68();\n    return result;\n  }\n  bitwiseShift = (int)operand4 >> 0x1e & 2U | operand2 >> 0x1f;\n  if ((operand1 | uVar3) == 0) {\n    if (bitwiseShift == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (bitwiseShift != 3) {\n      return CONCAT44(operand2,operand1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((operand3 | uVar5) != 0) {\n      if (uVar5 == 0x7ff00000) {\n        if (uVar3 == 0x7ff00000) {\n          if (bitwiseShift == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (bitwiseShift == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (bitwiseShift != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (bitwiseShift == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (bitwiseShift != 3) {\n          if (bitwiseShift != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (uVar3 != 0x7ff00000) {\n        difference = (int)(uVar3 - uVar5) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)operand4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            calculate_floating_point_08000724(operand1,operand2);\n            FUNC_0800708c();\n            result = calculate_value_08006d68();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)result >> 0x20);\n        resultUpper32 = (undefined4)result;\n        if (bitwiseShift == 1) {\n          return CONCAT44(difference + -0x80000000,resultUpper32);\n        }\n        if (bitwiseShift == 2) {\n          xorResult = calculate_bitwise_xor_08000168(resultUpper32,difference,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (bitwiseShift == 0) {\n            return result;\n          }\n          result = calculate_bitwise_xor_08000168(resultUpper32,difference,0x33145c07,0x3ca1a626);\n          xorResult = 0x400921fb54442d18;\n        }\n        result = calculate_bitwise_xor_08000168((int)result,(int)((ulonglong)result >> 0x20),(int)xorResult,\n                             (int)((ulonglong)xorResult >> 0x20));\n        return result;\n      }\n    }\n    if ((int)operand2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_floating_point_value_thunk_08006070",
                "param_1": "operand1",
                "param_2": "operand2",
                "param_3": "operand3",
                "param_4": "operand4",
                "uVar1": "resultUpper32",
                "uVar2": "bitwiseShift",
                "iVar4": "difference",
                "uVar6": "result",
                "uVar7": "xorResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_result_08005900",
            "code": "\nundefined8 calculate_result_08005900(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  char data_valid;\n  int result;\n  int *data_value_ptr;\n  undefined4 *data_ptr;\n  int shifted_value;\n  undefined4 lower_bits;\n  undefined4 data_value;\n  undefined8 result;\n  undefined8 temporary_result;\n  undefined4 type;\n  undefined *message_ptr;\n  undefined4 input_1;\n  undefined4 input_2;\n  undefined4 input_3;\n  undefined4 input_4;\n  undefined8 result;\n  int data_value;\n  \n  result = calculate_float_from_uint_08006228();\n  data_valid = DAT_20000224;\n  lower_bits = (undefined4)((ulonglong)result >> 0x20);\n  data_value = (undefined4)result;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  result = check_valid_inputs_08000a04(input_3,input_4,input_3,input_4);\n  if (result != 0) {\n    return result;\n  }\n  result = check_valid_inputs_08000a04(input_1,input_2,input_1,input_2);\n  input_1 = input_1;\n  input_2 = input_2;\n  input_3 = input_3;\n  input_4 = input_4;\n  if (result == 0) {\n    result = check_input_080009a0(input_1,input_2,0,0);\n    if (result != 0) {\n      result = check_input_080009a0(input_3,input_4,0,0);\n      if (result != 0) {\n        type = 1;\n        message_ptr = &DAT_080073b1;\n        result = 0;\n        data_value = 0;\n        if (data_valid != '\\0') {\n          result = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = calculate_shifted_value_08007092(input_3,input_4);\n      if (result == 0) {\n        return result;\n      }\n      result = is_input_valid_080009b4(input_3,input_4,0,0);\n      if (result == 0) {\n        return result;\n      }\n      type = 1;\n      message_ptr = &DAT_080073b1;\n      data_value = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      result = 0xfff0000000000000;\n      data_value = 0;\n      data_valid = DAT_20000224;\nLAB_08005a32:\n      if (data_valid != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = calculate_shifted_value_08007092(data_value,lower_bits);\n    if (((result != 0) || (shifted_value = calculate_shifted_value_08007092(input_1,input_2), shifted_value == 0)) ||\n       (shifted_value = calculate_shifted_value_08007092(input_3,input_4), shifted_value == 0)) {\n      result = check_input_080009a0(data_value,lower_bits,0,0);\n      if (result == 0) {\n        return result;\n      }\n      result = calculate_shifted_value_08007092(input_1,input_2);\n      if (result == 0) {\n        return result;\n      }\n      result = calculate_shifted_value_08007092(input_3,input_4);\n      if (result == 0) {\n        return result;\n      }\n      type = 4;\n      message_ptr = &DAT_080073b1;\n      data_value = 0;\n      result._0_4_ = 0;\n      result._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    data_value = check_valid_inputs_08000a04(data_value,lower_bits);\n    data_valid = DAT_20000224;\n    if (data_value != 0) {\n      message_ptr = &DAT_080073b1;\n      type = 1;\n      data_value = result;\n      if (DAT_20000224 != '\\0') {\n        result = calculate_floating_point_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      message_ptr = &DAT_080073b1;\n      type = 1;\n      result = 0;\n      goto LAB_08005978;\n    }\n    message_ptr = &DAT_080073b1;\n    type = 3;\n    if (DAT_20000224 == '\\0') {\n      result._0_4_ = 0xe0000000;\n      result._4_4_ = 0x47efffff;\n      result = is_input_valid_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        result = calculate_result_08005900_080004d0(input_3,input_4,0,0x3fe00000);\n        temporary_result = calculate_result_08005900_080070b0();\n        result = check_input_080009a0((int)result,(int)((ulonglong)result >> 0x20),(int)temporary_result,\n                             (int)((ulonglong)temporary_result >> 0x20));\n        if (result == 0) {\n          result._0_4_ = 0xe0000000;\n          result._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_zero_0800709e(&type);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      result._0_4_ = 0;\n      result._4_4_ = 0x7ff00000;\n      result = is_input_valid_080009b4(input_1,input_2,0,0);\n      if (result != 0) {\n        result = calculate_result_08005900_080004d0(input_3,input_4,0,0x3fe00000);\n        temporary_result = calculate_result_08005900_080070b0();\n        result = check_input_080009a0((int)result,(int)((ulonglong)result >> 0x20),(int)temporary_result,\n                             (int)((ulonglong)temporary_result >> 0x20));\n        if (result == 0) {\n          result._0_4_ = 0;\n          result._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    data_ptr = (undefined4 *)get_data_value_080072ac();\n    data_value = 0x22;\n  }\n  else {\n    result = check_input_080009a0(input_3,input_4,0,0);\n    if (result == 0) {\n      return result;\n    }\n    type = 1;\n    message_ptr = &DAT_080073b1;\n    result = 0x3ff0000000000000;\n    data_value = 0;\n    if (data_valid == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_zero_0800709e(&type);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    data_ptr = (undefined4 *)get_data_value_080072ac();\n    data_value = 0x21;\n  }\n  *data_ptr = data_value;\nLAB_080059d0:\n  if (data_value != 0) {\n    data_value_ptr = (int *)get_data_value_080072ac();\n    *data_value_ptr = data_value;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_result_08005900",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "cVar1": "data_valid",
                "iVar2": "result",
                "piVar3": "data_value_ptr",
                "puVar4": "data_ptr",
                "iVar5": "shifted_value",
                "uVar6": "lower_bits",
                "uVar7": "data_value",
                "uVar8": "result",
                "uVar9": "temporary_result",
                "local_50": "type",
                "local_4c": "message_ptr",
                "local_48": "input_1",
                "uStack_44": "input_2",
                "local_40": "input_3",
                "uStack_3c": "input_4",
                "local_38": "result",
                "local_30": "data_value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "perform_calculation_08005bc8",
            "code": "\nundefined8 performCalculation_08005bc8(undefined4 input1,undefined4 input2)\n\n{\n  char flag;\n  int isValid;\n  int *dataPtr;\n  undefined4 *dataValuePtr;\n  undefined8 result;\n  undefined4 option;\n  undefined *message;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param1Copy;\n  undefined4 param2Copy;\n  undefined8 initializedValue;\n  int inputValue;\n  \n  result = calculate_float_from_uint_08006c0c();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  inputValue = check_valid_inputs_08000a04(input1,input2,input1,input2);\n  if (inputValue != 0) {\n    return result;\n  }\n  isValid = is_input_valid_080009b4(input1,input2,0,0);\n  if (isValid == 0) {\n    return result;\n  }\n  option = 1;\n  message = &DAT_080073b5;\n  param1 = input1;\n  param2 = input2;\n  param1Copy = input1;\n  param2Copy = input2;\n  if (flag == '\\0') {\n    initializedValue = 0;\nLAB_08005c26:\n    isValid = initialize_zero_0800709e(&option);\n    if (isValid != 0) goto LAB_08005c2e;\n  }\n  else {\n    initializedValue = calculate_floating_point_08000724(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  dataValuePtr = (undefined4 *)get_data_value_080072ac();\n  *dataValuePtr = 0x21;\nLAB_08005c2e:\n  if (inputValue != 0) {\n    dataPtr = (int *)get_data_value_080072ac();\n    *dataPtr = inputValue;\n  }\n  return initializedValue;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "perform_calculation_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "flag",
                "iVar2": "isValid",
                "piVar3": "dataPtr",
                "puVar4": "dataValuePtr",
                "uVar5": "result",
                "local_50": "option",
                "local_4c": "message",
                "local_48": "param1",
                "uStack_44": "param2",
                "local_40": "param1Copy",
                "uStack_3c": "param2Copy",
                "local_38": "initializedValue",
                "local_30": "inputValue"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_final_value_08005c70",
            "code": "\nundefined8 calculate_final_value_08005c70(uint input_param_1,uint input_param_2)\n\n{\n  int isInputValid;\n  undefined4 first_val_high;\n  undefined4 first_val_low;\n  undefined4 sum_val_high;\n  undefined4 sum_val_low;\n  undefined4 result_val_high;\n  undefined4 result_val_low;\n  uint uVar8;\n  undefined8 final_result_high;\n  undefined8 final_result_low;\n  undefined8 temp_result_high;\n  \n  final_result_high = CONCAT44(input_param_2,input_param_1);\n  uVar8 = input_param_2 & 0x7fffffff;\n  if (uVar8 < 0x3ff00000) {\n    if (uVar8 < 0x3fe00000) {\n      if (0x3e3fffff < uVar8) {\n        final_result_low = calculate_result_080004d0(input_param_1,input_param_2,input_param_1,input_param_2);\n        result_val_low = (undefined4)((ulonglong)final_result_low >> 0x20);\n        result_val_high = (undefined4)final_result_low;\n        final_result_low = calculate_result_080004d0(result_val_high,result_val_low,0xdfdf709,0x3f023de1);\n        final_result_low = calculate_sum_0800016c((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x7501b288,0x3f49efe0);\n        final_result_low = calculate_result_080004d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_val_high,result_val_low);\n        final_result_low = calculate_bitwise_xor_08000168((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0xb5688f3b,0x3fa48228);\n        final_result_low = calculate_result_080004d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_val_high,result_val_low);\n        final_result_low = calculate_sum_0800016c((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0xe884455,0x3fc9c155);\n        final_result_low = calculate_result_080004d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_val_high,result_val_low);\n        final_result_low = calculate_bitwise_xor_08000168((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x3eb6f7d,0x3fd4d612);\n        final_result_low = calculate_result_080004d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_val_high,result_val_low);\n        final_result_low = calculate_sum_0800016c((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x55555555,0x3fc55555);\n        final_result_low = calculate_result_080004d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_val_high,result_val_low);\n        temp_result_high = calculate_result_080004d0(result_val_high,result_val_low,0xb12e9282,0x3fb3b8c5);\n        temp_result_high = calculate_bitwise_xor_08000168((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_result_high = calculate_result_080004d0((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),result_val_high,result_val_low);\n        temp_result_high = calculate_sum_0800016c((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_result_high = calculate_result_080004d0((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),result_val_high,result_val_low);\n        temp_result_high = calculate_bitwise_xor_08000168((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_result_high = calculate_result_080004d0((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),result_val_high,result_val_low);\n        temp_result_high = calculate_sum_0800016c((int)temp_result_high,(int)((ulonglong)temp_result_high >> 0x20),0,0x3ff00000);\n        final_result_low = calculate_floating_point_08000724((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),(int)temp_result_high,\n                              (int)((ulonglong)temp_result_high >> 0x20));\n        final_result_low = calculate_result_080004d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),input_param_1,input_param_2);\n        goto LAB_08005cba;\n      }\n      final_result_low = calculate_sum_0800016c(input_param_1,input_param_2,0x8800759c,0x7e37e43c);\n      isInputValid = is_input_valid_080009f0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0,0x3ff00000);\n      if (isInputValid != 0) {\n        return final_result_high;\n      }\n    }\n    final_result_high = FUNC_0800708c(input_param_1,input_param_2);\n    final_result_high = calculate_bitwise_xor_08000168(0,0x3ff00000,(int)final_result_high,(int)((ulonglong)final_result_high >> 0x20));\n    final_result_high = calculate_result_080004d0((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0,0x3fe00000);\n    first_val_high = (undefined4)((ulonglong)final_result_high >> 0x20);\n    result_val_high = (undefined4)final_result_high;\n    final_result_high = calculate_result_080004d0(result_val_high,first_val_high,0xdfdf709,0x3f023de1);\n    final_result_high = calculate_sum_0800016c((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0x7501b288,0x3f49efe0);\n    final_result_high = calculate_result_080004d0((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_val_high,first_val_high);\n    final_result_high = calculate_bitwise_xor_08000168((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0xb5688f3b,0x3fa48228);\n    final_result_high = calculate_result_080004d0((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_val_high,first_val_high);\n    final_result_high = calculate_sum_0800016c((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0xe884455,0x3fc9c155);\n    final_result_high = calculate_result_080004d0((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_val_high,first_val_high);\n    final_result_high = calculate_bitwise_xor_08000168((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0x3eb6f7d,0x3fd4d612);\n    final_result_high = calculate_result_080004d0((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_val_high,first_val_high);\n    final_result_high = calculate_sum_0800016c((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0x55555555,0x3fc55555);\n    final_result_high = calculate_result_080004d0((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_val_high,first_val_high);\n    first_val_low = (undefined4)((ulonglong)final_result_high >> 0x20);\n    final_result_low = calculate_result_080004d0(result_val_high,first_val_high,0xb12e9282,0x3fb3b8c5);\n    final_result_low = calculate_bitwise_xor_08000168((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x1b8d0159,0x3fe6066c);\n    final_result_low = calculate_result_080004d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_val_high,first_val_high);\n    final_result_low = calculate_sum_0800016c((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x9c598ac8,0x40002ae5);\n    final_result_low = calculate_result_080004d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_val_high,first_val_high);\n    final_result_low = calculate_bitwise_xor_08000168((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0x1c8a2d4b,0x40033a27);\n    final_result_low = calculate_result_080004d0((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),result_val_high,first_val_high);\n    final_result_low = calculate_sum_0800016c((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),0,0x3ff00000);\n    sum_val_high = (undefined4)((ulonglong)final_result_low >> 0x20);\n    temp_result_high = calculate_float_from_uint_08006c0c(result_val_high,first_val_high);\n    sum_val_low = (undefined4)((ulonglong)temp_result_high >> 0x20);\n    result_val_low = (undefined4)temp_result_high;\n    if (uVar8 < 0x3fef3333) {\n      final_result_high = calculate_floating_point_08000724((int)final_result_high,first_val_low,(int)final_result_low,sum_val_high);\n      final_result_low = calculate_sum_0800016c(result_val_low,sum_val_low,result_val_low,sum_val_low);\n      final_result_high = calculate_result_080004d0((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),(int)final_result_low,\n                           (int)((ulonglong)final_result_low >> 0x20));\n      final_result_low = calculate_result_080004d0(0,sum_val_low,0,sum_val_low);\n      final_result_low = calculate_bitwise_xor_08000168(result_val_high,first_val_high,(int)final_result_low,(int)((ulonglong)final_result_low >> 0x20));\n      temp_result_high = calculate_sum_0800016c(result_val_low,sum_val_low,0,sum_val_low);\n      final_result_low = calculate_floating_point_08000724((int)final_result_low,(int)((ulonglong)final_result_low >> 0x20),(int)temp_result_high,\n                            (int)((ulonglong)temp_result_high >> 0x20));\n      result_val_high = (undefined4)((ulonglong)final_result_low >> 0x20);\n      final_result_low = calculate_sum_0800016c((int)final_result_low,result_val_high,(int)final_result_low,result_val_high);\n      final_result_low = calculate_bitwise_xor_08000168(0x33145c07,0x3c91a626,(int)final_result_low,(int)((ulonglong)final_result_low >> 0x20));\n      final_result_high = calculate_bitwise_xor_08000168((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),(int)final_result_low,\n                           (int)((ulonglong)final_result_low >> 0x20));\n      final_result_low = calculate_sum_0800016c(0,sum_val_low,0,sum_val_low);\n      final_result_low = calculate_bitwise_xor_08000168(0x54442d18,0x3fe921fb,(int)final_result_low,(int)((ulonglong)final_result_low >> 0x20));\n      final_result_high = calculate_bitwise_xor_08000168((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),(int)final_result_low,\n                           (int)((ulonglong)final_result_low >> 0x20));\n      result_val_high = 0x3fe921fb;\n    }\n    else {\n      final_result_high = calculate_floating_point_08000724((int)final_result_high,first_val_low,(int)final_result_low,sum_val_high);\n      final_result_high = calculate_result_080004d0((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_val_low,sum_val_low);\n      final_result_high = calculate_sum_0800016c((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),result_val_low,sum_val_low);\n      result_val_high = (undefined4)((ulonglong)final_result_high >> 0x20);\n      final_result_high = calculate_sum_0800016c((int)final_result_high,result_val_high,(int)final_result_high,result_val_high);\n      final_result_high = calculate_bitwise_xor_08000168((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),0x33145c07,0x3c91a626);\n      result_val_high = 0x3ff921fb;\n    }\n    final_result_high = calculate_bitwise_xor_08000168(0x54442d18,result_val_high,(int)final_result_high,(int)((ulonglong)final_result_high >> 0x20));\n    if ((int)input_param_2 < 1) {\n      final_result_high = CONCAT44((int)((ulonglong)final_result_high >> 0x20) + -0x80000000,(int)final_result_high);\n    }\n  }\n  else {\n    if ((uVar8 + 0xc0100000 | input_param_1) != 0) {\n      final_result_high = calculate_bitwise_xor_08000168(input_param_1,input_param_2,input_param_1,input_param_2);\n      result_val_high = (undefined4)((ulonglong)final_result_high >> 0x20);\n      final_result_high = calculate_floating_point_08000724((int)final_result_high,result_val_high,(int)final_result_high,result_val_high);\n      return final_result_high;\n    }\n    final_result_high = calculate_result_080004d0(input_param_1,input_param_2,0x54442d18,0x3ff921fb);\n    final_result_low = calculate_result_080004d0(input_param_1,input_param_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    final_result_high = calculate_sum_0800016c((int)final_result_high,(int)((ulonglong)final_result_high >> 0x20),(int)final_result_low,\n                         (int)((ulonglong)final_result_low >> 0x20));\n  }\n  return final_result_high;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_final_value_08005c70",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "iVar1": "isInputValid",
                "uVar2": "first_val_high",
                "uVar3": "first_val_low",
                "uVar4": "sum_val_high",
                "uVar5": "sum_val_low",
                "uVar6": "result_val_high",
                "uVar7": "result_val_low",
                "uVar9": "final_result_high",
                "uVar10": "final_result_low",
                "uVar11": "temp_result_high"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_value_08006070",
            "code": "\nundefined8 calculateValue_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 temp1;\n  uint temp2;\n  uint temp3;\n  int temp4;\n  uint temp5;\n  undefined8 output;\n  undefined8 temp6;\n  \n  temp5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (temp5 | (-input3 | input3) >> 0x1f)) ||\n     (temp3 = input2 & 0x7fffffff, 0x7ff00000 < (temp3 | (-input1 | input1) >> 0x1f))) {\n    output = calculate_sum_0800016c(input1,input2,input3,input4,input4);\n    return output;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    output = calculate_value_08006d68();\n    return output;\n  }\n  temp2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | temp3) == 0) {\n    if (temp2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (temp2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    output = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | temp5) != 0) {\n      if (temp5 == 0x7ff00000) {\n        if (temp3 == 0x7ff00000) {\n          if (temp2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (temp2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (temp2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (temp2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (temp2 != 3) {\n          if (temp2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (temp3 != 0x7ff00000) {\n        temp4 = (int)(temp3 - temp5) >> 0x14;\n        if (temp4 < 0x3d) {\n          if (((int)input4 < 0) && (temp4 + 0x3c < 0 != SCARRY4(temp4,0x3c))) {\n            output = 0;\n          }\n          else {\n            calculate_floating_point_08000724(input1,input2);\n            FUNC_0800708c();\n            output = calculate_value_08006d68();\n          }\n        }\n        else {\n          output = 0x3ff921fb54442d18;\n        }\n        temp4 = (int)((ulonglong)output >> 0x20);\n        temp1 = (undefined4)output;\n        if (temp2 == 1) {\n          return CONCAT44(temp4 + -0x80000000,temp1);\n        }\n        if (temp2 == 2) {\n          temp6 = calculate_bitwise_xor_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          output = 0x400921fb54442d18;\n        }\n        else {\n          if (temp2 == 0) {\n            return output;\n          }\n          output = calculate_bitwise_xor_08000168(temp1,temp4,0x33145c07,0x3ca1a626);\n          temp6 = 0x400921fb54442d18;\n        }\n        output = calculate_bitwise_xor_08000168((int)output,(int)((ulonglong)output >> 0x20),(int)temp6,\n                             (int)((ulonglong)temp6 >> 0x20));\n        return output;\n      }\n    }\n    if ((int)input2 < 0) {\n      output = 0xbff921fb54442d18;\n    }\n    else {\n      output = 0x3ff921fb54442d18;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_value_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "iVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "output",
                "uVar7": "temp6"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_float_from_uint_08006228",
            "code": "\nuint calculate_float_from_uint_08006228(uint float_value,uint exponent,uint mantissa_high,uint mantissa_low)\n\n{\n  undefined4 result_high;\n  uint result_low;\n  uint carry;\n  undefined4 temp_high;\n  undefined4 temp_low;\n  undefined4 extra_carry;\n  undefined4 extra_temp;\n  uint extra_result;\n  undefined4 extra_result_high;\n  int shift_amount;\n  int table_index;\n  undefined4 constant1_high;\n  uint constant1_low;\n  undefined4 constant2_high;\n  int integer_part;\n  uint result;\n  undefined4 temp1_high;\n  undefined4 temp1_low;\n  undefined8 temp2_high;\n  undefined8 temp2_low;\n  undefined8 temp3_high;\n  undefined8 temp3_low;\n  longlong extended_result;\n  ulonglong extended_operand;\n  undefined8 extended_temp;\n  uint special_case;\n  undefined4 temp_high2;\n  undefined4 temp_low2;\n  int calculate_flag;\n  \n  temp2_low = CONCAT44(exponent,float_value);\n  result = mantissa_low & 0x7fffffff;\n  if ((result | mantissa_high) == 0) {\n    return 0;\n  }\n  constant1_low = exponent & 0x7fffffff;\n  if (constant1_low < 0x7ff00001) {\n    if (constant1_low == 0x7ff00000) {\n      if (float_value == 0) {\n        if (0x7ff00000 < result) goto LAB_08006278;\nLAB_08006262:\n        if ((result != 0x7ff00000) || (mantissa_high == 0)) {\n          if (-1 < (int)exponent) goto LAB_0800632a;\n          if (result < 0x43400000) {\n            if (result < 0x3ff00000) {\nLAB_0800632a:\n              special_case = 0;\n              goto LAB_080062ba;\n            }\n            shift_amount = ((int)result >> 0x14) + -0x3ff;\n            if (0x14 < shift_amount) {\n              result_low = mantissa_high >> (0x34U - shift_amount & 0xff);\n              if (mantissa_high == result_low << (0x34U - shift_amount & 0xff)) {\n                special_case = 2 - (result_low & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (mantissa_high == 0) {\n              result_low = (int)result >> (0x14U - shift_amount & 0xff);\n              if (result == result_low << (0x14U - shift_amount & 0xff)) {\n                special_case = 2 - (result_low & 1);\n              }\n              else {\n                special_case = 0;\n              }\n              goto LAB_0800630c;\n            }\n            special_case = 0;\n          }\n          else {\n            special_case = 2;\nLAB_080062ba:\n            if (mantissa_high == 0) {\n              if (result == 0x7ff00000) {\n                if ((constant1_low + 0xc0100000 | float_value) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < constant1_low) {\n                  if ((int)mantissa_low < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)mantissa_low) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result == 0x3ff00000) {\n                if (-1 < (int)mantissa_low) {\n                  return float_value;\n                }\n                temp2_high = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (mantissa_low == 0x40000000) goto LAB_0800634a;\n              if ((mantissa_low == 0x3fe00000) && (-1 < (int)exponent)) {\n                result = calculate_float_from_uint_08006228_08006c0c(float_value,exponent);\n                return result;\n              }\n            }\n          }\n          temp2_high = FUNC_0800708c(float_value,exponent);\n          temp1_high = (undefined4)((ulonglong)temp2_high >> 0x20);\n          result_high = (undefined4)temp2_high;\n          extended_operand = CONCAT44(exponent,result_high) & 0x7fffffffffffffff;\n          if ((float_value == 0) && ((constant1_low == 0 || ((exponent & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)mantissa_low < 0) {\n              temp2_high = calculate_floating_point_08000724(0,0x3ff00000,result_high,temp1_high);\n            }\n            if (-1 < (int)exponent) {\n              return (uint)temp2_high;\n            }\n            if ((special_case | constant1_low + 0xc0100000) != 0) {\n              return (uint)temp2_high;\n            }\n          }\n          else {\n            result_low = 0xffffffff - ((int)exponent >> 0x1f);\n            temp2_high = temp2_low;\n            if ((special_case | result_low) != 0) {\n              if (result < 0x41e00001) {\n                calculate_flag = 0;\n                if (constant1_low < 0x100000) {\n                  extended_operand = calculate_result_080004d0();\n                  calculate_flag = -0x35;\n                }\n                result = (uint)(extended_operand >> 0x20);\n                result_high = (undefined4)extended_operand;\n                calculate_flag = ((int)result >> 0x14) + -0x3ff + calculate_flag;\n                result = result & 0xfffff;\n                constant1_low = result | 0x3ff00000;\n                if (result < 0x3988f) {\nLAB_08006628:\n                  shift_amount = 0;\n                }\n                else {\n                  if (0xbb679 < result) {\n                    constant1_low = constant1_low - 0x100000;\n                    calculate_flag = calculate_flag + 1;\n                    goto LAB_08006628;\n                  }\n                  shift_amount = 1;\n                }\n                table_index = shift_amount * 8;\n                constant1_high = (&DAT_080073c0)[shift_amount * 2];\n                constant2_high = (&DAT_080073c4)[shift_amount * 2];\n                temp2_low = calculate_bitwise_xor_08000168(result_high,constant1_low,constant1_high,constant2_high);\n                temp1_low = (undefined4)((ulonglong)temp2_low >> 0x20);\n                temp2_high = calculate_sum_0800016c(result_high,constant1_low,constant1_high,constant2_high);\n                temp2_high = calculate_floating_point_08000724(0,0x3ff00000,(int)temp2_high,(int)((ulonglong)temp2_high >> 0x20));\n                temp_high = (undefined4)((ulonglong)temp2_high >> 0x20);\n                temp3_high = calculate_result_080004d0((int)temp2_low,temp1_low,(int)temp2_high,temp_high);\n                temp_low = (undefined4)((ulonglong)temp3_high >> 0x20);\n                temp1_high = (undefined4)temp3_high;\n                temp3_high = calculate_result_080004d0(0,temp_low);\n                temp2_low = calculate_bitwise_xor_08000168((int)temp2_low,temp1_low,(int)temp3_high,\n                                      (int)((ulonglong)temp3_high >> 0x20));\n                temp3_high = calculate_bitwise_xor_08000168(0,((int)constant1_low >> 1 | 0x20000000U) + 0x80000 + shift_amount * 0x40000,\n                                      constant1_high,constant2_high);\n                temp3_high = calculate_bitwise_xor_08000168(result_high,constant1_low,(int)temp3_high,(int)((ulonglong)temp3_high >> 0x20));\n                temp3_high = calculate_result_080004d0((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),0,temp_low);\n                temp2_low = calculate_bitwise_xor_08000168((int)temp2_low,(int)((ulonglong)temp2_low >> 0x20),(int)temp3_high,\n                                      (int)((ulonglong)temp3_high >> 0x20));\n                temp2_low = calculate_result_080004d0((int)temp2_low,(int)((ulonglong)temp2_low >> 0x20),(int)temp2_high,temp_high\n                                     );\n                temp1_low = (undefined4)((ulonglong)temp2_low >> 0x20);\n                temp2_high = calculate_result_080004d0(temp1_high,temp_low);\n                temp_high = (undefined4)((ulonglong)temp2_high >> 0x20);\n                result_high = (undefined4)temp2_high;\n                temp2_high = calculate_result_080004d0(result_high,temp_high,0x4a454eef,0x3fca7e28);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),result_high,temp_high);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),result_high,temp_high);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),result_high,temp_high);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),result_high,temp_high);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp3_high = calculate_result_080004d0(result_high,temp_high,result_high,temp_high);\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp3_high,\n                                      (int)((ulonglong)temp3_high >> 0x20));\n                temp3_high = calculate_sum_0800016c(temp1_high,temp_low,0,temp_low);\n                temp3_high = calculate_result_080004d0((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),(int)temp2_low,\n                                      temp1_low);\n                temp2_high = calculate_sum_0800016c((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),(int)temp2_high,\n                                      (int)((ulonglong)temp2_high >> 0x20));\n                result_high = (undefined4)((ulonglong)temp2_high >> 0x20);\n                temp3_high = calculate_result_080004d0(0,temp_low,0,temp_low);\n                temp_high = (undefined4)((ulonglong)temp3_high >> 0x20);\n                temp3_low = calculate_sum_0800016c((int)temp3_high,temp_high,0,0x40080000);\n                calculate_sum_0800016c((int)temp3_low,(int)((ulonglong)temp3_low >> 0x20),(int)temp2_high,result_high);\n                temp3_low = calculate_result_080004d0(0,temp_low,0,extra_carry);\n                constant1_high = (undefined4)((ulonglong)temp3_low >> 0x20);\n                extended_temp = calculate_bitwise_xor_08000168(0,extra_carry,0,0x40080000);\n                temp3_high = calculate_bitwise_xor_08000168((int)extended_temp,(int)((ulonglong)extended_temp >> 0x20),(int)temp3_high,temp_high\n                                     );\n                temp2_high = calculate_bitwise_xor_08000168((int)temp2_high,result_high,(int)temp3_high,(int)((ulonglong)temp3_high >> 0x20)\n                                     );\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),temp1_high,temp_low);\n                temp2_low = calculate_result_080004d0((int)temp2_low,temp1_low,0,extra_carry);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp2_low,\n                                      (int)((ulonglong)temp2_low >> 0x20));\n                result_high = (undefined4)((ulonglong)temp2_high >> 0x20);\n                calculate_sum_0800016c((int)temp3_low,constant1_high,(int)temp2_high,result_high);\n                temp2_low = calculate_result_080004d0(0,extra_temp,0xe0000000,0x3feec709);\n                temp3_high = calculate_bitwise_xor_08000168(0,extra_temp,(int)temp3_low,constant1_high);\n                temp2_high = calculate_bitwise_xor_08000168((int)temp2_high,result_high,(int)temp3_high,(int)((ulonglong)temp3_high >> 0x20)\n                                     );\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temp3_high = calculate_result_080004d0(0,extra_temp,0x145b01f5,0xbe3e2fe0);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp3_high,\n                                      (int)((ulonglong)temp3_high >> 0x20));\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + table_index),\n                                      *(undefined4 *)(&DAT_080073e4 + table_index));\n                temp3_high = shift_and_concat_08000404(calculate_flag);\n                result_high = (undefined4)((ulonglong)temp3_high >> 0x20);\n                temp1_high = *(undefined4 *)(&DAT_080073d0 + table_index);\n                temp1_low = *(undefined4 *)(&DAT_080073d4 + table_index);\n                temp3_low = calculate_sum_0800016c((int)temp2_low,(int)((ulonglong)temp2_low >> 0x20),(int)temp2_high,\n                                      (int)((ulonglong)temp2_high >> 0x20));\n                temp3_low = calculate_sum_0800016c((int)temp3_low,(int)((ulonglong)temp3_low >> 0x20),temp1_high,temp1_low);\n                calculate_sum_0800016c((int)temp3_low,(int)((ulonglong)temp3_low >> 0x20),(int)temp3_high,result_high);\n                temp3_high = calculate_bitwise_xor_08000168(0,extra_result,(int)temp3_high,result_high);\n                extended_result = calculate_bitwise_xor_08000168((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),temp1_high,temp1_low);\n                result = extra_result;\n              }\n              else {\n                if (0x43f00000 < result) {\n                  if (constant1_low < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)mantissa_low < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  float_value = 0x8800759c;\n                  exponent = 0x7e37e43c;\n                  temp2_low = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (constant1_low < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)mantissa_low) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < constant1_low) goto LAB_08006418;\n                temp2_low = calculate_bitwise_xor_08000168(result_high,temp1_high,0,0x3ff00000);\n                temp1_high = (undefined4)((ulonglong)temp2_low >> 0x20);\n                result_high = (undefined4)temp2_low;\n                temp2_low = calculate_result_080004d0(result_high,temp1_high,0x60000000,0x3ff71547);\n                temp2_high = calculate_result_080004d0(result_high,temp1_high,0xf85ddf44,0x3e54ae0b);\n                temp3_high = calculate_result_080004d0(result_high,temp1_high,0,0x3fd00000);\n                temp3_high = calculate_bitwise_xor_08000168(0x55555555,0x3fd55555,(int)temp3_high,\n                                      (int)((ulonglong)temp3_high >> 0x20));\n                temp3_high = calculate_result_080004d0((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),result_high,temp1_high);\n                temp3_high = calculate_bitwise_xor_08000168(0,0x3fe00000,(int)temp3_high,(int)((ulonglong)temp3_high >> 0x20));\n                temp3_low = calculate_result_080004d0(result_high,temp1_high,result_high,temp1_high);\n                temp3_high = calculate_result_080004d0((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),(int)temp3_low,\n                                      (int)((ulonglong)temp3_low >> 0x20));\n                temp3_high = calculate_result_080004d0((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temp2_high = calculate_bitwise_xor_08000168((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp3_high,\n                                      (int)((ulonglong)temp3_high >> 0x20));\n                calculate_sum_0800016c((int)temp2_low,(int)((ulonglong)temp2_low >> 0x20),(int)temp2_high,\n                             (int)((ulonglong)temp2_high >> 0x20));\n                extended_result = (ulonglong)carry << 0x20;\n                result = carry;\n              }\n              temp2_low = calculate_bitwise_xor_08000168((int)extended_result,(int)((ulonglong)extended_result >> 0x20),(int)temp2_low,\n                                    (int)((ulonglong)temp2_low >> 0x20));\n              temp2_low = calculate_bitwise_xor_08000168((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp2_low,\n                                    (int)((ulonglong)temp2_low >> 0x20));\n              if ((special_case - 1 | result_low) == 0) {\n                exponent = 0xbff00000;\n              }\n              else {\n                exponent = 0x3ff00000;\n              }\n              special_case = 0;\n              temp2_high = calculate_bitwise_xor_08000168(mantissa_high,mantissa_low,0,mantissa_low);\n              temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0,result);\n              temp2_low = calculate_result_080004d0((int)temp2_low,(int)((ulonglong)temp2_low >> 0x20),mantissa_high,mantissa_low);\n              temp2_low = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp2_low,\n                                    (int)((ulonglong)temp2_low >> 0x20));\n              temp1_low = (undefined4)((ulonglong)temp2_low >> 0x20);\n              result_high = (undefined4)temp2_low;\n              temp2_low = calculate_result_080004d0(0,result,0,mantissa_low);\n              temp_high = (undefined4)((ulonglong)temp2_low >> 0x20);\n              temp1_high = (undefined4)temp2_low;\n              extended_result = calculate_sum_0800016c(result_high,temp1_low,temp1_high,temp_high);\n              constant1_low = (uint)((ulonglong)extended_result >> 0x20);\n              result = (uint)extended_result;\n              if (0x408fffffffffffff < extended_result) {\n                if ((constant1_low + 0xbf700000 | result) == 0) {\n                  temp2_high = calculate_sum_0800016c(result_high,temp1_low,0x652b82fe,0x3c971547);\n                  temp3_high = calculate_bitwise_xor_08000168(result,constant1_low,temp1_high,temp_high);\n                  shift_amount = is_input_valid_080009f0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp3_high,\n                                       (int)((ulonglong)temp3_high >> 0x20));\n                  if (shift_amount == 0) goto LAB_08006968;\n                }\n                temp2_low = calculate_result_080004d0(0,exponent,0x8800759c,0x7e37e43c);\n                float_value = 0x8800759c;\n                exponent = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((constant1_low & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((constant1_low & 0x7fffffff) < 0x3fe00001) {\n                  shift_amount = 0;\n                }\n                else {\n                  constant1_low = (0x100000 >> (((int)(constant1_low & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          constant1_low;\n                  result = (constant1_low * 2 >> 0x15) - 0x3ff;\n                  shift_amount = (int)(constant1_low & 0xfffff | 0x100000) >> (0x14 - result & 0xff);\n                  if (extended_result < 0) {\n                    shift_amount = -shift_amount;\n                  }\n                  temp2_low = calculate_bitwise_xor_08000168(temp1_high,temp_high,0,constant1_low & ~(0xfffff >> (result & 0xff)));\n                }\n                temp_low2 = (undefined4)((ulonglong)temp2_low >> 0x20);\n                temp_high2 = (undefined4)temp2_low;\n                calculate_sum_0800016c(temp_high2,temp_low2,result_high,temp1_low);\n                temp2_low = calculate_result_080004d0(0,extra_result_high,0,0x3fe62e43);\n                temp1_high = (undefined4)((ulonglong)temp2_low >> 0x20);\n                temp2_high = calculate_bitwise_xor_08000168(0,extra_result_high,temp_high2,temp_low2);\n                temp2_high = calculate_bitwise_xor_08000168(result_high,temp1_low,(int)temp2_high,(int)((ulonglong)temp2_high >> 0x20));\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temp3_high = calculate_result_080004d0(0,extra_result_high,0xca86c39,0xbe205c61);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp3_high,\n                                      (int)((ulonglong)temp3_high >> 0x20));\n                temp1_low = (undefined4)((ulonglong)temp2_high >> 0x20);\n                temp3_high = calculate_sum_0800016c((int)temp2_low,temp1_high,(int)temp2_high,temp1_low);\n                temp_high = (undefined4)((ulonglong)temp3_high >> 0x20);\n                result_high = (undefined4)temp3_high;\n                temp2_low = calculate_bitwise_xor_08000168(result_high,temp_high,(int)temp2_low,temp1_high);\n                temp2_low = calculate_bitwise_xor_08000168((int)temp2_high,temp1_low,(int)temp2_low,\n                                      (int)((ulonglong)temp2_low >> 0x20));\n                temp1_low = (undefined4)((ulonglong)temp2_low >> 0x20);\n                temp2_high = calculate_result_080004d0(result_high,temp_high,result_high,temp_high);\n                temp_low = (undefined4)((ulonglong)temp2_high >> 0x20);\n                temp1_high = (undefined4)temp2_high;\n                temp2_high = calculate_result_080004d0(temp1_high,temp_low,0x72bea4d0,0x3e663769);\n                temp2_high = calculate_bitwise_xor_08000168((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),temp1_high,temp_low);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),temp1_high,temp_low);\n                temp2_high = calculate_bitwise_xor_08000168((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),temp1_high,temp_low);\n                temp2_high = calculate_sum_0800016c((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp2_high = calculate_result_080004d0((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),temp1_high,temp_low);\n                temp2_high = calculate_bitwise_xor_08000168(result_high,temp_high,(int)temp2_high,(int)((ulonglong)temp2_high >> 0x20));\n                temp1_high = (undefined4)((ulonglong)temp2_high >> 0x20);\n                temp3_high = calculate_result_080004d0(result_high,temp_high,(int)temp2_high,temp1_high);\n                temp2_high = calculate_bitwise_xor_08000168((int)temp2_high,temp1_high,0,0x40000000);\n                temp2_high = calculate_floating_point_08000724((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),(int)temp2_high,\n                                      (int)((ulonglong)temp2_high >> 0x20));\n                temp3_high = calculate_result_080004d0(result_high,temp_high,(int)temp2_low,temp1_low);\n                temp2_low = calculate_sum_0800016c((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),(int)temp2_low,\n                                      temp1_low);\n                temp2_low = calculate_bitwise_xor_08000168((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp2_low,\n                                      (int)((ulonglong)temp2_low >> 0x20));\n                temp2_low = calculate_bitwise_xor_08000168((int)temp2_low,(int)((ulonglong)temp2_low >> 0x20),result_high,temp_high);\n                temp2_high = calculate_bitwise_xor_08000168(0,0x3ff00000,(int)temp2_low,(int)((ulonglong)temp2_low >> 0x20));\n                table_index = (int)((ulonglong)temp2_high >> 0x20);\n                integer_part = table_index + shift_amount * 0x100000;\n                temp2_low = CONCAT44(integer_part,(int)temp2_high);\n                float_value = special_case;\n                if (integer_part < 0x100000) {\n                  temp2_low = calculate_updated_value_080071c0((int)temp2_high,table_index,shift_amount);\n                }\n              }\n              else {\n                if ((constant1_low + 0x3f6f3400 | result) == 0) {\n                  temp2_high = calculate_bitwise_xor_08000168(result,constant1_low,temp1_high,temp_high);\n                  shift_amount = validate_and_return_result_080009c8(result_high,temp1_low,(int)temp2_high,(int)((ulonglong)temp2_high >> 0x20));\n                  if (shift_amount == 0) goto LAB_08006968;\n                }\n                temp2_low = calculate_result_080004d0(0,exponent,0xc2f8f359,0x1a56e1f);\n                float_value = 0xc2f8f359;\n                exponent = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result = calculate_result_080004d0((int)temp2_low,(int)((ulonglong)temp2_low >> 0x20),float_value,exponent);\n              return result;\n            }\n          }\n          result_high = (undefined4)((ulonglong)temp2_high >> 0x20);\n          temp2_high = calculate_bitwise_xor_08000168((int)temp2_high,result_high,(int)temp2_high,result_high);\n          temp2_low = temp2_high;\nLAB_08006320:\n          result = calculate_floating_point_08000724((int)temp2_high,(int)((ulonglong)temp2_high >> 0x20),(int)temp2_low,\n                                (int)((ulonglong)temp2_low >> 0x20));\n          return result;\n        }\n      }\n    }\n    else if (result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((constant1_low + 0xc0100000 | float_value) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result = get_infinity_080070a4(&DAT_0800737e);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_float_from_uint_08006228",
                "param_1": "float_value",
                "param_2": "exponent",
                "param_3": "mantissa_high",
                "param_4": "mantissa_low",
                "uVar1": "result_high",
                "uVar2": "result_low",
                "extraout_r1": "carry",
                "uVar3": "temp_high",
                "uVar4": "temp_low",
                "extraout_r1_00": "extra_carry",
                "extraout_r1_01": "extra_temp",
                "extraout_r1_02": "extra_result",
                "extraout_r1_03": "extra_result_high",
                "iVar5": "shift_amount",
                "iVar6": "table_index",
                "uVar7": "constant1_high",
                "uVar8": "constant1_low",
                "uVar9": "constant2_high",
                "iVar10": "integer_part",
                "uVar11": "result",
                "uVar12": "temp1_high",
                "uVar13": "temp1_low",
                "uVar14": "temp2_high",
                "uVar15": "temp2_low",
                "uVar16": "temp3_high",
                "uVar17": "temp3_low",
                "lVar18": "extended_result",
                "uVar19": "extended_operand",
                "uVar20": "extended_temp",
                "local_70": "special_case",
                "local_68": "temp_high2",
                "local_64": "temp_low2",
                "local_54": "calculate_flag"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_float_from_uint_08006c0c",
            "code": "\nundefined8 calculate_float_from_uint_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 result1;\n  uint dividend;\n  int shift_count;\n  int temp_shift_count;\n  uint quotient;\n  uint temp_quotient;\n  int exponent;\n  uint mantissa1;\n  uint mantissa2;\n  int loop_counter;\n  uint temp_calculation;\n  undefined8 final_result;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    final_result = calculate_result_080004d0(input1,input2,input1,input2);\n    final_result = calculate_sum_0800016c(input1,input2,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    return final_result;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != 0) {\n      final_result = calculate_bitwise_xor_08000168(input1,input2,input1,input2);\n      result1 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = calculate_floating_point_08000724((int)final_result,result1,(int)final_result,result1);\n      return final_result;\n    }\n  }\n  shift_count = (int)input2 >> 0x14;\n  if (shift_count == 0) {\n    while (input2 == 0) {\n      shift_count = shift_count + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    dividend = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      dividend = dividend + 1;\n    }\n    shift_count = shift_count - (dividend - 1);\n    input2 = input2 | input1 >> (0x20 - dividend & 0xff);\n    input1 = input1 << (dividend & 0xff);\n  }\n  exponent = 0;\n  dividend = input2 & 0xfffff | 0x100000;\n  if ((shift_count + -0x3ff) * -0x80000000 < 0) {\n    dividend = dividend * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  dividend = dividend * 2 - ((int)input1 >> 0x1f);\n  temp_shift_count = 0x16;\n  quotient = 0;\n  mantissa1 = 0x200000;\n  input1 = input1 << 1;\n  do {\n    loop_counter = quotient + mantissa1;\n    if (loop_counter <= (int)dividend) {\n      dividend = dividend - loop_counter;\n      quotient = loop_counter + mantissa1;\n      exponent = exponent + mantissa1;\n    }\n    temp_shift_count = temp_shift_count + -1;\n    dividend = dividend * 2 - ((int)input1 >> 0x1f);\n    mantissa1 = mantissa1 >> 1;\n    input1 = input1 << 1;\n  } while (temp_shift_count != 0);\n  loop_counter = 0x20;\n  mantissa2 = 0x80000000;\n  mantissa1 = 0;\n  temp_shift_count = 0;\n  do {\n    temp_calculation = mantissa2 + temp_shift_count;\n    temp_quotient = quotient;\n    if (((int)quotient < (int)dividend) || ((dividend == quotient && (temp_calculation <= input1)))) {\n      temp_shift_count = temp_calculation + mantissa2;\n      if (((int)temp_calculation < 0) && (-1 < temp_shift_count)) {\n        temp_quotient = quotient + 1;\n      }\n      dividend = dividend - quotient;\n      if (input1 < temp_calculation) {\n        dividend = dividend - 1;\n      }\n      input1 = input1 - temp_calculation;\n      mantissa1 = mantissa1 + mantissa2;\n    }\n    dividend = dividend * 2 - ((int)input1 >> 0x1f);\n    loop_counter = loop_counter + -1;\n    input1 = input1 << 1;\n    mantissa2 = mantissa2 >> 1;\n    quotient = temp_quotient;\n  } while (loop_counter != 0);\n  if ((input1 | dividend) != 0) {\n    if (mantissa1 == 0xffffffff) {\n      exponent = exponent + 1;\n      mantissa1 = 0;\n    }\n    else {\n      mantissa1 = mantissa1 + 1 & 0xfffffffe;\n    }\n  }\n  mantissa1 = mantissa1 >> 1;\n  if (exponent << 0x1f < 0) {\n    mantissa1 = mantissa1 | 0x80000000;\n  }\n  return CONCAT44((exponent >> 1) + 0x3fe00000 + (shift_count + -0x3ff >> 1) * 0x100000,mantissa1);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_float_from_uint_08006c0c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "dividend",
                "iVar3": "shift_count",
                "iVar4": "temp_shift_count",
                "uVar5": "quotient",
                "uVar6": "temp_quotient",
                "iVar7": "exponent",
                "uVar8": "mantissa1",
                "uVar9": "mantissa2",
                "iVar10": "loop_counter",
                "uVar11": "temp_calculation",
                "uVar12": "final_result"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_value_08006d68",
            "code": "\nundefined8 calculateValue_08006d68(int inputParam1,uint inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  int result;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  uint var7;\n  undefined8 resultVar1;\n  undefined8 resultVar2;\n  \n  resultVar1 = CONCAT44(inputParam2,inputParam1);\n  var7 = inputParam2 & 0x7fffffff;\n  if (var7 < 0x44100000) {\n    if (var7 < 0x3fdc0000) {\n      if (var7 < 0x3e200000) {\n        resultVar2 = calculate_sum_0800016c(inputParam1,inputParam2,0x8800759c,0x7e37e43c,inputParam4);\n        result = is_input_valid_080009f0((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return resultVar1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      resultVar1 = FUNC_0800708c();\n      var2 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n      var1 = (undefined4)resultVar1;\n      if (var7 < 0x3ff30000) {\n        if (var7 < 0x3fe60000) {\n          resultVar1 = calculate_sum_0800016c(var1,var2,var1,var2);\n          resultVar1 = calculate_bitwise_xor_08000168((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0,0x3ff00000);\n          resultVar2 = calculate_sum_0800016c(var1,var2,0,0x40000000);\n          resultVar1 = calculate_floating_point_08000724((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),(int)resultVar2,\n                               (int)((ulonglong)resultVar2 >> 0x20));\n          result = 0;\n        }\n        else {\n          resultVar1 = calculate_bitwise_xor_08000168(var1,var2,0,0x3ff00000);\n          resultVar2 = calculate_sum_0800016c(var1,var2,0,0x3ff00000);\n          resultVar1 = calculate_floating_point_08000724((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),(int)resultVar2,\n                               (int)((ulonglong)resultVar2 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (var7 < 0x40038000) {\n        resultVar1 = calculate_bitwise_xor_08000168(var1,var2,0,0x3ff80000);\n        resultVar2 = calculate_result_080004d0(var1,var2,0,0x3ff80000);\n        resultVar2 = calculate_sum_0800016c((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0,0x3ff00000);\n        resultVar1 = calculate_floating_point_08000724((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),(int)resultVar2,\n                             (int)((ulonglong)resultVar2 >> 0x20));\n        result = 2;\n      }\n      else {\n        resultVar1 = calculate_floating_point_08000724(0,0xbff00000,var1,var2);\n        result = 3;\n      }\n    }\n    var6 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n    var5 = (undefined4)resultVar1;\n    resultVar1 = calculate_result_080004d0(var5,var6,var5,var6);\n    var3 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n    var1 = (undefined4)resultVar1;\n    resultVar1 = calculate_result_080004d0(var1,var3,var1,var3);\n    var4 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n    var2 = (undefined4)resultVar1;\n    resultVar1 = calculate_result_080004d0(var2,var4,0xe322da11,0x3f90ad3a);\n    resultVar1 = calculate_sum_0800016c((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0x24760deb,0x3fa97b4b);\n    resultVar1 = calculate_result_080004d0((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),var2,var4);\n    resultVar1 = calculate_sum_0800016c((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    resultVar1 = calculate_result_080004d0((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),var2,var4);\n    resultVar1 = calculate_sum_0800016c((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0xc54c206e,0x3fb745cd);\n    resultVar1 = calculate_result_080004d0((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),var2,var4);\n    resultVar1 = calculate_sum_0800016c((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0x920083ff,0x3fc24924);\n    resultVar1 = calculate_result_080004d0((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),var2,var4);\n    resultVar1 = calculate_sum_0800016c((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0x5555550d,0x3fd55555);\n    resultVar1 = calculate_result_080004d0((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),var1,var3);\n    var1 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n    resultVar2 = calculate_result_080004d0(var2,var4,0x2c6a6c2f,0xbfa2b444);\n    resultVar2 = calculate_bitwise_xor_08000168((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0x52defd9a,0x3fadde2d);\n    resultVar2 = calculate_result_080004d0((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),var2,var4);\n    resultVar2 = calculate_bitwise_xor_08000168((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    resultVar2 = calculate_result_080004d0((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),var2,var4);\n    resultVar2 = calculate_bitwise_xor_08000168((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0xfe231671,0x3fbc71c6);\n    resultVar2 = calculate_result_080004d0((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),var2,var4);\n    resultVar2 = calculate_bitwise_xor_08000168((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0x9998ebc4,0x3fc99999);\n    resultVar2 = calculate_result_080004d0((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),var2,var4);\n    var2 = (undefined4)((ulonglong)resultVar2 >> 0x20);\n    if (result == -1) {\n      resultVar1 = calculate_sum_0800016c((int)resultVar1,var1,(int)resultVar2,var2);\n      resultVar1 = calculate_result_080004d0((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),var5,var6);\n      resultVar1 = calculate_bitwise_xor_08000168(var5,var6,(int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20));\n    }\n    else {\n      resultVar1 = calculate_sum_0800016c((int)resultVar1,var1,(int)resultVar2,var2);\n      resultVar1 = calculate_result_080004d0((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),var5,var6);\n      result = result * 8;\n      resultVar1 = calculate_bitwise_xor_08000168((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      resultVar1 = calculate_bitwise_xor_08000168((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),var5,var6);\n      resultVar1 = calculate_bitwise_xor_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)resultVar1,\n                           (int)((ulonglong)resultVar1 >> 0x20));\n      if ((int)inputParam2 < 0) {\n        resultVar1 = CONCAT44((int)((ulonglong)resultVar1 >> 0x20) + -0x80000000,(int)resultVar1);\n      }\n    }\n  }\n  else if ((var7 < 0x7ff00001) && ((var7 != 0x7ff00000 || (inputParam1 == 0)))) {\n    if ((int)inputParam2 < 1) {\n      resultVar1 = 0xbff921fb54442d18;\n    }\n    else {\n      resultVar1 = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    resultVar1 = calculate_sum_0800016c(inputParam1,inputParam2,inputParam1,inputParam2,inputParam4);\n  }\n  return resultVar1;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_value_08006d68",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "result",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "uVar8": "var7",
                "uVar9": "resultVar1",
                "uVar10": "resultVar2"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "calculate_shifted_value_08007092",
            "code": "\nuint calculateShiftedValue_08007092(undefined4 inputFlag,uint inputValue)\n\n{\n  return (inputValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "calculate_shifted_value_08007092",
                "param_1": "inputFlag",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_zero_0800709e",
            "code": "\nundefined4 initializeZero_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_zero_0800709e"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\ndouble getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_result_080070b0",
            "code": "\nundefined8 calculate_result_080070b0(uint input_param_1,uint input_param_2,undefined4 input_param_3)\n\n{\n  int index_var;\n  undefined4 ptr_1;\n  uint masked_input_2;\n  undefined4 ptr_2;\n  uint masked_result;\n  uint shift_amount;\n  uint shifted_input_2;\n  undefined8 calculated_result;\n  \n  shifted_input_2 = (input_param_2 << 1) >> 0x15;\n  shift_amount = shifted_input_2 - 0x3ff;\n  masked_input_2 = input_param_2;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      if ((input_param_2 & 0x7fffffff | input_param_1) == 0) {\n        return CONCAT44(input_param_2,input_param_1);\n      }\n      masked_input_2 = input_param_2 & 0xfffff | input_param_1;\n      index_var = ((int)input_param_2 >> 0x1f) * -8;\n      ptr_1 = *(undefined4 *)(&DAT_08007430 + index_var);\n      ptr_2 = *(undefined4 *)(&DAT_08007434 + index_var);\n      calculated_result = calculate_sum_0800016c(input_param_1,(-masked_input_2 | masked_input_2) >> 0xc & 0x80000 | input_param_2 & 0xfffe0000,ptr_1,\n                           ptr_2,input_param_1,input_param_2,input_param_3);\n      calculated_result = calculate_bitwise_xor_08000168((int)calculated_result,(int)((ulonglong)calculated_result >> 0x20),ptr_1,ptr_2);\n      return CONCAT44((uint)((ulonglong)calculated_result >> 0x20) & 0x7fffffff | input_param_2 & 0x80000000,\n                      (int)calculated_result);\n    }\n    shifted_input_2 = 0xfffff >> (shift_amount & 0xff);\n    if ((input_param_2 & shifted_input_2 | input_param_1) == 0) {\n      return CONCAT44(input_param_2,input_param_1);\n    }\n    shifted_input_2 = shifted_input_2 >> 1;\n    masked_result = input_param_2 & shifted_input_2 | input_param_1;\n    if (masked_result != 0) {\n      if (shift_amount == 0x13) {\n        masked_result = 0x80000000;\n      }\n      else {\n        masked_result = 0;\n      }\n      masked_input_2 = 0x40000 >> (shift_amount & 0xff) | input_param_2 & ~shifted_input_2;\n    }\n  }\n  else {\n    if (0x33 < (int)shift_amount) {\n      if (shift_amount != 0x400) {\n        return CONCAT44(input_param_2,input_param_1);\n      }\n      calculated_result = calculate_sum_0800016c();\n      return calculated_result;\n    }\n    shifted_input_2 = shifted_input_2 - 0x413;\n    shift_amount = 0xffffffff >> (shifted_input_2 & 0xff);\n    if ((input_param_1 & shift_amount) == 0) {\n      return CONCAT44(input_param_2,input_param_1);\n    }\n    shift_amount = shift_amount >> 1;\n    masked_result = input_param_1;\n    if ((input_param_1 & shift_amount) != 0) {\n      masked_result = 0x40000000 >> (shifted_input_2 & 0xff) | input_param_1 & ~shift_amount;\n    }\n  }\n  index_var = ((int)input_param_2 >> 0x1f) * -8;\n  ptr_1 = *(undefined4 *)(&DAT_08007430 + index_var);\n  ptr_2 = *(undefined4 *)(&DAT_08007434 + index_var);\n  calculated_result = calculate_sum_0800016c(masked_result,masked_input_2,ptr_1,ptr_2,input_param_1,input_param_2,input_param_3);\n  calculated_result = calculate_bitwise_xor_08000168((int)calculated_result,(int)((ulonglong)calculated_result >> 0x20),ptr_1,ptr_2);\n  return calculated_result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_result_080070b0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "iVar1": "index_var",
                "uVar2": "ptr_1",
                "uVar3": "masked_input_2",
                "uVar4": "ptr_2",
                "uVar5": "masked_result",
                "uVar6": "shift_amount",
                "uVar7": "shifted_input_2",
                "uVar8": "calculated_result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_updated_value_080071c0",
            "code": "\nundefined8 calculate_updated_value_080071c0(uint input1,uint input2,int modifier,undefined4 flag)\n\n{\n  uint shiftedInput2;\n  undefined4 result1;\n  int modifiedValue;\n  undefined4 result2;\n  uint shiftedResult1;\n  undefined8 combinedInputs;\n  \n  combinedInputs = CONCAT44(input2,input1);\n  shiftedInput2 = (input2 << 1) >> 0x15;\n  if (shiftedInput2 == 0) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return combinedInputs;\n    }\n    combinedInputs = calculate_result_080004d0(input1,input2,0,0x43500000);\n    if (-0xc351 < modifier) {\n      shiftedInput2 = ((uint)((int)((ulonglong)combinedInputs >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    result1 = 0xc2f8f359;\n    result2 = 0x1a56e1f;\n  }\n  else {\n    if (shiftedInput2 == 0x7ff) {\n      combinedInputs = calculate_sum_0800016c(input1,input2,input1,input2,flag);\n      return combinedInputs;\n    }\nLAB_08007210:\n    shiftedResult1 = (uint)((ulonglong)combinedInputs >> 0x20);\n    result1 = (undefined4)combinedInputs;\n    modifiedValue = shiftedInput2 + modifier;\n    if (modifiedValue < 0x7ff) {\n      if (0 < modifiedValue) {\n        return CONCAT44(shiftedResult1 & 0x800fffff | modifiedValue * 0x100000,result1);\n      }\n      if (modifiedValue + 0x35 < 0 == SCARRY4(modifiedValue,0x35)) {\n        combinedInputs = CONCAT44(shiftedResult1 & 0x800fffff | (modifiedValue + 0x36) * 0x100000,result1);\n        result1 = 0;\n        result2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (modifier < 0xc351) {\n        combinedInputs = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result1,shiftedResult1);\n        goto LAB_080071ec;\n      }\n    }\n    combinedInputs = FUNC_0800729c(0x8800759c,0x7e37e43c,result1,shiftedResult1);\n    result1 = 0x8800759c;\n    result2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  combinedInputs = calculate_result_080004d0((int)combinedInputs,(int)((ulonglong)combinedInputs >> 0x20),result1,result2);\n  return combinedInputs;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_updated_value_080071c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "modifier",
                "param_4": "flag",
                "uVar1": "shiftedInput2",
                "uVar2": "result1",
                "iVar3": "modifiedValue",
                "uVar4": "result2",
                "uVar5": "shiftedResult1",
                "uVar6": "combinedInputs"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_pointer_080072b8",
            "code": "\nvoid updatePointer_080072b8(int offset)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + offset;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_pointer_080072b8",
                "param_1": "offset"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 156830,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}