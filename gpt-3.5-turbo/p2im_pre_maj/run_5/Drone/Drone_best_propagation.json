{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "set_flag_if_unset_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 setFlagIfUnset_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "set_flag_if_unset_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_unsigned_ints_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateUnsignedInts_08000134(undefined4 unsignedInt1,undefined4 unsignedInt2)\n\n{\n  return CONCAT44(unsignedInt2,unsignedInt1);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_unsigned_ints_08000134",
                "param_1": "unsignedInt1",
                "param_2": "unsignedInt2"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *str)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_ptr;\n  \n  current_ptr = str;\n  do {\n    next_char = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "str",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_ptr"
            },
            "calling": [
                "serialPrint"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_08000168",
            "code": "\nulonglong calculate_08000168(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int tmp1;\n  byte carry;\n  uint result_bit1;\n  uint result_bit2;\n  uint result_bit3;\n  uint result_bit4;\n  uint result_bit5;\n  int shift1;\n  uint shifted_num1;\n  uint shifted_num2;\n  uint shifted_num3;\n  uint shifted_num4;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  result_bit4 = num4 ^ 0x80000000;\n  shifted_num1 = num2 << 1;\n  num4 = num4 << 1;\n  condition1 = ((num2 ^ result_bit4) & 0x7fffffff) == 0;\n  condition2 = condition1 && num1 == num3;\n  if (!condition1 || num1 != num3) {\n    condition2 = (shifted_num1 | num1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (num4 | num3) == 0;\n  }\n  shift1 = (int)shifted_num1 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  tmp1 = (int)num4 >> 0x15;\n  if (!condition2) {\n    condition2 = tmp1 == -1;\n  }\n  if (condition2) {\n    if (shift1 == -1 || tmp1 == -1) {\n      shifted_num1 = result_bit4;\n      shifted_num3 = num3;\n      if (shift1 == -1) {\n        shifted_num1 = num2;\n        shifted_num3 = num1;\n      }\n      if (shift1 != -1 || tmp1 != -1) {\n        num3 = shifted_num3;\n        result_bit4 = shifted_num1;\n      }\n      condition2 = (shifted_num3 | shifted_num1 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (num3 | result_bit4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = shifted_num1 == result_bit4;\n      }\n      if (!condition2) {\n        shifted_num1 = shifted_num1 | 0x80000;\n      }\n      return CONCAT44(shifted_num1,shifted_num3);\n    }\n    if (((num2 ^ result_bit4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shifted_num1 | num1) == 0) {\n        num1 = num3;\n        num2 = result_bit4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != result_bit4) {\n      return 0;\n    }\n    if (shifted_num1 >> 0x15 == 0) {\n      condition2 = (num1 & 0x80000000) != 0;\n      result_bit4 = num2 * 2 + (uint)condition2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)condition2)) {\n        result_bit4 = result_bit4 | 0x80000000;\n      }\n      return CONCAT44(result_bit4,num1 << 1);\n    }\n    if (shifted_num1 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shifted_num1 = shifted_num1 >> 0x15;\n  num4 = num4 >> 0x15;\n  shifted_num3 = num4 - shifted_num1;\n  condition2 = shifted_num3 != 0;\n  if (num4 < shifted_num1) {\n    shifted_num3 = -shifted_num3;\n  }\n  shifted_num2 = num1;\n  result_bit5 = num2;\n  if (condition2 && shifted_num1 <= num4) {\n    shifted_num1 = shifted_num1 + shifted_num3;\n    shifted_num2 = num3;\n    result_bit5 = result_bit4;\n    num3 = num1;\n    result_bit4 = num2;\n  }\n  if (0x36 < shifted_num3) {\n    return CONCAT44(result_bit5,shifted_num2);\n  }\n  result_bit2 = result_bit5 & 0xfffff | 0x100000;\n  if ((result_bit5 & 0x80000000) != 0) {\n    condition2 = shifted_num2 != 0;\n    shifted_num2 = -shifted_num2;\n    result_bit2 = -result_bit2 - (uint)condition2;\n  }\n  result_bit5 = result_bit4 & 0xfffff | 0x100000;\n  if ((result_bit4 & 0x80000000) != 0) {\n    condition2 = num3 != 0;\n    num3 = -num3;\n    result_bit5 = -result_bit5 - (uint)condition2;\n  }\n  if (shifted_num1 == shifted_num3) {\n    result_bit5 = result_bit5 ^ 0x100000;\n    if (shifted_num1 == 0) {\n      result_bit2 = result_bit2 ^ 0x100000;\n      shifted_num1 = 1;\n    }\n    else {\n      shifted_num3 = shifted_num3 - 1;\n    }\n  }\n  result_bit4 = -shifted_num3 + 0x20;\n  if ((int)shifted_num3 < 0x21) {\n    shifted_num4 = num3 << (result_bit4 & 0xff);\n    num3 = num3 >> (shifted_num3 & 0xff);\n    result_bit1 = shifted_num2 + num3;\n    result_bit3 = result_bit5 << (result_bit4 & 0xff);\n    result_bit4 = result_bit1 + result_bit3;\n    result_bit2 = result_bit2 + CARRY4(shifted_num2,num3) + ((int)result_bit5 >> (shifted_num3 & 0xff)) +\n            (uint)CARRY4(result_bit1,result_bit3);\n  }\n  else {\n    shifted_num4 = result_bit5 << (-shifted_num3 + 0x40 & 0xff);\n    if (num3 != 0) {\n      shifted_num4 = shifted_num4 | 2;\n    }\n    result_bit5 = (int)result_bit5 >> (shifted_num3 - 0x20 & 0xff);\n    result_bit4 = shifted_num2 + result_bit5;\n    result_bit2 = result_bit2 + ((int)result_bit5 >> 0x1f) + (uint)CARRY4(shifted_num2,result_bit5);\n  }\n  num2 = result_bit2 & 0x80000000;\n  shifted_num3 = result_bit2;\n  if ((int)result_bit2 < 0) {\n    condition2 = shifted_num4 == 0;\n    shifted_num4 = -shifted_num4;\n    shifted_num3 = -result_bit4;\n    result_bit4 = -(uint)!condition2 - result_bit4;\n    shifted_num3 = -(uint)(condition2 <= shifted_num3) - result_bit2;\n  }\n  if (0xfffff < shifted_num3) {\n    shifted_num2 = shifted_num1 - 1;\n    if (0x1fffff < shifted_num3) {\n      shifted_num2 = shifted_num3 & 1;\n      shifted_num3 = shifted_num3 >> 1;\n      carry = (byte)result_bit4;\n      result_bit4 = (uint)(shifted_num2 != 0) << 0x1f | result_bit4 >> 1;\n      shifted_num4 = (uint)(carry & 1) << 0x1f | shifted_num4 >> 1;\n      shifted_num2 = shifted_num1;\n      if (0xffbfffff < shifted_num1 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    condition2 = 0x7fffffff < shifted_num4;\n    if (shifted_num4 == 0x80000000) {\n      condition2 = (result_bit4 & 1) != 0;\n    }\n    return CONCAT44(shifted_num3 + shifted_num2 * 0x100000 + (uint)CARRY4(result_bit4,(uint)condition2) | num2,\n                    result_bit4 + condition2);\n  }\n  condition1 = (shifted_num4 & 0x80000000) != 0;\n  shifted_num4 = shifted_num4 << 1;\n  shifted_num2 = result_bit4 * 2;\n  condition2 = CARRY4(result_bit4,result_bit4);\n  result_bit4 = result_bit4 * 2 + (uint)condition1;\n  shifted_num3 = shifted_num3 * 2 + (uint)(condition2 || CARRY4(shifted_num2,(uint)condition1));\n  shifted_num2 = shifted_num1 - 2;\n  if ((shifted_num3 & 0x100000) != 0) goto LAB_08000278;\n  result_bit5 = result_bit4;\n  shifted_num1 = shifted_num3;\n  if (shifted_num3 == 0) {\n    result_bit5 = 0;\n    shifted_num1 = result_bit4;\n  }\n  shift1 = LZCOUNT(shifted_num1);\n  if (shifted_num3 == 0) {\n    shift1 = shift1 + 0x20;\n  }\n  shifted_num3 = shift1 - 0xb;\n  condition3 = SBORROW4(shifted_num3,0x20);\n  result_bit4 = shift1 - 0x2b;\n  condition2 = (int)result_bit4 < 0;\n  condition1 = result_bit4 == 0;\n  if ((int)shifted_num3 < 0x20) {\n    condition3 = SCARRY4(result_bit4,0xc);\n    shift1 = shift1 + -0x1f;\n    condition2 = shift1 < 0;\n    condition1 = shift1 == 0;\n    result_bit4 = shifted_num3;\n    if (!condition1 && condition2 == condition3) {\n      result_bit5 = shifted_num1 << (shifted_num3 & 0xff);\n      shifted_num1 = shifted_num1 >> (0xcU - shift1 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    shifted_num4 = 0x20 - result_bit4;\n  }\n  shifted_num1 = shifted_num1 << (result_bit4 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    shifted_num1 = shifted_num1 | result_bit5 >> (shifted_num4 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    result_bit5 = result_bit5 << (result_bit4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shifted_num3 <= (int)shifted_num2) {\n    return CONCAT44(shifted_num1 + (shifted_num2 - shifted_num3) * 0x100000 | num2,result_bit5);\n  }\n  result_bit4 = ~(shifted_num2 - shifted_num3);\n  if ((int)result_bit4 < 0x1f) {\n    shift1 = result_bit4 - 0x13;\n    if (shift1 != 0 && shift1 < 0 == SCARRY4(result_bit4 - 0x1f,0xc)) {\n      return CONCAT44(result_bit2,result_bit5 >> (0x20 - (0xcU - shift1) & 0xff) | shifted_num1 << (0xcU - shift1 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result_bit4 = result_bit4 + 1;\n    return CONCAT44(num2 | shifted_num1 >> (result_bit4 & 0xff),\n                    result_bit5 >> (result_bit4 & 0xff) | shifted_num1 << (0x20 - result_bit4 & 0xff));\n  }\n  return CONCAT44(result_bit2,shifted_num1 >> (result_bit4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_08000168",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "tmp1",
                "bVar2": "carry",
                "uVar3": "result_bit1",
                "uVar4": "result_bit2",
                "uVar5": "result_bit3",
                "uVar6": "result_bit4",
                "uVar7": "result_bit5",
                "iVar8": "shift1",
                "uVar9": "shifted_num1",
                "uVar10": "shifted_num2",
                "uVar11": "shifted_num3",
                "uVar12": "shifted_num4",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "taskScheduler",
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_result_0800016c",
            "code": "\nulonglong calculate_result_0800016c(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte carry1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shiftedNum1;\n  uint shiftedNum2;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  shiftedNum1 = num2 << 1;\n  result1 = num4 << 1;\n  flag1 = ((num2 ^ num4) & 0x7fffffff) == 0;\n  flag2 = flag1 && num1 == num3;\n  if (!flag1 || num1 != num3) {\n    flag2 = (shiftedNum1 | num1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (result1 | num3) == 0;\n  }\n  shift2 = (int)shiftedNum1 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)result1 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      result1 = num4;\n      shiftedNum1 = num3;\n      if (shift2 == -1) {\n        result1 = num2;\n        shiftedNum1 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = shiftedNum1;\n        num4 = result1;\n      }\n      flag2 = (shiftedNum1 | result1 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (num3 | num4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result1 == num4;\n      }\n      if (!flag2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,shiftedNum1);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shiftedNum1 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (shiftedNum1 >> 0x15 == 0) {\n      flag2 = (num1 & 0x80000000) != 0;\n      result1 = num2 * 2 + (uint)flag2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)flag2)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,num1 << 1);\n    }\n    if (shiftedNum1 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shiftedNum1 = shiftedNum1 >> 0x15;\n  result1 = result1 >> 0x15;\n  result2 = result1 - shiftedNum1;\n  flag2 = result2 != 0;\n  if (result1 < shiftedNum1) {\n    result2 = -result2;\n  }\n  shiftedNum2 = num1;\n  temp3 = num2;\n  if (flag2 && shiftedNum1 <= result1) {\n    shiftedNum1 = shiftedNum1 + result2;\n    shiftedNum2 = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < result2) {\n    return CONCAT44(temp3,shiftedNum2);\n  }\n  result1 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    flag2 = shiftedNum2 != 0;\n    shiftedNum2 = -shiftedNum2;\n    result1 = -result1 - (uint)flag2;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    flag2 = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)flag2;\n  }\n  if (shiftedNum1 == result2) {\n    temp3 = temp3 ^ 0x100000;\n    if (shiftedNum1 == 0) {\n      result1 = result1 ^ 0x100000;\n      shiftedNum1 = 1;\n    }\n    else {\n      result2 = result2 - 1;\n    }\n  }\n  result4 = -result2 + 0x20;\n  if ((int)result2 < 0x21) {\n    result3 = num3 << (result4 & 0xff);\n    num3 = num3 >> (result2 & 0xff);\n    temp1 = shiftedNum2 + num3;\n    temp2 = temp3 << (result4 & 0xff);\n    result4 = temp1 + temp2;\n    result1 = result1 + CARRY4(shiftedNum2,num3) + ((int)temp3 >> (result2 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    result3 = temp3 << (-result2 + 0x40 & 0xff);\n    if (num3 != 0) {\n      result3 = result3 | 2;\n    }\n    temp3 = (int)temp3 >> (result2 - 0x20 & 0xff);\n    result4 = shiftedNum2 + temp3;\n    result1 = result1 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shiftedNum2,temp3);\n  }\n  num2 = result1 & 0x80000000;\n  result2 = result1;\n  if ((int)result1 < 0) {\n    flag2 = result3 == 0;\n    result3 = -result3;\n    result2 = -result4;\n    result4 = -(uint)!flag2 - result4;\n    result2 = -(uint)(flag2 <= result2) - result1;\n  }\n  if (0xfffff < result2) {\n    shiftedNum2 = shiftedNum1 - 1;\n    if (0x1fffff < result2) {\n      result1 = result2 & 1;\n      result2 = result2 >> 1;\n      carry1 = (byte)result4;\n      result4 = (uint)(result1 != 0) << 0x1f | result4 >> 1;\n      result3 = (uint)(carry1 & 1) << 0x1f | result3 >> 1;\n      shiftedNum2 = shiftedNum1;\n      if (0xffbfffff < shiftedNum1 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag2 = 0x7fffffff < result3;\n    if (result3 == 0x80000000) {\n      flag2 = (result4 & 1) != 0;\n    }\n    return CONCAT44(result2 + shiftedNum2 * 0x100000 + (uint)CARRY4(result4,(uint)flag2) | num2,\n                    result4 + flag2);\n  }\n  flag1 = (result3 & 0x80000000) != 0;\n  result3 = result3 << 1;\n  shiftedNum2 = result4 * 2;\n  flag2 = CARRY4(result4,result4);\n  result4 = result4 * 2 + (uint)flag1;\n  result2 = result2 * 2 + (uint)(flag2 || CARRY4(shiftedNum2,(uint)flag1));\n  shiftedNum2 = shiftedNum1 - 2;\n  if ((result2 & 0x100000) != 0) goto LAB_08000278;\n  temp3 = result4;\n  shiftedNum1 = result2;\n  if (result2 == 0) {\n    temp3 = 0;\n    shiftedNum1 = result4;\n  }\n  shift2 = LZCOUNT(shiftedNum1);\n  if (result2 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result4 = shift2 - 0xb;\n  flag3 = SBORROW4(result4,0x20);\n  result2 = shift2 - 0x2b;\n  flag2 = (int)result2 < 0;\n  flag1 = result2 == 0;\n  if ((int)result4 < 0x20) {\n    flag3 = SCARRY4(result2,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    result2 = result4;\n    if (!flag1 && flag2 == flag3) {\n      temp3 = shiftedNum1 << (result4 & 0xff);\n      shiftedNum1 = shiftedNum1 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    result3 = 0x20 - result2;\n  }\n  shiftedNum1 = shiftedNum1 << (result2 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    shiftedNum1 = shiftedNum1 | temp3 >> (result3 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp3 = temp3 << (result2 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result4 <= (int)shiftedNum2) {\n    return CONCAT44(shiftedNum1 + (shiftedNum2 - result4) * 0x100000 | num2,temp3);\n  }\n  result2 = ~(shiftedNum2 - result4);\n  if ((int)result2 < 0x1f) {\n    shift2 = result2 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(result2 - 0x1f,0xc)) {\n      return CONCAT44(result1,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shiftedNum1 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result2 = result2 + 1;\n    return CONCAT44(num2 | shiftedNum1 >> (result2 & 0xff),\n                    temp3 >> (result2 & 0xff) | shiftedNum1 << (0x20 - result2 & 0xff));\n  }\n  return CONCAT44(result1,shiftedNum1 >> (result2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_result_0800016c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shift1",
                "bVar2": "carry1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "shiftedNum1",
                "uVar8": "shiftedNum2",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "__ieee754_atan2",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "shift_and_combine_08000404",
            "code": "\nulonglong shift_and_combine_08000404(uint input_value)\n\n{\n  uint temp_1;\n  uint abs_input_value;\n  uint shift_amount;\n  int leading_zeros;\n  uint adjusted_shift;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_less_than_zero;\n  bool is_zero;\n  bool is_negative;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  sign_bit = input_value & 0x80000000;\n  abs_input_value = input_value;\n  if ((int)sign_bit < 0) {\n    abs_input_value = -input_value;\n  }\n  temp_1 = 0;\n  leading_zeros = LZCOUNT(abs_input_value);\n  adjusted_shift = leading_zeros + 0x15;\n  is_negative = SBORROW4(adjusted_shift,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_less_than_zero = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (adjusted_shift < 0x20) {\n    is_negative = SCARRY4(shift_amount,0xc);\n    is_less_than_zero = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = adjusted_shift;\n    if (!is_zero && is_negative == false) {\n      temp_1 = abs_input_value << adjusted_shift;\n      abs_input_value = abs_input_value >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto shift_operations;\n    }\n  }\n  if (is_zero || is_less_than_zero != is_negative) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input_value = abs_input_value << (shift_amount & 0xff);\n  if (is_zero || is_less_than_zero != is_negative) {\n    abs_input_value = abs_input_value | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_less_than_zero != is_negative) {\n    temp_1 = 0 << (shift_amount & 0xff);\n  }\nshift_operations:\n  if (adjusted_shift < 0x433) {\n    return CONCAT44(abs_input_value + (0x432 - adjusted_shift) * 0x100000 | sign_bit,temp_1);\n  }\n  shift_amount = ~(0x432 - adjusted_shift);\n  if (0x1e < (int)shift_amount) {\n    return CONCAT44(input_value,abs_input_value >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return CONCAT44(sign_bit | abs_input_value >> (shift_amount & 0xff),\n                    temp_1 >> (shift_amount & 0xff) | abs_input_value << (0x20 - shift_amount & 0xff));\n  }\n  return CONCAT44(input_value,temp_1 >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input_value << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "shift_and_combine_08000404",
                "param_1": "input_value",
                "uVar1": "temp_1",
                "uVar2": "abs_input_value",
                "uVar3": "shift_amount",
                "iVar4": "leading_zeros",
                "uVar5": "adjusted_shift",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_less_than_zero",
                "bVar8": "is_zero",
                "bVar9": "is_negative",
                "LAB_080002f0": "shift_operations"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "apply_mask_08000428",
            "code": "\nulonglong applyMask_08000428(uint input,undefined4 mask1,undefined4 mask2,uint mask3)\n\n{\n  uint highBitMask;\n  uint temp1;\n  uint resultHigh;\n  uint shiftAmount;\n  uint temp2;\n  int count;\n  uint shift;\n  uint remaining;\n  bool isZero;\n  bool isFF000000;\n  bool isNegative;\n  \n  temp2 = input << 1;\n  isFF000000 = temp2 == 0;\n  highBitMask = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shiftAmount = (uint)((int)temp2 >> 3) >> 1;\n  resultHigh = highBitMask | shiftAmount;\n  input = input << 0x1d;\n  if (!isFF000000) {\n    mask3 = temp2 & 0xff000000;\n    isFF000000 = mask3 == 0;\n  }\n  if (!isFF000000) {\n    isFF000000 = mask3 == 0xff000000;\n  }\n  if (!isFF000000) {\n    return CONCAT44(resultHigh,input) ^ 0x3800000000000000;\n  }\n  if (temp2 == 0 || mask3 == 0xff000000) {\n    return CONCAT44(resultHigh,input);\n  }\n  temp1 = input;\n  temp2 = shiftAmount;\n  if (shiftAmount == 0) {\n    temp1 = 0;\n    temp2 = input;\n  }\n  count = LZCOUNT(temp2);\n  if (shiftAmount == 0) {\n    count = count + 0x20;\n  }\n  shift = count - 0xb;\n  isNegative = SBORROW4(shift,0x20);\n  shiftAmount = count - 0x2b;\n  isFF000000 = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if ((int)shift < 0x20) {\n    isNegative = SCARRY4(shiftAmount,0xc);\n    count = count + -0x1f;\n    isFF000000 = count < 0;\n    isZero = count == 0;\n    shiftAmount = shift;\n    if (!isZero && isFF000000 == isNegative) {\n      temp1 = temp2 << (shift & 0xff);\n      temp2 = temp2 >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isFF000000 != isNegative) {\n    remaining = 0x20 - shiftAmount;\n  }\n  temp2 = temp2 << (shiftAmount & 0xff);\n  if (isZero || isFF000000 != isNegative) {\n    temp2 = temp2 | temp1 >> (remaining & 0xff);\n  }\n  if (isZero || isFF000000 != isNegative) {\n    temp1 = temp1 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift < 0x381) {\n    return CONCAT44(temp2 + (0x380 - shift) * 0x100000 | highBitMask,temp1);\n  }\n  shiftAmount = ~(0x380 - shift);\n  if ((int)shiftAmount < 0x1f) {\n    count = shiftAmount - 0x13;\n    if (count != 0 && count < 0 == SCARRY4(shiftAmount - 0x1f,0xc)) {\n      return CONCAT44(resultHigh,temp1 >> (0x20 - (0xcU - count) & 0xff) | temp2 << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(highBitMask | temp2 >> (shiftAmount & 0xff),\n                    temp1 >> (shiftAmount & 0xff) | temp2 << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(resultHigh,temp2 >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "apply_mask_08000428",
                "param_1": "input",
                "param_2": "mask1",
                "param_3": "mask2",
                "param_4": "mask3",
                "uVar1": "highBitMask",
                "uVar2": "temp1",
                "uVar3": "resultHigh",
                "uVar4": "shiftAmount",
                "uVar5": "temp2",
                "iVar6": "count",
                "uVar7": "shift",
                "in_r12": "remaining",
                "bVar8": "isZero",
                "bVar9": "isFF000000",
                "bVar10": "isNegative"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_result_080004d0",
            "code": "\nulonglong calculate_result_080004d0(undefined4 param1,uint param2,uint param3,uint param4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint var1;\n  uint var2;\n  int var3;\n  uint var4;\n  uint unaff_r5;\n  uint var5;\n  uint var6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  var5 = 0x7ff;\n  var2 = param2 >> 0x14 & 0x7ff;\n  flag1 = var2 == 0;\n  if (!flag1) {\n    unaff_r5 = param4 >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = var2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    combinedParams = calculate_bitwise_result_080006ac();\n  }\n  var1 = (uint)(combinedParams >> 0x20);\n  var3 = var2 + unaff_r5;\n  var2 = var1 ^ param4;\n  var1 = var1 & ~(var5 << 0x15);\n  param4 = param4 & ~(var5 << 0x15);\n  flag1 = ((uint)combinedParams | var1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (param3 | param4 << 0xc) == 0;\n  }\n  var1 = var1 | 0x100000;\n  param4 = param4 | 0x100000;\n  if (flag1) {\n    param3 = (uint)combinedParams | param3;\n    param4 = (var2 & 0x80000000 | var1) ^ param4;\n    var2 = var5 >> 1;\n    flag3 = SBORROW4(var3,var2);\n    var4 = var3 - var2;\n    flag1 = var4 == 0;\n    var1 = var4;\n    if (!flag1 && (int)var2 <= var3) {\n      flag3 = SBORROW4(var5,var4);\n      var1 = var5 - var4;\n      flag1 = var5 == var4;\n    }\n    if (!flag1 && (int)var1 < 0 == flag3) {\n      param4 = param4 | var4 * 0x100000;\n    }\n    if (!flag1 && (int)var1 < 0 == flag3) {\n      return CONCAT44(param4,param3);\n    }\n    param4 = param4 | 0x100000;\n    var5 = 0;\n    flag3 = SBORROW4(var4,1);\n    var4 = var4 - 1;\n    flag1 = var4 == 0;\n    var2 = var4;\n  }\n  else {\n    result1 = (combinedParams & 0xffffffff) * (ulonglong)param3;\n    combinedParams = (combinedParams & 0xffffffff) * (ulonglong)param4 +\n             (ulonglong)var1 * (ulonglong)param3 + (result1 >> 0x20);\n    var6 = (uint)combinedParams;\n    result2 = (ulonglong)var1 * (ulonglong)param4 + (combinedParams >> 0x20);\n    var5 = (uint)result2;\n    var1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      var6 = var6 | 1;\n    }\n    var4 = (var3 + -0x3ff) - (uint)(var1 < 0x200);\n    if (var1 < 0x200) {\n      flag1 = (var6 & 0x80000000) != 0;\n      var6 = var6 << 1;\n      result2 = CONCAT44(var1 * 2 + (uint)(CARRY4(var5,var5) || CARRY4(var5 * 2,(uint)flag1)),\n                       var5 * 2 + (uint)flag1);\n    }\n    param4 = var2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    param3 = (uint)result2 << 0xb | var6 >> 0x15;\n    var5 = var6 * 0x800;\n    flag2 = 0xfc < var4;\n    flag3 = SBORROW4(var4,0xfd);\n    var1 = var4 - 0xfd;\n    flag1 = var1 == 0;\n    var2 = var1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < var1;\n      flag3 = SBORROW4(var1,0x700);\n      var2 = var4 - 0x7fd;\n      flag1 = var1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < var5;\n      if (var5 == 0x80000000) {\n        flag1 = (var6 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(param4 + var4 * 0x100000 + (uint)CARRY4(param3,(uint)flag1),param3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)var2 < 0 == flag3) {\n    return (ulonglong)(param4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(var4,0x36);\n  flag1 = (int)(var4 + 0x36) < 0;\n  flag3 = var4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    param3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    param4 = param4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(param4,param3);\n  }\n  var2 = -var4;\n  var1 = var2 - 0x20;\n  if (0x1f < (int)var2) {\n    var4 = param3 >> (var1 & 0xff) | param4 << (0x20 - var1 & 0xff);\n    var2 = (param4 >> (var1 & 0xff) & ~((param4 & 0x80000000) >> (var1 & 0xff))) -\n            ((int)var4 >> 0x1f);\n    if ((var5 | param3 << (0x20 - var1 & 0xff) | var4 << 1) == 0) {\n      var2 = var2 & ~(var4 >> 0x1f);\n    }\n    return CONCAT44(param4,var2) & 0x80000000ffffffff;\n  }\n  var3 = var2 - 0x14;\n  if (var3 == 0 || var3 < 0 != SCARRY4(var1,0xc)) {\n    var6 = param3 << (var4 + 0x20 & 0xff);\n    var1 = param3 >> (var2 & 0xff) | param4 << (var4 + 0x20 & 0xff);\n    var4 = var1 + -((int)var6 >> 0x1f);\n    if ((var5 | var6 << 1) == 0) {\n      var4 = var4 & ~(var6 >> 0x1f);\n    }\n    return CONCAT44((param4 & 0x80000000) +\n                    ((param4 & 0x7fffffff) >> (var2 & 0xff)) +\n                    (uint)CARRY4(var1,-((int)var6 >> 0x1f)),var4);\n  }\n  var2 = 0xc - var3;\n  var4 = param3 << (var2 & 0xff);\n  var2 = param3 >> (0x20 - var2 & 0xff) | param4 << (var2 & 0xff);\n  var1 = var2 + -((int)var4 >> 0x1f);\n  if ((var5 | var4 << 1) == 0) {\n    var1 = var1 & ~(var4 >> 0x1f);\n  }\n  return CONCAT44((param4 & 0x80000000) + (uint)CARRY4(var2,-((int)var4 >> 0x1f)),var1);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_result_080004d0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result1",
                "lVar2": "result2",
                "uVar3": "var1",
                "uVar4": "var2",
                "iVar5": "var3",
                "uVar6": "var4",
                "uVar7": "var5",
                "uVar8": "var6",
                "bVar9": "flag1",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "uVar12": "combinedParams"
            },
            "calling": [
                "taskScheduler",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_bitwise_result_080006ac",
            "code": "\nulonglong calculate_bitwise_result_080006ac(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_2;\n  uint temp_3;\n  uint temp_5;\n  bool is_zero;\n  \n  temp_2 = temp_5 & input_4 >> 0x14;\n  if (temp_2 != temp_5 && temp_2 != temp_5) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp_2 == 0) {\n      temp_3 = input_2 & 0x80000000;\n      do {\n        temp_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(temp_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | temp_3;\n      if (temp_2 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      temp_2 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(temp_2 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  temp_3 = input_2;\n  if (((!is_zero) && ((temp_2 != temp_5 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((temp_2 != temp_5 || (input_1 = input_3, temp_3 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_3,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_result_080006ac",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "unaff_r4": "temp_2",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "in_r12": "temp_5",
                "bVar4": "is_zero"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "calculate_improved_float_08000724",
            "code": "\nulonglong calculateImprovedFloat_08000724(undefined4 inputFloat,uint floatBits,uint lowerBits,uint upperBits)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint shiftedBits;\n  uint unaff_r5;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint MAX_FLOAT_VAL;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 combinedFloatBits;\n  \n  combinedFloatBits = CONCAT44(floatBits,inputFloat);\n  MAX_FLOAT_VAL = 0x7ff;\n  temp7 = floatBits >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    unaff_r5 = upperBits >> 0x14 & 0x7ff;\n    flag1 = unaff_r5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = unaff_r5 == 0x7ff;\n  }\n  if (flag1) {\n    combinedFloatBits = calculate_float_bits_08000892();\n  }\n  shiftedBits = (uint)((ulonglong)combinedFloatBits >> 0x20);\n  temp11 = (uint)combinedFloatBits;\n  temp8 = temp7 - unaff_r5;\n  if ((lowerBits | upperBits << 0xc) == 0) {\n    temp7 = (shiftedBits ^ upperBits) & 0x80000000 | shiftedBits & 0xfffff;\n    flag3 = SCARRY4(temp8,MAX_FLOAT_VAL >> 1);\n    shiftedBits = temp8 + (MAX_FLOAT_VAL >> 1);\n    flag1 = (int)shiftedBits < 0;\n    flag2 = shiftedBits == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(MAX_FLOAT_VAL,shiftedBits);\n      flag1 = (int)(MAX_FLOAT_VAL - shiftedBits) < 0;\n      flag2 = MAX_FLOAT_VAL == shiftedBits;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | shiftedBits * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp11);\n    }\n    temp7 = temp7 | 0x100000;\n    MAX_FLOAT_VAL = 0;\n    flag2 = SBORROW4(shiftedBits,1);\n    shiftedBits = shiftedBits - 1;\n    flag1 = shiftedBits == 0;\n    temp3 = shiftedBits;\n  }\n  else {\n    temp3 = (upperBits << 0xc) >> 4 | 0x10000000 | lowerBits >> 0x18;\n    MAX_FLOAT_VAL = lowerBits << 8;\n    temp10 = (shiftedBits << 0xc) >> 4 | 0x10000000 | temp11 >> 0x18;\n    temp11 = temp11 * 0x100;\n    temp7 = (shiftedBits ^ upperBits) & 0x80000000;\n    flag1 = temp3 <= temp10;\n    if (temp10 == temp3) {\n      flag1 = MAX_FLOAT_VAL <= temp11;\n    }\n    temp8 = temp8 + (uint)flag1;\n    shiftedBits = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      MAX_FLOAT_VAL = (uint)((lowerBits >> 0x18 & 1) != 0) << 0x1f | MAX_FLOAT_VAL >> 1;\n    }\n    temp12 = temp11 - MAX_FLOAT_VAL;\n    temp10 = (temp10 - temp3) - (uint)(temp11 < MAX_FLOAT_VAL);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | MAX_FLOAT_VAL >> 1;\n    temp11 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp12;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)flag1) {\n        temp12 = temp12 - temp1;\n        temp11 = temp11 | temp3;\n        temp10 = (temp10 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp10 - temp5 < (uint)flag2;\n      MAX_FLOAT_VAL = temp10;\n      if (temp5 < temp10 || flag1) {\n        temp12 = temp12 - temp1;\n        MAX_FLOAT_VAL = (temp10 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp10 || flag1) {\n        temp11 = temp11 | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp12;\n      flag1 = MAX_FLOAT_VAL - temp10 < (uint)flag2;\n      temp5 = MAX_FLOAT_VAL;\n      if (temp10 < MAX_FLOAT_VAL || flag1) {\n        temp12 = temp12 - temp2;\n        temp5 = (MAX_FLOAT_VAL - temp10) - (uint)!flag2;\n      }\n      if (temp10 < MAX_FLOAT_VAL || flag1) {\n        temp11 = temp11 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp12;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp10 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 - temp1;\n        temp10 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp11 = temp11 | temp3 >> 3;\n      }\n      MAX_FLOAT_VAL = temp10 | temp12;\n      if (MAX_FLOAT_VAL == 0) break;\n      temp10 = temp10 << 4 | temp12 >> 0x1c;\n      temp12 = temp12 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp11;\n        temp11 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp11;\n      temp11 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < shiftedBits;\n    flag2 = SBORROW4(shiftedBits,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp10;\n      if (temp10 == temp6) {\n        flag1 = temp1 <= temp12;\n      }\n      if (temp10 == temp6 && temp12 == temp1) {\n        flag1 = (temp11 & 1) != 0;\n      }\n      return CONCAT44(temp7 + shiftedBits * 0x100000 + (uint)CARRY4(temp11,(uint)flag1),temp11 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(shiftedBits,0x36);\n  flag1 = (int)(shiftedBits + 0x36) < 0;\n  flag2 = shiftedBits == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp11 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp11);\n  }\n  temp3 = -shiftedBits;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp11 >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    shiftedBits = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((MAX_FLOAT_VAL | temp11 << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      shiftedBits = shiftedBits & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,shiftedBits) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp10,0xc)) {\n    shiftedBits = 0xc - temp8;\n    temp3 = temp11 << (shiftedBits & 0xff);\n    temp11 = temp11 >> (0x20 - shiftedBits & 0xff) | temp7 << (shiftedBits & 0xff);\n    shiftedBits = temp11 + -((int)temp3 >> 0x1f);\n    if ((MAX_FLOAT_VAL | temp3 << 1) == 0) {\n      shiftedBits = shiftedBits & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp11,-((int)temp3 >> 0x1f)),shiftedBits);\n  }\n  temp10 = temp11 << (shiftedBits + 0x20 & 0xff);\n  temp11 = temp11 >> (temp3 & 0xff) | temp7 << (shiftedBits + 0x20 & 0xff);\n  shiftedBits = temp11 + -((int)temp10 >> 0x1f);\n  if ((MAX_FLOAT_VAL | temp10 << 1) == 0) {\n    shiftedBits = shiftedBits & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp11,-((int)temp10 >> 0x1f)),shiftedBits);\n}\n\n",
            "renaming": {
                "FUN_08000724": "calculate_improved_float_08000724",
                "param_1": "inputFloat",
                "param_2": "floatBits",
                "param_3": "lowerBits",
                "param_4": "upperBits",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "shiftedBits",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "uVar13": "MAX_FLOAT_VAL",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "combinedFloatBits"
            },
            "calling": [
                "__ieee754_atan2",
                "sqrt",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "calculate_float_bits_08000892",
            "code": "\nulonglong calculate_float_bits_08000892(uint first_num,uint second_num,uint third_num,uint fourth_num)\n\n{\n  uint bit;\n  uint target;\n  uint shifted_target;\n  uint temp_num;\n  uint constant;\n  bool is_zero;\n  \n  shifted_target = constant & fourth_num >> 0x14;\n  temp_num = second_num;\n  if (target != constant || shifted_target != constant) {\n    if (target == constant) {\n      if (((first_num | second_num << 0xc) == 0) && (first_num = third_num, temp_num = fourth_num, shifted_target != constant)\n         ) {\nLAB_08000704:\n        return (ulonglong)((second_num ^ fourth_num) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (shifted_target == constant) {\n      first_num = third_num;\n      temp_num = fourth_num;\n      if ((third_num | fourth_num << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((second_num ^ fourth_num) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (first_num | second_num << 1) == 0;\n      if (!is_zero) {\n        is_zero = (third_num | fourth_num << 1) == 0;\n      }\n      if (!is_zero) {\n        if (target == 0) {\n          temp_num = second_num & 0x80000000;\n          do {\n            bit = first_num & 0x80000000;\n            first_num = first_num << 1;\n            second_num = second_num * 2 + (uint)(bit != 0);\n          } while ((second_num & 0x100000) == 0);\n          second_num = second_num | temp_num;\n          if (shifted_target != 0) {\n            return CONCAT44(second_num,first_num);\n          }\n        }\n        do {\n          temp_num = third_num & 0x80000000;\n          third_num = third_num << 1;\n          fourth_num = fourth_num * 2 + (uint)(temp_num != 0);\n        } while ((fourth_num & 0x100000) == 0);\n        return CONCAT44(second_num,first_num);\n      }\n      if ((first_num | second_num << 1) != 0) goto LAB_08000704;\n      if ((third_num | fourth_num << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(temp_num,first_num) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "calculate_float_bits_08000892",
                "param_1": "first_num",
                "param_2": "second_num",
                "param_3": "third_num",
                "param_4": "fourth_num",
                "uVar1": "bit",
                "unaff_r4": "target",
                "uVar2": "shifted_target",
                "uVar3": "temp_num",
                "in_r12": "constant",
                "bVar4": "is_zero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equality_and_comparison_08000904",
            "code": "\nuint checkEqualityAndComparison_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equality_and_comparison_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "compare_floats_08000980",
            "code": "\nvoid compareFloats_08000980(undefined4 result,undefined4 flags,undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cdcmpeq(float1,float2,result,flags);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "compare_floats_08000980",
                "param_1": "result",
                "param_2": "flags",
                "param_3": "float1",
                "param_4": "float2"
            },
            "calling": [
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "convert_to_float_08000990",
            "code": "\nundefined4 convertToFloat_08000990(undefined4 inputValue)\n\n{\n  __nedf2();\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000990": "convert_to_float_08000990",
                "param_1": "inputValue"
            },
            "calling": [
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_dcmpeq"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_condition_080009a0",
            "code": "\nbool check_condition_080009a0(void)\n\n{\n  char condition_result;\n  \n  __aeabi_cdcmpeq();\n  return condition_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_condition_080009a0",
                "in_ZR": "condition_result"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_input_empty_080009b4",
            "code": "\nbool is_input_empty_080009b4(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_input_empty_080009b4",
                "in_CY": "input_character"
            },
            "calling": [
                "sqrt",
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "compare_equals_or_zero_080009c8",
            "code": "\nbool compareEqualsOrZero_080009c8(void)\n\n{\n  undefined isZero;\n  undefined isNegative;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)isNegative || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "compare_equals_or_zero_080009c8",
                "in_ZR": "isZero",
                "in_CY": "isNegative"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_null_termination_080009f0",
            "code": "\nbool check_null_termination_080009f0(void)\n\n{\n  char character;\n  \n  compare_with_zero();\n  return character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_null_termination_080009f0",
                "in_CY": "character",
                "__aeabi_cdrcmple": "compare_with_zero"
            },
            "calling": [
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_params_08000a04",
            "code": "\nundefined4 checkParams_08000a04(uint data1,int value1,uint data2,int value2)\n\n{\n  if ((((value1 << 1) >> 0x15 != -1) || ((data1 | value1 << 0xc) == 0)) &&\n     (((value2 << 1) >> 0x15 != -1 || ((data2 | value2 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_params_08000a04",
                "param_1": "data1",
                "param_2": "value1",
                "param_3": "data2",
                "param_4": "value2"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint inputValue,uint inputValue2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThan;\n  \n  temp1 = inputValue2 * 2;\n  isLessThan = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThan && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((inputValue2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((inputValue | inputValue2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputValue2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return inputValue2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = inputValue >> (temp1 & 0xff);\n    if (inputValue << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = inputValue2 & 0x1fffff | 0x100000;\n    inputValue = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (inputValue2 & 0x80000000 | inputValue >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "inputValue",
                "param_2": "inputValue2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_float_08000ad8",
            "code": "\nuint calculate_float_08000ad8(uint input_value,uint bias,undefined4 shift,uint rounding_mode)\n\n{\n  int bias_shifted;\n  int new_shifted_value;\n  uint biased_input;\n  uint biased_shifted_value;\n  uint result;\n  uint exponent_difference;\n  uint abs_difference;\n  bool condition;\n  \n  biased_input = bias ^ 0x80000000;\n  result = input_value << 1;\n  condition = result == 0;\n  if (!condition) {\n    rounding_mode = bias << 1;\n    condition = rounding_mode == 0;\n  }\n  if (!condition) {\n    condition = result == rounding_mode;\n  }\n  bias_shifted = (int)result >> 0x18;\n  if (!condition) {\n    condition = bias_shifted == -1;\n  }\n  if (!condition) {\n    condition = (int)rounding_mode >> 0x18 == -1;\n  }\n  if (condition) {\n    new_shifted_value = (int)(bias << 1) >> 0x18;\n    if (bias_shifted == -1 || new_shifted_value == -1) {\n      result = biased_input;\n      if (bias_shifted == -1) {\n        result = input_value;\n      }\n      if (bias_shifted != -1 || new_shifted_value != -1) {\n        biased_input = result;\n      }\n      condition = (result & 0x7fffff) == 0;\n      if (condition) {\n        condition = (biased_input & 0x7fffff) == 0;\n      }\n      if (condition) {\n        condition = result == biased_input;\n      }\n      if (!condition) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input_value ^ biased_input) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input_value = biased_input;\n      }\n      return input_value;\n    }\n    if (input_value != biased_input) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      biased_input = input_value << 1;\n      if ((input_value & 0x80000000) != 0) {\n        biased_input = biased_input | 0x80000000;\n      }\n      return biased_input;\n    }\n    if (result < 0xfe000000) {\n      return input_value + 0x800000;\n    }\n    input_value = input_value & 0x80000000;\nLAB_08000c12:\n    return input_value | 0x7f800000;\n  }\n  result = result >> 0x18;\n  rounding_mode = rounding_mode >> 0x18;\n  abs_difference = rounding_mode - result;\n  condition = abs_difference != 0;\n  exponent_difference = result;\n  if (condition && result <= rounding_mode) {\n    exponent_difference = result + abs_difference;\n  }\n  if (condition && result <= rounding_mode) {\n    biased_input = biased_input ^ input_value;\n  }\n  if (condition && result <= rounding_mode) {\n    input_value = input_value ^ biased_input;\n  }\n  if (condition && result <= rounding_mode) {\n    biased_input = biased_input ^ input_value;\n  }\n  if (rounding_mode < result) {\n    abs_difference = -abs_difference;\n  }\n  if (0x19 < abs_difference) {\n    return input_value;\n  }\n  result = input_value & 0xffffff | 0x800000;\n  if ((input_value & 0x80000000) != 0) {\n    result = -result;\n  }\n  biased_shifted_value = biased_input & 0xffffff | 0x800000;\n  if ((biased_input & 0x80000000) != 0) {\n    biased_shifted_value = -biased_shifted_value;\n  }\n  if (exponent_difference == abs_difference) {\n    biased_shifted_value = biased_shifted_value ^ 0x800000;\n    if (exponent_difference == 0) {\n      result = result ^ 0x800000;\n      exponent_difference = 1;\n    }\n    else {\n      abs_difference = abs_difference - 1;\n    }\n  }\n  result = result + ((int)biased_shifted_value >> (abs_difference & 0xff));\n  biased_shifted_value = biased_shifted_value << (0x20 - abs_difference & 0xff);\n  input_value = result & 0x80000000;\n  if ((int)result < 0) {\n    condition = biased_shifted_value != 0;\n    biased_shifted_value = -biased_shifted_value;\n    result = -result - (uint)condition;\n  }\n  if (result < 0x800000) {\n    biased_input = biased_shifted_value & 0x80000000;\n    biased_shifted_value = biased_shifted_value << 1;\n    result = result * 2 + (uint)(biased_input != 0);\n    biased_input = exponent_difference - 2;\n    if ((result & 0x800000) == 0) {\n      abs_difference = LZCOUNT(result) - 8;\n      result = result << (abs_difference & 0xff);\n      if ((int)biased_input < (int)abs_difference) {\n        result = result >> (-(biased_input - abs_difference) & 0xff);\n      }\n      else {\n        result = result + (biased_input - abs_difference) * 0x800000;\n      }\n      return result | input_value;\n    }\n  }\n  else {\n    biased_input = exponent_difference - 1;\n    if (0xffffff < result) {\n      biased_input = result & 1;\n      result = result >> 1;\n      biased_shifted_value = (uint)(biased_input != 0) << 0x1f | biased_shifted_value >> 1;\n      biased_input = exponent_difference;\n      if (0xfd < exponent_difference) goto LAB_08000c12;\n    }\n  }\n  result = result + biased_input * 0x800000 + (uint)(0x7fffffff < biased_shifted_value);\n  if (biased_shifted_value == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input_value;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_float_08000ad8",
                "param_1": "input_value",
                "param_2": "bias",
                "param_3": "shift",
                "param_4": "rounding_mode",
                "iVar1": "bias_shifted",
                "iVar2": "new_shifted_value",
                "uVar3": "biased_input",
                "uVar4": "biased_shifted_value",
                "uVar5": "result",
                "uVar6": "exponent_difference",
                "uVar7": "abs_difference",
                "bVar8": "condition"
            },
            "calling": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_float_08000adc",
            "code": "\nuint calculateFloat_08000adc(uint input1,uint input2,undefined4 flag,uint result)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint difference;\n  bool isEqual;\n  \n  temp2 = input1 << 1;\n  isEqual = temp2 == 0;\n  if (!isEqual) {\n    result = input2 << 1;\n    isEqual = result == 0;\n  }\n  if (!isEqual) {\n    isEqual = temp2 == result;\n  }\n  shiftedInput1 = (int)temp2 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)result >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      temp2 = input2;\n      if (shiftedInput1 == -1) {\n        temp2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = temp2;\n      }\n      isEqual = (temp2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = temp2 == input2;\n      }\n      if (!isEqual) {\n        temp2 = temp2 | 0x400000;\n      }\n      return temp2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp2 & 0xff000000) == 0) {\n      temp2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp2 = temp2 | 0x80000000;\n      }\n      return temp2;\n    }\n    if (temp2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  temp2 = temp2 >> 0x18;\n  result = result >> 0x18;\n  difference = result - temp2;\n  isEqual = difference != 0;\n  temp3 = temp2;\n  if (isEqual && temp2 <= result) {\n    temp3 = temp2 + difference;\n  }\n  if (isEqual && temp2 <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && temp2 <= result) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && temp2 <= result) {\n    input2 = input2 ^ input1;\n  }\n  if (result < temp2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  temp1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (temp3 == difference) {\n    temp1 = temp1 ^ 0x800000;\n    if (temp3 == 0) {\n      temp2 = temp2 ^ 0x800000;\n      temp3 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp2 = temp2 + ((int)temp1 >> (difference & 0xff));\n  temp1 = temp1 << (0x20 - difference & 0xff);\n  input1 = temp2 & 0x80000000;\n  if ((int)temp2 < 0) {\n    isEqual = temp1 != 0;\n    temp1 = -temp1;\n    temp2 = -temp2 - (uint)isEqual;\n  }\n  if (temp2 < 0x800000) {\n    difference = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    temp2 = temp2 * 2 + (uint)(difference != 0);\n    difference = temp3 - 2;\n    if ((temp2 & 0x800000) == 0) {\n      temp3 = LZCOUNT(temp2) - 8;\n      temp2 = temp2 << (temp3 & 0xff);\n      if ((int)difference < (int)temp3) {\n        temp2 = temp2 >> (-(difference - temp3) & 0xff);\n      }\n      else {\n        temp2 = temp2 + (difference - temp3) * 0x800000;\n      }\n      return temp2 | input1;\n    }\n  }\n  else {\n    difference = temp3 - 1;\n    if (0xffffff < temp2) {\n      difference = temp2 & 1;\n      temp2 = temp2 >> 1;\n      temp1 = (uint)(difference != 0) << 0x1f | temp1 >> 1;\n      difference = temp3;\n      if (0xfd < temp3) goto LAB_08000c12;\n    }\n  }\n  temp2 = temp2 + difference * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    temp2 = temp2 & 0xfffffffe;\n  }\n  return temp2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_float_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag",
                "param_4": "result",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "difference",
                "bVar7": "isEqual"
            },
            "calling": [
                "taskScheduler",
                "AHRS_GetPitch",
                "AK8963_Init",
                "Motor_DistributeSpeed",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_result_08000c3c",
            "code": "\nuint calculateResult_08000c3c(uint inputValue)\n\n{\n  uint result;\n  uint tempResult;\n  int constant;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  result = LZCOUNT(inputValue);\n  tempResult = result - 8;\n  constant = tempResult * -0x800000 + 0x4a800000;\n  if (7 < result) {\n    mask = 0 << (tempResult & 0xff);\n    result = constant + (inputValue << (tempResult & 0xff)) +\n            (0U >> (0x20 - tempResult & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  tempResult = inputValue << result + 0x18;\n  result = constant + ((inputValue >> (0x20 - (result + 0x18) & 0xff)) - ((int)tempResult >> 0x1f));\n  if ((tempResult & 0x7fffffff) == 0) {\n    result = result & ~(tempResult >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_result_08000c3c",
                "param_1": "inputValue",
                "uVar1": "result",
                "uVar2": "tempResult",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "get_modified_integer_08000c44",
            "code": "\nuint getModifiedInteger_08000c44(uint inputNumber)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int modifiedValues;\n  \n  signBit = inputNumber & 0x80000000;\n  if ((int)signBit < 0) {\n    inputNumber = -inputNumber;\n  }\n  if (inputNumber == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputNumber);\n  shiftAmount = leadingZeros - 8;\n  modifiedValues = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = modifiedValues + (inputNumber << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = inputNumber << leadingZeros + 0x18;\n  signBit = modifiedValues + ((inputNumber >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "get_modified_integer_08000c44",
                "param_1": "inputNumber",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "modifiedValues"
            },
            "calling": [
                "taskScheduler",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_float_08000cec",
            "code": "\nuint calculateFloat_08000cec(uint value1,uint value2,undefined4 value3,uint value4)\n\n{\n  longlong temp1;\n  uint result;\n  uint mask1;\n  int sum;\n  int diff;\n  uint temp2;\n  int diff2;\n  uint tempResult;\n  bool isZero;\n  bool isNegative;\n  \n  mask1 = value1 >> 0x17 & 0xff;\n  isZero = mask1 == 0;\n  if (!isZero) {\n    value4 = value2 >> 0x17 & 0xff;\n    isZero = value4 == 0;\n  }\n  if (!isZero) {\n    isZero = mask1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = value4 == 0xff;\n  }\n  if (isZero) {\n    value4 = value2 >> 0x17 & 0xff;\n    if (mask1 == 0xff || value4 == 0xff) {\n      isZero = value1 == 0 || value1 == 0x80000000;\n      result = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        isZero = value2 == 0;\n        result = value1;\n      }\n      if (!isZero) {\n        isZero = value2 == 0x80000000;\n      }\n      tempResult = result;\n      if (((isZero) || ((mask1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((value4 == 0xff && (tempResult = value2, (value2 & 0x7fffff) != 0)))) {\n        return tempResult | 0x7fc00000;\n      }\n      result = result ^ value2;\n      goto LAB_08000e3c;\n    }\n    isZero = (value1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (value2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    isZero = mask1 == 0;\n    result = value1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value1 = value1 << 1;\n        isZero = (value1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      mask1 = mask1 - 1;\n    }\n    value1 = value1 | result;\n    isZero = value4 == 0;\n    result = value2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        value2 = value2 << 1;\n        isZero = (value2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      value4 = value4 - 1;\n    }\n    value2 = value2 | result;\n  }\n  sum = mask1 + value4;\n  tempResult = value1 ^ value2;\n  mask1 = value1 << 9;\n  isZero = mask1 == 0;\n  if (!isZero) {\n    value2 = value2 << 9;\n    isZero = value2 == 0;\n  }\n  if (isZero) {\n    if (mask1 == 0) {\n      value2 = value2 << 9;\n    }\n    result = tempResult & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    isNegative = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    isZero = diff == 0;\n    diff2 = diff;\n    if (!isZero && 0x7e < sum) {\n      isNegative = SBORROW4(0xff,diff);\n      diff2 = 0xff - diff;\n      isZero = diff == 0xff;\n    }\n    if (!isZero && diff2 < 0 == isNegative) {\n      result = result | diff * 0x800000;\n    }\n    if (!isZero && diff2 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp2 = 0;\n    isNegative = SBORROW4(diff,1);\n    tempResult = sum - 0x80;\n    isZero = tempResult == 0;\n    mask1 = tempResult;\n  }\n  else {\n    temp1 = (ulonglong)(mask1 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    temp2 = (uint)temp1;\n    result = (uint)((ulonglong)temp1 >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | temp2 >> 0x1f;\n      temp2 = temp2 << 1;\n    }\n    result = tempResult & 0x80000000 | result;\n    tempResult = (sum + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(tempResult,0xfd);\n    isZero = tempResult == 0xfd;\n    mask1 = tempResult - 0xfd;\n    if (tempResult < 0xfe) {\n      result = result + tempResult * 0x800000 + (uint)(0x7fffffff < temp2);\n      if (temp2 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)mask1 < 0 != isNegative) {\n    isZero = (int)(tempResult + 0x19) < 0;\n    if (tempResult == 0xffffffe7 || isZero != SCARRY4(tempResult,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (tempResult != 0xffffffe7 && isZero == SCARRY4(tempResult,0x19)) {\n      mask1 = (result << 1) >> (-tempResult & 0xff);\n      tempResult = result << (tempResult + 0x20 & 0xff);\n      mask1 = ((uint)((result & 0x80000000) != 0) << 0x1f | mask1 >> 1) + (uint)((byte)mask1 & 1);\n      if ((temp2 | tempResult << 1) == 0) {\n        mask1 = mask1 & ~(tempResult >> 0x1f);\n      }\n      return mask1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_float_08000cec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "lVar1": "temp1",
                "uVar2": "result",
                "uVar3": "mask1",
                "iVar4": "sum",
                "iVar5": "diff",
                "uVar6": "temp2",
                "iVar7": "diff2",
                "uVar8": "tempResult",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "AHRS_GetPitch",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "PID_UpdateAltitude",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Update",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_float_result_08000e54",
            "code": "\nuint calculateFloatResult_08000e54(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  uint shiftedValue2;\n  uint shiftedValue1;\n  int diffShiftedValues;\n  uint shiftAmount;\n  int adjustedDiff;\n  uint result;\n  bool isZero;\n  bool isOverflow;\n  bool carryResult;\n  \n  shiftedValue1 = value1 >> 0x17 & 0xff;\n  isZero = shiftedValue1 == 0;\n  if (!isZero) {\n    param4 = value2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedValue1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = value2 >> 0x17 & 0xff;\n    result = value1;\n    if (shiftedValue1 == 0xff) {\n      if (((value1 & 0x7fffff) != 0) || (result = value2, param4 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = value2;\n        if ((value2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (value1 ^ value2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      isZero = (value1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (value2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = shiftedValue1 == 0;\n        result = value1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            value1 = value1 << 1;\n            isZero = (value1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          shiftedValue1 = shiftedValue1 - 1;\n        }\n        value1 = value1 | result;\n        isZero = param4 == 0;\n        result = value2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            value2 = value2 << 1;\n            isZero = (value2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          param4 = param4 - 1;\n        }\n        value2 = value2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((value1 & 0x7fffffff) == 0) {\n        if ((value2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    value1 = value1 ^ value2;\n  }\n  else {\nLAB_08000e6c:\n    diffShiftedValues = shiftedValue1 - param4;\n    if (value2 << 9 == 0) {\n      value1 = (value1 ^ value2) & 0x80000000 | value1 & 0x7fffff;\n      carryResult = SCARRY4(diffShiftedValues,0x7f);\n      adjustedDiff = diffShiftedValues + 0x7f;\n      isZero = adjustedDiff < 0;\n      isOverflow = adjustedDiff == 0;\n      if (!isOverflow && isZero == carryResult) {\n        carryResult = SBORROW4(0xff,adjustedDiff);\n        isZero = 0xff - adjustedDiff < 0;\n        isOverflow = adjustedDiff == 0xff;\n      }\n      if (!isOverflow && isZero == carryResult) {\n        value1 = value1 | adjustedDiff * 0x800000;\n      }\n      if (!isOverflow && isZero == carryResult) {\n        return value1;\n      }\n      value1 = value1 | 0x800000;\n      shiftedValue1 = 0;\n      isOverflow = SBORROW4(adjustedDiff,1);\n      shiftAmount = diffShiftedValues + 0x7e;\n      isZero = shiftAmount == 0;\n      result = shiftAmount;\n    }\n    else {\n      shiftedValue2 = (value2 << 9) >> 4 | 0x10000000;\n      shiftedValue1 = (value1 << 9) >> 4 | 0x10000000;\n      value1 = (value1 ^ value2) & 0x80000000;\n      isZero = shiftedValue2 <= shiftedValue1;\n      if (!isZero) {\n        shiftedValue1 = shiftedValue1 << 1;\n      }\n      shiftAmount = diffShiftedValues + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (shiftedValue2 <= shiftedValue1) {\n          shiftedValue1 = shiftedValue1 - shiftedValue2;\n          value1 = value1 | result;\n        }\n        isZero = shiftedValue2 >> 1 <= shiftedValue1;\n        if (isZero) {\n          shiftedValue1 = shiftedValue1 - (shiftedValue2 >> 1);\n        }\n        if (isZero) {\n          value1 = value1 | result >> 1;\n        }\n        isZero = shiftedValue2 >> 2 <= shiftedValue1;\n        if (isZero) {\n          shiftedValue1 = shiftedValue1 - (shiftedValue2 >> 2);\n        }\n        if (isZero) {\n          value1 = value1 | result >> 2;\n        }\n        isZero = shiftedValue2 >> 3 <= shiftedValue1;\n        if (isZero) {\n          shiftedValue1 = shiftedValue1 - (shiftedValue2 >> 3);\n        }\n        if (isZero) {\n          value1 = value1 | result >> 3;\n        }\n        shiftedValue1 = shiftedValue1 * 0x10;\n        isZero = shiftedValue1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isOverflow = SBORROW4(shiftAmount,0xfd);\n      isZero = shiftAmount == 0xfd;\n      result = shiftAmount - 0xfd;\n      if (shiftAmount < 0xfe) {\n        value1 = value1 + shiftAmount * 0x800000 + (uint)(shiftedValue2 <= shiftedValue1);\n        if (shiftedValue1 - shiftedValue2 == 0) {\n          value1 = value1 & 0xfffffffe;\n        }\n        return value1;\n      }\n    }\n    if (isZero || (int)result < 0 != isOverflow) {\n      isZero = (int)(shiftAmount + 0x19) < 0;\n      if (shiftAmount == 0xffffffe7 || isZero != SCARRY4(shiftAmount,0x19)) {\n        value1 = value1 & 0x80000000;\n      }\n      if (shiftAmount == 0xffffffe7 || isZero != SCARRY4(shiftAmount,0x19)) {\n        return value1;\n      }\n      result = (value1 << 1) >> (-shiftAmount & 0xff);\n      shiftAmount = value1 << (shiftAmount + 0x20 & 0xff);\n      result = ((uint)((value1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((shiftedValue1 | shiftAmount << 1) == 0) {\n        result = result & ~(shiftAmount >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return value1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_float_result_08000e54",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "shiftedValue2",
                "uVar2": "shiftedValue1",
                "iVar3": "diffShiftedValues",
                "uVar4": "shiftAmount",
                "iVar5": "adjustedDiff",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isOverflow",
                "bVar9": "carryResult"
            },
            "calling": [
                "taskScheduler",
                "PID_Compute",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "check_overflow_08000f9c",
            "code": "\nuint check_overflow_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_overflow;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_input;\n  bool is_combined_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_input = input_1_times_2 | input_2 & 0x7fffffff;\n  is_combined_zero = combined_input == 0;\n  if (!is_combined_zero) {\n    combined_input = input_1 ^ input_2;\n    is_combined_zero = combined_input == 0;\n  }\n  is_overflow = -1 < (int)combined_input;\n  if (is_overflow) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_combined_zero = input_1 == 0;\n  }\n  if ((is_overflow && input_2_times_2 <= input_1_times_2) && !is_combined_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_overflow || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_combined_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "check_overflow_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "is_overflow",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_input",
                "bVar5": "is_combined_zero",
                "return": "result"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "compare_floats_08000ffc",
            "code": "\nvoid compareFloats_08000ffc(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "compare_floats_08000ffc",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_ints_08001004",
            "code": "\nundefined8 concatenateInts_08001004(undefined4 input1,undefined4 input2)\n\n{\n  __cmpsf2();\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_ints_08001004",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "__aeabi_fcmpeq",
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_if_not_zero_08001014",
            "code": "\nbool check_if_not_zero_08001014(void)\n\n{\n  char input_char;\n  \n  __aeabi_cfcmpeq();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_if_not_zero_08001014",
                "in_ZR": "input_char"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_carry_flag_is_set_08001028",
            "code": "\nbool check_if_carry_flag_is_set_08001028(void)\n\n{\n  char carry_flag;\n  \n  compare_floats_using_hardware();\n  return carry_flag == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_carry_flag_is_set_08001028",
                "in_CY": "carry_flag",
                "__aeabi_cfcmpeq": "compare_floats_using_hardware"
            },
            "calling": [
                "PID_Compute",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "is_zr_or_cy_set_08001050",
            "code": "\nbool isZROrCYSet_08001050(void)\n\n{\n  undefined isZeroFlagSet;\n  undefined isCarryFlagSet;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isCarryFlagSet || (bool)isZeroFlagSet;\n}\n\n",
            "renaming": {
                "FUN_08001050": "is_zr_or_cy_set_08001050",
                "in_ZR": "isZeroFlagSet",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "AHRS_GetYaw"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_if_null_08001064",
            "code": "\nbool check_if_null_08001064(void)\n\n{\n  char user_input;\n  \n  __aeabi_cfrcmple();\n  return user_input == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_if_null_08001064",
                "in_CY": "user_input"
            },
            "calling": [
                "PID_Compute",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "convert_to_signed_integer_08001078",
            "code": "\nuint convertToSignedInteger_08001078(uint unsignedValue)\n\n{\n  uint newValue;\n  uint difference;\n  \n  if (unsignedValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  newValue = (unsignedValue << 1) >> 0x18;\n  difference = 0x9e - newValue;\n  if (newValue < 0x9f && difference != 0) {\n    newValue = (unsignedValue << 8 | 0x80000000) >> (difference & 0xff);\n    if ((unsignedValue & 0x80000000) != 0) {\n      newValue = -newValue;\n    }\n    return newValue;\n  }\n  if ((difference == 0xffffff9f) && ((unsignedValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  unsignedValue = unsignedValue & 0x80000000;\n  if (unsignedValue == 0) {\n    unsignedValue = 0x7fffffff;\n  }\n  return unsignedValue;\n}\n\n",
            "renaming": {
                "FUN_08001078": "convert_to_signed_integer_08001078",
                "param_1": "unsignedValue",
                "uVar1": "newValue",
                "uVar2": "difference"
            },
            "calling": [
                "taskScheduler",
                "Motor_DistributeSpeed",
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "check_param_080010c4",
            "code": "\nuint checkParam_080010c4(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "check_param_080010c4",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_system_08001104",
            "code": "\nundefined4 initializeSystem_08001104(undefined4 priorityLevel)\n\n{\n  uint systemClockFrequency;\n  \n  systemClockFrequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(systemClockFrequency / 1000);\n  HAL_NVIC_SetPriority(0xffffffff,priorityLevel,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_system_08001104",
                "param_1": "priorityLevel",
                "uVar1": "systemClockFrequency"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_hardware_08001128",
            "code": "\n\n\nundefined4 initializeHardware_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setInterruptPriorityGroup(3);\n  initializeTick(0);\n  initializePeripheral();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_hardware_08001128",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGroup",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializePeripheral"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_data_counter_0800114c",
            "code": "\nvoid incrementDataCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_data_counter_0800114c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "micros",
                "HAL_I2C_Mem_Read",
                "serialWrite",
                "HAL_RCC_OscConfig",
                "millis",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "delay_ms"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "update_configuration_08001170",
            "code": "\n\n\nvoid updateConfiguration_08001170(uint configuration)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (configuration & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "update_configuration_08001170",
                "param_1": "configuration"
            },
            "calling": [
                "HAL_MspInit",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "set_bytes_in_memory_08001194",
            "code": "\n\n\nvoid set_bytes_in_memory_08001194(uint address,uint data_1,uint data_2)\n\n{\n  undefined shifted_value;\n  uint shift_amount;\n  uint mask_shift;\n  uint mask_shift_plus_four;\n  \n  mask_shift = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shift_amount = 7 - mask_shift;\n  mask_shift_plus_four = mask_shift + 4;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (mask_shift_plus_four < 7) {\n    mask_shift = 0;\n  }\n  shift_amount = (1 << (shift_amount & 0xff)) - 1;\n  if (6 < mask_shift_plus_four) {\n    mask_shift = mask_shift - 3;\n  }\n  shifted_value = (undefined)\n          ((data_2 & (1 << (mask_shift & 0xff)) - 1U | (data_1 & shift_amount) << (mask_shift & 0xff)) << 4);\n  if (-1 < (int)address) {\n    mask_shift = address + 0xe000e100;\n  }\n  else {\n    shift_amount = 0xe000ed14;\n    mask_shift = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(mask_shift + 0x300) = shifted_value;\n  }\n  else {\n    *(undefined *)(shift_amount + mask_shift) = shifted_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "set_bytes_in_memory_08001194",
                "param_1": "address",
                "param_2": "data_1",
                "param_3": "data_2",
                "uVar1": "shifted_value",
                "uVar2": "shift_amount",
                "uVar3": "mask_shift",
                "uVar4": "mask_shift_plus_four"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config",
                "HAL_UART_MspInit",
                "HAL_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_int_array_080011fc",
            "code": "\nvoid setBitInIntArray_080011fc(uint index)\n\n{\n  *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_int_array_080011fc",
                "param_1": "index"
            },
            "calling": [
                "HAL_UART_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "set_parameters_08001214",
            "code": "\n\n\nundefined4 set_parameters_08001214(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "set_parameters_08001214",
                "param_1": "input_value"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_08001240",
            "code": "\n\n\nvoid setFlag_08001240(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_08001240",
                "param_1": "value"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_bitmask_registers_08001264",
            "code": "\n\n\nvoid updateBitmaskRegisters_08001264(uint *baseAddress,uint *bitmaskData)\n\n{\n  uint newValue;\n  uint bitValue;\n  uint registerIndex;\n  int registerOffset;\n  uint bitIndex;\n  uint bitmask;\n  uint comparisonValue;\n  uint *registerPointer;\n  int indexOffset;\n  \n  newValue = 0;\n  bitIndex = 0;\n  do {\n    bitmask = 1 << (bitIndex & 0xff);\n    bitValue = bitmask & *bitmaskData;\n    if (bitmask == bitValue) {\n      registerIndex = bitmaskData[1];\n      if (registerIndex == 0x12) {\n        newValue = bitmaskData[3] + 0xc;\n      }\n      else if (registerIndex < 0x13) {\n        if (registerIndex == 2) {\n          newValue = bitmaskData[3] + 8;\n        }\n        else if (registerIndex < 3) {\n          if (registerIndex == 0) goto LAB_080013be;\n          if (registerIndex == 1) {\n            newValue = bitmaskData[3];\n          }\n        }\n        else if (registerIndex == 3) {\n          newValue = 0;\n        }\n        else if (registerIndex == 0x11) {\n          newValue = bitmaskData[3] + 4;\n        }\n      }\n      else {\n        if (registerIndex != 0x10210000) {\n          if (registerIndex < 0x10210001) {\n            if (registerIndex != 0x10110000) {\n              comparisonValue = 0x10120000;\nLAB_080013b8:\n              if (registerIndex != comparisonValue) goto LAB_080012a8;\n            }\n          }\n          else if ((registerIndex != 0x10310000) && (registerIndex != 0x10320000)) {\n            comparisonValue = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        newValue = bitmaskData[2];\n        if (newValue == 0) {\n          newValue = 4;\n        }\n        else {\n          if (newValue == 1) {\n            baseAddress[4] = bitmask;\n          }\n          if (newValue != 1) {\n            baseAddress[5] = bitmask;\n          }\n          newValue = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitValue < 0x100) {\n        bitmask = *baseAddress;\n        registerIndex = bitIndex << 2;\n        registerPointer = baseAddress;\n      }\n      else {\n        bitmask = baseAddress[1];\n        registerIndex = (bitIndex + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitValue) {\n        registerPointer = baseAddress + 1;\n      }\n      *registerPointer = bitmask & ~(0xf << (registerIndex & 0xff)) | newValue << (registerIndex & 0xff);\n      registerPointer = (uint *)bitmaskData[1];\n      if (((uint)registerPointer & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        indexOffset = (bitIndex & 3) << 2;\n        if (baseAddress == (uint *)0x40010800) {\n          registerOffset = 0;\n        }\n        else if (baseAddress == (uint *)0x40010c00) {\n          registerOffset = 1;\n        }\n        else if (baseAddress == (uint *)0x40011000) {\n          registerOffset = 2;\n        }\n        else if (baseAddress == (uint *)0x40011400) {\n          registerOffset = 3;\n        }\n        else {\n          registerOffset = 4;\n        }\n        *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) =\n             registerOffset << indexOffset | *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) & ~(0xf << indexOffset);\n        if (((uint)registerPointer & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitValue;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitValue;\n        }\n        if (((uint)registerPointer & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitValue;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitValue;\n        }\n        if (((uint)registerPointer & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitValue;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitValue;\n        }\n        if (((uint)registerPointer & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitValue;\n        }\n        else {\n          _DAT_4001040c = bitValue | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n    if (bitIndex == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_bitmask_registers_08001264",
                "param_1": "baseAddress",
                "param_2": "bitmaskData",
                "uVar1": "newValue",
                "uVar2": "bitValue",
                "uVar3": "registerIndex",
                "iVar4": "registerOffset",
                "uVar5": "bitIndex",
                "uVar6": "bitmask",
                "uVar7": "comparisonValue",
                "unaff_r10": "registerPointer",
                "iVar8": "indexOffset"
            },
            "calling": [
                "Peripherals_Init",
                "HAL_UART_MspInit",
                "HAL_TIM_MspPostInit",
                "HAL_I2C_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid set_param_value_08001424(int ptr_parameter,int value,int flag)\n\n{\n  if (flag == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(ptr_parameter + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "ptr_parameter",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "Peripherals_Init",
                "toggleLED",
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "combine_and_xor_0800142e",
            "code": "\nvoid combineAndXOR_0800142e(int inputAddress,uint xorValue)\n\n{\n  *(uint *)(inputAddress + 0xc) = xorValue ^ *(uint *)(inputAddress + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "combine_and_xor_0800142e",
                "param_1": "inputAddress",
                "param_2": "xorValue"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_and_modify_flag_08001436",
            "code": "\nundefined4 checkAndModifyFlag_08001436(int *arrayPtr)\n\n{\n  int element;\n  \n  element = *arrayPtr;\n  if ((*(uint *)(element + 0x14) & 0x400) != 0) {\n    *(uint *)(element + 0x14) = *(uint *)(element + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)arrayPtr + 0x35) = 0x20;\n    *(undefined *)(arrayPtr + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_and_modify_flag_08001436",
                "param_1": "arrayPtr",
                "iVar1": "element",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_status_08001460",
            "code": "\nundefined4 checkStatus_08001460(uint **data,uint condition,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint statusValue;\n  uint *ptr;\n  \n  startTime = HAL_GetTick();\n  do {\n    ptr = *data;\n    if ((condition << 8) >> 0x18 == 1) {\n      statusValue = ptr[5];\n    }\n    else {\n      statusValue = ptr[6];\n    }\n    if ((condition & 0xffff & ~statusValue) == 0) {\n      return 0;\n    }\n    if ((int)(ptr[5] << 0x15) < 0) {\n      *ptr = *ptr | 0x200;\n      ptr[5] = ptr[5] & 0xfffffbff;\n      data[0xe] = (uint *)0x4;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout))));\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_status_08001460",
                "param_1": "data",
                "param_2": "condition",
                "param_3": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "statusValue",
                "puVar4": "ptr"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_i2_c_acknowledge_080014e2",
            "code": "\nundefined4 checkI2CAcknowledge_080014e2(int *i2cPtr,uint timeout)\n\n{\n  int startTime;\n  int isAcknowledgeFailed;\n  \n  startTime = HAL_GetTick();\n  while( true ) {\n    if (*(int *)(*i2cPtr + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    isAcknowledgeFailed = I2C_IsAcknowledgeFailed(i2cPtr);\n    if (isAcknowledgeFailed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (isAcknowledgeFailed = HAL_GetTick(), timeout < (uint)(isAcknowledgeFailed - startTime))))) {\n      i2cPtr[0xe] = i2cPtr[0xe] | 0x20;\n      *(undefined *)((int)i2cPtr + 0x35) = 0x20;\n      *(undefined *)(i2cPtr + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_i2_c_acknowledge_080014e2",
                "param_1": "i2cPtr",
                "param_2": "timeout",
                "iVar1": "startTime",
                "iVar2": "isAcknowledgeFailed"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "process_i2_c_data_08001530",
            "code": "\nundefined4 processI2CData_08001530(uint **data,uint address,uint value,int mode,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint *currentData;\n  uint **dataPtr;\n  uint addressCopy;\n  uint valueCopy;\n  \n  **data = **data | 0x100;\n  dataPtr = data;\n  addressCopy = address;\n  valueCopy = value;\n  startTime = HAL_GetTick();\n  do {\n    currentData = *data;\n    do {\n      if ((int)(currentData[5] << 0x1f) < 0) {\n        currentData[4] = address & 0xfe;\n        startTime = I2C_WaitOnMasterAddressFlagUntilTimeout\n                          (data,0x10002,timeout,currentData,dataPtr,addressCopy,valueCopy);\n        if (startTime == 0) {\n          startTime = I2C_WaitOnTXEFlagUntilTimeout(data,timeout,(*data)[5],(*data)[6]);\n          if (startTime == 0) {\n            currentData = *data;\n            if (mode == 1) {\nLAB_080015ca:\n              currentData[4] = value & 0xff;\n              return 0;\n            }\n            currentData[4] = value >> 8;\n            startTime = I2C_WaitOnTXEFlagUntilTimeout(data,timeout);\n            if (startTime == 0) {\n              currentData = *data;\n              goto LAB_080015ca;\n            }\n          }\n          if (data[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **data = **data | 0x200;\n        }\n        else if (data[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (timeout == 0xffffffff);\n    if ((timeout == 0) || (currentTime = HAL_GetTick(), timeout < (uint)(currentTime - startTime))) {\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "process_i2_c_data_08001530",
                "param_1": "data",
                "param_2": "address",
                "param_3": "value",
                "param_4": "mode",
                "param_5": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "puVar3": "currentData",
                "ppuVar4": "dataPtr",
                "uVar5": "addressCopy",
                "uVar6": "valueCopy"
            },
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "send_data_080015e8",
            "code": "\nundefined4 sendData_080015e8(uint **data,uint flag,uint byte1,int condition,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint *ptr;\n  uint **ptrPtr;\n  uint value1;\n  uint value2;\n  \n  ptr = *data;\n  *ptr = *ptr | 0x400;\n  *ptr = *ptr | 0x100;\n  ptrPtr = data;\n  value1 = flag;\n  value2 = byte1;\n  startTime = HAL_GetTick();\nLAB_0800160e:\n  ptr = *data;\n  while (-1 < (int)(ptr[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  ptr[4] = flag & 0xfe;\n  startTime = I2C_WaitOnMasterAddressFlagUntilTimeout\n                    (data,0x10002,timeout,ptr,ptrPtr,value1,value2);\n  if (startTime != 0) goto LAB_080016ba;\n  startTime = I2C_WaitOnTXEFlagUntilTimeout(data,timeout,(*data)[5],(*data)[6]);\n  if (startTime == 0) {\n    ptr = *data;\n    if (condition != 1) {\n      ptr[4] = byte1 >> 8;\n      startTime = I2C_WaitOnTXEFlagUntilTimeout(data,timeout);\n      if (startTime != 0) goto LAB_08001642;\n      ptr = *data;\n    }\n    ptr[4] = byte1 & 0xff;\n    startTime = I2C_WaitOnTXEFlagUntilTimeout(data,timeout);\n    if (startTime == 0) {\n      **data = **data | 0x100;\n      startTime = HAL_GetTick();\n      do {\n        do {\n          if ((int)((*data)[5] << 0x1f) < 0) {\n            (*data)[4] = flag & 0xff | 1;\n            startTime = I2C_WaitOnMasterAddressFlagUntilTimeout(data,0x10002,timeout);\n            if (startTime == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (data[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (currentTime = HAL_GetTick(), timeout < (uint)(currentTime - startTime))) goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "send_data_080015e8",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "byte1",
                "param_4": "condition",
                "param_5": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "puVar3": "ptr",
                "ppuVar4": "ptrPtr",
                "uVar5": "value1",
                "uVar6": "value2"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_timeout_080016f4",
            "code": "\nundefined4 checkTimeout_080016f4(int *data,uint timeout)\n\n{\n  int startTickCount;\n  int currentTickCount;\n  \n  startTickCount = HAL_GetTick();\n  while( true ) {\n    currentTickCount = *data;\n    if ((*(uint *)(currentTickCount + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentTickCount + 0x14) << 0x1b < 0) break;\n    if ((timeout == 0) || (currentTickCount = HAL_GetTick(), timeout < (uint)(currentTickCount - startTickCount))) {\n      data[0xe] = data[0xe] | 0x20;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentTickCount + 0x14) = *(uint *)(currentTickCount + 0x14) & 0xffffffef;\n  data[0xe] = 0;\n  *(undefined *)(data + 0xd) = 0;\n  *(undefined *)((int)data + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_timeout_080016f4",
                "param_1": "data",
                "param_2": "timeout",
                "iVar1": "startTickCount",
                "iVar2": "currentTickCount"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_i2_c_08001754",
            "code": "\nundefined4 initializeI2C_08001754(uint **params)\n\n{\n  uint freq_low;\n  uint freq_high;\n  uint *param_array;\n  uint *param_array_1;\n  uint *param_array_2;\n  uint frequency;\n  undefined8 pclk1_freq;\n  \n  if (params != (uint **)0x0) {\n    if (*(char *)((int)params + 0x35) == '\\0') {\n      *(undefined *)(params + 0xd) = 0;\n      initializeI2C_08001754_Msp();\n    }\n    *(undefined *)((int)params + 0x35) = 0x24;\n    **params = **params & 0xfffffffe;\n    pclk1_freq = HAL_RCC_GetPCLK1Freq();\n    freq_high = (uint)((ulonglong)pclk1_freq >> 0x20);\n    freq_low = (uint)pclk1_freq;\n    param_array_1 = params[1];\n    frequency = freq_low / 1000000;\n    if ((uint *)0x186a0 < param_array_1) {\n      freq_high = 300;\n    }\n    param_array = *params;\n    if ((uint *)0x186a0 < param_array_1) {\n      freq_high = frequency * freq_high;\n    }\n    param_array[1] = frequency;\n    if ((uint *)0x186a0 < param_array_1) {\n      frequency = freq_high / 1000;\n    }\n    param_array[8] = frequency + 1;\n    if (param_array_1 < (uint *)0x186a1) {\n      freq_low = freq_low / (uint)((int)param_array_1 << 1);\n      if ((freq_low & 0xfff) < 4) {\n        freq_low = 4;\n      }\n    }\n    else {\n      if (params[2] == (uint *)0x0) {\n        freq_low = freq_low / (uint)((int)param_array_1 * 3) | 0x8000;\n      }\n      else {\n        freq_low = freq_low / (uint)((int)param_array_1 * 0x19) | 0xc000;\n      }\n      if ((freq_low & 0xfff) == 0) {\n        freq_low = 1;\n      }\n    }\n    param_array_1 = params[8];\n    param_array_2 = params[7];\n    param_array[7] = freq_low;\n    *param_array = (uint)param_array_2 | (uint)param_array_1;\n    param_array[2] = (uint)params[4] | (uint)params[3];\n    param_array[3] = (uint)params[5] | (uint)params[6];\n    *param_array = *param_array | 1;\n    params[0xe] = (uint *)0x0;\n    *(undefined *)((int)params + 0x35) = 0x20;\n    *(undefined *)((int)params + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_i2_c_08001754",
                "param_1": "params",
                "uVar1": "freq_low",
                "uVar2": "freq_high",
                "puVar3": "param_array",
                "puVar4": "param_array_1",
                "puVar5": "param_array_2",
                "uVar6": "frequency",
                "uVar7": "pclk1_freq",
                "HAL_I2C_MspInit": "initializeI2C_Msp"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "write_data_08001828",
            "code": "\nundefined4\nwrite_data_08001828(uint **device,undefined4 addr,undefined4 reg,undefined4 val,byte *data,\n            short length,undefined4 timeout)\n\n{\n  int start_time;\n  int current_time;\n  uint *ptr;\n  uint temp;\n  \n  if (*(char *)((int)device + 0x35) == ' ') {\n    if (data == (byte *)0x0) {\n      return 1;\n    }\n    if (length == 0) {\n      return 1;\n    }\n    start_time = HAL_GetTick();\n    do {\n      ptr = *device;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(device + 0xd) == '\\x01') {\n          return 2;\n        }\n        temp = *ptr;\n        *(undefined *)(device + 0xd) = 1;\n        *ptr = temp & 0xfffff7ff;\n        *(undefined *)((int)device + 0x35) = 0x21;\n        *(undefined *)((int)device + 0x36) = 0x40;\n        device[0xe] = (uint *)0x0;\n        start_time = I2C_RequestMemoryWrite(device,addr,reg,val,timeout);\n        if (start_time != 0) {\n          *(undefined *)(device + 0xd) = 0;\n          if (device[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      current_time = HAL_GetTick();\n    } while ((uint)(current_time - start_time) < 0x2711);\n    *(undefined *)(device + 0xd) = 0;\n    *(undefined *)((int)device + 0x35) = 0x20;\n  }\n  return 2;\n  while (length != 0) {\nLAB_080018e2:\n    start_time = I2C_WaitOnTXEFlagUntilTimeout(device,timeout);\n    if (start_time != 0) goto LAB_080018ee;\n    ptr = *device;\n    ptr[4] = (uint)*data;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(length + -1) == 0) break;\n      length = length + -2;\n      ptr[4] = (uint)data[1];\n      data = data + 2;\n    }\n    else {\n      data = data + 1;\n      length = length + -1;\n    }\n  }\n  start_time = I2C_WaitOnTXEFlagUntilTimeout(device,timeout);\n  if (start_time == 0) {\n    **device = **device | 0x200;\n    *(undefined *)(device + 0xd) = 0;\n    *(undefined *)((int)device + 0x35) = 0x20;\n    *(undefined *)((int)device + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (device[0xe] == (uint *)0x4) {\n    **device = **device | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "write_data_08001828",
                "param_1": "device",
                "param_2": "addr",
                "param_3": "reg",
                "param_4": "val",
                "param_5": "data",
                "param_6": "length",
                "param_7": "timeout",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "puVar3": "ptr",
                "uVar4": "temp"
            },
            "calling": [
                "I2C_WriteByte"
            ],
            "called": [
                "I2C_RequestMemoryWrite",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "perform_i2_c_read_08001938",
            "code": "\nundefined4\nperformI2CRead_08001938(uint **i2cData,undefined4 size,undefined4 bytesPerRead,undefined4 slaveAddress,\n            undefined *dataBuffer,ushort dataSize,uint timeout)\n\n{\n  undefined *ptrData;\n  int tickStart;\n  int tickCurrent;\n  uint *ptrStatus;\n  uint value;\n  undefined *ptrBuf;\n  bool isNegative;\n  \n  if (*(char *)((int)i2cData + 0x35) != ' ') {\n    return 2;\n  }\n  if (dataBuffer == (undefined *)0x0) {\n    return 1;\n  }\n  if (dataSize == 0) {\n    return 1;\n  }\n  tickStart = HAL_GetTick();\n  while (ptrStatus = *i2cData, (~ptrStatus[6] & 2) == 0) {\n    tickCurrent = HAL_GetTick();\n    if (10000 < (uint)(tickCurrent - tickStart)) {\n      *(undefined *)(i2cData + 0xd) = 0;\n      *(undefined *)((int)i2cData + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(i2cData + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *ptrStatus;\n  *(undefined *)(i2cData + 0xd) = 1;\n  *ptrStatus = value & 0xfffff7ff;\n  *(undefined *)((int)i2cData + 0x35) = 0x22;\n  *(undefined *)((int)i2cData + 0x36) = 0x40;\n  i2cData[0xe] = (uint *)0x0;\n  tickStart = I2C_RequestMemoryRead(i2cData,size,bytesPerRead,slaveAddress,timeout);\n  if (tickStart != 0) {\n    *(undefined *)(i2cData + 0xd) = 0;\n    if (i2cData[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptrStatus = *i2cData;\n  value = *ptrStatus;\n  if (dataSize == 1) {\n    *ptrStatus = value & 0xfffffbff;\n    disableIRQinterrupts();\n    **i2cData = **i2cData | 0x200;\n    enableIRQinterrupts();\n    tickStart = I2C_WaitOnRXNEFlagUntilTimeout(i2cData,timeout);\n    if (tickStart == 0) {\n      *dataBuffer = (char)(*i2cData)[4];\nLAB_08001ab8:\n      *(undefined *)((int)i2cData + 0x35) = 0x20;\n      *(undefined *)((int)i2cData + 0x36) = 0;\n      *(undefined *)(i2cData + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (i2cData[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (dataSize == 2) {\n    *ptrStatus = value | 0x800;\n    disableIRQinterrupts();\n    **i2cData = **i2cData & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *ptrStatus = value | 0x400;\n    while (3 < dataSize) {\n      tickStart = I2C_WaitOnRXNEFlagUntilTimeout(i2cData,timeout);\n      if (tickStart != 0) goto LAB_08001a18;\n      *dataBuffer = (char)(*i2cData)[4];\n      ptrStatus = *i2cData;\n      isNegative = (int)(ptrStatus[5] << 0x1d) < 0;\n      if (isNegative) {\n        ptrStatus = (uint *)ptrStatus[4];\n        ptrBuf = dataBuffer + 2;\n        dataSize = dataSize - 2;\n      }\n      else {\n        ptrBuf = dataBuffer + 1;\n        dataSize = dataSize - 1;\n      }\n      ptrData = dataBuffer + 1;\n      dataBuffer = ptrBuf;\n      if (isNegative) {\n        *ptrData = (char)ptrStatus;\n      }\n    }\n    if (dataSize != 2) {\n      tickStart = HAL_GetTick();\n      do {\n        ptrStatus = *i2cData;\n        do {\n          if ((int)(ptrStatus[5] << 0x1d) < 0) {\n            *ptrStatus = *ptrStatus & 0xfffffbff;\n            disableIRQinterrupts();\n            *dataBuffer = (char)(*i2cData)[4];\n            tickStart = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (tickCurrent = HAL_GetTick(), (uint)(tickCurrent - tickStart) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  tickStart = HAL_GetTick();\n  do {\n    do {\n      if ((int)((*i2cData)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        ptrStatus = *i2cData;\n        *ptrStatus = *ptrStatus | 0x200;\n        *dataBuffer = (char)ptrStatus[4];\n        enableIRQinterrupts();\n        dataBuffer[1] = (char)(*i2cData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (tickCurrent = HAL_GetTick(), (uint)(tickCurrent - tickStart) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)i2cData + 0x35) = 0x20;\n  *(undefined *)(i2cData + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptrStatus = *i2cData;\n    do {\n      if ((int)(ptrStatus[5] << 0x1d) < 0) {\n        *ptrStatus = *ptrStatus | 0x200;\n        dataBuffer[1] = (char)ptrStatus[4];\n        enableIRQinterrupts();\n        dataBuffer[2] = (char)(*i2cData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (tickCurrent = HAL_GetTick(), (uint)(tickCurrent - tickStart) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "perform_i2_c_read_08001938",
                "param_1": "i2cData",
                "param_2": "size",
                "param_3": "bytesPerRead",
                "param_4": "slaveAddress",
                "param_5": "dataBuffer",
                "param_6": "dataSize",
                "param_7": "timeout",
                "puVar1": "ptrData",
                "iVar2": "tickStart",
                "iVar3": "tickCurrent",
                "puVar4": "ptrStatus",
                "uVar5": "value",
                "puVar6": "ptrBuf",
                "bVar7": "isNegative"
            },
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "HAL_GetTick",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "perform_operation_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 performOperation_08001b58(int *commandList)\n\n{\n  int val1;\n  int val2;\n  \n  if (*commandList << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (commandList[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      val1 = commandList[1];\n      if (val1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (val1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          val1 = getCurrentTick();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            val2 = getCurrentTick();\n            if (100 < (uint)(val2 - val1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (val1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      val1 = getCurrentTick();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        val2 = getCurrentTick();\n        if (100 < (uint)(val2 - val1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*commandList << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (commandList[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      flag1 = commandList[4];\n      if (flag1 == 0) {\n        val1 = getCurrentTick();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          val2 = getCurrentTick();\n          if (2 < (uint)(val2 - val1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      flag1 = 1;\n      val1 = getCurrentTick();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        val2 = getCurrentTick();\n        if (2 < (uint)(val2 - val1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = commandList[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*commandList << 0x1c < 0) {\n    flag2 = commandList[6];\n    if (flag2 == 0) {\n      val1 = getCurrentTick();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        val2 = getCurrentTick();\n        if (2 < (uint)(val2 - val1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      flag2 = 1;\n      val1 = getCurrentTick();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        val2 = getCurrentTick();\n        if (2 < (uint)(val2 - val1)) {\n          return 3;\n        }\n      }\n      HAL_Delay(1);\n    }\n  }\n  if (-1 < *commandList << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  val1 = getCurrentTick();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    val2 = getCurrentTick();\n    if (100 < (uint)(val2 - val1)) {\n      return 3;\n    }\n  }\n  val1 = commandList[3];\n  if (val1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (val1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      val1 = getCurrentTick();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        val2 = getCurrentTick();\n        if (5000 < (uint)(val2 - val1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (val1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  val1 = getCurrentTick();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    val2 = getCurrentTick();\n    if (5000 < (uint)(val2 - val1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (commandList[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (commandList[7] != 2) {\n      flag3 = 0;\n      val1 = getCurrentTick();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        val2 = getCurrentTick();\n      } while ((uint)(val2 - val1) < 3);\n      return 3;\n    }\n    flag3 = 0;\n    val1 = getCurrentTick();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (commandList[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | commandList[2];\n        }\n        _DAT_40021004 = commandList[8] | commandList[9] | _DAT_40021004 & 0xffc2ffff;\n        flag3 = 1;\n        val1 = getCurrentTick();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          val2 = getCurrentTick();\n        } while ((uint)(val2 - val1) < 3);\n        return 3;\n      }\n      val2 = getCurrentTick();\n    } while ((uint)(val2 - val1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "perform_operation_08001b58",
                "param_1": "commandList",
                "iVar1": "val1",
                "iVar2": "val2",
                "HAL_GetTick()": "getCurrentTick()",
                "param_1[1]": "commandList[1]",
                "param_1[4]": "commandList[4]",
                "param_1[5]": "commandList[5]",
                "param_1[6]": "commandList[6]",
                "iRam42420000": "flag1",
                "iRam42420480": "flag2",
                "param_1[3]": "commandList[3]",
                "param_1[7]": "commandList[7]",
                "param_1[8]": "commandList[8]",
                "param_1[9]": "commandList[9]",
                "uRam42420060": "flag3"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_clock_frequency_08002008",
            "code": "\n\n\nint calculateClockFrequency_08002008(void)\n\n{\n  undefined4 firstValue;\n  int clockFrequency;\n  undefined4 secondValue;\n  undefined4 *sourceData;\n  uint clockDivisor;\n  undefined4 *destinationData;\n  byte commandArray [4];\n  undefined4 configArray [5];\n  \n  sourceData = &DAT_080072f0;\n  destinationData = configArray;\n  do {\n    firstValue = *sourceData;\n    secondValue = sourceData[1];\n    sourceData = sourceData + 2;\n    *destinationData = firstValue;\n    destinationData[1] = secondValue;\n    destinationData = destinationData + 2;\n  } while (sourceData != (undefined4 *)\"../Src/MPU9250.c\");\n  commandArray[0] = 1;\n  commandArray[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockDivisor = 8000000 / commandArray[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockDivisor = 4000000;\n    }\n    clockFrequency = clockDivisor * *(byte *)((int)configArray + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockFrequency = 8000000;\n  }\n  return clockFrequency;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_clock_frequency_08002008",
                "puVar4": "sourceData",
                "puVar6": "destinationData",
                "uVar1": "firstValue",
                "uVar3": "secondValue",
                "uVar5": "clockDivisor",
                "local_24": "commandArray",
                "local_20": "configArray",
                "iVar2": "clockFrequency"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "initialize_system_0800209c",
            "code": "\n\n\nundefined4 initializeSystem_0800209c(uint *config,uint clockSource)\n\n{\n  char isConfigured;\n  char isInitialized;\n  int isNegative;\n  uint configValue;\n  int tickDelay;\n  uint shiftedConfigValue;\n  \n  if ((clockSource <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | clockSource, clockSource == (clockSource & 7))) {\n    if ((int)(*config << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | config[2];\n    }\n    isNegative = *config << 0x1f;\n    if (-1 < isNegative) {\nLAB_080020ba:\n      if ((clockSource < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | clockSource, clockSource != (clockSource & 7))) {\n        return 1;\n      }\n      if ((*config & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | config[3];\n      }\n      if ((int)(*config << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | config[4] << 3;\n      }\n      configValue = HAL_RCC_GetSysClockFreq();\n      DAT_200001bc = configValue >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      HAL_InitTick(0);\n      return 0;\n    }\n    configValue = config[1];\n    if (configValue == 1) {\n      isInitialized = '\\x01';\n      isConfigured = '\\0';\n    }\n    else {\n      shiftedConfigValue = _DAT_40021000;\n      if (configValue == 2) goto LAB_08002176;\n      isInitialized = '\\0';\n      isConfigured = '\\x01';\n    }\n    shiftedConfigValue = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(isConfigured << 6) << 0x18 | (uint)(byte)(isInitialized << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shiftedConfigValue < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | configValue;\n      isNegative = HAL_GetTick(isNegative,shiftedConfigValue);\n      if (config[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          tickDelay = HAL_GetTick();\n        } while ((uint)(tickDelay - isNegative) < 0x1389);\n      }\n      else if (config[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          tickDelay = HAL_GetTick();\n        } while ((uint)(tickDelay - isNegative) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          tickDelay = HAL_GetTick();\n        } while ((uint)(tickDelay - isNegative) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "initialize_system_0800209c",
                "param_1": "config",
                "param_2": "clockSource",
                "cVar1": "isConfigured",
                "cVar2": "isInitialized",
                "iVar3": "isNegative",
                "uVar4": "configValue",
                "iVar5": "tickDelay",
                "uVar6": "shiftedConfigValue"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_08002214",
            "code": "\nundefined4 get_data_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_08002214"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "HAL_I2C_Init",
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_shifted_value_08002250",
            "code": "\n\n\nuint get_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_flag_values_08002280",
            "code": "\nvoid updateFlagValues_08002280(int baseAddress,uint *flags)\n\n{\n  uint modifiedFlag1;\n  uint modifiedFlag2;\n  uint modifiedFlag3;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffffe;\n  modifiedFlag2 = *(uint *)(baseAddress + 4);\n  modifiedFlag3 = *flags;\n  modifiedFlag1 = *(uint *)(baseAddress + 0x20) & 0xfffffffd | flags[2];\n  if (baseAddress == 0x40012c00) {\n    modifiedFlag1 = (modifiedFlag1 & 0xfffffff7 | flags[3]) & 0xfffffffb;\n    modifiedFlag2 = modifiedFlag2 & 0xfffffcff | flags[5] | flags[6];\n  }\n  *(uint *)(baseAddress + 4) = modifiedFlag2;\n  *(uint *)(baseAddress + 0x18) = *(uint *)(baseAddress + 0x18) & 0xffffff8c | modifiedFlag3;\n  *(uint *)(baseAddress + 0x34) = flags[1];\n  *(uint *)(baseAddress + 0x20) = modifiedFlag1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_flag_values_08002280",
                "param_1": "baseAddress",
                "param_2": "flags",
                "uVar1": "modifiedFlag1",
                "uVar2": "modifiedFlag2",
                "uVar3": "modifiedFlag3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_registers_080022d0",
            "code": "\nvoid updateRegisters_080022d0(int regBase,uint *regValues)\n\n{\n  uint registerValue1;\n  uint registerValue2;\n  uint registerValue3;\n  \n  *(uint *)(regBase + 0x20) = *(uint *)(regBase + 0x20) & 0xfffffeff;\n  registerValue2 = *(uint *)(regBase + 4);\n  registerValue3 = *regValues;\n  registerValue1 = *(uint *)(regBase + 0x20) & 0xfffffdff | regValues[2] << 8;\n  if (regBase == 0x40012c00) {\n    registerValue1 = (registerValue1 & 0xfffff7ff | regValues[3] << 8) & 0xfffffbff;\n    registerValue2 = registerValue2 & 0xffffcfff | (regValues[5] | regValues[6]) << 4;\n  }\n  *(uint *)(regBase + 4) = registerValue2;\n  *(uint *)(regBase + 0x1c) = *(uint *)(regBase + 0x1c) & 0xffffff8c | registerValue3;\n  *(uint *)(regBase + 0x3c) = regValues[1];\n  *(uint *)(regBase + 0x20) = registerValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_registers_080022d0",
                "param_1": "regBase",
                "param_2": "regValues",
                "uVar1": "registerValue1",
                "uVar2": "registerValue2",
                "uVar3": "registerValue3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_flags_and_values_08002324",
            "code": "\nvoid updateFlagsAndValues_08002324(int baseAddress,int *paramsArray)\n\n{\n  uint flags;\n  int paramValue1;\n  int paramValue2;\n  int constantValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffefff;\n  flags = *(uint *)(baseAddress + 4);\n  paramValue1 = *paramsArray;\n  paramValue2 = paramValue2Address;\n  constantValue = 0x40012c00;\n  if (baseAddress == 0x40012c00) {\n    constantValue = constantValueAddress;\n    flags = flags & 0xffffbfff;\n  }\n  if (baseAddress == 0x40012c00) {\n    flags = flags | constantValue << 6;\n  }\n  *(uint *)(baseAddress + 4) = flags;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffff8cff | paramValue1 << 8;\n  *(int *)(baseAddress + 0x40) = paramsArray[1];\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xffffdfff | paramValue2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_flags_and_values_08002324",
                "param_1": "baseAddress",
                "param_2": "paramsArray",
                "uVar1": "flags",
                "iVar2": "paramValue1",
                "iVar3": "paramValue2",
                "iVar4": "constantValue",
                "param_2[2]": "paramValue2Address",
                "param_2[5]": "constantValueAddress"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_parameter_info_08002368",
            "code": "\nvoid updateParameterInfo_08002368(uint *inputParameter,uint *newParameter)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *inputParameter;\n  if (((((inputParameter == (uint *)0x40012c00) || (inputParameter == (uint *)0x40000000)) ||\n       (inputParameter == (uint *)0x40000400)) || (inputParameter == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | newParameter[1], inputParameter == (uint *)0x40012c00 ||\n       (inputParameter == (uint *)0x40000000)) ||\n      ((inputParameter == (uint *)0x40000400 || (inputParameter == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | newParameter[3];\n  }\n  *inputParameter = updatedValue;\n  inputParameter[0xb] = newParameter[2];\n  inputParameter[10] = *newParameter;\n  updatedValue = 0x40012c00;\n  if (inputParameter == (uint *)0x40012c00) {\n    updatedValue = newParameter[4];\n  }\n  if (inputParameter == (uint *)0x40012c00) {\n    inputParameter[0xc] = updatedValue;\n  }\n  inputParameter[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_parameter_info_08002368",
                "param_1": "inputParameter",
                "param_2": "newParameter",
                "uVar1": "updatedValue"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_tim_pwm_080023d0",
            "code": "\nundefined4 initializeTimPwm_080023d0(undefined4 *params)\n\n{\n  if (params != (undefined4 *)0x0) {\n    if (*(char *)((int)params + 0x39) == '\\0') {\n      *(undefined *)(params + 0xe) = 0;\n      configurePwmHardware();\n    }\n    *(undefined *)((int)params + 0x39) = 2;\n    configureTimBase(*params,params + 1);\n    *(undefined *)((int)params + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_tim_pwm_080023d0",
                "param_1": "params",
                "HAL_TIM_PWM_MspInit": "configurePwmHardware",
                "TIM_Base_SetConfig": "configureTimBase"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_config_08002404",
            "code": "\nvoid updateConfig_08002404(int configAddress,int *configValues)\n\n{\n  uint modifiedConfig1;\n  uint modifiedConfig2;\n  int paramValue1;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xffffffef;\n  modifiedConfig2 = *(uint *)(configAddress + 4);\n  paramValue1 = *configValues;\n  modifiedConfig1 = *(uint *)(configAddress + 0x20) & 0xffffffdf | configValues[2] << 4;\n  if (configAddress == 0x40012c00) {\n    modifiedConfig1 = (modifiedConfig1 & 0xffffff7f | configValues[3] << 4) & 0xffffffbf;\n    modifiedConfig2 = modifiedConfig2 & 0xfffff3ff | (configValues[5] | configValues[6]) << 2;\n  }\n  *(uint *)(configAddress + 4) = modifiedConfig2;\n  *(uint *)(configAddress + 0x18) = *(uint *)(configAddress + 0x18) & 0xffff8cff | paramValue1 << 8;\n  *(int *)(configAddress + 0x38) = configValues[1];\n  *(uint *)(configAddress + 0x20) = modifiedConfig1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_config_08002404",
                "param_1": "configAddress",
                "param_2": "configValues",
                "uVar1": "modifiedConfig1",
                "uVar2": "modifiedConfig2",
                "iVar3": "paramValue1"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "initialize_tim_oc_0800245c",
            "code": "\nvoid initialize_TIM_OC_0800245c(int *timer_config,undefined4 param2,undefined4 channel)\n\n{\n  int extraout1;\n  int extraout2;\n  int extraout3;\n  int extraout4;\n  int var1;\n  uint updated_value;\n  int timer_value;\n  \n  if (*(char *)(timer_config + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)timer_config + 0x39) = 2;\n  *(undefined *)(timer_config + 0xe) = 1;\n  switch(channel) {\n  case 0:\n    TIM_OC1_SetConfig(*timer_config);\n    timer_value = *timer_config;\n    updated_value = *(uint *)(extraout1 + 0x10);\n    *(uint *)(timer_value + 0x18) = *(uint *)(timer_value + 0x18) | 8;\n    *(uint *)(timer_value + 0x18) = *(uint *)(timer_value + 0x18) & 0xfffffffb;\n    updated_value = *(uint *)(timer_value + 0x18) | updated_value;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    TIM_OC2_SetConfig(*timer_config);\n    timer_value = *timer_config;\n    var1 = *(int *)(extraout2 + 0x10);\n    *(uint *)(timer_value + 0x18) = *(uint *)(timer_value + 0x18) | 0x800;\n    *(uint *)(timer_value + 0x18) = *(uint *)(timer_value + 0x18) & 0xfffffbff;\n    updated_value = *(uint *)(timer_value + 0x18) | var1 << 8;\n    break;\n  case 8:\n    TIM_OC3_SetConfig(*timer_config);\n    timer_value = *timer_config;\n    updated_value = *(uint *)(extraout3 + 0x10);\n    *(uint *)(timer_value + 0x1c) = *(uint *)(timer_value + 0x1c) | 8;\n    *(uint *)(timer_value + 0x1c) = *(uint *)(timer_value + 0x1c) & 0xfffffffb;\n    updated_value = *(uint *)(timer_value + 0x1c) | updated_value;\n    goto LAB_080024fa;\n  case 0xc:\n    TIM_OC4_SetConfig(*timer_config);\n    timer_value = *timer_config;\n    var1 = *(int *)(extraout4 + 0x10);\n    *(uint *)(timer_value + 0x1c) = *(uint *)(timer_value + 0x1c) | 0x800;\n    *(uint *)(timer_value + 0x1c) = *(uint *)(timer_value + 0x1c) & 0xfffffbff;\n    updated_value = *(uint *)(timer_value + 0x1c) | var1 << 8;\nLAB_080024fa:\n    *(uint *)(timer_value + 0x1c) = updated_value;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(timer_value + 0x18) = updated_value;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)timer_config + 0x39) = 1;\n  *(undefined *)(timer_config + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "initialize_tim_oc_0800245c",
                "param_1": "timer_config",
                "param_2": "param2",
                "param_3": "channel",
                "extraout_r1": "extraout1",
                "extraout_r1_00": "extraout2",
                "extraout_r1_01": "extraout3",
                "extraout_r1_02": "extraout4",
                "iVar1": "var1",
                "uVar2": "updated_value",
                "iVar3": "timer_value"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_OC2_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_value_08002520",
            "code": "\nvoid updateBitValue_08002520(int structPointer,uint bitPosition,int newValue)\n\n{\n  *(uint *)(structPointer + 0x20) = *(uint *)(structPointer + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(structPointer + 0x20) = newValue << (bitPosition & 0xff) | *(uint *)(structPointer + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_value_08002520",
                "param_1": "structPointer",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "initialize_tim_channel_08002538",
            "code": "\nundefined4 initializeTimChannel_08002538(uint **channelPointer,undefined4 paramValue)\n\n{\n  uint defaultValue;\n  uint *channelPtr;\n  \n  TIM_CCxChannelCmd(*channelPointer,paramValue,1);\n  channelPtr = *channelPointer;\n  defaultValue = 0x40012c00;\n  if (channelPtr == (uint *)0x40012c00) {\n    defaultValue = uRam40012c44 | 0x8000;\n  }\n  if (channelPtr == (uint *)0x40012c00) {\n    channelPtr[0x11] = defaultValue;\n  }\n  *channelPtr = *channelPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "initialize_tim_channel_08002538",
                "param_1": "channelPointer",
                "param_2": "paramValue",
                "uVar1": "defaultValue",
                "puVar2": "channelPtr"
            },
            "calling": [
                "PWM_Init"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "check_and_update_values_08002564",
            "code": "\nundefined4 checkAndUpdateValues_08002564(int *array,uint *flags)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(array + 0xe) != '\\x01') {\n    *(undefined *)((int)array + 0x39) = 2;\n    *(uint *)(*array + 0x44) =\n         *flags | flags[1] | flags[2] | flags[3] | flags[4] | flags[5] | flags[6];\n    *(undefined *)((int)array + 0x39) = 1;\n    result = 0;\n    *(undefined *)(array + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002564": "check_and_update_values_08002564",
                "param_1": "array",
                "param_2": "flags",
                "uVar1": "result"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_flags_and_values_080025a4",
            "code": "\nundefined4 updateFlagsAndValues_080025a4(int *dataPointer,uint *valuesPointer)\n\n{\n  uint newValue2;\n  undefined4 returnValue;\n  int dataValue;\n  uint newValue1;\n  \n  returnValue = 2;\n  if (*(char *)(dataPointer + 0xe) != '\\x01') {\n    *(undefined *)((int)dataPointer + 0x39) = 2;\n    dataValue = *dataPointer;\n    newValue1 = *valuesPointer;\n    newValue2 = valuesPointer[1];\n    *(uint *)(dataValue + 4) = *(uint *)(dataValue + 4) & 0xffffff8f;\n    *(uint *)(dataValue + 4) = *(uint *)(dataValue + 4) | newValue1;\n    *(uint *)(dataValue + 8) = *(uint *)(dataValue + 8) & 0xffffff7f;\n    *(uint *)(dataValue + 8) = *(uint *)(dataValue + 8) | newValue2;\n    *(undefined *)((int)dataPointer + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(dataPointer + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_flags_and_values_080025a4",
                "param_1": "dataPointer",
                "param_2": "valuesPointer",
                "uVar2": "returnValue",
                "iVar3": "dataValue",
                "uVar4": "newValue1",
                "uVar1": "newValue2"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_clock_settings_080025e8",
            "code": "\nvoid updateClockSettings_080025e8(int *clockConfig)\n\n{\n  int pclkFreq;\n  int adjustedFreq;\n  uint multiplier;\n  int adjustedMultiplier;\n  int param1Value;\n  int baseAddress;\n  \n  baseAddress = *clockConfig;\n  multiplier = clockConfig[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | clockConfig[3];\n  *(uint *)(baseAddress + 0xc) = clockConfig[2] | multiplier | clockConfig[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | clockConfig[6];\n  if (baseAddress == 0x40013800) {\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    adjustedMultiplier = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(clockConfig[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    param1Value = clockConfig[1];\n    adjustedFreq = HAL_RCC_GetPCLK2Freq();\n    adjustedFreq = (uint)(pclkFreq * 0x19) / (uint)(param1Value << 2) +\n            (int)(((ulonglong)(uint)(adjustedFreq * 0x19) / (ulonglong)(uint)(clockConfig[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    multiplier = (uint)(pclkFreq * 0x19) / (uint)(clockConfig[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    adjustedMultiplier = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(clockConfig[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    param1Value = clockConfig[1];\n    adjustedFreq = HAL_RCC_GetPCLK1Freq();\n    adjustedFreq = (uint)(pclkFreq * 0x19) / (uint)(param1Value << 2) +\n            (int)(((ulonglong)(uint)(adjustedFreq * 0x19) / (ulonglong)(uint)(clockConfig[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    multiplier = (uint)(pclkFreq * 0x19) / (uint)(clockConfig[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((multiplier + (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(clockConfig[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (adjustedFreq * 0x10 + 0x32U) / 100 & 0xf0) +\n       adjustedMultiplier * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_clock_settings_080025e8",
                "param_1": "clockConfig",
                "iVar1": "pclkFreq",
                "iVar2": "adjustedFreq",
                "uVar3": "multiplier",
                "iVar4": "adjustedMultiplier",
                "iVar5": "param1Value",
                "iVar6": "baseAddress"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_uart_08002724",
            "code": "\nundefined4 initializeUART_08002724(int *uartConfig)\n\n{\n  int uartInstance;\n  \n  if (uartConfig != (int *)0x0) {\n    if (*(char *)((int)uartConfig + 0x39) == '\\0') {\n      *(undefined *)(uartConfig + 0xe) = 0;\n      initializeUART_08002724Peripheral();\n    }\n    *(undefined *)((int)uartConfig + 0x39) = 2;\n    *(uint *)(*uartConfig + 0xc) = *(uint *)(*uartConfig + 0xc) & 0xffffdfff;\n    setUARTConfiguration(uartConfig);\n    uartInstance = *uartConfig;\n    *(uint *)(uartInstance + 0x10) = *(uint *)(uartInstance + 0x10) & 0xffffb7ff;\n    *(uint *)(uartInstance + 0x14) = *(uint *)(uartInstance + 0x14) & 0xffffffd5;\n    *(uint *)(uartInstance + 0xc) = *(uint *)(uartInstance + 0xc) | 0x2000;\n    uartFlag = 0;\n    *(undefined *)((int)uartConfig + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_uart_08002724",
                "param_1": "uartConfig",
                "iVar1": "uartInstance",
                "HAL_UART_MspInit": "initializeUARTPeripheral",
                "UART_SetConfig": "setUARTConfiguration",
                "param_1[0xf]": "uartFlag"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *data)\n\n{\n  byte byteValue;\n  int ptr;\n  uint flag;\n  undefined4 value;\n  short count;\n  ushort *dataPtr;\n  ushort *newDataPtr;\n  bool isChar2;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  ptr = *data;\n  dataPtr = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      newDataPtr = dataPtr + 1;\n      *dataPtr = (ushort)((uint)(*(int *)(ptr + 4) << 0x17) >> 0x17);\n    }\n    else {\n      newDataPtr = (ushort *)((int)dataPtr + 1);\n      *dataPtr = (ushort)*(int *)(ptr + 4) & 0xff;\n    }\n    data[10] = (int)newDataPtr;\n  }\n  else {\n    if (data[4] == 0) {\n      byteValue = (byte)*(undefined4 *)(ptr + 4);\n      data[10] = (int)dataPtr + 1;\n    }\n    else {\n      value = *(undefined4 *)(ptr + 4);\n      data[10] = (int)dataPtr + 1;\n      byteValue = (byte)value & 0x7f;\n    }\n    *(byte *)dataPtr = byteValue;\n  }\n  count = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = count;\n  if (count == 0) {\n    ptr = *data;\n    *(uint *)(ptr + 0xc) = *(uint *)(ptr + 0xc) & 0xffffffdf;\n    isChar2 = *(char *)((int)data + 0x39) != '2';\n    if (isChar2) {\n      flag = *(uint *)(ptr + 0xc) & 0xfffffeff;\n    }\n    else {\n      ptr = 0x12;\n      flag = 0x32;\n    }\n    if (isChar2) {\n      *(uint *)(ptr + 0xc) = flag;\n      flag = *(uint *)(ptr + 0x14) & 0xfffffffe;\n    }\n    if (isChar2) {\n      *(uint *)(ptr + 0x14) = flag;\n      ptr = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)ptr;\n    handleUartComplete();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "iVar2": "ptr",
                "uVar3": "flag",
                "uVar4": "value",
                "sVar5": "count",
                "puVar6": "dataPtr",
                "puVar7": "newDataPtr",
                "bVar1": "byteValue",
                "bVar8": "isChar2",
                "HAL_UART_RxCpltCallback": "handleUartComplete"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid processData_0800299a(uint **data)\n\n{\n  uint value1;\n  short count;\n  uint value2;\n  uint *pointer1;\n  undefined flag;\n  uint *pointer2;\n  uint flag2;\n  bool isFlagSet;\n  \n  pointer2 = *data;\n  value2 = *pointer2;\n  value1 = pointer2[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      UART_Receive_IT();\n      return;\n    }\n  }\n  else {\n    flag2 = pointer2[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      pointer2 = (uint *)(value2 << 0x1f);\n      if ((int)pointer2 < 0) {\n        isFlagSet = (int)(value1 << 0x17) < 0;\n        if (isFlagSet) {\n          pointer2 = (uint *)((uint)data[0xf] | 1);\n        }\n        if (isFlagSet) {\n          data[0xf] = pointer2;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        UART_Receive_IT(data);\n      }\n      pointer2 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((pointer2[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      pointer2[3] = pointer2[3] & 0xfffffedf;\n      pointer2[5] = pointer2[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      HAL_UART_ErrorCallback(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer1 = data[8];\n      if (data[2] == (uint *)0x1000) {\n        pointer2[1] = *(ushort *)pointer1 & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointer1 = (uint *)((int)pointer1 + 2);\n        }\n        else {\n          pointer1 = (uint *)((int)pointer1 + 1);\n        }\n        data[8] = pointer1;\n      }\n      else {\n        data[8] = (uint *)((int)pointer1 + 1);\n        pointer2[1] = (uint)*(byte *)pointer1;\n      }\n      count = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = count;\n      if (count == 0) {\n        pointer2[3] = pointer2[3] & 0xffffff7f;\n        pointer2[3] = pointer2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    pointer2[3] = pointer2[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    HAL_UART_TxCpltCallback(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "data",
                "uVar1": "value1",
                "sVar2": "count",
                "uVar3": "value2",
                "puVar4": "pointer1",
                "uVar5": "flag",
                "puVar6": "pointer2",
                "uVar7": "flag2",
                "bVar8": "isFlagSet"
            },
            "calling": [],
            "called": [
                "UART_Receive_IT",
                "HAL_UART_TxCpltCallback",
                "HAL_UART_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initializeMPU9250_08002ad0(void)\n\n{\n  readByte(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  writeByte(0xd0,0x6b,0x80,1);\n  writeByte(0xd0,0x6b,1);\n  writeByte(0xd0,0x6c,0,1);\n  writeByte(0xd0,0x19,0,1);\n  writeByte(0xd0,0x1d,3,1);\n  writeByte(0xd0,0x1a,3,1);\n  writeByte(0xd0,0x1b,0x10,1);\n  writeByte(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "I2C_ReadByte": "readByte",
                "I2C_WriteByte": "writeByte"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "read_sensor_data_08002b48",
            "code": "\nvoid readSensorData_08002b48(void)\n\n{\n  undefined4 floatValue;\n  uint sensorData;\n  int convertedSensorDataHigh;\n  int convertedSensorDataLow;\n  undefined4 sensorDataHigh;\n  undefined4 sensorDataLow;\n  \n  sensorDataHigh = 0;\n  sensorDataLow = sensorData & 0xffff0000;\n  readByteArrayFromI2C(0xd0,0x3b,&sensorDataHigh,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(sensorDataHigh._2_1_,sensorDataHigh._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)sensorDataHigh,sensorDataHigh._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)sensorDataLow,sensorDataLow._1_1_);\n  convertedSensorDataLow = (int)DAT_200002f6;\n  convertedSensorDataHigh = (int)DAT_200002f8;\n  floatValue = __floatsisf();\n  floatValue = __aeabi_fmul(floatValue,0x40800000);\n  DAT_200002d0 = __aeabi_fmul(floatValue,0x38000000);\n  floatValue = __floatsisf(convertedSensorDataLow);\n  floatValue = __aeabi_fmul(floatValue,0x40800000);\n  DAT_200002d4 = __aeabi_fmul(floatValue,0x38000000);\n  floatValue = __floatsisf(convertedSensorDataHigh);\n  floatValue = __aeabi_fmul(floatValue,0x40800000);\n  DAT_200002d8 = __aeabi_fmul(floatValue,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "read_sensor_data_08002b48",
                "in_r3": "sensorData",
                "local_18": "sensorDataHigh",
                "local_14": "sensorDataLow",
                "iVar2": "convertedSensorDataHigh",
                "iVar3": "convertedSensorDataLow",
                "uVar1": "floatValue",
                "I2C_ReadByteArray": "readByteArrayFromI2C"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "read_and_calculate_sensor_data_08002bf0",
            "code": "\nvoid readAndCalculateSensorData_08002bf0(void)\n\n{\n  undefined4 floatConversion;\n  int sensorDataConverted2;\n  int sensorDataConverted1;\n  undefined4 sensorDataBytes;\n  undefined2 sensorDataBytes2;\n  \n  sensorDataBytes = 0;\n  sensorDataBytes2 = 0;\n  readSensorDataFromI2C(0xd0,0x43,&sensorDataBytes,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(sensorDataBytes._2_1_,sensorDataBytes._3_1_);\n  DAT_200002be = CONCAT11((undefined)sensorDataBytes,sensorDataBytes._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)sensorDataBytes2,sensorDataBytes2._1_1_);\n  sensorDataConverted1 = (int)DAT_200002c0;\n  sensorDataConverted2 = (int)DAT_200002c2;\n  floatConversion = __floatsisf();\n  floatConversion = __aeabi_fmul(floatConversion,0x447a0000);\n  floatConversion = __aeabi_fmul(floatConversion,0x38000000);\n  DAT_200002c4 = __aeabi_fsub(floatConversion,DAT_20000000);\n  floatConversion = __floatsisf(sensorDataConverted1);\n  floatConversion = __aeabi_fmul(floatConversion,0x447a0000);\n  floatConversion = __aeabi_fmul(floatConversion,0x38000000);\n  DAT_200002c8 = __aeabi_fsub(floatConversion,DAT_20000004);\n  floatConversion = __floatsisf(sensorDataConverted2);\n  floatConversion = __aeabi_fmul(floatConversion,0x447a0000);\n  floatConversion = __aeabi_fmul(floatConversion,0x38000000);\n  DAT_200002cc = __aeabi_fsub(floatConversion,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "read_and_calculate_sensor_data_08002bf0",
                "local_20": "sensorDataBytes",
                "local_1c": "sensorDataBytes2",
                "I2C_ReadByteArray": "readSensorDataFromI2C",
                "iVar3": "sensorDataConverted1",
                "iVar2": "sensorDataConverted2",
                "uVar1": "floatConversion"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "configure_mpu9250_08002cb0",
            "code": "\nvoid configureMPU9250_08002cb0(undefined4 configParam1,undefined4 configParam2,undefined4 configParam3,uint configParam4)\n\n{\n  undefined4 calculatedValue;\n  uint dataValue;\n  \n  dataValue = configParam4;\n  I2C_WriteByte(0xd0,0x37,0x22,1,configParam1,configParam2,configParam3);\n  I2C_WriteByte(0xd0,0x6a,1);\n  I2C_ReadByte(0x18,0,\"../Src/MPU9250.c\",0xad);\n  I2C_WriteByte(0x18,0xb,1);\n  I2C_WriteByte(0x18,10,0,1);\n  I2C_WriteByte(0x18,10,0xf,1);\n  I2C_ReadByteArray(0x18,0x10,&dataValue,3,\"../Src/MPU9250.c\",0xb6);\n  calculatedValue = __floatsisf((dataValue & 0xff) - 0x80);\n  calculatedValue = __aeabi_fmul(calculatedValue,0x3b800000);\n  DAT_200002e8 = __addsf3(calculatedValue,0x3f800000);\n  calculatedValue = __floatsisf((dataValue >> 8 & 0xff) - 0x80);\n  calculatedValue = __aeabi_fmul(calculatedValue,0x3b800000);\n  DAT_200002ec = __addsf3(calculatedValue,0x3f800000);\n  calculatedValue = __floatsisf((dataValue >> 0x10 & 0xff) - 0x80);\n  calculatedValue = __aeabi_fmul(calculatedValue,0x3b800000);\n  DAT_200002f0 = __addsf3(calculatedValue,0x3f800000);\n  I2C_WriteByte(0x18,10,0,1);\n  I2C_WriteByte(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "configure_mpu9250_08002cb0",
                "param_1": "configParam1",
                "param_2": "configParam2",
                "param_3": "configParam3",
                "param_4": "configParam4",
                "uVar1": "calculatedValue",
                "local_c": "dataValue"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "__floatsisf",
                "I2C_WriteByte",
                "I2C_ReadByte",
                "__addsf3",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "read_sensor_data_08002d88",
            "code": "\nvoid readSensorData_08002d88(undefined4 dataPin,undefined4 clockPin,undefined4 address,undefined4 data)\n\n{\n  int readResult;\n  undefined4 convertedValue;\n  undefined4 conversionFactor;\n  int convertedValue2;\n  undefined2 sensorData;\n  undefined byte0;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  byte flag;\n  undefined highByte;\n  \n  highByte = (undefined)((uint)data >> 0x18);\n  sensorData = 0;\n  byte0 = 0;\n  byte1 = 0;\n  byte2 = 0;\n  byte3 = 0;\n  flag = 0;\n  readResult = I2C_ReadByte(0x18,2,\"../Src/MPU9250.c\",0xd7,dataPin,clockPin);\n  if (readResult << 0x1f < 0) {\n    I2C_ReadByteArray(0x18,3,&sensorData,7,\"../Src/MPU9250.c\",0xda);\n    conversionFactor = DAT_2000001c;\n    if ((int)((uint)flag << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(byte1,byte0);\n      DAT_200002bc = CONCAT11(byte3,byte2);\n      convertedValue2 = (int)DAT_200002ba;\n      readResult = (int)DAT_200002bc;\n      DAT_200002b8 = sensorData;\n      convertedValue = __floatsisf();\n      convertedValue = __aeabi_fmul(convertedValue,conversionFactor);\n      convertedValue = __aeabi_fmul(convertedValue,DAT_200002e8);\n      convertedValue = __aeabi_fsub(convertedValue,DAT_20000020);\n      DAT_200002dc = __aeabi_fmul(convertedValue,DAT_2000002c);\n      convertedValue = __floatsisf(convertedValue2);\n      convertedValue = __aeabi_fmul(convertedValue,conversionFactor);\n      convertedValue = __aeabi_fmul(convertedValue,DAT_200002ec);\n      convertedValue = __aeabi_fsub(convertedValue,DAT_20000024);\n      DAT_200002e0 = __aeabi_fmul(convertedValue,DAT_20000030);\n      convertedValue = __floatsisf(readResult);\n      conversionFactor = __aeabi_fmul(convertedValue,conversionFactor);\n      conversionFactor = __aeabi_fmul(conversionFactor,DAT_200002f0);\n      conversionFactor = __aeabi_fsub(conversionFactor,DAT_20000028);\n      DAT_200002e4 = __aeabi_fmul(conversionFactor,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "read_sensor_data_08002d88",
                "param_1": "dataPin",
                "param_2": "clockPin",
                "param_3": "address",
                "param_4": "data",
                "iVar1": "readResult",
                "uVar2": "convertedValue",
                "uVar3": "conversionFactor",
                "iVar4": "convertedValue2",
                "local_28": "sensorData",
                "uStack_26": "byte0",
                "uStack_25": "byte1",
                "local_24": "byte2",
                "local_23": "byte3",
                "local_22": "flag",
                "uStack_21": "highByte"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByte",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_sensor_subsystem_08002ea0",
            "code": "\nvoid initializeSensorSubsystem_08002ea0(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 returnValue;\n  \n  initializeMPU9250();\n  initializeAK8963();\n  setMadgwickBeta(0x3f19999a);\n  setMadgwickDelta(0,returnValue,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_sensor_subsystem_08002ea0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "returnValue",
                "MPU9250_Init": "initializeMPU9250",
                "AK8963_Init": "initializeAK8963",
                "MadgwickSetBeta": "setMadgwickBeta",
                "MadgwickSetDelta": "setMadgwickDelta"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "MPU9250_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta",
                "AK8963_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_result_08002ec0",
            "code": "\nvoid calculateResult_08002ec0(void)\n\n{\n  undefined4 difference;\n  undefined4 initialValue;\n  undefined4 multiplier;\n  \n  initialValue = DAT_2000024c;\n  multiplier = DAT_20000010;\n  difference = __aeabi_fsub(0x3f800000,DAT_20000010);\n  initialValue = __aeabi_fmul(difference,initialValue);\n  multiplier = __aeabi_fmul(multiplier,DAT_2000000c);\n  DAT_2000000c = __addsf3(multiplier,initialValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_result_08002ec0",
                "uVar1": "difference",
                "uVar2": "initialValue",
                "uVar3": "multiplier"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "update_values_08002ed4",
            "code": "\nvoid updateValues_08002ed4(void)\n\n{\n  undefined4 difference;\n  undefined4 initialValue;\n  undefined4 multiplier;\n  \n  initialValue = DAT_20000248;\n  multiplier = uRam20000018;\n  difference = __aeabi_fsub(0x3f800000,uRam20000018);\n  initialValue = __aeabi_fmul(difference,initialValue);\n  multiplier = __aeabi_fmul(multiplier,uRam20000014);\n  uRam20000014 = __addsf3(multiplier,initialValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "update_values_08002ed4",
                "uVar1": "difference",
                "uVar2": "initialValue",
                "uVar3": "multiplier"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "adjust_float_value_08002ee8",
            "code": "\nvoid adjustFloatValue_08002ee8(void)\n\n{\n  undefined4 originalValue;\n  int isValueInRange;\n  \n  originalValue = DAT_20000250;\n  isValueInRange = isGreaterThanOrEqualTo(DAT_20000250,0xc3340000);\n  if ((isValueInRange != 0) && (isValueInRange = isLessThan(originalValue,0x42b40000), isValueInRange != 0)) {\n    addValue(originalValue,0x42b40000);\n    return;\n  }\n  subtractValue(originalValue,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "adjust_float_value_08002ee8",
                "uVar1": "originalValue",
                "iVar2": "isValueInRange",
                "__aeabi_fcmpge": "isGreaterThanOrEqualTo",
                "__aeabi_fcmplt": "isLessThan",
                "__addsf3": "addValue",
                "__aeabi_fsub": "subtractValue"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fcmplt",
                "__aeabi_fcmpge"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "update_sensor_data_08002f28",
            "code": "\n\n\nvoid updateSensorData_08002f28(void)\n\n{\n  undefined4 timeDifference;\n  \n  MPU9250_ReadAccelData();\n  MPU9250_ReadGyroData();\n  AK8963_ReadData();\n  DAT_20000258 = micros();\n  timeDifference = __floatunsisf(DAT_20000258 - DAT_20000254);\n  __aeabi_fdiv(timeDifference,0x447a0000);\n  MadgwickSetDelta();\n  DAT_20000254 = DAT_20000258;\n  MadgwickQuaternionUpdate\n            (DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n             DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n             &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  timeDifference = AHRS_GetRoll();\n  __aeabi_fmul(timeDifference,0x41200000);\n  DAT_20001395._0_2_ = __aeabi_f2iz();\n  timeDifference = AHRS_GetPitch();\n  __aeabi_fmul(timeDifference,0x41200000);\n  DAT_20001395._2_2_ = __aeabi_f2iz();\n  AHRS_GetYaw();\n  DAT_20001399 = __aeabi_f2iz();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "update_sensor_data_08002f28",
                "uVar1": "timeDifference"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MadgwickSetDelta",
                "AHRS_GetPitch",
                "MPU9250_ReadGyroData",
                "__aeabi_f2iz",
                "__floatunsisf",
                "MPU9250_ReadAccelData",
                "__aeabi_fmul",
                "AK8963_ReadData",
                "micros",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "__aeabi_fdiv",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "read_bytes_from_i2_c_device_08003034",
            "code": "\nuint readBytesFromI2CDevice_08003034(undefined4 deviceAddress,undefined4 param2,undefined4 busNumber,undefined4 localVar)\n\n{\n  undefined4 localVar;\n  \n  localVar = localVar;\n  I2C_ReadBytes(0xee,0,&localVar,3,\"../Src/MS5611.c\",0x8c,busNumber);\n  return (uint)CONCAT12((undefined)localVar,CONCAT11(localVar._1_1_,localVar._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "read_bytes_from_i2_c_device_08003034",
                "param_1": "deviceAddress",
                "param_2": "param2",
                "param_3": "busNumber",
                "param_4": "localVar",
                "local_c": "localVar"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "I2C_ReadBytes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "PID_UpdateAltitude"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "read_ms5611_registers_08003298",
            "code": "\nvoid read_MS5611_registers_08003298(void)\n\n{\n  int index;\n  undefined lower_byte;\n  undefined higher_byte;\n  \n  index = 0;\n  write_byte_to_I2C(0xee,0x1e,1);\n  delay_milliseconds(10);\n  DAT_20000038 = 8;\n  do {\n    lower_byte = 0;\n    higher_byte = 0;\n    read_byte_array_from_I2C(0xee,index + 0xa0U & 0xffff,&lower_byte,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = concatenate_bytes(lower_byte,higher_byte);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "read_ms5611_registers_08003298",
                "local_1c": "lower_byte",
                "local_1b": "higher_byte",
                "iVar1": "index",
                "I2C_WriteByte": "write_byte_to_I2C",
                "delay_ms": "delay_milliseconds",
                "I2C_ReadByteArray": "read_byte_array_from_I2C",
                "CONCAT11": "concatenate_bytes"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "I2C_WriteByte",
                "delay_ms",
                "I2C_ReadByteArray"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "initialize_global_variable_08003314",
            "code": "\nvoid initializeGlobalVariable_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "initialize_global_variable_08003314",
                "param_1": "value"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "initialize_global_data_08003320",
            "code": "\nvoid initializeGlobalData_08003320(undefined4 newValue)\n\n{\n  DAT_20000360 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "initialize_global_data_08003320",
                "param_1": "newValue"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_coordinates_08003330",
            "code": "\nvoid calculateCoordinates_08003330(undefined4 x1,undefined4 x2,undefined4 x3,undefined4 y1,\n                 undefined4 y2,undefined4 y3,undefined4 z1,undefined4 z2,\n                 undefined4 z3,undefined4 *result)\n\n{\n  undefined4 distXY;\n  undefined4 distXZ;\n  int isZeroXY;\n  undefined4 distYZ;\n  undefined4 distX;\n  undefined4 distY;\n  undefined4 distZ;\n  int twiceDistY;\n  undefined4 twiceDistZ;\n  undefined4 distYZMulX;\n  undefined4 distYZMulY;\n  undefined4 distYZMulZ;\n  undefined4 distXMulX;\n  undefined4 distXMulY;\n  undefined4 distYMulY;\n  undefined4 distZMulZ;\n  undefined4 var17;\n  undefined4 var18;\n  int distXMulZ;\n  undefined4 var20;\n  undefined4 var21;\n  undefined4 var22;\n  undefined4 var23;\n  undefined4 var24;\n  undefined4 var25;\n  int var26;\n  undefined4 var27;\n  undefined4 var28;\n  undefined4 var29;\n  int isZeroXY0;\n  undefined8 tempResult;\n  undefined8 tempResult2;\n  \n  var29 = DAT_20000048;\n  var28 = DAT_20000044;\n  isZeroXY0 = DAT_20000040;\n  var27 = DAT_2000003c;\n  distXY = __aeabi_fmul(x1,x1);\n  distXZ = __aeabi_fmul(x2);\n  distXY = __addsf3(distXY,distXZ);\n  distXZ = __aeabi_fmul(x3);\n  __addsf3(distXY,distXZ);\n  __aeabi_f2d();\n  sqrt();\n  distXY = __truncdfsf2();\n  isZeroXY = __aeabi_fcmpeq(distXY,0);\n  if (isZeroXY == 0) {\n    distXZ = __aeabi_fmul(z1);\n    distYZ = __aeabi_fmul(z2);\n    distXZ = __addsf3(distXZ,distYZ);\n    distYZ = __aeabi_fmul(z3);\n    __addsf3(distXZ,distYZ);\n    __aeabi_f2d();\n    sqrt();\n    distXZ = __truncdfsf2();\n    isZeroXY = __aeabi_fcmpeq(distXZ,0);\n    if (isZeroXY == 0) {\n      tempResult = __aeabi_f2d(y1);\n      __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xa2529d39,0x3f91df46);\n      distYZ = __truncdfsf2();\n      tempResult = __aeabi_f2d(y2);\n      __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xa2529d39,0x3f91df46);\n      distX = __truncdfsf2();\n      tempResult = __aeabi_f2d(y3);\n      __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xa2529d39,0x3f91df46);\n      distY = __truncdfsf2();\n      isZeroXY = __addsf3(var27);\n      distZ = __addsf3(isZeroXY0);\n      twiceDistY = __addsf3(var28,var28);\n      twiceDistZ = __addsf3(var29,var29);\n      distYZMulX = __aeabi_fmul(var27);\n      distYZMulY = __aeabi_fmul(var27,isZeroXY0);\n      distYZMulZ = __aeabi_fmul(var27,var28);\n      distXMulX = __aeabi_fmul(isZeroXY0);\n      distXMulY = __aeabi_fmul(isZeroXY0,var29);\n      distYMulY = __aeabi_fmul(var28,var28);\n      distZMulZ = __aeabi_fmul(var29,var29);\n      distXY = __aeabi_fdiv(0x3f800000,distXY);\n      distXZ = __aeabi_fdiv(0x3f800000,distXZ);\n      var17 = __aeabi_fmul(z1,distXZ);\n      var18 = __aeabi_fmul(z2,distXZ);\n      distXZ = __aeabi_fmul(z3,distXZ);\n      distXMulZ = __aeabi_fmul(isZeroXY,var17);\n      var20 = __aeabi_fmul(isZeroXY,var18);\n      var21 = __aeabi_fmul(isZeroXY,distXZ);\n      var22 = __aeabi_fmul(distZ,var17);\n      var23 = __aeabi_fmul(distYZMulX,var17);\n      var24 = __aeabi_fmul(var29,var20);\n      var23 = __aeabi_fsub(var23,var24);\n      var24 = __aeabi_fmul(var28,var21);\n      var23 = __addsf3(var23,var24);\n      var24 = __aeabi_fmul(distXMulX,var17);\n      var23 = __addsf3(var23,var24);\n      var24 = __aeabi_fmul(distZ,var18);\n      var24 = __aeabi_fmul(var24,var28);\n      var23 = __addsf3(var23,var24);\n      var24 = __aeabi_fmul(distZ,distXZ);\n      var24 = __aeabi_fmul(var24,var29);\n      var23 = __addsf3(var23,var24);\n      var24 = __aeabi_fmul(distYMulY,var17);\n      var23 = __aeabi_fsub(var23,var24);\n      var24 = __aeabi_fmul(distZMulZ,var17);\n      var23 = __aeabi_fsub(var23,var24);\n      var24 = __aeabi_fmul(var29,distXMulZ);\n      var25 = __aeabi_fmul(distYZMulX,var18);\n      var24 = __addsf3(var24,var25);\n      var21 = __aeabi_fmul(isZeroXY0,var21);\n      var21 = __aeabi_fsub(var24,var21);\n      var24 = __aeabi_fmul(var28,var22);\n      var21 = __addsf3(var21,var24);\n      var24 = __aeabi_fmul(distXMulX,var18);\n      var21 = __aeabi_fsub(var21,var24);\n      var24 = __aeabi_fmul(distYMulY,var18);\n      var21 = __addsf3(var21,var24);\n      var24 = __aeabi_fmul(twiceDistY,distXZ);\n      var24 = __aeabi_fmul(var24,var29);\n      var21 = __addsf3(var21,var24);\n      var24 = __aeabi_fmul(distZMulZ,var18);\n      var21 = __aeabi_fsub(var21,var24);\n      var23 = __aeabi_fmul(var23,var23);\n      var21 = __aeabi_fmul(var21,var21);\n      __addsf3(var23,var21);\n      __aeabi_f2d();\n      sqrt();\n      var26 = __truncdfsf2();\n      var21 = __aeabi_fmul(distXMulZ + -0x80000000,var28);\n      var20 = __aeabi_fmul(isZeroXY0,var20);\n      var20 = __addsf3(var21,var20);\n      distYZMulX = __aeabi_fmul(distYZMulX,distXZ);\n      distYZMulX = __addsf3(var20,distYZMulX);\n      var20 = __aeabi_fmul(var29,var22);\n      distYZMulX = __addsf3(distYZMulX,var20);\n      var20 = __aeabi_fmul(distXMulX,distXZ);\n      distYZMulX = __aeabi_fsub(distYZMulX,var20);\n      var20 = __aeabi_fmul(twiceDistY,var18);\n      var20 = __aeabi_fmul(var20,var29);\n      distYZMulX = __addsf3(distYZMulX,var20);\n      var20 = __aeabi_fmul(distYMulY,distXZ);\n      distYZMulX = __aeabi_fsub(distYZMulX,var20);\n      var20 = __aeabi_fmul(distZMulZ,distXZ);\n      distYZMulX = __addsf3(distYZMulX,var20);\n      var20 = __addsf3(distYZMulX,distYZMulX);\n      var21 = __addsf3(distXMulY);\n      var22 = __aeabi_fmul(var28,isZeroXY);\n      var21 = __aeabi_fsub(var21,var22);\n      var22 = __aeabi_fmul(x1,distXY);\n      var21 = __aeabi_fsub(var21,var22);\n      var22 = __aeabi_fmul(var29,twiceDistY);\n      var23 = __addsf3(distYZMulY);\n      var22 = __addsf3(var22,var23);\n      var23 = __aeabi_fmul(x2,distXY);\n      var22 = __aeabi_fsub(var22,var23);\n      var23 = __aeabi_fmul(var28,distYZMulX);\n      var24 = __aeabi_fsub(0x3f000000,distYMulY);\n      distZMulZ = __aeabi_fsub(var24,distZMulZ);\n      distZMulZ = __aeabi_fmul(distZMulZ,var26);\n      var24 = __aeabi_fsub(distXMulY,distYZMulZ);\n      var24 = __aeabi_fmul(var24,distYZMulX);\n      distZMulZ = __addsf3(distZMulZ,var24);\n      distZMulZ = __aeabi_fsub(distZMulZ,var17);\n      var17 = __aeabi_fmul(isZeroXY0,distYZMulX);\n      var24 = __aeabi_fmul(isZeroXY0,var28);\n      var25 = __aeabi_fmul(var27,var29);\n      var24 = __aeabi_fsub(var24,var25);\n      var24 = __aeabi_fmul(var24,var26);\n      var25 = __aeabi_fmul(var28,var29);\n      distYZMulY = __addsf3(var25,distYZMulY);\n      distYZMulY = __aeabi_fmul(distYZMulY,distYZMulX);\n      distYZMulY = __addsf3(var24,distYZMulY);\n      distYZMulY = __aeabi_fsub(distYZMulY,var18);\n      var18 = __aeabi_fmul(var28,var26);\n      var24 = __aeabi_fsub(0x3f000000,distXMulX);\n      var24 = __aeabi_fsub(var24,distYMulY);\n      var24 = __aeabi_fmul(var24,distYZMulX);\n      distYZMulZ = __addsf3(distYZMulZ,distXMulY);\n      distYZMulZ = __aeabi_fmul(distYZMulZ,var26);\n      distYZMulZ = __addsf3(var24,distYZMulZ);\n      distXZ = __aeabi_fsub(distYZMulZ,distXZ);\n      distYZMulZ = __aeabi_fmul(twiceDistY + -0x80000000,var21);\n      distXMulY = __aeabi_fmul(distZ,var22);\n      distYZMulZ = __addsf3(distYZMulZ,distXMulY);\n      distXMulY = __aeabi_fmul(var23,distZMulZ);\n      distYZMulZ = __aeabi_fsub(distYZMulZ,distXMulY);\n      distXMulY = __aeabi_fmul(var29,var26 + -0x80000000);\n      distXMulY = __addsf3(distXMulY,var17);\n      distXMulY = __aeabi_fmul(distXMulY,distYZMulY);\n      distYZMulZ = __addsf3(distYZMulZ,distXMulY);\n      distXMulY = __aeabi_fmul(var18,distXZ);\n      distYZMulZ = __addsf3(distYZMulZ,distXMulY);\n      distXMulX = __addsf3(distXMulX);\n      distXMulX = __aeabi_fsub(0x3f800000,distXMulX);\n      distXMulY = __addsf3(distYMulY);\n      distXMulX = __aeabi_fsub(distXMulX,distXMulY);\n      distXY = __aeabi_fmul(x3,distXY);\n      distXY = __aeabi_fsub(distXMulX,distXY);\n      distXMulX = __aeabi_fmul(var29,distYZMulX);\n      distYZMulX = __aeabi_fmul(var27,distYZMulX);\n      distXMulY = __aeabi_fmul(twiceDistZ,var21);\n      distYMulY = __aeabi_fmul(isZeroXY,var22);\n      distXMulY = __addsf3(distXMulY,distYMulY);\n      distYMulY = __aeabi_fmul(isZeroXY0,0x40800000);\n      distYMulY = __aeabi_fmul(distYMulY,distXY);\n      distXMulY = __aeabi_fsub(distXMulY,distYMulY);\n      distYMulY = __aeabi_fmul(distZMulZ,distXMulX);\n      distXMulY = __addsf3(distXMulY,distYMulY);\n      distYMulY = __addsf3(var18,distYZMulX);\n      distYMulY = __aeabi_fmul(distYMulY,distYZMulY);\n      distXMulY = __addsf3(distXMulY,distYMulY);\n      distYMulY = __aeabi_fmul(var29,var26);\n      var18 = __aeabi_fmul(isZeroXY0,var20);\n      distYMulY = __aeabi_fsub(distYMulY,var18);\n      distYMulY = __aeabi_fmul(distYMulY,distXZ);\n      distXMulY = __addsf3(distXMulY,distYMulY);\n      distXMulZ = __addsf3(var26,var26);\n      distYMulY = __aeabi_fmul(isZeroXY0,var26);\n      var18 = __aeabi_fmul(isZeroXY + -0x80000000,var21);\n      twiceDistZ = __aeabi_fmul(twiceDistZ,var22);\n      twiceDistZ = __addsf3(var18,twiceDistZ);\n      var18 = __aeabi_fmul(var28,0x40800000);\n      distXY = __aeabi_fmul(var18,distXY);\n      distXY = __aeabi_fsub(twiceDistZ,distXY);\n      twiceDistZ = __aeabi_fmul(var28,distXMulZ + -0x80000000);\n      twiceDistZ = __aeabi_fsub(twiceDistZ,distYZMulX);\n      twiceDistZ = __aeabi_fmul(twiceDistZ,distZMulZ);\n      distXY = __addsf3(distXY,twiceDistZ);\n      twiceDistZ = __addsf3(distXMulX,distYMulY);\n      twiceDistZ = __aeabi_fmul(twiceDistZ,distYZMulY);\n      distXY = __addsf3(distXY,twiceDistZ);\n      twiceDistZ = __aeabi_fmul(var27,var26);\n      distYZMulX = __aeabi_fmul(var28,var20);\n      twiceDistZ = __aeabi_fsub(twiceDistZ,distYZMulX);\n      twiceDistZ = __aeabi_fmul(twiceDistZ,distXZ);\n      twiceDistZ = __addsf3(distXY,twiceDistZ);\n      distXY = __aeabi_fmul(distZ,var21);\n      distZ = __aeabi_fmul(twiceDistY,var22);\n      distXY = __addsf3(distXY,distZ);\n      distZ = __aeabi_fmul(var29,distXMulZ + -0x80000000);\n      distZ = __addsf3(distZ,var17);\n      distZ = __aeabi_fmul(distZ,distZMulZ);\n      distXY = __addsf3(distXY,distZ);\n      distZ = __aeabi_fmul(var27,var26 + -0x80000000);\n      distZ = __addsf3(distZ,var23);\n      distZ = __aeabi_fmul(distZ,distYZMulY);\n      distXY = __addsf3(distXY,distZ);\n      distXZ = __aeabi_fmul(distXZ,distYMulY);\n      distZ = __addsf3(distXY,distXZ);\n      distXY = __aeabi_fmul(distYZMulZ);\n      distXZ = __aeabi_fmul(distXMulY);\n      distXY = __addsf3(distXY,distXZ);\n      distXZ = __aeabi_fmul(twiceDistZ,twiceDistZ);\n      distXY = __addsf3(distXY,distXZ);\n      distXZ = __aeabi_fmul(distZ,distZ);\n      __addsf3(distXY,distXZ);\n      __aeabi_f2d();\n      sqrt();\n      distXY = __truncdfsf2();\n      distYZMulX = __aeabi_fdiv(0x3f800000,distXY);\n      distXY = DAT_2000035c;\n      distXZ = __aeabi_fmul(isZeroXY0 + -0x80000000,distYZ);\n      distYZMulY = __aeabi_fmul(var28,distX);\n      distXZ = __aeabi_fsub(distXZ,distYZMulY);\n      distYZMulY = __aeabi_fmul(var29,distY);\n      distXZ = __aeabi_fsub(distXZ,distYZMulY);\n      distYZMulY = __aeabi_fmul(distXZ,0x3f000000);\n      distYZMulZ = __aeabi_fmul(distYZMulZ,distYZMulX);\n      distXZ = DAT_20000360;\n      distYZMulZ = __aeabi_fmul(distYZMulZ,distXY);\n      distYZMulY = __aeabi_fsub(distYZMulY,distYZMulZ);\n      distXZ = __aeabi_fmul(distYZMulY,distXZ);\n      distYZMulY = __addsf3(distXZ,var27);\n      distYZMulZ = __aeabi_fmul(var27,distYZ);\n      distXMulX = __aeabi_fmul(var28,distY);\n      distXZ = DAT_20000360;\n      distYZMulZ = __addsf3(distYZMulZ,distXMulX);\n      distXMulX = __aeabi_fmul(var29,distX);\n      distYZMulZ = __aeabi_fsub(distYZMulZ,distXMulX);\n      distYZMulZ = __aeabi_fmul(distYZMulZ,0x3f000000);\n      distXMulX = __aeabi_fmul(distXMulY,distYZMulX);\n      distXMulX = __aeabi_fmul(distXMulX,distXY);\n      distYZMulZ = __aeabi_fsub(distYZMulZ,distXMulX);\n      distXZ = __aeabi_fmul(distYZMulZ,distXZ);\n      distYZMulZ = __addsf3(distXZ,isZeroXY0);\n      distXZ = DAT_20000360;\n      distXMulX = __aeabi_fmul(var27,distX);\n      distXMulY = __aeabi_fmul(isZeroXY0,distY);\n      distXMulX = __aeabi_fsub(distXMulX,distXMulY);\n      distXMulY = __aeabi_fmul(var29,distYZ);\n      distXMulX = __addsf3(distXMulX,distXMulY);\n      distXMulX = __aeabi_fmul(distXMulX,0x3f000000);\n      twiceDistZ = __aeabi_fmul(twiceDistZ,distYZMulX);\n      twiceDistZ = __aeabi_fmul(twiceDistZ,distXY);\n      twiceDistZ = __aeabi_fsub(distXMulX,twiceDistZ);\n      distXZ = __aeabi_fmul(twiceDistZ,distXZ);\n      distXZ = __addsf3(distXZ,var28);\n      var27 = __aeabi_fmul(var27,distY);\n      distX = __aeabi_fmul(isZeroXY0,distX);\n      var27 = __addsf3(var27,distX);\n      var28 = __aeabi_fmul(var28,distYZ);\n      var27 = __aeabi_fsub(var27,var28);\n      var28 = __aeabi_fmul(var27,0x3f000000);\n      var27 = __aeabi_fmul(distZ,distYZMulX);\n      distXY = __aeabi_fmul(var27,distXY);\n      var27 = DAT_20000360;\n      var28 = __aeabi_fsub(var28,distXY);\n      var27 = __aeabi_fmul(var28,var27);\n      var27 = __addsf3(var27,var29);\n      var28 = __aeabi_fmul(distYZMulY,distYZMulY);\n      var29 = __aeabi_fmul(distYZMulZ,distYZMulZ);\n      var28 = __addsf3(var28,var29);\n      var29 = __aeabi_fmul(distXZ,distXZ);\n      var28 = __addsf3(var28,var29);\n      var29 = __aeabi_fmul(var27,var27);\n      __addsf3(var28,var29);\n      __aeabi_f2d();\n      sqrt();\n      var28 = __truncdfsf2();\n      var28 = __aeabi_fdiv(0x3f800000,var28);\n      var29 = __aeabi_fmul(distYZMulY,var28);\n      DAT_2000003c = var29;\n      isZeroXY0 = __aeabi_fmul(distYZMulZ,var28);\n      DAT_20000040 = isZeroXY0;\n      distXY = __aeabi_fmul(distXZ,var28);\n      DAT_20000044 = distXY;\n      DAT_20000048 = __aeabi_fmul(var27,var28);\n      var27 = __aeabi_fmul(isZeroXY0,DAT_20000048);\n      var28 = __aeabi_fmul(var29,distXY);\n      var27 = __aeabi_fsub(var27,var28);\n      __addsf3(var27,var27);\n      __aeabi_f2d();\n      tempResult = asin();\n      tempResult = __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x40668000);\n      __divdf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x54442d18,0x400921fb);\n      var27 = __truncdfsf2();\n      *result = var27;\n      isZeroXY0 = DAT_20000040;\n      var27 = DAT_2000003c;\n      var28 = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      var29 = __aeabi_fmul(isZeroXY0,isZeroXY0);\n      var29 = __aeabi_fsub(var28,var29);\n      var28 = DAT_20000044;\n      distXY = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      distXY = __aeabi_fsub(var29,distXY);\n      var29 = DAT_20000048;\n      distXZ = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __addsf3(distXY,distXZ);\n      tempResult = __aeabi_f2d();\n      var27 = __aeabi_fmul(var27,isZeroXY0);\n      var28 = __aeabi_fmul(var28,var29);\n      var27 = __addsf3(var27,var28);\n      __addsf3(var27,var27);\n      tempResult2 = __aeabi_f2d();\n      tempResult = atan2((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult,\n                     (int)((ulonglong)tempResult >> 0x20));\n      tempResult = __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x40668000);\n      __divdf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x54442d18,0x400921fb);\n      var27 = __truncdfsf2();\n      result[1] = var27;\n      isZeroXY0 = DAT_20000040;\n      var27 = DAT_2000003c;\n      var28 = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      var29 = __aeabi_fmul(isZeroXY0,isZeroXY0);\n      var29 = __addsf3(var28,var29);\n      var28 = DAT_20000044;\n      distXY = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      distXY = __aeabi_fsub(var29,distXY);\n      var29 = DAT_20000048;\n      distXZ = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __aeabi_fsub(distXY,distXZ);\n      tempResult = __aeabi_f2d();\n      var28 = __aeabi_fmul(isZeroXY0,var28);\n      var27 = __aeabi_fmul(var27,var29);\n      var27 = __addsf3(var28,var27);\n      __addsf3(var27,var27);\n      tempResult2 = __aeabi_f2d();\n      tempResult = atan2((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult,\n                     (int)((ulonglong)tempResult >> 0x20));\n      tempResult = __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x40668000);\n      __divdf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x54442d18,0x400921fb);\n      var27 = __truncdfsf2();\n      result[2] = var27;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_coordinates_08003330",
                "param_1": "x1",
                "param_2": "x2",
                "param_3": "x3",
                "param_4": "y1",
                "param_5": "y2",
                "param_6": "y3",
                "param_7": "z1",
                "param_8": "z2",
                "param_9": "z3",
                "param_10": "result",
                "uVar1": "distXY",
                "uVar2": "distXZ",
                "iVar3": "isZeroXY",
                "uVar4": "distYZ",
                "uVar5": "distX",
                "uVar6": "distY",
                "uVar7": "distZ",
                "iVar8": "twiceDistY",
                "uVar9": "twiceDistZ",
                "uVar10": "distYZMulX",
                "uVar11": "distYZMulY",
                "uVar12": "distYZMulZ",
                "uVar13": "distXMulX",
                "uVar14": "distXMulY",
                "uVar15": "distYMulY",
                "uVar16": "distZMulZ",
                "uVar17": "var17",
                "uVar18": "var18",
                "iVar19": "distXMulZ",
                "uVar20": "var20",
                "uVar21": "var21",
                "uVar22": "var22",
                "uVar23": "var23",
                "uVar24": "var24",
                "uVar25": "var25",
                "iVar26": "var26",
                "uVar27": "var27",
                "uVar28": "var28",
                "uVar29": "var29",
                "uVar31": "tempResult",
                "uVar32": "tempResult2"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "atan2",
                "sqrt",
                "__aeabi_fcmpeq",
                "__aeabi_fsub",
                "__aeabi_f2d",
                "__addsf3",
                "__muldf3",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "__aeabi_fmul",
                "asin",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "shift_left_or_interrupt_08003eb0",
            "code": "\nlonglong shiftLeftOrInterrupt_08003eb0(uint input)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combine(input,1);\n  }\n  return (extendedValue)input << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "shift_left_or_interrupt_08003eb0",
                "param_1": "input",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combine",
                "ulonglong": "extendedValue"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_value_08003ec8",
            "code": "\nundefined4 incrementAndStoreValue_08003ec8(int baseAddress,undefined newValue)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = newValue;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_value_08003ec8",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_gpio_pins_08003f3c",
            "code": "\nvoid setGPIOPins_08003f3c(int pinState1,int pinState2,int pinState3)\n\n{\n  HAL_GPIO_WritePin(0x40011000,0x8000,pinState1 == 0);\n  HAL_GPIO_WritePin(0x40011000,0x4000,pinState2 == 0);\n  HAL_GPIO_WritePin(0x40011000,0x2000,pinState3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_gpio_pins_08003f3c",
                "param_1": "pinState1",
                "param_2": "pinState2",
                "param_3": "pinState3"
            },
            "calling": [
                "PID_Update",
                "Devices_Init"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_memory_value_08003fc4",
            "code": "\nvoid setMemoryValue_08003fc4(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_memory_value_08003fc4",
                "param_1": "newValue"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_global_variable_08003fd0",
            "code": "\nvoid setGlobalVariable_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_global_variable_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "store_parameter_in_memory_08003fdc",
            "code": "\nvoid storeParameterInMemory_08003fdc(undefined4 parameter)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = parameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "store_parameter_in_memory_08003fdc",
                "param_1": "parameter"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_08003fe8",
            "code": "\nvoid setParam_08003fe8(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_08003fe8",
                "param_1": "newValue"
            },
            "calling": [
                "Motor_DistributeSpeed",
                "Motor_StopAll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "start_pwm_signals_08003ff4",
            "code": "\nvoid start_PWM_signals_08003ff4(void)\n\n{\n  HAL_TIM_PWM_Start(&DAT_200015f8,4);\n  HAL_TIM_PWM_Start(&DAT_20001540,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "start_pwm_signals_08003ff4"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_led_sequence_08004028",
            "code": "\nvoid initializeLEDSequence_08004028(void)\n\n{\n  int loopCounter;\n  \n  Peripherals_Init();\n  PWM_Init();\n  loopCounter = 3;\n  do {\n    toggleLED(1,0);\n    delay_ms(100);\n    toggleLED(0,1);\n    delay_ms(100);\n    toggleLED(0,0,1);\n    delay_ms(100);\n    loopCounter = loopCounter + -1;\n  } while (loopCounter != 0);\n  toggleLED(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_led_sequence_08004028",
                "iVar1": "loopCounter"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "Peripherals_Init",
                "PWM_Init",
                "delay_ms",
                "toggleLED"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "write_data_to_i2_c_device_0800403c",
            "code": "\nvoid writeDataToI2CDevice_0800403c(undefined4 deviceAddress,undefined4 registerAddress,undefined data,int delayEnabled)\n\n{\n  int result;\n  undefined localData [8];\n  \n  localData[0] = data;\n  result = HAL_I2C_Mem_Write(&DAT_20001504,deviceAddress,registerAddress,1,localData,1,200);\n  if (result != 0) {\n    _Error_Handler(\"../Src/i2c.c\",0x1b);\n  }\n  if (delayEnabled != 0) {\n    delay_ms(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "write_data_to_i2_c_device_0800403c",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "param_3": "data",
                "param_4": "delayEnabled",
                "iVar1": "result",
                "local_14": "localData"
            },
            "calling": [
                "taskScheduler",
                "MPU9250_Init",
                "AK8963_Init",
                "MS5611_Init"
            ],
            "called": [
                "HAL_I2C_Mem_Write",
                "delay_ms",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "read_from_i2_c_device_0800407c",
            "code": "\nundefined readFromI2CDevice_0800407c(undefined4 deviceAddress,undefined4 registerAddress,undefined4 errorHandlerParam1,undefined4 errorHandlerParam2)\n\n{\n  int iVar1;\n  undefined readValue [8];\n  \n  readValue[0] = 0;\n  iVar1 = HAL_I2C_Mem_Read(&DAT_20001504,deviceAddress,registerAddress,1,readValue,1,200);\n  if (iVar1 != 0) {\n    _Error_Handler(errorHandlerParam1,errorHandlerParam2);\n  }\n  return readValue[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "read_from_i2_c_device_0800407c",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "param_3": "errorHandlerParam1",
                "param_4": "errorHandlerParam2",
                "local_14": "readValue"
            },
            "calling": [
                "MPU9250_Init",
                "AK8963_Init",
                "I2C_ReadByteArray",
                "AK8963_ReadData"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "read_i2_c_memory_080040b8",
            "code": "\nvoid readI2CMemory_080040b8(undefined4 deviceAddress,undefined4 memoryAddress,undefined4 memoryAddressSize,undefined4 pData,\n                 undefined4 errorCallback,undefined4 errorUserData)\n\n{\n  int readResult;\n  \n  readResult = HAL_I2C_Mem_Read(&DAT_20001504,deviceAddress,memoryAddress,1,memoryAddressSize,pData,200,pData);\n  if (readResult != 0) {\n    _Error_Handler(errorCallback,errorUserData);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "read_i2_c_memory_080040b8",
                "param_1": "deviceAddress",
                "param_2": "memoryAddress",
                "param_3": "memoryAddressSize",
                "param_4": "pData",
                "param_5": "errorCallback",
                "param_6": "errorUserData",
                "iVar1": "readResult"
            },
            "calling": [
                "MS5611_ReadADC"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "read_and_store_i2_c_bytes_080040e8",
            "code": "\nvoid ReadAndStoreI2CBytes_080040e8(undefined4 deviceAddress,int startAddress,int storageAddress,int byteCount)\n\n{\n  undefined readByte;\n  int index;\n  undefined *storagePointer;\n  int auxiliaryVar;\n  \n  storagePointer = (undefined *)(storageAddress + -1);\n  auxiliaryVar = byteCount;\n  for (index = 0; index < byteCount; index = index + 1) {\n    readByte = I2C_ReadByte(deviceAddress,startAddress + index & 0xffff,\"../Src/i2c.c\",0x4c,auxiliaryVar);\n    storagePointer = storagePointer + 1;\n    *storagePointer = readByte;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "read_and_store_i2_c_bytes_080040e8",
                "param_1": "deviceAddress",
                "param_2": "startAddress",
                "param_3": "storageAddress",
                "param_4": "byteCount",
                "uVar1": "readByte",
                "iVar2": "index",
                "puVar3": "storagePointer",
                "iVar4": "auxiliaryVar"
            },
            "calling": [
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "MS5611_Init",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "update_control_system_0800411c",
            "code": "\nvoid updateControlSystem_0800411c(void)\n\n{\n  undefined4 *newPointer;\n  longlong longValue;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  int currentTime;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  undefined4 *pointer;\n  undefined4 undefinedVariable;\n  int temp10;\n  int temp11;\n  bool isNegative;\n  undefined8 temp12;\n  \n  currentTime = millis();\n  if (1 < (uint)(currentTime - DAT_2000028c)) {\n    DAT_2000028c = millis();\n    AHRS_ComputeAngles();\n  }\n  currentTime = millis();\n  if (2 < (uint)(currentTime - DAT_20000294)) {\n    DAT_20000294 = millis();\n    PID_Update();\n  }\n  currentTime = millis();\n  if (3 < (uint)(currentTime - DAT_20000290)) {\n    DAT_20000290 = millis();\n    MSP_SendIdent();\n    MSP_SendStatus();\n    MSP_SendMotor();\n    MSP_SendAttitude();\n    MSP_SendAltitude();\n    MSP_SendRawIMU();\n    MSP_SendPID();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    temp11 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    temp6 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)temp11) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)temp11) >> 0x20) << 9;\n    temp7 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)temp11 >> 7);\n    temp8 = temp7 + (uint)DAT_20000260 * 0x10000;\n    temp2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)temp11) >> 8);\n    currentTime = temp6 + 2000;\n    temp3 = temp2 + (uint)DAT_2000025e * 0x8000;\n    isNegative = (int)temp6 < 0;\n    if (1999 < currentTime) {\n      temp6 = 0;\n    }\n    temp1 = temp6;\n    if (isNegative != SBORROW4(currentTime,2000)) {\n      temp10 = temp6 * temp6 * 5;\n      temp6 = temp10 >> 2;\n      temp1 = temp10 >> 1;\n    }\n    temp9 = temp8 - temp1;\n    longValue = (ulonglong)(temp3 - temp6) * (ulonglong)DAT_2000026c;\n    temp10 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)temp11 >> 0x28) +\n               (uint)CARRY4(temp2,(uint)DAT_2000025e * 0x8000)) - ((int)temp6 >> 0x1f)) -\n             (uint)(temp3 < temp6)) + (int)((ulonglong)longValue >> 0x20);\n    temp2 = (uint)longValue >> 0x15 | temp10 * 0x800;\n    temp4 = __floatsisf(temp2 - temp9 >> 0xf |\n                        (((temp10 >> 0x15) -\n                         ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)temp11 >> 0x27) +\n                           (uint)CARRY4(temp7,(uint)DAT_20000260 * 0x10000)) - ((int)temp1 >> 0x1f)\n                          ) - (uint)(temp8 < temp1))) - (uint)(temp2 < temp9)) * 0x20000);\n    temp4 = __aeabi_fdiv(temp4,0x42c80000);\n    DAT_20000354 = temp4;\n    temp5 = __floatsisf(currentTime);\n    DAT_20000358 = __aeabi_fdiv(temp5,0x42c80000);\n    __aeabi_fdiv(temp4,0x447d5000);\n    temp12 = __aeabi_f2d();\n    temp12 = pow((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x60000000,0x3fc85b95);\n    temp12 = __subdf3(0,0x3ff00000,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n    __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),0,0x40e5a540);\n    temp4 = __truncdfsf2();\n    temp5 = 0;\n    pointer = &DAT_20000300;\n    DAT_20000350 = temp4;\n    do {\n      newPointer = pointer + 1;\n      *pointer = *newPointer;\n      temp5 = __addsf3(temp5);\n      pointer = newPointer;\n    } while (newPointer != &DAT_2000034c);\n    DAT_2000034c = temp4;\n    temp4 = __addsf3(temp5,temp4);\n    DAT_200002fc = __aeabi_fdiv(temp4,0x41a00000);\n    currentTime = __aeabi_f2iz();\n    DAT_200014ab = currentTime * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = millis();\n  }\n  currentTime = millis();\n  if (((10 < (uint)(currentTime - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = MS5611_ReadADC();\n    DAT_20000275 = '\\x01';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x40,1,0,undefinedVariable);\n    DAT_20000278 = millis();\n  }\n  currentTime = millis();\n  if (((10 < (uint)(currentTime - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = MS5611_ReadADC();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "update_control_system_0800411c",
                "puVar1": "newPointer",
                "lVar2": "longValue",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "currentTime",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "puVar13": "pointer",
                "unaff_r4": "undefinedVariable",
                "iVar14": "temp10",
                "iVar15": "temp11",
                "bVar16": "isNegative",
                "uVar17": "temp12"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MSP_SendPID",
                "I2C_WriteByte",
                "MSP_SendMotor",
                "millis",
                "MSP_SendAltitude",
                "__subdf3",
                "__addsf3",
                "AHRS_ComputeAngles",
                "__aeabi_f2iz",
                "__muldf3",
                "pow",
                "MSP_SendIdent",
                "__truncdfsf2",
                "__floatsisf",
                "MSP_SendRawIMU",
                "__aeabi_f2d",
                "MSP_SendAttitude",
                "MS5611_ReadADC",
                "PID_Update",
                "__aeabi_fdiv",
                "MSP_SendStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_components_08004194",
            "code": "\nvoid initializeComponents_08004194(void)\n\n{\n  initializeDevices();\n  initializeSerialCommunication();\n  initializeIMU();\n  initializeMS5611();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_components_08004194",
                "Devices_Init": "initializeDevices",
                "serialBegin": "initializeSerialCommunication",
                "IMU_Init": "initializeIMU",
                "MS5611_Init": "initializeMS5611"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MS5611_Init",
                "serialBegin",
                "IMU_Init",
                "Devices_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "continuous_task_scheduler_080041ae",
            "code": "\nvoid continuousTaskScheduler_080041ae(void)\n\n{\n  initializeForkserver(0);\n  initializeSystem();\n  do {\n    incrementSystemTick();\n    executeTasks();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "continuous_task_scheduler_080041ae",
                "startForkserver": "initializeForkserver",
                "setup": "initializeSystem",
                "HAL_IncTick": "incrementSystemTick",
                "taskScheduler": "executeTasks"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "taskScheduler",
                "startForkserver",
                "HAL_IncTick",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "stop_motors_080041c4",
            "code": "\nvoid stopMotors_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 returnValue;\n  \n  Motor1_SetPWM(0);\n  Motor2_SetPWM(0);\n  Motor3_SetPWM(0);\n  Motor4_SetPWM(0,returnValue,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "stop_motors_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "returnValue"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "adjust_motor_pwm_0800426c",
            "code": "\n\n\nvoid adjustMotorPWM_0800426c(undefined4 currentPWM1,undefined4 currentPWM2,undefined4 offset1,undefined4 offset2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint intval1;\n  uint intval2;\n  uint intval3;\n  uint intval4;\n  \n  result1 = __aeabi_fsub();\n  result2 = __addsf3(currentPWM1,currentPWM2);\n  result3 = __aeabi_fsub(result1,offset1);\n  result3 = __addsf3(result3,offset2);\n  __aeabi_fsub(result3,0x447a0000);\n  intval1 = __aeabi_f2iz();\n  result3 = __aeabi_fsub(result2,offset1);\n  result3 = __aeabi_fsub(result3,offset2);\n  __aeabi_fsub(result3,0x447a0000);\n  intval2 = __aeabi_f2iz();\n  result1 = __addsf3(result1,offset1);\n  result1 = __aeabi_fsub(result1,offset2);\n  __aeabi_fsub(result1,0x447a0000);\n  intval3 = __aeabi_f2iz();\n  result1 = __addsf3(offset1,result2);\n  result1 = __addsf3(result1,offset2);\n  __aeabi_fsub(result1,0x447a0000);\n  intval4 = __aeabi_f2iz();\n  if (999 < (int)intval4) {\n    intval4 = 1000;\n  }\n  if (999 < (int)intval3) {\n    intval3 = 1000;\n  }\n  if (999 < (int)intval2) {\n    intval2 = 1000;\n  }\n  if (999 < (int)intval1) {\n    intval1 = 1000;\n  }\n  DAT_200002a0 = intval2 & ~((int)intval2 >> 0x1f);\n  DAT_200002a4 = intval1 & ~((int)intval1 >> 0x1f);\n  DAT_2000029c = intval3 & ~((int)intval3 >> 0x1f);\n  DAT_20000298 = intval4 & ~((int)intval4 >> 0x1f);\n  Motor1_SetPWM();\n  Motor2_SetPWM(DAT_2000029c);\n  Motor3_SetPWM(DAT_200002a0);\n  Motor4_SetPWM(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "adjust_motor_pwm_0800426c",
                "param_1": "currentPWM1",
                "param_2": "currentPWM2",
                "param_3": "offset1",
                "param_4": "offset2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "intval1",
                "uVar5": "intval2",
                "uVar6": "intval3",
                "uVar7": "intval4"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "__addsf3",
                "__aeabi_f2iz",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "print_and_checksum_08004300",
            "code": "\nvoid printAndChecksum_08004300(uint inputChecksum,byte *inputData,uint inputDataLength)\n\n{\n  uint checksum;\n  byte *currentByte;\n  \n  serialPrint(&DAT_0800732e);\n  serialWrite(inputDataLength & 0xff);\n  checksum = inputDataLength & 0xff ^ inputChecksum;\n  serialWrite(inputChecksum);\n  for (currentByte = inputData; (int)currentByte - (int)inputData < (int)inputDataLength; currentByte = currentByte + 1) {\n    serialWrite(*currentByte);\n    checksum = checksum ^ *currentByte;\n  }\n  serialWrite(checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "print_and_checksum_08004300",
                "param_1": "inputChecksum",
                "param_2": "inputData",
                "param_3": "inputDataLength",
                "uVar1": "checksum",
                "pbVar2": "currentByte"
            },
            "calling": [
                "MSP_SendPID",
                "MSP_SendMotor",
                "MSP_SendAltitude",
                "MSP_SendRawIMU",
                "MSP_SendAttitude",
                "MSP_SendIdent",
                "MSP_SendStatus"
            ],
            "called": [
                "serialWrite",
                "serialPrint"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "send_frame_data_08004348",
            "code": "\n\n\nvoid sendFrameData_08004348(undefined4 arg1,uint frameData,undefined4 arg2)\n\n{\n  undefined4 frameType;\n  uint maskedData;\n  undefined4 stackParam;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  frameType = 0x40003e9;\n  maskedData = frameData & 0xff000000;\n  stackParam = arg2;\n  MSP_SendFrame(100,&frameType,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "send_frame_data_08004348",
                "param_1": "arg1",
                "param_2": "frameData",
                "param_3": "arg2",
                "local_10": "frameType",
                "local_c": "maskedData",
                "uStack_8": "stackParam"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "FUNC_08004384",
            "code": "\n\n\nvoid FUNC_08004384(undefined4 param_1,undefined4 param_2,undefined4 param_3,uint param_4)\n\n{\n  undefined4 local_14;\n  undefined4 uStack_10;\n  uint local_c;\n  \n  _DAT_200013bd = 0x2a0007;\n  local_14 = _DAT_200013b9;\n  uStack_10 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  local_c = param_4 & 0xff000000;\n  MSP_SendFrame(0x65,&local_14,0xb,0,param_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "FUNC_08004384"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_send_frame_080043bc",
            "code": "\nvoid copyAndSendFrame_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *destination;\n  undefined4 *source;\n  undefined4 copiedData [2];\n  undefined2 tempBuffer [6];\n  \n  source = (undefined4 *)&DAT_2000142a;\n  destination = copiedData;\n  do {\n    value1 = *source;\n    value2 = source[1];\n    source = source + 2;\n    *destination = value1;\n    destination[1] = value2;\n    destination = destination + 2;\n  } while (source != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destination = DAT_2000143a;\n  MSP_SendFrame(0x66,copiedData,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_send_frame_080043bc",
                "puVar4": "source",
                "puVar3": "destination",
                "local_24": "copiedData",
                "local_1c": "tempBuffer",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "send_frame_to_msp_080043f0",
            "code": "\n\n\nvoid sendFrameToMSP_080043f0(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 mspDataAddress;\n  undefined4 mspFlagAddress;\n  undefined4 dataBuffer [2];\n  \n  mspDataAddress = _DAT_200013dd;\n  mspFlagAddress = _DAT_200013e1;\n  dataBuffer[0] = param3;\n  MSP_SendFrame(0x68,&mspDataAddress,8,dataBuffer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "send_frame_to_msp_080043f0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "mspDataAddress",
                "uStack_c": "mspFlagAddress",
                "auStack_8": "dataBuffer"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "send_frame_to_msp_08004410",
            "code": "\nvoid sendFrameToMSP_08004410(undefined4 unusedParam1,undefined4 sourceAddress,undefined4 data)\n\n{\n  undefined4 destinationAddress;\n  undefined4 combinedAddress;\n  undefined4 unusedStackVar;\n  \n  destinationAddress = DAT_20001395;\n  combinedAddress = CONCAT22((short)((uint)sourceAddress >> 0x10),DAT_20001399);\n  unusedStackVar = data;\n  MSP_SendFrame(0x6c,&destinationAddress,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "send_frame_to_msp_08004410",
                "param_1": "unusedParam1",
                "param_2": "sourceAddress",
                "param_3": "data",
                "local_10": "destinationAddress",
                "local_c": "combinedAddress",
                "uStack_8": "unusedStackVar"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "send_frame_to_msp_08004434",
            "code": "\nvoid sendFrameToMSP_08004434(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 mspValue;\n  undefined4 mspData;\n  undefined4 stackParam;\n  \n  mspValue = DAT_200014ab;\n  mspData = CONCAT22((short)((uint)param2 >> 0x10),DAT_200014af);\n  stackParam = param3;\n  MSP_SendFrame(0x6d,&mspValue,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "send_frame_to_msp_08004434",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "mspValue",
                "local_c": "mspData",
                "uStack_8": "stackParam"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "FUNC_08004458",
            "code": "\nvoid FUNC_08004458(void)\n\n{\n  undefined4 *puVar1;\n  undefined4 *puVar2;\n  undefined4 uVar3;\n  undefined4 *puVar4;\n  undefined4 *puVar5;\n  undefined4 local_30 [3];\n  undefined2 local_24 [10];\n  \n  puVar1 = local_30;\n  puVar2 = &DAT_2000139b;\n  do {\n    puVar5 = puVar2;\n    puVar4 = puVar1;\n    uVar3 = puVar5[1];\n    *puVar4 = *puVar5;\n    puVar4[1] = uVar3;\n    puVar1 = puVar4 + 2;\n    puVar2 = puVar5 + 2;\n  } while (puVar5 + 2 != (undefined4 *)0x200013b3);\n  puVar4[2] = uRam200013b3;\n  *(undefined2 *)(puVar4 + 3) = *(undefined2 *)(puVar5 + 3);\n  MSP_SendFrame(0x70,local_30,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "FUNC_08004458"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "error_handling_08004490",
            "code": "\nvoid errorHandling_08004490(undefined4 errorCode,undefined4 errorLine)\n\n{\n  setGPIO(0x40011000,0x4000,1);\n  setGPIO(0x40011000,0x8000,0);\n  setGPIO(0x40011000,0x2000,0);\n  do {\n    toggleGPIO(0x40011000,0x4000);\n    toggleGPIO(0x40011000,0x8000);\n    toggleGPIO(0x40011000,0x2000);\n    printErrorMessage(\"Error with \");\n    printErrorMessage(errorCode);\n    printErrorMessage(\" at line: \");\n    printErrorLine(errorLine);\n    writeNewLine(10);\n    delayMilliseconds(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "error_handling_08004490",
                "param_1": "errorCode",
                "param_2": "errorLine",
                "HAL_GPIO_WritePin": "setGPIO",
                "HAL_GPIO_TogglePin": "toggleGPIO",
                "serialPrint": "printErrorMessage",
                "serialInt": "printErrorLine",
                "serialWrite": "writeNewLine",
                "delay_ms": "delayMilliseconds"
            },
            "calling": [
                "Peripherals_Init",
                "I2C_WriteByte",
                "SystemClock_Config",
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "serialInt",
                "serialWrite",
                "delay_ms",
                "serialPrint",
                "HAL_GPIO_WritePin",
                "HAL_GPIO_TogglePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_system_08004514",
            "code": "\nvoid initializeSystem_08004514(void)\n\n{\n  int error;\n  uint frequency;\n  undefined4 lineNumber;\n  int configValue;\n  undefined4 setBitmask;\n  int clockSource;\n  int clockStatus;\n  undefined4 clockDivisor;\n  int clockStatusCopy;\n  undefined4 clockConfig [4];\n  undefined4 initializationStatus;\n  undefined4 maximumAttempts;\n  undefined4 configRetry;\n  undefined4 isSuccessful;\n  undefined4 referenceClock;\n  \n  initializationStatus = 1;\n  maximumAttempts = 0x10;\n  configValue = 2;\n  isSuccessful = 0;\n  clockConfig[0] = 2;\n  configRetry = 2;\n  referenceClock = 0x380000;\n  error = HAL_RCC_OscConfig(clockConfig);\n  if (error == 0) goto LAB_08004540;\n  lineNumber = 0x3c;\n  while( true ) {\n    error = _Error_Handler(\"../Src/peripherals.c\",lineNumber);\nLAB_08004540:\n    setBitmask = 0xf;\n    clockDivisor = 0x400;\n    clockSource = configValue;\n    clockStatus = error;\n    clockStatusCopy = error;\n    configValue = HAL_RCC_ClockConfig(&setBitmask,configValue);\n    if (configValue == 0) break;\n    lineNumber = 0x49;\n  }\n  frequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(frequency / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_system_08004514",
                "iVar1": "error",
                "uVar2": "frequency",
                "uVar3": "lineNumber",
                "iVar4": "configValue",
                "local_44": "setBitmask",
                "local_40": "clockSource",
                "local_3c": "clockStatus",
                "local_38": "clockDivisor",
                "local_34": "clockStatusCopy",
                "local_30": "clockConfig",
                "local_20": "initializationStatus",
                "local_1c": "maximumAttempts",
                "local_14": "configRetry",
                "local_10": "isSuccessful",
                "local_c": "referenceClock"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "_Error_Handler",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripherals_0800458c",
            "code": "\n\n\nvoid initializePeripherals_0800458c(void)\n\n{\n  int errorStatus;\n  undefined4 handlerIndex;\n  int timerConfig;\n  int timerConfig1;\n  int timerConfig2;\n  int pwmConfig1;\n  int pwmConfig2;\n  int pwmConfig3;\n  int pwmConfig4;\n  int pwmConfig5;\n  int pwmConfig6;\n  int gpioConfig1;\n  int gpioConfig2;\n  int gpioConfig3;\n  int gpioConfig4;\n  int gpioConfig5;\n  undefined4 breakDeadTime;\n  int gpioConfig6;\n  \n  HAL_Init();\n  SystemClock_Config();\n  timerConfig = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  HAL_GPIO_WritePin(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  HAL_GPIO_WritePin(0x40010800,0x20,0);\n  gpioConfig1 = 0xe000;\n  gpioConfig2 = 1;\n  gpioConfig4 = 2;\n  HAL_GPIO_Init(0x40011000,&gpioConfig1);\n  gpioConfig1 = 0x20;\n  gpioConfig2 = 1;\n  gpioConfig4 = 2;\n  HAL_GPIO_Init(0x40010800,&gpioConfig1);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  errorStatus = HAL_I2C_Init();\n  if (errorStatus == 0) goto LAB_0800463a;\n  handlerIndex = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  errorStatus = _Error_Handler(\"../Src/peripherals.c\",handlerIndex);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = errorStatus;\n                                  DAT_20001588 = errorStatus;\n                                  DAT_2000158c = errorStatus;\n                                  DAT_20001594 = errorStatus;\n                                  DAT_20001598 = errorStatus;\n                                  errorStatus = HAL_UART_Init(&DAT_2000157c);\n                                  if (errorStatus == 0) break;\n                                  handlerIndex = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = timerConfig;\n                                DAT_200015c4 = errorStatus;\n                                DAT_200015cc = errorStatus;\n                                DAT_200015d0 = errorStatus;\n                                errorStatus = HAL_TIM_PWM_Init(&DAT_200015bc);\n                                if (errorStatus == 0) break;\n                                handlerIndex = 0x88;\n                              }\n                              timerConfig1 = errorStatus;\n                              timerConfig2 = errorStatus;\n                              errorStatus = HAL_TIMEx_MasterConfigSynchronization(&DAT_200015bc,&timerConfig1)\n                              ;\n                              if (errorStatus == 0) break;\n                              handlerIndex = 0x8f;\n                            }\n                            pwmConfig1 = 0x60;\n                            pwmConfig2 = errorStatus;\n                            pwmConfig3 = errorStatus;\n                            pwmConfig4 = errorStatus;\n                            pwmConfig5 = errorStatus;\n                            pwmConfig6 = errorStatus;\n                            errorStatus = HAL_TIM_PWM_ConfigChannel(&DAT_200015bc,&pwmConfig1,0xc);\n                            if (errorStatus == 0) break;\n                            handlerIndex = 0x9a;\n                          }\n                          breakDeadTime = 0x2000;\n                          gpioConfig1 = errorStatus;\n                          gpioConfig2 = errorStatus;\n                          gpioConfig3 = errorStatus;\n                          gpioConfig4 = errorStatus;\n                          gpioConfig5 = errorStatus;\n                          gpioConfig6 = errorStatus;\n                          errorStatus = HAL_TIMEx_ConfigBreakDeadTime(&DAT_200015bc,&gpioConfig1);\n                          if (errorStatus == 0) break;\n                          handlerIndex = 0xa6;\n                        }\n                        HAL_TIM_MspPostInit(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = timerConfig;\n                        DAT_20001600 = errorStatus;\n                        DAT_20001608 = errorStatus;\n                        errorStatus = HAL_TIM_PWM_Init(&DAT_200015f8);\n                        if (errorStatus == 0) break;\n                        handlerIndex = 0xc3;\n                      }\n                      pwmConfig1 = errorStatus;\n                      pwmConfig2 = errorStatus;\n                      errorStatus = HAL_TIMEx_MasterConfigSynchronization(&DAT_200015f8,&pwmConfig1);\n                      if (errorStatus == 0) break;\n                      handlerIndex = 0xca;\n                    }\n                    gpioConfig1 = 0x60;\n                    gpioConfig2 = errorStatus;\n                    gpioConfig3 = errorStatus;\n                    gpioConfig5 = errorStatus;\n                    errorStatus = HAL_TIM_PWM_ConfigChannel(&DAT_200015f8,&gpioConfig1,4);\n                    if (errorStatus == 0) break;\n                    handlerIndex = 0xd3;\n                  }\n                  HAL_TIM_MspPostInit(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = timerConfig;\n                  DAT_20001548 = errorStatus;\n                  DAT_20001550 = errorStatus;\n                  errorStatus = HAL_TIM_PWM_Init();\n                  if (errorStatus == 0) break;\n                  handlerIndex = 0xf0;\n                }\n                pwmConfig1 = 0;\n                pwmConfig2 = 0;\n                errorStatus = HAL_TIMEx_MasterConfigSynchronization(&DAT_20001540,&pwmConfig1);\n                if (errorStatus == 0) break;\n                handlerIndex = 0xf7;\n              }\n              gpioConfig1 = 0x60;\n              gpioConfig2 = errorStatus;\n              gpioConfig3 = errorStatus;\n              gpioConfig5 = errorStatus;\n              errorStatus = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&gpioConfig1,8);\n              if (errorStatus == 0) break;\n              handlerIndex = 0x100;\n            }\n            timerConfig = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&gpioConfig1,0xc);\n            if (timerConfig == 0) break;\n            handlerIndex = 0x105;\n          }\n          HAL_TIM_MspPostInit(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = timerConfig;\n          DAT_200014d8 = timerConfig;\n          errorStatus = HAL_TIM_PWM_Init(&DAT_200014c8);\n          if (errorStatus == 0) break;\n          handlerIndex = 0x122;\n        }\n        pwmConfig1 = errorStatus;\n        pwmConfig2 = errorStatus;\n        errorStatus = HAL_TIMEx_MasterConfigSynchronization(&DAT_200014c8,&pwmConfig1);\n        if (errorStatus == 0) break;\n        handlerIndex = 0x129;\n      }\n      gpioConfig1 = 0x60;\n      gpioConfig2 = errorStatus;\n      gpioConfig3 = errorStatus;\n      gpioConfig5 = errorStatus;\n      errorStatus = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&gpioConfig1,8);\n      if (errorStatus == 0) break;\n      handlerIndex = 0x132;\n    }\n    errorStatus = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&gpioConfig1,0xc);\n    if (errorStatus == 0) break;\n    handlerIndex = 0x137;\n  }\n  HAL_TIM_MspPostInit(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripherals_0800458c",
                "iVar1": "errorStatus",
                "uVar2": "handlerIndex",
                "iVar3": "timerConfig",
                "local_58": "timerConfig1",
                "local_54": "timerConfig2",
                "local_50": "pwmConfig1",
                "local_4c": "pwmConfig2",
                "local_48": "pwmConfig3",
                "local_40": "pwmConfig4",
                "local_3c": "pwmConfig5",
                "local_38": "pwmConfig6",
                "local_34": "gpioConfig1",
                "local_30": "gpioConfig2",
                "local_2c": "gpioConfig3",
                "local_28": "gpioConfig4",
                "local_24": "gpioConfig5",
                "local_20": "breakDeadTime",
                "local_1c": "gpioConfig6"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_I2C_Init",
                "HAL_TIM_PWM_Init",
                "HAL_UART_Init",
                "SystemClock_Config",
                "HAL_TIM_MspPostInit",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "_Error_Handler",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_GPIO_WritePin",
                "HAL_Init",
                "HAL_GPIO_Init",
                "HAL_TIMEx_MasterConfigSynchronization"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_values_0800483c",
            "code": "\nvoid calculateValues_0800483c(int *parameters)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int variable3;\n  int variable4;\n  int variable5;\n  \n  variable4 = parameters[0xc];\n  result1 = __addsf3(parameters[7],parameters[9]);\n  variable4 = __aeabi_fsub(result1,variable4);\n  parameters[10] = variable4;\n  if (*parameters == 3) {\n    variable4 = __aeabi_fcmpgt(parameters[10],0);\n    if (variable4 == 0) {\n      variable4 = __aeabi_fcmplt(parameters[10],0xc3340000);\n    }\n    else {\n      variable4 = __aeabi_fcmpgt(parameters[10],0x43340000);\n    }\n    if (variable4 != 0) {\n      variable5 = parameters[10];\n      result1 = __aeabi_fmul(parameters[10],0x43b40000);\n      variable4 = __aeabi_fcmpgt(parameters[10],0);\n      variable3 = parameters[10];\n      if (variable4 == 0) {\n        variable3 = variable3 + -0x80000000;\n      }\n      result1 = __aeabi_fdiv(result1,variable3);\n      variable4 = __aeabi_fsub(variable5,result1);\n      parameters[10] = variable4;\n    }\n  }\n  variable5 = parameters[2];\n  variable3 = parameters[3];\n  variable4 = __aeabi_fmul(parameters[1],parameters[10]);\n  parameters[0xe] = variable4;\n  variable4 = __addsf3(parameters[10],parameters[0xf]);\n  parameters[0xf] = variable4;\n  variable4 = __aeabi_fcmplt(parameters[0xf],0xc3fa0000);\n  if (variable4 == 0) {\n    variable4 = __aeabi_fcmpgt(parameters[0xf],0x43fa0000);\n    if (variable4 == 0) {\n      variable4 = parameters[0xf];\n    }\n    else {\n      variable4 = 0x43fa0000;\n    }\n  }\n  else {\n    variable4 = -0x3c060000;\n  }\n  parameters[0xf] = variable4;\n  variable4 = __aeabi_fsub(parameters[0xc],parameters[0xd]);\n  parameters[0x10] = variable4;\n  variable4 = parameters[0xe];\n  result1 = __aeabi_fmul(variable5,parameters[0xf]);\n  result1 = __addsf3(result1,variable4);\n  result2 = __aeabi_fmul(variable3,parameters[0x10]);\n  variable4 = __aeabi_fsub(result1,result2);\n  parameters[0x12] = variable4;\n  result1 = __floatsisf(parameters[0x13]);\n  variable4 = __aeabi_fcmplt(parameters[0x12],0xc3fa0000);\n  if (variable4 == 0) {\n    variable4 = __aeabi_fcmpgt(parameters[0x12],0x43fa0000);\n    if (variable4 == 0) {\n      variable4 = parameters[0x12];\n    }\n    else {\n      variable4 = 0x43fa0000;\n    }\n  }\n  else {\n    variable4 = -0x3c060000;\n  }\n  variable4 = __aeabi_fmul(variable4,result1);\n  parameters[0x12] = variable4;\n  parameters[0xd] = parameters[0xc];\n  parameters[0xb] = parameters[10];\n  parameters[0x15] = parameters[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_values_0800483c",
                "param_1": "parameters",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "variable3",
                "iVar4": "variable4",
                "iVar5": "variable5"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fdiv",
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_filtered_altitude_08004a30",
            "code": "\nvoid updateFilteredAltitude_08004a30(void)\n\n{\n  undefined4 uVar1;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      uVar1 = MS5611_GetFilteredAltitude();\n      DAT_20000068 = __aeabi_fmul(uVar1,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      uVar1 = MS5611_GetFilteredAltitude();\n      DAT_2000007c = __aeabi_fmul(uVar1,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_filtered_altitude_08004a30"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "MS5611_GetFilteredAltitude",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "calculate_roll_and_pitch_08004a84",
            "code": "\nvoid calculateRollAndPitch_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = getPitch();\n  DAT_20000134 = getRoll();\n  DAT_20000190 = getYaw();\n  updateAltitude();\n  iVar1 = compareFloatGreater(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = compareFloatLess(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = compareFloatGreater(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = compareFloatGreater(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = compareFloatLess(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = compareFloatGreater(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      changeLEDStatus(1,1);\n      calculatePID(&DAT_200000a8);\n      calculatePID(&DAT_20000104);\n      calculatePID(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculatePID(&DAT_2000004c);\n        addSinglePrecisionFloat(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        stopAllMotors();\n      }\n      else {\n        distributeMotorSpeed(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      multiplyFloat(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = convertFloatToInt();\n      multiplyFloat(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = convertFloatToInt();\n      multiplyFloat(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = convertFloatToInt();\n      multiplyFloat(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = convertFloatToInt();\n      multiplyFloat(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = convertFloatToInt();\n      multiplyFloat(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = convertFloatToInt();\n      multiplyFloat(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = convertFloatToInt();\n      multiplyFloat(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = convertFloatToInt();\n      multiplyFloat(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = convertFloatToInt();\n      multiplyFloat(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = convertFloatToInt();\n      multiplyFloat(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = convertFloatToInt();\n      return;\n    }\n  }\n  stopAllMotors();\n  changeLEDStatus(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "calculate_roll_and_pitch_08004a84",
                "AHRS_GetPitch": "getPitch",
                "AHRS_GetRoll": "getRoll",
                "AHRS_GetYaw": "getYaw",
                "PID_UpdateAltitude": "updateAltitude",
                "__aeabi_fcmpgt": "compareFloatGreater",
                "__aeabi_fcmplt": "compareFloatLess",
                "toggleLED": "changeLEDStatus",
                "PID_Compute": "calculatePID",
                "__addsf3": "addSinglePrecisionFloat",
                "Motor_StopAll": "stopAllMotors",
                "Motor_DistributeSpeed": "distributeMotorSpeed",
                "__aeabi_fmul": "multiplyFloat",
                "__fixunssfsi": "convertFloatToInt"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "Motor_StopAll",
                "PID_Compute",
                "__addsf3",
                "toggleLED",
                "__aeabi_fcmpgt",
                "__aeabi_fmul",
                "__fixunssfsi",
                "PID_UpdateAltitude",
                "AHRS_GetYaw",
                "__aeabi_fcmplt",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 processData_08004c18(undefined inputParam)\n\n{\n  int *ptrArray;\n  int startTime;\n  int currTime;\n  ushort *ushortPtr;\n  \n  DAT_20001636._0_1_ = inputParam;\n  ushortPtr = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      startTime = HAL_GetTick();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        currTime = HAL_GetTick();\n      } while ((uint)(currTime - startTime) < 6);\nLAB_0800281c:\n      ptrArray = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptrArray[3] = ptrArray[3] & 0xffffffdf;\n      ptrArray[3] = ptrArray[3] & 0xfffffeff;\n      ptrArray[5] = ptrArray[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      startTime = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        currTime = HAL_GetTick();\n        if (5 < (uint)(currTime - startTime)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ushortPtr & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ushortPtr = ushortPtr + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      startTime = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        currTime = HAL_GetTick();\n        if (5 < (uint)(currTime - startTime)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ushortPtr;\n    }\n    ushortPtr = (ushort *)((int)ushortPtr + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "process_data_08004c18",
                "param_1": "inputParam",
                "piVar1": "ptrArray",
                "iVar2": "startTime",
                "iVar3": "currTime",
                "puVar4": "ushortPtr"
            },
            "calling": [
                "MSP_SendFrame",
                "serialPrint",
                "_Error_Handler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "handle_memory_check_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * handleMemoryCheck_08004c30(int *memoryBlockPtr)\n\n{\n  int result;\n  \n  if (*memoryBlockPtr != 0x40013800) {\n    return memoryBlockPtr;\n  }\n  CB_Write(&DAT_20000364,DAT_20001634);\n  result = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(result + 0x14) = *(uint *)(result + 0x14) | 1;\n    *(uint *)(result + 0xc) = *(uint *)(result + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "handle_memory_check_08004c30",
                "param_1": "memoryBlockPtr",
                "iVar1": "result"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "CB_Write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "serialBegin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "process_data_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 processData_08004c70(void)\n\n{\n  int tempVar;\n  \n  serialFlush();\n  tempVar = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar + 0x14) = *(uint *)(tempVar + 0x14) | 1;\n    *(uint *)(tempVar + 0xc) = *(uint *)(tempVar + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "process_data_08004c70",
                "iVar1": "tempVar"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "serialFlush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "print_serial_string_08004c8c",
            "code": "\nvoid printSerialString_08004c8c(undefined *stringToPrint)\n\n{\n  uint stringLength;\n  undefined *currentCharPointer;\n  \n  currentCharPointer = stringToPrint;\n  while( true ) {\n    stringLength = strlen(stringToPrint);\n    if (stringLength <= (uint)((int)currentCharPointer - (int)stringToPrint)) break;\n    serialWrite(*currentCharPointer);\n    currentCharPointer = currentCharPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "print_serial_string_08004c8c",
                "param_1": "stringToPrint",
                "puVar2": "currentCharPointer",
                "uVar1": "stringLength"
            },
            "calling": [
                "serialInt",
                "MSP_SendFrame",
                "_Error_Handler"
            ],
            "called": [
                "serialWrite",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "FUNC_08004cac",
            "code": "\nvoid FUNC_08004cac(undefined4 param_1)\n\n{\n  siprintf(&DAT_20001636,&DAT_0800735e,param_1);\n  serialPrint(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "FUNC_08004cac"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "configure_interrupt_priorities_08004ccc",
            "code": "\n\n\nvoid configureInterruptPriorities_08004ccc(undefined4 priority1,undefined4 priorityGroup,undefined4 priority2)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  setInterruptPriorityGrouping(3,priorityGroup,_DAT_40021018,1,priority1,1,priority2);\n  setInterruptPriority(0xfffffff4,0);\n  setInterruptPriority(0xfffffff5,0);\n  setInterruptPriority(0xfffffff6,0);\n  setInterruptPriority(0xfffffffb,0);\n  setInterruptPriority(0xfffffffc,0);\n  setInterruptPriority(0xfffffffe,0);\n  setInterruptPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "configure_interrupt_priorities_08004ccc",
                "param_1": "priority1",
                "param_2": "priorityGroup",
                "param_3": "priority2",
                "HAL_NVIC_SetPriorityGrouping": "setInterruptPriorityGrouping",
                "HAL_NVIC_SetPriority": "setInterruptPriority"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "initialize_gpio_08004d48",
            "code": "\n\n\nvoid initializeGpio_08004d48(int *gpioAddress,undefined4 param)\n\n{\n  undefined4 configValue1;\n  undefined4 configValue2;\n  \n  if (*gpioAddress == 0x40005400) {\n    configValue1 = 0xc0;\n    configValue2 = 0x12;\n    HAL_GPIO_Init(0x40010c00,&configValue1,0x40005400,3,gpioAddress,param);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "initialize_gpio_08004d48",
                "param_1": "gpioAddress",
                "param_2": "param",
                "local_18": "configValue1",
                "local_14": "configValue2"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_value_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataValue_08004d8c(int *dataPointer)\n\n{\n  int value;\n  \n  value = *dataPointer;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_value_08004d8c",
                "param_1": "dataPointer",
                "iVar1": "value"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "initialize_gpio_08004e14",
            "code": "\nvoid initializeGPIO_08004e14(int *inputBuffer,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 gpioBaseAddress;\n  int inputValue;\n  undefined4 gpioPinConfiguration;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  inputValue = *inputBuffer;\n  if (inputValue == 0x40012c00) {\n    gpioPinConfiguration = 0x800;\n  }\n  else {\n    if (inputValue != 0x40000000) {\n      if (inputValue == 0x40000400) {\n        gpioPinConfiguration = 3;\n      }\n      else {\n        if (inputValue != 0x40000800) {\n          return;\n        }\n        gpioPinConfiguration = 0x300;\n      }\n      gpioBaseAddress = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    gpioPinConfiguration = 2;\n  }\n  gpioBaseAddress = 0x40010800;\nLAB_08004e2e:\n  localVar3 = 2;\n  localVar1 = 2;\n  localVar2 = arg2;\n  HAL_GPIO_Init(gpioBaseAddress,&gpioPinConfiguration);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "initialize_gpio_08004e14",
                "param_1": "inputBuffer",
                "param_2": "arg1",
                "param_3": "arg2",
                "uVar1": "gpioBaseAddress",
                "iVar2": "inputValue",
                "local_18": "gpioPinConfiguration",
                "local_14": "localVar1",
                "uStack_10": "localVar2",
                "local_c": "localVar3"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_gpio_interrupt_08004e7c",
            "code": "\n\n\nvoid initializeGPIOInterrupt_08004e7c(int *gpioPinAddress)\n\n{\n  undefined4 gpioInitStruct;\n  undefined4 gpioPinInitStruct;\n  undefined4 gpioPinInitStruct2;\n  undefined4 gpioPinInitStruct3;\n  \n  if (*gpioPinAddress == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    gpioInitStruct = 0x200;\n    gpioPinInitStruct = 2;\n    gpioPinInitStruct3 = 3;\n    HAL_GPIO_Init(0x40010800,&gpioInitStruct);\n    gpioInitStruct = 0x400;\n    gpioPinInitStruct = 0;\n    gpioPinInitStruct2 = 0;\n    HAL_GPIO_Init(0x40010800,&gpioInitStruct);\n    HAL_NVIC_SetPriority(0x25,0,0);\n    HAL_NVIC_EnableIRQ(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_gpio_interrupt_08004e7c",
                "param_1": "gpioPinAddress",
                "local_18": "gpioInitStruct",
                "local_14": "gpioPinInitStruct",
                "local_10": "gpioPinInitStruct2",
                "local_c": "gpioPinInitStruct3"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_EnableIRQ",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_memory_08004f10",
            "code": "\n\n\nvoid initializeMemory_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_memory_08004f10"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f5c": {
            "entrypoint": "0x08004f5c",
            "current_name": "FUN_08004f5c",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "FUN_08004f60",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f64": {
            "entrypoint": "0x08004f64",
            "current_name": "FUN_08004f64",
            "code": "\nvoid HAL_Delay(void)\n\n{\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "I2C_WriteByte",
                "MS5611_Init",
                "_Error_Handler",
                "Devices_Init"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f68": {
            "entrypoint": "0x08004f68",
            "current_name": "initialize_program_08004f68",
            "code": "\nvoid initializeProgram_08004f68(void)\n\n{\n  int index;\n  undefined4 *dataPtr;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_20000228; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x8007448);\n  }\n  for (dataPtr = &DAT_20000228; dataPtr < &DAT_200016a0; dataPtr = dataPtr + 1) {\n    *dataPtr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x8004f9a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f68": "initialize_program_08004f68",
                "iVar1": "index",
                "puVar2": "dataPtr",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  _init();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "frame_dummy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_print_and_clear_08004ffc",
            "code": "\nvoid initializePrintAndClear_08004ffc(undefined *buffer,undefined4 size,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined *bufferPtr [2];\n  undefined4 maxSize;\n  undefined2 defaultSize;\n  undefined2 defaultArg2;\n  undefined *currentPtr;\n  undefined4 maxSize2;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  defaultSize = 0x208;\n  maxSize = 0x7fffffff;\n  maxSize2 = 0x7fffffff;\n  defaultArg2 = 0xffff;\n  bufferPtr[0] = buffer;\n  currentPtr = buffer;\n  arg1Copy = size;\n  arg2Copy = arg1;\n  arg3Copy = arg2;\n  _svfiprintf_r(DAT_200001c0,bufferPtr,size);\n  *bufferPtr[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_print_and_clear_08004ffc",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2",
                "local_78": "bufferPtr",
                "local_70": "maxSize",
                "local_6c": "defaultSize",
                "local_6a": "defaultArg2",
                "local_68": "currentPtr",
                "local_64": "maxSize2",
                "uStack_c": "arg1Copy",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "serialInt"
            ],
            "called": [
                "_svfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "update_buffer_08005044",
            "code": "\nundefined4 updateBuffer_08005044(undefined4 *errorCode,int *buffer,undefined4 source,uint length)\n\n{\n  int newBuffer;\n  uint newLength;\n  uint currentLength;\n  int lengthDifference;\n  \n  currentLength = buffer[2];\n  if ((currentLength <= length) && ((*(ushort *)(buffer + 3) & 0x480) != 0)) {\n    lengthDifference = *buffer - buffer[4];\n    currentLength = (uint)(buffer[5] * 3) / 2;\n    newLength = length + 1 + lengthDifference;\n    if (currentLength < newLength) {\n      currentLength = newLength;\n    }\n    if ((int)((uint)*(ushort *)(buffer + 3) << 0x15) < 0) {\n      newBuffer = _malloc_r(errorCode,currentLength);\n      if (newBuffer == 0) {\nLAB_0800508a:\n        *errorCode = 0xc;\n        *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      memcpy(newBuffer,buffer[4],lengthDifference);\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      newBuffer = _realloc_r(errorCode,buffer[4],currentLength);\n      if (newBuffer == 0) {\n        _free_r(errorCode,buffer[4]);\n        goto LAB_0800508a;\n      }\n    }\n    buffer[4] = newBuffer;\n    *buffer = newBuffer + lengthDifference;\n    buffer[5] = currentLength;\n    buffer[2] = currentLength - lengthDifference;\n    currentLength = length;\n  }\n  if (length <= currentLength) {\n    currentLength = length;\n  }\n  memmove(*buffer,source,currentLength);\n  buffer[2] = buffer[2] - currentLength;\n  *buffer = currentLength + *buffer;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "update_buffer_08005044",
                "param_1": "errorCode",
                "param_2": "buffer",
                "param_3": "source",
                "param_4": "length",
                "iVar1": "newBuffer",
                "uVar2": "newLength",
                "uVar3": "currentLength",
                "iVar4": "lengthDifference"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "memmove",
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "parse_and_print_format_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint parseAndPrintFormat_080050fc(undefined4 *memory_manager,int *buffer,byte *format_string,int *additional_args)\n\n{\n  int result;\n  int ssputs_result;\n  int *dynamic_width;\n  bool is_digit;\n  byte *current_char;\n  byte *end_of_format;\n  int printf_result;\n  int *args_ptr;\n  uint flags;\n  int precision;\n  undefined4 padding;\n  int width;\n  int total_len;\n  byte conversion_specifier;\n  undefined space_flag;\n  undefined plus_flag;\n  undefined hash_flag;\n  undefined4 dot_flag;\n  \n  args_ptr = additional_args;\n  if (((int)((uint)*(ushort *)(buffer + 3) << 0x18) < 0) && (buffer[4] == 0)) {\n    result = _malloc_r(memory_manager,0x40);\n    *buffer = result;\n    buffer[4] = result;\n    if (result == 0) {\n      *memory_manager = 0xc;\n      return -1;\n    }\n    buffer[5] = 0x40;\n  }\n  total_len = 0;\n  space_flag = 0x20;\n  plus_flag = 0x30;\n  current_char = format_string;\nLAB_08005146:\n  end_of_format = current_char;\n  if (*end_of_format != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_char = end_of_format + 1;\n  if (*end_of_format != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)end_of_format - (int)format_string;\n  if (result != 0) {\n    ssputs_result = __ssputs_r(memory_manager,buffer,format_string,result);\n    if (ssputs_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(buffer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_len;\n    }\n    total_len = total_len + result;\n  }\n  if (*end_of_format == 0) goto LAB_080052ac;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  padding = 0;\n  hash_flag = 0;\n  dot_flag = 0;\n  current_char = end_of_format + 1;\n  while( true ) {\n    result = memchr(&DAT_08007379,*current_char);\n    format_string = current_char + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    current_char = format_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    hash_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    hash_flag = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    dynamic_width = args_ptr + 1;\n    result = *args_ptr;\n    args_ptr = dynamic_width;\n    if (result < 0) {\n      width = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_digit = false;\n    result = width;\n    format_string = current_char;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      result = result * 10 + (*format_string - 0x30);\n      is_digit = true;\n      format_string = format_string + 1;\n    }\n    if (!is_digit) goto LAB_080051fc;\n  }\n  width = result;\nLAB_080051fc:\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      format_string = format_string + 2;\n      dynamic_width = args_ptr + 1;\n      precision = *args_ptr;\n      args_ptr = dynamic_width;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_digit = false;\n      result = 0;\n      precision = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        result = result * 10 + (*format_string - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        precision = result;\n      }\n    }\n  }\n  result = memchr(&DAT_0800737f,*format_string,3);\n  if (result != 0) {\n    format_string = format_string + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  conversion_specifier = *format_string;\n  format_string = format_string + 1;\n  result = memchr(\"efgEFG\",conversion_specifier,6);\n  if (result == 0) {\n    printf_result = _printf_i(memory_manager,&flags,buffer,0x8005045,&args_ptr);\n    if (printf_result == -1) goto LAB_080052ac;\n  }\n  else {\n    args_ptr = (int *)(((int)args_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_len = total_len + printf_result;\n  current_char = format_string;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "parse_and_print_format_080050fc",
                "param_1": "memory_manager",
                "param_2": "buffer",
                "param_3": "format_string",
                "param_4": "additional_args",
                "iVar1": "result",
                "iVar2": "ssputs_result",
                "piVar3": "dynamic_width",
                "bVar4": "is_digit",
                "pbVar5": "current_char",
                "pbVar6": "end_of_format",
                "unaff_r9": "printf_result",
                "local_8c": "args_ptr",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "padding",
                "local_7c": "width",
                "local_74": "total_len",
                "local_70": "conversion_specifier",
                "local_6f": "space_flag",
                "local_6e": "plus_flag",
                "local_45": "hash_flag",
                "local_30": "dot_flag"
            },
            "calling": [
                "siprintf"
            ],
            "called": [
                "memchr",
                "_malloc_r",
                "__ssputs_r",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "decode_and_count_080052e4",
            "code": "\nundefined4\ndecode_and_count_080052e4(undefined4 input_value,uint *array_param,uint *output_param,undefined4 constant_param,code *callback_function)\n\n{\n  int loop_index;\n  int callback_result;\n  uint max_value;\n  uint offset;\n  bool flag;\n  \n  max_value = array_param[4];\n  if ((int)array_param[4] < (int)array_param[2]) {\n    max_value = array_param[2];\n  }\n  *output_param = max_value;\n  if (*(char *)((int)array_param + 0x43) != '\\0') {\n    *output_param = max_value + 1;\n  }\n  if ((int)(*array_param << 0x1a) < 0) {\n    *output_param = *output_param + 2;\n  }\n  if ((*array_param & 6) == 0) {\n    for (loop_index = 0; loop_index < (int)(array_param[3] - *output_param); loop_index = loop_index + 1) {\n      callback_result = (*callback_function)(input_value,constant_param,(int)array_param + 0x19,1);\n      if (callback_result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)array_param + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  offset = max_value;\n  if ((int)(*array_param << 0x1a) < 0) {\n    *(undefined *)((int)array_param + max_value + 0x43) = 0x30;\n    offset = max_value + 2;\n    *(undefined *)((int)array_param + max_value + 0x44) = *(undefined *)((int)array_param + 0x45);\n  }\n  loop_index = (*callback_function)(input_value,constant_param,(int)array_param + 0x43,offset);\n  if (loop_index != -1) {\n    max_value = array_param[3];\n    flag = (*array_param & 6) != 4;\n    if (flag) {\n      max_value = 0;\n    }\n    offset = 0;\n    if (!flag) {\n      max_value = max_value - *output_param;\n    }\n    if (!flag) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)array_param[4] < (int)array_param[2]) {\n      max_value = max_value + (array_param[2] - array_param[4]);\n    }\n    while( true ) {\n      if (max_value == offset) {\n        return 0;\n      }\n      loop_index = (*callback_function)(input_value,constant_param,(int)array_param + 0x1a,1);\n      if (loop_index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "decode_and_count_080052e4",
                "param_1": "input_value",
                "param_2": "array_param",
                "param_3": "output_param",
                "param_4": "constant_param",
                "param_5": "callback_function",
                "iVar1": "loop_index",
                "iVar2": "callback_result",
                "uVar3": "max_value",
                "uVar4": "offset",
                "bVar5": "flag"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "print_formatted_output_080053d4",
            "code": "\nuint print_formatted_output_080053d4(undefined4 format_string,uint *arg_list,undefined4 stream,code *write_function,uint **arg_ptr)\n\n{\n  byte first_byte;\n  int index;\n  uint *arg_ptr_temp;\n  int write_result;\n  char *hex_digits;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint result;\n  uint arg_size;\n  char *current_digit;\n  char *formatted_output;\n  uint temp_storage [2];\n  \n  first_byte = *(byte *)(arg_list + 6);\n  formatted_output = (char *)((int)arg_list + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_0800558e;\n          if (first_byte != 0x58) goto LAB_08005404;\n          *(undefined *)((int)arg_list + 0x45) = 0x58;\n          hex_digits = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *arg_list;\n          arg_ptr_temp = *arg_ptr;\n          *arg_ptr = arg_ptr_temp + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            result = (uint)*(ushort *)arg_ptr_temp;\n          }\n          else {\n            result = *arg_ptr_temp;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *arg_list = base | 0x20;\n          }\n          if (result == 0) {\n            *arg_list = *arg_list & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)arg_list + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_08005404;\n          result = *arg_list;\n          arg_ptr_temp = *arg_ptr;\n          if ((result & 0x80) == 0) {\n            *arg_ptr = arg_ptr_temp + 1;\n            if ((result & 0x40) == 0) goto LAB_08005424;\n            result = (uint)(short)*(ushort *)arg_ptr_temp;\n          }\n          else {\n            *arg_ptr = arg_ptr_temp + 1;\nLAB_08005424:\n            result = *arg_ptr_temp;\n          }\n          if ((int)result < 0) {\n            result = -result;\n            *(undefined *)((int)arg_list + 0x43) = 0x2d;\n          }\n          hex_digits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        arg_size = arg_list[1];\n        arg_list[2] = arg_size;\n        current_digit = formatted_output;\n        if ((int)arg_size < 0) {\n          if (result != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)arg_list + 0x42) = *hex_digits;\n          current_digit = (char *)((int)arg_list + 0x42);\n        }\n        else {\n          *arg_list = *arg_list & 0xfffffffb;\n          if (result == 0) {\n            if (arg_size != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              arg_size = result / base;\n              current_digit = current_digit + -1;\n              *current_digit = hex_digits[result - base * arg_size];\n              result = arg_size;\n            } while (arg_size != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*arg_list << 0x1f) < 0)) && ((int)arg_list[1] <= (int)arg_list[4]))\n        {\n          current_digit[-1] = '0';\n          current_digit = current_digit + -1;\n        }\n        arg_list[4] = (int)formatted_output - (int)current_digit;\n        formatted_output = current_digit;\n        goto LAB_080054fa;\n      }\n      arg_ptr_temp = *arg_ptr;\n      *arg_ptr = arg_ptr_temp + 1;\n      *(char *)((int)arg_list + 0x42) = (char)*arg_ptr_temp;\nLAB_08005464:\n      formatted_output = (char *)((int)arg_list + 0x42);\n      result = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_0800548a:\n            result = *arg_list;\n            arg_ptr_temp = *arg_ptr;\n            if ((result & 0x80) == 0) {\n              *arg_ptr = arg_ptr_temp + 1;\n              if ((result & 0x40) == 0) goto LAB_08005498;\n              result = (uint)*(ushort *)arg_ptr_temp;\n            }\n            else {\n              *arg_ptr = arg_ptr_temp + 1;\nLAB_08005498:\n              result = *arg_ptr_temp;\n            }\n            if (first_byte == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_digits = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (first_byte == 0x70) {\n            *arg_list = *arg_list | 0x20;\nLAB_0800544a:\n            hex_digits = \"0123456789abcdef\";\n            *(undefined *)((int)arg_list + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_0800548a;\n          if (first_byte == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)arg_list + 0x42) = first_byte;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*arg_ptr;\n      *arg_ptr = (uint *)(ppcVar8 + 1);\n      formatted_output = *ppcVar8;\n      index = memchr(formatted_output,0,arg_list[1]);\n      if (index != 0) {\n        arg_list[1] = index - (int)formatted_output;\n      }\n      result = arg_list[1];\n    }\n    arg_list[4] = result;\n    *(undefined *)((int)arg_list + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  result = *arg_list;\n  ppuVar7 = (uint **)*arg_ptr;\n  base = arg_list[5];\n  if ((result & 0x80) == 0) {\n    *arg_ptr = (uint *)(ppuVar7 + 1);\n    arg_ptr_temp = *ppuVar7;\n    if ((result & 0x40) == 0) goto LAB_0800557a;\n    *(short *)arg_ptr_temp = (short)base;\n  }\n  else {\n    *arg_ptr = (uint *)(ppuVar7 + 1);\n    arg_ptr_temp = *ppuVar7;\nLAB_0800557a:\n    *arg_ptr_temp = base;\n  }\nLAB_0800558e:\n  arg_list[4] = 0;\nLAB_080054fa:\n  index = _printf_common(format_string,arg_list,temp_storage,stream,write_function);\n  if ((index == -1) || (index = (*write_function)(format_string,stream,formatted_output,arg_list[4]), index == -1)) {\nLAB_0800550e:\n    result = 0xffffffff;\n  }\n  else {\n    if ((int)(*arg_list << 0x1e) < 0) {\n      for (index = 0; index < (int)(arg_list[3] - temp_storage[0]); index = index + 1) {\n        write_result = (*write_function)(format_string,stream,(int)arg_list + 0x19,1);\n        if (write_result == -1) goto LAB_0800550e;\n      }\n    }\n    result = arg_list[3];\n    if ((int)arg_list[3] < (int)temp_storage[0]) {\n      result = temp_storage[0];\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "print_formatted_output_080053d4",
                "param_1": "format_string",
                "param_2": "arg_list",
                "param_3": "stream",
                "param_4": "write_function",
                "param_5": "arg_ptr",
                "bVar1": "first_byte",
                "iVar2": "index",
                "puVar3": "arg_ptr_temp",
                "iVar4": "write_result",
                "pcVar5": "hex_digits",
                "uVar6": "base",
                "uVar9": "result",
                "uVar10": "arg_size",
                "pcVar11": "current_digit",
                "pcVar12": "formatted_output",
                "local_24": "temp_storage"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_in_string_08005614",
            "code": "\nchar * find_character_in_string_08005614(char *input_string,char character_to_find,int string_length)\n\n{\n  char *current_pointer;\n  char *next_pointer;\n  \n  current_pointer = input_string;\n  do {\n    next_pointer = current_pointer;\n    if (next_pointer == input_string + string_length) {\n      return (char *)0x0;\n    }\n    current_pointer = next_pointer + 1;\n  } while (*next_pointer != character_to_find);\n  return next_pointer;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_in_string_08005614",
                "param_1": "input_string",
                "param_2": "character_to_find",
                "param_3": "string_length",
                "pcVar1": "current_pointer",
                "pcVar2": "next_pointer"
            },
            "calling": [
                "_svfiprintf_r",
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int dataDestination,undefined *dataSource,int dataSize)\n\n{\n  undefined *destPtr;\n  undefined *srcPtr;\n  \n  srcPtr = (undefined *)(dataDestination + -1);\n  destPtr = dataSource + dataSize;\n  for (; dataSource != destPtr; dataSource = dataSource + 1) {\n    srcPtr = srcPtr + 1;\n    *srcPtr = *dataSource;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "dataDestination",
                "param_2": "dataSource",
                "param_3": "dataSize",
                "puVar1": "destPtr",
                "puVar2": "srcPtr"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_shift_08005646",
            "code": "\nvoid copyAndShift_08005646(undefined *dest,undefined *src,int length)\n\n{\n  undefined *src_end;\n  \n  src_end = src + length;\n  if ((src < dest) && (dest < src_end)) {\n    dest = dest + length;\n    length = length - (int)src_end;\n    while (src_end + length != (undefined *)0x0) {\n      src_end = src_end + -1;\n      dest = dest + -1;\n      *dest = *src_end;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != src_end; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_shift_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "src_end"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "allocate_and_link_memory_0800567c",
            "code": "\nvoid allocate_and_link_memory_0800567c(undefined4 *result_pointer,int size_of_memory,undefined4 arg3,undefined4 arg4)\n\n{\n  int **temp_pointer;\n  int **temp_pointer_1;\n  int **temp_pointer_2;\n  int *temp_pointer_3;\n  int **temp_pointer_4;\n  int **memory_block;\n  \n  if (size_of_memory == 0) {\n    return;\n  }\n  memory_block = (int **)(size_of_memory + -4);\n  if (*(int *)(size_of_memory + -4) < 0) {\n    memory_block = (int **)((int)memory_block + *(int *)(size_of_memory + -4));\n  }\n  __malloc_lock();\n  temp_pointer_2 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    memory_block[1] = (int *)0x0;\n    temp_pointer_1 = temp_pointer;\n    DAT_200002ac = memory_block;\n  }\n  else {\n    temp_pointer_2 = DAT_200002ac;\n    if (memory_block < DAT_200002ac) {\n      temp_pointer_1 = (int **)*memory_block;\n      temp_pointer_2 = (int **)((int)memory_block + (int)temp_pointer_1);\n      if (DAT_200002ac == temp_pointer_2) {\n        temp_pointer_3 = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        temp_pointer_2 = (int **)((int)temp_pointer_3 + (int)temp_pointer_1);\n        *memory_block = (int *)temp_pointer_2;\n      }\n      memory_block[1] = (int *)DAT_200002ac;\n      DAT_200002ac = memory_block;\n    }\n    else {\n      do {\n        temp_pointer_4 = temp_pointer_2;\n        temp_pointer_2 = (int **)temp_pointer_4[1];\n        if (temp_pointer_2 == (int **)0x0) break;\n      } while (temp_pointer_2 <= memory_block);\n      temp_pointer_1 = (int **)*temp_pointer_4;\n      if ((int **)((int)temp_pointer_4 + (int)temp_pointer_1) == memory_block) {\n        temp_pointer_1 = (int **)((int)temp_pointer_1 + (int)*memory_block);\n        *temp_pointer_4 = (int *)temp_pointer_1;\n        if (temp_pointer_2 == (int **)((int)temp_pointer_4 + (int)temp_pointer_1)) {\n          temp_pointer_3 = *temp_pointer_2;\n          temp_pointer_2 = (int **)temp_pointer_2[1];\n          temp_pointer_1 = (int **)((int)temp_pointer_1 + (int)temp_pointer_3);\n          *temp_pointer_4 = (int *)temp_pointer_1;\n          temp_pointer_4[1] = (int *)temp_pointer_2;\n        }\n      }\n      else if (memory_block < (int **)((int)temp_pointer_4 + (int)temp_pointer_1)) {\n        *result_pointer = 0xc;\n      }\n      else {\n        temp_pointer_1 = (int **)((int)memory_block + (int)*memory_block);\n        if (temp_pointer_2 == temp_pointer_1) {\n          temp_pointer_3 = *temp_pointer_2;\n          temp_pointer_2 = (int **)temp_pointer_2[1];\n          temp_pointer_1 = (int **)((int)temp_pointer_3 + (int)*memory_block);\n          *memory_block = (int *)temp_pointer_1;\n        }\n        memory_block[1] = (int *)temp_pointer_2;\n        temp_pointer_4[1] = (int *)memory_block;\n      }\n    }\n  }\n  __malloc_unlock(result_pointer,temp_pointer_1,temp_pointer_2,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "allocate_and_link_memory_0800567c",
                "param_1": "result_pointer",
                "param_2": "size_of_memory",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "temp_pointer",
                "ppiVar1": "temp_pointer_1",
                "ppiVar2": "temp_pointer_2",
                "piVar3": "temp_pointer_3",
                "ppiVar4": "temp_pointer_4",
                "ppiVar5": "memory_block"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocate_memory_08005714(undefined4 *size_ptr,uint size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *block;\n  uint difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < size)) {\n    *size_ptr = 0xc;\n  }\n  else {\n    __malloc_lock();\n    current_block = DAT_200002ac;\n    previous_block = DAT_200002ac;\n    while (block = current_block, block != (uint *)0x0) {\n      difference = *block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (previous_block == block) {\n            current_block = (uint *)previous_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)block[1];\n          }\n          if (previous_block != block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = block;\n          }\n        }\n        else {\n          *block = difference;\n          *(uint *)((int)block + difference) = allocated_size;\n          previous_block = (uint *)((int)block + difference);\n        }\n        goto LAB_08005778;\n      }\n      previous_block = block;\n      current_block = (uint *)block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = _sbrk_r(size_ptr);\n    }\n    current_block = (uint *)_sbrk_r(size_ptr,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (remaining_space = _sbrk_r(size_ptr,(int)previous_block - (int)current_block), remaining_space != -1)))) {\n      *previous_block = allocated_size;\nLAB_08005778:\n      __malloc_unlock(size_ptr);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(previous_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)previous_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *size_ptr = 0xc;\n    __malloc_unlock(size_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "size_ptr",
                "param_2": "size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "block",
                "uVar4": "difference",
                "puVar5": "previous_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "_svfiprintf_r",
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "allocate_or_copy_data_080057d0",
            "code": "\nint allocate_or_copy_data_080057d0(undefined4 ptr,int data,uint size,undefined4 arg)\n\n{\n  int result;\n  uint usable_size;\n  \n  if (data != 0) {\n    if (size == 0) {\n      _free_r();\n      result = 0;\n    }\n    else {\n      usable_size = _malloc_usable_size_r();\n      result = data;\n      if ((usable_size < size) && (result = _malloc_r(ptr,size), result != 0)) {\n        memcpy(result,data,size);\n        _free_r(ptr,data);\n      }\n    }\n    return result;\n  }\n  result = _malloc_r(ptr,size,size,arg);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "allocate_or_copy_data_080057d0",
                "param_1": "ptr",
                "param_2": "data",
                "param_3": "size",
                "param_4": "arg",
                "iVar1": "result",
                "uVar2": "usable_size"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "FUNC_0800581c",
            "code": "\nvoid FUNC_0800581c(int *param_1,undefined4 param_2)\n\n{\n  int iVar1;\n  \n  DAT_2000169c = 0;\n  iVar1 = _sbrk(param_2);\n  if ((iVar1 == -1) && (DAT_2000169c != 0)) {\n    *param_1 = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "FUNC_0800581c"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 arg1,int arg2)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(arg2 + -4) + -4;\n  if (*(int *)(arg2 + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(arg2 + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "currentIndex"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "calculate_asin_08005854",
            "code": "\nundefined8 calculateAsin_08005854(undefined4 inputValue1,undefined4 inputValue2)\n\n{\n  int comparisonResult;\n  undefined4 *errnoPtr;\n  int *errnoValuePtr;\n  undefined8 result;\n  undefined8 absoluteValue;\n  undefined4 flag;\n  undefined *dataPtr;\n  undefined4 input1;\n  undefined4 input2;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined8 returnValue;\n  int comparisonResult2;\n  \n  result = __ieee754_asin();\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  comparisonResult2 = __unorddf2(inputValue1,inputValue2,inputValue1,inputValue2);\n  if (comparisonResult2 != 0) {\n    return result;\n  }\n  absoluteValue = fabs(inputValue1,inputValue2);\n  comparisonResult = __aeabi_dcmpgt((int)absoluteValue,(int)((ulonglong)absoluteValue >> 0x20),0,0x3ff00000);\n  if (comparisonResult == 0) {\n    return result;\n  }\n  flag = 1;\n  dataPtr = &DAT_080073ac;\n  input1 = inputValue1;\n  input2 = inputValue2;\n  temp1 = inputValue1;\n  temp2 = inputValue2;\n  returnValue = nan(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    comparisonResult = matherr(&flag);\n    if (comparisonResult != 0) goto LAB_080058d0;\n  }\n  errnoPtr = (undefined4 *)__errno();\n  *errnoPtr = 0x21;\nLAB_080058d0:\n  if (comparisonResult2 != 0) {\n    errnoValuePtr = (int *)__errno();\n    *errnoValuePtr = comparisonResult2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005854": "calculate_asin_08005854",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "iVar1": "comparisonResult",
                "puVar2": "errnoPtr",
                "piVar3": "errnoValuePtr",
                "uVar4": "result",
                "uVar5": "absoluteValue",
                "local_48": "flag",
                "local_44": "dataPtr",
                "local_40": "input1",
                "uStack_3c": "input2",
                "local_38": "temp1",
                "uStack_34": "temp2",
                "local_30": "returnValue",
                "local_28": "comparisonResult2"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "fabs",
                "nan",
                "__unorddf2",
                "__errno",
                "__ieee754_asin",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058fc": {
            "entrypoint": "0x080058fc",
            "current_name": "FUN_080058fc",
            "code": "\nundefined8 __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  \n  uVar5 = param_4 & 0x7fffffff;\n  if ((0x7ff00000 < (uVar5 | (-param_3 | param_3) >> 0x1f)) ||\n     (uVar3 = param_2 & 0x7fffffff, 0x7ff00000 < (uVar3 | (-param_1 | param_1) >> 0x1f))) {\n    uVar6 = __aeabi_dadd(param_1,param_2,param_3,param_4,param_4);\n    return uVar6;\n  }\n  if ((param_4 + 0xc0100000 | param_3) == 0) {\n    uVar6 = atan();\n    return uVar6;\n  }\n  uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n  if ((param_1 | uVar3) == 0) {\n    if (uVar2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (uVar2 != 3) {\n      return CONCAT44(param_2,param_1);\n    }\nLAB_0800613e:\n    uVar6 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((param_3 | uVar5) != 0) {\n      if (uVar5 == 0x7ff00000) {\n        if (uVar3 == 0x7ff00000) {\n          if (uVar2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (uVar2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (uVar2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (uVar2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (uVar2 != 3) {\n          if (uVar2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (uVar3 != 0x7ff00000) {\n        iVar4 = (int)(uVar3 - uVar5) >> 0x14;\n        if (iVar4 < 0x3d) {\n          if (((int)param_4 < 0) && (iVar4 + 0x3c < 0 != SCARRY4(iVar4,0x3c))) {\n            uVar6 = 0;\n          }\n          else {\n            __divdf3(param_1,param_2);\n            fabs();\n            uVar6 = atan();\n          }\n        }\n        else {\n          uVar6 = 0x3ff921fb54442d18;\n        }\n        iVar4 = (int)((ulonglong)uVar6 >> 0x20);\n        uVar1 = (undefined4)uVar6;\n        if (uVar2 == 1) {\n          return CONCAT44(iVar4 + -0x80000000,uVar1);\n        }\n        if (uVar2 == 2) {\n          uVar7 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar6 = 0x400921fb54442d18;\n        }\n        else {\n          if (uVar2 == 0) {\n            return uVar6;\n          }\n          uVar6 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar7 = 0x400921fb54442d18;\n        }\n        uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                         (int)((ulonglong)uVar7 >> 0x20));\n        return uVar6;\n      }\n    }\n    if ((int)param_2 < 0) {\n      uVar6 = 0xbff921fb54442d18;\n    }\n    else {\n      uVar6 = 0x3ff921fb54442d18;\n    }\n  }\n  return uVar6;\n}\n\n",
            "renaming": {},
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_power_08005900",
            "code": "\nundefined8 calculatePower_08005900(undefined4 base1,undefined4 base2,undefined4 exponent1,undefined4 exponent2)\n\n{\n  char flag;\n  int result;\n  int *errorCode;\n  undefined4 *errnoPointer;\n  int finiteResult;\n  undefined4 powerHigh;\n  undefined4 powerLow;\n  undefined8 resultHigh;\n  undefined8 resultLow;\n  undefined4 powerFlag;\n  undefined *errorMessage;\n  undefined4 base1Copy;\n  undefined4 base2Copy;\n  undefined4 exponent1Copy;\n  undefined4 exponent2Copy;\n  undefined8 returnValue;\n  int errorFlag;\n  \n  resultHigh = __ieee754_pow();\n  flag = DAT_20000224;\n  powerHigh = (undefined4)((ulonglong)resultHigh >> 0x20);\n  powerLow = (undefined4)resultHigh;\n  if (DAT_20000224 == -1) {\n    return resultHigh;\n  }\n  result = __unorddf2(exponent1,exponent2,exponent1,exponent2);\n  if (result != 0) {\n    return resultHigh;\n  }\n  result = __unorddf2(base1,base2,base1,base2);\n  base1Copy = base1;\n  base2Copy = base2;\n  exponent1Copy = exponent1;\n  exponent2Copy = exponent2;\n  if (result == 0) {\n    result = __aeabi_dcmpeq(base1,base2,0,0);\n    if (result != 0) {\n      result = __aeabi_dcmpeq(exponent1,exponent2,0,0);\n      if (result != 0) {\n        powerFlag = 1;\n        errorMessage = &DAT_080073b1;\n        returnValue = 0;\n        errorFlag = 0;\n        if (flag != '\\0') {\n          returnValue = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = finite(exponent1,exponent2);\n      if (result == 0) {\n        return resultHigh;\n      }\n      result = __aeabi_dcmplt(exponent1,exponent2,0,0);\n      if (result == 0) {\n        return resultHigh;\n      }\n      powerFlag = 1;\n      errorMessage = &DAT_080073b1;\n      errorFlag = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      returnValue = 0xfff0000000000000;\n      errorFlag = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = finite(powerLow,powerHigh);\n    if (((result != 0) || (finiteResult = finite(base1,base2), finiteResult == 0)) ||\n       (finiteResult = finite(exponent1,exponent2), finiteResult == 0)) {\n      result = __aeabi_dcmpeq(powerLow,powerHigh,0,0);\n      if (result == 0) {\n        return resultHigh;\n      }\n      result = finite(base1,base2);\n      if (result == 0) {\n        return resultHigh;\n      }\n      result = finite(exponent1,exponent2);\n      if (result == 0) {\n        return resultHigh;\n      }\n      powerFlag = 4;\n      errorMessage = &DAT_080073b1;\n      errorFlag = 0;\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    errorFlag = __unorddf2(powerLow,powerHigh);\n    flag = DAT_20000224;\n    if (errorFlag != 0) {\n      errorMessage = &DAT_080073b1;\n      powerFlag = 1;\n      errorFlag = result;\n      if (DAT_20000224 != '\\0') {\n        returnValue = __divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      errorMessage = &DAT_080073b1;\n      powerFlag = 1;\n      returnValue = 0;\n      goto LAB_08005978;\n    }\n    errorMessage = &DAT_080073b1;\n    powerFlag = 3;\n    if (DAT_20000224 == '\\0') {\n      returnValue._0_4_ = 0xe0000000;\n      returnValue._4_4_ = 0x47efffff;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        resultHigh = __muldf3(exponent1,exponent2,0,0x3fe00000);\n        resultLow = rint();\n        result = __aeabi_dcmpeq((int)resultHigh,(int)((ulonglong)resultHigh >> 0x20),(int)resultLow,\n                               (int)((ulonglong)resultLow >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0xe0000000;\n          returnValue._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = matherr(&powerFlag);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0x7ff00000;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        resultHigh = __muldf3(exponent1,exponent2,0,0x3fe00000);\n        resultLow = rint();\n        result = __aeabi_dcmpeq((int)resultHigh,(int)((ulonglong)resultHigh >> 0x20),(int)resultLow,\n                               (int)((ulonglong)resultLow >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0;\n          returnValue._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    errnoPointer = (undefined4 *)__errno();\n    powerLow = 0x22;\n  }\n  else {\n    result = __aeabi_dcmpeq(exponent1,exponent2,0,0);\n    if (result == 0) {\n      return resultHigh;\n    }\n    powerFlag = 1;\n    errorMessage = &DAT_080073b1;\n    returnValue = 0x3ff0000000000000;\n    errorFlag = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = matherr(&powerFlag);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    errnoPointer = (undefined4 *)__errno();\n    powerLow = 0x21;\n  }\n  *errnoPointer = powerLow;\nLAB_080059d0:\n  if (errorFlag != 0) {\n    errorCode = (int *)__errno();\n    *errorCode = errorFlag;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_power_08005900",
                "param_1": "base1",
                "param_2": "base2",
                "param_3": "exponent1",
                "param_4": "exponent2",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "errorCode",
                "puVar4": "errnoPointer",
                "iVar5": "finiteResult",
                "uVar6": "powerHigh",
                "uVar7": "powerLow",
                "uVar8": "resultHigh",
                "uVar9": "resultLow",
                "local_50": "powerFlag",
                "local_4c": "errorMessage",
                "local_48": "base1Copy",
                "uStack_44": "base2Copy",
                "local_40": "exponent1Copy",
                "uStack_3c": "exponent2Copy",
                "local_38": "returnValue",
                "local_30": "errorFlag"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__ieee754_pow",
                "__unorddf2",
                "finite",
                "__muldf3",
                "__errno",
                "__aeabi_dcmpeq",
                "rint",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "calculate_square_root_08005bc8",
            "code": "\nundefined8 calculateSquareRoot_08005bc8(undefined4 input1,undefined4 input2)\n\n{\n  char flag;\n  int comparisonResult;\n  int *errnoPtr;\n  undefined4 *errnoLocPtr;\n  undefined8 result;\n  undefined4 errorFlag;\n  undefined *errorMessage;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined8 returnValue;\n  int comparisonError;\n  \n  result = __ieee754_sqrt();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  comparisonError = __unorddf2(input1,input2,input1,input2);\n  if (comparisonError != 0) {\n    return result;\n  }\n  comparisonResult = __aeabi_dcmplt(input1,input2,0,0);\n  if (comparisonResult == 0) {\n    return result;\n  }\n  errorFlag = 1;\n  errorMessage = &DAT_080073b5;\n  temp1 = input1;\n  temp2 = input2;\n  temp3 = input1;\n  temp4 = input2;\n  if (flag == '\\0') {\n    returnValue = 0;\nLAB_08005c26:\n    comparisonResult = matherr(&errorFlag);\n    if (comparisonResult != 0) goto LAB_08005c2e;\n  }\n  else {\n    returnValue = __divdf3(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  errnoLocPtr = (undefined4 *)__errno();\n  *errnoLocPtr = 0x21;\nLAB_08005c2e:\n  if (comparisonError != 0) {\n    errnoPtr = (int *)__errno();\n    *errnoPtr = comparisonError;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "calculate_square_root_08005bc8",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "flag",
                "iVar2": "comparisonResult",
                "piVar3": "errnoPtr",
                "puVar4": "errnoLocPtr",
                "uVar5": "result",
                "local_50": "errorFlag",
                "local_4c": "errorMessage",
                "local_48": "temp1",
                "uStack_44": "temp2",
                "local_40": "temp3",
                "uStack_3c": "temp4",
                "local_38": "returnValue",
                "local_30": "comparisonError"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__ieee754_sqrt",
                "__errno",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_square_root_08005c70",
            "code": "\nundefined8 calculateSquareRoot_08005c70(uint input1,uint input2)\n\n{\n  int comparisonResult;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint andResult;\n  undefined8 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = CONCAT44(input2,input1);\n  andResult = input2 & 0x7fffffff;\n  if (andResult < 0x3ff00000) {\n    if (andResult < 0x3fe00000) {\n      if (0x3e3fffff < andResult) {\n        result2 = __muldf3(input1,input2,input1,input2);\n        temp6 = (undefined4)((ulonglong)result2 >> 0x20);\n        temp5 = (undefined4)result2;\n        result2 = __muldf3(temp5,temp6,0xdfdf709,0x3f023de1);\n        result2 = __aeabi_dadd((int)result2,(int)((ulonglong)result2 >> 0x20),0x7501b288,0x3f49efe0);\n        result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        result2 = __subdf3((int)result2,(int)((ulonglong)result2 >> 0x20),0xb5688f3b,0x3fa48228);\n        result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        result2 = __aeabi_dadd((int)result2,(int)((ulonglong)result2 >> 0x20),0xe884455,0x3fc9c155);\n        result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        result2 = __subdf3((int)result2,(int)((ulonglong)result2 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        result2 = __aeabi_dadd((int)result2,(int)((ulonglong)result2 >> 0x20),0x55555555,0x3fc55555);\n        result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp6);\n        result3 = __muldf3(temp5,temp6,0xb12e9282,0x3fb3b8c5);\n        result3 = __subdf3((int)result3,(int)((ulonglong)result3 >> 0x20),0x1b8d0159,0x3fe6066c);\n        result3 = __muldf3((int)result3,(int)((ulonglong)result3 >> 0x20),temp5,temp6);\n        result3 = __aeabi_dadd((int)result3,(int)((ulonglong)result3 >> 0x20),0x9c598ac8,0x40002ae5);\n        result3 = __muldf3((int)result3,(int)((ulonglong)result3 >> 0x20),temp5,temp6);\n        result3 = __subdf3((int)result3,(int)((ulonglong)result3 >> 0x20),0x1c8a2d4b,0x40033a27);\n        result3 = __muldf3((int)result3,(int)((ulonglong)result3 >> 0x20),temp5,temp6);\n        result3 = __aeabi_dadd((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x3ff00000);\n        result2 = __divdf3((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                          (int)((ulonglong)result3 >> 0x20));\n        result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),input1,input2);\n        goto LAB_08005cba;\n      }\n      result2 = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c);\n      comparisonResult = __aeabi_dcmpgt((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3ff00000);\n      if (comparisonResult != 0) {\n        return result1;\n      }\n    }\n    result1 = fabs(input1,input2);\n    result1 = __subdf3(0,0x3ff00000,(int)result1,(int)((ulonglong)result1 >> 0x20));\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),0,0x3fe00000);\n    temp1 = (undefined4)((ulonglong)result1 >> 0x20);\n    temp5 = (undefined4)result1;\n    result1 = __muldf3(temp5,temp1,0xdfdf709,0x3f023de1);\n    result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0x7501b288,0x3f49efe0);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp1);\n    result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),0xb5688f3b,0x3fa48228);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp1);\n    result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0xe884455,0x3fc9c155);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp1);\n    result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp1);\n    result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0x55555555,0x3fc55555);\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp5,temp1);\n    temp2 = (undefined4)((ulonglong)result1 >> 0x20);\n    result2 = __muldf3(temp5,temp1,0xb12e9282,0x3fb3b8c5);\n    result2 = __subdf3((int)result2,(int)((ulonglong)result2 >> 0x20),0x1b8d0159,0x3fe6066c);\n    result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp1);\n    result2 = __aeabi_dadd((int)result2,(int)((ulonglong)result2 >> 0x20),0x9c598ac8,0x40002ae5);\n    result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp1);\n    result2 = __subdf3((int)result2,(int)((ulonglong)result2 >> 0x20),0x1c8a2d4b,0x40033a27);\n    result2 = __muldf3((int)result2,(int)((ulonglong)result2 >> 0x20),temp5,temp1);\n    result2 = __aeabi_dadd((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3ff00000);\n    temp3 = (undefined4)((ulonglong)result2 >> 0x20);\n    result3 = __ieee754_sqrt(temp5,temp1);\n    temp4 = (undefined4)((ulonglong)result3 >> 0x20);\n    temp6 = (undefined4)result3;\n    if (andResult < 0x3fef3333) {\n      result1 = __divdf3((int)result1,temp2,(int)result2,temp3);\n      result2 = __aeabi_dadd(temp6,temp4,temp6,temp4);\n      result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                       (int)((ulonglong)result2 >> 0x20));\n      result2 = __muldf3(0,temp4,0,temp4);\n      result2 = __subdf3(temp5,temp1,(int)result2,(int)((ulonglong)result2 >> 0x20));\n      result3 = __aeabi_dadd(temp6,temp4,0,temp4);\n      result2 = __divdf3((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                        (int)((ulonglong)result3 >> 0x20));\n      temp5 = (undefined4)((ulonglong)result2 >> 0x20);\n      result2 = __aeabi_dadd((int)result2,temp5,(int)result2,temp5);\n      result2 = __subdf3(0x33145c07,0x3c91a626,(int)result2,(int)((ulonglong)result2 >> 0x20));\n      result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                       (int)((ulonglong)result2 >> 0x20));\n      result2 = __aeabi_dadd(0,temp4,0,temp4);\n      result2 = __subdf3(0x54442d18,0x3fe921fb,(int)result2,(int)((ulonglong)result2 >> 0x20));\n      result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                       (int)((ulonglong)result2 >> 0x20));\n      temp5 = 0x3fe921fb;\n    }\n    else {\n      result1 = __divdf3((int)result1,temp2,(int)result2,temp3);\n      result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),temp6,temp4);\n      result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),temp6,temp4);\n      temp5 = (undefined4)((ulonglong)result1 >> 0x20);\n      result1 = __aeabi_dadd((int)result1,temp5,(int)result1,temp5);\n      result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),0x33145c07,0x3c91a626);\n      temp5 = 0x3ff921fb;\n    }\n    result1 = __subdf3(0x54442d18,temp5,(int)result1,(int)((ulonglong)result1 >> 0x20));\n    if ((int)input2 < 1) {\n      result1 = CONCAT44((int)((ulonglong)result1 >> 0x20) + -0x80000000,(int)result1);\n    }\n  }\n  else {\n    if ((andResult + 0xc0100000 | input1) != 0) {\n      result1 = __subdf3(input1,input2,input1,input2);\n      temp5 = (undefined4)((ulonglong)result1 >> 0x20);\n      result1 = __divdf3((int)result1,temp5,(int)result1,temp5);\n      return result1;\n    }\n    result1 = __muldf3(input1,input2,0x54442d18,0x3ff921fb);\n    result2 = __muldf3(input1,input2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                         (int)((ulonglong)result2 >> 0x20));\n  }\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_square_root_08005c70",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "comparisonResult",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "andResult",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3"
            },
            "calling": [
                "asin"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "compute_result_08006070",
            "code": "\nundefined8 computeResult_08006070(uint inputParam1,uint inputParam2,uint inputParam3,uint inputParam4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint result5;\n  undefined8 finalResult;\n  undefined8 tempResult;\n  \n  result5 = inputParam4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-inputParam3 | inputParam3) >> 0x1f)) ||\n     (result3 = inputParam2 & 0x7fffffff, 0x7ff00000 < (result3 | (-inputParam1 | inputParam1) >> 0x1f))) {\n    finalResult = __aeabi_dadd(inputParam1,inputParam2,inputParam3,inputParam4,inputParam4);\n    return finalResult;\n  }\n  if ((inputParam4 + 0xc0100000 | inputParam3) == 0) {\n    finalResult = atan();\n    return finalResult;\n  }\n  result2 = (int)inputParam4 >> 0x1e & 2U | inputParam2 >> 0x1f;\n  if ((inputParam1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(inputParam2,inputParam1);\n    }\nLAB_0800613e:\n    finalResult = 0xc00921fb54442d18;\n  }\n  else {\n    if ((inputParam3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - result5) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)inputParam4 < 0) && (result4 + 0x3c < 0 != SCARRY4(result4,0x3c))) {\n            finalResult = 0;\n          }\n          else {\n            __divdf3(inputParam1,inputParam2);\n            fabs();\n            finalResult = atan();\n          }\n        }\n        else {\n          finalResult = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)finalResult >> 0x20);\n        result1 = (undefined4)finalResult;\n        if (result2 == 1) {\n          return CONCAT44(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          tempResult = __subdf3(result1,result4,0x33145c07,0x3ca1a626);\n          finalResult = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return finalResult;\n          }\n          finalResult = __subdf3(result1,result4,0x33145c07,0x3ca1a626);\n          tempResult = 0x400921fb54442d18;\n        }\n        finalResult = __subdf3((int)finalResult,(int)((ulonglong)finalResult >> 0x20),(int)tempResult,\n                         (int)((ulonglong)tempResult >> 0x20));\n        return finalResult;\n      }\n    }\n    if ((int)inputParam2 < 0) {\n      finalResult = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult = 0x3ff921fb54442d18;\n    }\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08006070": "compute_result_08006070",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "iVar4": "result4",
                "uVar5": "result5",
                "uVar6": "finalResult",
                "uVar7": "tempResult"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "atan",
                "__aeabi_dadd",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_result_08006228",
            "code": "\nuint calculate_result_08006228(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint result8;\n  undefined4 result9;\n  int temp1;\n  int temp2;\n  undefined4 temp3;\n  uint temp4;\n  undefined4 temp5;\n  int temp6;\n  uint temp7;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined8 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  longlong temp14;\n  ulonglong temp15;\n  undefined8 temp16;\n  uint flag1;\n  undefined4 flag2;\n  undefined4 flag3;\n  int flag4;\n  \n  temp11 = CONCAT44(input2,input1);\n  temp7 = input4 & 0x7fffffff;\n  if ((temp7 | input3) == 0) {\n    return 0;\n  }\n  temp4 = input2 & 0x7fffffff;\n  if (temp4 < 0x7ff00001) {\n    if (temp4 == 0x7ff00000) {\n      if (input1 == 0) {\n        if (0x7ff00000 < temp7) goto LAB_08006278;\nLAB_08006262:\n        if ((temp7 != 0x7ff00000) || (input3 == 0)) {\n          if (-1 < (int)input2) goto LAB_0800632a;\n          if (temp7 < 0x43400000) {\n            if (temp7 < 0x3ff00000) {\nLAB_0800632a:\n              flag1 = 0;\n              goto LAB_080062ba;\n            }\n            temp1 = ((int)temp7 >> 0x14) + -0x3ff;\n            if (0x14 < temp1) {\n              result2 = input3 >> (0x34U - temp1 & 0xff);\n              if (input3 == result2 << (0x34U - temp1 & 0xff)) {\n                flag1 = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input3 == 0) {\n              result2 = (int)temp7 >> (0x14U - temp1 & 0xff);\n              if (temp7 == result2 << (0x14U - temp1 & 0xff)) {\n                flag1 = 2 - (result2 & 1);\n              }\n              else {\n                flag1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            flag1 = 0;\n          }\n          else {\n            flag1 = 2;\nLAB_080062ba:\n            if (input3 == 0) {\n              if (temp7 == 0x7ff00000) {\n                if ((temp4 + 0xc0100000 | input1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp4) {\n                  if ((int)input4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (temp7 == 0x3ff00000) {\n                if (-1 < (int)input4) {\n                  return input1;\n                }\n                temp10 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input4 == 0x40000000) goto LAB_0800634a;\n              if ((input4 == 0x3fe00000) && (-1 < (int)input2)) {\n                temp7 = __ieee754_sqrt(input1,input2);\n                return temp7;\n              }\n            }\n          }\n          temp10 = fabs(input1,input2);\n          temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n          result1 = (undefined4)temp10;\n          temp15 = CONCAT44(input2,result1) & 0x7fffffffffffffff;\n          if ((input1 == 0) && ((temp4 == 0 || ((input2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input4 < 0) {\n              temp10 = __divdf3(0,0x3ff00000,result1,temp8);\n            }\n            if (-1 < (int)input2) {\n              return (uint)temp10;\n            }\n            if ((flag1 | temp4 + 0xc0100000) != 0) {\n              return (uint)temp10;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)input2 >> 0x1f);\n            temp10 = temp11;\n            if ((flag1 | result2) != 0) {\n              if (temp7 < 0x41e00001) {\n                flag4 = 0;\n                if (temp4 < 0x100000) {\n                  temp15 = __muldf3();\n                  flag4 = -0x35;\n                }\n                temp7 = (uint)(temp15 >> 0x20);\n                result1 = (undefined4)temp15;\n                flag4 = ((int)temp7 >> 0x14) + -0x3ff + flag4;\n                temp7 = temp7 & 0xfffff;\n                temp4 = temp7 | 0x3ff00000;\n                if (temp7 < 0x3988f) {\nLAB_08006628:\n                  temp1 = 0;\n                }\n                else {\n                  if (0xbb679 < temp7) {\n                    temp4 = temp4 - 0x100000;\n                    flag4 = flag4 + 1;\n                    goto LAB_08006628;\n                  }\n                  temp1 = 1;\n                }\n                temp2 = temp1 * 8;\n                temp3 = (&DAT_080073c0)[temp1 * 2];\n                temp5 = (&DAT_080073c4)[temp1 * 2];\n                temp11 = __subdf3(result1,temp4,temp3,temp5);\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = __aeabi_dadd(result1,temp4,temp3,temp5);\n                temp10 = __divdf3(0,0x3ff00000,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                result4 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = __muldf3((int)temp11,temp9,(int)temp10,result4);\n                result5 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = (undefined4)temp12;\n                temp12 = __muldf3(0,result5);\n                temp11 = __subdf3((int)temp11,temp9,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp12 = __subdf3(0,((int)temp4 >> 1 | 0x20000000U) + 0x80000 + temp1 * 0x40000,\n                                  temp3,temp5);\n                temp12 = __subdf3(result1,temp4,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),0,result5);\n                temp11 = __subdf3((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp12,\n                                  (int)((ulonglong)temp12 >> 0x20));\n                temp11 = __muldf3((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,result4);\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = __muldf3(temp8,result5);\n                result4 = (undefined4)((ulonglong)temp10 >> 0x20);\n                result1 = (undefined4)temp10;\n                temp10 = __muldf3(result1,result4,0x4a454eef,0x3fca7e28);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result4);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp12 = __muldf3(result1,result4,result1,result4);\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                  (int)((ulonglong)temp12 >> 0x20));\n                temp12 = __aeabi_dadd(temp8,result5,0,result5);\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,temp9);\n                temp10 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = __muldf3(0,result5,0,result5);\n                result4 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp13 = __aeabi_dadd((int)temp12,result4,0,0x40080000);\n                __aeabi_dadd((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp10,result1);\n                temp13 = __muldf3(0,result5,0,result6);\n                temp3 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp16 = __subdf3(0,result6,0,0x40080000);\n                temp12 = __subdf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),(int)temp12,result4);\n                temp10 = __subdf3((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp11 = __muldf3((int)temp11,temp9,0,result6);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                __aeabi_dadd((int)temp13,temp3,(int)temp10,result1);\n                temp11 = __muldf3(0,result7,0xe0000000,0x3feec709);\n                temp12 = __subdf3(0,result7,(int)temp13,temp3);\n                temp10 = __subdf3((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdc3a03fd,0x3feec709\n                                 );\n                temp12 = __muldf3(0,result7,0x145b01f5,0xbe3e2fe0);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + temp2),\n                                      *(undefined4 *)(&DAT_080073e4 + temp2));\n                temp12 = __aeabi_i2d(flag4);\n                result1 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = *(undefined4 *)(&DAT_080073d0 + temp2);\n                temp9 = *(undefined4 *)(&DAT_080073d4 + temp2);\n                temp13 = __aeabi_dadd((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp13 = __aeabi_dadd((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp8,temp9);\n                __aeabi_dadd((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp12,result1);\n                temp12 = __subdf3(0,result8,(int)temp12,result1);\n                temp14 = __subdf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp8,temp9);\n                temp7 = result8;\n              }\n              else {\n                if (0x43f00000 < temp7) {\n                  if (temp4 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input1 = 0x8800759c;\n                  input2 = 0x7e37e43c;\n                  temp11 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp4 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp4) goto LAB_08006418;\n                temp11 = __subdf3(result1,temp8,0,0x3ff00000);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                result1 = (undefined4)temp11;\n                temp11 = __muldf3(result1,temp8,0x60000000,0x3ff71547);\n                temp10 = __muldf3(result1,temp8,0xf85ddf44,0x3e54ae0b);\n                temp12 = __muldf3(result1,temp8,0,0x3fd00000);\n                temp12 = __subdf3(0x55555555,0x3fd55555,(int)temp12,(int)((ulonglong)temp12 >> 0x20)\n                                 );\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),result1,temp8);\n                temp12 = __subdf3(0,0x3fe00000,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp13 = __muldf3(result1,temp8,result1,temp8);\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                                  (int)((ulonglong)temp13 >> 0x20));\n                temp12 = __muldf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x652b82fe,0x3ff71547\n                                 );\n                temp10 = __subdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                  (int)((ulonglong)temp12 >> 0x20));\n                __aeabi_dadd((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                             (int)((ulonglong)temp10 >> 0x20));\n                temp14 = (ulonglong)result3 << 0x20;\n                temp7 = result3;\n              }\n              temp11 = __subdf3((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp11,\n                                (int)((ulonglong)temp11 >> 0x20));\n              temp11 = __subdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                (int)((ulonglong)temp11 >> 0x20));\n              if ((flag1 - 1 | result2) == 0) {\n                input2 = 0xbff00000;\n              }\n              else {\n                input2 = 0x3ff00000;\n              }\n              flag1 = 0;\n              temp10 = __subdf3(input3,input4,0,input4);\n              temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,temp7);\n              temp11 = __muldf3((int)temp11,(int)((ulonglong)temp11 >> 0x20),input3,input4);\n              temp11 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n              result1 = (undefined4)temp11;\n              temp11 = __muldf3(0,temp7,0,input4);\n              result4 = (undefined4)((ulonglong)temp11 >> 0x20);\n              temp8 = (undefined4)temp11;\n              temp14 = __aeabi_dadd(result1,temp9,temp8,result4);\n              temp4 = (uint)((ulonglong)temp14 >> 0x20);\n              temp7 = (uint)temp14;\n              if (0x408fffffffffffff < temp14) {\n                if ((temp4 + 0xbf700000 | temp7) == 0) {\n                  temp10 = __aeabi_dadd(result1,temp9,0x652b82fe,0x3c971547);\n                  temp12 = __subdf3(temp7,temp4,temp8,result4);\n                  temp1 = __aeabi_dcmpgt((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                         (int)((ulonglong)temp12 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                temp11 = __muldf3(0,input2,0x8800759c,0x7e37e43c);\n                input1 = 0x8800759c;\n                input2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp4 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp4 & 0x7fffffff) < 0x3fe00001) {\n                  temp1 = 0;\n                }\n                else {\n                  temp4 = (0x100000 >> (((int)(temp4 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp4;\n                  temp7 = (temp4 * 2 >> 0x15) - 0x3ff;\n                  temp1 = (int)(temp4 & 0xfffff | 0x100000) >> (0x14 - temp7 & 0xff);\n                  if (temp14 < 0) {\n                    temp1 = -temp1;\n                  }\n                  temp11 = __subdf3(temp8,result4,0,temp4 & ~(0xfffff >> (temp7 & 0xff)));\n                }\n                flag3 = (undefined4)((ulonglong)temp11 >> 0x20);\n                flag2 = (undefined4)temp11;\n                __aeabi_dadd(flag2,flag3,result1,temp9);\n                temp11 = __muldf3(0,result9,0,0x3fe62e43);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = __subdf3(0,result9,flag2,flag3);\n                temp10 = __subdf3(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xfefa39ef,0x3fe62e42\n                                 );\n                temp12 = __muldf3(0,result9,0xca86c39,0xbe205c61);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = __aeabi_dadd((int)temp11,temp8,(int)temp10,temp9);\n                result4 = (undefined4)((ulonglong)temp12 >> 0x20);\n                result1 = (undefined4)temp12;\n                temp11 = __subdf3(result1,result4,(int)temp11,temp8);\n                temp11 = __subdf3((int)temp10,temp9,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = __muldf3(result1,result4,result1,result4);\n                result5 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp8 = (undefined4)temp10;\n                temp10 = __muldf3(temp8,result5,0x72bea4d0,0x3e663769);\n                temp10 = __subdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xc5d26bf1,0x3ebbbd41\n                                 );\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = __subdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x16bebd93,0x3f66c16c\n                                 );\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = __aeabi_dadd((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp10 = __muldf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result5);\n                temp10 = __subdf3(result1,result4,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = __muldf3(result1,result4,(int)temp10,temp8);\n                temp10 = __subdf3((int)temp10,temp8,0,0x40000000);\n                temp10 = __divdf3((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                  (int)((ulonglong)temp10 >> 0x20));\n                temp12 = __muldf3(result1,result4,(int)temp11,temp9);\n                temp11 = __aeabi_dadd((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,\n                                      temp9);\n                temp11 = __subdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                  (int)((ulonglong)temp11 >> 0x20));\n                temp11 = __subdf3((int)temp11,(int)((ulonglong)temp11 >> 0x20),result1,result4);\n                temp10 = __subdf3(0,0x3ff00000,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n                temp2 = (int)((ulonglong)temp10 >> 0x20);\n                temp6 = temp2 + temp1 * 0x100000;\n                temp11 = CONCAT44(temp6,(int)temp10);\n                input1 = flag1;\n                if (temp6 < 0x100000) {\n                  temp11 = scalbn((int)temp10,temp2,temp1);\n                }\n              }\n              else {\n                if ((temp4 + 0x3f6f3400 | temp7) == 0) {\n                  temp10 = __subdf3(temp7,temp4,temp8,result4);\n                  temp1 = __aeabi_dcmple(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                temp11 = __muldf3(0,input2,0xc2f8f359,0x1a56e1f);\n                input1 = 0xc2f8f359;\n                input2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              temp7 = __muldf3((int)temp11,(int)((ulonglong)temp11 >> 0x20),input1,input2);\n              return temp7;\n            }\n          }\n          result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n          temp10 = __subdf3((int)temp10,result1,(int)temp10,result1);\n          temp11 = temp10;\nLAB_08006320:\n          temp7 = __divdf3((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                            (int)((ulonglong)temp11 >> 0x20));\n          return temp7;\n        }\n      }\n    }\n    else if (temp7 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp4 + 0xc0100000 | input1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  temp7 = nan(&DAT_0800737e);\n  return temp7;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_result_08006228",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "extraout_r1": "result3",
                "uVar3": "result4",
                "uVar4": "result5",
                "extraout_r1_00": "result6",
                "extraout_r1_01": "result7",
                "extraout_r1_02": "result8",
                "extraout_r1_03": "result9",
                "iVar5": "temp1",
                "iVar6": "temp2",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5",
                "iVar10": "temp6",
                "uVar11": "temp7",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "temp11",
                "uVar16": "temp12",
                "uVar17": "temp13",
                "lVar18": "temp14",
                "uVar19": "temp15",
                "uVar20": "temp16",
                "local_70": "flag1",
                "local_68": "flag2",
                "local_64": "flag3",
                "local_54": "flag4"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "nan",
                "scalbn",
                "__aeabi_dadd",
                "__muldf3",
                "__aeabi_dcmple",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_product_and_sum_08006c0c",
            "code": "\nundefined8 calculate_product_and_sum_08006c0c(uint input_1,uint input_2)\n\n{\n  undefined4 temp_1;\n  uint temp_2;\n  int power_shift;\n  int iteration_shift;\n  uint shift_bit;\n  uint shifted_product;\n  int sum;\n  uint temp_sum;\n  uint bit_check;\n  int bit_count;\n  uint bit_difference;\n  undefined8 result;\n  \n  if ((~input_2 & 0x7ff00000) == 0) {\n    result = __muldf3(input_1,input_2,input_1,input_2);\n    result = __aeabi_dadd(input_1,input_2,(int)result,(int)((ulonglong)result >> 0x20));\n    return result;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    if (input_2 != 0) {\n      result = __subdf3(input_1,input_2,input_1,input_2);\n      temp_1 = (undefined4)((ulonglong)result >> 0x20);\n      result = __divdf3((int)result,temp_1,(int)result,temp_1);\n      return result;\n    }\n  }\n  power_shift = (int)input_2 >> 0x14;\n  if (power_shift == 0) {\n    while (input_2 == 0) {\n      power_shift = power_shift + -0x15;\n      input_2 = input_1 >> 0xb;\n      input_1 = input_1 << 0x15;\n    }\n    temp_2 = 0;\n    for (; -1 < (int)(input_2 << 0xb); input_2 = input_2 << 1) {\n      temp_2 = temp_2 + 1;\n    }\n    power_shift = power_shift - (temp_2 - 1);\n    input_2 = input_2 | input_1 >> (0x20 - temp_2 & 0xff);\n    input_1 = input_1 << (temp_2 & 0xff);\n  }\n  sum = 0;\n  temp_2 = input_2 & 0xfffff | 0x100000;\n  if ((power_shift + -0x3ff) * -0x80000000 < 0) {\n    temp_2 = temp_2 * 2 - ((int)input_1 >> 0x1f);\n    input_1 = input_1 << 1;\n  }\n  temp_2 = temp_2 * 2 - ((int)input_1 >> 0x1f);\n  iteration_shift = 0x16;\n  shift_bit = 0;\n  temp_sum = 0x200000;\n  input_1 = input_1 << 1;\n  do {\n    bit_count = shift_bit + temp_sum;\n    if (bit_count <= (int)temp_2) {\n      temp_2 = temp_2 - bit_count;\n      shift_bit = bit_count + temp_sum;\n      sum = sum + temp_sum;\n    }\n    iteration_shift = iteration_shift + -1;\n    temp_2 = temp_2 * 2 - ((int)input_1 >> 0x1f);\n    temp_sum = temp_sum >> 1;\n    input_1 = input_1 << 1;\n  } while (iteration_shift != 0);\n  bit_count = 0x20;\n  bit_check = 0x80000000;\n  temp_sum = 0;\n  iteration_shift = 0;\n  do {\n    bit_difference = bit_check + iteration_shift;\n    shifted_product = shift_bit;\n    if (((int)shift_bit < (int)temp_2) || ((temp_2 == shift_bit && (bit_difference <= input_1)))) {\n      iteration_shift = bit_difference + bit_check;\n      if (((int)bit_difference < 0) && (-1 < iteration_shift)) {\n        shifted_product = shift_bit + 1;\n      }\n      temp_2 = temp_2 - shift_bit;\n      if (input_1 < bit_difference) {\n        temp_2 = temp_2 - 1;\n      }\n      input_1 = input_1 - bit_difference;\n      temp_sum = temp_sum + bit_check;\n    }\n    temp_2 = temp_2 * 2 - ((int)input_1 >> 0x1f);\n    bit_count = bit_count + -1;\n    input_1 = input_1 << 1;\n    bit_check = bit_check >> 1;\n    shift_bit = shifted_product;\n  } while (bit_count != 0);\n  if ((input_1 | temp_2) != 0) {\n    if (temp_sum == 0xffffffff) {\n      sum = sum + 1;\n      temp_sum = 0;\n    }\n    else {\n      temp_sum = temp_sum + 1 & 0xfffffffe;\n    }\n  }\n  temp_sum = temp_sum >> 1;\n  if (sum << 0x1f < 0) {\n    temp_sum = temp_sum | 0x80000000;\n  }\n  return CONCAT44((sum >> 1) + 0x3fe00000 + (power_shift + -0x3ff >> 1) * 0x100000,temp_sum);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_product_and_sum_08006c0c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "iVar3": "power_shift",
                "iVar4": "iteration_shift",
                "uVar5": "shift_bit",
                "uVar6": "shifted_product",
                "iVar7": "sum",
                "uVar8": "temp_sum",
                "uVar9": "bit_check",
                "iVar10": "bit_count",
                "uVar11": "bit_difference",
                "uVar12": "result"
            },
            "calling": [
                "sqrt",
                "__ieee754_pow",
                "__ieee754_asin"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd",
                "__muldf3",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_square_root_08006d68",
            "code": "\nundefined8 calculateSquareRoot_08006d68(int input1,uint input2,undefined4 constant1,undefined4 constant2)\n\n{\n  int comparisonResult;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  uint positiveInput2;\n  undefined8 result;\n  undefined8 tempResult;\n  \n  result = CONCAT44(input2,input1);\n  positiveInput2 = input2 & 0x7fffffff;\n  if (positiveInput2 < 0x44100000) {\n    if (positiveInput2 < 0x3fdc0000) {\n      if (positiveInput2 < 0x3e200000) {\n        tempResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,constant2);\n        comparisonResult = __aeabi_dcmpgt((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        if (comparisonResult != 0) {\n          return result;\n        }\n      }\n      comparisonResult = -1;\n    }\n    else {\n      result = fabs();\n      value2 = (undefined4)((ulonglong)result >> 0x20);\n      value1 = (undefined4)result;\n      if (positiveInput2 < 0x3ff30000) {\n        if (positiveInput2 < 0x3fe60000) {\n          result = __aeabi_dadd(value1,value2,value1,value2);\n          result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000);\n          tempResult = __aeabi_dadd(value1,value2,0,0x40000000);\n          result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),(int)tempResult,\n                           (int)((ulonglong)tempResult >> 0x20));\n          comparisonResult = 0;\n        }\n        else {\n          result = __subdf3(value1,value2,0,0x3ff00000);\n          tempResult = __aeabi_dadd(value1,value2,0,0x3ff00000);\n          result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),(int)tempResult,\n                           (int)((ulonglong)tempResult >> 0x20));\n          comparisonResult = 1;\n        }\n      }\n      else if (positiveInput2 < 0x40038000) {\n        result = __subdf3(value1,value2,0,0x3ff80000);\n        tempResult = __muldf3(value1,value2,0,0x3ff80000);\n        tempResult = __aeabi_dadd((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0,0x3ff00000);\n        result = __divdf3((int)result,(int)((ulonglong)result >> 0x20),(int)tempResult,\n                         (int)((ulonglong)tempResult >> 0x20));\n        comparisonResult = 2;\n      }\n      else {\n        result = __divdf3(0,0xbff00000,value1,value2);\n        comparisonResult = 3;\n      }\n    }\n    value6 = (undefined4)((ulonglong)result >> 0x20);\n    value5 = (undefined4)result;\n    result = __muldf3(value5,value6,value5,value6);\n    value3 = (undefined4)((ulonglong)result >> 0x20);\n    value1 = (undefined4)result;\n    result = __muldf3(value1,value3,value1,value3);\n    value4 = (undefined4)((ulonglong)result >> 0x20);\n    value2 = (undefined4)result;\n    result = __muldf3(value2,value4,0xe322da11,0x3f90ad3a);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x24760deb,0x3fa97b4b);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),value2,value4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0xa0d03d51,0x3fb10d66);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),value2,value4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0xc54c206e,0x3fb745cd);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),value2,value4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x920083ff,0x3fc24924);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),value2,value4);\n    result = __aeabi_dadd((int)result,(int)((ulonglong)result >> 0x20),0x5555550d,0x3fd55555);\n    result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),value1,value3);\n    value1 = (undefined4)((ulonglong)result >> 0x20);\n    tempResult = __muldf3(value2,value4,0x2c6a6c2f,0xbfa2b444);\n    tempResult = __subdf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x52defd9a,0x3fadde2d);\n    tempResult = __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),value2,value4);\n    tempResult = __subdf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    tempResult = __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),value2,value4);\n    tempResult = __subdf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0xfe231671,0x3fbc71c6);\n    tempResult = __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),value2,value4);\n    tempResult = __subdf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x9998ebc4,0x3fc99999);\n    tempResult = __muldf3((int)tempResult,(int)((ulonglong)tempResult >> 0x20),value2,value4);\n    value2 = (undefined4)((ulonglong)tempResult >> 0x20);\n    if (comparisonResult == -1) {\n      result = __aeabi_dadd((int)result,value1,(int)tempResult,value2);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),value5,value6);\n      result = __subdf3(value5,value6,(int)result,(int)((ulonglong)result >> 0x20));\n    }\n    else {\n      result = __aeabi_dadd((int)result,value1,(int)tempResult,value2);\n      result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),value5,value6);\n      comparisonResult = comparisonResult * 8;\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),\n                       *(undefined4 *)(&UNK_08007410 + comparisonResult),*(undefined4 *)(&UNK_08007414 + comparisonResult)\n                      );\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),value5,value6);\n      result = __subdf3(*(undefined4 *)(&UNK_080073f0 + comparisonResult),*(undefined4 *)(&UNK_080073f4 + comparisonResult)\n                       ,(int)result,(int)((ulonglong)result >> 0x20));\n      if ((int)input2 < 0) {\n        result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n      }\n    }\n  }\n  else if ((positiveInput2 < 0x7ff00001) && ((positiveInput2 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    result = __aeabi_dadd(input1,input2,input1,input2,constant2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_square_root_08006d68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant1",
                "param_4": "constant2",
                "iVar1": "comparisonResult",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3",
                "uVar5": "value4",
                "uVar6": "value5",
                "uVar7": "value6",
                "uVar8": "positiveInput2",
                "uVar9": "result",
                "uVar10": "tempResult"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "set_most_significant_bit_08007092",
            "code": "\nuint setMostSignificantBit_08007092(undefined4 inputFlag,uint inputValue)\n\n{\n  return (inputValue | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "set_most_significant_bit_08007092",
                "param_1": "inputFlag",
                "param_2": "inputValue"
            },
            "calling": [
                "pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "FUNC_0800709e",
            "code": "\nundefined4 FUNC_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "FUNC_0800709e"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_positive_infinity_080070a4",
            "code": "\nundefined8 getPositiveInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_positive_infinity_080070a4"
            },
            "calling": [
                "__ieee754_pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_subtraction_080070b0",
            "code": "\nundefined8 calculate_subtraction_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int shift_count;\n  undefined4 var1;\n  uint masked_input2;\n  undefined4 var2;\n  uint masked_value;\n  uint shift_result;\n  uint sign_bit;\n  undefined8 result;\n  \n  sign_bit = (input2 << 1) >> 0x15;\n  shift_result = sign_bit - 0x3ff;\n  masked_input2 = input2;\n  if ((int)shift_result < 0x14) {\n    if ((int)shift_result < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      masked_input2 = input2 & 0xfffff | input1;\n      shift_count = ((int)input2 >> 0x1f) * -8;\n      var1 = *(undefined4 *)(&DAT_08007430 + shift_count);\n      var2 = *(undefined4 *)(&DAT_08007434 + shift_count);\n      result = __aeabi_dadd(input1,(-masked_input2 | masked_input2) >> 0xc & 0x80000 | input2 & 0xfffe0000,var1,\n                           var2,input1,input2,input3);\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),var1,var2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    sign_bit = 0xfffff >> (shift_result & 0xff);\n    if ((input2 & sign_bit | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    sign_bit = sign_bit >> 1;\n    masked_value = input2 & sign_bit | input1;\n    if (masked_value != 0) {\n      if (shift_result == 0x13) {\n        masked_value = 0x80000000;\n      }\n      else {\n        masked_value = 0;\n      }\n      masked_input2 = 0x40000 >> (shift_result & 0xff) | input2 & ~sign_bit;\n    }\n  }\n  else {\n    if (0x33 < (int)shift_result) {\n      if (shift_result != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = __aeabi_dadd();\n      return result;\n    }\n    sign_bit = sign_bit - 0x413;\n    shift_result = 0xffffffff >> (sign_bit & 0xff);\n    if ((input1 & shift_result) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    shift_result = shift_result >> 1;\n    masked_value = input1;\n    if ((input1 & shift_result) != 0) {\n      masked_value = 0x40000000 >> (sign_bit & 0xff) | input1 & ~shift_result;\n    }\n  }\n  shift_count = ((int)input2 >> 0x1f) * -8;\n  var1 = *(undefined4 *)(&DAT_08007430 + shift_count);\n  var2 = *(undefined4 *)(&DAT_08007434 + shift_count);\n  result = __aeabi_dadd(masked_value,masked_input2,var1,var2,input1,input2,input3);\n  result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),var1,var2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_subtraction_080070b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "iVar1": "shift_count",
                "uVar2": "var1",
                "uVar3": "masked_input2",
                "uVar4": "var2",
                "uVar5": "masked_value",
                "uVar6": "shift_result",
                "uVar7": "sign_bit",
                "uVar8": "result"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_floating_point_080071c0",
            "code": "\nundefined8 calculateFloatingPoint_080071c0(uint input1,uint input2,int exponent,undefined4 parameter)\n\n{\n  uint shiftedInput2;\n  undefined4 firstValue;\n  int result;\n  undefined4 secondValue;\n  uint highPart;\n  undefined8 combinedInput;\n  \n  combinedInput = CONCAT44(input2,input1);\n  shiftedInput2 = (input2 << 1) >> 0x15;\n  if (shiftedInput2 == 0) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return combinedInput;\n    }\n    combinedInput = __muldf3(input1,input2,0,0x43500000);\n    if (-0xc351 < exponent) {\n      shiftedInput2 = ((uint)((int)((ulonglong)combinedInput >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    firstValue = 0xc2f8f359;\n    secondValue = 0x1a56e1f;\n  }\n  else {\n    if (shiftedInput2 == 0x7ff) {\n      combinedInput = __aeabi_dadd(input1,input2,input1,input2,parameter);\n      return combinedInput;\n    }\nLAB_08007210:\n    highPart = (uint)((ulonglong)combinedInput >> 0x20);\n    firstValue = (undefined4)combinedInput;\n    result = shiftedInput2 + exponent;\n    if (result < 0x7ff) {\n      if (0 < result) {\n        return CONCAT44(highPart & 0x800fffff | result * 0x100000,firstValue);\n      }\n      if (result + 0x35 < 0 == SCARRY4(result,0x35)) {\n        combinedInput = CONCAT44(highPart & 0x800fffff | (result + 0x36) * 0x100000,firstValue);\n        firstValue = 0;\n        secondValue = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (exponent < 0xc351) {\n        combinedInput = copysign(0xc2f8f359,0x1a56e1f,firstValue,highPart);\n        goto LAB_080071ec;\n      }\n    }\n    combinedInput = copysign(0x8800759c,0x7e37e43c,firstValue,highPart);\n    firstValue = 0x8800759c;\n    secondValue = 0x7e37e43c;\n  }\nLAB_0800722e:\n  combinedInput = __muldf3((int)combinedInput,(int)((ulonglong)combinedInput >> 0x20),firstValue,secondValue);\n  return combinedInput;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_floating_point_080071c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "exponent",
                "param_4": "parameter",
                "uVar1": "shiftedInput2",
                "uVar2": "firstValue",
                "iVar3": "result",
                "uVar4": "secondValue",
                "uVar5": "highPart",
                "uVar6": "combinedInput"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "copysign",
                "__muldf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "scalbn"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "increase_pointer_080072b8",
            "code": "\nvoid increasePointer_080072b8(int amount)\n\n{\n  if (DAT_200002b4 == (NULL *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + amount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "increase_pointer_080072b8",
                "param_1": "amount",
                "undefined": "NULL"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array",
                "frame_dummy"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 155335,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "FUN_08004f68",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724"
        ]
    ],
    "locked_functions": []
}