{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 input)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_uint64_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_uint64_080001ac(undefined4 lower_32bits,undefined4 upper_32bits)\n\n{\n  return CONCAT44(upper_32bits,lower_32bits);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_uint64_080001ac",
                "param_1": "lower_32bits",
                "param_2": "upper_32bits"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_program_080001f8",
            "code": "\nvoid initialize_program_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initialize_08000210();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_program_080001f8"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "initialize_08000210",
            "code": "\nvoid initialize_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "initialize_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "process_function_08000220",
            "code": "\nvoid process_function_08000220(char input_parameter)\n\n{\n  if (input_parameter != DAT_20000468) {\n    process_data_blocks();\n    if (input_parameter == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = input_parameter;\n    }\n    else if (input_parameter == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = input_parameter;\n    }\n    else {\n      initialize_data();\n      DAT_20000468 = input_parameter;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "process_function_08000220",
                "param_1": "input_parameter",
                "process_data_blocks_08002fd4": "process_data_blocks",
                "initialize_08000210": "initialize_data"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_adjusted_value_08000268",
            "code": "\n\n\nint calculateAdjustedValue_08000268(void)\n\n{\n  int globalData;\n  \n  globalData = getGlobalData();\n  return (globalData + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_adjusted_value_08000268",
                "iVar1": "globalData",
                "get_global_data_08005a84": "getGlobalData"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "check_global_data_range_080002a0",
            "code": "\nvoid check_global_data_range_080002a0(undefined4 input_param)\n\n{\n  check_global_data_range_080002a0_08005a98(input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "check_global_data_range_080002a0",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "find_adjusted_value_080002b6",
            "code": "\nvoid findAdjustedValue_080002b6(uint inputValue)\n\n{\n  uint adjustedValue1;\n  uint adjustedValue2;\n  bool isGreaterOrEqual;\n  longlong calculatedValue;\n  undefined8 tempValue;\n  \n  calculatedValue = calculate_adjusted_value_08000268();\n  adjustedValue2 = (uint)(calculatedValue + (ulonglong)inputValue >> 0x20);\n  do {\n    tempValue = calculate_adjusted_value_08000268();\n    adjustedValue1 = (uint)((ulonglong)tempValue >> 0x20);\n    isGreaterOrEqual = adjustedValue2 <= adjustedValue1;\n    if (adjustedValue1 == adjustedValue2) {\n      isGreaterOrEqual = (uint)(calculatedValue + (ulonglong)inputValue) <= (uint)tempValue;\n    }\n  } while (!isGreaterOrEqual);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "find_adjusted_value_080002b6",
                "param_1": "inputValue",
                "uVar1": "adjustedValue1",
                "uVar2": "adjustedValue2",
                "bVar3": "isGreaterOrEqual",
                "lVar4": "calculatedValue",
                "uVar5": "tempValue"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_memory_080002f0",
            "code": "\nvoid initializeMemory_080002f0(void)\n\n{\n  fill_memory_with_byte_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_memory_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_memory_value_08000310",
            "code": "\nundefined getMemoryValue_08000310(uint value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemory();\n  }\n  return (&DAT_20000470)[value & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_memory_value_08000310",
                "param_1": "value",
                "initialize_memory_080002f0": "initializeMemory"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_data_08000340",
            "code": "\nvoid storeData_08000340(uint index,undefined data)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeMemory();\n  }\n  (&DAT_20000470)[index & 0x3ff] = data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "param_1": "index",
                "param_2": "data",
                "initialize_memory_080002f0": "initializeMemory"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "process_and_store_data_08000374",
            "code": "\nvoid process_and_store_data_08000374(int data_offset,char *input_data,int data_length)\n\n{\n  int remaining_length;\n  char *current_data;\n  int current_offset;\n  char current_checksum;\n  \n  current_checksum = '\\0';\n  remaining_length = data_length;\n  current_data = input_data;\n  current_offset = data_offset;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    current_data = input_data;\n    current_offset = data_offset;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_checksum = (current_checksum != '\\0') + *current_data;\n    store_data_08000340(current_offset,*current_data);\n    current_data = current_data + 1;\n    current_offset = current_offset + 1;\n  }\n  store_data_08000340(current_offset,current_checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "process_and_store_data_08000374",
                "param_1": "data_offset",
                "param_2": "input_data",
                "param_3": "data_length",
                "local_1c": "remaining_length",
                "local_18": "current_data",
                "local_14": "current_offset",
                "local_9": "current_checksum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_memory_equality_080003ec",
            "code": "\nbool checkMemoryEquality_080003ec(char *dataBuffer,int startIndex,int length)\n\n{\n  char cVar1;\n  uint uVar2;\n  int remainingLength;\n  int currentIndex;\n  char *currentPosition;\n  byte sumOfMemoryValues;\n  \n  sumOfMemoryValues = 0;\n  remainingLength = length;\n  currentIndex = startIndex;\n  currentPosition = dataBuffer;\n  if (DAT_2000046c == 0) {\n    initialize_memory_080002f0();\n    currentIndex = startIndex;\n    currentPosition = dataBuffer;\n  }\n  for (; remainingLength != 0; remainingLength = remainingLength + -1) {\n    cVar1 = get_memory_value_08000310(currentIndex);\n    sumOfMemoryValues = cVar1 + (sumOfMemoryValues != 0);\n    *currentPosition = cVar1;\n    currentIndex = currentIndex + 1;\n    currentPosition = currentPosition + 1;\n  }\n  uVar2 = get_memory_value_08000310(currentIndex);\n  return sumOfMemoryValues == uVar2;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_memory_equality_080003ec",
                "param_1": "dataBuffer",
                "param_2": "startIndex",
                "param_3": "length",
                "local_1c": "remainingLength",
                "local_18": "currentIndex",
                "local_14": "currentPosition",
                "local_9": "sumOfMemoryValues"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_params_08000478",
            "code": "\nvoid initializeParams_08000478(undefined input_1,undefined input_2,undefined input_3)\n\n{\n  DAT_20000e89 = input_1;\n  DAT_20000e8a = input_2;\n  DAT_20000e8b = input_3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_params_08000478",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_and_process_data_080004ac",
            "code": "\nvoid initialize_and_process_data_080004ac(void)\n\n{\n  int result;\n  \n  initialize_memory(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  set_initial_params(0,1,2);\n  DAT_20000e74 = 1;\n  result = validate_and_process_data(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    show_error_message(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_and_process_data_080004ac",
                "iVar1": "result",
                "fill_memory_with_byte_0800b430": "initialize_memory",
                "initialize_params_08000478": "set_initial_params",
                "check_and_process_data_08004d7c": "validate_and_process_data",
                "display_error_message_08004030": "show_error_message"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_and_store_results_080004fc",
            "code": "\nvoid calculate_and_store_results_080004fc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 calculated_value;\n  \n  calculated_value = calculate_result_08008e44(input_1);\n  DAT_20000e7c = floating_point_arithmetic_08009054(calculated_value,DAT_20000ebc);\n  calculated_value = calculate_result_08008e44(input_2);\n  DAT_20000e80 = floating_point_arithmetic_08009054(calculated_value,DAT_20000ec0);\n  calculated_value = calculate_result_08008e44(input_3);\n  DAT_20000e84 = floating_point_arithmetic_08009054(calculated_value,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_and_store_results_080004fc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "calculated_value"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "process_data_0800056c",
            "code": "\nundefined4 processData_0800056c(undefined4 input)\n\n{\n  undefined8 result;\n  \n  if (DAT_20000e73 != '\\0') {\n    result = decode_bitwise_operations_08008590(input);\n    result = calculate_result_08008640((int)result,(int)((ulonglong)result >> 0x20),0x66666666,0x40396666);\n    input = calculate_float_08008c30((int)result,(int)((ulonglong)result >> 0x20));\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "process_data_0800056c",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "decode_and_process_data_080005b4",
            "code": "\nchar decode_and_process_data_080005b4(undefined4 input_data)\n\n{\n  int result;\n  undefined4 temp;\n  char output;\n  uint temp_2;\n  undefined4 temp_3;\n  undefined8 temp_4;\n  undefined8 temp_5;\n  undefined8 temp_6;\n  undefined4 data_array_1 [4];\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 temp_7;\n  undefined4 temp_8;\n  undefined4 temp_array [6];\n  undefined4 value_4;\n  byte value_5;\n  undefined flag_1;\n  undefined4 value_6;\n  undefined4 value_7;\n  undefined flag_2;\n  uint value_8;\n  byte flag_3;\n  byte flag_4;\n  byte flag_5;\n  byte flag_6;\n  char flag_7;\n  uint value_9;\n  undefined4 value_10;\n  sbyte flag_8;\n  char flag_9;\n  char flag_10;\n  undefined4 value_11;\n  byte flag_11;\n  ushort value_12;\n  uint value_13;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    output = '\\f';\n  }\n  else {\n    flag_1 = 0;\n    value_12 = 0;\n    flag_11 = 0;\n    value_11 = 0xbf800000;\n    flag_10 = '\\0';\n    flag_9 = '\\0';\n    fill_memory_with_byte_0800b430(temp_array + 3,0,0xc);\n    fill_memory_with_byte_0800b430(temp_array,0,0xc);\n    DAT_20000e70 = '\\0';\n    flag_8 = 0;\n    while (result = check_and_update_value_0800184c(&value_5,temp_array + 6,input_data,&flag_1), result != 0) {\n      temp_4 = decode_bitwise_operations_08008590(value_4);\n      temp_4 = calculate_concatenation_08009798((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n      value_13 = calculate_inverse_08008ba0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n      if (value_5 == 0x47) {\n        switch(value_13) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          flag_8 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          flag_8 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          flag_8 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          flag_8 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          flag_8 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          flag_8 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          flag_8 = 6;\n        }\n        switch(value_13) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          flag_9 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          flag_9 = '\\x02';\n          break;\n        case 0x11:\n          initialize_params_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_params_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_params_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp = calculate_floating_point_08008eec(value_4,0x41200000);\n          temp_4 = decode_bitwise_operations_08008590(temp);\n          temp_4 = calculate_concatenation_08009798((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          value_13 = calculate_inverse_08008ba0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          switch(value_13) {\n          case 0x118:\n            flag_9 = '\\x03';\n            break;\n          case 0x119:\n            flag_9 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            flag_9 = '\\x05';\n            break;\n          case 0x12d:\n            flag_9 = '\\x06';\n          }\n          break;\n        case 0x35:\n          flag_10 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)value_13 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp = calculate_floating_point_08008eec(value_4,0x41200000);\n          temp_4 = decode_bitwise_operations_08008590(temp);\n          temp_4 = calculate_concatenation_08009798((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          value_13 = calculate_inverse_08008ba0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          if (value_13 == 0x398) {\n            flag_9 = '\\a';\n          }\n          else if (value_13 == 0x399) {\n            flag_9 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (value_5 == 0x4d) {\n        if (value_13 == 0x1e) {\nLAB_08000b96:\n          flag_8 = 5;\n        }\n        else if ((int)value_13 < 0x1f) {\n          if ((int)value_13 < 3) {\n            if (-1 < (int)value_13) goto LAB_08000b96;\n          }\n          else if (value_13 - 3 < 3) {\n            flag_8 = 8;\n          }\n        }\n        switch(value_13) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (flag_8 != 0) {\n        if (((int)(uint)value_12 >> flag_8 & 1U) == 0) {\n          value_12 = value_12 | (ushort)(1 << flag_8);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        flag_8 = 0;\n      }\n    }\n    output = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      value_10 = 0;\n      value_9 = 0;\n      flag_7 = '\\0';\n      flag_1 = 0;\nswitchD_08000d18_caseD_47:\n      result = check_and_update_value_0800184c(&value_5,temp_array + 6,input_data,&flag_1);\n      if (result != 0) {\n        switch(value_5) {\n        case 0x46:\n          result = check_concatenation_result_0800923c(value_4,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = process_data_0800056c(value_4);\n          }\n          else {\n            value_11 = process_data_0800056c(value_4);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_2 = (uint)value_5;\n          temp = process_data_0800056c(value_4);\n          temp_array[temp_2 - 0x49] = temp;\n          break;\n        case 0x4c:\n          temp_4 = decode_bitwise_operations_08008590(value_4);\n          temp_4 = calculate_concatenation_08009798((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          flag_7 = calculate_shift_amount_08008bf0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          break;\n        case 0x50:\n          value_10 = value_4;\n          break;\n        case 0x52:\n          value_9 = process_data_0800056c(value_4);\n          break;\n        case 0x53:\n          result = check_if_concatenation_complete_08009228(value_4,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = check_if_concatenation_complete_08009228(value_4,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp_4 = decode_bitwise_operations_08008590(value_4);\n          temp_4 = calculate_concatenation_08009798((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          DAT_20000e88 = calculate_shift_amount_08008bf0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          break;\n        case 0x58:\n          temp_array[3] = process_data_0800056c(value_4);\n          flag_11 = flag_11 | 1;\n          break;\n        case 0x59:\n          temp_array[4] = process_data_0800056c(value_4);\n          flag_11 = flag_11 | 2;\n          break;\n        case 0x5a:\n          temp_array[5] = process_data_0800056c(value_4);\n          flag_11 = flag_11 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      output = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          process_and_initialize_data_0800525c((int)DAT_20000e76);\n          process_function_08000220(DAT_20000e77);\n        }\n        if ((value_12 & 0x200) != 0) {\n          result = check_and_process_data_08004d7c(DAT_20000e8c,&value_3);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = value_3;\n          DAT_20000e94 = temp_7;\n          DAT_20000e98 = temp_8;\n        }\n        switch(flag_9) {\n        case '\\x01':\n          result = check_if_concatenation_complete_08009228(value_10,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_and_check_alarm_08002408(value_10);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp_4 = decode_bitwise_operations_08008590(value_10);\n          temp_4 = calculate_concatenation_08009798((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          value_13 = calculate_inverse_08008ba0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n          if ((((flag_7 == '\\x02') || (flag_7 == '\\x14')) && (-1 < (int)value_13)) &&\n             ((int)value_13 < 7)) {\n            if ((flag_11 == 0) && (flag_7 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)value_13 < 1) {\n                value_13 = (uint)DAT_20000e8c;\n              }\n              else {\n                value_13 = value_13 - 1;\n              }\n              result = check_and_process_data_08004d7c(value_13 & 0xff,data_array_1);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (flag_6 = 0; flag_6 < 3; flag_6 = flag_6 + 1) {\n                if (((int)(uint)flag_11 >> flag_6 & 1U) != 0) {\n                  if (flag_7 == '\\x14') {\n                    temp_2 = (uint)flag_6;\n                    temp = calculate_float_value_08008cd8(*(undefined4 *)(&DAT_20000e74 + (flag_6 + 2) * 4),\n                                         temp_array[flag_6 + 3]);\n                    data_array_1[temp_2] = temp;\n                  }\n                  else {\n                    data_array_1[flag_6] = temp_array[flag_6 + 3];\n                  }\n                }\n              }\n              process_and_store_data_08004bf4(value_13 & 0xff,data_array_1);\n              if (value_13 == DAT_20000e8c) {\n                DAT_20000e90 = data_array_1[0];\n                DAT_20000e94 = data_array_1[1];\n                DAT_20000e98 = data_array_1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          flag_11 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (flag_11 != 0) {\n            for (flag_5 = 0; flag_5 < 3; flag_5 = flag_5 + 1) {\n              if (((int)(uint)flag_11 >> flag_5 & 1U) == 0) {\n                temp_array[flag_5 + 3] = *(undefined4 *)(&DAT_20000e74 + (flag_5 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_2 = (uint)flag_5;\n                temp = calculate_floating_point_08008cdc(temp_array[flag_5 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (flag_5 + 2) * 4));\n                temp_array[temp_2 + 3] = temp;\n              }\n              else {\n                temp_3 = temp_array[flag_5 + 3];\n                temp = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (flag_5 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (flag_5 + 10) * 4));\n                temp_2 = (uint)flag_5;\n                temp = calculate_floating_point_08008cdc(temp_3,temp);\n                temp_array[temp_2 + 3] = temp;\n              }\n            }\n            check_and_update_buffer_08001e98(temp_array[3],temp_array[4],temp_array[5],DAT_20000ed0,0);\n          }\n          if (flag_9 == '\\x05') {\n            result = check_and_process_data_08004d7c(7,data_array_1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = check_and_process_data_08004d7c(6,data_array_1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          check_and_update_buffer_08001e98(data_array_1[3],value_1,value_2,DAT_20000ed0,0);\n          DAT_20000e7c = data_array_1[3];\n          DAT_20000e80 = value_1;\n          DAT_20000e84 = value_2;\n          flag_11 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (flag_9 == '\\x06') {\n            process_and_store_data_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            process_and_store_data_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (flag_11 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (flag_4 = 0; flag_4 < 3; flag_4 = flag_4 + 1) {\n              if (((int)(uint)flag_11 >> flag_4 & 1U) != 0) {\n                temp = calculate_float_value_08008cd8(*(undefined4 *)(&DAT_20000e74 + (flag_4 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (flag_4 + 8) * 4));\n                temp_2 = (uint)flag_4;\n                temp = calculate_float_value_08008cd8(temp,temp_array[flag_4 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_2 + 10) * 4) = temp;\n              }\n            }\n          }\n          flag_11 = 0;\n          break;\n        case '\\b':\n          fill_memory_with_byte_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((value_12 & 4) != 0) || (flag_11 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = check_if_concatenation_complete_08009228(value_11,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((flag_10 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (flag_3 = 0; flag_3 < 3; flag_3 = flag_3 + 1) {\n            if (((int)(uint)flag_11 >> flag_3 & 1U) == 0) {\n              temp_array[flag_3 + 3] = *(undefined4 *)(&DAT_20000e74 + (flag_3 + 2) * 4);\n            }\n            else if (flag_10 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_2 = (uint)flag_3;\n                temp = calculate_floating_point_08008cdc(temp_array[flag_3 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (flag_3 + 2) * 4));\n                temp_array[temp_2 + 3] = temp;\n              }\n              else {\n                temp_3 = temp_array[flag_3 + 3];\n                temp = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (flag_3 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (flag_3 + 10) * 4));\n                temp_2 = (uint)flag_3;\n                temp = calculate_floating_point_08008cdc(temp_3,temp);\n                temp_array[temp_2 + 3] = temp;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (flag_11 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              check_and_update_buffer_08001e98(temp_array[3],temp_array[4],temp_array[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (flag_11 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp = value_11;\n              if (DAT_20000e72 == '\\0') {\n                temp = DAT_20000e78;\n              }\n              check_and_update_buffer_08001e98(temp_array[3],temp_array[4],temp_array[5],temp,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            flag_11 = flag_11 & ~(byte)(1 << DAT_20000e8b);\n            if ((flag_11 == 0) ||\n               (((result = check_concatenation_result_08009214(value_9,0), result != 0 &&\n                 (result = check_concatenation_result_08009214(temp_array[DAT_20000e89],0), result != 0)) &&\n                (result = check_concatenation_result_08009214(temp_array[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = check_concatenation_result_08009214(value_9,0);\n              if (result == 0) {\n                value_7 = calculate_float_value_08008cd8(temp_array[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                value_6 = calculate_float_value_08008cd8(temp_array[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                fill_memory_with_byte_0800b430(temp_array,0,0xc);\n                temp = calculate_floating_point_08008eec(value_9,0x40800000);\n                temp = calculate_floating_point_08008eec(temp,value_9);\n                temp_3 = calculate_floating_point_08008eec(value_7,value_7);\n                temp = calculate_float_value_08008cd8(temp,temp_3);\n                temp_3 = calculate_floating_point_08008eec(value_6,value_6);\n                value_8 = calculate_float_value_08008cd8(temp,temp_3);\n                result = check_if_concatenation_complete_08009228(value_8,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp_4 = decode_bitwise_operations_08008590(value_8);\n                temp_4 = process_data_080098d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n                temp_5 = decode_bitwise_operations_08008590(value_7);\n                temp_6 = decode_bitwise_operations_08008590(value_6);\n                temp_5 = calculate_hypotenuse_0800981c((int)temp_5,(int)((ulonglong)temp_5 >> 0x20),(int)temp_6,\n                                     (int)((ulonglong)temp_6 >> 0x20));\n                temp_4 = calculate_floating_point_08008894((int)temp_4,(uint)((ulonglong)temp_4 >> 0x20) ^ 0x80000000,\n                                     (int)temp_5,(int)((ulonglong)temp_5 >> 0x20));\n                value_8 = calculate_float_08008c30((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  value_8 = value_8 ^ 0x80000000;\n                }\n                result = check_if_concatenation_complete_08009228(value_9,0);\n                if (result != 0) {\n                  value_8 = value_8 ^ 0x80000000;\n                  value_9 = value_9 ^ 0x80000000;\n                }\n                temp = calculate_floating_point_08008eec(value_6,value_8);\n                temp = calculate_float_value_08008cd8(value_7,temp);\n                temp_2 = (uint)DAT_20000e89;\n                temp = calculate_floating_point_08008eec(temp,0x3f000000);\n                temp_array[temp_2] = temp;\n                temp = calculate_floating_point_08008eec(value_7,value_8);\n                temp = calculate_floating_point_08008cdc(temp,value_6);\n                temp_2 = (uint)DAT_20000e8a;\n                temp = calculate_floating_point_08008eec(temp,0x3f000000);\n                temp_array[temp_2] = temp;\n              }\n              else {\n                temp_4 = decode_bitwise_operations_08008590(temp_array[DAT_20000e89]);\n                temp_5 = decode_bitwise_operations_08008590(temp_array[DAT_20000e8a]);\n                temp_4 = calculate_hypotenuse_0800981c((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),(int)temp_5,\n                                     (int)((ulonglong)temp_5 >> 0x20));\n                value_9 = calculate_float_08008c30((int)temp_4,(int)((ulonglong)temp_4 >> 0x20));\n              }\n              flag_2 = DAT_20000e71 == '\\x02';\n              temp = value_11;\n              if (DAT_20000e72 == '\\0') {\n                temp = DAT_20000e78;\n              }\n              calculate_and_update_buffer_08001f00(&DAT_20000e7c,temp_array + 3,temp_array,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,temp,DAT_20000e72,value_9,flag_2);\n            }\n            break;\n          case '\\x04':\n            if (flag_11 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = temp_array[3];\n          DAT_20000e80 = temp_array[4];\n          DAT_20000e84 = temp_array[5];\n        }\n        output = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          process_data_blocks_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_and_check_data_080025e8();\n            output = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            output = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "decode_and_process_data_080005b4",
                "param_1": "input_data",
                "iVar1": "result",
                "uVar2": "temp",
                "cVar3": "output",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "uVar6": "temp_4",
                "uVar7": "temp_5",
                "uVar8": "temp_6",
                "local_94": "data_array_1",
                "local_84": "value_1",
                "local_80": "value_2",
                "local_7c": "value_3",
                "uStack_78": "temp_7",
                "uStack_74": "temp_8",
                "auStack_70": "temp_array",
                "local_58": "value_4",
                "local_52": "value_5",
                "local_51": "flag_1",
                "local_50": "value_6",
                "local_4c": "value_7",
                "local_45": "flag_2",
                "local_44": "value_8",
                "local_3d": "flag_3",
                "local_3c": "flag_4",
                "local_3b": "flag_5",
                "local_3a": "flag_6",
                "local_39": "flag_7",
                "local_38": "value_9",
                "local_34": "value_10",
                "local_2f": "flag_8",
                "local_2e": "flag_9",
                "local_2d": "flag_10",
                "local_2c": "value_11",
                "local_27": "flag_11",
                "local_26": "value_12",
                "local_24": "value_13"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "check_and_update_value_0800184c",
            "code": "\nundefined4 checkAndUpdateValue_0800184c(byte *outputByte,undefined4 inputData,int baseAddress,byte *currentIndex)\n\n{\n  int parsedInt;\n  undefined4 returnValue;\n  \n  if (*(char *)(baseAddress + (uint)*currentIndex) == '\\0') {\n    returnValue = 0;\n  }\n  else {\n    *outputByte = *(byte *)(baseAddress + (uint)*currentIndex);\n    if ((*outputByte < 0x41) || (0x5a < *outputByte)) {\n      DAT_20000e70 = 2;\n      returnValue = 0;\n    }\n    else {\n      *currentIndex = *currentIndex + 1;\n      parsedInt = parse_integer_from_byte_array_08002638(baseAddress,currentIndex,inputData);\n      if (parsedInt == 0) {\n        DAT_20000e70 = 1;\n        returnValue = 0;\n      }\n      else {\n        returnValue = 1;\n      }\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "check_and_update_value_0800184c",
                "param_1": "outputByte",
                "param_2": "inputData",
                "param_3": "baseAddress",
                "param_4": "currentIndex",
                "iVar1": "parsedInt",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_data_table_080018cc",
            "code": "\n\n\nvoid updateDataTable_080018cc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_data_table_080018cc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_memory_value_080018fc",
            "code": "\n\n\nvoid updateMemoryValue_080018fc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_memory_value_080018fc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "extract_bit_from_flag_0800192c",
            "code": "\nvoid extract_bit_from_flag_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "extract_bit_from_flag_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_and_check_data_0800195c",
            "code": "\nvoid initialize_and_check_data_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_and_check_data_0800195c_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_and_check_data_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "decode_and_process_data_08001994",
            "code": "\nvoid decode_and_process_data_08001994(byte data_flags,char flag1,char flag2,undefined4 data_value)\n\n{\n  undefined4 result;\n  uint max_value;\n  undefined8 reverse_value;\n  undefined8 processed_value;\n  byte temp_flag;\n  uint value_1;\n  uint value_2;\n  uint value_3;\n  ushort data_1;\n  uint result_1;\n  int shift_amount;\n  undefined4 float_value;\n  uint max_value_1;\n  uint sum_value;\n  ushort data_2;\n  uint iteration_value;\n  uint accumulated_value;\n  int difference_value;\n  int temp_value1;\n  int temp_value2;\n  int temp_value3;\n  ushort data_3;\n  uint limit_value;\n  char count;\n  \n  count = '\\0';\n  fill_memory_with_byte_0800b430(&value_1,0,0xc);\n  if ((data_flags & 1) != 0) {\n    count = count + '\\x01';\n    reverse_value = decode_bitwise_operations_08008590(DAT_20000ebc);\n    value_1 = calculate_product_inverse_080095b8((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20));\n  }\n  if ((data_flags & 2) != 0) {\n    count = count + '\\x01';\n    reverse_value = decode_bitwise_operations_08008590(DAT_20000ec0);\n    value_2 = calculate_product_inverse_080095b8((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20));\n  }\n  if ((data_flags & 4) != 0) {\n    count = count + '\\x01';\n    reverse_value = decode_bitwise_operations_08008590(DAT_20000ec4);\n    value_3 = calculate_product_inverse_080095b8((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20));\n  }\n  max_value = value_3;\n  if (value_3 < value_2) {\n    max_value = value_2;\n  }\n  max_value_1 = value_1;\n  if (value_1 < max_value) {\n    max_value_1 = max_value;\n  }\n  reverse_value = reverse_bits_0800854c(max_value_1);\n  processed_value = reverse_bits_0800854c(count);\n  processed_value = process_data_080098d0((int)processed_value,(int)((ulonglong)processed_value >> 0x20));\n  reverse_value = calculate_floating_point_08008894((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20),(int)processed_value,\n                       (int)((ulonglong)processed_value >> 0x20));\n  float_value = calculate_float_08008c30((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20));\n  result = calculate_floating_point_08008eec(DAT_20000edc,float_value);\n  result = floating_point_arithmetic_08009054(result,0x453b8000);\n  reverse_value = decode_bitwise_operations_08008590(result);\n  reverse_value = calculate_concatenation_08009318((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20));\n  shift_amount = calculate_shift_amount_08008bf0((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20));\n  reverse_value = reverse_bits_0800854c(count);\n  reverse_value = process_data_080098d0((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20));\n  processed_value = decode_bitwise_operations_08008590(data_value);\n  reverse_value = calculate_result_08008640((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20),(int)processed_value,\n                       (int)((ulonglong)processed_value >> 0x20));\n  result = calculate_float_08008c30((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20));\n  result = calculate_floating_point_08008eec(float_value,result);\n  result = floating_point_arithmetic_08009054(0x4c64e1c0,result);\n  reverse_value = decode_bitwise_operations_08008590(result);\n  result_1 = calculate_product_inverse_080095b8((int)reverse_value,(int)((ulonglong)reverse_value >> 0x20));\n  limit_value = 75000;\n  if (result_1 < 75000) {\n    limit_value = result_1;\n  }\n  data_1 = DAT_20000ed4;\n  data_3 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (flag1 == '\\0') {\n    data_3 = data_3 ^ 0xaa0;\n  }\n  update_memory_value_080018fc(data_3);\n  update_data_table_080018cc(data_1);\n  temp_value1 = -(max_value_1 >> 1);\n  difference_value = limit_value - DAT_20000ec9;\n  accumulated_value = 0;\n  iteration_value = 10000;\n  temp_flag = data_flags;\n  temp_value2 = temp_value1;\n  temp_value3 = temp_value1;\n  while( true ) {\n    data_2 = data_1;\n    sum_value = calculate_sum_080078f4();\n    if (flag2 == '\\0') {\n      sum_value = sum_value ^ 0x1e;\n    }\n    if (((temp_flag & 1) != 0) && (temp_value3 = temp_value3 + value_1, 0 < temp_value3)) {\n      if ((sum_value & 0x10) == 0) {\n        temp_flag = temp_flag & 0xfe;\n      }\n      else {\n        data_2 = data_2 ^ 0x10;\n      }\n      temp_value3 = temp_value3 - max_value_1;\n    }\n    if (((temp_flag & 2) != 0) && (temp_value2 = temp_value2 + value_2, 0 < temp_value2)) {\n      if ((sum_value & 8) == 0) {\n        temp_flag = temp_flag & 0xfd;\n      }\n      else {\n        data_2 = data_2 ^ 0x440;\n      }\n      temp_value2 = temp_value2 - max_value_1;\n    }\n    if (((temp_flag & 4) != 0) && (temp_value1 = temp_value1 + value_3, 0 < temp_value1)) {\n      if ((sum_value & 4) == 0) {\n        temp_flag = temp_flag & 0xfb;\n      }\n      else {\n        data_2 = data_2 ^ 0x100;\n      }\n      temp_value1 = temp_value1 - max_value_1;\n    }\n    if ((temp_flag == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_data_table_080018cc(data_2);\n    FUNC_08002828(DAT_20000ec9);\n    update_data_table_080018cc(data_1);\n    FUNC_08002828(difference_value);\n    if ((result_1 < limit_value) && (iteration_value = limit_value + iteration_value, 20000 < iteration_value)) {\n      iteration_value = iteration_value - 20000;\n      accumulated_value = shift_amount + accumulated_value;\n      limit_value = 60000000 / accumulated_value;\n      if (limit_value < result_1) {\n        limit_value = result_1;\n      }\n      difference_value = limit_value - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "decode_and_process_data_08001994",
                "param_1": "data_flags",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "data_value",
                "uVar1": "result",
                "uVar2": "max_value",
                "uVar3": "reverse_value",
                "uVar4": "processed_value",
                "local_61": "temp_flag",
                "local_5c": "value_1",
                "local_58": "value_2",
                "local_54": "value_3",
                "local_4e": "data_1",
                "local_4c": "result_1",
                "local_48": "shift_amount",
                "local_44": "float_value",
                "local_40": "max_value_1",
                "local_3c": "sum_value",
                "local_36": "data_2",
                "local_34": "iteration_value",
                "local_30": "accumulated_value",
                "local_2c": "difference_value",
                "local_28": "temp_value1",
                "local_24": "temp_value2",
                "local_20": "temp_value3",
                "local_1a": "data_3",
                "local_18": "limit_value",
                "local_11": "count"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_process_data_08001d4c",
            "code": "\nvoid initialize_and_process_data_08001d4c(void)\n\n{\n  char decrement;\n  char counter;\n  \n  initialize_memory_08005790();\n  decode_and_process_data_08001994(4,1,0,DAT_20000eec);\n  decode_and_process_data_08001994(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    decrement = counter + -1;\n    if (counter == '\\0') break;\n    decode_and_process_data_08001994(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    counter = decrement;\n    if ('\\0' < decrement) {\n      decode_and_process_data_08001994(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  clear_and_check_flags_080057e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_process_data_08001d4c",
                "local_9": "counter",
                "cVar1": "decrement"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "run_system_operations_08001ddc",
            "code": "\nvoid runSystemOperations_08001ddc(void)\n\n{\n  FUNC_08008244();\n  processDataAndDisplayResults();\n  initializeSystem();\n  fillMemory(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initializeMemory();\n      initializeAndProcessData();\n      initializeAndDisplayVersion();\n      initializeMainFunction();\n      initializeProgram();\n      extractBitFromFlag();\n      initializeMemory();\n      initializeAndCalculateResults();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        displayMessage(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        processData();\n      }\n    }\n    processAlarm();\n    processInput();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "run_system_operations_08001ddc",
                "process_data_and_display_results_080051b4": "processDataAndDisplayResults",
                "initialize_system_0800583c": "initializeSystem",
                "fill_memory_with_byte_0800b430": "fillMemory",
                "initialize_memory_08002f24": "initializeMemory",
                "initialize_and_process_data_080004ac": "initializeAndProcessData",
                "initialize_and_display_grbl_version_080039a0": "initializeAndDisplayVersion",
                "initialize_main_function_08005238": "initializeMainFunction",
                "initialize_program_080001f8": "initializeProgram",
                "extract_bit_from_flag_0800192c": "extractBitFromFlag",
                "initialize_memory_08005814": "initializeMemory",
                "initialize_and_calculate_results_0800283a": "initializeAndCalculateResults",
                "display_message_080041a0": "displayMessage",
                "process_data_080039bc": "processData",
                "process_alarm_08003a74": "processAlarm",
                "process_input_08003f34": "processInput"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "check_and_update_buffer_08001e98",
            "code": "\nvoid checkAndUpdateBuffer_08001e98(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined param5)\n\n{\n  int arePointersEqual;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      process_alarm_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      arePointersEqual = are_pointers_equal_08002fac();\n    } while (arePointersEqual != 0);\n    calculateValuesAndUpdateBuffer(param1,param2,param3,param4,param5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initializeIfNeeded();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "check_and_update_buffer_08001e98",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "arePointersEqual",
                "calculate_values_and_update_buffer_08003004": "calculateValuesAndUpdateBuffer",
                "initialize_if_needed_0800585c": "initializeIfNeeded"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_and_update_buffer_08001f00",
            "code": "\nvoid calculateAndUpdateBuffer_08001f00(int inputBuffer,undefined4 *floatValues,int outputBuffer,byte index1,byte index2,byte index3\n                 ,undefined4 paramA,char paramB,undefined4 paramC,char isConcatenation)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int checkResult;\n  uint tempResult1;\n  undefined8 tempResult2;\n  undefined8 tempResult3;\n  uint floatTemp1 [4];\n  undefined4 floatTemp2;\n  undefined4 floatTemp3;\n  undefined4 floatTemp4;\n  undefined4 floatTemp5;\n  undefined4 floatTemp6;\n  undefined4 floatTemp7;\n  ushort shiftAmount;\n  undefined4 floatTemp8;\n  undefined4 floatTemp9;\n  undefined4 floatTemp10;\n  uint floatTemp11;\n  undefined4 floatTemp12;\n  undefined4 floatTemp13;\n  char loopIndex;\n  ushort iterationCount;\n  undefined4 result;\n  uint floatTemp14;\n  uint floatTemp15;\n  \n  floatTemp13 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)index1 * 4 + inputBuffer),\n                          *(undefined4 *)((uint)index1 * 4 + outputBuffer));\n  floatTemp12 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)index2 * 4 + inputBuffer),\n                          *(undefined4 *)((uint)index2 * 4 + outputBuffer));\n  floatTemp11 = calculate_float_value_08008cd8(floatValues[index3],*(undefined4 *)((uint)index3 * 4 + inputBuffer));\n  floatTemp15 = *(uint *)((uint)index1 * 4 + outputBuffer) ^ 0x80000000;\n  floatTemp14 = *(uint *)((uint)index2 * 4 + outputBuffer) ^ 0x80000000;\n  floatTemp10 = calculate_float_value_08008cd8(floatValues[index1],floatTemp13);\n  floatTemp9 = calculate_float_value_08008cd8(floatValues[index2],floatTemp12);\n  result1 = calculate_floating_point_08008eec(floatTemp15,floatTemp9);\n  result2 = calculate_floating_point_08008eec(floatTemp14,floatTemp10);\n  result1 = calculate_float_value_08008cd8(result1,result2);\n  tempResult2 = decode_bitwise_operations_08008590(result1);\n  result1 = calculate_floating_point_08008eec(floatTemp15,floatTemp10);\n  result2 = calculate_floating_point_08008eec(floatTemp14,floatTemp9);\n  result1 = calculate_floating_point_08008cdc(result1,result2);\n  tempResult3 = decode_bitwise_operations_08008590(result1);\n  tempResult2 = calculate_improved_result_thunk_08009990((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult3,\n                             (int)((ulonglong)tempResult3 >> 0x20));\n  result = calculate_float_08008c30((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n  if (isConcatenation == '\\0') {\n    checkResult = check_concatenation_result_0800923c(result,0);\n    if (checkResult != 0) {\n      tempResult2 = decode_bitwise_operations_08008590(result);\n      tempResult2 = calculate_concatenation_080082d4((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x54442d18,0x401921fb);\n      result = calculate_float_08008c30((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    }\n  }\n  else {\n    checkResult = concatenate_params_and_check_08009250(result,0);\n    if (checkResult != 0) {\n      tempResult2 = decode_bitwise_operations_08008590(result);\n      tempResult2 = calculate_080082d0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x54442d18,0x401921fb);\n      result = calculate_float_08008c30((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    }\n  }\n  result1 = calculate_floating_point_08008eec(result,paramC);\n  tempResult2 = decode_bitwise_operations_08008590(result1);\n  tempResult3 = decode_bitwise_operations_08008590(floatTemp11 & 0x7fffffff);\n  tempResult2 = calculate_hypotenuse_0800981c((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult3,\n                       (int)((ulonglong)tempResult3 >> 0x20));\n  floatTemp8 = calculate_float_08008c30((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n  checkResult = check_concatenation_result_08009214(floatTemp8,0);\n  if (checkResult == 0) {\n    result1 = floating_point_arithmetic_08009054(floatTemp8,DAT_20000ed8);\n    tempResult2 = decode_bitwise_operations_08008590(result1);\n    tempResult2 = calculate_consolidated_value_080094c0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    shiftAmount = calculate_shift_amount_08008bf0((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    if (paramB != '\\0') {\n      result1 = calculate_result_08008e44(shiftAmount);\n      paramA = calculate_floating_point_08008eec(paramA,result1);\n    }\n    result1 = calculate_result_08008e44(shiftAmount);\n    floatTemp7 = floating_point_arithmetic_08009054(result,result1);\n    result1 = calculate_result_08008e44(shiftAmount);\n    floatTemp6 = floating_point_arithmetic_08009054(floatTemp11,result1);\n    tempResult2 = decode_bitwise_operations_08008590(floatTemp7);\n    tempResult2 = calculate_result_08008640((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0,0x3fe00000);\n    tempResult3 = decode_bitwise_operations_08008590(floatTemp7);\n    tempResult2 = calculate_result_08008640((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult3,\n                         (int)((ulonglong)tempResult3 >> 0x20));\n    tempResult2 = calculate_080082d0(0,0x3ff00000,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    floatTemp5 = calculate_float_08008c30((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n    floatTemp4 = floatTemp7;\n    loopIndex = '\\0';\n    floatTemp1[index3] = *(uint *)(inputBuffer + (uint)index3 * 4);\n    for (iterationCount = 1; iterationCount < shiftAmount; iterationCount = iterationCount + 1) {\n      if ((int)loopIndex < (int)(uint)DAT_20000efa) {\n        result1 = calculate_floating_point_08008eec(floatTemp15,floatTemp4);\n        result2 = calculate_floating_point_08008eec(floatTemp14,floatTemp5);\n        floatTemp1[3] = calculate_floating_point_08008cdc(result1,result2);\n        result1 = calculate_floating_point_08008eec(floatTemp15,floatTemp5);\n        result2 = calculate_floating_point_08008eec(floatTemp14,floatTemp4);\n        floatTemp15 = calculate_float_value_08008cd8(result1,result2);\n        floatTemp14 = floatTemp1[3];\n        loopIndex = loopIndex + '\\x01';\n      }\n      else {\n        result1 = calculate_result_08008e44(iterationCount);\n        result1 = calculate_floating_point_08008eec(result1,floatTemp7);\n        tempResult2 = decode_bitwise_operations_08008590(result1);\n        tempResult2 = calculate_result_08009410((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n        floatTemp3 = calculate_float_08008c30((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n        result1 = calculate_result_08008e44(iterationCount);\n        result1 = calculate_floating_point_08008eec(result1,floatTemp7);\n        tempResult2 = decode_bitwise_operations_08008590(result1);\n        tempResult2 = calculate_result_080096e8((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n        floatTemp2 = calculate_float_08008c30((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n        result1 = calculate_floating_point_08008eec(*(uint *)((uint)index1 * 4 + outputBuffer) ^ 0x80000000,floatTemp3);\n        result2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)index2 * 4 + outputBuffer),floatTemp2);\n        floatTemp15 = calculate_floating_point_08008cdc(result1,result2);\n        result1 = calculate_floating_point_08008eec(*(uint *)((uint)index1 * 4 + outputBuffer) ^ 0x80000000,floatTemp2);\n        result2 = calculate_floating_point_08008eec(*(undefined4 *)((uint)index2 * 4 + outputBuffer),floatTemp3);\n        floatTemp14 = calculate_float_value_08008cd8(result1,result2);\n        loopIndex = '\\0';\n      }\n      tempResult1 = calculate_floating_point_08008cdc(floatTemp13,floatTemp15);\n      floatTemp1[index1] = tempResult1;\n      tempResult1 = calculate_floating_point_08008cdc(floatTemp12,floatTemp14);\n      floatTemp1[index2] = tempResult1;\n      tempResult1 = calculate_floating_point_08008cdc(floatTemp1[index3],floatTemp6);\n      floatTemp1[index3] = tempResult1;\n      check_and_update_buffer_08001e98(floatTemp1[0],floatTemp1[1],floatTemp1[2],paramA,paramB);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    check_and_update_buffer_08001e98(*floatValues,floatValues[1],floatValues[2],paramA,paramB);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_and_update_buffer_08001f00",
                "param_1": "inputBuffer",
                "param_2": "floatValues",
                "param_3": "outputBuffer",
                "param_4": "index1",
                "param_5": "index2",
                "param_6": "index3",
                "param_7": "paramA",
                "param_8": "paramB",
                "param_9": "paramC",
                "param_10": "isConcatenation",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "checkResult",
                "uVar4": "tempResult1",
                "uVar5": "tempResult2",
                "uVar6": "tempResult3",
                "local_6c": "floatTemp1",
                "local_5c": "floatTemp2",
                "local_58": "floatTemp3",
                "local_54": "floatTemp4",
                "local_50": "floatTemp5",
                "local_4c": "floatTemp6",
                "local_48": "floatTemp7",
                "local_42": "shiftAmount",
                "local_40": "floatTemp8",
                "local_3c": "floatTemp9",
                "local_38": "floatTemp10",
                "local_34": "floatTemp11",
                "local_30": "floatTemp12",
                "local_2c": "floatTemp13",
                "local_27": "loopIndex",
                "local_26": "iterationCount",
                "local_24": "result",
                "local_20": "floatTemp14",
                "local_1c": "floatTemp15"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "process_and_check_alarm_08002408",
            "code": "\nvoid process_and_check_alarm_08002408(undefined4 input_value)\n\n{\n  undefined2 shift_amount;\n  undefined4 float_value_1;\n  undefined4 result;\n  undefined8 float_value_2;\n  ushort loop_counter;\n  \n  float_value_1 = calculate_floating_point_08008eec(input_value,0x41a00000);\n  float_value_2 = decode_bitwise_operations_08008590(float_value_1);\n  float_value_2 = calculate_consolidated_value_080094c0((int)float_value_2,(int)((ulonglong)float_value_2 >> 0x20));\n  loop_counter = calculate_shift_amount_08008bf0((int)float_value_2,(int)((ulonglong)float_value_2 >> 0x20));\n  process_data_blocks_08002fd4();\n  float_value_1 = calculate_floating_point_08008eec(input_value,0x447a0000);\n  result = calculate_result_08008e44((uint)loop_counter * 0x32);\n  float_value_1 = calculate_float_value_08008cd8(float_value_1,result);\n  float_value_2 = decode_bitwise_operations_08008590(float_value_1);\n  float_value_2 = calculate_consolidated_value_080094c0((int)float_value_2,(int)((ulonglong)float_value_2 >> 0x20));\n  shift_amount = calculate_shift_amount_08008bf0((int)float_value_2,(int)((ulonglong)float_value_2 >> 0x20));\n  FUNC_08002814(shift_amount);\n  while ((loop_counter != 0 && (process_alarm_08003a74(), DAT_20000ea8 == '\\0'))) {\n    check_global_data_range_080002a0(0x32);\n    loop_counter = loop_counter - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "process_and_check_alarm_08002408",
                "param_1": "input_value",
                "uVar1": "shift_amount",
                "uVar2": "float_value_1",
                "uVar3": "result",
                "uVar4": "float_value_2",
                "local_12": "loop_counter"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_data_processing_080024c4",
            "code": "\nvoid initializeDataProcessing_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char local_13;\n  char local_12;\n  char local_11;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initializeAndProcessData();\n  processAlarm();\n  if (DAT_20000ea8 == '\\0') {\n    fillMemoryWithByte(&DAT_20000eac,0,0xc);\n    initializeAndCalculateResults();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      local_11 = -1;\n    }\n    else {\n      local_11 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      local_12 = -1;\n    }\n    else {\n      local_12 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      local_13 = -1;\n    }\n    else {\n      local_13 = '\\x01';\n    }\n    uVar1 = calculateResult((int)local_11);\n    uVar1 = calculateFloatingPoint(uVar1,DAT_20000ef4);\n    uVar2 = calculateResult((int)local_12);\n    uVar2 = calculateFloatingPoint(uVar2,DAT_20000ef4);\n    uVar3 = calculateResult((int)local_13);\n    uVar3 = calculateFloatingPoint(uVar3,DAT_20000ef4);\n    checkAndUpdateBuffer(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    initializeIfNeeded();\n    processDataBlocks();\n    initializeAndCalculateResults();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_data_processing_080024c4",
                "initialize_and_process_data_08001d4c": "initializeAndProcessData",
                "process_alarm_08003a74": "processAlarm",
                "fill_memory_with_byte_0800b430": "fillMemoryWithByte",
                "initialize_and_calculate_results_0800283a": "initializeAndCalculateResults",
                "calculate_result_08008e44": "calculateResult",
                "calculate_floating_point_08008eec": "calculateFloatingPoint",
                "check_and_update_buffer_08001e98": "checkAndUpdateBuffer",
                "initialize_if_needed_0800585c": "initializeIfNeeded",
                "process_data_blocks_08002fd4": "processDataBlocks"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_and_check_data_080025e8",
            "code": "\nvoid initialize_and_check_data_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    initialize_subsystem1();\n    initialize_subsystem2();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      clear_and_validate_flags();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_and_check_data_080025e8",
                "initialize_08005250": "initialize_subsystem1",
                "initialize_08000210": "initialize_subsystem2",
                "clear_and_check_flags_080057e4": "clear_and_validate_flags"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_from_byte_array_08002638",
            "code": "\nundefined4 parseIntegerFromByteArray_08002638(int baseAddress,byte *byteArray,uint *resultPtr)\n\n{\n  byte digit;\n  bool isNegative;\n  bool isFractional;\n  int concatenationResult;\n  char *currCharPtr;\n  char *nextCharPtr;\n  undefined4 returnValue;\n  undefined8 tempResult;\n  uint digitCount;\n  byte fractionalDigits;\n  char exponent;\n  int integerResult;\n  char currChar;\n  char *nextCharPtr;\n  \n  nextCharPtr = (char *)(baseAddress + (uint)*byteArray);\n  currCharPtr = nextCharPtr + 1;\n  currChar = *nextCharPtr;\n  isNegative = false;\n  if (currChar == '-') {\n    isNegative = true;\n    currChar = *currCharPtr;\n    nextCharPtr = nextCharPtr + 2;\n  }\n  else {\n    nextCharPtr = currCharPtr;\n    if (currChar == '+') {\n      nextCharPtr = nextCharPtr + 2;\n      currChar = *currCharPtr;\n    }\n  }\n  integerResult = 0;\n  exponent = '\\0';\n  fractionalDigits = 0;\n  isFractional = false;\n  do {\n    digit = currChar - 0x30;\n    if (digit < 10) {\n      fractionalDigits = fractionalDigits + 1;\n      if (fractionalDigits < 9) {\n        if (isFractional) {\n          exponent = exponent + -1;\n        }\n        integerResult = (uint)digit + integerResult * 10;\n      }\n      else if (!isFractional) {\n        exponent = exponent + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (isFractional)) {\n        if (fractionalDigits == 0) {\n          returnValue = 0;\n        }\n        else {\n          digitCount = calculate_result_08008e3c(integerResult);\n          concatenationResult = check_concatenation_result_08009214(digitCount,0);\n          if (concatenationResult == 0) {\n            for (; exponent < -1; exponent = exponent + '\\x02') {\n              tempResult = decode_bitwise_operations_08008590(digitCount);\n              tempResult = calculate_result_08008640((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              digitCount = calculate_float_08008c30((int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n            }\n            if (exponent < '\\0') {\n              tempResult = decode_bitwise_operations_08008590(digitCount);\n              tempResult = calculate_result_08008640((int)tempResult,(int)((ulonglong)tempResult >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              digitCount = calculate_float_08008c30((int)tempResult,(int)((ulonglong)tempResult >> 0x20));\n            }\n            else {\n              for (; '\\0' < exponent; exponent = exponent + -1) {\n                digitCount = calculate_floating_point_08008eec(digitCount,0x41200000);\n              }\n            }\n          }\n          if (isNegative) {\n            *resultPtr = digitCount ^ 0x80000000;\n          }\n          else {\n            *resultPtr = digitCount;\n          }\n          *byteArray = ((char)nextCharPtr - (char)baseAddress) - 1;\n          returnValue = 1;\n        }\n        return returnValue;\n      }\n      isFractional = true;\n    }\n    currChar = *nextCharPtr;\n    nextCharPtr = nextCharPtr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_from_byte_array_08002638",
                "param_1": "baseAddress",
                "param_2": "byteArray",
                "param_3": "resultPtr",
                "bVar1": "digit",
                "bVar2": "isNegative",
                "bVar3": "isFractional",
                "iVar4": "concatenationResult",
                "pcVar5": "currCharPtr",
                "pcVar6": "nextCharPtr",
                "uVar7": "returnValue",
                "uVar8": "tempResult",
                "local_1c": "digitCount",
                "local_16": "fractionalDigits",
                "local_15": "exponent",
                "local_14": "integerResult",
                "local_d": "currChar",
                "local_c": "nextCharPtr"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_calculate_results_0800283a",
            "code": "\nvoid initialize_and_calculate_results_0800283a(void)\n\n{\n  initialize_parameters_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  calculate_and_store_results_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_calculate_results_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_check_08002870",
            "code": "\nchar incrementAndCheck_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_check_08002870",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "decrement_and_default_to_18_08002896",
            "code": "\nchar decrement_and_default_to_18_08002896(char input_char)\n\n{\n  char result;\n  \n  result = input_char;\n  if (input_char == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "decrement_and_default_to_18_08002896",
                "param_1": "input_char",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_result_080028bc",
            "code": "\nundefined4 calculate_result_080028bc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = calculate_floating_point_08008eec(input2,input2);\n  result2 = calculate_floating_point_08008eec(input1,input1);\n  result1 = calculate_float_value_08008cd8(result1,result2);\n  result2 = calculate_floating_point_08008cdc(input3,input3);\n  result1 = floating_point_arithmetic_08009054(result1,result2);\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculate_result_08002908(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = calculate_floating_point_08008cdc(input3,input3);\n  result1 = calculate_floating_point_08008eec(result1,input4);\n  result2 = calculate_floating_point_08008eec(input1,input1);\n  result1 = calculate_float_value_08008cd8(result1,result2);\n  result2 = calculate_floating_point_08008eec(input2,input2);\n  result1 = calculate_floating_point_08008cdc(result1,result2);\n  result2 = calculate_floating_point_08008eec(input3,0x40800000);\n  result1 = floating_point_arithmetic_08009054(result1,result2);\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "process_float_values_08002978",
            "code": "\nundefined4 process_float_values_08002978(undefined4 input_value1,undefined4 input_value2,undefined4 input_value3)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined8 decoded_value;\n  \n  result1 = calculate_floating_point_08008eec(input_value2,input_value2);\n  result2 = calculate_floating_point_08008cdc(input_value1,input_value1);\n  result2 = calculate_floating_point_08008eec(result2,input_value3);\n  result1 = calculate_float_value_08008cd8(result1,result2);\n  decoded_value = decode_bitwise_operations_08008590(result1);\n  decoded_value = process_data_080098d0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  result1 = calculate_float_08008c30((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  return result1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "process_float_values_08002978",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "param_3": "input_value3",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "decoded_value"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "concatenate_strings_080029d8",
            "code": "\nvoid concatenate_strings_080029d8(undefined4 result,int string1,int string2)\n\n{\n  int concatenation_result;\n  undefined4 processed_value;\n  undefined4 concatenation_input;\n  \n  if (((string1 != 0) && (string2 != 0)) &&\n     (concatenation_result = check_concatenation_result_08009214(*(undefined4 *)(string1 + 0x18),*(undefined4 *)(string1 + 0x1c)),\n     concatenation_result == 0)) {\n    if ((*(char *)(string1 + 0x25) == '\\0') &&\n       (concatenation_result = check_if_concatenation_is_null_08009264(*(undefined4 *)(string1 + 0x1c),*(undefined4 *)(string2 + 0x18)),\n       concatenation_result != 0)) {\n      concatenation_input = *(undefined4 *)(string1 + 0x1c);\n      processed_value = process_float_values_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(string2 + 0x18),\n                           *(undefined4 *)(string1 + 0x20));\n      concatenation_result = check_if_concatenation_complete_08009228(concatenation_input,processed_value);\n      if (concatenation_result == 0) {\n        processed_value = process_float_values_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(string2 + 0x18),\n                             *(undefined4 *)(string1 + 0x20));\n      }\n      else {\n        processed_value = *(undefined4 *)(string1 + 0x1c);\n      }\n      *(undefined4 *)(string1 + 0x18) = processed_value;\n    }\n    else {\n      *(undefined4 *)(string1 + 0x18) = *(undefined4 *)(string1 + 0x1c);\n    }\n    *(undefined *)(string1 + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "concatenate_strings_080029d8",
                "param_1": "result",
                "param_2": "string1",
                "param_3": "string2",
                "iVar1": "concatenation_result",
                "uVar2": "processed_value",
                "uVar3": "concatenation_input"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "concatenate_strings_08002a94",
            "code": "\nvoid concatenate_strings_08002a94(void)\n\n{\n  undefined *puVar1;\n  undefined *previous_string;\n  undefined *current_string;\n  byte current_character;\n  \n  current_character = DAT_20000cf0;\n  previous_string = (undefined *)0x0;\n  current_string = (undefined *)0x0;\n  while (puVar1 = current_string, current_character != DAT_20000cf1) {\n    current_character = decrement_and_default_to_18_08002896(current_character);\n    current_string = previous_string;\n    concatenate_strings_08002a94_080029d8(&DAT_20000870 + (uint)current_character * 0x40,previous_string,puVar1);\n    previous_string = &DAT_20000870 + (uint)current_character * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "concatenate_strings_08002a94",
                "local_18": "previous_string",
                "local_14": "current_string",
                "local_9": "current_character"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "update_concatenation_08002afc",
            "code": "\nvoid updateConcatenation_08002afc(int buffer1,int buffer2)\n\n{\n  int concatenationComplete;\n  undefined4 processedValue;\n  undefined4 tempValue;\n  \n  if (((buffer1 != 0) && (*(char *)(buffer1 + 0x25) == '\\0')) &&\n     (concatenationComplete = check_if_concatenation_complete_08009228(*(undefined4 *)(buffer1 + 0x18),*(undefined4 *)(buffer2 + 0x18)),\n     concatenationComplete != 0)) {\n    tempValue = *(undefined4 *)(buffer2 + 0x18);\n    processedValue = process_float_values_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(buffer1 + 0x18),\n                         *(undefined4 *)(buffer1 + 0x20));\n    concatenationComplete = check_if_concatenation_complete_08009228(tempValue,processedValue);\n    if (concatenationComplete == 0) {\n      processedValue = process_float_values_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(buffer1 + 0x18),\n                           *(undefined4 *)(buffer1 + 0x20));\n    }\n    else {\n      processedValue = *(undefined4 *)(buffer2 + 0x18);\n    }\n    concatenationComplete = check_concatenation_result_08009214(processedValue,*(undefined4 *)(buffer2 + 0x18));\n    if (concatenationComplete == 0) {\n      *(undefined4 *)(buffer2 + 0x18) = processedValue;\n      *(undefined *)(buffer2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "update_concatenation_08002afc",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "iVar1": "concatenationComplete",
                "uVar2": "processedValue",
                "uVar3": "tempValue"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "update_concatenation_08002ba8",
            "code": "\nvoid update_concatenation_08002ba8(void)\n\n{\n  uint value;\n  undefined *previous_ptr_temp;\n  undefined *previous_ptr_final;\n  undefined *previous_ptr;\n  undefined *current_ptr;\n  byte byte_value;\n  \n  previous_ptr = (undefined *)0x0;\n  current_ptr = (undefined *)0x0;\n  byte_value = DAT_20000cf1;\n  previous_ptr_final = (undefined *)0x0;\n  while (previous_ptr_temp = previous_ptr, byte_value != DAT_20000cf0) {\n    previous_ptr = current_ptr;\n    value = (uint)byte_value;\n    update_concatenation_08002ba8_08002afc(previous_ptr_temp,current_ptr,&DAT_20000870 + value * 0x40);\n    byte_value = increment_and_check_08002870(byte_value);\n    previous_ptr_final = previous_ptr_temp;\n    current_ptr = &DAT_20000870 + value * 0x40;\n  }\n  update_concatenation_08002ba8_08002afc(previous_ptr,current_ptr,0,previous_ptr,previous_ptr_final);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "update_concatenation_08002ba8",
                "local_14": "previous_ptr",
                "local_10": "current_ptr",
                "local_9": "byte_value",
                "puVar2": "previous_ptr_temp",
                "puVar3": "previous_ptr_final",
                "uVar1": "value"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_shift_and_concatenate_08002c18",
            "code": "\nvoid calculate_shift_and_concatenate_08002c18(int input_data,undefined4 floating_point_param,undefined4 second_floating_point_param)\n\n{\n  undefined4 result1;\n  int shifted_inverse;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  uint shifted_inverse_masked;\n  undefined8 decoded_result;\n  int final_result;\n  uint calculated_value;\n  \n  result1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  result1 = calculate_floating_point_08008eec(result1,floating_point_param);\n  decoded_result = decode_bitwise_operations_08008590(result1);\n  decoded_result = calculate_concatenation_08009318((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  result1 = calculate_shift_amount_08008bf0((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  *(undefined4 *)(input_data + 0x28) = result1;\n  result1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  result1 = calculate_floating_point_08008eec(result1,second_floating_point_param);\n  decoded_result = decode_bitwise_operations_08008590(result1);\n  decoded_result = calculate_concatenation_08009318((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  result1 = calculate_shift_amount_08008bf0((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  *(undefined4 *)(input_data + 0x2c) = result1;\n  decoded_result = calculate_shifted_value_0800856c(*(int *)(input_data + 0x30) * 0x32);\n  decoded_result = calculate_result_08008640((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20),0,0x404e0000);\n  shifted_inverse = calculate_inverse_08008ba0((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  result1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x28));\n  result2 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  result3 = calculate_result_08008e44(shifted_inverse);\n  result1 = calculate_result_080028bc(result1,result2,result3);\n  decoded_result = decode_bitwise_operations_08008590(result1);\n  decoded_result = calculate_concatenation_08009318((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  calculated_value = calculate_inverse_08008ba0((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  result1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  result2 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x2c));\n  result3 = calculate_result_08008e44(-shifted_inverse);\n  result1 = calculate_result_080028bc(result1,result2,result3);\n  decoded_result = decode_bitwise_operations_08008590(result1);\n  decoded_result = calculate_consolidated_value_080094c0((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  final_result = calculate_inverse_08008ba0((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n  final_result = (*(int *)(input_data + 0x10) - calculated_value) - final_result;\n  if (final_result < 0) {\n    result1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x28));\n    result2 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x2c));\n    result3 = calculate_result_08008e44(shifted_inverse);\n    result4 = calculate_result_08008e44(*(undefined4 *)(input_data + 0x10));\n    result1 = calculate_result_08002908(result1,result2,result3,result4);\n    decoded_result = decode_bitwise_operations_08008590(result1);\n    decoded_result = calculate_concatenation_08009318((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n    shifted_inverse_masked = calculate_inverse_08008ba0((int)decoded_result,(int)((ulonglong)decoded_result >> 0x20));\n    shifted_inverse_masked = shifted_inverse_masked & ~((int)shifted_inverse_masked >> 0x1f);\n    calculated_value = *(uint *)(input_data + 0x10);\n    if ((int)shifted_inverse_masked <= (int)*(uint *)(input_data + 0x10)) {\n      calculated_value = shifted_inverse_masked;\n    }\n    final_result = 0;\n  }\n  *(uint *)(input_data + 0x34) = calculated_value;\n  *(uint *)(input_data + 0x38) = final_result + calculated_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_shift_and_concatenate_08002c18",
                "param_1": "input_data",
                "param_2": "floating_point_param",
                "param_3": "second_floating_point_param",
                "uVar1": "result1",
                "iVar2": "shifted_inverse",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "shifted_inverse_masked",
                "uVar7": "decoded_result",
                "local_20": "final_result",
                "local_1c": "calculated_value"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_and_concatenate_08002e08",
            "code": "\nvoid calculate_and_concatenate_08002e08(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  int iVar3;\n  undefined *data_ptr;\n  byte byte_value;\n  \n  data_ptr = (undefined *)0x0;\n  byte_value = DAT_20000cf1;\n  while (byte_value != DAT_20000cf0) {\n    iVar3 = (uint)byte_value * 0x40;\n    if ((data_ptr != (undefined *)0x0) &&\n       ((data_ptr[0x24] != '\\0' || ((&DAT_20000894)[iVar3] != '\\0')))) {\n      uVar1 = calculate_floating_point(*(undefined4 *)(data_ptr + 0x18),*(undefined4 *)(data_ptr + 0x14));\n      uVar2 = calculate_floating_point(*(undefined4 *)(&DAT_20000888 + iVar3),*(undefined4 *)(data_ptr + 0x14));\n      calculate_shift_and_concatenate(data_ptr,uVar1,uVar2);\n      data_ptr[0x24] = 0;\n    }\n    byte_value = increment_and_check(byte_value);\n    data_ptr = &DAT_20000870 + iVar3;\n  }\n  uVar1 = calculate_floating_point(*(undefined4 *)(data_ptr + 0x18),*(undefined4 *)(data_ptr + 0x14));\n  uVar2 = calculate_floating_point(0,*(undefined4 *)(data_ptr + 0x14));\n  calculate_shift_and_concatenate(data_ptr,uVar1,uVar2);\n  data_ptr[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_and_concatenate_08002e08",
                "local_18": "data_ptr",
                "local_11": "byte_value",
                "increment_and_check_08002870": "increment_and_check",
                "floating_point_arithmetic_08009054": "calculate_floating_point",
                "calculate_shift_and_concatenate_08002c18": "calculate_shift_and_concatenate"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "concatenate_and_calculate_08002edc",
            "code": "\nvoid concatenate_and_calculate_08002edc(void)\n\n{\n  concatenateStrings();\n  updateConcatenation();\n  calculateAndConcatenate();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "concatenate_and_calculate_08002edc",
                "concatenate_strings_08002a94": "concatenateStrings",
                "update_concatenation_08002ba8": "updateConcatenation",
                "calculate_and_concatenate_08002e08": "calculateAndConcatenate"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_data_and_check_08002ef0",
            "code": "\nvoid updateDataAndCheck_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_check_08002870(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_data_and_check_08002ef0"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_memory_08002f24",
            "code": "\nvoid initializeMemory_08002f24(void)\n\n{\n  updateDataAndCheck();\n  fillMemoryWithByte(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_memory_08002f24",
                "update_data_and_check_08002ef0": "updateDataAndCheck",
                "fill_memory_with_byte_0800b430": "fillMemoryWithByte"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_data_if_not_equal_08002f40",
            "code": "\nvoid update_data_if_not_equal_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_check_08002870(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_data_if_not_equal_08002f40"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_next_data_block_08002f74",
            "code": "\nundefined * get_next_data_block_08002f74(void)\n\n{\n  undefined *next_block_ptr;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    next_block_ptr = (undefined *)0x0;\n  }\n  else {\n    next_block_ptr = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return next_block_ptr;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_next_data_block_08002f74",
                "puVar1": "next_block_ptr"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "are_pointers_equal_08002fac",
            "code": "\nbool arePointersEqual_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "are_pointers_equal_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "process_data_blocks_08002fd4",
            "code": "\nvoid process_data_blocks_08002fd4(void)\n\n{\n  int data_block;\n  \n  while ((data_block = get_next_data_block(), data_block != 0 || (DAT_20000ea9 == '\\x03'))) {\n    process_alarm();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "process_data_blocks_08002fd4",
                "iVar1": "data_block",
                "get_next_data_block_08002f74": "get_next_data_block",
                "process_alarm_08003a74": "process_alarm"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_values_and_update_buffer_08003004",
            "code": "\nvoid calculateValuesAndUpdateBuffer_08003004(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 char flag)\n\n{\n  undefined4 result1;\n  int inverseProduct1;\n  int inverseProduct2;\n  int inverseProduct3;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint maxValue;\n  int bufferIndex;\n  ushort *bufferPointer;\n  int difference1;\n  uint difference2;\n  undefined8 result6;\n  undefined8 result7;\n  undefined8 result8;\n  undefined4 concatenationResult1;\n  undefined4 concatenationResult2;\n  \n  bufferIndex = (uint)DAT_20000cf0 * 0x40;\n  bufferPointer = (ushort *)(&DAT_20000870 + bufferIndex);\n  result1 = calculate_floating_point_08008eec(DAT_20000ebc,input1);\n  result6 = decode_bitwise_operations_08008590(result1);\n  inverseProduct1 = calculate_product_inverse_080095b8((int)result6,(int)((ulonglong)result6 >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000ec0,input2);\n  result6 = decode_bitwise_operations_08008590(result1);\n  inverseProduct2 = calculate_product_inverse_080095b8((int)result6,(int)((ulonglong)result6 >> 0x20));\n  result1 = calculate_floating_point_08008eec(DAT_20000ec4,input3);\n  result6 = decode_bitwise_operations_08008590(result1);\n  inverseProduct3 = calculate_product_inverse_080095b8((int)result6,(int)((ulonglong)result6 >> 0x20));\n  *bufferPointer = 0;\n  if (inverseProduct1 < DAT_20000cf4) {\n    *bufferPointer = *bufferPointer | 0x20;\n  }\n  if (inverseProduct2 < DAT_20000cf8) {\n    *bufferPointer = *bufferPointer | 0x880;\n  }\n  if (inverseProduct3 < DAT_20000cfc) {\n    *bufferPointer = *bufferPointer | 0x200;\n  }\n  difference1 = inverseProduct1 - DAT_20000cf4;\n  if (difference1 < 0) {\n    difference1 = -difference1;\n  }\n  *(int *)(&DAT_20000874 + bufferIndex) = difference1;\n  difference1 = inverseProduct2 - DAT_20000cf8;\n  if (difference1 < 0) {\n    difference1 = -difference1;\n  }\n  *(int *)(&DAT_20000878 + bufferIndex) = difference1;\n  difference1 = inverseProduct3 - DAT_20000cfc;\n  if (difference1 < 0) {\n    difference1 = -difference1;\n  }\n  *(int *)(&DAT_2000087c + bufferIndex) = difference1;\n  maxValue = *(uint *)(&DAT_2000087c + bufferIndex);\n  if (*(uint *)(&DAT_2000087c + bufferIndex) < *(uint *)(&DAT_20000878 + bufferIndex)) {\n    maxValue = *(uint *)(&DAT_20000878 + bufferIndex);\n  }\n  difference2 = *(uint *)(&DAT_20000874 + bufferIndex);\n  if (*(uint *)(&DAT_20000874 + bufferIndex) < maxValue) {\n    difference2 = maxValue;\n  }\n  *(uint *)(&DAT_20000880 + bufferIndex) = difference2;\n  if (*(int *)(&DAT_20000880 + bufferIndex) != 0) {\n    result1 = calculate_result_08008e44(inverseProduct1 - DAT_20000cf4);\n    result1 = floating_point_arithmetic_08009054(result1,DAT_20000ebc);\n    result2 = calculate_result_08008e44(inverseProduct2 - DAT_20000cf8);\n    result2 = floating_point_arithmetic_08009054(result2,DAT_20000ec0);\n    result3 = calculate_result_08008e44(inverseProduct3 - DAT_20000cfc);\n    result3 = floating_point_arithmetic_08009054(result3,DAT_20000ec4);\n    result4 = calculate_floating_point_08008eec(result1,result1);\n    result5 = calculate_floating_point_08008eec(result2,result2);\n    result4 = calculate_floating_point_08008cdc(result4,result5);\n    result5 = calculate_floating_point_08008eec(result3,result3);\n    result4 = calculate_floating_point_08008cdc(result4,result5);\n    result6 = decode_bitwise_operations_08008590(result4);\n    result6 = process_data_080098d0((int)result6,(int)((ulonglong)result6 >> 0x20));\n    result4 = calculate_float_08008c30((int)result6,(int)((ulonglong)result6 >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + bufferIndex) = result4;\n    result4 = floating_point_arithmetic_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + bufferIndex));\n    if (flag == '\\0') {\n      concatenationResult2 = calculate_floating_point_08008eec(input4,result4);\n    }\n    else {\n      concatenationResult2 = floating_point_arithmetic_08009054(0x3f800000,input4);\n    }\n    result5 = calculate_floating_point_08008eec(*(undefined4 *)(&DAT_20000890 + bufferIndex),concatenationResult2);\n    *(undefined4 *)(&DAT_20000884 + bufferIndex) = result5;\n    result5 = calculate_result_08008e44(*(undefined4 *)(&DAT_20000880 + bufferIndex));\n    result5 = calculate_floating_point_08008eec(result5,concatenationResult2);\n    result6 = decode_bitwise_operations_08008590(result5);\n    result6 = calculate_concatenation_08009318((int)result6,(int)((ulonglong)result6 >> 0x20));\n    result5 = calculate_shift_amount_08008bf0((int)result6,(int)((ulonglong)result6 >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + bufferIndex) = result5;\n    result5 = calculate_result_08008e44(*(undefined4 *)(&DAT_20000880 + bufferIndex));\n    result5 = calculate_floating_point_08008eec(result5,result4);\n    result5 = calculate_floating_point_08008eec(result5,DAT_20000edc);\n    result5 = floating_point_arithmetic_08009054(result5,0x453b8000);\n    result6 = decode_bitwise_operations_08008590(result5);\n    result6 = calculate_concatenation_08009318((int)result6,(int)((ulonglong)result6 >> 0x20));\n    result5 = calculate_inverse_08008ba0((int)result6,(int)((ulonglong)result6 >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + bufferIndex) = result5;\n    maxValue = calculate_floating_point_08008eec(result1,result4);\n    result1 = calculate_floating_point_08008eec(result2,result4);\n    result2 = calculate_floating_point_08008eec(result3,result4);\n    concatenationResult1 = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (difference1 = check_if_concatenation_is_null_08009264(DAT_20000d0c,0), difference1 != 0)) {\n      result3 = calculate_floating_point_08008eec(DAT_20000d00 ^ 0x80000000,maxValue);\n      result4 = calculate_floating_point_08008eec(DAT_20000d04,result1);\n      result3 = calculate_float_value_08008cd8(result3,result4);\n      result4 = calculate_floating_point_08008eec(DAT_20000d08,result2);\n      result3 = calculate_float_value_08008cd8(result3,result4);\n      result6 = decode_bitwise_operations_08008590(result3);\n      difference1 = is_end_of_string_08008b24((int)result6,(int)((ulonglong)result6 >> 0x20),0x66666666,0x3fee6666);\n      if (difference1 != 0) {\n        difference1 = check_if_concatenation_complete_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + bufferIndex));\n        concatenationResult1 = DAT_20000d0c;\n        if (difference1 == 0) {\n          concatenationResult1 = *(undefined4 *)(&DAT_20000884 + bufferIndex);\n        }\n        result6 = decode_bitwise_operations_08008590(result3);\n        difference1 = is_cy_null_08008b60((int)result6,(int)((ulonglong)result6 >> 0x20),0x66666666,0xbfee6666);\n        if (difference1 != 0) {\n          result6 = decode_bitwise_operations_08008590(result3);\n          result6 = calculate_080082d0(0,0x3ff00000,(int)result6,(int)((ulonglong)result6 >> 0x20));\n          result6 = calculate_result_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),0,0x3fe00000);\n          result6 = process_data_080098d0((int)result6,(int)((ulonglong)result6 >> 0x20));\n          result3 = calculate_float_08008c30((int)result6,(int)((ulonglong)result6 >> 0x20));\n          result6 = decode_bitwise_operations_08008590(concatenationResult1);\n          result4 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n          result4 = calculate_floating_point_08008eec(result4,result3);\n          result7 = decode_bitwise_operations_08008590(result4);\n          result8 = decode_bitwise_operations_08008590(result3);\n          result8 = calculate_080082d0(0,0x3ff00000,(int)result8,(int)((ulonglong)result8 >> 0x20));\n          result7 = calculate_floating_point_08008894((int)result7,(int)((ulonglong)result7 >> 0x20),(int)result8,\n                                (int)((ulonglong)result8 >> 0x20));\n          result7 = process_data_080098d0((int)result7,(int)((ulonglong)result7 >> 0x20));\n          difference1 = is_end_of_string_08008b24((int)result6,(int)((ulonglong)result6 >> 0x20),(int)result7,\n                                (int)((ulonglong)result7 >> 0x20));\n          if (difference1 == 0) {\n            result4 = calculate_floating_point_08008eec(DAT_20000edc,DAT_20000ee0);\n            result4 = calculate_floating_point_08008eec(result4,result3);\n            result6 = decode_bitwise_operations_08008590(result4);\n            result7 = decode_bitwise_operations_08008590(result3);\n            result7 = calculate_080082d0(0,0x3ff00000,(int)result7,(int)((ulonglong)result7 >> 0x20));\n            result6 = calculate_floating_point_08008894((int)result6,(int)((ulonglong)result6 >> 0x20),(int)result7,\n                                  (int)((ulonglong)result7 >> 0x20));\n            result6 = process_data_080098d0((int)result6,(int)((ulonglong)result6 >> 0x20));\n            concatenationResult1 = calculate_float_08008c30((int)result6,(int)((ulonglong)result6 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + bufferIndex) = concatenationResult1;\n    result4 = process_float_values_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + bufferIndex));\n    difference1 = check_if_concatenation_complete_08009228(concatenationResult1,result4);\n    result3 = result4;\n    if (difference1 != 0) {\n      result3 = concatenationResult1;\n    }\n    *(undefined4 *)(&DAT_20000888 + bufferIndex) = result3;\n    difference1 = concatenate_params_and_check_08009250(result4,*(undefined4 *)(&DAT_20000884 + bufferIndex));\n    if (difference1 == 0) {\n      (&DAT_20000895)[bufferIndex] = 0;\n    }\n    else {\n      (&DAT_20000895)[bufferIndex] = 1;\n    }\n    (&DAT_20000894)[bufferIndex] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + bufferIndex);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = maxValue;\n    DAT_20000d04 = result1;\n    DAT_20000d08 = result2;\n    DAT_20000cf2 = increment_and_check_08002870(DAT_20000cf2);\n    DAT_20000cf4 = inverseProduct1;\n    DAT_20000cf8 = inverseProduct2;\n    DAT_20000cfc = inverseProduct3;\n    concatenate_and_calculate_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_values_and_update_buffer_08003004",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "uVar1": "result1",
                "iVar2": "inverseProduct1",
                "iVar3": "inverseProduct2",
                "iVar4": "inverseProduct3",
                "uVar5": "result2",
                "uVar6": "result3",
                "uVar7": "result4",
                "uVar8": "result5",
                "uVar9": "maxValue",
                "iVar10": "bufferIndex",
                "puVar11": "bufferPointer",
                "iVar12": "difference1",
                "uVar13": "difference2",
                "uVar14": "result6",
                "uVar15": "result7",
                "uVar16": "result8",
                "local_20": "concatenationResult1",
                "local_1c": "concatenationResult2"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_parameters_080035ec",
            "code": "\nvoid initializeParameters_080035ec(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  DAT_20000cf4 = input1;\n  DAT_20000cf8 = input2;\n  DAT_20000cfc = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_parameters_080035ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "update_data_08003618",
            "code": "\nvoid updateData_08003618(undefined4 input)\n\n{\n  undefined4 result;\n  int index;\n  undefined4 temp;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  temp = *(undefined4 *)(&DAT_20000890 + index);\n  result = calculate_result_08008e44(input);\n  result = calculate_floating_point_08008eec(temp,result);\n  temp = calculate_result_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n  result = floating_point_arithmetic_08009054(result,temp);\n  *(undefined4 *)(&DAT_20000890 + index) = result;\n  *(undefined4 *)(&DAT_20000880 + index) = input;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  concatenate_and_calculate_08002edc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "update_data_08003618",
                "param_1": "input",
                "iVar2": "index",
                "uVar1": "result",
                "uVar3": "temp"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "process_string_0800369c",
            "code": "\nvoid process_string_0800369c(char *input_string)\n\n{\n  char *current_char;\n  \n  current_char = input_string;\n  while (*current_char != '\\0') {\n    wait_for_completion_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "process_string_0800369c",
                "param_1": "input_string",
                "local_c": "current_char"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "process_string_080036c6",
            "code": "\nvoid process_string_080036c6(char *input_string)\n\n{\n  char *current_character;\n  \n  current_character = input_string;\n  while (*current_character != '\\0') {\n    wait_for_completion_08008250(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "process_string_080036c6",
                "param_1": "input_string",
                "local_c": "current_character"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "print_binary_bits_080036f0",
            "code": "\nvoid print_binary_bits_080036f0(uint number,int num_bits)\n\n{\n  undefined4 char_to_print;\n  int bit_position;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_position = 0; bit_position < num_bits; bit_position = bit_position + 1) {\n    if ((bit_mask & number) == 0) {\n      char_to_print = 0x30;\n    }\n    else {\n      char_to_print = 0x31;\n    }\n    wait_for_completion_08008250(char_to_print);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "print_binary_bits_080036f0",
                "param_1": "number",
                "param_2": "num_bits",
                "uVar1": "char_to_print",
                "local_10": "bit_position",
                "local_c": "bit_mask"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_binary_bits_08003740",
            "code": "\nvoid print_binary_bits_08003740(undefined data)\n\n{\n  print_binary_bits_08003740_helper(data,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_binary_bits_08003740",
                "param_1": "data",
                "print_binary_bits_080036f0": "print_binary_bits_helper"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_binary_bits_0800375c",
            "code": "\nvoid print_binary_bits_0800375c(undefined2 input_value)\n\n{\n  print_binary_bits_0800375c_080036f0(input_value,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_binary_bits_0800375c",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "convert_and_print_number_08003778",
            "code": "\nvoid convertAndPrintNumber_08003778(uint number)\n\n{\n  uint temp;\n  uint remainingNumber;\n  char digitBuffer [12];\n  byte numDigits;\n  \n  numDigits = 0;\n  remainingNumber = number;\n  if (number == 0) {\n    wait_for_completion_08008250(0x30);\n  }\n  else {\n    for (; remainingNumber != 0; remainingNumber = remainingNumber / 10) {\n      temp = (uint)numDigits;\n      numDigits = numDigits + 1;\n      digitBuffer[temp + 1] = (char)(remainingNumber % 10) + '0';\n    }\n    for (; numDigits != 0; numDigits = numDigits - 1) {\n      wait_for_completion_08008250(digitBuffer[numDigits]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "convert_and_print_number_08003778",
                "param_1": "number",
                "uVar1": "temp",
                "local_1c": "remainingNumber",
                "acStack_15": "digitBuffer",
                "local_9": "numDigits"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid printAbsoluteValue_080037fc(int number)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = number;\n  if (number < 0) {\n    wait_for_completion_08008250(0x2d);\n    absoluteValue = -number;\n  }\n  convert_and_print_number_08003778(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "number",
                "local_c": "absoluteValue"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_to_decimal_08003826",
            "code": "\nvoid convertToDecimal_08003826(uint inputNumber)\n\n{\n  int isConcatenationComplete;\n  undefined4 floatingPointValue;\n  byte tempByte;\n  uint tempUInt;\n  uint modifiedNumber;\n  char decimalString [13];\n  uint divisionResult;\n  byte decimalPosition;\n  byte loopCounter;\n  \n  isConcatenationComplete = check_if_concatenation_complete_08009228(inputNumber,0);\n  modifiedNumber = inputNumber;\n  if (isConcatenationComplete != 0) {\n    wait_for_completion_08008250(0x2d);\n    modifiedNumber = inputNumber ^ 0x80000000;\n  }\n  for (loopCounter = DAT_20000ef9; 1 < loopCounter; loopCounter = loopCounter - 2) {\n    modifiedNumber = calculate_floating_point_08008eec(modifiedNumber,0x42c80000);\n  }\n  if (loopCounter != 0) {\n    modifiedNumber = calculate_floating_point_08008eec(modifiedNumber,0x41200000);\n  }\n  floatingPointValue = calculate_floating_point_08008cdc(modifiedNumber,0x3f000000);\n  decimalPosition = 0;\n  divisionResult = perform_conversion_08009278(floatingPointValue);\n  decimalString[DAT_20000ef9 + 1] = '.';\n  for (; divisionResult != 0; divisionResult = divisionResult / 10) {\n    if (decimalPosition == DAT_20000ef9) {\n      decimalPosition = decimalPosition + 1;\n    }\n    tempUInt = (uint)decimalPosition;\n    decimalPosition = decimalPosition + 1;\n    decimalString[tempUInt + 1] = (char)(divisionResult % 10) + '0';\n  }\n  while (decimalPosition < DAT_20000ef9) {\n    tempUInt = (uint)decimalPosition;\n    decimalPosition = decimalPosition + 1;\n    decimalString[tempUInt + 1] = '0';\n  }\n  if (decimalPosition == DAT_20000ef9) {\n    tempByte = decimalPosition + 1;\n    decimalPosition = decimalPosition + 2;\n    decimalString[tempByte + 1] = '0';\n  }\n  for (; decimalPosition != 0; decimalPosition = decimalPosition - 1) {\n    wait_for_completion_08008250(decimalString[decimalPosition]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_to_decimal_08003826",
                "param_1": "inputNumber",
                "iVar1": "isConcatenationComplete",
                "uVar2": "floatingPointValue",
                "bVar3": "tempByte",
                "uVar4": "tempUInt",
                "local_24": "modifiedNumber",
                "acStack_1d": "decimalString",
                "local_10": "divisionResult",
                "local_a": "decimalPosition",
                "local_9": "loopCounter"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_and_display_grbl_version_080039a0",
            "code": "\nvoid initialize_and_display_grbl_version_080039a0(void)\n\n{\n  initialize_data_08003980();\n  display_grbl_version_08004228();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_and_display_grbl_version_080039a0"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_data_080039bc",
            "code": "\nvoid process_data_080039bc(void)\n\n{\n  int result;\n  undefined4 error_code;\n  byte iteration;\n  \n  for (iteration = 0; iteration < 2; iteration = iteration + 1) {\n    result = check_and_process_data_080039bc_08004d2c(iteration,&DAT_20000d10);\n    if (result == 0) {\n      display_error_message_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      process_string_0800369c(&DAT_20000d10);\n      error_code = decode_and_process_data_080039bc_080005b4(&DAT_20000d10);\n      display_error_message_08004030(error_code);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_data_080039bc",
                "local_9": "iteration",
                "iVar1": "result",
                "uVar2": "error_code"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "process_param_08003a18",
            "code": "\nvoid processParam_08003a18(uint inputParam)\n\n{\n  if ((inputParam & 0x80) == 0) {\n    if ((inputParam & 0x40) == 0) {\n      if ((inputParam & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    checkDataInitialization();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "process_param_08003a18",
                "param_1": "inputParam",
                "initialize_and_check_data_080025e8": "checkDataInitialization"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_alarm_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid processAlarm_08003a74(void)\n\n{\n  byte byteValue;\n  \n  byteValue = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        displayAlarmMessage(0xffffffff);\n        displayMessage(1);\n        do {\n        } while( true );\n      }\n      displayAlarmMessage(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((byteValue & 0x10) == 0) {\n      if ((byteValue & 1) != 0) {\n        printPositionInformation();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((byteValue & 8) != 0) {\n        updateStatusIfRequired();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((byteValue & 4) != 0) {\n        initializeData();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((byteValue & 2) != 0) {\n        initializeIfNeeded();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_alarm_08003a74",
                "bVar1": "byteValue",
                "display_alarm_message_08004148": "displayAlarmMessage",
                "display_message_080041a0": "displayMessage",
                "print_position_information_08004940": "printPositionInformation",
                "update_status_if_required_0800587c": "updateStatusIfRequired",
                "initialize_data_080058a0": "initializeData",
                "initialize_if_needed_0800585c": "initializeIfNeeded"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_command_08003b98",
            "code": "\nuint processCommand_08003b98(char *command)\n\n{\n  byte firstChar;\n  int result;\n  undefined4 configValue;\n  uint returnValue;\n  undefined8 calculationResult;\n  undefined4 secondParam;\n  undefined4 configParam;\n  byte index;\n  byte dataFlag;\n  \n  if (*command != '$') {\n    returnValue = decodeAndProcessData(command);\n    return returnValue;\n  }\n  index = 1;\n  dataFlag = '\\0';\n  firstChar = command[1];\n  if (firstChar == 0) {\n    displayGrblCommands();\n    return 0;\n  }\n  if ((0x58 < firstChar) || (firstChar < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(firstChar) {\n  case 0x23:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    processData();\n    break;\n  case 0x24:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    displayConfig();\n    break;\n  case 0x43:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initializeAndCheckData();\n      displayMessage(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      displayMessage(4);\n    }\n    break;\n  case 0x47:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    processData();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initializeDataProcessing();\n    if (DAT_20000ea8 == '\\0') {\n      processData();\n    }\n    break;\n  case 0x4e:\n    index = 2;\n    if (command[2] == '\\0') {\n      for (dataFlag = 0; dataFlag < 2; dataFlag = dataFlag + 1) {\n        result = checkAndProcessData(dataFlag,command);\n        if (result == 0) {\n          displayErrorMessage(10);\n        }\n        else {\n          processAndPrintStrings(dataFlag,command);\n        }\n      }\n      return 0;\n    }\n    dataFlag = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = parseInteger(command,&index,&configParam);\n    if (result == 0) {\n      return 1;\n    }\n    firstChar = index + 1;\n    if (command[index] != '=') {\n      return 3;\n    }\n    index = firstChar;\n    if (dataFlag == '\\0') {\n      result = parseInteger(command,&index,&secondParam);\n      if (result == 0) {\n        return 1;\n      }\n      if (command[index] == '\\0') {\n        configValue = performConversion(configParam);\n        returnValue = updateConfigValue(configValue,secondParam);\n        return returnValue;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)index - (uint)firstChar] = command[index];\n      returnValue = (uint)index;\n      index = index + 1;\n    } while (command[returnValue] != '\\0');\n    dataFlag = firstChar;\n    dataFlag = decodeAndProcessData(command);\n    if (dataFlag != 0) {\n      return (uint)dataFlag;\n    }\n    calculationResult = decodeBitwiseOperations(configParam);\n    calculationResult = calculateConcatenation((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20));\n    dataFlag = calculateShiftAmount((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20));\n    processAndStoreData(dataFlag,command);\n    break;\n  case 0x58:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      displayMessage(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_command_08003b98",
                "param_1": "command",
                "bVar1": "firstChar",
                "iVar2": "result",
                "uVar3": "configValue",
                "uVar4": "returnValue",
                "uVar5": "calculationResult",
                "local_14": "secondParam",
                "local_10": "configParam",
                "local_a": "index",
                "local_9": "dataFlag",
                "decode_and_process_data_080005b4": "decodeAndProcessData",
                "display_grbl_commands_0800423c": "displayGrblCommands",
                "process_data_080044e8": "processData",
                "display_configuration_08004250": "displayConfig",
                "initialize_and_check_data_080025e8": "initializeAndCheckData",
                "display_message_080041a0": "displayMessage",
                "process_data_080046d0": "processData",
                "initialize_data_processing_080024c4": "initializeDataProcessing",
                "process_data_080039bc": "processData",
                "check_and_process_data_08004d2c": "checkAndProcessData",
                "display_error_message_08004030": "displayErrorMessage",
                "process_and_print_strings_08004900": "processAndPrintStrings",
                "parse_integer_from_byte_array_08002638": "parseInteger",
                "perform_conversion_08009278": "performConversion",
                "update_config_value_08004e30": "updateConfigValue",
                "decode_bitwise_operations_08008590": "decodeBitwiseOperations",
                "calculate_concatenation_08009798": "calculateConcatenation",
                "calculate_shift_amount_08008bf0": "calculateShiftAmount",
                "process_and_store_data_08004bc0": "processAndStoreData"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_input_08003f34",
            "code": "\nvoid process_input_08003f34(void)\n\n{\n  byte input_byte;\n  undefined4 error_code;\n  uint data_index;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = check_and_get_lower_byte_08008286();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            display_error_message_08004030(0xd);\n            initialize_data_08003980();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            data_index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[data_index] = input_byte;\n          }\n          else {\n            data_index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[data_index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    process_alarm_08003a74();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      display_error_message_08004030(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      error_code = process_command_08003b98(&DAT_20000d10);\n      display_error_message_08004030(error_code);\n    }\n    initialize_data_08003980();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_input_08003f34",
                "bVar1": "input_byte",
                "uVar2": "error_code",
                "uVar3": "data_index"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "display_error_message_08004030",
            "code": "\nvoid displayErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    printString(&DAT_0800b5c8);\n  }\n  else {\n    printString(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      printString(\"Bad number format\");\n      break;\n    case '\\x02':\n      printString(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printString(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printString(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printString(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printString(\"Invalid statement\");\n      break;\n    case '\\a':\n      printString(\"Setting disabled\");\n      break;\n    case '\\b':\n      printString(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printString(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printString(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printString(\"Busy or queued\");\n      break;\n    case '\\f':\n      printString(\"Alarm lock\");\n      break;\n    case '\\r':\n      printString(\"Line overflow\");\n    }\n    printString(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "display_error_message_08004030",
                "param_1": "errorCode",
                "process_string_080036c6": "printString"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  printToConsole(\"ALARM: \");\n  if (errorCode == -2) {\n    printToConsole(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    printToConsole(\"Hard limit\");\n  }\n  printToConsole(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode",
                "process_string_080036c6": "printToConsole"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_message_080041a0",
            "code": "\nvoid displayMessage_080041a0(undefined messageType)\n\n{\n  process_string_080036c6(&DAT_0800b710);\n  switch(messageType) {\n  case 1:\n    process_string_080036c6(\"Reset to continue\");\n    break;\n  case 2:\n    process_string_080036c6(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    process_string_080036c6(\"Caution: Unlocked\");\n    break;\n  case 4:\n    process_string_080036c6(\"Enabled\");\n    break;\n  case 5:\n    process_string_080036c6(\"Disabled\");\n  }\n  process_string_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_message_080041a0",
                "param_1": "messageType"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "display_grbl_version_08004228",
            "code": "\nvoid displayGrblVersion_08004228(void)\n\n{\n  printMessage(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "display_grbl_version_08004228",
                "process_string_080036c6": "printMessage"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "display_grbl_commands_0800423c",
            "code": "\nvoid displayGrblCommands_0800423c(void)\n\n{\n  processString(\n              \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "display_grbl_commands_0800423c",
                "process_string_080036c6": "processString"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "display_configuration_08004250",
            "code": "\nvoid displayConfiguration_08004250(void)\n\n{\n  undefined4 uVar1;\n  \n  process_string_080036c6(&DAT_0800b8b8);\n  convert_to_decimal_08003826(DAT_20000ebc);\n  process_string_080036c6(\" (x, step/mm)\\r\\n$1=\");\n  convert_to_decimal_08003826(DAT_20000ec0);\n  process_string_080036c6(\" (y, step/mm)\\r\\n$2=\");\n  convert_to_decimal_08003826(DAT_20000ec4);\n  process_string_080036c6(\" (z, step/mm)\\r\\n$3=\");\n  print_absolute_value_080037fc(DAT_20000ec9);\n  process_string_080036c6(\" (step pulse, usec)\\r\\n$4=\");\n  convert_to_decimal_08003826(DAT_20000ecc);\n  process_string_080036c6(\" (default feed, mm/min)\\r\\n$5=\");\n  convert_to_decimal_08003826(DAT_20000ed0);\n  process_string_080036c6(\" (default seek, mm/min)\\r\\n$6=\");\n  print_absolute_value_080037fc(DAT_20000ed4);\n  process_string_080036c6(\" (step port invert mask, int:\");\n  print_binary_bits_0800375c(DAT_20000ed4);\n  process_string_080036c6(\")\\r\\n$7=\");\n  print_absolute_value_080037fc(DAT_20000ef8);\n  process_string_080036c6(\" (step idle delay, msec)\\r\\n$8=\");\n  uVar1 = floating_point_arithmetic_08009054(DAT_20000edc,0x45610000);\n  convert_to_decimal_08003826(uVar1);\n  process_string_080036c6(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  convert_to_decimal_08003826(DAT_20000ee0);\n  process_string_080036c6(\" (junction deviation, mm)\\r\\n$10=\");\n  convert_to_decimal_08003826(DAT_20000ed8);\n  process_string_080036c6(\" (arc, mm/segment)\\r\\n$11=\");\n  print_absolute_value_080037fc(DAT_20000efa);\n  process_string_080036c6(\" (n-arc correction, int)\\r\\n$12=\");\n  print_absolute_value_080037fc(DAT_20000ef9);\n  process_string_080036c6(\" (n-decimals, int)\\r\\n$13=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 1) != 0);\n  process_string_080036c6(\" (report inches, bool)\\r\\n$14=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 2) != 0);\n  process_string_080036c6(\" (auto start, bool)\\r\\n$15=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 4) != 0);\n  process_string_080036c6(\" (invert step enable, bool)\\r\\n$16=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 8) != 0);\n  process_string_080036c6(\" (hard limits, bool)\\r\\n$17=\");\n  print_absolute_value_080037fc((DAT_20000ee4 & 0x10) != 0);\n  process_string_080036c6(\" (homing cycle, bool)\\r\\n$18=\");\n  print_absolute_value_080037fc(DAT_20000ee6);\n  process_string_080036c6(\" (homing dir invert mask, int:\");\n  print_binary_bits_0800375c(DAT_20000ee6);\n  process_string_080036c6(\")\\r\\n$19=\");\n  convert_to_decimal_08003826(DAT_20000ee8);\n  process_string_080036c6(\" (homing feed, mm/min)\\r\\n$20=\");\n  convert_to_decimal_08003826(DAT_20000eec);\n  process_string_080036c6(\" (homing seek, mm/min)\\r\\n$21=\");\n  print_absolute_value_080037fc(DAT_20000ef0);\n  process_string_080036c6(\" (homing debounce, msec)\\r\\n$22=\");\n  convert_to_decimal_08003826(DAT_20000ef4);\n  process_string_080036c6(\" (homing pull-off, mm)\\r\\n$23=\");\n  print_absolute_value_080037fc(DAT_20000ed6);\n  process_string_080036c6(\" (dir port invert mask, int:\");\n  print_binary_bits_0800375c(DAT_20000ed6);\n  process_string_080036c6(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "display_configuration_08004250"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "process_data_080044e8",
            "code": "\nvoid processData_080044e8(void)\n\n{\n  int result;\n  undefined4 convertedFloat;\n  undefined8 bitwiseResult;\n  undefined4 dataArray [3];\n  byte index;\n  byte counter;\n  \n  counter = 0;\n  while( true ) {\n    if (7 < counter) {\n      process_string_080036c6(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          convert_to_decimal_08003826(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          bitwiseResult = decode_bitwise_operations_08008590(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          bitwiseResult = calculate_result_08008640((int)bitwiseResult,(int)((ulonglong)bitwiseResult >> 0x20),0x57e16865,0x3fa42851);\n          convertedFloat = calculate_float_08008c30((int)bitwiseResult,(int)((ulonglong)bitwiseResult >> 0x20));\n          convert_to_decimal_08003826(convertedFloat);\n        }\n        if (index < 2) {\n          process_string_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          process_string_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    result = check_and_process_data_08004d7c(counter,dataArray);\n    if (result == 0) break;\n    process_string_080036c6(&DAT_0800bb98);\n    switch(counter) {\n    case 0:\n      process_string_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      process_string_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      process_string_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      process_string_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      process_string_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      process_string_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      process_string_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      process_string_080036c6(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        convert_to_decimal_08003826(dataArray[index]);\n      }\n      else {\n        bitwiseResult = decode_bitwise_operations_08008590(dataArray[index]);\n        bitwiseResult = calculate_result_08008640((int)bitwiseResult,(int)((ulonglong)bitwiseResult >> 0x20),0x57e16865,0x3fa42851);\n        convertedFloat = calculate_float_08008c30((int)bitwiseResult,(int)((ulonglong)bitwiseResult >> 0x20));\n        convert_to_decimal_08003826(convertedFloat);\n      }\n      if (index < 2) {\n        process_string_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        process_string_080036c6(&DAT_0800b764);\n      }\n    }\n    counter = counter + 1;\n  }\n  display_error_message_08004030(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "process_data_080044e8",
                "iVar1": "result",
                "uVar2": "convertedFloat",
                "uVar3": "bitwiseResult",
                "auStack_18": "dataArray",
                "local_a": "index",
                "local_9": "counter"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "process_data_080046d0",
            "code": "\nvoid process_data_080046d0(void)\n\n{\n  undefined4 uVar1;\n  undefined8 uVar2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    process_string(&DAT_0800bbc8);\n    break;\n  case 1:\n    process_string(&DAT_0800bbcc);\n    break;\n  case 2:\n    process_string(&DAT_0800bbd0);\n    break;\n  case 3:\n    process_string(&DAT_0800bbd4);\n    break;\n  case 4:\n    process_string(&DAT_0800bbd8);\n  }\n  process_string(&DAT_0800bbe0);\n  print_absolute_value(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      process_string(&DAT_0800bbe4);\n    }\n    else {\n      process_string(&DAT_0800bbec);\n    }\n  }\n  else {\n    process_string(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    process_string(&DAT_0800bc04);\n  }\n  else {\n    process_string(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    process_string(&DAT_0800bc14);\n  }\n  else {\n    process_string(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    process_string(&DAT_0800bc24);\n  }\n  else {\n    process_string(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    process_string(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      process_string(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      process_string(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    process_string(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      process_string(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      process_string(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    process_string(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      process_string(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      process_string(&DAT_0800bc48);\n    }\n  }\n  process_string(&DAT_0800bc50);\n  print_absolute_value(DAT_20000e88);\n  process_string(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    convert_to_decimal(DAT_20000e78);\n  }\n  else {\n    uVar2 = decode_bitwise_operations(DAT_20000e78);\n    uVar2 = calculate_result((int)uVar2,(int)((ulonglong)uVar2 >> 0x20),0x57e16865,0x3fa42851);\n    uVar1 = calculate_float((int)uVar2,(int)((ulonglong)uVar2 >> 0x20));\n    convert_to_decimal(uVar1);\n  }\n  process_string(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "process_data_080046d0",
                "process_string_080036c6": "process_string",
                "print_absolute_value_080037fc": "print_absolute_value",
                "convert_to_decimal_08003826": "convert_to_decimal",
                "decode_bitwise_operations_08008590": "decode_bitwise_operations",
                "calculate_result_08008640": "calculate_result",
                "calculate_float_08008c30": "calculate_float"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "process_and_print_strings_08004900",
            "code": "\nvoid processAndPrintStrings_08004900(undefined input,undefined4 value)\n\n{\n  process_string_080036c6(&DAT_0800bc58);\n  print_absolute_value_080037fc(input);\n  process_string_080036c6(&DAT_0800bc5c);\n  process_string_0800369c(value);\n  process_string_080036c6(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "process_and_print_strings_08004900",
                "param_1": "input",
                "param_2": "value"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_position_information_08004940",
            "code": "\nvoid printPositionInformation_08004940(void)\n\n{\n  undefined4 result1;\n  uint index;\n  undefined4 result2;\n  undefined8 decodedValue1;\n  undefined8 decodedValue2;\n  undefined4 positionData [6];\n  byte counter;\n  \n  positionData[3] = DAT_20000eac;\n  positionData[4] = DAT_20000eb0;\n  positionData[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    process_string_080036c6(\"<Idle\");\n    break;\n  case 2:\n    process_string_080036c6(\"<Queue\");\n    break;\n  case 3:\n    process_string_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    process_string_080036c6(\"<Hold\");\n    break;\n  case 5:\n    process_string_080036c6(\"<Home\");\n    break;\n  case 6:\n    process_string_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    process_string_080036c6(\"<Check\");\n  }\n  process_string_080036c6(\",MPos:\");\n  for (counter = 0; counter < 3; counter = counter + 1) {\n    result1 = calculate_result_08008e44(positionData[counter + 3]);\n    index = (uint)counter;\n    result1 = floating_point_arithmetic_08009054(result1,(&DAT_20000ebc)[counter]);\n    positionData[index] = result1;\n    if ((DAT_20000ee4 & 1) != 0) {\n      decodedValue1 = decode_bitwise_operations_08008590(positionData[counter]);\n      decodedValue1 = calculate_result_08008640((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)counter;\n      result1 = calculate_float_08008c30((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n      positionData[index] = result1;\n    }\n    convert_to_decimal_08003826(positionData[counter]);\n    process_string_080036c6(&DAT_0800bbbc);\n  }\n  process_string_080036c6(\"WPos:\");\n  for (counter = 0; counter < 3; counter = counter + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      result2 = positionData[counter];\n      result1 = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (counter + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (counter + 10) * 4));\n      index = (uint)counter;\n      result1 = calculate_float_value_08008cd8(result2,result1);\n      positionData[index] = result1;\n    }\n    else {\n      decodedValue1 = decode_bitwise_operations_08008590(positionData[counter]);\n      result1 = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (counter + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (counter + 10) * 4));\n      decodedValue2 = decode_bitwise_operations_08008590(result1);\n      decodedValue2 = calculate_result_08008640((int)decodedValue2,(int)((ulonglong)decodedValue2 >> 0x20),0x57e16865,0x3fa42851);\n      decodedValue1 = calculate_080082d0((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20),(int)decodedValue2,\n                           (int)((ulonglong)decodedValue2 >> 0x20));\n      index = (uint)counter;\n      result1 = calculate_float_08008c30((int)decodedValue1,(int)((ulonglong)decodedValue1 >> 0x20));\n      positionData[index] = result1;\n    }\n    convert_to_decimal_08003826(positionData[counter]);\n    if (counter < 2) {\n      process_string_080036c6(&DAT_0800bbbc);\n    }\n  }\n  process_string_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_position_information_08004940",
                "auStack_2c": "positionData",
                "uVar1": "result1",
                "uVar2": "index",
                "uVar3": "result2",
                "uVar4": "decodedValue1",
                "uVar5": "decodedValue2",
                "local_11": "counter"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "process_and_store_data_08004bc0",
            "code": "\nvoid processAndStoreData_08004bc0(byte inputByte,undefined4 inputValue)\n\n{\n  processData((unsignedShort)inputByte * 0x101 + 0x300,inputValue,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "process_and_store_data_08004bc0",
                "param_1": "inputByte",
                "param_2": "inputValue",
                "process_and_store_data_08000374": "processData",
                "ushort": "unsignedShort"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "process_and_store_data_08004bf4",
            "code": "\nvoid processAndStoreData_08004bf4(byte inputByte,undefined4 inputData)\n\n{\n  process_and_store_data_08000374((ushort)inputByte * 0xd + 0x200,inputData,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "process_and_store_data_08004bf4",
                "param_1": "inputByte",
                "param_2": "inputData"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_data_08004c2a",
            "code": "\nvoid initializeData_08004c2a(void)\n\n{\n  storeData(0,5);\n  processAndStoreData(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_data_08004c2a",
                "store_data_08000340": "storeData",
                "process_and_store_data_08000374": "processAndStoreData"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_configuration_08004c48",
            "code": "\nvoid initialize_configuration_08004c48(char input_value)\n\n{\n  if (input_value != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_configuration_08004c48",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "check_and_process_data_08004d2c",
            "code": "\nbool checkAndProcessData_08004d2c(byte byteValue,undefined *pointer)\n\n{\n  int memoryCheckResult;\n  \n  memoryCheckResult = check_memory_equality_080003ec(pointer,(ushort)byteValue * 0x101 + 0x300,0x100);\n  if (memoryCheckResult == 0) {\n    *pointer = 0;\n    process_and_store_data_08004bc0(byteValue,pointer);\n  }\n  return memoryCheckResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "check_and_process_data_08004d2c",
                "param_1": "byteValue",
                "param_2": "pointer",
                "iVar1": "memoryCheckResult"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "check_and_process_data_08004d7c",
            "code": "\nbool checkAndProcessData_08004d7c(byte byteValue,undefined4 dataPtr)\n\n{\n  int isEqual;\n  \n  isEqual = check_memory_equality_080003ec(dataPtr,(ushort)byteValue * 0xd + 0x200,0xc);\n  if (isEqual == 0) {\n    fill_memory_with_byte_0800b430(dataPtr,0,0xc);\n    process_and_store_data_08004bf4(byteValue,dataPtr);\n  }\n  return isEqual != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "check_and_process_data_08004d7c",
                "param_1": "byteValue",
                "param_2": "dataPtr",
                "iVar1": "isEqual"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "check_memory_equality_and_initialize_08004dd2",
            "code": "\nundefined4 check_memory_equality_and_initialize_08004dd2(void)\n\n{\n  byte memoryValue;\n  int isMemoryEqual;\n  \n  memoryValue = get_memory_value_08000310(0);\n  if (memoryValue == 5) {\n    isMemoryEqual = check_memory_equality_080003ec(&DAT_20000ebc,1,0x40);\n    if (isMemoryEqual == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < memoryValue) {\n      return 0;\n    }\n    isMemoryEqual = check_memory_equality_080003ec(&DAT_20000ebc,1,0x28);\n    if (isMemoryEqual == 0) {\n      return 0;\n    }\n    initialize_configuration_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "check_memory_equality_and_initialize_08004dd2",
                "bVar1": "memoryValue",
                "iVar2": "isMemoryEqual"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_config_value_08004e30",
            "code": "\nundefined4 updateConfigValue_08004e30(int configIndex,uint configValue)\n\n{\n  undefined4 result;\n  int errorCheck;\n  undefined8 floatValue;\n  \n  switch(configIndex) {\n  case 0:\n  case 1:\n  case 2:\n    errorCheck = check_concatenation_result_0800923c(configValue,0);\n    if (errorCheck != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[configIndex] = configValue;\n    break;\n  case 3:\n    errorCheck = check_if_concatenation_complete_08009228(configValue,0x40400000);\n    if (errorCheck != 0) {\n      return 9;\n    }\n    floatValue = decode_bitwise_operations_08008590(configValue);\n    floatValue = convert_float_to_long_08009654((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    DAT_20000ec9 = calculate_shift_amount_08008bf0((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = configValue;\n    break;\n  case 5:\n    DAT_20000ed0 = configValue;\n    break;\n  case 6:\n    floatValue = decode_bitwise_operations_08008590(configValue);\n    floatValue = calculate_concatenation_08009798((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    DAT_20000ed4 = calculate_shift_amount_08008bf0((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    break;\n  case 7:\n    floatValue = decode_bitwise_operations_08008590(configValue);\n    floatValue = convert_float_to_long_08009654((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    DAT_20000ef8 = calculate_shift_amount_08008bf0((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    break;\n  case 8:\n    result = calculate_floating_point_08008eec(configValue,0x42700000);\n    DAT_20000edc = calculate_floating_point_08008eec(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = configValue & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = configValue;\n    break;\n  case 0xb:\n    floatValue = decode_bitwise_operations_08008590(configValue);\n    floatValue = convert_float_to_long_08009654((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    DAT_20000efa = calculate_shift_amount_08008bf0((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    break;\n  case 0xc:\n    floatValue = decode_bitwise_operations_08008590(configValue);\n    floatValue = convert_float_to_long_08009654((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    DAT_20000ef9 = calculate_shift_amount_08008bf0((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    break;\n  case 0xd:\n    errorCheck = check_concatenation_result_08009214(configValue,0);\n    if (errorCheck == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    errorCheck = check_concatenation_result_08009214(configValue,0);\n    if (errorCheck == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    errorCheck = check_concatenation_result_08009214(configValue,0);\n    if (errorCheck == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    errorCheck = check_concatenation_result_08009214(configValue,0);\n    if (errorCheck == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    extract_bit_from_flag_0800192c();\n    break;\n  case 0x11:\n    errorCheck = check_concatenation_result_08009214(configValue,0);\n    if (errorCheck == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    floatValue = decode_bitwise_operations_08008590(configValue);\n    floatValue = calculate_concatenation_08009798((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    DAT_20000ee6 = calculate_shift_amount_08008bf0((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = configValue;\n    break;\n  case 0x14:\n    DAT_20000eec = configValue;\n    break;\n  case 0x15:\n    floatValue = decode_bitwise_operations_08008590(configValue);\n    floatValue = convert_float_to_long_08009654((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    DAT_20000ef0 = calculate_shift_amount_08008bf0((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = configValue;\n    break;\n  case 0x17:\n    floatValue = decode_bitwise_operations_08008590(configValue);\n    floatValue = calculate_concatenation_08009798((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    DAT_20000ed6 = calculate_shift_amount_08008bf0((int)floatValue,(int)((ulonglong)floatValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_config_value_08004e30",
                "param_1": "configIndex",
                "param_2": "configValue",
                "uVar1": "result",
                "iVar2": "errorCheck",
                "uVar3": "floatValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "process_data_and_display_results_080051b4",
            "code": "\nvoid processDataAndDisplayResults_080051b4(void)\n\n{\n  int result;\n  undefined temporaryBuffer [15];\n  byte index;\n  \n  result = check_memory_equality_and_initialize_08004dd2();\n  if (result == 0) {\n    display_error_message_08004030(10);\n    initialize_configuration_08004c48(1);\n    display_configuration_08004250();\n  }\n  for (index = 0; index < 8; index = index + 1) {\n    result = check_and_process_data_08004d7c(index,temporaryBuffer);\n    if (result == 0) {\n      display_error_message_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "process_data_and_display_results_080051b4",
                "iVar1": "result",
                "auStack_18": "temporaryBuffer",
                "local_9": "index"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_main_function_08005238",
            "code": "\nvoid initialize_main_function_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  initialize_helper_function();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_main_function_08005238",
                "initialize_08005250": "initialize_helper_function"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "initialize_08005250",
            "code": "\nvoid initialize_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "initialize_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "process_and_initialize_data_0800525c",
            "code": "\nvoid processAndInitializeData_0800525c(byte byteData)\n\n{\n  if ((int)(char)byteData != (uint)DAT_20000e12) {\n    processDataBlocks();\n    if (byteData == 0) {\n      initializeData();\n      DAT_20000e12 = byteData;\n    }\n    else {\n      if ((char)byteData < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = byteData;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "process_and_initialize_data_0800525c",
                "param_1": "byteData",
                "process_data_blocks_08002fd4": "processDataBlocks",
                "initialize_08005250": "initializeData"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_register_value_080052ac",
            "code": "\n\n\nvoid updateRegisterValue_080052ac(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_register_value_080052ac",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_data_080052dc",
            "code": "\n\n\nvoid updateData_080052dc(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_data_080052dc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_min_value_08005324",
            "code": "\nvoid calculateMinValue_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  update_min_value_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_min_value_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "calculate_overflow_08005360",
            "code": "\nbool calculateOverflow_08005360(void)\n\n{\n  bool isOverflow;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isOverflow = 420000 < DAT_20000e2c;\n  if (isOverflow) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isOverflow;\n}\n\n",
            "renaming": {
                "FUN_08005360": "calculate_overflow_08005360",
                "bVar1": "isOverflow"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_data_and_flags_080053a0",
            "code": "\nvoid update_data_and_flags_080053a0(void)\n\n{\n  int iVar1;\n  \n  update_data(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)get_next_data_block();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      clear_and_check_flags();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculate_min_value(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iVar1 = calculate_overflow();\n        if (iVar1 != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculate_min_value(DAT_20000e30);\n          }\n          else {\n            clear_and_check_flags();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iVar1 = calculate_overflow();\n        if (iVar1 != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculate_min_value(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculate_min_value(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iVar1 = calculate_overflow();\n        if (iVar1 != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculate_min_value(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      update_data_if_not_equal();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_data_and_flags_080053a0",
                "update_data_080052dc": "update_data",
                "get_next_data_block_08002f74": "get_next_data_block",
                "clear_and_check_flags_080057e4": "clear_and_check_flags",
                "calculate_min_value_08005324": "calculate_min_value",
                "calculate_overflow_08005360": "calculate_overflow",
                "update_data_if_not_equal_08002f40": "update_data_if_not_equal"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_register_value_08005760",
            "code": "\nvoid initialize_register_value_08005760(void)\n\n{\n  update_register_value_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_register_value_08005760"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_and_update_register_value_08005778",
            "code": "\nvoid initializeAndUpdateRegisterValue_08005778(void)\n\n{\n  update_register_value_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_and_update_register_value_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_memory_08005790",
            "code": "\nvoid initializeMemory_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    setMemoryAddress(0x69);\n    setGlobalVariable((DAT_20000ec9 + 5) * 0x15);\n    setFlags();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_memory_08005790",
                "set_memory_address_08007c40": "setMemoryAddress",
                "set_global_variable_08007c5e": "setGlobalVariable",
                "set_flags_08007b70": "setFlags"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "clear_and_check_flags_080057e4",
            "code": "\nvoid clearAndCheckFlags_080057e4(void)\n\n{\n  clear_flags_08007bc2();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "clear_and_check_flags_080057e4"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_memory_08005814",
            "code": "\nvoid initializeMemory_08005814(void)\n\n{\n  fill_memory_with_byte_0800b430(&DAT_20000e14,0,0x24);\n  calculate_min_value_08005324(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_memory_08005814"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_system_0800583c",
            "code": "\nvoid initialize_system_0800583c(void)\n\n{\n  update_register_value(DAT_20000ed4);\n  initialize_memory();\n  clear_and_check_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_system_0800583c",
                "update_register_value_080052ac": "update_register_value",
                "initialize_memory_08005790": "initialize_memory",
                "clear_and_check_flags_080057e4": "clear_and_check_flags"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_if_needed_0800585c",
            "code": "\nvoid initialize_if_needed_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_memory();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_if_needed_0800585c",
                "initialize_memory_08005790": "initialize_memory"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_if_required_0800587c",
            "code": "\nvoid updateStatusIfRequired_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_if_required_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_data_080058a0",
            "code": "\nvoid initializeData_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    updateData(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculateMinValue(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_data_080058a0",
                "update_data_08003618": "updateData",
                "calculate_min_value_08005324": "calculateMinValue"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "check_and_update_flags_08005900",
            "code": "\nundefined4 check_and_update_flags_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        initialize_and_validate_data();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "check_and_update_flags_08005900",
                "param_1": "byte_value",
                "initialize_and_check_data_080025e8": "initialize_and_validate_data"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "call_software_interrupt_0800597c",
            "code": "\nvoid callSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "call_software_interrupt_0800597c"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "check_interrupt_08005984",
            "code": "\nundefined4 checkInterrupt_08005984(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = call_software_interrupt_0800597c(1,input_param,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "check_interrupt_08005984",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_and_configure_memory_080059b4",
            "code": "\n\n\nundefined4 initialize_and_configure_memory_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  initialize_memory(16000);\n  initialize_memory_configuration(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_and_configure_memory_080059b4",
                "initialize_memory_08006d72": "initialize_memory",
                "initialize_memory_configuration_08006ce0": "initialize_memory_configuration"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_global_data_08005a84",
            "code": "\nundefined4 getGlobalData_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_global_data_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "check_global_data_range_08005a98",
            "code": "\nvoid checkGlobalDataRange_08005a98(int targetValue)\n\n{\n  int initialValue;\n  uint currentValue;\n  \n  initialValue = get_global_data_08005a84();\n  do {\n    currentValue = get_global_data_08005a84();\n  } while (currentValue < (uint)(targetValue + initialValue));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "check_global_data_range_08005a98",
                "param_1": "targetValue",
                "iVar1": "initialValue",
                "uVar2": "currentValue"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "store_data_08005bdc",
            "code": "\nvoid storeData_08005bdc(byte data,uint value)\n\n{\n  if ((char)data < '\\0') {\n    *(char *)((data & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)data + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "store_data_08005bdc",
                "param_1": "data",
                "param_2": "value"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_set_variables_08005c30",
            "code": "\n\n\nbool checkAndSetVariables_08005c30(int input)\n\n{\n  bool isInputValid;\n  \n  isInputValid = input - 1U < 0x1000000;\n  if (isInputValid) {\n    _DAT_e000e014 = input + -1;\n    store_data_08005bdc(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInputValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_set_variables_08005c30",
                "param_1": "input",
                "bVar1": "isInputValid"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_function_conditions_08005cec",
            "code": "\n\n\nundefined4 checkFunctionConditions_08005cec(uint *inputParams)\n\n{\n  int localVar1;\n  uint localVar2;\n  \n  if ((*inputParams & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (inputParams[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 5000U <= localVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)inputParams[1],_DAT_40023800));\n      if (inputParams[1] == 1) {\n        localVar1 = get_global_data_08005a84();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          localVar2 = get_global_data_08005a84();\n          if (localVar1 + 5000U <= localVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        localVar1 = get_global_data_08005a84();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          localVar2 = get_global_data_08005a84();\n          if (localVar1 + 5000U <= localVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*inputParams & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (inputParams[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (inputParams[3] == 0) {\n      _DAT_42470000 = 0;\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023800 & 2) != 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 100U <= localVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023800 & 2) == 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 100U <= localVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = inputParams[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*inputParams & 8) != 0) {\n    if (inputParams[5] == 0) {\n      _DAT_42470e80 = 0;\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023874 & 2) != 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 100U <= localVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023874 & 2) == 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 100U <= localVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*inputParams & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    localVar1 = get_global_data_08005a84();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      localVar2 = get_global_data_08005a84();\n      if (localVar1 + 100U <= localVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    localVar1 = get_global_data_08005a84();\n    while ((_DAT_40023870 & 2) != 0) {\n      localVar2 = get_global_data_08005a84();\n      if (localVar1 + 5000U <= localVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)inputParams[2]);\n    if (inputParams[2] == 1) {\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023870 & 2) == 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 5000U <= localVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023870 & 2) != 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 5000U <= localVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (inputParams[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (inputParams[6] == 2) {\n      _DAT_42470060 = 0;\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 100U <= localVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           inputParams[0xb] << 0x18 |\n           inputParams[8] | inputParams[9] << 6 | ((inputParams[10] >> 1) - 1) * 0x10000 | inputParams[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 100U <= localVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      localVar1 = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        localVar2 = get_global_data_08005a84();\n        if (localVar1 + 100U <= localVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_function_conditions_08005cec",
                "param_1": "inputParams",
                "iVar1": "localVar1",
                "uVar2": "localVar2",
                "param_1[1]": "inputParams[1]",
                "param_1[2]": "inputParams[2]",
                "param_1[3]": "inputParams[3]",
                "param_1[4]": "inputParams[4]",
                "param_1[5]": "inputParams[5]",
                "param_1[6]": "inputParams[6]",
                "param_1[7]": "inputParams[7]",
                "param_1[8]": "inputParams[8]",
                "param_1[9]": "inputParams[9]",
                "param_1[10]": "inputParams[10]"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "check_and_set_clock_frequency_0800618c",
            "code": "\n\n\nundefined4 check_and_set_clock_frequency_0800618c(uint *config_params,uint param_length)\n\n{\n  int global_data;\n  uint current_data;\n  uint target_data;\n  undefined8 clock_frequency;\n  \n  if ((_DAT_40023c00 & 0xf) < param_length) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)param_length);\n    if (param_length != (param_length & 0xf)) {\n      return 1;\n    }\n    if ((*config_params & 1) != 0) {\n      if (config_params[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((config_params[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = config_params[1] | _DAT_40023808 & 0xfffffffc;\n      global_data = get_global_data_08005a84();\n      target_data = global_data + 5000;\n      if (config_params[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else if (config_params[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*config_params & 1) != 0) {\n      if (config_params[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (config_params[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = config_params[1] | _DAT_40023808 & 0xfffffffc;\n      global_data = get_global_data_08005a84();\n      target_data = global_data + 5000;\n      if (config_params[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else if (config_params[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)param_length);\n    if (param_length != (param_length & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 2) != 0) {\n    _DAT_40023808 = config_params[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*config_params & 4) != 0) {\n    _DAT_40023808 = config_params[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*config_params & 8) != 0) {\n    _DAT_40023808 = config_params[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clock_frequency = calculate_clock_frequency_08006628();\n  check_and_set_variables_08005c30((uint)clock_frequency / 1000,(int)((ulonglong)clock_frequency >> 0x20),(uint)clock_frequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "check_and_set_clock_frequency_0800618c",
                "param_1": "config_params",
                "param_2": "param_length",
                "iVar1": "global_data",
                "uVar2": "current_data",
                "uVar3": "target_data",
                "uVar4": "clock_frequency"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "update_flag_and_parameters_0800640c",
            "code": "\n\n\nvoid updateFlagAndParameters_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    param1 = 0x100;\n    param2 = 2;\n    param4 = 3;\n    param3 = 0;\n    param5 = 0;\n    updateParameters(0x40020000,&param1);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    param1 = 0x200;\n    param2 = 2;\n    param4 = 3;\n    param3 = 0;\n    param5 = 0;\n    updateParameters(0x40020800,&param1);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "update_flag_and_parameters_0800640c",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "local_1c": "param1",
                "local_18": "param2",
                "local_14": "param3",
                "local_10": "param4",
                "local_c": "param5",
                "update_parameters_08006e88": "updateParameters"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_frequency_080064ec",
            "code": "\n\n\nuint calculateClockFrequency_080064ec(void)\n\n{\n  uint configFlag;\n  uint clockFrequency;\n  \n  configFlag = _DAT_40023808 & 0xc;\n  if (configFlag == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockFrequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (configFlag < 9) {\n    if (configFlag == 0) {\n      return 16000000;\n    }\n    if (configFlag == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "uVar1": "configFlag",
                "local_c": "clockFrequency"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_clock_frequency_08006628",
            "code": "\n\n\nuint calculateClockFrequency_08006628(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_080064ec();\n  DAT_20000000 = clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_clock_frequency_08006628",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_clock_frequency_08006680",
            "code": "\n\n\nuint calculateClockFrequency_08006680(void)\n\n{\n  uint uVar1;\n  \n  uVar1 = calculate_clock_frequency_08006628();\n  return uVar1 >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_clock_frequency_08006680"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_adjusted_clock_frequency_080066cc",
            "code": "\n\n\nuint calculateAdjustedClockFrequency_080066cc(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculateActualClockFrequency();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_adjusted_clock_frequency_080066cc",
                "uVar1": "clockFrequency",
                "calculate_clock_frequency_08006628": "calculateActualClockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_memory_configuration_08006950",
            "code": "\n\n\nvoid setMemoryConfiguration_08006950(uint memoryConfig)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (memoryConfig & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_memory_configuration_08006950",
                "param_1": "memoryConfig"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_bit_shifted_value_08006998",
            "code": "\n\n\nuint getBitShiftedValue_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 bitwiseAnd 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_bit_shifted_value_08006998",
                "&": "bitwiseAnd"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_in_memory_080069b4",
            "code": "\nvoid setBitInMemory_080069b4(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_at_index_080069e4",
            "code": "\nvoid setBitAtIndex_080069e4(byte byteToSet)\n\n{\n  *(int *)((((uint)(int)(char)byteToSet >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_at_index_080069e4",
                "param_1": "byteToSet"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "is_bit_set_08006a18",
            "code": "\nbool isBitSet_08006a18(byte input_byte)\n\n{\n  return (*(uint *)((((uint)(int)(char)input_byte >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (input_byte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "is_bit_set_08006a18",
                "param_1": "input_byte"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_in_array_08006a58",
            "code": "\nvoid setBitInArray_08006a58(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_in_array_08006a58",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_08006a8c",
            "code": "\nvoid setBit_08006a8c(byte byteValue)\n\n{\n  *(int *)((((uint)(int)(char)byteValue >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_08006a8c",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_set_08006ac0",
            "code": "\nbool checkBitSet_08006ac0(byte inputByte)\n\n{\n  return (*(uint *)((((uint)(int)(char)inputByte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (inputByte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_set_08006ac0",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "write_to_memory_08006b00",
            "code": "\nvoid writeToMemory_08006b00(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "write_to_memory_08006b00",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "get_shifted_byte_08006b54",
            "code": "\nbyte getShiftedByte_08006b54(byte inputByte)\n\n{\n  byte resultByte;\n  \n  if ((char)inputByte < '\\0') {\n    resultByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    resultByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return resultByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "get_shifted_byte_08006b54",
                "param_1": "inputByte",
                "bVar1": "resultByte"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "apply_bitmask_08006ba0",
            "code": "\nuint applyBitmask_08006ba0(uint inputBits,uint originalBits,uint valueToApply)\n\n{\n  uint shiftValue;\n  \n  inputBits = inputBits & 7;\n  shiftValue = 7 - inputBits;\n  if (3 < shiftValue) {\n    shiftValue = 4;\n  }\n  if (inputBits + 4 < 7) {\n    inputBits = 0;\n  }\n  else {\n    inputBits = inputBits - 3;\n  }\n  return valueToApply & (1 << (inputBits & 0xff)) - 1U |\n         ((1 << (shiftValue & 0xff)) - 1U & originalBits) << (inputBits & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "apply_bitmask_08006ba0",
                "param_1": "inputBits",
                "param_2": "originalBits",
                "param_3": "valueToApply",
                "uVar1": "shiftValue"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extractBits_08006c04(uint input,uint position,uint *result1,uint *result2)\n\n{\n  uint shiftAmount;\n  \n  position = position & 7;\n  shiftAmount = 7 - position;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (position + 4 < 7) {\n    position = 0;\n  }\n  else {\n    position = position - 3;\n  }\n  *result1 = (1 << (shiftAmount & 0xff)) - 1U & input >> (position & 0xff);\n  *result2 = (1 << (position & 0xff)) - 1U & input;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "position",
                "param_3": "result1",
                "param_4": "result2",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\nvoid infiniteLoop_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_initialize_memory_08006c9c",
            "code": "\n\n\nbool checkAndInitializeMemory_08006c9c(int inputValue)\n\n{\n  bool isValueValid;\n  \n  isValueValid = inputValue - 1U < 0x1000000;\n  if (isValueValid) {\n    _DAT_e000e014 = inputValue + -1;\n    write_to_memory_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValueValid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_initialize_memory_08006c9c",
                "param_1": "inputValue",
                "bVar1": "isValueValid"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "initialize_memory_configuration_08006ce0",
            "code": "\nvoid initialize_memory_configuration_08006ce0(undefined4 memory_configuration_parameter)\n\n{\n  set_memory_configuration(memory_configuration_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "initialize_memory_configuration_08006ce0",
                "param_1": "memory_configuration_parameter",
                "set_memory_configuration_08006950": "set_memory_configuration"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "apply_bitmask_and_write_08006cf6",
            "code": "\nvoid applyBitmaskAndWrite_08006cf6(char data,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 shiftedValue;\n  \n  shiftedValue = get_bit_shifted_value_08006998();\n  shiftedValue = apply_bitmask_08006ba0(shiftedValue,value1,value2);\n  write_to_memory_08006b00((int)data,shiftedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "apply_bitmask_and_write_08006cf6",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "shiftedValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_in_memory_08006d2e",
            "code": "\nvoid setBitInMemory_08006d2e(char character)\n\n{\n  setBitInMemory_08006d2eHelper((int)character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_in_memory_08006d2e",
                "param_1": "character",
                "set_bit_in_memory_080069b4": "setBitInMemoryHelper"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "set_bit_at_index_08006d4a",
            "code": "\nvoid setBitAtIndex_08006d4a(char index)\n\n{\n  set_bit_at_index_080069e4((int)index);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "set_bit_at_index_08006d4a",
                "param_1": "index"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "run_infinite_loop_08006d66",
            "code": "\nvoid run_infinite_loop_08006d66(void)\n\n{\n  infinite_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "run_infinite_loop_08006d66",
                "infinite_loop_08006c70": "infinite_loop"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "initialize_memory_08006d72",
            "code": "\nundefined4 initialize_memory_08006d72(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_initialize_memory_08006d72_08006c9c(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "initialize_memory_08006d72",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_bit_shifted_value_08006d8a",
            "code": "\nundefined4 get_bit_shifted_value_08006d8a(void)\n\n{\n  undefined4 bit_shifted_value;\n  \n  bit_shifted_value = get_bit_shifted_value_08006d8a_08006998();\n  return bit_shifted_value;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_bit_shifted_value_08006d8a",
                "uVar1": "bit_shifted_value"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "extract_and_shift_bits_08006d98",
            "code": "\nvoid extractAndShiftBits_08006d98(char inputChar,undefined4 output1,undefined4 output2,undefined4 output3)\n\n{\n  undefined4 shiftedByte;\n  \n  shiftedByte = get_shifted_byte_08006b54((int)inputChar);\n  extract_bits_08006c04(shiftedByte,output1,output2,output3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "extract_and_shift_bits_08006d98",
                "param_1": "inputChar",
                "param_2": "output1",
                "param_3": "output2",
                "param_4": "output3",
                "uVar1": "shiftedByte"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_in_array_08006dc4",
            "code": "\nvoid setBitInArray_08006dc4(char value)\n\n{\n  setBitInArray_08006dc4Helper((int)value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_in_array_08006dc4",
                "param_1": "value",
                "set_bit_in_array_08006a58": "setBitInArrayHelper"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "check_if_bit_set_08006de0",
            "code": "\nundefined4 checkIfBitSet_08006de0(char inputByte)\n\n{\n  undefined4 isBitSet;\n  \n  isBitSet = is_bit_set_08006a18((int)inputByte);\n  return isBitSet;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "check_if_bit_set_08006de0",
                "param_1": "inputByte",
                "uVar1": "isBitSet"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_bit_08006dfe",
            "code": "\nvoid setBit_08006dfe(char input)\n\n{\n  setBit_08006dfeInMemory((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_bit_08006dfe",
                "param_1": "input",
                "set_bit_08006a8c": "setBitInMemory"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_and_return_08006e1a",
            "code": "\nundefined4 check_bit_and_return_08006e1a(char input_char)\n\n{\n  undefined4 result;\n  \n  result = check_bit_set_08006ac0((int)input_char);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_and_return_08006e1a",
                "param_1": "input_char",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_parameters_08006e88",
            "code": "\n\n\nvoid updateParameters_08006e88(uint *oldParams,uint *newParams)\n\n{\n  uint bitMask;\n  uint bitCheck;\n  int index;\n  uint counter;\n  \n  for (counter = 0; counter < 0x10; counter = counter + 1) {\n    bitMask = 1 << (counter & 0xff);\n    bitCheck = *newParams & bitMask;\n    if (bitCheck == bitMask) {\n      if ((newParams[1] == 2) || (newParams[1] == 0x12)) {\n        bitMask = newParams[4];\n        oldParams[(counter >> 3) + 8] = oldParams[(counter >> 3) + 8] & ~(0xf << ((counter & 7) << 2));\n        oldParams[(counter >> 3) + 8] = oldParams[(counter >> 3) + 8] | bitMask << ((counter & 7) << 2);\n      }\n      *oldParams = *oldParams & ~(3 << ((counter & 0x7f) << 1));\n      *oldParams = *oldParams | (newParams[1] & 3) << ((counter & 0x7f) << 1);\n      if ((((newParams[1] == 1) || (newParams[1] == 2)) || (newParams[1] == 0x11)) || (newParams[1] == 0x12)\n         ) {\n        oldParams[2] = oldParams[2] & ~(3 << ((counter & 0x7f) << 1));\n        oldParams[2] = oldParams[2] | newParams[3] << ((counter & 0x7f) << 1);\n        oldParams[1] = oldParams[1] & ~(1 << (counter & 0xff));\n        oldParams[1] = oldParams[1] | (newParams[1] >> 4 & 1) << (counter & 0xff);\n      }\n      oldParams[3] = oldParams[3] & ~(3 << ((counter & 0x7f) << 1));\n      oldParams[3] = oldParams[3] | newParams[2] << ((counter & 0x7f) << 1);\n      if ((newParams[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        if (oldParams == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (oldParams == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (oldParams == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (oldParams == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (oldParams == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (oldParams == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (oldParams == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (oldParams == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (oldParams == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (oldParams == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             index << ((counter & 3) << 2) | *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitCheck & _DAT_40013c00;\n        _DAT_40013c04 = ~bitCheck & _DAT_40013c04;\n        if ((newParams[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitCheck | _DAT_40013c00;\n        }\n        if ((newParams[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitCheck | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitCheck & _DAT_40013c08;\n        _DAT_40013c0c = ~bitCheck & _DAT_40013c0c;\n        if ((newParams[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitCheck | _DAT_40013c08;\n        }\n        if ((newParams[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitCheck | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_parameters_08006e88",
                "param_1": "oldParams",
                "param_2": "newParams",
                "uVar1": "bitMask",
                "uVar2": "bitCheck",
                "iVar3": "index",
                "local_c": "counter"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "set_param_value_0800733e",
            "code": "\nvoid setParamValue_0800733e(int objectAddress,undefined2 value,char isSecondary)\n\n{\n  if (isSecondary == '\\0') {\n    *(undefined2 *)(objectAddress + 0x1a) = value;\n  }\n  else {\n    *(undefined2 *)(objectAddress + 0x18) = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "isSecondary"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_data_and_call_function_0800738e",
            "code": "\n\n\nvoid updateDataAndCallFunction_0800738e(ushort data)\n\n{\n  if ((data & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)data;\n    FUNC_080073c0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_data_and_call_function_0800738e",
                "param_1": "data"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "write_bit_at_offset_080073d4",
            "code": "\nvoid writeBitAtOffset_080073d4(uint offset)\n\n{\n  *(Short *)(((int)offset >> 4) * 0x400 + 0x4002001a) = (Short)(1 << (offset & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "write_bit_at_offset_080073d4",
                "param_1": "offset",
                "short": "Short"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_value_08007402",
            "code": "\nvoid setBitValue_08007402(uint inputValue)\n\n{\n  *(short *)(((int)inputValue >> 4) * 0x400 + 0x40020018) = (short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_value_08007402",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "keep_running_08007430",
            "code": "\nvoid keep_running_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "keep_running_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_system_08007436",
            "code": "\n\n\nvoid initializeSystem_08007436(void)\n\n{\n  int result;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined4 value5;\n  undefined4 value6;\n  undefined4 value7;\n  undefined4 value8;\n  undefined4 value9;\n  undefined4 value10;\n  undefined4 value11;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag1 = 1;\n  flag2 = 1;\n  value1 = 2;\n  value2 = 0x400000;\n  value3 = 8;\n  value4 = 0x150;\n  value5 = 2;\n  value6 = 7;\n  result = check_function_conditions_08005cec(&flag1);\n  if (result != 0) {\n    keep_running_08007430();\n  }\n  value7 = 0xf;\n  value8 = 2;\n  value9 = 0;\n  value10 = 0x1400;\n  value11 = 0x1000;\n  result = check_and_set_clock_frequency_0800618c(&value7,5);\n  if (result != 0) {\n    keep_running_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_system_08007436",
                "local_4c": "flag1",
                "local_48": "flag2",
                "local_34": "value1",
                "local_30": "value2",
                "local_2c": "value3",
                "local_28": "value4",
                "local_24": "value5",
                "local_20": "value6",
                "local_1c": "value7",
                "local_18": "value8",
                "local_14": "value9",
                "local_10": "value10",
                "local_c": "value11",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "check_and_process_parameters_080074c8",
            "code": "\nvoid checkAndProcessParameters_080074c8(uint parameter)\n\n{\n  if ((parameter & 1) != 0) {\n    setBitValue(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((parameter & 0x1e) != 0)) {\n    initializeAndCheckData();\n  }\n  if ((DAT_20000e50 != 0) && ((parameter & 0x80) != 0)) {\n    processParameter(parameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "check_and_process_parameters_080074c8",
                "param_1": "parameter",
                "set_bit_value_08007402": "setBitValue",
                "initialize_and_check_data_0800195c": "initializeAndCheckData",
                "process_param_08003a18": "processParameter"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "write_bit_if_odd_08007520",
            "code": "\nvoid write_bit_if_odd_08007520(uint input_value)\n\n{\n  if ((input_value & 1) != 0) {\n    write_bit_at_offset_080073d4(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "write_bit_if_odd_08007520",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_system_08007540",
            "code": "\nundefined4 initialize_system_08007540(void)\n\n{\n  initialize_memory_configuration();\n  initialize_system_08007540_08007436();\n  initialize_hardware();\n  initialize_flags();\n  initialize_memory();\n  initialize_additional_memory();\n  check_interrupt(0);\n  execute_system_operations();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_system_08007540",
                "initialize_and_configure_memory_080059b4": "initialize_memory_configuration",
                "initialize_hardware_0800778c": "initialize_hardware",
                "initialize_and_set_flags_08007e08": "initialize_flags",
                "initialize_memory_080079c0": "initialize_memory",
                "initialize_memory_08008190": "initialize_additional_memory",
                "check_interrupt_08005984": "check_interrupt",
                "run_system_operations_08001ddc": "execute_system_operations"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_system_0800756c",
            "code": "\n\n\nvoid initializeSystem_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_in_memory_080076c8",
            "code": "\nvoid updateBitInMemory_080076c8(uint input)\n\n{\n  *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_in_memory_080076c8",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "check_and_update_data_08007756",
            "code": "\nvoid checkAndUpdateData_08007756(void)\n\n{\n  uint globalData;\n  \n  globalData = getGlobalData();\n  if ((globalData & 0x1ff) == 0) {\n    updateMemoryBit(0x3c);\n  }\n  if ((globalData & 0xf) == 0) {\n    processData();\n  }\n  incrementCounter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "check_and_update_data_08007756",
                "uVar1": "globalData",
                "get_global_data_08005a84": "getGlobalData",
                "update_bit_in_memory_080076c8": "updateMemoryBit",
                "process_data_08007930": "processData",
                "increment_counter_08005a68": "incrementCounter"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_hardware_0800778c",
            "code": "\n\n\nvoid initializeHardware_0800778c(void)\n\n{\n  int index;\n  int bitMask;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  uint *pointer;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    index = counter * 0x18;\n    pointer = (uint *)(&DAT_0800bcbc + index);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*pointer >> 4 & 0xff);\n    bitMask = 1 << (*pointer & 0xf);\n    param1 = *(undefined4 *)(&DAT_0800bcc0 + index);\n    param2 = *(undefined4 *)(&DAT_0800bcc4 + index);\n    param3 = *(undefined4 *)(&DAT_0800bcc8 + index);\n    param4 = *(undefined4 *)(&DAT_0800bccc + index);\n    update_parameters_08006e88(((*pointer >> 4) + 0x100080) * 0x400,&bitMask);\n    if (-1 < (int)pointer[5]) {\n      set_param_value_0800733e(((*pointer >> 4) + 0x100080) * 0x400,1 << (*pointer & 0xf) & 0xffff,\n                   pointer[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_hardware_0800778c",
                "local_24": "bitMask",
                "local_20": "param1",
                "local_1c": "param2",
                "local_18": "param3",
                "local_14": "param4",
                "local_10": "pointer",
                "local_c": "counter",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_08007854",
            "code": "\nuint check_bit_08007854(uint input)\n\n{\n  return *(uint *)(((int)input >> 4) * 0x400 + 0x40020010) >> (input & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_08007854",
                "param_1": "input"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "get_bitwise_result_08007884",
            "code": "\nuint get_bitwise_result_08007884(void)\n\n{\n  int bit_0x36;\n  int bit_0x37;\n  int bit_0x38;\n  int bit_0x39;\n  int bit_0xf;\n  uint bit_0x0;\n  \n  bit_0x36 = check_bit_08007854(0x36);\n  bit_0x37 = check_bit_08007854(0x37);\n  bit_0x38 = check_bit_08007854(0x38);\n  bit_0x39 = check_bit_08007854(0x39);\n  bit_0xf = check_bit_08007854(0xf);\n  bit_0x0 = check_bit_08007854(0);\n  return bit_0x0 | bit_0x36 << 4 | bit_0x37 << 3 | bit_0x38 << 2 | bit_0x39 << 1 | bit_0xf << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "get_bitwise_result_08007884",
                "iVar1": "bit_0x36",
                "iVar2": "bit_0x37",
                "iVar3": "bit_0x38",
                "iVar4": "bit_0x39",
                "iVar5": "bit_0xf",
                "uVar6": "bit_0x0"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_sum_080078f4",
            "code": "\nuint calculateSum_080078f4(void)\n\n{\n  int index;\n  uint sum;\n  \n  sum = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    sum = *(uint *)(&DAT_20000e54 + index * 4) | sum;\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_sum_080078f4",
                "local_10": "index",
                "local_c": "sum"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "process_data_08007930",
            "code": "\nvoid processData_08007930(void)\n\n{\n  int dataIndex;\n  uint previousValue;\n  undefined4 bitwiseResult;\n  uint sum;\n  uint bitwiseDiff;\n  \n  dataIndex = DAT_20000e68;\n  previousValue = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    bitwiseResult = get_bitwise_result_08007884();\n    *(undefined4 *)(&DAT_20000e54 + dataIndex * 4) = bitwiseResult;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    sum = calculate_sum_080078f4();\n    previousValue = DAT_20000e64;\n    if (sum != DAT_20000e64) {\n      bitwiseDiff = ~sum & DAT_20000e64;\n      if ((~DAT_20000e64 & sum) != 0) {\n        check_and_process_parameters_080074c8(~DAT_20000e64 & sum);\n      }\n      previousValue = sum;\n      if (bitwiseDiff != 0) {\n        write_bit_if_odd_08007520(bitwiseDiff);\n      }\n    }\n  }\n  DAT_20000e64 = previousValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "process_data_08007930",
                "iVar1": "dataIndex",
                "uVar2": "previousValue",
                "uVar3": "bitwiseResult",
                "uVar4": "sum",
                "uVar5": "bitwiseDiff"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_memory_080079c0",
            "code": "\nvoid initializeMemory_080079c0(void)\n\n{\n  fill_memory_with_byte_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_memory_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_in_memory_080079e0",
            "code": "\nvoid setBitInMemory_080079e0(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_in_memory_080079e0",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_data_flags_08007a10",
            "code": "\n\n\nvoid updateDataFlags_08007a10(undefined *dataPointer)\n\n{\n  if (dataPointer == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (dataPointer == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (dataPointer == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_data_flags_08007a10",
                "param_1": "dataPointer"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "process_memory_region_08007a70",
            "code": "\nvoid processMemoryRegion_08007a70(undefined *regionStart,undefined4 value1,undefined4 value2)\n\n{\n  undefined regionType;\n  \n  if (regionStart == (undefined *)0x40000000) {\n    regionType = 0x1c;\n  }\n  else if (regionStart == (undefined *)0x40000400) {\n    regionType = 0x1d;\n  }\n  else {\n    if (regionStart != &DAT_40000800) {\n      return;\n    }\n    regionType = 0x1e;\n  }\n  apply_bitmask_and_write_08006cf6(regionType,value1,value2);\n  set_bit_in_memory_080079e0(regionType);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "process_memory_region_08007a70",
                "param_1": "regionStart",
                "param_2": "value1",
                "param_3": "value2",
                "local_c": "regionType"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_memory_08007ad0",
            "code": "\n\n\nvoid initializeMemory_08007ad0(void)\n\n{\n  updateDataFlags(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  processMemoryRegion(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "update_data_flags_08007a10": "updateDataFlags",
                "process_memory_region_08007a70": "processMemoryRegion"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_08007b70",
            "code": "\n\n\nvoid setFlags_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_flags_08007bc2",
            "code": "\n\n\nvoid clearFlags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_flags_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_min_value_08007bf0",
            "code": "\n\n\nvoid update_min_value_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_min_value_08007bf0",
                "param_1": "new_value"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_memory_address_08007c40",
            "code": "\n\n\nvoid setMemoryAddress_08007c40(undefined4 address)\n\n{\n  _DAT_40000034 = address;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_memory_address_08007c40",
                "param_1": "address"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_global_variable_08007c5e",
            "code": "\n\n\nvoid setGlobalVariable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "value"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "execute_conditionals_08007c7c",
            "code": "\n\n\nvoid execute_conditionals_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    initialize_and_update_register_value();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    initialize_register_value();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_data_and_flags();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "execute_conditionals_08007c7c",
                "initialize_and_update_register_value_08005778": "initialize_and_update_register_value",
                "initialize_register_value_08005760": "initialize_register_value",
                "update_data_and_flags_080053a0": "update_data_and_flags"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_data_08007d08",
            "code": "\n\n\nvoid initializeData_08007d08(void)\n\n{\n  updateDataFlags(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_data_08007d08",
                "update_data_flags_08007a10": "updateDataFlags"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_08007da8",
            "code": "\n\n\nvoid setFlags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_and_set_flags_08007e08",
            "code": "\nvoid initialize_and_set_flags_08007e08(void)\n\n{\n  initialize_memory();\n  initialize_data();\n  set_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_and_set_flags_08007e08",
                "initialize_memory_08007ad0": "initialize_memory",
                "initialize_data_08007d08": "initialize_data",
                "set_flags_08007da8": "set_flags"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_for_flag_08007e1c",
            "code": "\n\n\nvoid waitForFlag_08007e1c(byte inputByte)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)inputByte;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_for_flag_08007e1c",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "check_flag_set_08007e58",
            "code": "\n\n\nbool check_FlagSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "check_flag_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lower_byte_08007e84",
            "code": "\n\n\nuint get_lower_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lower_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_memory_flag_08007ea4",
            "code": "\n\n\nvoid updateMemoryFlag_08007ea4(undefined *address)\n\n{\n  if (address == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (address == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (address == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (address == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (address == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_memory_flag_08007ea4",
                "param_1": "address"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_frequency_08007f54",
            "code": "\nvoid calculateClockFrequency_08007f54(int inputAddress,int inputValue)\n\n{\n  ulonglong clockFreqMultiple;\n  int adjustedClockFreq1;\n  int adjustedClockFreq2;\n  undefined8 adjustedClockFrequency;\n  \n  if ((*(uint *)(inputAddress + 0xc) & 0x8000) == 0) {\n    if ((inputAddress != 0x40011000) && (inputAddress != 0x40011400)) {\n      adjustedClockFrequency = calculateClockFrequency_08007f54();\n      clockFreqMultiple = (ulonglong)(uint)((int)adjustedClockFrequency * 0x19) / (ulonglong)(uint)(inputValue << 2);\n      adjustedClockFreq1 = calculateClockFrequency_08007f54((int)adjustedClockFrequency,(int)((ulonglong)adjustedClockFrequency >> 0x20),(int)(clockFreqMultiple * 0x51eb851f));\n      adjustedClockFreq2 = calculateClockFrequency_08007f54();\n      *(uint *)(inputAddress + 8) =\n           (int)(clockFreqMultiple / 100) << 4 |\n           (((uint)(adjustedClockFreq1 * 0x19) / (uint)(inputValue << 2) +\n            (int)(((ulonglong)(uint)(adjustedClockFreq2 * 0x19) / (ulonglong)(uint)(inputValue << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    adjustedClockFrequency = calculateAdjustedClockFrequency();\n    clockFreqMultiple = (ulonglong)(uint)((int)adjustedClockFrequency * 0x19) / (ulonglong)(uint)(inputValue << 2);\n    adjustedClockFreq1 = calculateAdjustedClockFrequency((int)adjustedClockFrequency,(int)((ulonglong)adjustedClockFrequency >> 0x20),(int)(clockFreqMultiple * 0x51eb851f));\n    adjustedClockFreq2 = calculateAdjustedClockFrequency();\n    *(uint *)(inputAddress + 8) =\n         (int)(clockFreqMultiple / 100) << 4 |\n         (((uint)(adjustedClockFreq1 * 0x19) / (uint)(inputValue << 2) +\n          (int)(((ulonglong)(uint)(adjustedClockFreq2 * 0x19) / (ulonglong)(uint)(inputValue << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((inputAddress != 0x40011000) && (inputAddress != 0x40011400)) {\n      adjustedClockFrequency = calculateClockFrequency_08007f54();\n      clockFreqMultiple = (ulonglong)(uint)((int)adjustedClockFrequency * 0x19) / (ulonglong)(uint)(inputValue << 1);\n      adjustedClockFreq1 = calculateClockFrequency_08007f54((int)adjustedClockFrequency,(int)((ulonglong)adjustedClockFrequency >> 0x20),(int)(clockFreqMultiple * 0x51eb851f));\n      adjustedClockFreq2 = calculateClockFrequency_08007f54();\n      *(uint *)(inputAddress + 8) =\n           (int)(clockFreqMultiple / 100) << 4 |\n           (((uint)(adjustedClockFreq1 * 0x19) / (uint)(inputValue << 1) +\n            (int)(((ulonglong)(uint)(adjustedClockFreq2 * 0x19) / (ulonglong)(uint)(inputValue << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    adjustedClockFrequency = calculateAdjustedClockFrequency();\n    clockFreqMultiple = (ulonglong)(uint)((int)adjustedClockFrequency * 0x19) / (ulonglong)(uint)(inputValue << 1);\n    adjustedClockFreq1 = calculateAdjustedClockFrequency((int)adjustedClockFrequency,(int)((ulonglong)adjustedClockFrequency >> 0x20),(int)(clockFreqMultiple * 0x51eb851f));\n    adjustedClockFreq2 = calculateAdjustedClockFrequency();\n    *(uint *)(inputAddress + 8) =\n         (int)(clockFreqMultiple / 100) << 4 |\n         (((uint)(adjustedClockFreq1 * 0x19) / (uint)(inputValue << 1) +\n          (int)(((ulonglong)(uint)(adjustedClockFreq2 * 0x19) / (ulonglong)(uint)(inputValue << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_frequency_08007f54",
                "param_1": "inputAddress",
                "param_2": "inputValue",
                "uVar1": "clockFreqMultiple",
                "iVar2": "adjustedClockFreq1",
                "iVar3": "adjustedClockFreq2",
                "uVar4": "adjustedClockFrequency",
                "calculate_clock_frequency_08006680": "calculateClockFrequency",
                "calculate_adjusted_clock_frequency_080066cc": "calculateAdjustedClockFrequency"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_memory_08008190",
            "code": "\n\n\nvoid initialize_memory_08008190(void)\n\n{\n  update_memory_flag_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculate_clock_frequency(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_memory_08008190",
                "calculate_clock_frequency_08007f54": "calculate_clock_frequency"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "wait_for_completion_08008250",
            "code": "\nvoid waitForCompletion_08008250(undefined input)\n\n{\n  waitForFlag(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "wait_for_completion_08008250",
                "param_1": "input",
                "wait_for_flag_08007e1c": "waitForFlag"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "wait_for_flag_0800826a",
            "code": "\nundefined4 waitForFlag_0800826a(undefined param)\n\n{\n  waitForFlag_0800826aFunction(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "wait_for_flag_0800826a",
                "param_1": "param",
                "wait_for_flag_08007e1c": "waitForFlagFunction"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_and_get_lower_byte_08008286",
            "code": "\nundefined check_and_get_lower_byte_08008286(void)\n\n{\n  undefined lower_byte;\n  int flag_check_result;\n  \n  flag_check_result = check_flag_set_08007e58();\n  if (flag_check_result != 0) {\n    lower_byte = get_lower_byte_08007e84();\n    flag_check_result = check_and_update_flags_08005900(lower_byte);\n    if (flag_check_result == 0) {\n      return lower_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_and_get_lower_byte_08008286",
                "uVar1": "lower_byte",
                "iVar2": "flag_check_result"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_080082d0",
            "code": "\nulonglong calculate_080082d0(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte carry;\n  uint sum1;\n  uint sum2;\n  uint sum3;\n  uint temp1;\n  uint shiftedNum2;\n  int shift2;\n  uint temp2;\n  uint counter;\n  uint temp3;\n  uint temp4;\n  bool isZero;\n  bool isTrue;\n  bool isNegative;\n  \n  temp1 = num4 ^ 0x80000000;\n  temp2 = num2 << 1;\n  num4 = num4 << 1;\n  isZero = ((num2 ^ temp1) & 0x7fffffff) == 0;\n  isTrue = isZero && num1 == num3;\n  if (!isZero || num1 != num3) {\n    isTrue = (temp2 | num1) == 0;\n  }\n  if (!isTrue) {\n    isTrue = (num4 | num3) == 0;\n  }\n  shift2 = (int)temp2 >> 0x15;\n  if (!isTrue) {\n    isTrue = shift2 == -1;\n  }\n  shift1 = (int)num4 >> 0x15;\n  if (!isTrue) {\n    isTrue = shift1 == -1;\n  }\n  if (isTrue) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp2 = temp1;\n      temp3 = num3;\n      if (shift2 == -1) {\n        temp2 = num2;\n        temp3 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = temp3;\n        temp1 = temp2;\n      }\n      isTrue = (temp3 | temp2 << 0xc) == 0;\n      if (isTrue) {\n        isTrue = (num3 | temp1 << 0xc) == 0;\n      }\n      if (isTrue) {\n        isTrue = temp2 == temp1;\n      }\n      if (!isTrue) {\n        temp2 = temp2 | 0x80000;\n      }\n      return CONCAT44(temp2,temp3);\n    }\n    if (((num2 ^ temp1) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((temp2 | num1) == 0) {\n        num1 = num3;\n        num2 = temp1;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != temp1) {\n      return 0;\n    }\n    if (temp2 >> 0x15 == 0) {\n      isTrue = (num1 & 0x80000000) != 0;\n      temp1 = num2 * 2 + (uint)isTrue;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)isTrue)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return CONCAT44(temp1,num1 << 1);\n    }\n    if (temp2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  temp2 = temp2 >> 0x15;\n  num4 = num4 >> 0x15;\n  temp3 = num4 - temp2;\n  isTrue = temp3 != 0;\n  if (num4 < temp2) {\n    temp3 = -temp3;\n  }\n  counter = num1;\n  shiftedNum2 = num2;\n  if (isTrue && temp2 <= num4) {\n    temp2 = temp2 + temp3;\n    counter = num3;\n    shiftedNum2 = temp1;\n    num3 = num1;\n    temp1 = num2;\n  }\n  if (0x36 < temp3) {\n    return CONCAT44(shiftedNum2,counter);\n  }\n  sum2 = shiftedNum2 & 0xfffff | 0x100000;\n  if ((shiftedNum2 & 0x80000000) != 0) {\n    isTrue = counter != 0;\n    counter = -counter;\n    sum2 = -sum2 - (uint)isTrue;\n  }\n  shiftedNum2 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    isTrue = num3 != 0;\n    num3 = -num3;\n    shiftedNum2 = -shiftedNum2 - (uint)isTrue;\n  }\n  if (temp2 == temp3) {\n    shiftedNum2 = shiftedNum2 ^ 0x100000;\n    if (temp2 == 0) {\n      sum2 = sum2 ^ 0x100000;\n      temp2 = 1;\n    }\n    else {\n      temp3 = temp3 - 1;\n    }\n  }\n  temp1 = -temp3 + 0x20;\n  if ((int)temp3 < 0x21) {\n    temp4 = num3 << (temp1 & 0xff);\n    num3 = num3 >> (temp3 & 0xff);\n    sum1 = counter + num3;\n    sum3 = shiftedNum2 << (temp1 & 0xff);\n    temp1 = sum1 + sum3;\n    sum2 = sum2 + CARRY4(counter,num3) + ((int)shiftedNum2 >> (temp3 & 0xff)) +\n            (uint)CARRY4(sum1,sum3);\n  }\n  else {\n    temp4 = shiftedNum2 << (-temp3 + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    shiftedNum2 = (int)shiftedNum2 >> (temp3 - 0x20 & 0xff);\n    temp1 = counter + shiftedNum2;\n    sum2 = sum2 + ((int)shiftedNum2 >> 0x1f) + (uint)CARRY4(counter,shiftedNum2);\n  }\n  num2 = sum2 & 0x80000000;\n  temp3 = sum2;\n  if ((int)sum2 < 0) {\n    isTrue = temp4 == 0;\n    temp4 = -temp4;\n    temp3 = -temp1;\n    temp1 = -(uint)!isTrue - temp1;\n    temp3 = -(uint)(isTrue <= temp3) - sum2;\n  }\n  if (0xfffff < temp3) {\n    counter = temp2 - 1;\n    if (0x1fffff < temp3) {\n      counter = temp3 & 1;\n      temp3 = temp3 >> 1;\n      carry = (byte)temp1;\n      temp1 = (uint)(counter != 0) << 0x1f | temp1 >> 1;\n      temp4 = (uint)(carry & 1) << 0x1f | temp4 >> 1;\n      counter = temp2;\n      if (0xffbfffff < temp2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    isTrue = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      isTrue = (temp1 & 1) != 0;\n    }\n    return CONCAT44(temp3 + counter * 0x100000 + (uint)CARRY4(temp1,(uint)isTrue) | num2,\n                    temp1 + isTrue);\n  }\n  isZero = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  counter = temp1 * 2;\n  isTrue = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)isZero;\n  temp3 = temp3 * 2 + (uint)(isTrue || CARRY4(counter,(uint)isZero));\n  counter = temp2 - 2;\n  if (temp2 - 1 != 0 && 0xfffff < temp3) goto LAB_080083e0;\n  shiftedNum2 = temp1;\n  temp2 = temp3;\n  if (temp3 == 0) {\n    shiftedNum2 = 0;\n    temp2 = temp1;\n  }\n  shift2 = LZCOUNT(temp2);\n  if (temp3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp3 = shift2 - 0xb;\n  isNegative = SBORROW4(temp3,0x20);\n  temp1 = shift2 - 0x2b;\n  isTrue = (int)temp1 < 0;\n  isZero = temp1 == 0;\n  if ((int)temp3 < 0x20) {\n    isNegative = SCARRY4(temp1,0xc);\n    shift2 = shift2 + -0x1f;\n    isTrue = shift2 < 0;\n    isZero = shift2 == 0;\n    temp1 = temp3;\n    if (!isZero && isTrue == isNegative) {\n      shiftedNum2 = temp2 << (temp3 & 0xff);\n      temp2 = temp2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isTrue != isNegative) {\n    temp4 = 0x20 - temp1;\n  }\n  temp2 = temp2 << (temp1 & 0xff);\n  if (isZero || isTrue != isNegative) {\n    temp2 = temp2 | shiftedNum2 >> (temp4 & 0xff);\n  }\n  if (isZero || isTrue != isNegative) {\n    shiftedNum2 = shiftedNum2 << (temp1 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp3 <= (int)counter) {\n    return CONCAT44(temp2 + (counter - temp3) * 0x100000 | num2,shiftedNum2);\n  }\n  temp1 = ~(counter - temp3);\n  if ((int)temp1 < 0x1f) {\n    shift2 = temp1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp1 - 0x1f,0xc)) {\n      return CONCAT44(sum2,shiftedNum2 >> (0x20 - (0xcU - shift2) & 0xff) | temp2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return CONCAT44(num2 | temp2 >> (temp1 & 0xff),\n                    shiftedNum2 >> (temp1 & 0xff) | temp2 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(sum2,temp2 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_080082d0",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar6": "temp1",
                "uVar9": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "bVar13": "isZero",
                "bVar14": "isTrue",
                "bVar15": "isNegative",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "sum1",
                "uVar4": "sum2",
                "uVar5": "sum3",
                "uVar7": "shiftedNum2",
                "uVar10": "counter",
                "iVar8": "shift2"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_concatenation_080082d4",
            "code": "\nulonglong calculateConcatenation_080082d4(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int shiftA;\n  byte carryFlag;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shiftD;\n  uint shiftedB;\n  uint shiftedA;\n  uint shiftedD;\n  uint difference;\n  uint temp4;\n  uint temp5;\n  bool isEqual;\n  bool isZero;\n  bool isNegative;\n  \n  shiftedB = param_2 << 1;\n  shiftedD = param_4 << 1;\n  isEqual = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  isZero = isEqual && param_1 == param_3;\n  if (!isEqual || param_1 != param_3) {\n    isZero = (shiftedB | param_1) == 0;\n  }\n  if (!isZero) {\n    isZero = (shiftedD | param_3) == 0;\n  }\n  shiftD = (int)shiftedB >> 0x15;\n  if (!isZero) {\n    isZero = shiftD == -1;\n  }\n  shiftA = (int)shiftedD >> 0x15;\n  if (!isZero) {\n    isZero = shiftA == -1;\n  }\n  if (isZero) {\n    if (shiftD == -1 || shiftA == -1) {\n      shiftedD = param_4;\n      shiftedB = param_3;\n      if (shiftD == -1) {\n        shiftedD = param_2;\n        shiftedB = param_1;\n      }\n      if (shiftD != -1 || shiftA != -1) {\n        param_3 = shiftedB;\n        param_4 = shiftedD;\n      }\n      isZero = (shiftedB | shiftedD << 0xc) == 0;\n      if (isZero) {\n        isZero = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (isZero) {\n        isZero = shiftedD == param_4;\n      }\n      if (!isZero) {\n        shiftedD = shiftedD | 0x80000;\n      }\n      return CONCAT44(shiftedD,shiftedB);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((shiftedB | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (shiftedB >> 0x15 == 0) {\n      isZero = (param_1 & 0x80000000) != 0;\n      shiftedD = param_2 * 2 + (uint)isZero;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)isZero)) {\n        shiftedD = shiftedD | 0x80000000;\n      }\n      return CONCAT44(shiftedD,param_1 << 1);\n    }\n    if (shiftedB < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  shiftedB = shiftedB >> 0x15;\n  shiftedD = shiftedD >> 0x15;\n  difference = shiftedD - shiftedB;\n  isZero = difference != 0;\n  if (shiftedD < shiftedB) {\n    difference = -difference;\n  }\n  shiftedA = param_1;\n  temp3 = param_2;\n  if (isZero && shiftedB <= shiftedD) {\n    shiftedB = shiftedB + difference;\n    shiftedA = param_3;\n    temp3 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,shiftedA);\n  }\n  shiftedD = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    isZero = shiftedA != 0;\n    shiftedA = -shiftedA;\n    shiftedD = -shiftedD - (uint)isZero;\n  }\n  temp3 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    isZero = param_3 != 0;\n    param_3 = -param_3;\n    temp3 = -temp3 - (uint)isZero;\n  }\n  if (shiftedB == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shiftedB == 0) {\n      shiftedD = shiftedD ^ 0x100000;\n      shiftedB = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp5 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp4 = param_3 << (temp5 & 0xff);\n    param_3 = param_3 >> (difference & 0xff);\n    temp1 = shiftedA + param_3;\n    temp2 = temp3 << (temp5 & 0xff);\n    temp5 = temp1 + temp2;\n    shiftedD = shiftedD + CARRY4(shiftedA,param_3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp4 = temp3 << (-difference + 0x40 & 0xff);\n    if (param_3 != 0) {\n      temp4 = temp4 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp5 = shiftedA + temp3;\n    shiftedD = shiftedD + ((int)temp3 >> 0x1f) + (uint)CARRY4(shiftedA,temp3);\n  }\n  param_2 = shiftedD & 0x80000000;\n  difference = shiftedD;\n  if ((int)shiftedD < 0) {\n    isZero = temp4 == 0;\n    temp4 = -temp4;\n    difference = -temp5;\n    temp5 = -(uint)!isZero - temp5;\n    difference = -(uint)(isZero <= difference) - shiftedD;\n  }\n  if (0xfffff < difference) {\n    shiftedA = shiftedB - 1;\n    if (0x1fffff < difference) {\n      shiftedD = difference & 1;\n      difference = difference >> 1;\n      carryFlag = (byte)temp5;\n      temp5 = (uint)(shiftedD != 0) << 0x1f | temp5 >> 1;\n      temp4 = (uint)(carryFlag & 1) << 0x1f | temp4 >> 1;\n      shiftedA = shiftedB;\n      if (0xffbfffff < shiftedB * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    isZero = 0x7fffffff < temp4;\n    if (temp4 == 0x80000000) {\n      isZero = (temp5 & 1) != 0;\n    }\n    return CONCAT44(difference + shiftedA * 0x100000 + (uint)CARRY4(temp5,(uint)isZero) | param_2,\n                    temp5 + isZero);\n  }\n  isEqual = (temp4 & 0x80000000) != 0;\n  temp4 = temp4 << 1;\n  shiftedA = temp5 * 2;\n  isZero = CARRY4(temp5,temp5);\n  temp5 = temp5 * 2 + (uint)isEqual;\n  difference = difference * 2 + (uint)(isZero || CARRY4(shiftedA,(uint)isEqual));\n  shiftedA = shiftedB - 2;\n  if (shiftedB - 1 != 0 && 0xfffff < difference) goto LAB_080083e0;\n  temp3 = temp5;\n  shiftedB = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shiftedB = temp5;\n  }\n  shiftD = LZCOUNT(shiftedB);\n  if (difference == 0) {\n    shiftD = shiftD + 0x20;\n  }\n  temp5 = shiftD - 0xb;\n  isNegative = SBORROW4(temp5,0x20);\n  difference = shiftD - 0x2b;\n  isZero = (int)difference < 0;\n  isEqual = difference == 0;\n  if ((int)temp5 < 0x20) {\n    isNegative = SCARRY4(difference,0xc);\n    shiftD = shiftD + -0x1f;\n    isZero = shiftD < 0;\n    isEqual = shiftD == 0;\n    difference = temp5;\n    if (!isEqual && isZero == isNegative) {\n      temp3 = shiftedB << (temp5 & 0xff);\n      shiftedB = shiftedB >> (0xcU - shiftD & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isEqual || isZero != isNegative) {\n    temp4 = 0x20 - difference;\n  }\n  shiftedB = shiftedB << (difference & 0xff);\n  if (isEqual || isZero != isNegative) {\n    shiftedB = shiftedB | temp3 >> (temp4 & 0xff);\n  }\n  if (isEqual || isZero != isNegative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp5 <= (int)shiftedA) {\n    return CONCAT44(shiftedB + (shiftedA - temp5) * 0x100000 | param_2,temp3);\n  }\n  difference = ~(shiftedA - temp5);\n  if ((int)difference < 0x1f) {\n    shiftD = difference - 0x13;\n    if (shiftD != 0 && shiftD < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shiftedD,temp3 >> (0x20 - (0xcU - shiftD) & 0xff) | shiftedB << (0xcU - shiftD & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(param_2 | shiftedB >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shiftedB << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shiftedD,shiftedB >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_concatenation_080082d4",
                "iVar1": "shiftA",
                "bVar2": "carryFlag",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shiftD",
                "uVar7": "shiftedB",
                "uVar8": "shiftedA",
                "uVar9": "shiftedD",
                "uVar10": "difference",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "bVar13": "isEqual",
                "bVar14": "isZero",
                "bVar15": "isNegative"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "reverse_bits_0800854c",
            "code": "\nulonglong reverseBits_0800854c(uint number)\n\n{\n  uint result;\n  uint shift;\n  int count;\n  uint adjustedCount;\n  uint remainingShift;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (number == 0) {\n    return 0;\n  }\n  result = 0;\n  count = LZCOUNT(number);\n  adjustedCount = count + 0x15;\n  isCarry = SBORROW4(adjustedCount,0x20);\n  shift = count - 0xb;\n  isNegative = (int)shift < 0;\n  isZero = shift == 0;\n  if (adjustedCount < 0x20) {\n    isCarry = SCARRY4(shift,0xc);\n    isNegative = false;\n    isZero = count + 1 == 0;\n    shift = adjustedCount;\n    if (!isZero && isCarry == false) {\n      result = number << adjustedCount;\n      number = number >> (0xcU - (count + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    remainingShift = 0x20 - shift;\n  }\n  number = number << (shift & 0xff);\n  if (isZero || isNegative != isCarry) {\n    number = number | 0U >> (remainingShift & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    result = 0 << (shift & 0xff);\n  }\nLAB_08008458:\n  if (adjustedCount < 0x433) {\n    return CONCAT44(number + (0x432 - adjustedCount) * 0x100000,result);\n  }\n  shift = ~(0x432 - adjustedCount);\n  if (0x1e < (int)shift) {\n    return (ulonglong)(number >> (shift - 0x1f & 0xff));\n  }\n  count = shift - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shift - 0x1f,0xc)) {\n    shift = shift + 1;\n    return CONCAT44(number >> (shift & 0xff),\n                    result >> (shift & 0xff) | number << (0x20 - shift & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - count) & 0xff) | number << (0xcU - count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "reverse_bits_0800854c",
                "param_1": "number",
                "uVar1": "result",
                "uVar2": "shift",
                "iVar3": "count",
                "uVar4": "adjustedCount",
                "in_r12": "remainingShift",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isCarry"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "calculate_shifted_value_0800856c",
            "code": "\nulonglong calculateShiftedValue_0800856c(uint inputValue)\n\n{\n  uint shiftCount;\n  uint absoluteInputValue;\n  uint newShiftCount;\n  int leadingZeros;\n  uint adjustedShiftCount;\n  uint signExtension;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  signExtension = inputValue & 0x80000000;\n  absoluteInputValue = inputValue;\n  if ((int)signExtension < 0) {\n    absoluteInputValue = -inputValue;\n  }\n  shiftCount = 0;\n  leadingZeros = leadingZeroCount(absoluteInputValue);\n  adjustedShiftCount = leadingZeros + 0x15;\n  isCarry = SBORROW4(adjustedShiftCount,0x20);\n  newShiftCount = leadingZeros - 0xb;\n  isNegative = (int)newShiftCount < 0;\n  isZero = newShiftCount == 0;\n  if (adjustedShiftCount < 0x20) {\n    isCarry = SCARRY4(newShiftCount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    newShiftCount = adjustedShiftCount;\n    if (!isZero && isCarry == false) {\n      shiftCount = absoluteInputValue << adjustedShiftCount;\n      absoluteInputValue = absoluteInputValue >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    remainingBits = 0x20 - newShiftCount;\n  }\n  absoluteInputValue = absoluteInputValue << (newShiftCount & 0xff);\n  if (isZero || isNegative != isCarry) {\n    absoluteInputValue = absoluteInputValue | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    shiftCount = 0 << (newShiftCount & 0xff);\n  }\nLAB_08008458:\n  if (adjustedShiftCount < 0x433) {\n    return CONCAT44(absoluteInputValue + (0x432 - adjustedShiftCount) * 0x100000 | signExtension,shiftCount);\n  }\n  newShiftCount = ~(0x432 - adjustedShiftCount);\n  if (0x1e < (int)newShiftCount) {\n    return CONCAT44(inputValue,absoluteInputValue >> (newShiftCount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = newShiftCount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(newShiftCount - 0x1f,0xc)) {\n    newShiftCount = newShiftCount + 1;\n    return CONCAT44(signExtension | absoluteInputValue >> (newShiftCount & 0xff),\n                    shiftCount >> (newShiftCount & 0xff) | absoluteInputValue << (0x20 - newShiftCount & 0xff));\n  }\n  return CONCAT44(inputValue,shiftCount >> (0x20 - (0xcU - leadingZeros) & 0xff) | absoluteInputValue << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "calculate_shifted_value_0800856c",
                "param_1": "inputValue",
                "uVar1": "shiftCount",
                "uVar2": "absoluteInputValue",
                "uVar3": "newShiftCount",
                "iVar4": "leadingZeros",
                "uVar5": "adjustedShiftCount",
                "uVar6": "signExtension",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isCarry",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "decode_bitwise_operations_08008590",
            "code": "\nulonglong decode_bitwise_operations_08008590(uint input_param,undefined4 unused_param,undefined4 unused_param,uint flag_param)\n\n{\n  uint shifted_flag;\n  uint shifted_input;\n  uint merged_shifted;\n  uint bit_shift;\n  uint shifted_input_copy;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_shift;\n  bool compare_result;\n  bool zero_param_check;\n  bool carry_flag;\n  \n  shifted_input_copy = input_param << 1;\n  zero_param_check = shifted_input_copy == 0;\n  shifted_flag = (uint)((input_param & 0x80000000) != 0) << 0x1f;\n  bit_shift = (uint)((int)shifted_input_copy >> 3) >> 1;\n  merged_shifted = shifted_flag | bit_shift;\n  input_param = input_param << 0x1d;\n  if (!zero_param_check) {\n    flag_param = shifted_input_copy & 0xff000000;\n    zero_param_check = flag_param == 0;\n  }\n  if (!zero_param_check) {\n    zero_param_check = flag_param == 0xff000000;\n  }\n  if (!zero_param_check) {\n    return CONCAT44(merged_shifted,input_param) ^ 0x3800000000000000;\n  }\n  if ((shifted_input_copy & 0xffffff) == 0) {\n    return CONCAT44(merged_shifted,input_param);\n  }\n  if (flag_param == 0xff000000) {\n    return CONCAT44(merged_shifted,input_param) | 0x8000000000000;\n  }\n  shifted_input = input_param;\n  shifted_input_copy = bit_shift;\n  if (bit_shift == 0) {\n    shifted_input = 0;\n    shifted_input_copy = input_param;\n  }\n  leading_zeros = LZCOUNT(shifted_input_copy);\n  if (bit_shift == 0) {\n    leading_zeros = leading_zeros + 0x20;\n  }\n  shift_amount = leading_zeros - 0xb;\n  carry_flag = SBORROW4(shift_amount,0x20);\n  bit_shift = leading_zeros - 0x2b;\n  zero_param_check = (int)bit_shift < 0;\n  compare_result = bit_shift == 0;\n  if ((int)shift_amount < 0x20) {\n    carry_flag = SCARRY4(bit_shift,0xc);\n    leading_zeros = leading_zeros + -0x1f;\n    zero_param_check = leading_zeros < 0;\n    compare_result = leading_zeros == 0;\n    bit_shift = shift_amount;\n    if (!compare_result && zero_param_check == carry_flag) {\n      shifted_input = shifted_input_copy << (shift_amount & 0xff);\n      shifted_input_copy = shifted_input_copy >> (0xcU - leading_zeros & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (compare_result || zero_param_check != carry_flag) {\n    remaining_shift = 0x20 - bit_shift;\n  }\n  shifted_input_copy = shifted_input_copy << (bit_shift & 0xff);\n  if (compare_result || zero_param_check != carry_flag) {\n    shifted_input_copy = shifted_input_copy | shifted_input >> (remaining_shift & 0xff);\n  }\n  if (compare_result || zero_param_check != carry_flag) {\n    shifted_input = shifted_input << (bit_shift & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(shifted_input_copy + (0x380 - shift_amount) * 0x100000 | shifted_flag,shifted_input);\n  }\n  bit_shift = ~(0x380 - shift_amount);\n  if (0x1e < (int)bit_shift) {\n    return CONCAT44(merged_shifted,shifted_input_copy >> (bit_shift - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = bit_shift - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(bit_shift - 0x1f,0xc)) {\n    bit_shift = bit_shift + 1;\n    return CONCAT44(shifted_flag | shifted_input_copy >> (bit_shift & 0xff),\n                    shifted_input >> (bit_shift & 0xff) | shifted_input_copy << (0x20 - bit_shift & 0xff));\n  }\n  return CONCAT44(merged_shifted,shifted_input >> (0x20 - (0xcU - leading_zeros) & 0xff) | shifted_input_copy << (0xcU - leading_zeros & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "decode_bitwise_operations_08008590",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param",
                "param_4": "flag_param",
                "uVar1": "shifted_flag",
                "uVar2": "shifted_input",
                "uVar3": "merged_shifted",
                "uVar4": "bit_shift",
                "uVar5": "shifted_input_copy",
                "iVar6": "leading_zeros",
                "uVar7": "shift_amount",
                "in_r12": "remaining_shift",
                "bVar8": "compare_result",
                "bVar9": "zero_param_check",
                "bVar10": "carry_flag"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_result_08008640",
            "code": "\nulonglong calculate_result_08008640(undefined4 input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  ulonglong result_low;\n  longlong temp;\n  uint uVar3;\n  uint uVar4;\n  int total_sum;\n  uint uVar6;\n  uint unaff_r5;\n  uint uVar7;\n  uint uVar8;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong result;\n  \n  result = CONCAT44(input_2,input_1);\n  uVar7 = 0x7ff;\n  uVar4 = input_2 >> 0x14 & 0x7ff;\n  condition1 = uVar4 == 0;\n  if (!condition1) {\n    unaff_r5 = input_4 >> 0x14 & 0x7ff;\n    condition1 = unaff_r5 == 0;\n  }\n  if (!condition1) {\n    condition1 = uVar4 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = unaff_r5 == 0x7ff;\n  }\n  if (condition1) {\n    result = calculate_xor_bit_0800881c();\n  }\n  uVar3 = (uint)(result >> 0x20);\n  total_sum = uVar4 + unaff_r5;\n  uVar4 = uVar3 ^ input_4;\n  uVar3 = uVar3 & ~(uVar7 << 0x15);\n  input_4 = input_4 & ~(uVar7 << 0x15);\n  condition1 = ((uint)result | uVar3 << 0xc) == 0;\n  if (!condition1) {\n    condition1 = (input_3 | input_4 << 0xc) == 0;\n  }\n  uVar3 = uVar3 | 0x100000;\n  input_4 = input_4 | 0x100000;\n  if (condition1) {\n    input_3 = (uint)result | input_3;\n    input_4 = (uVar4 & 0x80000000 | uVar3) ^ input_4;\n    uVar4 = uVar7 >> 1;\n    condition3 = SBORROW4(total_sum,uVar4);\n    uVar6 = total_sum - uVar4;\n    condition1 = uVar6 == 0;\n    uVar3 = uVar6;\n    if (!condition1 && (int)uVar4 <= total_sum) {\n      condition3 = SBORROW4(uVar7,uVar6);\n      uVar3 = uVar7 - uVar6;\n      condition1 = uVar7 == uVar6;\n    }\n    if (!condition1 && (int)uVar3 < 0 == condition3) {\n      input_4 = input_4 | uVar6 * 0x100000;\n    }\n    if (!condition1 && (int)uVar3 < 0 == condition3) {\n      return CONCAT44(input_4,input_3);\n    }\n    input_4 = input_4 | 0x100000;\n    uVar7 = 0;\n    condition3 = SBORROW4(uVar6,1);\n    uVar6 = uVar6 - 1;\n    condition1 = uVar6 == 0;\n    uVar4 = uVar6;\n  }\n  else {\n    result_low = (result & 0xffffffff) * (ulonglong)input_3;\n    result = (result & 0xffffffff) * (ulonglong)input_4 +\n             (ulonglong)uVar3 * (ulonglong)input_3 + (result_low >> 0x20);\n    uVar8 = (uint)result;\n    temp = (ulonglong)uVar3 * (ulonglong)input_4 + (result >> 0x20);\n    uVar7 = (uint)temp;\n    uVar3 = (uint)((ulonglong)temp >> 0x20);\n    if ((int)result_low != 0) {\n      uVar8 = uVar8 | 1;\n    }\n    uVar6 = (total_sum + -0x3ff) - (uint)(uVar3 < 0x200);\n    if (uVar3 < 0x200) {\n      condition1 = (uVar8 & 0x80000000) != 0;\n      uVar8 = uVar8 << 1;\n      temp = CONCAT44(uVar3 * 2 + (uint)(CARRY4(uVar7,uVar7) || CARRY4(uVar7 * 2,(uint)condition1)),\n                       uVar7 * 2 + (uint)condition1);\n    }\n    input_4 = uVar4 & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    input_3 = (uint)temp << 0xb | uVar8 >> 0x15;\n    uVar7 = uVar8 * 0x800;\n    condition2 = 0xfc < uVar6;\n    condition3 = SBORROW4(uVar6,0xfd);\n    uVar3 = uVar6 - 0xfd;\n    condition1 = uVar3 == 0;\n    uVar4 = uVar3;\n    if (condition2 && !condition1) {\n      condition2 = 0x6ff < uVar3;\n      condition3 = SBORROW4(uVar3,0x700);\n      uVar4 = uVar6 - 0x7fd;\n      condition1 = uVar3 == 0x700;\n    }\n    if (!condition2 || condition1) {\n      condition1 = 0x7fffffff < uVar7;\n      if (uVar7 == 0x80000000) {\n        condition1 = (uVar8 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_4 + uVar6 * 0x100000 + (uint)CARRY4(input_3,(uint)condition1),input_3 + condition1\n                     );\n    }\n  }\n  if (!condition1 && (int)uVar4 < 0 == condition3) {\n    return (ulonglong)(input_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition2 = SCARRY4(uVar6,0x36);\n  condition1 = (int)(uVar6 + 0x36) < 0;\n  condition3 = uVar6 == 0xffffffca;\n  if (condition3 || condition1 != condition2) {\n    input_3 = 0;\n  }\n  if (condition3 || condition1 != condition2) {\n    input_4 = input_4 & 0x80000000;\n  }\n  if (condition3 || condition1 != condition2) {\n    return CONCAT44(input_4,input_3);\n  }\n  uVar4 = -uVar6;\n  uVar3 = uVar4 - 0x20;\n  if (0x1f < (int)uVar4) {\n    uVar6 = input_3 >> (uVar3 & 0xff) | input_4 << (0x20 - uVar3 & 0xff);\n    uVar4 = (input_4 >> (uVar3 & 0xff) & ~((input_4 & 0x80000000) >> (uVar3 & 0xff))) -\n            ((int)uVar6 >> 0x1f);\n    if ((uVar7 | input_3 << (0x20 - uVar3 & 0xff) | uVar6 << 1) == 0) {\n      uVar4 = uVar4 & ~(uVar6 >> 0x1f);\n    }\n    return CONCAT44(input_4,uVar4) & 0x80000000ffffffff;\n  }\n  total_sum = uVar4 - 0x14;\n  if (total_sum == 0 || total_sum < 0 != SCARRY4(uVar3,0xc)) {\n    uVar8 = input_3 << (uVar6 + 0x20 & 0xff);\n    uVar3 = input_3 >> (uVar4 & 0xff) | input_4 << (uVar6 + 0x20 & 0xff);\n    uVar6 = uVar3 + -((int)uVar8 >> 0x1f);\n    if ((uVar7 | uVar8 << 1) == 0) {\n      uVar6 = uVar6 & ~(uVar8 >> 0x1f);\n    }\n    return CONCAT44((input_4 & 0x80000000) +\n                    ((input_4 & 0x7fffffff) >> (uVar4 & 0xff)) +\n                    (uint)CARRY4(uVar3,-((int)uVar8 >> 0x1f)),uVar6);\n  }\n  uVar4 = 0xc - total_sum;\n  uVar6 = input_3 << (uVar4 & 0xff);\n  uVar4 = input_3 >> (0x20 - uVar4 & 0xff) | input_4 << (uVar4 & 0xff);\n  uVar3 = uVar4 + -((int)uVar6 >> 0x1f);\n  if ((uVar7 | uVar6 << 1) == 0) {\n    uVar3 = uVar3 & ~(uVar6 >> 0x1f);\n  }\n  return CONCAT44((input_4 & 0x80000000) + (uint)CARRY4(uVar4,-((int)uVar6 >> 0x1f)),uVar3);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_result_08008640",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_low",
                "lVar2": "temp",
                "iVar5": "total_sum",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "bVar11": "condition3",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_xor_bit_0800881c",
            "code": "\nulonglong calculate_xor_bit_0800881c(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  uint dividend_sign;\n  uint divisor_sign;\n  uint shift_amount;\n  uint temp;\n  uint mask;\n  bool is_zero;\n  \n  shift_amount = mask & remainder >> 0x14;\n  if (divisor_sign != mask && shift_amount != mask) {\n    is_zero = (dividend | divisor << 1) == 0;\n    if (!is_zero) {\n      is_zero = (quotient | remainder << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((divisor ^ remainder) & 0x80000000) << 0x20;\n    }\n    if (divisor_sign == 0) {\n      temp = divisor & 0x80000000;\n      do {\n        dividend_sign = dividend & 0x80000000;\n        dividend = dividend << 1;\n        divisor = divisor * 2 + (uint)(dividend_sign != 0);\n      } while ((divisor & 0x100000) == 0);\n      divisor = divisor | temp;\n      if (shift_amount != 0) {\n        return CONCAT44(divisor,dividend);\n      }\n    }\n    do {\n      shift_amount = quotient & 0x80000000;\n      quotient = quotient << 1;\n      remainder = remainder * 2 + (uint)(shift_amount != 0);\n    } while ((remainder & 0x100000) == 0);\n    return CONCAT44(divisor,dividend);\n  }\n  is_zero = (dividend | divisor << 1) == 0;\n  if (is_zero) {\n    divisor = remainder;\n    dividend = quotient;\n  }\n  if (!is_zero) {\n    is_zero = (quotient | remainder << 1) == 0;\n  }\n  temp = divisor;\n  if (((!is_zero) && ((divisor_sign != mask || ((dividend | divisor << 0xc) == 0)))) &&\n     ((shift_amount != mask || (dividend = quotient, temp = remainder, (quotient | remainder << 0xc) == 0)))) {\n    return (ulonglong)((divisor ^ remainder) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp,dividend) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_xor_bit_0800881c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar1": "dividend_sign",
                "unaff_r4": "divisor_sign",
                "uVar2": "shift_amount",
                "uVar3": "temp",
                "in_r12": "mask",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_floating_point_08008894",
            "code": "\nulonglong calculateFloatingPoint_08008894(undefined4 sign,uint exponent,uint mantissa_1,uint mantissa_2)\n\n{\n  uint exponent1;\n  uint exponent2;\n  uint mantissa1;\n  uint mantissa2;\n  uint remainder1;\n  uint remainder2;\n  uint signResult;\n  int difference;\n  uint exponentResult;\n  uint exponent2_2;\n  uint mantissa2_2;\n  uint mantissa1_2;\n  uint difference_2;\n  uint flag;\n  bool check;\n  bool isEqual;\n  bool carry;\n  undefined8 exponent17;\n  \n  exponent17 = CONCAT44(exponent,sign);\n  flag = 0x7ff;\n  signResult = exponent >> 0x14 & 0x7ff;\n  check = signResult == 0;\n  if (!check) {\n    exponent2_2 = mantissa_2 >> 0x14 & 0x7ff;\n    check = exponent2_2 == 0;\n  }\n  if (!check) {\n    check = signResult == 0x7ff;\n  }\n  if (!check) {\n    check = exponent2_2 == 0x7ff;\n  }\n  if (check) {\n    exponent17 = extracted_bits_08008a02();\n  }\n  exponentResult = (uint)((ulonglong)exponent17 >> 0x20);\n  mantissa1_2 = (uint)exponent17;\n  difference = signResult - exponent2_2;\n  if ((mantissa_1 | mantissa_2 << 0xc) == 0) {\n    signResult = (exponentResult ^ mantissa_2) & 0x80000000 | exponentResult & 0xfffff;\n    carry = SCARRY4(difference,flag >> 1);\n    exponentResult = difference + (flag >> 1);\n    check = (int)exponentResult < 0;\n    isEqual = exponentResult == 0;\n    if (!isEqual && check == carry) {\n      carry = SBORROW4(flag,exponentResult);\n      check = (int)(flag - exponentResult) < 0;\n      isEqual = flag == exponentResult;\n    }\n    if (!isEqual && check == carry) {\n      signResult = signResult | exponentResult * 0x100000;\n    }\n    if (!isEqual && check == carry) {\n      return CONCAT44(signResult,mantissa1_2);\n    }\n    signResult = signResult | 0x100000;\n    flag = 0;\n    isEqual = SBORROW4(exponentResult,1);\n    exponentResult = exponentResult - 1;\n    check = exponentResult == 0;\n    mantissa1 = exponentResult;\n  }\n  else {\n    mantissa1 = (mantissa_2 << 0xc) >> 4 | 0x10000000 | mantissa_1 >> 0x18;\n    flag = mantissa_1 << 8;\n    mantissa2_2 = (exponentResult << 0xc) >> 4 | 0x10000000 | mantissa1_2 >> 0x18;\n    mantissa1_2 = mantissa1_2 * 0x100;\n    signResult = (exponentResult ^ mantissa_2) & 0x80000000;\n    check = mantissa1 <= mantissa2_2;\n    if (mantissa2_2 == mantissa1) {\n      check = flag <= mantissa1_2;\n    }\n    difference = difference + (uint)check;\n    exponentResult = difference + 0x3fd;\n    if (check == false) {\n      mantissa1 = mantissa1 >> 1;\n      flag = (uint)((mantissa_1 >> 0x18 & 1) != 0) << 0x1f | flag >> 1;\n    }\n    difference_2 = mantissa1_2 - flag;\n    mantissa2_2 = (mantissa2_2 - mantissa1) - (uint)(mantissa1_2 < flag);\n    mantissa2 = mantissa1 >> 1;\n    exponent1 = (uint)((mantissa1 & 1) != 0) << 0x1f | flag >> 1;\n    mantissa1_2 = 0x100000;\n    mantissa1 = 0x80000;\n    while( true ) {\n      check = exponent1 <= difference_2;\n      if (mantissa2 < mantissa2_2 || mantissa2_2 - mantissa2 < (uint)check) {\n        difference_2 = difference_2 - exponent1;\n        mantissa1_2 = mantissa1_2 | mantissa1;\n        mantissa2_2 = (mantissa2_2 - mantissa2) - (uint)!check;\n      }\n      remainder1 = mantissa2 >> 1;\n      exponent1 = (uint)((mantissa2 & 1) != 0) << 0x1f | exponent1 >> 1;\n      isEqual = exponent1 <= difference_2;\n      check = mantissa2_2 - remainder1 < (uint)isEqual;\n      flag = mantissa2_2;\n      if (remainder1 < mantissa2_2 || check) {\n        difference_2 = difference_2 - exponent1;\n        flag = (mantissa2_2 - remainder1) - (uint)!isEqual;\n      }\n      if (remainder1 < mantissa2_2 || check) {\n        mantissa1_2 = mantissa1_2 | mantissa1 >> 1;\n      }\n      mantissa2_2 = mantissa2 >> 2;\n      exponent2 = (uint)((remainder1 & 1) != 0) << 0x1f | exponent1 >> 1;\n      isEqual = exponent2 <= difference_2;\n      check = flag - mantissa2_2 < (uint)isEqual;\n      remainder1 = flag;\n      if (mantissa2_2 < flag || check) {\n        difference_2 = difference_2 - exponent2;\n        remainder1 = (flag - mantissa2_2) - (uint)!isEqual;\n      }\n      if (mantissa2_2 < flag || check) {\n        mantissa1_2 = mantissa1_2 | mantissa1 >> 2;\n      }\n      remainder2 = mantissa2 >> 3;\n      exponent1 = (uint)((mantissa2_2 & 1) != 0) << 0x1f | exponent2 >> 1;\n      isEqual = exponent1 <= difference_2;\n      check = remainder1 - remainder2 < (uint)isEqual;\n      mantissa2_2 = remainder1;\n      if (remainder2 < remainder1 || check) {\n        difference_2 = difference_2 - exponent1;\n        mantissa2_2 = (remainder1 - remainder2) - (uint)!isEqual;\n      }\n      if (remainder2 < remainder1 || check) {\n        mantissa1_2 = mantissa1_2 | mantissa1 >> 3;\n      }\n      flag = mantissa2_2 | difference_2;\n      if (flag == 0) break;\n      mantissa2_2 = mantissa2_2 << 4 | difference_2 >> 0x1c;\n      difference_2 = difference_2 << 4;\n      mantissa2 = mantissa2 & 0xfffffff8 | exponent1 >> 0x1d;\n      exponent1 = (exponent2 >> 1) << 3;\n      mantissa1 = mantissa1 >> 4;\n      if (mantissa1 == 0) {\n        remainder2 = mantissa2;\n        if ((signResult & 0x100000) != 0) goto LAB_080089b2;\n        signResult = signResult | mantissa1_2;\n        mantissa1_2 = 0;\n        mantissa1 = 0x80000000;\n      }\n    }\n    if ((signResult & 0x100000) == 0) {\n      signResult = signResult | mantissa1_2;\n      mantissa1_2 = 0;\n    }\nLAB_080089b2:\n    carry = 0xfc < exponentResult;\n    isEqual = SBORROW4(exponentResult,0xfd);\n    mantissa2 = difference + 0x300;\n    check = mantissa2 == 0;\n    mantissa1 = mantissa2;\n    if (carry && !check) {\n      carry = 0x6ff < mantissa2;\n      isEqual = SBORROW4(mantissa2,0x700);\n      mantissa1 = difference - 0x400;\n      check = mantissa2 == 0x700;\n    }\n    if (!carry || check) {\n      check = remainder2 <= mantissa2_2;\n      if (mantissa2_2 == remainder2) {\n        check = exponent1 <= difference_2;\n      }\n      if (mantissa2_2 == remainder2 && difference_2 == exponent1) {\n        check = (mantissa1_2 & 1) != 0;\n      }\n      return CONCAT44(signResult + exponentResult * 0x100000 + (uint)CARRY4(mantissa1_2,(uint)check),mantissa1_2 + check);\n    }\n  }\n  if (!check && (int)mantissa1 < 0 == isEqual) {\n    return (ulonglong)(signResult & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carry = SCARRY4(exponentResult,0x36);\n  check = (int)(exponentResult + 0x36) < 0;\n  isEqual = exponentResult == 0xffffffca;\n  if (isEqual || check != carry) {\n    mantissa1_2 = 0;\n  }\n  if (isEqual || check != carry) {\n    signResult = signResult & 0x80000000;\n  }\n  if (isEqual || check != carry) {\n    return CONCAT44(signResult,mantissa1_2);\n  }\n  mantissa1 = -exponentResult;\n  mantissa2_2 = mantissa1 - 0x20;\n  if (0x1f < (int)mantissa1) {\n    mantissa1 = mantissa1_2 >> (mantissa2_2 & 0xff) | signResult << (0x20 - mantissa2_2 & 0xff);\n    exponentResult = (signResult >> (mantissa2_2 & 0xff) & ~((signResult & 0x80000000) >> (mantissa2_2 & 0xff))) -\n            ((int)mantissa1 >> 0x1f);\n    if ((flag | mantissa1_2 << (0x20 - mantissa2_2 & 0xff) | mantissa1 << 1) == 0) {\n      exponentResult = exponentResult & ~(mantissa1 >> 0x1f);\n    }\n    return CONCAT44(signResult,exponentResult) & 0x80000000ffffffff;\n  }\n  difference = mantissa1 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(mantissa2_2,0xc)) {\n    exponentResult = 0xc - difference;\n    mantissa1 = mantissa1_2 << (exponentResult & 0xff);\n    mantissa1_2 = mantissa1_2 >> (0x20 - exponentResult & 0xff) | signResult << (exponentResult & 0xff);\n    exponentResult = mantissa1_2 + -((int)mantissa1 >> 0x1f);\n    if ((flag | mantissa1 << 1) == 0) {\n      exponentResult = exponentResult & ~(mantissa1 >> 0x1f);\n    }\n    return CONCAT44((signResult & 0x80000000) + (uint)CARRY4(mantissa1_2,-((int)mantissa1 >> 0x1f)),exponentResult);\n  }\n  mantissa2_2 = mantissa1_2 << (exponentResult + 0x20 & 0xff);\n  mantissa1_2 = mantissa1_2 >> (mantissa1 & 0xff) | signResult << (exponentResult + 0x20 & 0xff);\n  exponentResult = mantissa1_2 + -((int)mantissa2_2 >> 0x1f);\n  if ((flag | mantissa2_2 << 1) == 0) {\n    exponentResult = exponentResult & ~(mantissa2_2 >> 0x1f);\n  }\n  return CONCAT44((signResult & 0x80000000) +\n                  ((signResult & 0x7fffffff) >> (mantissa1 & 0xff)) +\n                  (uint)CARRY4(mantissa1_2,-((int)mantissa2_2 >> 0x1f)),exponentResult);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_floating_point_08008894",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "mantissa_1",
                "param_4": "mantissa_2",
                "uVar1": "exponent1",
                "uVar2": "exponent2",
                "uVar3": "mantissa1",
                "uVar4": "mantissa2",
                "uVar5": "remainder1",
                "uVar6": "remainder2",
                "uVar7": "signResult",
                "iVar8": "difference",
                "uVar9": "exponentResult",
                "unaff_r5": "exponent2_2",
                "uVar10": "mantissa2_2",
                "uVar11": "mantissa1_2",
                "uVar12": "difference_2",
                "uVar13": "flag",
                "bVar14": "check",
                "bVar15": "isEqual",
                "bVar16": "carry"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "extracted_bits_08008a02",
            "code": "\nulonglong extractedBits_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint extracted1;\n  uint extracted2;\n  uint mask;\n  bool isZero;\n  \n  extracted1 = mask & input4 >> 0x14;\n  extracted2 = input2;\n  if (temp1 != mask || extracted1 != mask) {\n    if (temp1 == mask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, extracted2 = input4, extracted1 != mask)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (extracted1 == mask) {\n      input1 = input3;\n      extracted2 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (temp1 == 0) {\n          extracted2 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | extracted2;\n          if (extracted1 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          extracted2 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(extracted2 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08008874;\n      if ((input3 | input4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(extracted2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "extracted_bits_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "temp1",
                "uVar2": "extracted1",
                "uVar3": "extracted2",
                "in_r12": "mask",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_parameters_08008a74",
            "code": "\nuint check_parameters_08008a74(uint x,uint y,uint param_3,uint param_4)\n\n{\n  uint result;\n  bool is_zero_params;\n  bool is_less_than;\n  \n  if (((int)(y << 1) >> 0x15 == -1 || (int)(param_4 << 1) >> 0x15 == -1) &&\n     ((((int)(y << 1) >> 0x15 == -1 && ((x | y << 0xc) != 0)) ||\n      (((int)(param_4 << 1) >> 0x15 == -1 && ((param_3 | param_4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  is_zero_params = (x | y << 1) == 0;\n  if (is_zero_params) {\n    is_zero_params = (param_3 | param_4 << 1) == 0;\n  }\n  if (!is_zero_params) {\n    is_zero_params = y == param_4;\n  }\n  if (is_zero_params) {\n    is_zero_params = x == param_3;\n  }\n  if (!is_zero_params) {\n    result = y ^ param_4;\n    is_zero_params = result == 0;\n    if (-1 < (int)result) {\n      is_zero_params = y == param_4;\n    }\n    is_less_than = -1 < (int)result && param_4 <= y;\n    if (is_zero_params) {\n      is_less_than = param_3 <= x;\n    }\n    param_4 = (int)param_4 >> 0x1f;\n    if (!is_less_than) {\n      param_4 = ~param_4;\n    }\n    return param_4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "param_1": "x",
                "param_2": "y",
                "uVar1": "result",
                "bVar2": "is_zero_params",
                "bVar3": "is_less_than"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "validate_parameters_08008af0",
            "code": "\nvoid validate_parameters_08008af0(undefined4 first_param,undefined4 second_param,undefined4 third_param,undefined4 fourth_param)\n\n{\n  validate_and_return_param_08008b00(third_param,fourth_param,first_param,second_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "validate_parameters_08008af0",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "validate_and_return_param_08008b00",
            "code": "\nundefined4 validate_and_return_param_08008b00(undefined4 input_param)\n\n{\n  check_parameters_08008a74();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "validate_and_return_param_08008b00",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_if_char_not_null_08008b10",
            "code": "\nbool check_if_char_not_null_08008b10(void)\n\n{\n  char input_char;\n  \n  validate_and_return_param_08008b00();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_if_char_not_null_08008b10",
                "in_ZR": "input_char"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_end_of_string_08008b24",
            "code": "\nbool is_end_of_string_08008b24(void)\n\n{\n  char input_character;\n  \n  validate_and_return_param_08008b00();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_end_of_string_08008b24",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "validate_and_check_08008b4c",
            "code": "\nbool validate_and_check_08008b4c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  validate_parameters_08008af0();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "validate_and_check_08008b4c",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_cy_null_08008b60",
            "code": "\nbool is_CY_null_08008b60(void)\n\n{\n  char input_char;\n  \n  validate_parameters_08008af0();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_cy_null_08008b60",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_conditions_08008b74",
            "code": "\nundefined4 check_conditions_08008b74(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_conditions_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_inverse_08008ba0",
            "code": "\nuint calculateInverse_08008ba0(uint input1,uint input2)\n\n{\n  uint upperDivisor;\n  int offset;\n  uint lowerDivisor;\n  \n  offset = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      return 0;\n    }\n    upperDivisor = offset >> 0x15;\n    lowerDivisor = -upperDivisor - 0x3e1;\n    if (upperDivisor < 0xfffffc20 && lowerDivisor != 0) {\n      upperDivisor = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (lowerDivisor & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        upperDivisor = -upperDivisor;\n      }\n      return upperDivisor;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_inverse_08008ba0",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "upperDivisor",
                "iVar2": "offset",
                "uVar3": "lowerDivisor"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "calculate_shift_amount_08008bf0",
            "code": "\nuint calculateShiftAmount_08008bf0(uint input1,uint input2)\n\n{\n  int shiftedValue;\n  uint shiftAmount;\n  \n  if ((input2 & 0x80000000) != 0) {\n    return 0;\n  }\n  shiftedValue = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < shiftedValue) {\n      return 0;\n    }\n    shiftAmount = -(shiftedValue >> 0x15) - 0x3e1;\n    if (-1 < (int)shiftAmount) {\n      return (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shiftAmount & 0xff);\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "calculate_shift_amount_08008bf0",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "shiftedValue",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_float_08008c30",
            "code": "\nuint calculateFloat_08008c30(uint inputFloat1,uint inputFloat2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThan;\n  \n  temp1 = inputFloat2 * 2;\n  isLessThan = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThan && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((inputFloat2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((inputFloat1 | inputFloat2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return inputFloat2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != SCARRY4(temp2,0x2e00000)) {\n      return inputFloat2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = inputFloat1 >> (temp1 & 0xff);\n    if (inputFloat1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = inputFloat2 & 0x1fffff | 0x100000;\n    inputFloat1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (inputFloat2 & 0x80000000 | inputFloat1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < inputFloat1 * 8);\n  if (inputFloat1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_float_08008c30",
                "param_1": "inputFloat1",
                "param_2": "inputFloat2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThan"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_float_value_08008cd8",
            "code": "\nuint calculateFloatValue_08008cd8(uint inputValue,uint inputFlag,undefined4 inputParam,uint inputValue2)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  uint result1;\n  uint result2;\n  uint tempValue1;\n  uint tempValue2;\n  uint difference;\n  bool isConditionMet;\n  \n  result1 = inputFlag ^ 0x80000000;\n  tempValue1 = inputValue << 1;\n  isConditionMet = tempValue1 == 0;\n  if (!isConditionMet) {\n    inputValue2 = inputFlag << 1;\n    isConditionMet = inputValue2 == 0;\n  }\n  if (!isConditionMet) {\n    isConditionMet = tempValue1 == inputValue2;\n  }\n  shiftedValue1 = (int)tempValue1 >> 0x18;\n  if (!isConditionMet) {\n    isConditionMet = shiftedValue1 == -1;\n  }\n  if (!isConditionMet) {\n    isConditionMet = (int)inputValue2 >> 0x18 == -1;\n  }\n  if (isConditionMet) {\n    shiftedValue2 = (int)(inputFlag << 1) >> 0x18;\n    if (shiftedValue1 == -1 || shiftedValue2 == -1) {\n      tempValue1 = result1;\n      if (shiftedValue1 == -1) {\n        tempValue1 = inputValue;\n      }\n      if (shiftedValue1 != -1 || shiftedValue2 != -1) {\n        result1 = tempValue1;\n      }\n      isConditionMet = (tempValue1 & 0x7fffff) == 0;\n      if (isConditionMet) {\n        isConditionMet = (result1 & 0x7fffff) == 0;\n      }\n      if (isConditionMet) {\n        isConditionMet = tempValue1 == result1;\n      }\n      if (!isConditionMet) {\n        tempValue1 = tempValue1 | 0x400000;\n      }\n      return tempValue1;\n    }\n    if (((inputValue ^ result1) & 0x7fffffff) != 0) {\n      if (tempValue1 == 0) {\n        inputValue = result1;\n      }\n      return inputValue;\n    }\n    if (inputValue != result1) {\n      return 0;\n    }\n    if ((tempValue1 & 0xff000000) == 0) {\n      result1 = inputValue << 1;\n      if ((inputValue & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (tempValue1 < 0xfe000000) {\n      return inputValue + 0x800000;\n    }\n    inputValue = inputValue & 0x80000000;\nLAB_08008e12:\n    return inputValue | 0x7f800000;\n  }\n  tempValue1 = tempValue1 >> 0x18;\n  inputValue2 = inputValue2 >> 0x18;\n  difference = inputValue2 - tempValue1;\n  isConditionMet = difference != 0;\n  tempValue2 = tempValue1;\n  if (isConditionMet && tempValue1 <= inputValue2) {\n    tempValue2 = tempValue1 + difference;\n  }\n  if (isConditionMet && tempValue1 <= inputValue2) {\n    result1 = result1 ^ inputValue;\n  }\n  if (isConditionMet && tempValue1 <= inputValue2) {\n    inputValue = inputValue ^ result1;\n  }\n  if (isConditionMet && tempValue1 <= inputValue2) {\n    result1 = result1 ^ inputValue;\n  }\n  if (inputValue2 < tempValue1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return inputValue;\n  }\n  tempValue1 = inputValue & 0xffffff | 0x800000;\n  if ((inputValue & 0x80000000) != 0) {\n    tempValue1 = -tempValue1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (tempValue2 == difference) {\n    result2 = result2 ^ 0x800000;\n    if (tempValue2 == 0) {\n      tempValue1 = tempValue1 ^ 0x800000;\n      tempValue2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  tempValue1 = tempValue1 + ((int)result2 >> (difference & 0xff));\n  result2 = result2 << (0x20 - difference & 0xff);\n  inputValue = tempValue1 & 0x80000000;\n  if ((int)tempValue1 < 0) {\n    isConditionMet = result2 != 0;\n    result2 = -result2;\n    tempValue1 = -tempValue1 - (uint)isConditionMet;\n  }\n  if (tempValue1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    tempValue1 = tempValue1 * 2 + (uint)(result1 != 0);\n    result1 = tempValue2 - 2;\n    if (tempValue2 - 1 == 0 || tempValue1 < 0x800000) {\n      difference = LZCOUNT(tempValue1) - 8;\n      tempValue1 = tempValue1 << (difference & 0xff);\n      if ((int)result1 < (int)difference) {\n        tempValue1 = tempValue1 >> (-(result1 - difference) & 0xff);\n      }\n      else {\n        tempValue1 = tempValue1 + (result1 - difference) * 0x800000;\n      }\n      return tempValue1 | inputValue;\n    }\n  }\n  else {\n    result1 = tempValue2 - 1;\n    if (0xffffff < tempValue1) {\n      result1 = tempValue1 & 1;\n      tempValue1 = tempValue1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = tempValue2;\n      if (0xfd < tempValue2) goto LAB_08008e12;\n    }\n  }\n  tempValue1 = tempValue1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    tempValue1 = tempValue1 & 0xfffffffe;\n  }\n  return tempValue1 | inputValue;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_float_value_08008cd8",
                "param_1": "inputValue",
                "param_2": "inputFlag",
                "param_3": "inputParam",
                "param_4": "inputValue2",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "tempValue1",
                "uVar6": "tempValue2",
                "uVar7": "difference",
                "bVar8": "isConditionMet"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_floating_point_08008cdc",
            "code": "\nuint calculateFloatingPoint_08008cdc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1Sign;\n  int shiftedInput2Sign;\n  uint shiftedInput2Abs;\n  uint shiftedInput1;\n  uint iterationCount;\n  uint difference;\n  bool isZeroShiftedInput1;\n  \n  shiftedInput1 = input1 << 1;\n  isZeroShiftedInput1 = shiftedInput1 == 0;\n  if (!isZeroShiftedInput1) {\n    input4 = input2 << 1;\n    isZeroShiftedInput1 = input4 == 0;\n  }\n  if (!isZeroShiftedInput1) {\n    isZeroShiftedInput1 = shiftedInput1 == input4;\n  }\n  shiftedInput1Sign = (int)shiftedInput1 >> 0x18;\n  if (!isZeroShiftedInput1) {\n    isZeroShiftedInput1 = shiftedInput1Sign == -1;\n  }\n  if (!isZeroShiftedInput1) {\n    isZeroShiftedInput1 = (int)input4 >> 0x18 == -1;\n  }\n  if (isZeroShiftedInput1) {\n    shiftedInput2Sign = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1Sign == -1 || shiftedInput2Sign == -1) {\n      shiftedInput1 = input2;\n      if (shiftedInput1Sign == -1) {\n        shiftedInput1 = input1;\n      }\n      if (shiftedInput1Sign != -1 || shiftedInput2Sign != -1) {\n        input2 = shiftedInput1;\n      }\n      isZeroShiftedInput1 = (shiftedInput1 & 0x7fffff) == 0;\n      if (isZeroShiftedInput1) {\n        isZeroShiftedInput1 = (input2 & 0x7fffff) == 0;\n      }\n      if (isZeroShiftedInput1) {\n        isZeroShiftedInput1 = shiftedInput1 == input2;\n      }\n      if (!isZeroShiftedInput1) {\n        shiftedInput1 = shiftedInput1 | 0x400000;\n      }\n      return shiftedInput1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shiftedInput1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shiftedInput1 & 0xff000000) == 0) {\n      shiftedInput1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shiftedInput1 = shiftedInput1 | 0x80000000;\n      }\n      return shiftedInput1;\n    }\n    if (shiftedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  shiftedInput1 = shiftedInput1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shiftedInput1;\n  isZeroShiftedInput1 = difference != 0;\n  iterationCount = shiftedInput1;\n  if (isZeroShiftedInput1 && shiftedInput1 <= input4) {\n    iterationCount = shiftedInput1 + difference;\n  }\n  if (isZeroShiftedInput1 && shiftedInput1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isZeroShiftedInput1 && shiftedInput1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isZeroShiftedInput1 && shiftedInput1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < shiftedInput1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shiftedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  shiftedInput2Abs = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    shiftedInput2Abs = -shiftedInput2Abs;\n  }\n  if (iterationCount == difference) {\n    shiftedInput2Abs = shiftedInput2Abs ^ 0x800000;\n    if (iterationCount == 0) {\n      shiftedInput1 = shiftedInput1 ^ 0x800000;\n      iterationCount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + ((int)shiftedInput2Abs >> (difference & 0xff));\n  shiftedInput2Abs = shiftedInput2Abs << (0x20 - difference & 0xff);\n  input1 = shiftedInput1 & 0x80000000;\n  if ((int)shiftedInput1 < 0) {\n    isZeroShiftedInput1 = shiftedInput2Abs != 0;\n    shiftedInput2Abs = -shiftedInput2Abs;\n    shiftedInput1 = -shiftedInput1 - (uint)isZeroShiftedInput1;\n  }\n  if (shiftedInput1 < 0x800000) {\n    difference = shiftedInput2Abs & 0x80000000;\n    shiftedInput2Abs = shiftedInput2Abs << 1;\n    shiftedInput1 = shiftedInput1 * 2 + (uint)(difference != 0);\n    difference = iterationCount - 2;\n    if (iterationCount - 1 == 0 || shiftedInput1 < 0x800000) {\n      iterationCount = leadingZeroCount(shiftedInput1) - 8;\n      shiftedInput1 = shiftedInput1 << (iterationCount & 0xff);\n      if ((int)difference < (int)iterationCount) {\n        shiftedInput1 = shiftedInput1 >> (-(difference - iterationCount) & 0xff);\n      }\n      else {\n        shiftedInput1 = shiftedInput1 + (difference - iterationCount) * 0x800000;\n      }\n      return shiftedInput1 | input1;\n    }\n  }\n  else {\n    difference = iterationCount - 1;\n    if (0xffffff < shiftedInput1) {\n      difference = shiftedInput1 & 1;\n      shiftedInput1 = shiftedInput1 >> 1;\n      shiftedInput2Abs = (uint)(difference != 0) << 0x1f | shiftedInput2Abs >> 1;\n      difference = iterationCount;\n      if (0xfd < iterationCount) goto LAB_08008e12;\n    }\n  }\n  shiftedInput1 = shiftedInput1 + difference * 0x800000 + (uint)(0x7fffffff < shiftedInput2Abs);\n  if (shiftedInput2Abs == 0x80000000) {\n    shiftedInput1 = shiftedInput1 & 0xfffffffe;\n  }\n  return shiftedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_floating_point_08008cdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar4": "shiftedInput1",
                "bVar7": "isZeroShiftedInput1",
                "iVar1": "shiftedInput1Sign",
                "iVar2": "shiftedInput2Sign",
                "uVar3": "shiftedInput2Abs",
                "uVar5": "iterationCount",
                "uVar6": "difference",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_result_08008e3c",
            "code": "\nuint calculateResult_08008e3c(uint input)\n\n{\n  uint temp2;\n  uint temp1;\n  int constant1;\n  uint temp;\n  \n  if (input == 0) {\n    return 0;\n  }\n  temp2 = LZCOUNT(input);\n  temp1 = temp2 - 8;\n  constant1 = temp1 * -0x800000 + 0x4a800000;\n  if (7 < temp2) {\n    temp = 0 << (temp1 & 0xff);\n    temp2 = constant1 + (input << (temp1 & 0xff)) +\n            (0U >> (0x20 - temp1 & 0xff)) + (uint)(0x7fffffff < temp);\n    if (temp == 0x80000000) {\n      temp2 = temp2 & 0xfffffffe;\n    }\n    return temp2;\n  }\n  temp1 = input << temp2 + 0x18;\n  temp2 = constant1 + ((input >> (0x20 - (temp2 + 0x18) & 0xff)) - ((int)temp1 >> 0x1f));\n  if ((temp1 & 0x7fffffff) == 0) {\n    temp2 = temp2 & ~(temp1 >> 0x1f);\n  }\n  return temp2;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_result_08008e3c",
                "param_1": "input",
                "uVar1": "temp2",
                "uVar2": "temp1",
                "iVar3": "constant1",
                "uVar4": "temp"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_result_08008e44",
            "code": "\nuint calculateResult_08008e44(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftValue;\n  uint isNegative;\n  int result;\n  \n  isNegative = input & 0x80000000;\n  if ((int)isNegative < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftValue = leadingZeros - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftValue & 0xff);\n    isNegative = result + (input << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftValue = input << leadingZeros + 0x18;\n  isNegative = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftValue >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_result_08008e44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftValue",
                "uVar3": "isNegative",
                "iVar4": "result",
                "LZCOUNT": "countLeadingZeros"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_08008eec",
            "code": "\nuint calculateFloatingPoint_08008eec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint shiftedBits1;\n  int sumShiftedBits;\n  int diffShiftedBits;\n  uint shiftedBits2;\n  int diffSumShiftedBits;\n  uint modifiedInput1;\n  bool isZero;\n  bool carry;\n  \n  shiftedBits1 = input1 >> 0x17 & 0xff;\n  isZero = shiftedBits1 == 0;\n  if (!isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = shiftedBits1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = input4 == 0xff;\n  }\n  if (isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (shiftedBits1 == 0xff || input4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      modifiedInput1 = result;\n      if (((isZero) || ((shiftedBits1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (modifiedInput1 = input2, (input2 & 0x7fffff) != 0)))) {\n        return modifiedInput1 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = shiftedBits1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      shiftedBits1 = shiftedBits1 - 1;\n    }\n    input1 = input1 | result;\n    isZero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sumShiftedBits = shiftedBits1 + input4;\n  modifiedInput1 = input1 ^ input2;\n  shiftedBits1 = input1 << 9;\n  isZero = shiftedBits1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (shiftedBits1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = modifiedInput1 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    carry = signedSubtractionOverflow(sumShiftedBits,0x7f);\n    diffShiftedBits = sumShiftedBits + -0x7f;\n    isZero = diffShiftedBits == 0;\n    diffSumShiftedBits = diffShiftedBits;\n    if (!isZero && 0x7e < sumShiftedBits) {\n      carry = signedSubtractionOverflow(0xff,diffShiftedBits);\n      diffSumShiftedBits = 0xff - diffShiftedBits;\n      isZero = diffShiftedBits == 0xff;\n    }\n    if (!isZero && diffSumShiftedBits < 0 == carry) {\n      result = result | diffShiftedBits * 0x800000;\n    }\n    if (!isZero && diffSumShiftedBits < 0 == carry) {\n      return result;\n    }\n    result = result | 0x800000;\n    shiftedBits2 = 0;\n    carry = signedSubtractionOverflow(diffShiftedBits,1);\n    modifiedInput1 = sumShiftedBits - 0x80;\n    isZero = modifiedInput1 == 0;\n    shiftedBits1 = modifiedInput1;\n  }\n  else {\n    product = (ulonglong)(shiftedBits1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    shiftedBits2 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero = result < 0x800000;\n    if (isZero) {\n      result = result << 1;\n    }\n    if (isZero) {\n      result = result | shiftedBits2 >> 0x1f;\n      shiftedBits2 = shiftedBits2 << 1;\n    }\n    result = modifiedInput1 & 0x80000000 | result;\n    modifiedInput1 = (sumShiftedBits + -0x7f) - (uint)isZero;\n    carry = signedSubtractionOverflow(modifiedInput1,0xfd);\n    isZero = modifiedInput1 == 0xfd;\n    shiftedBits1 = modifiedInput1 - 0xfd;\n    if (modifiedInput1 < 0xfe) {\n      result = result + modifiedInput1 * 0x800000 + (uint)(0x7fffffff < shiftedBits2);\n      if (shiftedBits2 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero || (int)shiftedBits1 < 0 != carry) {\n    isZero = (int)(modifiedInput1 + 0x19) < 0;\n    if (modifiedInput1 == 0xffffffe7 || isZero != signedCarry(modifiedInput1,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (modifiedInput1 != 0xffffffe7 && isZero == signedCarry(modifiedInput1,0x19)) {\n      shiftedBits1 = (result << 1) >> (-modifiedInput1 & 0xff);\n      modifiedInput1 = result << (modifiedInput1 + 0x20 & 0xff);\n      shiftedBits1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shiftedBits1 >> 1) + (uint)((byte)shiftedBits1 & 1);\n      if ((shiftedBits2 | modifiedInput1 << 1) == 0) {\n        shiftedBits1 = shiftedBits1 & ~(modifiedInput1 >> 0x1f);\n      }\n      return shiftedBits1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "lVar1": "product",
                "uVar2": "result",
                "uVar3": "shiftedBits1",
                "iVar4": "sumShiftedBits",
                "iVar5": "diffShiftedBits",
                "uVar6": "shiftedBits2",
                "iVar7": "diffSumShiftedBits",
                "uVar8": "modifiedInput1",
                "bVar9": "isZero",
                "bVar10": "carry",
                "SBORROW4": "signedSubtractionOverflow",
                "SCARRY4": "signedCarry"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "floating_point_arithmetic_08009054",
            "code": "\nuint floatingPointArithmetic_08009054(uint num1,uint num2,undefined4 var1,uint var2)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool isZero;\n  bool isNegative;\n  bool carryFlag;\n  \n  temp2 = num1 >> 0x17 & 0xff;\n  isZero = temp2 == 0;\n  if (!isZero) {\n    var2 = num2 >> 0x17 & 0xff;\n    isZero = var2 == 0;\n  }\n  if (!isZero) {\n    isZero = temp2 == 0xff;\n  }\n  if (!isZero) {\n    isZero = var2 == 0xff;\n  }\n  if (isZero) {\n    var2 = num2 >> 0x17 & 0xff;\n    temp6 = num1;\n    if (temp2 == 0xff) {\n      if (((num1 & 0x7fffff) != 0) || (temp6 = num2, var2 == 0xff)) {\nLAB_0800904a:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (var2 == 0xff) {\n        temp6 = num2;\n        if ((num2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (num1 ^ num2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (num1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (num2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = temp2 == 0;\n        temp6 = num1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            num1 = num1 << 1;\n            isZero = (num1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          temp2 = temp2 - 1;\n        }\n        num1 = num1 | temp6;\n        isZero = var2 == 0;\n        temp6 = num2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            num2 = num2 << 1;\n            isZero = (num2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          var2 = var2 - 1;\n        }\n        num2 = num2 | temp6;\n        goto LAB_0800906c;\n      }\n      if ((num1 & 0x7fffffff) == 0) {\n        if ((num2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    num1 = num1 ^ num2;\n  }\n  else {\nLAB_0800906c:\n    temp3 = temp2 - var2;\n    if (num2 << 9 == 0) {\n      num1 = (num1 ^ num2) & 0x80000000 | num1 & 0x7fffff;\n      carryFlag = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      isZero = temp5 < 0;\n      isNegative = temp5 == 0;\n      if (!isNegative && isZero == carryFlag) {\n        carryFlag = SBORROW4(0xff,temp5);\n        isZero = 0xff - temp5 < 0;\n        isNegative = temp5 == 0xff;\n      }\n      if (!isNegative && isZero == carryFlag) {\n        num1 = num1 | temp5 * 0x800000;\n      }\n      if (!isNegative && isZero == carryFlag) {\n        return num1;\n      }\n      num1 = num1 | 0x800000;\n      temp2 = 0;\n      isNegative = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      isZero = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (num2 << 9) >> 4 | 0x10000000;\n      temp2 = (num1 << 9) >> 4 | 0x10000000;\n      num1 = (num1 ^ num2) & 0x80000000;\n      isZero = temp1 <= temp2;\n      if (!isZero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)isZero;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          num1 = num1 | temp6;\n        }\n        isZero = temp1 >> 1 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (isZero) {\n          num1 = num1 | temp6 >> 1;\n        }\n        isZero = temp1 >> 2 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (isZero) {\n          num1 = num1 | temp6 >> 2;\n        }\n        isZero = temp1 >> 3 <= temp2;\n        if (isZero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (isZero) {\n          num1 = num1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        isZero = temp2 == 0;\n        if (!isZero) {\n          temp6 = temp6 >> 4;\n          isZero = temp6 == 0;\n        }\n      } while (!isZero);\n      isNegative = SBORROW4(temp4,0xfd);\n      isZero = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        num1 = num1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          num1 = num1 & 0xfffffffe;\n        }\n        return num1;\n      }\n    }\n    if (isZero || (int)temp6 < 0 != isNegative) {\n      isZero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || isZero != SCARRY4(temp4,0x19)) {\n        num1 = num1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || isZero != SCARRY4(temp4,0x19)) {\n        return num1;\n      }\n      temp6 = (num1 << 1) >> (-temp4 & 0xff);\n      temp4 = num1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((num1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return num1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "floating_point_arithmetic_08009054",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "var1",
                "param_4": "var2",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "carryFlag"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "check_overflow_0800919c",
            "code": "\nuint check_overflow_0800919c(uint modified_output,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zeroed;\n  \n  doubled_input_1 = modified_output * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((modified_output & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zeroed = combined_inputs == 0;\n  if (!is_zeroed) {\n    combined_inputs = modified_output ^ input_2;\n    is_zeroed = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    modified_output = doubled_input_1 + input_2 * -2;\n    is_zeroed = modified_output == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zeroed) {\n    modified_output = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    modified_output = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zeroed) {\n    modified_output = modified_output | 1;\n  }\n  return modified_output;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "check_overflow_0800919c",
                "param_1": "modified_output",
                "param_2": "input_2",
                "bVar1": "is_negative",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar5": "is_zeroed"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "concatenate_params_080091fc",
            "code": "\nvoid concatenateParams_080091fc(undefined4 dest,undefined4 src)\n\n{\n  concatenate_44_08009204(src,dest);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "concatenate_params_080091fc",
                "param_1": "dest",
                "param_2": "src"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_44_08009204",
            "code": "\nundefined8 concatenate_44_08009204(undefined4 num1,undefined4 num2)\n\n{\n  check_overflow_0800919c();\n  return CONCAT44(num2,num1);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_44_08009204",
                "param_1": "num1",
                "param_2": "num2"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_concatenation_result_08009214",
            "code": "\nbool checkConcatenationResult_08009214(void)\n\n{\n  char concatenationResult;\n  \n  concatenate_44_08009204();\n  return concatenationResult != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_concatenation_result_08009214",
                "in_ZR": "concatenationResult"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "check_if_concatenation_complete_08009228",
            "code": "\nbool check_if_concatenation_complete_08009228(void)\n\n{\n  char input_character;\n  \n  concatenate_44_08009204();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "check_if_concatenation_complete_08009228",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_concatenation_result_0800923c",
            "code": "\nbool checkConcatenationResult_0800923c(void)\n\n{\n  undefined isZeroResult;\n  undefined isCarryFlagSet;\n  \n  concatenate_44_08009204();\n  return !(bool)isCarryFlagSet || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_concatenation_result_0800923c",
                "in_ZR": "isZeroResult",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "concatenate_params_and_check_08009250",
            "code": "\nbool concatenateParamsAndCheck_08009250(void)\n\n{\n  undefined isZero;\n  undefined isCarry;\n  \n  concatenate_params_080091fc();\n  return !(bool)isCarry || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_08009250": "concatenate_params_and_check_08009250",
                "in_ZR": "isZero",
                "in_CY": "isCarry"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_if_concatenation_is_null_08009264",
            "code": "\nbool checkIfConcatenationIsNull_08009264(void)\n\n{\n  char concatenatedString;\n  \n  concatenateParameters();\n  return concatenatedString == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_if_concatenation_is_null_08009264",
                "in_CY": "concatenatedString",
                "concatenate_params_080091fc": "concatenateParameters"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "perform_conversion_08009278",
            "code": "\nuint perform_conversion_08009278(uint input_value)\n\n{\n  uint shifted_value;\n  uint offset;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  offset = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && offset != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (offset & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((offset == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08009278": "perform_conversion_08009278",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "offset"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_0800756c();\n  execute_tasks_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_system_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_concatenation_08009318",
            "code": "\nlonglong calculate_concatenation_08009318(uint input_1,uint input_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int is_cy_null_result;\n  uint shift_amount;\n  uint bit_mask;\n  bool carry_flag;\n  undefined8 concatenation_result;\n  longlong output;\n  \n  bit_mask = (input_2 << 1) >> 0x15;\n  shift_amount = bit_mask - 0x3ff;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      concatenation_result = calculate_concatenation_08009318_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n      is_cy_null_result = is_cy_null_08008b60((int)concatenation_result,(int)((ulonglong)concatenation_result >> 0x20),0,0);\n      output = CONCAT44(input_2,input_1);\n      if (is_cy_null_result != 0) {\n        if ((int)input_2 < 0) {\n          output = -0x8000000000000000;\n        }\n        else if ((input_1 | input_2) == 0) {\n          output = 0;\n        }\n        else {\n          output = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      bit_mask = 0xfffff >> (shift_amount & 0xff);\n      output = CONCAT44(input_2,input_1);\n      if ((input_2 & bit_mask | input_1) != 0) {\n        concatenation_result = calculate_concatenation_08009318_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n        is_cy_null_result = is_cy_null_08008b60((int)concatenation_result,(int)((ulonglong)concatenation_result >> 0x20),0,0);\n        output = CONCAT44(input_2,input_1);\n        if (is_cy_null_result != 0) {\n          if (0 < (int)input_2) {\n            input_2 = input_2 + (0x100000 >> (shift_amount & 0xff));\n          }\n          output = (ulonglong)(input_2 & ~bit_mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_amount < 0x34) {\n    bit_mask = 0xffffffff >> (bit_mask - 0x413 & 0xff);\n    output = CONCAT44(input_2,input_1);\n    if ((bit_mask & input_1) != 0) {\n      concatenation_result = calculate_concatenation_08009318_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n      is_cy_null_result = is_cy_null_08008b60((int)concatenation_result,(int)((ulonglong)concatenation_result >> 0x20),0,0);\n      output = CONCAT44(input_2,input_1);\n      if (is_cy_null_result != 0) {\n        if (0 < (int)input_2) {\n          if (shift_amount == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            shift_amount = 1 << (0x34 - shift_amount & 0xff);\n            carry_flag = CARRY4(shift_amount,input_1);\n            input_1 = shift_amount + input_1;\n            if (carry_flag != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        output = CONCAT44(input_2,input_1 & ~bit_mask);\n      }\n    }\n  }\n  else {\n    output = CONCAT44(input_2,input_1);\n    if (shift_amount == 0x400) {\n      output = calculate_concatenation_08009318_080082d4();\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_concatenation_08009318",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "iVar1": "is_cy_null_result",
                "uVar2": "shift_amount",
                "uVar3": "bit_mask",
                "bVar4": "carry_flag",
                "uVar5": "concatenation_result",
                "lVar6": "output"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_result_08009410",
            "code": "\nundefined4 calculate_result_08009410(undefined4 input_value,uint input_flag)\n\n{\n  undefined4 result;\n  uint flag;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  \n  if (0x3fe921fb < (input_flag & 0x7fffffff)) {\n    if ((input_flag & 0x7fffffff) < 0x7ff00000) {\n      flag = calculate_value_08009d78(input_value,input_flag,&temp_var1);\n      flag = flag & 3;\n      if (flag == 1) {\n        result = calculate_inverse_0800adf0(temp_var1,temp_var2,temp_var3,temp_var4,1);\n      }\n      else if (flag == 2) {\n        result = calculate_final_result_0800a348(temp_var1,temp_var2,temp_var3,temp_var4);\n      }\n      else if (flag == 0) {\n        result = calculate_final_result_0800a348(temp_var1,temp_var2,temp_var3,temp_var4);\n      }\n      else {\n        result = calculate_inverse_0800adf0(temp_var1,temp_var2,temp_var3,temp_var4,1);\n      }\n    }\n    else {\n      result = calculate_080082d0(input_value,input_flag,input_value,input_flag);\n    }\n    return result;\n  }\n  result = calculate_final_result_0800a348(input_value,input_flag,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_result_08009410",
                "param_1": "input_value",
                "param_2": "input_flag",
                "uVar1": "result",
                "uVar2": "flag",
                "local_28": "temp_var1",
                "uStack_24": "temp_var2",
                "local_20": "temp_var3",
                "uStack_1c": "temp_var4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_consolidated_value_080094c0",
            "code": "\nlonglong calculate_consolidated_value_080094c0(uint input_value_1,uint input_value_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int result;\n  uint shift_amount;\n  uint mask;\n  bool carry_flag;\n  undefined8 concatenated_value;\n  longlong final_result;\n  \n  mask = (input_value_2 << 1) >> 0x15;\n  shift_amount = mask - 0x3ff;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      concatenated_value = calculate_concatenation_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c,constant_2);\n      result = is_cy_null_08008b60((int)concatenated_value,(int)((ulonglong)concatenated_value >> 0x20),0,0);\n      final_result = CONCAT44(input_value_2,input_value_1);\n      if (result != 0) {\n        if ((int)input_value_2 < 0) {\n          if ((input_value_1 | input_value_2 & 0x7fffffff) != 0) {\n            input_value_2 = 0xbff00000;\n          }\n          final_result = (ulonglong)input_value_2 << 0x20;\n        }\n        else {\n          final_result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shift_amount & 0xff);\n      final_result = CONCAT44(input_value_2,input_value_1);\n      if ((input_value_2 & mask | input_value_1) != 0) {\n        concatenated_value = calculate_concatenation_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c,constant_2);\n        result = is_cy_null_08008b60((int)concatenated_value,(int)((ulonglong)concatenated_value >> 0x20),0,0);\n        final_result = CONCAT44(input_value_2,input_value_1);\n        if (result != 0) {\n          if ((int)input_value_2 < 0) {\n            input_value_2 = input_value_2 + (0x100000 >> (shift_amount & 0xff));\n          }\n          final_result = (ulonglong)(input_value_2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_amount < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    final_result = CONCAT44(input_value_2,input_value_1);\n    if ((mask & input_value_1) != 0) {\n      concatenated_value = calculate_concatenation_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c,constant_2);\n      result = is_cy_null_08008b60((int)concatenated_value,(int)((ulonglong)concatenated_value >> 0x20),0,0);\n      final_result = CONCAT44(input_value_2,input_value_1);\n      if (result != 0) {\n        if ((int)input_value_2 < 0) {\n          if (shift_amount == 0x14) {\n            input_value_2 = input_value_2 + 1;\n          }\n          else {\n            shift_amount = 1 << (0x34 - shift_amount & 0xff);\n            carry_flag = CARRY4(shift_amount,input_value_1);\n            input_value_1 = shift_amount + input_value_1;\n            if (carry_flag != false) {\n              input_value_2 = input_value_2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input_value_2,input_value_1 & ~mask);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input_value_2,input_value_1);\n    if (shift_amount == 0x400) {\n      final_result = calculate_concatenation_080082d4();\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_consolidated_value_080094c0",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "iVar1": "result",
                "uVar2": "shift_amount",
                "uVar3": "mask",
                "bVar4": "carry_flag",
                "uVar5": "concatenated_value",
                "lVar6": "final_result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_product_inverse_080095b8",
            "code": "\nint calculate_product_inverse_080095b8(uint numerator,uint denominator)\n\n{\n  uint bit;\n  uint shift_amount;\n  uint result;\n  int sign;\n  uint shifted_value;\n  \n  shift_amount = (denominator << 1) >> 0x15;\n  shifted_value = shift_amount - 0x3ff;\n  if ((int)denominator < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = denominator & 0xfffff | 0x100000;\n  if ((int)shifted_value < 0x14) {\n    if ((int)shifted_value < 0) {\n      if (shifted_value != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (shifted_value & 0xff)) >> (0x14 - shifted_value & 0xff);\n  }\n  else {\n    if (0x1e < shifted_value) {\n      sign = calculate_inverse_08008ba0();\n      return sign;\n    }\n    if ((int)shifted_value < 0x34) {\n      bit = 0x80000000 >> (shift_amount - 0x413 & 0xff);\n      if (CARRY4(bit,numerator) != false) {\n        result = result + 1;\n      }\n      result = result << (shift_amount - 0x413 & 0xff);\n      if (shifted_value != 0x14) {\n        result = result | bit + numerator >> (0x34 - shifted_value & 0xff);\n      }\n    }\n    else {\n      result = result << (shift_amount - 0x413 & 0xff) | numerator << (shift_amount - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_product_inverse_080095b8",
                "param_1": "numerator",
                "param_2": "denominator",
                "uVar1": "bit",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "shifted_value"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_float_to_long_08009654",
            "code": "\nlonglong convertFloatToLong_08009654(uint inputFloatHigh,uint inputFloatLow)\n\n{\n  uint exponentAdjustment;\n  uint shiftCount;\n  longlong convertedLong;\n  \n  convertedLong = CONCAT44(inputFloatLow,inputFloatHigh);\n  shiftCount = (inputFloatLow << 1) >> 0x15;\n  exponentAdjustment = shiftCount - 0x3ff;\n  if ((int)exponentAdjustment < 0x14) {\n    if ((int)exponentAdjustment < 0) {\n      inputFloatLow = inputFloatLow & 0x80000000;\n      if (exponentAdjustment == 0xffffffff) {\n        inputFloatLow = inputFloatLow | 0x3ff00000;\n      }\n      convertedLong = (ulonglong)inputFloatLow << 0x20;\n    }\n    else {\n      shiftCount = 0xfffff >> (exponentAdjustment & 0xff);\n      convertedLong = CONCAT44(inputFloatLow,inputFloatHigh);\n      if ((inputFloatLow & shiftCount | inputFloatHigh) != 0) {\n        convertedLong = (ulonglong)(inputFloatLow + (0x80000 >> (exponentAdjustment & 0xff)) & ~shiftCount) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponentAdjustment < 0x34) {\n    shiftCount = 0xffffffff >> (shiftCount - 0x413 & 0xff);\n    if ((inputFloatHigh & shiftCount) != 0) {\n      exponentAdjustment = 1 << (0x33 - exponentAdjustment & 0xff);\n      if (CARRY4(inputFloatHigh,exponentAdjustment) != false) {\n        inputFloatLow = inputFloatLow + 1;\n      }\n      convertedLong = CONCAT44(inputFloatLow,inputFloatHigh + exponentAdjustment & ~shiftCount);\n    }\n  }\n  else {\n    convertedLong = CONCAT44(inputFloatLow,inputFloatHigh);\n    if (exponentAdjustment == 0x400) {\n      convertedLong = calculate_concatenation_080082d4();\n    }\n  }\n  return convertedLong;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_float_to_long_08009654",
                "param_1": "inputFloatHigh",
                "param_2": "inputFloatLow",
                "uVar1": "exponentAdjustment",
                "uVar2": "shiftCount",
                "lVar3": "convertedLong"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_result_080096e8",
            "code": "\nundefined4 calculate_result_080096e8(undefined4 input_value,uint flag)\n\n{\n  undefined4 result;\n  uint value;\n  undefined4 intermediate_value_1;\n  undefined4 intermediate_value_2;\n  undefined4 intermediate_value_3;\n  undefined4 intermediate_value_4;\n  \n  if (0x3fe921fb < (flag & 0x7fffffff)) {\n    if ((flag & 0x7fffffff) < 0x7ff00000) {\n      value = calculate_value_08009d78(input_value,flag,&intermediate_value_1);\n      value = value & 3;\n      if (value == 1) {\n        result = calculate_final_result_0800a348(intermediate_value_1,intermediate_value_2,intermediate_value_3,intermediate_value_4);\n      }\n      else if (value == 2) {\n        result = calculate_inverse_0800adf0(intermediate_value_1,intermediate_value_2,intermediate_value_3,intermediate_value_4,1);\n      }\n      else if (value == 0) {\n        result = calculate_inverse_0800adf0(intermediate_value_1,intermediate_value_2,intermediate_value_3,intermediate_value_4,1);\n      }\n      else {\n        result = calculate_final_result_0800a348(intermediate_value_1,intermediate_value_2,intermediate_value_3,intermediate_value_4);\n      }\n    }\n    else {\n      result = calculate_080082d0(input_value,flag,input_value,flag);\n    }\n    return result;\n  }\n  result = calculate_inverse_0800adf0(input_value,flag,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_result_080096e8",
                "param_1": "input_value",
                "param_2": "flag",
                "uVar1": "result",
                "uVar2": "value",
                "local_28": "intermediate_value_1",
                "uStack_24": "intermediate_value_2",
                "local_20": "intermediate_value_3",
                "uStack_1c": "intermediate_value_4"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "calculate_concatenation_08009798",
            "code": "\nlonglong calculate_concatenation_08009798(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  uint diff1;\n  uint shifted2;\n  longlong result;\n  \n  shifted2 = (input2 << 1) >> 0x15;\n  diff1 = shifted2 - 0x3ff;\n  if ((int)diff1 < 0x14) {\n    if ((int)diff1 < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (diff1 & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)diff1 < 0x34) {\n      return CONCAT44(input2,input1 & ~(0xffffffffU >> (shifted2 - 0x413 & 0xff)));\n    }\n    if (diff1 != 0x400) {\n      return CONCAT44(input2,input1);\n    }\n    result = calculate_concatenation_08009798_080082d4(input1,input2,input1,input2,param4);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "calculate_concatenation_08009798",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "diff1",
                "uVar2": "shifted2",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_improved_result_thunk_08009990",
            "code": "\nuint calculateImprovedResult_thunk_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  undefined8 tempVar6;\n  \n  tempVar4 = input4 & 0x7fffffff;\n  if (((tempVar4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (tempVar5 = input2 & 0x7fffffff, (tempVar5 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      tempVar4 = calculate_result_0800af78();\n      return tempVar4;\n    }\n    tempVar3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((tempVar5 | input1) == 0) {\n      if (tempVar3 == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (tempVar3 == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((tempVar4 | input3) != 0) {\n        if (tempVar4 == 0x7ff00000) {\n          tempVar3 = tempVar3 - 1;\n          if (tempVar5 == 0x7ff00000) {\n            if (tempVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + tempVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (tempVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + tempVar3 * 8);\n          }\n          return 0;\n        }\n        if (tempVar5 != 0x7ff00000) {\n          tempVar1 = (int)(tempVar5 - tempVar4) >> 0x14;\n          if ((int)(tempVar5 - tempVar4) < 0x3d00000) {\n            if (((int)input4 < 0) && (tempVar1 + 0x3c < 0 != SCARRY4(tempVar1,0x3c))) {\n              tempVar6 = 0;\n            }\n            else {\n              calculate_floating_point_08008894(input1,input2,input3,input4,input4);\n              FUNC_0800b2cc();\n              tempVar6 = calculate_result_0800af78();\n            }\n          }\n          else {\n            tempVar6 = 0x3ff921fb54442d18;\n          }\n          tempVar2 = (undefined4)((ulonglong)tempVar6 >> 0x20);\n          tempVar4 = (uint)tempVar6;\n          if (tempVar3 == 1) {\n            return tempVar4;\n          }\n          if (tempVar3 == 2) {\n            tempVar6 = calculate_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n            tempVar4 = calculate_080082d0(0x54442d18,0x400921fb,(int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20));\n            return tempVar4;\n          }\n          if (tempVar3 == 0) {\n            return tempVar4;\n          }\n          tempVar6 = calculate_080082d0(tempVar4,tempVar2,0x33145c07,0x3ca1a626);\n          tempVar4 = calculate_080082d0((int)tempVar6,(int)((ulonglong)tempVar6 >> 0x20),0x54442d18,0x400921fb);\n          return tempVar4;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = calculate_concatenation_080082d4(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_improved_result_thunk_08009990",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5",
                "uVar6": "tempVar6"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 side_a,undefined4 side_b,undefined4 side_c,undefined4 side_d)\n\n{\n  int shift_result;\n  undefined4 *global_data_ptr;\n  int *global_data_int_ptr;\n  undefined8 result;\n  undefined4 hypotenuse_type;\n  char *hypotenuse_name;\n  undefined4 side_a_value;\n  undefined4 side_b_value;\n  undefined4 side_c_value;\n  undefined4 side_d_value;\n  undefined4 lower_limit;\n  undefined4 upper_limit;\n  int sign_bit_shift_result;\n  \n  result = calculate_result_08009b24();\n  if (DAT_20000014 == -1) {\n    return result;\n  }\n  sign_bit_shift_result = sign_bit_shift_0800b2d4();\n  if (sign_bit_shift_result != 0) {\n    return result;\n  }\n  shift_result = sign_bit_shift_0800b2d4(side_a,side_b);\n  if (shift_result == 0) {\n    return result;\n  }\n  shift_result = sign_bit_shift_0800b2d4(side_c,side_d);\n  if (shift_result == 0) {\n    return result;\n  }\n  hypotenuse_type = 3;\n  hypotenuse_name = \"hypot\";\n  side_a_value = side_a;\n  side_b_value = side_b;\n  side_c_value = side_c;\n  side_d_value = side_d;\n  if (DAT_20000014 == '\\0') {\n    lower_limit = 0xe0000000;\n    upper_limit = 0x47efffff;\nLAB_080098aa:\n    shift_result = initialize_0800b2e0(&hypotenuse_type);\n    if (shift_result != 0) goto LAB_08009896;\n  }\n  else {\n    lower_limit = 0;\n    upper_limit = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  global_data_ptr = (undefined4 *)get_global_data_0800b3dc();\n  *global_data_ptr = 0x22;\nLAB_08009896:\n  result = CONCAT44(upper_limit,lower_limit);\n  if (sign_bit_shift_result != 0) {\n    global_data_int_ptr = (int *)get_global_data_0800b3dc();\n    result = CONCAT44(upper_limit,lower_limit);\n    *global_data_int_ptr = sign_bit_shift_result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "side_a",
                "param_2": "side_b",
                "param_3": "side_c",
                "param_4": "side_d",
                "local_50": "hypotenuse_type",
                "pcStack_4c": "hypotenuse_name",
                "local_48": "side_a_value",
                "uStack_44": "side_b_value",
                "local_40": "side_c_value",
                "uStack_3c": "side_d_value",
                "local_38": "lower_limit",
                "uStack_34": "upper_limit",
                "local_30": "sign_bit_shift_result",
                "uVar4": "result",
                "iVar1": "shift_result",
                "puVar2": "global_data_ptr",
                "piVar3": "global_data_int_ptr"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "process_data_080098d0",
            "code": "\nundefined4 process_data_080098d0(undefined4 input_value1,undefined4 input_value2)\n\n{\n  char condition_flag;\n  undefined4 result;\n  int condition_result;\n  undefined4 *global_data_ptr;\n  int *global_condition_ptr;\n  undefined4 flag1;\n  undefined *string_ptr;\n  undefined4 input_copy1;\n  undefined4 input_copy2;\n  undefined4 input1;\n  undefined4 input2;\n  undefined8 float_result;\n  int check_result;\n  \n  result = calculate_0800a1bc();\n  condition_flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (check_result = check_conditions_08008b74(input_value1,input_value2,input_value1,input_value2), check_result != 0)) ||\n     (condition_result = is_end_of_string_08008b24(input_value1,input_value2,0,0), condition_result == 0)) {\n    return result;\n  }\n  flag1 = 1;\n  string_ptr = &DAT_0800be5c;\n  input_copy1 = input_value1;\n  input_copy2 = input_value2;\n  input1 = input_value1;\n  input2 = input_value2;\n  if (condition_flag == '\\0') {\n    float_result = 0;\nLAB_0800996c:\n    condition_result = initialize_0800b2e0(&flag1);\n    if (condition_result != 0) goto joined_r0x0800997a;\n  }\n  else {\n    float_result = calculate_floating_point_08008894(0,0,0,0);\n    if (condition_flag != '\\x02') goto LAB_0800996c;\n  }\n  global_data_ptr = (undefined4 *)get_global_data_0800b3dc();\n  *global_data_ptr = 0x21;\njoined_r0x0800997a:\n  if (check_result != 0) {\n    global_condition_ptr = (int *)get_global_data_0800b3dc();\n    *global_condition_ptr = check_result;\n  }\n  return (undefined4)float_result;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "process_data_080098d0",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "cVar1": "condition_flag",
                "uVar2": "result",
                "iVar3": "condition_result",
                "puVar4": "global_data_ptr",
                "piVar5": "global_condition_ptr",
                "local_50": "flag1",
                "local_4c": "string_ptr",
                "local_48": "input_copy1",
                "uStack_44": "input_copy2",
                "local_40": "input1",
                "uStack_3c": "input2",
                "local_38": "float_result",
                "local_30": "check_result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_float_result_08009990",
            "code": "\nuint calculate_float_result_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp1;\n  undefined4 temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  undefined8 temp6;\n  \n  temp4 = input_4 & 0x7fffffff;\n  if (((temp4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (temp5 = input_2 & 0x7fffffff, (temp5 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      temp4 = calculate_result_0800af78();\n      return temp4;\n    }\n    temp3 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((temp5 | input_1) == 0) {\n      if (temp3 == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (temp3 == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp4 | input_3) != 0) {\n        if (temp4 == 0x7ff00000) {\n          temp3 = temp3 - 1;\n          if (temp5 == 0x7ff00000) {\n            if (temp3 < 3) {\n              return *(uint *)(&DAT_0800be68 + temp3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp3 < 3) {\n            return *(uint *)(&DAT_0800be80 + temp3 * 8);\n          }\n          return 0;\n        }\n        if (temp5 != 0x7ff00000) {\n          temp1 = (int)(temp5 - temp4) >> 0x14;\n          if ((int)(temp5 - temp4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (temp1 + 0x3c < 0 != SCARRY4(temp1,0x3c))) {\n              temp6 = 0;\n            }\n            else {\n              calculate_floating_point_08008894(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              temp6 = calculate_result_0800af78();\n            }\n          }\n          else {\n            temp6 = 0x3ff921fb54442d18;\n          }\n          temp2 = (undefined4)((ulonglong)temp6 >> 0x20);\n          temp4 = (uint)temp6;\n          if (temp3 == 1) {\n            return temp4;\n          }\n          if (temp3 == 2) {\n            temp6 = calculate_080082d0(temp4,temp2,0x33145c07,0x3ca1a626);\n            temp4 = calculate_080082d0(0x54442d18,0x400921fb,(int)temp6,(int)((ulonglong)temp6 >> 0x20));\n            return temp4;\n          }\n          if (temp3 == 0) {\n            return temp4;\n          }\n          temp6 = calculate_080082d0(temp4,temp2,0x33145c07,0x3ca1a626);\n          temp4 = calculate_080082d0((int)temp6,(int)((ulonglong)temp6 >> 0x20),0x54442d18,0x400921fb);\n          return temp4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = calculate_concatenation_080082d4(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_float_result_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_result_08009b24",
            "code": "\nuint calculateResult_08009b24(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  int isEndOfString;\n  uint result2;\n  int val1;\n  undefined4 val2;\n  int val3;\n  uint val4;\n  undefined4 concat1_1;\n  undefined4 concat1_2;\n  undefined8 calc1;\n  undefined8 concat2_1;\n  undefined8 concat2_2;\n  undefined8 calc2;\n  int localVar;\n  \n  input2 = input2 & 0x7fffffff;\n  input4 = input4 & 0x7fffffff;\n  result2 = input1;\n  val4 = input2;\n  if (input2 < input4) {\n    result2 = input3;\n    input3 = input1;\n    val4 = input4;\n    input4 = input2;\n  }\n  if (0x3c00000 < (int)(val4 - input4)) {\n    result2 = calculate_concatenation_080082d4(result2,val4,input3,input4);\n    return result2;\n  }\n  if (val4 < 0x5f300001) {\n    localVar = 0;\n  }\n  else {\n    if (0x7fefffff < val4) {\n      if ((val4 & 0xfffff | result2) != 0) {\n        result2 = calculate_concatenation_080082d4(result2,val4,input3,input4);\n      }\n      if ((input4 ^ 0x7ff00000 | input3) != 0) {\n        return result2;\n      }\n      return input3;\n    }\n    val4 = val4 + 0xda800000;\n    input4 = input4 + 0xda800000;\n    localVar = 600;\n  }\n  concat2_1 = CONCAT44(val4,result2);\n  calc1 = CONCAT44(input4,input3);\n  if ((int)input4 < 0x20b00000) {\n    if ((int)input4 < 0x100000) {\n      if ((input4 | input3) == 0) {\n        return result2;\n      }\n      calc1 = calculate_result_08008640(input3,input4,0,0x7fd00000);\n      concat2_1 = calculate_result_08008640(result2,val4,0,0x7fd00000);\n      localVar = localVar + -0x3fe;\n    }\n    else {\n      val4 = val4 + 0x25800000;\n      concat2_1 = CONCAT44(val4,result2);\n      input4 = input4 + 0x25800000;\n      calc1 = CONCAT44(input4,input3);\n      localVar = localVar + -600;\n    }\n  }\n  concat1_2 = (undefined4)((ulonglong)concat2_1 >> 0x20);\n  concat1_1 = (undefined4)concat2_1;\n  val3 = (int)((ulonglong)calc1 >> 0x20);\n  val2 = (undefined4)calc1;\n  calc1 = calculate_080082d0(concat1_1,concat1_2,val2,val3);\n  val1 = (int)((ulonglong)calc1 >> 0x20);\n  result1 = (undefined4)calc1;\n  isEndOfString = is_end_of_string_08008b24(val2,val3,result1,val1);\n  if (isEndOfString == 0) {\n    calc1 = calculate_result_08008640(0,input4,0);\n    concat2_1 = calculate_result_08008640(result1,val1 + -0x80000000,result1,val1);\n    concat2_2 = calculate_concatenation_080082d4(concat1_1,concat1_2,concat1_1,concat1_2);\n    concat2_2 = calculate_080082d0((int)concat2_2,(int)((ulonglong)concat2_2 >> 0x20),0,val4 + 0x100000);\n    concat2_2 = calculate_result_08008640((int)concat2_2,(int)((ulonglong)concat2_2 >> 0x20),val2,val3);\n    calc2 = calculate_080082d0(val2,val3,0,input4);\n    calc2 = calculate_result_08008640((int)calc2,(int)((ulonglong)calc2 >> 0x20),0,val4 + 0x100000);\n    concat2_2 = calculate_concatenation_080082d4((int)concat2_2,(int)((ulonglong)concat2_2 >> 0x20),(int)calc2,\n                          (int)((ulonglong)calc2 >> 0x20));\n    concat2_1 = calculate_080082d0((int)concat2_1,(int)((ulonglong)concat2_1 >> 0x20),(int)concat2_2,\n                          (int)((ulonglong)concat2_2 >> 0x20));\n    calculate_080082d0((int)calc1,(int)((ulonglong)calc1 >> 0x20),(int)concat2_1,\n                 (int)((ulonglong)concat2_1 >> 0x20));\n    calc1 = calculate_0800a1bc();\n  }\n  else {\n    calc1 = calculate_result_08008640(0,val4,0,val4);\n    concat2_1 = calculate_result_08008640(val2,val3 + -0x80000000,val2,val3);\n    concat2_2 = calculate_concatenation_080082d4(concat1_1,concat1_2,0,val4);\n    calc2 = calculate_080082d0(concat1_1,concat1_2,0,val4);\n    concat2_2 = calculate_result_08008640((int)concat2_2,(int)((ulonglong)concat2_2 >> 0x20),(int)calc2,\n                          (int)((ulonglong)calc2 >> 0x20));\n    concat2_1 = calculate_080082d0((int)concat2_1,(int)((ulonglong)concat2_1 >> 0x20),(int)concat2_2,\n                          (int)((ulonglong)concat2_2 >> 0x20));\n    calculate_080082d0((int)calc1,(int)((ulonglong)calc1 >> 0x20),(int)concat2_1,\n                 (int)((ulonglong)concat2_1 >> 0x20));\n    calc1 = calculate_0800a1bc();\n  }\n  result2 = (uint)calc1;\n  if (localVar != 0) {\n    result2 = calculate_result_08008640(result2,(int)((ulonglong)calc1 >> 0x20),0,localVar * 0x100000 + 0x3ff00000);\n  }\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_result_08009b24",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "iVar2": "isEndOfString",
                "uVar3": "result2",
                "iVar4": "val1",
                "uVar5": "val2",
                "iVar6": "val3",
                "uVar7": "val4",
                "uVar8": "concat1_1",
                "uVar9": "concat1_2",
                "uVar10": "calc1",
                "uVar11": "concat2_1",
                "uVar12": "concat2_2",
                "uVar13": "calc2",
                "local_3c": "localVar"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_value_08009d78",
            "code": "\nint calculateValue_08009d78(undefined4 input1,uint input2,undefined8 *output)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  uint maskedInput2;\n  int result;\n  undefined8 temp8;\n  undefined8 temp9;\n  undefined8 temp10;\n  undefined4 temp11;\n  undefined4 temp12;\n  undefined8 value1;\n  undefined8 value2;\n  undefined8 value3;\n  \n  maskedInput2 = input2 & 0x7fffffff;\n  if (maskedInput2 < 0x3fe921fc) {\n    *(undefined4 *)output = input1;\n    *(uint *)((int)output + 4) = input2;\n    *(undefined4 *)(output + 1) = 0;\n    *(undefined4 *)((int)output + 0xc) = 0;\n    return 0;\n  }\n  if (maskedInput2 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      temp8 = calculate_concatenation_080082d4(input1,input2,0x54400000,0x3ff921fb);\n      temp3 = (undefined4)((ulonglong)temp8 >> 0x20);\n      temp1 = (undefined4)temp8;\n      if (maskedInput2 != 0x3ff921fb) {\n        temp8 = calculate_concatenation_080082d4(temp1,temp3,0x1a626331,0x3dd0b461);\n        *output = temp8;\n        temp8 = calculate_080082d0(temp1,temp3);\n        temp8 = calculate_concatenation_080082d4((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x1a626331,0x3dd0b461);\n        output[1] = temp8;\n        return -1;\n      }\n      temp8 = calculate_concatenation_080082d4(temp1,temp3,0x1a600000,0x3dd0b461);\n      temp1 = (undefined4)((ulonglong)temp8 >> 0x20);\n      temp9 = calculate_concatenation_080082d4((int)temp8,temp1,0x2e037073,0x3ba3198a);\n      *output = temp9;\n      temp8 = calculate_080082d0((int)temp8,temp1);\n      temp8 = calculate_concatenation_080082d4((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x2e037073,0x3ba3198a);\n      output[1] = temp8;\n      return -1;\n    }\n    temp8 = calculate_080082d0();\n    temp3 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp1 = (undefined4)temp8;\n    if (maskedInput2 != 0x3ff921fb) {\n      temp8 = calculate_080082d0(temp1,temp3,0x1a626331,0x3dd0b461);\n      *output = temp8;\n      temp8 = calculate_080082d0(temp1,temp3);\n      temp8 = calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x1a626331,0x3dd0b461);\n      output[1] = temp8;\n      return 1;\n    }\n    temp8 = calculate_080082d0(temp1,temp3,0x1a600000,0x3dd0b461);\n    temp1 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp9 = calculate_080082d0((int)temp8,temp1,0x2e037073,0x3ba3198a);\n    *output = temp9;\n    temp8 = calculate_080082d0((int)temp8,temp1);\n    temp8 = calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),0x2e037073,0x3ba3198a);\n    output[1] = temp8;\n    return 1;\n  }\n  if (0x413921fb < maskedInput2) {\n    if (0x7fefffff < maskedInput2) {\n      temp8 = calculate_080082d0(input1,input2,input1,input2);\n      output[1] = temp8;\n      *output = temp8;\n      return 0;\n    }\n    result = ((int)maskedInput2 >> 0x14) + -0x416;\n    calculate_inverse_08008ba0();\n    value1 = calculate_shifted_value_0800856c();\n    temp8 = calculate_080082d0(input1,maskedInput2 + result * -0x100000,(int)value1,\n                          (int)((ulonglong)value1 >> 0x20));\n    temp8 = calculate_result_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x41700000);\n    calculate_inverse_08008ba0();\n    value2 = calculate_shifted_value_0800856c();\n    temp8 = calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20));\n    value3 = calculate_result_08008640((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x41700000);\n    check_if_char_not_null_08008b10((int)value3,(int)((ulonglong)value3 >> 0x20),0,0);\n    result = calculate_result_0800a5a0(&value1,output,result);\n    if (-1 < (int)input2) {\n      return result;\n    }\n    *(int *)((int)output + 4) = *(int *)((int)output + 4) + -0x80000000;\n    *(int *)((int)output + 0xc) = *(int *)((int)output + 0xc) + -0x80000000;\n    return -result;\n  }\n  temp8 = FUNC_0800b2cc();\n  temp3 = (undefined4)((ulonglong)temp8 >> 0x20);\n  temp9 = calculate_result_08008640((int)temp8,temp3,0x6dc9c883,0x3fe45f30);\n  calculate_concatenation_080082d4((int)temp9,(int)((ulonglong)temp9 >> 0x20),0,0x3fe00000);\n  result = calculate_inverse_08008ba0();\n  temp9 = calculate_shifted_value_0800856c();\n  temp4 = (undefined4)((ulonglong)temp9 >> 0x20);\n  temp1 = (undefined4)temp9;\n  temp9 = calculate_result_08008640(temp1,temp4,0x54400000,0x3ff921fb);\n  temp8 = calculate_080082d0((int)temp8,temp3,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n  temp5 = (undefined4)((ulonglong)temp8 >> 0x20);\n  temp3 = (undefined4)temp8;\n  temp9 = calculate_result_08008640(temp1,temp4,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == maskedInput2)) {\n    temp10 = calculate_080082d0(temp3,temp5,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n    if ((int)((maskedInput2 >> 0x14) - ((uint)((int)((ulonglong)temp10 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp9 = calculate_result_08008640(temp1,temp4,0x1a600000,0x3dd0b461);\n    temp6 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp8 = calculate_080082d0(temp3,temp5,(int)temp9,temp6);\n    temp7 = (undefined4)((ulonglong)temp8 >> 0x20);\n    temp2 = (undefined4)temp8;\n    temp10 = calculate_080082d0(temp3,temp5,temp2,temp7);\n    temp9 = calculate_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,temp6);\n    temp10 = calculate_result_08008640(temp1,temp4,0x2e037073,0x3ba3198a);\n    temp9 = calculate_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,\n                          (int)((ulonglong)temp9 >> 0x20));\n    temp10 = calculate_080082d0(temp2,temp7,(int)temp9,(int)((ulonglong)temp9 >> 0x20));\n    if ((int)(((int)maskedInput2 >> 0x14) - ((uint)((int)((ulonglong)temp10 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp9 = calculate_result_08008640(temp1,temp4,0x2e000000,0x3ba3198a);\n    temp3 = (undefined4)((ulonglong)temp9 >> 0x20);\n    temp8 = calculate_080082d0(temp2,temp7,(int)temp9,temp3);\n    temp10 = calculate_080082d0(temp2,temp7);\n    temp9 = calculate_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,temp3);\n    temp10 = calculate_result_08008640(temp1,temp4,0x252049c1,0x397b839a);\n    temp9 = calculate_080082d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp9,\n                          (int)((ulonglong)temp9 >> 0x20));\n  }\n  temp10 = calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                        (int)((ulonglong)temp9 >> 0x20));\nLAB_0800a0ce:\n  temp12 = (undefined4)((ulonglong)temp8 >> 0x20);\n  temp11 = (undefined4)temp8;\n  *output = temp10;\n  temp8 = calculate_080082d0(temp11,temp12);\n  temp8 = calculate_080082d0((int)temp8,(int)((ulonglong)temp8 >> 0x20),(int)temp9,\n                        (int)((ulonglong)temp9 >> 0x20));\n  output[1] = temp8;\n  if ((int)input2 < 0) {\n    *(int *)output = (int)temp10;\n    *(int *)((int)output + 4) = (int)((ulonglong)temp10 >> 0x20) + -0x80000000;\n    *(int *)(output + 1) = (int)temp8;\n    *(int *)((int)output + 0xc) = (int)((ulonglong)temp8 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_value_08009d78",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "maskedInput2",
                "iVar9": "result",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "local_50": "temp11",
                "uStack_4c": "temp12",
                "local_40": "value1",
                "local_38": "value2",
                "local_30": "value3"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_0800a1bc",
            "code": "\nuint calculate_0800a1bc(uint input_1,uint input_2)\n\n{\n  uint result_shifted;\n  int count;\n  uint temp_1;\n  undefined4 temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  int temp_8;\n  uint temp_9;\n  uint shift_count;\n  undefined8 result;\n  \n  if ((~input_2 & 0x7ff00000) == 0) {\n    result = calculate_0800a1bc_result_08008640(input_1,input_2,input_1,input_2);\n    temp_5 = calculate_0800a1bc_concatenation_080082d4((int)result,(int)((ulonglong)result >> 0x20),input_1,input_2);\n    return temp_5;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return input_1;\n    }\n    if (input_2 != 0) {\n      result = calculate_0800a1bc_080082d0(input_1,input_2,input_1);\n      temp_2 = (undefined4)((ulonglong)result >> 0x20);\n      temp_5 = calculate_0800a1bc_floating_point_08008894((int)result,temp_2,(int)result,temp_2);\n      return temp_5;\n    }\n    do {\n      temp_7 = input_1;\n      temp_5 = temp_7 >> 0xb;\n      input_2 = input_2 - 0x15;\n      input_1 = temp_7 << 0x15;\n    } while (temp_5 == 0);\n    result_shifted = input_2;\n    if (-1 < (int)temp_7) goto LAB_0800a290;\n    shift_count = 0x20;\n    temp_3 = 0xffffffff;\n    temp_7 = input_1;\n  }\n  else {\n    result_shifted = (int)input_2 >> 0x14;\n    temp_5 = input_2;\n    temp_7 = input_1;\n    if (result_shifted != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp_7 = 0;\n    shift_count = temp_5;\n    do {\n      temp_3 = temp_7;\n      temp_5 = shift_count << 1;\n      temp_8 = shift_count << 0xc;\n      temp_7 = temp_3 + 1;\n      shift_count = temp_5;\n    } while (-1 < temp_8);\n    shift_count = 0x20 - temp_7;\n    input_2 = result_shifted;\n    temp_7 = input_1 << (temp_7 & 0xff);\n  }\n  temp_5 = input_1 >> (shift_count & 0xff) | temp_5;\n  result_shifted = input_2 - temp_3;\nLAB_0800a1da:\n  temp_5 = temp_5 & 0xfffff | 0x100000;\n  if (-1 < (int)(result_shifted << 0x1f)) {\n    temp_5 = temp_5 * 2 - ((int)temp_7 >> 0x1f);\n    temp_7 = temp_7 << 1;\n  }\n  shift_count = 0;\n  temp_5 = temp_5 * 2 - ((int)temp_7 >> 0x1f);\n  temp_7 = temp_7 << 1;\n  result_shifted = 0;\n  temp_8 = 0x16;\n  temp_3 = 0x200000;\n  do {\n    count = result_shifted + temp_3;\n    if (count <= (int)temp_5) {\n      temp_5 = temp_5 - count;\n      result_shifted = count + temp_3;\n      shift_count = shift_count + temp_3;\n    }\n    temp_8 = temp_8 + -1;\n    temp_5 = temp_5 * 2 - ((int)temp_7 >> 0x1f);\n    temp_3 = temp_3 >> 1;\n    temp_7 = temp_7 << 1;\n  } while (temp_8 != 0);\n  count = 0x20;\n  temp_4 = 0x80000000;\n  temp_8 = 0;\n  temp_3 = 0;\n  do {\n    temp_1 = temp_4 + temp_8;\n    temp_9 = result_shifted;\n    if ((int)result_shifted < (int)temp_5) {\n      if ((int)temp_1 < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp_1 + temp_4)) {\n          temp_9 = result_shifted + 1;\n        }\n      }\n      temp_6 = temp_5 - result_shifted;\n      result_shifted = temp_9;\n      if (temp_7 < temp_1) {\n        temp_6 = temp_6 - 1;\n      }\nLAB_0800a262:\n      temp_8 = temp_1 + temp_4;\n      temp_7 = temp_7 - temp_1;\n      temp_3 = temp_3 + temp_4;\n      temp_5 = temp_6;\n    }\n    else if ((temp_5 == result_shifted) && (temp_1 <= temp_7)) {\n      if ((int)temp_1 < 0) goto LAB_0800a26a;\n      temp_6 = 0;\n      result_shifted = temp_5;\n      goto LAB_0800a262;\n    }\n    count = count + -1;\n    temp_4 = temp_4 >> 1;\n    temp_5 = temp_5 * 2 - ((int)temp_7 >> 0x1f);\n    temp_7 = temp_7 << 1;\n    if (count == 0) {\n      if ((temp_5 | temp_7) == 0) {\n        temp_3 = temp_3 >> 1;\n      }\n      else if (temp_3 == 0xffffffff) {\n        shift_count = shift_count + 1;\n        temp_3 = 0;\n      }\n      else {\n        temp_3 = temp_3 + 1 >> 1;\n      }\n      if ((shift_count & 1) != 0) {\n        temp_3 = temp_3 | 0x80000000;\n      }\n      return temp_3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_0800a1bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result_shifted",
                "iVar2": "count",
                "uVar3": "temp_1",
                "uVar4": "temp_2",
                "uVar5": "temp_3",
                "uVar6": "temp_4",
                "uVar7": "temp_5",
                "uVar8": "temp_6",
                "uVar9": "temp_7",
                "iVar10": "temp_8",
                "uVar11": "temp_9",
                "uVar12": "shift_count",
                "uVar13": "result"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_final_result_0800a348",
            "code": "\nundefined4 calculate_final_result_0800a348(undefined4 input_1,uint input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int inverse_result;\n  undefined4 result_low;\n  undefined4 result_high;\n  uint positive_input_2;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  undefined8 temp_result_3;\n  undefined4 temp_variable_1;\n  undefined4 temp_variable_2;\n  undefined4 temp_variable_3;\n  undefined4 temp_variable_4;\n  \n  positive_input_2 = input_2 & 0x7fffffff;\n  if (positive_input_2 < 0x3e400000) {\n    inverse_result = calculate_inverse_08008ba0();\n    if (inverse_result == 0) {\n      return 0;\n    }\n    temp_result_1 = calculate_result_08008640(input_1,input_2,input_1,input_2);\n    result_high = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    result_low = (undefined4)temp_result_1;\n    temp_result_2 = calculate_result_08008640(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    temp_result_2 = calculate_concatenation_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n    temp_result_2 = calculate_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x809c52ad,0x3e927e4f);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n    temp_result_2 = calculate_concatenation_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x19cb1590,0x3efa01a0);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n    temp_result_2 = calculate_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x16c15177,0x3f56c16c);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n    temp_result_2 = calculate_concatenation_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x5555554c,0x3fa55555);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n  }\n  else {\n    temp_result_1 = calculate_result_08008640(input_1,input_2,input_1,input_2);\n    result_high = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    result_low = (undefined4)temp_result_1;\n    temp_result_2 = calculate_result_08008640(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    temp_result_2 = calculate_concatenation_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n    temp_result_2 = calculate_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x809c52ad,0x3e927e4f);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n    temp_result_2 = calculate_concatenation_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x19cb1590,0x3efa01a0);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n    temp_result_2 = calculate_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x16c15177,0x3f56c16c);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n    temp_result_2 = calculate_concatenation_080082d4((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x5555554c,0x3fa55555);\n    temp_result_2 = calculate_result_08008640((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_low,result_high);\n    if (0x3fd33332 < positive_input_2) {\n      if (positive_input_2 < 0x3fe90001) {\n        inverse_result = positive_input_2 - 0x200000;\n        temp_result_1 = calculate_080082d0(0,0x3ff00000,0,inverse_result);\n      }\n      else {\n        inverse_result = 0x3fd20000;\n        temp_result_1 = 0x3fe7000000000000;\n      }\n      temp_variable_4 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n      temp_variable_3 = (undefined4)temp_result_1;\n      temp_result_1 = calculate_result_08008640(result_low,result_high,0,0x3fe00000);\n      temp_result_1 = calculate_080082d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,inverse_result);\n      temp_result_2 = calculate_result_08008640(result_low,result_high,(int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20));\n      temp_result_3 = calculate_result_08008640(input_1,input_2,input_3,input_4);\n      temp_result_2 = calculate_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),(int)temp_result_3,\n                           (int)((ulonglong)temp_result_3 >> 0x20));\n      temp_result_1 = calculate_080082d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                           (int)((ulonglong)temp_result_2 >> 0x20));\n      result_low = calculate_080082d0(temp_variable_3,temp_variable_4,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n      return result_low;\n    }\n  }\n  temp_variable_2 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n  temp_variable_1 = (undefined4)temp_result_2;\n  result_low = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n  temp_result_2 = calculate_result_08008640((int)temp_result_1,result_low,0,0x3fe00000);\n  temp_result_1 = calculate_result_08008640((int)temp_result_1,result_low,temp_variable_1,temp_variable_2);\n  temp_result_3 = calculate_result_08008640(input_1,input_2,input_3,input_4);\n  temp_result_1 = calculate_080082d0((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_3,\n                       (int)((ulonglong)temp_result_3 >> 0x20));\n  temp_result_1 = calculate_080082d0((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),(int)temp_result_1,\n                       (int)((ulonglong)temp_result_1 >> 0x20));\n  result_low = calculate_080082d0(0,0x3ff00000,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n  return result_low;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_final_result_0800a348",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "inverse_result",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "positive_input_2",
                "uVar5": "temp_result_1",
                "uVar6": "temp_result_2",
                "uVar7": "temp_result_3",
                "local_30": "temp_variable_1",
                "uStack_2c": "temp_variable_2",
                "local_28": "temp_variable_3",
                "uStack_24": "temp_variable_4"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "calculate_result_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculate_result_0800a5a0(int input_param,undefined8 *output_param,int input_length,int offset,int shift,int data)\n\n{\n  undefined4 *pointer_1;\n  uint result;\n  uint temp_result;\n  int index_1;\n  uint *pointer_2;\n  undefined4 result_1;\n  uint **pointer_pointer;\n  undefined4 result_2;\n  int index_2;\n  undefined4 *pointer_3;\n  undefined4 result_3;\n  uint value;\n  uint *pointer_4;\n  int index_3;\n  int value_1;\n  undefined8 *pointer_5;\n  int value_2;\n  undefined4 *pointer_6;\n  undefined8 *pointer_19;\n  undefined4 result_4;\n  int value_3;\n  undefined8 *presult2;\n  undefined4 *presult3;\n  bool bVar24;\n  undefined8 result_5;\n  undefined8 result_6;\n  undefined8 result_7;\n  undefined8 *stack_1;\n  int stack_2;\n  int stack_3;\n  int stack_4;\n  uint *stack_array_1 [2];\n  uint stack_array_2 [20];\n  undefined8 stack_value_1;\n  undefined8 stack_value_2;\n  int stack_array_3 [38];\n  undefined8 stack_value_3;\n  \n  value_1 = *(int *)(&DAT_0800c060 + shift * 4);\n  index_2 = offset + -1;\n  stack_array_1[1] = (uint *)output_param;\n  if (input_length + 0x14 < 0 == SCARRY4(input_length,0x14)) {\n    stack_4 = (input_length + -3) / 0x18;\n    stack_3 = (stack_4 + 1) * -0x18;\n  }\n  else {\n    stack_3 = -0x18;\n    stack_4 = 0;\n  }\n  stack_3 = input_length + stack_3;\n  value_2 = stack_4 - index_2;\n  if (-1 < value_1 + index_2) {\n    value_3 = value_1 + index_2 + 1 + value_2;\n    pointer_5 = &stack_value_1;\n    do {\n      while (value_2 < 0) {\n        value_2 = value_2 + 1;\n        *(undefined4 *)pointer_5 = 0;\n        *(undefined4 *)((int)pointer_5 + 4) = 0;\n        pointer_5 = pointer_5 + 1;\n        if (value_2 == value_3) goto LAB_0800a626;\n      }\n      result_6 = calculate_shifted_value_0800856c(*(undefined4 *)(data + value_2 * 4));\n      value_2 = value_2 + 1;\n      *pointer_5 = result_6;\n      pointer_5 = pointer_5 + 1;\n    } while (value_2 != value_3);\n  }\nLAB_0800a626:\n  pointer_3 = (undefined4 *)(input_param + -8);\n  if (-1 < value_1) {\n    presult2 = &stack_value_1 + offset;\n    value_2 = index_2;\n    pointer_5 = &stack_value_3;\n    do {\n      if (index_2 < 0) {\n        result_6 = 0;\n      }\n      else {\n        result_6 = 0;\n        presult3 = pointer_3;\n        pointer_19 = presult2;\n        do {\n          pointer_6 = presult3 + 2;\n          result_5 = calculate_result_0800a5a0_08008640(*pointer_6,presult3[3],*(undefined4 *)(pointer_19 + -1),\n                                *(undefined4 *)((int)pointer_19 + -4));\n          result_6 = calculate_concatenation_080082d4((int)result_6,(int)((ulonglong)result_6 >> 0x20),(int)result_5,\n                                (int)((ulonglong)result_5 >> 0x20));\n          presult3 = pointer_6;\n          pointer_19 = pointer_19 + -1;\n        } while (pointer_6 != pointer_3 + offset * 2);\n      }\n      value_2 = value_2 + 1;\n      *pointer_5 = result_6;\n      presult2 = presult2 + 1;\n      pointer_5 = pointer_5 + 1;\n    } while (value_2 != value_1 + offset);\n  }\n  stack_array_1[0] = stack_array_2 + value_1 + -1;\n  value_2 = value_1;\n  do {\n    result_6 = CONCAT44(*(undefined4 *)((int)&stack_value_3 + value_2 * 8 + 4),\n                      *(undefined4 *)(&stack_value_3 + value_2));\n    if (0 < value_2) {\n      pointer_5 = &stack_value_3 + value_2;\n      pointer_2 = stack_array_2;\n      do {\n        result_1 = (undefined4)((ulonglong)result_6 >> 0x20);\n        calculate_result_0800a5a0_08008640((int)result_6,result_1,0,0x3e700000);\n        calculate_inverse_08008ba0();\n        result_5 = calculate_shifted_value_0800856c();\n        result_2 = (undefined4)((ulonglong)result_5 >> 0x20);\n        result_7 = calculate_result_0800a5a0_08008640((int)result_5,result_2,0,0x41700000);\n        calculate_080082d0((int)result_6,result_1,(int)result_7,(int)((ulonglong)result_7 >> 0x20));\n        result = calculate_inverse_08008ba0();\n        presult2 = pointer_5 + -1;\n        result_1 = *(undefined4 *)presult2;\n        result_3 = *(undefined4 *)((int)pointer_5 + -4);\n        *pointer_2 = result;\n        result_6 = calculate_concatenation_080082d4((int)result_5,result_2,result_1,result_3);\n        pointer_5 = presult2;\n        pointer_2 = pointer_2 + 1;\n      } while (presult2 != &stack_value_3);\n    }\n    result_6 = calculate_result_0800a5a0_0800b2e8((int)result_6,(int)((ulonglong)result_6 >> 0x20),stack_3);\n    result_2 = (undefined4)((ulonglong)result_6 >> 0x20);\n    calculate_result_0800a5a0_08008640((int)result_6,result_2,0,0x3fc00000);\n    result_5 = calculate_consolidated_value_080094c0();\n    result_5 = calculate_result_0800a5a0_08008640((int)result_5,(int)((ulonglong)result_5 >> 0x20),0,0x40200000);\n    result_6 = calculate_080082d0((int)result_6,result_2,(int)result_5,(int)((ulonglong)result_5 >> 0x20));\n    result = calculate_inverse_08008ba0();\n    result_5 = calculate_shifted_value_0800856c();\n    result_6 = calculate_080082d0((int)result_6,(int)((ulonglong)result_6 >> 0x20),(int)result_5,\n                          (int)((ulonglong)result_5 >> 0x20));\n    result_1 = (undefined4)((ulonglong)result_6 >> 0x20);\n    result_2 = (undefined4)result_6;\n    if (stack_3 < 1) {\n      if (stack_3 == 0) {\n        value_3 = (int)stack_array_2[value_2 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      value_3 = validate_and_check_08008b4c(result_2,result_1,0,0x3fe00000);\n      if (value_3 != 0) {\n        result = result + 1;\n        if (value_2 < 1) {\n          result_6 = calculate_080082d0(0,0x3ff00000,result_2,result_1);\n          value_3 = 2;\n          goto LAB_0800a7a4;\n        }\n        value_3 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      index_1 = (int)stack_array_2[value_2 + -1] >> (0x18U - stack_3 & 0xff);\n      value = stack_array_2[value_2 + -1] - (index_1 << (0x18U - stack_3 & 0xff));\n      value_3 = (int)value >> (0x17U - stack_3 & 0xff);\n      stack_array_2[value_2 + -1] = value;\n      result = result + index_1;\njoined_r0x0800a8b8:\n      if (0 < value_3) {\n        result = result + 1;\n        if (value_2 < 1) {\n          bVar24 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (stack_array_2[0] == 0) {\n            bVar24 = false;\n            if (value_2 != 1) {\n              pointer_2 = stack_array_2;\n              index_1 = 1;\n              do {\n                pointer_2 = pointer_2 + 1;\n                if (*pointer_2 != 0) {\n                  index_3 = index_1 + 1;\n                  value = *pointer_2;\n                  goto LAB_0800a8e2;\n                }\n                index_1 = index_1 + 1;\n              } while (index_1 != value_2);\n              bVar24 = false;\n            }\n          }\n          else {\n            index_3 = 1;\n            index_1 = 0;\n            value = stack_array_2[0];\nLAB_0800a8e2:\n            stack_array_2[index_1] = 0x1000000 - value;\n            if (index_3 < value_2) {\n              value = stack_array_2[index_3];\n              pointer_2 = stack_array_2 + index_3;\n              while( true ) {\n                pointer_4 = pointer_2 + 1;\n                *pointer_2 = 0xffffff - value;\n                if (pointer_4 == stack_array_2 + value_2) break;\n                value = *pointer_4;\n                pointer_2 = pointer_4;\n              }\n            }\n            bVar24 = true;\n          }\n        }\n        if (0 < stack_3) {\n          if (stack_3 == 1) {\n            stack_array_2[value_2 + -1] = stack_array_2[value_2 + -1] & 0x7fffff;\n          }\n          else if (stack_3 == 2) {\n            stack_array_2[value_2 + -1] = stack_array_2[value_2 + -1] & 0x3fffff;\n          }\n        }\n        if (value_3 == 2) {\n          result_6 = calculate_080082d0(0,0x3ff00000,result_2,result_1);\n          if (bVar24) {\n            result_5 = calculate_result_0800a5a0_0800b2e8(0,0x3ff00000,stack_3);\n            result_6 = calculate_080082d0((int)result_6,(int)((ulonglong)result_6 >> 0x20),(int)result_5,\n                                  (int)((ulonglong)result_5 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    result_2 = (undefined4)((ulonglong)result_6 >> 0x20);\n    index_1 = check_if_char_not_null_08008b10((int)result_6,result_2,0,0);\n    if (index_1 == 0) {\n      result_6 = calculate_result_0800a5a0_0800b2e8((int)result_6,result_2,-stack_3);\n      result_1 = (undefined4)((ulonglong)result_6 >> 0x20);\n      result_2 = (undefined4)result_6;\n      index_2 = validate_and_check_08008b4c(result_2,result_1,0,0x41700000);\n      if (index_2 == 0) {\n        value = calculate_inverse_08008ba0(result_2,result_1);\n        stack_array_2[value_2] = value;\n        index_1 = value_2;\n      }\n      else {\n        calculate_result_0800a5a0_08008640(result_2,result_1,0,0x3e700000);\n        value = calculate_inverse_08008ba0();\n        result_6 = calculate_shifted_value_0800856c();\n        result_6 = calculate_result_0800a5a0_08008640((int)result_6,(int)((ulonglong)result_6 >> 0x20),0,0x41700000);\n        calculate_080082d0(result_2,result_1,(int)result_6,(int)((ulonglong)result_6 >> 0x20));\n        temp_result = calculate_inverse_08008ba0();\n        stack_3 = stack_3 + 0x18;\n        stack_array_2[value_2] = temp_result;\n        stack_array_2[value_2 + 1] = value;\n        index_1 = value_2 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    index_1 = value_2 + -1;\n    if (value_1 <= index_1) {\n      value = 0;\n      pointer_2 = stack_array_2 + value_2 + 0x3fffffff;\n      do {\n        pointer_4 = pointer_2 + -1;\n        value = value | *pointer_2;\n        pointer_2 = pointer_4;\n      } while (pointer_4 != stack_array_1[0]);\n      if (value != 0) break;\n    }\n    if (stack_array_2[value_1 + -1] == 0) {\n      stack_2 = 1;\n      pointer_pointer = stack_array_1 + value_1;\n      do {\n        pointer_2 = *pointer_pointer;\n        stack_2 = stack_2 + 1;\n        pointer_pointer = pointer_pointer + -1;\n      } while (pointer_2 == (uint *)0x0);\n      stack_2 = value_2 + stack_2;\n    }\n    else {\n      stack_2 = value_2 + 1;\n    }\n    value_3 = value_2 + 1;\n    presult3 = (undefined4 *)(data + (value_3 + stack_4 + 0x3fffffff) * 4);\n    pointer_5 = &stack_value_1 + value_2 + offset;\n    stack_1 = &stack_value_3 + value_3;\n    do {\n      presult3 = presult3 + 1;\n      result_6 = calculate_shifted_value_0800856c(*presult3);\n      *pointer_5 = result_6;\n      presult2 = pointer_5 + 1;\n      if (index_2 < 0) {\n        result_5 = 0;\n      }\n      else {\n        result_5 = 0;\n        pointer_6 = pointer_3;\n        while( true ) {\n          pointer_5 = pointer_5 + -1;\n          pointer_1 = pointer_6 + 2;\n          result_6 = calculate_result_0800a5a0_08008640((int)result_6,(int)((ulonglong)result_6 >> 0x20),*pointer_1,pointer_6[3]);\n          result_5 = calculate_concatenation_080082d4((int)result_5,(int)((ulonglong)result_5 >> 0x20),(int)result_6,\n                                (int)((ulonglong)result_6 >> 0x20));\n          if (pointer_1 == pointer_3 + offset * 2) break;\n          result_6 = *pointer_5;\n          pointer_6 = pointer_1;\n        }\n      }\n      *stack_1 = result_5;\n      value_3 = value_3 + 1;\n      value_2 = stack_2;\n      pointer_5 = presult2;\n      stack_1 = stack_1 + 1;\n    } while (value_3 <= stack_2);\n  } while( true );\n  stack_3 = stack_3 + -0x18;\n  if (stack_array_2[index_1] == 0) {\n    pointer_2 = stack_array_2 + value_2 + 0x3ffffffe;\n    do {\n      value = *pointer_2;\n      index_1 = index_1 + -1;\n      stack_3 = stack_3 + -0x18;\n      pointer_2 = pointer_2 + -1;\n    } while (value == 0);\n  }\nLAB_0800a9f6:\n  result_6 = calculate_result_0800a5a0_0800b2e8(0,0x3ff00000,stack_3);\n  if (index_1 < 0) {\n    if (2 < shift) {\n      if (shift == 3) {\n        result_6 = 0;\nLAB_0800abe4:\n        if (value_3 == 0) {\n          *stack_array_1[1] = (undefined4)stack_value_2;\n          *(int *)((int)stack_array_1[1] + 4) = stack_value_2._4_4_;\n          *(undefined8 *)((int)stack_array_1[1] + 0x10) = result_6;\n          *(int *)((int)stack_array_1[1] + 8) = stack_array_3[0];\n          *(int *)((int)stack_array_1[1] + 0xc) = stack_array_3[1];\n          return result & 7;\n        }\n        *(int *)((int)stack_array_1[1] + 0x10) = (int)result_6;\n        *(int *)((int)stack_array_1[1] + 8) = stack_array_3[0];\n        *(int *)((int)stack_array_1[1] + 0x14) = (int)((ulonglong)result_6 >> 0x20) + -0x80000000;\n        *(int *)((int)stack_array_1[1] + 4) = stack_value_2._4_4_ + -0x80000000;\n        *(int *)((int)stack_array_1[1] + 0xc) = stack_array_3[1] + -0x80000000;\n        *stack_array_1[1] = (undefined4)stack_value_2;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (shift < 1) {\n      if (shift != 0) goto LAB_0800ab0e;\n      result_6 = 0;\nLAB_0800aafc:\n      index_2 = (int)((ulonglong)result_6 >> 0x20);\n      if (value_3 != 0) {\n        index_2 = index_2 + -0x80000000;\n      }\n      *stack_array_1[1] = (int)result_6;\n      *(int *)((int)stack_array_1[1] + 4) = index_2;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    result_6 = 0;\n  }\n  else {\n    presult2 = &stack_value_3 + index_1;\n    pointer_2 = stack_array_2 + index_1 + 1;\n    pointer_5 = &stack_value_3 + index_1 + 1;\n    do {\n      result_2 = (undefined4)((ulonglong)result_6 >> 0x20);\n      pointer_2 = pointer_2 + -1;\n      result_5 = calculate_shifted_value_0800856c(*pointer_2);\n      result_5 = calculate_result_0800a5a0_08008640((int)result_5,(int)((ulonglong)result_5 >> 0x20),(int)result_6,result_2);\n      pointer_5 = pointer_5 + -1;\n      *pointer_5 = result_5;\n      result_6 = calculate_result_0800a5a0_08008640((int)result_6,result_2,0,0x3e700000);\n    } while (pointer_2 != stack_array_2);\n    index_2 = 0;\n    do {\n      if (value_1 < 0) {\n        result_6 = 0;\n      }\n      else {\n        result_2 = 0x40000000;\n        result_1 = 0x3ff921fb;\n        result_6 = 0;\n        value_2 = 0;\n        pointer_5 = presult2;\n        pointer_3 = &DAT_0800c028;\n        while( true ) {\n          result_5 = calculate_result_0800a5a0_08008640(*(undefined4 *)pointer_5,*(undefined4 *)((int)pointer_5 + 4),result_2,result_1\n                               );\n          result_6 = calculate_concatenation_080082d4((int)result_6,(int)((ulonglong)result_6 >> 0x20),(int)result_5,\n                                (int)((ulonglong)result_5 >> 0x20));\n          value_2 = value_2 + 1;\n          if ((value_1 < value_2) || (index_2 < value_2)) break;\n          result_2 = *pointer_3;\n          result_1 = pointer_3[1];\n          pointer_5 = pointer_5 + 1;\n          pointer_3 = pointer_3 + 2;\n        }\n      }\n      bVar24 = index_2 != index_1;\n      *(int *)(&stack_value_2 + index_2) = (int)result_6;\n      *(int *)((int)&stack_value_2 + (index_2 * 2 + 1) * 4) = (int)((ulonglong)result_6 >> 0x20);\n      presult2 = presult2 + -1;\n      index_2 = index_2 + 1;\n    } while (bVar24);\n    if (2 < shift) {\n      if (shift == 3) {\n        if (index_1 != 0) {\n          pointer_5 = &stack_value_2 + index_1;\n          result_6 = CONCAT44(*(undefined4 *)((int)&stack_value_2 + (index_1 * 2 + 1) * 4),\n                            *(undefined4 *)pointer_5);\n          do {\n            result_1 = (undefined4)((ulonglong)result_6 >> 0x20);\n            result_2 = (undefined4)result_6;\n            result_3 = *(undefined4 *)(pointer_5 + -1);\n            result_4 = *(undefined4 *)((int)pointer_5 + -4);\n            result_6 = calculate_concatenation_080082d4(result_2,result_1,result_3,result_4);\n            result_5 = calculate_080082d0(result_3,result_4,(int)result_6,(int)((ulonglong)result_6 >> 0x20));\n            result_5 = calculate_concatenation_080082d4((int)result_5,(int)((ulonglong)result_5 >> 0x20),result_2,result_1);\n            *pointer_5 = result_5;\n            pointer_5 = pointer_5 + -1;\n            *pointer_5 = result_6;\n          } while (&stack_value_2 != pointer_5);\n          if (1 < index_1) {\n            pointer_5 = &stack_value_2 + index_1;\n            result_6 = CONCAT44(*(undefined4 *)((int)&stack_value_2 + (index_1 * 2 + 1) * 4),\n                              *(undefined4 *)pointer_5);\n            do {\n              result_1 = (undefined4)((ulonglong)result_6 >> 0x20);\n              result_2 = (undefined4)result_6;\n              result_3 = *(undefined4 *)(pointer_5 + -1);\n              result_4 = *(undefined4 *)((int)pointer_5 + -4);\n              result_6 = calculate_concatenation_080082d4(result_2,result_1,result_3,result_4);\n              result_5 = calculate_080082d0(result_3,result_4,(int)result_6,(int)((ulonglong)result_6 >> 0x20));\n              result_5 = calculate_concatenation_080082d4((int)result_5,(int)((ulonglong)result_5 >> 0x20),result_2,result_1);\n              *pointer_5 = result_5;\n              pointer_5 = pointer_5 + -1;\n              *pointer_5 = result_6;\n            } while (&stack_value_2 + 1 != pointer_5);\n            result_6 = 0;\n            pointer_5 = &stack_value_2 + index_1 + 1;\n            do {\n              presult2 = pointer_5 + -1;\n              result_6 = calculate_concatenation_080082d4((int)result_6,(int)((ulonglong)result_6 >> 0x20),\n                                    *(undefined4 *)presult2,*(undefined4 *)((int)pointer_5 + -4));\n              pointer_5 = presult2;\n            } while (&stack_value_2 + 2 != presult2);\n            goto LAB_0800abe4;\n          }\n        }\n        result_6 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (shift < 1) {\n      if (shift != 0) goto LAB_0800ab0e;\n      result_6 = 0;\n      pointer_5 = &stack_value_2 + index_1 + 1;\n      do {\n        presult2 = pointer_5 + -1;\n        result_6 = calculate_concatenation_080082d4((int)result_6,(int)((ulonglong)result_6 >> 0x20),*(undefined4 *)presult2,\n                              *(undefined4 *)((int)pointer_5 + -4));\n        pointer_5 = presult2;\n      } while (&stack_value_2 != presult2);\n      goto LAB_0800aafc;\n    }\n    result_6 = 0;\n    pointer_5 = &stack_value_2 + index_1 + 1;\n    do {\n      presult2 = pointer_5 + -1;\n      result_6 = calculate_concatenation_080082d4((int)result_6,(int)((ulonglong)result_6 >> 0x20),*(undefined4 *)presult2,\n                            *(undefined4 *)((int)pointer_5 + -4));\n      pointer_5 = presult2;\n    } while (&stack_value_2 != presult2);\n  }\n  index_2 = (int)((ulonglong)result_6 >> 0x20);\n  result_2 = (undefined4)result_6;\n  if (value_3 == 0) {\n    *(undefined8 *)stack_array_1[1] = result_6;\n    result_6 = calculate_080082d0((undefined4)stack_value_2,stack_value_2._4_4_,result_2,index_2);\n    if (index_1 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    index_2 = 1;\n    pointer_5 = &stack_value_2;\n    do {\n      result_6 = calculate_concatenation_080082d4((int)result_6,(int)((ulonglong)result_6 >> 0x20),\n                            *(undefined4 *)(pointer_5 + 1),*(undefined4 *)((int)pointer_5 + 0xc));\n      index_2 = index_2 + 1;\n      pointer_5 = pointer_5 + 1;\n    } while (index_2 <= index_1);\n    if (value_3 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *stack_array_1[1] = result_2;\n    *(int *)((int)stack_array_1[1] + 4) = index_2 + -0x80000000;\n    result_6 = calculate_080082d0((undefined4)stack_value_2,stack_value_2._4_4_,result_2,index_2);\n    if (0 < index_1) goto LAB_0800ad04;\n  }\n  result_6 = CONCAT44((int)((ulonglong)result_6 >> 0x20) + -0x80000000,(int)result_6);\nLAB_0800ad26:\n  *(undefined8 *)((int)stack_array_1[1] + 8) = result_6;\n  return result & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "param_1": "input_param",
                "param_2": "output_param",
                "param_3": "input_length",
                "param_4": "offset",
                "param_5": "shift",
                "param_6": "data",
                "puVar1": "pointer_1",
                "uVar2": "result",
                "uVar3": "temp_result",
                "iVar4": "index_1",
                "puVar5": "pointer_2",
                "uVar6": "result_1",
                "ppuVar7": "pointer_pointer",
                "uVar8": "result_2",
                "iVar9": "index_2",
                "puVar10": "pointer_3",
                "uVar11": "result_3",
                "uVar12": "value",
                "puVar13": "pointer_4",
                "iVar14": "index_3",
                "iVar15": "value_1",
                "iVar17": "value_2",
                "iVar21": "value_3",
                "puVar16": "pointer_5",
                "puVar18": "pointer_6",
                "uVar20": "result_4",
                "uVar25": "result_5",
                "uVar26": "result_6",
                "uVar27": "result_7",
                "local_284": "stack_1",
                "local_280": "stack_2",
                "local_270": "stack_3",
                "local_26c": "stack_4",
                "local_260": "stack_array_1",
                "local_258": "stack_array_2",
                "uStack_208": "stack_value_1",
                "local_168": "stack_value_2",
                "local_160": "stack_array_3",
                "uStack_c8": "stack_value_3"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_inverse_0800adf0",
            "code": "\nundefined4\ncalculate_inverse_0800adf0(undefined4 input1,uint input2,undefined4 input3,undefined4 input4,int flag)\n\n{\n  int inverse_result;\n  undefined4 result1_low;\n  undefined4 result1_high;\n  undefined4 result2_low;\n  undefined4 result2_high;\n  undefined4 temp_low;\n  undefined8 temp_high;\n  undefined8 temp_high2;\n  \n  if (((input2 & 0x7fffffff) < 0x3e400000) && (inverse_result = calculate_inverse_0800adf0_08008ba0(), inverse_result == 0)) {\n    return input1;\n  }\n  temp_high = calculate_result_08008640(input1,input2,input1);\n  result2_low = (undefined4)((ulonglong)temp_high >> 0x20);\n  result1_high = (undefined4)temp_high;\n  temp_high = calculate_result_08008640(input1,input2,result1_high,result2_low);\n  result2_high = (undefined4)((ulonglong)temp_high >> 0x20);\n  result1_low = (undefined4)temp_high;\n  temp_high = calculate_result_08008640(result1_high,result2_low,0x5acfd57c,0x3de5d93a);\n  temp_high = calculate_080082d0((int)temp_high,(int)((ulonglong)temp_high >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp_high = calculate_result_08008640((int)temp_high,(int)((ulonglong)temp_high >> 0x20),result1_high,result2_low);\n  temp_high = calculate_concatenation_080082d4((int)temp_high,(int)((ulonglong)temp_high >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp_high = calculate_result_08008640((int)temp_high,(int)((ulonglong)temp_high >> 0x20),result1_high,result2_low);\n  temp_high = calculate_080082d0((int)temp_high,(int)((ulonglong)temp_high >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp_high = calculate_result_08008640((int)temp_high,(int)((ulonglong)temp_high >> 0x20),result1_high,result2_low);\n  temp_high = calculate_concatenation_080082d4((int)temp_high,(int)((ulonglong)temp_high >> 0x20),0x1110f8a6,0x3f811111);\n  temp_low = (undefined4)((ulonglong)temp_high >> 0x20);\n  if (flag != 0) {\n    temp_high2 = calculate_result_08008640(input3,input4,0,0x3fe00000);\n    temp_high = calculate_result_08008640(result1_low,result2_high,(int)temp_high,temp_low);\n    temp_high = calculate_080082d0((int)temp_high2,(int)((ulonglong)temp_high2 >> 0x20),(int)temp_high,\n                         (int)((ulonglong)temp_high >> 0x20));\n    temp_high = calculate_result_08008640((int)temp_high,(int)((ulonglong)temp_high >> 0x20),result1_high,result2_low);\n    temp_high = calculate_080082d0((int)temp_high,(int)((ulonglong)temp_high >> 0x20),input3,input4);\n    temp_high2 = calculate_result_08008640(result1_low,result2_high,0x55555549,0x3fc55555);\n    temp_high = calculate_concatenation_080082d4((int)temp_high,(int)((ulonglong)temp_high >> 0x20),(int)temp_high2,\n                         (int)((ulonglong)temp_high2 >> 0x20));\n    result1_high = calculate_080082d0(input1,input2,(int)temp_high,(int)((ulonglong)temp_high >> 0x20));\n    return result1_high;\n  }\n  temp_high = calculate_result_08008640(result1_high,result2_low,(int)temp_high,temp_low);\n  temp_high = calculate_080082d0((int)temp_high,(int)((ulonglong)temp_high >> 0x20),0x55555549,0x3fc55555);\n  temp_high = calculate_result_08008640((int)temp_high,(int)((ulonglong)temp_high >> 0x20),result1_low,result2_high);\n  result1_high = calculate_concatenation_080082d4((int)temp_high,(int)((ulonglong)temp_high >> 0x20),input1,input2);\n  return result1_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_inverse_0800adf0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "iVar1": "inverse_result",
                "uVar2": "result1_low",
                "uVar3": "result1_high",
                "uVar4": "result2_low",
                "uVar5": "result2_high",
                "uVar6": "temp_low",
                "uVar7": "temp_high",
                "uVar8": "temp_high2"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_result_0800af78",
            "code": "\nint calculate_result_0800af78(int input_value_1,uint input_value_2)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  int output_value;\n  undefined4 temp_1;\n  uint temp_2;\n  undefined8 temp_3;\n  undefined8 temp_4;\n  undefined4 local_var;\n  \n  temp_3 = CONCAT44(input_value_2,input_value_1);\n  temp_2 = input_value_2 & 0x7fffffff;\n  if (temp_2 < 0x44100000) {\n    if (temp_2 < 0x3fdc0000) {\n      if (temp_2 < 0x3e200000) {\n        temp_4 = calculate_concatenation_080082d4(input_value_1,input_value_2,0x8800759c,0x7e37e43c);\n        output_value = is_cy_null_08008b60((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0,0x3ff00000);\n        if (output_value != 0) {\n          return input_value_1;\n        }\n      }\n      output_value = -1;\n    }\n    else {\n      temp_3 = FUNC_0800b2cc();\n      result_4 = (undefined4)((ulonglong)temp_3 >> 0x20);\n      result_1 = (undefined4)temp_3;\n      if (temp_2 < 0x3ff30000) {\n        if (temp_2 < 0x3fe60000) {\n          temp_3 = calculate_concatenation_080082d4(result_1,result_4,result_1,result_4);\n          temp_3 = calculate_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0,0x3ff00000);\n          temp_4 = calculate_concatenation_080082d4(result_1,result_4,0,0x40000000);\n          temp_3 = calculate_floating_point_08008894((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                               (int)((ulonglong)temp_4 >> 0x20));\n          output_value = 0;\n        }\n        else {\n          temp_3 = calculate_080082d0(result_1,result_4,0,0x3ff00000);\n          temp_4 = calculate_concatenation_080082d4(result_1,result_4,0,0x3ff00000);\n          temp_3 = calculate_floating_point_08008894((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                               (int)((ulonglong)temp_4 >> 0x20));\n          output_value = 1;\n        }\n      }\n      else if (temp_2 < 0x40038000) {\n        temp_3 = calculate_080082d0(result_1,result_4,0,0x3ff80000);\n        temp_4 = calculate_result_0800af78_08008640(result_1,result_4,0,0x3ff80000);\n        temp_4 = calculate_concatenation_080082d4((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0,0x3ff00000);\n        temp_3 = calculate_floating_point_08008894((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),(int)temp_4,\n                             (int)((ulonglong)temp_4 >> 0x20));\n        output_value = 2;\n      }\n      else {\n        temp_3 = calculate_floating_point_08008894(0,0xbff00000,result_1,result_4);\n        output_value = 3;\n      }\n    }\n    local_var = (undefined4)((ulonglong)temp_3 >> 0x20);\n    temp_1 = (undefined4)temp_3;\n    temp_3 = calculate_result_0800af78_08008640(temp_1,local_var,temp_1);\n    result_2 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    result_1 = (undefined4)temp_3;\n    temp_3 = calculate_result_0800af78_08008640(result_1,result_2,result_1,result_2);\n    result_3 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    result_4 = (undefined4)temp_3;\n    temp_3 = calculate_result_0800af78_08008640(result_4,result_3,0xe322da11,0x3f90ad3a);\n    temp_3 = calculate_concatenation_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_concatenation_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_concatenation_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_concatenation_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x920083ff,0x3fc24924);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_4,result_3);\n    temp_3 = calculate_concatenation_080082d4((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),0x5555550d,0x3fd55555);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),result_1,result_2);\n    result_1 = (undefined4)((ulonglong)temp_3 >> 0x20);\n    temp_4 = calculate_result_0800af78_08008640(result_4,result_3,0x2c6a6c2f,0xbfa2b444);\n    temp_4 = calculate_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_4 = calculate_result_0800af78_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    temp_4 = calculate_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_4 = calculate_result_0800af78_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    temp_4 = calculate_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_4 = calculate_result_0800af78_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    temp_4 = calculate_080082d0((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_4 = calculate_result_0800af78_08008640((int)temp_4,(int)((ulonglong)temp_4 >> 0x20),result_4,result_3);\n    result_4 = (undefined4)((ulonglong)temp_4 >> 0x20);\n    if (output_value == -1) {\n      temp_3 = calculate_concatenation_080082d4((int)temp_3,result_1,(int)temp_4,result_4);\n      temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1,local_var);\n      output_value = calculate_080082d0(temp_1,local_var,(int)temp_3,(int)((ulonglong)temp_3 >> 0x20));\n      return output_value;\n    }\n    temp_3 = calculate_concatenation_080082d4((int)temp_3,result_1,(int)temp_4,result_4);\n    temp_3 = calculate_result_0800af78_08008640((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1,local_var);\n    temp_3 = calculate_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + output_value * 8),\n                         *(undefined4 *)(&UNK_0800c094 + output_value * 8));\n    temp_3 = calculate_080082d0((int)temp_3,(int)((ulonglong)temp_3 >> 0x20),temp_1,local_var);\n    output_value = calculate_080082d0(*(undefined4 *)(&UNK_0800c070 + output_value * 8),\n                         *(undefined4 *)(&UNK_0800c074 + output_value * 8),(int)temp_3,\n                         (int)((ulonglong)temp_3 >> 0x20));\n    if ((int)input_value_2 < 0) {\n      return output_value;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp_2) || ((temp_2 == 0x7ff00000 && (input_value_1 != 0)))) {\n      output_value = calculate_concatenation_080082d4(input_value_1,input_value_2,input_value_1);\n      return output_value;\n    }\n    output_value = 0x54442d18;\n  }\n  return output_value;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_result_0800af78",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4",
                "iVar5": "output_value",
                "uVar6": "temp_1",
                "uVar7": "temp_2",
                "uVar8": "temp_3",
                "uVar9": "temp_4",
                "local_2c": "local_var"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "sign_bit_shift_0800b2d4",
            "code": "\nuint signBitShift_0800b2d4(undefined4 originalParam,uint number)\n\n{\n  return (number | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "sign_bit_shift_0800b2d4",
                "param_1": "originalParam",
                "param_2": "number"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_0800b2e0",
            "code": "\nvoid initialize_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculate_result_0800b2e8(uint input_1,uint input_2,int offset,undefined4 constant)\n\n{\n  uint shifted_input;\n  int sum;\n  uint high_bits;\n  undefined8 combined_input;\n  \n  combined_input = CONCAT44(input_2,input_1);\n  shifted_input = (input_2 << 1) >> 0x15;\n  if (shifted_input == 0) {\n    if ((input_1 | input_2 & 0x7fffffff) == 0) {\n      return input_1;\n    }\n    combined_input = perform_calculation(input_1,input_2,0,0x43500000);\n    if (offset < -50000) goto LAB_0800b34a;\n    shifted_input = ((uint)((int)((ulonglong)combined_input >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_input == 0x7ff) {\n    shifted_input = perform_concatenation(input_1,input_2,input_1,input_2,constant);\n    return shifted_input;\n  }\n  high_bits = (uint)((ulonglong)combined_input >> 0x20);\n  sum = shifted_input + offset;\n  if (sum < 0x7ff) {\n    if (0 < sum) {\n      return (uint)combined_input;\n    }\n    if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n      shifted_input = perform_calculation((uint)combined_input,high_bits & 0x800fffff | (sum + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_input;\n    }\n    if (offset < 0xc351) {\n      combined_input = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_input = perform_calculation((int)combined_input,(int)((ulonglong)combined_input >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_input;\n    }\n  }\n  shifted_input = perform_calculation(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_input;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "offset",
                "param_4": "constant",
                "uVar1": "shifted_input",
                "iVar2": "sum",
                "uVar3": "high_bits",
                "uVar4": "combined_input",
                "calculate_result_08008640": "perform_calculation",
                "calculate_concatenation_080082d4": "perform_concatenation"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_global_data_0800b3dc",
            "code": "\nundefined4 getGlobalData_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_global_data_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "execute_tasks_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid executeTasks_0800b3e8(void)\n\n{\n  int taskCount;\n  code **taskList;\n  \n  FUNC_0800b5b0();\n  taskCount = 0;\n  taskList = (code **)&DAT_0800c0b4;\n  do {\n    taskCount = taskCount + 1;\n    (**taskList)();\n    taskList = taskList + 1;\n  } while (taskCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "execute_tasks_0800b3e8",
                "iVar1": "taskCount",
                "ppcVar2": "taskList"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "fill_memory_with_byte_0800b430",
            "code": "\nvoid fillMemoryWithByte_0800b430(undefined4 *destination,undefined byteValue,uint length)\n\n{\n  undefined4 *currentWord;\n  undefined4 *nextWord;\n  uint remainingLength;\n  undefined4 word;\n  bool isLengthZero;\n  \n  if (((uint)destination & 3) != 0) {\n    remainingLength = length - 1;\n    currentWord = destination;\n    if (length == 0) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)currentWord + 1);\n      *(undefined *)currentWord = byteValue;\n      length = remainingLength;\n      if (((uint)destination & 3) == 0) break;\n      isLengthZero = remainingLength == 0;\n      remainingLength = remainingLength - 1;\n      currentWord = destination;\n      if (isLengthZero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    word = CONCAT22(CONCAT11(byteValue,byteValue),CONCAT11(byteValue,byteValue));\n    if (0xf < length) {\n      currentWord = destination + 4;\n      do {\n        currentWord[-4] = word;\n        currentWord[-3] = word;\n        currentWord[-2] = word;\n        currentWord[-1] = word;\n        currentWord = currentWord + 4;\n      } while (currentWord != (undefined4 *)((int)destination + (length - 0x10 & 0xfffffff0) + 0x20));\n      remainingLength = length & 0xc;\n      destination = destination + ((length - 0x10 >> 4) + 1) * 4;\n      length = length & 0xf;\n      if (remainingLength == 0) goto joined_r0x0800b4a8;\n    }\n    currentWord = (undefined4 *)((length - 4 & 0xfffffffc) + 4 + (int)destination);\n    do {\n      nextWord = destination + 1;\n      *destination = word;\n      destination = nextWord;\n    } while (currentWord != nextWord);\n    length = length & 3;\n    destination = currentWord;\n  }\njoined_r0x0800b4a8:\n  if (length != 0) {\n    currentWord = destination;\n    do {\n      nextWord = (undefined4 *)((int)currentWord + 1);\n      *(undefined *)currentWord = byteValue;\n      currentWord = nextWord;\n    } while ((undefined4 *)(length + (int)destination) != nextWord);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "fill_memory_with_byte_0800b430",
                "param_1": "destination",
                "param_2": "byteValue",
                "param_3": "length",
                "puVar1": "currentWord",
                "puVar2": "nextWord",
                "uVar3": "remainingLength",
                "uVar4": "word",
                "bVar5": "isLengthZero"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_0800b524",
            "code": "\nundefined4 updateData_0800b524(int updateType,undefined4 newValue,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined *dataPtr;\n  undefined4 result;\n  uint shiftedBit;\n  uint dataCount;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  dataCount = *(uint *)(DAT_20000168 + 4);\n  if ((int)dataCount < 0x20) {\n    if (updateType != 0) {\n      *(undefined4 *)(DAT_20000168 + dataCount * 4 + 0x88) = param_3;\n      shiftedBit = 1 << (dataCount & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | shiftedBit;\n      *(undefined4 *)(dataPtr + dataCount * 4 + 0x108) = param_4;\n      if (updateType == 2) {\n        *(uint *)(dataPtr + 0x18c) = shiftedBit | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    result = DAT_20000448;\n    *(uint *)(dataPtr + 4) = dataCount + 1;\n    *(undefined4 *)(dataPtr + (dataCount + 2) * 4) = newValue;\n    FUNC_0800b520(result);\n    result = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "updateType",
                "param_2": "newValue",
                "puVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "shiftedBit",
                "uVar4": "dataCount"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 188520,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}