{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "handle_assertion_errors_00000410",
            "code": "\nvoid handle_assertion_errors_00000410(void)\n\n{\n  handle_assertion_errors_00000410_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "handle_assertion_errors_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_offset_00000428",
            "code": "\ndword updateOffset_00000428(undefined4 *outputPtr,int inputValue)\n\n{\n  undefined4 interruptStatus;\n  dword currentOffset;\n  \n  interruptStatus = disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0();\n  currentOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((inputValue + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputValue + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = inputValue + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *outputPtr = 0xc;\n    currentOffset = 0xffffffff;\n  }\n  enable_interrupts_if_privileged_00000d0c(interruptStatus);\n  return currentOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_offset_00000428",
                "param_1": "outputPtr",
                "param_2": "inputValue",
                "uVar1": "interruptStatus",
                "local_c": "currentOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "copy_and_increment_00000490",
            "code": "\nundefined4 copyAndIncrement_00000490(undefined4 ptr1,undefined4 ptr2,undefined4 ptr3,undefined4 ptr4)\n\n{\n  undefined4 result;\n  \n  result = copy_and_increment_00000e14(ptr3,ptr4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "copy_and_increment_00000490",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "ptr3",
                "param_4": "ptr4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "set_initial_values_000004f2",
            "code": "\nundefined4 setInitialValues_000004f2(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "set_initial_values_000004f2",
                "param_1": "outputPointer"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_value_and_return_00000514",
            "code": "\nundefined4 set_value_and_return_00000514(undefined4 *output_ptr)\n\n{\n  *output_ptr = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_value_and_return_00000514",
                "param_1": "output_ptr"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_validity_00000534",
            "code": "\nundefined4 checkValidity_00000534(undefined4 *result,int input)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_validity_00000534",
                "param_1": "result",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "decode_bytes_00000566",
            "code": "\nint decode_bytes_00000566(int input_value)\n\n{\n  byte byte_4;\n  byte byte_1;\n  byte byte_2;\n  byte byte_3;\n  int result;\n  \n  byte_1 = (byte)input_value;\n  byte_2 = (byte)((uint)input_value >> 8);\n  byte_3 = (byte)((uint)input_value >> 0x10);\n  byte_4 = (byte)((uint)input_value >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte_1 & 1) << 1 | byte_1 >> 1 & 1) << 1 | byte_1 >> 2 & 1) << 1\n                                  | byte_1 >> 3 & 1) << 1 | byte_1 >> 4 & 1) << 1 | byte_1 >> 5 & 1) <<\n                                1 | byte_1 >> 6 & 1) << 1 | byte_1 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte_2 & 1) << 1 | byte_2 >> 1 & 1) << 1 | byte_2 >> 2 & 1) << 1\n                                  | byte_2 >> 3 & 1) << 1 | byte_2 >> 4 & 1) << 1 | byte_2 >> 5 & 1) <<\n                                1 | byte_2 >> 6 & 1) << 1 | byte_2 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte_3 & 1) << 1 | byte_3 >> 1 & 1) << 1 | byte_3 >> 2 & 1) << 1\n                                  | byte_3 >> 3 & 1) << 1 | byte_3 >> 4 & 1) << 1 | byte_3 >> 5 & 1) <<\n                                1 | byte_3 >> 6 & 1) << 1 | byte_3 >> 7) << 8 |\n                  (uint)(byte)((((((((byte_4 & 1) << 1 | byte_4 >> 1 & 1) << 1 | byte_4 >> 2 & 1) << 1\n                                  | byte_4 >> 3 & 1) << 1 | byte_4 >> 4 & 1) << 1 | byte_4 >> 5 & 1) <<\n                                1 | byte_4 >> 6 & 1) << 1 | byte_4 >> 7));\n  if (input_value == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "decode_bytes_00000566",
                "param_1": "input_value",
                "bVar1": "byte_4",
                "bVar2": "byte_1",
                "bVar3": "byte_2",
                "bVar4": "byte_3",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointers_0000058e",
            "code": "\nvoid updatePointers_0000058e(int *inputPointer,PointerType *outputPointer)\n\n{\n  if (*inputPointer == 0) {\n    *outputPointer = outputPointer;\n  }\n  else {\n    *outputPointer = *(PointerType *)*inputPointer;\n    *(PointerType **)*inputPointer = outputPointer;\n  }\n  *inputPointer = newIntParam;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointers_0000058e",
                "param_1": "inputPointer",
                "param_2": "outputPointer",
                "(int)param_2": "newIntParam",
                "undefined4": "PointerType"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_pointer_000005ca",
            "code": "\nundefined4 * extractPointer_000005ca(int *pointer)\n\n{\n  undefined4 *extractedPointer;\n  \n  if (*pointer == 0) {\n    extractedPointer = (undefined4 *)0x0;\n  }\n  else {\n    extractedPointer = *(undefined4 **)*pointer;\n    if (extractedPointer == (undefined4 *)*pointer) {\n      *pointer = 0;\n    }\n    else {\n      *(undefined4 *)*pointer = *extractedPointer;\n    }\n  }\n  return extractedPointer;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_pointer_000005ca",
                "param_1": "pointer",
                "puVar1": "extractedPointer"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "decode_and_modify_data_00000610",
            "code": "\nundefined4 decodeAndModifyData_00000610(void)\n\n{\n  int inputData;\n  int decodedValue;\n  undefined4 result;\n  \n  inputData = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  decodedValue = decode_bytes_00000566(DAT_1fff0424);\n  decodedValue = **(int **)(&DAT_1fff03e4 + decodedValue * 4);\n  if (inputData == decodedValue + -8) {\n    result = 0;\n  }\n  else {\n    if ((inputData != 0) && (*(char *)(inputData + 4) == '\\t')) {\n      *(undefined *)(inputData + 4) = 10;\n    }\n    *(undefined *)(decodedValue + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(decodedValue + -2);\n    result = 1;\n    DAT_1fff03dc = decodedValue + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "decode_and_modify_data_00000610",
                "iVar1": "inputData",
                "iVar2": "decodedValue",
                "uVar3": "result"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_pointer_and_flag_00000698",
            "code": "\nvoid updatePointerAndFlag_00000698(int inputPointer,uint newFlag)\n\n{\n  if (newFlag < 9) {\n    if ((8 < *(byte *)(inputPointer + 4)) &&\n       (extract_pointer_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(inputPointer + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(inputPointer + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(inputPointer + 5));\n    }\n  }\n  else if (*(byte *)(inputPointer + 4) < 9) {\n    update_pointers_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(inputPointer + 5) * 4,inputPointer + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(inputPointer + 5);\n  }\n  *(char *)(inputPointer + 4) = (char)newFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_pointer_and_flag_00000698",
                "param_1": "inputPointer",
                "param_2": "newFlag"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_set_peripheral_flag_00000738",
            "code": "\nvoid checkAndSetPeripheralFlag_00000738(ushort inputValue)\n\n{\n  int exceptionNumber;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    exceptionNumber = get_exception_number_00000d2a();\n    if (exceptionNumber == 0) {\n      set_peripheral_register_flag_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_set_peripheral_flag_00000738",
                "param_1": "inputValue",
                "iVar1": "exceptionNumber"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_memory_00000794",
            "code": "\nint * initializeMemory_00000794(void)\n\n{\n  int extraOutput;\n  int counter;\n  undefined4 *pointer;\n  uint alignedPointer;\n  int outerLoopCounter;\n  int innerLoopCounter;\n  int *memoryPointer;\n  \n  disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  update_pointer_and_flag_00000698(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  counter = 0;\n  DAT_1fff03dc = 0;\n  run_interrupt_handler_00000930();\n  alignedPointer = (int)pointer + counter & 0xfffffffc;\n  memoryPointer = (int *)(alignedPointer - 4);\n  *memoryPointer = 0x77777777;\n  if (((uint)memoryPointer & 7) != 0) {\n    memoryPointer = (int *)(alignedPointer - 8);\n    *memoryPointer = 0x88888888;\n  }\n  memoryPointer[-1] = 0x1000000;\n  memoryPointer[-2] = counter << 0xd;\n  memoryPointer[-3] = 0x795;\n  memoryPointer = memoryPointer + -4;\n  *memoryPointer = 0;\n  for (innerLoopCounter = 3; 0 < innerLoopCounter; innerLoopCounter = innerLoopCounter + -1) {\n    memoryPointer = memoryPointer + -1;\n    *memoryPointer = innerLoopCounter;\n  }\n  memoryPointer = memoryPointer + -1;\n  *memoryPointer = extraOutput;\n  for (outerLoopCounter = 0xb; 3 < outerLoopCounter; outerLoopCounter = outerLoopCounter + -1) {\n    memoryPointer = memoryPointer + -1;\n    *memoryPointer = outerLoopCounter;\n  }\n  memoryPointer[-1] = -3;\n  return memoryPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_memory_00000794",
                "extraout_r1": "extraOutput",
                "iVar1": "counter",
                "puVar2": "pointer",
                "uVar3": "alignedPointer",
                "iStack_1c": "outerLoopCounter",
                "iStack_18": "innerLoopCounter",
                "piStack_14": "memoryPointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint alignedSize;\n  int count1;\n  int count2;\n  int *memoryPtr;\n  \n  alignedSize = param4 + param3 & 0xfffffffc;\n  memoryPtr = (int *)(alignedSize - 4);\n  *memoryPtr = 0x77777777;\n  if (((uint)memoryPtr & 7) != 0) {\n    memoryPtr = (int *)(alignedSize - 8);\n    *memoryPtr = 0x88888888;\n  }\n  memoryPtr[-1] = 0x1000000;\n  memoryPtr[-2] = param1;\n  memoryPtr[-3] = 0x795;\n  memoryPtr = memoryPtr + -4;\n  *memoryPtr = 0;\n  for (count2 = 3; 0 < count2; count2 = count2 + -1) {\n    memoryPtr = memoryPtr + -1;\n    *memoryPtr = count2;\n  }\n  memoryPtr = memoryPtr + -1;\n  *memoryPtr = param2;\n  for (count1 = 0xb; 3 < count1; count1 = count1 + -1) {\n    memoryPtr = memoryPtr + -1;\n    *memoryPtr = count1;\n  }\n  memoryPtr[-1] = -3;\n  return memoryPtr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "alignedSize",
                "local_14": "count1",
                "local_10": "count2",
                "local_c": "memoryPtr"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "find_last_valid_offset_000008b8",
            "code": "\nint find_last_valid_offset_000008b8(void)\n\n{\n  Elf32_Rel *current_rel_entry;\n  \n  for (current_rel_entry = (Elf32_Rel *)&DAT_1fff0000;\n      (current_rel_entry->offset == 0xe7fee7fe && (current_rel_entry < rel_array_end));\n      current_rel_entry = (Elf32_Rel *)&current_rel_entry->info) {\n  }\n  return ((int)rel_array_end - (int)current_rel_entry >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "find_last_valid_offset_000008b8",
                "local_c": "current_rel_entry",
                "Elf32_Rel_ARRAY_1fff0200": "rel_array_end",
                "r_offset": "offset",
                "r_info": "info"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_stack_pointer_00000900",
            "code": "\nundefined4 get_stack_pointer_00000900(void)\n\n{\n  undefined4 result;\n  \n  result = getMainStackPointer();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_stack_pointer_00000900",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_initial_value_0000091c",
            "code": "\nundefined4 getInitialValue_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_initial_value_0000091c"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_interrupt_handler_00000930",
            "code": "\nvoid run_interrupt_handler_00000930(void)\n\n{\n  check_irq_interrupts_enabled();\n  trigger_software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_interrupt_handler_00000930",
                "check_irq_interrupts_enabled_00000cf0": "check_irq_interrupts_enabled",
                "software_interrupt": "trigger_software_interrupt"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_peripheral_register_flag_0000093c",
            "code": "\n\n\nvoid setPeripheralRegisterFlag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_peripheral_register_flag_0000093c"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_and_clear_memory_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  initialize_and_configure_system_00000e64();\n  execute_tasks_0000459c();\n  initialize_interrupt_handler_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handle_nmi_00000a30(void)\n\n{\n  int base_address;\n  \n  panic_handler(4,\"NMI HANDLER\");\n  return stack_pointer + -*(int *)(base_address + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "base_address",
                "handle_kernel_panic_00000f04": "panic_handler",
                "&stack0xe000ffe0": "stack_pointer"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "check_irq_interrupts_00000cc0",
            "code": "\nundefined4 checkIRQInterrupts_00000cc0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabled;\n  \n  handleKernelPanic(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isPrivilegedMode();\n  if (isCurrentModePrivileged) {\n    interruptsEnabled = areIRQInterruptsEnabled();\n  }\n  disableIRQInterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "check_irq_interrupts_00000cc0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isCurrentModePrivileged",
                "isCurrentModePrivileged": "isPrivilegedMode",
                "isIRQinterruptsEnabled": "areIRQInterruptsEnabled",
                "disableIRQinterrupts": "disableIRQInterrupts",
                "handle_kernel_panic_00000f04": "handleKernelPanic"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0",
            "code": "\nundefined4 disableIRQinterrupts_getIRQinterruptsStatus_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 IRQinterruptsStatus;\n  \n  IRQinterruptsStatus = 0;\n  isPrivilegedMode = (bool)getCurrentModePrivilegeStatus();\n  if (isPrivilegedMode) {\n    IRQinterruptsStatus = getIRQinterruptsStatus();\n  }\n  disableIRQinterrupts();\n  return IRQinterruptsStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0",
                "isCurrentModePrivileged": "getCurrentModePrivilegeStatus",
                "isIRQinterruptsEnabled": "getIRQinterruptsStatus",
                "bVar1": "isPrivilegedMode",
                "uVar2": "IRQinterruptsStatus"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupts_enabled_00000cf0",
            "code": "\nundefined4 checkIRQInterruptsEnabled_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_enabled_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableInterruptsIfPrivileged_00000d0c(uint inputFlags)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    enableIRQInterrupts((inputFlags & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_interrupts_if_privileged_00000d0c",
                "param_1": "inputFlags",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableIRQInterrupts"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculateOffset_00000d44(uint data,int index)\n\n{\n  return index * 4 + (data & 0xf0000000 | (data & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "data",
                "param_2": "index"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_data_00000d76",
            "code": "\nvoid clearData_00000d76(undefined4 inputParam,undefined unusedParam)\n\n{\n  undefined4 *dataOffset;\n  \n  dataOffset = (undefined4 *)calculate_offset_00000d44(inputParam,unusedParam);\n  *dataOffset = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_data_00000d76",
                "param_1": "inputParam",
                "param_2": "unusedParam",
                "puVar1": "dataOffset"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_memory_00000d9c",
            "code": "\nvoid clearMemory_00000d9c(void)\n\n{\n  clearData(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_memory_00000d9c",
                "clear_data_00000d76": "clearData"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_and_clear_memory_00000db0",
            "code": "\nvoid initialize_and_clear_memory_00000db0(void)\n\n{\n  initialize_memory();\n  clear_memory();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_and_clear_memory_00000db0",
                "initialize_memory_00000dcc": "initialize_memory",
                "clear_memory_00000d9c": "clear_memory"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_irq_interrupts_00000dc0",
            "code": "\nvoid initialize_irq_interrupts_00000dc0(void)\n\n{\n  check_irq_interrupts();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_irq_interrupts_00000dc0",
                "check_irq_interrupts_00000cc0": "check_irq_interrupts"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "handle_assertion_errors_00000df4",
            "code": "\nvoid handle_assertion_errors_00000df4(void)\n\n{\n  handle_assertion_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "handle_assertion_errors_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "copy_and_increment_00000e14",
            "code": "\nundefined4 copy_and_increment_00000e14(undefined4 source_buffer,undefined4 destination_buffer)\n\n{\n  undefined4 result;\n  \n  result = copy_and_increment_00000e14_loop_000012e2(0x1fff0204,source_buffer,destination_buffer);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "copy_and_increment_00000e14",
                "param_1": "source_buffer",
                "param_2": "destination_buffer",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_data_to_memory_00000e38",
            "code": "\nundefined4 copyDataToMemory_00000e38(undefined4 source,undefined4 destination)\n\n{\n  copy_data_to_memory_000015d0(0,source,destination);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_data_to_memory_00000e38",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "infinite_loop_00000e58",
            "code": "\nvoid infiniteLoop_00000e58(void)\n\n{\n  disableAndCheckInterrupts();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "infinite_loop_00000e58",
                "disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0": "disableAndCheckInterrupts"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_and_configure_system_00000e64",
            "code": "\n\n\nvoid initialize_and_configure_system_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_system();\n  update_memory(0x2056,0x80);\n  update_memory(0x511a,0x80);\n  update_memory(0x2055,0x80);\n  set_bit(0x2056);\n  set_bit(0x511a);\n  set_bit(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_and_configure_system_00000e64",
                "initialize_and_configure_system_00001274": "initialize_system",
                "update_memory_and_apply_bits_00001eea": "update_memory",
                "set_bit_00001ff6": "set_bit"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 initialValue;\n  \n  process_formatted_data_00004c84(&DAT_00006f58,initialValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "initialValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n"
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicType,undefined4 panicMessage)\n\n{\n  undefined4 localVariable1;\n  code *jumpTable;\n  undefined4 panicMessagePtr;\n  char panicTypeChar;\n  \n  panicMessagePtr = panicMessage;\n  panicTypeChar = panicType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicType == '\\x03') {\n      initialize_data_00000ed8();\n    }\n    process_formatted_data_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",panicMessagePtr);\n    print_process_info_0000211c();\n    process_formatted_data_00004c84(&DAT_00006f78);\n    process_formatted_data_00004c84(\"*** halted.\\n\\n\");\n  }\n  disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  infinite_loop_00000e58();\n  localVariable1 = (int)&localVariable1 + 1;\n  FUNC_00002400();\n  process_formatted_data_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_system_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicType",
                "param_2": "panicMessage",
                "uStack_18": "localVariable1",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "panicMessagePtr",
                "local_9": "panicTypeChar"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_interrupt_handler_00000f8c",
            "code": "\nvoid initializeInterruptHandler_00000f8c(void)\n\n{\n  uint interruptHandlerResult;\n  undefined4 *memoryBlockPointer;\n  uint blockSize;\n  int shiftValue;\n  int *shiftValuePointer;\n  undefined4 constantValue;\n  undefined4 specificValue;\n  undefined4 rOffsetValue;\n  dword rInfoOffset;\n  \n  disableIRQInterruptsAndRetrieveIRQInterruptsStatus();\n  rInfoOffset = elfRelArray[3].r_info;\n  rOffsetValue = 0;\n  specificValue = 0xf81;\n  initializeMemoryBlock(&DAT_1fff0a6c,0x100,0xf,0xc);\n  rInfoOffset = elfRelArray[3].r_offset;\n  rOffsetValue = 0;\n  specificValue = 0xf5d;\n  blockSize = 0xc;\n  initializeMemoryBlock(&DAT_1fff046c,0x600,7);\n  constantValue = 0xfd3;\n  interruptHandlerResult = runInterruptHandler();\n  interruptHandlerResult = interruptHandlerResult >> 0x1e;\n  memoryBlockPointer = (undefined4 *)(blockSize * 0x100);\n  shiftValue = (blockSize >> 0x1d) << 0x11;\n  shiftValuePointer = &shiftValue;\n  if ((interruptHandlerResult & interruptHandlerResult - 1) != 0) {\n    handleKernelPanic(3,\"FAILED ASSERTION.\");\n  }\n  *memoryBlockPointer = 0;\n  memoryBlockPointer[1] = 0;\n  memoryBlockPointer[2] = interruptHandlerResult - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_interrupt_handler_00000f8c",
                "uVar1": "interruptHandlerResult",
                "puVar2": "memoryBlockPointer",
                "uVar3": "blockSize",
                "iStack_24": "shiftValue",
                "piStack_20": "shiftValuePointer",
                "uStack_1c": "constantValue",
                "local_10": "rInfoOffset",
                "local_14": "rOffsetValue",
                "local_18": "specificValue",
                "initialize_memory_block_000010d4": "initializeMemoryBlock",
                "disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0": "disableIRQInterruptsAndRetrieveIRQInterruptsStatus",
                "Elf32_Rel_ARRAY_1fff0200": "elfRelArray",
                "run_interrupt_handler_00000930": "runInterruptHandler",
                "handle_kernel_panic_00000f04": "handleKernelPanic"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_memory_block_00000fec",
            "code": "\nvoid initializeMemoryBlock_00000fec(undefined4 *memBlockPtr,uint blockSize)\n\n{\n  if ((blockSize & blockSize - 1) != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *memBlockPtr = 0;\n  memBlockPtr[1] = 0;\n  memBlockPtr[2] = blockSize - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_memory_block_00000fec",
                "param_1": "memBlockPtr",
                "param_2": "blockSize",
                "param_1[1]": "memBlockPtr[1]",
                "param_1[2]": "memBlockPtr[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_matching_pointer_00001034",
            "code": "\nvoid find_matching_pointer_00001034(int **pointer_array,int target_value)\n\n{\n  int **current_pointer;\n  \n  if (8 < *(byte *)(target_value + 4)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (current_pointer = pointer_array;\n      (*current_pointer != (int *)0x0 && (*(byte *)((int)*current_pointer + -3) <= *(byte *)(target_value + 5)));\n      current_pointer = (int **)*current_pointer) {\n  }\n  *(int **)(target_value + 8) = *current_pointer;\n  *current_pointer = (int *)(int **)(target_value + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_matching_pointer_00001034",
                "param_1": "pointer_array",
                "param_2": "target_value",
                "local_1c": "current_pointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "count_matching_pointers_000010a0",
            "code": "\nint countMatchingPointers_000010a0(int *array)\n\n{\n  int *currentPointer;\n  \n  for (currentPointer = array; (int *)*currentPointer == currentPointer; currentPointer = currentPointer + 1) {\n  }\n  return (int)currentPointer - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "count_matching_pointers_000010a0",
                "param_1": "array",
                "local_c": "currentPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_memory_block_000010d4",
            "code": "\nint initializeMemoryBlock_000010d4(uint address,int length,byte size,uint flags,undefined4 param_5,\n                undefined4 param_6,undefined4 param_7)\n\n{\n  undefined4 interruptStatus;\n  undefined4 memoryInitialization;\n  int result;\n  uint alignedLength;\n  undefined4 *ptr;\n  int padding;\n  uint alignedAddress;\n  uint loopValue;\n  short indexI;\n  short indexJ;\n  \n  if (size < 0x10) {\n    padding = length;\n    alignedAddress = address;\n    if ((address & 3) != 0) {\n      padding = 4 - (address & 3);\n      alignedAddress = padding + address;\n      padding = length - padding;\n    }\n    alignedLength = padding - 0x30U & 0xfffffffc;\n    ptr = (undefined4 *)(alignedLength + alignedAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)alignedAddress = alignedAddress;\n    }\n    else {\n      for (loopValue = alignedAddress; loopValue < alignedLength + alignedAddress; loopValue = loopValue + 4) {\n        *(uint *)loopValue = loopValue;\n      }\n    }\n    interruptStatus = disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0();\n    indexJ = 0;\n    for (indexI = 1; indexI < 0x21; indexI = indexI + 1) {\n      if (*(int *)(&DAT_1fff0358 + indexI * 4) == 0) {\n        indexJ = indexI;\n        break;\n      }\n    }\n    if (indexJ == 0) {\n      enable_interrupts_if_privileged_00000d0c(interruptStatus);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + indexJ * 4) = ptr;\n      *(short *)((int)ptr + 6) = indexJ;\n      memoryInitialization = initialize_memory_000007dc(param_5,param_6,alignedAddress,alignedLength);\n      *ptr = memoryInitialization;\n      ptr[9] = alignedAddress;\n      ptr[0xb] = length;\n      ptr[10] = param_7;\n      *(byte *)((int)ptr + 5) = size;\n      *(undefined *)(ptr + 1) = 0;\n      ptr[2] = 0;\n      ptr[3] = 0;\n      ptr[4] = 0;\n      initialize_memory_block_00000fec(ptr + 5,0);\n      ptr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_pointer_and_flag_00000698(ptr,10);\n        if ((flags & 4) == 0) {\n          enable_interrupts_if_privileged_00000d0c(interruptStatus);\n          check_and_set_peripheral_flag_00000738(size);\n          return (int)indexJ;\n        }\n      }\n      else {\n        update_pointer_and_flag_00000698(ptr,1);\n      }\n      enable_interrupts_if_privileged_00000d0c(interruptStatus);\n      result = (int)indexJ;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_memory_block_000010d4",
                "param_1": "address",
                "param_2": "length",
                "param_3": "size",
                "param_4": "flags",
                "uVar1": "interruptStatus",
                "uVar2": "memoryInitialization",
                "iVar3": "result",
                "uVar4": "alignedLength",
                "puVar5": "ptr",
                "local_30": "padding",
                "local_2c": "alignedAddress",
                "local_10": "loopValue",
                "local_c": "indexI",
                "local_a": "indexJ"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_and_configure_system_00001274",
            "code": "\nvoid initialize_and_configure_system_00001274(void)\n\n{\n  initialize_memory();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_subsystem_1();\n  initialize_subsystem_2();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_and_configure_system_00001274",
                "initialize_memory_0000258c": "initialize_memory",
                "initialize_system_00001c84": "initialize_subsystem_1",
                "initialize_system_00002396": "initialize_subsystem_2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "handle_interrupt_0000129c",
            "code": "\nvoid handle_interrupt_0000129c(undefined4 interrupt_handle)\n\n{\n  call_interrupt_handler(interrupt_handle,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "handle_interrupt_0000129c",
                "param_1": "interrupt_handle",
                "handle_interrupt_00002434": "call_interrupt_handler"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "update_array_element_000012b4",
            "code": "\nundefined4 updateArrayElement_000012b4(int arrayIndex,undefined newValue)\n\n{\n  undefined4 updateResult;\n  \n  updateResult = check_and_update_array_element_00002364(arrayIndex + 4,newValue);\n  process_parameter_000024bc(arrayIndex);\n  return updateResult;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "update_array_element_000012b4",
                "param_1": "arrayIndex",
                "param_2": "newValue",
                "uVar1": "updateResult"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "copy_and_increment_loop_000012e2",
            "code": "\nint copy_and_increment_loop_000012e2(int original_value,undefined4 source_param,undefined4 dest_param)\n\n{\n  int copy_result;\n  \n  while( true ) {\n    copy_result = copy_and_increment_0000231c(original_value + 4,source_param,dest_param);\n    if (copy_result != 0) break;\n    handle_interrupt_0000129c(original_value);\n  }\n  return copy_result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "copy_and_increment_loop_000012e2",
                "param_1": "original_value",
                "param_2": "source_param",
                "param_3": "dest_param",
                "iVar1": "copy_result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_peripheral_flag_00001348",
            "code": "\nvoid checkPeripheralFlag_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    setPeripheralFlag();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_peripheral_flag_00001348",
                "set_peripheral_register_flag_0000093c": "setPeripheralFlag"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_modified_value_00001360",
            "code": "\nint calculateModifiedValue_00001360(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_modified_value_00001360",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "write_modified_value_00001392",
            "code": "\nvoid writeModifiedValue_00001392(undefined4 valuePointer,undefined inputValue)\n\n{\n  undefined4 *modifiedValuePointer;\n  \n  modifiedValuePointer = (undefined4 *)calculate_modified_value_00001360(valuePointer,inputValue);\n  *modifiedValuePointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "write_modified_value_00001392",
                "param_1": "valuePointer",
                "param_2": "inputValue",
                "puVar1": "modifiedValuePointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "handle_assertion_000013b8",
            "code": "\nundefined4 handle_assertion_000013b8(int index,undefined4 value,undefined4 memory_address,undefined4 modified_value)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = memory_address;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = modified_value;\n  update_memory_00001448(index);\n  write_modified_value_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    update_memory_000014c4(index,value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "handle_assertion_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "memory_address",
                "param_4": "modified_value",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "update_memory_00001448",
            "code": "\nvoid update_memory_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    update_memory_00001448_with_bits(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    update_memory_00001448_with_bits(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "update_memory_00001448",
                "param_1": "index",
                "update_memory_with_extracted_bits_00001f80": "update_memory_with_bits"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_memory_000014c4",
            "code": "\nvoid updateMemory_000014c4(int index,uint divisor)\n\n{\n  byte *memoryPtr;\n  uint mask;\n  uint shifted;\n  \n  memoryPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  mask = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  memoryPtr[3] = memoryPtr[3] & 0xf3;\n  memoryPtr[2] = (&DAT_00007001)[index * 0x20];\n  shifted = mask / (divisor << 4);\n  *memoryPtr = (byte)(shifted >> 8) & 0x1f;\n  memoryPtr[1] = (byte)shifted;\n  memoryPtr[10] = (byte)((mask << 2) / divisor + 1 >> 1) & 0x1f;\n  memoryPtr[0x10] = memoryPtr[0x10] | 0x88;\n  if ((memoryPtr[0x10] & 0x70) == 0) {\n    memoryPtr[0x13] = 0;\n  }\n  else {\n    memoryPtr[0x13] = (char)(2 << (memoryPtr[0x10] >> 4 & 7)) - 1;\n  }\n  memoryPtr[0x15] = 1;\n  memoryPtr[0x11] = 0xc0;\n  memoryPtr[3] = memoryPtr[3] | 0x2c;\n  setBitInMemory((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_memory_000014c4",
                "param_1": "index",
                "param_2": "divisor",
                "pbVar1": "memoryPtr",
                "uVar2": "mask",
                "uVar3": "shifted",
                "set_bit_in_memory_00001318": "setBitInMemory"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_to_memory_000015d0",
            "code": "\nvoid copyDataToMemory_000015d0(int index,int sourceAddress,uint length)\n\n{\n  int dataEntry;\n  uint currentIndex;\n  \n  dataEntry = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (currentIndex = 0; currentIndex < length; currentIndex = currentIndex + 1) {\n    do {\n    } while (-1 < *(char *)(dataEntry + 4));\n    *(undefined *)(dataEntry + 7) = *(undefined *)(currentIndex + sourceAddress);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_to_memory_000015d0",
                "param_1": "index",
                "param_2": "sourceAddress",
                "param_3": "length",
                "iVar1": "dataEntry",
                "local_c": "currentIndex"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "perform_peripheral_operation_00001628",
            "code": "\nvoid performPeripheralOperation_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  checkPeripheralFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "perform_peripheral_operation_00001628",
                "param_1": "index",
                "check_peripheral_flag_00001348": "checkPeripheralFlag"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_peripheral_00001688",
            "code": "\nvoid initialize_peripheral_00001688(void)\n\n{\n  perform_operation(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_peripheral_00001688",
                "perform_peripheral_operation_00001628": "perform_operation"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "initialize_offset_to1_000016c8",
            "code": "\nvoid initializeOffsetTo1_000016c8(undefined4 offset,undefined data)\n\n{\n  undefined4 *offsetPtr;\n  \n  offsetPtr = (undefined4 *)calculate_offset_00001696(offset,data);\n  *offsetPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "initialize_offset_to1_000016c8",
                "param_1": "offset",
                "param_2": "data",
                "puVar1": "offsetPtr"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_memory_value_to1_000016ec",
            "code": "\nvoid setMemoryValueTo1_000016ec(undefined4 input1,undefined input2)\n\n{\n  undefined *memoryAddress;\n  \n  memoryAddress = (undefined *)calculate_offset_00001696(input1,input2);\n  *memoryAddress = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_memory_value_to1_000016ec",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 offset,undefined value)\n\n{\n  undefined *memoryAddress;\n  \n  memoryAddress = (undefined *)calculate_offset_00001696(offset,value);\n  *memoryAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_memory_00001734",
            "code": "\nvoid clearMemory_00001734(void)\n\n{\n  clearMemory_00001734Helper(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_memory_00001734",
                "clear_memory_00001710": "clearMemoryHelper"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flag_bits_00001748",
            "code": "\nvoid updateFlagBits_00001748(byte inputByte)\n\n{\n  DAT_40064003 = inputByte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flag_bits_00001748",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "initialize_memory_flags_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid initializeMemoryFlags_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clearMemory(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "initialize_memory_flags_00001778",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_and_set_offset_000017dc",
            "code": "\n\n\nvoid initializeAndSetOffset_000017dc(void)\n\n{\n  initialize_offset_to1_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_and_set_offset_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_memory_value_to1_000016ec(&DAT_40064001,0);\n  clear_memory_00001710(&DAT_40064000,1);\n  clear_memory_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_memory_000018bc",
            "code": "\nvoid initializeMemory_000018bc(void)\n\n{\n  update_flag_bits_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clear_memory_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_memory_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_and_update_flags_0000191c",
            "code": "\nvoid initialize_and_update_flags_0000191c(void)\n\n{\n  initialize_memory_flags();\n  update_flag_bits(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_and_update_flags_0000191c",
                "initialize_memory_flags_00001778": "initialize_memory_flags",
                "update_flag_bits_00001748": "update_flag_bits"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  updateFlagBits(0xa0);\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960",
                "update_flag_bits_00001748": "updateFlagBits",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_and_clear_memory_000019c0",
            "code": "\nvoid initialize_and_clear_memory_000019c0(void)\n\n{\n  initialize_memory_flags_00001778();\n  update_flag_bits_00001748(0x40);\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_and_clear_memory_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_memory_00001a18",
            "code": "\nvoid initializeMemory_00001a18(void)\n\n{\n  set_memory_value_to1_000016ec(&DAT_40064001,1);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_memory_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_memory_00001a3c",
            "code": "\nvoid initializeMemory_00001a3c(void)\n\n{\n  set_memory_value_to1_000016ec(&DAT_40064001,1);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_memory_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_memory_00001a60",
            "code": "\nvoid initializeMemory_00001a60(void)\n\n{\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  set_memory_value_to1_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_memory_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_modules_00001b10",
            "code": "\nundefined4 initialize_modules_00001b10(byte module_count)\n\n{\n  undefined4 result;\n  \n  if (module_count < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)module_count + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_memory_000018bc();\n        break;\n      case 1:\n        initialize_and_update_flags_0000191c();\n        break;\n      case 2:\n        initialize_system_00001960();\n        break;\n      case 3:\n        initialize_and_clear_memory_000019c0();\n        break;\n      case 4:\n        initialize_memory_00001a18();\n        break;\n      case 5:\n        initialize_memory_00001a3c();\n        break;\n      case 6:\n        initialize_memory_00001a60();\n        break;\n      case 7:\n        initialize_data_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (module_count != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_modules_00001b10",
                "param_1": "module_count",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "clear_memory_and_update_flags_00001bb8",
            "code": "\nvoid clearMemoryAndUpdateFlags_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clearMemory(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clearMemory(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  updateFlagBits(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "clear_memory_and_update_flags_00001bb8",
                "clear_memory_00001710": "clearMemory",
                "update_flag_bits_00001748": "updateFlagBits"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initialize_system_00001c84(void)\n\n{\n  undefined4 interrupt_status;\n  \n  interrupt_status = get_interrupt_status();\n  clear_memory_and_update_flags();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initialize_data();\n  initialize_and_set_offset();\n  initialize_modules(7);\n  enable_interrupts_if_privileged(interrupt_status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "interrupt_status",
                "disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0": "get_interrupt_status",
                "clear_memory_and_update_flags_00001bb8": "clear_memory_and_update_flags",
                "initialize_data_0000182c": "initialize_data",
                "initialize_and_set_offset_000017dc": "initialize_and_set_offset",
                "initialize_modules_00001b10": "initialize_modules",
                "enable_interrupts_if_privileged_00000d0c": "enable_interrupts_if_privileged"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_peripheral_flag_00001cf0",
            "code": "\nvoid checkPeripheralFlag_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    setPeripheralFlag();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_peripheral_flag_00001cf0",
                "set_peripheral_register_flag_0000093c": "setPeripheralFlag"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculateOffset_00001d08(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "initialize_memory_00001d3a",
            "code": "\nvoid initializeMemory_00001d3a(undefined4 inputParameter,undefined additionalParameter)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001d08(inputParameter,additionalParameter);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "initialize_memory_00001d3a",
                "param_1": "inputParameter",
                "param_2": "additionalParameter",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_00001d5e",
            "code": "\nuint applyMask_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_bitwise_and_00001d80",
            "code": "\nuint applyBitwiseAnd_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_bitwise_and_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_last_six_bits_00001dc0",
            "code": "\nushort extractLastSixBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_last_six_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "initialize_memory_with_extracted_bits_00001ddc",
            "code": "\nvoid initializeMemoryWithExtractedBits_00001ddc(undefined2 extractedBits)\n\n{\n  char bitValue;\n  \n  bitValue = extract_bits_00001da2(extractedBits);\n  initialize_memory_00001d3a(&DAT_40048038,bitValue + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "initialize_memory_with_extracted_bits_00001ddc",
                "param_1": "extractedBits",
                "cVar1": "bitValue"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extract_bits_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_data_00001e44",
            "code": "\nvoid updateData_00001e44(int offset,uint bits,int value)\n\n{\n  int shiftedOffset;\n  \n  shiftedOffset = (int)bits >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + offset * 4) * 4) & ~(0xf << ((bits & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedOffset + offset * 4) * 4) | value << ((bits & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_data_00001e44",
                "param_1": "offset",
                "param_2": "bits",
                "param_3": "value",
                "iVar1": "shiftedOffset"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_data_from_extracted_bits_00001ec4",
            "code": "\nvoid update_data_from_extracted_bits_00001ec4(undefined4 input_parameter_1,undefined4 input_parameter_2)\n\n{\n  undefined4 extracted_bits;\n  \n  extracted_bits = extract_bits_00001e0c(input_parameter_1,input_parameter_2);\n  update_data_00001e44(input_parameter_1,input_parameter_2,extracted_bits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_data_from_extracted_bits_00001ec4",
                "param_1": "input_parameter_1",
                "param_2": "input_parameter_2",
                "uVar1": "extracted_bits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_memory_and_apply_bits_00001eea",
            "code": "\nundefined4 updateMemoryAndApplyBits_00001eea(undefined2 data,byte bit)\n\n{\n  uint lastSixBits;\n  int result;\n  int extractedBits;\n  \n  update_memory_with_extracted_bits_00001f80(data,0);\n  if ((char)bit < '\\0') {\n    lastSixBits = extract_last_six_bits_00001dc0(data);\n    result = apply_bitwise_and_00001d80(data);\n    *(uint *)(result + 0x14) = *(uint *)(result + 0x14) | 1 << (lastSixBits & 0xff);\n  }\n  else {\n    lastSixBits = extract_last_six_bits_00001dc0(data);\n    result = apply_bitwise_and_00001d80(data);\n    *(uint *)(result + 0x14) = *(uint *)(result + 0x14) & ~(1 << (lastSixBits & 0xff));\n  }\n  result = apply_mask_00001d5e(data);\n  extractedBits = extract_last_six_bits_00001dc0(data);\n  *(uint *)(result + extractedBits * 4) = bit & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_memory_and_apply_bits_00001eea",
                "param_1": "data",
                "param_2": "bit",
                "uVar1": "lastSixBits",
                "iVar2": "result",
                "iVar3": "extractedBits"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_memory_with_extracted_bits_00001f80",
            "code": "\nvoid updateMemoryWithExtractedBits_00001f80(undefined2 memoryAddress,undefined4 data)\n\n{\n  int maskedAddress;\n  int lastSixBits;\n  undefined4 extractedBits;\n  undefined4 bitsToUpdate;\n  uint extractedData;\n  \n  initialize_memory_with_extracted_bits_00001ddc(memoryAddress);\n  maskedAddress = apply_mask_00001d5e(memoryAddress);\n  lastSixBits = extract_last_six_bits_00001dc0(memoryAddress);\n  extractedData = *(uint *)(maskedAddress + lastSixBits * 4);\n  maskedAddress = apply_mask_00001d5e(memoryAddress);\n  lastSixBits = extract_last_six_bits_00001dc0(memoryAddress);\n  *(undefined4 *)(maskedAddress + lastSixBits * 4) = data;\n  if ((extractedData & 0xf0000) != 0) {\n    extractedBits = extract_bits_00001da2(memoryAddress);\n    bitsToUpdate = extract_last_six_bits_00001dc0(memoryAddress);\n    update_data_from_extracted_bits_00001ec4(extractedBits,bitsToUpdate);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_memory_with_extracted_bits_00001f80",
                "param_1": "memoryAddress",
                "param_2": "data",
                "iVar1": "maskedAddress",
                "iVar2": "lastSixBits",
                "uVar3": "extractedBits",
                "uVar4": "bitsToUpdate",
                "uVar5": "extractedData"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_00001ff6",
            "code": "\nvoid setBit_00001ff6(undefined2 input)\n\n{\n  uint lastSixBits;\n  int bitwiseAndResult;\n  \n  lastSixBits = extract_last_six_bits_00001dc0(input);\n  bitwiseAndResult = apply_bitwise_and_00001d80(input);\n  *(int *)(bitwiseAndResult + 4) = 1 << (lastSixBits & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_00001ff6",
                "param_1": "input",
                "uVar1": "lastSixBits",
                "iVar2": "bitwiseAndResult"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_peripheral_data_00002028",
            "code": "\nvoid processPeripheralData_00002028(int peripheralDataAddress,undefined4 paramBits)\n\n{\n  int extractedBits;\n  uint flagData;\n  uint bitIndex;\n  \n  flagData = *(uint *)(peripheralDataAddress + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((flagData & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(peripheralDataAddress + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(peripheralDataAddress + 0xa0) = 1 << (bitIndex & 0xff);\n      extractedBits = extract_bits_00001e0c(paramBits,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + extractedBits * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + extractedBits * 0xc));\n    }\n  }\n  check_peripheral_flag_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_peripheral_data_00002028",
                "param_1": "peripheralDataAddress",
                "param_2": "paramBits",
                "iVar1": "extractedBits",
                "uVar2": "flagData",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_peripheral_data_000020b8",
            "code": "\nvoid initializePeripheralData_000020b8(void)\n\n{\n  processPeripheralData(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_peripheral_data_000020b8",
                "process_peripheral_data_00002028": "processPeripheralData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "process_peripheral_data_000020cc",
            "code": "\nvoid process_peripheral_data_000020cc(void)\n\n{\n  process_peripheral_data_000020cc_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "process_peripheral_data_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_peripheral_data_000020e0",
            "code": "\nvoid initializePeripheralData_000020e0(void)\n\n{\n  processPeripheralData(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_peripheral_data_000020e0",
                "process_peripheral_data_00002028": "processPeripheralData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_peripheral_data_000020f4",
            "code": "\nvoid initializePeripheralData_000020f4(void)\n\n{\n  processPeripheralData(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_peripheral_data_000020f4",
                "process_peripheral_data_00002028": "processPeripheralData"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "process_peripheral_data_00002108",
            "code": "\nvoid processPeripheralData_00002108(void)\n\n{\n  process_peripheral_data_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "process_peripheral_data_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_info_0000211c",
            "code": "\nvoid printProcessInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 processId;\n  int stackUsed;\n  int isQActive;\n  dword baseAddr;\n  uint priority;\n  undefined4 *processStruct;\n  undefined4 initialStackPointer;\n  undefined4 initialValue;\n  int lastValidOffset;\n  short iterator;\n  int totalStackSize;\n  int totalUsedStackSize;\n  \n  processId = 0x515f;\n  totalUsedStackSize = 0;\n  totalStackSize = 0;\n  process_formatted_data_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  lastValidOffset = find_last_valid_offset_000008b8();\n  initialValue = get_initial_value_0000091c();\n  initialStackPointer = get_stack_pointer_00000900();\n  process_formatted_data_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               lastValidOffset,initialValue,initialStackPointer);\n  totalUsedStackSize = totalUsedStackSize + 0x200;\n  if (0 < lastValidOffset) {\n    totalStackSize = lastValidOffset + totalStackSize;\n  }\n  for (iterator = 1; iterator < 0x21; iterator = iterator + 1) {\n    processStruct = *(undefined4 **)(&DAT_1fff0358 + iterator * 4);\n    if (processStruct != (undefined4 *)0x0) {\n      priority = (uint)*(byte *)(processStruct + 1);\n      baseAddr = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[priority];\n      isQActive = (int)&processId + (uint)(8 < priority);\n      stackUsed = processStruct[0xb];\n      totalUsedStackSize = stackUsed + totalUsedStackSize;\n      iVar1 = count_matching_pointers_000010a0(processStruct[9]);\n      stackUsed = stackUsed - iVar1;\n      totalStackSize = stackUsed + totalStackSize;\n      process_formatted_data_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)processStruct + 6),processStruct[10],baseAddr,isQActive,\n                   *(undefined *)((int)processStruct + 5),processStruct[0xb],stackUsed,processStruct[9],*processStruct);\n    }\n  }\n  process_formatted_data_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,totalUsedStackSize,totalStackSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "local_40": "processId",
                "local_3c": "stackUsed",
                "local_38": "isQActive",
                "local_34": "baseAddr",
                "local_30": "priority",
                "local_2c": "processStruct",
                "local_28": "initialStackPointer",
                "local_24": "initialValue",
                "local_20": "lastValidOffset",
                "local_1a": "iterator",
                "local_18": "totalStackSize",
                "local_14": "totalUsedStackSize"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = find_last_valid_offset_000008b8();\n  local_24 = get_initial_value_0000091c();\n  local_28 = get_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = count_matching_pointers_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n"
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool isEqual;\n  \n  value = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value;\n  if (isEqual) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "value",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_if_difference_equals_value_00002294",
            "code": "\nundefined checkIfDifferenceEqualsValue_00002294(int inputValue)\n\n{\n  undefined result;\n  int value;\n  bool isDifferenceEqual;\n  \n  value = *(int *)(inputValue + 4);\n  isDifferenceEqual = *(int *)(inputValue + 0xc) - *(int *)(inputValue + 8) == value;\n  if (isDifferenceEqual) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!isDifferenceEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_if_difference_equals_value_00002294",
                "param_1": "inputValue",
                "iVar2": "value",
                "bVar3": "isDifferenceEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "update_array_element_000022be",
            "code": "\nvoid updateArrayElement_000022be(int *array,undefined value)\n\n{\n  uint index;\n  \n  index = array[3];\n  array[3] = index + 1;\n  *(undefined *)((index & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "update_array_element_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_retrieve_value_000022f0",
            "code": "\nundefined incrementAndRetrieveValue_000022f0(int *array)\n\n{\n  uint value;\n  \n  value = array[2];\n  array[2] = value + 1;\n  return *(undefined *)((value & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_retrieve_value_000022f0",
                "param_1": "array",
                "uVar1": "value"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_increment_0000231c",
            "code": "\nint copyAndIncrement_0000231c(undefined4 value_to_copy,undefined *destination,int count)\n\n{\n  undefined copied_value;\n  int is_equal;\n  undefined *dest_ptr;\n  int remaining_count;\n  \n  dest_ptr = destination;\n  remaining_count = count;\n  while ((remaining_count != 0 && (is_equal = check_equality_00002270(value_to_copy), is_equal == 0))) {\n    copied_value = increment_and_retrieve_value_000022f0(value_to_copy);\n    *dest_ptr = copied_value;\n    remaining_count = remaining_count + -1;\n    dest_ptr = dest_ptr + 1;\n  }\n  return count - remaining_count;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_increment_0000231c",
                "param_1": "value_to_copy",
                "param_2": "destination",
                "param_3": "count",
                "uVar1": "copied_value",
                "iVar2": "is_equal",
                "local_20": "dest_ptr",
                "local_14": "remaining_count"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_and_update_array_element_00002364",
            "code": "\nundefined4 checkAndUpdateArrayElement_00002364(undefined4 arrayIndex,undefined newValue)\n\n{\n  int differenceValue;\n  undefined4 returnValue;\n  \n  differenceValue = check_if_difference_equals_value_00002294(arrayIndex);\n  if (differenceValue == 0) {\n    update_array_element_000022be(arrayIndex,newValue);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_and_update_array_element_00002364",
                "param_1": "arrayIndex",
                "param_2": "newValue",
                "iVar1": "differenceValue",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_system_00002396",
            "code": "\nvoid initializeSystem_00002396(void)\n\n{\n  initializeSystem_00002396Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_system_00002396",
                "initialize_system_000025f4": "initializeSystemHelper"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 result;\n  undefined buffer [128];\n  \n  handle_interrupt_000023d0(0);\n  process_data_00004db8(\"Welcome to RIOT!\");\n  result = process_input_loop_00002e6c(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "call_software_interrupt_000023c8",
            "code": "\nvoid callSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "call_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "handle_interrupt_000023d0",
            "code": "\nundefined4 handleInterrupt_000023d0(undefined4 interruptType)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = call_software_interrupt_000023c8(1,interruptType,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "handle_interrupt_000023d0",
                "param_1": "interruptType",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "update_pointer_0000240c",
            "code": "\nundefined4 * updatePointer_0000240c(undefined4 *inputPointer)\n\n{\n  undefined4 *nextPointer;\n  \n  nextPointer = (undefined4 *)*inputPointer;\n  if (nextPointer != (undefined4 *)0x0) {\n    *inputPointer = *nextPointer;\n  }\n  return nextPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "update_pointer_0000240c",
                "param_1": "inputPointer",
                "puVar1": "nextPointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "handle_interrupt_00002434",
            "code": "\nundefined4 handleInterrupt_00002434(int *interruptStatus,int privileged)\n\n{\n  int tempVar;\n  undefined4 status;\n  \n  status = getInterruptStatus();\n  tempVar = DAT_1fff03dc;\n  if (*interruptStatus == 0) {\n    *interruptStatus = -1;\n    enableInterrupts(status);\n    status = 1;\n  }\n  else if (privileged == 0) {\n    enableInterrupts(status);\n    status = 0;\n  }\n  else {\n    updatePointerAndFlag(DAT_1fff03dc,2);\n    if (*interruptStatus == -1) {\n      *interruptStatus = tempVar + 8;\n      *(undefined4 *)*interruptStatus = 0;\n    }\n    else {\n      findMatchingPointer(interruptStatus,tempVar);\n    }\n    enableInterrupts(status);\n    setPeripheralRegisterFlag();\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00002434": "handle_interrupt_00002434",
                "param_1": "interruptStatus",
                "param_2": "privileged",
                "iVar1": "tempVar",
                "uVar2": "status",
                "disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0": "getInterruptStatus",
                "enable_interrupts_if_privileged_00000d0c": "enableInterrupts",
                "update_pointer_and_flag_00000698": "updatePointerAndFlag",
                "find_matching_pointer_00001034": "findMatchingPointer",
                "set_peripheral_register_flag_0000093c": "setPeripheralRegisterFlag"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_parameter_000024bc",
            "code": "\nvoid processParameter_000024bc(int *parameter)\n\n{\n  undefined status;\n  undefined4 interruptStatus;\n  int pointer;\n  \n  interruptStatus = disable_ir_qinterrupts_get_ir_qinterrupts_status_00000cd0();\n  if (*parameter == 0) {\n    enable_interrupts_if_privileged_00000d0c(interruptStatus);\n  }\n  else if (*parameter == -1) {\n    *parameter = 0;\n    enable_interrupts_if_privileged_00000d0c(interruptStatus);\n  }\n  else {\n    pointer = update_pointer_0000240c(parameter);\n    update_pointer_and_flag_00000698(pointer + -8,10);\n    if (*parameter == 0) {\n      *parameter = -1;\n    }\n    status = *(undefined *)(pointer + -3);\n    enable_interrupts_if_privileged_00000d0c(interruptStatus);\n    check_and_set_peripheral_flag_00000738(status);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_parameter_000024bc",
                "param_1": "parameter",
                "uVar1": "status",
                "uVar2": "interruptStatus",
                "iVar3": "pointer"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_memory_00002538",
            "code": "\nvoid updateMemory_00002538(byte address,uint data)\n\n{\n  if ((char)address < '\\0') {\n    (&DAT_e000ed14)[address & 0xf] = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_memory_00002538",
                "param_1": "address",
                "param_2": "data"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_memory_0000258c",
            "code": "\n\n\nvoid initializeMemory_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  update_memory_00002538(0xfffffffe,1);\n  update_memory_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    update_memory_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_memory_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  initialize_system_000025f4_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "update_date_time_parameter_00002600",
            "code": "\nundefined4 updateDateTimeParameter_00002600(undefined4 inputValue)\n\n{\n  undefined4 calculatedDateTime;\n  \n  calculatedDateTime = calculateDateTime(inputValue);\n  setAndUpdateParameter(calculatedDateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "update_date_time_parameter_00002600",
                "param_1": "inputValue",
                "uVar1": "calculatedDateTime",
                "calculate_date_time_000047e4": "calculateDateTime",
                "set_param_and_update_flag_0000285c": "setAndUpdateParameter"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "process_data_00002624",
            "code": "\nundefined4 processData_00002624(undefined4 inputData)\n\n{\n  undefined4 memoryAddress;\n  undefined4 stackVariable;\n  \n  memoryAddress = get_memory_address_0000281c();\n  stackVariable = 0;\n  calculate_date_components_0000443c(&memoryAddress,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "process_data_00002624",
                "param_1": "inputData",
                "local_10": "memoryAddress",
                "uStack_c": "stackVariable"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_date_time_00002654",
            "code": "\nundefined4 initializeDateTime_00002654(undefined4 inputParameter,undefined4 outputParameter,undefined4 additionalParameter)\n\n{\n  undefined4 dateTimeResult;\n  \n  dateTimeResult = calculate_date_time_000047e4(inputParameter);\n  DAT_1fff0d9c = outputParameter;\n  initialize_data_00002894(dateTimeResult,0x26f1,additionalParameter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_date_time_00002654",
                "param_1": "inputParameter",
                "param_2": "outputParameter",
                "param_3": "additionalParameter",
                "uVar1": "dateTimeResult"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_data_00002690",
            "code": "\nundefined4 initializeData_00002690(undefined4 inputData)\n\n{\n  undefined4 dataValue;\n  undefined4 stackVariable;\n  \n  dataValue = increment_data_value_000028f0();\n  stackVariable = 0;\n  calculate_date_components_0000443c(&dataValue,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_data_00002690",
                "param_1": "inputData",
                "local_10": "dataValue",
                "uStack_c": "stackVariable"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_settings_000026c0",
            "code": "\nvoid initialize_settings_000026c0(void)\n\n{\n  clear_settings();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_settings_000026c0",
                "clear_settings_00002910": "clear_settings"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_flags_000026d8",
            "code": "\nvoid initialize_flags_000026d8(void)\n\n{\n  set_initial_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_flags_000026d8",
                "set_flag_0000294c": "set_initial_flag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "clear_register_bit_000026e4",
            "code": "\nvoid clear_register_bit_000026e4(void)\n\n{\n  clear_register_bit_000026e4_helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "clear_register_bit_000026e4",
                "clear_bit_in_register_00002970": "clear_register_bit_helper"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_function_000026f0",
            "code": "\nvoid executeFunction_000026f0(undefined4 arg)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(arg);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_function_000026f0",
                "param_1": "arg"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_array_00002714",
            "code": "\nvoid setBitInArray_00002714(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_array_00002714",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "set_byte_value_00002744",
            "code": "\nvoid setByteValue_00002744(byte inputByte,uint value)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "set_byte_value_00002744",
                "param_1": "inputByte",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_set_peripheral_flag_00002798",
            "code": "\nvoid checkAndSetPeripheralFlag_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    setPeripheralRegisterFlag();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_set_peripheral_flag_00002798",
                "set_peripheral_register_flag_0000093c": "setPeripheralRegisterFlag"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  enableSystemFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "set_flag_0000294c": "enableSystemFlag"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_memory_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getMemoryAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_memory_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "set_param_and_update_flag_0000285c",
            "code": "\n\n\nvoid setParamAndUpdateFlag_0000285c(undefined4 param)\n\n{\n  _DAT_4003d000 = param;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "set_param_and_update_flag_0000285c",
                "param_1": "param"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int value,undefined4 data1,undefined4 data2)\n\n{\n  _DAT_4003d008 = value + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = data1;\n  DAT_1fff0da4 = data2;\n  set_byte_value_00002744(0x2e,10);\n  set_bit_in_array_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "value",
                "param_2": "data1",
                "param_3": "data2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_data_value_000028f0",
            "code": "\n\n\nint incrementDataValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_data_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_settings_00002910",
            "code": "\n\n\nvoid clearSettings_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_settings_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_bit_in_register_00002970",
            "code": "\n\n\nvoid clearBitInRegister_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_bit_in_register_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "process_peripheral_data_00002994",
            "code": "\n\n\nvoid processPeripheralData_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  checkAndSetPeripheralFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "process_peripheral_data_00002994",
                "check_and_set_peripheral_flag_00002798": "checkAndSetPeripheralFlag"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "process_and_return_00002a00",
            "code": "\nvoid processAndReturn_00002a00(undefined4 inputData)\n\n{\n  processData(inputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "process_and_return_00002a00",
                "param_1": "inputData",
                "process_data_00004cb4": "processData"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_integer_in_array_00002a18",
            "code": "\nint findIntegerInArray_00002a18(int *array,undefined4 targetValue)\n\n{\n  int comparisonResult;\n  int *currentArray;\n  undefined **rebootMessage;\n  uint arrayIndex;\n  int *currentElement;\n  \n  currentArray = array;\n  rebootMessage = &PTR_s_reboot_00007300;\n  arrayIndex = 0;\n  do {\n    if (1 < arrayIndex) {\n      return 0;\n    }\n    currentElement = (&currentArray)[arrayIndex];\n    if (currentElement != (int *)0x0) {\n      for (; *currentElement != 0; currentElement = currentElement + 3) {\n        comparisonResult = compare_and_subtract_00004e52(*currentElement,targetValue);\n        if (comparisonResult == 0) {\n          return currentElement[2];\n        }\n      }\n    }\n    arrayIndex = arrayIndex + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_integer_in_array_00002a18",
                "param_1": "array",
                "param_2": "targetValue",
                "iVar1": "comparisonResult",
                "local_18": "currentArray",
                "local_14": "rebootMessage",
                "local_10": "arrayIndex",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandArray)\n\n{\n  int *currentCommand;\n  undefined **commandNames;\n  uint index;\n  int *currentItem;\n  \n  process_formatted_data_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_data_00004db8(\"---------------------------------------\");\n  currentCommand = commandArray;\n  commandNames = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentItem = (&currentCommand)[index];\n    if (currentItem != (int *)0x0) {\n      for (; *currentItem != 0; currentItem = currentItem + 3) {\n        process_formatted_data_00004c84(\"%-20s %s\\n\",*currentItem,currentItem[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandArray",
                "local_18": "currentCommand",
                "local_14": "commandNames",
                "local_10": "index",
                "local_c": "currentItem"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_shell_command_00002b10",
            "code": "\nvoid processShellCommand_00002b10(undefined4 param1,byte *inputString)\n\n{\n  int comparisonResult;\n  byte *nextCharPtr;\n  byte *commandList [3];\n  code *commandFunction;\n  char **commandArguments;\n  uint numCommands;\n  byte quoteChar;\n  char *currentChar;\n  char *currentArgument;\n  char **argumentList;\n  uint currentCommandIndex;\n  int numEscapeChars;\n  uint numNonSpaceChars;\n  byte *currentCharPtr;\n  \n  numNonSpaceChars = 0;\n  numEscapeChars = 0;\n  currentCharPtr = inputString;\n  while( true ) {\n    commandList[0] = inputString;\n    commandList[1] = (byte *)param1;\n    if (0x20 < *currentCharPtr) {\n      if ((*currentCharPtr == 0x22) || (*currentCharPtr == 0x27)) {\n        quoteChar = *currentCharPtr;\n        do {\n          nextCharPtr = currentCharPtr + 1;\n          if (*nextCharPtr == 0) {\n            currentCharPtr = nextCharPtr;\n            process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextCharPtr == 0x5c) {\n            numEscapeChars = numEscapeChars + 1;\n            currentCharPtr = currentCharPtr + 2;\n            nextCharPtr = currentCharPtr;\n            if (*currentCharPtr == 0) {\n              process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPtr = nextCharPtr;\n        } while (quoteChar != *currentCharPtr);\n        if (0x20 < currentCharPtr[1]) {\n          process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentCharPtr == 0x5c) {\n            numEscapeChars = numEscapeChars + 1;\n            currentCharPtr = currentCharPtr + 1;\n            if (*currentCharPtr == 0) {\n              process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPtr = currentCharPtr + 1;\n          if (*currentCharPtr == 0x22) {\n            process_data_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentCharPtr);\n      }\n      numNonSpaceChars = numNonSpaceChars + 1;\n    }\n    if (*currentCharPtr == 0) break;\n    *currentCharPtr = 0;\n    currentCharPtr = currentCharPtr + 1;\n  }\n  if (numNonSpaceChars != 0) {\n    numCommands = numNonSpaceChars;\n    commandArguments = (char **)((int)commandList - ((numNonSpaceChars + 1) * 4 + 7 & 0xfffffff8));\n    commandArguments[numNonSpaceChars] = (char *)0x0;\n    currentCharPtr = inputString;\n    for (currentCommandIndex = 0; argumentList = commandArguments, currentCommandIndex < numNonSpaceChars; currentCommandIndex = currentCommandIndex + 1) {\n      for (; *currentCharPtr == 0; currentCharPtr = currentCharPtr + 1) {\n      }\n      if ((*currentCharPtr == 0x22) || (*currentCharPtr == 0x27)) {\n        currentCharPtr = currentCharPtr + 1;\n      }\n      commandArguments[currentCommandIndex] = (char *)currentCharPtr;\n      for (; *currentCharPtr != 0; currentCharPtr = currentCharPtr + 1) {\n      }\n    }\n    for (; (numEscapeChars != 0 && (*argumentList != (char *)0x0)); argumentList = argumentList + 1) {\n      for (currentArgument = *argumentList; *currentArgument != '\\0'; currentArgument = currentArgument + 1) {\n        if (*currentArgument == '\\') {\n          for (currentChar = currentArgument; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          numEscapeChars = numEscapeChars + -1;\n          if (numEscapeChars == 0) break;\n        }\n      }\n    }\n    commandFunction = (code *)find_integer_in_array_00002a18(param1,*commandArguments);\n    if (commandFunction == (code *)0x0) {\n      comparisonResult = compare_and_subtract_00004e52(&DAT_00007214,*commandArguments);\n      if (comparisonResult == 0) {\n        print_command_descriptions_00002a88(commandList[1]);\n      }\n      else {\n        process_formatted_data_00004c84(\"shell: command not found: %s\\n\",*commandArguments);\n      }\n    }\n    else {\n      (*commandFunction)(numNonSpaceChars,commandArguments);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_shell_command_00002b10",
                "param_1": "param1",
                "param_2": "inputString",
                "local_48": "commandList",
                "local_3c": "commandFunction",
                "local_38": "commandArguments",
                "local_34": "numCommands",
                "local_2d": "quoteChar",
                "local_2c": "currentChar",
                "local_28": "currentArgument",
                "local_24": "argumentList",
                "local_20": "currentCommandIndex",
                "local_1c": "numEscapeChars",
                "local_18": "numNonSpaceChars",
                "local_14": "currentCharPtr",
                "pbVar2": "nextCharPtr",
                "iVar1": "comparisonResult"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint processInput_00002d94(undefined *inputBuffer,int size)\n\n{\n  int data;\n  byte byteValue;\n  bool isFirstChar;\n  undefined *currentChar;\n  \n  currentChar = inputBuffer;\n  while( true ) {\n    if (size + -1 <= (int)currentChar - (int)inputBuffer) {\n      return 0xffffffff;\n    }\n    data = process_and_return_data_00004418();\n    if (data < 0) break;\n    if ((data == 0xd) || (data == 10)) {\n      *currentChar = 0;\n      process_and_return_00002a00(0xd);\n      process_and_return_00002a00(10);\n      isFirstChar = currentChar == inputBuffer;\n      if (isFirstChar) {\n        inputBuffer = (undefined *)0x1;\n      }\n      byteValue = (byte)inputBuffer;\n      if (!isFirstChar) {\n        byteValue = 0;\n      }\n      return (uint)byteValue;\n    }\n    if ((data == 8) || (data == 0x7f)) {\n      if (currentChar != inputBuffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        process_and_return_00002a00(8);\n        process_and_return_00002a00(0x20);\n        process_and_return_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)data;\n      process_and_return_00002a00(data);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "inputBuffer",
                "param_2": "size",
                "iVar1": "data",
                "bVar2": "byteValue",
                "bVar3": "isFirstChar",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "process_data_00002e48",
            "code": "\nvoid process_data_00002e48(void)\n\n{\n  process_and_return_00002a00(0x3e);\n  process_and_return_00002a00(0x20);\n  process_data_00002e48_000041d0(*(undefined4 *)(relocation_table[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "process_data_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_table",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_input_loop_00002e6c",
            "code": "\nvoid process_input_loop_00002e6c(undefined4 command_param,undefined4 input_param,undefined4 data_param)\n\n{\n  int input_result;\n  \n  process_data_00002e48();\n  do {\n    input_result = process_input_00002d94(input_param,data_param);\n    if (input_result == 0) {\n      process_shell_command_00002b10(command_param,input_param);\n    }\n    process_data_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_input_loop_00002e6c",
                "param_1": "command_param",
                "param_2": "input_param",
                "param_3": "data_param",
                "iVar1": "input_result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_infinite_loop_00002e9c",
            "code": "\nundefined4 execute_infinite_loop_00002e9c(void)\n\n{\n  execute_infinite_loop_00002e9c_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_infinite_loop_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "print_process_info_00002eb4",
            "code": "\nundefined4 printProcessInfo_00002eb4(void)\n\n{\n  printProcessInfo_00002eb4Internal();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "print_process_info_00002eb4",
                "print_process_info_0000211c": "printProcessInfoInternal"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceData)\n\n{\n  undefined4 className;\n  undefined4 deviceType;\n  undefined buffer [8];\n  uint readResult;\n  \n  readResult = execute_function_00003d64(deviceData,buffer);\n  if ((int)readResult < 1) {\n    process_formatted_data_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceType = *(undefined4 *)(deviceData + 8);\n    className = get_class_name_000039e8(*(undefined *)(*(int *)(deviceData + 0xc) + 8));\n    process_formatted_data_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceType,className);\n    display_formatted_data_00003694(buffer,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceData",
                "uVar1": "className",
                "uVar2": "deviceType",
                "auStack_1c": "buffer",
                "local_14": "readResult"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_device_data_00002f30",
            "code": "\nvoid process_device_data_00002f30(void)\n\n{\n  int index;\n  undefined4 *device_list_ptr;\n  \n  index = 0;\n  for (device_list_ptr = DAT_1fff0db0; device_list_ptr != (undefined4 *)0x0; device_list_ptr = (undefined4 *)*device_list_ptr) {\n    read_from_device_00002ecc(index,device_list_ptr);\n    process_data_00004db8(&DAT_00007380);\n    index = index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_device_data_00002f30",
                "local_10": "index",
                "local_c": "device_list_ptr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "display_device_list_00002f74",
            "code": "\nvoid displayDeviceList_00002f74(void)\n\n{\n  undefined4 uVar1;\n  int deviceCount;\n  undefined4 *currentDevice;\n  \n  currentDevice = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    printMessage(\"No devices found\");\n  }\n  else {\n    printMessage(\"ID\\tClass\\t\\tName\");\n  }\n  for (; currentDevice != (undefined4 *)0x0; currentDevice = (undefined4 *)*currentDevice) {\n    uVar1 = getDeviceClassName(*(undefined *)(currentDevice[3] + 8));\n    printFormattedData(\"#%i\\t%s\\t%s\\n\",deviceCount,uVar1,currentDevice[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "display_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "currentDevice",
                "process_data_00004db8": "printMessage",
                "get_class_name_000039e8": "getDeviceClassName",
                "process_formatted_data_00004c84": "printFormattedData"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_device_info_00002fe0",
            "code": "\nvoid process_device_info_00002fe0(int device_count,undefined4 *arguments)\n\n{\n  int comparison_result;\n  undefined4 device_id;\n  \n  if (device_count < 3) {\n    print_usage(\"usage: %s %s <device id>|all\\n\",*arguments,arguments[1]);\n  }\n  else {\n    comparison_result = compare_device_id(arguments[2],&DAT_000073d4);\n    if (comparison_result == 0) {\n      process_matching_device_data();\n    }\n    else {\n      device_id = decode_and_limit(arguments[2]);\n      comparison_result = find_device_in_list(device_id);\n      if (comparison_result == 0) {\n        process_error(\"error: undefined device id given\");\n      }\n      else {\n        read_device_data(device_id,comparison_result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_device_info_00002fe0",
                "param_1": "device_count",
                "param_2": "arguments",
                "iVar1": "comparison_result",
                "uVar2": "device_id",
                "process_formatted_data_00004c84": "print_usage",
                "compare_and_subtract_00004e52": "compare_device_id",
                "process_device_data_00002f30": "process_matching_device_data",
                "decode_and_limit_integer_00004042": "decode_and_limit",
                "find_integer_in_list_00003d24": "find_device_in_list",
                "process_data_00004db8": "process_error",
                "read_from_device_00002ecc": "read_device_data"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 decodedValue;\n  undefined2 values [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceID;\n  int loopIndex;\n  \n  if (argc < 4) {\n    process_formatted_data_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceID = decode_and_limit_integer_00004042(argv[2]);\n    deviceIndex = find_integer_in_list_00003d24(deviceID);\n    if (deviceIndex == 0) {\n      process_data_00004db8(\"error: undefined device given\");\n    }\n    else {\n      fill_memory_00004622(values,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (loopIndex = 0; loopIndex < (int)numValues; loopIndex = loopIndex + 1) {\n        decodedValue = decode_and_limit_integer_00004042(argv[loopIndex + 3]);\n        values[loopIndex] = decodedValue;\n      }\n      process_formatted_data_00004c84(\"Writing to device #%i - %s\\n\",deviceID,*(undefined4 *)(deviceIndex + 8));\n      display_formatted_data_00003694(values,numValues & 0xff);\n      numValues = execute_function_00003d94(deviceIndex,values);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          process_formatted_data_00004c84(\"error: device #%i is not writable\\n\",deviceID);\n        }\n        else {\n          process_formatted_data_00004c84(\"error: failure to write to device #%i\\n\",deviceID);\n        }\n      }\n      else {\n        process_formatted_data_00004c84(\"data successfully written to device #%i\\n\",deviceID);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "decodedValue",
                "auStack_20": "values",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceID",
                "local_c": "loopIndex"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "handle_device_info_0000316c",
            "code": "\nundefined4 handle_device_info_0000316c(int device_type,undefined4 *arguments)\n\n{\n  int comparison_result;\n  \n  if (device_type < 2) {\n    display_device_list_00002f74();\n  }\n  else {\n    comparison_result = compare_and_subtract_00004e52(arguments[1],&DAT_000074ec);\n    if (comparison_result == 0) {\n      process_device_info_00002fe0(device_type,arguments);\n    }\n    else {\n      comparison_result = compare_and_subtract_00004e52(arguments[1],\"write\");\n      if (comparison_result == 0) {\n        write_to_device_0000305c(device_type,arguments);\n      }\n      else {\n        process_formatted_data_00004c84(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "handle_device_info_0000316c",
                "param_1": "device_type",
                "param_2": "arguments",
                "iVar1": "comparison_result"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  process_data_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n"
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculate_weekday_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)Elf32_Rel_ARRAY_1fff0200 + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "decode_and_calculate_0000328c",
            "code": "\nundefined4 decode_and_calculate_0000328c(undefined4 *input_array,int *output_array)\n\n{\n  int weekday;\n  int index;\n  short decoded_value;\n  \n  decoded_value = decode_integer_00004f84(*input_array,&index,10);\n  output_array[5] = decoded_value + -0x76c;\n  decoded_value = decode_integer_00004f84(index + 1,&index,10);\n  output_array[4] = decoded_value + -1;\n  decoded_value = decode_integer_00004f84(index + 1,&index,10);\n  output_array[3] = (int)decoded_value;\n  decoded_value = decode_integer_00004f84(input_array[1],&index,10);\n  output_array[2] = (int)decoded_value;\n  decoded_value = decode_integer_00004f84(index + 1,&index,10);\n  output_array[1] = (int)decoded_value;\n  decoded_value = decode_integer_00004f84(index + 1,&index,10);\n  *output_array = (int)decoded_value;\n  weekday = calculate_weekday_000031fc(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = weekday;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "decode_and_calculate_0000328c",
                "param_1": "input_array",
                "param_2": "output_array",
                "iVar1": "weekday",
                "local_10": "index",
                "local_a": "decoded_value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "FUNC_00003378",
            "code": "\nundefined4 FUNC_00003378(undefined4 *param_1)\n\n{\n  process_formatted_data_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "FUNC_00003378"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n"
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_status_000033c0",
            "code": "\nbool checkAlarmStatus_000033c0(void)\n\n{\n  int returnValue;\n  undefined dataBuffer [36];\n  \n  returnValue = initialize_data_00002690(dataBuffer);\n  if (returnValue != 0) {\n    process_data_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUNC_00003378(dataBuffer);\n  }\n  return returnValue != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_status_000033c0",
                "auStack_2c": "dataBuffer",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "validate_and_set_alarm_000033f4",
            "code": "\nundefined4 validateAndSetAlarm_000033f4(undefined4 inputData)\n\n{\n  int decodeResult;\n  undefined4 returnValue;\n  undefined decodedData [36];\n  \n  decodeResult = decode_and_calculate_0000328c(inputData,decodedData);\n  if (decodeResult == 0) {\n    decodeResult = initialize_date_time_00002654(decodedData,0x31e1,0);\n    if (decodeResult == -1) {\n      process_data_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "validate_and_set_alarm_000033f4",
                "param_1": "inputData",
                "iVar1": "decodeResult",
                "uVar2": "returnValue",
                "auStack_2c": "decodedData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = decode_and_calculate_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_date_time_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "check_time_validity_00003444",
            "code": "\nbool checkTimeValidity_00003444(void)\n\n{\n  int result;\n  undefined dataBuffer [36];\n  \n  result = process_data_00002624(dataBuffer);\n  if (result != 0) {\n    process_data_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUNC_00003378(dataBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "check_time_validity_00003444",
                "iVar1": "result",
                "auStack_2c": "dataBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "decode_and_calculate_and_update_date_time_00003478",
            "code": "\nundefined4 decodeAndCalculateAndUpdateDateTime_00003478(undefined4 inputValue)\n\n{\n  int decodeResult;\n  undefined4 returnValue;\n  undefined decodedData [36];\n  \n  decodeResult = decode_and_calculate_0000328c(inputValue,decodedData);\n  if (decodeResult == 0) {\n    decodeResult = update_date_time_parameter_00002600(decodedData);\n    if (decodeResult == -1) {\n      process_data_00004db8(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "decode_and_calculate_and_update_date_time_00003478",
                "param_1": "inputValue",
                "iVar1": "decodeResult",
                "uVar2": "returnValue",
                "auStack_2c": "decodedData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = decode_and_calculate_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = update_date_time_parameter_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "display_usage_000034c0",
            "code": "\nundefined4 displayUsage_000034c0(void)\n\n{\n  process_data_00004db8(\"usage: rtc <command> [arguments]\");\n  process_data_00004db8(\"commands:\");\n  process_data_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_data_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_data_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_data_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_data_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_data_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_data_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "display_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n"
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handle_command_00003524(int num_args,int args_ptr)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (num_args < 2) {\n    display_usage_000034c0();\n    status = 1;\n  }\n  else {\n    result = calculate_difference_00004e66(*(undefined4 *)(args_ptr + 4),\"poweron\",7);\n    if (result == 0) {\n      initialize_flags_000026d8();\n    }\n    else {\n      result = calculate_difference_00004e66(*(undefined4 *)(args_ptr + 4),\"poweroff\",8);\n      if (result == 0) {\n        clear_register_bit_000026e4();\n      }\n      else {\n        result = calculate_difference_00004e66(*(undefined4 *)(args_ptr + 4),\"clearalarm\",8);\n        if (result == 0) {\n          initialize_settings_000026c0();\n        }\n        else {\n          result = calculate_difference_00004e66(*(undefined4 *)(args_ptr + 4),\"getalarm\",8);\n          if (result == 0) {\n            check_alarm_status_000033c0();\n          }\n          else {\n            result = calculate_difference_00004e66(*(undefined4 *)(args_ptr + 4),\"setalarm\",8);\n            if ((result == 0) && (num_args == 4)) {\n              validate_and_set_alarm_000033f4(args_ptr + 8);\n            }\n            else {\n              result = calculate_difference_00004e66(*(undefined4 *)(args_ptr + 4),\"gettime\",7);\n              if (result == 0) {\n                check_time_validity_00003444();\n              }\n              else {\n                result = calculate_difference_00004e66(*(undefined4 *)(args_ptr + 4),\"settime\",7);\n                if ((result != 0) || (num_args != 4)) {\n                  process_formatted_data_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(args_ptr + 4));\n                  display_usage_000034c0();\n                  return 1;\n                }\n                decode_and_calculate_and_update_date_time_00003478(args_ptr + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "num_args",
                "param_2": "args_ptr",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "execute_infinite_loop_00003688",
            "code": "\nvoid execute_infinite_loop_00003688(void)\n\n{\n  infinite_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "execute_infinite_loop_00003688",
                "infinite_loop_00003658": "infinite_loop"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_formatted_data_00003694",
            "code": "\nvoid displayFormattedData_00003694(int dataPtr,byte dataLength)\n\n{\n  undefined4 mappedData;\n  char mappedBit;\n  uint bitMask;\n  bool isBitSet;\n  undefined formatBuffer [8];\n  int formatBufferSize;\n  char character;\n  byte currentIndex;\n  \n  if ((dataPtr == 0) || (3 < dataLength)) {\n    process_data_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_formatted_data_00004c84(\"Data:\");\n    for (currentIndex = 0; currentIndex < dataLength; currentIndex = currentIndex + 1) {\n      if (*(byte *)(dataPtr + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataPtr + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        mappedBit = (char)bitMask;\n        if (!isBitSet) {\n          mappedBit = '\\0';\n        }\n        if (mappedBit == '\\0') goto LAB_000036ee;\n        character = '\\0';\n      }\n      else {\nLAB_000036ee:\n        character = get_character_00003918((int)*(char *)(dataPtr + 7));\n      }\n      process_formatted_data_00004c84(&DAT_000077bc);\n      if (dataLength < 2) {\n        process_formatted_data_00004c84(\"     \");\n      }\n      else {\n        process_formatted_data_00004c84(\"[%u] \",currentIndex);\n      }\n      if (character == '\\0') {\n        if (*(char *)(dataPtr + 7) == '\\0') {\n          process_formatted_data_00004c84(&DAT_000077d8,(int)*(short *)(dataPtr + (uint)currentIndex * 2));\n        }\n        else if ((*(char *)(dataPtr + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataPtr + 7),4)) &&\n                (*(char *)(dataPtr + 7) < '\\0')) {\n          formatBufferSize = format_and_return_number_00003e9e(formatBuffer,(int)*(short *)(dataPtr + (uint)currentIndex * 2),\n                                  (int)*(char *)(dataPtr + 7));\n          formatBuffer[formatBufferSize] = 0;\n          process_formatted_data_00004c84(&DAT_000077dc,formatBuffer);\n        }\n        else {\n          process_formatted_data_00004c84(\"%iE%i\",(int)*(short *)(dataPtr + (uint)currentIndex * 2),\n                       (int)*(char *)(dataPtr + 7));\n        }\n      }\n      else {\n        process_formatted_data_00004c84(\"%6d %c\",(int)*(short *)(dataPtr + (uint)currentIndex * 2),character);\n      }\n      mappedData = map_param_to_data_00003810(*(undefined *)(dataPtr + 6));\n      process_formatted_data_00004c84(&DAT_000077e8,mappedData);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_formatted_data_00003694",
                "param_1": "dataPtr",
                "param_2": "dataLength",
                "uVar1": "mappedData",
                "cVar2": "mappedBit",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "formatBuffer",
                "local_10": "formatBufferSize",
                "local_a": "character",
                "local_9": "currentIndex"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "map_param_to_data_00003810",
            "code": "\nundefined * map_param_to_data_00003810(undefined input_value)\n\n{\n  undefined *output_data;\n  \n  switch(input_value) {\n  case 2:\n    output_data = &DAT_000077ec;\n    break;\n  case 3:\n    output_data = &DAT_000077f0;\n    break;\n  case 4:\n    output_data = &DAT_000077f4;\n    break;\n  case 5:\n    output_data = &DAT_000077f8;\n    break;\n  case 6:\n    output_data = &DAT_000077fc;\n    break;\n  case 7:\n    output_data = (undefined *)0x7800;\n    break;\n  case 8:\n    output_data = &DAT_00007804;\n    break;\n  case 9:\n    output_data = &DAT_00007808;\n    break;\n  case 10:\n    output_data = &DAT_0000780c;\n    break;\n  case 0xb:\n    output_data = &DAT_00007810;\n    break;\n  case 0xc:\n    output_data = &DAT_00007814;\n    break;\n  case 0xd:\n    output_data = &DAT_00007818;\n    break;\n  case 0xe:\n    output_data = &DAT_0000781c;\n    break;\n  case 0xf:\n    output_data = &DAT_00007820;\n    break;\n  case 0x10:\n    output_data = &DAT_00007824;\n    break;\n  case 0x11:\n    output_data = &DAT_0000782c;\n    break;\n  default:\n    output_data = &DAT_00007834;\n    break;\n  case 0x13:\n    output_data = &DAT_00007830;\n    break;\n  case 0x15:\n    output_data = &DAT_00007828;\n  }\n  return output_data;\n}\n\n",
            "renaming": {
                "FUN_00003810": "map_param_to_data_00003810",
                "param_1": "input_value",
                "puVar1": "output_data"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_character_00003918",
            "code": "\nundefined4 getCharacter_00003918(undefined characterCode)\n\n{\n  undefined4 result;\n  \n  switch(characterCode) {\n  case 2:\n    result = 0x68;\n    break;\n  case 3:\n    result = 0x6b;\n    break;\n  case 6:\n    result = 0x4d;\n    break;\n  case 9:\n    result = 0x47;\n    break;\n  case 0xc:\n    result = 0x54;\n    break;\n  case 0xf:\n    result = 0x50;\n    break;\n  case 0xf1:\n    result = 0x66;\n    break;\n  default:\n    result = 0;\n    break;\n  case 0xf4:\n    result = 0x70;\n    break;\n  case 0xf7:\n    result = 0x6e;\n    break;\n  case 0xfa:\n    result = 0x75;\n    break;\n  case 0xfd:\n    result = 0x6d;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_character_00003918",
                "param_1": "characterCode",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_name_000039e8",
            "code": "\nchar * getClassName_000039e8(char classCode)\n\n{\n  char *className;\n  \n  switch(classCode) {\n  case '\\0':\n    className = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    className = \"ACT_ANY\";\n    break;\n  case 'B':\n    className = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    className = \"ACT_SERVO\";\n    break;\n  case 'D':\n    className = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    className = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    className = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    className = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    className = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    className = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    className = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    className = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    className = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    className = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    className = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    className = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    className = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    className = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    className = \"SENSE_UV\";\n    break;\n  case -0x74:\n    className = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    className = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    className = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    className = \"SENSE_CO2\";\n    break;\n  default:\n    if (classCode == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    className = \"CLASS_UNKNOWN\";\n  }\n  return className;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_name_000039e8",
                "param_1": "classCode",
                "pcVar1": "className"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_integer_in_list_00003d24",
            "code": "\nundefined4 * findIntegerInList_00003d24(int target)\n\n{\n  int count;\n  undefined4 *current;\n  \n  count = 0;\n  for (current = DAT_1fff0db0; (count < target && (current != (undefined4 *)0x0));\n      current = (undefined4 *)*current) {\n    count = count + 1;\n  }\n  return current;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_integer_in_list_00003d24",
                "param_1": "target",
                "local_10": "count",
                "local_c": "current"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 arg2)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),arg2);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "arg2",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int pointer,undefined4 value)\n\n{\n  undefined4 returnValue;\n  \n  if (pointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(pointer + 0xc) + 4))(*(undefined4 *)(pointer + 4),value);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "pointer",
                "param_2": "value",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int baseAddress,uint number)\n\n{\n  uint remainder;\n  char *currentAddress;\n  uint powerOfTen;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (powerOfTen = 10; powerOfTen <= number; powerOfTen = powerOfTen * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (baseAddress != 0) {\n    currentAddress = (char *)(digitCount + baseAddress);\n    remainder = number;\n    do {\n      currentAddress = currentAddress + -1;\n      *currentAddress = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "baseAddress",
                "param_2": "number",
                "local_20": "remainder",
                "local_14": "currentAddress",
                "local_10": "powerOfTen",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "count_digits_and_sign_00003e58",
            "code": "\nint count_digits_and_sign_00003e58(undefined *input_string,int number)\n\n{\n  int digit_count;\n  int absolute_number;\n  undefined *string_with_sign;\n  \n  absolute_number = number;\n  string_with_sign = input_string;\n  if (-(number >> 0x1f) != 0) {\n    if (input_string != (undefined *)0x0) {\n      string_with_sign = input_string + 1;\n      *input_string = 0x2d;\n    }\n    absolute_number = -number;\n  }\n  digit_count = count_digits_00003dc4(string_with_sign,absolute_number);\n  return -(number >> 0x1f) + digit_count;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "count_digits_and_sign_00003e58",
                "param_1": "input_string",
                "param_2": "number",
                "iVar1": "digit_count",
                "local_18": "absolute_number",
                "local_14": "string_with_sign"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_and_return_number_00003e9e",
            "code": "\nundefined4 formatAndReturnNumber_00003e9e(undefined4 inputNumber,short inputMultiplier,undefined4 inputFormat)\n\n{\n  undefined4 formattedNumber;\n  \n  formattedNumber = format_number_00003ec4(inputNumber,(int)inputMultiplier,inputFormat);\n  return formattedNumber;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_and_return_number_00003e9e",
                "param_1": "inputNumber",
                "param_2": "inputMultiplier",
                "param_3": "inputFormat",
                "uVar1": "formattedNumber"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_number_00003ec4",
            "code": "\nint formatNumber_00003ec4(undefined *output,uint number,int precision)\n\n{\n  int digits;\n  undefined4 digitsDecimal;\n  uint quotient;\n  int remainder;\n  int result;\n  \n  if (precision + 7 < 0 != SCARRY4(precision,7)) {\n    handle_kernel_panic_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  result = 0;\n  if (precision == 0) {\n    result = count_digits_and_sign_00003e58(output,number);\n  }\n  else if (precision < 1) {\n    quotient = number / *(uint *)(&DAT_00007978 + precision * -4);\n    remainder = number - *(uint *)(&DAT_00007978 + precision * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)number < 0)) {\n      if (output != (undefined *)0x0) {\n        *output = 0x2d;\n      }\n      result = 1;\n    }\n    if (output == (undefined *)0x0) {\n      digits = count_digits_and_sign_00003e58(0,quotient);\n      result = digits + 1 + result;\n    }\n    else {\n      digits = count_digits_and_sign_00003e58(output + result,quotient);\n      digits = result + digits;\n      result = digits + 1;\n      output[digits] = 0x2e;\n      digitsDecimal = count_digits_and_sign_00003e58(output + result,remainder);\n      copy_and_reverse_memory_00003ff4(output + result,digitsDecimal,-precision,0x30);\n    }\n    result = -precision + result;\n  }\n  else {\n    result = count_digits_and_sign_00003e58(output,number);\n    if (output != (undefined *)0x0) {\n      fill_memory_00004622(output + result,0x30,precision);\n    }\n    result = precision + result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_number_00003ec4",
                "param_1": "output",
                "param_2": "number",
                "param_3": "precision",
                "iVar1": "digits",
                "uVar2": "digitsDecimal",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "result"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_reverse_memory_00003ff4",
            "code": "\nuint copyAndReverseMemory_00003ff4(int length,uint srcOffset,uint dstOffset,undefined value)\n\n{\n  uint dstOffset;\n  \n  dstOffset = srcOffset;\n  if ((srcOffset < dstOffset) && (dstOffset = dstOffset, length != 0)) {\n    copy_and_reverse_000045ee((dstOffset - srcOffset) + length,length,srcOffset);\n    fill_memory_00004622(length,value,dstOffset - srcOffset);\n  }\n  return dstOffset;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_reverse_memory_00003ff4",
                "param_1": "length",
                "param_2": "srcOffset",
                "param_3": "dstOffset",
                "param_4": "value",
                "uVar1": "dstOffset"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "decode_and_limit_integer_00004042",
            "code": "\nvoid decode_and_limit_integer_00004042(undefined4 input_value)\n\n{\n  decode_and_limit(input_value,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "decode_and_limit_integer_00004042",
                "param_1": "input_value",
                "decode_integer_00004f84": "decode_and_limit"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 process_data_0000404c(uint *data,int *flags)\n\n{\n  int result;\n  int *ptr;\n  uint flag;\n  ushort flag_value;\n  int increment;\n  code *callback;\n  int counter;\n  uint temp;\n  bool isZero;\n  \n  flag_value = *(ushort *)(flags + 3);\n  flag = (uint)flag_value;\n  if ((int)(flag << 0x1c) < 0) {\n    result = flags[4];\n    if (result != 0) {\n      increment = flag << 0x1e;\n      isZero = increment == 0;\n      counter = *flags;\n      if (isZero) {\n        increment = flags[5];\n      }\n      *flags = result;\n      if (!isZero) {\n        increment = 0;\n      }\n      flags[2] = increment;\n      for (counter = counter - result; 0 < counter; counter = counter - increment) {\n        increment = (*(code *)flags[10])(data,flags[8],result,counter);\n        if (increment < 1) {\n          *(ushort *)(flags + 3) = *(ushort *)(flags + 3) | 0x40;\n          return 0xffffffff;\n        }\n        result = result + increment;\n      }\n    }\n  }\n  else {\n    if ((flags[1] < 1) && (flags[0x10] < 1)) {\n      return 0;\n    }\n    callback = (code *)flags[0xb];\n    if (callback == (code *)0x0) {\n      return 0;\n    }\n    temp = *data;\n    *data = 0;\n    if ((flag_value & 0x1000) == 0) {\n      result = (*callback)(data,flags[8],flag & 0x1000,1);\n      if ((result == -1) && (flag = *data, flag != 0)) {\n        if ((flag == 0x1d) || (flag == 0x16)) {\n          *data = temp;\n          return 0;\n        }\n        flag_value = *(ushort *)(flags + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      result = flags[0x15];\n    }\n    if (((int)((uint)*(ushort *)(flags + 3) << 0x1d) < 0) &&\n       (result = result - flags[1], flags[0xd] != 0)) {\n      result = result - flags[0x10];\n    }\n    result = (*(code *)flags[0xb])(data,flags[8],result,0);\n    flag_value = *(ushort *)(flags + 3);\n    if ((result == -1) &&\n       ((0x1d < *data || (-1 < (int)((0x20400001U >> (*data & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(flags + 3) = flag_value | 0x40;\n      return 0xffffffff;\n    }\n    flags[1] = 0;\n    *flags = flags[4];\n    if (((int)((uint)flag_value << 0x13) < 0) && ((result != -1 || (*data == 0)))) {\n      flags[0x15] = result;\n    }\n    ptr = (int *)flags[0xd];\n    *data = temp;\n    if (ptr != (int *)0x0) {\n      if (ptr != flags + 0x11) {\n        initialize_data_and_process_00004b34(data);\n      }\n      flags[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data",
                "param_2": "flags",
                "iVar1": "result",
                "piVar2": "ptr",
                "uVar3": "flag",
                "uVar4": "flag_value",
                "iVar5": "increment",
                "pcVar6": "callback",
                "iVar7": "counter",
                "uVar8": "temp",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int dataPtr,undefined4 *paramArray)\n\n{\n  undefined4 returnValue;\n  \n  if (paramArray[4] != 0) {\n    if ((dataPtr != 0) && (*(int *)(dataPtr + 0x18) == 0)) {\n      initialize_and_process_data_000042a4();\n    }\n    if (paramArray == &DAT_000079b8) {\n      paramArray = *(undefined4 **)(dataPtr + 4);\n    }\n    else if (paramArray == (undefined4 *)&DAT_000079d8) {\n      paramArray = *(undefined4 **)(dataPtr + 8);\n    }\n    else if (paramArray == (undefined4 *)&DAT_00007998) {\n      paramArray = *(undefined4 **)(dataPtr + 0xc);\n    }\n    if (*(short *)(paramArray + 3) != 0) {\n      if ((-1 < (int)(paramArray[0x19] << 0x1f)) && (-1 < (int)*(short *)(paramArray + 3) << 0x16)) {\n        FUNC_000045e8(paramArray[0x16]);\n      }\n      returnValue = process_data_0000404c(dataPtr,paramArray);\n      if ((int)(paramArray[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(paramArray + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(paramArray[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "dataPtr",
                "param_2": "paramArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_data_000041d0",
            "code": "\nuint process_data_000041d0(int input_value,undefined4 offset_value,undefined4 additional_param)\n\n{\n  uint result;\n  int temp_var1;\n  dword *pointer1;\n  int temp_var2;\n  uint output_value;\n  int temp_var3;\n  undefined4 *pointer2;\n  \n  if (input_value == 0) {\n    pointer2 = &DAT_000079f8;\n    pointer1 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    output_value = 0;\n    do {\n      temp_var3 = pointer1[1];\n      temp_var2 = pointer1[2];\n      while (temp_var3 = temp_var3 + -1, -1 < temp_var3) {\n        if ((1 < *(ushort *)(temp_var2 + 0xc)) && (temp_var1 = *(short *)(temp_var2 + 0xe) + 1, temp_var1 != 0)) {\n          result = process_data_000041d0_00004158(0x1fff0284,temp_var2,additional_param,temp_var1,pointer2);\n          output_value = output_value | result;\n        }\n        temp_var2 = temp_var2 + 0x68;\n      }\n      pointer1 = (dword *)*pointer1;\n    } while (pointer1 != (dword *)0x0);\n    return output_value;\n  }\n  output_value = process_data_000041d0_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,input_value);\n  return output_value;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_data_000041d0",
                "param_1": "input_value",
                "param_2": "offset_value",
                "param_3": "additional_param",
                "uVar1": "result",
                "iVar2": "temp_var1",
                "pdVar3": "pointer1",
                "iVar4": "temp_var2",
                "uVar5": "output_value",
                "iVar6": "temp_var3",
                "puVar7": "pointer2"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_memory_000041f4",
            "code": "\nvoid initializeMemory_000041f4(undefined4 *memory,undefined2 value1,undefined2 value2)\n\n{\n  *memory = 0;\n  memory[1] = 0;\n  memory[4] = 0;\n  memory[5] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(memory + 3) = value1;\n  memory[25] = 0;\n  *(undefined2 *)((int)memory + 0xe) = value2;\n  memory[6] = 0;\n  fillMemory(memory + 0x17,0,8);\n  memory[9] = 0x4dc9;\n  memory[10] = 0x4def;\n  memory[11] = 0x4e27;\n  memory[8] = memory;\n  memory[12] = label;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_memory_000041f4",
                "param_1": "memory",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "memory[1]",
                "param_1[4]": "memory[4]",
                "param_1[5]": "memory[5]",
                "param_1[2]": "memory[2]",
                "param_1[0x19]": "memory[25]",
                "param_1[6]": "memory[6]",
                "fill_memory_00004622": "fillMemory",
                "param_1[9]": "memory[9]",
                "param_1[10]": "memory[10]",
                "param_1[0xb]": "memory[11]",
                "param_1[8]": "memory[8]",
                "param_1[0xc]": "memory[12]",
                "&LAB_00004e4a_1": "label"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_and_initialize_array_00004248",
            "code": "\nundefined4 * allocate_and_initialize_array_00004248(undefined4 array,int size)\n\n{\n  undefined4 *allocated_array;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  allocated_array = (undefined4 *)reallocate_memory_00004bd0(array,offset + 0x74);\n  if (allocated_array != (undefined4 *)0x0) {\n    *allocated_array = 0;\n    allocated_array[1] = size;\n    allocated_array[2] = allocated_array + 3;\n    fill_memory_00004622(allocated_array + 3,0,offset + 0x68);\n  }\n  return allocated_array;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_and_initialize_array_00004248",
                "param_1": "array",
                "param_2": "size",
                "puVar1": "allocated_array",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_memory_00004274",
            "code": "\nvoid initializeMemory_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_memory_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_structures_00004280",
            "code": "\nvoid initialize_data_structures_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_structures_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_and_process_data_000042a4",
            "code": "\nvoid initializeAndProcessData_000042a4(int inputParam)\n\n{\n  undefined4 status;\n  \n  initializeMemory();\n  if (*(int *)(inputParam + 0x18) == 0) {\n    *(undefined4 *)(inputParam + 0x48) = 0;\n    *(undefined4 *)(inputParam + 0x4c) = 0;\n    *(undefined4 *)(inputParam + 0x50) = 0;\n    status = 0x1fff0284;\n    *(undefined **)(inputParam + 0x28) = &DAT_0000423d;\n    if (inputParam == 0x1fff0284) {\n      status = 1;\n    }\n    if (inputParam == 0x1fff0284) {\n      *(undefined4 *)(inputParam + 0x18) = status;\n    }\n    status = FUNC_00004314(inputParam);\n    *(undefined4 *)(inputParam + 4) = status;\n    status = FUNC_00004314(inputParam);\n    *(undefined4 *)(inputParam + 8) = status;\n    status = FUNC_00004314(inputParam);\n    *(undefined4 *)(inputParam + 0xc) = status;\n    initializeMemoryAndData(*(undefined4 *)(inputParam + 4),4,0);\n    initializeMemoryAndData(*(undefined4 *)(inputParam + 8),9,1);\n    initializeMemoryAndData(*(undefined4 *)(inputParam + 0xc),0x12,2);\n    *(undefined4 *)(inputParam + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_and_process_data_000042a4",
                "param_1": "inputParam",
                "uVar1": "status",
                "initialize_memory_0000428c": "initializeMemory",
                "initialize_memory_000041f4": "initializeMemoryAndData"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "FUNC_00004314",
            "code": "\nundefined4 * FUNC_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_memory_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    initialize_and_process_data_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_structures_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_memory_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_array_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_structures_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "FUNC_00004314"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_memory_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_structures_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        fill_memory_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_array_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_structures_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int inputOffset,code *processCode)\n\n{\n  uint result;\n  int *ptr;\n  int index;\n  uint combinedResult;\n  int count;\n  \n  ptr = (int *)(inputOffset + 0x48);\n  combinedResult = 0;\n  do {\n    count = ptr[1];\n    index = ptr[2];\n    while (count = count + -1, -1 < count) {\n      if ((1 < *(ushort *)(index + 0xc)) && (*(short *)(index + 0xe) != -1)) {\n        result = (*processCode)(index);\n        combinedResult = combinedResult | result;\n      }\n      index = index + 0x68;\n    }\n    ptr = (int *)*ptr;\n  } while (ptr != (int *)0x0);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "inputOffset",
                "param_2": "processCode",
                "piVar2": "ptr",
                "iVar3": "index",
                "uVar1": "result",
                "uVar4": "combinedResult",
                "iVar5": "count"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_and_return_data_00004418",
            "code": "\nuint process_and_return_data_00004418(void)\n\n{\n  dword r_offset;\n  uint result;\n  byte **pointer_array;\n  byte *current_byte;\n  \n  r_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  pointer_array = *(byte ***)(r_offset + 4);\n  if ((r_offset != 0) && (*(int *)(r_offset + 0x18) == 0)) {\n    initialize_and_process_data();\n  }\n  if (pointer_array == (byte **)&DAT_000079b8) {\n    pointer_array = *(byte ***)(r_offset + 4);\n  }\n  else if (pointer_array == (byte **)&DAT_000079d8) {\n    pointer_array = *(byte ***)(r_offset + 8);\n  }\n  else if (pointer_array == (byte **)&DAT_00007998) {\n    pointer_array = *(byte ***)(r_offset + 0xc);\n  }\n  if ((-1 < (int)pointer_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer_array + 3) << 0x16))) {\n    FUNC_000045e8(pointer_array[0x16]);\n  }\n  current_byte = pointer_array[1];\n  pointer_array[1] = current_byte + -1;\n  if ((int)(current_byte + -1) < 0) {\n    result = process_data(r_offset,pointer_array);\n  }\n  else {\n    current_byte = *pointer_array;\n    *pointer_array = current_byte + 1;\n    result = (uint)*current_byte;\n  }\n  if ((-1 < (int)pointer_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(pointer_array + 3) << 0x16))) {\n    FUNC_000045ec(pointer_array[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_and_return_data_00004418",
                "dVar1": "r_offset",
                "uVar2": "result",
                "ppbVar3": "pointer_array",
                "pbVar4": "current_byte",
                "initialize_and_process_data_000042a4": "initialize_and_process_data",
                "process_data_00005e10": "process_data"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculate_date_components_0000443c(undefined4 *input_values,uint *output_values)\n\n{\n  int division_result;\n  uint modified_var_1;\n  uint modified_var_2;\n  uint modified_var_3;\n  uint modified_var_4;\n  undefined4 input_value_1;\n  undefined4 input_value_2;\n  uint modified_var_5;\n  bool is_negative_division;\n  \n  input_value_1 = *input_values;\n  input_value_2 = input_values[1];\n  division_result = calculate_division_00006974(input_value_1,input_value_2,0x15180,0);\n  modified_var_2 = 0x15180;\n  calculate_division_00006974(input_value_1,input_value_2,0x15180,0);\n  is_negative_division = (int)modified_var_2 < 0;\n  if (is_negative_division) {\n    modified_var_2 = modified_var_2 + 0x15180;\n  }\n  if (is_negative_division) {\n    modified_var_1 = division_result + 0xafa6b;\n  }\n  else {\n    modified_var_1 = division_result + 0xafa6c;\n  }\n  output_values[2] = modified_var_2 / 0xe10;\n  output_values[1] = (modified_var_2 % 0xe10) / 0x3c;\n  *output_values = (modified_var_2 % 0xe10) % 0x3c;\n  output_values[6] = (modified_var_1 + 3) % 7;\n  modified_var_2 = modified_var_1;\n  if ((int)modified_var_1 < 0) {\n    modified_var_2 = modified_var_1 - 0x23ab0;\n  }\n  modified_var_1 = (modified_var_2 / 0x23ab1) * -0x23ab1 + modified_var_1;\n  modified_var_3 = ((modified_var_1 / 0x8eac + modified_var_1) - modified_var_1 / 0x5b4) - modified_var_1 / 0x23ab0;\n  modified_var_4 = modified_var_3 / 0x16d;\n  modified_var_1 = (modified_var_4 / 100 - modified_var_3 / 0x5b4) + modified_var_1 + modified_var_4 * -0x16d;\n  modified_var_5 = modified_var_1 * 5 + 2;\n  modified_var_3 = modified_var_5 / 0x99;\n  if (modified_var_5 < 0x5fa) {\n    division_result = 2;\n  }\n  else {\n    division_result = -10;\n  }\n  modified_var_5 = modified_var_3 + division_result;\n  division_result = (modified_var_2 / 0x23ab1) * 400 + modified_var_4;\n  if (modified_var_5 < 2) {\n    division_result = division_result + 1;\n  }\n  if (modified_var_1 < 0x132) {\n    if (((modified_var_4 & 3) == 0) && (modified_var_4 != (modified_var_4 / 100) * 100)) {\n      modified_var_2 = 1;\n    }\n    else {\n      modified_var_2 = (uint)(modified_var_4 % 400 == 0);\n    }\n    modified_var_2 = modified_var_1 + 0x3b + modified_var_2;\n  }\n  else {\n    modified_var_2 = modified_var_1 - 0x132;\n  }\n  output_values[7] = modified_var_2;\n  output_values[3] = (modified_var_1 + 1) - (modified_var_3 * 0x99 + 2) / 5;\n  output_values[4] = modified_var_5;\n  output_values[5] = division_result - 0x76c;\n  output_values[8] = 0;\n  return output_values;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "input_values",
                "param_2": "output_values",
                "iVar1": "division_result",
                "uVar2": "modified_var_1",
                "uVar3": "modified_var_2",
                "uVar4": "modified_var_3",
                "uVar5": "modified_var_4",
                "uVar6": "input_value_1",
                "uVar7": "input_value_2",
                "uVar8": "modified_var_5",
                "bVar9": "is_negative_division"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_tasks_0000459c",
            "code": "\nvoid execute_tasks_0000459c(void)\n\n{\n  code **task_list;\n  int task_index;\n  \n  task_list = (code **)&DAT_00007c58;\n  for (task_index = 0; task_index != 0; task_index = task_index + 1) {\n    (**task_list)();\n    task_list = task_list + 1;\n  }\n  handle_assertion_errors_00000410();\n  task_list = (code **)&DAT_00007c58;\n  for (task_index = 0; task_index != 0; task_index = task_index + 1) {\n    (**task_list)();\n    task_list = task_list + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_tasks_0000459c",
                "ppcVar1": "task_list",
                "iVar2": "task_index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copyAndReverse_000045ee(undefined *source,undefined *destination,int length)\n\n{\n  undefined *sourceEnd;\n  undefined *destinationEnd;\n  \n  destinationEnd = destination + length;\n  if ((destination < source) && (source < destinationEnd)) {\n    sourceEnd = source + length;\n    while (sourceEnd != source) {\n      destinationEnd = destinationEnd + -1;\n      sourceEnd = sourceEnd + -1;\n      *sourceEnd = *destinationEnd;\n    }\n  }\n  else {\n    source = source + -1;\n    for (; destination != destinationEnd; destination = destination + 1) {\n      source = source + 1;\n      *source = *destination;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "sourceEnd",
                "puVar2": "destinationEnd"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fillMemory_00004622(undefined *destination,undefined value,int numBytes)\n\n{\n  undefined *endAddress;\n  \n  endAddress = destination + numBytes;\n  for (; destination != endAddress; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "numBytes",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid updateDateTime_00004634(uint *dateTime,uint days,undefined4 param_3)\n\n{\n  int months;\n  uint totalDays;\n  uint totalMonths;\n  int daysInMonth;\n  bool isNegative;\n  uint *quotient;\n  uint remainder;\n  undefined4 otherParam;\n  \n  quotient = dateTime;\n  remainder = days;\n  otherParam = param_3;\n  if (0x3b < *dateTime) {\n    divide_and_update_remainder_00005584(&quotient,*dateTime,0x3c);\n    totalDays = dateTime[1] + (int)quotient;\n    dateTime[1] = totalDays;\n    if ((int)remainder < 0) {\n      totalDays = totalDays - 1;\n      *dateTime = remainder + 0x3c;\n    }\n    else {\n      *dateTime = remainder;\n    }\n    if ((int)remainder < 0) {\n      dateTime[1] = totalDays;\n    }\n  }\n  if (0x3b < dateTime[1]) {\n    divide_and_update_remainder_00005584(&quotient,dateTime[1],0x3c);\n    isNegative = (int)remainder < 0;\n    totalMonths = dateTime[2] + (int)quotient;\n    dateTime[2] = totalMonths;\n    totalDays = remainder;\n    if (isNegative) {\n      totalDays = remainder + 0x3c;\n      totalMonths = totalMonths - 1;\n    }\n    if (!isNegative) {\n      dateTime[1] = totalDays;\n    }\n    if (isNegative) {\n      dateTime[1] = totalDays;\n    }\n    if (isNegative) {\n      dateTime[2] = totalMonths;\n    }\n  }\n  if (0x17 < dateTime[2]) {\n    divide_and_update_remainder_00005584(&quotient,dateTime[2],0x18);\n    isNegative = (int)remainder < 0;\n    totalMonths = dateTime[3] + (int)quotient;\n    dateTime[3] = totalMonths;\n    totalDays = remainder;\n    if (isNegative) {\n      totalDays = remainder + 0x18;\n      totalMonths = totalMonths - 1;\n    }\n    if (!isNegative) {\n      dateTime[2] = totalDays;\n    }\n    if (isNegative) {\n      dateTime[2] = totalDays;\n    }\n    if (isNegative) {\n      dateTime[3] = totalMonths;\n    }\n  }\n  if (0xb < dateTime[4]) {\n    divide_and_update_remainder_00005584(&quotient,dateTime[4],0xc);\n    isNegative = (int)remainder < 0;\n    totalDays = dateTime[5] + (int)quotient;\n    dateTime[5] = totalDays;\n    if (isNegative) {\n      remainder = remainder + 0xc;\n      totalDays = totalDays - 1;\n    }\n    if (!isNegative) {\n      dateTime[4] = remainder;\n    }\n    if (isNegative) {\n      dateTime[4] = remainder;\n    }\n    if (isNegative) {\n      dateTime[5] = totalDays;\n    }\n  }\n  totalDays = dateTime[5];\n  if ((totalDays & 3) == 0) {\n    if (totalDays == (totalDays / 100) * 100) {\n      if ((totalDays + 0x76c) % 400 == 0) {\n        daysInMonth = 0x1d;\n      }\n      else {\n        daysInMonth = 0x1c;\n      }\n    }\n    else {\n      daysInMonth = 0x1d;\n    }\n  }\n  else {\n    daysInMonth = 0x1c;\n  }\n  if ((int)dateTime[3] < 1) {\n    while ((int)dateTime[3] < 1) {\n      totalDays = dateTime[4];\n      dateTime[4] = totalDays - 1;\n      if (totalDays - 1 == 0xffffffff) {\n        totalMonths = dateTime[5];\n        totalDays = totalMonths - 1;\n        dateTime[4] = 0xb;\n        dateTime[5] = totalDays;\n        if ((totalDays & 3) == 0) {\n          if (totalDays == (totalDays / 100) * 100) {\n            if ((totalMonths + 0x76b) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n      months = daysInMonth;\n      if (dateTime[4] != 1) {\n        months = (&DAT_000079fc)[dateTime[4]];\n      }\n      dateTime[3] = months + dateTime[3];\n    }\n  }\n  else {\n    while( true ) {\n      totalDays = dateTime[4];\n      months = daysInMonth;\n      if (totalDays != 1) {\n        months = (&DAT_000079fc)[totalDays];\n      }\n      if ((int)dateTime[3] <= months) break;\n      dateTime[3] = dateTime[3] - months;\n      dateTime[4] = totalDays + 1;\n      if (totalDays + 1 == 0xc) {\n        totalMonths = dateTime[5];\n        totalDays = totalMonths + 1;\n        dateTime[4] = 0;\n        dateTime[5] = totalDays;\n        if ((totalDays & 3) == 0) {\n          if (totalDays % 100 == 0) {\n            if ((totalMonths + 0x76d) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "dateTime",
                "param_2": "days",
                "iVar1": "months",
                "uVar2": "totalDays",
                "uVar3": "totalMonths",
                "iVar4": "daysInMonth",
                "bVar5": "isNegative",
                "local_20": "quotient",
                "local_1c": "remainder",
                "uStack_18": "otherParam"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_time_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateTime_000047e4(int *dateTimeArray)\n\n{\n  longlong totalDays;\n  longlong updatedTotalDays;\n  int *memoryAddress;\n  uint remainder;\n  int dayOfWeek;\n  int tempVar;\n  int result;\n  uint previousYear;\n  uint currentYear;\n  uint previousDays;\n  int daysPassed;\n  uint previousSeconds;\n  uint isLeapYear;\n  uint currentDays;\n  uint currentSeconds;\n  bool isDivisibleBy4;\n  \n  memoryAddress = (int *)get_memory_address_000056b0();\n  update_date_time_00004634(dateTimeArray);\n  previousSeconds = dateTimeArray[5];\n  daysPassed = dateTimeArray[3] + -1 + *(int *)(&DAT_00007a2c + dateTimeArray[4] * 4);\n  if (((1 < dateTimeArray[4]) && ((previousSeconds & 3) == 0)) &&\n     ((previousSeconds != (previousSeconds / 100) * 100 || (previousSeconds + 0x76c == ((previousSeconds + 0x76c) / 400) * 400)))) {\n    daysPassed = daysPassed + 1;\n  }\n  dateTimeArray[7] = daysPassed;\n  if (20000 < (int)&DAT_00002710 + previousSeconds) {\n    result = -1;\n    dayOfWeek = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)previousSeconds < 0x47) {\n    if (previousSeconds != 0x46) {\n      for (currentYear = 0x45; (int)previousSeconds < (int)currentYear; currentYear = currentYear - 1) {\n        if ((currentYear & 3) == 0) {\n          if (currentYear == (currentYear / 100) * 100) {\n            if ((currentYear + 0x76c) % 400 == 0) {\n              result = 0x16e;\n            }\n            else {\n              result = 0x16d;\n            }\n          }\n          else {\n            result = 0x16e;\n          }\n        }\n        else {\n          result = 0x16d;\n        }\n        daysPassed = daysPassed - result;\n      }\n      if ((currentYear & 3) == 0) {\n        if (previousSeconds == (previousSeconds / 100) * 100) {\n          result = 0x16d;\n          if ((previousSeconds + 0x76c) % 400 == 0) {\n            result = 0x16e;\n          }\n        }\n        else {\n          result = 0x16e;\n        }\n      }\n      else {\n        result = 0x16d;\n      }\n      daysPassed = daysPassed - result;\n    }\n  }\n  else {\n    currentYear = 0x46;\n    do {\n      if ((currentYear & 3) == 0) {\n        if (currentYear % 100 == 0) {\n          if ((currentYear + 0x76c) % 400 == 0) {\n            result = 0x16e;\n          }\n          else {\n            result = 0x16d;\n          }\n        }\n        else {\n          result = 0x16e;\n        }\n      }\n      else {\n        result = 0x16d;\n      }\n      currentYear = currentYear + 1;\n      daysPassed = daysPassed + result;\n    } while (previousSeconds != currentYear);\n  }\n  totalDays = (longlong)daysPassed * 0x15180 + (longlong)(dateTimeArray[2] * 0xe10 + dateTimeArray[1] * 0x3c + *dateTimeArray)\n  ;\n  currentSeconds = (uint)totalDays;\n  result = (int)((ulonglong)totalDays >> 0x20);\n  get_data_address_000050e8();\n  decode_relocation_entry_00005100();\n  currentYear = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    previousSeconds = memoryAddress[10];\n    result = (uint)totalDays + previousSeconds;\n    dayOfWeek = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)previousSeconds >> 0x1f) + (uint)CARRY4((uint)totalDays,previousSeconds);\n  }\n  else {\n    currentDays = dateTimeArray[8];\n    isLeapYear = currentDays;\n    if (0 < (int)currentDays) {\n      isLeapYear = 1;\n    }\n    if ((memoryAddress[1] == dateTimeArray[5] + 0x76c) || (dayOfWeek = calculate_day_of_week_00004f98(), dayOfWeek != 0)) {\n      previousDays = memoryAddress[0x14];\n      remainder = memoryAddress[0x12];\n      previousYear = memoryAddress[10];\n      currentYear = remainder - previousYear;\n      dayOfWeek = (memoryAddress[0x13] - ((int)previousYear >> 0x1f)) - (uint)(remainder < previousYear);\n      if (((int)((result - dayOfWeek) - (uint)(currentSeconds < currentYear)) < 0 ==\n           (SBORROW4(result,dayOfWeek) != SBORROW4(result - dayOfWeek,(uint)(currentSeconds < currentYear)))) &&\n         (tempVar = (memoryAddress[0x13] - ((int)previousDays >> 0x1f)) - (uint)(remainder < previousDays),\n         isDivisibleBy4 = currentSeconds < remainder - previousDays,\n         (int)((result - tempVar) - (uint)isDivisibleBy4) < 0 !=\n         (SBORROW4(result,tempVar) != SBORROW4(result - tempVar,(uint)isDivisibleBy4)))) goto LAB_00004a88;\n      remainder = memoryAddress[8] - previousDays;\n      tempVar = (memoryAddress[9] - ((int)previousDays >> 0x1f)) - (uint)((uint)memoryAddress[8] < previousDays);\n      if (*memoryAddress != 0) {\n        if ((int)((result - tempVar) - (uint)(currentSeconds < remainder)) < 0 ==\n            (SBORROW4(result,tempVar) != SBORROW4(result - tempVar,(uint)(currentSeconds < remainder))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        currentYear = 0;\n        if ((int)currentDays < 0) goto LAB_00004934;\nLAB_00004a14:\n        currentSeconds = isLeapYear ^ currentYear;\n        isLeapYear = currentYear;\n        if (currentSeconds == 1) {\n          if (currentYear == 0) {\n            result = previousDays - previousYear;\n          }\n          else {\n            result = previousYear - previousDays;\n          }\n          dayOfWeek = dateTimeArray[3];\n          *dateTimeArray = *dateTimeArray + result;\n          updatedTotalDays = totalDays + result;\n          update_date_time_00004634(dateTimeArray);\n          dayOfWeek = dateTimeArray[3] - dayOfWeek;\n          totalDays = totalDays + result;\n          if (dayOfWeek != 0) {\n            if (dayOfWeek < 2) {\n              if (dayOfWeek == -2 || dayOfWeek + 2 < 0 != SCARRY4(dayOfWeek,2)) {\n                dayOfWeek = 1;\n              }\n            }\n            else {\n              dayOfWeek = -1;\n            }\n            result = dayOfWeek + dateTimeArray[7];\n            daysPassed = daysPassed + dayOfWeek;\n            if (result < 0) {\n              currentYear = previousSeconds - 1;\n              if ((currentYear & 3) == 0) {\n                if (currentYear == (currentYear / 100) * 100) {\n                  result = 0x16d;\n                  if ((previousSeconds + 0x76b) % 400 != 0) {\n                    result = 0x16c;\n                  }\n                }\n                else {\n                  result = 0x16d;\n                }\n              }\n              else {\n                result = 0x16c;\n              }\n            }\n            else {\n              if ((previousSeconds & 3) == 0) {\n                if (previousSeconds == (previousSeconds / 100) * 100) {\n                  dayOfWeek = 0x16d;\n                  if ((previousSeconds + 0x76c) % 400 == 0) {\n                    dayOfWeek = 0x16e;\n                  }\n                }\n                else {\n                  dayOfWeek = 0x16e;\n                }\n              }\n              else {\n                dayOfWeek = 0x16d;\n              }\n              if (dayOfWeek <= result) {\n                result = result - dayOfWeek;\n              }\n            }\n            dateTimeArray[7] = result;\n            totalDays = updatedTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((result - tempVar) - (uint)(currentSeconds < remainder)) < 0 !=\n          (SBORROW4(result,tempVar) != SBORROW4(result - tempVar,(uint)(currentSeconds < remainder)))) {\nLAB_0000491e:\n        if ((int)((result - dayOfWeek) - (uint)(currentSeconds < currentYear)) < 0 ==\n            (SBORROW4(result,dayOfWeek) != SBORROW4(result - dayOfWeek,(uint)(currentSeconds < currentYear))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)currentDays) {\n        currentYear = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      currentYear = isLeapYear;\n      if (isLeapYear != 1) goto LAB_00004934;\n    }\n    previousSeconds = memoryAddress[0x14];\n    result = (uint)totalDays + previousSeconds;\n    dayOfWeek = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)previousSeconds >> 0x1f) + (uint)CARRY4((uint)totalDays,previousSeconds);\n    currentYear = 1;\n  }\n  get_data_pointer_000050f4();\n  dateTimeArray[8] = currentYear;\n  dateTimeArray[6] = (daysPassed + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(dayOfWeek,result);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_time_000047e4",
                "param_1": "dateTimeArray",
                "lVar1": "totalDays",
                "lVar2": "updatedTotalDays",
                "piVar3": "memoryAddress",
                "uVar4": "remainder",
                "iVar5": "dayOfWeek",
                "iVar6": "tempVar",
                "iVar7": "result",
                "iVar11": "daysPassed",
                "uVar8": "previousYear",
                "uVar9": "currentYear",
                "uVar10": "previousDays",
                "uVar12": "previousSeconds",
                "uVar13": "isLeapYear",
                "uVar14": "currentDays",
                "uVar15": "currentSeconds",
                "bVar16": "isDivisibleBy4"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "initialize_data_and_process_00004b34",
            "code": "\nvoid initializeDataAndProcess_00004b34(undefined4 *resultStatus,int count,undefined4 param3,undefined4 param4)\n\n{\n  int *tempPtr1;\n  int **extraPtr1;\n  int **currentPtr;\n  int **nextPtr;\n  int **prevPtr;\n  int **newPtr;\n  bool isLastPtr;\n  \n  if (count == 0) {\n    return;\n  }\n  newPtr = (int **)(count + -4);\n  if (*(int *)(count + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(count + -4));\n  }\n  initialize_data_00005790();\n  nextPtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    currentPtr = extraPtr1;\n    DAT_1fff0db4 = newPtr;\n  }\n  else {\n    prevPtr = DAT_1fff0db4;\n    if (newPtr < DAT_1fff0db4) {\n      currentPtr = (int **)*newPtr;\n      nextPtr = (int **)((int)newPtr + (int)currentPtr);\n      isLastPtr = DAT_1fff0db4 == nextPtr;\n      if (isLastPtr) {\n        nextPtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newPtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newPtr;\n      if (isLastPtr) {\n        nextPtr = (int **)((int)nextPtr + (int)currentPtr);\n        *newPtr = (int *)nextPtr;\n      }\n    }\n    else {\n      do {\n        nextPtr = prevPtr;\n        prevPtr = (int **)nextPtr[1];\n        if (prevPtr == (int **)0x0) break;\n      } while (prevPtr <= newPtr);\n      currentPtr = (int **)*nextPtr;\n      if ((int **)((int)nextPtr + (int)currentPtr) == newPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n        *nextPtr = (int *)currentPtr;\n        if (prevPtr == (int **)((int)nextPtr + (int)currentPtr)) {\n          tempPtr1 = *prevPtr;\n          nextPtr[1] = prevPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)tempPtr1);\n          *nextPtr = (int *)currentPtr;\n        }\n      }\n      else if (newPtr < (int **)((int)nextPtr + (int)currentPtr)) {\n        *resultStatus = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)newPtr + (int)*newPtr);\n        isLastPtr = prevPtr == currentPtr;\n        if (isLastPtr) {\n          currentPtr = (int **)*prevPtr;\n          prevPtr = (int **)prevPtr[1];\n        }\n        newPtr[1] = (int *)prevPtr;\n        if (isLastPtr) {\n          currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n          *newPtr = (int *)currentPtr;\n        }\n        nextPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  initialize_data_0000579c(resultStatus,currentPtr,nextPtr,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "initialize_data_and_process_00004b34",
                "param_1": "resultStatus",
                "param_2": "count",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "tempPtr1",
                "extraout_r": "extraPtr",
                "ppiVar2": "currentPtr",
                "ppiVar3": "nextPtr",
                "ppiVar4": "prevPtr",
                "ppiVar5": "newPtr",
                "bVar6": "isLastPtr"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "reallocate_memory_00004bd0",
            "code": "\nuint reallocateMemory_00004bd0(undefined4 *outputPointer,uint inputSize,undefined4 paramA,undefined4 paramB)\n\n{\n  uint *previousBlock;\n  int difference;\n  uint blockSize;\n  uint *currentBlock;\n  uint newBlockSize;\n  \n  newBlockSize = (inputSize + 3 & 0xfffffffc) + 8;\n  if (newBlockSize < 0xc) {\n    newBlockSize = 0xc;\n  }\n  if (((int)newBlockSize < 0) || (newBlockSize < inputSize)) {\n    *outputPointer = 0xc;\n  }\n  else {\n    initialize_data_00005790();\n    previousBlock = DAT_1fff0db4;\n    for (currentBlock = DAT_1fff0db4; currentBlock != (uint *)0x0; currentBlock = (uint *)currentBlock[1]) {\n      blockSize = *currentBlock - newBlockSize;\n      if (-1 < (int)blockSize) {\n        if (0xb < blockSize) {\n          *currentBlock = blockSize;\n          currentBlock = (uint *)((int)currentBlock + blockSize);\n          goto LAB_00004c34;\n        }\n        if (previousBlock == currentBlock) {\n          DAT_1fff0db4 = (uint *)currentBlock[1];\n        }\n        if (previousBlock != currentBlock) {\n          previousBlock[1] = (uint)(uint *)currentBlock[1];\n        }\n        goto LAB_00004c42;\n      }\n      previousBlock = currentBlock;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = update_offset_00000428(outputPointer,0,previousBlock,0,paramB);\n    }\n    previousBlock = (uint *)update_offset_00000428(outputPointer,newBlockSize);\n    if ((previousBlock != (uint *)0xffffffff) &&\n       ((currentBlock = (uint *)((int)previousBlock + 3U & 0xfffffffc), previousBlock == currentBlock ||\n        (difference = update_offset_00000428(outputPointer,(int)currentBlock - (int)previousBlock), difference != -1)))) {\nLAB_00004c34:\n      *currentBlock = newBlockSize;\nLAB_00004c42:\n      initialize_data_0000579c(outputPointer);\n      newBlockSize = (int)currentBlock + 0xbU & 0xfffffff8;\n      difference = newBlockSize - (int)(currentBlock + 1);\n      if (difference == 0) {\n        return newBlockSize;\n      }\n      *(uint *)((int)currentBlock + difference) = (int)(currentBlock + 1) - newBlockSize;\n      return newBlockSize;\n    }\n    *outputPointer = 0xc;\n    initialize_data_0000579c(outputPointer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "reallocate_memory_00004bd0",
                "param_1": "outputPointer",
                "param_2": "inputSize",
                "param_3": "paramA",
                "param_4": "paramB",
                "puVar1": "previousBlock",
                "iVar2": "difference",
                "uVar3": "blockSize",
                "puVar4": "currentBlock",
                "uVar5": "newBlockSize"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_formatted_data_00004c84",
            "code": "\nvoid processFormattedData_00004c84(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  dword dynamicVar1;\n  undefined4 updatedVar2;\n  undefined4 updatedStackC;\n  undefined4 updatedStack8;\n  undefined4 updatedStack4;\n  \n  dynamicVar1 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  updatedVar2 = inputParam1;\n  updatedStackC = inputParam2;\n  updatedStack8 = inputParam3;\n  updatedStack4 = inputParam4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  process_and_format_data_000057f8(dynamicVar1,*(undefined4 *)(dynamicVar1 + 8),inputParam1,&updatedStackC,updatedVar2,&updatedStackC);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_formatted_data_00004c84",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "dVar1": "dynamicVar1",
                "uVar2": "updatedVar2",
                "uStack_c": "updatedStackC",
                "uStack_8": "updatedStack8",
                "uStack_4": "updatedStack4"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_data_00004cb4",
            "code": "\nuint process_data_00004cb4(uint input_data)\n\n{\n  dword offset;\n  undefined4 *data_ptr;\n  uint counter;\n  undefined *data_byte_ptr;\n  undefined4 unused_var1;\n  undefined4 unused_var2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data_00004cb4_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_and_process_data_00004cb4_000042a4();\n  }\n  if (data_ptr == &DAT_000079b8) {\n    data_ptr = *(undefined4 **)(offset + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_000079d8) {\n    data_ptr = *(undefined4 **)(offset + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_00007998) {\n    data_ptr = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  counter = data_ptr[2] - 1;\n  data_ptr[2] = counter;\n  if (((int)counter < 0) && (((int)counter < (int)data_ptr[6] || (counter = input_data & 0xff, counter == 10))))\n  {\n    input_data = process_data_00004cb4_00005404(offset,input_data,data_ptr,counter,unused_var1,unused_var2);\n  }\n  else {\n    data_byte_ptr = (undefined *)*data_ptr;\n    *data_ptr = data_byte_ptr + 1;\n    *data_byte_ptr = (char)input_data;\n    input_data = input_data & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return input_data;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_data_00004cb4",
                "param_1": "input_data",
                "dVar1": "offset",
                "puVar2": "data_ptr",
                "uVar3": "counter",
                "puVar4": "data_byte_ptr",
                "unaff_r4": "unused_var1",
                "unaff_r5": "unused_var2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int input)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *strPtr;\n  char **dataPtr;\n  undefined4 returnValue;\n  char *strPtr2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data_000042a4();\n  }\n  dataPtr = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    initialize_and_process_data_000042a4(offset);\n  }\n  if (dataPtr == (char **)&DAT_000079b8) {\n    dataPtr = *(char ***)(offset + 4);\n  }\n  else if (dataPtr == (char **)&DAT_000079d8) {\n    dataPtr = *(char ***)(offset + 8);\n  }\n  else if (dataPtr == (char **)&DAT_00007998) {\n    dataPtr = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(dataPtr + 3) << 0x1c) < 0) && (dataPtr[4] != (char *)0x0)) ||\n     (result = process_data_000054a8(offset,dataPtr), result == 0)) {\n    strPtr2 = (char *)(input + -1);\n    do {\n      while( true ) {\n        strPtr2 = strPtr2 + 1;\n        currentChar = *strPtr2;\n        strPtr = dataPtr[2] + -1;\n        dataPtr[2] = strPtr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)strPtr) {\n            strPtr2 = *dataPtr;\n            returnValue = 10;\n            *dataPtr = strPtr2 + 1;\n            *strPtr2 = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_data_00005404(offset,10,dataPtr);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)strPtr < 0) && (((int)strPtr < (int)dataPtr[6] || (currentChar == '\\n')))) break;\n        strPtr = *dataPtr;\n        *dataPtr = strPtr + 1;\n        *strPtr = currentChar;\n      }\n      result = process_data_00005404(offset,currentChar,dataPtr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045ec(dataPtr[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "input",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "strPtr",
                "ppcVar5": "dataPtr",
                "uVar6": "returnValue",
                "pcVar7": "strPtr2"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 dataPtr,int structOffset)\n\n{\n  int copyResult;\n  uint newValue;\n  bool isSuccessful;\n  \n  copyResult = copy_and_increment_00000490(dataPtr,(int)*(short *)(structOffset + 0xe));\n  isSuccessful = -1 < copyResult;\n  if (isSuccessful) {\n    newValue = *(int *)(structOffset + 0x54) + copyResult;\n  }\n  else {\n    newValue = *(ushort *)(structOffset + 0xc) & 0xffffefff;\n  }\n  if (isSuccessful) {\n    *(uint *)(structOffset + 0x54) = newValue;\n  }\n  if (!isSuccessful) {\n    *(short *)(structOffset + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "dataPtr",
                "param_2": "structOffset",
                "iVar1": "copyResult",
                "uVar2": "newValue",
                "bVar3": "isSuccessful"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "initialize_data_00004dee",
            "code": "\nundefined4 initialize_data_00004dee(undefined4 data_ptr,int buffer_ptr,undefined4 source_data,undefined4 dest_data)\n\n{\n  undefined4 copy_result;\n  \n  if ((int)((uint)*(ushort *)(buffer_ptr + 0xc) << 0x17) < 0) {\n    set_initial_values_000004f2(data_ptr,(int)*(short *)(buffer_ptr + 0xe),0,2);\n  }\n  *(ushort *)(buffer_ptr + 0xc) = *(ushort *)(buffer_ptr + 0xc) & 0xefff;\n  copy_result = copy_data_to_memory_00000e38(source_data,dest_data);\n  return copy_result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "initialize_data_00004dee",
                "param_1": "data_ptr",
                "param_2": "buffer_ptr",
                "param_3": "source_data",
                "param_4": "dest_data",
                "uVar1": "copy_result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "initialize_values_00004e26",
            "code": "\nvoid initializeValues_00004e26(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort updatedValue;\n  bool isError;\n  \n  result = set_initial_values_000004f2(param1,(int)*(short *)(param2 + 0xe));\n  isError = result == -1;\n  if (isError) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(param2 + 0x54) = result;\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  if (!isError) {\n    *(ushort *)(param2 + 0xc) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "initialize_values_00004e26",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_and_subtract_00004e52",
            "code": "\nint compareAndSubtract_00004e52(byte *inputBytes1,byte *inputBytes2)\n\n{\n  byte byteValue2;\n  uint byteValue1;\n  bool isEqual;\n  \n  do {\n    byteValue1 = (uint)*inputBytes1;\n    byteValue2 = *inputBytes2;\n    isEqual = byteValue1 == 1;\n    if (byteValue1 != 0) {\n      isEqual = byteValue1 == byteValue2;\n    }\n    inputBytes1 = inputBytes1 + 1;\n    inputBytes2 = inputBytes2 + 1;\n  } while (isEqual);\n  return byteValue1 - byteValue2;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_and_subtract_00004e52",
                "param_1": "inputBytes1",
                "param_2": "inputBytes2",
                "uVar2": "byteValue1",
                "bVar1": "byteValue2",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "calculate_difference_00004e66",
            "code": "\nint calculate_difference_00004e66(byte *data,int offset,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *next_byte;\n  uint current_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    next_byte = (byte *)(offset + -1);\n    current_byte = data;\n    do {\n      current_value = (uint)*current_byte;\n      next_byte = next_byte + 1;\n      if ((current_value != *next_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (current_value != 0);\n    difference = current_value - *next_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "calculate_difference_00004e66",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "next_byte",
                "uVar4": "current_value"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "decode_integer_00004f84",
            "code": "\nuint decode_integer_00004f84(byte *input,byte **output,uint base)\n\n{\n  uint result;\n  uint current_char;\n  uint is_negative;\n  uint converted_digit;\n  int comparison;\n  uint max_value;\n  uint div;\n  byte *current_byte;\n  byte *next_byte;\n  \n  next_byte = input;\n  do {\n    current_byte = next_byte;\n    next_byte = current_byte + 1;\n    current_char = (uint)*current_byte;\n    is_negative = (byte)(&DAT_00007a99)[current_char] & 8;\n  } while (((&DAT_00007a99)[current_char] & 8) != 0);\n  if (current_char == 0x2d) {\n    current_char = (uint)*next_byte;\n    is_negative = 1;\n    next_byte = current_byte + 2;\n  }\n  else if (current_char == 0x2b) {\n    current_char = (uint)*next_byte;\n    next_byte = current_byte + 2;\n  }\n  if (base == 0) {\n    if (current_char != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (current_char != 0x30)) goto LAB_00004ed6;\n  if ((*next_byte & 0xdf) == 0x58) {\n    current_char = (uint)next_byte[1];\n    base = 0x10;\n    next_byte = next_byte + 2;\n  }\n  else {\n    current_char = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  max_value = is_negative + 0x7fffffff;\n  comparison = 0;\n  div = max_value / base;\n  result = 0;\n  do {\n    converted_digit = current_char - 0x30;\n    if (9 < converted_digit) {\n      if (current_char - 0x41 < 0x1a) {\n        converted_digit = current_char - 0x37;\n      }\n      else {\n        if (0x19 < current_char - 0x61) break;\n        converted_digit = current_char - 0x57;\n      }\n    }\n    if ((int)base <= (int)converted_digit) break;\n    if (comparison != -1) {\n      if ((div < result) || ((div == result && ((int)(max_value - base * div) < (int)converted_digit)))) {\n        comparison = -1;\n      }\n      else {\n        result = result * base + converted_digit;\n        comparison = 1;\n      }\n    }\n    current_char = (uint)*next_byte;\n    next_byte = next_byte + 1;\n  } while( true );\n  if (comparison == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = max_value;\n    if (output == (byte **)0x0) {\n      return max_value;\n    }\n  }\n  else {\n    if (is_negative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (comparison == 0) goto LAB_00004f64;\n  }\n  input = next_byte + -1;\nLAB_00004f64:\n  *output = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "decode_integer_00004f84",
                "param_1": "input",
                "param_2": "output",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "current_char",
                "uVar3": "is_negative",
                "uVar4": "converted_digit",
                "iVar5": "comparison",
                "uVar6": "max_value",
                "uVar7": "div",
                "pbVar8": "current_byte",
                "pbVar9": "next_byte"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *memory;\n  undefined4 isLeapYear;\n  uint dayOfWeek;\n  int dayOfWeekOffset;\n  uint *calendarData;\n  int yearOffset;\n  uint leapYearOffset;\n  int monthIndex;\n  int monthOffset;\n  uint isMultipleOf400;\n  \n  memory = (uint *)get_memory_address_000056b0();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    yearOffset = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    memory[1] = year;\n    isMultipleOf400 = (uint)(year % 400 == 0);\n    calendarData = memory;\n    do {\n      dayOfWeek = calendarData[5];\n      if (*(char *)(calendarData + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            dayOfWeekOffset = 0;\n          }\n          else {\n            dayOfWeekOffset = 1;\n          }\n        }\n        else {\n          dayOfWeekOffset = 0;\n        }\n        dayOfWeekOffset = dayOfWeekOffset + yearOffset + dayOfWeek + -1;\n      }\n      else if (*(char *)(calendarData + 2) == 'D') {\n        dayOfWeekOffset = yearOffset + dayOfWeek;\n      }\n      else {\n        leapYearOffset = isMultipleOf400;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          leapYearOffset = 1;\n        }\n        monthIndex = 0;\n        dayOfWeekOffset = yearOffset;\n        while( true ) {\n          monthIndex = monthIndex + 1;\n          if ((int)calendarData[3] <= monthIndex) break;\n          dayOfWeekOffset = dayOfWeekOffset + *(int *)(&UNK_00007b98 + monthIndex * 4 + leapYearOffset * 0x30);\n        }\n        monthOffset = dayOfWeek - (dayOfWeekOffset + 4U) % 7;\n        if (monthOffset < 0) {\n          monthOffset = monthOffset + 7;\n        }\n        for (monthOffset = (calendarData[4] - 1) * 7 + monthOffset;\n            *(int *)(&UNK_00007b98 + monthIndex * 4 + leapYearOffset * 0x30) <= monthOffset; monthOffset = monthOffset + -7) {\n        }\n        dayOfWeekOffset = dayOfWeekOffset + monthOffset;\n      }\n      dayOfWeek = calendarData[10] + dayOfWeekOffset * 0x15180 + calendarData[6];\n      calendarData[8] = dayOfWeek;\n      calendarData[9] = (int)dayOfWeek >> 0x1f;\n      calendarData = calendarData + 10;\n    } while (memory + 0x14 != calendarData);\n    dayOfWeek = memory[9];\n    isMultipleOf400 = memory[0x13];\n    *memory = (uint)((int)((dayOfWeek - isMultipleOf400) - (uint)(memory[8] < memory[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isMultipleOf400) !=\n                    SBORROW4(dayOfWeek - isMultipleOf400,(uint)(memory[8] < memory[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "memory",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeek",
                "iVar4": "dayOfWeekOffset",
                "puVar5": "calendarData",
                "iVar6": "yearOffset",
                "uVar7": "leapYearOffset",
                "iVar8": "monthIndex",
                "iVar9": "monthOffset",
                "uVar10": "isMultipleOf400"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_data_address_000050e8",
            "code": "\nundefined * get_data_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_data_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_data_pointer_000050f4",
            "code": "\nundefined * get_data_pointer_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_data_pointer_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "decode_relocation_entry_00005100",
            "code": "\nvoid decode_relocation_entry_00005100(void)\n\n{\n  dword relocation_offset;\n  int memory_address;\n  char *equal_char_ptr;\n  int result;\n  int result2;\n  undefined temp_var;\n  char *temp_ptr;\n  bool flag;\n  ushort *temp_ptr_arr1;\n  int *temp_ptr_arr2;\n  ushort *temp_ptr_arr3;\n  int *temp_ptr_arr4;\n  ushort num1;\n  ushort num2;\n  ushort num3;\n  ushort num4;\n  ushort num5;\n  ushort num6;\n  int temp;\n  char *temp_arr [2];\n  \n  relocation_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  memory_address = get_memory_address_000056b0();\n  equal_char_ptr = (char *)find_equal_character_000056a0(relocation_offset,&DAT_00007a5c);\n  if (equal_char_ptr == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = equal_char_ptr;\n    DAT_1fff0ddc = equal_char_ptr;\n    initialize_data_and_process_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (result = compare_and_subtract_00004e52(), result != 0)) {\n    initialize_data_and_process_00005780(DAT_1fff0dd4);\n    result = find_end_of_string_00005ecc(equal_char_ptr);\n    DAT_1fff0dd4 = reallocate_memory_00004bd0(relocation_offset,result + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string_00005ebc(DAT_1fff0dd4,equal_char_ptr);\n    }\n    if (*equal_char_ptr == ':') {\n      equal_char_ptr = equal_char_ptr + 1;\n    }\n    result = process_data_00005e68(equal_char_ptr,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&temp);\n    if (0 < result) {\n      temp_ptr = equal_char_ptr + temp;\n      if (equal_char_ptr[temp] == '-') {\n        temp_ptr = temp_ptr + 1;\n        result = -1;\n      }\n      else {\n        if (equal_char_ptr[temp] == '+') {\n          temp_ptr = temp_ptr + 1;\n        }\n        result = 1;\n      }\n      num2 = 0;\n      num3 = 0;\n      temp_ptr_arr1 = &num2;\n      temp_ptr_arr2 = &temp;\n      temp_ptr_arr3 = &num3;\n      temp_ptr_arr4 = &temp;\n      result2 = process_data_00005e68(temp_ptr,\"%hu%n:%hu%n:%hu%n\",&num1,&temp,&num2,&temp,\n                           &num3,&temp);\n      if (0 < result2) {\n        *(uint *)(memory_address + 0x28) =\n             ((uint)num1 * 0xe10 + (uint)num2 * 0x3c + (uint)num3) * result;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        temp_ptr = temp_ptr + temp;\n        result = process_data_00005e68(temp_ptr,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&temp,temp_ptr_arr1,temp_ptr_arr2,temp_ptr_arr3,\n                             temp_ptr_arr4);\n        if (result < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(memory_address + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          equal_char_ptr = temp_ptr + temp;\n          if (temp_ptr[temp] == '-') {\n            equal_char_ptr = equal_char_ptr + 1;\n            result = -1;\n          }\n          else {\n            if (temp_ptr[temp] == '+') {\n              equal_char_ptr = equal_char_ptr + 1;\n            }\n            result = 1;\n          }\n          num1 = 0;\n          num2 = 0;\n          num3 = 0;\n          temp = 0;\n          result2 = process_data_00005e68(equal_char_ptr,\"%hu%n:%hu%n:%hu%n\",&num1,&temp,&num2,&temp,\n                               &num3,&temp);\n          if (result2 < 1) {\n            result = *(int *)(memory_address + 0x28) + -0xe10;\n          }\n          else {\n            result = ((uint)num1 * 0xe10 + (uint)num2 * 0x3c + (uint)num3) * result;\n          }\n          *(int *)(memory_address + 0x50) = result;\n          equal_char_ptr = equal_char_ptr + temp;\n          flag = false;\n          result = memory_address;\n          while( true ) {\n            if (*equal_char_ptr == ',') {\n              equal_char_ptr = equal_char_ptr + 1;\n            }\n            if (*equal_char_ptr == 'M') {\n              result2 = process_data_00005e68(equal_char_ptr,\"M%hu%n.%hu%n.%hu%n\",&num4,&temp,&num5,\n                                   &temp,&num6,&temp);\n              if (result2 != 3) {\n                return;\n              }\n              if (0xb < num4 - 1) {\n                return;\n              }\n              if (4 < num5 - 1) {\n                return;\n              }\n              if (6 < num6) {\n                return;\n              }\n              *(uint *)(result + 0xc) = (uint)num4;\n              *(uint *)(result + 0x10) = (uint)num5;\n              *(undefined *)(result + 8) = 0x4d;\n              *(uint *)(result + 0x14) = (uint)num6;\n              temp_ptr = equal_char_ptr + temp;\n            }\n            else {\n              if (*equal_char_ptr == 'J') {\n                equal_char_ptr = equal_char_ptr + 1;\n                temp_var = 0x4a;\n              }\n              else {\n                temp_var = 0x44;\n              }\n              num6 = parse_integer_from_relocation_entry_00005fd8(equal_char_ptr,temp_arr,10);\n              temp_ptr = temp_arr[0];\n              if (temp_arr[0] == equal_char_ptr) {\n                if (flag) {\n                  *(undefined *)(memory_address + 0x30) = 0x4d;\n                  *(undefined4 *)(memory_address + 0x34) = 0xb;\n                  *(undefined4 *)(memory_address + 0x38) = 1;\n                  *(undefined4 *)(memory_address + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(memory_address + 8) = 0x4d;\n                  *(undefined4 *)(memory_address + 0xc) = 3;\n                  *(undefined4 *)(memory_address + 0x10) = 2;\n                  *(undefined4 *)(memory_address + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(result + 8) = temp_var;\n                *(uint *)(result + 0x14) = (uint)num6;\n              }\n            }\n            num1 = 2;\n            num2 = 0;\n            num3 = 0;\n            temp = 0;\n            if (*temp_ptr == '/') {\n              process_data_00005e68(temp_ptr,&DAT_00007a85,&num1,&temp,&num2,&temp,&num3,\n                           &temp);\n            }\n            *(uint *)(result + 0x18) =\n                 (uint)num1 * 0xe10 + (uint)num2 * 0x3c + (uint)num3;\n            result = result + 0x28;\n            equal_char_ptr = temp_ptr + temp;\n            if (flag) break;\n            flag = true;\n          }\n          calculate_day_of_week_00004f98(*(undefined4 *)(memory_address + 4));\n          DAT_1fff0ddc = *(char **)(memory_address + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(memory_address + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "decode_relocation_entry_00005100",
                "dVar1": "relocation_offset",
                "iVar2": "memory_address",
                "pcVar3": "equal_char_ptr",
                "iVar4": "result",
                "iVar5": "result2",
                "uVar6": "temp_var",
                "pcVar7": "temp_ptr",
                "bVar8": "flag",
                "puVar9": "temp_ptr_arr1",
                "piVar10": "temp_ptr_arr2",
                "puVar11": "temp_ptr_arr3",
                "piVar12": "temp_ptr_arr4",
                "local_3c": "num1",
                "local_3a": "num2",
                "local_38": "num3",
                "local_36": "num4",
                "local_34": "num5",
                "local_32": "num6",
                "local_30": "temp",
                "local_2c": "temp_arr"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int input,uint value,int *array,undefined4 flag)\n\n{\n  int result;\n  uint data;\n  undefined *ptr;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initialize();\n  }\n  if (array == &DAT_000079b8) {\n    array = *(int **)(input + 4);\n  }\n  else if (array == (int *)&DAT_000079d8) {\n    array = *(int **)(input + 8);\n  }\n  else if (array == (int *)&DAT_00007998) {\n    array = *(int **)(input + 0xc);\n  }\n  array[2] = array[6];\n  data = (uint)*(ushort *)(array + 3);\n  result = data << 0x1c;\n  if (((result < 0) && (data = array[4], data != 0)) ||\n     (result = processData_000054041(input,array,result,data,flag), result == 0)) {\n    result = *array - array[4];\n    value = value & 0xff;\n    if ((result < array[5]) || (result = processData_000054042(input,array), result == 0)) {\n      array[2] = array[2] + -1;\n      ptr = (undefined *)*array;\n      *array = (int)(ptr + 1);\n      *ptr = (char)value;\n      if (array[5] != result + 1) {\n        if (-1 < (int)((uint)*(ushort *)(array + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      result = processData_000054042(input,array);\n      if (result == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "input",
                "param_2": "value",
                "param_3": "array",
                "param_4": "flag",
                "iVar1": "result",
                "uVar2": "data",
                "puVar3": "ptr",
                "initialize_and_process_data_000042a4": "initialize",
                "process_data_000054a8": "processData1",
                "process_data_00004158": "processData2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *outputPtr,undefined4 *inputPtr)\n\n{\n  ushort tempVar1;\n  dword tempVar2;\n  ushort tempVar3;\n  uint tempVar4;\n  uint tempVar5;\n  \n  tempVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_and_process_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputPtr == &DAT_000079b8) {\n    inputPtr = *(undefined4 **)(tempVar2 + 4);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_000079d8) {\n    inputPtr = *(undefined4 **)(tempVar2 + 8);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_00007998) {\n    inputPtr = *(undefined4 **)(tempVar2 + 0xc);\n  }\n  tempVar4 = (uint)*(ushort *)(inputPtr + 3);\n  tempVar3 = *(ushort *)(inputPtr + 3);\n  if (-1 < (int)(tempVar4 << 0x1c)) {\n    if (-1 < (int)(tempVar4 << 0x1b)) {\n      *outputPtr = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(tempVar4 << 0x1d) < 0) {\n      if ((undefined4 *)inputPtr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputPtr[0xd] != inputPtr + 0x11) {\n          initialize_data_and_process_00004b34(outputPtr);\n        }\n        inputPtr[0xd] = 0;\n      }\n      *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) & 0xffdb;\n      inputPtr[1] = 0;\n      *inputPtr = inputPtr[4];\n    }\n    *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) | 8;\n  }\n  if ((inputPtr[4] == 0) && ((*(ushort *)(inputPtr + 3) & 0x280) != 0x200)) {\n    update_memory_and_values_00005700(outputPtr,inputPtr);\n  }\n  tempVar1 = *(ushort *)(inputPtr + 3);\n  tempVar4 = (uint)tempVar1;\n  tempVar3 = *(ushort *)(inputPtr + 3);\n  tempVar5 = tempVar4 & 1;\n  if ((tempVar1 & 1) == 0) {\n    if (-1 < (int)(tempVar4 << 0x1e)) {\n      tempVar5 = inputPtr[5];\n    }\n    inputPtr[2] = tempVar5;\n  }\n  else {\n    inputPtr[2] = 0;\n    inputPtr[6] = -inputPtr[5];\n  }\n  if (inputPtr[4] != 0) {\n    return 0;\n  }\n  if ((tempVar1 & 0x80) == 0) {\n    return tempVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputPtr + 3) = tempVar3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "outputPtr",
                "param_2": "inputPtr",
                "uVar1": "tempVar1",
                "dVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          initialize_data_and_process_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    update_memory_and_values_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n"
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_update_remainder_00005584",
            "code": "\nvoid divide_and_update_remainder_00005584(uint *quotient_ptr,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotient_ptr = quotient;\n  quotient_ptr[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_update_remainder_00005584",
                "param_1": "quotient_ptr",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_equal_character_0000562c",
            "code": "\nint findEqualCharacter_0000562c(undefined4 param,char *string,int *outputIndex)\n\n{\n  char currentChar;\n  int *ptrArray;\n  int difference;\n  char *currentPosition;\n  int *currentPointer;\n  int stringIndex;\n  \n  initialize_memory_00005fec();\n  currentPosition = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentChar = *currentPosition;\n      if (currentChar == '\\0') {\n        stringIndex = (int)currentPosition - (int)string;\n        ptrArray = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          currentPointer = ptrArray;\n          if (*currentPointer == 0) break;\n          difference = calculate_difference_00004e66(*currentPointer,string,stringIndex);\n          ptrArray = currentPointer + 1;\n          if ((difference == 0) && (difference = *currentPointer, *(char *)(difference + stringIndex) == '=')) {\n            *outputIndex = (int)((int)currentPointer - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            initialize_memory_00005ff8(param);\n            return difference + stringIndex + 1;\n          }\n        }\n        break;\n      }\n      currentPosition = currentPosition + 1;\n    } while (currentChar != '=');\n  }\n  initialize_memory_00005ff8(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_equal_character_0000562c",
                "param_1": "param",
                "param_2": "string",
                "param_3": "outputIndex",
                "cVar1": "currentChar",
                "piVar2": "ptrArray",
                "iVar3": "difference",
                "pcVar4": "currentPosition",
                "piVar5": "currentPointer",
                "iVar6": "stringIndex"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_equal_character_000056a0",
            "code": "\nvoid find_equal_character_000056a0(undefined4 input_data,undefined4 search_char,undefined4 output_char,undefined4 additional_param)\n\n{\n  undefined4 input_char;\n  undefined4 output_data;\n  \n  input_char = search_char;\n  output_data = output_char;\n  find_equal_character_000056a0_0000562c(input_data,search_char,&input_char,additional_param,input_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_equal_character_000056a0",
                "param_1": "input_data",
                "param_2": "search_char",
                "param_3": "output_char",
                "param_4": "additional_param",
                "uStack_c": "input_char",
                "uStack_8": "output_data"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_and_update_values_000056b8",
            "code": "\nundefined4 checkAndUpdateValues_000056b8(undefined4 value1,int value2,undefined4 *updatedValue3,uint *result)\n\n{\n  int returnValue;\n  undefined4 updatedValue2;\n  undefined tempVariable [4];\n  uint tempVariable2;\n  \n  if ((*(short *)(value2 + 0xe) < 0) ||\n     (returnValue = set_value_and_return_00000514(value1,(int)*(short *)(value2 + 0xe),tempVariable), returnValue < 0)) {\n    *result = 0;\n    if ((int)((uint)*(ushort *)(value2 + 0xc) << 0x18) < 0) {\n      updatedValue2 = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *result = (uint)((tempVariable2 & 0xf000) == 0x2000);\n  }\n  updatedValue2 = 0x400;\nLAB_000056f8:\n  *updatedValue3 = updatedValue2;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_and_update_values_000056b8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "updatedValue3",
                "param_4": "result",
                "iVar1": "returnValue",
                "uVar2": "updatedValue2",
                "auStack_68": "tempVariable",
                "local_64": "tempVariable2"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "update_memory_and_values_00005700",
            "code": "\nvoid updateMemoryAndValues_00005700(int baseAddress,int *memoryBlock)\n\n{\n  ushort valueCheckResult;\n  int memoryReallocated;\n  int newSize;\n  int *updatedMemoryBlock;\n  \n  if (-1 < (int)((uint)*(ushort *)(memoryBlock + 3) << 0x1e)) {\n    newSize = baseAddress;\n    updatedMemoryBlock = memoryBlock;\n    valueCheckResult = check_and_update_values_000056b8(baseAddress,memoryBlock,&newSize,&updatedMemoryBlock);\n    memoryReallocated = reallocate_memory_00004bd0(baseAddress,newSize);\n    if (memoryReallocated != 0) {\n      *(undefined **)(baseAddress + 0x28) = &DAT_0000423d;\n      *memoryBlock = memoryReallocated;\n      *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) | 0x80;\n      memoryBlock[5] = newSize;\n      memoryBlock[4] = memoryReallocated;\n      if ((updatedMemoryBlock != (int *)0x0) &&\n         (memoryReallocated = check_validity_00000534(baseAddress,(int)*(short *)((int)memoryBlock + 0xe)), memoryReallocated != 0)) {\n        *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memoryBlock + 3) = valueCheckResult | *(ushort *)(memoryBlock + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memoryBlock + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memoryBlock + 3) = *(ushort *)(memoryBlock + 3) & 0xfffc | 2;\n  }\n  *memoryBlock = (int)memoryBlock + 0x47;\n  memoryBlock[4] = (int)memoryBlock + 0x47;\n  memoryBlock[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "update_memory_and_values_00005700",
                "param_1": "baseAddress",
                "param_2": "memoryBlock",
                "uVar1": "valueCheckResult",
                "iVar2": "memoryReallocated",
                "local_18": "newSize",
                "local_14": "updatedMemoryBlock"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_data_and_process_00005780",
            "code": "\nvoid initialize_data_and_process_00005780(undefined4 input_parameter)\n\n{\n  initialize_data_and_process_00005780_00004b34(array_of_elf32_relocations[16].r_offset,input_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_data_and_process_00005780",
                "param_1": "input_parameter",
                "Elf32_Rel_ARRAY_1fff0200": "array_of_elf32_relocations"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "update_data_000057a8",
            "code": "\nint updateData_000057a8(undefined4 status,int data,undefined4 *dataPointer)\n\n{\n  int remainingCount;\n  undefined *currentPointer;\n  \n  remainingCount = dataPointer[2] + -1;\n  dataPointer[2] = remainingCount;\n  if ((remainingCount < 0) && ((remainingCount < (int)dataPointer[6] || (data == 10)))) {\n    remainingCount = process_data_00005404();\n    return remainingCount;\n  }\n  currentPointer = (undefined *)*dataPointer;\n  *dataPointer = currentPointer + 1;\n  *currentPointer = (char)data;\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "update_data_000057a8",
                "param_1": "status",
                "param_2": "data",
                "param_3": "dataPointer",
                "iVar1": "remainingCount",
                "puVar2": "currentPointer"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint process_data_000057d2(undefined4 input_1,undefined4 input_2,undefined *data_array,int array_length)\n\n{\n  int updated_elements;\n  undefined *end_of_data;\n  int remaining_elements;\n  \n  end_of_data = data_array + array_length;\n  remaining_elements = array_length;\n  do {\n    if (data_array == end_of_data) {\n      return 0;\n    }\n    updated_elements = update_data_000057a8(input_1,*data_array,input_2,array_length,remaining_elements);\n    array_length = updated_elements + 1;\n    data_array = data_array + 1;\n  } while (array_length != 0);\n  return updated_elements;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data_array",
                "param_4": "array_length",
                "iVar1": "updated_elements",
                "puVar2": "end_of_data",
                "iVar3": "remaining_elements"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_and_format_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processAndFormatData_000057f8(int data,undefined4 *settings,byte *inputString,int *outputLength)\n\n{\n  int result;\n  int processResult;\n  int *outputLengthPtr;\n  bool isNumeric;\n  byte *ptrChar;\n  int unusedArg;\n  byte *ptrChar2;\n  int *outputLengthCounter;\n  uint formatFlags;\n  int decimalWidth;\n  undefined4 unusedStackValue;\n  int nextNumericArg;\n  int formattedStringLength;\n  byte conversionSpecifier;\n  undefined formatFlag1;\n  undefined formatFlag2;\n  undefined alignmentFlag;\n  undefined4 unusedLocalVariable;\n  \n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    initialize_and_process_data_000042a4();\n  }\n  if (settings == &DAT_000079b8) {\n    settings = *(undefined4 **)(data + 4);\n  }\n  else if (settings == (undefined4 *)&DAT_000079d8) {\n    settings = *(undefined4 **)(data + 8);\n  }\n  else if (settings == (undefined4 *)&DAT_00007998) {\n    settings = *(undefined4 **)(data + 0xc);\n  }\n  if ((-1 < (int)(settings[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(settings + 3) << 0x16))) {\n    FUNC_000045e8(settings[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(settings + 3) << 0x1c)) || (settings[4] == 0)) &&\n     (result = process_data_000054a8(data,settings), result != 0)) {\n    if ((-1 < (int)(settings[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(settings + 3) << 0x16)))\n    {\n      FUNC_000045ec(settings[0x16]);\n    }\n    return -1;\n  }\n  formattedStringLength = 0;\n  formatFlag1 = 0x20;\n  formatFlag2 = 0x30;\n  ptrChar2 = inputString;\n  outputLengthCounter = outputLength;\nLAB_0000588e:\n  ptrChar = ptrChar2;\n  if (*ptrChar != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  ptrChar2 = ptrChar + 1;\n  if (*ptrChar == 0x25) {\nLAB_0000589a:\n    result = (int)ptrChar - (int)inputString;\n    if (result != 0) {\n      processResult = process_data_000057d2(data,settings,inputString,result);\n      if (processResult == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(settings[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(settings + 3) << 0x16))) {\n          FUNC_000045ec(settings[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(settings + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return formattedStringLength;\n      }\n      formattedStringLength = formattedStringLength + result;\n    }\n    if (*ptrChar == 0) goto LAB_00005a06;\n    decimalWidth = -1;\n    unusedStackValue = 0;\n    formatFlags = 0;\n    nextNumericArg = 0;\n    alignmentFlag = 0;\n    unusedLocalVariable = 0;\n    ptrChar2 = ptrChar + 1;\n    while( true ) {\n      ptrChar = ptrChar2 + 1;\n      result = find_byte_pattern_00006010(\"#-0+ \",*ptrChar2,5);\n      if (result == 0) break;\n      formatFlags = 1 << (result - 0x7bfcU & 0xff) | formatFlags;\n      ptrChar2 = ptrChar;\n    }\n    if ((int)(formatFlags << 0x1b) < 0) {\n      alignmentFlag = 0x20;\n    }\n    if ((int)(formatFlags << 0x1c) < 0) {\n      alignmentFlag = 0x2b;\n    }\n    if (*ptrChar2 == 0x2a) {\n      outputLengthPtr = outputLengthCounter + 1;\n      nextNumericArg = *outputLengthCounter;\n      outputLengthCounter = outputLengthPtr;\n      if (nextNumericArg < 0) {\n        nextNumericArg = -nextNumericArg;\n        formatFlags = formatFlags | 2;\n      }\n    }\n    else {\n      isNumeric = false;\n      result = nextNumericArg;\n      ptrChar = ptrChar2;\n      while( true ) {\n        if (9 < *ptrChar - 0x30) break;\n        result = result * 10 + (*ptrChar - 0x30);\n        isNumeric = true;\n        ptrChar = ptrChar + 1;\n      }\n      if (isNumeric) {\n        nextNumericArg = result;\n      }\n    }\n    if (*ptrChar == 0x2e) {\n      if (ptrChar[1] == 0x2a) {\n        decimalWidth = *outputLengthCounter;\n        if (decimalWidth < 0) {\n          decimalWidth = -1;\n        }\n        ptrChar = ptrChar + 2;\n        outputLengthCounter = outputLengthCounter + 1;\n      }\n      else {\n        isNumeric = false;\n        decimalWidth = 0;\n        result = 0;\n        while( true ) {\n          ptrChar = ptrChar + 1;\n          if (9 < *ptrChar - 0x30) break;\n          result = result * 10 + (*ptrChar - 0x30);\n          isNumeric = true;\n        }\n        if (isNumeric) {\n          decimalWidth = result;\n        }\n      }\n    }\n    result = find_byte_pattern_00006010(&DAT_00007c02,*ptrChar,3);\n    if (result != 0) {\n      formatFlags = formatFlags | 0x40 << (result - 0x7c02U & 0xff);\n      ptrChar = ptrChar + 1;\n    }\n    inputString = ptrChar + 1;\n    conversionSpecifier = *ptrChar;\n    result = find_byte_pattern_00006010(\"efgEFG\",conversionSpecifier,6);\n    if (result == 0) {\n      unusedArg = format_data_00005b34(data,&formatFlags,settings,0x57d3,&outputLengthCounter);\n      if (unusedArg == -1) goto LAB_00005a06;\n    }\n    else {\n      outputLengthCounter = (int *)(((int)outputLengthCounter + 7U & 0xfffffff8) + 8);\n    }\n    formattedStringLength = formattedStringLength + unusedArg;\n    ptrChar2 = inputString;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_and_format_data_000057f8",
                "param_1": "data",
                "param_2": "settings",
                "param_3": "inputString",
                "param_4": "outputLength",
                "iVar1": "result",
                "iVar2": "processResult",
                "piVar3": "outputLengthPtr",
                "bVar4": "isNumeric",
                "pbVar5": "ptrChar",
                "pbVar6": "ptrChar2",
                "unaff_r7": "unusedArg",
                "local_8c": "outputLengthCounter",
                "local_88": "formatFlags",
                "local_84": "decimalWidth",
                "uStack_80": "unusedStackValue",
                "local_7c": "nextNumericArg",
                "local_74": "formattedStringLength",
                "local_70": "conversionSpecifier",
                "local_6f": "formatFlag1",
                "local_6e": "formatFlag2",
                "local_45": "alignmentFlag",
                "local_30": "unusedLocalVariable"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "process_data_00005a58",
            "code": "\nundefined4\nprocessData_00005a58(undefined4 inputValue,uint *data,uint *outputSize,undefined4 param4Value,code *callbackFunc)\n\n{\n  int counter;\n  undefined4 returnValue;\n  int callbackResult;\n  uint maxSize;\n  uint loopCounter;\n  bool isFlagSet;\n  \n  maxSize = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxSize = data[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (counter = 0; counter < (int)(data[3] - *outputSize); counter = counter + 1) {\n      callbackResult = (*callbackFunc)(inputValue,param4Value,(int)data + 0x19,1);\n      if (callbackResult == -1) goto LAB_00005afc;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n    maxSize = maxSize + 2;\n  }\n  counter = (*callbackFunc)(inputValue,param4Value,(int)data + 0x43,maxSize);\n  if (counter == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    maxSize = data[3];\n    isFlagSet = (*data & 6) == 4;\n    if (isFlagSet) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (isFlagSet) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxSize = maxSize + (data[2] - data[4]);\n    }\n    for (loopCounter = 0; maxSize != loopCounter; loopCounter = loopCounter + 1) {\n      counter = (*callbackFunc)(inputValue,param4Value,(int)data + 0x1a,1);\n      if (counter == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "process_data_00005a58",
                "param_1": "inputValue",
                "param_2": "data",
                "param_3": "outputSize",
                "param_4": "param4Value",
                "param_5": "callbackFunc",
                "iVar1": "counter",
                "uVar2": "returnValue",
                "iVar3": "callbackResult",
                "uVar4": "maxSize",
                "uVar5": "loopCounter",
                "bVar6": "isFlagSet"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_data_00005b34",
            "code": "\ncode * formatData_00005b34(undefined4 input,uint *data,undefined4 param3,code *callback,uint **nextData\n                   )\n\n{\n  bool isPositive;\n  byte flag;\n  int result;\n  code *returnValue;\n  char *hex;\n  int loopVar;\n  char *charPtr;\n  uint num;\n  uint *ptrVar;\n  uint base;\n  uint **ptrPtrVar;\n  char **ptrHex;\n  uint len;\n  char *output;\n  code *localCallback;\n  \n  flag = *(byte *)(data + 6);\n  charPtr = (char *)((int)data + 0x43);\n  localCallback = callback;\n  if (0x78 < flag) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)data + 0x42) = flag;\nLAB_00005bdc:\n    charPtr = (char *)((int)data + 0x42);\n    num = 1;\nLAB_00005d28:\n    data[4] = num;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (flag < 99) {\n    if (flag == 0) goto LAB_00005d06;\n    if (flag == 0x58) {\n      hex = \"0123456789ABCDEF\";\n      *(undefined *)((int)data + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(flag) {\n  case 99:\n    num = **nextData;\n    *nextData = *nextData + 1;\n    *(char *)((int)data + 0x42) = (char)num;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *data;\n    ptrVar = *nextData;\n    if ((int)(base << 0x18) < 0) {\n      num = *ptrVar;\n      *nextData = ptrVar + 1;\n    }\n    else {\n      num = *ptrVar;\n      *nextData = ptrVar + 1;\n      if ((base & 0x40) != 0) {\n        num = (uint)(short)num;\n      }\n    }\n    if ((int)num < 0) {\n      num = -num;\n      *(undefined *)((int)data + 0x43) = 0x2d;\n    }\n    hex = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ptrPtrVar = (uint **)*nextData;\n    base = *data;\n    num = data[5];\n    *nextData = (uint *)(ptrPtrVar + 1);\n    ptrVar = *ptrPtrVar;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *ptrVar = num;\n    }\n    else {\n      *(short *)ptrVar = (short)num;\n    }\nLAB_00005d06:\n    data[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    ptrVar = *nextData;\n    num = *data;\n    *nextData = ptrVar + 1;\n    if (((int)(num << 0x18) < 0) || (-1 < (int)(num << 0x19))) {\n      num = *ptrVar;\n    }\n    else {\n      num = (uint)*(ushort *)ptrVar;\n    }\n    hex = \"0123456789ABCDEF\";\n    if (flag == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *data = *data | 0x20;\n  case 0x78:\n    hex = \"0123456789abcdef\";\n    *(undefined *)((int)data + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *data;\n    num = **nextData;\n    *nextData = *nextData + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      num = num & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *data = base | 0x20;\n    }\n    if (num == 0) {\n      *data = *data & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ptrHex = (char **)*nextData;\n    *nextData = (uint *)(ptrHex + 1);\n    charPtr = *ptrHex;\n    result = find_byte_pattern_00006010(charPtr,0,data[1],ptrHex,input,data,param3);\n    if (result != 0) {\n      data[1] = result - (int)charPtr;\n    }\n    num = data[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)data + 0x43) = 0;\nLAB_00005c36:\n  len = data[1];\n  data[2] = len;\n  if (-1 < (int)len) {\n    *data = *data & 0xfffffffb;\n  }\n  output = charPtr;\n  if ((num != 0) || (len != 0)) {\n    do {\n      output = output + -1;\n      *output = hex[num - base * (num / base)];\n      isPositive = base <= num;\n      num = num / base;\n    } while (isPositive);\n  }\n  if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4])) {\n    output[-1] = '0';\n    output = output + -1;\n  }\n  data[4] = (int)charPtr - (int)output;\n  charPtr = output;\nLAB_00005c84:\n  result = process_data_00005a58(input,data,&localCallback,param3,callback);\n  if ((result == -1) || (result = (*callback)(input,param3,charPtr,data[4]), result == -1)) {\nLAB_00005c98:\n    returnValue = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (result = 0; result < (int)(data[3] - (int)localCallback); result = result + 1) {\n        loopVar = (*callback)(input,param3,(int)data + 0x19,1);\n        if (loopVar == -1) goto LAB_00005c98;\n      }\n    }\n    returnValue = (code *)data[3];\n    if ((int)(code *)data[3] < (int)localCallback) {\n      returnValue = localCallback;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_data_00005b34",
                "param_1": "input",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "callback",
                "param_5": "nextData",
                "bVar1": "isPositive",
                "bVar2": "flag",
                "iVar3": "result",
                "pcVar4": "returnValue",
                "pcVar5": "hex",
                "iVar6": "loopVar",
                "pcVar7": "charPtr",
                "puVar9": "ptrVar",
                "uVar8": "num",
                "uVar10": "base",
                "uVar13": "len",
                "local_24": "localCallback",
                "ppuVar11": "ptrPtrVar",
                "ppcVar12": "ptrHex",
                "pcVar14": "output"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_data_00005e10",
            "code": "\nuint processData_00005e10(int input,byte **data)\n\n{\n  int result;\n  uint uVar2;\n  byte *bytePtr;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    initializeAndProcessData();\n  }\n  if (data == (byte **)&DAT_000079b8) {\n    data = *(byte ***)(input + 4);\n  }\n  else if (data == (byte **)&DAT_000079d8) {\n    data = *(byte ***)(input + 8);\n  }\n  else if (data == (byte **)&DAT_00007998) {\n    data = *(byte ***)(input + 0xc);\n  }\n  result = processData_00005e10_2(input,data);\n  if (result == 0) {\n    data[1] = data[1] + -1;\n    bytePtr = *data;\n    *data = bytePtr + 1;\n    uVar2 = (uint)*bytePtr;\n  }\n  else {\n    uVar2 = 0xffffffff;\n  }\n  return uVar2;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_data_00005e10",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "pbVar3": "bytePtr",
                "initialize_and_process_data_000042a4": "initializeAndProcessData",
                "process_data_00006768": "processData_2"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_data_00005e68",
            "code": "\nvoid process_data_00005e68(undefined4 input_param,undefined4 size_param,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 input_copy;\n  undefined4 string_end;\n  undefined2 string_length;\n  undefined2 temp_var1;\n  undefined4 input_copy2;\n  undefined4 string_end_copy;\n  undefined *string_ptr;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  string_length = 0x204;\n  input_copy = input_param;\n  input_copy2 = input_param;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  string_end = find_end_of_string_00005ecc();\n  string_ptr = &LAB_00004dea_1;\n  temp_var2 = 0;\n  temp_var3 = 0;\n  temp_var1 = 0xffff;\n  string_end_copy = string_end;\n  process_data_00005e68_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&input_copy,size_param,&param_3_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_data_00005e68",
                "param_1": "input_param",
                "param_2": "size_param",
                "local_80": "input_copy",
                "local_7c": "string_end",
                "local_74": "string_length",
                "local_72": "temp_var1",
                "local_70": "input_copy2",
                "local_6c": "string_end_copy",
                "local_5c": "string_ptr",
                "local_4c": "temp_var2",
                "local_38": "temp_var3",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentCharacter;\n  \n  do {\n    currentCharacter = *source;\n    *destination = currentCharacter;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentCharacter != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentCharacter"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * find_end_of_string_00005ecc(char *string)\n\n{\n  char character;\n  char *next_character;\n  char *current_character;\n  \n  current_character = string;\n  do {\n    next_character = current_character + 1;\n    character = *current_character;\n    current_character = next_character;\n  } while (character != '\\0');\n  return next_character + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "string",
                "pcVar2": "next_character",
                "pcVar3": "current_character",
                "cVar1": "character"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_integer_00005edc",
            "code": "\nuint parseInteger_00005edc(undefined4 *result,byte *str,byte **endPtr,uint base)\n\n{\n  uint value;\n  uint ch;\n  byte isNegative;\n  int status;\n  uint digit;\n  uint maxValue;\n  byte *ptr;\n  byte *currentPtr;\n  \n  currentPtr = str;\n  do {\n    ptr = currentPtr;\n    currentPtr = ptr + 1;\n    ch = (uint)*ptr;\n    isNegative = (&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*currentPtr;\n    isNegative = 1;\n    currentPtr = ptr + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*currentPtr;\n    currentPtr = ptr + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00005f26;\n  if ((*currentPtr & 0xdf) == 0x58) {\n    ch = (uint)currentPtr[1];\n    base = 0x10;\n    currentPtr = currentPtr + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxValue = 0xffffffff / base;\n  value = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((status < 0) || (maxValue < value)) ||\n       ((maxValue == value && ((int)~(base * maxValue) < (int)digit)))) {\n      status = -1;\n    }\n    else {\n      value = value * base + digit;\n      status = 1;\n    }\n    ch = (uint)*currentPtr;\n    currentPtr = currentPtr + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    value = 0xffffffff;\n    if (endPtr == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      value = -value;\n    }\n    if (endPtr == (byte **)0x0) {\n      return value;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  str = currentPtr + -1;\nLAB_00005fb8:\n  *endPtr = str;\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_integer_00005edc",
                "param_1": "result",
                "param_2": "str",
                "param_3": "endPtr",
                "param_4": "base",
                "uVar1": "value",
                "uVar2": "ch",
                "bVar3": "isNegative",
                "iVar4": "status",
                "uVar5": "digit",
                "uVar6": "maxValue",
                "pbVar7": "ptr",
                "pbVar8": "currentPtr"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_integer_from_relocation_entry_00005fd8",
            "code": "\nvoid parseIntegerFromRelocationEntry_00005fd8(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  parse_integer_00005edc(relocationArray[16].r_offset,arg1,arg2,arg3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_integer_from_relocation_entry_00005fd8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_pattern_00006010",
            "code": "\nbyte * findBytePattern_00006010(uint *data,uint byteToFind,uint dataSize)\n\n{\n  byte byteFound;\n  char isByteZero;\n  char isByteZero2;\n  char isByteZero3;\n  char isByteZero4;\n  byte *result;\n  uint *ptr;\n  byte *nextPtr;\n  uint remainder;\n  uint sizeMod8;\n  uint xorResult;\n  uint modifiedXorResult;\n  bool byteFound3;\n  bool byteFound4;\n  bool isCarry3;\n  bool isCarry4;\n  \n  byteToFind = byteToFind & 0xff;\n  if ((int)dataSize < 0x10) {\njoined_r0x00006070:\n    do {\n      if (dataSize == 0) {\n        return (byte *)0x0;\n      }\n      ptr = (uint *)((int)data + 1);\n      byteFound = *(byte *)data;\n      dataSize = dataSize - 1;\n      data = ptr;\n    } while (byteFound != byteToFind);\n  }\n  else {\n    remainder = (uint)data & 7;\n    while( true ) {\n      if (remainder == 0) {\n        remainder = byteToFind | byteToFind << 8;\n        remainder = remainder | remainder << 0x10;\n        sizeMod8 = dataSize & 0xfffffff8;\n        do {\n          ptr = data + 2;\n          sizeMod8 = sizeMod8 - 8;\n          xorResult = *data ^ remainder;\n          modifiedXorResult = data[1] ^ remainder;\n          isByteZero = -((char)xorResult == '\\0');\n          isByteZero2 = -((char)(xorResult >> 8) == '\\0');\n          isByteZero3 = -((char)(xorResult >> 0x10) == '\\0');\n          isByteZero4 = -((char)(xorResult >> 0x18) == '\\0');\n          xorResult = CONCAT13(isByteZero4,CONCAT12(isByteZero3,CONCAT11(isByteZero2,isByteZero)));\n          byteFound3 = (char)modifiedXorResult != '\\0';\n          byteFound4 = (char)(modifiedXorResult >> 8) != '\\0';\n          isCarry3 = (char)(modifiedXorResult >> 0x10) != '\\0';\n          isCarry4 = (char)(modifiedXorResult >> 0x18) != '\\0';\n          modifiedXorResult = CONCAT13(isCarry4 * isByteZero4 - !isCarry4,\n                            CONCAT12(isCarry3 * isByteZero3 - !isCarry3,\n                                     CONCAT11(byteFound4 * isByteZero2 - !byteFound4,byteFound3 * isByteZero - !byteFound3)));\n          if (modifiedXorResult != 0) {\n            if (xorResult == 0) {\n              nextPtr = (byte *)((int)data + 5);\n              xorResult = modifiedXorResult;\n            }\n            else {\n              nextPtr = (byte *)((int)data + 1);\n            }\n            if ((xorResult & 1) == 0) {\n              byteFound3 = (xorResult & 0x100) == 0;\n              result = nextPtr + 1;\n              if (byteFound3) {\n                byteFound3 = (xorResult & 0x18000) == 0;\n                result = nextPtr + 2;\n              }\n              nextPtr = result;\n              if (byteFound3) {\n                nextPtr = nextPtr + 1;\n              }\n            }\n            return nextPtr + -1;\n          }\n          data = ptr;\n        } while (sizeMod8 != 0);\n        dataSize = dataSize & 7;\n        goto joined_r0x00006070;\n      }\n      ptr = (uint *)((int)data + 1);\n      dataSize = dataSize - 1;\n      if (*(byte *)data == byteToFind) break;\n      remainder = (uint)ptr & 7;\n      data = ptr;\n      if (dataSize == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_pattern_00006010",
                "param_1": "data",
                "param_2": "byteToFind",
                "param_3": "dataSize",
                "bVar1": "byteFound",
                "cVar2": "isByteZero",
                "cVar3": "isByteZero2",
                "cVar4": "isByteZero3",
                "cVar5": "isByteZero4",
                "pbVar6": "result",
                "puVar7": "ptr",
                "pbVar8": "nextPtr",
                "uVar9": "remainder",
                "uVar10": "sizeMod8",
                "uVar11": "xorResult",
                "uVar12": "modifiedXorResult",
                "bVar15": "isCarry3",
                "bVar16": "isCarry4"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_and_shift_000060b0",
            "code": "\nvoid copyAndShift_000060b0(int dest,undefined *src,int size)\n\n{\n  undefined *srcPtr;\n  undefined *endPtr;\n  undefined *destPtr;\n  \n  endPtr = src + size;\n  destPtr = (undefined *)(dest + -1);\n  if (src != endPtr) {\n    do {\n      srcPtr = src + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *src;\n      src = srcPtr;\n    } while (srcPtr != endPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_and_shift_000060b0",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "srcPtr",
                "puVar2": "endPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "reallocate_and_copy_data_000060cc",
            "code": "\nint reallocateAndCopyData_000060cc(undefined4 inputPointer,int inputSize,uint newSize,undefined4 extraParam)\n\n{\n  int returnValue;\n  uint sum;\n  \n  if (inputSize != 0) {\n    if (newSize == 0) {\n      initialize_data_and_process_00004b34();\n      returnValue = 0;\n    }\n    else {\n      sum = calculate_sum_00006964();\n      returnValue = inputSize;\n      if ((sum < newSize) && (returnValue = reallocate_memory_00004bd0(inputPointer,newSize), returnValue != 0)) {\n        copy_and_shift_000060b0(returnValue,inputSize,newSize);\n        initialize_data_and_process_00004b34(inputPointer,inputSize);\n      }\n    }\n    return returnValue;\n  }\n  returnValue = reallocate_memory_00004bd0(inputPointer,newSize,newSize,extraParam);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "reallocate_and_copy_data_000060cc",
                "param_1": "inputPointer",
                "param_2": "inputSize",
                "param_3": "newSize",
                "param_4": "extraParam",
                "iVar1": "returnValue",
                "uVar2": "sum"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "initialize_or_cleanup_data_00006192",
            "code": "\nundefined4 initialize_or_cleanup_data_00006192(undefined4 status_code,undefined4 *function_variables)\n\n{\n  if ((undefined4 *)variable_d != (undefined4 *)0x0) {\n    if ((undefined4 *)variable_d != function_variables + 0x11) {\n      initialize_data_and_process_00004b34();\n    }\n    current_variable_1 = current_variable_2;\n    variable_d = 0;\n    if (current_variable_2 != 0) {\n      *function_variables = variable_f;\n      return 0;\n    }\n  }\n  *function_variables = variable_4;\n  current_variable_1 = 0;\n  *(ushort *)(function_variables + 3) = *(ushort *)(function_variables + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "initialize_or_cleanup_data_00006192",
                "param_1": "status_code",
                "param_2": "function_variables",
                "param_2[0xd]": "variable_d",
                "param_2[1]": "current_variable_1",
                "param_2[0x10]": "current_variable_2",
                "param_2[4]": "variable_4",
                "param_2[0xf]": "variable_f"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "process_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint processData_000061cc(undefined4 param,byte **byteArray,byte *data,int **intPtr)\n\n{\n  int result;\n  uint value;\n  byte *nextByte;\n  uint byteValue;\n  int **outputList;\n  undefined buffer [256];\n  uint flags;\n  undefined4 baseValue;\n  uint pattern;\n  int returnValue;\n  int count;\n  undefined *bufferPtr;\n  int dataType;\n  undefined *functionPtr;\n  code *dataHandlingFunc;\n  \n  returnValue = 0;\n  count = 0;\n  functionPtr = &LAB_00006118_1;\n  dataHandlingFunc = initialize_or_cleanup_data_00006192 + 1;\n  outputList = intPtr;\n  bufferPtr = buffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      byteValue = (uint)*data;\n      if (byteValue == 0) {\n        return returnValue;\n      }\n      value = (byte)(&DAT_00007a99)[byteValue] & 8;\n      nextByte = data + 1;\n      if (((&DAT_00007a99)[byteValue] & 8) == 0) break;\n      while (((data = nextByte, 0 < (int)byteArray[1] ||\n              (result = (*dataHandlingFunc)(param,byteArray), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**byteArray] << 0x1c) < 0))) {\n        count = count + 1;\n        byteArray[1] = byteArray[1] + -1;\n        *byteArray = *byteArray + 1;\n      }\n    }\n    if (byteValue == 0x25) break;\nLAB_00006352:\n    if (((int)byteArray[1] < 1) && (result = (*dataHandlingFunc)(param,byteArray), result != 0))\n    goto LAB_00006380;\n    if (**byteArray != byteValue) {\n      return returnValue;\n    }\n    *byteArray = *byteArray + 1;\n    count = count + 1;\n    byteArray[1] = byteArray[1] + -1;\n    data = nextByte;\n  }\n  pattern = value;\n  flags = value;\n  if (data[1] == 0x2a) {\n    nextByte = data + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    value = (uint)*nextByte;\n    if (9 < value - 0x30) break;\n    nextByte = nextByte + 1;\n    pattern = (pattern * 10 + value) - 0x30;\n  }\n  result = find_byte_pattern_00006010(&DAT_00007c02,value,3);\n  if (result != 0) {\n    flags = 1 << (result - 0x7c02U & 0xff) | flags;\n    nextByte = nextByte + 1;\n  }\n  data = nextByte + 1;\n  value = (uint)*nextByte;\n  if (value < 0x79) {\n    if (0x57 < value) {\n      switch(value) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        data = (byte *)decode_buffer_0000687c(buffer,data);\n        flags = flags | 0x40;\n        dataType = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        dataType = 0;\n        break;\n      case 100:\n      case 0x75:\n        baseValue = 10;\nLAB_000063a0:\n        if (value < 0x6f) {\n          dataType = 3;\n        }\n        else {\n          dataType = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        dataType = 5;\n        break;\n      case 0x69:\n        baseValue = 0;\n        dataType = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*outputList = (short)count;\n            outputList = outputList + 1;\n          }\n          else {\n            **outputList = count;\n            outputList = outputList + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        baseValue = 8;\n        dataType = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        baseValue = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        dataType = 2;\n      }\nLAB_000063ac:\n      if (((int)byteArray[1] < 1) && (result = (*dataHandlingFunc)(param,byteArray), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**byteArray] << 0x1c) < 0) {\n          count = count + 1;\n          nextByte = byteArray[1];\n          byteArray[1] = nextByte + -1;\n          if ((int)(nextByte + -1) < 1) {\n            result = (*dataHandlingFunc)(param,byteArray);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *byteArray = *byteArray + 1;\n          }\n        }\n      }\n      if (dataType < 3) {\n        result = process_data_000064bc(param,&flags,byteArray,&outputList);\n      }\n      else {\n        if (4 < dataType) goto LAB_000061f6;\n        result = process_data_0000656c(param,&flags,byteArray,&outputList);\n      }\n      if (result == 1) {\n        return returnValue;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (returnValue == 0) {\nLAB_00006388:\n          returnValue = -1;\n        }\n        else if ((*(ushort *)(byteArray + 3) & 0x40) != 0) {\n          returnValue = -1;\n        }\n        return returnValue;\n      }\n      goto LAB_000061f6;\n    }\n    nextByte = data;\n    if (value == 0x25) goto LAB_00006352;\n    if (value < 0x26) {\n      if (value != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (value - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  dataType = 3;\n  baseValue = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "process_data_000061cc",
                "param_1": "param",
                "param_2": "byteArray",
                "param_3": "data",
                "param_4": "intPtr",
                "iVar1": "result",
                "uVar2": "value",
                "pbVar3": "nextByte",
                "uVar4": "byteValue",
                "local_2b0": "outputList",
                "auStack_2ac": "buffer",
                "local_1ac": "flags",
                "local_1a8": "baseValue",
                "local_1a4": "pattern",
                "local_1a0": "returnValue",
                "local_19c": "count",
                "local_198": "bufferPtr",
                "local_194": "dataType",
                "local_30": "functionPtr",
                "local_2c": "dataHandlingFunc"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 processData_000064bc(undefined4 value,uint *params,byte **data,undefined4 *result)\n\n{\n  int errorCode;\n  uint flag;\n  byte **ptrData;\n  byte *ptrByte;\n  byte *ptrByte2;\n  byte *ptrByte3;\n  int count;\n  \n  if (params[2] == 0) {\n    if (params[6] == 0) {\n      flag = 1;\n    }\n    else {\n      flag = 0xffffffff;\n    }\n    params[2] = flag;\n  }\n  if (-1 < (int)(*params << 0x1b)) {\n    ptrData = (byte **)*result;\n    *result = ptrData + 1;\n    ptrByte2 = *ptrData;\n  }\n  count = 0;\n  do {\n    flag = params[6];\n    if (flag != 0) {\n      if (flag == 1) {\n        if (*(char *)(params[5] + (uint)**data) == '\\0') {\n          if (count == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*params & 0x10) == 0) && (params[3] = params[3] + 1, params[6] != 0)) {\n            *ptrByte2 = 0;\n          }\n          params[4] = count + params[4];\n          return 0;\n        }\n      }\n      else if ((flag != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**data] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    ptrByte3 = ptrByte2;\n    if (-1 < (int)(*params << 0x1b)) {\n      ptrByte3 = ptrByte2 + 1;\n      *ptrByte2 = **data;\n    }\n    ptrByte = data[1];\n    *data = *data + 1;\n    flag = params[2] - 1;\n    data[1] = ptrByte + -1;\n    count = count + 1;\n    params[2] = flag;\n    ptrByte2 = ptrByte3;\n    if ((flag == 0) ||\n       (((int)(ptrByte + -1) < 1 &&\n        (errorCode = (*(code *)params[0x60])(value,data,flag,(code *)params[0x60],result),\n        errorCode != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "value",
                "param_2": "params",
                "param_3": "data",
                "param_4": "result",
                "iVar1": "errorCode",
                "uVar2": "flag",
                "ppbVar3": "ptrData",
                "pbVar4": "ptrByte",
                "unaff_r6": "ptrByte2",
                "pbVar5": "ptrByte3",
                "iVar6": "count"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 input,uint *config,byte **buffer,undefined4 *output)\n\n{\n  int result;\n  undefined4 decodedValue;\n  code *decodeFunc;\n  uint temp;\n  byte *bytePtr;\n  uint temp2;\n  undefined4 *outputPtr;\n  uint *bufferPtr;\n  uint *tempPtr;\n  uint *configPtr;\n  int offset;\n  int counter;\n  undefined *patterns [4];\n  \n  patterns[0] = &DAT_00007c2f;\n  patterns[1] = &DAT_00007c32;\n  patterns[2] = &DAT_00007c35;\n  decodeFunc = (code *)&UNK_00004f81;\n  if (config[6] != 3) {\n    decodeFunc = (code *)&UNK_00005fd5;\n  }\n  temp2 = config[2];\n  temp = temp2 - 1;\n  if (0x15c < temp) {\n    offset = temp2 - 0x15d;\n    temp2 = 0x15d;\n  }\n  if (0x15c < temp) {\n    config[2] = temp2;\n  }\n  configPtr = config + 7;\n  if (temp < 0x15d) {\n    offset = 0;\n  }\n  *config = *config | 0xd00;\n  counter = 0;\n  tempPtr = configPtr;\n  do {\n    result = find_byte_pattern_00006010(patterns[counter],**buffer,2);\n    if (result != 0) {\n      if (counter == 1) {\n        if (config[1] == 0) {\n          config[1] = 8;\n          *config = *config | 0x200;\n        }\n        temp = *config & 0xfffffaff;\nLAB_000065f4:\n        *config = temp;\n      }\n      else if (counter == 2) {\n        if ((*config & 0x600) != 0x200) goto LAB_00006624;\n        config[1] = 0x10;\n        temp = *config | 0x100;\n        goto LAB_000065f4;\n      }\n      temp = config[2];\n      config[2] = temp - 1;\n      if (temp != 0) {\n        bytePtr = *buffer;\n        *buffer = bytePtr + 1;\n        bufferPtr = (uint *)((int)tempPtr + 1);\n        *(byte *)tempPtr = *bytePtr;\n        bytePtr = buffer[1];\n        buffer[1] = bytePtr + -1;\n        tempPtr = bufferPtr;\n        if (((int)(bytePtr + -1) < 1) &&\n           (result = (*(code *)config[0x60])(input,buffer), result != 0)) {\n          counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    counter = counter + 1;\n  } while (counter != 3);\n  if (config[1] == 0) {\n    config[1] = 10;\n  }\n  decode_buffer_0000687c(config[5],\"01234567]\" + (8 - config[1]));\n  counter = 0;\n  while( true ) {\n    bufferPtr = tempPtr;\n    if (config[2] == 0) break;\n    bytePtr = *buffer;\n    temp = (uint)*bytePtr;\n    if (*(char *)(config[5] + temp) == '\\0') break;\n    if ((temp == 0x30) && ((int)(*config << 0x14) < 0)) {\n      counter = counter + 1;\n      if (offset != 0) {\n        offset = offset + -1;\n        config[2] = config[2] + 1;\n      }\n    }\n    else {\n      *config = *config & 0xfffff6ff;\n      bufferPtr = (uint *)((int)tempPtr + 1);\n      *(byte *)tempPtr = *bytePtr;\n    }\n    bytePtr = buffer[1];\n    buffer[1] = bytePtr + -1;\n    if ((int)(bytePtr + -1) < 1) {\n      result = (*(code *)config[0x60])(input,buffer);\n      if (result != 0) break;\n    }\n    else {\n      *buffer = *buffer + 1;\n    }\n    config[2] = config[2] - 1;\n    tempPtr = bufferPtr;\n  }\nLAB_000066ca:\n  if ((int)(*config << 0x17) < 0) {\n    if (configPtr < bufferPtr) {\n      (*(code *)config[0x5f])(input,*(byte *)((int)bufferPtr + -1),buffer);\n      bufferPtr = (uint *)((int)bufferPtr + -1);\n    }\n    if (bufferPtr == configPtr) {\n      return 1;\n    }\n  }\n  if ((*config & 0x10) == 0) {\n    *(byte *)bufferPtr = 0;\n    decodedValue = (*decodeFunc)(input,configPtr,0,config[1]);\n    outputPtr = (undefined4 *)*output;\n    temp = *config;\n    *output = outputPtr + 1;\n    outputPtr = (undefined4 *)*outputPtr;\n    if ((temp & 0x20) == 0) {\n      if ((int)(temp << 0x1f) < 0) {\n        *(short *)outputPtr = (short)decodedValue;\n      }\n      else {\n        *outputPtr = decodedValue;\n      }\n    }\n    else {\n      *outputPtr = decodedValue;\n    }\n    config[3] = config[3] + 1;\n  }\n  config[4] = (uint)((int)bufferPtr + config[4] + (counter - (int)configPtr));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "config",
                "param_3": "buffer",
                "param_4": "output",
                "iVar1": "result",
                "uVar2": "decodedValue",
                "pcVar3": "decodeFunc",
                "uVar4": "temp",
                "pbVar5": "bytePtr",
                "uVar6": "temp2",
                "puVar7": "outputPtr",
                "puVar8": "bufferPtr",
                "puVar9": "tempPtr",
                "puVar10": "configPtr",
                "unaff_r9": "offset",
                "iVar11": "counter",
                "local_34": "patterns"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *pointer1,undefined4 *pointer2,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 shortValue1;\n  int intValue1;\n  undefined4 returnValue;\n  ushort shortValue2;\n  uint uintValue;\n  \n  if ((pointer1 != (undefined4 *)0x0) && (pointer1[6] == 0)) {\n    initializeAndProcessData();\n  }\n  if (pointer2 == &DAT_000079b8) {\n    pointer2 = (undefined4 *)pointer1[1];\n  }\n  else if (pointer2 == (undefined4 *)&DAT_000079d8) {\n    pointer2 = (undefined4 *)pointer1[2];\n  }\n  else if (pointer2 == (undefined4 *)&DAT_00007998) {\n    pointer2 = (undefined4 *)pointer1[3];\n  }\n  shortValue2 = *(ushort *)(pointer2 + 3);\n  pointer2[1] = 0;\n  uintValue = (uint)*(ushort *)(pointer2 + 3);\n  if ((int)(uintValue << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(uintValue << 0x1d) < 0) {\n    if ((undefined4 *)pointer2[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)pointer2[0xd] != pointer2 + 0x11) {\n        initializeDataAndProcess(pointer1);\n      }\n      pointer2[1] = pointer2[0x10];\n      pointer2[0xd] = 0;\n      if (pointer2[0x10] != 0) {\n        *pointer2 = pointer2[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(uintValue << 0x1b)) {\n      *pointer1 = 9;\n      shortValue2 = shortValue2 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(uintValue << 0x1c) < 0) {\n      intValue1 = processData_000067681(pointer1,pointer2,uintValue << 0x1c,uintValue,value2);\n      if (intValue1 != 0) {\n        return 0xffffffff;\n      }\n      pointer2[2] = 0;\n      *(ushort *)(pointer2 + 3) = *(ushort *)(pointer2 + 3) & 0xfff7;\n      pointer2[6] = 0;\n    }\n    *(ushort *)(pointer2 + 3) = *(ushort *)(pointer2 + 3) | 4;\n  }\n  if (pointer2[4] == 0) {\n    updateMemoryAndValues(pointer1,pointer2);\n  }\n  shortValue2 = *(ushort *)(pointer2 + 3);\n  shortValue1 = *(undefined2 *)(pointer2 + 3);\n  if ((shortValue2 & 3) != 0) {\n    *(undefined2 *)(pointer2 + 3) = 1;\n    processData_000067682(0x1fff0284,&label1);\n    *(undefined2 *)(pointer2 + 3) = shortValue1;\n    if ((shortValue2 & 9) == 9) {\n      processData_000067683(pointer1,pointer2);\n    }\n  }\n  returnValue = pointer2[4];\n  *pointer2 = returnValue;\n  intValue1 = (*(code *)pointer2[9])(pointer1,pointer2[8],returnValue,pointer2[5]);\n  pointer2[1] = intValue1;\n  if (0 < intValue1) {\n    return 0;\n  }\n  shortValue2 = *(ushort *)(pointer2 + 3);\n  if (intValue1 != 0) {\n    returnValue = 0;\n  }\n  else {\n    shortValue2 = shortValue2 | 0x20;\n  }\n  if (intValue1 != 0) {\n    pointer2[1] = returnValue;\n    shortValue2 = shortValue2 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(pointer2 + 3) = shortValue2;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "shortValue1",
                "iVar2": "intValue1",
                "uVar3": "returnValue",
                "uVar4": "shortValue2",
                "uVar5": "uintValue",
                "initialize_and_process_data_000042a4": "initializeAndProcessData",
                "initialize_data_and_process_00004b34": "initializeDataAndProcess",
                "process_data_00004158": "processData1",
                "update_memory_and_values_00005700": "updateMemoryAndValues",
                "process_data_000043a0": "processData2",
                "process_data_0000404c": "processData3",
                "LAB_00006754_1": "label1"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "decode_buffer_0000687c",
            "code": "\nbyte * decodeBuffer_0000687c(int bufferSize,byte *buffer)\n\n{\n  byte *result;\n  uint temp;\n  int i;\n  uint currentChar;\n  uint startPos;\n  uint endPos;\n  bool isCaratSymbol;\n  \n  currentChar = (uint)*buffer;\n  isCaratSymbol = currentChar == 0x5e;\n  if (isCaratSymbol) {\n    currentChar = (uint)buffer[1];\n    buffer = buffer + 2;\n  }\n  else {\n    buffer = buffer + 1;\n  }\n  i = bufferSize + -1;\n  do {\n    i = i + 1;\n    *(bool *)i = isCaratSymbol;\n  } while (i != bufferSize + 0xff);\n  if (currentChar == 0) {\n    result = buffer + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      startPos = currentChar;\n      *(bool *)(bufferSize + startPos) = !isCaratSymbol;\n      buffer = buffer + 1;\n      while( true ) {\n        currentChar = (uint)buffer[-1];\n        if (currentChar != 0x2d) break;\n        endPos = (uint)*buffer;\n        if ((endPos == 0x5d) || (temp = startPos, (int)endPos < (int)startPos)) goto LAB_000068aa;\n        do {\n          temp = temp + 1;\n          *(bool *)(bufferSize + temp) = !isCaratSymbol;\n        } while ((int)temp < (int)endPos);\n        i = ~startPos + endPos;\n        if ((int)endPos <= (int)startPos) {\n          i = 0;\n        }\n        startPos = startPos + 1 + i;\n        buffer = buffer + 2;\n      }\n      result = buffer;\n    } while ((currentChar != 0x5d) && (result = buffer + -1, currentChar != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "decode_buffer_0000687c",
                "param_1": "bufferSize",
                "param_2": "buffer",
                "pbVar1": "result",
                "uVar2": "temp",
                "iVar3": "i",
                "uVar4": "currentChar",
                "uVar5": "startPos",
                "uVar6": "endPos",
                "bVar7": "isCaratSymbol"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "resize_array_000068f0",
            "code": "\nundefined4 resizeArray_000068f0(undefined4 ptrMem,int *ptrArray)\n\n{\n  int newArray;\n  int arraySize;\n  \n  if ((int *)ptrArray[0xd] == ptrArray + 0x11) {\n    newArray = reallocateMemory(ptrMem,0x400);\n    if (newArray != 0) {\n      ptrArray[0xe] = 0x400;\n      ptrArray[0xd] = newArray;\n      *(undefined *)(newArray + 0x3ff) = *(undefined *)((int)ptrArray + 0x46);\n      *(undefined *)(newArray + 0x3fe) = *(undefined *)((int)ptrArray + 0x45);\n      *(undefined *)(newArray + 0x3fd) = *(undefined *)(ptrArray + 0x11);\n      *ptrArray = newArray + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    arraySize = ptrArray[0xe];\n    newArray = reallocateAndCopyData(ptrMem,(int *)ptrArray[0xd],arraySize << 1);\n    if (newArray != 0) {\n      copyAndShift(newArray + arraySize,newArray,arraySize);\n      ptrArray[0xd] = newArray;\n      ptrArray[0xe] = arraySize << 1;\n      *ptrArray = newArray + arraySize;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "resize_array_000068f0",
                "param_1": "ptrMem",
                "param_2": "ptrArray",
                "iVar1": "newArray",
                "iVar2": "arraySize",
                "reallocate_memory_00004bd0": "reallocateMemory",
                "copy_and_shift_000060b0": "copyAndShift",
                "reallocate_and_copy_data_000060cc": "reallocateAndCopyData"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 result,int array)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(array + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "result",
                "param_2": "array",
                "iVar1": "currentIndex"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "calculate_division_00006974",
            "code": "\nundefined8 calculate_division_00006974(int dividend,int divisor,int remainder,int multiplier)\n\n{\n  int abs_dividend;\n  undefined8 result;\n  undefined remainder_result [8];\n  \n  if ((multiplier == 0) && (remainder == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    abs_dividend = -divisor - (uint)(dividend != 0);\n    if (multiplier < 0) {\n      result = division_with_remainder_00006a14(-dividend,abs_dividend,-remainder,-multiplier - (uint)(remainder != 0),remainder_result);\n      return result;\n    }\n    result = division_with_remainder_00006a14(-dividend,abs_dividend,remainder,multiplier,remainder_result);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (multiplier < 0) {\n    result = division_with_remainder_00006a14(dividend,divisor,-remainder,-multiplier - (uint)(remainder != 0),remainder_result);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = division_with_remainder_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "calculate_division_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "remainder",
                "param_4": "multiplier",
                "iVar1": "abs_dividend",
                "uVar2": "result",
                "local_8": "remainder_result"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "division_with_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong division_with_remainder_00006a14(uint dividend,uint dividend2,uint divisor,uint divisor2,uint *quotient_and_remainder)\n\n{\n  code *jump_table;\n  uint quotient1;\n  int shift_count;\n  uint remainder1;\n  uint quotient2;\n  uint remainder2;\n  uint quotient3;\n  uint remainder3;\n  uint quotient4;\n  uint remainder4;\n  bool carry;\n  ulonglong result;\n  \n  if (divisor2 == 0) {\n    if (dividend2 < divisor) {\n      shift_count = LZCOUNT(divisor);\n      remainder2 = divisor;\n      if (shift_count != 0) {\n        remainder2 = divisor << shift_count;\n        dividend2 = dividend >> (0x20U - shift_count & 0xff) | dividend2 << shift_count;\n        dividend = dividend << shift_count;\n      }\n      quotient3 = remainder2 >> 0x10;\n      quotient4 = dividend2 / quotient3;\n      remainder1 = dividend >> 0x10 | (dividend2 - quotient3 * quotient4) * 0x10000;\n      quotient1 = quotient4 * (remainder2 & 0xffff);\n      quotient2 = quotient4;\n      if (remainder1 <= quotient1 && quotient1 - remainder1 != 0) {\n        carry = CARRY4(remainder2,remainder1);\n        remainder1 = remainder2 + remainder1;\n        quotient2 = quotient4 - 1;\n        if ((carry == false) && (remainder1 <= quotient1 && quotient1 - remainder1 != 0)) {\n          quotient2 = quotient4 - 2;\n          remainder1 = remainder1 + remainder2;\n        }\n      }\n      quotient4 = (remainder1 - quotient1) / quotient3;\n      quotient3 = dividend & 0xffff | ((remainder1 - quotient1) - quotient3 * quotient4) * 0x10000;\n      remainder1 = quotient4 * (remainder2 & 0xffff);\n      quotient1 = quotient4;\n      if (quotient3 <= remainder1 && remainder1 - quotient3 != 0) {\n        carry = CARRY4(remainder2,quotient3);\n        quotient3 = remainder2 + quotient3;\n        quotient1 = quotient4 - 1;\n        if ((carry == false) && (quotient3 <= remainder1 && remainder1 - quotient3 != 0)) {\n          quotient1 = quotient4 - 2;\n          quotient3 = quotient3 + remainder2;\n        }\n      }\n      quotient3 = quotient3 - remainder1;\n      quotient1 = quotient1 | quotient2 << 0x10;\n      remainder2 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        dividend2 = dividend2 - divisor;\n        remainder4 = divisor >> 0x10;\n        remainder3 = divisor & 0xffff;\n        remainder2 = 1;\n        quotient2 = divisor;\n      }\n      else {\n        quotient2 = divisor << shift_count;\n        remainder4 = quotient2 >> 0x10;\n        quotient1 = dividend2 >> (0x20U - shift_count & 0xff);\n        remainder2 = dividend >> (0x20U - shift_count & 0xff) | dividend2 << shift_count;\n        remainder1 = quotient1 / remainder4;\n        remainder3 = quotient2 & 0xffff;\n        quotient4 = remainder2 >> 0x10 | (quotient1 - remainder4 * remainder1) * 0x10000;\n        quotient3 = remainder1 * remainder3;\n        dividend = dividend << shift_count;\n        quotient1 = remainder1;\n        if (quotient4 <= quotient3 && quotient3 - quotient4 != 0) {\n          carry = CARRY4(quotient2,quotient4);\n          quotient4 = quotient2 + quotient4;\n          quotient1 = remainder1 - 1;\n          if ((carry == false) && (quotient4 <= quotient3 && quotient3 - quotient4 != 0)) {\n            quotient1 = remainder1 - 2;\n            quotient4 = quotient4 + quotient2;\n          }\n        }\n        remainder1 = (quotient4 - quotient3) / remainder4;\n        dividend2 = remainder2 & 0xffff | ((quotient4 - quotient3) - remainder4 * remainder1) * 0x10000;\n        quotient3 = remainder1 * remainder3;\n        remainder2 = remainder1;\n        if (dividend2 <= quotient3 && quotient3 - dividend2 != 0) {\n          carry = CARRY4(quotient2,dividend2);\n          dividend2 = quotient2 + dividend2;\n          remainder2 = remainder1 - 1;\n          if ((carry == false) && (dividend2 <= quotient3 && quotient3 - dividend2 != 0)) {\n            remainder2 = remainder1 - 2;\n            dividend2 = dividend2 + quotient2;\n          }\n        }\n        dividend2 = dividend2 - quotient3;\n        remainder2 = remainder2 | quotient1 << 0x10;\n      }\n      quotient4 = dividend2 / remainder4;\n      quotient3 = dividend >> 0x10 | (dividend2 - remainder4 * quotient4) * 0x10000;\n      quotient1 = remainder3 * quotient4;\n      remainder1 = quotient4;\n      if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n        carry = CARRY4(quotient2,quotient3);\n        quotient3 = quotient2 + quotient3;\n        remainder1 = quotient4 - 1;\n        if ((carry == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n          remainder1 = quotient4 - 2;\n          quotient3 = quotient3 + quotient2;\n        }\n      }\n      quotient4 = (quotient3 - quotient1) / remainder4;\n      quotient3 = dividend & 0xffff | ((quotient3 - quotient1) - remainder4 * quotient4) * 0x10000;\n      remainder3 = remainder3 * quotient4;\n      quotient1 = quotient4;\n      if (quotient3 <= remainder3 && remainder3 - quotient3 != 0) {\n        carry = CARRY4(quotient2,quotient3);\n        quotient3 = quotient2 + quotient3;\n        quotient1 = quotient4 - 1;\n        if ((carry == false) && (quotient3 <= remainder3 && remainder3 - quotient3 != 0)) {\n          quotient1 = quotient4 - 2;\n          quotient3 = quotient3 + quotient2;\n        }\n      }\n      quotient3 = quotient3 - remainder3;\n      quotient1 = quotient1 | remainder1 << 0x10;\n    }\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = quotient3 >> LZCOUNT(divisor);\n      quotient_and_remainder[1] = 0;\n    }\n  }\n  else if (dividend2 < divisor2) {\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend2;\n      return 0;\n    }\n    quotient1 = 0;\n    remainder2 = 0;\n  }\n  else {\n    shift_count = LZCOUNT(divisor2);\n    if (shift_count != 0) {\n      remainder3 = 0x20 - shift_count;\n      remainder1 = divisor >> (remainder3 & 0xff) | divisor2 << shift_count;\n      remainder4 = remainder1 >> 0x10;\n      quotient1 = dividend2 >> (remainder3 & 0xff);\n      remainder2 = dividend >> (remainder3 & 0xff) | dividend2 << shift_count;\n      quotient3 = quotient1 / remainder4;\n      quotient2 = remainder2 >> 0x10 | (quotient1 - remainder4 * quotient3) * 0x10000;\n      quotient4 = quotient3 * (remainder1 & 0xffff);\n      dividend = dividend << shift_count;\n      quotient1 = quotient3;\n      if (quotient2 <= quotient4 && quotient4 - quotient2 != 0) {\n        carry = CARRY4(remainder1,quotient2);\n        quotient2 = remainder1 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((carry == false) && (quotient2 <= quotient4 && quotient4 - quotient2 != 0)) {\n          quotient1 = quotient3 - 2;\n          quotient2 = quotient2 + remainder1;\n        }\n      }\n      quotient3 = (quotient2 - quotient4) / remainder4;\n      quotient2 = remainder2 & 0xffff | ((quotient2 - quotient4) - remainder4 * quotient3) * 0x10000;\n      quotient4 = quotient3 * (remainder1 & 0xffff);\n      remainder2 = quotient3;\n      if (quotient2 <= quotient4 && quotient4 - quotient2 != 0) {\n        carry = CARRY4(remainder1,quotient2);\n        quotient2 = remainder1 + quotient2;\n        remainder2 = quotient3 - 1;\n        if ((carry == false) && (quotient2 <= quotient4 && quotient4 - quotient2 != 0)) {\n          remainder2 = quotient3 - 2;\n          quotient2 = quotient2 + remainder1;\n        }\n      }\n      remainder2 = remainder2 | quotient1 << 0x10;\n      result = (ulonglong)remainder2 * (ulonglong)(divisor << shift_count);\n      if (CONCAT44(quotient2 - quotient4,dividend) < result) {\n        result = result - CONCAT44(remainder1,divisor << shift_count);\n        remainder2 = remainder2 - 1;\n      }\n      if (quotient_and_remainder != (uint *)0x0) {\n        quotient1 = ((quotient2 - quotient4) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient_and_remainder = quotient1 << (remainder3 & 0xff) | dividend - (uint)result >> shift_count;\n        quotient_and_remainder[1] = quotient1 >> shift_count;\n      }\n      return (ulonglong)remainder2;\n    }\n    if ((divisor2 < dividend2) || (divisor <= dividend)) {\n      carry = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend2 = (dividend2 - divisor2) - (uint)carry;\n      quotient1 = 1;\n    }\n    else {\n      quotient1 = 0;\n    }\n    remainder2 = 0;\n    if (quotient_and_remainder != (uint *)0x0) {\n      *quotient_and_remainder = dividend;\n      quotient_and_remainder[1] = dividend2;\n    }\n  }\n  return CONCAT44(remainder2,quotient1);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "division_with_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "dividend2",
                "param_3": "divisor",
                "param_4": "divisor2",
                "param_5": "quotient_and_remainder",
                "uVar1": "quotient1",
                "uVar3": "remainder1",
                "uVar4": "quotient2",
                "uVar5": "remainder2",
                "uVar6": "quotient3",
                "uVar7": "remainder3",
                "uVar8": "quotient4",
                "uVar9": "remainder4",
                "uVar11": "result",
                "bVar10": "carry",
                "iVar2": "shift_count",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 133103,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}