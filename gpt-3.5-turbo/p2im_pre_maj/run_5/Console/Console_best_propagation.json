{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_uart_stdio_00000410",
            "code": "\nvoid initialize_uart_stdio_00000410(void)\n\n{\n  initialize_uart_stdio_00000410();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_uart_stdio_00000410",
                "uart_stdio_init": "initialize_uart_stdio"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "uart_stdio_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "check_and_offset_00000428",
            "code": "\ndword checkAndOffset_00000428(undefined4 *result,int inputOffset)\n\n{\n  undefined4 irqState;\n  dword currentOffset;\n  \n  irqState = irq_disable();\n  currentOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = inputOffset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    currentOffset = 0xffffffff;\n  }\n  irq_restore(irqState);\n  return currentOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "check_and_offset_00000428",
                "param_1": "result",
                "param_2": "inputOffset",
                "uVar1": "irqState",
                "local_c": "currentOffset"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "irq_restore",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "read_stdin_00000490",
            "code": "\nundefined4 read_stdin_00000490(undefined4 param_1,undefined4 param_2,undefined4 input_buffer,undefined4 buffer_size)\n\n{\n  undefined4 read_result;\n  \n  read_result = uart_stdio_read(input_buffer,buffer_size);\n  return read_result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "read_stdin_00000490",
                "param_3": "input_buffer",
                "param_4": "buffer_size",
                "uVar1": "read_result"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "uart_stdio_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "set_param_to19_000004f2",
            "code": "\nundefined4 setParamTo19_000004f2(undefined4 *output)\n\n{\n  *output = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "set_param_to19_000004f2",
                "param_1": "output"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_memory_00000514",
            "code": "\nundefined4 initializeMemory_00000514(undefined4 *memoryPointer)\n\n{\n  *memoryPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_memory_00000514",
                "param_1": "memoryPointer"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_input_value_00000534",
            "code": "\nundefined4 checkInputValue_00000534(undefined4 *result,int inputValue)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((inputValue == 0) || (inputValue == 1)) || (inputValue == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_input_value_00000534",
                "param_1": "result",
                "param_2": "inputValue",
                "uVar1": "isValid"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "convert_byte_to_u_int_00000566",
            "code": "\nint convertByteToUInt_00000566(int inputValue)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)inputValue;\n  byte3 = (byte)((uint)inputValue >> 8);\n  byte4 = (byte)((uint)inputValue >> 0x10);\n  byte1 = (byte)((uint)inputValue >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (inputValue == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "convert_byte_to_u_int_00000566",
                "param_1": "inputValue",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "sched_run"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *sourcePointer,undefined4 *targetPointer)\n\n{\n  if (*sourcePointer == 0) {\n    *targetPointer = targetPointer;\n  }\n  else {\n    *targetPointer = *(undefined4 *)*sourcePointer;\n    *(undefined4 **)*sourcePointer = targetPointer;\n  }\n  *sourcePointer = targetValueAsInt;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "sourcePointer",
                "param_2": "targetPointer",
                "(int)param_2": "targetValueAsInt"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_pointer_from_memory_000005ca",
            "code": "\nundefined4 * extractPointerFromMemory_000005ca(int *memoryPointer)\n\n{\n  undefined4 *extractedPointer;\n  \n  if (*memoryPointer == 0) {\n    extractedPointer = (undefined4 *)0x0;\n  }\n  else {\n    extractedPointer = *(undefined4 **)*memoryPointer;\n    if (extractedPointer == (undefined4 *)*memoryPointer) {\n      *memoryPointer = 0;\n    }\n    else {\n      *(undefined4 *)*memoryPointer = *extractedPointer;\n    }\n  }\n  return extractedPointer;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_pointer_from_memory_000005ca",
                "param_1": "memoryPointer",
                "puVar1": "extractedPointer"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "initialize_data_00000610",
            "code": "\nundefined4 initializeData_00000610(void)\n\n{\n  int oldDataPointer;\n  int newDataPointer;\n  undefined4 result;\n  \n  oldDataPointer = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  newDataPointer = findLeastSignificantBit(DAT_1fff0424);\n  newDataPointer = **(int **)(&DAT_1fff03e4 + newDataPointer * 4);\n  if (oldDataPointer == newDataPointer + -8) {\n    result = 0;\n  }\n  else {\n    if ((oldDataPointer != 0) && (*(char *)(oldDataPointer + 4) == '\\t')) {\n      *(undefined *)(oldDataPointer + 4) = 10;\n    }\n    *(undefined *)(newDataPointer + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(newDataPointer + -2);\n    result = 1;\n    DAT_1fff03dc = newDataPointer + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "initialize_data_00000610",
                "iVar1": "oldDataPointer",
                "iVar2": "newDataPointer",
                "uVar3": "result",
                "bitarithm_lsb": "findLeastSignificantBit"
            },
            "calling": [],
            "called": [
                "bitarithm_lsb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_data_00000698",
            "code": "\nvoid updateData_00000698(int dataIndex,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byte *)(dataIndex + 4)) &&\n       (clist_lpop(&DAT_1fff03e4 + (uint)*(byte *)(dataIndex + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(dataIndex + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(dataIndex + 5));\n    }\n  }\n  else if (*(byte *)(dataIndex + 4) < 9) {\n    clist_rpush(&DAT_1fff03e4 + (uint)*(byte *)(dataIndex + 5) * 4,dataIndex + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(dataIndex + 5);\n  }\n  *(char *)(dataIndex + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_data_00000698",
                "param_1": "dataIndex",
                "param_2": "newValue"
            },
            "calling": [
                "thread_create",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [
                "clist_rpush",
                "clist_lpop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_irq_and_yield_or_flag_00000738",
            "code": "\nvoid checkIRQAndYieldOrFlag_00000738(ushort input)\n\n{\n  int irqFlag;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (input < *(byte *)(DAT_1fff03dc + 5))) {\n    irqFlag = irq_is_in();\n    if (irqFlag == 0) {\n      thread_yield_higher();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_irq_and_yield_or_flag_00000738",
                "param_1": "input",
                "iVar1": "irqFlag"
            },
            "calling": [
                "thread_create",
                "mutex_unlock"
            ],
            "called": [
                "irq_is_in",
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_stack_00000794",
            "code": "\nint * initializeStack_00000794(void)\n\n{\n  int returnValue;\n  int index;\n  undefined4 *contextPtr;\n  uint alignedPtr;\n  int loopCount1;\n  int loopCount2;\n  int *stackPtr;\n  \n  irq_disable();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  sched_set_status(DAT_1fff03dc,0);\n  contextPtr = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  cpu_switch_context_exit();\n  alignedPtr = (int)contextPtr + index & 0xfffffffc;\n  stackPtr = (int *)(alignedPtr - 4);\n  *stackPtr = 0x77777777;\n  if (((uint)stackPtr & 7) != 0) {\n    stackPtr = (int *)(alignedPtr - 8);\n    *stackPtr = 0x88888888;\n  }\n  stackPtr[-1] = 0x1000000;\n  stackPtr[-2] = index << 0xd;\n  stackPtr[-3] = 0x795;\n  stackPtr = stackPtr + -4;\n  *stackPtr = 0;\n  for (loopCount2 = 3; 0 < loopCount2; loopCount2 = loopCount2 + -1) {\n    stackPtr = stackPtr + -1;\n    *stackPtr = loopCount2;\n  }\n  stackPtr = stackPtr + -1;\n  *stackPtr = returnValue;\n  for (loopCount1 = 0xb; 3 < loopCount1; loopCount1 = loopCount1 + -1) {\n    stackPtr = stackPtr + -1;\n    *stackPtr = loopCount1;\n  }\n  stackPtr[-1] = -3;\n  return stackPtr + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_stack_00000794",
                "extraout_r1": "returnValue",
                "iVar1": "index",
                "puVar2": "contextPtr",
                "uVar3": "alignedPtr",
                "iStack_1c": "loopCount1",
                "iStack_18": "loopCount2",
                "piStack_14": "stackPtr"
            },
            "calling": [],
            "called": [
                "sched_set_status",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 pointer,int value,int length,int alignment)\n\n{\n  uint alignedLength;\n  int i;\n  int j;\n  int *ptr;\n  \n  alignedLength = alignment + length & 0xfffffffc;\n  ptr = (int *)(alignedLength - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedLength - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = pointer;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (j = 3; 0 < j; j = j + -1) {\n    ptr = ptr + -1;\n    *ptr = j;\n  }\n  ptr = ptr + -1;\n  *ptr = value;\n  for (i = 0xb; 3 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "pointer",
                "param_2": "value",
                "param_3": "length",
                "param_4": "alignment",
                "uVar1": "alignedLength",
                "local_14": "i",
                "local_10": "j",
                "local_c": "ptr"
            },
            "calling": [
                "thread_create"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "calculate_array_size_000008b8",
            "code": "\nint calculateArraySize_000008b8(void)\n\n{\n  RelocationEntry *relPointer;\n  \n  for (relPointer = (RelocationEntry *)&DAT_1fff0000;\n      (relPointer->r_offset == 0xe7fee7fe && (relPointer < relArray));\n      relPointer = (RelocationEntry *)&relPointer->r_info) {\n  }\n  return ((int)relArray - (int)relPointer >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "calculate_array_size_000008b8",
                "local_c": "relPointer",
                "Elf32_Rel": "RelocationEntry",
                "Elf32_Rel_ARRAY_1fff0200": "relArray"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_base_address_0000091c",
            "code": "\nundefined4 getBaseAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_base_address_0000091c"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "enable_interrupt_and_trigger_software_interrupt_00000930",
            "code": "\nvoid enableInterruptAndTriggerSoftwareInterrupt_00000930(void)\n\n{\n  enableInterrupt();\n  triggerSoftwareInterrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "enable_interrupt_and_trigger_software_interrupt_00000930",
                "irq_enable": "enableInterrupt",
                "software_interrupt": "triggerSoftwareInterrupt"
            },
            "calling": [
                "kernel_init",
                "sched_task_exit"
            ],
            "called": [
                "irq_enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "enable_interrupt_0000093c",
            "code": "\n\n\nvoid enableInterrupt_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "enable_interrupt_0000093c"
            },
            "calling": [
                "cortexm_isr_end",
                "FUN_00001cf0",
                "_mutex_lock",
                "sched_switch",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000099c": {
            "entrypoint": "0x0000099c",
            "current_name": "initialize_binary_function_0000099c",
            "code": "\nvoid initialize_binary_function_0000099c(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *stack_variable;\n  dword *data_pointer;\n  Elf32_Rel *relocation_pointer;\n  \n  stack_variable = &uStack_18;\n  data_pointer = (dword *)&DAT_00007c60;\n  pre_startup();\n  relocation_pointer = (Elf32_Rel *)&DAT_1fff0000;\n  while (relocation_pointer < &uStack_18) {\n    relocation_pointer->r_offset = 0xe7fee7fe;\n    relocation_pointer = (Elf32_Rel *)((int)relocation_pointer + 4);\n  }\n  relocation_pointer = Elf32_Rel_ARRAY_1fff0200;\n  while (relocation_pointer < (Elf32_Rel *)&DAT_1fff0350) {\n    relocation_pointer->r_offset = *data_pointer;\n    data_pointer = data_pointer + 1;\n    relocation_pointer = (Elf32_Rel *)&relocation_pointer->r_info;\n  }\n  relocation_pointer = (Elf32_Rel *)&DAT_1fff0350;\n  while (relocation_pointer < (undefined4 *)0x1fff0df0) {\n    relocation_pointer->r_offset = 0;\n    relocation_pointer = (Elf32_Rel *)((int)relocation_pointer + 4);\n  }\n  post_startup();\n  board_init();\n  __libc_init_array();\n  kernel_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000099c": "initialize_binary_function_0000099c",
                "local_14": "stack_variable",
                "local_10": "data_pointer",
                "local_c": "relocation_pointer"
            },
            "calling": [],
            "called": [
                "kernel_init",
                "board_init",
                "post_startup",
                "pre_startup",
                "__libc_init_array"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handle_nmi_00000a30(void)\n\n{\n  int irq_reg;\n  \n  core_panic(4,\"NMI HANDLER\");\n  return &stack0xe000ffe0 + -*(int *)(irq_reg + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "irq_reg"
            },
            "calling": [],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "handle_interrupt_00000cc0",
            "code": "\nundefined4 handleInterrupt_00000cc0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  core_panic(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = checkIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "handle_interrupt_00000cc0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled",
                "isCurrentModePrivileged": "checkCurrentModePrivileged",
                "isIRQinterruptsEnabled": "checkIRQinterruptsEnabled"
            },
            "calling": [
                "dummy_handler"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_irq_interrupts_enabled_00000cd0",
            "code": "\nundefined4 checkIRQInterruptsEnabled_00000cd0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 isInterruptsEnabled;\n  \n  isInterruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    isInterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQInterrupts();\n  return isInterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_irq_interrupts_enabled_00000cd0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "isInterruptsEnabled",
                "disableIRQinterrupts": "disableIRQInterrupts"
            },
            "calling": [
                "kernel_init",
                "kinetis_mcg_init",
                "core_panic",
                "pm_off",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_00000cf0",
            "code": "\nundefined4 checkIRQinterrupts_00000cf0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabled;\n  \n  enableInterrupts();\n  interruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isPrivilegedMode();\n  if (isCurrentModePrivileged) {\n    interruptsEnabled = getIRQinterruptsStatus();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_00000cf0",
                "uVar2": "interruptsEnabled",
                "bVar1": "isCurrentModePrivileged",
                "enableIRQinterrupts": "enableInterrupts",
                "isCurrentModePrivileged": "isPrivilegedMode",
                "isIRQinterruptsEnabled": "getIRQinterruptsStatus"
            },
            "calling": [
                "cpu_switch_context_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_needed_00000d0c",
            "code": "\nvoid enableIRQinterruptsIfNeeded_00000d0c(uint inputParameter)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkIfCurrentModeIsPrivileged();\n  if (isPrivilegedMode) {\n    setInterruptsEnabled((inputParameter & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_needed_00000d0c",
                "param_1": "inputParameter",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkIfCurrentModeIsPrivileged",
                "enableIRQinterrupts": "setInterruptsEnabled"
            },
            "calling": [
                "kinetis_mcg_init",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "sched_switch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "bit_clear32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clearMemory_00000d76(undefined4 inputPointer,undefined inputData)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)calculate_offset_00000d44(inputPointer,inputData);\n  *resultPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "inputPointer",
                "param_2": "inputData",
                "puVar1": "resultPointer"
            },
            "calling": [
                "cpu_errata_fixes"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_interrupt_flag_00000d9c",
            "code": "\nvoid clearInterruptFlag_00000d9c(void)\n\n{\n  clearBit(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_interrupt_flag_00000d9c",
                "bit_clear32": "clearBit"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [
                "bit_clear32"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "disable_watchdog_00000db0",
            "code": "\nvoid disable_watchdog_00000db0(void)\n\n{\n  disable_watchdog_00000db0();\n  correct_cpu_errata();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "disable_watchdog_00000db0",
                "wdog_disable": "disable_watchdog",
                "cpu_errata_fixes": "correct_cpu_errata"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "wdog_disable",
                "cpu_errata_fixes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_default_handler_00000dc0",
            "code": "\nvoid initialize_default_handler_00000dc0(void)\n\n{\n  handle_default_dummy();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_default_handler_00000dc0",
                "dummy_handler_default": "handle_default_dummy"
            },
            "calling": [],
            "called": [
                "dummy_handler_default"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_data_00000dcc",
            "code": "\n\n\nvoid initializeData_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_uart_00000df4",
            "code": "\nvoid initialize_uart_00000df4(void)\n\n{\n  uart_init(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_uart_00000df4"
            },
            "calling": [
                "_init"
            ],
            "called": [
                "uart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "read_isrpipe_data_00000e14",
            "code": "\nundefined4 read_isrpipe_data_00000e14(undefined4 buffer,undefined4 size)\n\n{\n  undefined4 read_result;\n  \n  read_result = isrpipe_read(0x1fff0204,buffer,size);\n  return read_result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "read_isrpipe_data_00000e14",
                "param_1": "buffer",
                "param_2": "size",
                "uVar1": "read_result"
            },
            "calling": [
                "_read_r"
            ],
            "called": [
                "isrpipe_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "write_to_uart_00000e38",
            "code": "\nundefined4 write_to_uart_00000e38(undefined4 data,undefined4 length)\n\n{\n  uart_write(0,data,length);\n  return length;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "write_to_uart_00000e38",
                "param_1": "data",
                "param_2": "length"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "disable_irq_and_wait_00000e58",
            "code": "\nvoid disable_irq_and_wait_00000e58(void)\n\n{\n  disable_irq();\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "disable_irq_and_wait_00000e58",
                "irq_disable": "disable_irq",
                "do": "loop"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_peripherals_00000e64",
            "code": "\n\n\nvoid initializePeripherals_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initializeCPU();\n  initializeGPIO(0x2056,0x80);\n  initializeGPIO(0x511a,0x80);\n  initializeGPIO(0x2055,0x80);\n  setGPIO(0x2056);\n  setGPIO(0x511a);\n  setGPIO(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_peripherals_00000e64",
                "cpu_init": "initializeCPU",
                "gpio_init": "initializeGPIO",
                "gpio_set": "setGPIO"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "gpio_init",
                "gpio_set",
                "cpu_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "print_lr_value_00000ed8",
            "code": "\nvoid printLRValue_00000ed8(void)\n\n{\n  undefined4 LRValue;\n  \n  iprintf(&DAT_00006f58,LRValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "print_lr_value_00000ed8",
                "in_lr": "LRValue"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handle_kernel_panic_00000f04(char panic_trigger,undefined4 panic_message)\n\n{\n  undefined4 stack_frame;\n  code *unrecovered_jump_table;\n  undefined4 message;\n  char trigger;\n  \n  message = panic_message;\n  trigger = panic_trigger;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_trigger == '\\x03') {\n      cpu_print_last_instruction();\n    }\n    iprintf(\"*** RIOT kernel panic:\\n%s\\n\\n\",message);\n    ps();\n    iprintf(&DAT_00006f78);\n    iprintf(\"*** halted.\\n\\n\");\n  }\n  irq_disable();\n  panic_arch();\n  unrecovered_jump_table = (code *)0xf4d;\n  pm_off();\n  stack_frame = (int)&stack_frame + 1;\n  auto_init();\n  iprintf(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  main();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panic_trigger",
                "param_2": "panic_message",
                "uStack_18": "stack_frame",
                "UNRECOVERED_JUMPTABLE": "unrecovered_jump_table",
                "local_10": "message",
                "local_9": "trigger"
            },
            "calling": [
                "dummy_handler_default",
                "uart_init",
                "cib_init",
                "nmi_default",
                "fmt_s32_dfp",
                "thread_add_to_list"
            ],
            "called": [
                "cpu_print_last_instruction",
                "iprintf",
                "panic_arch",
                "pm_off",
                "ps",
                "main",
                "auto_init",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_system_00000f8c",
            "code": "\nvoid initializeSystem_00000f8c(void)\n\n{\n  uint contextCount;\n  undefined4 *contextArray;\n  uint threadCount;\n  int stackValue;\n  int *stackPtr;\n  undefined4 cpuContext;\n  undefined4 unusedVar2;\n  undefined4 unusedVar1;\n  dword rInfo;\n  \n  irq_disable();\n  rInfo = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  unusedVar1 = 0;\n  unusedVar2 = 0xf81;\n  thread_create(&DAT_1fff0a6c,0x100,0xf,0xc);\n  rInfo = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  unusedVar1 = 0;\n  unusedVar2 = 0xf5d;\n  threadCount = 0xc;\n  thread_create(&DAT_1fff046c,0x600,7);\n  cpuContext = 0xfd3;\n  contextCount = cpu_switch_context_exit();\n  contextCount = contextCount >> 0x1e;\n  contextArray = (undefined4 *)(threadCount * 0x100);\n  stackValue = (threadCount >> 0x1d) << 0x11;\n  stackPtr = &stackValue;\n  if ((contextCount & contextCount - 1) != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *contextArray = 0;\n  contextArray[1] = 0;\n  contextArray[2] = contextCount - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_system_00000f8c",
                "uVar1": "contextCount",
                "puVar2": "contextArray",
                "uVar3": "threadCount",
                "iStack_24": "stackValue",
                "piStack_20": "stackPtr",
                "uStack_1c": "cpuContext",
                "local_10": "rInfo",
                "local_14": "unusedVar1",
                "local_18": "unusedVar2"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "thread_create",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_bit_array_00000fec",
            "code": "\nvoid initializeBitArray_00000fec(undefined4 *bitArray,uint bitArraySize)\n\n{\n  if ((bitArraySize & bitArraySize - 1) != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *bitArray = 0;\n  bitArray[1] = 0;\n  bitArray[2] = bitArraySize - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_bit_array_00000fec",
                "param_1": "bitArray",
                "param_2": "bitArraySize",
                "param_1[1]": "bitArray[1]",
                "param_1[2]": "bitArray[2]"
            },
            "calling": [
                "thread_create"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_next_element_00001034",
            "code": "\nvoid find_next_element_00001034(int **element_list,int data)\n\n{\n  int **current_element;\n  \n  if (8 < *(byte *)(data + 4)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  for (current_element = element_list;\n      (*current_element != (int *)0x0 && (*(byte *)((int)*current_element + -3) <= *(byte *)(data + 5)));\n      current_element = (int **)*current_element) {\n  }\n  *(int **)(data + 8) = *current_element;\n  *current_element = (int *)(int **)(data + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_next_element_00001034",
                "param_1": "element_list",
                "param_2": "data",
                "local_1c": "current_element"
            },
            "calling": [
                "_mutex_lock"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "calculate_array_offset_000010a0",
            "code": "\nint calculate_array_offset_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "calculate_array_offset_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_thread_stack_000010d4",
            "code": "\nint initializeThreadStack_000010d4(uint startAddress,int stackSize,byte threadPriority,uint threadFlags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 interruptStatus;\n  undefined4 threadInitializationResult;\n  int result;\n  uint alignedStackSize;\n  undefined4 *threadControlBlock;\n  int adjustedStackSize;\n  uint adjustedStartAddress;\n  uint loopCounter;\n  short currentEntry;\n  short availableIndex;\n  \n  if (threadPriority < 0x10) {\n    adjustedStackSize = stackSize;\n    adjustedStartAddress = startAddress;\n    if ((startAddress & 3) != 0) {\n      adjustedStackSize = 4 - (startAddress & 3);\n      adjustedStartAddress = adjustedStackSize + startAddress;\n      adjustedStackSize = stackSize - adjustedStackSize;\n    }\n    alignedStackSize = adjustedStackSize - 0x30U & 0xfffffffc;\n    threadControlBlock = (undefined4 *)(alignedStackSize + adjustedStartAddress);\n    if ((threadFlags & 8) == 0) {\n      *(uint *)adjustedStartAddress = adjustedStartAddress;\n    }\n    else {\n      for (loopCounter = adjustedStartAddress; loopCounter < alignedStackSize + adjustedStartAddress; loopCounter = loopCounter + 4) {\n        *(uint *)loopCounter = loopCounter;\n      }\n    }\n    interruptStatus = irq_disable();\n    availableIndex = 0;\n    for (currentEntry = 1; currentEntry < 0x21; currentEntry = currentEntry + 1) {\n      if (*(int *)(&DAT_1fff0358 + currentEntry * 4) == 0) {\n        availableIndex = currentEntry;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      irq_restore(interruptStatus);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = threadControlBlock;\n      *(short *)((int)threadControlBlock + 6) = availableIndex;\n      threadInitializationResult = thread_stack_init(param5,param6,adjustedStartAddress,alignedStackSize);\n      *threadControlBlock = threadInitializationResult;\n      threadControlBlock[9] = adjustedStartAddress;\n      threadControlBlock[0xb] = stackSize;\n      threadControlBlock[10] = param7;\n      *(byte *)((int)threadControlBlock + 5) = threadPriority;\n      *(undefined *)(threadControlBlock + 1) = 0;\n      threadControlBlock[2] = 0;\n      threadControlBlock[3] = 0;\n      threadControlBlock[4] = 0;\n      cib_init(threadControlBlock + 5,0);\n      threadControlBlock[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((threadFlags & 1) == 0) {\n        sched_set_status(threadControlBlock,10);\n        if ((threadFlags & 4) == 0) {\n          irq_restore(interruptStatus);\n          sched_switch(threadPriority);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        sched_set_status(threadControlBlock,1);\n      }\n      irq_restore(interruptStatus);\n      result = (int)availableIndex;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_thread_stack_000010d4",
                "param_1": "startAddress",
                "param_2": "stackSize",
                "param_3": "threadPriority",
                "param_4": "threadFlags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "interruptStatus",
                "uVar2": "threadInitializationResult",
                "iVar3": "result",
                "uVar4": "alignedStackSize",
                "puVar5": "threadControlBlock",
                "local_30": "adjustedStackSize",
                "local_2c": "adjustedStartAddress",
                "local_10": "loopCounter",
                "local_c": "currentEntry",
                "local_a": "availableIndex"
            },
            "calling": [
                "kernel_init"
            ],
            "called": [
                "thread_stack_init",
                "sched_set_status",
                "cib_init",
                "irq_restore",
                "sched_switch",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initialize_system_00001274(void)\n\n{\n  initialize_cortexm();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_kinetis_mcg();\n  initialize_peripherals();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274",
                "cortexm_init": "initialize_cortexm",
                "kinetis_mcg_init": "initialize_kinetis_mcg",
                "periph_init": "initialize_peripherals"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "kinetis_mcg_init",
                "cortexm_init",
                "periph_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "lock_mutex_0000129c",
            "code": "\nvoid lockMutex_0000129c(undefined4 mutex)\n\n{\n  lock(mutex,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "lock_mutex_0000129c",
                "param_1": "mutex",
                "_mutex_lock": "lock"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "unlock_and_add_one_000012b4",
            "code": "\nundefined4 unlock_and_add_one_000012b4(int data_ptr,undefined unknown_value)\n\n{\n  undefined4 result;\n  \n  result = tsrb_add_one(data_ptr + 4,unknown_value);\n  mutex_unlock(data_ptr);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "unlock_and_add_one_000012b4",
                "param_1": "data_ptr",
                "param_2": "unknown_value",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "mutex_unlock",
                "tsrb_add_one"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "wait_for_data_000012e2",
            "code": "\nint waitForData_000012e2(int buffer,undefined4 size,undefined4 offset)\n\n{\n  int errorCode;\n  \n  while( true ) {\n    errorCode = tsrb_get(buffer + 4,size,offset);\n    if (errorCode != 0) break;\n    mutex_lock(buffer);\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "wait_for_data_000012e2",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "offset",
                "iVar1": "errorCode"
            },
            "calling": [
                "uart_stdio_read"
            ],
            "called": [
                "tsrb_get",
                "mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_at_index_00001318",
            "code": "\nvoid setBitAtIndex_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_at_index_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "uart_init_uart"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_yield_00001348",
            "code": "\nvoid check_and_yield_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_yield_00001348"
            },
            "calling": [
                "irq_handler_uart"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculate_offset_00001360(uint offset,int multiplier)\n\n{\n  return multiplier * 4 + (offset & 0xf0000000 | (offset & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "offset",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_offset_to_value_00001392",
            "code": "\nvoid setOffsetToValue_00001392(undefined4 offset,undefined value)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001360(offset,value);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_offset_to_value_00001392",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_uart_000013b8",
            "code": "\nundefined4 initialize_uart_000013b8(int port_number,undefined4 baud_rate,undefined4 pin_init_value,undefined4 uart_init_value)\n\n{\n  undefined4 status;\n  \n  if (port_number != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + port_number * 8) = pin_init_value;\n  *(undefined4 *)(&DAT_1fff0b70 + port_number * 8) = uart_init_value;\n  initialize_pins(port_number);\n  set_offset_to_value(*(undefined4 *)(&DAT_00006ffc + port_number * 0x20),\n               *(undefined *)(port_number * 0x20 + 0x7000));\n  if ((&DAT_00007002)[port_number * 0x20] == '\\0') {\n    initialize_uart_000013b8_module(port_number,baud_rate);\n    status = 0;\n  }\n  else {\n    status = 0xffffffff;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_uart_000013b8",
                "param_1": "port_number",
                "param_2": "baud_rate",
                "param_3": "pin_init_value",
                "param_4": "uart_init_value",
                "uVar1": "status",
                "uart_init_pins": "initialize_pins",
                "set_offset_to_value_00001392": "set_offset_to_value",
                "uart_init_uart": "initialize_uart_module"
            },
            "calling": [
                "uart_stdio_init"
            ],
            "called": [
                "FUN_00001392",
                "core_panic",
                "uart_init_uart",
                "uart_init_pins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "initialize_gpio_ports_00001448",
            "code": "\nvoid initializeGpioPorts_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "initialize_gpio_ports_00001448",
                "param_1": "index"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "gpio_init_port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "initialize_device_settings_000014c4",
            "code": "\nvoid initializeDeviceSettings_000014c4(int index,uint divider)\n\n{\n  byte *deviceData;\n  uint dataValue;\n  uint calculatedValue;\n  \n  deviceData = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  dataValue = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  deviceData[3] = deviceData[3] & 0xf3;\n  deviceData[2] = (&DAT_00007001)[index * 0x20];\n  calculatedValue = dataValue / (divider << 4);\n  *deviceData = (byte)(calculatedValue >> 8) & 0x1f;\n  deviceData[1] = (byte)calculatedValue;\n  deviceData[10] = (byte)((dataValue << 2) / divider + 1 >> 1) & 0x1f;\n  deviceData[0x10] = deviceData[0x10] | 0x88;\n  if ((deviceData[0x10] & 0x70) == 0) {\n    deviceData[0x13] = 0;\n  }\n  else {\n    deviceData[0x13] = (char)(2 << (deviceData[0x10] >> 4 & 7)) - 1;\n  }\n  deviceData[0x15] = 1;\n  deviceData[0x11] = 0xc0;\n  deviceData[3] = deviceData[3] | 0x2c;\n  set_bit_at_index_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "initialize_device_settings_000014c4",
                "param_1": "index",
                "param_2": "divider",
                "pbVar1": "deviceData",
                "uVar2": "dataValue",
                "uVar3": "calculatedValue"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copyData_000015d0(int index,int source,uint length)\n\n{\n  int ptrIndex;\n  uint counter;\n  \n  ptrIndex = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(ptrIndex + 4));\n    *(undefined *)(ptrIndex + 7) = *(undefined *)(counter + source);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source",
                "param_3": "length",
                "iVar1": "ptrIndex",
                "local_c": "counter"
            },
            "calling": [
                "uart_stdio_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_if_condition_met_00001628",
            "code": "\nvoid execute_function_if_condition_met_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  perform_yield_check();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_if_condition_met_00001628",
                "param_1": "index",
                "check_and_yield_00001348": "perform_yield_check"
            },
            "calling": [
                "isr_uart0_rx_tx"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_uart_interrupt_00001688",
            "code": "\nvoid initialize_uart_interrupt_00001688(void)\n\n{\n  handle_uart_interrupt(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_uart_interrupt_00001688",
                "irq_handler_uart": "handle_uart_interrupt"
            },
            "calling": [],
            "called": [
                "irq_handler_uart"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculate_offset_00001696(uint base_value,int multiplier)\n\n{\n  return multiplier * 4 + (base_value & 0xf0000000 | (base_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "base_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016c8",
                "bit_clear8",
                "bit_set8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_offset_to_one_000016c8",
            "code": "\nvoid setOffsetToOne_000016c8(undefined4 param1,undefined param2)\n\n{\n  undefined4 *offsetPtr;\n  \n  offsetPtr = (undefined4 *)calculate_offset_00001696(param1,param2);\n  *offsetPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_offset_to_one_000016c8",
                "param_1": "param1",
                "param_2": "param2",
                "puVar1": "offsetPtr"
            },
            "calling": [
                "kinetis_mcg_init_erclk32k"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_value_000016ec",
            "code": "\nvoid setOffsetValue_000016ec(undefined4 offset,undefined value)\n\n{\n  undefined *offsetPointer;\n  \n  offsetPointer = (undefined *)calculate_offset_00001696(offset,value);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_value_000016ec",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 inputAddress,undefined offset)\n\n{\n  undefined *targetAddress;\n  \n  targetAddress = (undefined *)calculate_offset_00001696(inputAddress,offset);\n  *targetAddress = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "inputAddress",
                "param_2": "offset",
                "puVar1": "targetAddress"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_disable_pll",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_bit_6_00001734",
            "code": "\nvoid clear_bit_6_00001734(void)\n\n{\n  bit_clear8(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_bit_6_00001734"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flags_00001748",
            "code": "\nvoid updateFlags_00001748(byte flag)\n\n{\n  DAT_40064003 = flag | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flags_00001748",
                "param_1": "flag"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_data_flags_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateDataFlags_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clearBit(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_data_flags_00001778",
                "bit_clear8": "clearBit"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fee"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_memory_000017dc",
            "code": "\n\n\nvoid initializeMemory_000017dc(void)\n\n{\n  setOffsetToOne(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_memory_000017dc",
                "set_offset_to_one_000016c8": "setOffsetToOne"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_flags_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeFlags_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  bit_set8(&DAT_40064001,0);\n  bit_clear8(&DAT_40064000,1);\n  bit_clear8(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_flags_0000182c"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initializeSystem_000018bc(void)\n\n{\n  kinetis_mcg_set_fll_factor(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  bit_clear8(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_system_0000191c",
            "code": "\nvoid initializeSystem_0000191c(void)\n\n{\n  kinetis_mcg_enable_osc();\n  kinetis_mcg_set_fll_factor(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  kinetis_mcg_set_fll_factor(0xa0);\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_clock_000019c0",
            "code": "\nvoid initialize_clock_000019c0(void)\n\n{\n  enable_oscillator();\n  set_fll_factor(0x40);\n  clear_bit8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  disable_pll();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_clock_000019c0",
                "kinetis_mcg_enable_osc": "enable_oscillator",
                "kinetis_mcg_set_fll_factor": "set_fll_factor",
                "bit_clear8": "clear_bit8",
                "kinetis_mcg_disable_pll": "disable_pll"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initializeSystem_00001a18(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disableSystemPLL();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18",
                "kinetis_mcg_disable_pll": "disableSystemPLL"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "set_bit_and_disable_pll_00001a3c",
            "code": "\nvoid set_bit_and_disable_pll_00001a3c(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disable_pll();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "set_bit_and_disable_pll_00001a3c",
                "kinetis_mcg_disable_pll": "disable_pll"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_hardware_00001a60",
            "code": "\nvoid initializeHardware_00001a60(void)\n\n{\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  bit_set8(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_hardware_00001a60"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "configure_clock_mode_00001b10",
            "code": "\nundefined4 configureClockMode_00001b10(byte mode)\n\n{\n  undefined4 result;\n  \n  if (mode < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)mode + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        kinetis_mcg_set_fei();\n        break;\n      case 1:\n        kinetis_mcg_set_fee();\n        break;\n      case 2:\n        kinetis_mcg_set_fbi();\n        break;\n      case 3:\n        kinetis_mcg_set_fbe();\n        break;\n      case 4:\n        kinetis_mcg_set_blpi();\n        break;\n      case 5:\n        kinetis_mcg_set_blpe();\n        break;\n      case 6:\n        kinetis_mcg_set_pbe();\n        break;\n      case 7:\n        kinetis_mcg_set_pee();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (mode != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "configure_clock_mode_00001b10",
                "param_1": "mode",
                "uVar1": "result"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "kinetis_mcg_set_pee",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_blpi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "disable_interrupts_00001bb8",
            "code": "\nvoid disableInterrupts_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    bit_clear8(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    bit_clear8(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  configureClock(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "disable_interrupts_00001bb8",
                "kinetis_mcg_set_fll_factor": "configureClock"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 irqState;\n  \n  irqState = disableIRQ();\n  setSafeMode();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initializeMCGIRCLK();\n  initializeERCLK32K();\n  setMode(7);\n  restoreIRQ(irqState);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "irqState",
                "kinetis_mcg_set_safe_mode": "setSafeMode",
                "kinetis_mcg_init_mcgirclk": "initializeMCGIRCLK",
                "kinetis_mcg_init_erclk32k": "initializeERCLK32K",
                "kinetis_mcg_set_mode": "setMode",
                "irq_disable": "disableIRQ",
                "irq_restore": "restoreIRQ"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "kinetis_mcg_init_mcgirclk",
                "irq_restore",
                "irq_disable",
                "kinetis_mcg_set_mode",
                "kinetis_mcg_set_safe_mode",
                "kinetis_mcg_init_erclk32k"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_yield_00001cf0",
            "code": "\nvoid check_and_yield_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_yield_00001cf0"
            },
            "calling": [
                "irq_handler"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculate_offset_00001d08(uint value,int multiplier)\n\n{\n  return multiplier * 4 + (value & 0xf0000000 | (value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "value",
                "param_2": "multiplier"
            },
            "calling": [
                "bit_set32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_bit_to1_00001d3a",
            "code": "\nvoid setBitTo1_00001d3a(undefined4 address,undefined bitPosition)\n\n{\n  undefined4 *bitPointer;\n  \n  bitPointer = (undefined4 *)bitband_addr(address,bitPosition);\n  *bitPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_bit_to1_00001d3a",
                "param_1": "address",
                "param_2": "bitPosition",
                "puVar1": "bitPointer"
            },
            "calling": [
                "clk_en"
            ],
            "called": [
                "bitband_addr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "set_bits_and_add_constant_00001d5e",
            "code": "\nuint setBitsAndAddConstant_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "set_bits_and_add_constant_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "set_bits_and_mask_00001d80",
            "code": "\nuint setBitsAndMask_00001d80(ushort value)\n\n{\n  return value & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "set_bits_and_mask_00001d80",
                "param_1": "value"
            },
            "calling": [
                "gpio_init",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "get_lowest_three_bits_00001da2",
            "code": "\nushort getLowestThreeBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "get_lowest_three_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init_port",
                "clk_en"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "extract_lower_bits_00001dc0",
            "code": "\nushort extractLowerBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "extract_lower_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "set_bit_in_port_num_00001ddc",
            "code": "\nvoid setBitInPortNum_00001ddc(undefined2 portNumber)\n\n{\n  char charValue;\n  \n  charValue = port_num(portNumber);\n  bit_set32(&DAT_40048038,charValue + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "set_bit_in_port_num_00001ddc",
                "param_1": "portNumber",
                "cVar1": "charValue"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "bit_set32",
                "port_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_from_data_00001e0c",
            "code": "\nuint extract_bits_from_data_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_from_data_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "irq_handler",
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bits_00001e44",
            "code": "\nvoid updateBits_00001e44(int offset,uint bitPosition,int value)\n\n{\n  int wordOffset;\n  \n  wordOffset = (int)bitPosition >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (wordOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (wordOffset + offset * 4) * 4) & ~(0xf << ((bitPosition & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (wordOffset + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (wordOffset + offset * 4) * 4) | value << ((bitPosition & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bits_00001e44",
                "param_1": "offset",
                "param_2": "bitPosition",
                "param_3": "value",
                "iVar1": "wordOffset"
            },
            "calling": [
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "extract_and_write_map_00001ec4",
            "code": "\nvoid extract_and_write_map_00001ec4(undefined4 input_1,undefined4 input_2)\n\n{\n  undefined4 context;\n  \n  context = get_ctx(input_1,input_2);\n  write_map(input_1,input_2,context);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "extract_and_write_map_00001ec4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "context"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "get_ctx",
                "write_map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "initialize_pin_00001eea",
            "code": "\nundefined4 initialize_pin_00001eea(undefined2 port_handle,byte pin_value)\n\n{\n  uint pin_number;\n  int gpio_address;\n  int pin_num_var;\n  \n  gpio_init_port(port_handle,0);\n  if ((char)pin_value < '\\0') {\n    pin_number = pin_num(port_handle);\n    gpio_address = gpio(port_handle);\n    *(uint *)(gpio_address + 0x14) = *(uint *)(gpio_address + 0x14) | 1 << (pin_number & 0xff);\n  }\n  else {\n    pin_number = pin_num(port_handle);\n    gpio_address = gpio(port_handle);\n    *(uint *)(gpio_address + 0x14) = *(uint *)(gpio_address + 0x14) & ~(1 << (pin_number & 0xff));\n  }\n  gpio_address = port(port_handle);\n  pin_num_var = pin_num(port_handle);\n  *(uint *)(gpio_address + pin_num_var * 4) = pin_value & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "initialize_pin_00001eea",
                "param_1": "port_handle",
                "param_2": "pin_value",
                "uVar1": "pin_number",
                "iVar2": "gpio_address",
                "iVar3": "pin_num_var"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "port",
                "gpio_init_port",
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_pin_value_00001f80",
            "code": "\nvoid updatePinValue_00001f80(undefined2 pinConfig,undefined4 newValue)\n\n{\n  int portAddress;\n  int pinIndex;\n  undefined4 portNumber;\n  undefined4 pinNumber;\n  uint currentValue;\n  \n  clk_en(pinConfig);\n  portAddress = port(pinConfig);\n  pinIndex = pin_num(pinConfig);\n  currentValue = *(uint *)(portAddress + pinIndex * 4);\n  portAddress = port(pinConfig);\n  pinIndex = pin_num(pinConfig);\n  *(undefined4 *)(portAddress + pinIndex * 4) = newValue;\n  if ((currentValue & 0xf0000) != 0) {\n    portNumber = port_num(pinConfig);\n    pinNumber = pin_num(pinConfig);\n    ctx_clear(portNumber,pinNumber);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_pin_value_00001f80",
                "param_1": "pinConfig",
                "param_2": "newValue",
                "iVar1": "portAddress",
                "iVar2": "pinIndex",
                "uVar3": "portNumber",
                "uVar4": "pinNumber",
                "uVar5": "currentValue"
            },
            "calling": [
                "gpio_init",
                "uart_init_pins"
            ],
            "called": [
                "port",
                "clk_en",
                "port_num",
                "ctx_clear",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_pin_as_output_00001ff6",
            "code": "\nvoid setPinAsOutput_00001ff6(undefined2 pinNumber)\n\n{\n  uint pinMask;\n  int gpioAddress;\n  \n  pinMask = pin_num(pinNumber);\n  gpioAddress = gpio(pinNumber);\n  *(int *)(gpioAddress + 4) = 1 << (pinMask & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_pin_as_output_00001ff6",
                "param_1": "pinNumber",
                "uVar1": "pinMask",
                "iVar2": "gpioAddress"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "find_and_execute_modified_instructions_00002028",
            "code": "\nvoid find_and_execute_modified_instructions_00002028(int base_address,undefined4 context)\n\n{\n  int context_index;\n  uint bitset;\n  uint bit_position;\n  \n  bitset = *(uint *)(base_address + 0xa0);\n  for (bit_position = 0; (int)bit_position < 0x20; bit_position = bit_position + 1) {\n    if (((bitset & 1 << (bit_position & 0xff)) != 0) &&\n       ((*(uint *)(base_address + bit_position * 4) & 0xf0000) != 0)) {\n      *(int *)(base_address + 0xa0) = 1 << (bit_position & 0xff);\n      context_index = get_ctx(context,bit_position);\n      (**(code **)(&DAT_1fff0b78 + context_index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + context_index * 0xc));\n    }\n  }\n  check_and_yield_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "find_and_execute_modified_instructions_00002028",
                "param_1": "base_address",
                "param_2": "context",
                "iVar1": "context_index",
                "uVar2": "bitset",
                "local_c": "bit_position"
            },
            "calling": [
                "isr_portd",
                "isr_porta",
                "isr_porte",
                "isr_portb",
                "isr_portc"
            ],
            "called": [
                "get_ctx",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "disable_irq_handler_000020b8",
            "code": "\nvoid disable_irq_handler_000020b8(void)\n\n{\n  irq_handler(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "disable_irq_handler_000020b8"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_irq_handler_000020cc",
            "code": "\nvoid initializeIRQHandler_000020cc(void)\n\n{\n  irq_handler(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_irq_handler_000020cc"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_irq_handler_000020e0",
            "code": "\nvoid initialize_irq_handler_000020e0(void)\n\n{\n  irq_handler(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_irq_handler_000020e0"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_irq_handler_000020f4",
            "code": "\nvoid initializeIRQHandler_000020f4(void)\n\n{\n  handleIRQ(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_irq_handler_000020f4",
                "irq_handler": "handleIRQ"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_irq_handler_00002108",
            "code": "\nvoid initializeIRQHandler_00002108(void)\n\n{\n  irq_handler(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_irq_handler_00002108"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_thread_stack_information_0000211c",
            "code": "\nvoid printThreadStackInformation_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 threadName;\n  int stackUsage;\n  int stackState;\n  dword baseAddr;\n  uint queueLength;\n  undefined4 *threadInfo;\n  undefined4 stackPointer;\n  undefined4 stackStart;\n  int totalThreadStackUsage;\n  short threadIndex;\n  int totalStackUsage;\n  int local_14;\n  \n  threadName = 0x515f;\n  local_14 = 0;\n  totalStackUsage = 0;\n  iprintf(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",&DAT_000070b8,\n          \"state\");\n  totalThreadStackUsage = thread_isr_stack_usage();\n  stackStart = thread_isr_stack_start();\n  stackPointer = thread_isr_stack_pointer();\n  iprintf(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n          totalThreadStackUsage,stackStart,stackPointer);\n  local_14 = local_14 + 0x200;\n  if (0 < totalThreadStackUsage) {\n    totalStackUsage = totalThreadStackUsage + totalStackUsage;\n  }\n  for (threadIndex = 1; threadIndex < 0x21; threadIndex = threadIndex + 1) {\n    threadInfo = *(undefined4 **)(&DAT_1fff0358 + threadIndex * 4);\n    if (threadInfo != (undefined4 *)0x0) {\n      queueLength = (uint)*(byte *)(threadInfo + 1);\n      baseAddr = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[queueLength];\n      stackState = (int)&threadName + (uint)(8 < queueLength);\n      stackUsage = threadInfo[0xb];\n      local_14 = stackUsage + local_14;\n      iVar1 = thread_measure_stack_free(threadInfo[9]);\n      stackUsage = stackUsage - iVar1;\n      totalStackUsage = stackUsage + totalStackUsage;\n      iprintf(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n              (int)*(short *)((int)threadInfo + 6),threadInfo[10],baseAddr,stackState,\n              *(undefined *)((int)threadInfo + 5),threadInfo[0xb],stackUsage,threadInfo[9],*threadInfo);\n    }\n  }\n  iprintf(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,&DAT_00007190,\n          local_14,totalStackUsage);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_thread_stack_information_0000211c",
                "local_40": "threadName",
                "local_3c": "stackUsage",
                "local_38": "stackState",
                "local_34": "baseAddr",
                "local_30": "queueLength",
                "local_2c": "threadInfo",
                "local_28": "stackPointer",
                "local_24": "stackStart",
                "local_20": "totalThreadStackUsage",
                "local_1a": "threadIndex",
                "local_18": "totalStackUsage"
            },
            "calling": [
                "core_panic",
                "_ps_handler"
            ],
            "called": [
                "iprintf",
                "thread_isr_stack_start",
                "thread_isr_stack_usage",
                "thread_isr_stack_pointer",
                "thread_measure_stack_free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_if_equal_00002270",
            "code": "\nundefined checkIfEqual_00002270(int input)\n\n{\n  undefined result;\n  int value1;\n  bool isMatch;\n  \n  value1 = *(int *)(input + 0xc);\n  isMatch = *(int *)(input + 8) == value1;\n  if (isMatch) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!isMatch) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_if_equal_00002270",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "value1",
                "bVar3": "isMatch"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_difference_00002294",
            "code": "\nundefined checkDifference_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool isEqual;\n  \n  difference = *(int *)(input + 4);\n  isEqual = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (isEqual) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_difference_00002294",
                "param_1": "input",
                "iVar2": "difference",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_store_value_000022be",
            "code": "\nvoid incrementAndStoreValue_000022be(int *array,undefined value)\n\n{\n  uint currentValue;\n  \n  currentValue = array[3];\n  array[3] = currentValue + 1;\n  *(undefined *)((currentValue & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_store_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "currentValue"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_access_memory_000022f0",
            "code": "\nundefined incrementAndAccessMemory_000022f0(int *memoryPointer)\n\n{\n  uint value;\n  \n  value = memoryPointer[2];\n  memoryPointer[2] = value + 1;\n  return *(undefined *)((value & memoryPointer[1] - 1U) + *memoryPointer);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_access_memory_000022f0",
                "param_1": "memoryPointer",
                "uVar1": "value"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_data_from_buffer_0000231c",
            "code": "\nint copyDataFromBuffer_0000231c(undefined4 buffer,undefined *destination,int length)\n\n{\n  undefined data;\n  int isEmpty;\n  undefined *destPtr;\n  int remainingLength;\n  \n  destPtr = destination;\n  remainingLength = length;\n  while ((remainingLength != 0 && (isEmpty = tsrb_empty(buffer), isEmpty == 0))) {\n    data = _pop(buffer);\n    *destPtr = data;\n    remainingLength = remainingLength + -1;\n    destPtr = destPtr + 1;\n  }\n  return length - remainingLength;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_data_from_buffer_0000231c",
                "param_1": "buffer",
                "param_2": "destination",
                "param_3": "length",
                "uVar1": "data",
                "iVar2": "isEmpty",
                "local_20": "destPtr",
                "local_14": "remainingLength"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_pop",
                "tsrb_empty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_buffer_availability_00002364",
            "code": "\nundefined4 checkBufferAvailability_00002364(undefined4 buffer,undefined data)\n\n{\n  int isBufferFull;\n  undefined4 returnValue;\n  \n  isBufferFull = tsrb_full(buffer);\n  if (isBufferFull == 0) {\n    _push(buffer,data);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_buffer_availability_00002364",
                "param_1": "buffer",
                "param_2": "data",
                "iVar1": "isBufferFull",
                "uVar2": "returnValue"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "_push",
                "tsrb_full"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_real_time_clock_00002396",
            "code": "\nvoid initialize_real_time_clock_00002396(void)\n\n{\n  initialize_rtc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_real_time_clock_00002396",
                "rtc_init": "initialize_rtc"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "rtc_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_application_000023a4",
            "code": "\nundefined4 initialize_application_000023a4(void)\n\n{\n  undefined4 return_value;\n  undefined buffer [128];\n  \n  startForkserver(0);\n  puts(\"Welcome to RIOT!\");\n  return_value = shell_run(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_application_000023a4",
                "uVar1": "return_value",
                "auStack_88": "buffer"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "startForkserver",
                "shell_run",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "execute_software_interrupt_000023c8",
            "code": "\nvoid executeSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "execute_software_interrupt_000023c8"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_afl_call_000023d0",
            "code": "\nundefined4 executeAflCall_000023d0(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = aflCall(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_afl_call_000023d0",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_next_pointer_0000240c",
            "code": "\nundefined4 * extractNextPointer_0000240c(undefined4 *pointer)\n\n{\n  undefined4 *nextPointer;\n  \n  nextPointer = (undefined4 *)*pointer;\n  if (nextPointer != (undefined4 *)0x0) {\n    *pointer = *nextPointer;\n  }\n  return nextPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_next_pointer_0000240c",
                "param_1": "pointer",
                "puVar1": "nextPointer"
            },
            "calling": [
                "mutex_unlock"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "set_or_get_thread_status_00002434",
            "code": "\nundefined4 set_or_get_thread_status_00002434(int *thread_status_ptr,int flag)\n\n{\n  int saved_thread_status;\n  undefined4 interrupt_status;\n  \n  interrupt_status = irq_disable();\n  saved_thread_status = DAT_1fff03dc;\n  if (*thread_status_ptr == 0) {\n    *thread_status_ptr = -1;\n    irq_restore(interrupt_status);\n    interrupt_status = 1;\n  }\n  else if (flag == 0) {\n    irq_restore(interrupt_status);\n    interrupt_status = 0;\n  }\n  else {\n    sched_set_status(DAT_1fff03dc,2);\n    if (*thread_status_ptr == -1) {\n      *thread_status_ptr = saved_thread_status + 8;\n      *(undefined4 *)*thread_status_ptr = 0;\n    }\n    else {\n      thread_add_to_list(thread_status_ptr,saved_thread_status);\n    }\n    irq_restore(interrupt_status);\n    thread_yield_higher();\n    interrupt_status = 1;\n  }\n  return interrupt_status;\n}\n\n",
            "renaming": {
                "FUN_00002434": "set_or_get_thread_status_00002434",
                "param_1": "thread_status_ptr",
                "param_2": "flag",
                "iVar1": "saved_thread_status",
                "uVar2": "interrupt_status"
            },
            "calling": [
                "mutex_lock"
            ],
            "called": [
                "thread_yield_higher",
                "sched_set_status",
                "irq_restore",
                "irq_disable",
                "thread_add_to_list"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "update_status_and_switch_000024bc",
            "code": "\nvoid updateStatusAndSwitch_000024bc(int *statusPtr)\n\n{\n  undefined statusValue;\n  undefined4 irqFlags;\n  int headItem;\n  \n  irqFlags = irq_disable();\n  if (*statusPtr == 0) {\n    irq_restore(irqFlags);\n  }\n  else if (*statusPtr == -1) {\n    *statusPtr = 0;\n    irq_restore(irqFlags);\n  }\n  else {\n    headItem = list_remove_head(statusPtr);\n    sched_set_status(headItem + -8,10);\n    if (*statusPtr == 0) {\n      *statusPtr = -1;\n    }\n    statusValue = *(undefined *)(headItem + -3);\n    irq_restore(irqFlags);\n    sched_switch(statusValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "update_status_and_switch_000024bc",
                "param_1": "statusPtr",
                "uVar1": "statusValue",
                "uVar2": "irqFlags",
                "iVar3": "headItem"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "sched_set_status",
                "irq_restore",
                "sched_switch",
                "irq_disable",
                "list_remove_head"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "set_value_00002538",
            "code": "\nvoid set_value_00002538(byte byte_param,uint uint_param)\n\n{\n  if ((char)byte_param < '\\0') {\n    (&DAT_e000ed14)[byte_param & 0xf] = (char)((uint_param & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byte_param + -0x1fff1c00) = (char)((uint_param & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "set_value_00002538",
                "param_1": "byte_param",
                "param_2": "uint_param"
            },
            "calling": [
                "cortexm_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_system_0000258c",
            "code": "\n\n\nvoid initializeSystem_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  setValue(0xfffffffe,1);\n  setValue(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    setValue((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_system_0000258c",
                "local_c": "counter",
                "set_value_00002538": "setValue"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_real_time_trace_000025f4",
            "code": "\nvoid initialize_real_time_trace_000025f4(void)\n\n{\n  initialize_rtt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_real_time_trace_000025f4",
                "rtt_init": "initialize_rtt"
            },
            "calling": [
                "periph_init"
            ],
            "called": [
                "rtt_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "set_system_time_00002600",
            "code": "\nundefined4 setSystemTime_00002600(undefined4 timeStruct)\n\n{\n  undefined4 timeInSeconds;\n  \n  timeInSeconds = mktime(timeStruct);\n  rtt_set_counter(timeInSeconds);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "set_system_time_00002600",
                "param_1": "timeStruct",
                "uVar1": "timeInSeconds"
            },
            "calling": [
                "_rtc_settime"
            ],
            "called": [
                "rtt_set_counter",
                "mktime"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "get_and_convert_time_00002624",
            "code": "\nundefined4 get_and_convert_time_00002624(undefined4 converted_time)\n\n{\n  undefined4 current_time;\n  undefined4 stack_counter;\n  \n  current_time = rtt_get_counter();\n  stack_counter = 0;\n  gmtime_r(&current_time,converted_time);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "get_and_convert_time_00002624",
                "param_1": "converted_time",
                "local_10": "current_time",
                "uStack_c": "stack_counter"
            },
            "calling": [
                "_rtc_gettime"
            ],
            "called": [
                "gmtime_r",
                "rtt_get_counter"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "set_alarm_00002654",
            "code": "\nundefined4 setAlarm_00002654(undefined4 timeParam,undefined4 alarmParam,undefined4 flagParam)\n\n{\n  undefined4 timestamp;\n  \n  timestamp = mktime(timeParam);\n  DAT_1fff0d9c = alarmParam;\n  rtt_set_alarm(timestamp,0x26f1,flagParam);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "set_alarm_00002654",
                "param_1": "timeParam",
                "param_2": "alarmParam",
                "param_3": "flagParam",
                "uVar1": "timestamp"
            },
            "calling": [
                "_rtc_setalarm"
            ],
            "called": [
                "mktime",
                "rtt_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "get_alarm_time_00002690",
            "code": "\nundefined4 getAlarmTime_00002690(undefined4 outputTime)\n\n{\n  undefined4 alarmTime;\n  undefined4 zeroValue;\n  \n  alarmTime = rtt_get_alarm();\n  zeroValue = 0;\n  gmtime_r(&alarmTime,outputTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "get_alarm_time_00002690",
                "param_1": "outputTime",
                "local_10": "alarmTime",
                "uStack_c": "zeroValue"
            },
            "calling": [
                "_rtc_getalarm"
            ],
            "called": [
                "rtt_get_alarm",
                "gmtime_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "clear_alarm_000026c0",
            "code": "\nvoid clearAlarm_000026c0(void)\n\n{\n  rtt_clear_alarm();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "clear_alarm_000026c0"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_clear_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_rtt_000026d8",
            "code": "\nvoid initializeRtt_000026d8(void)\n\n{\n  powerOnRtt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_rtt_000026d8",
                "rtt_poweron": "powerOnRtt"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "poweroff_000026e4",
            "code": "\nvoid poweroff_000026e4(void)\n\n{\n  poweroff_000026e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "poweroff_000026e4",
                "rtt_poweroff": "poweroff"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweroff"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 callbackParam)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callbackParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid setBitInMemory_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_data_00002744",
            "code": "\nvoid updateData_00002744(byte inputByte,uint inputValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((inputValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((inputValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_data_00002744",
                "param_1": "inputByte",
                "param_2": "inputValue"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_yield_00002798",
            "code": "\nvoid checkAndYield_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_yield_00002798"
            },
            "calling": [
                "isr_rtc"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initialize_system_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  power_on_rtt();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0",
                "rtt_poweron": "power_on_rtt"
            },
            "calling": [
                "rtc_init"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_data_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 get_data_address_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_data_address_0000281c"
            },
            "calling": [
                "rtc_get_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_hardware_0000285c",
            "code": "\n\n\nvoid initializeHardware_0000285c(undefined4 hardwareConfig)\n\n{\n  _DAT_4003d000 = hardwareConfig;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_hardware_0000285c",
                "param_1": "hardwareConfig"
            },
            "calling": [
                "rtc_set_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_interrupts_00002894",
            "code": "\n\n\nvoid initializeInterrupts_00002894(int interruptNumber,undefined4 data1,undefined4 data2)\n\n{\n  _DAT_4003d008 = interruptNumber + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = data1;\n  DAT_1fff0da4 = data2;\n  NVIC_SetPriority(0x2e,10);\n  NVIC_EnableIRQ(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_interrupts_00002894",
                "param_1": "interruptNumber",
                "param_2": "data1",
                "param_3": "data2"
            },
            "calling": [
                "rtc_set_alarm"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_pointer_000028f0",
            "code": "\n\n\nint incrementPointer_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_pointer_000028f0"
            },
            "calling": [
                "rtc_get_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_flags_00002910",
            "code": "\n\n\nvoid clearFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "calling": [
                "rtc_clear_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "rtt_init",
                "rtc_poweron"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_enable_flag_00002970",
            "code": "\n\n\nvoid clearInterruptEnableFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_enable_flag_00002970"
            },
            "calling": [
                "rtc_poweroff"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_interrupt_handlers_00002994",
            "code": "\n\n\nvoid executeInterruptHandlers_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  cortexm_isr_end();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_interrupt_handlers_00002994"
            },
            "calling": [],
            "called": [
                "cortexm_isr_end"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "print_character_00002a00",
            "code": "\nvoid printCharacter_00002a00(undefined4 character)\n\n{\n  print(character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "print_character_00002a00",
                "param_1": "character",
                "putchar": "print"
            },
            "calling": [
                "print_prompt",
                "readline"
            ],
            "called": [
                "putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_value_index_00002a18",
            "code": "\nint findValueIndex_00002a18(int *array,undefined4 targetValue)\n\n{\n  int iVar1;\n  int *arrayPtr;\n  undefined **rebootStringPtr;\n  uint index;\n  int *currentValuePtr;\n  \n  arrayPtr = array;\n  rebootStringPtr = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    currentValuePtr = (&arrayPtr)[index];\n    if (currentValuePtr != (int *)0x0) {\n      for (; *currentValuePtr != 0; currentValuePtr = currentValuePtr + 3) {\n        iVar1 = compareStrings(*currentValuePtr,targetValue);\n        if (iVar1 == 0) {\n          return currentValuePtr[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_value_index_00002a18",
                "param_1": "array",
                "param_2": "targetValue",
                "local_18": "arrayPtr",
                "local_14": "rebootStringPtr",
                "local_10": "index",
                "local_c": "currentValuePtr",
                "strcmp": "compareStrings"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandArray)\n\n{\n  int *currentCommand;\n  undefined **commandDescription;\n  uint index;\n  int *currentParameter;\n  \n  iprintf(\"%-20s %s\\n\",\"Command\",\"Description\");\n  puts(\"---------------------------------------\");\n  currentCommand = commandArray;\n  commandDescription = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentParameter = (&currentCommand)[index];\n    if (currentParameter != (int *)0x0) {\n      for (; *currentParameter != 0; currentParameter = currentParameter + 3) {\n        iprintf(\"%-20s %s\\n\",*currentParameter,currentParameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandArray",
                "local_18": "currentCommand",
                "local_14": "commandDescription",
                "local_10": "index",
                "local_c": "currentParameter"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "iprintf",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "parse_input_00002b10",
            "code": "\nvoid parseInput_00002b10(undefined4 paramCount,byte *input)\n\n{\n  int result;\n  byte *next;\n  byte *pointers [3];\n  code *commandHandler;\n  char **arguments;\n  uint argIndex;\n  byte quoteChar;\n  char *currentChar;\n  char *currentArg;\n  char **argPointers;\n  uint argCount;\n  int escapeCount;\n  uint quoteCount;\n  byte *ptr;\n  \n  quoteCount = 0;\n  escapeCount = 0;\n  ptr = input;\n  while( true ) {\n    pointers[0] = input;\n    pointers[1] = (byte *)paramCount;\n    if (0x20 < *ptr) {\n      if ((*ptr == 0x22) || (*ptr == 0x27)) {\n        quoteChar = *ptr;\n        do {\n          next = ptr + 1;\n          if (*next == 0) {\n            ptr = next;\n            puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*next == 0x5c) {\n            escapeCount = escapeCount + 1;\n            ptr = ptr + 2;\n            next = ptr;\n            if (*ptr == 0) {\n              puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          ptr = next;\n        } while (quoteChar != *ptr);\n        if (0x20 < ptr[1]) {\n          puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*ptr == 0x5c) {\n            escapeCount = escapeCount + 1;\n            ptr = ptr + 1;\n            if (*ptr == 0) {\n              puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          ptr = ptr + 1;\n          if (*ptr == 0x22) {\n            puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *ptr);\n      }\n      quoteCount = quoteCount + 1;\n    }\n    if (*ptr == 0) break;\n    *ptr = 0;\n    ptr = ptr + 1;\n  }\n  if (quoteCount != 0) {\n    argIndex = quoteCount;\n    arguments = (char **)((int)pointers - ((quoteCount + 1) * 4 + 7 & 0xfffffff8));\n    arguments[quoteCount] = (char *)0x0;\n    ptr = input;\n    for (argCount = 0; argPointers = arguments, argCount < quoteCount; argCount = argCount + 1) {\n      for (; *ptr == 0; ptr = ptr + 1) {\n      }\n      if ((*ptr == 0x22) || (*ptr == 0x27)) {\n        ptr = ptr + 1;\n      }\n      arguments[argCount] = (char *)ptr;\n      for (; *ptr != 0; ptr = ptr + 1) {\n      }\n    }\n    for (; (escapeCount != 0 && (*argPointers != (char *)0x0)); argPointers = argPointers + 1) {\n      for (currentArg = *argPointers; *currentArg != '\\0'; currentArg = currentArg + 1) {\n        if (*currentArg == '\\') {\n          for (currentChar = currentArg; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          escapeCount = escapeCount + -1;\n          if (escapeCount == 0) break;\n        }\n      }\n    }\n    commandHandler = (code *)find_handler(paramCount,*arguments);\n    if (commandHandler == (code *)0x0) {\n      result = strcmp(&DAT_00007214,*arguments);\n      if (result == 0) {\n        print_help(pointers[1]);\n      }\n      else {\n        iprintf(\"shell: command not found: %s\\n\",*arguments);\n      }\n    }\n    else {\n      (*commandHandler)(quoteCount,arguments);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "parse_input_00002b10",
                "param_1": "paramCount",
                "param_2": "input",
                "iVar1": "result",
                "pbVar2": "next",
                "local_48": "pointers",
                "local_3c": "commandHandler",
                "local_38": "arguments",
                "local_34": "argIndex",
                "local_2d": "quoteChar",
                "local_2c": "currentChar",
                "local_28": "currentArg",
                "local_24": "argPointers",
                "local_20": "argCount",
                "local_1c": "escapeCount",
                "local_18": "quoteCount",
                "local_14": "ptr"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "iprintf",
                "find_handler",
                "puts",
                "strcmp",
                "print_help"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "read_line_00002d94",
            "code": "\nuint readLine_00002d94(undefined *buffer,int bufferSize)\n\n{\n  int inputCharacter;\n  byte byteValue;\n  bool isFirstChar;\n  undefined *currentChar;\n  \n  currentChar = buffer;\n  while( true ) {\n    if (bufferSize + -1 <= (int)currentChar - (int)buffer) {\n      return 0xffffffff;\n    }\n    inputCharacter = getchar();\n    if (inputCharacter < 0) break;\n    if ((inputCharacter == 0xd) || (inputCharacter == 10)) {\n      *currentChar = 0;\n      _putchar(0xd);\n      _putchar(10);\n      isFirstChar = currentChar == buffer;\n      if (isFirstChar) {\n        buffer = (undefined *)0x1;\n      }\n      byteValue = (byte)buffer;\n      if (!isFirstChar) {\n        byteValue = 0;\n      }\n      return (uint)byteValue;\n    }\n    if ((inputCharacter == 8) || (inputCharacter == 0x7f)) {\n      if (currentChar != buffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        _putchar(8);\n        _putchar(0x20);\n        _putchar(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputCharacter;\n      _putchar(inputCharacter);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "read_line_00002d94",
                "param_1": "buffer",
                "param_2": "bufferSize",
                "iVar1": "inputCharacter",
                "bVar2": "byteValue",
                "bVar3": "isFirstChar",
                "local_c": "currentChar"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "_putchar",
                "getchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "print_arrow_and_space_00002e48",
            "code": "\nvoid printArrowAndSpace_00002e48(void)\n\n{\n  printCharacter(0x3e);\n  printCharacter(0x20);\n  flushFileStream(*(undefined4 *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "print_arrow_and_space_00002e48",
                "_putchar": "printCharacter",
                "fflush": "flushFileStream"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "fflush",
                "_putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "read_input_00002e6c",
            "code": "\nvoid read_input_00002e6c(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int read_result;\n  \n  print_prompt();\n  do {\n    read_result = readline(arg2,arg3);\n    if (read_result == 0) {\n      handle_input_line(arg1,arg2);\n    }\n    print_prompt();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "read_input_00002e6c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "iVar1": "read_result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "handle_input_line",
                "print_prompt",
                "readline"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "reboot_system_00002e9c",
            "code": "\nundefined4 reboot_system_00002e9c(void)\n\n{\n  reboot();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "reboot_system_00002e9c",
                "pm_reboot": "reboot"
            },
            "calling": [],
            "called": [
                "pm_reboot"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "execute_ps_function_00002eb4",
            "code": "\nundefined4 executePsFunction_00002eb4(void)\n\n{\n  psFunction();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "execute_ps_function_00002eb4",
                "ps": "psFunction"
            },
            "calling": [],
            "called": [
                "ps"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_and_dump_data_00002ecc",
            "code": "\nvoid readAndDumpData_00002ecc(undefined4 deviceIndex,int deviceDescriptor)\n\n{\n  undefined4 classString;\n  undefined4 deviceType;\n  undefined dataBuffer [8];\n  uint dataSize;\n  \n  dataSize = saul_reg_read(deviceDescriptor,dataBuffer);\n  if ((int)dataSize < 1) {\n    iprintf(\"error: failed to read from device #%i\\n\",deviceIndex);\n  }\n  else {\n    deviceType = *(undefined4 *)(deviceDescriptor + 8);\n    classString = saul_class_to_str(*(undefined *)(*(int *)(deviceDescriptor + 0xc) + 8));\n    iprintf(\"Reading from #%i (%s|%s)\\n\",deviceIndex,deviceType,classString);\n    phydat_dump(dataBuffer,dataSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_and_dump_data_00002ecc",
                "param_1": "deviceIndex",
                "param_2": "deviceDescriptor",
                "uVar1": "classString",
                "uVar2": "deviceType",
                "auStack_1c": "dataBuffer",
                "local_14": "dataSize"
            },
            "calling": [
                "read",
                "probe_all"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "saul_reg_read",
                "phydat_dump"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "iterate_and_probe_00002f30",
            "code": "\nvoid iterateAndProbe_00002f30(void)\n\n{\n  int iterationCount;\n  undefined4 *currentPtr;\n  \n  iterationCount = 0;\n  for (currentPtr = DAT_1fff0db0; currentPtr != (undefined4 *)0x0; currentPtr = (undefined4 *)*currentPtr) {\n    probe(iterationCount,currentPtr);\n    puts(&DAT_00007380);\n    iterationCount = iterationCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "iterate_and_probe_00002f30",
                "local_10": "iterationCount",
                "local_c": "currentPtr"
            },
            "calling": [
                "read"
            ],
            "called": [
                "probe",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid printDeviceList_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceCount;\n  undefined4 *devicePtr;\n  \n  devicePtr = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    puts(\"No devices found\");\n  }\n  else {\n    puts(\"ID\\tClass\\t\\tName\");\n  }\n  for (; devicePtr != (undefined4 *)0x0; devicePtr = (undefined4 *)*devicePtr) {\n    deviceClass = saul_class_to_str(*(undefined *)(devicePtr[3] + 8));\n    iprintf(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceClass,devicePtr[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "devicePtr",
                "uVar1": "deviceClass"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "execute_device_probe_00002fe0",
            "code": "\nvoid executeDeviceProbe_00002fe0(int argc,undefined4 *argv)\n\n{\n  int deviceNameComparison;\n  undefined4 deviceID;\n  \n  if (argc < 3) {\n    iprintf(\"usage: %s %s <device id>|all\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceNameComparison = compareDeviceName(argv[2],&DAT_000073d4);\n    if (deviceNameComparison == 0) {\n      probeAllDevices();\n    }\n    else {\n      deviceID = convertStringToInteger(argv[2]);\n      deviceNameComparison = saul_reg_find_nth(deviceID);\n      if (deviceNameComparison == 0) {\n        printErrorMessage(\"error: undefined device id given\");\n      }\n      else {\n        probeSelectedDevice(deviceID,deviceNameComparison);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "execute_device_probe_00002fe0",
                "param_1": "argc",
                "param_2": "argv",
                "iVar1": "deviceNameComparison",
                "uVar2": "deviceID",
                "strcmp": "compareDeviceName",
                "probe_all": "probeAllDevices",
                "atoi": "convertStringToInteger",
                "puts": "printErrorMessage",
                "probe": "probeSelectedDevice"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "probe",
                "saul_reg_find_nth",
                "probe_all",
                "puts",
                "strcmp",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_device_data_0000305c",
            "code": "\nvoid writeDeviceData_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 deviceValue;\n  undefined2 deviceValues [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceID;\n  int counter;\n  \n  if (argc < 4) {\n    iprintf(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceID = atoi(argv[2]);\n    deviceIndex = saul_reg_find_nth(deviceID);\n    if (deviceIndex == 0) {\n      puts(\"error: undefined device given\");\n    }\n    else {\n      memset(deviceValues,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (counter = 0; counter < (int)numValues; counter = counter + 1) {\n        deviceValue = atoi(argv[counter + 3]);\n        deviceValues[counter] = deviceValue;\n      }\n      iprintf(\"Writing to device #%i - %s\\n\",deviceID,*(undefined4 *)(deviceIndex + 8));\n      phydat_dump(deviceValues,numValues & 0xff);\n      numValues = saul_reg_write(deviceIndex,deviceValues);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          iprintf(\"error: device #%i is not writable\\n\",deviceID);\n        }\n        else {\n          iprintf(\"error: failure to write to device #%i\\n\",deviceID);\n        }\n      }\n      else {\n        iprintf(\"data successfully written to device #%i\\n\",deviceID);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_device_data_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "deviceValue",
                "auStack_20": "deviceValues",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceID",
                "local_c": "counter"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_reg_write",
                "memset",
                "saul_reg_find_nth",
                "puts",
                "phydat_dump",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "handle_operations_0000316c",
            "code": "\nundefined4 handleOperations_0000316c(int numOperations,undefined4 *arguments)\n\n{\n  int comparisonResult;\n  \n  if (numOperations < 2) {\n    list();\n  }\n  else {\n    comparisonResult = strcmp(arguments[1],&DAT_000074ec);\n    if (comparisonResult == 0) {\n      read(numOperations,arguments);\n    }\n    else {\n      comparisonResult = strcmp(arguments[1],\"write\");\n      if (comparisonResult == 0) {\n        write(numOperations,arguments);\n      }\n      else {\n        iprintf(\"usage: %s read|write\\n\",*arguments);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "handle_operations_0000316c",
                "param_1": "numOperations",
                "param_2": "arguments",
                "iVar1": "comparisonResult"
            },
            "calling": [],
            "called": [
                "list",
                "iprintf",
                "read",
                "strcmp",
                "write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  printMessage(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0",
                "puts": "printMessage"
            },
            "calling": [],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)dayOfWeekOffset + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear",
                "Elf32_Rel_ARRAY_1fff0200": "dayOfWeekOffset"
            },
            "calling": [
                "_parse_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_and_calculate_0000328c",
            "code": "\nundefined4 parse_and_calculate_0000328c(undefined4 *input_strings,int *output_array)\n\n{\n  int iVar1;\n  int remainder;\n  short parsed_value;\n  \n  parsed_value = string_to_int(*input_strings,&remainder,10);\n  output_array[5] = parsed_value + -0x76c;\n  parsed_value = string_to_int(remainder + 1,&remainder,10);\n  output_array[4] = parsed_value + -1;\n  parsed_value = string_to_int(remainder + 1,&remainder,10);\n  output_array[3] = (int)parsed_value;\n  parsed_value = string_to_int(input_strings[1],&remainder,10);\n  output_array[2] = (int)parsed_value;\n  parsed_value = string_to_int(remainder + 1,&remainder,10);\n  output_array[1] = (int)parsed_value;\n  parsed_value = string_to_int(remainder + 1,&remainder,10);\n  *output_array = (int)parsed_value;\n  iVar1 = calculate(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = iVar1;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_and_calculate_0000328c",
                "param_1": "input_strings",
                "param_2": "output_array",
                "local_10": "remainder",
                "local_a": "parsed_value",
                "strtol": "string_to_int",
                "dow": "calculate"
            },
            "calling": [
                "_rtc_setalarm",
                "_rtc_settime"
            ],
            "called": [
                "dow",
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTime)\n\n{\n  iprintf(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,hour,\n          minute,*dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTime",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "_rtc_gettime",
                "_rtc_getalarm"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_and_print_alarm_time_000033c0",
            "code": "\nbool getAndPrintAlarmTime_000033c0(void)\n\n{\n  int errorCode;\n  undefined alarmTimeBuffer [36];\n  \n  errorCode = rtc_get_alarm(alarmTimeBuffer);\n  if (errorCode != 0) {\n    puts(\"rtc: error getting alarm\");\n  }\n  else {\n    _print_time(alarmTimeBuffer);\n  }\n  return errorCode != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_and_print_alarm_time_000033c0",
                "auStack_2c": "alarmTimeBuffer",
                "iVar1": "errorCode"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_alarm",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 inputTime)\n\n{\n  int parseResult;\n  undefined4 returnValue;\n  undefined timeBuffer [36];\n  \n  parseResult = _parse_time(inputTime,timeBuffer);\n  if (parseResult == 0) {\n    parseResult = rtc_set_alarm(timeBuffer,0x31e1,0);\n    if (parseResult == -1) {\n      puts(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "inputTime",
                "iVar1": "parseResult",
                "uVar2": "returnValue",
                "auStack_2c": "timeBuffer"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts",
                "_parse_time",
                "rtc_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "print_rtc_time_00003444",
            "code": "\nbool printRtcTime_00003444(void)\n\n{\n  int result;\n  undefined timeBuffer [36];\n  \n  result = rtc_get_time(timeBuffer);\n  if (result != 0) {\n    puts(\"rtc: error getting time\");\n  }\n  else {\n    _print_time(timeBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "print_rtc_time_00003444",
                "auStack_2c": "timeBuffer",
                "iVar1": "result"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_time",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_rtc_time_00003478",
            "code": "\nundefined4 setRtcTime_00003478(undefined4 timeString)\n\n{\n  int parseResult;\n  undefined4 returnValue;\n  undefined parsedTime [36];\n  \n  parseResult = _parse_time(timeString,parsedTime);\n  if (parseResult == 0) {\n    parseResult = rtc_set_time(parsedTime);\n    if (parseResult == -1) {\n      puts(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_rtc_time_00003478",
                "param_1": "timeString",
                "iVar1": "parseResult",
                "uVar2": "returnValue",
                "auStack_2c": "parsedTime"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_set_time",
                "puts",
                "_parse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  puts(\"usage: rtc <command> [arguments]\");\n  puts(\"commands:\");\n  puts(\"\\tpoweron\\t\\tpower the interface on\");\n  puts(\"\\tpoweroff\\tpower the interface off\");\n  puts(\"\\tclearalarm\\tdeactivate the current alarm\");\n  puts(\"\\tgetalarm\\tprint the currently alarm time\");\n  puts(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  puts(\"\\tgettime\\t\\tprint the current time\");\n  puts(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_rtc_command_00003524",
            "code": "\nundefined4 handle_rtc_command_00003524(int num_arguments,int command_arguments)\n\n{\n  int comparison_result;\n  undefined4 return_value;\n  \n  if (num_arguments < 2) {\n    print_command_usage();\n    return_value = 1;\n  }\n  else {\n    comparison_result = compare_strings(*(undefined4 *)(command_arguments + 4),\"poweron\",7);\n    if (comparison_result == 0) {\n      power_on_rtc();\n    }\n    else {\n      comparison_result = compare_strings(*(undefined4 *)(command_arguments + 4),\"poweroff\",8);\n      if (comparison_result == 0) {\n        power_off_rtc();\n      }\n      else {\n        comparison_result = compare_strings(*(undefined4 *)(command_arguments + 4),\"clearalarm\",8);\n        if (comparison_result == 0) {\n          clear_rtc_alarm();\n        }\n        else {\n          comparison_result = compare_strings(*(undefined4 *)(command_arguments + 4),\"getalarm\",8);\n          if (comparison_result == 0) {\n            get_rtc_alarm();\n          }\n          else {\n            comparison_result = compare_strings(*(undefined4 *)(command_arguments + 4),\"setalarm\",8);\n            if ((comparison_result == 0) && (num_arguments == 4)) {\n              set_rtc_alarm(command_arguments + 8);\n            }\n            else {\n              comparison_result = compare_strings(*(undefined4 *)(command_arguments + 4),\"gettime\",7);\n              if (comparison_result == 0) {\n                get_rtc_time();\n              }\n              else {\n                comparison_result = compare_strings(*(undefined4 *)(command_arguments + 4),\"settime\",7);\n                if ((comparison_result != 0) || (num_arguments != 4)) {\n                  print_formatted_string(\"unknown command or missing parameters: %s\\n\\n\",\n                          *(undefined4 *)(command_arguments + 4));\n                  print_command_usage();\n                  return 1;\n                }\n                set_rtc_time(command_arguments + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_rtc_command_00003524",
                "param_1": "num_arguments",
                "param_2": "command_arguments",
                "iVar1": "comparison_result",
                "uVar2": "return_value",
                "_rtc_usage": "print_command_usage",
                "strncmp": "compare_strings",
                "rtc_poweron": "power_on_rtc",
                "rtc_poweroff": "power_off_rtc",
                "rtc_clear_alarm": "clear_rtc_alarm",
                "_rtc_getalarm": "get_rtc_alarm",
                "_rtc_setalarm": "set_rtc_alarm",
                "_rtc_gettime": "get_rtc_time",
                "_rtc_settime": "set_rtc_time",
                "iprintf": "print_formatted_string"
            },
            "calling": [],
            "called": [
                "iprintf",
                "_rtc_setalarm",
                "rtc_clear_alarm",
                "strncmp",
                "_rtc_gettime",
                "_rtc_getalarm",
                "rtc_poweron",
                "rtc_poweroff",
                "_rtc_settime",
                "_rtc_usage"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "endless_loop_00003658",
            "code": "\nvoid endlessLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "endless_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "pm_reboot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "reset_system_00003688",
            "code": "\nvoid resetSystem_00003688(void)\n\n{\n  NVIC_SystemReset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "reset_system_00003688"
            },
            "calling": [
                "_reboot_handler"
            ],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObjAddress,byte numItems)\n\n{\n  undefined4 unitStr;\n  char isBitSet;\n  uint bitMask;\n  bool isBitMaskNonzero;\n  undefined formatBuf [8];\n  int formatBufLen;\n  char prefix;\n  byte itemIndex;\n  \n  if ((dataObjAddress == 0) || (3 < numItems)) {\n    puts(\"Unable to display data object\");\n  }\n  else {\n    iprintf(\"Data:\");\n    for (itemIndex = 0; itemIndex < numItems; itemIndex = itemIndex + 1) {\n      if (*(byte *)(dataObjAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObjAddress + 6) & 0x8018f;\n        isBitMaskNonzero = bitMask != 0;\n        if (isBitMaskNonzero) {\n          bitMask = 1;\n        }\n        isBitSet = (char)bitMask;\n        if (!isBitMaskNonzero) {\n          isBitSet = '\\0';\n        }\n        if (isBitSet == '\\0') goto LAB_000036ee;\n        prefix = '\\0';\n      }\n      else {\nLAB_000036ee:\n        prefix = phydat_prefix_from_scale((int)*(char *)(dataObjAddress + 7));\n      }\n      iprintf(&DAT_000077bc);\n      if (numItems < 2) {\n        iprintf(\"     \");\n      }\n      else {\n        iprintf(\"[%u] \",itemIndex);\n      }\n      if (prefix == '\\0') {\n        if (*(char *)(dataObjAddress + 7) == '\\0') {\n          iprintf(&DAT_000077d8,(int)*(short *)(dataObjAddress + (uint)itemIndex * 2));\n        }\n        else if ((*(char *)(dataObjAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObjAddress + 7),4)) &&\n                (*(char *)(dataObjAddress + 7) < '\\0')) {\n          formatBufLen = fmt_s16_dfp(formatBuf,(int)*(short *)(dataObjAddress + (uint)itemIndex * 2),\n                                 (int)*(char *)(dataObjAddress + 7));\n          formatBuf[formatBufLen] = 0;\n          iprintf(&DAT_000077dc,formatBuf);\n        }\n        else {\n          iprintf(\"%iE%i\",(int)*(short *)(dataObjAddress + (uint)itemIndex * 2),(int)*(char *)(dataObjAddress + 7));\n        }\n      }\n      else {\n        iprintf(\"%6d %c\",(int)*(short *)(dataObjAddress + (uint)itemIndex * 2),prefix);\n      }\n      unitStr = phydat_unit_to_str(*(undefined *)(dataObjAddress + 6));\n      iprintf(&DAT_000077e8,unitStr);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObjAddress",
                "param_2": "numItems",
                "uVar1": "unitStr",
                "cVar2": "isBitSet",
                "uVar3": "bitMask",
                "bVar4": "isBitMaskNonzero",
                "auStack_18": "formatBuf",
                "local_10": "formatBufLen",
                "local_a": "prefix",
                "local_9": "itemIndex"
            },
            "calling": [
                "probe",
                "write"
            ],
            "called": [
                "phydat_prefix_from_scale",
                "iprintf",
                "puts",
                "fmt_s16_dfp",
                "phydat_unit_to_str"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined inputValue)\n\n{\n  undefined *memoryAddress;\n  \n  switch(inputValue) {\n  case 2:\n    memoryAddress = &DAT_000077ec;\n    break;\n  case 3:\n    memoryAddress = &DAT_000077f0;\n    break;\n  case 4:\n    memoryAddress = &DAT_000077f4;\n    break;\n  case 5:\n    memoryAddress = &DAT_000077f8;\n    break;\n  case 6:\n    memoryAddress = &DAT_000077fc;\n    break;\n  case 7:\n    memoryAddress = (undefined *)0x7800;\n    break;\n  case 8:\n    memoryAddress = &DAT_00007804;\n    break;\n  case 9:\n    memoryAddress = &DAT_00007808;\n    break;\n  case 10:\n    memoryAddress = &DAT_0000780c;\n    break;\n  case 0xb:\n    memoryAddress = &DAT_00007810;\n    break;\n  case 0xc:\n    memoryAddress = &DAT_00007814;\n    break;\n  case 0xd:\n    memoryAddress = &DAT_00007818;\n    break;\n  case 0xe:\n    memoryAddress = &DAT_0000781c;\n    break;\n  case 0xf:\n    memoryAddress = &DAT_00007820;\n    break;\n  case 0x10:\n    memoryAddress = &DAT_00007824;\n    break;\n  case 0x11:\n    memoryAddress = &DAT_0000782c;\n    break;\n  default:\n    memoryAddress = &DAT_00007834;\n    break;\n  case 0x13:\n    memoryAddress = &DAT_00007830;\n    break;\n  case 0x15:\n    memoryAddress = &DAT_00007828;\n  }\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "inputValue",
                "puVar1": "memoryAddress"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_translated_value_00003918",
            "code": "\nundefined4 getTranslatedValue_00003918(undefined inputValue)\n\n{\n  undefined4 translatedValue;\n  \n  switch(inputValue) {\n  case 2:\n    translatedValue = 0x68;\n    break;\n  case 3:\n    translatedValue = 0x6b;\n    break;\n  case 6:\n    translatedValue = 0x4d;\n    break;\n  case 9:\n    translatedValue = 0x47;\n    break;\n  case 0xc:\n    translatedValue = 0x54;\n    break;\n  case 0xf:\n    translatedValue = 0x50;\n    break;\n  case 0xf1:\n    translatedValue = 0x66;\n    break;\n  default:\n    translatedValue = 0;\n    break;\n  case 0xf4:\n    translatedValue = 0x70;\n    break;\n  case 0xf7:\n    translatedValue = 0x6e;\n    break;\n  case 0xfa:\n    translatedValue = 0x75;\n    break;\n  case 0xfd:\n    translatedValue = 0x6d;\n  }\n  return translatedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_translated_value_00003918",
                "param_1": "inputValue",
                "uVar1": "translatedValue"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_description_000039e8",
            "code": "\nchar * getClassDescription_000039e8(char classCode)\n\n{\n  char *description;\n  \n  switch(classCode) {\n  case '\\0':\n    description = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    description = \"ACT_ANY\";\n    break;\n  case 'B':\n    description = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    description = \"ACT_SERVO\";\n    break;\n  case 'D':\n    description = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    description = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    description = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    description = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    description = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    description = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    description = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    description = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    description = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    description = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    description = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    description = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    description = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    description = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    description = \"SENSE_UV\";\n    break;\n  case -0x74:\n    description = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    description = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    description = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    description = \"SENSE_CO2\";\n    break;\n  default:\n    if (classCode == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    description = \"CLASS_UNKNOWN\";\n  }\n  return description;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_description_000039e8",
                "param_1": "classCode",
                "pcVar1": "description"
            },
            "calling": [
                "list",
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_element"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int input_ptr,undefined4 param_value)\n\n{\n  undefined4 result;\n  \n  if (input_ptr == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (***(code ***)(input_ptr + 0xc))(*(undefined4 *)(input_ptr + 4),param_value);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "input_ptr",
                "param_2": "param_value",
                "uVar1": "result"
            },
            "calling": [
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int input,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (input == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(input + 0xc) + 4))(*(undefined4 *)(input + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "input",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int inputOffset,uint inputValue)\n\n{\n  uint remainder;\n  char *outputOffset;\n  uint base;\n  int digitCount;\n  \n  digitCount = 1;\n  if (inputValue < 1000000000) {\n    for (base = 10; base <= inputValue; base = base * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputOffset != 0) {\n    outputOffset = (char *)(digitCount + inputOffset);\n    remainder = inputValue;\n    do {\n      outputOffset = outputOffset + -1;\n      *outputOffset = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "inputOffset",
                "param_2": "inputValue",
                "local_20": "remainder",
                "local_14": "outputOffset",
                "local_10": "base",
                "local_c": "digitCount"
            },
            "calling": [
                "fmt_s32_dec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "convert_to_signed_string_00003e58",
            "code": "\nint convertToSignedString_00003e58(undefined *input,int number)\n\n{\n  int length;\n  int absoluteValue;\n  undefined *output;\n  \n  absoluteValue = number;\n  output = input;\n  if (-(number >> 0x1f) != 0) {\n    if (input != (undefined *)0x0) {\n      output = input + 1;\n      *input = 0x2d;\n    }\n    absoluteValue = -number;\n  }\n  length = fmt_u32_dec(output,absoluteValue);\n  return -(number >> 0x1f) + length;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "convert_to_signed_string_00003e58",
                "param_1": "input",
                "param_2": "number",
                "iVar1": "length",
                "local_18": "absoluteValue",
                "local_14": "output"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "fmt_u32_dec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_integer_as_decimal_00003e9e",
            "code": "\nundefined4 format_integer_as_decimal_00003e9e(undefined4 value,short num,undefined4 options)\n\n{\n  undefined4 formatted_value;\n  \n  formatted_value = fmt_s32_dfp(value,(int)num,options);\n  return formatted_value;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_integer_as_decimal_00003e9e",
                "param_1": "value",
                "param_2": "num",
                "param_3": "options",
                "uVar1": "formatted_value"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [
                "fmt_s32_dfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_and_pad_number_00003ec4",
            "code": "\nint formatAndPadNumber_00003ec4(undefined *outputString,uint inputNumber,int numDigits)\n\n{\n  int formattedNumberLength;\n  undefined4 formattedNumberLength2;\n  uint quotient;\n  int remainder;\n  int totalLength;\n  \n  if (numDigits + 7 < 0 != SCARRY4(numDigits,7)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  totalLength = 0;\n  if (numDigits == 0) {\n    totalLength = fmt_s32_dec(outputString,inputNumber);\n  }\n  else if (numDigits < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + numDigits * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + numDigits * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputString != (undefined *)0x0) {\n        *outputString = 0x2d;\n      }\n      totalLength = 1;\n    }\n    if (outputString == (undefined *)0x0) {\n      formattedNumberLength = fmt_s32_dec(0,quotient);\n      totalLength = formattedNumberLength + 1 + totalLength;\n    }\n    else {\n      formattedNumberLength = fmt_s32_dec(outputString + totalLength,quotient);\n      formattedNumberLength = totalLength + formattedNumberLength;\n      totalLength = formattedNumberLength + 1;\n      outputString[formattedNumberLength] = 0x2e;\n      formattedNumberLength2 = fmt_s32_dec(outputString + totalLength,remainder);\n      fmt_lpad(outputString + totalLength,formattedNumberLength2,-numDigits,0x30);\n    }\n    totalLength = -numDigits + totalLength;\n  }\n  else {\n    totalLength = fmt_s32_dec(outputString,inputNumber);\n    if (outputString != (undefined *)0x0) {\n      memset(outputString + totalLength,0x30,numDigits);\n    }\n    totalLength = numDigits + totalLength;\n  }\n  return totalLength;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_and_pad_number_00003ec4",
                "param_1": "outputString",
                "param_2": "inputNumber",
                "param_3": "numDigits",
                "iVar1": "formattedNumberLength",
                "uVar2": "formattedNumberLength2",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalLength"
            },
            "calling": [
                "fmt_s16_dfp"
            ],
            "called": [
                "core_panic",
                "memset",
                "fmt_lpad",
                "fmt_s32_dec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_fill_memory_00003ff4",
            "code": "\nuint copyAndFillMemory_00003ff4(int destination,uint sourceSize,uint destinationSize,undefined fillByte)\n\n{\n  uint copiedSize;\n  \n  copiedSize = sourceSize;\n  if ((sourceSize < destinationSize) && (copiedSize = destinationSize, destination != 0)) {\n    memmove((destinationSize - sourceSize) + destination,destination,sourceSize);\n    memset(destination,fillByte,destinationSize - sourceSize);\n  }\n  return copiedSize;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_fill_memory_00003ff4",
                "param_1": "destination",
                "param_2": "sourceSize",
                "param_3": "destinationSize",
                "param_4": "fillByte",
                "uVar1": "copiedSize"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "memset",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "parse_string_to_decimal_00004042",
            "code": "\nvoid parseStringToDecimal_00004042(undefined4 str)\n\n{\n  strtol(str,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "parse_string_to_decimal_00004042",
                "param_1": "str"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *dataPtr,int *infoPtr)\n\n{\n  int errorCode;\n  int *infoPtr2;\n  uint ushortValue;\n  ushort ushortData;\n  int length;\n  code *callbackFunc;\n  int remainingBytes;\n  uint dataValue;\n  bool isZero;\n  \n  ushortData = *(ushort *)(infoPtr + 3);\n  ushortValue = (uint)ushortData;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    errorCode = infoPtr[4];\n    if (errorCode != 0) {\n      length = ushortValue << 0x1e;\n      isZero = length == 0;\n      remainingBytes = *infoPtr;\n      if (isZero) {\n        length = infoPtr[5];\n      }\n      *infoPtr = errorCode;\n      if (!isZero) {\n        length = 0;\n      }\n      infoPtr[2] = length;\n      for (remainingBytes = remainingBytes - errorCode; 0 < remainingBytes; remainingBytes = remainingBytes - length) {\n        length = (*(code *)infoPtr[10])(dataPtr,infoPtr[8],errorCode,remainingBytes);\n        if (length < 1) {\n          *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        errorCode = errorCode + length;\n      }\n    }\n  }\n  else {\n    if ((infoPtr[1] < 1) && (infoPtr[0x10] < 1)) {\n      return 0;\n    }\n    callbackFunc = (code *)infoPtr[0xb];\n    if (callbackFunc == (code *)0x0) {\n      return 0;\n    }\n    dataValue = *dataPtr;\n    *dataPtr = 0;\n    if ((ushortData & 0x1000) == 0) {\n      errorCode = (*callbackFunc)(dataPtr,infoPtr[8],ushortValue & 0x1000,1);\n      if ((errorCode == -1) && (ushortValue = *dataPtr, ushortValue != 0)) {\n        if ((ushortValue == 0x1d) || (ushortValue == 0x16)) {\n          *dataPtr = dataValue;\n          return 0;\n        }\n        ushortData = *(ushort *)(infoPtr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      errorCode = infoPtr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(infoPtr + 3) << 0x1d) < 0) &&\n       (errorCode = errorCode - infoPtr[1], infoPtr[0xd] != 0)) {\n      errorCode = errorCode - infoPtr[0x10];\n    }\n    errorCode = (*(code *)infoPtr[0xb])(dataPtr,infoPtr[8],errorCode,0);\n    ushortData = *(ushort *)(infoPtr + 3);\n    if ((errorCode == -1) &&\n       ((0x1d < *dataPtr || (-1 < (int)((0x20400001U >> (*dataPtr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(infoPtr + 3) = ushortData | 0x40;\n      return 0xffffffff;\n    }\n    infoPtr[1] = 0;\n    *infoPtr = infoPtr[4];\n    if (((int)((uint)ushortData << 0x13) < 0) && ((errorCode != -1 || (*dataPtr == 0)))) {\n      infoPtr[0x15] = errorCode;\n    }\n    infoPtr2 = (int *)infoPtr[0xd];\n    *dataPtr = dataValue;\n    if (infoPtr2 != (int *)0x0) {\n      if (infoPtr2 != infoPtr + 0x11) {\n        _free_r(dataPtr);\n      }\n      infoPtr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "dataPtr",
                "param_2": "infoPtr",
                "iVar1": "errorCode",
                "piVar2": "infoPtr2",
                "uVar3": "ushortValue",
                "uVar4": "ushortData",
                "iVar5": "length",
                "pcVar6": "callbackFunc",
                "iVar7": "remainingBytes",
                "uVar8": "dataValue",
                "bVar9": "isZero"
            },
            "calling": [
                "_fflush_r",
                "__srefill_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "flush_and_release_lock_00004158",
            "code": "\nundefined4 flushAndReleaseLock_00004158(int stream,undefined4 *ioState)\n\n{\n  undefined4 result;\n  \n  if (ioState[4] != 0) {\n    if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n      __sinit();\n    }\n    if (ioState == &DAT_000079b8) {\n      ioState = *(undefined4 **)(stream + 4);\n    }\n    else if (ioState == (undefined4 *)&DAT_000079d8) {\n      ioState = *(undefined4 **)(stream + 8);\n    }\n    else if (ioState == (undefined4 *)&DAT_00007998) {\n      ioState = *(undefined4 **)(stream + 0xc);\n    }\n    if (*(short *)(ioState + 3) != 0) {\n      if ((-1 < (int)(ioState[0x19] << 0x1f)) && (-1 < (int)*(short *)(ioState + 3) << 0x16)) {\n        __retarget_lock_acquire_recursive(ioState[0x16]);\n      }\n      result = __sflush_r(stream,ioState);\n      if ((int)(ioState[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(ioState + 3) << 0x16) < 0) {\n        return result;\n      }\n      __retarget_lock_release_recursive(ioState[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "flush_and_release_lock_00004158",
                "param_1": "stream",
                "param_2": "ioState",
                "uVar1": "result"
            },
            "calling": [
                "fflush",
                "__swbuf_r",
                "__srefill_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "flush_file_and_check_errors_000041d0",
            "code": "\nuint flushFileAndCheckErrors_000041d0(int filePointer,undefined4 offset,undefined4 length)\n\n{\n  uint result;\n  int numBytesWritten;\n  dword *relTablePointer;\n  int relTableEntryPointer;\n  uint errorFlags;\n  int loopCounter;\n  undefined4 *fwritePointer;\n  \n  if (filePointer == 0) {\n    fwritePointer = &DAT_000079f8;\n    relTablePointer = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    errorFlags = 0;\n    do {\n      loopCounter = relTablePointer[1];\n      relTableEntryPointer = relTablePointer[2];\n      while (loopCounter = loopCounter + -1, -1 < loopCounter) {\n        if ((1 < *(ushort *)(relTableEntryPointer + 0xc)) && (numBytesWritten = *(short *)(relTableEntryPointer + 0xe) + 1, numBytesWritten != 0)) {\n          result = _fflush_r(0x1fff0284,relTableEntryPointer,length,numBytesWritten,fwritePointer);\n          errorFlags = errorFlags | result;\n        }\n        relTableEntryPointer = relTableEntryPointer + 0x68;\n      }\n      relTablePointer = (dword *)*relTablePointer;\n    } while (relTablePointer != (dword *)0x0);\n    return errorFlags;\n  }\n  errorFlags = _fflush_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,filePointer);\n  return errorFlags;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "flush_file_and_check_errors_000041d0",
                "param_1": "filePointer",
                "param_2": "offset",
                "param_3": "length",
                "uVar1": "result",
                "iVar2": "numBytesWritten",
                "pdVar3": "relTablePointer",
                "iVar4": "relTableEntryPointer",
                "uVar5": "errorFlags",
                "iVar6": "loopCounter",
                "puVar7": "fwritePointer"
            },
            "calling": [
                "print_prompt"
            ],
            "called": [
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_data_structures_000041f4",
            "code": "\nvoid initializeDataStructures_000041f4(undefined4 *dataStructure,undefined2 value1,undefined2 value2)\n\n{\n  *dataStructure = 0;\n  dataStructure[1] = 0;\n  dataStructure[4] = 0;\n  dataStructure[5] = 0;\n  dataStructure[2] = 0;\n  *(undefined2 *)(dataStructure + 3) = value1;\n  dataStructure[25] = 0;\n  *(undefined2 *)((int)dataStructure + 0xe) = value2;\n  dataStructure[6] = 0;\n  memset(dataStructure + 0x17,0,8);\n  dataStructure[9] = 0x4dc9;\n  dataStructure[10] = 0x4def;\n  dataStructure[11] = 0x4e27;\n  dataStructure[8] = dataStructure;\n  dataStructure[12] = labelAddress;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_data_structures_000041f4",
                "param_1": "dataStructure",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[1]": "dataStructure[1]",
                "param_1[4]": "dataStructure[4]",
                "param_1[5]": "dataStructure[5]",
                "param_1[2]": "dataStructure[2]",
                "param_1[0x19]": "dataStructure[25]",
                "param_1[6]": "dataStructure[6]",
                "param_1[9]": "dataStructure[9]",
                "param_1[10]": "dataStructure[10]",
                "param_1[0xb]": "dataStructure[11]",
                "param_1[8]": "dataStructure[8]",
                "param_1[0xc]": "dataStructure[12]",
                "&LAB_00004e4a_1": "labelAddress"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_memory_00004248",
            "code": "\nundefined4 * allocateMemory_00004248(undefined4 size,int count)\n\n{\n  undefined4 *memoryPointer;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  memoryPointer = (undefined4 *)_malloc_r(size,offset + 0x74);\n  if (memoryPointer != (undefined4 *)0x0) {\n    *memoryPointer = 0;\n    memoryPointer[1] = count;\n    memoryPointer[2] = memoryPointer + 3;\n    memset(memoryPointer + 3,0,offset + 0x68);\n  }\n  return memoryPointer;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_memory_00004248",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "memoryPointer",
                "iVar2": "offset"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "acquire_recursive_lock_00004274",
            "code": "\nvoid acquire_recursive_lock_00004274(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "acquire_recursive_lock_00004274"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "release_recursive_lock_00004280",
            "code": "\nvoid releaseRecursiveLock_00004280(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "release_recursive_lock_00004280"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "acquire_recursive_lock_0000428c",
            "code": "\nvoid acquire_recursive_lock_0000428c(void)\n\n{\n  lock_function(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "acquire_recursive_lock_0000428c",
                "__retarget_lock_acquire_recursive": "lock_function"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_structure_000042a4",
            "code": "\nvoid initializeDataStructure_000042a4(int dataStructure)\n\n{\n  undefined4 returnValue;\n  \n  __sinit_lock_acquire();\n  if (*(int *)(dataStructure + 0x18) == 0) {\n    *(undefined4 *)(dataStructure + 0x48) = 0;\n    *(undefined4 *)(dataStructure + 0x4c) = 0;\n    *(undefined4 *)(dataStructure + 0x50) = 0;\n    returnValue = 0x1fff0284;\n    *(undefined **)(dataStructure + 0x28) = &DAT_0000423d;\n    if (dataStructure == 0x1fff0284) {\n      returnValue = 1;\n    }\n    if (dataStructure == 0x1fff0284) {\n      *(undefined4 *)(dataStructure + 0x18) = returnValue;\n    }\n    returnValue = __sfp(dataStructure);\n    *(undefined4 *)(dataStructure + 4) = returnValue;\n    returnValue = __sfp(dataStructure);\n    *(undefined4 *)(dataStructure + 8) = returnValue;\n    returnValue = __sfp(dataStructure);\n    *(undefined4 *)(dataStructure + 0xc) = returnValue;\n    std(*(undefined4 *)(dataStructure + 4),4,0);\n    std(*(undefined4 *)(dataStructure + 8),9,1);\n    std(*(undefined4 *)(dataStructure + 0xc),0x12,2);\n    *(undefined4 *)(dataStructure + 0x18) = 1;\n  }\n  __retarget_lock_release_recursive(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_structure_000042a4",
                "param_1": "dataStructure",
                "uVar1": "returnValue"
            },
            "calling": [
                "iprintf",
                "_fflush_r",
                "__swbuf_r",
                "_vfprintf_r",
                "__srefill_r",
                "__sfp",
                "puts",
                "__srget_r",
                "__swsetup_r",
                "getchar",
                "putchar"
            ],
            "called": [
                "std",
                "__sinit_lock_acquire",
                "__sfp",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_data_00004314",
            "code": "\nundefined4 * initializeData_00004314(undefined4 *dataPointer)\n\n{\n  dword newDataSize;\n  int loopCounter;\n  undefined4 *currentData;\n  dword *relArray;\n  \n  __sfp_lock_acquire();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    __sinit(0x1fff0284);\n  }\n  relArray = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    loopCounter = relArray[1];\n    currentData = (undefined4 *)relArray[2];\n    while (loopCounter = loopCounter + -1, -1 < loopCounter) {\n      if (*(short *)(currentData + 3) == 0) {\n        currentData[3] = 0xffff0001;\n        currentData[0x19] = 0;\n        __retarget_lock_init_recursive(currentData + 0x16);\n        __sfp_lock_release();\n        currentData[1] = 0;\n        currentData[2] = 0;\n        currentData[4] = 0;\n        currentData[5] = 0;\n        *currentData = 0;\n        currentData[6] = 0;\n        memset(currentData + 0x17,0,8);\n        currentData[0xd] = 0;\n        currentData[0xe] = 0;\n        currentData[0x12] = 0;\n        currentData[0x13] = 0;\n        return currentData;\n      }\n      currentData = currentData + 0x1a;\n    }\n    if (*relArray == 0) {\n      newDataSize = __sfmoreglue(dataPointer,4);\n      *relArray = newDataSize;\n      if (newDataSize == 0) {\n        __sfp_lock_release();\n        *dataPointer = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    relArray = (dword *)*relArray;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "initialize_data_00004314",
                "param_1": "dataPointer",
                "dVar1": "newDataSize",
                "iVar2": "loopCounter",
                "puVar3": "currentData",
                "pdVar4": "relArray"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sfp_lock_acquire",
                "memset",
                "__sfp_lock_release",
                "__sfmoreglue",
                "__sinit",
                "__retarget_lock_init_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int inputValue,code *callbackFunc)\n\n{\n  uint callbackResult;\n  int *dataPointer;\n  int innerVar1;\n  uint result;\n  int innerVar2;\n  \n  dataPointer = (int *)(inputValue + 0x48);\n  result = 0;\n  do {\n    innerVar2 = dataPointer[1];\n    innerVar1 = dataPointer[2];\n    while (innerVar2 = innerVar2 + -1, -1 < innerVar2) {\n      if ((1 < *(ushort *)(innerVar1 + 0xc)) && (*(short *)(innerVar1 + 0xe) != -1)) {\n        callbackResult = (*callbackFunc)(innerVar1);\n        result = result | callbackResult;\n      }\n      innerVar1 = innerVar1 + 0x68;\n    }\n    dataPointer = (int *)*dataPointer;\n  } while (dataPointer != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "inputValue",
                "param_2": "callbackFunc",
                "piVar2": "dataPointer",
                "iVar3": "innerVar1",
                "uVar1": "callbackResult",
                "iVar5": "innerVar2",
                "uVar4": "result"
            },
            "calling": [
                "__srefill_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "read_byte_from_file_00004418",
            "code": "\nuint read_byte_from_file_00004418(void)\n\n{\n  dword rel_offset;\n  uint byte_read;\n  byte **byte_pointer;\n  byte *byte_val;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  byte_pointer = *(byte ***)(rel_offset + 4);\n  if ((rel_offset != 0) && (*(int *)(rel_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (byte_pointer == (byte **)&DAT_000079b8) {\n    byte_pointer = *(byte ***)(rel_offset + 4);\n  }\n  else if (byte_pointer == (byte **)&DAT_000079d8) {\n    byte_pointer = *(byte ***)(rel_offset + 8);\n  }\n  else if (byte_pointer == (byte **)&DAT_00007998) {\n    byte_pointer = *(byte ***)(rel_offset + 0xc);\n  }\n  if ((-1 < (int)byte_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_pointer + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(byte_pointer[0x16]);\n  }\n  byte_val = byte_pointer[1];\n  byte_pointer[1] = byte_val + -1;\n  if ((int)(byte_val + -1) < 0) {\n    byte_read = __srget_r(rel_offset,byte_pointer);\n  }\n  else {\n    byte_val = *byte_pointer;\n    *byte_pointer = byte_val + 1;\n    byte_read = (uint)*byte_val;\n  }\n  if ((-1 < (int)byte_pointer[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(byte_pointer + 3) << 0x16))) {\n    __retarget_lock_release_recursive(byte_pointer[0x16]);\n  }\n  return byte_read;\n}\n\n",
            "renaming": {
                "FUN_00004418": "read_byte_from_file_00004418",
                "dVar1": "rel_offset",
                "uVar2": "byte_read",
                "ppbVar3": "byte_pointer",
                "pbVar4": "byte_val"
            },
            "calling": [
                "readline"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__srget_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateComponents_0000443c(undefined4 *inputValues,uint *outputValues)\n\n{\n  int tempVar1;\n  uint totalDays;\n  uint remainingDays;\n  uint tempVar2;\n  uint tempVar3;\n  undefined4 dividend;\n  undefined4 divisor;\n  uint tempVar4;\n  bool isNegative;\n  \n  dividend = *inputValues;\n  divisor = inputValues[1];\n  tempVar1 = __aeabi_ldivmod(dividend,divisor,0x15180,0);\n  remainingDays = 0x15180;\n  __aeabi_ldivmod(dividend,divisor,0x15180,0);\n  isNegative = (int)remainingDays < 0;\n  if (isNegative) {\n    remainingDays = remainingDays + 0x15180;\n  }\n  if (isNegative) {\n    totalDays = tempVar1 + 0xafa6b;\n  }\n  else {\n    totalDays = tempVar1 + 0xafa6c;\n  }\n  outputValues[2] = remainingDays / 0xe10;\n  outputValues[1] = (remainingDays % 0xe10) / 0x3c;\n  *outputValues = (remainingDays % 0xe10) % 0x3c;\n  outputValues[6] = (totalDays + 3) % 7;\n  remainingDays = totalDays;\n  if ((int)totalDays < 0) {\n    remainingDays = totalDays - 0x23ab0;\n  }\n  totalDays = (remainingDays / 0x23ab1) * -0x23ab1 + totalDays;\n  tempVar2 = ((totalDays / 0x8eac + totalDays) - totalDays / 0x5b4) - totalDays / 0x23ab0;\n  tempVar3 = tempVar2 / 0x16d;\n  totalDays = (tempVar3 / 100 - tempVar2 / 0x5b4) + totalDays + tempVar3 * -0x16d;\n  tempVar4 = totalDays * 5 + 2;\n  tempVar2 = tempVar4 / 0x99;\n  if (tempVar4 < 0x5fa) {\n    tempVar1 = 2;\n  }\n  else {\n    tempVar1 = -10;\n  }\n  tempVar4 = tempVar2 + tempVar1;\n  tempVar1 = (remainingDays / 0x23ab1) * 400 + tempVar3;\n  if (tempVar4 < 2) {\n    tempVar1 = tempVar1 + 1;\n  }\n  if (totalDays < 0x132) {\n    if (((tempVar3 & 3) == 0) && (tempVar3 != (tempVar3 / 100) * 100)) {\n      remainingDays = 1;\n    }\n    else {\n      remainingDays = (uint)(tempVar3 % 400 == 0);\n    }\n    remainingDays = totalDays + 0x3b + remainingDays;\n  }\n  else {\n    remainingDays = totalDays - 0x132;\n  }\n  outputValues[7] = remainingDays;\n  outputValues[3] = (totalDays + 1) - (tempVar2 * 0x99 + 2) / 5;\n  outputValues[4] = tempVar4;\n  outputValues[5] = tempVar1 - 0x76c;\n  outputValues[8] = 0;\n  return outputValues;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "inputValues",
                "param_2": "outputValues",
                "iVar1": "tempVar1",
                "uVar2": "totalDays",
                "uVar3": "remainingDays",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "uVar6": "dividend",
                "uVar7": "divisor",
                "bVar9": "isNegative",
                "uVar8": "tempVar4"
            },
            "calling": [
                "rtc_get_alarm",
                "rtc_get_time"
            ],
            "called": [
                "__aeabi_ldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_functions_0000459c",
            "code": "\nvoid executeFunctions_0000459c(void)\n\n{\n  code **functionArrayPointer;\n  int index;\n  \n  functionArrayPointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionArrayPointer)();\n    functionArrayPointer = functionArrayPointer + 1;\n  }\n  _init();\n  functionArrayPointer = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**functionArrayPointer)();\n    functionArrayPointer = functionArrayPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_functions_0000459c",
                "ppcVar1": "functionArrayPointer",
                "iVar2": "index"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "__sfp"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "__sinit_lock_acquire",
                "_fflush_r",
                "__env_lock",
                "__sfp_lock_acquire",
                "__malloc_lock",
                "_vfprintf_r",
                "puts",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "__env_unlock",
                "_fflush_r",
                "__malloc_unlock",
                "_vfprintf_r",
                "puts",
                "__sfp_lock_release",
                "__sinit",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copyAndReverse_000045ee(undefined *source,undefined *destination,int length)\n\n{\n  undefined *currentSource;\n  undefined *currentDestination;\n  \n  currentDestination = destination + length;\n  if ((destination < source) && (source < currentDestination)) {\n    currentSource = source + length;\n    while (currentSource != source) {\n      currentDestination = currentDestination + -1;\n      currentSource = currentSource + -1;\n      *currentSource = *currentDestination;\n    }\n  }\n  else {\n    source = source + -1;\n    for (; destination != currentDestination; destination = destination + 1) {\n      source = source + 1;\n      *source = *destination;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "currentSource",
                "puVar2": "currentDestination"
            },
            "calling": [
                "fmt_lpad"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_00004622",
            "code": "\nvoid fillMemory_00004622(undefined *memoryPointer,undefined fillValue,int numBytes)\n\n{\n  undefined *endPointer;\n  \n  endPointer = memoryPointer + numBytes;\n  for (; memoryPointer != endPointer; memoryPointer = memoryPointer + 1) {\n    *memoryPointer = fillValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_00004622",
                "param_1": "memoryPointer",
                "param_2": "fillValue",
                "param_3": "numBytes",
                "puVar1": "endPointer"
            },
            "calling": [
                "std",
                "fmt_lpad",
                "__sfp",
                "fmt_s32_dfp",
                "__sfmoreglue",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "adjust_date_time_00004634",
            "code": "\nvoid adjustDateTime_00004634(uint *dateTime,uint days,undefined4 param_3)\n\n{\n  int daysInMonth;\n  uint year;\n  uint leapYears;\n  int daysInYear;\n  bool isNegative;\n  uint *quotient;\n  uint remainder;\n  undefined4 stack_18;\n  \n  quotient = dateTime;\n  remainder = days;\n  stack_18 = param_3;\n  if (0x3b < *dateTime) {\n    div(&quotient,*dateTime,0x3c);\n    year = dateTime[1] + (int)quotient;\n    dateTime[1] = year;\n    if ((int)remainder < 0) {\n      year = year - 1;\n      *dateTime = remainder + 0x3c;\n    }\n    else {\n      *dateTime = remainder;\n    }\n    if ((int)remainder < 0) {\n      dateTime[1] = year;\n    }\n  }\n  if (0x3b < dateTime[1]) {\n    div(&quotient,dateTime[1],0x3c);\n    isNegative = (int)remainder < 0;\n    leapYears = dateTime[2] + (int)quotient;\n    dateTime[2] = leapYears;\n    year = remainder;\n    if (isNegative) {\n      year = remainder + 0x3c;\n      leapYears = leapYears - 1;\n    }\n    if (!isNegative) {\n      dateTime[1] = year;\n    }\n    if (isNegative) {\n      dateTime[1] = year;\n    }\n    if (isNegative) {\n      dateTime[2] = leapYears;\n    }\n  }\n  if (0x17 < dateTime[2]) {\n    div(&quotient,dateTime[2],0x18);\n    isNegative = (int)remainder < 0;\n    leapYears = dateTime[3] + (int)quotient;\n    dateTime[3] = leapYears;\n    year = remainder;\n    if (isNegative) {\n      year = remainder + 0x18;\n      leapYears = leapYears - 1;\n    }\n    if (!isNegative) {\n      dateTime[2] = year;\n    }\n    if (isNegative) {\n      dateTime[2] = year;\n    }\n    if (isNegative) {\n      dateTime[3] = leapYears;\n    }\n  }\n  if (0xb < dateTime[4]) {\n    div(&quotient,dateTime[4],0xc);\n    isNegative = (int)remainder < 0;\n    year = dateTime[5] + (int)quotient;\n    dateTime[5] = year;\n    if (isNegative) {\n      remainder = remainder + 0xc;\n      year = year - 1;\n    }\n    if (!isNegative) {\n      dateTime[4] = remainder;\n    }\n    if (isNegative) {\n      dateTime[4] = remainder;\n    }\n    if (isNegative) {\n      dateTime[5] = year;\n    }\n  }\n  year = dateTime[5];\n  if ((year & 3) == 0) {\n    if (year == (year / 100) * 100) {\n      if ((year + 0x76c) % 400 == 0) {\n        daysInYear = 0x1d;\n      }\n      else {\n        daysInYear = 0x1c;\n      }\n    }\n    else {\n      daysInYear = 0x1d;\n    }\n  }\n  else {\n    daysInYear = 0x1c;\n  }\n  if ((int)dateTime[3] < 1) {\n    while ((int)dateTime[3] < 1) {\n      year = dateTime[4];\n      dateTime[4] = year - 1;\n      if (year - 1 == 0xffffffff) {\n        leapYears = dateTime[5];\n        year = leapYears - 1;\n        dateTime[4] = 0xb;\n        dateTime[5] = year;\n        if ((year & 3) == 0) {\n          if (year == (year / 100) * 100) {\n            if ((leapYears + 0x76b) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n      daysInMonth = daysInYear;\n      if (dateTime[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateTime[4]];\n      }\n      dateTime[3] = daysInMonth + dateTime[3];\n    }\n  }\n  else {\n    while( true ) {\n      year = dateTime[4];\n      daysInMonth = daysInYear;\n      if (year != 1) {\n        daysInMonth = (&DAT_000079fc)[year];\n      }\n      if ((int)dateTime[3] <= daysInMonth) break;\n      dateTime[3] = dateTime[3] - daysInMonth;\n      dateTime[4] = year + 1;\n      if (year + 1 == 0xc) {\n        leapYears = dateTime[5];\n        year = leapYears + 1;\n        dateTime[4] = 0;\n        dateTime[5] = year;\n        if ((year & 3) == 0) {\n          if (year % 100 == 0) {\n            if ((leapYears + 0x76d) % 400 == 0) {\n              daysInYear = 0x1d;\n            }\n            else {\n              daysInYear = 0x1c;\n            }\n          }\n          else {\n            daysInYear = 0x1d;\n          }\n        }\n        else {\n          daysInYear = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "adjust_date_time_00004634",
                "param_1": "dateTime",
                "param_2": "days",
                "iVar1": "daysInMonth",
                "uVar2": "year",
                "uVar3": "leapYears",
                "iVar4": "daysInYear",
                "bVar5": "isNegative",
                "local_20": "quotient",
                "local_1c": "remainder",
                "uStack_18": "stack_18"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "div"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_time_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateTime_000047e4(int *dateTimeData)\n\n{\n  longlong totalDays;\n  longlong updatedTotalDays;\n  int *timezoneInfo;\n  uint var4;\n  int var5;\n  int var6;\n  int var7;\n  uint var8;\n  uint limit;\n  uint var10;\n  int var11;\n  uint var12;\n  uint isLess;\n  uint var14;\n  uint isNegative;\n  bool flag;\n  \n  timezoneInfo = (int *)__gettzinfo();\n  validate_structure(dateTimeData);\n  var12 = dateTimeData[5];\n  var11 = dateTimeData[3] + -1 + *(int *)(&DAT_00007a2c + dateTimeData[4] * 4);\n  if (((1 < dateTimeData[4]) && ((var12 & 3) == 0)) &&\n     ((var12 != (var12 / 100) * 100 || (var12 + 0x76c == ((var12 + 0x76c) / 400) * 400)))) {\n    var11 = var11 + 1;\n  }\n  dateTimeData[7] = var11;\n  if (20000 < (int)&DAT_00002710 + var12) {\n    var7 = -1;\n    var5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)var12 < 0x47) {\n    if (var12 != 0x46) {\n      for (limit = 0x45; (int)var12 < (int)limit; limit = limit - 1) {\n        if ((limit & 3) == 0) {\n          if (limit == (limit / 100) * 100) {\n            if ((limit + 0x76c) % 400 == 0) {\n              var7 = 0x16e;\n            }\n            else {\n              var7 = 0x16d;\n            }\n          }\n          else {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16d;\n        }\n        var11 = var11 - var7;\n      }\n      if ((limit & 3) == 0) {\n        if (var12 == (var12 / 100) * 100) {\n          var7 = 0x16d;\n          if ((var12 + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      var11 = var11 - var7;\n    }\n  }\n  else {\n    limit = 0x46;\n    do {\n      if ((limit & 3) == 0) {\n        if (limit % 100 == 0) {\n          if ((limit + 0x76c) % 400 == 0) {\n            var7 = 0x16e;\n          }\n          else {\n            var7 = 0x16d;\n          }\n        }\n        else {\n          var7 = 0x16e;\n        }\n      }\n      else {\n        var7 = 0x16d;\n      }\n      limit = limit + 1;\n      var11 = var11 + var7;\n    } while (var12 != limit);\n  }\n  totalDays = (longlong)var11 * 0x15180 + (longlong)(dateTimeData[2] * 0xe10 + dateTimeData[1] * 0x3c + *dateTimeData)\n  ;\n  isNegative = (uint)totalDays;\n  var7 = (int)((ulonglong)totalDays >> 0x20);\n  lockTimeZone();\n  setTimeZoneUnlocked();\n  limit = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    var12 = timezoneInfo[10];\n    var7 = (uint)totalDays + var12;\n    var5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)var12 >> 0x1f) + (uint)computeCarry4((uint)totalDays,var12);\n  }\n  else {\n    var14 = flagValue;\n    isLess = var14;\n    if (0 < (int)var14) {\n      isLess = 1;\n    }\n    if ((timezoneInfo[1] == dateTimeData[5] + 0x76c) || (var5 = calculateLimits(), var5 != 0)) {\n      var10 = timezoneInfo[0x14];\n      var4 = timezoneInfo[0x12];\n      var8 = timezoneInfo[10];\n      limit = var4 - var8;\n      var5 = (timezoneInfo[0x13] - ((int)var8 >> 0x1f)) - (uint)(var4 < var8);\n      if (((int)((var7 - var5) - (uint)(isNegative < limit)) < 0 ==\n           (SBORROW4(var7,var5) != SBORROW4(var7 - var5,(uint)(isNegative < limit)))) &&\n         (var6 = (timezoneInfo[0x13] - ((int)var10 >> 0x1f)) - (uint)(var4 < var10),\n         flag = isNegative < var4 - var10,\n         (int)((var7 - var6) - (uint)flag) < 0 !=\n         (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)flag)))) goto LAB_00004a88;\n      var4 = timezoneInfo[8] - var10;\n      var6 = (timezoneInfo[9] - ((int)var10 >> 0x1f)) - (uint)((uint)timezoneInfo[8] < var10);\n      if (*timezoneInfo != 0) {\n        if ((int)((var7 - var6) - (uint)(isNegative < var4)) < 0 ==\n            (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)(isNegative < var4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        limit = 0;\n        if ((int)var14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        isNegative = isLess ^ limit;\n        isLess = limit;\n        if (isNegative == 1) {\n          if (limit == 0) {\n            var7 = var10 - var8;\n          }\n          else {\n            var7 = var8 - var10;\n          }\n          var5 = dateTimeData[3];\n          *dateTimeData = *dateTimeData + var7;\n          updatedTotalDays = totalDays + var7;\n          validate_structure(dateTimeData);\n          var5 = dateTimeData[3] - var5;\n          totalDays = totalDays + var7;\n          if (var5 != 0) {\n            if (var5 < 2) {\n              if (var5 == -2 || var5 + 2 < 0 != ScomputeCarry4(var5,2)) {\n                var5 = 1;\n              }\n            }\n            else {\n              var5 = -1;\n            }\n            var7 = var5 + dateTimeData[7];\n            var11 = var11 + var5;\n            if (var7 < 0) {\n              limit = var12 - 1;\n              if ((limit & 3) == 0) {\n                if (limit == (limit / 100) * 100) {\n                  var7 = 0x16d;\n                  if ((var12 + 0x76b) % 400 != 0) {\n                    var7 = 0x16c;\n                  }\n                }\n                else {\n                  var7 = 0x16d;\n                }\n              }\n              else {\n                var7 = 0x16c;\n              }\n            }\n            else {\n              if ((var12 & 3) == 0) {\n                if (var12 == (var12 / 100) * 100) {\n                  var5 = 0x16d;\n                  if ((var12 + 0x76c) % 400 == 0) {\n                    var5 = 0x16e;\n                  }\n                }\n                else {\n                  var5 = 0x16e;\n                }\n              }\n              else {\n                var5 = 0x16d;\n              }\n              if (var5 <= var7) {\n                var7 = var7 - var5;\n              }\n            }\n            dateTimeData[7] = var7;\n            totalDays = updatedTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((var7 - var6) - (uint)(isNegative < var4)) < 0 !=\n          (SBORROW4(var7,var6) != SBORROW4(var7 - var6,(uint)(isNegative < var4)))) {\nLAB_0000491e:\n        if ((int)((var7 - var5) - (uint)(isNegative < limit)) < 0 ==\n            (SBORROW4(var7,var5) != SBORROW4(var7 - var5,(uint)(isNegative < limit))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)var14) {\n        limit = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      limit = isLess;\n      if (isLess != 1) goto LAB_00004934;\n    }\n    var12 = timezoneInfo[0x14];\n    var7 = (uint)totalDays + var12;\n    var5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)var12 >> 0x1f) + (uint)computeCarry4((uint)totalDays,var12);\n    limit = 1;\n  }\n  unlockTimeZone();\n  flagValue = limit;\n  dayOfWeek = (var11 + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(var5,var7);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_time_000047e4",
                "param_1": "dateTimeData",
                "lVar1": "totalDays",
                "lVar2": "updatedTotalDays",
                "piVar3": "timezoneInfo",
                "uVar4": "var4",
                "iVar5": "var5",
                "iVar6": "var6",
                "iVar7": "var7",
                "uVar8": "var8",
                "uVar9": "limit",
                "uVar10": "var10",
                "iVar11": "var11",
                "uVar12": "var12",
                "uVar13": "isLess",
                "uVar14": "var14",
                "uVar15": "isNegative",
                "bVar16": "flag",
                "__tz_lock": "lockTimeZone",
                "_tzset_unlocked": "setTimeZoneUnlocked",
                "__tzcalc_limits": "calculateLimits",
                "CARRY4": "computeCarry4",
                "__tz_unlock": "unlockTimeZone",
                "param_1[8]": "flagValue",
                "param_1[6]": "dayOfWeek"
            },
            "calling": [
                "rtc_set_time",
                "rtc_set_alarm"
            ],
            "called": [
                "_tzset_unlocked",
                "__tz_unlock",
                "__gettzinfo",
                "__tz_lock",
                "__tzcalc_limits",
                "validate_structure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "allocate_memory_00004b34",
            "code": "\nvoid allocateMemory_00004b34(undefined4 *errorCode,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int *currentBlock;\n  int **previousBlockPtr;\n  int **currentBlockPtr;\n  int **previousBlock;\n  int **nextBlock;\n  int **blockToInsert;\n  bool isSameBlock;\n  \n  if (size == 0) {\n    return;\n  }\n  blockToInsert = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    blockToInsert = (int **)((int)blockToInsert + *(int *)(size + -4));\n  }\n  lockMalloc();\n  previousBlock = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    blockToInsert[1] = (int *)0x0;\n    currentBlockPtr = previousBlockPtr;\n    DAT_1fff0db4 = blockToInsert;\n  }\n  else {\n    nextBlock = DAT_1fff0db4;\n    if (blockToInsert < DAT_1fff0db4) {\n      currentBlockPtr = (int **)*blockToInsert;\n      previousBlock = (int **)((int)blockToInsert + (int)currentBlockPtr);\n      isSameBlock = DAT_1fff0db4 == previousBlock;\n      if (isSameBlock) {\n        previousBlock = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      blockToInsert[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = blockToInsert;\n      if (isSameBlock) {\n        previousBlock = (int **)((int)previousBlock + (int)currentBlockPtr);\n        *blockToInsert = (int *)previousBlock;\n      }\n    }\n    else {\n      do {\n        previousBlock = nextBlock;\n        nextBlock = (int **)previousBlock[1];\n        if (nextBlock == (int **)0x0) break;\n      } while (nextBlock <= blockToInsert);\n      currentBlockPtr = (int **)*previousBlock;\n      if ((int **)((int)previousBlock + (int)currentBlockPtr) == blockToInsert) {\n        currentBlockPtr = (int **)((int)currentBlockPtr + (int)*blockToInsert);\n        *previousBlock = (int *)currentBlockPtr;\n        if (nextBlock == (int **)((int)previousBlock + (int)currentBlockPtr)) {\n          currentBlock = *nextBlock;\n          previousBlock[1] = nextBlock[1];\n          currentBlockPtr = (int **)((int)currentBlockPtr + (int)currentBlock);\n          *previousBlock = (int *)currentBlockPtr;\n        }\n      }\n      else if (blockToInsert < (int **)((int)previousBlock + (int)currentBlockPtr)) {\n        *errorCode = 0xc;\n      }\n      else {\n        currentBlockPtr = (int **)((int)blockToInsert + (int)*blockToInsert);\n        isSameBlock = nextBlock == currentBlockPtr;\n        if (isSameBlock) {\n          currentBlockPtr = (int **)*nextBlock;\n          nextBlock = (int **)nextBlock[1];\n        }\n        blockToInsert[1] = (int *)nextBlock;\n        if (isSameBlock) {\n          currentBlockPtr = (int **)((int)currentBlockPtr + (int)*blockToInsert);\n          *blockToInsert = (int *)currentBlockPtr;\n        }\n        previousBlock[1] = (int *)blockToInsert;\n      }\n    }\n  }\n  unlockMalloc(errorCode,currentBlockPtr,previousBlock,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "allocate_memory_00004b34",
                "param_1": "errorCode",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "piVar1": "currentBlock",
                "extraout_r1": "previousBlockPtr",
                "ppiVar2": "currentBlockPtr",
                "ppiVar3": "previousBlock",
                "ppiVar4": "nextBlock",
                "ppiVar5": "blockToInsert",
                "bVar6": "isSameBlock",
                "__malloc_lock": "lockMalloc",
                "__malloc_unlock": "unlockMalloc"
            },
            "calling": [
                "__ssrefill_r",
                "__srefill_r",
                "free",
                "__swsetup_r",
                "_realloc_r",
                "__sflush_r"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *result,uint size,undefined4 unknown_param1,undefined4 unknown_param2)\n\n{\n  uint *prev_block;\n  int remaining_size;\n  uint diff;\n  uint *curr_block;\n  uint requested_size;\n  \n  requested_size = (size + 3 & 0xfffffffc) + 8;\n  if (requested_size < 0xc) {\n    requested_size = 0xc;\n  }\n  if (((int)requested_size < 0) || (requested_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    lock_memory_alloc();\n    prev_block = DAT_1fff0db4;\n    for (curr_block = DAT_1fff0db4; curr_block != (uint *)0x0; curr_block = (uint *)curr_block[1]) {\n      diff = *curr_block - requested_size;\n      if (-1 < (int)diff) {\n        if (0xb < diff) {\n          *curr_block = diff;\n          curr_block = (uint *)((int)curr_block + diff);\n          goto LAB_00004c34;\n        }\n        if (prev_block == curr_block) {\n          DAT_1fff0db4 = (uint *)curr_block[1];\n        }\n        if (prev_block != curr_block) {\n          prev_block[1] = (uint)(uint *)curr_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      prev_block = curr_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = _sbrk_r(result,0,prev_block,0,unknown_param2);\n    }\n    prev_block = (uint *)_sbrk_r(result,requested_size);\n    if ((prev_block != (uint *)0xffffffff) &&\n       ((curr_block = (uint *)((int)prev_block + 3U & 0xfffffffc), prev_block == curr_block ||\n        (remaining_size = _sbrk_r(result,(int)curr_block - (int)prev_block), remaining_size != -1)))) {\nLAB_00004c34:\n      *curr_block = requested_size;\nLAB_00004c42:\n      __malloc_unlock(result);\n      requested_size = (int)curr_block + 0xbU & 0xfffffff8;\n      remaining_size = requested_size - (int)(curr_block + 1);\n      if (remaining_size == 0) {\n        return requested_size;\n      }\n      *(uint *)((int)curr_block + remaining_size) = (int)(curr_block + 1) - requested_size;\n      return requested_size;\n    }\n    *result = 0xc;\n    __malloc_unlock(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "result",
                "param_2": "size",
                "param_3": "unknown_param1",
                "param_4": "unknown_param2",
                "puVar1": "prev_block",
                "iVar2": "remaining_size",
                "uVar3": "diff",
                "puVar4": "curr_block",
                "uVar5": "requested_size",
                "__malloc_lock": "lock_memory_alloc"
            },
            "calling": [
                "_tzset_unlocked",
                "__smakebuf_r",
                "__submore",
                "_realloc_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "print_formatted_message_00004c84",
            "code": "\nvoid printFormattedMessage_00004c84(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  dword offset;\n  undefined4 formatStringCopy;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  formatStringCopy = formatString;\n  arg1Copy = arg1;\n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  _vfprintf_r(offset,*(undefined4 *)(offset + 8),formatString,&arg1Copy,formatStringCopy,&arg1Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "print_formatted_message_00004c84",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "dVar1": "offset",
                "uVar2": "formatStringCopy",
                "uStack_c": "arg1Copy",
                "uStack_8": "arg2Copy",
                "uStack_4": "arg3Copy"
            },
            "calling": [
                "cpu_print_last_instruction",
                "handle_input_line",
                "ps",
                "_print_time",
                "phydat_dump",
                "write",
                "list",
                "probe",
                "core_panic",
                "_saul",
                "read",
                "_rtc_handler",
                "print_help"
            ],
            "called": [
                "_vfprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "write_byte_to_stream_00004cb4",
            "code": "\nuint write_byte_to_stream_00004cb4(uint value)\n\n{\n  dword rel_offset;\n  undefined4 *stream_data;\n  uint new_value;\n  undefined *stream_buffer;\n  undefined4 unused_register_4;\n  undefined4 unused_register_5;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  stream_data = *(undefined4 **)(rel_offset + 8);\n  if ((rel_offset != 0) && (*(int *)(rel_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (stream_data == &DAT_000079b8) {\n    stream_data = *(undefined4 **)(rel_offset + 4);\n  }\n  else if (stream_data == (undefined4 *)&DAT_000079d8) {\n    stream_data = *(undefined4 **)(rel_offset + 8);\n  }\n  else if (stream_data == (undefined4 *)&DAT_00007998) {\n    stream_data = *(undefined4 **)(rel_offset + 0xc);\n  }\n  if ((-1 < (int)(stream_data[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(stream_data + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(stream_data[0x16]);\n  }\n  new_value = stream_data[2] - 1;\n  stream_data[2] = new_value;\n  if (((int)new_value < 0) && (((int)new_value < (int)stream_data[6] || (new_value = value & 0xff, new_value == 10))))\n  {\n    value = __swbuf_r(rel_offset,value,stream_data,new_value,unused_register_4,unused_register_5);\n  }\n  else {\n    stream_buffer = (undefined *)*stream_data;\n    *stream_data = stream_buffer + 1;\n    *stream_buffer = (char)value;\n    value = value & 0xff;\n  }\n  if ((-1 < (int)(stream_data[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(stream_data + 3) << 0x16))) {\n    __retarget_lock_release_recursive(stream_data[0x16]);\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "write_byte_to_stream_00004cb4",
                "param_1": "value",
                "dVar1": "rel_offset",
                "puVar2": "stream_data",
                "uVar3": "new_value",
                "puVar4": "stream_buffer",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5"
            },
            "calling": [
                "_putchar"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_input_00004db8",
            "code": "\nundefined4 processInput_00004db8(int inputValue)\n\n{\n  char currentChar;\n  dword offset;\n  int returnValue;\n  char *tempStringPtr;\n  char **stringPointerArray;\n  undefined4 result;\n  char *currentStringPtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  stringPointerArray = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    __sinit(offset);\n  }\n  if (stringPointerArray == (char **)&DAT_000079b8) {\n    stringPointerArray = *(char ***)(offset + 4);\n  }\n  else if (stringPointerArray == (char **)&DAT_000079d8) {\n    stringPointerArray = *(char ***)(offset + 8);\n  }\n  else if (stringPointerArray == (char **)&DAT_00007998) {\n    stringPointerArray = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)stringPointerArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringPointerArray + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(stringPointerArray[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(stringPointerArray + 3) << 0x1c) < 0) && (stringPointerArray[4] != (char *)0x0)) ||\n     (returnValue = __swsetup_r(offset,stringPointerArray), returnValue == 0)) {\n    currentStringPtr = (char *)(inputValue + -1);\n    do {\n      while( true ) {\n        currentStringPtr = currentStringPtr + 1;\n        currentChar = *currentStringPtr;\n        tempStringPtr = stringPointerArray[2] + -1;\n        stringPointerArray[2] = tempStringPtr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)tempStringPtr) {\n            currentStringPtr = *stringPointerArray;\n            result = 10;\n            *stringPointerArray = currentStringPtr + 1;\n            *currentStringPtr = '\\n';\n            goto LAB_00004d64;\n          }\n          returnValue = __swbuf_r(offset,10,stringPointerArray);\n          if (returnValue != -1) {\n            result = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)tempStringPtr < 0) && (((int)tempStringPtr < (int)stringPointerArray[6] || (currentChar == '\\n')))) break;\n        tempStringPtr = *stringPointerArray;\n        *stringPointerArray = tempStringPtr + 1;\n        *tempStringPtr = currentChar;\n      }\n      returnValue = __swbuf_r(offset,currentChar,stringPointerArray);\n    } while (returnValue != -1);\n  }\nLAB_00004d60:\n  result = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)stringPointerArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringPointerArray + 3) << 0x16))) {\n    __retarget_lock_release_recursive(stringPointerArray[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_input_00004db8",
                "param_1": "inputValue",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "returnValue",
                "pcVar4": "tempStringPtr",
                "pcVar7": "currentStringPtr",
                "ppcVar5": "stringPointerArray",
                "uVar6": "result"
            },
            "calling": [
                "handle_input_line",
                "main",
                "phydat_dump",
                "_rtc_settime",
                "_rtc_usage",
                "write",
                "list",
                "_rtc_setalarm",
                "read",
                "_rtc_gettime",
                "_rtc_getalarm",
                "probe_all",
                "_alarm_handler",
                "print_help"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_values_00004dc8",
            "code": "\nvoid updateValues_00004dc8(undefined4 param1,int param2)\n\n{\n  int readResult;\n  uint updatedValue;\n  bool isReadSuccessful;\n  \n  readResult = _read_r(param1,(int)*(short *)(param2 + 0xe));\n  isReadSuccessful = -1 < readResult;\n  if (isReadSuccessful) {\n    updatedValue = *(int *)(param2 + 0x54) + readResult;\n  }\n  else {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xffffefff;\n  }\n  if (isReadSuccessful) {\n    *(uint *)(param2 + 0x54) = updatedValue;\n  }\n  if (!isReadSuccessful) {\n    *(short *)(param2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_values_00004dc8",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "readResult",
                "uVar2": "updatedValue",
                "bVar3": "isReadSuccessful"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "write_data_to_uart_00004dee",
            "code": "\nundefined4 write_data_to_uart_00004dee(undefined4 file_descriptor,int buffer_address,undefined4 data_address,undefined4 data_length)\n\n{\n  undefined4 write_result;\n  \n  if ((int)((uint)*(ushort *)(buffer_address + 0xc) << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n  }\n  *(ushort *)(buffer_address + 0xc) = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  write_result = uart_stdio_write(data_address,data_length);\n  return write_result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "write_data_to_uart_00004dee",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "data_address",
                "param_4": "data_length",
                "uVar1": "write_result"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "uart_stdio_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_file_status_00004e26",
            "code": "\nvoid updateFileStatus_00004e26(undefined4 fileDescriptor,int dataStructPointer)\n\n{\n  int fileOffset;\n  ushort flags;\n  bool isError;\n  \n  fileOffset = _lseek_r(fileDescriptor,(int)*(short *)(dataStructPointer + 0xe));\n  isError = fileOffset == -1;\n  if (isError) {\n    flags = *(ushort *)(dataStructPointer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(dataStructPointer + 0x54) = fileOffset;\n    flags = *(ushort *)(dataStructPointer + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(dataStructPointer + 0xc) = flags;\n  }\n  if (!isError) {\n    *(ushort *)(dataStructPointer + 0xc) = flags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_file_status_00004e26",
                "param_1": "fileDescriptor",
                "param_2": "dataStructPointer",
                "iVar1": "fileOffset",
                "uVar2": "flags",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_bytes_00004e52",
            "code": "\nint compareBytes_00004e52(byte *sourceBytes,byte *targetBytes)\n\n{\n  byte targetByte;\n  uint sourceByte;\n  bool isEqual;\n  \n  do {\n    sourceByte = (uint)*sourceBytes;\n    targetByte = *targetBytes;\n    isEqual = sourceByte == 1;\n    if (sourceByte != 0) {\n      isEqual = sourceByte == targetByte;\n    }\n    sourceBytes = sourceBytes + 1;\n    targetBytes = targetBytes + 1;\n  } while (isEqual);\n  return sourceByte - targetByte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "sourceBytes",
                "param_2": "targetBytes",
                "bVar1": "targetByte",
                "uVar2": "sourceByte",
                "bVar3": "isEqual"
            },
            "calling": [
                "handle_input_line",
                "_saul",
                "_tzset_unlocked",
                "read",
                "find_handler",
                "strcmp"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "find_difference_00004e66",
            "code": "\nint find_difference_00004e66(byte *data,int start_index,int length)\n\n{\n  byte *current_byte;\n  int difference;\n  byte *compare_byte;\n  uint temp;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    compare_byte = (byte *)(start_index + -1);\n    current_byte = data;\n    do {\n      temp = (uint)*current_byte;\n      compare_byte = compare_byte + 1;\n      if ((temp != *compare_byte) || (current_byte + 1 == data + length)) break;\n      current_byte = current_byte + 1;\n    } while (temp != 0);\n    difference = temp - *compare_byte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "find_difference_00004e66",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "current_byte",
                "iVar2": "difference",
                "pbVar3": "compare_byte",
                "uVar4": "temp"
            },
            "calling": [
                "_findenv_r",
                "_rtc_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_00004f84",
            "code": "\nuint parseNumber_00004f84(byte *byteArray,byte **outputPointer,uint base)\n\n{\n  uint result;\n  uint currentByte;\n  uint isNegative;\n  uint digitValue;\n  int incrementResult;\n  uint uMax;\n  uint uDiv;\n  byte *bytePointer;\n  byte *currentPointer;\n  \n  currentPointer = byteArray;\n  do {\n    bytePointer = currentPointer;\n    currentPointer = bytePointer + 1;\n    currentByte = (uint)*bytePointer;\n    isNegative = (byte)(&DAT_00007a99)[currentByte] & 8;\n  } while (((&DAT_00007a99)[currentByte] & 8) != 0);\n  if (currentByte == 0x2d) {\n    currentByte = (uint)*currentPointer;\n    isNegative = 1;\n    currentPointer = bytePointer + 2;\n  }\n  else if (currentByte == 0x2b) {\n    currentByte = (uint)*currentPointer;\n    currentPointer = bytePointer + 2;\n  }\n  if (base == 0) {\n    if (currentByte != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentByte != 0x30)) goto LAB_00004ed6;\n  if ((*currentPointer & 0xdf) == 0x58) {\n    currentByte = (uint)currentPointer[1];\n    base = 0x10;\n    currentPointer = currentPointer + 2;\n  }\n  else {\n    currentByte = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  uMax = isNegative + 0x7fffffff;\n  incrementResult = 0;\n  uDiv = uMax / base;\n  result = 0;\n  do {\n    digitValue = currentByte - 0x30;\n    if (9 < digitValue) {\n      if (currentByte - 0x41 < 0x1a) {\n        digitValue = currentByte - 0x37;\n      }\n      else {\n        if (0x19 < currentByte - 0x61) break;\n        digitValue = currentByte - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (incrementResult != -1) {\n      if ((uDiv < result) || ((uDiv == result && ((int)(uMax - base * uDiv) < (int)digitValue)))) {\n        incrementResult = -1;\n      }\n      else {\n        result = result * base + digitValue;\n        incrementResult = 1;\n      }\n    }\n    currentByte = (uint)*currentPointer;\n    currentPointer = currentPointer + 1;\n  } while( true );\n  if (incrementResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = uMax;\n    if (outputPointer == (byte **)0x0) {\n      return uMax;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (outputPointer == (byte **)0x0) {\n      return result;\n    }\n    if (incrementResult == 0) goto LAB_00004f64;\n  }\n  byteArray = currentPointer + -1;\nLAB_00004f64:\n  *outputPointer = byteArray;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_00004f84",
                "param_1": "byteArray",
                "param_2": "outputPointer",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentByte",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "iVar5": "incrementResult",
                "uVar6": "uMax",
                "uVar7": "uDiv",
                "pbVar8": "bytePointer",
                "pbVar9": "currentPointer"
            },
            "calling": [
                "_parse_time",
                "atoi"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *tzinfo;\n  undefined4 isLeapYear;\n  uint monthIndex;\n  int totalDays;\n  uint *monthsData;\n  int numDays;\n  uint leapYearOffset;\n  int i;\n  int daysOffset;\n  uint isLeapYear;\n  \n  tzinfo = (uint *)__gettzinfo();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    numDays = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    tzinfo[1] = year;\n    isLeapYear = (uint)(year % 400 == 0);\n    monthsData = tzinfo;\n    do {\n      monthIndex = monthsData[5];\n      if (*(char *)(monthsData + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)monthIndex < 0x3c) {\n            totalDays = 0;\n          }\n          else {\n            totalDays = 1;\n          }\n        }\n        else {\n          totalDays = 0;\n        }\n        totalDays = totalDays + numDays + monthIndex + -1;\n      }\n      else if (*(char *)(monthsData + 2) == 'D') {\n        totalDays = numDays + monthIndex;\n      }\n      else {\n        leapYearOffset = isLeapYear;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          leapYearOffset = 1;\n        }\n        i = 0;\n        totalDays = numDays;\n        while( true ) {\n          i = i + 1;\n          if ((int)monthsData[3] <= i) break;\n          totalDays = totalDays + *(int *)(&UNK_00007b98 + i * 4 + leapYearOffset * 0x30);\n        }\n        daysOffset = monthIndex - (totalDays + 4U) % 7;\n        if (daysOffset < 0) {\n          daysOffset = daysOffset + 7;\n        }\n        for (daysOffset = (monthsData[4] - 1) * 7 + daysOffset;\n            *(int *)(&UNK_00007b98 + i * 4 + leapYearOffset * 0x30) <= daysOffset; daysOffset = daysOffset + -7) {\n        }\n        totalDays = totalDays + daysOffset;\n      }\n      monthIndex = monthsData[10] + totalDays * 0x15180 + monthsData[6];\n      monthsData[8] = monthIndex;\n      monthsData[9] = (int)monthIndex >> 0x1f;\n      monthsData = monthsData + 10;\n    } while (tzinfo + 0x14 != monthsData);\n    monthIndex = tzinfo[9];\n    isLeapYear = tzinfo[0x13];\n    *tzinfo = (uint)((int)((monthIndex - isLeapYear) - (uint)(tzinfo[8] < tzinfo[0x12])) < 0 !=\n                    (SBORROW4(monthIndex,isLeapYear) !=\n                    SBORROW4(monthIndex - isLeapYear,(uint)(tzinfo[8] < tzinfo[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "tzinfo",
                "uVar2": "isLeapYear",
                "uVar3": "monthIndex",
                "iVar4": "totalDays",
                "puVar5": "monthsData",
                "iVar6": "numDays",
                "uVar7": "leapYearOffset",
                "iVar8": "i",
                "iVar9": "daysOffset",
                "uVar10": "isLeapYear"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime"
            ],
            "called": [
                "__gettzinfo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_address_000050f4",
            "code": "\nundefined * getMemoryAddress_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_time_zone_input_00005100",
            "code": "\nvoid parseTimeZoneInput_00005100(void)\n\n{\n  dword offset;\n  int tzInfo;\n  char *envValue;\n  int strComparison;\n  int scanResult;\n  undefined charType;\n  char *scanPtr;\n  bool foundComma;\n  ushort *hoursPtr;\n  int *hoursScanCount;\n  ushort *minutesPtr;\n  int *minutesScanCount;\n  ushort hours;\n  ushort minutes;\n  ushort seconds;\n  ushort unknown1;\n  ushort unknown2;\n  ushort unknown3;\n  int scanOffset;\n  char *filePath [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  tzInfo = __gettzinfo();\n  envValue = (char *)_getenv_r(offset,&DAT_00007a5c);\n  if (envValue == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = envValue;\n    DAT_1fff0ddc = envValue;\n    free(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (strComparison = strcmp(), strComparison != 0)) {\n    free(DAT_1fff0dd4);\n    strComparison = strlen(envValue);\n    DAT_1fff0dd4 = _malloc_r(offset,strComparison + 1);\n    if (DAT_1fff0dd4 != 0) {\n      strcpy(DAT_1fff0dd4,envValue);\n    }\n    if (*envValue == ':') {\n      envValue = envValue + 1;\n    }\n    strComparison = siscanf(envValue,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&scanOffset);\n    if (0 < strComparison) {\n      scanPtr = envValue + scanOffset;\n      if (envValue[scanOffset] == '-') {\n        scanPtr = scanPtr + 1;\n        strComparison = -1;\n      }\n      else {\n        if (envValue[scanOffset] == '+') {\n          scanPtr = scanPtr + 1;\n        }\n        strComparison = 1;\n      }\n      minutes = 0;\n      seconds = 0;\n      hoursPtr = &minutes;\n      hoursScanCount = &scanOffset;\n      minutesPtr = &seconds;\n      minutesScanCount = &scanOffset;\n      scanResult = siscanf(scanPtr,\"%hu%n:%hu%n:%hu%n\",&hours,&scanOffset,&minutes,&scanOffset,&seconds,\n                      &scanOffset);\n      if (0 < scanResult) {\n        *(uint *)(tzInfo + 0x28) =\n             ((uint)hours * 0xe10 + (uint)minutes * 0x3c + (uint)seconds) * strComparison;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        scanPtr = scanPtr + scanOffset;\n        strComparison = siscanf(scanPtr,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&scanOffset,hoursPtr,hoursScanCount,minutesPtr,\n                        minutesScanCount);\n        if (strComparison < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(tzInfo + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          envValue = scanPtr + scanOffset;\n          if (scanPtr[scanOffset] == '-') {\n            envValue = envValue + 1;\n            strComparison = -1;\n          }\n          else {\n            if (scanPtr[scanOffset] == '+') {\n              envValue = envValue + 1;\n            }\n            strComparison = 1;\n          }\n          hours = 0;\n          minutes = 0;\n          seconds = 0;\n          scanOffset = 0;\n          scanResult = siscanf(envValue,\"%hu%n:%hu%n:%hu%n\",&hours,&scanOffset,&minutes,&scanOffset,\n                          &seconds,&scanOffset);\n          if (scanResult < 1) {\n            strComparison = *(int *)(tzInfo + 0x28) + -0xe10;\n          }\n          else {\n            strComparison = ((uint)hours * 0xe10 + (uint)minutes * 0x3c + (uint)seconds) * strComparison;\n          }\n          *(int *)(tzInfo + 0x50) = strComparison;\n          envValue = envValue + scanOffset;\n          foundComma = false;\n          strComparison = tzInfo;\n          while( true ) {\n            if (*envValue == ',') {\n              envValue = envValue + 1;\n            }\n            if (*envValue == 'M') {\n              scanResult = siscanf(envValue,\"M%hu%n.%hu%n.%hu%n\",&unknown1,&scanOffset,&unknown2,&scanOffset,\n                              &unknown3,&scanOffset);\n              if (scanResult != 3) {\n                return;\n              }\n              if (0xb < unknown1 - 1) {\n                return;\n              }\n              if (4 < unknown2 - 1) {\n                return;\n              }\n              if (6 < unknown3) {\n                return;\n              }\n              *(uint *)(strComparison + 0xc) = (uint)unknown1;\n              *(uint *)(strComparison + 0x10) = (uint)unknown2;\n              *(undefined *)(strComparison + 8) = 0x4d;\n              *(uint *)(strComparison + 0x14) = (uint)unknown3;\n              scanPtr = envValue + scanOffset;\n            }\n            else {\n              if (*envValue == 'J') {\n                envValue = envValue + 1;\n                charType = 0x4a;\n              }\n              else {\n                charType = 0x44;\n              }\n              unknown3 = strtoul(envValue,filePath,10);\n              scanPtr = filePath[0];\n              if (filePath[0] == envValue) {\n                if (foundComma) {\n                  *(undefined *)(tzInfo + 0x30) = 0x4d;\n                  *(undefined4 *)(tzInfo + 0x34) = 0xb;\n                  *(undefined4 *)(tzInfo + 0x38) = 1;\n                  *(undefined4 *)(tzInfo + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(tzInfo + 8) = 0x4d;\n                  *(undefined4 *)(tzInfo + 0xc) = 3;\n                  *(undefined4 *)(tzInfo + 0x10) = 2;\n                  *(undefined4 *)(tzInfo + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(strComparison + 8) = charType;\n                *(uint *)(strComparison + 0x14) = (uint)unknown3;\n              }\n            }\n            hours = 2;\n            minutes = 0;\n            seconds = 0;\n            scanOffset = 0;\n            if (*scanPtr == '/') {\n              siscanf(scanPtr,&DAT_00007a85,&hours,&scanOffset,&minutes,&scanOffset,&seconds,\n                      &scanOffset);\n            }\n            *(uint *)(strComparison + 0x18) =\n                 (uint)hours * 0xe10 + (uint)minutes * 0x3c + (uint)seconds;\n            strComparison = strComparison + 0x28;\n            envValue = scanPtr + scanOffset;\n            if (foundComma) break;\n            foundComma = true;\n          }\n          __tzcalc_limits(*(undefined4 *)(tzInfo + 4));\n          DAT_1fff0ddc = *(char **)(tzInfo + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(tzInfo + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_time_zone_input_00005100",
                "dVar1": "offset",
                "iVar2": "tzInfo",
                "pcVar3": "envValue",
                "iVar4": "strComparison",
                "iVar5": "scanResult",
                "uVar6": "charType",
                "pcVar7": "scanPtr",
                "bVar8": "foundComma",
                "puVar9": "hoursPtr",
                "piVar10": "hoursScanCount",
                "puVar11": "minutesPtr",
                "piVar12": "minutesScanCount",
                "local_3c": "hours",
                "local_3a": "minutes",
                "local_38": "seconds",
                "local_36": "unknown1",
                "local_34": "unknown2",
                "local_32": "unknown3",
                "local_30": "scanOffset",
                "local_2c": "filePath"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "_getenv_r",
                "strlen",
                "strcpy",
                "siscanf",
                "__gettzinfo",
                "free",
                "_malloc_r",
                "strtoul",
                "strcmp",
                "__tzcalc_limits"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_input_00005404",
            "code": "\nuint process_input_00005404(int input_ptr,uint character,int *buffer,undefined4 size)\n\n{\n  int result;\n  uint length;\n  undefined *ptr;\n  \n  if ((input_ptr != 0) && (*(int *)(input_ptr + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(input_ptr + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(input_ptr + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(input_ptr + 0xc);\n  }\n  buffer[2] = buffer[6];\n  length = (uint)*(ushort *)(buffer + 3);\n  result = length << 0x1c;\n  if (((result < 0) && (length = buffer[4], length != 0)) ||\n     (result = __swsetup_r(input_ptr,buffer,result,length,size), result == 0)) {\n    result = *buffer - buffer[4];\n    character = character & 0xff;\n    if ((result < buffer[5]) || (result = _fflush_r(input_ptr,buffer), result == 0)) {\n      buffer[2] = buffer[2] + -1;\n      ptr = (undefined *)*buffer;\n      *buffer = (int)(ptr + 1);\n      *ptr = (char)character;\n      if (buffer[5] != result + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return character;\n        }\n        if (character != 10) {\n          return character;\n        }\n      }\n      result = _fflush_r(input_ptr,buffer);\n      if (result == 0) {\n        return character;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_input_00005404",
                "param_1": "input_ptr",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "result",
                "uVar2": "length",
                "puVar3": "ptr"
            },
            "calling": [
                "puts",
                "putchar",
                "__sfputc_r"
            ],
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *outputPtr,undefined4 *inputPtr)\n\n{\n  ushort tempVar1;\n  dword offset;\n  ushort tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  \n  offset = elfArray[16].r_offset;\n  if ((elfArray[16].r_offset != 0) &&\n     (*(int *)(elfArray[16].r_offset + 0x18) == 0)) {\n    __sinit(elfArray[16].r_offset);\n  }\n  if (inputPtr == &DAT_000079b8) {\n    inputPtr = *(undefined4 **)(offset + 4);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_000079d8) {\n    inputPtr = *(undefined4 **)(offset + 8);\n  }\n  else if (inputPtr == (undefined4 *)&DAT_00007998) {\n    inputPtr = *(undefined4 **)(offset + 0xc);\n  }\n  tempVar3 = (uint)*(ushort *)(inputPtr + 3);\n  tempVar2 = *(ushort *)(inputPtr + 3);\n  if (-1 < (int)(tempVar3 << 0x1c)) {\n    if (-1 < (int)(tempVar3 << 0x1b)) {\n      *outputPtr = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(tempVar3 << 0x1d) < 0) {\n      if ((undefined4 *)inputPtr[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputPtr[0xd] != inputPtr + 0x11) {\n          _free_r(outputPtr);\n        }\n        inputPtr[0xd] = 0;\n      }\n      *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) & 0xffdb;\n      inputPtr[1] = 0;\n      *inputPtr = inputPtr[4];\n    }\n    *(ushort *)(inputPtr + 3) = *(ushort *)(inputPtr + 3) | 8;\n  }\n  if ((inputPtr[4] == 0) && ((*(ushort *)(inputPtr + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(outputPtr,inputPtr);\n  }\n  tempVar1 = *(ushort *)(inputPtr + 3);\n  tempVar3 = (uint)tempVar1;\n  tempVar2 = *(ushort *)(inputPtr + 3);\n  tempVar4 = tempVar3 & 1;\n  if ((tempVar1 & 1) == 0) {\n    if (-1 < (int)(tempVar3 << 0x1e)) {\n      tempVar4 = inputPtr[5];\n    }\n    inputPtr[2] = tempVar4;\n  }\n  else {\n    inputPtr[2] = 0;\n    inputPtr[6] = -inputPtr[5];\n  }\n  if (inputPtr[4] != 0) {\n    return 0;\n  }\n  if ((tempVar1 & 0x80) == 0) {\n    return tempVar3 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputPtr + 3) = tempVar2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "outputPtr",
                "param_2": "inputPtr",
                "Elf32_Rel_ARRAY_1fff0200": "elfArray",
                "uVar1": "tempVar1",
                "dVar2": "offset",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4"
            },
            "calling": [
                "__swbuf_r",
                "_vfprintf_r",
                "puts"
            ],
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_remainder_00005584",
            "code": "\nvoid divide_and_remainder_00005584(uint *quotient_remainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotient_remainder = quotient;\n  quotient_remainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_remainder_00005584",
                "param_1": "quotient_remainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "validate_structure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_matching_substring_0000562c",
            "code": "\nint findMatchingSubstring_0000562c(undefined4 env_lock,char *input_string,int *index_output)\n\n{\n  char current_char;\n  int *current_offset;\n  int comparison_result;\n  char *current_char_ptr;\n  int *current_offset_ptr;\n  int input_length;\n  \n  __env_lock();\n  current_char_ptr = input_string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_char_ptr;\n      if (current_char == '\\0') {\n        input_length = (int)current_char_ptr - (int)input_string;\n        current_offset = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          current_offset_ptr = current_offset;\n          if (*current_offset_ptr == 0) break;\n          comparison_result = strncmp(*current_offset_ptr,input_string,input_length);\n          current_offset = current_offset_ptr + 1;\n          if ((comparison_result == 0) && (comparison_result = *current_offset_ptr, *(char *)(comparison_result + input_length) == '=')) {\n            *index_output = (int)((int)current_offset_ptr - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            __env_unlock(env_lock);\n            return comparison_result + input_length + 1;\n          }\n        }\n        break;\n      }\n      current_char_ptr = current_char_ptr + 1;\n    } while (current_char != '=');\n  }\n  __env_unlock(env_lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_matching_substring_0000562c",
                "param_1": "env_lock",
                "param_2": "input_string",
                "param_3": "index_output",
                "cVar1": "current_char",
                "piVar2": "current_offset",
                "iVar3": "comparison_result",
                "pcVar4": "current_char_ptr",
                "piVar5": "current_offset_ptr",
                "iVar6": "input_length"
            },
            "calling": [
                "_getenv_r"
            ],
            "called": [
                "__env_unlock",
                "__env_lock",
                "strncmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_environment_variable_000056a0",
            "code": "\nvoid find_environment_variable_000056a0(undefined4 function_param,undefined4 env_value,undefined4 env_variable,undefined4 env_path)\n\n{\n  undefined4 env_value_stack;\n  undefined4 env_variable_stack;\n  \n  env_value_stack = env_value;\n  env_variable_stack = env_variable;\n  _findenv_r(function_param,env_value,&env_value_stack,env_path,function_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_environment_variable_000056a0",
                "param_1": "function_param",
                "param_2": "env_value",
                "param_3": "env_variable",
                "param_4": "env_path",
                "uStack_c": "env_value_stack",
                "uStack_8": "env_variable_stack"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_findenv_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime",
                "__tzcalc_limits"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_file_attributes_000056b8",
            "code": "\nundefined4 checkFileAttributes_000056b8(undefined4 fileDescriptor,int fileInfo,undefined4 *filePermission,uint *isExecutable)\n\n{\n  int status;\n  undefined4 permissionStatus;\n  undefined fileStatBuffer [4];\n  uint fileAttributes;\n  \n  if ((*(short *)(fileInfo + 0xe) < 0) ||\n     (status = _fstat_r(fileDescriptor,(int)*(short *)(fileInfo + 0xe),fileStatBuffer), status < 0)) {\n    *isExecutable = 0;\n    if ((int)((uint)*(ushort *)(fileInfo + 0xc) << 0x18) < 0) {\n      permissionStatus = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *isExecutable = (uint)((fileAttributes & 0xf000) == 0x2000);\n  }\n  permissionStatus = 0x400;\nLAB_000056f8:\n  *filePermission = permissionStatus;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_file_attributes_000056b8",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "param_3": "filePermission",
                "param_4": "isExecutable",
                "iVar1": "status",
                "uVar2": "permissionStatus",
                "auStack_68": "fileStatBuffer",
                "local_64": "fileAttributes"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "parse_and_allocate_memory_00005700",
            "code": "\nvoid parseAndAllocateMemory_00005700(int context,int *data)\n\n{\n  ushort result;\n  int allocatedMemory;\n  int length;\n  int *buffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1e)) {\n    length = context;\n    buffer = data;\n    result = __swhatbuf_r(context,data,&length,&buffer);\n    allocatedMemory = _malloc_r(context,length);\n    if (allocatedMemory != 0) {\n      *(undefined **)(context + 0x28) = &DAT_0000423d;\n      *data = allocatedMemory;\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x80;\n      data[5] = length;\n      data[4] = allocatedMemory;\n      if ((buffer != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(context,(int)*(short *)((int)data + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(data + 3) = result | *(ushort *)(data + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(data + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) & 0xfffc | 2;\n  }\n  *data = (int)data + 0x47;\n  data[4] = (int)data + 0x47;\n  data[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "parse_and_allocate_memory_00005700",
                "param_1": "context",
                "param_2": "data",
                "uVar1": "result",
                "iVar2": "allocatedMemory",
                "local_18": "length",
                "local_14": "buffer"
            },
            "calling": [
                "__srefill_r",
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "free_elf32_rel_offset_00005780",
            "code": "\nvoid free_elf32_rel_offset_00005780(undefined4 memory_address)\n\n{\n  _free_r(relocation_array[16].r_offset,memory_address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "free_elf32_rel_offset_00005780",
                "param_1": "memory_address",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "acquire_recursive_lock_00005790",
            "code": "\nvoid acquireRecursiveLock_00005790(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "acquire_recursive_lock_00005790"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "release_recursive_lock_0000579c",
            "code": "\nvoid releaseRecursiveLock_0000579c(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "release_recursive_lock_0000579c"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "write_char_to_file_000057a8",
            "code": "\nint writeCharToFile_000057a8(undefined4 fileDescriptor,int character,undefined4 *buffer)\n\n{\n  int currentIndex;\n  undefined *currentPointer;\n  \n  currentIndex = buffer[2] + -1;\n  buffer[2] = currentIndex;\n  if ((currentIndex < 0) && ((currentIndex < (int)buffer[6] || (character == 10)))) {\n    currentIndex = __swbuf_r();\n    return currentIndex;\n  }\n  currentPointer = (undefined *)*buffer;\n  *buffer = currentPointer + 1;\n  *currentPointer = (char)character;\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "write_char_to_file_000057a8",
                "param_1": "fileDescriptor",
                "param_2": "character",
                "param_3": "buffer",
                "iVar1": "currentIndex",
                "puVar2": "currentPointer"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "write_to_stream_000057d2",
            "code": "\nint write_to_stream_000057d2(undefined4 stream,undefined4 mode,undefined *data,int num_bytes)\n\n{\n  int bytes_written;\n  undefined *end_of_data;\n  int bytes_remaining;\n  \n  end_of_data = data + num_bytes;\n  bytes_remaining = num_bytes;\n  do {\n    if (data == end_of_data) {\n      return 0;\n    }\n    bytes_written = __sfputc_r(stream,*data,mode,num_bytes,bytes_remaining);\n    num_bytes = bytes_written + 1;\n    data = data + 1;\n  } while (num_bytes != 0);\n  return bytes_written;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "write_to_stream_000057d2",
                "param_1": "stream",
                "param_2": "mode",
                "param_3": "data",
                "param_4": "num_bytes",
                "iVar1": "bytes_written",
                "puVar2": "end_of_data",
                "iVar3": "bytes_remaining"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "format_and_print_string_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint formatAndPrintString_000057f8(int stream,undefined4 *format,byte *str,int *args)\n\n{\n  int result;\n  int retVal;\n  int *argPointer;\n  bool foundNumber;\n  byte *currentChar;\n  int lockIdentifier;\n  byte *ptr;\n  int *argList;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int widthArg;\n  int totalCharsWritten;\n  byte specifier;\n  undefined space;\n  undefined plus;\n  undefined zero;\n  undefined4 chunkLength;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (format == &DAT_000079b8) {\n    format = *(undefined4 **)(stream + 4);\n  }\n  else if (format == (undefined4 *)&DAT_000079d8) {\n    format = *(undefined4 **)(stream + 8);\n  }\n  else if (format == (undefined4 *)&DAT_00007998) {\n    format = *(undefined4 **)(stream + 0xc);\n  }\n  if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(format[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format + 3) << 0x1c)) || (format[4] == 0)) &&\n     (result = __swsetup_r(stream,format), result != 0)) {\n    if ((-1 < (int)(format[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16)))\n    {\n      __retarget_lock_release_recursive(format[0x16]);\n    }\n    return -1;\n  }\n  totalCharsWritten = 0;\n  space = 0x20;\n  plus = 0x30;\n  ptr = str;\n  argList = args;\nLAB_0000588e:\n  currentChar = ptr;\n  if (*currentChar != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  ptr = currentChar + 1;\n  if (*currentChar == 0x25) {\nLAB_0000589a:\n    result = (int)currentChar - (int)str;\n    if (result != 0) {\n      retVal = __sfputs_r(stream,format,str,result);\n      if (retVal == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(format[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(format + 3) << 0x16))) {\n          __retarget_lock_release_recursive(format[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(format + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalCharsWritten;\n      }\n      totalCharsWritten = totalCharsWritten + result;\n    }\n    if (*currentChar == 0) goto LAB_00005a06;\n    precision = -1;\n    width = 0;\n    flags = 0;\n    widthArg = 0;\n    zero = 0;\n    chunkLength = 0;\n    ptr = currentChar + 1;\n    while( true ) {\n      currentChar = ptr + 1;\n      result = memchr(\"#-0+ \",*ptr,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      ptr = currentChar;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      zero = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      zero = 0x2b;\n    }\n    if (*ptr == 0x2a) {\n      argPointer = argList + 1;\n      widthArg = *argList;\n      argList = argPointer;\n      if (widthArg < 0) {\n        widthArg = -widthArg;\n        flags = flags | 2;\n      }\n    }\n    else {\n      foundNumber = false;\n      result = widthArg;\n      currentChar = ptr;\n      while( true ) {\n        if (9 < *currentChar - 0x30) break;\n        result = result * 10 + (*currentChar - 0x30);\n        foundNumber = true;\n        currentChar = currentChar + 1;\n      }\n      if (foundNumber) {\n        widthArg = result;\n      }\n    }\n    if (*currentChar == 0x2e) {\n      if (currentChar[1] == 0x2a) {\n        precision = *argList;\n        if (precision < 0) {\n          precision = -1;\n        }\n        currentChar = currentChar + 2;\n        argList = argList + 1;\n      }\n      else {\n        foundNumber = false;\n        precision = 0;\n        result = 0;\n        while( true ) {\n          currentChar = currentChar + 1;\n          if (9 < *currentChar - 0x30) break;\n          result = result * 10 + (*currentChar - 0x30);\n          foundNumber = true;\n        }\n        if (foundNumber) {\n          precision = result;\n        }\n      }\n    }\n    result = memchr(&DAT_00007c02,*currentChar,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      currentChar = currentChar + 1;\n    }\n    str = currentChar + 1;\n    specifier = *currentChar;\n    result = memchr(\"efgEFG\",specifier,6);\n    if (result == 0) {\n      lockIdentifier = _printf_i(stream,&flags,format,0x57d3,&argList);\n      if (lockIdentifier == -1) goto LAB_00005a06;\n    }\n    else {\n      argList = (int *)(((int)argList + 7U & 0xfffffff8) + 8);\n    }\n    totalCharsWritten = totalCharsWritten + lockIdentifier;\n    ptr = str;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "format_and_print_string_000057f8",
                "param_1": "stream",
                "param_2": "format",
                "param_3": "str",
                "param_4": "args",
                "iVar1": "result",
                "iVar2": "retVal",
                "piVar3": "argPointer",
                "bVar4": "foundNumber",
                "pbVar5": "currentChar",
                "unaff_r7": "lockIdentifier",
                "pbVar6": "ptr",
                "local_8c": "argList",
                "local_88": "flags",
                "local_84": "precision",
                "uStack_80": "width",
                "local_7c": "widthArg",
                "local_74": "totalCharsWritten",
                "local_70": "specifier",
                "local_6f": "space",
                "local_6e": "plus",
                "local_45": "zero",
                "local_30": "chunkLength"
            },
            "calling": [
                "iprintf"
            ],
            "called": [
                "__sfputs_r",
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "memchr",
                "__sinit",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_required_size_00005a58",
            "code": "\nundefined4\ncalculateRequiredSize_00005a58(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int count;\n  undefined4 result;\n  int returnValue;\n  uint maxSize;\n  uint uVar5;\n  bool isValue;\n  \n  maxSize = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxSize = data[2];\n  }\n  *output = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (count = 0; count < (int)(data[3] - *output); count = count + 1) {\n      returnValue = (*callback)(input,param,(int)data + 0x19,1);\n      if (returnValue == -1) goto errorLabel;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n    maxSize = maxSize + 2;\n  }\n  count = (*callback)(input,param,(int)data + 0x43,maxSize);\n  if (count == -1) {\nerrorLabel:\n    result = 0xffffffff;\n  }\n  else {\n    maxSize = data[3];\n    isValue = (*data & 6) == 4;\n    if (isValue) {\n      maxSize = maxSize - *output;\n    }\n    if (isValue) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxSize = maxSize + (data[2] - data[4]);\n    }\n    for (uVar5 = 0; maxSize != uVar5; uVar5 = uVar5 + 1) {\n      count = (*callback)(input,param,(int)data + 0x1a,1);\n      if (count == -1) goto errorLabel;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_required_size_00005a58",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "count",
                "uVar2": "result",
                "iVar3": "returnValue",
                "uVar4": "maxSize",
                "bVar6": "isValue",
                "LAB_00005afc": "errorLabel"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "print_formatted_value_00005b34",
            "code": "\ncode * printFormattedValue_00005b34(undefined4 formatSpecifier,uint *value,undefined4 width,code *printer,uint **argPtr\n                   )\n\n{\n  bool isGreater;\n  byte formatChar;\n  int result;\n  code *formattedOutput;\n  char *hexChars;\n  int printResult;\n  char *formatPointer;\n  uint dividend;\n  uint *argPtrCopy;\n  uint base;\n  uint **ppuVar11;\n  char **ppcVar12;\n  uint size;\n  char *formattedOutputPointer;\n  code *defaultPrinter;\n  \n  formatChar = *(byte *)(value + 6);\n  formatPointer = (char *)((int)value + 0x43);\n  defaultPrinter = printer;\n  if (0x78 < formatChar) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)value + 0x42) = formatChar;\nLAB_00005bdc:\n    formatPointer = (char *)((int)value + 0x42);\n    dividend = 1;\nLAB_00005d28:\n    value[4] = dividend;\n    *(undefined *)((int)value + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (formatChar < 99) {\n    if (formatChar == 0) goto LAB_00005d06;\n    if (formatChar == 0x58) {\n      hexChars = \"0123456789ABCDEF\";\n      *(undefined *)((int)value + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(formatChar) {\n  case 99:\n    dividend = **argPtr;\n    *argPtr = *argPtr + 1;\n    *(char *)((int)value + 0x42) = (char)dividend;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *value;\n    argPtrCopy = *argPtr;\n    if ((int)(base << 0x18) < 0) {\n      dividend = *argPtrCopy;\n      *argPtr = argPtrCopy + 1;\n    }\n    else {\n      dividend = *argPtrCopy;\n      *argPtr = argPtrCopy + 1;\n      if ((base & 0x40) != 0) {\n        dividend = (uint)(short)dividend;\n      }\n    }\n    if ((int)dividend < 0) {\n      dividend = -dividend;\n      *(undefined *)((int)value + 0x43) = 0x2d;\n    }\n    hexChars = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*argPtr;\n    base = *value;\n    dividend = value[5];\n    *argPtr = (uint *)(ppuVar11 + 1);\n    argPtrCopy = *ppuVar11;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *argPtrCopy = dividend;\n    }\n    else {\n      *(short *)argPtrCopy = (short)dividend;\n    }\nLAB_00005d06:\n    value[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    argPtrCopy = *argPtr;\n    dividend = *value;\n    *argPtr = argPtrCopy + 1;\n    if (((int)(dividend << 0x18) < 0) || (-1 < (int)(dividend << 0x19))) {\n      dividend = *argPtrCopy;\n    }\n    else {\n      dividend = (uint)*(ushort *)argPtrCopy;\n    }\n    hexChars = \"0123456789ABCDEF\";\n    if (formatChar == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *value = *value | 0x20;\n  case 0x78:\n    hexChars = \"0123456789abcdef\";\n    *(undefined *)((int)value + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *value;\n    dividend = **argPtr;\n    *argPtr = *argPtr + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      dividend = dividend & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *value = base | 0x20;\n    }\n    if (dividend == 0) {\n      *value = *value & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar12 = (char **)*argPtr;\n    *argPtr = (uint *)(ppcVar12 + 1);\n    formatPointer = *ppcVar12;\n    result = memchr(formatPointer,0,value[1],ppcVar12,formatSpecifier,value,width);\n    if (result != 0) {\n      value[1] = result - (int)formatPointer;\n    }\n    dividend = value[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)value + 0x43) = 0;\nLAB_00005c36:\n  size = value[1];\n  value[2] = size;\n  if (-1 < (int)size) {\n    *value = *value & 0xfffffffb;\n  }\n  formattedOutputPointer = formatPointer;\n  if ((dividend != 0) || (size != 0)) {\n    do {\n      formattedOutputPointer = formattedOutputPointer + -1;\n      *formattedOutputPointer = hexChars[dividend - base * (dividend / base)];\n      isGreater = base <= dividend;\n      dividend = dividend / base;\n    } while (isGreater);\n  }\n  if (((base == 8) && ((int)(*value << 0x1f) < 0)) && ((int)value[1] <= (int)value[4])) {\n    formattedOutputPointer[-1] = '0';\n    formattedOutputPointer = formattedOutputPointer + -1;\n  }\n  value[4] = (int)formatPointer - (int)formattedOutputPointer;\n  formatPointer = formattedOutputPointer;\nLAB_00005c84:\n  result = _printf_common(formatSpecifier,value,&defaultPrinter,width,printer);\n  if ((result == -1) || (result = (*printer)(formatSpecifier,width,formatPointer,value[4]), result == -1)) {\nLAB_00005c98:\n    formattedOutput = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*value << 0x1e) < 0) {\n      for (result = 0; result < (int)(value[3] - (int)defaultPrinter); result = result + 1) {\n        printResult = (*printer)(formatSpecifier,width,(int)value + 0x19,1);\n        if (printResult == -1) goto LAB_00005c98;\n      }\n    }\n    formattedOutput = (code *)value[3];\n    if ((int)(code *)value[3] < (int)defaultPrinter) {\n      formattedOutput = defaultPrinter;\n    }\n  }\n  return formattedOutput;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "print_formatted_value_00005b34",
                "param_1": "formatSpecifier",
                "param_2": "value",
                "param_3": "width",
                "param_4": "printer",
                "param_5": "argPtr",
                "bVar1": "isGreater",
                "bVar2": "formatChar",
                "iVar3": "result",
                "pcVar4": "formattedOutput",
                "pcVar5": "hexChars",
                "iVar6": "printResult",
                "pcVar7": "formatPointer",
                "uVar8": "dividend",
                "puVar9": "argPtrCopy",
                "uVar10": "base",
                "uVar13": "size",
                "pcVar14": "formattedOutputPointer",
                "local_24": "defaultPrinter"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "read_byte_from_buffer_00005e10",
            "code": "\nuint readByteFromBuffer_00005e10(int buffer,byte **bufferPointer)\n\n{\n  int result;\n  uint byteRead;\n  byte *currentByte;\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x18) == 0)) {\n    __sinit();\n  }\n  if (bufferPointer == (byte **)&DAT_000079b8) {\n    bufferPointer = *(byte ***)(buffer + 4);\n  }\n  else if (bufferPointer == (byte **)&DAT_000079d8) {\n    bufferPointer = *(byte ***)(buffer + 8);\n  }\n  else if (bufferPointer == (byte **)&DAT_00007998) {\n    bufferPointer = *(byte ***)(buffer + 0xc);\n  }\n  result = __srefill_r(buffer,bufferPointer);\n  if (result == 0) {\n    bufferPointer[1] = bufferPointer[1] + -1;\n    currentByte = *bufferPointer;\n    *bufferPointer = currentByte + 1;\n    byteRead = (uint)*currentByte;\n  }\n  else {\n    byteRead = 0xffffffff;\n  }\n  return byteRead;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "read_byte_from_buffer_00005e10",
                "param_1": "buffer",
                "param_2": "bufferPointer",
                "iVar1": "result",
                "uVar2": "byteRead",
                "pbVar3": "currentByte"
            },
            "calling": [
                "getchar"
            ],
            "called": [
                "__srefill_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "parse_input_00005e68",
            "code": "\nvoid parseInput_00005e68(undefined4 inputPtr,undefined4 formatPtr,undefined4 outputPtr,undefined4 extraParam)\n\n{\n  undefined4 inputStartPtr;\n  undefined4 inputLength;\n  undefined2 formatLength;\n  undefined2 defaultValue;\n  undefined4 inputPtrCopy;\n  undefined4 outputLength;\n  undefined *defaultStringPtr;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 stackVar1;\n  undefined4 stackVar2;\n  \n  formatLength = 0x204;\n  inputStartPtr = inputPtr;\n  inputPtrCopy = inputPtr;\n  stackVar1 = outputPtr;\n  stackVar2 = extraParam;\n  inputLength = strlen();\n  defaultStringPtr = &LAB_00004dea_1;\n  localVar1 = 0;\n  localVar2 = 0;\n  defaultValue = 0xffff;\n  outputLength = inputLength;\n  __ssvfiscanf_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&inputStartPtr,formatPtr,&stackVar1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "parse_input_00005e68",
                "param_1": "inputPtr",
                "param_2": "formatPtr",
                "param_3": "outputPtr",
                "param_4": "extraParam",
                "local_80": "inputStartPtr",
                "local_7c": "inputLength",
                "local_74": "formatLength",
                "local_72": "defaultValue",
                "local_70": "inputPtrCopy",
                "local_6c": "outputLength",
                "local_5c": "defaultStringPtr",
                "local_4c": "localVar1",
                "local_38": "localVar2",
                "uStack_8": "stackVar1",
                "uStack_4": "stackVar2"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "__ssvfiscanf_r",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_end_of_string_00005ecc",
            "code": "\nchar * findEndOfString_00005ecc(char *string)\n\n{\n  char currentChar;\n  char *nextChar;\n  char *currentPosition;\n  \n  currentPosition = string;\n  do {\n    nextChar = currentPosition + 1;\n    currentChar = *currentPosition;\n    currentPosition = nextChar;\n  } while (currentChar != '\\0');\n  return nextChar + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_end_of_string_00005ecc",
                "param_1": "string",
                "cVar1": "currentChar",
                "pcVar2": "nextChar",
                "pcVar3": "currentPosition"
            },
            "calling": [
                "_tzset_unlocked",
                "siscanf"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *output,byte *input,byte **remaining,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  byte isNegative;\n  int status;\n  uint digit;\n  uint maxDigit;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = input;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00005f26;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxDigit = 0xffffffff / base;\n  result = 0;\n  do {\n    digit = currentChar - 0x30;\n    if (9 < digit) {\n      if (currentChar - 0x41 < 0x1a) {\n        digit = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digit = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((status < 0) || (maxDigit < result)) ||\n       ((maxDigit == result && ((int)~(base * maxDigit) < (int)digit)))) {\n      status = -1;\n    }\n    else {\n      result = result * base + digit;\n      status = 1;\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (status < 0) {\n    *output = 0x22;\n    result = 0xffffffff;\n    if (remaining == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (remaining == (byte **)0x0) {\n      return result;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = nextByte + -1;\nLAB_00005fb8:\n  *remaining = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "output",
                "param_2": "input",
                "param_3": "remaining",
                "param_4": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "bVar3": "isNegative",
                "iVar4": "status",
                "uVar5": "digit",
                "uVar6": "maxDigit",
                "pbVar7": "currentByte",
                "pbVar8": "nextByte"
            },
            "calling": [
                "strtoul"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_unsigned_number_00005fd8",
            "code": "\nvoid parseUnsignedNumber_00005fd8(undefined4 offset,undefined4 base,undefined4 endptr)\n\n{\n  _strtoul_l_isra_0(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset,base,endptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_unsigned_number_00005fd8",
                "param_1": "offset",
                "param_2": "base",
                "param_3": "endptr"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_strtoul_l.isra.0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "acquire_recursive_retarg_lock_00005fec",
            "code": "\nvoid acquire_recursive_retarg_lock_00005fec(void)\n\n{\n  acquire_recursive_retarg_lock_00005fec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "acquire_recursive_retarg_lock_00005fec",
                "__retarget_lock_acquire_recursive": "acquire_recursive_retarg_lock"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "release_retarget_lock_00005ff8",
            "code": "\nvoid releaseRetargetLock_00005ff8(void)\n\n{\n  __retarget_lock_release_recursive(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "release_retarget_lock_00005ff8"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_pattern_00006010",
            "code": "\nbyte * findPattern_00006010(uint *data,uint pattern,uint length)\n\n{\n  byte currentByte;\n  char isZero1;\n  char isZero2;\n  char isZero3;\n  char isZero4;\n  byte *resultPtr;\n  uint *currentPtr;\n  byte *nextPtr;\n  uint ptrMod8;\n  uint lengthMod8;\n  uint xor1;\n  uint xor2;\n  bool isNonZero1;\n  bool isNonZero2;\n  bool isNonZero3;\n  bool isNonZero4;\n  \n  pattern = pattern & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      currentPtr = (uint *)((int)data + 1);\n      currentByte = *(byte *)data;\n      length = length - 1;\n      data = currentPtr;\n    } while (currentByte != pattern);\n  }\n  else {\n    ptrMod8 = (uint)data & 7;\n    while( true ) {\n      if (ptrMod8 == 0) {\n        ptrMod8 = pattern | pattern << 8;\n        ptrMod8 = ptrMod8 | ptrMod8 << 0x10;\n        lengthMod8 = length & 0xfffffff8;\n        do {\n          currentPtr = data + 2;\n          lengthMod8 = lengthMod8 - 8;\n          xor1 = *data ^ ptrMod8;\n          xor2 = data[1] ^ ptrMod8;\n          isZero1 = -((char)xor1 == '\\0');\n          isZero2 = -((char)(xor1 >> 8) == '\\0');\n          isZero3 = -((char)(xor1 >> 0x10) == '\\0');\n          isZero4 = -((char)(xor1 >> 0x18) == '\\0');\n          xor1 = CONCAT13(isZero4,CONCAT12(isZero3,CONCAT11(isZero2,isZero1)));\n          isNonZero1 = (char)xor2 != '\\0';\n          isNonZero2 = (char)(xor2 >> 8) != '\\0';\n          isNonZero3 = (char)(xor2 >> 0x10) != '\\0';\n          isNonZero4 = (char)(xor2 >> 0x18) != '\\0';\n          xor2 = CONCAT13(isNonZero4 * isZero4 - !isNonZero4,\n                            CONCAT12(isNonZero3 * isZero3 - !isNonZero3,\n                                     CONCAT11(isNonZero2 * isZero2 - !isNonZero2,isNonZero1 * isZero1 - !isNonZero1)));\n          if (xor2 != 0) {\n            if (xor1 == 0) {\n              nextPtr = (byte *)((int)data + 5);\n              xor1 = xor2;\n            }\n            else {\n              nextPtr = (byte *)((int)data + 1);\n            }\n            if ((xor1 & 1) == 0) {\n              isNonZero1 = (xor1 & 0x100) == 0;\n              resultPtr = nextPtr + 1;\n              if (isNonZero1) {\n                isNonZero1 = (xor1 & 0x18000) == 0;\n                resultPtr = nextPtr + 2;\n              }\n              nextPtr = resultPtr;\n              if (isNonZero1) {\n                nextPtr = nextPtr + 1;\n              }\n            }\n            return nextPtr + -1;\n          }\n          data = currentPtr;\n        } while (lengthMod8 != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      currentPtr = (uint *)((int)data + 1);\n      length = length - 1;\n      if (*(byte *)data == pattern) break;\n      ptrMod8 = (uint)currentPtr & 7;\n      data = currentPtr;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)currentPtr + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_pattern_00006010",
                "param_1": "data",
                "param_2": "pattern",
                "param_3": "length",
                "bVar1": "currentByte",
                "cVar2": "isZero1",
                "cVar3": "isZero2",
                "cVar4": "isZero3",
                "cVar5": "isZero4",
                "pbVar6": "resultPtr",
                "puVar7": "currentPtr",
                "pbVar8": "nextPtr",
                "uVar9": "ptrMod8",
                "uVar10": "lengthMod8",
                "uVar11": "xor1",
                "uVar12": "xor2",
                "bVar13": "isNonZero1",
                "bVar14": "isNonZero2",
                "bVar15": "isNonZero3",
                "bVar16": "isNonZero4"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_vfprintf_r",
                "_printf_i",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_with_offset_000060b0",
            "code": "\nvoid copyWithOffset_000060b0(int baseAddress,undefined *source,int size)\n\n{\n  undefined *sourcePointer;\n  undefined *endPointer;\n  undefined *destinationPointer;\n  \n  endPointer = source + size;\n  destinationPointer = (undefined *)(baseAddress + -1);\n  if (source != endPointer) {\n    do {\n      sourcePointer = source + 1;\n      destinationPointer = destinationPointer + 1;\n      *destinationPointer = *source;\n      source = sourcePointer;\n    } while (sourcePointer != endPointer);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_with_offset_000060b0",
                "param_1": "baseAddress",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "sourcePointer",
                "puVar2": "endPointer",
                "puVar3": "destinationPointer"
            },
            "calling": [
                "__submore",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "reallocate_memory_000060cc",
            "code": "\nint reallocateMemory_000060cc(undefined4 ptr,int oldPtr,uint newSize,undefined4 additionalArgs)\n\n{\n  int result;\n  uint usableSize;\n  \n  if (oldPtr != 0) {\n    if (newSize == 0) {\n      _free_r();\n      result = 0;\n    }\n    else {\n      usableSize = _malloc_usable_size_r();\n      result = oldPtr;\n      if ((usableSize < newSize) && (result = _malloc_r(ptr,newSize), result != 0)) {\n        memcpy(result,oldPtr,newSize);\n        _free_r(ptr,oldPtr);\n      }\n    }\n    return result;\n  }\n  result = _malloc_r(ptr,newSize,newSize,additionalArgs);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "reallocate_memory_000060cc",
                "param_1": "ptr",
                "param_2": "oldPtr",
                "param_3": "newSize",
                "param_4": "additionalArgs",
                "iVar1": "result",
                "uVar2": "usableSize"
            },
            "calling": [
                "__submore"
            ],
            "called": [
                "_malloc_r",
                "_free_r",
                "memcpy",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "update_param_00006192",
            "code": "\nundefined4 updateParam_00006192(undefined4 status,undefined4 *params)\n\n{\n  if ((undefined4 *)params[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)params[13] != params + 0x11) {\n      _free_r();\n    }\n    params[1] = params[16];\n    params[13] = 0;\n    if (params[16] != 0) {\n      *params = params[15];\n      return 0;\n    }\n  }\n  *params = params[4];\n  params[1] = 0;\n  *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "update_param_00006192",
                "param_1": "status",
                "param_2": "params",
                "param_2[0xd]": "params[13]",
                "param_2[1]": "params[1]",
                "param_2[0x10]": "params[16]",
                "param_2[0xf]": "params[15]",
                "param_2[4]": "params[4]"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "process_input_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint processInput_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int index;\n  uint temp;\n  byte *ptr;\n  uint temp2;\n  int **resultList;\n  undefined stackBuffer [256];\n  uint flags;\n  undefined4 base;\n  uint mask;\n  int returnValue;\n  int count;\n  undefined *buffer;\n  int type;\n  undefined *functionPtr;\n  code *refillFunction;\n  \n  returnValue = 0;\n  count = 0;\n  functionPtr = &LAB_00006118_1;\n  refillFunction = __ssrefill_r + 1;\n  resultList = param4;\n  buffer = stackBuffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      temp2 = (uint)*param3;\n      if (temp2 == 0) {\n        return returnValue;\n      }\n      temp = (byte)(&DAT_00007a99)[temp2] & 8;\n      ptr = param3 + 1;\n      if (((&DAT_00007a99)[temp2] & 8) == 0) break;\n      while (((param3 = ptr, 0 < (int)param2[1] ||\n              (index = (*refillFunction)(param1,param2), index == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        count = count + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (temp2 == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (index = (*refillFunction)(param1,param2), index != 0))\n    goto LAB_00006380;\n    if (**param2 != temp2) {\n      return returnValue;\n    }\n    *param2 = *param2 + 1;\n    count = count + 1;\n    param2[1] = param2[1] + -1;\n    param3 = ptr;\n  }\n  mask = temp;\n  flags = temp;\n  if (param3[1] == 0x2a) {\n    ptr = param3 + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    temp = (uint)*ptr;\n    if (9 < temp - 0x30) break;\n    ptr = ptr + 1;\n    mask = (mask * 10 + temp) - 0x30;\n  }\n  index = memchr(&DAT_00007c02,temp,3);\n  if (index != 0) {\n    flags = 1 << (index - 0x7c02U & 0xff) | flags;\n    ptr = ptr + 1;\n  }\n  param3 = ptr + 1;\n  temp = (uint)*ptr;\n  if (temp < 0x79) {\n    if (0x57 < temp) {\n      switch(temp) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)__sccl(stackBuffer,param3);\n        flags = flags | 0x40;\n        type = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        type = 0;\n        break;\n      case 100:\n      case 0x75:\n        base = 10;\nLAB_000063a0:\n        if (temp < 0x6f) {\n          type = 3;\n        }\n        else {\n          type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        type = 5;\n        break;\n      case 0x69:\n        base = 0;\n        type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*resultList = (short)count;\n            resultList = resultList + 1;\n          }\n          else {\n            **resultList = count;\n            resultList = resultList + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        base = 8;\n        type = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        type = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (index = (*refillFunction)(param1,param2), index != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          count = count + 1;\n          ptr = param2[1];\n          param2[1] = ptr + -1;\n          if ((int)(ptr + -1) < 1) {\n            index = (*refillFunction)(param1,param2);\n            if (index != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (type < 3) {\n        index = _scanf_chars(param1,&flags,param2,&resultList);\n      }\n      else {\n        if (4 < type) goto LAB_000061f6;\n        index = _scanf_i(param1,&flags,param2,&resultList);\n      }\n      if (index == 1) {\n        return returnValue;\n      }\n      if (index == 2) {\nLAB_00006380:\n        if (returnValue == 0) {\nLAB_00006388:\n          returnValue = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          returnValue = -1;\n        }\n        return returnValue;\n      }\n      goto LAB_000061f6;\n    }\n    ptr = param3;\n    if (temp == 0x25) goto LAB_00006352;\n    if (temp < 0x26) {\n      if (temp != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (temp - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  type = 3;\n  base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "process_input_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "uVar2": "temp",
                "pbVar3": "ptr",
                "uVar4": "temp2",
                "local_2b0": "resultList",
                "auStack_2ac": "stackBuffer",
                "local_1ac": "flags",
                "local_1a8": "base",
                "local_1a4": "mask",
                "local_1a0": "returnValue",
                "local_19c": "count",
                "local_198": "buffer",
                "local_194": "type",
                "local_30": "functionPtr",
                "local_2c": "refillFunction"
            },
            "calling": [
                "siscanf"
            ],
            "called": [
                "__ssrefill_r",
                "__sccl",
                "memchr",
                "_scanf_chars",
                "_scanf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 status,uint *data,byte **ptr_to_data,undefined4 *ptr_to_status)\n\n{\n  int result;\n  uint value;\n  byte **ptr_to_ptr_to_data;\n  byte *ptr1;\n  byte *ptr2;\n  byte *ptr3;\n  int counter;\n  \n  if (data[2] == 0) {\n    if (data[6] == 0) {\n      value = 1;\n    }\n    else {\n      value = 0xffffffff;\n    }\n    data[2] = value;\n  }\n  if (-1 < (int)(*data << 0x1b)) {\n    ptr_to_ptr_to_data = (byte **)*ptr_to_status;\n    *ptr_to_status = ptr_to_ptr_to_data + 1;\n    ptr2 = *ptr_to_ptr_to_data;\n  }\n  counter = 0;\n  do {\n    value = data[6];\n    if (value != 0) {\n      if (value == 1) {\n        if (*(char *)(data[5] + (uint)**ptr_to_data) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data & 0x10) == 0) && (data[3] = data[3] + 1, data[6] != 0)) {\n            *ptr2 = 0;\n          }\n          data[4] = counter + data[4];\n          return 0;\n        }\n      }\n      else if ((value != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**ptr_to_data] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    ptr3 = ptr2;\n    if (-1 < (int)(*data << 0x1b)) {\n      ptr3 = ptr2 + 1;\n      *ptr2 = **ptr_to_data;\n    }\n    ptr1 = ptr_to_data[1];\n    *ptr_to_data = *ptr_to_data + 1;\n    value = data[2] - 1;\n    ptr_to_data[1] = ptr1 + -1;\n    counter = counter + 1;\n    data[2] = value;\n    ptr2 = ptr3;\n    if ((value == 0) ||\n       (((int)(ptr1 + -1) < 1 &&\n        (result = (*(code *)data[0x60])(status,ptr_to_data,value,(code *)data[0x60],ptr_to_status),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "status",
                "param_2": "data",
                "param_3": "ptr_to_data",
                "param_4": "ptr_to_status",
                "iVar1": "result",
                "uVar2": "value",
                "ppbVar3": "ptr_to_ptr_to_data",
                "pbVar4": "ptr1",
                "unaff_r6": "ptr2",
                "pbVar5": "ptr3",
                "iVar6": "counter"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_input_0000656c",
            "code": "\nundefined4 process_input_0000656c(undefined4 input_param,uint *flags,byte **data,undefined4 *output)\n\n{\n  int index;\n  undefined4 result;\n  code *callback_func;\n  uint temp_var;\n  byte *temp_byte_ptr;\n  uint temp_uint;\n  undefined4 *result_ptr;\n  uint *temp_uint_ptr;\n  uint *data_ptr;\n  uint *flags_ptr;\n  int unaff_r9;\n  int loop_counter;\n  undefined *local_array [4];\n  \n  local_array[0] = &DAT_00007c2f;\n  local_array[1] = &DAT_00007c32;\n  local_array[2] = &DAT_00007c35;\n  callback_func = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    callback_func = (code *)&UNK_00005fd5;\n  }\n  temp_uint = flags[2];\n  temp_var = temp_uint - 1;\n  if (0x15c < temp_var) {\n    unaff_r9 = temp_uint - 0x15d;\n    temp_uint = 0x15d;\n  }\n  if (0x15c < temp_var) {\n    flags[2] = temp_uint;\n  }\n  flags_ptr = flags + 7;\n  if (temp_var < 0x15d) {\n    unaff_r9 = 0;\n  }\n  *flags = *flags | 0xd00;\n  loop_counter = 0;\n  data_ptr = flags_ptr;\n  do {\n    index = memchr(local_array[loop_counter],**data,2);\n    if (index != 0) {\n      if (loop_counter == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        temp_var = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = temp_var;\n      }\n      else if (loop_counter == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        temp_var = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      temp_var = flags[2];\n      flags[2] = temp_var - 1;\n      if (temp_var != 0) {\n        temp_byte_ptr = *data;\n        *data = temp_byte_ptr + 1;\n        temp_uint_ptr = (uint *)((int)data_ptr + 1);\n        *(byte *)data_ptr = *temp_byte_ptr;\n        temp_byte_ptr = data[1];\n        data[1] = temp_byte_ptr + -1;\n        data_ptr = temp_uint_ptr;\n        if (((int)(temp_byte_ptr + -1) < 1) &&\n           (index = (*(code *)flags[0x60])(input_param,data), index != 0)) {\n          loop_counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loop_counter = loop_counter + 1;\n  } while (loop_counter != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  __sccl(flags[5],\"01234567]\" + (8 - flags[1]));\n  loop_counter = 0;\n  while( true ) {\n    temp_uint_ptr = data_ptr;\n    if (flags[2] == 0) break;\n    temp_byte_ptr = *data;\n    temp_var = (uint)*temp_byte_ptr;\n    if (*(char *)(flags[5] + temp_var) == '\\0') break;\n    if ((temp_var == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      loop_counter = loop_counter + 1;\n      if (unaff_r9 != 0) {\n        unaff_r9 = unaff_r9 + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      temp_uint_ptr = (uint *)((int)data_ptr + 1);\n      *(byte *)data_ptr = *temp_byte_ptr;\n    }\n    temp_byte_ptr = data[1];\n    data[1] = temp_byte_ptr + -1;\n    if ((int)(temp_byte_ptr + -1) < 1) {\n      index = (*(code *)flags[0x60])(input_param,data);\n      if (index != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    flags[2] = flags[2] - 1;\n    data_ptr = temp_uint_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (flags_ptr < temp_uint_ptr) {\n      (*(code *)flags[0x5f])(input_param,*(byte *)((int)temp_uint_ptr + -1),data);\n      temp_uint_ptr = (uint *)((int)temp_uint_ptr + -1);\n    }\n    if (temp_uint_ptr == flags_ptr) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)temp_uint_ptr = 0;\n    result = (*callback_func)(input_param,flags_ptr,0,flags[1]);\n    result_ptr = (undefined4 *)*output;\n    temp_var = *flags;\n    *output = result_ptr + 1;\n    result_ptr = (undefined4 *)*result_ptr;\n    if ((temp_var & 0x20) == 0) {\n      if ((int)(temp_var << 0x1f) < 0) {\n        *(short *)result_ptr = (short)result;\n      }\n      else {\n        *result_ptr = result;\n      }\n    }\n    else {\n      *result_ptr = result;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)temp_uint_ptr + flags[4] + (loop_counter - (int)flags_ptr));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_input_0000656c",
                "param_1": "input_param",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "index",
                "uVar2": "result",
                "pcVar3": "callback_func",
                "uVar4": "temp_var",
                "pbVar5": "temp_byte_ptr",
                "uVar6": "temp_uint",
                "puVar7": "result_ptr",
                "puVar8": "temp_uint_ptr",
                "puVar9": "data_ptr",
                "puVar10": "flags_ptr",
                "iVar11": "loop_counter",
                "local_34": "local_array"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "__sccl",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *outputBuffer,undefined4 *inputBuffer,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  ushort flags;\n  uint shiftedValue;\n  \n  if ((outputBuffer != (undefined4 *)0x0) && (outputBuffer[6] == 0)) {\n    initializeStream();\n  }\n  if (inputBuffer == &DAT_000079b8) {\n    inputBuffer = (undefined4 *)outputBuffer[1];\n  }\n  else if (inputBuffer == (undefined4 *)&DAT_000079d8) {\n    inputBuffer = (undefined4 *)outputBuffer[2];\n  }\n  else if (inputBuffer == (undefined4 *)&DAT_00007998) {\n    inputBuffer = (undefined4 *)outputBuffer[3];\n  }\n  flags = *(ushort *)(inputBuffer + 3);\n  inputBuffer[1] = 0;\n  shiftedValue = (uint)*(ushort *)(inputBuffer + 3);\n  if ((int)(shiftedValue << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(shiftedValue << 0x1d) < 0) {\n    if ((undefined4 *)inputBuffer[13] != (undefined4 *)0x0) {\n      if ((undefined4 *)inputBuffer[13] != inputBuffer + 0x11) {\n        freeMemory(outputBuffer);\n      }\n      inputBuffer[1] = inputBuffer[16];\n      inputBuffer[13] = 0;\n      if (inputBuffer[16] != 0) {\n        *inputBuffer = inputBuffer[15];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(shiftedValue << 0x1b)) {\n      *outputBuffer = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(shiftedValue << 0x1c) < 0) {\n      tempVar2 = flushStream(outputBuffer,inputBuffer,shiftedValue << 0x1c,shiftedValue,value2);\n      if (tempVar2 != 0) {\n        return 0xffffffff;\n      }\n      inputBuffer[2] = 0;\n      *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) & 0xfff7;\n      inputBuffer[6] = 0;\n    }\n    *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) | 4;\n  }\n  if (inputBuffer[4] == 0) {\n    makeBuffer(outputBuffer,inputBuffer);\n  }\n  flags = *(ushort *)(inputBuffer + 3);\n  tempVar1 = *(undefined2 *)(inputBuffer + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(inputBuffer + 3) = 1;\n    walkFunction(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(inputBuffer + 3) = tempVar1;\n    if ((flags & 9) == 9) {\n      flushStream(outputBuffer,inputBuffer);\n    }\n  }\n  tempVar3 = inputBuffer[4];\n  *inputBuffer = tempVar3;\n  tempVar2 = (*(code *)inputBuffer[9])(outputBuffer,inputBuffer[8],tempVar3,inputBuffer[5]);\n  inputBuffer[1] = tempVar2;\n  if (0 < tempVar2) {\n    return 0;\n  }\n  flags = *(ushort *)(inputBuffer + 3);\n  if (tempVar2 != 0) {\n    tempVar3 = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (tempVar2 != 0) {\n    inputBuffer[1] = tempVar3;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(inputBuffer + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "outputBuffer",
                "param_2": "inputBuffer",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "flags",
                "uVar5": "shiftedValue",
                "__sinit": "initializeStream",
                "_free_r": "freeMemory",
                "param_2[0xd]": "inputBuffer[13]",
                "param_2[0x10]": "inputBuffer[16]",
                "param_2[0xf]": "inputBuffer[15]",
                "param_1[6]": "outputBuffer[6]",
                "_fflush_r": "flushStream",
                "param_2[2]": "inputBuffer[2]",
                "param_2[6]": "inputBuffer[6]",
                "__smakebuf_r": "makeBuffer",
                "_fwalk": "walkFunction",
                "__sflush_r": "flushStream",
                "param_2[4]": "inputBuffer[4]",
                "param_2[1]": "inputBuffer[1]",
                "param_2[8]": "inputBuffer[8]",
                "param_2[5]": "inputBuffer[5]"
            },
            "calling": [
                "__srget_r"
            ],
            "called": [
                "_fflush_r",
                "_fwalk",
                "__smakebuf_r",
                "_free_r",
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_bytes_0000687c",
            "code": "\nbyte * extract_bytes_0000687c(int length,byte *data)\n\n{\n  byte *result;\n  uint temp1;\n  int temp2;\n  uint first_byte;\n  uint index;\n  uint offset;\n  bool is_caret;\n  \n  first_byte = (uint)*data;\n  is_caret = first_byte == 0x5e;\n  if (is_caret) {\n    first_byte = (uint)data[1];\n    data = data + 2;\n  }\n  else {\n    data = data + 1;\n  }\n  temp2 = length + -1;\n  do {\n    temp2 = temp2 + 1;\n    *(bool *)temp2 = is_caret;\n  } while (temp2 != length + 0xff);\n  if (first_byte == 0) {\n    result = data + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      index = first_byte;\n      *(bool *)(length + index) = !is_caret;\n      data = data + 1;\n      while( true ) {\n        first_byte = (uint)data[-1];\n        if (first_byte != 0x2d) break;\n        offset = (uint)*data;\n        if ((offset == 0x5d) || (temp1 = index, (int)offset < (int)index)) goto LAB_000068aa;\n        do {\n          temp1 = temp1 + 1;\n          *(bool *)(length + temp1) = !is_caret;\n        } while ((int)temp1 < (int)offset);\n        temp2 = ~index + offset;\n        if ((int)offset <= (int)index) {\n          temp2 = 0;\n        }\n        index = index + 1 + temp2;\n        data = data + 2;\n      }\n      result = data;\n    } while ((first_byte != 0x5d) && (result = data + -1, first_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_bytes_0000687c",
                "param_1": "length",
                "param_2": "data",
                "pbVar1": "result",
                "uVar2": "temp1",
                "iVar3": "temp2",
                "uVar4": "first_byte",
                "uVar5": "index",
                "uVar6": "offset",
                "bVar7": "is_caret"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "initialize_memory_block_000068f0",
            "code": "\nundefined4 initializeMemoryBlock_000068f0(undefined4 memSize,int *memoryBlock)\n\n{\n  int newBlock;\n  int currentSize;\n  \n  if ((int *)memoryBlock[0xd] == memoryBlock + 0x11) {\n    newBlock = _malloc_r(memSize,0x400);\n    if (newBlock != 0) {\n      memoryBlock[0xe] = 0x400;\n      memoryBlock[0xd] = newBlock;\n      *(undefined *)(newBlock + 0x3ff) = *(undefined *)((int)memoryBlock + 0x46);\n      *(undefined *)(newBlock + 0x3fe) = *(undefined *)((int)memoryBlock + 0x45);\n      *(undefined *)(newBlock + 0x3fd) = *(undefined *)(memoryBlock + 0x11);\n      *memoryBlock = newBlock + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    currentSize = memoryBlock[0xe];\n    newBlock = _realloc_r(memSize,(int *)memoryBlock[0xd],currentSize << 1);\n    if (newBlock != 0) {\n      memcpy(newBlock + currentSize,newBlock,currentSize);\n      memoryBlock[0xd] = newBlock;\n      memoryBlock[0xe] = currentSize << 1;\n      *memoryBlock = newBlock + currentSize;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "initialize_memory_block_000068f0",
                "param_1": "memSize",
                "param_2": "memoryBlock",
                "iVar1": "newBlock",
                "iVar2": "currentSize"
            },
            "calling": [],
            "called": [
                "_malloc_r",
                "memcpy",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 initialValue,int arrayPointer)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(arrayPointer + -4) + -4;\n  if (*(int *)(arrayPointer + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(arrayPointer + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "initialValue",
                "param_2": "arrayPointer",
                "iVar1": "currentIndex"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "divmod_with_constraints_00006974",
            "code": "\nundefined8 divmod_with_constraints_00006974(int dividend,int divisor,int constraint_1,int constraint_2)\n\n{\n  int neg_divisor;\n  undefined8 result;\n  undefined buffer [8];\n  \n  if ((constraint_2 == 0) && (constraint_1 == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  if (divisor < 0) {\n    neg_divisor = -divisor - (uint)(dividend != 0);\n    if (constraint_2 < 0) {\n      result = __udivmoddi4(-dividend,neg_divisor,-constraint_1,-constraint_2 - (uint)(constraint_1 != 0),buffer);\n      return result;\n    }\n    result = __udivmoddi4(-dividend,neg_divisor,constraint_1,constraint_2,buffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (constraint_2 < 0) {\n    result = __udivmoddi4(dividend,divisor,-constraint_1,-constraint_2 - (uint)(constraint_1 != 0),buffer);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = __udivmoddi4();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "divmod_with_constraints_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "constraint_1",
                "param_4": "constraint_2",
                "iVar1": "neg_divisor",
                "uVar2": "result",
                "local_8": "buffer"
            },
            "calling": [
                "gmtime_r"
            ],
            "called": [
                "__udivmoddi4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "calculate_division_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong calculateDivision_00006a14(uint dividend,uint dividend_lower,uint divisor,uint divisor_lower,uint *quotient)\n\n{\n  code *recovery_jumptable;\n  uint quotient_upper;\n  int leading_zeros;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool carry_flag;\n  ulonglong result;\n  \n  if (divisor_lower == 0) {\n    if (dividend_lower < divisor) {\n      leading_zeros = LZCOUNT(divisor);\n      temp3 = divisor;\n      if (leading_zeros != 0) {\n        temp3 = divisor << leading_zeros;\n        dividend_lower = dividend >> (0x20U - leading_zeros & 0xff) | dividend_lower << leading_zeros;\n        dividend = dividend << leading_zeros;\n      }\n      temp4 = temp3 >> 0x10;\n      temp6 = dividend_lower / temp4;\n      temp1 = dividend >> 0x10 | (dividend_lower - temp4 * temp6) * 0x10000;\n      quotient_upper = temp6 * (temp3 & 0xffff);\n      temp2 = temp6;\n      if (temp1 <= quotient_upper && quotient_upper - temp1 != 0) {\n        carry_flag = CARRY4(temp3,temp1);\n        temp1 = temp3 + temp1;\n        temp2 = temp6 - 1;\n        if ((carry_flag == false) && (temp1 <= quotient_upper && quotient_upper - temp1 != 0)) {\n          temp2 = temp6 - 2;\n          temp1 = temp1 + temp3;\n        }\n      }\n      temp6 = (temp1 - quotient_upper) / temp4;\n      temp4 = dividend & 0xffff | ((temp1 - quotient_upper) - temp4 * temp6) * 0x10000;\n      temp1 = temp6 * (temp3 & 0xffff);\n      quotient_upper = temp6;\n      if (temp4 <= temp1 && temp1 - temp4 != 0) {\n        carry_flag = CARRY4(temp3,temp4);\n        temp4 = temp3 + temp4;\n        quotient_upper = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp1 && temp1 - temp4 != 0)) {\n          quotient_upper = temp6 - 2;\n          temp4 = temp4 + temp3;\n        }\n      }\n      temp4 = temp4 - temp1;\n      quotient_upper = quotient_upper | temp2 << 0x10;\n      temp3 = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        recovery_jumptable = (code *)software_udf(0xff,0x6abc);\n        result = (*recovery_jumptable)();\n        return result;\n      }\n      leading_zeros = LZCOUNT(divisor);\n      if (leading_zeros == 0) {\n        dividend_lower = dividend_lower - divisor;\n        temp7 = divisor >> 0x10;\n        temp5 = divisor & 0xffff;\n        temp3 = 1;\n        temp2 = divisor;\n      }\n      else {\n        temp2 = divisor << leading_zeros;\n        temp7 = temp2 >> 0x10;\n        quotient_upper = dividend_lower >> (0x20U - leading_zeros & 0xff);\n        temp3 = dividend >> (0x20U - leading_zeros & 0xff) | dividend_lower << leading_zeros;\n        temp1 = quotient_upper / temp7;\n        temp5 = temp2 & 0xffff;\n        temp6 = temp3 >> 0x10 | (quotient_upper - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        dividend = dividend << leading_zeros;\n        quotient_upper = temp1;\n        if (temp6 <= temp4 && temp4 - temp6 != 0) {\n          carry_flag = CARRY4(temp2,temp6);\n          temp6 = temp2 + temp6;\n          quotient_upper = temp1 - 1;\n          if ((carry_flag == false) && (temp6 <= temp4 && temp4 - temp6 != 0)) {\n            quotient_upper = temp1 - 2;\n            temp6 = temp6 + temp2;\n          }\n        }\n        temp1 = (temp6 - temp4) / temp7;\n        dividend_lower = temp3 & 0xffff | ((temp6 - temp4) - temp7 * temp1) * 0x10000;\n        temp4 = temp1 * temp5;\n        temp3 = temp1;\n        if (dividend_lower <= temp4 && temp4 - dividend_lower != 0) {\n          carry_flag = CARRY4(temp2,dividend_lower);\n          dividend_lower = temp2 + dividend_lower;\n          temp3 = temp1 - 1;\n          if ((carry_flag == false) && (dividend_lower <= temp4 && temp4 - dividend_lower != 0)) {\n            temp3 = temp1 - 2;\n            dividend_lower = dividend_lower + temp2;\n          }\n        }\n        dividend_lower = dividend_lower - temp4;\n        temp3 = temp3 | quotient_upper << 0x10;\n      }\n      temp6 = dividend_lower / temp7;\n      temp4 = dividend >> 0x10 | (dividend_lower - temp7 * temp6) * 0x10000;\n      quotient_upper = temp5 * temp6;\n      temp1 = temp6;\n      if (temp4 <= quotient_upper && quotient_upper - temp4 != 0) {\n        carry_flag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        temp1 = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= quotient_upper && quotient_upper - temp4 != 0)) {\n          temp1 = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp6 = (temp4 - quotient_upper) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - quotient_upper) - temp7 * temp6) * 0x10000;\n      temp5 = temp5 * temp6;\n      quotient_upper = temp6;\n      if (temp4 <= temp5 && temp5 - temp4 != 0) {\n        carry_flag = CARRY4(temp2,temp4);\n        temp4 = temp2 + temp4;\n        quotient_upper = temp6 - 1;\n        if ((carry_flag == false) && (temp4 <= temp5 && temp5 - temp4 != 0)) {\n          quotient_upper = temp6 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp4 = temp4 - temp5;\n      quotient_upper = quotient_upper | temp1 << 0x10;\n    }\n    if (quotient != (uint *)0x0) {\n      *quotient = temp4 >> LZCOUNT(divisor);\n      quotient[1] = 0;\n    }\n  }\n  else if (dividend_lower < divisor_lower) {\n    if (quotient != (uint *)0x0) {\n      *quotient = dividend;\n      quotient[1] = dividend_lower;\n      return 0;\n    }\n    quotient_upper = 0;\n    temp3 = 0;\n  }\n  else {\n    leading_zeros = LZCOUNT(divisor_lower);\n    if (leading_zeros != 0) {\n      temp5 = 0x20 - leading_zeros;\n      temp1 = divisor >> (temp5 & 0xff) | divisor_lower << leading_zeros;\n      temp7 = temp1 >> 0x10;\n      quotient_upper = dividend_lower >> (temp5 & 0xff);\n      temp3 = dividend >> (temp5 & 0xff) | dividend_lower << leading_zeros;\n      temp4 = quotient_upper / temp7;\n      temp2 = temp3 >> 0x10 | (quotient_upper - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      dividend = dividend << leading_zeros;\n      quotient_upper = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient_upper = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          quotient_upper = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp4 = (temp2 - temp6) / temp7;\n      temp2 = temp3 & 0xffff | ((temp2 - temp6) - temp7 * temp4) * 0x10000;\n      temp6 = temp4 * (temp1 & 0xffff);\n      temp3 = temp4;\n      if (temp2 <= temp6 && temp6 - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        temp3 = temp4 - 1;\n        if ((carry_flag == false) && (temp2 <= temp6 && temp6 - temp2 != 0)) {\n          temp3 = temp4 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp3 = temp3 | quotient_upper << 0x10;\n      result = (ulonglong)temp3 * (ulonglong)(divisor << leading_zeros);\n      if (CONCAT44(temp2 - temp6,dividend) < result) {\n        result = result - CONCAT44(temp1,divisor << leading_zeros);\n        temp3 = temp3 - 1;\n      }\n      if (quotient != (uint *)0x0) {\n        quotient_upper = ((temp2 - temp6) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient = quotient_upper << (temp5 & 0xff) | dividend - (uint)result >> leading_zeros;\n        quotient[1] = quotient_upper >> leading_zeros;\n      }\n      return (ulonglong)temp3;\n    }\n    if ((divisor_lower < dividend_lower) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_lower = (dividend_lower - divisor_lower) - (uint)carry_flag;\n      quotient_upper = 1;\n    }\n    else {\n      quotient_upper = 0;\n    }\n    temp3 = 0;\n    if (quotient != (uint *)0x0) {\n      *quotient = dividend;\n      quotient[1] = dividend_lower;\n    }\n  }\n  return CONCAT44(temp3,quotient_upper);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "calculate_division_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_lower",
                "param_3": "divisor",
                "param_4": "divisor_lower",
                "param_5": "quotient",
                "UNRECOVERED_JUMPTABLE": "recovery_jumptable",
                "uVar1": "quotient_upper",
                "iVar2": "leading_zeros",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "uVar9": "temp7",
                "bVar10": "carry_flag",
                "uVar11": "result"
            },
            "calling": [
                "__aeabi_ldivmod"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 132906,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_0000099c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001448",
            "FUN_000015d0",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ],
        [
            "FUN_00000d76",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_00001628",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00002028",
            "FUN_0000258c"
        ],
        [
            "FUN_000013b8",
            "FUN_000017dc"
        ]
    ],
    "locked_functions": []
}