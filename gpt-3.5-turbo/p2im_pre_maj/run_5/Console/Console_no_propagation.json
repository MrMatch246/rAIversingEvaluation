{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_system_00000410",
            "code": "\nvoid initialize_system_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_system_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "verify_and_adjust_offset_00000428",
            "code": "\ndword verifyAndAdjustOffset_00000428(undefined4 *resultPtr,int offset)\n\n{\n  undefined4 returnValue;\n  dword adjustedOffset;\n  \n  returnValue = FUN_00000cd0();\n  adjustedOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *resultPtr = 0xc;\n    adjustedOffset = 0xffffffff;\n  }\n  FUN_00000d0c(returnValue);\n  return adjustedOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "verify_and_adjust_offset_00000428",
                "param_1": "resultPtr",
                "param_2": "offset",
                "uVar1": "returnValue",
                "local_c": "adjustedOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "call_fun_00000490",
            "code": "\nundefined4 callFun_00000490(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(arg3,arg4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "call_fun_00000490",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_variable_000004f2",
            "code": "\nundefined4 initializeVariable_000004f2(undefined4 *outputPtr)\n\n{\n  *outputPtr = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_variable_000004f2",
                "param_1": "outputPtr"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "set_value_and_return_00000514",
            "code": "\nundefined4 set_value_and_return_00000514(undefined4 *value_ptr)\n\n{\n  *value_ptr = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "set_value_and_return_00000514",
                "param_1": "value_ptr"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_param_validity_00000534",
            "code": "\nundefined4 checkParamValidity_00000534(undefined4 *result,int inputParam)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((inputParam == 0) || (inputParam == 1)) || (inputParam == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_param_validity_00000534",
                "param_1": "result",
                "param_2": "inputParam",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "reverse_bits_00000566",
            "code": "\nint reverse_bits_00000566(int input)\n\n{\n  byte bit7;\n  byte bit0;\n  byte bit8;\n  byte bit16;\n  int result;\n  \n  bit0 = (byte)input;\n  bit8 = (byte)((uint)input >> 8);\n  bit16 = (byte)((uint)input >> 0x10);\n  bit7 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((bit0 & 1) << 1 | bit0 >> 1 & 1) << 1 | bit0 >> 2 & 1) << 1\n                                  | bit0 >> 3 & 1) << 1 | bit0 >> 4 & 1) << 1 | bit0 >> 5 & 1) <<\n                                1 | bit0 >> 6 & 1) << 1 | bit0 >> 7) << 0x18 |\n                  (uint)(byte)((((((((bit8 & 1) << 1 | bit8 >> 1 & 1) << 1 | bit8 >> 2 & 1) << 1\n                                  | bit8 >> 3 & 1) << 1 | bit8 >> 4 & 1) << 1 | bit8 >> 5 & 1) <<\n                                1 | bit8 >> 6 & 1) << 1 | bit8 >> 7) << 0x10 |\n                  (uint)(byte)((((((((bit16 & 1) << 1 | bit16 >> 1 & 1) << 1 | bit16 >> 2 & 1) << 1\n                                  | bit16 >> 3 & 1) << 1 | bit16 >> 4 & 1) << 1 | bit16 >> 5 & 1) <<\n                                1 | bit16 >> 6 & 1) << 1 | bit16 >> 7) << 8 |\n                  (uint)(byte)((((((((bit7 & 1) << 1 | bit7 >> 1 & 1) << 1 | bit7 >> 2 & 1) << 1\n                                  | bit7 >> 3 & 1) << 1 | bit7 >> 4 & 1) << 1 | bit7 >> 5 & 1) <<\n                                1 | bit7 >> 6 & 1) << 1 | bit7 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "reverse_bits_00000566",
                "param_1": "input",
                "bVar1": "bit7",
                "bVar2": "bit0",
                "bVar3": "bit8",
                "bVar4": "bit16",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *ptr1,undefined4 *ptr2)\n\n{\n  if (*ptr1 == 0) {\n    *ptr2 = ptr2;\n  }\n  else {\n    *ptr2 = *(undefined4 *)*ptr1;\n    *(undefined4 **)*ptr1 = ptr2;\n  }\n  *ptr1 = (int)ptr2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "(int)param_2": "(int)ptr2"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_and_reset_value_000005ca",
            "code": "\nundefined4 * extractAndResetValue_000005ca(int *arrayPtr)\n\n{\n  undefined4 *extractedValue;\n  \n  if (*arrayPtr == 0) {\n    extractedValue = (undefined4 *)0x0;\n  }\n  else {\n    extractedValue = *(undefined4 **)*arrayPtr;\n    if (extractedValue == (undefined4 *)*arrayPtr) {\n      *arrayPtr = 0;\n    }\n    else {\n      *(undefined4 *)*arrayPtr = *extractedValue;\n    }\n  }\n  return extractedValue;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_and_reset_value_000005ca",
                "param_1": "arrayPtr",
                "puVar1": "extractedValue"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "verify_data_integrity_00000610",
            "code": "\nundefined4 verifyDataIntegrity_00000610(void)\n\n{\n  int originalValue;\n  int index;\n  undefined4 success;\n  \n  originalValue = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = FUN_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (originalValue == index + -8) {\n    success = 0;\n  }\n  else {\n    if ((originalValue != 0) && (*(char *)(originalValue + 4) == '\\t')) {\n      *(undefined *)(originalValue + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    success = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return success;\n}\n\n",
            "renaming": {
                "FUN_00000610": "verify_data_integrity_00000610",
                "iVar1": "originalValue",
                "iVar2": "index",
                "uVar3": "success"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_parameter_00000698",
            "code": "\nvoid updateParameter_00000698(int input,uint new_value)\n\n{\n  if (new_value < 9) {\n    if ((8 < *(byte *)(input + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(byte *)(input + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(input + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(input + 5));\n    }\n  }\n  else if (*(byte *)(input + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(byte *)(input + 5) * 4,input + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(input + 5);\n  }\n  *(char *)(input + 4) = (char)new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_parameter_00000698",
                "param_1": "input",
                "param_2": "new_value"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_execute_00000738",
            "code": "\nvoid checkAndExecute_00000738(ushort inputValue)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_execute_00000738",
                "param_1": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_data_00000794",
            "code": "\nint * initializeData_00000794(void)\n\n{\n  int output;\n  int index;\n  undefined4 *ptr;\n  uint alignedPtr;\n  int counter1;\n  int counter2;\n  int *pointer;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  ptr = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  alignedPtr = (int)ptr + index & 0xfffffffc;\n  pointer = (int *)(alignedPtr - 4);\n  *pointer = 0x77777777;\n  if (((uint)pointer & 7) != 0) {\n    pointer = (int *)(alignedPtr - 8);\n    *pointer = 0x88888888;\n  }\n  pointer[-1] = 0x1000000;\n  pointer[-2] = index << 0xd;\n  pointer[-3] = 0x795;\n  pointer = pointer + -4;\n  *pointer = 0;\n  for (counter2 = 3; 0 < counter2; counter2 = counter2 + -1) {\n    pointer = pointer + -1;\n    *pointer = counter2;\n  }\n  pointer = pointer + -1;\n  *pointer = output;\n  for (counter1 = 0xb; 3 < counter1; counter1 = counter1 + -1) {\n    pointer = pointer + -1;\n    *pointer = counter1;\n  }\n  pointer[-1] = -3;\n  return pointer + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_data_00000794",
                "extraout_r1": "output",
                "iVar1": "index",
                "puVar2": "ptr",
                "uVar3": "alignedPtr",
                "iStack_1c": "counter1",
                "iStack_18": "counter2",
                "piStack_14": "pointer"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint adjustedSize;\n  int count;\n  int i;\n  int *ptr;\n  \n  adjustedSize = param4 + param3 & 0xfffffffc;\n  ptr = (int *)(adjustedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(adjustedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = param1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (i = 3; 0 < i; i = i + -1) {\n    ptr = ptr + -1;\n    *ptr = i;\n  }\n  ptr = ptr + -1;\n  *ptr = param2;\n  for (count = 0xb; 3 < count; count = count + -1) {\n    ptr = ptr + -1;\n    *ptr = count;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "local_14": "count",
                "local_10": "i",
                "local_c": "ptr",
                "uVar1": "adjustedSize"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "calculate_offset_000008b8",
            "code": "\nint calculate_offset_000008b8(void)\n\n{\n  RelocationEntry *rel_ptr;\n  \n  for (rel_ptr = (RelocationEntry *)&DAT_1fff0000;\n      (rel_ptr->r_offset == 0xe7fee7fe && (rel_ptr < REL_ARRAY_END));\n      rel_ptr = (RelocationEntry *)&rel_ptr->r_info) {\n  }\n  return ((int)REL_ARRAY_END - (int)rel_ptr >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "calculate_offset_000008b8",
                "local_c": "rel_ptr",
                "Elf32_Rel": "RelocationEntry",
                "Elf32_Rel_ARRAY_1fff0200": "REL_ARRAY_END"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 main_stack_pointer;\n  \n  main_stack_pointer = getMainStackPointer();\n  return main_stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "main_stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_base_address_0000091c",
            "code": "\nundefined4 getMemoryBaseAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_base_address_0000091c"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "start_infinite_loop_00000930",
            "code": "\nvoid startInfiniteLoop_00000930(void)\n\n{\n  FUN_00000cf0();\n  software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "start_infinite_loop_00000930"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_flag_for_dma_0000093c",
            "code": "\n\n\nvoid setFlagForDMA_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_flag_for_dma_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_adjusted_stack_pointer_00000a30",
            "code": "\nundefined * getAdjustedStackPointer_00000a30(void)\n\n{\n  int sourceOffset;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return basePointer + -*(int *)(sourceOffset + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_adjusted_stack_pointer_00000a30",
                "in_r3": "sourceOffset",
                "&stack0xe000ffe0": "basePointer"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_ir_qinterrupts_and_return_status_00000cc0",
            "code": "\nundefined4 disableIRQinterruptsAndReturnStatus_00000cc0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabledStatus;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  interruptsEnabledStatus = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    interruptsEnabledStatus = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabledStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_ir_qinterrupts_and_return_status_00000cc0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "interruptsEnabledStatus"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_and_disable_irq_interrupts_00000cd0",
            "code": "\nundefined4 checkAndDisableIRQInterrupts_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_and_disable_irq_interrupts_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_status_00000cf0",
            "code": "\nundefined4 checkIRQinterruptsStatus_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_status_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_irq_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableIRQInterruptsIfPrivileged_00000d0c(uint interruptFlags)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    enableInterrupts((interruptFlags & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_irq_interrupts_if_privileged_00000d0c",
                "param_1": "interruptFlags",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isModePrivileged;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isModePrivileged = (bool)isCurrentModePrivileged();\n  if (isModePrivileged) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isModePrivileged",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_result_00000d44",
            "code": "\nint calculateResult_00000d44(uint value1,int value2)\n\n{\n  return value2 * 4 + (value1 & 0xf0000000 | (value1 & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_result_00000d44",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_memory_00000d76",
            "code": "\nvoid clearMemory_00000d76(undefined4 inputPointer,undefined inputValue)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00000d44(inputPointer,inputValue);\n  *resultPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_memory_00000d76",
                "param_1": "inputPointer",
                "param_2": "inputValue",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_peripheral_00000d9c",
            "code": "\nvoid initializePeripheral_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_peripheral_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_00000db0",
            "code": "\nvoid initialize_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_00000dc0",
            "code": "\nvoid initialize_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_hardware_00000df4",
            "code": "\nvoid initializeHardware_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_hardware_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "process_data_00000e14",
            "code": "\nundefined4 processData_00000e14(undefined4 input,undefined4 output)\n\n{\n  undefined4 result;\n  \n  result = FUN_000012e2(0x1fff0204,input,output);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "process_data_00000e14",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "execute_function_and_return_result_00000e38",
            "code": "\nundefined4 executeFunctionAndReturnResult_00000e38(undefined4 inputParam,undefined4 outputParam)\n\n{\n  FUN_000015d0(0,inputParam,outputParam);\n  return outputParam;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "execute_function_and_return_result_00000e38",
                "param_1": "inputParam",
                "param_2": "outputParam"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "loop_forever_00000e58",
            "code": "\nvoid loopForever_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "loop_forever_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_hardware_00000e64",
            "code": "\n\n\nvoid initializeHardware_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_hardware_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 returnAddress;\n  \n  FUN_00004c84(&DAT_00006f58,returnAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "returnAddress"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicType,undefined4 panicMessage)\n\n{\n  undefined4 stackVar;\n  code *jumpTableFunc;\n  undefined4 panicMessage;\n  char panicType;\n  \n  panicMessage = panicMessage;\n  panicType = panicType;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicType == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",panicMessage);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jumpTableFunc = (code *)0xf4d;\n  FUN_00000e58();\n  stackVar = (int)&stackVar + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunc)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicType",
                "param_2": "panicMessage",
                "uStack_18": "stackVar",
                "UNRECOVERED_JUMPTABLE": "jumpTableFunc",
                "local_10": "panicMessage",
                "local_9": "panicType"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_widget_00000f8c",
            "code": "\nvoid initializeWidget_00000f8c(void)\n\n{\n  uint shiftedResult;\n  undefined4 *resultPointer;\n  uint loopCounter;\n  int shiftedValue;\n  int *valuePointer;\n  undefined4 initialValue;\n  undefined4 constant1;\n  undefined4 constant2;\n  dword constant3;\n  \n  FUN_00000cd0();\n  constant3 = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  constant2 = 0;\n  constant1 = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  constant3 = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  constant2 = 0;\n  constant1 = 0xf5d;\n  loopCounter = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  initialValue = 0xfd3;\n  shiftedResult = FUN_00000930();\n  shiftedResult = shiftedResult >> 0x1e;\n  resultPointer = (undefined4 *)(loopCounter * 0x100);\n  shiftedValue = (loopCounter >> 0x1d) << 0x11;\n  valuePointer = &shiftedValue;\n  if ((shiftedResult & shiftedResult - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *resultPointer = 0;\n  resultPointer[1] = 0;\n  resultPointer[2] = shiftedResult - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_widget_00000f8c",
                "uVar1": "shiftedResult",
                "puVar2": "resultPointer",
                "uVar3": "loopCounter",
                "iStack_24": "shiftedValue",
                "piStack_20": "valuePointer",
                "uStack_1c": "initialValue",
                "local_18": "constant1",
                "local_14": "constant2",
                "local_10": "constant3"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_param_00000fec",
            "code": "\nvoid initializeParam_00000fec(undefined4 *output,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *output = 0;\n  output[1] = 0;\n  output[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_param_00000fec",
                "param_1": "output",
                "param_2": "size"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_closest_ptr_00001034",
            "code": "\nvoid findClosestPtr_00001034(int **listOfPointers,int targetIndex)\n\n{\n  int **currentPtr;\n  \n  if (8 < *(byte *)(targetIndex + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPtr = listOfPointers;\n      (*currentPtr != (int *)0x0 && (*(byte *)((int)*currentPtr + -3) <= *(byte *)(targetIndex + 5)));\n      currentPtr = (int **)*currentPtr) {\n  }\n  *(int **)(targetIndex + 8) = *currentPtr;\n  *currentPtr = (int *)(int **)(targetIndex + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_closest_ptr_00001034",
                "param_1": "listOfPointers",
                "param_2": "targetIndex",
                "local_1c": "currentPtr"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "count_array_elements_000010a0",
            "code": "\nint count_array_elements_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "count_array_elements_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_data_structure_000010d4",
            "code": "\nint initializeDataStructure_000010d4(uint inputLength,int inputOffset,byte dataSize,uint flag,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result;\n  undefined4 tempResult;\n  int returnValue;\n  uint paddingSize;\n  undefined4 *dataPointer;\n  int adjustedOffset;\n  uint adjustedPointer;\n  uint loopIndex;\n  short firstAvailableIndex;\n  short availableIndex;\n  \n  if (dataSize < 0x10) {\n    adjustedOffset = inputOffset;\n    adjustedPointer = inputLength;\n    if ((inputLength & 3) != 0) {\n      adjustedOffset = 4 - (inputLength & 3);\n      adjustedPointer = adjustedOffset + inputLength;\n      adjustedOffset = inputOffset - adjustedOffset;\n    }\n    paddingSize = adjustedOffset - 0x30U & 0xfffffffc;\n    dataPointer = (undefined4 *)(paddingSize + adjustedPointer);\n    if ((flag & 8) == 0) {\n      *(uint *)adjustedPointer = adjustedPointer;\n    }\n    else {\n      for (loopIndex = adjustedPointer; loopIndex < paddingSize + adjustedPointer; loopIndex = loopIndex + 4) {\n        *(uint *)loopIndex = loopIndex;\n      }\n    }\n    result = FUN_00000cd0();\n    availableIndex = 0;\n    for (firstAvailableIndex = 1; firstAvailableIndex < 0x21; firstAvailableIndex = firstAvailableIndex + 1) {\n      if (*(int *)(&DAT_1fff0358 + firstAvailableIndex * 4) == 0) {\n        availableIndex = firstAvailableIndex;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      FUN_00000d0c(result);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = dataPointer;\n      *(short *)((int)dataPointer + 6) = availableIndex;\n      tempResult = FUN_000007dc(param5,param6,adjustedPointer,paddingSize);\n      *dataPointer = tempResult;\n      dataPointer[9] = adjustedPointer;\n      dataPointer[0xb] = inputOffset;\n      dataPointer[10] = param7;\n      *(byte *)((int)dataPointer + 5) = dataSize;\n      *(undefined *)(dataPointer + 1) = 0;\n      dataPointer[2] = 0;\n      dataPointer[3] = 0;\n      dataPointer[4] = 0;\n      FUN_00000fec(dataPointer + 5,0);\n      dataPointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flag & 1) == 0) {\n        FUN_00000698(dataPointer,10);\n        if ((flag & 4) == 0) {\n          FUN_00000d0c(result);\n          FUN_00000738(dataSize);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        FUN_00000698(dataPointer,1);\n      }\n      FUN_00000d0c(result);\n      returnValue = (int)availableIndex;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_data_structure_000010d4",
                "param_1": "inputLength",
                "param_2": "inputOffset",
                "param_3": "dataSize",
                "param_4": "flag",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "uVar2": "tempResult",
                "iVar3": "returnValue",
                "uVar4": "paddingSize",
                "puVar5": "dataPointer",
                "local_30": "adjustedOffset",
                "local_2c": "adjustedPointer",
                "local_10": "loopIndex",
                "local_c": "firstAvailableIndex",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_device_00001274",
            "code": "\nvoid initializeDevice_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_device_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_function_0000129c",
            "code": "\nvoid initializeFunction_0000129c(undefined4 param)\n\n{\n  FUN_00002434(param,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_function_0000129c",
                "param_1": "param"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "extract_and_process_data_000012b4",
            "code": "\nundefined4 extract_and_process_data_000012b4(int data_start_address,undefined undefined_param)\n\n{\n  undefined4 result;\n  \n  result = FUN_00002364(data_start_address + 4,undefined_param);\n  FUN_000024bc(data_start_address);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "extract_and_process_data_000012b4",
                "param_1": "data_start_address",
                "param_2": "undefined_param",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "check_for_error_000012e2",
            "code": "\nint check_for_error_000012e2(int input,undefined4 value_1,undefined4 value_2)\n\n{\n  int result;\n  \n  while( true ) {\n    result = FUN_0000231c(input + 4,value_1,value_2);\n    if (result != 0) break;\n    FUN_0000129c(input);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "check_for_error_000012e2",
                "param_1": "input",
                "param_2": "value_1",
                "param_3": "value_2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_00001318",
            "code": "\nvoid setBit_00001318(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_00001318",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_for_initialization_00001348",
            "code": "\nvoid checkForInitialization_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_for_initialization_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculate_offset_00001360(uint base_address,int offset_value)\n\n{\n  return offset_value * 4 + (base_address & 0xf0000000 | (base_address & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "base_address",
                "param_2": "offset_value"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "initialize_variable_00001392",
            "code": "\nvoid initializeVariable_00001392(undefined4 input1,undefined input2)\n\n{\n  undefined4 *pointerToVariable;\n  \n  pointerToVariable = (undefined4 *)FUN_00001360(input1,input2);\n  *pointerToVariable = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "initialize_variable_00001392",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "pointerToVariable"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_config_000013b8",
            "code": "\nundefined4 updateConfig_000013b8(int index,undefined4 value,undefined4 configPtr,undefined4 dataPtr)\n\n{\n  undefined4 returnValue;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = configPtr;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = dataPtr;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_config_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "configPtr",
                "param_4": "dataPtr",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "process_data_00001448",
            "code": "\nvoid processData_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "process_data_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_data_000014c4",
            "code": "\nvoid updateData_000014c4(int index,uint value)\n\n{\n  byte *dataPtr;\n  uint dataValue;\n  uint calculatedValue;\n  \n  dataPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  dataValue = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  dataPtr[3] = dataPtr[3] & 0xf3;\n  dataPtr[2] = (&DAT_00007001)[index * 0x20];\n  calculatedValue = dataValue / (value << 4);\n  *dataPtr = (byte)(calculatedValue >> 8) & 0x1f;\n  dataPtr[1] = (byte)calculatedValue;\n  dataPtr[10] = (byte)((dataValue << 2) / value + 1 >> 1) & 0x1f;\n  dataPtr[0x10] = dataPtr[0x10] | 0x88;\n  if ((dataPtr[0x10] & 0x70) == 0) {\n    dataPtr[0x13] = 0;\n  }\n  else {\n    dataPtr[0x13] = (char)(2 << (dataPtr[0x10] >> 4 & 7)) - 1;\n  }\n  dataPtr[0x15] = 1;\n  dataPtr[0x11] = 0xc0;\n  dataPtr[3] = dataPtr[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_data_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "dataPtr",
                "uVar2": "dataValue",
                "uVar3": "calculatedValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_to_buffer_000015d0",
            "code": "\nvoid copy_data_to_buffer_000015d0(int buffer_index,int source_address,uint data_size)\n\n{\n  int buffer_address;\n  uint current_index;\n  \n  buffer_address = *(int *)(&DAT_00006fe4 + buffer_index * 0x20);\n  for (current_index = 0; current_index < data_size; current_index = current_index + 1) {\n    do {\n    } while (-1 < *(char *)(buffer_address + 4));\n    *(undefined *)(buffer_address + 7) = *(undefined *)(current_index + source_address);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_to_buffer_000015d0",
                "param_1": "buffer_index",
                "param_2": "source_address",
                "param_3": "data_size",
                "iVar1": "buffer_address",
                "local_c": "current_index"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_00001628",
            "code": "\nvoid executeFunction_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_00001628",
                "param_1": "index"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_function_00001688",
            "code": "\nvoid initialize_function_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_function_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_new_value_00001696",
            "code": "\nint calculateNewValue_00001696(uint originalValue,int multiplier)\n\n{\n  return multiplier * 4 + (originalValue & 0xf0000000 | (originalValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_new_value_00001696",
                "param_1": "originalValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_flag_to_true_000016c8",
            "code": "\nvoid setFlagToTrue_000016c8(undefined4 argument1,undefined argument2)\n\n{\n  undefined4 *resultPointer;\n  \n  resultPointer = (undefined4 *)FUN_00001696(argument1,argument2);\n  *resultPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_flag_to_true_000016c8",
                "param_1": "argument1",
                "param_2": "argument2",
                "puVar1": "resultPointer"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_flag_000016ec",
            "code": "\nvoid setFlag_000016ec(undefined4 ptr,undefined data)\n\n{\n  undefined *pointer;\n  \n  pointer = (undefined *)FUN_00001696(ptr,data);\n  *pointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_flag_000016ec",
                "param_1": "ptr",
                "param_2": "data",
                "puVar1": "pointer"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 param,undefined data)\n\n{\n  undefined *ptrToMemory;\n  \n  ptrToMemory = (undefined *)FUN_00001696(param,data);\n  *ptrToMemory = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "param",
                "param_2": "data",
                "puVar1": "ptrToMemory"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_data_00001734",
            "code": "\nvoid initializeData_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_data_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_flag_with_param_00001748",
            "code": "\nvoid updateFlagWithParam_00001748(byte inputByte)\n\n{\n  DAT_40064003 = inputByte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_flag_with_param_00001748",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_data_flags_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateDataFlags_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_data_flags_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_peripheral_000017dc",
            "code": "\n\n\nvoid initializePeripheral_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_peripheral_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_hardware_000018bc",
            "code": "\nvoid initializeHardware_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_hardware_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_data_0000191c",
            "code": "\nvoid initializeData_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_data_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_hardware_00001960",
            "code": "\nvoid initializeHardware_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_hardware_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_communication_000019c0",
            "code": "\nvoid initializeCommunication_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_communication_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_data_00001a18",
            "code": "\nvoid initializeData_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_data_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initializeData_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_device_00001a60",
            "code": "\nvoid initialize_device_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_device_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "process_actions_00001b10",
            "code": "\nundefined4 processActions_00001b10(byte actionIndex)\n\n{\n  undefined4 result;\n  \n  if (actionIndex < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)actionIndex + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (actionIndex != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "process_actions_00001b10",
                "param_1": "actionIndex",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initializeSystem_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_execute_function_00001cf0",
            "code": "\nvoid checkAndExecuteFunction_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_execute_function_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_value_00001d08",
            "code": "\nint calculateValue_00001d08(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_value_00001d08",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "initialize_flag_00001d3a",
            "code": "\nvoid initializeFlag_00001d3a(undefined4 inputParameter,undefined flagValue)\n\n{\n  undefined4 *flagPointer;\n  \n  flagPointer = (undefined4 *)FUN_00001d08(inputParameter,flagValue);\n  *flagPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "initialize_flag_00001d3a",
                "param_1": "inputParameter",
                "param_2": "flagValue",
                "puVar1": "flagPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_00001d5e",
            "code": "\nuint applyMask_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_00001d80",
            "code": "\nuint applyMask_00001d80(ushort value)\n\n{\n  return value & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_00001d80",
                "param_1": "value"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "mask_and_return_bits_00001dc0",
            "code": "\nushort maskAndReturnBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "mask_and_return_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_data_00001ddc",
            "code": "\nvoid updateData_00001ddc(undefined2 inputData)\n\n{\n  char result;\n  \n  result = FUN_00001da2(inputData);\n  FUN_00001d3a(&DAT_40048038,result + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_data_00001ddc",
                "param_1": "inputData",
                "cVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bitfield_00001e0c",
            "code": "\nuint extract_bitfield_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bitfield_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bit_value_00001e44",
            "code": "\nvoid updateBitValue_00001e44(int index,uint bitOffset,int newValue)\n\n{\n  int shiftAmount;\n  \n  shiftAmount = (int)bitOffset >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) & ~(0xf << ((bitOffset & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftAmount + index * 4) * 4) | newValue << ((bitOffset & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bit_value_00001e44",
                "param_1": "index",
                "param_2": "bitOffset",
                "param_3": "newValue",
                "iVar1": "shiftAmount"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "execute_function_00001ec4",
            "code": "\nvoid executeFunction_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00001e0c(input1,input2);\n  FUN_00001e44(input1,input2,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "execute_function_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_flags_00001eea",
            "code": "\nundefined4 updateFlags_00001eea(undefined2 inputData,byte byteValue)\n\n{\n  uint bitIndex;\n  int dataPtr;\n  int indexPtr;\n  \n  FUN_00001f80(inputData,0);\n  if ((char)byteValue < '\\0') {\n    bitIndex = FUN_00001dc0(inputData);\n    dataPtr = FUN_00001d80(inputData);\n    *(uint *)(dataPtr + 0x14) = *(uint *)(dataPtr + 0x14) | 1 << (bitIndex & 0xff);\n  }\n  else {\n    bitIndex = FUN_00001dc0(inputData);\n    dataPtr = FUN_00001d80(inputData);\n    *(uint *)(dataPtr + 0x14) = *(uint *)(dataPtr + 0x14) & ~(1 << (bitIndex & 0xff));\n  }\n  dataPtr = FUN_00001d5e(inputData);\n  indexPtr = FUN_00001dc0(inputData);\n  *(uint *)(dataPtr + indexPtr * 4) = byteValue & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_flags_00001eea",
                "param_1": "inputData",
                "param_2": "byteValue",
                "uVar1": "bitIndex",
                "iVar2": "dataPtr",
                "iVar3": "indexPtr"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_data_00001f80",
            "code": "\nvoid updateData_00001f80(undefined2 input,undefined4 newData)\n\n{\n  int index1;\n  int index2;\n  undefined4 temp1;\n  undefined4 temp2;\n  uint currentData;\n  \n  FUN_00001ddc(input);\n  index1 = FUN_00001d5e(input);\n  index2 = FUN_00001dc0(input);\n  currentData = *(uint *)(index1 + index2 * 4);\n  index1 = FUN_00001d5e(input);\n  index2 = FUN_00001dc0(input);\n  *(undefined4 *)(index1 + index2 * 4) = newData;\n  if ((currentData & 0xf0000) != 0) {\n    temp1 = FUN_00001da2(input);\n    temp2 = FUN_00001dc0(input);\n    FUN_00001ec4(temp1,temp2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_data_00001f80",
                "param_1": "input",
                "param_2": "newData",
                "iVar1": "index1",
                "iVar2": "index2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "currentData"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_at_position_00001ff6",
            "code": "\nvoid setBitAtPosition_00001ff6(undefined2 input)\n\n{\n  uint result1;\n  int result2;\n  \n  result1 = FUN_00001dc0(input);\n  result2 = FUN_00001d80(input);\n  *(int *)(result2 + 4) = 1 << (result1 & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_at_position_00001ff6",
                "param_1": "input",
                "uVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_flags_00002028",
            "code": "\nvoid processFlags_00002028(int dataPtr,undefined4 value)\n\n{\n  int index;\n  uint flags;\n  uint bitIndex;\n  \n  flags = *(uint *)(dataPtr + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((flags & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(dataPtr + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(dataPtr + 0xa0) = 1 << (bitIndex & 0xff);\n      index = FUN_00001e0c(value,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + index * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_flags_00002028",
                "param_1": "dataPtr",
                "param_2": "value",
                "iVar1": "index",
                "uVar2": "flags",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_hardware_000020cc",
            "code": "\nvoid initializeHardware_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_hardware_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_memory_000020f4",
            "code": "\nvoid initializeMemory_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_memory_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_peripheral_00002108",
            "code": "\nvoid initializePeripheral_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_peripheral_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_system_info_0000211c",
            "code": "\nvoid printSystemInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 stringFormat;\n  int stackSize;\n  int stackPointer;\n  dword baseAddress;\n  uint index;\n  undefined4 *modulePointer;\n  undefined4 currentPointer;\n  undefined4 stackUsed;\n  int stackOffset;\n  short moduleIndex;\n  int totalStackSize;\n  int totalStackOffset;\n  \n  stringFormat = 0x515f;\n  totalStackOffset = 0;\n  totalStackSize = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  stackOffset = FUN_000008b8();\n  stackUsed = FUN_0000091c();\n  currentPointer = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               stackOffset,stackUsed,currentPointer);\n  totalStackOffset = totalStackOffset + 0x200;\n  if (0 < stackOffset) {\n    totalStackSize = stackOffset + totalStackSize;\n  }\n  for (moduleIndex = 1; moduleIndex < 0x21; moduleIndex = moduleIndex + 1) {\n    modulePointer = *(undefined4 **)(&DAT_1fff0358 + moduleIndex * 4);\n    if (modulePointer != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(modulePointer + 1);\n      baseAddress = (&relativeArray[4].r_offset)[index];\n      stackPointer = (int)&stringFormat + (uint)(8 < index);\n      stackSize = modulePointer[0xb];\n      totalStackOffset = stackSize + totalStackOffset;\n      iVar1 = FUN_000010a0(modulePointer[9]);\n      stackSize = stackSize - iVar1;\n      totalStackSize = stackSize + totalStackSize;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)modulePointer + 6),modulePointer[10],baseAddress,stackPointer,\n                   *(undefined *)((int)modulePointer + 5),modulePointer[0xb],stackSize,modulePointer[9],*modulePointer);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,totalStackOffset,totalStackSize);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_system_info_0000211c",
                "local_40": "stringFormat",
                "local_3c": "stackSize",
                "local_38": "stackPointer",
                "local_34": "baseAddress",
                "local_30": "index",
                "local_2c": "modulePointer",
                "local_28": "currentPointer",
                "local_24": "stackUsed",
                "local_20": "stackOffset",
                "local_1a": "moduleIndex",
                "local_18": "totalStackSize",
                "local_14": "totalStackOffset",
                "Elf32_Rel_ARRAY_1fff0200": "relativeArray"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "is_parameter_equal_to_value_00002270",
            "code": "\nundefined is_parameter_equal_to_value_00002270(int input_value)\n\n{\n  undefined result;\n  int first_value;\n  bool is_equal;\n  \n  first_value = *(int *)(input_value + 0xc);\n  is_equal = *(int *)(input_value + 8) == first_value;\n  if (is_equal) {\n    first_value = 1;\n  }\n  result = (undefined)first_value;\n  if (!is_equal) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "is_parameter_equal_to_value_00002270",
                "param_1": "input_value",
                "iVar2": "first_value",
                "bVar3": "is_equal",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_sum_00002294",
            "code": "\nundefined checkSum_00002294(int dataPointer)\n\n{\n  undefined result;\n  int offset;\n  bool isEqual;\n  \n  offset = *(int *)(dataPointer + 4);\n  isEqual = *(int *)(dataPointer + 0xc) - *(int *)(dataPointer + 8) == offset;\n  if (isEqual) {\n    offset = 1;\n  }\n  result = (undefined)offset;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_sum_00002294",
                "param_1": "dataPointer",
                "iVar2": "offset",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_store_value_000022be",
            "code": "\nvoid incrementAndStoreValue_000022be(int *array,undefined value)\n\n{\n  uint previousValue;\n  \n  previousValue = array[3];\n  array[3] = previousValue + 1;\n  *(undefined *)((previousValue & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_store_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "previousValue"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_return_element_000022f0",
            "code": "\nundefined incrementAndReturnElement_000022f0(int *array)\n\n{\n  uint elementAtIndex2;\n  \n  elementAtIndex2 = array[2];\n  array[2] = elementAtIndex2 + 1;\n  return *(undefined *)((elementAtIndex2 & array[1] - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_return_element_000022f0",
                "param_1": "array",
                "uVar1": "elementAtIndex2"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_firmware_0000231c",
            "code": "\nint copy_firmware_0000231c(undefined4 input_param,undefined *output_buffer,int buffer_size)\n\n{\n  undefined byte_value;\n  int is_valid;\n  undefined *output_ptr;\n  int remaining_size;\n  \n  output_ptr = output_buffer;\n  remaining_size = buffer_size;\n  while ((remaining_size != 0 && (is_valid = FUN_00002270(input_param), is_valid == 0))) {\n    byte_value = FUN_000022f0(input_param);\n    *output_ptr = byte_value;\n    remaining_size = remaining_size + -1;\n    output_ptr = output_ptr + 1;\n  }\n  return buffer_size - remaining_size;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_firmware_0000231c",
                "param_1": "input_param",
                "param_2": "output_buffer",
                "param_3": "buffer_size",
                "uVar1": "byte_value",
                "iVar2": "is_valid",
                "local_20": "output_ptr",
                "local_14": "remaining_size"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "check_status_00002364",
            "code": "\nundefined4 check_status_00002364(undefined4 input_param,undefined output_param)\n\n{\n  int result;\n  undefined4 status;\n  \n  result = FUN_00002294(input_param);\n  if (result == 0) {\n    FUN_000022be(input_param,output_param);\n    status = 0;\n  }\n  else {\n    status = 0xffffffff;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00002364": "check_status_00002364",
                "param_1": "input_param",
                "param_2": "output_param",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_application_00002396",
            "code": "\nvoid initialize_application_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_application_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 returnValue;\n  undefined dataBuffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  returnValue = FUN_00002e6c(0,dataBuffer,0x80);\n  triggerSoftwareInterrupt(0x3f);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "dataBuffer",
                "software_interrupt": "triggerSoftwareInterrupt",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "execute_system_call_000023c8",
            "code": "\nvoid executeSystemCall_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "execute_system_call_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "initialize_function_000023d0",
            "code": "\nundefined4 initializeFunction_000023d0(undefined4 inputParameter)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_1fff0d98 == 0) {\n    returnValue = FUN_000023c8(1,inputParameter,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "initialize_function_000023d0",
                "param_1": "inputParameter",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_next_pointer_0000240c",
            "code": "\nundefined4 * extractNextPointer_0000240c(undefined4 *currentPointer)\n\n{\n  undefined4 *nextPointer;\n  \n  nextPointer = (undefined4 *)*currentPointer;\n  if (nextPointer != (undefined4 *)0x0) {\n    *currentPointer = *nextPointer;\n  }\n  return nextPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_next_pointer_0000240c",
                "param_1": "currentPointer",
                "puVar1": "nextPointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_status_00002434",
            "code": "\nundefined4 updateStatus_00002434(int *status,int flag)\n\n{\n  int tempVar1;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  tempVar1 = DAT_1fff03dc;\n  if (*status == 0) {\n    *status = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*status == -1) {\n      *status = tempVar1 + 8;\n      *(undefined4 *)*status = 0;\n    }\n    else {\n      FUN_00001034(status,tempVar1);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_status_00002434",
                "param_1": "status",
                "param_2": "flag",
                "iVar1": "tempVar1",
                "uVar2": "result"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_data_000024bc",
            "code": "\nvoid processData_000024bc(int *data)\n\n{\n  undefined tempValue;\n  undefined4 result;\n  int modifiedData;\n  \n  result = FUN_00000cd0();\n  if (*data == 0) {\n    FUN_00000d0c(result);\n  }\n  else if (*data == -1) {\n    *data = 0;\n    FUN_00000d0c(result);\n  }\n  else {\n    modifiedData = FUN_0000240c(data);\n    FUN_00000698(modifiedData + -8,10);\n    if (*data == 0) {\n      *data = -1;\n    }\n    tempValue = *(undefined *)(modifiedData + -3);\n    FUN_00000d0c(result);\n    FUN_00000738(tempValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_data_000024bc",
                "param_1": "data",
                "uVar1": "tempValue",
                "uVar2": "result",
                "iVar3": "modifiedData"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "set_memory_value_00002538",
            "code": "\nvoid setMemoryValue_00002538(byte memoryOffset,uint dataValue)\n\n{\n  if ((char)memoryOffset < '\\0') {\n    (&DAT_e000ed14)[memoryOffset & 0xf] = (char)((dataValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)memoryOffset + -0x1fff1c00) = (char)((dataValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "set_memory_value_00002538",
                "param_1": "memoryOffset",
                "param_2": "dataValue"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_system_0000258c",
            "code": "\n\n\nvoid initializeSystem_0000258c(void)\n\n{\n  uint count;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (count = 0; count < 0x66; count = count + 1) {\n    FUN_00002538((int)(char)count,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_system_0000258c",
                "local_c": "count"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initialize_system_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_and_process_00002600",
            "code": "\nundefined4 initializeAndProcess_00002600(undefined4 inputData)\n\n{\n  undefined4 processedData;\n  \n  processedData = FUN_000047e4(inputData);\n  FUN_0000285c(processedData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_and_process_00002600",
                "param_1": "inputData",
                "uVar1": "processedData"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "extracted_function_00002624",
            "code": "\nundefined4 extractedFunction_00002624(undefined4 input)\n\n{\n  undefined4 result;\n  undefined4 value;\n  \n  result = FUN_0000281c();\n  value = 0;\n  FUN_0000443c(&result,input);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "extracted_function_00002624",
                "param_1": "input",
                "local_10": "result",
                "uStack_c": "value"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_data_00002654",
            "code": "\nundefined4 initializeData_00002654(undefined4 inputValue,undefined4 dataPointer,undefined4 configValue)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(inputValue);\n  DAT_1fff0d9c = dataPointer;\n  FUN_00002894(result,0x26f1,configValue);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_data_00002654",
                "param_1": "inputValue",
                "param_2": "dataPointer",
                "param_3": "configValue",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "extract_information_00002690",
            "code": "\nundefined4 extractInformation_00002690(undefined4 inputData)\n\n{\n  undefined4 result;\n  undefined4 temp;\n  \n  result = FUN_000028f0();\n  temp = 0;\n  FUN_0000443c(&result,inputData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "extract_information_00002690",
                "param_1": "inputData",
                "local_10": "result",
                "uStack_c": "temp"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_data_000026c0",
            "code": "\nvoid initializeData_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_application_000026d8",
            "code": "\nvoid initializeApplication_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_application_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_system_000026e4",
            "code": "\nvoid initialize_system_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 callbackParam)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callbackParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_array_00002714",
            "code": "\nvoid setBitInArray_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_array_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "set_memory_value_00002744",
            "code": "\nvoid setMemoryValue_00002744(byte address,uint value)\n\n{\n  if ((char)address < '\\0') {\n    (&DAT_e000ed14)[address & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "set_memory_value_00002744",
                "param_1": "address",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_execute_function_00002798",
            "code": "\nvoid checkAndExecuteFunction_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_execute_function_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "enable_memory_protection_000027b0",
            "code": "\n\n\nvoid enableMemoryProtection_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "enable_memory_protection_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getBaseAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_system_state_0000285c",
            "code": "\n\n\nvoid initializeSystemState_0000285c(undefined4 newState)\n\n{\n  _DAT_4003d000 = newState;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_system_state_0000285c",
                "param_1": "newState"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int inputValue,undefined4 param2Val,undefined4 param3Val)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = param2Val;\n  DAT_1fff0da4 = param3Val;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "inputValue",
                "param_2": "param2Val",
                "param_3": "param3Val"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_value_000028f0",
            "code": "\n\n\nint incrementValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "reset_flags_00002910",
            "code": "\n\n\nvoid resetFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "reset_flags_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_interrupt_handlers_00002994",
            "code": "\n\n\nvoid execute_interrupt_handlers_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_interrupt_handlers_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "initialize_system_00002a00",
            "code": "\nvoid initializeSystem_00002a00(undefined4 systemConfig)\n\n{\n  FUN_00004cb4(systemConfig);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "initialize_system_00002a00",
                "param_1": "systemConfig"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_reboot_code_00002a18",
            "code": "\nint find_reboot_code_00002a18(int *array_ptr,undefined4 value)\n\n{\n  int iVar1;\n  int *current_array;\n  undefined **reboot_code_ptr;\n  uint index;\n  int *current_ptr;\n  \n  current_array = array_ptr;\n  reboot_code_ptr = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    current_ptr = (&current_array)[index];\n    if (current_ptr != (int *)0x0) {\n      for (; *current_ptr != 0; current_ptr = current_ptr + 3) {\n        iVar1 = FUN_00004e52(*current_ptr,value);\n        if (iVar1 == 0) {\n          return current_ptr[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_reboot_code_00002a18",
                "param_1": "array_ptr",
                "param_2": "value",
                "local_18": "current_array",
                "local_14": "reboot_code_ptr",
                "local_10": "index",
                "local_c": "current_ptr"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_description_00002a88",
            "code": "\nvoid printCommandDescription_00002a88(int *commandList)\n\n{\n  int *currentCommand;\n  undefined **commandName;\n  uint commandIndex;\n  int *currentParameter;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommand = commandList;\n  commandName = &PTR_s_reboot_00007300;\n  for (commandIndex = 0; commandIndex < 2; commandIndex = commandIndex + 1) {\n    currentParameter = (&currentCommand)[commandIndex];\n    if (currentParameter != (int *)0x0) {\n      for (; *currentParameter != 0; currentParameter = currentParameter + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentParameter,currentParameter[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_description_00002a88",
                "param_1": "commandList",
                "local_18": "currentCommand",
                "local_14": "commandName",
                "local_10": "commandIndex",
                "local_c": "currentParameter"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_string_00002b10",
            "code": "\nvoid processString_00002b10(undefined4 param1,byte *param2)\n\n{\n  int count;\n  byte *currentByte;\n  byte *stringArray [3];\n  code *functionPointer;\n  char **strings;\n  uint stringCount;\n  byte quoteChar;\n  char *currentChar;\n  char *currentString;\n  char **stringArrayPtr;\n  uint stringIndex;\n  int backslashCount;\n  uint validStringCount;\n  byte *currentCharacter;\n  \n  validStringCount = 0;\n  backslashCount = 0;\n  currentCharacter = param2;\n  while( true ) {\n    stringArray[0] = param2;\n    stringArray[1] = (byte *)param1;\n    if (0x20 < *currentCharacter) {\n      if ((*currentCharacter == 0x22) || (*currentCharacter == 0x27)) {\n        quoteChar = *currentCharacter;\n        do {\n          currentByte = currentCharacter + 1;\n          if (*currentByte == 0) {\n            currentCharacter = currentByte;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*currentByte == 0x5c) {\n            backslashCount = backslashCount + 1;\n            currentCharacter = currentCharacter + 2;\n            currentByte = currentCharacter;\n            if (*currentCharacter == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharacter = currentByte;\n        } while (quoteChar != *currentCharacter);\n        if (0x20 < currentCharacter[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentCharacter == 0x5c) {\n            backslashCount = backslashCount + 1;\n            currentCharacter = currentCharacter + 1;\n            if (*currentCharacter == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharacter = currentCharacter + 1;\n          if (*currentCharacter == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentCharacter);\n      }\n      validStringCount = validStringCount + 1;\n    }\n    if (*currentCharacter == 0) break;\n    *currentCharacter = 0;\n    currentCharacter = currentCharacter + 1;\n  }\n  if (validStringCount != 0) {\n    stringCount = validStringCount;\n    strings = (char **)((int)stringArray - ((validStringCount + 1) * 4 + 7 & 0xfffffff8));\n    strings[validStringCount] = (char *)0x0;\n    currentCharacter = param2;\n    for (stringIndex = 0; stringArrayPtr = strings, stringIndex < validStringCount; stringIndex = stringIndex + 1) {\n      for (; *currentCharacter == 0; currentCharacter = currentCharacter + 1) {\n      }\n      if ((*currentCharacter == 0x22) || (*currentCharacter == 0x27)) {\n        currentCharacter = currentCharacter + 1;\n      }\n      strings[stringIndex] = (char *)currentCharacter;\n      for (; *currentCharacter != 0; currentCharacter = currentCharacter + 1) {\n      }\n    }\n    for (; (backslashCount != 0 && (*stringArrayPtr != (char *)0x0)); stringArrayPtr = stringArrayPtr + 1) {\n      for (currentString = *stringArrayPtr; *currentString != '\\0'; currentString = currentString + 1) {\n        if (*currentString == '\\') {\n          for (currentChar = currentString; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          backslashCount = backslashCount + -1;\n          if (backslashCount == 0) break;\n        }\n      }\n    }\n    functionPointer = (code *)FUN_00002a18(param1,*strings);\n    if (functionPointer == (code *)0x0) {\n      count = FUN_00004e52(&DAT_00007214,*strings);\n      if (count == 0) {\n        FUN_00002a88(stringArray[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*strings);\n      }\n    }\n    else {\n      (*functionPointer)(validStringCount,strings);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_string_00002b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "count",
                "pbVar2": "currentByte",
                "local_48": "stringArray",
                "local_3c": "functionPointer",
                "local_38": "strings",
                "local_34": "stringCount",
                "local_2d": "quoteChar",
                "local_2c": "currentChar",
                "local_28": "currentString",
                "local_24": "stringArrayPtr",
                "local_20": "stringIndex",
                "local_1c": "backslashCount",
                "local_18": "validStringCount",
                "local_14": "currentCharacter"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint processInput_00002d94(undefined *inputPtr,int inputSize)\n\n{\n  int inputByte;\n  byte lastByte;\n  bool isFirstByte;\n  undefined *currentChar;\n  \n  currentChar = inputPtr;\n  while( true ) {\n    if (inputSize + -1 <= (int)currentChar - (int)inputPtr) {\n      return 0xffffffff;\n    }\n    inputByte = FUN_00004418();\n    if (inputByte < 0) break;\n    if ((inputByte == 0xd) || (inputByte == 10)) {\n      *currentChar = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      isFirstByte = currentChar == inputPtr;\n      if (isFirstByte) {\n        inputPtr = (undefined *)0x1;\n      }\n      lastByte = (byte)inputPtr;\n      if (!isFirstByte) {\n        lastByte = 0;\n      }\n      return (uint)lastByte;\n    }\n    if ((inputByte == 8) || (inputByte == 0x7f)) {\n      if (currentChar != inputPtr) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputByte;\n      FUN_00002a00(inputByte);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "inputPtr",
                "param_2": "inputSize",
                "iVar1": "inputByte",
                "bVar2": "lastByte",
                "bVar3": "isFirstByte",
                "local_c": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_system_00002e48",
            "code": "\nvoid initializeSystem_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(relocationTable[16].r_offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_system_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_data_00002e6c",
            "code": "\nvoid processData_00002e6c(undefined4 input,undefined4 data1,undefined4 data2)\n\n{\n  int result;\n  \n  FUN_00002e48();\n  do {\n    result = FUN_00002d94(data1,data2);\n    if (result == 0) {\n      FUN_00002b10(input,data1);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_data_00002e6c",
                "param_1": "input",
                "param_2": "data1",
                "param_3": "data2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "initialize_application_00002e9c",
            "code": "\nundefined4 initialize_application_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "initialize_application_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "initialize_system_00002eb4",
            "code": "\nundefined4 initialize_system_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "initialize_system_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceIndex,int devicePtr)\n\n{\n  undefined4 deviceName;\n  undefined4 deviceType;\n  undefined buffer [8];\n  uint readResult;\n  \n  readResult = FUN_00003d64(devicePtr,buffer);\n  if ((int)readResult < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceIndex);\n  }\n  else {\n    deviceType = *(undefined4 *)(devicePtr + 8);\n    deviceName = FUN_000039e8(*(undefined *)(*(int *)(devicePtr + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceIndex,deviceType,deviceName);\n    FUN_00003694(buffer,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceIndex",
                "param_2": "devicePtr",
                "uVar1": "deviceName",
                "uVar2": "deviceType",
                "auStack_1c": "buffer",
                "local_14": "readResult"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "process_data_00002f30",
            "code": "\nvoid processData_00002f30(void)\n\n{\n  int iterationCount;\n  undefined4 *dataPointer;\n  \n  iterationCount = 0;\n  for (dataPointer = DAT_1fff0db0; dataPointer != (undefined4 *)0x0; dataPointer = (undefined4 *)*dataPointer) {\n    FUN_00002ecc(iterationCount,dataPointer);\n    FUN_00004db8(&DAT_00007380);\n    iterationCount = iterationCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "process_data_00002f30",
                "local_10": "iterationCount",
                "local_c": "dataPointer"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_information_00002f74",
            "code": "\nvoid printDeviceInformation_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceIndex;\n  undefined4 *currentDevice;\n  \n  currentDevice = DAT_1fff0db0;\n  deviceIndex = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; currentDevice != (undefined4 *)0x0; currentDevice = (undefined4 *)*currentDevice) {\n    deviceClass = FUN_000039e8(*(undefined *)(currentDevice[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceIndex,deviceClass,currentDevice[2]);\n    deviceIndex = deviceIndex + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_information_00002f74",
                "local_18": "deviceIndex",
                "local_14": "currentDevice",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "validate_and_process_device_id_00002fe0",
            "code": "\nvoid validateAndProcessDeviceId_00002fe0(int argc,undefined4 *argv)\n\n{\n  int deviceCount;\n  undefined4 deviceId;\n  \n  if (argc < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceCount = FUN_00004e52(argv[2],&DAT_000073d4);\n    if (deviceCount == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceId = FUN_00004042(argv[2]);\n      deviceCount = FUN_00003d24(deviceId);\n      if (deviceCount == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceId,deviceCount);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "validate_and_process_device_id_00002fe0",
                "param_1": "argc",
                "param_2": "argv",
                "iVar1": "deviceCount",
                "uVar2": "deviceId"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int arg_count,undefined4 *command_line_args)\n\n{\n  undefined2 value;\n  undefined2 values_array [4];\n  uint num_values;\n  int device_info;\n  undefined4 device_id;\n  int loop_counter;\n  \n  if (arg_count < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*command_line_args,command_line_args[1]);\n  }\n  else {\n    device_id = FUN_00004042(command_line_args[2]);\n    device_info = FUN_00003d24(device_id);\n    if (device_info == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(values_array,0,8);\n      if (5 < arg_count) {\n        arg_count = 6;\n      }\n      num_values = arg_count - 3;\n      for (loop_counter = 0; loop_counter < (int)num_values; loop_counter = loop_counter + 1) {\n        value = FUN_00004042(command_line_args[loop_counter + 3]);\n        values_array[loop_counter] = value;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",device_id,*(undefined4 *)(device_info + 8));\n      FUN_00003694(values_array,num_values & 0xff);\n      num_values = FUN_00003d94(device_info,values_array);\n      if ((int)num_values < 1) {\n        if (num_values == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",device_id);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",device_id);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",device_id);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "arg_count",
                "param_2": "command_line_args",
                "uVar1": "value",
                "auStack_20": "values_array",
                "local_18": "num_values",
                "local_14": "device_info",
                "local_10": "device_id",
                "local_c": "loop_counter"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "execute_command_0000316c",
            "code": "\nundefined4 executeCommand_0000316c(int commandType,undefined4 *commandArgs)\n\n{\n  int result;\n  \n  if (commandType < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(commandArgs[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(commandType,commandArgs);\n    }\n    else {\n      result = FUN_00004e52(commandArgs[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(commandType,commandArgs);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*commandArgs);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "execute_command_0000316c",
                "param_1": "commandType",
                "param_2": "commandArgs",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "announce_alarm_000031e0",
            "code": "\nvoid announceAlarm_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "announce_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int day)\n\n{\n  byte leapYearIndicator;\n  int adjustedMonth;\n  \n  adjustedMonth = month;\n  if (month < 3) {\n    adjustedMonth = 1;\n  }\n  leapYearIndicator = (byte)adjustedMonth;\n  if (2 < month) {\n    leapYearIndicator = 0;\n  }\n  year = year - (uint)leapYearIndicator;\n  adjustedMonth = year;\n  if (year < 0) {\n    adjustedMonth = year + 3;\n  }\n  return ((((adjustedMonth >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)arrayOfOffsets + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "leapYearIndicator",
                "iVar2": "adjustedMonth",
                "Elf32_Rel_ARRAY_1fff0200": "arrayOfOffsets"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "extract_parameters_0000328c",
            "code": "\nundefined4 extractParameters_0000328c(undefined4 *sourceArray,int *resultArray)\n\n{\n  int iVar1;\n  int currentIndex;\n  short resultValue;\n  \n  resultValue = FUN_00004f84(*sourceArray,&currentIndex,10);\n  resultArray[5] = resultValue + -0x76c;\n  resultValue = FUN_00004f84(currentIndex + 1,&currentIndex,10);\n  resultArray[4] = resultValue + -1;\n  resultValue = FUN_00004f84(currentIndex + 1,&currentIndex,10);\n  resultArray[3] = (int)resultValue;\n  resultValue = FUN_00004f84(sourceArray[1],&currentIndex,10);\n  resultArray[2] = (int)resultValue;\n  resultValue = FUN_00004f84(currentIndex + 1,&currentIndex,10);\n  resultArray[1] = (int)resultValue;\n  resultValue = FUN_00004f84(currentIndex + 1,&currentIndex,10);\n  *resultArray = (int)resultValue;\n  iVar1 = FUN_000031fc(resultArray[5] + 0x76c,resultArray[4] + 1,resultArray[3]);\n  resultArray[6] = iVar1;\n  resultArray[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "extract_parameters_0000328c",
                "param_1": "sourceArray",
                "param_2": "resultArray",
                "local_10": "currentIndex",
                "local_a": "resultValue"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_formatted_datetime_00003378",
            "code": "\nundefined4 print_formatted_datetime_00003378(undefined4 *datetime_values)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",datetime_values[5] + 0x76c,datetime_values[4] + 1,day_value,\n               hour_value,minute_value,*datetime_values);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_formatted_datetime_00003378",
                "param_1": "datetime_values",
                "param_1[3]": "day_value",
                "param_1[2]": "hour_value",
                "param_1[1]": "minute_value"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_000033c0",
            "code": "\nbool checkAlarm_000033c0(void)\n\n{\n  int iVar1;\n  undefined stackData [36];\n  \n  iVar1 = FUN_00002690(stackData);\n  if (iVar1 != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(stackData);\n  }\n  return iVar1 != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_000033c0",
                "auStack_2c": "stackData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 input)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined buffer [36];\n  \n  result = FUN_0000328c(input,buffer);\n  if (result == 0) {\n    result = FUN_00002654(buffer,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "input",
                "iVar1": "result",
                "auStack_2c": "buffer",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_rtc_time_status_00003444",
            "code": "\nbool getRtcTimeStatus_00003444(void)\n\n{\n  int result;\n  undefined rtcTimeBuffer [36];\n  \n  result = FUN_00002624(rtcTimeBuffer);\n  if (result != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(rtcTimeBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_rtc_time_status_00003444",
                "auStack_2c": "rtcTimeBuffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_time_and_return_status_00003478",
            "code": "\nundefined4 setTimeAndReturnStatus_00003478(undefined4 inputTime)\n\n{\n  int validationResult;\n  undefined4 status;\n  undefined timeData [36];\n  \n  validationResult = FUN_0000328c(inputTime,timeData);\n  if (validationResult == 0) {\n    validationResult = FUN_00002600(timeData);\n    if (validationResult == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_time_and_return_status_00003478",
                "param_1": "inputTime",
                "iVar1": "validationResult",
                "uVar2": "status",
                "auStack_2c": "timeData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int commandCount,int commandArray)\n\n{\n  int errorCode;\n  undefined4 returnValue;\n  \n  if (commandCount < 2) {\n    FUN_000034c0();\n    returnValue = 1;\n  }\n  else {\n    errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"poweron\",7);\n    if (errorCode == 0) {\n      FUN_000026d8();\n    }\n    else {\n      errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"poweroff\",8);\n      if (errorCode == 0) {\n        FUN_000026e4();\n      }\n      else {\n        errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"clearalarm\",8);\n        if (errorCode == 0) {\n          FUN_000026c0();\n        }\n        else {\n          errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"getalarm\",8);\n          if (errorCode == 0) {\n            FUN_000033c0();\n          }\n          else {\n            errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"setalarm\",8);\n            if ((errorCode == 0) && (commandCount == 4)) {\n              FUN_000033f4(commandArray + 8);\n            }\n            else {\n              errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"gettime\",7);\n              if (errorCode == 0) {\n                FUN_00003444();\n              }\n              else {\n                errorCode = FUN_00004e66(*(undefined4 *)(commandArray + 4),\"settime\",7);\n                if ((errorCode != 0) || (commandCount != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandArray + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(commandArray + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "commandCount",
                "param_2": "commandArray",
                "iVar1": "errorCode",
                "uVar2": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "execute_initialization_code_00003688",
            "code": "\nvoid executeInitializationCode_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "execute_initialization_code_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObject,byte length)\n\n{\n  undefined4 result;\n  char flag;\n  uint bitValue;\n  bool isBitSet;\n  undefined tempBuffer [8];\n  int bufferLength;\n  char character;\n  byte index;\n  \n  if ((dataObject == 0) || (3 < length)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (index = 0; index < length; index = index + 1) {\n      if (*(byte *)(dataObject + 6) < 0x14) {\n        bitValue = 1 << (uint)*(byte *)(dataObject + 6) & 0x8018f;\n        isBitSet = bitValue != 0;\n        if (isBitSet) {\n          bitValue = 1;\n        }\n        flag = (char)bitValue;\n        if (!isBitSet) {\n          flag = '\\0';\n        }\n        if (flag == '\\0') goto LAB_000036ee;\n        character = '\\0';\n      }\n      else {\nLAB_000036ee:\n        character = FUN_00003918((int)*(char *)(dataObject + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (length < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",index);\n      }\n      if (character == '\\0') {\n        if (*(char *)(dataObject + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(dataObject + (uint)index * 2));\n        }\n        else if ((*(char *)(dataObject + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObject + 7),4)) &&\n                (*(char *)(dataObject + 7) < '\\0')) {\n          bufferLength = FUN_00003e9e(tempBuffer,(int)*(short *)(dataObject + (uint)index * 2),\n                                  (int)*(char *)(dataObject + 7));\n          tempBuffer[bufferLength] = 0;\n          FUN_00004c84(&DAT_000077dc,tempBuffer);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(dataObject + (uint)index * 2),\n                       (int)*(char *)(dataObject + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(dataObject + (uint)index * 2),character);\n      }\n      result = FUN_00003810(*(undefined *)(dataObject + 6));\n      FUN_00004c84(&DAT_000077e8,result);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObject",
                "param_2": "length",
                "uVar1": "result",
                "cVar2": "flag",
                "uVar3": "bitValue",
                "bVar4": "isBitSet",
                "auStack_18": "tempBuffer",
                "local_10": "bufferLength",
                "local_a": "character",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "map_value_to_pointer_00003810",
            "code": "\nundefined * mapValueToPointer_00003810(undefined value)\n\n{\n  undefined *result;\n  \n  switch(value) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "map_value_to_pointer_00003810",
                "param_1": "value",
                "puVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_input_to_value_00003918",
            "code": "\nundefined4 mapInputToValue_00003918(undefined input)\n\n{\n  undefined4 mappedValue;\n  \n  switch(input) {\n  case 2:\n    mappedValue = 0x68;\n    break;\n  case 3:\n    mappedValue = 0x6b;\n    break;\n  case 6:\n    mappedValue = 0x4d;\n    break;\n  case 9:\n    mappedValue = 0x47;\n    break;\n  case 0xc:\n    mappedValue = 0x54;\n    break;\n  case 0xf:\n    mappedValue = 0x50;\n    break;\n  case 0xf1:\n    mappedValue = 0x66;\n    break;\n  default:\n    mappedValue = 0;\n    break;\n  case 0xf4:\n    mappedValue = 0x70;\n    break;\n  case 0xf7:\n    mappedValue = 0x6e;\n    break;\n  case 0xfa:\n    mappedValue = 0x75;\n    break;\n  case 0xfd:\n    mappedValue = 0x6d;\n  }\n  return mappedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_input_to_value_00003918",
                "param_1": "input",
                "uVar1": "mappedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "classify_sensor_or_actuator_000039e8",
            "code": "\nchar * classifySensorOrActuator_000039e8(char sensorOrActuatorID)\n\n{\n  char *classification;\n  \n  switch(sensorOrActuatorID) {\n  case '\\0':\n    classification = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    classification = \"ACT_ANY\";\n    break;\n  case 'B':\n    classification = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    classification = \"ACT_SERVO\";\n    break;\n  case 'D':\n    classification = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    classification = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    classification = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    classification = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    classification = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    classification = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    classification = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    classification = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    classification = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    classification = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    classification = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    classification = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    classification = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    classification = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    classification = \"SENSE_UV\";\n    break;\n  case -0x74:\n    classification = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    classification = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    classification = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    classification = \"SENSE_CO2\";\n    break;\n  default:\n    if (sensorOrActuatorID == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    classification = \"CLASS_UNKNOWN\";\n  }\n  return classification;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "classify_sensor_or_actuator_000039e8",
                "param_1": "sensorOrActuatorID",
                "pcVar1": "classification"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * find_nth_element_00003d24(int n)\n\n{\n  int count;\n  undefined4 *current_element;\n  \n  count = 0;\n  for (current_element = DAT_1fff0db0; (count < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    count = count + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "count",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionAddress,undefined4 argument)\n\n{\n  undefined4 returnValue;\n  \n  if (functionAddress == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionAddress + 0xc))(*(undefined4 *)(functionAddress + 4),argument);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionAddress",
                "param_2": "argument",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int input,undefined4 param)\n\n{\n  undefined4 result;\n  \n  if (input == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (**(code **)(*(int *)(input + 0xc) + 4))(*(undefined4 *)(input + 4),param);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "input",
                "param_2": "param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int baseAddress,uint number)\n\n{\n  uint dividend;\n  char *digitArray;\n  uint divisor;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (divisor = 10; divisor <= number; divisor = divisor * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (baseAddress != 0) {\n    digitArray = (char *)(digitCount + baseAddress);\n    dividend = number;\n    do {\n      digitArray = digitArray + -1;\n      *digitArray = (char)(dividend % 10) + '0';\n      dividend = dividend / 10;\n    } while (dividend != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "baseAddress",
                "param_2": "number",
                "local_20": "dividend",
                "local_14": "digitArray",
                "local_10": "divisor",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "calculate_sum_with_sign_00003e58",
            "code": "\nint calculate_sum_with_sign_00003e58(undefined *input_array,int array_length)\n\n{\n  int result;\n  int length;\n  undefined *modified_array;\n  \n  length = array_length;\n  modified_array = input_array;\n  if (-(array_length >> 0x1f) != 0) {\n    if (input_array != (undefined *)0x0) {\n      modified_array = input_array + 1;\n      *input_array = 0x2d;\n    }\n    length = -array_length;\n  }\n  result = FUN_00003dc4(modified_array,length);\n  return -(array_length >> 0x1f) + result;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "calculate_sum_with_sign_00003e58",
                "param_1": "input_array",
                "param_2": "array_length",
                "iVar1": "result",
                "local_18": "length",
                "local_14": "modified_array"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_data_00003e9e",
            "code": "\nundefined4 processData_00003e9e(undefined4 inputData,short count,undefined4 config)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(inputData,(int)count,config);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "inputData",
                "param_2": "count",
                "param_3": "config",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_number_with_decimals_00003ec4",
            "code": "\nint formatNumberWithDecimals_00003ec4(undefined *output,uint value,int decimals)\n\n{\n  int result;\n  undefined4 numDigits;\n  uint quotient;\n  int remainder;\n  int totalDigits;\n  \n  if (decimals + 7 < 0 != SCARRY4(decimals,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalDigits = 0;\n  if (decimals == 0) {\n    totalDigits = FUN_00003e58(output,value);\n  }\n  else if (decimals < 1) {\n    quotient = value / *(uint *)(&DAT_00007978 + decimals * -4);\n    remainder = value - *(uint *)(&DAT_00007978 + decimals * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)value < 0)) {\n      if (output != (undefined *)0x0) {\n        *output = 0x2d;\n      }\n      totalDigits = 1;\n    }\n    if (output == (undefined *)0x0) {\n      result = FUN_00003e58(0,quotient);\n      totalDigits = result + 1 + totalDigits;\n    }\n    else {\n      result = FUN_00003e58(output + totalDigits,quotient);\n      result = totalDigits + result;\n      totalDigits = result + 1;\n      output[result] = 0x2e;\n      numDigits = FUN_00003e58(output + totalDigits,remainder);\n      FUN_00003ff4(output + totalDigits,numDigits,-decimals,0x30);\n    }\n    totalDigits = -decimals + totalDigits;\n  }\n  else {\n    totalDigits = FUN_00003e58(output,value);\n    if (output != (undefined *)0x0) {\n      FUN_00004622(output + totalDigits,0x30,decimals);\n    }\n    totalDigits = decimals + totalDigits;\n  }\n  return totalDigits;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_number_with_decimals_00003ec4",
                "param_1": "output",
                "param_2": "value",
                "param_3": "decimals",
                "iVar1": "result",
                "uVar2": "numDigits",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalDigits"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "calculate_remaining_00003ff4",
            "code": "\nuint calculate_remaining_00003ff4(int input_value,uint start_value,uint end_value,undefined undefined_param)\n\n{\n  uint result;\n  \n  result = start_value;\n  if ((start_value < end_value) && (result = end_value, input_value != 0)) {\n    FUN_000045ee((end_value - start_value) + input_value,input_value,start_value);\n    FUN_00004622(input_value,undefined_param,end_value - start_value);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "calculate_remaining_00003ff4",
                "param_1": "input_value",
                "param_2": "start_value",
                "param_3": "end_value",
                "param_4": "undefined_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "initialize_function_00004042",
            "code": "\nvoid initializeFunction_00004042(undefined4 inputParameter)\n\n{\n  FUN_00004f84(inputParameter,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "initialize_function_00004042",
                "param_1": "inputParameter"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "decode_data_0000404c",
            "code": "\nundefined4 decode_data_0000404c(uint *data_ptr,int *config_ptr)\n\n{\n  int temp_var1;\n  int *temp_var2;\n  uint config_value;\n  ushort config_flags;\n  int temp_var3;\n  code *callback_fn;\n  int temp_var4;\n  uint original_data_value;\n  bool is_zero;\n  \n  config_flags = *(ushort *)(config_ptr + 3);\n  config_value = (uint)config_flags;\n  if ((int)(config_value << 0x1c) < 0) {\n    temp_var1 = config_ptr[4];\n    if (temp_var1 != 0) {\n      temp_var3 = config_value << 0x1e;\n      is_zero = temp_var3 == 0;\n      temp_var4 = *config_ptr;\n      if (is_zero) {\n        temp_var3 = config_ptr[5];\n      }\n      *config_ptr = temp_var1;\n      if (!is_zero) {\n        temp_var3 = 0;\n      }\n      config_ptr[2] = temp_var3;\n      for (temp_var4 = temp_var4 - temp_var1; 0 < temp_var4; temp_var4 = temp_var4 - temp_var3) {\n        temp_var3 = (*(code *)config_ptr[10])(data_ptr,config_ptr[8],temp_var1,temp_var4);\n        if (temp_var3 < 1) {\n          *(ushort *)(config_ptr + 3) = *(ushort *)(config_ptr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        temp_var1 = temp_var1 + temp_var3;\n      }\n    }\n  }\n  else {\n    if ((config_ptr[1] < 1) && (config_ptr[0x10] < 1)) {\n      return 0;\n    }\n    callback_fn = (code *)config_ptr[0xb];\n    if (callback_fn == (code *)0x0) {\n      return 0;\n    }\n    original_data_value = *data_ptr;\n    *data_ptr = 0;\n    if ((config_flags & 0x1000) == 0) {\n      temp_var1 = (*callback_fn)(data_ptr,config_ptr[8],config_value & 0x1000,1);\n      if ((temp_var1 == -1) && (config_value = *data_ptr, config_value != 0)) {\n        if ((config_value == 0x1d) || (config_value == 0x16)) {\n          *data_ptr = original_data_value;\n          return 0;\n        }\n        config_flags = *(ushort *)(config_ptr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      temp_var1 = config_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(config_ptr + 3) << 0x1d) < 0) &&\n       (temp_var1 = temp_var1 - config_ptr[1], config_ptr[0xd] != 0)) {\n      temp_var1 = temp_var1 - config_ptr[0x10];\n    }\n    temp_var1 = (*(code *)config_ptr[0xb])(data_ptr,config_ptr[8],temp_var1,0);\n    config_flags = *(ushort *)(config_ptr + 3);\n    if ((temp_var1 == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(config_ptr + 3) = config_flags | 0x40;\n      return 0xffffffff;\n    }\n    config_ptr[1] = 0;\n    *config_ptr = config_ptr[4];\n    if (((int)((uint)config_flags << 0x13) < 0) && ((temp_var1 != -1 || (*data_ptr == 0)))) {\n      config_ptr[0x15] = temp_var1;\n    }\n    temp_var2 = (int *)config_ptr[0xd];\n    *data_ptr = original_data_value;\n    if (temp_var2 != (int *)0x0) {\n      if (temp_var2 != config_ptr + 0x11) {\n        FUN_00004b34(data_ptr);\n      }\n      config_ptr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "decode_data_0000404c",
                "param_1": "data_ptr",
                "param_2": "config_ptr",
                "iVar1": "temp_var1",
                "piVar2": "temp_var2",
                "uVar3": "config_value",
                "uVar4": "config_flags",
                "iVar5": "temp_var3",
                "pcVar6": "callback_fn",
                "iVar7": "temp_var4",
                "uVar8": "original_data_value",
                "bVar9": "is_zero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "check_and_process_data_00004158",
            "code": "\nundefined4 checkAndProcessData_00004158(int data,undefined4 *config)\n\n{\n  undefined4 returnValue;\n  \n  if (config[4] != 0) {\n    if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (config == &DAT_000079b8) {\n      config = *(undefined4 **)(data + 4);\n    }\n    else if (config == (undefined4 *)&DAT_000079d8) {\n      config = *(undefined4 **)(data + 8);\n    }\n    else if (config == (undefined4 *)&DAT_00007998) {\n      config = *(undefined4 **)(data + 0xc);\n    }\n    if (*(short *)(config + 3) != 0) {\n      if ((-1 < (int)(config[0x19] << 0x1f)) && (-1 < (int)*(short *)(config + 3) << 0x16)) {\n        FUNC_000045e8(config[0x16]);\n      }\n      returnValue = FUN_0000404c(data,config);\n      if ((int)(config[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(config + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(config[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "check_and_process_data_00004158",
                "param_1": "data",
                "param_2": "config",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocations_000041d0",
            "code": "\nuint process_relocations_000041d0(int offset,undefined4 data_start,undefined4 data_end)\n\n{\n  uint result;\n  int num_entries;\n  dword *rel_table;\n  int rel_offset;\n  uint combined_result;\n  int count;\n  undefined4 *data_section;\n  \n  if (offset == 0) {\n    data_section = &DAT_000079f8;\n    rel_table = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combined_result = 0;\n    do {\n      count = rel_table[1];\n      rel_offset = rel_table[2];\n      while (count = count + -1, -1 < count) {\n        if ((1 < *(ushort *)(rel_offset + 0xc)) && (num_entries = *(short *)(rel_offset + 0xe) + 1, num_entries != 0)) {\n          result = FUN_00004158(0x1fff0284,rel_offset,data_end,num_entries,data_section);\n          combined_result = combined_result | result;\n        }\n        rel_offset = rel_offset + 0x68;\n      }\n      rel_table = (dword *)*rel_table;\n    } while (rel_table != (dword *)0x0);\n    return combined_result;\n  }\n  combined_result = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset);\n  return combined_result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocations_000041d0",
                "param_1": "offset",
                "param_2": "data_start",
                "param_3": "data_end",
                "uVar1": "result",
                "iVar2": "num_entries",
                "pdVar3": "rel_table",
                "iVar4": "rel_offset",
                "uVar5": "combined_result",
                "iVar6": "count",
                "puVar7": "data_section"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_parameters_000041f4",
            "code": "\nvoid initializeParameters_000041f4(undefined4 *parametersArray,undefined2 value1,undefined2 value2)\n\n{\n  *parametersArray = 0;\n  parametersArray[1] = 0;\n  parametersArray[4] = 0;\n  parametersArray[5] = 0;\n  parametersArray[2] = 0;\n  *(undefined2 *)(parametersArray + 3) = value1;\n  parametersArray[0x19] = 0;\n  *(undefined2 *)((int)parametersArray + 0xe) = value2;\n  parametersArray[6] = 0;\n  FUN_00004622(parametersArray + 0x17,0,8);\n  parametersArray[9] = 0x4dc9;\n  parametersArray[10] = 0x4def;\n  parametersArray[0xb] = 0x4e27;\n  parametersArray[8] = parametersArray;\n  parametersArray[0xc] = &LAB_00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_parameters_000041f4",
                "param_1": "parametersArray",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_data_structure_00004248",
            "code": "\nundefined4 * initializeDataStructure_00004248(undefined4 dataPointer,int arraySize)\n\n{\n  undefined4 *resultPointer;\n  int offset;\n  \n  offset = (arraySize + -1) * 0x68;\n  resultPointer = (undefined4 *)FUN_00004bd0(dataPointer,offset + 0x74);\n  if (resultPointer != (undefined4 *)0x0) {\n    *resultPointer = 0;\n    resultPointer[1] = arraySize;\n    resultPointer[2] = resultPointer + 3;\n    FUN_00004622(resultPointer + 3,0,offset + 0x68);\n  }\n  return resultPointer;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_data_structure_00004248",
                "param_1": "dataPointer",
                "param_2": "arraySize",
                "puVar1": "resultPointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_region_0000428c",
            "code": "\nvoid initializeMemoryRegion_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_region_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_function_000042a4",
            "code": "\nvoid initializeFunction_000042a4(int functionParameter)\n\n{\n  undefined4 result;\n  \n  FUN_0000428c();\n  if (*(int *)(functionParameter + 0x18) == 0) {\n    *(undefined4 *)(functionParameter + 0x48) = 0;\n    *(undefined4 *)(functionParameter + 0x4c) = 0;\n    *(undefined4 *)(functionParameter + 0x50) = 0;\n    result = 0x1fff0284;\n    *(undefined **)(functionParameter + 0x28) = &DAT_0000423d;\n    if (functionParameter == 0x1fff0284) {\n      result = 1;\n    }\n    if (functionParameter == 0x1fff0284) {\n      *(undefined4 *)(functionParameter + 0x18) = result;\n    }\n    result = FUN_00004314(functionParameter);\n    *(undefined4 *)(functionParameter + 4) = result;\n    result = FUN_00004314(functionParameter);\n    *(undefined4 *)(functionParameter + 8) = result;\n    result = FUN_00004314(functionParameter);\n    *(undefined4 *)(functionParameter + 0xc) = result;\n    FUN_000041f4(*(undefined4 *)(functionParameter + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(functionParameter + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(functionParameter + 0xc),0x12,2);\n    *(undefined4 *)(functionParameter + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_function_000042a4",
                "param_1": "functionParameter",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "process_rel_table_00004314",
            "code": "\nundefined4 * process_rel_table_00004314(undefined4 *param)\n\n{\n  dword new_index;\n  int count;\n  undefined4 *current_ptr;\n  dword *rel_table_entry;\n  \n  FUN_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  rel_table_entry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    count = rel_table_entry[1];\n    current_ptr = (undefined4 *)rel_table_entry[2];\n    while (count = count + -1, -1 < count) {\n      if (*(short *)(current_ptr + 3) == 0) {\n        current_ptr[3] = 0xffff0001;\n        current_ptr[0x19] = 0;\n        FUNC_000045e4(current_ptr + 0x16);\n        FUN_00004280();\n        current_ptr[1] = 0;\n        current_ptr[2] = 0;\n        current_ptr[4] = 0;\n        current_ptr[5] = 0;\n        *current_ptr = 0;\n        current_ptr[6] = 0;\n        FUN_00004622(current_ptr + 0x17,0,8);\n        current_ptr[0xd] = 0;\n        current_ptr[0xe] = 0;\n        current_ptr[0x12] = 0;\n        current_ptr[0x13] = 0;\n        return current_ptr;\n      }\n      current_ptr = current_ptr + 0x1a;\n    }\n    if (*rel_table_entry == 0) {\n      new_index = FUN_00004248(param,4);\n      *rel_table_entry = new_index;\n      if (new_index == 0) {\n        FUN_00004280();\n        *param = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    rel_table_entry = (dword *)*rel_table_entry;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "process_rel_table_00004314",
                "param_1": "param",
                "dVar1": "new_index",
                "iVar2": "count",
                "puVar3": "current_ptr",
                "pdVar4": "rel_table_entry"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "find_and_process_000043a0",
            "code": "\nuint find_and_process_000043a0(int base_offset,code *process_function)\n\n{\n  uint result;\n  int *current_node;\n  int current_element;\n  uint processed_elements;\n  int count;\n  \n  current_node = (int *)(base_offset + 0x48);\n  processed_elements = 0;\n  do {\n    count = current_node[1];\n    current_element = current_node[2];\n    while (count = count + -1, -1 < count) {\n      if ((1 < *(ushort *)(current_element + 0xc)) && (*(short *)(current_element + 0xe) != -1)) {\n        result = (*process_function)(current_element);\n        processed_elements = processed_elements | result;\n      }\n      current_element = current_element + 0x68;\n    }\n    current_node = (int *)*current_node;\n  } while (current_node != (int *)0x0);\n  return processed_elements;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "find_and_process_000043a0",
                "param_1": "base_offset",
                "param_2": "process_function",
                "piVar2": "current_node",
                "iVar3": "current_element",
                "uVar1": "result",
                "iVar5": "count",
                "uVar4": "processed_elements"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "decode_data_00004418",
            "code": "\nuint decode_data_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **dataArray;\n  byte *tempPointer;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataArray = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (dataArray == (byte **)&DAT_000079b8) {\n    dataArray = *(byte ***)(offset + 4);\n  }\n  else if (dataArray == (byte **)&DAT_000079d8) {\n    dataArray = *(byte ***)(offset + 8);\n  }\n  else if (dataArray == (byte **)&DAT_00007998) {\n    dataArray = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x16))) {\n    FUNC_000045e8(dataArray[0x16]);\n  }\n  tempPointer = dataArray[1];\n  dataArray[1] = tempPointer + -1;\n  if ((int)(tempPointer + -1) < 0) {\n    result = FUN_00005e10(offset,dataArray);\n  }\n  else {\n    tempPointer = *dataArray;\n    *dataArray = tempPointer + 1;\n    result = (uint)*tempPointer;\n  }\n  if ((-1 < (int)dataArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x16))) {\n    FUNC_000045ec(dataArray[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "decode_data_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "dataArray",
                "pbVar4": "tempPointer"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateTime_0000443c(undefined4 *currentTime,uint *dateTime)\n\n{\n  int days;\n  uint seconds;\n  uint totalSeconds;\n  uint totalMinutes;\n  uint totalHours;\n  undefined4 hours;\n  undefined4 minutes;\n  uint totalWeekdays;\n  bool isNegative;\n  \n  hours = *currentTime;\n  minutes = currentTime[1];\n  days = FUN_00006974(hours,minutes,0x15180,0);\n  totalSeconds = 0x15180;\n  FUN_00006974(hours,minutes,0x15180,0);\n  isNegative = (int)totalSeconds < 0;\n  if (isNegative) {\n    totalSeconds = totalSeconds + 0x15180;\n  }\n  if (isNegative) {\n    seconds = days + 0xafa6b;\n  }\n  else {\n    seconds = days + 0xafa6c;\n  }\n  dateTime[2] = totalSeconds / 0xe10;\n  dateTime[1] = (totalSeconds % 0xe10) / 0x3c;\n  *dateTime = (totalSeconds % 0xe10) % 0x3c;\n  dateTime[6] = (seconds + 3) % 7;\n  totalSeconds = seconds;\n  if ((int)seconds < 0) {\n    totalSeconds = seconds - 0x23ab0;\n  }\n  seconds = (totalSeconds / 0x23ab1) * -0x23ab1 + seconds;\n  totalMinutes = ((seconds / 0x8eac + seconds) - seconds / 0x5b4) - seconds / 0x23ab0;\n  totalHours = totalMinutes / 0x16d;\n  seconds = (totalHours / 100 - totalMinutes / 0x5b4) + seconds + totalHours * -0x16d;\n  totalWeekdays = seconds * 5 + 2;\n  totalMinutes = totalWeekdays / 0x99;\n  if (totalWeekdays < 0x5fa) {\n    days = 2;\n  }\n  else {\n    days = -10;\n  }\n  totalWeekdays = totalMinutes + days;\n  days = (totalSeconds / 0x23ab1) * 400 + totalHours;\n  if (totalWeekdays < 2) {\n    days = days + 1;\n  }\n  if (seconds < 0x132) {\n    if (((totalHours & 3) == 0) && (totalHours != (totalHours / 100) * 100)) {\n      totalSeconds = 1;\n    }\n    else {\n      totalSeconds = (uint)(totalHours % 400 == 0);\n    }\n    totalSeconds = seconds + 0x3b + totalSeconds;\n  }\n  else {\n    totalSeconds = seconds - 0x132;\n  }\n  dateTime[7] = totalSeconds;\n  dateTime[3] = (seconds + 1) - (totalMinutes * 0x99 + 2) / 5;\n  dateTime[4] = totalWeekdays;\n  dateTime[5] = days - 0x76c;\n  dateTime[8] = 0;\n  return dateTime;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_time_0000443c",
                "param_1": "currentTime",
                "param_2": "dateTime",
                "uVar6": "hours",
                "uVar7": "minutes",
                "iVar1": "days",
                "uVar2": "seconds",
                "uVar3": "totalSeconds",
                "uVar4": "totalMinutes",
                "uVar5": "totalHours",
                "uVar8": "totalWeekdays",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_functions_0000459c",
            "code": "\nvoid execute_functions_0000459c(void)\n\n{\n  code **function_array;\n  int index;\n  \n  function_array = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_array)();\n    function_array = function_array + 1;\n  }\n  FUN_00000410();\n  function_array = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_array)();\n    function_array = function_array + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_functions_0000459c",
                "ppcVar1": "function_array",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_range_000045ee",
            "code": "\nvoid copyRange_000045ee(undefined *dest,undefined *src,int length)\n\n{\n  undefined *destEnd;\n  undefined *srcEnd;\n  \n  srcEnd = src + length;\n  if ((src < dest) && (dest < srcEnd)) {\n    destEnd = dest + length;\n    while (destEnd != dest) {\n      srcEnd = srcEnd + -1;\n      destEnd = destEnd + -1;\n      *destEnd = *srcEnd;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != srcEnd; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_range_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "destEnd",
                "puVar2": "srcEnd"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "fill_memory_region_00004622",
            "code": "\nvoid fillMemoryRegion_00004622(undefined *memoryStart,undefined fillValue,int length)\n\n{\n  undefined *memoryEnd;\n  \n  memoryEnd = memoryStart + length;\n  for (; memoryStart != memoryEnd; memoryStart = memoryStart + 1) {\n    *memoryStart = fillValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "fill_memory_region_00004622",
                "param_1": "memoryStart",
                "param_2": "fillValue",
                "param_3": "length",
                "puVar1": "memoryEnd"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_based_on_offset_00004634",
            "code": "\nvoid updateDateBasedOnOffset_00004634(uint *dateArray,uint offset,undefined4 constant)\n\n{\n  int month;\n  uint day;\n  uint year;\n  int daysInMonth;\n  bool isNegative;\n  uint *tempArray;\n  uint currentOffset;\n  undefined4 constant2;\n  \n  tempArray = dateArray;\n  currentOffset = offset;\n  constant2 = constant;\n  if (0x3b < *dateArray) {\n    FUN_00005584(&tempArray,*dateArray,0x3c);\n    day = dateArray[1] + (int)tempArray;\n    dateArray[1] = day;\n    if ((int)currentOffset < 0) {\n      day = day - 1;\n      *dateArray = currentOffset + 0x3c;\n    }\n    else {\n      *dateArray = currentOffset;\n    }\n    if ((int)currentOffset < 0) {\n      dateArray[1] = day;\n    }\n  }\n  if (0x3b < dateArray[1]) {\n    FUN_00005584(&tempArray,dateArray[1],0x3c);\n    isNegative = (int)currentOffset < 0;\n    year = dateArray[2] + (int)tempArray;\n    dateArray[2] = year;\n    day = currentOffset;\n    if (isNegative) {\n      day = currentOffset + 0x3c;\n      year = year - 1;\n    }\n    if (!isNegative) {\n      dateArray[1] = day;\n    }\n    if (isNegative) {\n      dateArray[1] = day;\n    }\n    if (isNegative) {\n      dateArray[2] = year;\n    }\n  }\n  if (0x17 < dateArray[2]) {\n    FUN_00005584(&tempArray,dateArray[2],0x18);\n    isNegative = (int)currentOffset < 0;\n    year = dateArray[3] + (int)tempArray;\n    dateArray[3] = year;\n    day = currentOffset;\n    if (isNegative) {\n      day = currentOffset + 0x18;\n      year = year - 1;\n    }\n    if (!isNegative) {\n      dateArray[2] = day;\n    }\n    if (isNegative) {\n      dateArray[2] = day;\n    }\n    if (isNegative) {\n      dateArray[3] = year;\n    }\n  }\n  if (0xb < dateArray[4]) {\n    FUN_00005584(&tempArray,dateArray[4],0xc);\n    isNegative = (int)currentOffset < 0;\n    day = dateArray[5] + (int)tempArray;\n    dateArray[5] = day;\n    if (isNegative) {\n      currentOffset = currentOffset + 0xc;\n      day = day - 1;\n    }\n    if (!isNegative) {\n      dateArray[4] = currentOffset;\n    }\n    if (isNegative) {\n      dateArray[4] = currentOffset;\n    }\n    if (isNegative) {\n      dateArray[5] = day;\n    }\n  }\n  day = dateArray[5];\n  if ((day & 3) == 0) {\n    if (day == (day / 100) * 100) {\n      if ((day + 0x76c) % 400 == 0) {\n        daysInMonth = 0x1d;\n      }\n      else {\n        daysInMonth = 0x1c;\n      }\n    }\n    else {\n      daysInMonth = 0x1d;\n    }\n  }\n  else {\n    daysInMonth = 0x1c;\n  }\n  if ((int)dateArray[3] < 1) {\n    while ((int)dateArray[3] < 1) {\n      day = dateArray[4];\n      dateArray[4] = day - 1;\n      if (day - 1 == 0xffffffff) {\n        year = dateArray[5];\n        day = year - 1;\n        dateArray[4] = 0xb;\n        dateArray[5] = day;\n        if ((day & 3) == 0) {\n          if (day == (day / 100) * 100) {\n            if ((year + 0x76b) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n      month = daysInMonth;\n      if (dateArray[4] != 1) {\n        month = (&DAT_000079fc)[dateArray[4]];\n      }\n      dateArray[3] = month + dateArray[3];\n    }\n  }\n  else {\n    while( true ) {\n      day = dateArray[4];\n      month = daysInMonth;\n      if (day != 1) {\n        month = (&DAT_000079fc)[day];\n      }\n      if ((int)dateArray[3] <= month) break;\n      dateArray[3] = dateArray[3] - month;\n      dateArray[4] = day + 1;\n      if (day + 1 == 0xc) {\n        year = dateArray[5];\n        day = year + 1;\n        dateArray[4] = 0;\n        dateArray[5] = day;\n        if ((day & 3) == 0) {\n          if (day % 100 == 0) {\n            if ((year + 0x76d) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_based_on_offset_00004634",
                "param_1": "dateArray",
                "param_2": "offset",
                "param_3": "constant",
                "iVar1": "month",
                "uVar2": "day",
                "uVar3": "year",
                "iVar4": "daysInMonth",
                "bVar5": "isNegative",
                "local_20": "tempArray",
                "local_1c": "currentOffset",
                "uStack_18": "constant2"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_difference_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateDifference_000047e4(int *dateComponents)\n\n{\n  longlong totalDays;\n  longlong temp;\n  int *calendarData;\n  uint daysInMonth;\n  int leapYearDays;\n  int carry;\n  int highPart;\n  uint yearDays;\n  uint i;\n  uint startYear;\n  int difference;\n  uint days;\n  uint isLeap;\n  uint endYear;\n  uint lowPart;\n  bool isDivisibleBy4;\n  \n  calendarData = (int *)FUN_000056b0();\n  FUN_00004634(dateComponents);\n  days = dateComponents[5];\n  difference = dateComponents[3] + -1 + *(int *)(&DAT_00007a2c + dateComponents[4] * 4);\n  if (((1 < dateComponents[4]) && ((days & 3) == 0)) &&\n     ((days != (days / 100) * 100 || (days + 0x76c == ((days + 0x76c) / 400) * 400)))) {\n    difference = difference + 1;\n  }\n  dateComponents[7] = difference;\n  if (20000 < (int)&DAT_00002710 + days) {\n    highPart = -1;\n    leapYearDays = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)days < 0x47) {\n    if (days != 0x46) {\n      for (i = 0x45; (int)days < (int)i; i = i - 1) {\n        if ((i & 3) == 0) {\n          if (i == (i / 100) * 100) {\n            if ((i + 0x76c) % 400 == 0) {\n              highPart = 0x16e;\n            }\n            else {\n              highPart = 0x16d;\n            }\n          }\n          else {\n            highPart = 0x16e;\n          }\n        }\n        else {\n          highPart = 0x16d;\n        }\n        difference = difference - highPart;\n      }\n      if ((i & 3) == 0) {\n        if (days == (days / 100) * 100) {\n          highPart = 0x16d;\n          if ((days + 0x76c) % 400 == 0) {\n            highPart = 0x16e;\n          }\n        }\n        else {\n          highPart = 0x16e;\n        }\n      }\n      else {\n        highPart = 0x16d;\n      }\n      difference = difference - highPart;\n    }\n  }\n  else {\n    i = 0x46;\n    do {\n      if ((i & 3) == 0) {\n        if (i % 100 == 0) {\n          if ((i + 0x76c) % 400 == 0) {\n            highPart = 0x16e;\n          }\n          else {\n            highPart = 0x16d;\n          }\n        }\n        else {\n          highPart = 0x16e;\n        }\n      }\n      else {\n        highPart = 0x16d;\n      }\n      i = i + 1;\n      difference = difference + highPart;\n    } while (days != i);\n  }\n  totalDays = (longlong)difference * 0x15180 + (longlong)(dateComponents[2] * 0xe10 + dateComponents[1] * 0x3c + *dateComponents)\n  ;\n  lowPart = (uint)totalDays;\n  highPart = (int)((ulonglong)totalDays >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  i = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    days = calendarData[10];\n    highPart = (uint)totalDays + days;\n    leapYearDays = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)days >> 0x1f) + (uint)CARRY4((uint)totalDays,days);\n  }\n  else {\n    endYear = dateComponents[8];\n    isLeap = endYear;\n    if (0 < (int)endYear) {\n      isLeap = 1;\n    }\n    if ((calendarData[1] == dateComponents[5] + 0x76c) || (leapYearDays = FUN_00004f98(), leapYearDays != 0)) {\n      startYear = calendarData[0x14];\n      daysInMonth = calendarData[0x12];\n      yearDays = calendarData[10];\n      i = daysInMonth - yearDays;\n      leapYearDays = (calendarData[0x13] - ((int)yearDays >> 0x1f)) - (uint)(daysInMonth < yearDays);\n      if (((int)((highPart - leapYearDays) - (uint)(lowPart < i)) < 0 ==\n           (SBORROW4(highPart,leapYearDays) != SBORROW4(highPart - leapYearDays,(uint)(lowPart < i)))) &&\n         (carry = (calendarData[0x13] - ((int)startYear >> 0x1f)) - (uint)(daysInMonth < startYear),\n         isDivisibleBy4 = lowPart < daysInMonth - startYear,\n         (int)((highPart - carry) - (uint)isDivisibleBy4) < 0 !=\n         (SBORROW4(highPart,carry) != SBORROW4(highPart - carry,(uint)isDivisibleBy4)))) goto LAB_00004a88;\n      daysInMonth = calendarData[8] - startYear;\n      carry = (calendarData[9] - ((int)startYear >> 0x1f)) - (uint)((uint)calendarData[8] < startYear);\n      if (*calendarData != 0) {\n        if ((int)((highPart - carry) - (uint)(lowPart < daysInMonth)) < 0 ==\n            (SBORROW4(highPart,carry) != SBORROW4(highPart - carry,(uint)(lowPart < daysInMonth))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        i = 0;\n        if ((int)endYear < 0) goto LAB_00004934;\nLAB_00004a14:\n        lowPart = isLeap ^ i;\n        isLeap = i;\n        if (lowPart == 1) {\n          if (i == 0) {\n            highPart = startYear - yearDays;\n          }\n          else {\n            highPart = yearDays - startYear;\n          }\n          leapYearDays = dateComponents[3];\n          *dateComponents = *dateComponents + highPart;\n          temp = totalDays + highPart;\n          FUN_00004634(dateComponents);\n          leapYearDays = dateComponents[3] - leapYearDays;\n          totalDays = totalDays + highPart;\n          if (leapYearDays != 0) {\n            if (leapYearDays < 2) {\n              if (leapYearDays == -2 || leapYearDays + 2 < 0 != SCARRY4(leapYearDays,2)) {\n                leapYearDays = 1;\n              }\n            }\n            else {\n              leapYearDays = -1;\n            }\n            highPart = leapYearDays + dateComponents[7];\n            difference = difference + leapYearDays;\n            if (highPart < 0) {\n              i = days - 1;\n              if ((i & 3) == 0) {\n                if (i == (i / 100) * 100) {\n                  highPart = 0x16d;\n                  if ((days + 0x76b) % 400 != 0) {\n                    highPart = 0x16c;\n                  }\n                }\n                else {\n                  highPart = 0x16d;\n                }\n              }\n              else {\n                highPart = 0x16c;\n              }\n            }\n            else {\n              if ((days & 3) == 0) {\n                if (days == (days / 100) * 100) {\n                  leapYearDays = 0x16d;\n                  if ((days + 0x76c) % 400 == 0) {\n                    leapYearDays = 0x16e;\n                  }\n                }\n                else {\n                  leapYearDays = 0x16e;\n                }\n              }\n              else {\n                leapYearDays = 0x16d;\n              }\n              if (leapYearDays <= highPart) {\n                highPart = highPart - leapYearDays;\n              }\n            }\n            dateComponents[7] = highPart;\n            totalDays = temp;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((highPart - carry) - (uint)(lowPart < daysInMonth)) < 0 !=\n          (SBORROW4(highPart,carry) != SBORROW4(highPart - carry,(uint)(lowPart < daysInMonth)))) {\nLAB_0000491e:\n        if ((int)((highPart - leapYearDays) - (uint)(lowPart < i)) < 0 ==\n            (SBORROW4(highPart,leapYearDays) != SBORROW4(highPart - leapYearDays,(uint)(lowPart < i))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)endYear) {\n        i = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      i = isLeap;\n      if (isLeap != 1) goto LAB_00004934;\n    }\n    days = calendarData[0x14];\n    highPart = (uint)totalDays + days;\n    leapYearDays = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)days >> 0x1f) + (uint)CARRY4((uint)totalDays,days);\n    i = 1;\n  }\n  FUN_000050f4();\n  dateComponents[8] = i;\n  dateComponents[6] = (difference + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(leapYearDays,highPart);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_difference_000047e4",
                "param_1": "dateComponents",
                "lVar1": "totalDays",
                "lVar2": "temp",
                "piVar3": "calendarData",
                "uVar4": "daysInMonth",
                "iVar5": "leapYearDays",
                "iVar6": "carry",
                "iVar7": "highPart",
                "uVar8": "yearDays",
                "uVar9": "i",
                "uVar10": "startYear",
                "iVar11": "difference",
                "uVar12": "days",
                "uVar13": "isLeap",
                "uVar14": "endYear",
                "uVar15": "lowPart",
                "bVar16": "isDivisibleBy4"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "reorder_array_00004b34",
            "code": "\nvoid reorderArray_00004b34(undefined4 *outputArray,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int *tempPtr;\n  int **extraPtr;\n  int **currentPtr;\n  int **previousPtr;\n  int **nextPtr;\n  int **newPtr;\n  bool found;\n  \n  if (size == 0) {\n    return;\n  }\n  newPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(size + -4));\n  }\n  FUN_00005790();\n  previousPtr = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    currentPtr = extraPtr;\n    DAT_1fff0db4 = newPtr;\n  }\n  else {\n    nextPtr = DAT_1fff0db4;\n    if (newPtr < DAT_1fff0db4) {\n      currentPtr = (int **)*newPtr;\n      previousPtr = (int **)((int)newPtr + (int)currentPtr);\n      found = DAT_1fff0db4 == previousPtr;\n      if (found) {\n        previousPtr = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newPtr[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newPtr;\n      if (found) {\n        previousPtr = (int **)((int)previousPtr + (int)currentPtr);\n        *newPtr = (int *)previousPtr;\n      }\n    }\n    else {\n      do {\n        previousPtr = nextPtr;\n        nextPtr = (int **)previousPtr[1];\n        if (nextPtr == (int **)0x0) break;\n      } while (nextPtr <= newPtr);\n      currentPtr = (int **)*previousPtr;\n      if ((int **)((int)previousPtr + (int)currentPtr) == newPtr) {\n        currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n        *previousPtr = (int *)currentPtr;\n        if (nextPtr == (int **)((int)previousPtr + (int)currentPtr)) {\n          tempPtr = *nextPtr;\n          previousPtr[1] = nextPtr[1];\n          currentPtr = (int **)((int)currentPtr + (int)tempPtr);\n          *previousPtr = (int *)currentPtr;\n        }\n      }\n      else if (newPtr < (int **)((int)previousPtr + (int)currentPtr)) {\n        *outputArray = 0xc;\n      }\n      else {\n        currentPtr = (int **)((int)newPtr + (int)*newPtr);\n        found = nextPtr == currentPtr;\n        if (found) {\n          currentPtr = (int **)*nextPtr;\n          nextPtr = (int **)nextPtr[1];\n        }\n        newPtr[1] = (int *)nextPtr;\n        if (found) {\n          currentPtr = (int **)((int)currentPtr + (int)*newPtr);\n          *newPtr = (int *)currentPtr;\n        }\n        previousPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  FUN_0000579c(outputArray,currentPtr,previousPtr,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "reorder_array_00004b34",
                "param_1": "outputArray",
                "param_2": "size",
                "piVar1": "tempPtr",
                "extraout_r1": "extraPtr",
                "ppiVar2": "currentPtr",
                "ppiVar3": "previousPtr",
                "ppiVar4": "nextPtr",
                "ppiVar5": "newPtr",
                "bVar6": "found"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *buffer,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *prev_ptr;\n  int diff;\n  uint temp;\n  uint *curr_ptr;\n  uint aligned_size;\n  \n  aligned_size = (size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < size)) {\n    *buffer = 0xc;\n  }\n  else {\n    FUN_00005790();\n    prev_ptr = DAT_1fff0db4;\n    for (curr_ptr = DAT_1fff0db4; curr_ptr != (uint *)0x0; curr_ptr = (uint *)curr_ptr[1]) {\n      temp = *curr_ptr - aligned_size;\n      if (-1 < (int)temp) {\n        if (0xb < temp) {\n          *curr_ptr = temp;\n          curr_ptr = (uint *)((int)curr_ptr + temp);\n          goto LAB_00004c34;\n        }\n        if (prev_ptr == curr_ptr) {\n          DAT_1fff0db4 = (uint *)curr_ptr[1];\n        }\n        if (prev_ptr != curr_ptr) {\n          prev_ptr[1] = (uint)(uint *)curr_ptr[1];\n        }\n        goto LAB_00004c42;\n      }\n      prev_ptr = curr_ptr;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(buffer,0,prev_ptr,0,param_4);\n    }\n    prev_ptr = (uint *)FUN_00000428(buffer,aligned_size);\n    if ((prev_ptr != (uint *)0xffffffff) &&\n       ((curr_ptr = (uint *)((int)prev_ptr + 3U & 0xfffffffc), prev_ptr == curr_ptr ||\n        (diff = FUN_00000428(buffer,(int)curr_ptr - (int)prev_ptr), diff != -1)))) {\nLAB_00004c34:\n      *curr_ptr = aligned_size;\nLAB_00004c42:\n      FUN_0000579c(buffer);\n      aligned_size = (int)curr_ptr + 0xbU & 0xfffffff8;\n      diff = aligned_size - (int)(curr_ptr + 1);\n      if (diff == 0) {\n        return aligned_size;\n      }\n      *(uint *)((int)curr_ptr + diff) = (int)(curr_ptr + 1) - aligned_size;\n      return aligned_size;\n    }\n    *buffer = 0xc;\n    FUN_0000579c(buffer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "buffer",
                "param_2": "size",
                "puVar1": "prev_ptr",
                "iVar2": "diff",
                "uVar3": "temp",
                "puVar4": "curr_ptr",
                "uVar5": "aligned_size"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_relocation_00004c84",
            "code": "\nvoid processRelocation_00004c84(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  dword relocationOffset;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  undefined4 arg4Copy;\n  \n  relocationOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  arg1Copy = arg1;\n  arg2Copy = arg2;\n  arg3Copy = arg3;\n  arg4Copy = arg4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(relocationOffset,*(undefined4 *)(relocationOffset + 8),arg1,&arg2Copy,arg1Copy,&arg2Copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_relocation_00004c84",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "dVar1": "relocationOffset",
                "uVar2": "arg1Copy",
                "uStack_c": "arg2Copy",
                "uStack_8": "arg3Copy",
                "uStack_4": "arg4Copy"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "decode_and_modify_data_00004cb4",
            "code": "\nuint decode_and_modify_data_00004cb4(uint data)\n\n{\n  dword offset;\n  undefined4 *array;\n  uint count;\n  undefined *pointer;\n  undefined4 var1;\n  undefined4 var2;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  array = *(undefined4 **)(offset + 8);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (array == &DAT_000079b8) {\n    array = *(undefined4 **)(offset + 4);\n  }\n  else if (array == (undefined4 *)&DAT_000079d8) {\n    array = *(undefined4 **)(offset + 8);\n  }\n  else if (array == (undefined4 *)&DAT_00007998) {\n    array = *(undefined4 **)(offset + 0xc);\n  }\n  if ((-1 < (int)(array[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(array + 3) << 0x16))) {\n    FUNC_000045e8(array[0x16]);\n  }\n  count = array[2] - 1;\n  array[2] = count;\n  if (((int)count < 0) && (((int)count < (int)array[6] || (count = data & 0xff, count == 10))))\n  {\n    data = FUN_00005404(offset,data,array,count,var1,var2);\n  }\n  else {\n    pointer = (undefined *)*array;\n    *array = pointer + 1;\n    *pointer = (char)data;\n    data = data & 0xff;\n  }\n  if ((-1 < (int)(array[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(array + 3) << 0x16))) {\n    FUNC_000045ec(array[0x16]);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "decode_and_modify_data_00004cb4",
                "param_1": "data",
                "dVar1": "offset",
                "puVar2": "array",
                "uVar3": "count",
                "puVar4": "pointer",
                "unaff_r4": "var1",
                "unaff_r5": "var2"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int input)\n\n{\n  char character;\n  dword offset;\n  int result;\n  char *currentChar;\n  char **dataArray;\n  undefined4 returnValue;\n  char *currentInput;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  dataArray = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    FUN_000042a4(offset);\n  }\n  if (dataArray == (char **)&DAT_000079b8) {\n    dataArray = *(char ***)(offset + 4);\n  }\n  else if (dataArray == (char **)&DAT_000079d8) {\n    dataArray = *(char ***)(offset + 8);\n  }\n  else if (dataArray == (char **)&DAT_00007998) {\n    dataArray = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x16))) {\n    FUNC_000045e8(dataArray[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(dataArray + 3) << 0x1c) < 0) && (dataArray[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(offset,dataArray), result == 0)) {\n    currentInput = (char *)(input + -1);\n    do {\n      while( true ) {\n        currentInput = currentInput + 1;\n        character = *currentInput;\n        currentChar = dataArray[2] + -1;\n        dataArray[2] = currentChar;\n        if (character == '\\0') {\n          if (-1 < (int)currentChar) {\n            currentInput = *dataArray;\n            returnValue = 10;\n            *dataArray = currentInput + 1;\n            *currentInput = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(offset,10,dataArray);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)currentChar < 0) && (((int)currentChar < (int)dataArray[6] || (character == '\\n')))) break;\n        currentChar = *dataArray;\n        *dataArray = currentChar + 1;\n        *currentChar = character;\n      }\n      result = FUN_00005404(offset,character,dataArray);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)dataArray[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataArray + 3) << 0x16))) {\n    FUNC_000045ec(dataArray[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "input",
                "cVar1": "character",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "currentChar",
                "ppcVar5": "dataArray",
                "uVar6": "returnValue",
                "pcVar7": "currentInput"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 inputParam,int inputIndex)\n\n{\n  int result;\n  uint updatedValue;\n  bool isPositive;\n  \n  result = FUN_00000490(inputParam,(int)*(short *)(inputIndex + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    updatedValue = *(int *)(inputIndex + 0x54) + result;\n  }\n  else {\n    updatedValue = *(ushort *)(inputIndex + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(inputIndex + 0x54) = updatedValue;\n  }\n  if (!isPositive) {\n    *(short *)(inputIndex + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "inputParam",
                "param_2": "inputIndex",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 input,int data,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    FUN_000004f2(input,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  result = FUN_00000e38(arg1,arg2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "input",
                "param_2": "data",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_flag_status_00004e26",
            "code": "\nvoid updateFlagStatus_00004e26(undefined4 flagValue,int dataPtr)\n\n{\n  int result;\n  ushort newFlag;\n  bool isError;\n  \n  result = FUN_000004f2(flagValue,(int)*(short *)(dataPtr + 0xe));\n  isError = result == -1;\n  if (isError) {\n    newFlag = *(ushort *)(dataPtr + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(dataPtr + 0x54) = result;\n    newFlag = *(ushort *)(dataPtr + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(dataPtr + 0xc) = newFlag;\n  }\n  if (!isError) {\n    *(ushort *)(dataPtr + 0xc) = newFlag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_flag_status_00004e26",
                "param_1": "flagValue",
                "param_2": "dataPtr",
                "iVar1": "result",
                "uVar2": "newFlag",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_and_subtract_00004e52",
            "code": "\nint compare_and_subtract_00004e52(byte *input_1,byte *input_2)\n\n{\n  byte current_byte;\n  uint input_byte;\n  bool is_equal_byte;\n  \n  do {\n    input_byte = (uint)*input_1;\n    current_byte = *input_2;\n    is_equal_byte = input_byte == 1;\n    if (input_byte != 0) {\n      is_equal_byte = input_byte == current_byte;\n    }\n    input_1 = input_1 + 1;\n    input_2 = input_2 + 1;\n  } while (is_equal_byte);\n  return input_byte - current_byte;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_and_subtract_00004e52",
                "param_1": "input_1",
                "param_2": "input_2",
                "bVar1": "current_byte",
                "uVar2": "input_byte",
                "bVar3": "is_equal_byte"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_and_calculate_difference_00004e66",
            "code": "\nint compareAndCalculateDifference_00004e66(byte *data,int start_index,int length)\n\n{\n  byte *data_ptr;\n  int difference;\n  byte *comparison_ptr;\n  uint data_value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    comparison_ptr = (byte *)(start_index + -1);\n    data_ptr = data;\n    do {\n      data_value = (uint)*data_ptr;\n      comparison_ptr = comparison_ptr + 1;\n      if ((data_value != *comparison_ptr) || (data_ptr + 1 == data + length)) break;\n      data_ptr = data_ptr + 1;\n    } while (data_value != 0);\n    difference = data_value - *comparison_ptr;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_and_calculate_difference_00004e66",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "pbVar1": "data_ptr",
                "iVar2": "difference",
                "pbVar3": "comparison_ptr",
                "uVar4": "data_value"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_integer_00004f84",
            "code": "\nuint parseInteger_00004f84(byte *inputString,byte **outputPointer,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  uint isNegative;\n  uint convertedDigit;\n  int compareResult;\n  uint maxValue;\n  uint dividend;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputString;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxValue = isNegative + 0x7fffffff;\n  compareResult = 0;\n  dividend = maxValue / base;\n  result = 0;\n  do {\n    convertedDigit = currentChar - 0x30;\n    if (9 < convertedDigit) {\n      if (currentChar - 0x41 < 0x1a) {\n        convertedDigit = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        convertedDigit = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)convertedDigit) break;\n    if (compareResult != -1) {\n      if ((dividend < result) || ((dividend == result && ((int)(maxValue - base * dividend) < (int)convertedDigit)))) {\n        compareResult = -1;\n      }\n      else {\n        result = result * base + convertedDigit;\n        compareResult = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (compareResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxValue;\n    if (outputPointer == (byte **)0x0) {\n      return maxValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (outputPointer == (byte **)0x0) {\n      return result;\n    }\n    if (compareResult == 0) goto LAB_00004f64;\n  }\n  inputString = nextByte + -1;\nLAB_00004f64:\n  *outputPointer = inputString;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_integer_00004f84",
                "param_1": "inputString",
                "param_2": "outputPointer",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "convertedDigit",
                "iVar5": "compareResult",
                "uVar6": "maxValue",
                "uVar7": "dividend",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *resultArray;\n  undefined4 isLeapYear;\n  uint dayOfWeek;\n  int numDaysPassed;\n  uint *dateArray;\n  int numYearsPassed;\n  uint leapYearOffset;\n  int monthIndex;\n  int daysInMonth;\n  uint isCenturyLeapYear;\n  \n  resultArray = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    numYearsPassed = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    resultArray[1] = year;\n    isCenturyLeapYear = (uint)(year % 400 == 0);\n    dateArray = resultArray;\n    do {\n      dayOfWeek = dateArray[5];\n      if (*(char *)(dateArray + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            numDaysPassed = 0;\n          }\n          else {\n            numDaysPassed = 1;\n          }\n        }\n        else {\n          numDaysPassed = 0;\n        }\n        numDaysPassed = numDaysPassed + numYearsPassed + dayOfWeek + -1;\n      }\n      else if (*(char *)(dateArray + 2) == 'D') {\n        numDaysPassed = numYearsPassed + dayOfWeek;\n      }\n      else {\n        leapYearOffset = isCenturyLeapYear;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          leapYearOffset = 1;\n        }\n        monthIndex = 0;\n        numDaysPassed = numYearsPassed;\n        while( true ) {\n          monthIndex = monthIndex + 1;\n          if ((int)dateArray[3] <= monthIndex) break;\n          numDaysPassed = numDaysPassed + *(int *)(&daysInMonthLookup + monthIndex * 4 + leapYearOffset * 0x30);\n        }\n        daysInMonth = dayOfWeek - (numDaysPassed + 4U) % 7;\n        if (daysInMonth < 0) {\n          daysInMonth = daysInMonth + 7;\n        }\n        for (daysInMonth = (dateArray[4] - 1) * 7 + daysInMonth;\n            *(int *)(&daysInMonthLookup + monthIndex * 4 + leapYearOffset * 0x30) <= daysInMonth; daysInMonth = daysInMonth + -7) {\n        }\n        numDaysPassed = numDaysPassed + daysInMonth;\n      }\n      dayOfWeek = dateArray[10] + numDaysPassed * 0x15180 + dateArray[6];\n      dateArray[8] = dayOfWeek;\n      dateArray[9] = (int)dayOfWeek >> 0x1f;\n      dateArray = dateArray + 10;\n    } while (resultArray + 0x14 != dateArray);\n    dayOfWeek = resultArray[9];\n    isCenturyLeapYear = resultArray[0x13];\n    *resultArray = (uint)((int)((dayOfWeek - isCenturyLeapYear) - (uint)(resultArray[8] < resultArray[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isCenturyLeapYear) !=\n                    SBORROW4(dayOfWeek - isCenturyLeapYear,(uint)(resultArray[8] < resultArray[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "resultArray",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeek",
                "iVar4": "numDaysPassed",
                "puVar5": "dateArray",
                "iVar6": "numYearsPassed",
                "uVar7": "leapYearOffset",
                "iVar8": "monthIndex",
                "iVar9": "daysInMonth",
                "uVar10": "isCenturyLeapYear",
                "UNK_00007b98": "daysInMonthLookup"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_data_pointer_000050f4",
            "code": "\nundefined * get_data_pointer_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_data_pointer_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_configuration_00005100",
            "code": "\nvoid parseConfiguration_00005100(void)\n\n{\n  dword offset;\n  int result;\n  char *configString;\n  int returnValue;\n  int parseReturnValue;\n  undefined dataType;\n  char *nextToken;\n  bool isLocalAddress;\n  ushort *value1;\n  int *position1;\n  ushort *value2;\n  int *position2;\n  ushort hour;\n  ushort minute;\n  ushort second;\n  ushort day;\n  ushort month;\n  ushort year;\n  int position;\n  char *token [2];\n  \n  offset = Elf32_Rel_ARRAY[16].r_offset;\n  result = FUN_000056b0();\n  configString = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (configString == (char *)0x0) {\n    Elf32_Rel_ARRAY[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = configString;\n    DAT_1fff0ddc = configString;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (returnValue = FUN_00004e52(), returnValue != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    returnValue = FUN_00005ecc(configString);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,returnValue + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,configString);\n    }\n    if (*configString == ':') {\n      configString = configString + 1;\n    }\n    returnValue = FUN_00005e68(configString,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&position);\n    if (0 < returnValue) {\n      nextToken = configString + position;\n      if (configString[position] == '-') {\n        nextToken = nextToken + 1;\n        returnValue = -1;\n      }\n      else {\n        if (configString[position] == '+') {\n          nextToken = nextToken + 1;\n        }\n        returnValue = 1;\n      }\n      minute = 0;\n      second = 0;\n      value1 = &minute;\n      position1 = &position;\n      value2 = &second;\n      position2 = &position;\n      parseReturnValue = FUN_00005e68(nextToken,\"%hu%n:%hu%n:%hu%n\",&hour,&position,&minute,&position,\n                           &second,&position);\n      if (0 < parseReturnValue) {\n        *(uint *)(result + 0x28) =\n             ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * returnValue;\n        Elf32_Rel_ARRAY[28].r_info = (dword)&DAT_1fff0dc7;\n        nextToken = nextToken + position;\n        returnValue = FUN_00005e68(nextToken,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&position,value1,position1,value2,\n                             position2);\n        if (returnValue < 1) {\n          Elf32_Rel_ARRAY[29].r_offset = Elf32_Rel_ARRAY[28].r_info;\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY[29].r_offset = (dword)&DAT_1fff0dbc;\n          configString = nextToken + position;\n          if (nextToken[position] == '-') {\n            configString = configString + 1;\n            returnValue = -1;\n          }\n          else {\n            if (nextToken[position] == '+') {\n              configString = configString + 1;\n            }\n            returnValue = 1;\n          }\n          hour = 0;\n          minute = 0;\n          second = 0;\n          position = 0;\n          parseReturnValue = FUN_00005e68(configString,\"%hu%n:%hu%n:%hu%n\",&hour,&position,&minute,&position,\n                               &second,&position);\n          if (parseReturnValue < 1) {\n            returnValue = *(int *)(result + 0x28) + -0xe10;\n          }\n          else {\n            returnValue = ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * returnValue;\n          }\n          *(int *)(result + 0x50) = returnValue;\n          configString = configString + position;\n          isLocalAddress = false;\n          returnValue = result;\n          while( true ) {\n            if (*configString == ',') {\n              configString = configString + 1;\n            }\n            if (*configString == 'M') {\n              parseReturnValue = FUN_00005e68(configString,\"M%hu%n.%hu%n.%hu%n\",&day,&position,&month,\n                                   &position,&year,&position);\n              if (parseReturnValue != 3) {\n                return;\n              }\n              if (0xb < day - 1) {\n                return;\n              }\n              if (4 < month - 1) {\n                return;\n              }\n              if (6 < year) {\n                return;\n              }\n              *(uint *)(returnValue + 0xc) = (uint)day;\n              *(uint *)(returnValue + 0x10) = (uint)month;\n              *(undefined *)(returnValue + 8) = 0x4d;\n              *(uint *)(returnValue + 0x14) = (uint)year;\n              nextToken = configString + position;\n            }\n            else {\n              if (*configString == 'J') {\n                configString = configString + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              year = FUN_00005fd8(configString,token,10);\n              nextToken = token[0];\n              if (token[0] == configString) {\n                if (isLocalAddress) {\n                  *(undefined *)(result + 0x30) = 0x4d;\n                  *(undefined4 *)(result + 0x34) = 0xb;\n                  *(undefined4 *)(result + 0x38) = 1;\n                  *(undefined4 *)(result + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(result + 8) = 0x4d;\n                  *(undefined4 *)(result + 0xc) = 3;\n                  *(undefined4 *)(result + 0x10) = 2;\n                  *(undefined4 *)(result + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(returnValue + 8) = dataType;\n                *(uint *)(returnValue + 0x14) = (uint)year;\n              }\n            }\n            hour = 2;\n            minute = 0;\n            second = 0;\n            position = 0;\n            if (*nextToken == '/') {\n              FUN_00005e68(nextToken,&DAT_00007a85,&hour,&position,&minute,&position,&second,\n                           &position);\n            }\n            *(uint *)(returnValue + 0x18) =\n                 (uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second;\n            returnValue = returnValue + 0x28;\n            configString = nextToken + position;\n            if (isLocalAddress) break;\n            isLocalAddress = true;\n          }\n          FUN_00004f98(*(undefined4 *)(result + 4));\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(result + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_configuration_00005100",
                "dVar1": "offset",
                "iVar2": "result",
                "pcVar3": "configString",
                "iVar4": "returnValue",
                "iVar5": "parseReturnValue",
                "uVar6": "dataType",
                "pcVar7": "nextToken",
                "bVar8": "isLocalAddress",
                "puVar9": "value1",
                "piVar10": "position1",
                "puVar11": "value2",
                "piVar12": "position2",
                "local_3c": "hour",
                "local_3a": "minute",
                "local_38": "second",
                "local_36": "day",
                "local_34": "month",
                "local_32": "year",
                "local_30": "position",
                "local_2c": "token",
                "Elf32_Rel_ARRAY_1fff0200": "Elf32_Rel_ARRAY"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int inputData,uint dataSize,int *buffer,undefined4 param)\n\n{\n  int sizeDifference;\n  uint ushortValue;\n  undefined *ptrToBuffer;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(inputData + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(inputData + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(inputData + 0xc);\n  }\n  buffer[2] = buffer[6];\n  ushortValue = (uint)*(ushort *)(buffer + 3);\n  sizeDifference = ushortValue << 0x1c;\n  if (((sizeDifference < 0) && (ushortValue = buffer[4], ushortValue != 0)) ||\n     (sizeDifference = FUN_000054a8(inputData,buffer,sizeDifference,ushortValue,param), sizeDifference == 0)) {\n    sizeDifference = *buffer - buffer[4];\n    dataSize = dataSize & 0xff;\n    if ((sizeDifference < buffer[5]) || (sizeDifference = FUN_00004158(inputData,buffer), sizeDifference == 0)) {\n      buffer[2] = buffer[2] + -1;\n      ptrToBuffer = (undefined *)*buffer;\n      *buffer = (int)(ptrToBuffer + 1);\n      *ptrToBuffer = byteToWrite;\n      if (buffer[5] != sizeDifference + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return dataSize;\n        }\n        if (dataSize != 10) {\n          return dataSize;\n        }\n      }\n      sizeDifference = FUN_00004158(inputData,buffer);\n      if (sizeDifference == 0) {\n        return dataSize;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "inputData",
                "param_2": "dataSize",
                "param_3": "buffer",
                "param_4": "param",
                "iVar1": "sizeDifference",
                "uVar2": "ushortValue",
                "puVar3": "ptrToBuffer",
                "(char)param_2": "byteToWrite"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_and_validate_data_000054a8",
            "code": "\nuint process_and_validate_data_000054a8(undefined4 *output_param,undefined4 *input_param)\n\n{\n  ushort temp_ushort_1;\n  dword temp_dword;\n  ushort temp_ushort_2;\n  uint temp_uint_1;\n  uint temp_uint_2;\n  \n  temp_dword = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input_param == &DAT_000079b8) {\n    input_param = *(undefined4 **)(temp_dword + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_000079d8) {\n    input_param = *(undefined4 **)(temp_dword + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_00007998) {\n    input_param = *(undefined4 **)(temp_dword + 0xc);\n  }\n  temp_uint_1 = (uint)*(ushort *)(input_param + 3);\n  temp_ushort_2 = *(ushort *)(input_param + 3);\n  if (-1 < (int)(temp_uint_1 << 0x1c)) {\n    if (-1 < (int)(temp_uint_1 << 0x1b)) {\n      *output_param = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp_uint_1 << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          FUN_00004b34(output_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((input_param[4] == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    FUN_00005700(output_param,input_param);\n  }\n  temp_ushort_1 = *(ushort *)(input_param + 3);\n  temp_uint_1 = (uint)temp_ushort_1;\n  temp_ushort_2 = *(ushort *)(input_param + 3);\n  temp_uint_2 = temp_uint_1 & 1;\n  if ((temp_ushort_1 & 1) == 0) {\n    if (-1 < (int)(temp_uint_1 << 0x1e)) {\n      temp_uint_2 = input_param[5];\n    }\n    input_param[2] = temp_uint_2;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -input_param[5];\n  }\n  if (input_param[4] != 0) {\n    return 0;\n  }\n  if ((temp_ushort_1 & 0x80) == 0) {\n    return temp_uint_1 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input_param + 3) = temp_ushort_2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_and_validate_data_000054a8",
                "param_1": "output_param",
                "param_2": "input_param",
                "uVar1": "temp_ushort_1",
                "dVar2": "temp_dword",
                "uVar3": "temp_ushort_2",
                "uVar4": "temp_uint_1",
                "uVar5": "temp_uint_2"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_store_remainder_00005584",
            "code": "\nvoid divideAndStoreRemainder_00005584(uint *quotientPointer,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotientPointer = quotient;\n  quotientPointer[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_store_remainder_00005584",
                "param_1": "quotientPointer",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_key_value_pair_0000562c",
            "code": "\nint find_key_value_pair_0000562c(undefined4 param,char *string,int *result)\n\n{\n  char current_char;\n  int *ptr_rel_offset;\n  int result_value;\n  char *current_ptr;\n  int *ptr_rel_offset_iter;\n  int offset;\n  \n  FUN_00005fec();\n  current_ptr = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_ptr;\n      if (current_char == '\\0') {\n        offset = (int)current_ptr - (int)string;\n        ptr_rel_offset = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          ptr_rel_offset_iter = ptr_rel_offset;\n          if (*ptr_rel_offset_iter == 0) break;\n          result_value = FUN_00004e66(*ptr_rel_offset_iter,string,offset);\n          ptr_rel_offset = ptr_rel_offset_iter + 1;\n          if ((result_value == 0) && (result_value = *ptr_rel_offset_iter, *(char *)(result_value + offset) == '=')) {\n            *result = (int)((int)ptr_rel_offset_iter - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param);\n            return result_value + offset + 1;\n          }\n        }\n        break;\n      }\n      current_ptr = current_ptr + 1;\n    } while (current_char != '=');\n  }\n  FUN_00005ff8(param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_key_value_pair_0000562c",
                "param_1": "param",
                "param_2": "string",
                "param_3": "result",
                "cVar1": "current_char",
                "piVar2": "ptr_rel_offset",
                "iVar3": "result_value",
                "pcVar4": "current_ptr",
                "piVar5": "ptr_rel_offset_iter",
                "iVar6": "offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "process_data_000056a0",
            "code": "\nvoid processData_000056a0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  \n  tempVar1 = input2;\n  tempVar2 = input3;\n  FUN_0000562c(input1,input2,&tempVar1,input4,input1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "process_data_000056a0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_c": "tempVar1",
                "uStack_8": "tempVar2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_valid_address_000056b0",
            "code": "\nundefined4 get_valid_address_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_valid_address_000056b0"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_permissions_000056b8",
            "code": "\nundefined4 checkPermissions_000056b8(undefined4 param1,int param2,undefined4 *result,uint *flag)\n\n{\n  int returnValue;\n  undefined4 permission;\n  undefined tempBuffer [4];\n  uint value;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (returnValue = FUN_00000514(param1,(int)*(short *)(param2 + 0xe),tempBuffer), returnValue < 0)) {\n    *flag = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *flag = (uint)((value & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_000056f8:\n  *result = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_permissions_000056b8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "result",
                "param_4": "flag",
                "iVar1": "returnValue",
                "uVar2": "permission",
                "auStack_68": "tempBuffer",
                "local_64": "value"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_parameter_00005700",
            "code": "\nvoid processParameter_00005700(int inputValue,int *outputArray)\n\n{\n  ushort result1;\n  int result2;\n  int tempValue1;\n  int *tempArray;\n  \n  if (-1 < (int)((uint)*(ushort *)(outputArray + 3) << 0x1e)) {\n    tempValue1 = inputValue;\n    tempArray = outputArray;\n    result1 = FUN_000056b8(inputValue,outputArray,&tempValue1,&tempArray);\n    result2 = FUN_00004bd0(inputValue,tempValue1);\n    if (result2 != 0) {\n      *(undefined **)(inputValue + 0x28) = &DAT_0000423d;\n      *outputArray = result2;\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x80;\n      outputArray[5] = tempValue1;\n      outputArray[4] = result2;\n      if ((tempArray != (int *)0x0) &&\n         (result2 = FUN_00000534(inputValue,(int)*(short *)((int)outputArray + 0xe)), result2 != 0)) {\n        *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(outputArray + 3) = result1 | *(ushort *)(outputArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(outputArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfffc | 2;\n  }\n  *outputArray = (int)outputArray + 0x47;\n  outputArray[4] = (int)outputArray + 0x47;\n  outputArray[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_parameter_00005700",
                "param_1": "inputValue",
                "param_2": "outputArray",
                "uVar1": "result1",
                "iVar2": "result2",
                "local_18": "tempValue1",
                "local_14": "tempArray"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "initialize_relocation_00005780",
            "code": "\nvoid initialize_relocation_00005780(undefined4 offset)\n\n{\n  FUN_00004b34(relocation_array[16].r_offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "initialize_relocation_00005780",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "update_and_return_character_000057a8",
            "code": "\nint updateAndReturnCharacter_000057a8(undefined4 param1,int character,undefined4 *dataArray)\n\n{\n  int index;\n  undefined *pointer;\n  \n  index = dataArray[2] + -1;\n  dataArray[2] = index;\n  if ((index < 0) && ((index < (int)dataArray[6] || (character == 10)))) {\n    index = FUN_00005404();\n    return index;\n  }\n  pointer = (undefined *)*dataArray;\n  *dataArray = pointer + 1;\n  *pointer = (char)character;\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "update_and_return_character_000057a8",
                "param_1": "param1",
                "param_2": "character",
                "param_3": "dataArray",
                "iVar1": "index",
                "puVar2": "pointer"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "iterate_and_process_000057d2",
            "code": "\nint iterateAndProcess_000057d2(undefined4 input1,undefined4 input2,undefined *data,int length)\n\n{\n  int returnValue;\n  undefined *endPtr;\n  int currentPos;\n  \n  endPtr = data + length;\n  currentPos = length;\n  do {\n    if (data == endPtr) {\n      return 0;\n    }\n    returnValue = FUN_000057a8(input1,*data,input2,length,currentPos);\n    length = returnValue + 1;\n    data = data + 1;\n  } while (length != 0);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "iterate_and_process_000057d2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "returnValue",
                "puVar2": "endPtr",
                "iVar3": "currentPos"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "parse_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint parseData_000057f8(int dataPtr,undefined4 *paramPtr,byte *bytePtr,int *intPtr)\n\n{\n  int index;\n  int result;\n  int *intPtr2;\n  bool isNumeric;\n  byte *bytePtr2;\n  int unaff_r7;\n  byte *bytePtr3;\n  int *intPtr3;\n  uint modifiers;\n  int precision;\n  undefined4 uStack_80;\n  int arg;\n  int totalLength;\n  byte formatChar;\n  undefined flag1;\n  undefined flag2;\n  undefined flag3;\n  undefined4 flag4;\n  \n  if ((dataPtr != 0) && (*(int *)(dataPtr + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (paramPtr == &DAT_000079b8) {\n    paramPtr = *(undefined4 **)(dataPtr + 4);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_000079d8) {\n    paramPtr = *(undefined4 **)(dataPtr + 8);\n  }\n  else if (paramPtr == (undefined4 *)&DAT_00007998) {\n    paramPtr = *(undefined4 **)(dataPtr + 0xc);\n  }\n  if ((-1 < (int)(paramPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16))) {\n    FUNC_000045e8(paramPtr[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x1c)) || (paramPtr[4] == 0)) &&\n     (index = FUN_000054a8(dataPtr,paramPtr), index != 0)) {\n    if ((-1 < (int)(paramPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16)))\n    {\n      FUNC_000045ec(paramPtr[0x16]);\n    }\n    return -1;\n  }\n  totalLength = 0;\n  flag1 = 0x20;\n  flag2 = 0x30;\n  bytePtr3 = bytePtr;\n  intPtr3 = intPtr;\nLAB_0000588e:\n  bytePtr2 = bytePtr3;\n  if (*bytePtr2 != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  bytePtr3 = bytePtr2 + 1;\n  if (*bytePtr2 == 0x25) {\nLAB_0000589a:\n    index = (int)bytePtr2 - (int)bytePtr;\n    if (index != 0) {\n      result = FUN_000057d2(dataPtr,paramPtr,bytePtr,index);\n      if (result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(paramPtr[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(paramPtr + 3) << 0x16))) {\n          FUNC_000045ec(paramPtr[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(paramPtr + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalLength;\n      }\n      totalLength = totalLength + index;\n    }\n    if (*bytePtr2 == 0) goto LAB_00005a06;\n    precision = -1;\n    uStack_80 = 0;\n    modifiers = 0;\n    arg = 0;\n    flag3 = 0;\n    flag4 = 0;\n    bytePtr3 = bytePtr2 + 1;\n    while( true ) {\n      bytePtr2 = bytePtr3 + 1;\n      index = FUN_00006010(\"#-0+ \",*bytePtr3,5);\n      if (index == 0) break;\n      modifiers = 1 << (index - 0x7bfcU & 0xff) | modifiers;\n      bytePtr3 = bytePtr2;\n    }\n    if ((int)(modifiers << 0x1b) < 0) {\n      flag3 = 0x20;\n    }\n    if ((int)(modifiers << 0x1c) < 0) {\n      flag3 = 0x2b;\n    }\n    if (*bytePtr3 == 0x2a) {\n      intPtr2 = intPtr3 + 1;\n      arg = *intPtr3;\n      intPtr3 = intPtr2;\n      if (arg < 0) {\n        arg = -arg;\n        modifiers = modifiers | 2;\n      }\n    }\n    else {\n      isNumeric = false;\n      index = arg;\n      bytePtr2 = bytePtr3;\n      while( true ) {\n        if (9 < *bytePtr2 - 0x30) break;\n        index = index * 10 + (*bytePtr2 - 0x30);\n        isNumeric = true;\n        bytePtr2 = bytePtr2 + 1;\n      }\n      if (isNumeric) {\n        arg = index;\n      }\n    }\n    if (*bytePtr2 == 0x2e) {\n      if (bytePtr2[1] == 0x2a) {\n        precision = *intPtr3;\n        if (precision < 0) {\n          precision = -1;\n        }\n        bytePtr2 = bytePtr2 + 2;\n        intPtr3 = intPtr3 + 1;\n      }\n      else {\n        isNumeric = false;\n        precision = 0;\n        index = 0;\n        while( true ) {\n          bytePtr2 = bytePtr2 + 1;\n          if (9 < *bytePtr2 - 0x30) break;\n          index = index * 10 + (*bytePtr2 - 0x30);\n          isNumeric = true;\n        }\n        if (isNumeric) {\n          precision = index;\n        }\n      }\n    }\n    index = FUN_00006010(&DAT_00007c02,*bytePtr2,3);\n    if (index != 0) {\n      modifiers = modifiers | 0x40 << (index - 0x7c02U & 0xff);\n      bytePtr2 = bytePtr2 + 1;\n    }\n    bytePtr = bytePtr2 + 1;\n    formatChar = *bytePtr2;\n    index = FUN_00006010(\"efgEFG\",formatChar,6);\n    if (index == 0) {\n      unaff_r7 = FUN_00005b34(dataPtr,&modifiers,paramPtr,0x57d3,&intPtr3);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      intPtr3 = (int *)(((int)intPtr3 + 7U & 0xfffffff8) + 8);\n    }\n    totalLength = totalLength + unaff_r7;\n    bytePtr3 = bytePtr;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "parse_data_000057f8",
                "param_1": "dataPtr",
                "param_2": "paramPtr",
                "param_3": "bytePtr",
                "param_4": "intPtr",
                "iVar1": "index",
                "iVar2": "result",
                "piVar3": "intPtr2",
                "bVar4": "isNumeric",
                "pbVar5": "bytePtr2",
                "pbVar6": "bytePtr3",
                "local_8c": "intPtr3",
                "local_88": "modifiers",
                "local_84": "precision",
                "local_7c": "arg",
                "local_74": "totalLength",
                "local_70": "formatChar",
                "local_6f": "flag1",
                "local_6e": "flag2",
                "local_45": "flag3",
                "local_30": "flag4"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_new_size_00005a58",
            "code": "\nundefined4\ncalculateNewSize_00005a58(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int i;\n  undefined4 result;\n  int returnValue;\n  uint maxSize;\n  uint count;\n  bool isFlagSet;\n  \n  maxSize = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxSize = data[2];\n  }\n  *output = maxSize;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxSize + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (i = 0; i < (int)(data[3] - *output); i = i + 1) {\n      returnValue = (*callback)(input,param,(int)data + 0x19,1);\n      if (returnValue == -1) goto LAB_00005afc;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)data + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)data + maxSize + 0x44) = *(undefined *)((int)data + 0x45);\n    maxSize = maxSize + 2;\n  }\n  i = (*callback)(input,param,(int)data + 0x43,maxSize);\n  if (i == -1) {\nLAB_00005afc:\n    result = 0xffffffff;\n  }\n  else {\n    maxSize = data[3];\n    isFlagSet = (*data & 6) == 4;\n    if (isFlagSet) {\n      maxSize = maxSize - *output;\n    }\n    if (isFlagSet) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxSize = maxSize + (data[2] - data[4]);\n    }\n    for (count = 0; maxSize != count; count = count + 1) {\n      i = (*callback)(input,param,(int)data + 0x1a,1);\n      if (i == -1) goto LAB_00005afc;\n    }\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_new_size_00005a58",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "result",
                "iVar3": "returnValue",
                "uVar4": "maxSize",
                "uVar5": "count",
                "bVar6": "isFlagSet"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_data_00005b34",
            "code": "\ncode * formatData_00005b34(undefined4 arg1,uint *arg2,undefined4 arg3,code *arg4,uint **arg5\n                   )\n\n{\n  bool isLessThanOrEqual;\n  byte byteVal;\n  int returnValue;\n  code *functionPtr;\n  char *charSet;\n  int loopCounter;\n  char *charPtr;\n  uint uVar8;\n  uint *pointerToUint;\n  uint uintVal;\n  uint **pointerToPointerOfUint;\n  char **pointerToPointerOfChar;\n  uint uintVal2;\n  char *charPtr2;\n  code *localFunctionPtr;\n  \n  byteVal = *(byte *)(arg2 + 6);\n  charPtr = (char *)((int)arg2 + 0x43);\n  localFunctionPtr = arg4;\n  if (0x78 < byteVal) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)arg2 + 0x42) = byteVal;\nLAB_00005bdc:\n    charPtr = (char *)((int)arg2 + 0x42);\n    uVar8 = 1;\nLAB_00005d28:\n    arg2[4] = uVar8;\n    *(undefined *)((int)arg2 + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byteVal < 99) {\n    if (byteVal == 0) goto LAB_00005d06;\n    if (byteVal == 0x58) {\n      charSet = \"0123456789ABCDEF\";\n      *(undefined *)((int)arg2 + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byteVal) {\n  case 99:\n    uVar8 = **arg5;\n    *arg5 = *arg5 + 1;\n    *(char *)((int)arg2 + 0x42) = (char)uVar8;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    uintVal = *arg2;\n    pointerToUint = *arg5;\n    if ((int)(uintVal << 0x18) < 0) {\n      uVar8 = *pointerToUint;\n      *arg5 = pointerToUint + 1;\n    }\n    else {\n      uVar8 = *pointerToUint;\n      *arg5 = pointerToUint + 1;\n      if ((uintVal & 0x40) != 0) {\n        uVar8 = (uint)(short)uVar8;\n      }\n    }\n    if ((int)uVar8 < 0) {\n      uVar8 = -uVar8;\n      *(undefined *)((int)arg2 + 0x43) = 0x2d;\n    }\n    charSet = \"0123456789ABCDEF\";\n    uintVal = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    pointerToPointerOfUint = (uint **)*arg5;\n    uintVal = *arg2;\n    uVar8 = arg2[5];\n    *arg5 = (uint *)(pointerToPointerOfUint + 1);\n    pointerToUint = *pointerToPointerOfUint;\n    if (((int)(uintVal << 0x18) < 0) || (-1 < (int)(uintVal << 0x19))) {\n      *pointerToUint = uVar8;\n    }\n    else {\n      *(short *)pointerToUint = (short)uVar8;\n    }\nLAB_00005d06:\n    arg2[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    pointerToUint = *arg5;\n    uVar8 = *arg2;\n    *arg5 = pointerToUint + 1;\n    if (((int)(uVar8 << 0x18) < 0) || (-1 < (int)(uVar8 << 0x19))) {\n      uVar8 = *pointerToUint;\n    }\n    else {\n      uVar8 = (uint)*(ushort *)pointerToUint;\n    }\n    charSet = \"0123456789ABCDEF\";\n    if (byteVal == 0x6f) {\n      uintVal = 8;\n    }\n    else {\n      uintVal = 10;\n    }\n    break;\n  case 0x70:\n    *arg2 = *arg2 | 0x20;\n  case 0x78:\n    charSet = \"0123456789abcdef\";\n    *(undefined *)((int)arg2 + 0x45) = 0x78;\nLAB_00005ca8:\n    uintVal = *arg2;\n    uVar8 = **arg5;\n    *arg5 = *arg5 + 1;\n    if ((-1 < (int)(uintVal << 0x18)) && ((int)(uintVal << 0x19) < 0)) {\n      uVar8 = uVar8 & 0xffff;\n    }\n    if ((int)(uintVal << 0x1f) < 0) {\n      *arg2 = uintVal | 0x20;\n    }\n    if (uVar8 == 0) {\n      *arg2 = *arg2 & 0xffffffdf;\n    }\n    uintVal = 0x10;\n    break;\n  case 0x73:\n    pointerToPointerOfChar = (char **)*arg5;\n    *arg5 = (uint *)(pointerToPointerOfChar + 1);\n    charPtr = *pointerToPointerOfChar;\n    returnValue = FUN_00006010(charPtr,0,arg2[1],pointerToPointerOfChar,arg1,arg2,arg3);\n    if (returnValue != 0) {\n      arg2[1] = returnValue - (int)charPtr;\n    }\n    uVar8 = arg2[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)arg2 + 0x43) = 0;\nLAB_00005c36:\n  uintVal2 = arg2[1];\n  arg2[2] = uintVal2;\n  if (-1 < (int)uintVal2) {\n    *arg2 = *arg2 & 0xfffffffb;\n  }\n  charPtr2 = charPtr;\n  if ((uVar8 != 0) || (uintVal2 != 0)) {\n    do {\n      charPtr2 = charPtr2 + -1;\n      *charPtr2 = charSet[uVar8 - uintVal * (uVar8 / uintVal)];\n      isLessThanOrEqual = uintVal <= uVar8;\n      uVar8 = uVar8 / uintVal;\n    } while (isLessThanOrEqual);\n  }\n  if (((uintVal == 8) && ((int)(*arg2 << 0x1f) < 0)) && ((int)arg2[1] <= (int)arg2[4])) {\n    charPtr2[-1] = '0';\n    charPtr2 = charPtr2 + -1;\n  }\n  arg2[4] = (int)charPtr - (int)charPtr2;\n  charPtr = charPtr2;\nLAB_00005c84:\n  returnValue = FUN_00005a58(arg1,arg2,&localFunctionPtr,arg3,arg4);\n  if ((returnValue == -1) || (returnValue = (*arg4)(arg1,arg3,charPtr,arg2[4]), returnValue == -1)) {\nLAB_00005c98:\n    functionPtr = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*arg2 << 0x1e) < 0) {\n      for (returnValue = 0; returnValue < (int)(arg2[3] - (int)localFunctionPtr); returnValue = returnValue + 1) {\n        loopCounter = (*arg4)(arg1,arg3,(int)arg2 + 0x19,1);\n        if (loopCounter == -1) goto LAB_00005c98;\n      }\n    }\n    functionPtr = (code *)arg2[3];\n    if ((int)(code *)arg2[3] < (int)localFunctionPtr) {\n      functionPtr = localFunctionPtr;\n    }\n  }\n  return functionPtr;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_data_00005b34",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "bVar1": "isLessThanOrEqual",
                "bVar2": "byteVal",
                "iVar3": "returnValue",
                "pcVar4": "functionPtr",
                "pcVar5": "charSet",
                "iVar6": "loopCounter",
                "pcVar7": "charPtr",
                "puVar9": "pointerToUint",
                "uVar10": "uintVal",
                "ppuVar11": "pointerToPointerOfUint",
                "ppcVar12": "pointerToPointerOfChar",
                "uVar13": "uintVal2",
                "pcVar14": "charPtr2",
                "local_24": "localFunctionPtr"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "decode_data_00005e10",
            "code": "\nuint decode_data_00005e10(int data_ptr,byte **ptr_to_data)\n\n{\n  int result;\n  uint decoded_byte;\n  byte *current_byte;\n  \n  if ((data_ptr != 0) && (*(int *)(data_ptr + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (ptr_to_data == (byte **)&DAT_000079b8) {\n    ptr_to_data = *(byte ***)(data_ptr + 4);\n  }\n  else if (ptr_to_data == (byte **)&DAT_000079d8) {\n    ptr_to_data = *(byte ***)(data_ptr + 8);\n  }\n  else if (ptr_to_data == (byte **)&DAT_00007998) {\n    ptr_to_data = *(byte ***)(data_ptr + 0xc);\n  }\n  result = FUN_00006768(data_ptr,ptr_to_data);\n  if (result == 0) {\n    ptr_to_data[1] = ptr_to_data[1] + -1;\n    current_byte = *ptr_to_data;\n    *ptr_to_data = current_byte + 1;\n    decoded_byte = (uint)*current_byte;\n  }\n  else {\n    decoded_byte = 0xffffffff;\n  }\n  return decoded_byte;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "decode_data_00005e10",
                "param_1": "data_ptr",
                "param_2": "ptr_to_data",
                "iVar1": "result",
                "uVar2": "decoded_byte",
                "pbVar3": "current_byte"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "extract_and_process_relocation_00005e68",
            "code": "\nvoid extract_and_process_relocation_00005e68(undefined4 relocation_address,undefined4 source_address,undefined4 destination_address,undefined4 size)\n\n{\n  undefined4 relocation_address_copy;\n  undefined4 result;\n  undefined2 section_length;\n  undefined2 initial_value;\n  undefined4 relocation_address_copy1;\n  undefined4 result_copy;\n  undefined *string;\n  undefined4 zero;\n  undefined4 zero_copy;\n  undefined4 destination_address_copy;\n  undefined4 size_copy;\n  \n  section_length = 0x204;\n  relocation_address_copy = relocation_address;\n  relocation_address_copy1 = relocation_address;\n  destination_address_copy = destination_address;\n  size_copy = size;\n  result = FUN_00005ecc();\n  string = &LAB_00004dea_1;\n  zero = 0;\n  zero_copy = 0;\n  initial_value = 0xffff;\n  result_copy = result;\n  FUN_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&relocation_address_copy,source_address,&destination_address_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "extract_and_process_relocation_00005e68",
                "param_1": "relocation_address",
                "param_2": "source_address",
                "param_3": "destination_address",
                "param_4": "size",
                "local_80": "relocation_address_copy",
                "local_7c": "result",
                "local_74": "section_length",
                "local_72": "initial_value",
                "local_70": "relocation_address_copy1",
                "local_6c": "result_copy",
                "local_5c": "string",
                "local_4c": "zero",
                "local_38": "zero_copy",
                "uStack_8": "destination_address_copy",
                "uStack_4": "size_copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "get_string_length_00005ecc",
            "code": "\nchar * get_string_length_00005ecc(char *string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "get_string_length_00005ecc",
                "param_1": "string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *result,byte *input,byte **nextInput,uint base)\n\n{\n  uint parsedNumber;\n  uint ch;\n  byte isNegative;\n  int status;\n  uint digitValue;\n  uint maxParsedValue;\n  byte *currentInput;\n  byte *nextInput;\n  \n  nextInput = input;\n  do {\n    currentInput = nextInput;\n    nextInput = currentInput + 1;\n    ch = (uint)*currentInput;\n    isNegative = (&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextInput;\n    isNegative = 1;\n    nextInput = currentInput + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextInput;\n    nextInput = currentInput + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00005f26;\n  if ((*nextInput & 0xdf) == 0x58) {\n    ch = (uint)nextInput[1];\n    base = 0x10;\n    nextInput = nextInput + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxParsedValue = 0xffffffff / base;\n  parsedNumber = 0;\n  do {\n    digitValue = ch - 0x30;\n    if (9 < digitValue) {\n      if (ch - 0x41 < 0x1a) {\n        digitValue = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digitValue = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (((status < 0) || (maxParsedValue < parsedNumber)) ||\n       ((maxParsedValue == parsedNumber && ((int)~(base * maxParsedValue) < (int)digitValue)))) {\n      status = -1;\n    }\n    else {\n      parsedNumber = parsedNumber * base + digitValue;\n      status = 1;\n    }\n    ch = (uint)*nextInput;\n    nextInput = nextInput + 1;\n  } while( true );\n  if (status < 0) {\n    *result = 0x22;\n    parsedNumber = 0xffffffff;\n    if (nextInput == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      parsedNumber = -parsedNumber;\n    }\n    if (nextInput == (byte **)0x0) {\n      return parsedNumber;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = nextInput + -1;\nLAB_00005fb8:\n  *nextInput = input;\n  return parsedNumber;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "nextInput",
                "param_4": "base",
                "uVar1": "parsedNumber",
                "uVar2": "ch",
                "bVar3": "isNegative",
                "iVar4": "status",
                "uVar5": "digitValue",
                "uVar6": "maxParsedValue",
                "pbVar7": "currentInput",
                "pbVar8": "nextInput"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "call_elf32_rel_function_00005fd8",
            "code": "\nvoid callElf32RelFunction_00005fd8(undefined4 offset,undefined4 param1,undefined4 param2)\n\n{\n  FUN_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,offset,param1,param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "call_elf32_rel_function_00005fd8",
                "param_1": "offset",
                "param_2": "param1",
                "param_3": "param2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *data,uint byte_to_find,uint data_size)\n\n{\n  byte current_byte;\n  char byte_found;\n  char byte_1;\n  char byte_2;\n  char byte_3;\n  byte *next_byte;\n  uint *current_word;\n  byte *matching_byte;\n  uint byte_remainder;\n  uint unrolled_data_size;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool byte_nonzero_1;\n  bool byte_nonzero_2;\n  bool byte_nonzero_3;\n  bool byte_nonzero_4;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)data_size < 0x10) {\njoined_r0x00006070:\n    do {\n      if (data_size == 0) {\n        return (byte *)0x0;\n      }\n      current_word = (uint *)((int)data + 1);\n      current_byte = *(byte *)data;\n      data_size = data_size - 1;\n      data = current_word;\n    } while (current_byte != byte_to_find);\n  }\n  else {\n    byte_remainder = (uint)data & 7;\n    while( true ) {\n      if (byte_remainder == 0) {\n        byte_remainder = byte_to_find | byte_to_find << 8;\n        byte_remainder = byte_remainder | byte_remainder << 0x10;\n        unrolled_data_size = data_size & 0xfffffff8;\n        do {\n          current_word = data + 2;\n          unrolled_data_size = unrolled_data_size - 8;\n          xor_result_1 = *data ^ byte_remainder;\n          xor_result_2 = data[1] ^ byte_remainder;\n          byte_found = -((char)xor_result_1 == '\\0');\n          byte_1 = -((char)(xor_result_1 >> 8) == '\\0');\n          byte_2 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          byte_3 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(byte_3,CONCAT12(byte_2,CONCAT11(byte_1,byte_found)));\n          byte_nonzero_1 = (char)xor_result_2 != '\\0';\n          byte_nonzero_2 = (char)(xor_result_2 >> 8) != '\\0';\n          byte_nonzero_3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          byte_nonzero_4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(byte_nonzero_4 * byte_3 - !byte_nonzero_4,\n                            CONCAT12(byte_nonzero_3 * byte_2 - !byte_nonzero_3,\n                                     CONCAT11(byte_nonzero_2 * byte_1 - !byte_nonzero_2,byte_nonzero_1 * byte_found - !byte_nonzero_1)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              matching_byte = (byte *)((int)data + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              matching_byte = (byte *)((int)data + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              byte_nonzero_1 = (xor_result_1 & 0x100) == 0;\n              next_byte = matching_byte + 1;\n              if (byte_nonzero_1) {\n                byte_nonzero_1 = (xor_result_1 & 0x18000) == 0;\n                next_byte = matching_byte + 2;\n              }\n              matching_byte = next_byte;\n              if (byte_nonzero_1) {\n                matching_byte = matching_byte + 1;\n              }\n            }\n            return matching_byte + -1;\n          }\n          data = current_word;\n        } while (unrolled_data_size != 0);\n        data_size = data_size & 7;\n        goto joined_r0x00006070;\n      }\n      current_word = (uint *)((int)data + 1);\n      data_size = data_size - 1;\n      if (*(byte *)data == byte_to_find) break;\n      byte_remainder = (uint)current_word & 7;\n      data = current_word;\n      if (data_size == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_word + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "data_size",
                "bVar1": "current_byte",
                "cVar2": "byte_found",
                "cVar3": "byte_1",
                "cVar4": "byte_2",
                "cVar5": "byte_3",
                "pbVar6": "next_byte",
                "puVar7": "current_word",
                "pbVar8": "matching_byte",
                "uVar9": "byte_remainder",
                "uVar10": "unrolled_data_size",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "byte_nonzero_1",
                "bVar14": "byte_nonzero_2",
                "bVar15": "byte_nonzero_3",
                "bVar16": "byte_nonzero_4"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_and_shift_000060b0",
            "code": "\nvoid copyAndShift_000060b0(int dest,undefined *src,int size)\n\n{\n  undefined *srcPtr;\n  undefined *endPtr;\n  undefined *destPtr;\n  \n  endPtr = src + size;\n  destPtr = (undefined *)(dest + -1);\n  if (src != endPtr) {\n    do {\n      srcPtr = src + 1;\n      destPtr = destPtr + 1;\n      *destPtr = *src;\n      src = srcPtr;\n    } while (srcPtr != endPtr);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_and_shift_000060b0",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "srcPtr",
                "puVar2": "endPtr",
                "puVar3": "destPtr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "process_data_000060cc",
            "code": "\nint processData_000060cc(undefined4 input,int size,uint maxSize,undefined4 extraParam)\n\n{\n  int result;\n  uint check;\n  \n  if (size != 0) {\n    if (maxSize == 0) {\n      FUN_00004b34();\n      result = 0;\n    }\n    else {\n      check = FUN_00006964();\n      result = size;\n      if ((check < maxSize) && (result = FUN_00004bd0(input,maxSize), result != 0)) {\n        FUN_000060b0(result,size,maxSize);\n        FUN_00004b34(input,size);\n      }\n    }\n    return result;\n  }\n  result = FUN_00004bd0(input,maxSize,maxSize,extraParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "process_data_000060cc",
                "param_1": "input",
                "param_2": "size",
                "param_3": "maxSize",
                "param_4": "extraParam",
                "iVar1": "result",
                "uVar2": "check"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "update_data_00006192",
            "code": "\nundefined4 updateData_00006192(undefined4 status,undefined4 *data)\n\n{\n  if ((undefined4 *)pointer != (undefined4 *)0x0) {\n    if ((undefined4 *)pointer != data + 0x11) {\n      FUN_00004b34();\n    }\n    previousValue = currentValue;\n    pointer = 0;\n    if (currentValue != 0) {\n      *data = newValue;\n      return 0;\n    }\n  }\n  *data = defaultData;\n  previousValue = 0;\n  *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "update_data_00006192",
                "param_1": "status",
                "param_2": "data",
                "param_2[0xd]": "pointer",
                "param_2[1]": "previousValue",
                "param_2[0x10]": "currentValue",
                "param_2[0xf]": "newValue",
                "param_2[4]": "defaultData"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseData_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int index;\n  uint currByte;\n  byte *currChar;\n  uint nextByte;\n  int **output;\n  undefined tempStack [256];\n  uint flag1;\n  undefined4 flag2;\n  uint flag3;\n  int result;\n  int count;\n  undefined *tempPointer;\n  int state;\n  undefined *someFunction;\n  code *callbackFunction;\n  \n  result = 0;\n  count = 0;\n  someFunction = &LAB_00006118_1;\n  callbackFunction = FUN_00006192 + 1;\n  output = param4;\n  tempPointer = tempStack;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      nextByte = (uint)*param3;\n      if (nextByte == 0) {\n        return result;\n      }\n      currByte = (byte)(&DAT_00007a99)[nextByte] & 8;\n      currChar = param3 + 1;\n      if (((&DAT_00007a99)[nextByte] & 8) == 0) break;\n      while (((param3 = currChar, 0 < (int)param2[1] ||\n              (index = (*callbackFunction)(param1,param2), index == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        count = count + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (nextByte == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (index = (*callbackFunction)(param1,param2), index != 0))\n    goto LAB_00006380;\n    if (**param2 != nextByte) {\n      return result;\n    }\n    *param2 = *param2 + 1;\n    count = count + 1;\n    param2[1] = param2[1] + -1;\n    param3 = currChar;\n  }\n  flag3 = currByte;\n  flag1 = currByte;\n  if (param3[1] == 0x2a) {\n    currChar = param3 + 2;\n    flag1 = 0x10;\n  }\n  while( true ) {\n    currByte = (uint)*currChar;\n    if (9 < currByte - 0x30) break;\n    currChar = currChar + 1;\n    flag3 = (flag3 * 10 + currByte) - 0x30;\n  }\n  index = FUN_00006010(&DAT_00007c02,currByte,3);\n  if (index != 0) {\n    flag1 = 1 << (index - 0x7c02U & 0xff) | flag1;\n    currChar = currChar + 1;\n  }\n  param3 = currChar + 1;\n  currByte = (uint)*currChar;\n  if (currByte < 0x79) {\n    if (0x57 < currByte) {\n      switch(currByte) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)FUN_0000687c(tempStack,param3);\n        flag1 = flag1 | 0x40;\n        state = 1;\n        break;\n      case 99:\n        flag1 = flag1 | 0x40;\n        state = 0;\n        break;\n      case 100:\n      case 0x75:\n        flag2 = 10;\nLAB_000063a0:\n        if (currByte < 0x6f) {\n          state = 3;\n        }\n        else {\n          state = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        state = 5;\n        break;\n      case 0x69:\n        flag2 = 0;\n        state = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag1 << 0x1b)) {\n          if ((int)(flag1 << 0x1f) < 0) {\n            *(short *)*output = (short)count;\n            output = output + 1;\n          }\n          else {\n            **output = count;\n            output = output + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        flag2 = 8;\n        state = 4;\n        break;\n      case 0x70:\n        flag1 = flag1 | 0x20;\n      case 0x58:\n      case 0x78:\n        flag1 = flag1 | 0x200;\n        flag2 = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        state = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (index = (*callbackFunction)(param1,param2), index != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag1 << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          count = count + 1;\n          currChar = param2[1];\n          param2[1] = currChar + -1;\n          if ((int)(currChar + -1) < 1) {\n            index = (*callbackFunction)(param1,param2);\n            if (index != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (state < 3) {\n        index = FUN_000064bc(param1,&flag1,param2,&output);\n      }\n      else {\n        if (4 < state) goto LAB_000061f6;\n        index = FUN_0000656c(param1,&flag1,param2,&output);\n      }\n      if (index == 1) {\n        return result;\n      }\n      if (index == 2) {\nLAB_00006380:\n        if (result == 0) {\nLAB_00006388:\n          result = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          result = -1;\n        }\n        return result;\n      }\n      goto LAB_000061f6;\n    }\n    currChar = param3;\n    if (currByte == 0x25) goto LAB_00006352;\n    if (currByte < 0x26) {\n      if (currByte != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (currByte - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  state = 3;\n  flag2 = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_data_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "uVar2": "currByte",
                "pbVar3": "currChar",
                "uVar4": "nextByte",
                "local_2b0": "output",
                "auStack_2ac": "tempStack",
                "local_1ac": "flag1",
                "local_1a8": "flag2",
                "local_1a4": "flag3",
                "local_1a0": "result",
                "local_19c": "count",
                "local_198": "tempPointer",
                "local_194": "state",
                "local_30": "someFunction",
                "local_2c": "callbackFunction"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "decode_and_process_000064bc",
            "code": "\nundefined4 decode_and_process_000064bc(undefined4 argument,uint *parameters,byte **data,undefined4 *result)\n\n{\n  int returnValue;\n  uint flag;\n  byte **bytePtrPtr;\n  byte *bytePtr;\n  byte *currentByte;\n  byte *nextByte;\n  int iterationCount;\n  \n  if (parameters[2] == 0) {\n    if (parameters[6] == 0) {\n      flag = 1;\n    }\n    else {\n      flag = 0xffffffff;\n    }\n    parameters[2] = flag;\n  }\n  if (-1 < (int)(*parameters << 0x1b)) {\n    bytePtrPtr = (byte **)*result;\n    *result = bytePtrPtr + 1;\n    currentByte = *bytePtrPtr;\n  }\n  iterationCount = 0;\n  do {\n    flag = parameters[6];\n    if (flag != 0) {\n      if (flag == 1) {\n        if (*(char *)(parameters[5] + (uint)**data) == '\\0') {\n          if (iterationCount == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*parameters & 0x10) == 0) && (parameters[3] = parameters[3] + 1, parameters[6] != 0)) {\n            *currentByte = 0;\n          }\n          parameters[4] = iterationCount + parameters[4];\n          return 0;\n        }\n      }\n      else if ((flag != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**data] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    nextByte = currentByte;\n    if (-1 < (int)(*parameters << 0x1b)) {\n      nextByte = currentByte + 1;\n      *currentByte = **data;\n    }\n    bytePtr = data[1];\n    *data = *data + 1;\n    flag = parameters[2] - 1;\n    data[1] = bytePtr + -1;\n    iterationCount = iterationCount + 1;\n    parameters[2] = flag;\n    currentByte = nextByte;\n    if ((flag == 0) ||\n       (((int)(bytePtr + -1) < 1 &&\n        (returnValue = (*(code *)parameters[0x60])(argument,data,flag,(code *)parameters[0x60],result),\n        returnValue != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "decode_and_process_000064bc",
                "param_1": "argument",
                "param_2": "parameters",
                "param_3": "data",
                "param_4": "result",
                "iVar1": "returnValue",
                "uVar2": "flag",
                "ppbVar3": "bytePtrPtr",
                "pbVar4": "bytePtr",
                "unaff_r6": "currentByte",
                "pbVar5": "nextByte",
                "iVar6": "iterationCount"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 input,uint *flags,byte **buffer,undefined4 *output)\n\n{\n  int checkResult;\n  undefined4 result;\n  code *conversionFunc;\n  uint temp1;\n  byte *temp2;\n  uint temp3;\n  undefined4 *outputPtr;\n  uint *bufferPtr;\n  uint *tempPtr1;\n  uint *tempPtr2;\n  int tempVar;\n  int loopVar;\n  undefined *constants [4];\n  \n  constants[0] = &DAT_00007c2f;\n  constants[1] = &DAT_00007c32;\n  constants[2] = &DAT_00007c35;\n  conversionFunc = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    conversionFunc = (code *)&UNK_00005fd5;\n  }\n  temp3 = flags[2];\n  temp1 = temp3 - 1;\n  if (0x15c < temp1) {\n    tempVar = temp3 - 0x15d;\n    temp3 = 0x15d;\n  }\n  if (0x15c < temp1) {\n    flags[2] = temp3;\n  }\n  tempPtr2 = flags + 7;\n  if (temp1 < 0x15d) {\n    tempVar = 0;\n  }\n  *flags = *flags | 0xd00;\n  loopVar = 0;\n  tempPtr1 = tempPtr2;\n  do {\n    checkResult = FUN_00006010(constants[loopVar],**buffer,2);\n    if (checkResult != 0) {\n      if (loopVar == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        temp1 = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = temp1;\n      }\n      else if (loopVar == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        temp1 = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      temp1 = flags[2];\n      flags[2] = temp1 - 1;\n      if (temp1 != 0) {\n        temp2 = *buffer;\n        *buffer = temp2 + 1;\n        bufferPtr = (uint *)((int)tempPtr1 + 1);\n        *(byte *)tempPtr1 = *temp2;\n        temp2 = buffer[1];\n        buffer[1] = temp2 + -1;\n        tempPtr1 = bufferPtr;\n        if (((int)(temp2 + -1) < 1) &&\n           (checkResult = (*(code *)flags[0x60])(input,buffer), checkResult != 0)) {\n          loopVar = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loopVar = loopVar + 1;\n  } while (loopVar != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  FUN_0000687c(flags[5],\"01234567]\" + (8 - flags[1]));\n  loopVar = 0;\n  while( true ) {\n    bufferPtr = tempPtr1;\n    if (flags[2] == 0) break;\n    temp2 = *buffer;\n    temp1 = (uint)*temp2;\n    if (*(char *)(flags[5] + temp1) == '\\0') break;\n    if ((temp1 == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      loopVar = loopVar + 1;\n      if (tempVar != 0) {\n        tempVar = tempVar + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      bufferPtr = (uint *)((int)tempPtr1 + 1);\n      *(byte *)tempPtr1 = *temp2;\n    }\n    temp2 = buffer[1];\n    buffer[1] = temp2 + -1;\n    if ((int)(temp2 + -1) < 1) {\n      checkResult = (*(code *)flags[0x60])(input,buffer);\n      if (checkResult != 0) break;\n    }\n    else {\n      *buffer = *buffer + 1;\n    }\n    flags[2] = flags[2] - 1;\n    tempPtr1 = bufferPtr;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (tempPtr2 < bufferPtr) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)bufferPtr + -1),buffer);\n      bufferPtr = (uint *)((int)bufferPtr + -1);\n    }\n    if (bufferPtr == tempPtr2) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)bufferPtr = 0;\n    result = (*conversionFunc)(input,tempPtr2,0,flags[1]);\n    outputPtr = (undefined4 *)*output;\n    temp1 = *flags;\n    *output = outputPtr + 1;\n    outputPtr = (undefined4 *)*outputPtr;\n    if ((temp1 & 0x20) == 0) {\n      if ((int)(temp1 << 0x1f) < 0) {\n        *(short *)outputPtr = (short)result;\n      }\n      else {\n        *outputPtr = result;\n      }\n    }\n    else {\n      *outputPtr = result;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)bufferPtr + flags[4] + (loopVar - (int)tempPtr2));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "buffer",
                "param_4": "output",
                "iVar1": "checkResult",
                "uVar2": "result",
                "pcVar3": "conversionFunc",
                "uVar4": "temp1",
                "pbVar5": "temp2",
                "uVar6": "temp3",
                "puVar7": "outputPtr",
                "puVar8": "bufferPtr",
                "puVar9": "tempPtr1",
                "puVar10": "tempPtr2",
                "unaff_r9": "tempVar",
                "iVar11": "loopVar",
                "local_34": "constants"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *dataPtr1,undefined4 *dataPtr2,undefined4 value1,undefined4 value2)\n\n{\n  undefined2 tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  ushort tempVar4;\n  uint tempVar5;\n  \n  if ((dataPtr1 != (undefined4 *)0x0) && (dataPtr1[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (dataPtr2 == &DAT_000079b8) {\n    dataPtr2 = (undefined4 *)dataPtr1[1];\n  }\n  else if (dataPtr2 == (undefined4 *)&DAT_000079d8) {\n    dataPtr2 = (undefined4 *)dataPtr1[2];\n  }\n  else if (dataPtr2 == (undefined4 *)&DAT_00007998) {\n    dataPtr2 = (undefined4 *)dataPtr1[3];\n  }\n  tempVar4 = *(ushort *)(dataPtr2 + 3);\n  dataPtr2[1] = 0;\n  tempVar5 = (uint)*(ushort *)(dataPtr2 + 3);\n  if ((int)(tempVar5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(tempVar5 << 0x1d) < 0) {\n    if ((undefined4 *)dataPtr2[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)dataPtr2[0xd] != dataPtr2 + 0x11) {\n        FUN_00004b34(dataPtr1);\n      }\n      dataPtr2[1] = dataPtr2[0x10];\n      dataPtr2[0xd] = 0;\n      if (dataPtr2[0x10] != 0) {\n        *dataPtr2 = dataPtr2[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(tempVar5 << 0x1b)) {\n      *dataPtr1 = 9;\n      tempVar4 = tempVar4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(tempVar5 << 0x1c) < 0) {\n      tempVar2 = FUN_00004158(dataPtr1,dataPtr2,tempVar5 << 0x1c,tempVar5,value2);\n      if (tempVar2 != 0) {\n        return 0xffffffff;\n      }\n      dataPtr2[2] = 0;\n      *(ushort *)(dataPtr2 + 3) = *(ushort *)(dataPtr2 + 3) & 0xfff7;\n      dataPtr2[6] = 0;\n    }\n    *(ushort *)(dataPtr2 + 3) = *(ushort *)(dataPtr2 + 3) | 4;\n  }\n  if (dataPtr2[4] == 0) {\n    FUN_00005700(dataPtr1,dataPtr2);\n  }\n  tempVar4 = *(ushort *)(dataPtr2 + 3);\n  tempVar1 = *(undefined2 *)(dataPtr2 + 3);\n  if ((tempVar4 & 3) != 0) {\n    *(undefined2 *)(dataPtr2 + 3) = 1;\n    FUN_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(dataPtr2 + 3) = tempVar1;\n    if ((tempVar4 & 9) == 9) {\n      FUN_0000404c(dataPtr1,dataPtr2);\n    }\n  }\n  tempVar3 = dataPtr2[4];\n  *dataPtr2 = tempVar3;\n  tempVar2 = (*(code *)dataPtr2[9])(dataPtr1,dataPtr2[8],tempVar3,dataPtr2[5]);\n  dataPtr2[1] = tempVar2;\n  if (0 < tempVar2) {\n    return 0;\n  }\n  tempVar4 = *(ushort *)(dataPtr2 + 3);\n  if (tempVar2 != 0) {\n    tempVar3 = 0;\n  }\n  else {\n    tempVar4 = tempVar4 | 0x20;\n  }\n  if (tempVar2 != 0) {\n    dataPtr2[1] = tempVar3;\n    tempVar4 = tempVar4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(dataPtr2 + 3) = tempVar4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "dataPtr1",
                "param_2": "dataPtr2",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "decode_array_0000687c",
            "code": "\nbyte * decodeArray_0000687c(int arraySize,byte *encodedArray)\n\n{\n  byte *decodedArray;\n  uint nextByte;\n  int currentIndex;\n  uint currentByte;\n  uint currentValue;\n  uint endRange;\n  bool isASCII;\n  \n  currentByte = (uint)*encodedArray;\n  isASCII = currentByte == 0x5e;\n  if (isASCII) {\n    currentByte = (uint)encodedArray[1];\n    encodedArray = encodedArray + 2;\n  }\n  else {\n    encodedArray = encodedArray + 1;\n  }\n  currentIndex = arraySize + -1;\n  do {\n    currentIndex = currentIndex + 1;\n    *(bool *)currentIndex = isASCII;\n  } while (currentIndex != arraySize + 0xff);\n  if (currentByte == 0) {\n    decodedArray = encodedArray + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      currentValue = currentByte;\n      *(bool *)(arraySize + currentValue) = !isASCII;\n      encodedArray = encodedArray + 1;\n      while( true ) {\n        currentByte = (uint)encodedArray[-1];\n        if (currentByte != 0x2d) break;\n        endRange = (uint)*encodedArray;\n        if ((endRange == 0x5d) || (nextByte = currentValue, (int)endRange < (int)currentValue)) goto LAB_000068aa;\n        do {\n          nextByte = nextByte + 1;\n          *(bool *)(arraySize + nextByte) = !isASCII;\n        } while ((int)nextByte < (int)endRange);\n        currentIndex = ~currentValue + endRange;\n        if ((int)endRange <= (int)currentValue) {\n          currentIndex = 0;\n        }\n        currentValue = currentValue + 1 + currentIndex;\n        encodedArray = encodedArray + 2;\n      }\n      decodedArray = encodedArray;\n    } while ((currentByte != 0x5d) && (decodedArray = encodedArray + -1, currentByte != 0));\n  }\n  return decodedArray;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "decode_array_0000687c",
                "param_1": "arraySize",
                "param_2": "encodedArray",
                "pbVar1": "decodedArray",
                "uVar2": "nextByte",
                "iVar3": "currentIndex",
                "uVar4": "currentByte",
                "uVar5": "currentValue",
                "uVar6": "endRange",
                "bVar7": "isASCII"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "initialize_buffer_000068f0",
            "code": "\nundefined4 initialize_buffer_000068f0(undefined4 value,int *buffer)\n\n{\n  int allocation_result;\n  int previous_size;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    allocation_result = FUN_00004bd0(value,0x400);\n    if (allocation_result != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = allocation_result;\n      *(undefined *)(allocation_result + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(allocation_result + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(allocation_result + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = allocation_result + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    previous_size = buffer[0xe];\n    allocation_result = FUN_000060cc(value,(int *)buffer[0xd],previous_size << 1);\n    if (allocation_result != 0) {\n      FUN_000060b0(allocation_result + previous_size,allocation_result,previous_size);\n      buffer[0xd] = allocation_result;\n      buffer[0xe] = previous_size << 1;\n      *buffer = allocation_result + previous_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "initialize_buffer_000068f0",
                "param_1": "value",
                "param_2": "buffer",
                "iVar1": "allocation_result",
                "iVar2": "previous_size"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 unknownValue,int arrayStart)\n\n{\n  int sumIndex;\n  \n  sumIndex = *(int *)(arrayStart + -4) + -4;\n  if (*(int *)(arrayStart + -4) < 0) {\n    sumIndex = sumIndex + *(int *)(arrayStart + sumIndex);\n  }\n  return sumIndex;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "unknownValue",
                "param_2": "arrayStart",
                "iVar1": "sumIndex"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "get_min_max_value_00006974",
            "code": "\nundefined8 getMinMaxValue_00006974(int value1,int value2,int value3,int value4)\n\n{\n  int tempVar1;\n  undefined8 result;\n  undefined localVar1 [8];\n  \n  if ((value4 == 0) && (value3 == 0)) {\n    if (value2 < 0) {\n      value1 = 0;\n      value2 = -0x80000000;\n    }\n    else if (value2 != 0 || value1 != 0) {\n      value2 = 0x7fffffff;\n      value1 = -1;\n    }\n    return CONCAT44(value2,value1);\n  }\n  if (value2 < 0) {\n    tempVar1 = -value2 - (uint)(value1 != 0);\n    if (value4 < 0) {\n      result = FUN_00006a14(-value1,tempVar1,-value3,-value4 - (uint)(value3 != 0),localVar1);\n      return result;\n    }\n    result = FUN_00006a14(-value1,tempVar1,value3,value4,localVar1);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (value4 < 0) {\n    result = FUN_00006a14(value1,value2,-value3,-value4 - (uint)(value3 != 0),localVar1);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "get_min_max_value_00006974",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "tempVar1",
                "uVar2": "result",
                "local_8": "localVar1"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "calculate_quotient_and_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong calculateQuotientAndRemainder_00006a14(uint dividend,uint dividend_lower,uint divisor,uint divisor_lower,uint *remainder)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  uint quotient_higher;\n  int shift_count;\n  uint divisor_higher;\n  uint quotient_higher_temp;\n  uint quotient_lower;\n  uint quotient_lower_temp;\n  uint temp;\n  uint quotient_temp1;\n  uint quotient_temp2;\n  bool bVar10;\n  ulonglong result;\n  \n  if (divisor_lower == 0) {\n    if (dividend_lower < divisor) {\n      shift_count = LZCOUNT(divisor);\n      quotient_lower = divisor;\n      if (shift_count != 0) {\n        quotient_lower = divisor << shift_count;\n        dividend_lower = dividend >> (0x20U - shift_count & 0xff) | dividend_lower << shift_count;\n        dividend = dividend << shift_count;\n      }\n      quotient_lower_temp = quotient_lower >> 0x10;\n      quotient_temp1 = dividend_lower / quotient_lower_temp;\n      divisor_higher = dividend >> 0x10 | (dividend_lower - quotient_lower_temp * quotient_temp1) * 0x10000;\n      quotient_higher = quotient_temp1 * (quotient_lower & 0xffff);\n      quotient_higher_temp = quotient_temp1;\n      if (divisor_higher <= quotient_higher && quotient_higher - divisor_higher != 0) {\n        bVar10 = CARRY4(quotient_lower,divisor_higher);\n        divisor_higher = quotient_lower + divisor_higher;\n        quotient_higher_temp = quotient_temp1 - 1;\n        if ((bVar10 == false) && (divisor_higher <= quotient_higher && quotient_higher - divisor_higher != 0)) {\n          quotient_higher_temp = quotient_temp1 - 2;\n          divisor_higher = divisor_higher + quotient_lower;\n        }\n      }\n      quotient_temp1 = (divisor_higher - quotient_higher) / quotient_lower_temp;\n      quotient_lower_temp = dividend & 0xffff | ((divisor_higher - quotient_higher) - quotient_lower_temp * quotient_temp1) * 0x10000;\n      divisor_higher = quotient_temp1 * (quotient_lower & 0xffff);\n      quotient_higher = quotient_temp1;\n      if (quotient_lower_temp <= divisor_higher && divisor_higher - quotient_lower_temp != 0) {\n        bVar10 = CARRY4(quotient_lower,quotient_lower_temp);\n        quotient_lower_temp = quotient_lower + quotient_lower_temp;\n        quotient_higher = quotient_temp1 - 1;\n        if ((bVar10 == false) && (quotient_lower_temp <= divisor_higher && divisor_higher - quotient_lower_temp != 0)) {\n          quotient_higher = quotient_temp1 - 2;\n          quotient_lower_temp = quotient_lower_temp + quotient_lower;\n        }\n      }\n      quotient_lower_temp = quotient_lower_temp - divisor_higher;\n      quotient_higher = quotient_higher | quotient_higher_temp << 0x10;\n      quotient_lower = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        UNRECOVERED_JUMPTABLE = (code *)software_udf(0xff,0x6abc);\n        result = (*UNRECOVERED_JUMPTABLE)();\n        return result;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        dividend_lower = dividend_lower - divisor;\n        quotient_temp2 = divisor >> 0x10;\n        temp = divisor & 0xffff;\n        quotient_lower = 1;\n        quotient_higher_temp = divisor;\n      }\n      else {\n        quotient_higher_temp = divisor << shift_count;\n        quotient_temp2 = quotient_higher_temp >> 0x10;\n        quotient_higher = dividend_lower >> (0x20U - shift_count & 0xff);\n        quotient_lower = dividend >> (0x20U - shift_count & 0xff) | dividend_lower << shift_count;\n        divisor_higher = quotient_higher / quotient_temp2;\n        temp = quotient_higher_temp & 0xffff;\n        quotient_temp1 = quotient_lower >> 0x10 | (quotient_higher - quotient_temp2 * divisor_higher) * 0x10000;\n        quotient_lower_temp = divisor_higher * temp;\n        dividend = dividend << shift_count;\n        quotient_higher = divisor_higher;\n        if (quotient_temp1 <= quotient_lower_temp && quotient_lower_temp - quotient_temp1 != 0) {\n          bVar10 = CARRY4(quotient_higher_temp,quotient_temp1);\n          quotient_temp1 = quotient_higher_temp + quotient_temp1;\n          quotient_higher = divisor_higher - 1;\n          if ((bVar10 == false) && (quotient_temp1 <= quotient_lower_temp && quotient_lower_temp - quotient_temp1 != 0)) {\n            quotient_higher = divisor_higher - 2;\n            quotient_temp1 = quotient_temp1 + quotient_higher_temp;\n          }\n        }\n        divisor_higher = (quotient_temp1 - quotient_lower_temp) / quotient_temp2;\n        dividend_lower = quotient_lower & 0xffff | ((quotient_temp1 - quotient_lower_temp) - quotient_temp2 * divisor_higher) * 0x10000;\n        quotient_lower_temp = divisor_higher * temp;\n        quotient_lower = divisor_higher;\n        if (dividend_lower <= quotient_lower_temp && quotient_lower_temp - dividend_lower != 0) {\n          bVar10 = CARRY4(quotient_higher_temp,dividend_lower);\n          dividend_lower = quotient_higher_temp + dividend_lower;\n          quotient_lower = divisor_higher - 1;\n          if ((bVar10 == false) && (dividend_lower <= quotient_lower_temp && quotient_lower_temp - dividend_lower != 0)) {\n            quotient_lower = divisor_higher - 2;\n            dividend_lower = dividend_lower + quotient_higher_temp;\n          }\n        }\n        dividend_lower = dividend_lower - quotient_lower_temp;\n        quotient_lower = quotient_lower | quotient_higher << 0x10;\n      }\n      quotient_temp1 = dividend_lower / quotient_temp2;\n      quotient_lower_temp = dividend >> 0x10 | (dividend_lower - quotient_temp2 * quotient_temp1) * 0x10000;\n      quotient_higher = temp * quotient_temp1;\n      divisor_higher = quotient_temp1;\n      if (quotient_lower_temp <= quotient_higher && quotient_higher - quotient_lower_temp != 0) {\n        bVar10 = CARRY4(quotient_higher_temp,quotient_lower_temp);\n        quotient_lower_temp = quotient_higher_temp + quotient_lower_temp;\n        divisor_higher = quotient_temp1 - 1;\n        if ((bVar10 == false) && (quotient_lower_temp <= quotient_higher && quotient_higher - quotient_lower_temp != 0)) {\n          divisor_higher = quotient_temp1 - 2;\n          quotient_lower_temp = quotient_lower_temp + quotient_higher_temp;\n        }\n      }\n      quotient_temp1 = (quotient_lower_temp - quotient_higher) / quotient_temp2;\n      quotient_lower_temp = dividend & 0xffff | ((quotient_lower_temp - quotient_higher) - quotient_temp2 * quotient_temp1) * 0x10000;\n      temp = temp * quotient_temp1;\n      quotient_higher = quotient_temp1;\n      if (quotient_lower_temp <= temp && temp - quotient_lower_temp != 0) {\n        bVar10 = CARRY4(quotient_higher_temp,quotient_lower_temp);\n        quotient_lower_temp = quotient_higher_temp + quotient_lower_temp;\n        quotient_higher = quotient_temp1 - 1;\n        if ((bVar10 == false) && (quotient_lower_temp <= temp && temp - quotient_lower_temp != 0)) {\n          quotient_higher = quotient_temp1 - 2;\n          quotient_lower_temp = quotient_lower_temp + quotient_higher_temp;\n        }\n      }\n      quotient_lower_temp = quotient_lower_temp - temp;\n      quotient_higher = quotient_higher | divisor_higher << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = quotient_lower_temp >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_lower < divisor_lower) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_lower;\n      return 0;\n    }\n    quotient_higher = 0;\n    quotient_lower = 0;\n  }\n  else {\n    shift_count = LZCOUNT(divisor_lower);\n    if (shift_count != 0) {\n      temp = 0x20 - shift_count;\n      divisor_higher = divisor >> (temp & 0xff) | divisor_lower << shift_count;\n      quotient_temp2 = divisor_higher >> 0x10;\n      quotient_higher = dividend_lower >> (temp & 0xff);\n      quotient_lower = dividend >> (temp & 0xff) | dividend_lower << shift_count;\n      quotient_lower_temp = quotient_higher / quotient_temp2;\n      quotient_higher_temp = quotient_lower >> 0x10 | (quotient_higher - quotient_temp2 * quotient_lower_temp) * 0x10000;\n      quotient_temp1 = quotient_lower_temp * (divisor_higher & 0xffff);\n      dividend = dividend << shift_count;\n      quotient_higher = quotient_lower_temp;\n      if (quotient_higher_temp <= quotient_temp1 && quotient_temp1 - quotient_higher_temp != 0) {\n        bVar10 = CARRY4(divisor_higher,quotient_higher_temp);\n        quotient_higher_temp = divisor_higher + quotient_higher_temp;\n        quotient_higher = quotient_lower_temp - 1;\n        if ((bVar10 == false) && (quotient_higher_temp <= quotient_temp1 && quotient_temp1 - quotient_higher_temp != 0)) {\n          quotient_higher = quotient_lower_temp - 2;\n          quotient_higher_temp = quotient_higher_temp + divisor_higher;\n        }\n      }\n      quotient_lower_temp = (quotient_higher_temp - quotient_temp1) / quotient_temp2;\n      quotient_higher_temp = quotient_lower & 0xffff | ((quotient_higher_temp - quotient_temp1) - quotient_temp2 * quotient_lower_temp) * 0x10000;\n      quotient_temp1 = quotient_lower_temp * (divisor_higher & 0xffff);\n      quotient_lower = quotient_lower_temp;\n      if (quotient_higher_temp <= quotient_temp1 && quotient_temp1 - quotient_higher_temp != 0) {\n        bVar10 = CARRY4(divisor_higher,quotient_higher_temp);\n        quotient_higher_temp = divisor_higher + quotient_higher_temp;\n        quotient_lower = quotient_lower_temp - 1;\n        if ((bVar10 == false) && (quotient_higher_temp <= quotient_temp1 && quotient_temp1 - quotient_higher_temp != 0)) {\n          quotient_lower = quotient_lower_temp - 2;\n          quotient_higher_temp = quotient_higher_temp + divisor_higher;\n        }\n      }\n      quotient_lower = quotient_lower | quotient_higher << 0x10;\n      result = (ulonglong)quotient_lower * (ulonglong)(divisor << shift_count);\n      if (CONCAT44(quotient_higher_temp - quotient_temp1,dividend) < result) {\n        result = result - CONCAT44(divisor_higher,divisor << shift_count);\n        quotient_lower = quotient_lower - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient_higher = ((quotient_higher_temp - quotient_temp1) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient_higher << (temp & 0xff) | dividend - (uint)result >> shift_count;\n        remainder[1] = quotient_higher >> shift_count;\n      }\n      return (ulonglong)quotient_lower;\n    }\n    if ((divisor_lower < dividend_lower) || (divisor <= dividend)) {\n      bVar10 = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_lower = (dividend_lower - divisor_lower) - (uint)bVar10;\n      quotient_higher = 1;\n    }\n    else {\n      quotient_higher = 0;\n    }\n    quotient_lower = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_lower;\n    }\n  }\n  return CONCAT44(quotient_lower,quotient_higher);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "calculate_quotient_and_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_lower",
                "param_3": "divisor",
                "param_4": "divisor_lower",
                "param_5": "remainder",
                "uVar1": "quotient_higher",
                "iVar2": "shift_count",
                "uVar3": "divisor_higher",
                "uVar4": "quotient_higher_temp",
                "uVar5": "quotient_lower",
                "uVar6": "quotient_lower_temp",
                "uVar7": "temp",
                "uVar8": "quotient_temp1",
                "uVar9": "quotient_temp2",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 135440,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}