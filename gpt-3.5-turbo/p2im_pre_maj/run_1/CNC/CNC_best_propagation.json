{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 inputParam)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_64bit_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_64bit_080001ac(undefined4 first_32bit_param,undefined4 second_32bit_param)\n\n{\n  return CONCAT44(second_32bit_param,first_32bit_param);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_64bit_080001ac",
                "param_1": "first_32bit_param",
                "param_2": "second_32bit_param"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "coolant_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "coolant_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "stop_coolant_080001f8",
            "code": "\nvoid stop_coolant_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  coolant_stop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "stop_coolant_080001f8"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "coolant_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "turn_off_coolant_system_08000210",
            "code": "\nvoid turnOffCoolantSystem_08000210(void)\n\n{\n  turnOffCoolantMist();\n  turnOffCoolantFlood();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "turn_off_coolant_system_08000210",
                "coolant_mist_off": "turnOffCoolantMist",
                "coolant_flood_off": "turnOffCoolantFlood"
            },
            "calling": [
                "mc_reset",
                "coolant_run",
                "coolant_init"
            ],
            "called": [
                "coolant_flood_off",
                "coolant_mist_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "control_coolant_system_08000220",
            "code": "\nvoid controlCoolantSystem_08000220(char command)\n\n{\n  if (command != DAT_20000468) {\n    plan_synchronize();\n    if (command == '\\x01') {\n      coolant_flood_on();\n      DAT_20000468 = command;\n    }\n    else if (command == '\\x02') {\n      coolant_mist_on();\n      DAT_20000468 = command;\n    }\n    else {\n      coolant_stop();\n      DAT_20000468 = command;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "control_coolant_system_08000220",
                "param_1": "command"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "coolant_stop",
                "coolant_flood_on",
                "coolant_mist_on",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_time_difference_08000268",
            "code": "\n\n\nint calculateTimeDifference_08000268(void)\n\n{\n  int currentTick;\n  \n  currentTick = getCurrentTick();\n  return (currentTick + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_time_difference_08000268",
                "iVar1": "currentTick",
                "HAL_GetTick": "getCurrentTick"
            },
            "calling": [
                "_delay_us"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "delay_function_080002a0",
            "code": "\nvoid delayFunction_080002a0(undefined4 delayTime)\n\n{\n  HAL_Delay(delayTime);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "delay_function_080002a0",
                "param_1": "delayTime"
            },
            "calling": [
                "mc_dwell"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "wait_until_time_080002b6",
            "code": "\nvoid waitUntilTime_080002b6(uint duration_ms)\n\n{\n  uint current_ms_high;\n  uint target_ms_high;\n  bool is_time_reached;\n  longlong current_time_ms;\n  undefined8 current_time_high_ms;\n  \n  current_time_ms = get_current_usecs();\n  target_ms_high = (uint)(current_time_ms + (ulonglong)duration_ms >> 0x20);\n  do {\n    current_time_high_ms = get_current_usecs();\n    current_ms_high = (uint)((ulonglong)current_time_high_ms >> 0x20);\n    is_time_reached = target_ms_high <= current_ms_high;\n    if (current_ms_high == target_ms_high) {\n      is_time_reached = (uint)(current_time_ms + (ulonglong)duration_ms) <= (uint)current_time_high_ms;\n    }\n  } while (!is_time_reached);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "wait_until_time_080002b6",
                "param_1": "duration_ms",
                "uVar1": "current_ms_high",
                "uVar2": "target_ms_high",
                "bVar3": "is_time_reached",
                "lVar4": "current_time_ms",
                "uVar5": "current_time_high_ms"
            },
            "calling": [],
            "called": [
                "get_current_usecs"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_data_080002f0",
            "code": "\nvoid initializeData_080002f0(void)\n\n{\n  memset(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0"
            },
            "calling": [
                "eeprom_get_char",
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum",
                "memcpy_from_eeprom_with_checksum"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_eeprom_data_08000310",
            "code": "\nundefined getEEPROMData_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeEEPROM();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_eeprom_data_08000310",
                "param_1": "index",
                "eeprom_init": "initializeEEPROM"
            },
            "calling": [
                "memcpy_from_eeprom_with_checksum",
                "read_global_settings"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "update_eeprom_value_08000340",
            "code": "\nvoid updateEepromValue_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    eeprom_init();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "update_eeprom_value_08000340",
                "param_1": "index",
                "param_2": "value"
            },
            "calling": [
                "write_global_settings",
                "memcpy_to_eeprom_with_checksum"
            ],
            "called": [
                "eeprom_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "calculate_checksum_08000374",
            "code": "\nvoid calculateChecksum_08000374(int inputSize,char *inputData,int inputLength)\n\n{\n  int remainingLength;\n  char *currentChar;\n  int writeAddress;\n  char checksum;\n  \n  checksum = '\\0';\n  remainingLength = inputLength;\n  currentChar = inputData;\n  writeAddress = inputSize;\n  if (DAT_2000046c == 0) {\n    eeprom_init();\n    currentChar = inputData;\n    writeAddress = inputSize;\n  }\n  for (; remainingLength != 0; remainingLength = remainingLength + -1) {\n    checksum = (checksum != '\\0') + *currentChar;\n    eeprom_put_char(writeAddress,*currentChar);\n    currentChar = currentChar + 1;\n    writeAddress = writeAddress + 1;\n  }\n  eeprom_put_char(writeAddress,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "calculate_checksum_08000374",
                "param_1": "inputSize",
                "param_2": "inputData",
                "param_3": "inputLength",
                "local_1c": "remainingLength",
                "local_18": "currentChar",
                "local_14": "writeAddress",
                "local_9": "checksum"
            },
            "calling": [
                "settings_store_startup_line",
                "write_global_settings",
                "settings_write_coord_data"
            ],
            "called": [
                "eeprom_init",
                "eeprom_put_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "check_eeprom_data_080003ec",
            "code": "\nbool check_eeprom_data_080003ec(char *data,int start_index,int length)\n\n{\n  char current_char;\n  uint expected_checksum;\n  int remaining_length;\n  int current_index;\n  char *current_char_ptr;\n  byte checksum;\n  \n  checksum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_char_ptr = data;\n  if (DAT_2000046c == 0) {\n    eeprom_init();\n    current_index = start_index;\n    current_char_ptr = data;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_char = eeprom_get_char(current_index);\n    checksum = current_char + (checksum != 0);\n    *current_char_ptr = current_char;\n    current_index = current_index + 1;\n    current_char_ptr = current_char_ptr + 1;\n  }\n  expected_checksum = eeprom_get_char(current_index);\n  return checksum == expected_checksum;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "check_eeprom_data_080003ec",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_char_ptr",
                "local_9": "checksum",
                "cVar1": "current_char",
                "uVar2": "expected_checksum"
            },
            "calling": [
                "settings_read_coord_data",
                "settings_read_startup_line",
                "read_global_settings"
            ],
            "called": [
                "eeprom_init",
                "eeprom_get_char"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_params_08000478",
            "code": "\nvoid initializeParams_08000478(undefined parameter1,undefined parameter2,undefined parameter3)\n\n{\n  DAT_20000e89 = parameter1;\n  DAT_20000e8a = parameter2;\n  DAT_20000e8b = parameter3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_params_08000478",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "calling": [
                "gc_execute_line",
                "gc_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_data_080004ac",
            "code": "\nvoid initializeData_080004ac(void)\n\n{\n  int status;\n  \n  memset(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  configurePlane(0,1,2);\n  DAT_20000e74 = 1;\n  status = readCoordinateData(DAT_20000e8c,&DAT_20000e90);\n  if (status == 0) {\n    report_status_message(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_data_080004ac",
                "iVar1": "status",
                "select_plane": "configurePlane",
                "settings_read_coord_data": "readCoordinateData"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "select_plane",
                "settings_read_coord_data",
                "report_status_message",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_floating_division_080004fc",
            "code": "\nvoid calculateFloatingDivision_080004fc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 convertedInput;\n  \n  convertedInput = __floatsisf(input1);\n  DAT_20000e7c = __aeabi_fdiv(convertedInput,DAT_20000ebc);\n  convertedInput = __floatsisf(input2);\n  DAT_20000e80 = __aeabi_fdiv(convertedInput,DAT_20000ec0);\n  convertedInput = __floatsisf(input3);\n  DAT_20000e84 = __aeabi_fdiv(convertedInput,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_floating_division_080004fc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "convertedInput"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "convert_to_float_0800056c",
            "code": "\nundefined4 convertToFloat_0800056c(undefined4 inputNumber)\n\n{\n  undefined8 convertedNumber;\n  \n  if (DAT_20000e73 != '\\0') {\n    convertedNumber = __aeabi_f2d(inputNumber);\n    convertedNumber = __muldf3((int)convertedNumber,(int)((ulonglong)convertedNumber >> 0x20),0x66666666,0x40396666);\n    inputNumber = __truncdfsf2((int)convertedNumber,(int)((ulonglong)convertedNumber >> 0x20));\n  }\n  return inputNumber;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "convert_to_float_0800056c",
                "param_1": "inputNumber",
                "uVar1": "convertedNumber"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__truncdfsf2",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_function_080005b4",
            "code": "\nchar processFunction_080005b4(undefined4 param)\n\n{\n  int index;\n  undefined4 tempVar1;\n  char result;\n  uint tempVar2;\n  undefined4 tempVar3;\n  undefined8 tempVar4;\n  undefined8 tempVar5;\n  undefined8 tempVar6;\n  undefined4 array1 [4];\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 stackVar1;\n  undefined4 stackVar2;\n  undefined4 array2 [6];\n  undefined4 variable1;\n  byte variable2;\n  undefined flag1;\n  undefined4 var4;\n  undefined4 var5;\n  undefined flag2;\n  uint var6;\n  byte var7;\n  byte var8;\n  byte var9;\n  byte var10;\n  char var11;\n  uint var12;\n  undefined4 var13;\n  sbyte flag3;\n  char var14;\n  char var15;\n  undefined4 var16;\n  byte var17;\n  ushort var18;\n  uint var19;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    result = '\\f';\n  }\n  else {\n    flag1 = 0;\n    var18 = 0;\n    var17 = 0;\n    var16 = 0xbf800000;\n    var15 = '\\0';\n    var14 = '\\0';\n    memset(array2 + 3,0,0xc);\n    memset(array2,0,0xc);\n    DAT_20000e70 = '\\0';\n    flag3 = 0;\n    while (index = next_statement(&variable2,array2 + 6,param,&flag1), index != 0) {\n      tempVar4 = __aeabi_f2d(variable1);\n      tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n      var19 = __aeabi_d2iz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n      if (variable2 == 0x47) {\n        switch(var19) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          flag3 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          flag3 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          flag3 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          flag3 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          flag3 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          flag3 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          flag3 = 6;\n        }\n        switch(var19) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          var14 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          var14 = '\\x02';\n          break;\n        case 0x11:\n          select_plane(0,1,2);\n          break;\n        case 0x12:\n          select_plane(2,0,1);\n          break;\n        case 0x13:\n          select_plane(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          tempVar1 = __aeabi_fmul(variable1,0x41200000);\n          tempVar4 = __aeabi_f2d(tempVar1);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          var19 = __aeabi_d2iz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          switch(var19) {\n          case 0x118:\n            var14 = '\\x03';\n            break;\n          case 0x119:\n            var14 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            var14 = '\\x05';\n            break;\n          case 0x12d:\n            var14 = '\\x06';\n          }\n          break;\n        case 0x35:\n          var15 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)var19 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          tempVar1 = __aeabi_fmul(variable1,0x41200000);\n          tempVar4 = __aeabi_f2d(tempVar1);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          var19 = __aeabi_d2iz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          if (var19 == 0x398) {\n            var14 = '\\a';\n          }\n          else if (var19 == 0x399) {\n            var14 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (variable2 == 0x4d) {\n        if (var19 == 0x1e) {\nLAB_08000b96:\n          flag3 = 5;\n        }\n        else if ((int)var19 < 0x1f) {\n          if ((int)var19 < 3) {\n            if (-1 < (int)var19) goto LAB_08000b96;\n          }\n          else if (var19 - 3 < 3) {\n            flag3 = 8;\n          }\n        }\n        switch(var19) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (flag3 != 0) {\n        if (((int)(uint)var18 >> flag3 & 1U) == 0) {\n          var18 = var18 | (ushort)(1 << flag3);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        flag3 = 0;\n      }\n    }\n    result = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      var13 = 0;\n      var12 = 0;\n      var11 = '\\0';\n      flag1 = 0;\nswitchD_08000d18_caseD_47:\n      index = next_statement(&variable2,array2 + 6,param,&flag1);\n      if (index != 0) {\n        switch(variable2) {\n        case 0x46:\n          index = __aeabi_fcmple(variable1,0);\n          if (index != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = to_millimeters(variable1);\n          }\n          else {\n            var16 = to_millimeters(variable1);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          tempVar2 = (uint)variable2;\n          tempVar1 = to_millimeters(variable1);\n          array2[tempVar2 - 0x49] = tempVar1;\n          break;\n        case 0x4c:\n          tempVar4 = __aeabi_f2d(variable1);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          var11 = __aeabi_d2uiz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          break;\n        case 0x50:\n          var13 = variable1;\n          break;\n        case 0x52:\n          var12 = to_millimeters(variable1);\n          break;\n        case 0x53:\n          index = __aeabi_fcmplt(variable1,0);\n          if (index != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          index = __aeabi_fcmplt(variable1,0);\n          if (index != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          tempVar4 = __aeabi_f2d(variable1);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          DAT_20000e88 = __aeabi_d2uiz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          break;\n        case 0x58:\n          array2[3] = to_millimeters(variable1);\n          var17 = var17 | 1;\n          break;\n        case 0x59:\n          array2[4] = to_millimeters(variable1);\n          var17 = var17 | 2;\n          break;\n        case 0x5a:\n          array2[5] = to_millimeters(variable1);\n          var17 = var17 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      result = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          spindle_run((int)DAT_20000e76);\n          coolant_run(DAT_20000e77);\n        }\n        if ((var18 & 0x200) != 0) {\n          index = settings_read_coord_data(DAT_20000e8c,&var3);\n          if (index == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = var3;\n          DAT_20000e94 = stackVar1;\n          DAT_20000e98 = stackVar2;\n        }\n        switch(var14) {\n        case '\\x01':\n          index = __aeabi_fcmplt(var13,0);\n          if (index == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              mc_dwell(var13);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          tempVar4 = __aeabi_f2d(var13);\n          tempVar4 = trunc((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          var19 = __aeabi_d2iz((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n          if ((((var11 == '\\x02') || (var11 == '\\x14')) && (-1 < (int)var19)) &&\n             ((int)var19 < 7)) {\n            if ((var17 == 0) && (var11 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)var19 < 1) {\n                var19 = (uint)DAT_20000e8c;\n              }\n              else {\n                var19 = var19 - 1;\n              }\n              index = settings_read_coord_data(var19 & 0xff,array1);\n              if (index == 0) {\n                return '\\n';\n              }\n              for (var10 = 0; var10 < 3; var10 = var10 + 1) {\n                if (((int)(uint)var17 >> var10 & 1U) != 0) {\n                  if (var11 == '\\x14') {\n                    tempVar2 = (uint)var10;\n                    tempVar1 = __aeabi_fsub(*(undefined4 *)(&DAT_20000e74 + (var10 + 2) * 4),\n                                         array2[var10 + 3]);\n                    array1[tempVar2] = tempVar1;\n                  }\n                  else {\n                    array1[var10] = array2[var10 + 3];\n                  }\n                }\n              }\n              settings_write_coord_data(var19 & 0xff,array1);\n              if (var19 == DAT_20000e8c) {\n                DAT_20000e90 = array1[0];\n                DAT_20000e94 = array1[1];\n                DAT_20000e98 = array1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          var17 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (var17 != 0) {\n            for (var9 = 0; var9 < 3; var9 = var9 + 1) {\n              if (((int)(uint)var17 >> var9 & 1U) == 0) {\n                array2[var9 + 3] = *(undefined4 *)(&DAT_20000e74 + (var9 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                tempVar2 = (uint)var9;\n                tempVar1 = __addsf3(array2[var9 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (var9 + 2) * 4));\n                array2[tempVar2 + 3] = tempVar1;\n              }\n              else {\n                tempVar3 = array2[var9 + 3];\n                tempVar1 = __addsf3(*(undefined4 *)(&DAT_20000e70 + (var9 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (var9 + 10) * 4));\n                tempVar2 = (uint)var9;\n                tempVar1 = __addsf3(tempVar3,tempVar1);\n                array2[tempVar2 + 3] = tempVar1;\n              }\n            }\n            mc_line(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n          }\n          if (var14 == '\\x05') {\n            index = settings_read_coord_data(7,array1 + 3);\n            if (index == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            index = settings_read_coord_data(6,array1 + 3);\n            if (index == 0) {\n              return '\\n';\n            }\n          }\n          mc_line(array1[3],var1,var2,DAT_20000ed0,0);\n          DAT_20000e7c = array1[3];\n          DAT_20000e80 = var1;\n          DAT_20000e84 = var2;\n          var17 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (var14 == '\\x06') {\n            settings_write_coord_data(7,&DAT_20000e7c);\n          }\n          else {\n            settings_write_coord_data(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (var17 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (var8 = 0; var8 < 3; var8 = var8 + 1) {\n              if (((int)(uint)var17 >> var8 & 1U) != 0) {\n                tempVar1 = __aeabi_fsub(*(undefined4 *)(&DAT_20000e74 + (var8 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (var8 + 8) * 4));\n                tempVar2 = (uint)var8;\n                tempVar1 = __aeabi_fsub(tempVar1,array2[var8 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (tempVar2 + 10) * 4) = tempVar1;\n              }\n            }\n          }\n          var17 = 0;\n          break;\n        case '\\b':\n          memset(&DAT_20000e9c,0,0xc);\n        }\n        if (((var18 & 4) != 0) || (var17 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((index = __aeabi_fcmplt(var16,0), index != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((var15 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (var7 = 0; var7 < 3; var7 = var7 + 1) {\n            if (((int)(uint)var17 >> var7 & 1U) == 0) {\n              array2[var7 + 3] = *(undefined4 *)(&DAT_20000e74 + (var7 + 2) * 4);\n            }\n            else if (var15 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                tempVar2 = (uint)var7;\n                tempVar1 = __addsf3(array2[var7 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (var7 + 2) * 4));\n                array2[tempVar2 + 3] = tempVar1;\n              }\n              else {\n                tempVar3 = array2[var7 + 3];\n                tempVar1 = __addsf3(*(undefined4 *)(&DAT_20000e70 + (var7 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (var7 + 10) * 4));\n                tempVar2 = (uint)var7;\n                tempVar1 = __addsf3(tempVar3,tempVar1);\n                array2[tempVar2 + 3] = tempVar1;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (var17 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              mc_line(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (var17 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              tempVar1 = var16;\n              if (DAT_20000e72 == '\\0') {\n                tempVar1 = DAT_20000e78;\n              }\n              mc_line(array2[3],array2[4],array2[5],tempVar1,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            var17 = var17 & ~(byte)(1 << DAT_20000e8b);\n            if ((var17 == 0) ||\n               (((index = __aeabi_fcmpeq(var12,0), index != 0 &&\n                 (index = __aeabi_fcmpeq(array2[DAT_20000e89],0), index != 0)) &&\n                (index = __aeabi_fcmpeq(array2[DAT_20000e8a],0), index != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              index = __aeabi_fcmpeq(var12,0);\n              if (index == 0) {\n                var5 = __aeabi_fsub(array2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                var4 = __aeabi_fsub(array2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                memset(array2,0,0xc);\n                tempVar1 = __aeabi_fmul(var12,0x40800000);\n                tempVar1 = __aeabi_fmul(tempVar1,var12);\n                tempVar3 = __aeabi_fmul(var5,var5);\n                tempVar1 = __aeabi_fsub(tempVar1,tempVar3);\n                tempVar3 = __aeabi_fmul(var4,var4);\n                var6 = __aeabi_fsub(tempVar1,tempVar3);\n                index = __aeabi_fcmplt(var6,0);\n                if (index != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                tempVar4 = __aeabi_f2d(var6);\n                tempVar4 = sqrt((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n                tempVar5 = __aeabi_f2d(var5);\n                tempVar6 = __aeabi_f2d(var4);\n                tempVar5 = hypot((int)tempVar5,(int)((ulonglong)tempVar5 >> 0x20),(int)tempVar6,\n                              (int)((ulonglong)tempVar6 >> 0x20));\n                tempVar4 = __divdf3((int)tempVar4,(uint)((ulonglong)tempVar4 >> 0x20) ^ 0x80000000,(int)tempVar5\n                                 ,(int)((ulonglong)tempVar5 >> 0x20));\n                var6 = __truncdfsf2((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  var6 = var6 ^ 0x80000000;\n                }\n                index = __aeabi_fcmplt(var12,0);\n                if (index != 0) {\n                  var6 = var6 ^ 0x80000000;\n                  var12 = var12 ^ 0x80000000;\n                }\n                tempVar1 = __aeabi_fmul(var4,var6);\n                tempVar1 = __aeabi_fsub(var5,tempVar1);\n                tempVar2 = (uint)DAT_20000e89;\n                tempVar1 = __aeabi_fmul(tempVar1,0x3f000000);\n                array2[tempVar2] = tempVar1;\n                tempVar1 = __aeabi_fmul(var5,var6);\n                tempVar1 = __addsf3(tempVar1,var4);\n                tempVar2 = (uint)DAT_20000e8a;\n                tempVar1 = __aeabi_fmul(tempVar1,0x3f000000);\n                array2[tempVar2] = tempVar1;\n              }\n              else {\n                tempVar4 = __aeabi_f2d(array2[DAT_20000e89]);\n                tempVar5 = __aeabi_f2d(array2[DAT_20000e8a]);\n                tempVar4 = hypot((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20),(int)tempVar5,\n                              (int)((ulonglong)tempVar5 >> 0x20));\n                var12 = __truncdfsf2((int)tempVar4,(int)((ulonglong)tempVar4 >> 0x20));\n              }\n              flag2 = DAT_20000e71 == '\\x02';\n              tempVar1 = var16;\n              if (DAT_20000e72 == '\\0') {\n                tempVar1 = DAT_20000e78;\n              }\n              mc_arc(&DAT_20000e7c,array2 + 3,array2,DAT_20000e89,DAT_20000e8a,DAT_20000e8b,\n                     tempVar1,DAT_20000e72,var12,flag2);\n            }\n            break;\n          case '\\x04':\n            if (var17 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = array2[3];\n          DAT_20000e80 = array2[4];\n          DAT_20000e84 = array2[5];\n        }\n        result = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          plan_synchronize();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            mc_reset();\n            result = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            result = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_function_080005b4",
                "param_1": "param",
                "iVar1": "index",
                "uVar2": "tempVar1",
                "cVar3": "result",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "uVar6": "tempVar4",
                "uVar7": "tempVar5",
                "uVar8": "tempVar6",
                "local_94": "array1",
                "local_84": "var1",
                "local_80": "var2",
                "local_7c": "var3",
                "uStack_78": "stackVar1",
                "uStack_74": "stackVar2",
                "auStack_70": "array2",
                "local_58": "variable1",
                "local_52": "variable2",
                "local_51": "flag1",
                "local_50": "var4",
                "local_4c": "var5",
                "local_45": "flag2",
                "local_44": "var6",
                "local_3d": "var7",
                "local_3c": "var8",
                "local_3b": "var9",
                "local_3a": "var10",
                "local_39": "var11",
                "local_38": "var12",
                "local_34": "var13",
                "local_2f": "flag3",
                "local_2e": "var14",
                "local_2d": "var15",
                "local_2c": "var16",
                "local_27": "var17",
                "local_26": "var18",
                "local_24": "var19"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "mc_line",
                "mc_arc",
                "__aeabi_fsub",
                "__aeabi_d2iz",
                "__addsf3",
                "next_statement",
                "__aeabi_d2uiz",
                "__aeabi_fcmplt",
                "__divdf3",
                "memset",
                "sqrt",
                "trunc",
                "__aeabi_fmul",
                "__aeabi_fcmple",
                "mc_dwell",
                "plan_synchronize",
                "__aeabi_f2d",
                "select_plane",
                "settings_read_coord_data",
                "mc_reset",
                "spindle_run",
                "to_millimeters",
                "hypot",
                "__truncdfsf2",
                "coolant_run",
                "settings_write_coord_data",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "validate_and_read_float_0800184c",
            "code": "\nundefined4 validateAndReadFloat_0800184c(byte *outputValue,undefined4 floatPrecision,int dataAddress,byte *dataPtr)\n\n{\n  int readFloatResult;\n  undefined4 result;\n  \n  if (*(char *)(dataAddress + (uint)*dataPtr) == '\\0') {\n    result = 0;\n  }\n  else {\n    *outputValue = *(byte *)(dataAddress + (uint)*dataPtr);\n    if ((*outputValue < 0x41) || (0x5a < *outputValue)) {\n      DAT_20000e70 = 2;\n      result = 0;\n    }\n    else {\n      *dataPtr = *dataPtr + 1;\n      readFloatResult = read_float(dataAddress,dataPtr,floatPrecision);\n      if (readFloatResult == 0) {\n        DAT_20000e70 = 1;\n        result = 0;\n      }\n      else {\n        result = 1;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "validate_and_read_float_0800184c",
                "param_1": "outputValue",
                "param_2": "floatPrecision",
                "param_3": "dataAddress",
                "param_4": "dataPtr",
                "iVar1": "readFloatResult",
                "uVar2": "result"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "read_float"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "set_active_bits_080018cc",
            "code": "\n\n\nvoid set_active_bits_080018cc(uint input_value)\n\n{\n  _DAT_40021014 = input_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "set_active_bits_080018cc",
                "param_1": "input_value"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "update_flag_bits_080018fc",
            "code": "\n\n\nvoid updateFlagBits_080018fc(uint newFlagValue)\n\n{\n  _DAT_40021014 = newFlagValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "update_flag_bits_080018fc",
                "param_1": "newFlagValue"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "extract_bit_value_0800192c",
            "code": "\nvoid extractBitValue_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "extract_bit_value_0800192c"
            },
            "calling": [
                "settings_store_global_setting",
                "grbl_main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "reset_and_flag_check_0800195c",
            "code": "\nvoid reset_and_flag_check_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    mc_reset();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "reset_and_flag_check_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "calculate_flag_value_08001994",
            "code": "\nvoid calculateFlagValue_08001994(byte flagBits,char isFlagSet,char isDebounceSet,undefined4 multiplier)\n\n{\n  undefined4 result;\n  uint maxValue;\n  undefined8 floatValue1;\n  undefined8 floatValue2;\n  byte tempFlagBits;\n  uint value1;\n  uint value2;\n  uint value3;\n  ushort activeBits;\n  uint roundedValue1;\n  int roundedValue2;\n  undefined4 truncatedValue;\n  uint tempValue;\n  uint debounceValue;\n  ushort updatedActiveBits;\n  uint delayValue;\n  uint sumValue;\n  int differenceValue;\n  int valueToSubtract1;\n  int valueToSubtract2;\n  int valueToSubtract3;\n  ushort flagValue;\n  uint minimumValue;\n  char incrementFlag;\n  \n  incrementFlag = '\\0';\n  memset(&value1,0,0xc);\n  if ((flagBits & 1) != 0) {\n    incrementFlag = incrementFlag + '\\x01';\n    floatValue1 = __aeabi_f2d(DAT_20000ebc);\n    value1 = lround((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20));\n  }\n  if ((flagBits & 2) != 0) {\n    incrementFlag = incrementFlag + '\\x01';\n    floatValue1 = __aeabi_f2d(DAT_20000ec0);\n    value2 = lround((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20));\n  }\n  if ((flagBits & 4) != 0) {\n    incrementFlag = incrementFlag + '\\x01';\n    floatValue1 = __aeabi_f2d(DAT_20000ec4);\n    value3 = lround((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20));\n  }\n  maxValue = value3;\n  if (value3 < value2) {\n    maxValue = value2;\n  }\n  tempValue = value1;\n  if (value1 < maxValue) {\n    tempValue = maxValue;\n  }\n  floatValue1 = __floatunsidf(tempValue);\n  floatValue2 = __floatunsidf(incrementFlag);\n  floatValue2 = sqrt((int)floatValue2,(int)((ulonglong)floatValue2 >> 0x20));\n  floatValue1 = __divdf3((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20),(int)floatValue2,\n                   (int)((ulonglong)floatValue2 >> 0x20));\n  truncatedValue = __truncdfsf2((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20));\n  result = __aeabi_fmul(DAT_20000edc,truncatedValue);\n  result = __aeabi_fdiv(result,0x453b8000);\n  floatValue1 = __aeabi_f2d(result);\n  floatValue1 = ceil((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20));\n  roundedValue2 = __aeabi_d2uiz((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20));\n  floatValue1 = __floatunsidf(incrementFlag);\n  floatValue1 = sqrt((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20));\n  floatValue2 = __aeabi_f2d(multiplier);\n  floatValue1 = __muldf3((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20),(int)floatValue2,\n                   (int)((ulonglong)floatValue2 >> 0x20));\n  result = __truncdfsf2((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20));\n  result = __aeabi_fmul(truncatedValue,result);\n  result = __aeabi_fdiv(0x4c64e1c0,result);\n  floatValue1 = __aeabi_f2d(result);\n  roundedValue1 = lround((int)floatValue1,(int)((ulonglong)floatValue1 >> 0x20));\n  minimumValue = 75000;\n  if (roundedValue1 < 75000) {\n    minimumValue = roundedValue1;\n  }\n  activeBits = DAT_20000ed4;\n  flagValue = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (isFlagSet == '\\0') {\n    flagValue = flagValue ^ 0xaa0;\n  }\n  update_flag_bits_080018fc(flagValue);\n  set_active_bits_080018cc(activeBits);\n  valueToSubtract1 = -(tempValue >> 1);\n  differenceValue = minimumValue - DAT_20000ec9;\n  sumValue = 0;\n  delayValue = 10000;\n  tempFlagBits = flagBits;\n  valueToSubtract2 = valueToSubtract1;\n  valueToSubtract3 = valueToSubtract1;\n  while( true ) {\n    updatedActiveBits = activeBits;\n    debounceValue = debounce_rd();\n    if (isDebounceSet == '\\0') {\n      debounceValue = debounceValue ^ 0x1e;\n    }\n    if (((tempFlagBits & 1) != 0) && (valueToSubtract3 = valueToSubtract3 + value1, 0 < valueToSubtract3)) {\n      if ((debounceValue & 0x10) == 0) {\n        tempFlagBits = tempFlagBits & 0xfe;\n      }\n      else {\n        updatedActiveBits = updatedActiveBits ^ 0x10;\n      }\n      valueToSubtract3 = valueToSubtract3 - tempValue;\n    }\n    if (((tempFlagBits & 2) != 0) && (valueToSubtract2 = valueToSubtract2 + value2, 0 < valueToSubtract2)) {\n      if ((debounceValue & 8) == 0) {\n        tempFlagBits = tempFlagBits & 0xfd;\n      }\n      else {\n        updatedActiveBits = updatedActiveBits ^ 0x440;\n      }\n      valueToSubtract2 = valueToSubtract2 - tempValue;\n    }\n    if (((tempFlagBits & 4) != 0) && (valueToSubtract1 = valueToSubtract1 + value3, 0 < valueToSubtract1)) {\n      if ((debounceValue & 4) == 0) {\n        tempFlagBits = tempFlagBits & 0xfb;\n      }\n      else {\n        updatedActiveBits = updatedActiveBits ^ 0x100;\n      }\n      valueToSubtract1 = valueToSubtract1 - tempValue;\n    }\n    if ((tempFlagBits == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    set_active_bits_080018cc(updatedActiveBits);\n    delay_us(DAT_20000ec9);\n    set_active_bits_080018cc(activeBits);\n    delay_us(differenceValue);\n    if ((roundedValue1 < minimumValue) && (delayValue = minimumValue + delayValue, 20000 < delayValue)) {\n      delayValue = delayValue - 20000;\n      sumValue = roundedValue2 + sumValue;\n      minimumValue = 60000000 / sumValue;\n      if (minimumValue < roundedValue1) {\n        minimumValue = roundedValue1;\n      }\n      differenceValue = minimumValue - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "calculate_flag_value_08001994",
                "param_1": "flagBits",
                "param_2": "isFlagSet",
                "param_3": "isDebounceSet",
                "param_4": "multiplier",
                "uVar1": "result",
                "uVar2": "maxValue",
                "uVar3": "floatValue1",
                "uVar4": "floatValue2",
                "local_61": "tempFlagBits",
                "local_5c": "value1",
                "local_58": "value2",
                "local_54": "value3",
                "local_4e": "activeBits",
                "local_4c": "roundedValue1",
                "local_48": "roundedValue2",
                "local_44": "truncatedValue",
                "local_40": "tempValue",
                "local_3c": "debounceValue",
                "local_36": "updatedActiveBits",
                "local_34": "delayValue",
                "local_30": "sumValue",
                "local_2c": "differenceValue",
                "local_28": "valueToSubtract1",
                "local_24": "valueToSubtract2",
                "local_20": "valueToSubtract3",
                "local_1a": "flagValue",
                "local_18": "minimumValue",
                "local_11": "incrementFlag"
            },
            "calling": [
                "limits_go_home"
            ],
            "called": [
                "sqrt",
                "FUN_080018cc",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "lround",
                "__floatunsidf",
                "__aeabi_f2d",
                "ceil",
                "__aeabi_d2uiz",
                "__truncdfsf2",
                "debounce_rd",
                "__divdf3",
                "FUN_080018fc",
                "memset",
                "delay_us",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "perform_homing_cycle_08001d4c",
            "code": "\nvoid performHomingCycle_08001d4c(void)\n\n{\n  char updatedCounter;\n  char counter;\n  \n  st_wake_up();\n  homing_cycle(4,1,0,DAT_20000eec);\n  homing_cycle(3,1,0,DAT_20000eec);\n  delay_ms(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    updatedCounter = counter + -1;\n    if (counter == '\\0') break;\n    homing_cycle(7,0,1,DAT_20000ee8);\n    delay_ms(DAT_20000ef0);\n    counter = updatedCounter;\n    if ('\\0' < updatedCounter) {\n      homing_cycle(7,1,0,DAT_20000ee8);\n      delay_ms(DAT_20000ef0);\n    }\n  }\n  st_go_idle();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "perform_homing_cycle_08001d4c",
                "local_9": "counter",
                "cVar1": "updatedCounter"
            },
            "calling": [
                "mc_go_home"
            ],
            "called": [
                "st_go_idle",
                "delay_ms",
                "st_wake_up",
                "homing_cycle"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "initialize_system_08001ddc",
            "code": "\nvoid initialize_system_08001ddc(void)\n\n{\n  initialize_serial();\n  initialize_settings();\n  initialize_st();\n  clear_memory(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      reset_serial_read_buffer();\n      initialize_plan();\n      initialize_gc();\n      initialize_protocol();\n      initialize_spindle();\n      initialize_coolant();\n      initialize_limits();\n      reset_st();\n      synchronize_current_position();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        provide_feedback(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        execute_startup_protocol();\n      }\n    }\n    execute_runtime_protocol();\n    process_protocol();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "initialize_system_08001ddc",
                "serial_init": "initialize_serial",
                "settings_init": "initialize_settings",
                "st_init": "initialize_st",
                "memset": "clear_memory",
                "serial_reset_read_buffer": "reset_serial_read_buffer",
                "plan_init": "initialize_plan",
                "gc_init": "initialize_gc",
                "protocol_init": "initialize_protocol",
                "spindle_init": "initialize_spindle",
                "coolant_init": "initialize_coolant",
                "limits_init": "initialize_limits",
                "st_reset": "reset_st",
                "sys_sync_current_position": "synchronize_current_position",
                "report_feedback_message": "provide_feedback",
                "protocol_execute_startup": "execute_startup_protocol",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "protocol_process": "process_protocol"
            },
            "calling": [
                "main"
            ],
            "called": [
                "protocol_process",
                "st_reset",
                "report_feedback_message",
                "serial_reset_read_buffer",
                "gc_init",
                "st_init",
                "settings_init",
                "protocol_init",
                "serial_init",
                "coolant_init",
                "protocol_execute_startup",
                "plan_init",
                "sys_sync_current_position",
                "protocol_execute_runtime",
                "spindle_init",
                "memset",
                "limits_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "process_buffer_08001e98",
            "code": "\nvoid process_buffer_08001e98(undefined4 buffer_param1,undefined4 buffer_param2,undefined4 buffer_param3,undefined4 buffer_param4,\n                 undefined buffer_param5)\n\n{\n  int check_result;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      protocol_execute_runtime();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      check_result = plan_check_full_buffer();\n    } while (check_result != 0);\n    plan_buffer_line(buffer_param1,buffer_param2,buffer_param3,buffer_param4,buffer_param5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      st_cycle_start();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "process_buffer_08001e98",
                "param_1": "buffer_param1",
                "param_2": "buffer_param2",
                "param_3": "buffer_param3",
                "param_4": "buffer_param4",
                "param_5": "buffer_param5",
                "iVar1": "check_result"
            },
            "calling": [
                "mc_arc",
                "gc_execute_line",
                "mc_go_home"
            ],
            "called": [
                "plan_check_full_buffer",
                "protocol_execute_runtime",
                "st_cycle_start",
                "plan_buffer_line"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_angle_08001f00",
            "code": "\nvoid calculateAngle_08001f00(int array1,undefined4 *array2,int array3,byte index1,byte index2,byte index3\n                 ,undefined4 constant1,char flag1,undefined4 constant2,char flag2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int comparison;\n  uint temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  uint tempArray [4];\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  ushort angle;\n  undefined4 distance;\n  undefined4 tempVar7;\n  undefined4 tempVar8;\n  uint tempVar9;\n  undefined4 tempVar10;\n  undefined4 tempVar11;\n  char count;\n  ushort i;\n  undefined4 angleRadians;\n  uint distanceValue;\n  uint tempVar12;\n  \n  tempVar11 = __addsf3(*(undefined4 *)((uint)index1 * 4 + array1),\n                      *(undefined4 *)((uint)index1 * 4 + array3));\n  tempVar10 = __addsf3(*(undefined4 *)((uint)index2 * 4 + array1),\n                      *(undefined4 *)((uint)index2 * 4 + array3));\n  tempVar9 = __aeabi_fsub(array2[index3],*(undefined4 *)((uint)index3 * 4 + array1));\n  tempVar12 = *(uint *)((uint)index1 * 4 + array3) ^ 0x80000000;\n  distanceValue = *(uint *)((uint)index2 * 4 + array3) ^ 0x80000000;\n  tempVar8 = __aeabi_fsub(array2[index1],tempVar11);\n  tempVar7 = __aeabi_fsub(array2[index2],tempVar10);\n  result1 = __aeabi_fmul(tempVar12,tempVar7);\n  result2 = __aeabi_fmul(distanceValue,tempVar8);\n  result1 = __aeabi_fsub(result1,result2);\n  temp2 = __aeabi_f2d(result1);\n  result1 = __aeabi_fmul(tempVar12,tempVar8);\n  result2 = __aeabi_fmul(distanceValue,tempVar7);\n  result1 = __addsf3(result1,result2);\n  temp3 = __aeabi_f2d(result1);\n  temp2 = atan2((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                (int)((ulonglong)temp3 >> 0x20));\n  angleRadians = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  if (flag2 == '\\0') {\n    comparison = __aeabi_fcmple(angleRadians,0);\n    if (comparison != 0) {\n      temp2 = __aeabi_f2d(angleRadians);\n      temp2 = __aeabi_dadd((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x54442d18,0x401921fb);\n      angleRadians = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    }\n  }\n  else {\n    comparison = __aeabi_fcmpge(angleRadians,0);\n    if (comparison != 0) {\n      temp2 = __aeabi_f2d(angleRadians);\n      temp2 = __subdf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x54442d18,0x401921fb);\n      angleRadians = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    }\n  }\n  result1 = __aeabi_fmul(angleRadians,constant2);\n  temp2 = __aeabi_f2d(result1);\n  temp3 = __aeabi_f2d(tempVar9 & 0x7fffffff);\n  temp2 = hypot((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                (int)((ulonglong)temp3 >> 0x20));\n  distance = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  comparison = __aeabi_fcmpeq(distance,0);\n  if (comparison == 0) {\n    result1 = __aeabi_fdiv(distance,DAT_20000ed8);\n    temp2 = __aeabi_f2d(result1);\n    temp2 = floor((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    angle = __aeabi_d2uiz((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if (flag1 != '\\0') {\n      result1 = __floatsisf(angle);\n      constant1 = __aeabi_fmul(constant1,result1);\n    }\n    result1 = __floatsisf(angle);\n    tempVar6 = __aeabi_fdiv(angleRadians,result1);\n    result1 = __floatsisf(angle);\n    tempVar5 = __aeabi_fdiv(tempVar9,result1);\n    temp2 = __aeabi_f2d(tempVar6);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3fe00000);\n    temp3 = __aeabi_f2d(tempVar6);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp3,\n                     (int)((ulonglong)temp3 >> 0x20));\n    temp2 = __subdf3(0,0x3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    tempVar4 = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    tempVar3 = tempVar6;\n    count = '\\0';\n    tempArray[index3] = *(uint *)(array1 + (uint)index3 * 4);\n    for (i = 1; i < angle; i = i + 1) {\n      if ((int)count < (int)(uint)DAT_20000efa) {\n        result1 = __aeabi_fmul(tempVar12,tempVar3);\n        result2 = __aeabi_fmul(distanceValue,tempVar4);\n        tempArray[3] = __addsf3(result1,result2);\n        result1 = __aeabi_fmul(tempVar12,tempVar4);\n        result2 = __aeabi_fmul(distanceValue,tempVar3);\n        tempVar12 = __aeabi_fsub(result1,result2);\n        distanceValue = tempArray[3];\n        count = count + '\\x01';\n      }\n      else {\n        result1 = __floatsisf(i);\n        result1 = __aeabi_fmul(result1,tempVar6);\n        temp2 = __aeabi_f2d(result1);\n        temp2 = cos((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        tempVar2 = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        result1 = __floatsisf(i);\n        result1 = __aeabi_fmul(result1,tempVar6);\n        temp2 = __aeabi_f2d(result1);\n        temp2 = sin((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        tempVar1 = __truncdfsf2((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n        result1 = __aeabi_fmul(*(uint *)((uint)index1 * 4 + array3) ^ 0x80000000,tempVar2);\n        result2 = __aeabi_fmul(*(undefined4 *)((uint)index2 * 4 + array3),tempVar1);\n        tempVar12 = __addsf3(result1,result2);\n        result1 = __aeabi_fmul(*(uint *)((uint)index1 * 4 + array3) ^ 0x80000000,tempVar1);\n        result2 = __aeabi_fmul(*(undefined4 *)((uint)index2 * 4 + array3),tempVar2);\n        distanceValue = __aeabi_fsub(result1,result2);\n        count = '\\0';\n      }\n      temp1 = __addsf3(tempVar11,tempVar12);\n      tempArray[index1] = temp1;\n      temp1 = __addsf3(tempVar10,distanceValue);\n      tempArray[index2] = temp1;\n      temp1 = __addsf3(tempArray[index3],tempVar5);\n      tempArray[index3] = temp1;\n      mc_line(tempArray[0],tempArray[1],tempArray[2],constant1,flag1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    mc_line(*array2,array2[1],array2[2],constant1,flag1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_angle_08001f00",
                "param_1": "array1",
                "param_2": "array2",
                "param_3": "array3",
                "param_4": "index1",
                "param_5": "index2",
                "param_6": "index3",
                "param_7": "constant1",
                "param_8": "flag1",
                "param_9": "constant2",
                "param_10": "flag2",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "comparison",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "temp3",
                "local_6c": "tempArray",
                "local_5c": "tempVar1",
                "local_58": "tempVar2",
                "local_54": "tempVar3",
                "local_50": "tempVar4",
                "local_4c": "tempVar5",
                "local_48": "tempVar6",
                "local_42": "angle",
                "local_40": "distance",
                "local_3c": "tempVar7",
                "local_38": "tempVar8",
                "local_34": "tempVar9",
                "local_30": "tempVar10",
                "local_2c": "tempVar11",
                "local_27": "count",
                "local_26": "i",
                "local_24": "angleRadians",
                "local_20": "distanceValue",
                "local_1c": "tempVar12"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "mc_line",
                "sin",
                "__aeabi_fsub",
                "__aeabi_dadd",
                "atan2",
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fcmpge",
                "floor",
                "__aeabi_fdiv",
                "__aeabi_fcmple",
                "__subdf3",
                "__aeabi_f2d",
                "cos",
                "__floatsisf",
                "__aeabi_d2uiz",
                "hypot",
                "__truncdfsf2",
                "__aeabi_fcmpeq",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "calculate_delay_and_execute_protocol_08002408",
            "code": "\nvoid calculateDelayAndExecuteProtocol_08002408(undefined4 timeFactor)\n\n{\n  undefined2 result;\n  undefined4 delayTime;\n  undefined4 tempValue;\n  undefined8 floorValue;\n  ushort iterationCount;\n  \n  delayTime = __aeabi_fmul(timeFactor,0x41a00000);\n  floorValue = __aeabi_f2d(delayTime);\n  floorValue = floor((int)floorValue,(int)((ulonglong)floorValue >> 0x20));\n  iterationCount = __aeabi_d2uiz((int)floorValue,(int)((ulonglong)floorValue >> 0x20));\n  plan_synchronize();\n  delayTime = __aeabi_fmul(timeFactor,0x447a0000);\n  tempValue = __floatsisf((uint)iterationCount * 0x32);\n  delayTime = __aeabi_fsub(delayTime,tempValue);\n  floorValue = __aeabi_f2d(delayTime);\n  floorValue = floor((int)floorValue,(int)((ulonglong)floorValue >> 0x20));\n  result = __aeabi_d2uiz((int)floorValue,(int)((ulonglong)floorValue >> 0x20));\n  delay_ms(result);\n  while ((iterationCount != 0 && (protocol_execute_runtime(), DAT_20000ea8 == '\\0'))) {\n    _delay_ms(0x32);\n    iterationCount = iterationCount - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "calculate_delay_and_execute_protocol_08002408",
                "param_1": "timeFactor",
                "uVar1": "result",
                "uVar2": "delayTime",
                "uVar3": "tempValue",
                "uVar4": "floorValue",
                "local_12": "iterationCount"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__floatsisf",
                "__aeabi_d2uiz",
                "delay_ms",
                "__aeabi_fmul",
                "protocol_execute_runtime",
                "floor",
                "_delay_ms",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "initialize_system_080024c4",
            "code": "\nvoid initializeSystem_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char isLimitReachedZ;\n  char isLimitReachedY;\n  char isLimitReachedX;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  moveToHomePosition();\n  executeRuntimeProtocol();\n  if (DAT_20000ea8 == '\\0') {\n    memset(&DAT_20000eac,0,0xc);\n    syncCurrentPosition();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      isLimitReachedX = -1;\n    }\n    else {\n      isLimitReachedX = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      isLimitReachedY = -1;\n    }\n    else {\n      isLimitReachedY = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      isLimitReachedZ = -1;\n    }\n    else {\n      isLimitReachedZ = '\\x01';\n    }\n    uVar1 = convertToIntToFloat((int)isLimitReachedX);\n    uVar1 = multiplyFloats(uVar1,DAT_20000ef4);\n    uVar2 = convertToIntToFloat((int)isLimitReachedY);\n    uVar2 = multiplyFloats(uVar2,DAT_20000ef4);\n    uVar3 = convertToIntToFloat((int)isLimitReachedZ);\n    uVar3 = multiplyFloats(uVar3,DAT_20000ef4);\n    drawLine(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    startCycle();\n    synchronizePlan();\n    syncCurrentPosition();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  endFunction;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "initialize_system_080024c4",
                "local_11": "isLimitReachedX",
                "local_12": "isLimitReachedY",
                "local_13": "isLimitReachedZ",
                "limits_go_home": "moveToHomePosition",
                "protocol_execute_runtime": "executeRuntimeProtocol",
                "sys_sync_current_position": "syncCurrentPosition",
                "__floatsisf": "convertToIntToFloat",
                "__aeabi_fmul": "multiplyFloats",
                "mc_line": "drawLine",
                "st_cycle_start": "startCycle",
                "plan_synchronize": "synchronizePlan",
                "return": "endFunction"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "mc_line",
                "__floatsisf",
                "limits_go_home",
                "__aeabi_fmul",
                "sys_sync_current_position",
                "protocol_execute_runtime",
                "st_cycle_start",
                "memset",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "stop_if_not_busy_080025e8",
            "code": "\nvoid stopIfNotBusy_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    spindle_stop();\n    coolant_stop();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      st_go_idle();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "stop_if_not_busy_080025e8"
            },
            "calling": [
                "protocol_execute_line",
                "gc_execute_line",
                "serial_rx_hook",
                "limits_isr",
                "buttons_isr"
            ],
            "called": [
                "st_go_idle",
                "coolant_stop",
                "spindle_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_unsigned_int_08002638",
            "code": "\nundefined4 parseUnsignedInt_08002638(int baseAddress,byte *inputBuffer,uint *outputValue)\n\n{\n  byte digit;\n  bool isNegative;\n  bool isFractional;\n  int comparisonResult;\n  char *currentChar;\n  char *nextChar;\n  undefined4 returnValue;\n  undefined8 tempValue;\n  uint floatValue;\n  byte digitCount;\n  char decimalCount;\n  int intValue;\n  char leadingChar;\n  char *nextCharPointer;\n  \n  nextChar = (char *)(baseAddress + (uint)*inputBuffer);\n  currentChar = nextChar + 1;\n  leadingChar = *nextChar;\n  isNegative = false;\n  if (leadingChar == '-') {\n    isNegative = true;\n    leadingChar = *currentChar;\n    nextCharPointer = nextChar + 2;\n  }\n  else {\n    nextCharPointer = currentChar;\n    if (leadingChar == '+') {\n      nextCharPointer = nextChar + 2;\n      leadingChar = *currentChar;\n    }\n  }\n  intValue = 0;\n  decimalCount = '\\0';\n  digitCount = 0;\n  isFractional = false;\n  do {\n    digit = leadingChar - 0x30;\n    if (digit < 10) {\n      digitCount = digitCount + 1;\n      if (digitCount < 9) {\n        if (isFractional) {\n          decimalCount = decimalCount + -1;\n        }\n        intValue = (uint)digit + intValue * 10;\n      }\n      else if (!isFractional) {\n        decimalCount = decimalCount + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (isFractional)) {\n        if (digitCount == 0) {\n          returnValue = 0;\n        }\n        else {\n          floatValue = __floatunsisf(intValue);\n          comparisonResult = __aeabi_fcmpeq(floatValue,0);\n          if (comparisonResult == 0) {\n            for (; decimalCount < -1; decimalCount = decimalCount + '\\x02') {\n              tempValue = __aeabi_f2d(floatValue);\n              tempValue = __muldf3((int)tempValue,(int)((ulonglong)tempValue >> 0x20),0x47ae147b,0x3f847ae1);\n              floatValue = __truncdfsf2((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n            }\n            if (decimalCount < '\\0') {\n              tempValue = __aeabi_f2d(floatValue);\n              tempValue = __muldf3((int)tempValue,(int)((ulonglong)tempValue >> 0x20),0x9999999a,0x3fb99999);\n              floatValue = __truncdfsf2((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n            }\n            else {\n              for (; '\\0' < decimalCount; decimalCount = decimalCount + -1) {\n                floatValue = __aeabi_fmul(floatValue,0x41200000);\n              }\n            }\n          }\n          if (isNegative) {\n            *outputValue = floatValue ^ 0x80000000;\n          }\n          else {\n            *outputValue = floatValue;\n          }\n          *inputBuffer = ((char)nextCharPointer - (char)baseAddress) - 1;\n          returnValue = 1;\n        }\n        return returnValue;\n      }\n      isFractional = true;\n    }\n    leadingChar = *nextCharPointer;\n    nextCharPointer = nextCharPointer + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_unsigned_int_08002638",
                "param_1": "baseAddress",
                "param_2": "inputBuffer",
                "param_3": "outputValue",
                "bVar1": "digit",
                "bVar2": "isNegative",
                "bVar3": "isFractional",
                "iVar4": "comparisonResult",
                "pcVar5": "currentChar",
                "pcVar6": "nextChar",
                "uVar7": "returnValue",
                "uVar8": "tempValue",
                "local_1c": "floatValue",
                "local_16": "digitCount",
                "local_15": "decimalCount",
                "local_14": "intValue",
                "local_d": "leadingChar",
                "local_c": "nextCharPointer"
            },
            "calling": [
                "protocol_execute_line",
                "next_statement"
            ],
            "called": [
                "__aeabi_f2d",
                "__floatunsisf",
                "__truncdfsf2",
                "__aeabi_fmul",
                "__muldf3",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "limits_go_home",
                "mc_dwell",
                "report_alarm_message"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "set_current_positions_0800283a",
            "code": "\nvoid set_current_positions_0800283a(void)\n\n{\n  plan_set_current_position(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  gc_set_current_position(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "set_current_positions_0800283a"
            },
            "calling": [
                "grbl_main",
                "mc_go_home"
            ],
            "called": [
                "plan_set_current_position",
                "gc_set_current_position"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_check_08002870",
            "code": "\nchar incrementAndCheck_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_check_08002870",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "planner_recalculate_trapezoids",
                "plan_discard_current_block",
                "plan_reset_buffer",
                "planner_forward_pass",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "decrement_and_default_08002896",
            "code": "\nchar decrementAndDefault_08002896(char input)\n\n{\n  char result;\n  \n  result = input;\n  if (input == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "decrement_and_default_08002896",
                "param_1": "input",
                "local_9": "result"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_division_ratio_080028bc",
            "code": "\nundefined4 calculate_division_ratio_080028bc(undefined4 numerator,undefined4 denominator,undefined4 input_value)\n\n{\n  undefined4 squared_denominator;\n  undefined4 sum_of_squares;\n  \n  squared_denominator = multiply_float(denominator,denominator);\n  sum_of_squares = multiply_float(numerator,numerator);\n  squared_denominator = subtract_float(squared_denominator,sum_of_squares);\n  sum_of_squares = add_float(input_value,input_value);\n  squared_denominator = divide_float(squared_denominator,sum_of_squares);\n  return squared_denominator;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_division_ratio_080028bc",
                "param_1": "numerator",
                "param_2": "denominator",
                "param_3": "input_value",
                "uVar1": "squared_denominator",
                "uVar2": "sum_of_squares",
                "__aeabi_fmul": "multiply_float",
                "__aeabi_fsub": "subtract_float",
                "__addsf3": "add_float",
                "__aeabi_fdiv": "divide_float"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__aeabi_fmul",
                "__addsf3",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_division_result_08002908",
            "code": "\nundefined4 calculate_division_result_08002908(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 doubledInput3;\n  undefined4 squaredInput1;\n  \n  doubledInput3 = __addsf3(input3,input3);\n  doubledInput3 = __aeabi_fmul(doubledInput3,input4);\n  squaredInput1 = __aeabi_fmul(input1,input1);\n  doubledInput3 = __aeabi_fsub(doubledInput3,squaredInput1);\n  squaredInput1 = __aeabi_fmul(input2,input2);\n  doubledInput3 = __addsf3(doubledInput3,squaredInput1);\n  squaredInput1 = __aeabi_fmul(input3,0x40800000);\n  doubledInput3 = __aeabi_fdiv(doubledInput3,squaredInput1);\n  return doubledInput3;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_division_result_08002908",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "doubledInput3",
                "uVar2": "squaredInput1"
            },
            "calling": [
                "calculate_trapezoid_for_block"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "calculate_sqrt_difference_08002978",
            "code": "\nundefined4 calculate_sqrt_difference_08002978(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 squared_input_2;\n  undefined4 double_input_1;\n  undefined8 double_diff;\n  \n  squared_input_2 = multiply_floats(input_2,input_2);\n  double_input_1 = double_float(input_1,input_1);\n  double_input_1 = multiply_floats(double_input_1,input_3);\n  squared_input_2 = subtract_floats(squared_input_2,double_input_1);\n  double_diff = convert_float_to_double(squared_input_2);\n  double_diff = calculate_square_root((integer)double_diff,(integer)((unsigned_long_long)double_diff >> 0x20));\n  squared_input_2 = truncate_double_to_float((integer)double_diff,(integer)((unsigned_long_long)double_diff >> 0x20));\n  return squared_input_2;\n}\n\n",
            "renaming": {
                "FUN_08002978": "calculate_sqrt_difference_08002978",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "squared_input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_diff",
                "__aeabi_fmul": "multiply_floats",
                "__addsf3": "double_float",
                "__aeabi_fsub": "subtract_floats",
                "__aeabi_f2d": "convert_float_to_double",
                "sqrt": "calculate_square_root",
                "__truncdfsf2": "truncate_double_to_float",
                "int": "integer",
                "ulonglong": "unsigned_long_long"
            },
            "calling": [
                "planner_forward_pass_kernel",
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "sqrt",
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__truncdfsf2",
                "__addsf3",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_speed_080029d8",
            "code": "\nvoid updateSpeed_080029d8(undefined4 param1,int currentSpeedPtr,int maxSpeedPtr)\n\n{\n  int comparisonResult;\n  undefined4 newSpeed;\n  undefined4 currentSpeed;\n  \n  if (((currentSpeedPtr != 0) && (maxSpeedPtr != 0)) &&\n     (comparisonResult = __aeabi_fcmpeq(*(undefined4 *)(currentSpeedPtr + 0x18),*(undefined4 *)(currentSpeedPtr + 0x1c)),\n     comparisonResult == 0)) {\n    if ((*(char *)(currentSpeedPtr + 0x25) == '\\0') &&\n       (comparisonResult = __aeabi_fcmpgt(*(undefined4 *)(currentSpeedPtr + 0x1c),*(undefined4 *)(maxSpeedPtr + 0x18)),\n       comparisonResult != 0)) {\n      currentSpeed = *(undefined4 *)(currentSpeedPtr + 0x1c);\n      newSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(maxSpeedPtr + 0x18),\n                                  *(undefined4 *)(currentSpeedPtr + 0x20));\n      comparisonResult = __aeabi_fcmplt(currentSpeed,newSpeed);\n      if (comparisonResult == 0) {\n        newSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(maxSpeedPtr + 0x18),\n                                    *(undefined4 *)(currentSpeedPtr + 0x20));\n      }\n      else {\n        newSpeed = *(undefined4 *)(currentSpeedPtr + 0x1c);\n      }\n      *(undefined4 *)(currentSpeedPtr + 0x18) = newSpeed;\n    }\n    else {\n      *(undefined4 *)(currentSpeedPtr + 0x18) = *(undefined4 *)(currentSpeedPtr + 0x1c);\n    }\n    *(undefined *)(currentSpeedPtr + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_speed_080029d8",
                "param_1": "param1",
                "param_2": "currentSpeedPtr",
                "param_3": "maxSpeedPtr",
                "iVar1": "comparisonResult",
                "uVar2": "newSpeed",
                "uVar3": "currentSpeed"
            },
            "calling": [
                "planner_reverse_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpgt",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "process_blocks_08002a94",
            "code": "\nvoid process_blocks_08002a94(void)\n\n{\n  undefined *temp_ptr;\n  undefined *previous_block;\n  undefined *previous_previous_block;\n  byte current_block_index;\n  \n  current_block_index = DAT_20000cf0;\n  previous_block = (undefined *)0x0;\n  previous_previous_block = (undefined *)0x0;\n  while (temp_ptr = previous_previous_block, current_block_index != DAT_20000cf1) {\n    current_block_index = prev_block_index(current_block_index);\n    previous_previous_block = previous_block;\n    planner_reverse_pass_kernel(&DAT_20000870 + (uint)current_block_index * 0x40,previous_block,temp_ptr);\n    previous_block = &DAT_20000870 + (uint)current_block_index * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "process_blocks_08002a94",
                "local_9": "current_block_index",
                "local_18": "previous_block",
                "local_14": "previous_previous_block",
                "puVar1": "temp_ptr"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "prev_block_index",
                "planner_reverse_pass_kernel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "update_speed_if_necessary_08002afc",
            "code": "\nvoid updateSpeedIfNecessary_08002afc(int data1,int data2)\n\n{\n  int isLess;\n  undefined4 newSpeed;\n  undefined4 originalSpeed;\n  \n  if (((data1 != 0) && (*(char *)(data1 + 0x25) == '\\0')) &&\n     (isLess = __aeabi_fcmplt(*(undefined4 *)(data1 + 0x18),*(undefined4 *)(data2 + 0x18)),\n     isLess != 0)) {\n    originalSpeed = *(undefined4 *)(data2 + 0x18);\n    newSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data1 + 0x18),\n                                *(undefined4 *)(data1 + 0x20));\n    isLess = __aeabi_fcmplt(originalSpeed,newSpeed);\n    if (isLess == 0) {\n      newSpeed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data1 + 0x18),\n                                  *(undefined4 *)(data1 + 0x20));\n    }\n    else {\n      newSpeed = *(undefined4 *)(data2 + 0x18);\n    }\n    isLess = __aeabi_fcmpeq(newSpeed,*(undefined4 *)(data2 + 0x18));\n    if (isLess == 0) {\n      *(undefined4 *)(data2 + 0x18) = newSpeed;\n      *(undefined *)(data2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "update_speed_if_necessary_08002afc",
                "param_1": "data1",
                "param_2": "data2",
                "iVar1": "isLess",
                "uVar2": "newSpeed",
                "uVar3": "originalSpeed"
            },
            "calling": [
                "planner_forward_pass"
            ],
            "called": [
                "__aeabi_fcmplt",
                "max_allowable_speed",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "planner_forward_pass_08002ba8",
            "code": "\nvoid planner_forward_pass_08002ba8(void)\n\n{\n  uint block_num;\n  undefined *previous_block_ptr;\n  undefined *current_block_ptr;\n  undefined *previous_block;\n  undefined *current_block;\n  byte block_index;\n  \n  previous_block = (undefined *)0x0;\n  current_block = (undefined *)0x0;\n  block_index = DAT_20000cf1;\n  current_block_ptr = (undefined *)0x0;\n  while (previous_block_ptr = previous_block, block_index != DAT_20000cf0) {\n    previous_block = current_block;\n    block_num = (uint)block_index;\n    planner_forward_pass_08002ba8_kernel(previous_block_ptr,current_block,&DAT_20000870 + block_num * 0x40);\n    block_index = next_block_index(block_index);\n    current_block_ptr = previous_block_ptr;\n    current_block = &DAT_20000870 + block_num * 0x40;\n  }\n  planner_forward_pass_08002ba8_kernel(previous_block,current_block,0,previous_block,current_block_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "planner_forward_pass_08002ba8",
                "puVar2": "previous_block_ptr",
                "puVar3": "current_block_ptr",
                "local_14": "previous_block",
                "local_10": "current_block",
                "local_9": "block_index",
                "uVar1": "block_num"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "planner_forward_pass_kernel",
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "estimate_and_set_acceleration_08002c18",
            "code": "\nvoid estimateAndSetAcceleration_08002c18(int inputData,undefined4 accelerationFactor1,undefined4 accelerationFactor2)\n\n{\n  undefined4 scaledDistance1;\n  int scaledDistance2;\n  undefined4 accelerationDistance1;\n  undefined4 accelerationDistance2;\n  undefined4 intersectionDistance;\n  uint unsignedIntersectionDistance;\n  undefined8 temp;\n  int remainingDistance;\n  uint accelerationDistanceSum;\n  \n  scaledDistance1 = __floatunsisf(*(undefined4 *)(inputData + 0x3c));\n  scaledDistance1 = __aeabi_fmul(scaledDistance1,accelerationFactor1);\n  temp = __aeabi_f2d(scaledDistance1);\n  temp = ceil((int)temp,(int)((ulonglong)temp >> 0x20));\n  scaledDistance1 = __aeabi_d2uiz((int)temp,(int)((ulonglong)temp >> 0x20));\n  *(undefined4 *)(inputData + 0x28) = scaledDistance1;\n  scaledDistance1 = __floatunsisf(*(undefined4 *)(inputData + 0x3c));\n  scaledDistance1 = __aeabi_fmul(scaledDistance1,accelerationFactor2);\n  temp = __aeabi_f2d(scaledDistance1);\n  temp = ceil((int)temp,(int)((ulonglong)temp >> 0x20));\n  scaledDistance1 = __aeabi_d2uiz((int)temp,(int)((ulonglong)temp >> 0x20));\n  *(undefined4 *)(inputData + 0x2c) = scaledDistance1;\n  temp = __aeabi_i2d(*(int *)(inputData + 0x30) * 0x32);\n  temp = __muldf3((int)temp,(int)((ulonglong)temp >> 0x20),0,0x404e0000);\n  scaledDistance2 = __aeabi_d2iz((int)temp,(int)((ulonglong)temp >> 0x20));\n  scaledDistance1 = __floatunsisf(*(undefined4 *)(inputData + 0x28));\n  accelerationDistance1 = __floatunsisf(*(undefined4 *)(inputData + 0x3c));\n  accelerationDistance2 = __floatsisf(scaledDistance2);\n  scaledDistance1 = estimate_acceleration_distance(scaledDistance1,accelerationDistance1,accelerationDistance2);\n  temp = __aeabi_f2d(scaledDistance1);\n  temp = ceil((int)temp,(int)((ulonglong)temp >> 0x20));\n  accelerationDistanceSum = __aeabi_d2iz((int)temp,(int)((ulonglong)temp >> 0x20));\n  scaledDistance1 = __floatunsisf(*(undefined4 *)(inputData + 0x3c));\n  accelerationDistance1 = __floatunsisf(*(undefined4 *)(inputData + 0x2c));\n  accelerationDistance2 = __floatsisf(-scaledDistance2);\n  scaledDistance1 = estimate_acceleration_distance(scaledDistance1,accelerationDistance1,accelerationDistance2);\n  temp = __aeabi_f2d(scaledDistance1);\n  temp = floor((int)temp,(int)((ulonglong)temp >> 0x20));\n  remainingDistance = __aeabi_d2iz((int)temp,(int)((ulonglong)temp >> 0x20));\n  remainingDistance = (*(int *)(inputData + 0x10) - accelerationDistanceSum) - remainingDistance;\n  if (remainingDistance < 0) {\n    scaledDistance1 = __floatunsisf(*(undefined4 *)(inputData + 0x28));\n    accelerationDistance1 = __floatunsisf(*(undefined4 *)(inputData + 0x2c));\n    accelerationDistance2 = __floatsisf(scaledDistance2);\n    intersectionDistance = __floatsisf(*(undefined4 *)(inputData + 0x10));\n    scaledDistance1 = intersection_distance(scaledDistance1,accelerationDistance1,accelerationDistance2,intersectionDistance);\n    temp = __aeabi_f2d(scaledDistance1);\n    temp = ceil((int)temp,(int)((ulonglong)temp >> 0x20));\n    unsignedIntersectionDistance = __aeabi_d2iz((int)temp,(int)((ulonglong)temp >> 0x20));\n    unsignedIntersectionDistance = unsignedIntersectionDistance & ~((int)unsignedIntersectionDistance >> 0x1f);\n    accelerationDistanceSum = *(uint *)(inputData + 0x10);\n    if ((int)unsignedIntersectionDistance <= (int)*(uint *)(inputData + 0x10)) {\n      accelerationDistanceSum = unsignedIntersectionDistance;\n    }\n    remainingDistance = 0;\n  }\n  *(uint *)(inputData + 0x34) = accelerationDistanceSum;\n  *(uint *)(inputData + 0x38) = remainingDistance + accelerationDistanceSum;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "estimate_and_set_acceleration_08002c18",
                "param_1": "inputData",
                "param_2": "accelerationFactor1",
                "param_3": "accelerationFactor2",
                "uVar1": "scaledDistance1",
                "iVar2": "scaledDistance2",
                "uVar3": "accelerationDistance1",
                "uVar4": "accelerationDistance2",
                "uVar5": "intersectionDistance",
                "uVar6": "unsignedIntersectionDistance",
                "uVar7": "temp",
                "local_20": "remainingDistance",
                "local_1c": "accelerationDistanceSum"
            },
            "calling": [
                "planner_recalculate_trapezoids"
            ],
            "called": [
                "__aeabi_f2d",
                "estimate_acceleration_distance",
                "__floatunsisf",
                "__aeabi_d2iz",
                "__floatsisf",
                "__aeabi_d2uiz",
                "ceil",
                "__aeabi_i2d",
                "__aeabi_fmul",
                "floor",
                "intersection_distance",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_trapezoids_08002e08",
            "code": "\nvoid calculate_trapezoids_08002e08(void)\n\n{\n  undefined4 ratio1;\n  undefined4 ratio2;\n  int block_offset;\n  undefined *block;\n  byte block_index;\n  \n  block = (undefined *)0x0;\n  block_index = DAT_20000cf1;\n  while (block_index != DAT_20000cf0) {\n    block_offset = (uint)block_index * 0x40;\n    if ((block != (undefined *)0x0) &&\n       ((block[0x24] != '\\0' || ((&DAT_20000894)[block_offset] != '\\0')))) {\n      ratio1 = __aeabi_fdiv(*(undefined4 *)(block + 0x18),*(undefined4 *)(block + 0x14));\n      ratio2 = __aeabi_fdiv(*(undefined4 *)(&DAT_20000888 + block_offset),*(undefined4 *)(block + 0x14));\n      calculate_trapezoid_for_block(block,ratio1,ratio2);\n      block[0x24] = 0;\n    }\n    block_index = next_block_index(block_index);\n    block = &DAT_20000870 + block_offset;\n  }\n  ratio1 = __aeabi_fdiv(*(undefined4 *)(block + 0x18),*(undefined4 *)(block + 0x14));\n  ratio2 = __aeabi_fdiv(0,*(undefined4 *)(block + 0x14));\n  calculate_trapezoid_for_block(block,ratio1,ratio2);\n  block[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_trapezoids_08002e08",
                "local_18": "block",
                "local_11": "block_index",
                "iVar3": "block_offset",
                "uVar1": "ratio1",
                "uVar2": "ratio2"
            },
            "calling": [
                "planner_recalculate"
            ],
            "called": [
                "next_block_index",
                "calculate_trapezoid_for_block",
                "__aeabi_fdiv"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "calculate_trapezoids_08002edc",
            "code": "\nvoid calculate_trapezoids_08002edc(void)\n\n{\n  planner_reverse_pass();\n  planner_forward_pass();\n  planner_recalculate_trapezoids_08002edc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "calculate_trapezoids_08002edc"
            },
            "calling": [
                "plan_cycle_reinitialize",
                "plan_buffer_line"
            ],
            "called": [
                "planner_recalculate_trapezoids",
                "planner_reverse_pass",
                "planner_forward_pass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_block_info_08002ef0",
            "code": "\nvoid update_block_info_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = next_block_index(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_block_info_08002ef0"
            },
            "calling": [
                "plan_init"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "initialize_buffer_08002f24",
            "code": "\nvoid initializeBuffer_08002f24(void)\n\n{\n  plan_reset_buffer();\n  memset(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "initialize_buffer_08002f24"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "plan_reset_buffer",
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_block_index_08002f40",
            "code": "\nvoid update_block_index_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = next_block_index(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_block_index_08002f40"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [
                "next_block_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_active_data_pointer_08002f74",
            "code": "\nundefined * get_active_data_pointer_08002f74(void)\n\n{\n  undefined *active_pointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    active_pointer = (undefined *)0x0;\n  }\n  else {\n    active_pointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return active_pointer;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_active_data_pointer_08002f74",
                "puVar1": "active_pointer"
            },
            "calling": [
                "step_period_isr",
                "plan_synchronize"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "check_data_equality_08002fac",
            "code": "\nbool check_data_equality_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "check_data_equality_08002fac"
            },
            "calling": [
                "mc_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "execute_protocol_runtime_08002fd4",
            "code": "\nvoid execute_protocol_runtime_08002fd4(void)\n\n{\n  int current_block;\n  \n  while ((current_block = plan_get_current_block(), current_block != 0 || (DAT_20000ea9 == '\\x03'))) {\n    execute_protocol_runtime_08002fd4();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "execute_protocol_runtime_08002fd4",
                "iVar1": "current_block",
                "protocol_execute_runtime": "execute_protocol_runtime"
            },
            "calling": [
                "spindle_run",
                "gc_execute_line",
                "coolant_run",
                "mc_dwell",
                "mc_go_home"
            ],
            "called": [
                "protocol_execute_runtime",
                "plan_get_current_block"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_speed_08003004",
            "code": "\nvoid calculateSpeed_08003004(undefined4 acceleration,undefined4 velocity,undefined4 distance,undefined4 time,\n                 char isZero)\n\n{\n  undefined4 accelerationMultiplier;\n  int roundedAcceleration;\n  int roundedVelocity;\n  int roundedDistance;\n  undefined4 velocityMultiplier;\n  undefined4 distanceMultiplier;\n  undefined4 squaredSum;\n  undefined4 accelerationSquared;\n  uint maxValue;\n  int blockIndex;\n  ushort *block;\n  int iVar12;\n  uint accelerationMultiplier3;\n  undefined8 accelerationMultiplier4;\n  undefined8 accelerationMultiplier5;\n  undefined8 accelerationMultiplier6;\n  undefined4 local_20;\n  undefined4 local_1c;\n  \n  blockIndex = (uint)DAT_20000cf0 * 0x40;\n  block = (ushort *)(&DAT_20000870 + blockIndex);\n  accelerationMultiplier = __aeabi_fmul(DAT_20000ebc,acceleration);\n  accelerationMultiplier4 = __aeabi_f2d(accelerationMultiplier);\n  roundedAcceleration = lround((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n  accelerationMultiplier = __aeabi_fmul(DAT_20000ec0,velocity);\n  accelerationMultiplier4 = __aeabi_f2d(accelerationMultiplier);\n  roundedVelocity = lround((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n  accelerationMultiplier = __aeabi_fmul(DAT_20000ec4,distance);\n  accelerationMultiplier4 = __aeabi_f2d(accelerationMultiplier);\n  roundedDistance = lround((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n  *block = 0;\n  if (roundedAcceleration < DAT_20000cf4) {\n    *block = *block | 0x20;\n  }\n  if (roundedVelocity < DAT_20000cf8) {\n    *block = *block | 0x880;\n  }\n  if (roundedDistance < DAT_20000cfc) {\n    *block = *block | 0x200;\n  }\n  iVar12 = roundedAcceleration - DAT_20000cf4;\n  if (iVar12 < 0) {\n    iVar12 = -iVar12;\n  }\n  *(int *)(&DAT_20000874 + blockIndex) = iVar12;\n  iVar12 = roundedVelocity - DAT_20000cf8;\n  if (iVar12 < 0) {\n    iVar12 = -iVar12;\n  }\n  *(int *)(&DAT_20000878 + blockIndex) = iVar12;\n  iVar12 = roundedDistance - DAT_20000cfc;\n  if (iVar12 < 0) {\n    iVar12 = -iVar12;\n  }\n  *(int *)(&DAT_2000087c + blockIndex) = iVar12;\n  maxValue = *(uint *)(&DAT_2000087c + blockIndex);\n  if (*(uint *)(&DAT_2000087c + blockIndex) < *(uint *)(&DAT_20000878 + blockIndex)) {\n    maxValue = *(uint *)(&DAT_20000878 + blockIndex);\n  }\n  accelerationMultiplier3 = *(uint *)(&DAT_20000874 + blockIndex);\n  if (*(uint *)(&DAT_20000874 + blockIndex) < maxValue) {\n    accelerationMultiplier3 = maxValue;\n  }\n  *(uint *)(&DAT_20000880 + blockIndex) = accelerationMultiplier3;\n  if (*(int *)(&DAT_20000880 + blockIndex) != 0) {\n    accelerationMultiplier = __floatsisf(roundedAcceleration - DAT_20000cf4);\n    accelerationMultiplier = __aeabi_fdiv(accelerationMultiplier,DAT_20000ebc);\n    velocityMultiplier = __floatsisf(roundedVelocity - DAT_20000cf8);\n    velocityMultiplier = __aeabi_fdiv(velocityMultiplier,DAT_20000ec0);\n    distanceMultiplier = __floatsisf(roundedDistance - DAT_20000cfc);\n    distanceMultiplier = __aeabi_fdiv(distanceMultiplier,DAT_20000ec4);\n    squaredSum = __aeabi_fmul(accelerationMultiplier,accelerationMultiplier);\n    accelerationSquared = __aeabi_fmul(velocityMultiplier,velocityMultiplier);\n    squaredSum = __addsf3(squaredSum,accelerationSquared);\n    accelerationSquared = __aeabi_fmul(distanceMultiplier,distanceMultiplier);\n    squaredSum = __addsf3(squaredSum,accelerationSquared);\n    accelerationMultiplier4 = __aeabi_f2d(squaredSum);\n    accelerationMultiplier4 = sqrt((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n    squaredSum = __truncdfsf2((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + blockIndex) = squaredSum;\n    squaredSum = __aeabi_fdiv(0x3f800000,*(undefined4 *)(&DAT_20000890 + blockIndex));\n    if (isZero == '\\0') {\n      local_1c = __aeabi_fmul(time,squaredSum);\n    }\n    else {\n      local_1c = __aeabi_fdiv(0x3f800000,time);\n    }\n    accelerationSquared = __aeabi_fmul(*(undefined4 *)(&DAT_20000890 + blockIndex),local_1c);\n    *(undefined4 *)(&DAT_20000884 + blockIndex) = accelerationSquared;\n    accelerationSquared = __floatsisf(*(undefined4 *)(&DAT_20000880 + blockIndex));\n    accelerationSquared = __aeabi_fmul(accelerationSquared,local_1c);\n    accelerationMultiplier4 = __aeabi_f2d(accelerationSquared);\n    accelerationMultiplier4 = ceil((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n    accelerationSquared = __aeabi_d2uiz((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + blockIndex) = accelerationSquared;\n    accelerationSquared = __floatsisf(*(undefined4 *)(&DAT_20000880 + blockIndex));\n    accelerationSquared = __aeabi_fmul(accelerationSquared,squaredSum);\n    accelerationSquared = __aeabi_fmul(accelerationSquared,DAT_20000edc);\n    accelerationSquared = __aeabi_fdiv(accelerationSquared,0x453b8000);\n    accelerationMultiplier4 = __aeabi_f2d(accelerationSquared);\n    accelerationMultiplier4 = ceil((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n    accelerationSquared = __aeabi_d2iz((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + blockIndex) = accelerationSquared;\n    maxValue = __aeabi_fmul(accelerationMultiplier,squaredSum);\n    accelerationMultiplier = __aeabi_fmul(velocityMultiplier,squaredSum);\n    velocityMultiplier = __aeabi_fmul(distanceMultiplier,squaredSum);\n    local_20 = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (iVar12 = __aeabi_fcmpgt(DAT_20000d0c,0), iVar12 != 0)) {\n      distanceMultiplier = __aeabi_fmul(DAT_20000d00 ^ 0x80000000,maxValue);\n      squaredSum = __aeabi_fmul(DAT_20000d04,accelerationMultiplier);\n      distanceMultiplier = __aeabi_fsub(distanceMultiplier,squaredSum);\n      squaredSum = __aeabi_fmul(DAT_20000d08,velocityMultiplier);\n      distanceMultiplier = __aeabi_fsub(distanceMultiplier,squaredSum);\n      accelerationMultiplier4 = __aeabi_f2d(distanceMultiplier);\n      iVar12 = __aeabi_dcmplt((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20),0x66666666,0x3fee6666);\n      if (iVar12 != 0) {\n        iVar12 = __aeabi_fcmplt(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + blockIndex));\n        local_20 = DAT_20000d0c;\n        if (iVar12 == 0) {\n          local_20 = *(undefined4 *)(&DAT_20000884 + blockIndex);\n        }\n        accelerationMultiplier4 = __aeabi_f2d(distanceMultiplier);\n        iVar12 = __aeabi_dcmpgt((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20),0x66666666,0xbfee6666);\n        if (iVar12 != 0) {\n          accelerationMultiplier4 = __aeabi_f2d(distanceMultiplier);\n          accelerationMultiplier4 = __subdf3(0,0x3ff00000,(int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n          accelerationMultiplier4 = __muldf3((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20),0,0x3fe00000);\n          accelerationMultiplier4 = sqrt((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n          distanceMultiplier = __truncdfsf2((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n          accelerationMultiplier4 = __aeabi_f2d(local_20);\n          squaredSum = __aeabi_fmul(DAT_20000edc,DAT_20000ee0);\n          squaredSum = __aeabi_fmul(squaredSum,distanceMultiplier);\n          accelerationMultiplier5 = __aeabi_f2d(squaredSum);\n          accelerationMultiplier6 = __aeabi_f2d(distanceMultiplier);\n          accelerationMultiplier6 = __subdf3(0,0x3ff00000,(int)accelerationMultiplier6,(int)((ulonglong)accelerationMultiplier6 >> 0x20));\n          accelerationMultiplier5 = __divdf3((int)accelerationMultiplier5,(int)((ulonglong)accelerationMultiplier5 >> 0x20),(int)accelerationMultiplier6,\n                            (int)((ulonglong)accelerationMultiplier6 >> 0x20));\n          accelerationMultiplier5 = sqrt((int)accelerationMultiplier5,(int)((ulonglong)accelerationMultiplier5 >> 0x20));\n          iVar12 = __aeabi_dcmplt((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20),(int)accelerationMultiplier5,\n                                  (int)((ulonglong)accelerationMultiplier5 >> 0x20));\n          if (iVar12 == 0) {\n            squaredSum = __aeabi_fmul(DAT_20000edc,DAT_20000ee0);\n            squaredSum = __aeabi_fmul(squaredSum,distanceMultiplier);\n            accelerationMultiplier4 = __aeabi_f2d(squaredSum);\n            accelerationMultiplier5 = __aeabi_f2d(distanceMultiplier);\n            accelerationMultiplier5 = __subdf3(0,0x3ff00000,(int)accelerationMultiplier5,(int)((ulonglong)accelerationMultiplier5 >> 0x20));\n            accelerationMultiplier4 = __divdf3((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20),(int)accelerationMultiplier5,\n                              (int)((ulonglong)accelerationMultiplier5 >> 0x20));\n            accelerationMultiplier4 = sqrt((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n            local_20 = __truncdfsf2((int)accelerationMultiplier4,(int)((ulonglong)accelerationMultiplier4 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + blockIndex) = local_20;\n    squaredSum = max_allowable_speed(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + blockIndex))\n    ;\n    iVar12 = __aeabi_fcmplt(local_20,squaredSum);\n    distanceMultiplier = squaredSum;\n    if (iVar12 != 0) {\n      distanceMultiplier = local_20;\n    }\n    *(undefined4 *)(&DAT_20000888 + blockIndex) = distanceMultiplier;\n    iVar12 = __aeabi_fcmpge(squaredSum,*(undefined4 *)(&DAT_20000884 + blockIndex));\n    if (iVar12 == 0) {\n      (&DAT_20000895)[blockIndex] = 0;\n    }\n    else {\n      (&DAT_20000895)[blockIndex] = 1;\n    }\n    (&DAT_20000894)[blockIndex] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + blockIndex);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = maxValue;\n    DAT_20000d04 = accelerationMultiplier;\n    DAT_20000d08 = velocityMultiplier;\n    DAT_20000cf2 = next_block_index(DAT_20000cf2);\n    DAT_20000cf4 = roundedAcceleration;\n    DAT_20000cf8 = roundedVelocity;\n    DAT_20000cfc = roundedDistance;\n    planner_recalculate();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_speed_08003004",
                "param_1": "acceleration",
                "param_2": "velocity",
                "param_3": "distance",
                "param_4": "time",
                "param_5": "isZero",
                "uVar1": "accelerationMultiplier",
                "iVar2": "roundedAcceleration",
                "iVar3": "roundedVelocity",
                "iVar4": "roundedDistance",
                "uVar5": "velocityMultiplier",
                "uVar6": "distanceMultiplier",
                "uVar7": "squaredSum",
                "uVar8": "accelerationSquared",
                "uVar9": "maxValue",
                "iVar10": "blockIndex",
                "puVar11": "block"
            },
            "calling": [
                "mc_line"
            ],
            "called": [
                "sqrt",
                "__aeabi_dcmpgt",
                "__aeabi_fsub",
                "__aeabi_d2iz",
                "next_block_index",
                "__aeabi_fmul",
                "__aeabi_fcmpge",
                "__addsf3",
                "__aeabi_fdiv",
                "max_allowable_speed",
                "planner_recalculate",
                "lround",
                "__subdf3",
                "__aeabi_f2d",
                "__floatsisf",
                "__aeabi_d2uiz",
                "ceil",
                "__aeabi_fcmplt",
                "__truncdfsf2",
                "__divdf3",
                "__aeabi_fcmpgt",
                "__muldf3",
                "__aeabi_dcmplt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_data_080035ec",
            "code": "\nvoid initializeData_080035ec(undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  DAT_20000cf4 = data1;\n  DAT_20000cf8 = data2;\n  DAT_20000cfc = data3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_data_080035ec",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3"
            },
            "calling": [
                "sys_sync_current_position"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "recalculate_planner_08003618",
            "code": "\nvoid recalculatePlanner_08003618(undefined4 inputValue)\n\n{\n  undefined4 convertedValue;\n  int index;\n  undefined4 value1;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  value1 = *(undefined4 *)(&DAT_20000890 + index);\n  convertedValue = __floatsisf(inputValue);\n  convertedValue = __aeabi_fmul(value1,convertedValue);\n  value1 = __floatsisf(*(undefined4 *)(&DAT_20000880 + index));\n  convertedValue = __aeabi_fdiv(convertedValue,value1);\n  *(undefined4 *)(&DAT_20000890 + index) = convertedValue;\n  *(undefined4 *)(&DAT_20000880 + index) = inputValue;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  planner_recalculate();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "recalculate_planner_08003618",
                "param_1": "inputValue",
                "uVar1": "convertedValue",
                "iVar2": "index",
                "uVar3": "value1"
            },
            "calling": [
                "st_cycle_reinitialize"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fmul",
                "__aeabi_fdiv",
                "planner_recalculate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "print_string_0800369c",
            "code": "\nvoid print_string_0800369c(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    serial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "print_string_0800369c",
                "param_1": "string",
                "local_c": "current_char"
            },
            "calling": [
                "protocol_execute_startup",
                "report_startup_line"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "write_string_080036c6",
            "code": "\nvoid writeString_080036c6(char *string)\n\n{\n  char *currentChar;\n  \n  currentChar = string;\n  while (*currentChar != '\\0') {\n    serial_write(*currentChar);\n    currentChar = currentChar + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "write_string_080036c6",
                "param_1": "string",
                "local_c": "currentChar"
            },
            "calling": [
                "report_gcode_parameters",
                "report_feedback_message",
                "report_init_message",
                "report_grbl_settings",
                "report_grbl_help",
                "report_status_message",
                "report_alarm_message",
                "report_startup_line",
                "report_realtime_status",
                "report_gcode_modes"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "print_binary_representation_080036f0",
            "code": "\nvoid printBinaryRepresentation_080036f0(uint number,int bitCount)\n\n{\n  undefined4 uVar1;\n  int bitPosition;\n  uint mask;\n  \n  mask = 1 << (bitCount - 1U & 0xff);\n  for (bitPosition = 0; bitPosition < bitCount; bitPosition = bitPosition + 1) {\n    if ((mask & number) == 0) {\n      uVar1 = 0x30;\n    }\n    else {\n      uVar1 = 0x31;\n    }\n    serial_write(uVar1);\n    mask = mask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "print_binary_representation_080036f0",
                "param_1": "number",
                "param_2": "bitCount",
                "local_10": "bitPosition",
                "local_c": "mask"
            },
            "calling": [
                "print_uint8_base2",
                "print_uint16_base2"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "print_binary_08003740",
            "code": "\nvoid print_binary_08003740(undefined input_num)\n\n{\n  print_base2(input_num,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "print_binary_08003740",
                "param_1": "input_num"
            },
            "calling": [],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "print_binary_0800375c",
            "code": "\nvoid print_binary_0800375c(undefined2 input_value)\n\n{\n  print_base2(input_value,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "print_binary_0800375c",
                "param_1": "input_value"
            },
            "calling": [
                "report_grbl_settings"
            ],
            "called": [
                "print_base2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "print_number_08003778",
            "code": "\nvoid print_number_08003778(uint number)\n\n{\n  uint index;\n  uint remaining;\n  char digits [12];\n  byte count;\n  \n  count = 0;\n  remaining = number;\n  if (number == 0) {\n    serial_write(0x30);\n  }\n  else {\n    for (; remaining != 0; remaining = remaining / 10) {\n      index = (uint)count;\n      count = count + 1;\n      digits[index + 1] = (char)(remaining % 10) + '0';\n    }\n    for (; count != 0; count = count - 1) {\n      serial_write(digits[count]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "print_number_08003778",
                "param_1": "number",
                "uVar1": "index",
                "local_1c": "remaining",
                "acStack_15": "digits",
                "local_9": "count"
            },
            "calling": [
                "printInteger"
            ],
            "called": [
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "print_absolute_value_080037fc",
            "code": "\nvoid printAbsoluteValue_080037fc(int number)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = number;\n  if (number < 0) {\n    serial_write(0x2d);\n    absoluteValue = -number;\n  }\n  print_uint32_base10(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "param_1": "number",
                "local_c": "absoluteValue"
            },
            "calling": [
                "report_grbl_settings",
                "report_startup_line",
                "report_gcode_modes"
            ],
            "called": [
                "print_uint32_base10",
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_float_to_decimal_08003826",
            "code": "\nvoid convertFloatToDecimal_08003826(uint inputFloat)\n\n{\n  int isNegative;\n  undefined4 normalizedFloat;\n  byte decimalDigit;\n  uint index;\n  uint absoluteValue;\n  char decimalDigits [13];\n  uint integerPart;\n  byte digitIndex;\n  byte local_9;\n  \n  isNegative = __aeabi_fcmplt(inputFloat,0);\n  absoluteValue = inputFloat;\n  if (isNegative != 0) {\n    serial_write(0x2d);\n    absoluteValue = inputFloat ^ 0x80000000;\n  }\n  for (local_9 = DAT_20000ef9; 1 < local_9; local_9 = local_9 - 2) {\n    absoluteValue = __aeabi_fmul(absoluteValue,0x42c80000);\n  }\n  if (local_9 != 0) {\n    absoluteValue = __aeabi_fmul(absoluteValue,0x41200000);\n  }\n  normalizedFloat = __addsf3(absoluteValue,0x3f000000);\n  digitIndex = 0;\n  integerPart = __aeabi_f2iz(normalizedFloat);\n  decimalDigits[DAT_20000ef9 + 1] = '.';\n  for (; integerPart != 0; integerPart = integerPart / 10) {\n    if (digitIndex == DAT_20000ef9) {\n      digitIndex = digitIndex + 1;\n    }\n    index = (uint)digitIndex;\n    digitIndex = digitIndex + 1;\n    decimalDigits[index + 1] = (char)(integerPart % 10) + '0';\n  }\n  while (digitIndex < DAT_20000ef9) {\n    index = (uint)digitIndex;\n    digitIndex = digitIndex + 1;\n    decimalDigits[index + 1] = '0';\n  }\n  if (digitIndex == DAT_20000ef9) {\n    decimalDigit = digitIndex + 1;\n    digitIndex = digitIndex + 2;\n    decimalDigits[decimalDigit + 1] = '0';\n  }\n  for (; digitIndex != 0; digitIndex = digitIndex - 1) {\n    serial_write(decimalDigits[digitIndex]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_float_to_decimal_08003826",
                "param_1": "inputFloat",
                "iVar1": "isNegative",
                "uVar2": "normalizedFloat",
                "bVar3": "decimalDigit",
                "uVar4": "index",
                "local_24": "absoluteValue",
                "acStack_1d": "decimalDigits",
                "local_10": "integerPart",
                "local_a": "digitIndex"
            },
            "calling": [
                "report_gcode_parameters",
                "report_grbl_settings",
                "report_realtime_status",
                "report_gcode_modes"
            ],
            "called": [
                "__aeabi_fcmplt",
                "__addsf3",
                "__aeabi_fmul",
                "__aeabi_f2iz",
                "serial_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "protocol_process",
                "protocol_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_protocol_080039a0",
            "code": "\nvoid initializeProtocol_080039a0(void)\n\n{\n  resetLineBuffer();\n  displayInitialMessage();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_protocol_080039a0",
                "protocol_reset_line_buffer": "resetLineBuffer",
                "report_init_message": "displayInitialMessage"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "report_init_message",
                "protocol_reset_line_buffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_startup_lines_080039bc",
            "code": "\nvoid processStartupLines_080039bc(void)\n\n{\n  int result;\n  undefined4 status;\n  byte iteration;\n  \n  for (iteration = 0; iteration < 2; iteration = iteration + 1) {\n    result = readStartupLine(iteration,&DAT_20000d10);\n    if (result == 0) {\n      reportStatusMessage(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      printLine(&DAT_20000d10);\n      status = executeLine(&DAT_20000d10);\n      reportStatusMessage(status);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_startup_lines_080039bc",
                "iVar1": "result",
                "uVar2": "status",
                "local_9": "iteration",
                "settings_read_startup_line": "readStartupLine",
                "report_status_message": "reportStatusMessage",
                "printString": "printLine",
                "gc_execute_line": "executeLine"
            },
            "calling": [
                "protocol_execute_line",
                "grbl_main"
            ],
            "called": [
                "gc_execute_line",
                "settings_read_startup_line",
                "printString",
                "report_status_message"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "update_flags_based_on_param_08003a18",
            "code": "\nvoid updateFlagsBasedOnParam_08003a18(uint inputFlag)\n\n{\n  if ((inputFlag & 0x80) == 0) {\n    if ((inputFlag & 0x40) == 0) {\n      if ((inputFlag & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    performHardReset();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "update_flags_based_on_param_08003a18",
                "param_1": "inputFlag",
                "mc_reset": "performHardReset"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "process_control_signals_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid processControlSignals_08003a74(void)\n\n{\n  byte currentSignal;\n  \n  currentSignal = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        reportAlarmMessage(0xffffffff);\n        reportFeedbackMessage(1);\n        do {\n        } while( true );\n      }\n      reportAlarmMessage(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((currentSignal & 0x10) == 0) {\n      if ((currentSignal & 1) != 0) {\n        reportRealtimeStatus();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((currentSignal & 8) != 0) {\n        feedHold();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((currentSignal & 4) != 0) {\n        cycleReinitialize();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((currentSignal & 2) != 0) {\n        cycleStart();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "process_control_signals_08003a74",
                "bVar1": "currentSignal",
                "report_alarm_message": "reportAlarmMessage",
                "report_feedback_message": "reportFeedbackMessage",
                "report_realtime_status": "reportRealtimeStatus",
                "st_feed_hold": "feedHold",
                "st_cycle_reinitialize": "cycleReinitialize",
                "st_cycle_start": "cycleStart"
            },
            "calling": [
                "mc_line",
                "grbl_main",
                "protocol_process",
                "mc_dwell",
                "mc_go_home",
                "plan_synchronize"
            ],
            "called": [
                "st_feed_hold",
                "report_feedback_message",
                "st_cycle_reinitialize",
                "st_cycle_start",
                "report_alarm_message",
                "report_realtime_status"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_gcode_command_08003b98",
            "code": "\nuint processGcodeCommand_08003b98(char *gcodeCommand)\n\n{\n  byte commandChar;\n  int returnValue;\n  undefined4 uVar3;\n  uint result;\n  undefined8 doubleValue;\n  undefined4 floatValue1;\n  undefined4 floatValue2;\n  byte startIndex;\n  byte loopIndex;\n  \n  if (*gcodeCommand != '$') {\n    result = gc_execute_line(gcodeCommand);\n    return result;\n  }\n  startIndex = 1;\n  loopIndex = '\\0';\n  commandChar = gcodeCommand[1];\n  if (commandChar == 0) {\n    report_grbl_help();\n    return 0;\n  }\n  if ((0x58 < commandChar) || (commandChar < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(commandChar) {\n  case 0x23:\n    startIndex = 2;\n    if (gcodeCommand[2] != '\\0') {\n      return 3;\n    }\n    report_gcode_parameters();\n    break;\n  case 0x24:\n    startIndex = 2;\n    if (gcodeCommand[2] != '\\0') {\n      return 3;\n    }\n    report_grbl_settings();\n    break;\n  case 0x43:\n    startIndex = 2;\n    if (gcodeCommand[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      mc_reset();\n      report_feedback_message(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      report_feedback_message(4);\n    }\n    break;\n  case 0x47:\n    startIndex = 2;\n    if (gcodeCommand[2] != '\\0') {\n      return 3;\n    }\n    report_gcode_modes();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    mc_go_home();\n    if (DAT_20000ea8 == '\\0') {\n      protocol_execute_startup();\n    }\n    break;\n  case 0x4e:\n    startIndex = 2;\n    if (gcodeCommand[2] == '\\0') {\n      for (loopIndex = 0; loopIndex < 2; loopIndex = loopIndex + 1) {\n        returnValue = settings_read_startup_line(loopIndex,gcodeCommand);\n        if (returnValue == 0) {\n          report_status_message(10);\n        }\n        else {\n          report_startup_line(loopIndex,gcodeCommand);\n        }\n      }\n      return 0;\n    }\n    loopIndex = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    returnValue = read_float(gcodeCommand,&startIndex,&floatValue2);\n    if (returnValue == 0) {\n      return 1;\n    }\n    commandChar = startIndex + 1;\n    if (gcodeCommand[startIndex] != '=') {\n      return 3;\n    }\n    startIndex = commandChar;\n    if (loopIndex == '\\0') {\n      returnValue = read_float(gcodeCommand,&startIndex,&floatValue1);\n      if (returnValue == 0) {\n        return 1;\n      }\n      if (gcodeCommand[startIndex] == '\\0') {\n        uVar3 = __aeabi_f2iz(floatValue2);\n        result = settings_store_global_setting(uVar3,floatValue1);\n        return result;\n      }\n      return 3;\n    }\n    do {\n      gcodeCommand[(uint)startIndex - (uint)commandChar] = gcodeCommand[startIndex];\n      result = (uint)startIndex;\n      startIndex = startIndex + 1;\n    } while (gcodeCommand[result] != '\\0');\n    loopIndex = commandChar;\n    loopIndex = gc_execute_line(gcodeCommand);\n    if (loopIndex != 0) {\n      return (uint)loopIndex;\n    }\n    doubleValue = __aeabi_f2d(floatValue2);\n    doubleValue = trunc((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n    loopIndex = __aeabi_d2uiz((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n    settings_store_startup_line(loopIndex,gcodeCommand);\n    break;\n  case 0x58:\n    startIndex = 2;\n    if (gcodeCommand[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      report_feedback_message(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_gcode_command_08003b98",
                "param_1": "gcodeCommand",
                "uVar4": "result",
                "bVar1": "commandChar",
                "local_14": "floatValue1",
                "local_10": "floatValue2",
                "local_a": "startIndex",
                "local_9": "loopIndex",
                "uVar5": "doubleValue",
                "iVar2": "returnValue"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "settings_store_global_setting",
                "gc_execute_line",
                "report_feedback_message",
                "trunc",
                "report_status_message",
                "report_startup_line",
                "__aeabi_f2iz",
                "mc_go_home",
                "__aeabi_f2d",
                "report_gcode_parameters",
                "mc_reset",
                "protocol_execute_startup",
                "__aeabi_d2uiz",
                "report_grbl_settings",
                "settings_store_startup_line",
                "settings_read_startup_line",
                "report_grbl_help",
                "read_float",
                "report_gcode_modes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_serial_input_08003f34",
            "code": "\nvoid process_serial_input_08003f34(void)\n\n{\n  byte input_byte;\n  undefined4 status_code;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = serial_read();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            report_status_message(0xd);\n            protocol_reset_line_buffer();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    protocol_execute_runtime();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      report_status_message(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      status_code = protocol_execute_line(&DAT_20000d10);\n      report_status_message(status_code);\n    }\n    protocol_reset_line_buffer();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_serial_input_08003f34",
                "bVar1": "input_byte",
                "uVar2": "status_code",
                "uVar3": "index"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "protocol_execute_line",
                "protocol_execute_runtime",
                "report_status_message",
                "protocol_reset_line_buffer",
                "serial_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "print_error_message_08004030",
            "code": "\nvoid printErrorMessage_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    printPgmString(&DAT_0800b5c8);\n  }\n  else {\n    printPgmString(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      printPgmString(\"Bad number format\");\n      break;\n    case '\\x02':\n      printPgmString(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printPgmString(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printPgmString(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printPgmString(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printPgmString(\"Invalid statement\");\n      break;\n    case '\\a':\n      printPgmString(\"Setting disabled\");\n      break;\n    case '\\b':\n      printPgmString(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printPgmString(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printPgmString(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printPgmString(\"Busy or queued\");\n      break;\n    case '\\f':\n      printPgmString(\"Alarm lock\");\n      break;\n    case '\\r':\n      printPgmString(\"Line overflow\");\n    }\n    printPgmString(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "print_error_message_08004030",
                "param_1": "errorCode"
            },
            "calling": [
                "report_gcode_parameters",
                "protocol_execute_line",
                "protocol_process",
                "protocol_execute_startup",
                "gc_init",
                "settings_init"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  printProgramString(\"ALARM: \");\n  if (errorCode == -2) {\n    printProgramString(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    printProgramString(\"Hard limit\");\n  }\n  printProgramString(\". MPos?\\r\\n\");\n  delayMilliseconds(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode",
                "printPgmString": "printProgramString",
                "delay_ms": "delayMilliseconds"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "delay_ms",
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "print_status_message_080041a0",
            "code": "\nvoid printStatusMessage_080041a0(undefined status)\n\n{\n  printPgmString(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    printPgmString(\"Reset to continue\");\n    break;\n  case 2:\n    printPgmString(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    printPgmString(\"Caution: Unlocked\");\n    break;\n  case 4:\n    printPgmString(\"Enabled\");\n    break;\n  case 5:\n    printPgmString(\"Disabled\");\n  }\n  printPgmString(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "print_status_message_080041a0",
                "param_1": "status"
            },
            "calling": [
                "protocol_execute_line",
                "grbl_main",
                "protocol_execute_runtime"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_grbl_version_08004228",
            "code": "\nvoid print_grbl_version_08004228(void)\n\n{\n  print_program_string(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228",
                "printPgmString": "print_program_string"
            },
            "calling": [
                "protocol_init"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "print_grbl_menu_0800423c",
            "code": "\nvoid printGrblMenu_0800423c(void)\n\n{\n  printPgmString(\n                \"menuOptionmenuOption (view Grbl settings)\\r\\nmenuOption# (view # parameters)\\r\\nmenuOptionG (view parser state)\\r\\nmenuOptionN (view startup blocks)\\r\\nmenuOptionsettingValue=value (save Grbl setting)\\r\\nmenuOptionlineNumber=line (save startup block)\\r\\nmenuOptionC (check gcode mode)\\r\\nmenuOptionX (kill alarm lock)\\r\\nmenuOptionH (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-settingValue (reset Grbl)\\r\\n\"\n                );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "print_grbl_menu_0800423c",
                "$": "menuOption",
                "x": "settingValue",
                "Nx": "lineNumber"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printPgmString"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_configuration_settings_08004250",
            "code": "\nvoid printConfigurationSettings_08004250(void)\n\n{\n  undefined4 acceleration;\n  \n  printPgmString(&DAT_0800b8b8);\n  printFloat(DAT_20000ebc);\n  printPgmString(\" (x, step/mm)\\r\\n$1=\");\n  printFloat(DAT_20000ec0);\n  printPgmString(\" (y, step/mm)\\r\\n$2=\");\n  printFloat(DAT_20000ec4);\n  printPgmString(\" (z, step/mm)\\r\\n$3=\");\n  printInteger(DAT_20000ec9);\n  printPgmString(\" (step pulse, usec)\\r\\n$4=\");\n  printFloat(DAT_20000ecc);\n  printPgmString(\" (default feed, mm/min)\\r\\n$5=\");\n  printFloat(DAT_20000ed0);\n  printPgmString(\" (default seek, mm/min)\\r\\n$6=\");\n  printInteger(DAT_20000ed4);\n  printPgmString(\" (step port invert mask, int:\");\n  print_uint16_base2(DAT_20000ed4);\n  printPgmString(\")\\r\\n$7=\");\n  printInteger(DAT_20000ef8);\n  printPgmString(\" (step idle delay, msec)\\r\\n$8=\");\n  acceleration = __aeabi_fdiv(DAT_20000edc,0x45610000);\n  printFloat(acceleration);\n  printPgmString(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  printFloat(DAT_20000ee0);\n  printPgmString(\" (junction deviation, mm)\\r\\n$10=\");\n  printFloat(DAT_20000ed8);\n  printPgmString(\" (arc, mm/segment)\\r\\n$11=\");\n  printInteger(DAT_20000efa);\n  printPgmString(\" (n-arc correction, int)\\r\\n$12=\");\n  printInteger(DAT_20000ef9);\n  printPgmString(\" (n-decimals, int)\\r\\n$13=\");\n  printInteger((DAT_20000ee4 & 1) != 0);\n  printPgmString(\" (report inches, bool)\\r\\n$14=\");\n  printInteger((DAT_20000ee4 & 2) != 0);\n  printPgmString(\" (auto start, bool)\\r\\n$15=\");\n  printInteger((DAT_20000ee4 & 4) != 0);\n  printPgmString(\" (invert step enable, bool)\\r\\n$16=\");\n  printInteger((DAT_20000ee4 & 8) != 0);\n  printPgmString(\" (hard limits, bool)\\r\\n$17=\");\n  printInteger((DAT_20000ee4 & 0x10) != 0);\n  printPgmString(\" (homing cycle, bool)\\r\\n$18=\");\n  printInteger(DAT_20000ee6);\n  printPgmString(\" (homing dir invert mask, int:\");\n  print_uint16_base2(DAT_20000ee6);\n  printPgmString(\")\\r\\n$19=\");\n  printFloat(DAT_20000ee8);\n  printPgmString(\" (homing feed, mm/min)\\r\\n$20=\");\n  printFloat(DAT_20000eec);\n  printPgmString(\" (homing seek, mm/min)\\r\\n$21=\");\n  printInteger(DAT_20000ef0);\n  printPgmString(\" (homing debounce, msec)\\r\\n$22=\");\n  printFloat(DAT_20000ef4);\n  printPgmString(\" (homing pull-off, mm)\\r\\n$23=\");\n  printInteger(DAT_20000ed6);\n  printPgmString(\" (dir port invert mask, int:\");\n  print_uint16_base2(DAT_20000ed6);\n  printPgmString(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_configuration_settings_08004250",
                "uVar1": "acceleration"
            },
            "calling": [
                "protocol_execute_line",
                "settings_init"
            ],
            "called": [
                "printPgmString",
                "print_uint16_base2",
                "__aeabi_fdiv",
                "printInteger",
                "printFloat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "print_coordinates_080044e8",
            "code": "\nvoid printCoordinates_080044e8(void)\n\n{\n  int coordReadResult;\n  undefined4 truncatedValue;\n  undefined8 convertedValue;\n  undefined4 coordinateArray [3];\n  byte coordinateIndex;\n  byte coordinateIndex;\n  \n  coordinateIndex = 0;\n  while( true ) {\n    if (7 < coordinateIndex) {\n      printPgmString(\"[G92:\");\n      for (coordinateIndex = 0; coordinateIndex < 3; coordinateIndex = coordinateIndex + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          printFloat(*(undefined4 *)(&DAT_20000e74 + (coordinateIndex + 10) * 4));\n        }\n        else {\n          convertedValue = __aeabi_f2d(*(undefined4 *)(&DAT_20000e74 + (coordinateIndex + 10) * 4));\n          convertedValue = __muldf3((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20),0x57e16865,0x3fa42851);\n          truncatedValue = __truncdfsf2((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n          printFloat(truncatedValue);\n        }\n        if (coordinateIndex < 2) {\n          printPgmString(&DAT_0800bbbc);\n        }\n        else {\n          printPgmString(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    coordReadResult = settings_read_coord_data(coordinateIndex,coordinateArray);\n    if (coordReadResult == 0) break;\n    printPgmString(&DAT_0800bb98);\n    switch(coordinateIndex) {\n    case 0:\n      printPgmString(&DAT_0800bb9c);\n      break;\n    case 1:\n      printPgmString(&DAT_0800bba0);\n      break;\n    case 2:\n      printPgmString(&DAT_0800bba4);\n      break;\n    case 3:\n      printPgmString(&DAT_0800bba8);\n      break;\n    case 4:\n      printPgmString(&DAT_0800bbac);\n      break;\n    case 5:\n      printPgmString(&DAT_0800bbb0);\n      break;\n    case 6:\n      printPgmString(&DAT_0800bbb4);\n      break;\n    case 7:\n      printPgmString(&DAT_0800bbb8);\n    }\n    for (coordinateIndex = 0; coordinateIndex < 3; coordinateIndex = coordinateIndex + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        printFloat(coordinateArray[coordinateIndex]);\n      }\n      else {\n        convertedValue = __aeabi_f2d(coordinateArray[coordinateIndex]);\n        convertedValue = __muldf3((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20),0x57e16865,0x3fa42851);\n        truncatedValue = __truncdfsf2((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n        printFloat(truncatedValue);\n      }\n      if (coordinateIndex < 2) {\n        printPgmString(&DAT_0800bbbc);\n      }\n      else {\n        printPgmString(&DAT_0800b764);\n      }\n    }\n    coordinateIndex = coordinateIndex + 1;\n  }\n  report_status_message(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "print_coordinates_080044e8",
                "iVar1": "coordReadResult",
                "uVar2": "truncatedValue",
                "uVar3": "convertedValue",
                "auStack_18": "coordinateArray",
                "local_a": "coordinateIndex",
                "local_9": "coordinateIndex"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "settings_read_coord_data",
                "__truncdfsf2",
                "printPgmString",
                "report_status_message",
                "printFloat",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_device_info_080046d0",
            "code": "\nvoid printDeviceInfo_080046d0(void)\n\n{\n  undefined4 uVar1;\n  undefined8 uVar2;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    printPgmString(&DAT_0800bbc8);\n    break;\n  case 1:\n    printPgmString(&DAT_0800bbcc);\n    break;\n  case 2:\n    printPgmString(&DAT_0800bbd0);\n    break;\n  case 3:\n    printPgmString(&DAT_0800bbd4);\n    break;\n  case 4:\n    printPgmString(&DAT_0800bbd8);\n  }\n  printPgmString(&DAT_0800bbe0);\n  printInteger(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      printPgmString(&DAT_0800bbe4);\n    }\n    else {\n      printPgmString(&DAT_0800bbec);\n    }\n  }\n  else {\n    printPgmString(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    printPgmString(&DAT_0800bc04);\n  }\n  else {\n    printPgmString(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    printPgmString(&DAT_0800bc14);\n  }\n  else {\n    printPgmString(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    printPgmString(&DAT_0800bc24);\n  }\n  else {\n    printPgmString(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    printPgmString(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      printPgmString(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      printPgmString(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    printPgmString(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      printPgmString(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      printPgmString(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    printPgmString(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      printPgmString(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      printPgmString(&DAT_0800bc48);\n    }\n  }\n  printPgmString(&DAT_0800bc50);\n  printInteger(DAT_20000e88);\n  printPgmString(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    printFloat(DAT_20000e78);\n  }\n  else {\n    uVar2 = __aeabi_f2d(DAT_20000e78);\n    uVar2 = __muldf3((int)uVar2,(int)((ulonglong)uVar2 >> 0x20),0x57e16865,0x3fa42851);\n    uVar1 = __truncdfsf2((int)uVar2,(int)((ulonglong)uVar2 >> 0x20));\n    printFloat(uVar1);\n  }\n  printPgmString(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_device_info_080046d0"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__truncdfsf2",
                "printPgmString",
                "printInteger",
                "printFloat",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_message_with_variables_08004900",
            "code": "\nvoid printMessageWithVariables_08004900(undefined variable1,undefined4 variable2)\n\n{\n  printPgmString(&DAT_0800bc58);\n  printInteger(variable1);\n  printPgmString(&DAT_0800bc5c);\n  printString(variable2);\n  printPgmString(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_message_with_variables_08004900",
                "param_1": "variable1",
                "param_2": "variable2"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "printPgmString",
                "printString",
                "printInteger"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_status_08004940",
            "code": "\nvoid printStatus_08004940(void)\n\n{\n  undefined4 floatValue;\n  uint index;\n  undefined4 tempValue;\n  undefined8 doubleValue;\n  undefined8 tempDoubleValue;\n  undefined4 statusValues [6];\n  byte axisIndex;\n  \n  statusValues[3] = DAT_20000eac;\n  statusValues[4] = DAT_20000eb0;\n  statusValues[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    printPgmString(\"<Idle\");\n    break;\n  case 2:\n    printPgmString(\"<Queue\");\n    break;\n  case 3:\n    printPgmString(&DAT_0800bc70);\n    break;\n  case 4:\n    printPgmString(\"<Hold\");\n    break;\n  case 5:\n    printPgmString(\"<Home\");\n    break;\n  case 6:\n    printPgmString(\"<Alarm\");\n    break;\n  case 7:\n    printPgmString(\"<Check\");\n  }\n  printPgmString(\",MPos:\");\n  for (axisIndex = 0; axisIndex < 3; axisIndex = axisIndex + 1) {\n    floatValue = __floatsisf(statusValues[axisIndex + 3]);\n    index = (uint)axisIndex;\n    floatValue = __aeabi_fdiv(floatValue,(&DAT_20000ebc)[axisIndex]);\n    statusValues[index] = floatValue;\n    if ((DAT_20000ee4 & 1) != 0) {\n      doubleValue = __aeabi_f2d(statusValues[axisIndex]);\n      doubleValue = __muldf3((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)axisIndex;\n      floatValue = __truncdfsf2((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n      statusValues[index] = floatValue;\n    }\n    printFloat(statusValues[axisIndex]);\n    printPgmString(&DAT_0800bbbc);\n  }\n  printPgmString(\"WPos:\");\n  for (axisIndex = 0; axisIndex < 3; axisIndex = axisIndex + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      tempValue = statusValues[axisIndex];\n      floatValue = __addsf3(*(undefined4 *)(&DAT_20000e70 + (axisIndex + 8) * 4),\n                       *(undefined4 *)(&DAT_20000e74 + (axisIndex + 10) * 4));\n      index = (uint)axisIndex;\n      floatValue = __aeabi_fsub(tempValue,floatValue);\n      statusValues[index] = floatValue;\n    }\n    else {\n      doubleValue = __aeabi_f2d(statusValues[axisIndex]);\n      floatValue = __addsf3(*(undefined4 *)(&DAT_20000e70 + (axisIndex + 8) * 4),\n                       *(undefined4 *)(&DAT_20000e74 + (axisIndex + 10) * 4));\n      tempDoubleValue = __aeabi_f2d(floatValue);\n      tempDoubleValue = __muldf3((int)tempDoubleValue,(int)((ulonglong)tempDoubleValue >> 0x20),0x57e16865,0x3fa42851);\n      doubleValue = __subdf3((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20),(int)tempDoubleValue,\n                       (int)((ulonglong)tempDoubleValue >> 0x20));\n      index = (uint)axisIndex;\n      floatValue = __truncdfsf2((int)doubleValue,(int)((ulonglong)doubleValue >> 0x20));\n      statusValues[index] = floatValue;\n    }\n    printFloat(statusValues[axisIndex]);\n    if (axisIndex < 2) {\n      printPgmString(&DAT_0800bbbc);\n    }\n  }\n  printPgmString(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_status_08004940",
                "auStack_2c": "statusValues",
                "local_11": "axisIndex",
                "uVar1": "floatValue",
                "uVar2": "index",
                "uVar3": "tempValue",
                "uVar4": "doubleValue",
                "uVar5": "tempDoubleValue"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_fsub",
                "__floatsisf",
                "__truncdfsf2",
                "printPgmString",
                "__addsf3",
                "__aeabi_fdiv",
                "__subdf3",
                "printFloat",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "copy_to_eeprom_08004bc0",
            "code": "\nvoid copyToEEPROM_08004bc0(byte dataOffset,undefined4 sourceData)\n\n{\n  copyToEEPROM_08004bc0WithChecksum((ushort)dataOffset * 0x101 + 0x300,sourceData,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "copy_to_eeprom_08004bc0",
                "param_1": "dataOffset",
                "param_2": "sourceData",
                "memcpy_to_eeprom_with_checksum": "copyToEEPROMWithChecksum"
            },
            "calling": [
                "protocol_execute_line",
                "settings_read_startup_line"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "write_data_to_eeprom_08004bf4",
            "code": "\nvoid writeDataToEEPROM_08004bf4(byte address,undefined4 data)\n\n{\n  writeWithChecksumToEEPROM((ushort)address * 0xd + 0x200,data,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "write_data_to_eeprom_08004bf4",
                "param_1": "address",
                "param_2": "data",
                "memcpy_to_eeprom_with_checksum": "writeWithChecksumToEEPROM"
            },
            "calling": [
                "settings_read_coord_data",
                "gc_execute_line"
            ],
            "called": [
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_eeprom_08004c2a",
            "code": "\nvoid initializeEEPROM_08004c2a(void)\n\n{\n  writeCharacterToEEPROM(0,5);\n  copyDataToEEPROMWithChecksum(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_eeprom_08004c2a",
                "eeprom_put_char": "writeCharacterToEEPROM",
                "memcpy_to_eeprom_with_checksum": "copyDataToEEPROMWithChecksum"
            },
            "calling": [
                "settings_store_global_setting",
                "settings_reset"
            ],
            "called": [
                "eeprom_put_char",
                "memcpy_to_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_globals_08004c48",
            "code": "\nvoid initialize_globals_08004c48(char data_flag)\n\n{\n  if (data_flag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  write_global_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_globals_08004c48",
                "param_1": "data_flag"
            },
            "calling": [
                "settings_init",
                "read_global_settings"
            ],
            "called": [
                "write_global_settings"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "copy_data_from_eeprom_08004d2c",
            "code": "\nbool copyDataFromEEPROM_08004d2c(byte byteIndex,undefined *outputBuffer)\n\n{\n  int copyResult;\n  \n  copyResult = memcpy_from_eeprom_with_checksum(outputBuffer,(ushort)byteIndex * 0x101 + 0x300,0x100);\n  if (copyResult == 0) {\n    *outputBuffer = 0;\n    settings_store_startup_line(byteIndex,outputBuffer);\n  }\n  return copyResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "copy_data_from_eeprom_08004d2c",
                "param_1": "byteIndex",
                "param_2": "outputBuffer",
                "iVar1": "copyResult"
            },
            "calling": [
                "protocol_execute_line",
                "protocol_execute_startup"
            ],
            "called": [
                "settings_store_startup_line",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "validate_and_write_settings_08004d7c",
            "code": "\nbool validateAndWriteSettings_08004d7c(byte coordinate,undefined4 dataBuffer)\n\n{\n  int errorCode;\n  \n  errorCode = memcpy_from_eeprom_with_checksum(dataBuffer,(ushort)coordinate * 0xd + 0x200,0xc);\n  if (errorCode == 0) {\n    memset(dataBuffer,0,0xc);\n    settings_write_coord_data(coordinate,dataBuffer);\n  }\n  return errorCode != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "validate_and_write_settings_08004d7c",
                "param_1": "coordinate",
                "param_2": "dataBuffer",
                "iVar1": "errorCode"
            },
            "calling": [
                "report_gcode_parameters",
                "gc_execute_line",
                "gc_init",
                "settings_init"
            ],
            "called": [
                "settings_write_coord_data",
                "memset",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "load_settings_from_eeprom_08004dd2",
            "code": "\nundefined4 load_settings_from_eeprom_08004dd2(void)\n\n{\n  byte eeprom_value;\n  int copy_result;\n  \n  eeprom_value = eeprom_get_char(0);\n  if (eeprom_value == 5) {\n    copy_result = memcpy_from_eeprom_with_checksum(&DAT_20000ebc,1,0x40);\n    if (copy_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < eeprom_value) {\n      return 0;\n    }\n    copy_result = memcpy_from_eeprom_with_checksum(&DAT_20000ebc,1,0x28);\n    if (copy_result == 0) {\n      return 0;\n    }\n    settings_reset(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "load_settings_from_eeprom_08004dd2",
                "bVar1": "eeprom_value",
                "iVar2": "copy_result"
            },
            "calling": [
                "settings_init"
            ],
            "called": [
                "eeprom_get_char",
                "settings_reset",
                "memcpy_from_eeprom_with_checksum"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "update_global_settings_08004e30",
            "code": "\nundefined4 updateGlobalSettings_08004e30(int settingID,uint value)\n\n{\n  undefined4 result;\n  int isInvalid;\n  undefined8 convertedValue;\n  \n  switch(settingID) {\n  case 0:\n  case 1:\n  case 2:\n    isInvalid = __aeabi_fcmple(value,0);\n    if (isInvalid != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[settingID] = value;\n    break;\n  case 3:\n    isInvalid = __aeabi_fcmplt(value,0x40400000);\n    if (isInvalid != 0) {\n      return 9;\n    }\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ec9 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = value;\n    break;\n  case 5:\n    DAT_20000ed0 = value;\n    break;\n  case 6:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = trunc((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed4 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 7:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef8 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 8:\n    result = __aeabi_fmul(value,0x42700000);\n    DAT_20000edc = __aeabi_fmul(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = value;\n    break;\n  case 0xb:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000efa = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xc:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef9 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0xd:\n    isInvalid = __aeabi_fcmpeq(value,0);\n    if (isInvalid == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    isInvalid = __aeabi_fcmpeq(value,0);\n    if (isInvalid == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    isInvalid = __aeabi_fcmpeq(value,0);\n    if (isInvalid == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    isInvalid = __aeabi_fcmpeq(value,0);\n    if (isInvalid == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    limits_init();\n    break;\n  case 0x11:\n    isInvalid = __aeabi_fcmpeq(value,0);\n    if (isInvalid == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = trunc((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ee6 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = value;\n    break;\n  case 0x14:\n    DAT_20000eec = value;\n    break;\n  case 0x15:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = round((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ef0 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = value;\n    break;\n  case 0x17:\n    convertedValue = __aeabi_f2d(value);\n    convertedValue = trunc((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    DAT_20000ed6 = __aeabi_d2uiz((int)convertedValue,(int)((ulonglong)convertedValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  write_global_settings();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "update_global_settings_08004e30",
                "param_1": "settingID",
                "param_2": "value",
                "uVar1": "result",
                "iVar2": "isInvalid",
                "uVar3": "convertedValue"
            },
            "calling": [
                "protocol_execute_line"
            ],
            "called": [
                "__aeabi_f2d",
                "__aeabi_d2uiz",
                "__aeabi_fcmplt",
                "trunc",
                "__aeabi_fmul",
                "write_global_settings",
                "__aeabi_fcmple",
                "limits_init",
                "round",
                "__aeabi_fcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "check_and_reset_settings_080051b4",
            "code": "\nvoid checkAndResetSettings_080051b4(void)\n\n{\n  int result;\n  undefined coordData [15];\n  byte counter;\n  \n  result = read_global_settings();\n  if (result == 0) {\n    report_status_message(10);\n    settings_reset(1);\n    report_grbl_settings();\n  }\n  for (counter = 0; counter < 8; counter = counter + 1) {\n    result = settings_read_coord_data(counter,coordData);\n    if (result == 0) {\n      report_status_message(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "check_and_reset_settings_080051b4",
                "iVar1": "result",
                "auStack_18": "coordData",
                "local_9": "counter"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "settings_read_coord_data",
                "report_grbl_settings",
                "settings_reset",
                "report_status_message",
                "read_global_settings"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "spindle_stop"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "spindle_run"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "stop_spindle_08005238",
            "code": "\nvoid stopSpindle_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  spindle_stop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "stop_spindle_08005238"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "spindle_stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "turn_off_spindle_08005250",
            "code": "\nvoid turnOffSpindle_08005250(void)\n\n{\n  spindle_off();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "turn_off_spindle_08005250"
            },
            "calling": [
                "mc_reset",
                "spindle_run",
                "spindle_init"
            ],
            "called": [
                "spindle_off"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "update_spindle_status_0800525c",
            "code": "\nvoid updateSpindleStatus_0800525c(byte newStatus)\n\n{\n  if ((int)(char)newStatus != (uint)DAT_20000e12) {\n    plan_synchronize();\n    if (newStatus == 0) {\n      spindle_stop();\n      DAT_20000e12 = newStatus;\n    }\n    else {\n      if ((char)newStatus < '\\x01') {\n        spindle_rev();\n      }\n      else {\n        spindle_fwd();\n      }\n      spindle_on();\n      DAT_20000e12 = newStatus;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "update_spindle_status_0800525c",
                "param_1": "newStatus"
            },
            "calling": [
                "gc_execute_line"
            ],
            "called": [
                "spindle_rev",
                "spindle_fwd",
                "spindle_stop",
                "spindle_on",
                "plan_synchronize"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "set_bits_in_register_080052ac",
            "code": "\n\n\nvoid setBitsInRegister_080052ac(uint newValue)\n\n{\n  _DAT_40021014 = newValue | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "set_bits_in_register_080052ac",
                "param_1": "newValue"
            },
            "calling": [
                "step_pulse_isr",
                "st_init",
                "step_delay_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_flag_080052dc",
            "code": "\n\n\nvoid updateFlag_080052dc(uint input)\n\n{\n  _DAT_40021014 = input | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_flag_080052dc",
                "param_1": "input"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_step_period_08005324",
            "code": "\nvoid calculateStepPeriod_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  set_step_period(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_step_period_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "st_reset",
                "st_cycle_reinitialize",
                "step_period_isr"
            ],
            "called": [
                "set_step_period"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "update_counter_08005360",
            "code": "\nbool updateCounter_08005360(void)\n\n{\n  bool isOverflow;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isOverflow = 420000 < DAT_20000e2c;\n  if (isOverflow) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isOverflow;\n}\n\n",
            "renaming": {
                "FUN_08005360": "update_counter_08005360",
                "bVar1": "isOverflow"
            },
            "calling": [
                "step_period_isr"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_current_block_data_080053a0",
            "code": "\nvoid updateCurrentBlockData_080053a0(void)\n\n{\n  int iVar1;\n  \n  dirn_wr(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)plan_get_current_block();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      st_go_idle();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        set_step_events_per_minute(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iVar1 = iterate_trapezoid_cycle_counter();\n        if (iVar1 != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            set_step_events_per_minute(DAT_20000e30);\n          }\n          else {\n            st_go_idle();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iVar1 = iterate_trapezoid_cycle_counter();\n        if (iVar1 != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          set_step_events_per_minute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          set_step_events_per_minute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iVar1 = iterate_trapezoid_cycle_counter();\n        if (iVar1 != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          set_step_events_per_minute(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      plan_discard_current_block();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_current_block_data_080053a0"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "st_go_idle",
                "plan_discard_current_block",
                "iterate_trapezoid_cycle_counter",
                "plan_get_current_block",
                "dirn_wr",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_08005760",
            "code": "\nvoid initialize_data_08005760(void)\n\n{\n  write_data_step(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_08005760",
                "step_wr": "write_data_step"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_step_08005778",
            "code": "\nvoid initialize_step_08005778(void)\n\n{\n  step_wr(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_step_08005778"
            },
            "calling": [
                "TIM2_IRQHandler"
            ],
            "called": [
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_stepper_motor_08005790",
            "code": "\nvoid initializeStepperMotor_08005790(void)\n\n{\n  stepper_motor_enable();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    setPulseDelay(0x69);\n    setPulseTime((DAT_20000ec9 + 5) * 0x15);\n    enableStepIsr();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_stepper_motor_08005790",
                "set_step_pulse_delay": "setPulseDelay",
                "set_step_pulse_time": "setPulseTime",
                "step_isr_enable": "enableStepIsr"
            },
            "calling": [
                "limits_go_home",
                "st_init",
                "st_cycle_start"
            ],
            "called": [
                "step_isr_enable",
                "stepper_motor_enable",
                "set_step_pulse_delay",
                "set_step_pulse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "disable_stepper_motor_080057e4",
            "code": "\nvoid disable_stepper_motor_080057e4(void)\n\n{\n  disable_step_isr();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    disable_motor();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "disable_stepper_motor_080057e4",
                "step_isr_disable": "disable_step_isr",
                "stepper_motor_disable": "disable_motor"
            },
            "calling": [
                "mc_reset",
                "limits_go_home",
                "st_init",
                "step_period_isr"
            ],
            "called": [
                "step_isr_disable",
                "stepper_motor_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initialize_data_08005814(void)\n\n{\n  memset(&DAT_20000e14,0,0x24);\n  configure_event_rate(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "set_step_events_per_minute": "configure_event_rate"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "memset",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_device_0800583c",
            "code": "\nvoid initializeDevice_0800583c(void)\n\n{\n  step_wr(DAT_20000ed4);\n  st_wake_up();\n  st_go_idle();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_device_0800583c"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [
                "st_go_idle",
                "st_wake_up",
                "step_wr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "wake_up_task_0800585c",
            "code": "\nvoid wakeUpTask_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    st_wake_up();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "wake_up_task_0800585c"
            },
            "calling": [
                "mc_line",
                "protocol_execute_runtime",
                "mc_go_home"
            ],
            "called": [
                "st_wake_up"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_status_0800587c",
            "code": "\nvoid updateStatus_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_status_0800587c"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_plan_cycle_080058a0",
            "code": "\nvoid initializePlanCycle_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    reinitializeCycle(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    setEventsPerMinute(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_plan_cycle_080058a0",
                "plan_cycle_reinitialize": "reinitializeCycle",
                "set_step_events_per_minute": "setEventsPerMinute"
            },
            "calling": [
                "protocol_execute_runtime"
            ],
            "called": [
                "plan_cycle_reinitialize",
                "set_step_events_per_minute"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "handle_byte_08005900",
            "code": "\nundefined4 handle_byte_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        mc_reset();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "handle_byte_08005900",
                "param_1": "byte_value"
            },
            "calling": [
                "serial_read"
            ],
            "called": [
                "mc_reset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "execute_software_interrupt_0800597c",
            "code": "\nvoid executeSoftwareInterrupt_0800597c(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "execute_afl_function_08005984",
            "code": "\nundefined4 executeAFLFunction_08005984(undefined4 inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_20000e44 == 0) {\n    returnValue = aflCall(1,inputParam,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005984": "execute_afl_function_08005984",
                "param_1": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_system_080059b4",
            "code": "\n\n\nundefined4 initializeSystem_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  setSysTickConfiguration(16000);\n  setPriorityGrouping(3);\n  initializeMSP();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "HAL_SYSTICK_Config": "setSysTickConfiguration",
                "HAL_NVIC_SetPriorityGrouping": "setPriorityGrouping",
                "HAL_MspInit": "initializeMSP"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "reset_hardware_080059f8",
            "code": "\n\n\nundefined4 resetHardware_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  HAL_MspDeInit();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "reset_hardware_080059f8"
            },
            "calling": [],
            "called": [
                "HAL_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "HAL_DeInit"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_data_counter_08005a68",
            "code": "\nvoid incrementDataCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_data_counter_08005a68"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_data_value_08005a84",
            "code": "\nundefined4 get_data_value_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_data_value_08005a84"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "SysTick_Handler",
                "get_current_usecs",
                "HAL_RCC_ClockConfig",
                "HAL_Delay"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "delay_milliseconds_08005a98",
            "code": "\nvoid delayMilliseconds_08005a98(int milliseconds)\n\n{\n  int startTick;\n  uint currentTick;\n  \n  startTick = HAL_GetTick();\n  do {\n    currentTick = HAL_GetTick();\n  } while (currentTick < (uint)(milliseconds + startTick));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "delay_milliseconds_08005a98",
                "param_1": "milliseconds",
                "iVar1": "startTick",
                "uVar2": "currentTick"
            },
            "calling": [
                "_delay_ms"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "write_byte_08005bdc",
            "code": "\nvoid write_byte_08005bdc(byte byte_value,uint data_value)\n\n{\n  if ((char)byte_value < '\\0') {\n    *(char *)((byte_value & 0xf) + 0xe000ed14) = (char)((data_value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byte_value + -0x1fff1c00) = (char)((data_value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "write_byte_08005bdc",
                "param_1": "byte_value",
                "param_2": "data_value"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_set_param_08005c30",
            "code": "\n\n\nbool checkAndSetParam_08005c30(int inputParam)\n\n{\n  bool isParamValid;\n  \n  isParamValid = inputParam - 1U < 0x1000000;\n  if (isParamValid) {\n    _DAT_e000e014 = inputParam + -1;\n    write_byte_08005bdc(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isParamValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_set_param_08005c30",
                "param_1": "inputParam",
                "bVar1": "isParamValid"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_device_status_08005cec",
            "code": "\n\n\nundefined4 checkDeviceStatus_08005cec(uint *deviceStatus)\n\n{\n  int iVar1;\n  uint uVar2;\n  \n  if ((*deviceStatus & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (deviceStatus[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = concatenate(DAT_40023800_3,concatenate((char)deviceStatus[1],_DAT_40023800));\n      if (deviceStatus[1] == 1) {\n        iVar1 = getCurrentTick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          uVar2 = getCurrentTick();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        iVar1 = getCurrentTick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          uVar2 = getCurrentTick();\n          if (iVar1 + 5000U <= uVar2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*deviceStatus & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (deviceStatus[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (deviceStatus[3] == 0) {\n      _DAT_42470000 = 0;\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023800 & 2) != 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023800 & 2) == 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = deviceStatus[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*deviceStatus & 8) != 0) {\n    if (deviceStatus[5] == 0) {\n      _DAT_42470e80 = 0;\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023874 & 2) != 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023874 & 2) == 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*deviceStatus & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    iVar1 = getCurrentTick();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      uVar2 = getCurrentTick();\n      if (iVar1 + 100U <= uVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    iVar1 = getCurrentTick();\n    while ((_DAT_40023870 & 2) != 0) {\n      uVar2 = getCurrentTick();\n      if (iVar1 + 5000U <= uVar2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = concatenate(DAT_40023870_1,(char)deviceStatus[2]);\n    if (deviceStatus[2] == 1) {\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023870 & 2) == 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023870 & 2) != 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 5000U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (deviceStatus[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (deviceStatus[6] == 2) {\n      _DAT_42470060 = 0;\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           deviceStatus[0xb] << 0x18 |\n           deviceStatus[8] | deviceStatus[9] << 6 | ((deviceStatus[10] >> 1) - 1) * 0x10000 | deviceStatus[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      iVar1 = getCurrentTick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        uVar2 = getCurrentTick();\n        if (iVar1 + 100U <= uVar2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_device_status_08005cec",
                "param_1": "deviceStatus",
                "HAL_GetTick": "getCurrentTick",
                "CONCAT13": "concatenate",
                "CONCAT12": "concatenate",
                "CONCAT31": "concatenate"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "initialize_process_0800618c",
            "code": "\n\n\nundefined4 initializeProcess_0800618c(uint *configParams,uint configSize)\n\n{\n  int tick;\n  uint currentTick;\n  uint timeout;\n  undefined8 processorFrequency;\n  \n  if ((_DAT_40023c00 & 0xf) < configSize) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)configSize);\n    if (configSize != (configSize & 0xf)) {\n      return 1;\n    }\n    if ((*configParams & 1) != 0) {\n      if (configParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((configParams[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = configParams[1] | _DAT_40023808 & 0xfffffffc;\n      tick = HAL_GetTick();\n      timeout = tick + 5000;\n      if (configParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentTick = HAL_GetTick();\n          if (timeout <= currentTick) {\n            return 3;\n          }\n        }\n      }\n      else if (configParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentTick = HAL_GetTick();\n          if (timeout <= currentTick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentTick = HAL_GetTick();\n          if (timeout <= currentTick) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*configParams & 1) != 0) {\n      if (configParams[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (configParams[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = configParams[1] | _DAT_40023808 & 0xfffffffc;\n      tick = HAL_GetTick();\n      timeout = tick + 5000;\n      if (configParams[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          currentTick = HAL_GetTick();\n          if (timeout <= currentTick) {\n            return 3;\n          }\n        }\n      }\n      else if (configParams[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          currentTick = HAL_GetTick();\n          if (timeout <= currentTick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          currentTick = HAL_GetTick();\n          if (timeout <= currentTick) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)configSize);\n    if (configSize != (configSize & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configParams & 2) != 0) {\n    _DAT_40023808 = configParams[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*configParams & 4) != 0) {\n    _DAT_40023808 = configParams[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*configParams & 8) != 0) {\n    _DAT_40023808 = configParams[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  processorFrequency = HAL_RCC_GetHCLKFreq();\n  check_and_set_param_08005c30((uint)processorFrequency / 1000,(int)((ulonglong)processorFrequency >> 0x20),(uint)processorFrequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "initialize_process_0800618c",
                "param_1": "configParams",
                "param_2": "configSize",
                "iVar1": "tick",
                "uVar2": "currentTick",
                "uVar3": "timeout",
                "uVar4": "processorFrequency"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "FUN_08005c30",
                "HAL_RCC_GetHCLKFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "initialize_gpio_0800640c",
            "code": "\n\n\nvoid initializeGPIO_0800640c(int mode,uint param1,uint param2)\n\n{\n  undefined4 gpioConfig;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  \n  if (mode == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    gpioConfig = 0x100;\n    localVar1 = 2;\n    localVar3 = 3;\n    localVar2 = 0;\n    localVar4 = 0;\n    HAL_GPIO_Init(0x40020000,&gpioConfig);\n    _DAT_40023808 = param2 | param1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    gpioConfig = 0x200;\n    localVar1 = 2;\n    localVar3 = 3;\n    localVar2 = 0;\n    localVar4 = 0;\n    HAL_GPIO_Init(0x40020800,&gpioConfig);\n    _DAT_40023808 = param1 | param2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "initialize_gpio_0800640c",
                "param_1": "mode",
                "param_2": "param1",
                "param_3": "param2",
                "local_1c": "gpioConfig",
                "local_18": "localVar1",
                "local_14": "localVar2",
                "local_10": "localVar3",
                "local_c": "localVar4"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_frequency_080064ec",
            "code": "\n\n\nuint calculateFrequency_080064ec(void)\n\n{\n  uint mode;\n  uint frequency;\n  \n  mode = _DAT_40023808 & 0xc;\n  if (mode == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return frequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (mode < 9) {\n    if (mode == 0) {\n      return 16000000;\n    }\n    if (mode == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_frequency_080064ec",
                "uVar1": "mode",
                "local_c": "frequency"
            },
            "calling": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "get_sys_clock_frequency_08006628",
            "code": "\n\n\nuint getSysClockFrequency_08006628(void)\n\n{\n  uint sysClockFreq;\n  \n  sysClockFreq = HAL_RCC_GetSysClockFreq();\n  DAT_20000000 = sysClockFreq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return sysClockFreq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "get_sys_clock_frequency_08006628",
                "uVar1": "sysClockFreq"
            },
            "calling": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "get_hclk_frequency_08006680",
            "code": "\n\n\nuint getHCLKFrequency_08006680(void)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = getHCLKFreq();\n  return hclkFreq >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "get_hclk_frequency_08006680",
                "uVar1": "hclkFreq",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "get_adjusted_hclk_freq_080066cc",
            "code": "\n\n\nuint getAdjustedHCLKFreq_080066cc(void)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = getHCLKFreq();\n  return hclkFreq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "get_adjusted_hclk_freq_080066cc",
                "uVar1": "hclkFreq",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "set_baud_rate"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "set_configuration_register_08006950",
            "code": "\n\n\nvoid setConfigurationRegister_08006950(uint configuration)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configuration & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "set_configuration_register_08006950",
                "param_1": "configuration"
            },
            "calling": [
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "get_shifted_value_masked_08006998",
            "code": "\n\n\nuint getShiftedValueMasked_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "get_shifted_value_masked_08006998"
            },
            "calling": [
                "HAL_NVIC_GetPriorityGrouping",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_at_offset_080069b4",
            "code": "\nvoid setBitAtOffset_080069b4(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_at_offset_080069b4",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_EnableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_in_memory_080069e4",
            "code": "\nvoid setBitInMemory_080069e4(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_in_memory_080069e4",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_DisableIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_value_08006a18",
            "code": "\nbool checkBitValue_08006a18(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_value_08006a18",
                "param_1": "byteValue"
            },
            "calling": [
                "HAL_NVIC_GetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_at_index_08006a58",
            "code": "\nvoid setBitAtIndex_08006a58(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_at_index_08006a58",
                "param_1": "inputByte"
            },
            "calling": [
                "HAL_NVIC_SetPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_in_memory_08006a8c",
            "code": "\nvoid setBitInMemory_08006a8c(byte byteToSet)\n\n{\n  *(int *)((((uint)(int)(char)byteToSet >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_in_memory_08006a8c",
                "param_1": "byteToSet"
            },
            "calling": [
                "HAL_NVIC_ClearPendingIRQ"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_08006ac0",
            "code": "\nbool checkBit_08006ac0(byte byteVal)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteVal >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (byteVal & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "param_1": "byteVal"
            },
            "calling": [
                "HAL_NVIC_GetActive"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "store_shifted_value_08006b00",
            "code": "\nvoid storeShiftedValue_08006b00(byte inputByte,uint shiftedValue)\n\n{\n  if ((char)inputByte < '\\0') {\n    *(char *)((inputByte & 0xf) + 0xe000ed14) = (char)((shiftedValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((shiftedValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "store_shifted_value_08006b00",
                "param_1": "inputByte",
                "param_2": "shiftedValue"
            },
            "calling": [
                "SysTick_Config",
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "extract_byte_from_memory_08006b54",
            "code": "\nbyte extractByteFromMemory_08006b54(byte inputByte)\n\n{\n  byte extractedByte;\n  \n  if ((char)inputByte < '\\0') {\n    extractedByte = *(byte *)((inputByte & 0xf) + 0xe000ed14);\n  }\n  else {\n    extractedByte = *(byte *)((char)inputByte + -0x1fff1c00);\n  }\n  return extractedByte >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "extract_byte_from_memory_08006b54",
                "param_1": "inputByte",
                "bVar1": "extractedByte"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "bitwise_operation_08006ba0",
            "code": "\nuint bitwiseOperation_08006ba0(uint mask2,uint input2,uint input3)\n\n{\n  uint shiftAmount1;\n  \n  mask2 = mask2 & 7;\n  shiftAmount1 = 7 - mask2;\n  if (3 < shiftAmount1) {\n    shiftAmount1 = 4;\n  }\n  if (mask2 + 4 < 7) {\n    mask2 = 0;\n  }\n  else {\n    mask2 = mask2 - 3;\n  }\n  return input3 & (1 << (mask2 & 0xff)) - 1U |\n         ((1 << (shiftAmount1 & 0xff)) - 1U & input2) << (mask2 & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "mask2",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "shiftAmount1"
            },
            "calling": [
                "HAL_NVIC_SetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extractBits_08006c04(uint input,uint bitOffset,uint *output1,uint *output2)\n\n{\n  uint numBitsToExtract;\n  \n  bitOffset = bitOffset & 7;\n  numBitsToExtract = 7 - bitOffset;\n  if (3 < numBitsToExtract) {\n    numBitsToExtract = 4;\n  }\n  if (bitOffset + 4 < 7) {\n    bitOffset = 0;\n  }\n  else {\n    bitOffset = bitOffset - 3;\n  }\n  *output1 = (1 << (numBitsToExtract & 0xff)) - 1U & input >> (bitOffset & 0xff);\n  *output2 = (1 << (bitOffset & 0xff)) - 1U & input;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "bitOffset",
                "param_3": "output1",
                "param_4": "output2",
                "uVar1": "numBitsToExtract"
            },
            "calling": [
                "HAL_NVIC_GetPriority"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "data_synchronization_08006c70",
            "code": "\nvoid data_synchronization_08006c70(void)\n\n{\n  DataSynchronizationBarrier(0xf);\n  DataSynchronizationBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "data_synchronization_08006c70"
            },
            "calling": [
                "HAL_NVIC_SystemReset"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "is_param_valid_08006c9c",
            "code": "\n\n\nbool is_param_valid_08006c9c(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    set_interrupt_priority(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "is_param_valid_08006c9c",
                "param_1": "input_value",
                "bVar1": "is_valid",
                "NVIC_SetPriority": "set_interrupt_priority"
            },
            "calling": [
                "HAL_SYSTICK_Config"
            ],
            "called": [
                "NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "set_priority_group_08006ce0",
            "code": "\nvoid setPriorityGroup_08006ce0(undefined4 priorityGroup)\n\n{\n  setPriorityGroup_08006ce0ing(priorityGroup);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "set_priority_group_08006ce0",
                "param_1": "priorityGroup",
                "NVIC_SetPriorityGrouping": "setPriorityGrouping"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "set_interrupt_priority_08006cf6",
            "code": "\nvoid setInterruptPriority_08006cf6(char interruptId,undefined4 priorityGroup,undefined4 preemptPriority)\n\n{\n  undefined4 priorityGrouping;\n  \n  priorityGrouping = getPriorityGrouping();\n  priorityGrouping = encodePriority(priorityGrouping,priorityGroup,preemptPriority);\n  setPriority((int)interruptId,priorityGrouping);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "set_interrupt_priority_08006cf6",
                "param_1": "interruptId",
                "param_2": "priorityGroup",
                "param_3": "preemptPriority",
                "uVar1": "priorityGrouping",
                "NVIC_GetPriorityGrouping": "getPriorityGrouping",
                "NVIC_EncodePriority": "encodePriority",
                "NVIC_SetPriority": "setPriority"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [
                "NVIC_SetPriority",
                "NVIC_EncodePriority",
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_at_offset_08006d2e",
            "code": "\nvoid setBitAtOffset_08006d2e(char input)\n\n{\n  setBitAtOffset_08006d2eHelper((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_at_offset_08006d2e",
                "param_1": "input",
                "set_bit_at_offset_080069b4": "setBitAtOffsetHelper"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "disable_interrupt_08006d4a",
            "code": "\nvoid disableInterrupt_08006d4a(char interruptNumber)\n\n{\n  NVIC_DisableIRQ((int)interruptNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "disable_interrupt_08006d4a",
                "param_1": "interruptNumber"
            },
            "calling": [],
            "called": [
                "NVIC_DisableIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "reset_system_08006d66",
            "code": "\nvoid reset_system_08006d66(void)\n\n{\n  reset();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "reset_system_08006d66",
                "NVIC_SystemReset": "reset"
            },
            "calling": [],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "initialize_sys_tick_08006d72",
            "code": "\nundefined4 initializeSysTick_08006d72(undefined4 config)\n\n{\n  undefined4 configResult;\n  \n  configResult = SysTick_Config(config);\n  return configResult;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "initialize_sys_tick_08006d72",
                "param_1": "config",
                "uVar1": "configResult"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "SysTick_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "get_priority_grouping_08006d8a",
            "code": "\nundefined4 getPriorityGrouping_08006d8a(void)\n\n{\n  undefined4 priorityGrouping;\n  \n  priorityGrouping = NVIC_GetPriorityGrouping();\n  return priorityGrouping;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "get_priority_grouping_08006d8a",
                "uVar1": "priorityGrouping"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "decode_and_set_priority_08006d98",
            "code": "\nvoid decode_and_set_priority_08006d98(char character,undefined4 priority_level_1,undefined4 priority_level_2,undefined4 priority_level_3)\n\n{\n  undefined4 priority_value;\n  \n  priority_value = NVIC_GetPriority((int)character);\n  NVIC_DecodePriority(priority_value,priority_level_1,priority_level_2,priority_level_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "decode_and_set_priority_08006d98",
                "param_1": "character",
                "param_2": "priority_level_1",
                "param_3": "priority_level_2",
                "param_4": "priority_level_3",
                "uVar1": "priority_value"
            },
            "calling": [],
            "called": [
                "NVIC_GetPriority",
                "NVIC_DecodePriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_pending_irq_08006dc4",
            "code": "\nvoid setPendingIRQ_08006dc4(char irqNumber)\n\n{\n  NVIC_SetPendingIRQ((int)irqNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_pending_irq_08006dc4",
                "param_1": "irqNumber"
            },
            "calling": [],
            "called": [
                "NVIC_SetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "get_pending_irq_status_08006de0",
            "code": "\nundefined4 getPendingIRQStatus_08006de0(char irqNumber)\n\n{\n  undefined4 status;\n  \n  status = NVIC_GetPendingIRQ((int)irqNumber);\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "get_pending_irq_status_08006de0",
                "param_1": "irqNumber",
                "uVar1": "status"
            },
            "calling": [],
            "called": [
                "NVIC_GetPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "clear_pending_irq_08006dfe",
            "code": "\nvoid clearPendingIRQ_08006dfe(char irqNumber)\n\n{\n  NVIC_ClearPendingIRQ((int)irqNumber);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "clear_pending_irq_08006dfe",
                "param_1": "irqNumber"
            },
            "calling": [],
            "called": [
                "NVIC_ClearPendingIRQ"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "get_active_interrupt_08006e1a",
            "code": "\nundefined4 getActiveInterrupt_08006e1a(char interruptNumber)\n\n{\n  undefined4 activeInterrupt;\n  \n  activeInterrupt = NVIC_GetActive((int)interruptNumber);\n  return activeInterrupt;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "get_active_interrupt_08006e1a",
                "param_1": "interruptNumber",
                "uVar1": "activeInterrupt"
            },
            "calling": [],
            "called": [
                "NVIC_GetActive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_registers_08006e88",
            "code": "\n\n\nvoid update_registers_08006e88(uint *register_array,uint *input_array)\n\n{\n  uint mask;\n  uint result;\n  int register_index;\n  uint iteration_count;\n  \n  for (iteration_count = 0; iteration_count < 0x10; iteration_count = iteration_count + 1) {\n    mask = 1 << (iteration_count & 0xff);\n    result = *input_array & mask;\n    if (result == mask) {\n      if ((input_array[1] == 2) || (input_array[1] == 0x12)) {\n        mask = input_array[4];\n        register_array[(iteration_count >> 3) + 8] = register_array[(iteration_count >> 3) + 8] & ~(0xf << ((iteration_count & 7) << 2));\n        register_array[(iteration_count >> 3) + 8] = register_array[(iteration_count >> 3) + 8] | mask << ((iteration_count & 7) << 2);\n      }\n      *register_array = *register_array & ~(3 << ((iteration_count & 0x7f) << 1));\n      *register_array = *register_array | (input_array[1] & 3) << ((iteration_count & 0x7f) << 1);\n      if ((((input_array[1] == 1) || (input_array[1] == 2)) || (input_array[1] == 0x11)) || (input_array[1] == 0x12)\n         ) {\n        register_array[2] = register_array[2] & ~(3 << ((iteration_count & 0x7f) << 1));\n        register_array[2] = register_array[2] | input_array[3] << ((iteration_count & 0x7f) << 1);\n        register_array[1] = register_array[1] & ~(1 << (iteration_count & 0xff));\n        register_array[1] = register_array[1] | (input_array[1] >> 4 & 1) << (iteration_count & 0xff);\n      }\n      register_array[3] = register_array[3] & ~(3 << ((iteration_count & 0x7f) << 1));\n      register_array[3] = register_array[3] | input_array[2] << ((iteration_count & 0x7f) << 1);\n      if ((input_array[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((iteration_count >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((iteration_count & 3) << 2)) & *(uint *)(((iteration_count >> 2) + 2) * 4 + 0x40013800);\n        if (register_array == (uint *)0x40020000) {\n          register_index = 0;\n        }\n        else if (register_array == (uint *)0x40020400) {\n          register_index = 1;\n        }\n        else if (register_array == (uint *)0x40020800) {\n          register_index = 2;\n        }\n        else if (register_array == (uint *)0x40020c00) {\n          register_index = 3;\n        }\n        else if (register_array == (uint *)0x40021000) {\n          register_index = 4;\n        }\n        else if (register_array == (uint *)0x40021400) {\n          register_index = 5;\n        }\n        else if (register_array == (uint *)0x40021800) {\n          register_index = 6;\n        }\n        else if (register_array == (uint *)0x40021c00) {\n          register_index = 7;\n        }\n        else if (register_array == (uint *)0x40022000) {\n          register_index = 8;\n        }\n        else if (register_array == (uint *)0x40022400) {\n          register_index = 9;\n        }\n        else {\n          register_index = 10;\n        }\n        *(uint *)(((iteration_count >> 2) + 2) * 4 + 0x40013800) =\n             register_index << ((iteration_count & 3) << 2) | *(uint *)(((iteration_count >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~result & _DAT_40013c00;\n        _DAT_40013c04 = ~result & _DAT_40013c04;\n        if ((input_array[1] & 0x10000) != 0) {\n          _DAT_40013c00 = result | _DAT_40013c00;\n        }\n        if ((input_array[1] & 0x20000) != 0) {\n          _DAT_40013c04 = result | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~result & _DAT_40013c08;\n        _DAT_40013c0c = ~result & _DAT_40013c0c;\n        if ((input_array[1] & 0x100000) != 0) {\n          _DAT_40013c08 = result | _DAT_40013c08;\n        }\n        if ((input_array[1] & 0x200000) != 0) {\n          _DAT_40013c0c = result | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_registers_08006e88",
                "param_1": "register_array",
                "param_2": "input_array",
                "uVar1": "mask",
                "uVar2": "result",
                "iVar3": "register_index",
                "local_c": "iteration_count"
            },
            "calling": [
                "HAL_RCC_MCOConfig",
                "gpio_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "update_param_0800733e",
            "code": "\nvoid updateParam_0800733e(int ptrToData,undefined2 newValue,char condition)\n\n{\n  if (condition == '\\0') {\n    *(undefined2 *)(ptrToData + 0x1a) = newValue;\n  }\n  else {\n    *(undefined2 *)(ptrToData + 0x18) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "update_param_0800733e",
                "param_1": "ptrToData",
                "param_2": "newValue",
                "param_3": "condition"
            },
            "calling": [
                "gpio_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "handle_param_update_0800738e",
            "code": "\n\n\nvoid handle_param_update_0800738e(ushort updated_param)\n\n{\n  if ((updated_param & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)updated_param;\n    process_callback(updated_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "handle_param_update_0800738e",
                "param_1": "updated_param",
                "HAL_GPIO_EXTI_Callback": "process_callback"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_value_080073d4",
            "code": "\nvoid setBitValue_080073d4(uint inputValue)\n\n{\n  *(short *)(((int)inputValue >> 4) * 0x400 + 0x4002001a) = (short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_value_080073d4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_in_memory_08007402",
            "code": "\nvoid setBitInMemory_08007402(uint value)\n\n{\n  *(short *)((shiftedValue >> 4) * 0x400 + 0x40020018) = (short)(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "param_1": "value",
                "(int)param_1": "shiftedValue"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "configure_system_clock_08007436",
            "code": "\n\n\nvoid configureSystemClock_08007436(void)\n\n{\n  int result;\n  undefined4 oscConfig;\n  undefined4 alignmentConfig;\n  undefined4 voltageScalingConfig;\n  undefined4 flashLatencyConfig;\n  undefined4 rtcClockConfig;\n  undefined4 pllMultiplierConfig;\n  undefined4 pllSourceConfig;\n  undefined4 systemClockSourceConfig;\n  undefined4 systemClockConfig;\n  undefined4 mcoConfig;\n  undefined4 hseState;\n  undefined4 ahbPrescalerConfig;\n  undefined4 apb1PrescalerConfig;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  oscConfig = 1;\n  alignmentConfig = 1;\n  voltageScalingConfig = 2;\n  flashLatencyConfig = 0x400000;\n  rtcClockConfig = 8;\n  pllMultiplierConfig = 0x150;\n  pllSourceConfig = 2;\n  systemClockSourceConfig = 7;\n  result = HAL_RCC_OscConfig(&oscConfig);\n  if (result != 0) {\n    Error_Handler();\n  }\n  systemClockConfig = 0xf;\n  mcoConfig = 2;\n  hseState = 0;\n  ahbPrescalerConfig = 0x1400;\n  apb1PrescalerConfig = 0x1000;\n  result = HAL_RCC_ClockConfig(&systemClockConfig,5);\n  if (result != 0) {\n    Error_Handler();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "configure_system_clock_08007436",
                "local_4c": "oscConfig",
                "local_48": "alignmentConfig",
                "local_34": "voltageScalingConfig",
                "local_30": "flashLatencyConfig",
                "local_2c": "rtcClockConfig",
                "local_28": "pllMultiplierConfig",
                "local_24": "pllSourceConfig",
                "local_20": "systemClockSourceConfig",
                "local_1c": "systemClockConfig",
                "local_18": "mcoConfig",
                "local_14": "hseState",
                "local_10": "ahbPrescalerConfig",
                "local_c": "apb1PrescalerConfig",
                "iVar1": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "Error_Handler",
                "HAL_RCC_OscConfig",
                "HAL_RCC_ClockConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "check_and_update_interrupts_080074c8",
            "code": "\nvoid checkAndUpdateInterrupts_080074c8(uint interruptMask)\n\n{\n  if ((interruptMask & 1) != 0) {\n    setGpio(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((interruptMask & 0x1e) != 0)) {\n    handleLimitsInterrupt();\n  }\n  if ((DAT_20000e50 != 0) && ((interruptMask & 0x80) != 0)) {\n    handleButtonsInterrupt(interruptMask);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "check_and_update_interrupts_080074c8",
                "param_1": "interruptMask",
                "gpio_set": "setGpio",
                "limits_isr": "handleLimitsInterrupt",
                "buttons_isr": "handleButtonsInterrupt"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_set",
                "limits_isr",
                "buttons_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "clear_gpio_if_odd_08007520",
            "code": "\nvoid clearGPIOIfOdd_08007520(uint value)\n\n{\n  if ((value & 1) != 0) {\n    clearGPIO(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "clear_gpio_if_odd_08007520",
                "param_1": "value",
                "gpio_clr": "clearGPIO"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_clr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_machine_08007540",
            "code": "\nundefined4 initialize_machine_08007540(void)\n\n{\n  initialize_HAL();\n  configure_system_clock();\n  initialize_gpio();\n  initialize_timers();\n  initialize_debounce();\n  initialize_usart();\n  start_forkserver(0);\n  run_grbl_main();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_machine_08007540",
                "HAL_Init": "initialize_HAL",
                "SystemClock_Config": "configure_system_clock",
                "gpio_init": "initialize_gpio",
                "timers_init": "initialize_timers",
                "debounce_init": "initialize_debounce",
                "usart_init": "initialize_usart",
                "startForkserver": "start_forkserver",
                "grbl_main": "run_grbl_main"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "grbl_main",
                "debounce_init",
                "HAL_Init",
                "timers_init",
                "startForkserver",
                "gpio_init",
                "SystemClock_Config",
                "usart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_memory_0800756c",
            "code": "\n\n\nvoid initialize_memory_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_memory_0800756c"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bit_080076c8",
            "code": "\nvoid updateBit_080076c8(uint input)\n\n{\n  *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bit_080076c8",
                "param_1": "input"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "update_gpio_and_debounce_08007756",
            "code": "\nvoid updateGPIOAndDebounce_08007756(void)\n\n{\n  uint currentTick;\n  \n  currentTick = getCurrentTick();\n  if ((currentTick & 0x1ff) == 0) {\n    toggleLed(0x3c);\n  }\n  if ((currentTick & 0xf) == 0) {\n    handleDebounceInterrupt();\n  }\n  incrementTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "update_gpio_and_debounce_08007756",
                "uVar1": "currentTick",
                "HAL_GetTick": "getCurrentTick",
                "gpio_toggle": "toggleLed",
                "debounce_isr": "handleDebounceInterrupt",
                "HAL_IncTick": "incrementTick"
            },
            "calling": [],
            "called": [
                "debounce_isr",
                "gpio_toggle",
                "HAL_IncTick",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_gpio_0800778c",
            "code": "\n\n\nvoid initializeGPIO_0800778c(void)\n\n{\n  int iVar1;\n  int pinConfiguration;\n  undefined4 register1;\n  undefined4 register2;\n  undefined4 register3;\n  undefined4 register4;\n  uint *address;\n  uint loopCounter;\n  \n  for (loopCounter = 0; loopCounter < 0x11; loopCounter = loopCounter + 1) {\n    iVar1 = loopCounter * 0x18;\n    address = (uint *)(&DAT_0800bcbc + iVar1);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*address >> 4 & 0xff);\n    pinConfiguration = 1 << (*address & 0xf);\n    register1 = *(undefined4 *)(&DAT_0800bcc0 + iVar1);\n    register2 = *(undefined4 *)(&DAT_0800bcc4 + iVar1);\n    register3 = *(undefined4 *)(&DAT_0800bcc8 + iVar1);\n    register4 = *(undefined4 *)(&DAT_0800bccc + iVar1);\n    configureGPIO(((*address >> 4) + 0x100080) * 0x400,&pinConfiguration);\n    if (-1 < (int)address[5]) {\n      writePin(((*address >> 4) + 0x100080) * 0x400,1 << (*address & 0xf) & 0xffff,\n                        address[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_gpio_0800778c",
                "local_24": "pinConfiguration",
                "local_20": "register1",
                "local_1c": "register2",
                "local_18": "register3",
                "local_14": "register4",
                "local_10": "address",
                "local_c": "loopCounter",
                "HAL_GPIO_Init": "configureGPIO",
                "HAL_GPIO_WritePin": "writePin"
            },
            "calling": [
                "main"
            ],
            "called": [
                "HAL_GPIO_WritePin",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_08007854",
            "code": "\nuint check_bit_08007854(uint input_value)\n\n{\n  return *(uint *)(((int)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_08007854",
                "param_1": "input_value"
            },
            "calling": [
                "debounce_input"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "read_gpio_values_08007884",
            "code": "\nuint read_GPIO_values_08007884(void)\n\n{\n  int gpio_value_1;\n  int gpio_value_2;\n  int gpio_value_3;\n  int gpio_value_4;\n  int gpio_value_5;\n  uint gpio_value_6;\n  \n  gpio_value_1 = gpio_rd(0x36);\n  gpio_value_2 = gpio_rd(0x37);\n  gpio_value_3 = gpio_rd(0x38);\n  gpio_value_4 = gpio_rd(0x39);\n  gpio_value_5 = gpio_rd(0xf);\n  gpio_value_6 = gpio_rd(0);\n  return gpio_value_6 | gpio_value_1 << 4 | gpio_value_2 << 3 | gpio_value_3 << 2 | gpio_value_4 << 1 | gpio_value_5 << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "read_gpio_values_08007884",
                "iVar1": "gpio_value_1",
                "iVar2": "gpio_value_2",
                "iVar3": "gpio_value_3",
                "iVar4": "gpio_value_4",
                "iVar5": "gpio_value_5",
                "uVar6": "gpio_value_6"
            },
            "calling": [
                "debounce_isr"
            ],
            "called": [
                "gpio_rd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_sum_080078f4",
            "code": "\nuint calculateSum_080078f4(void)\n\n{\n  int index;\n  uint sum;\n  \n  sum = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    sum = *(uint *)(&DAT_20000e54 + index * 4) | sum;\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_sum_080078f4",
                "local_10": "index",
                "local_c": "sum"
            },
            "calling": [
                "debounce_isr",
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_input_state_08007930",
            "code": "\nvoid updateInputState_08007930(void)\n\n{\n  int inputStateIndex;\n  uint previousInputState;\n  undefined4 debouncedInputState;\n  uint currentInputState;\n  uint changedInputState;\n  \n  inputStateIndex = DAT_20000e68;\n  previousInputState = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    debouncedInputState = debounceInput;\n    *(undefined4 *)(&DAT_20000e54 + inputStateIndex * 4) = debouncedInputState;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    currentInputState = debounceRead;\n    previousInputState = DAT_20000e64;\n    if (currentInputState != DAT_20000e64) {\n      changedInputState = ~currentInputState & DAT_20000e64;\n      if ((~DAT_20000e64 & currentInputState) != 0) {\n        check_and_update_interrupts_080074c8(~DAT_20000e64 & currentInputState);\n      }\n      previousInputState = currentInputState;\n      if (changedInputState != 0) {\n        clear_gpio_if_odd_08007520(changedInputState);\n      }\n    }\n  }\n  DAT_20000e64 = previousInputState;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_input_state_08007930",
                "iVar1": "inputStateIndex",
                "uVar2": "previousInputState",
                "uVar3": "debouncedInputState",
                "uVar4": "currentInputState",
                "uVar5": "changedInputState",
                "debounce_input()": "debounceInput",
                "debounce_rd()": "debounceRead"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "FUN_080074c8",
                "debounce_rd",
                "FUN_08007520",
                "debounce_input"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_data_080079c0",
            "code": "\nvoid initializeData_080079c0(void)\n\n{\n  memset(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_data_080079c0"
            },
            "calling": [
                "main"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_080079e0",
            "code": "\nvoid setBit_080079e0(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_080079e0",
                "param_1": "byteValue"
            },
            "calling": [
                "enable_tim_interrupt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_flag_08007a10",
            "code": "\n\n\nvoid updateFlag_08007a10(undefined *pointer)\n\n{\n  if (pointer == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (pointer == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (pointer == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_flag_08007a10",
                "param_1": "pointer"
            },
            "calling": [
                "g540_timer_init",
                "step_timer_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "set_nvic_priority_and_enable_irq_08007a70",
            "code": "\nvoid setNvicPriorityAndEnableIRQ_08007a70(undefined *address,undefined4 priority,undefined4 subpriority)\n\n{\n  undefined irqValue;\n  \n  if (address == (undefined *)0x40000000) {\n    irqValue = 0x1c;\n  }\n  else if (address == (undefined *)0x40000400) {\n    irqValue = 0x1d;\n  }\n  else {\n    if (address != &DAT_40000800) {\n      return;\n    }\n    irqValue = 0x1e;\n  }\n  HAL_NVIC_SetPriority(irqValue,priority,subpriority);\n  NVIC_EnableIRQ(irqValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "set_nvic_priority_and_enable_irq_08007a70",
                "param_1": "address",
                "param_2": "priority",
                "param_3": "subpriority",
                "local_c": "irqValue"
            },
            "calling": [
                "step_timer_init"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_timer_08007ad0",
            "code": "\n\n\nvoid initialize_timer_08007ad0(void)\n\n{\n  enable_timer_clock(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  enable_timer_interrupt(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_timer_08007ad0",
                "enable_tim_clock": "enable_timer_clock",
                "enable_tim_interrupt": "enable_timer_interrupt"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_interrupt",
                "enable_tim_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_based_on_conditions_08007b70",
            "code": "\n\n\nvoid setFlagsBasedOnConditions_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_based_on_conditions_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_bits_08007bc2",
            "code": "\n\n\nvoid clearBits_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_bits_08007bc2"
            },
            "calling": [
                "st_go_idle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_param_and_min_08007bf0",
            "code": "\n\n\nvoid updateParamAndMin_08007bf0(uint newValue)\n\n{\n  _DAT_4000002c = newValue;\n  if (newValue <= _DAT_40000024) {\n    _DAT_40000024 = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_param_and_min_08007bf0",
                "param_1": "newValue"
            },
            "calling": [
                "set_step_events_per_minute"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "initialize_data_08007c40",
            "code": "\n\n\nvoid initializeData_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "initialize_data_08007c40",
                "param_1": "value"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "initialize_data_08007c5e",
            "code": "\n\n\nvoid initializeData_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "initialize_data_08007c5e",
                "param_1": "value"
            },
            "calling": [
                "st_wake_up"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "update_flags_and_call_isrs_08007c7c",
            "code": "\n\n\nvoid update_flags_and_call_isrs_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    perform_delay_isr();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    perform_pulse_isr();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    perform_period_isr();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "update_flags_and_call_isrs_08007c7c",
                "step_delay_isr": "perform_delay_isr",
                "step_pulse_isr": "perform_pulse_isr",
                "step_period_isr": "perform_period_isr"
            },
            "calling": [],
            "called": [
                "step_pulse_isr",
                "step_period_isr",
                "step_delay_isr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_tim_clock_08007d08",
            "code": "\n\n\nvoid initializeTimClock_08007d08(void)\n\n{\n  enable_tim_clock(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_tim_clock_08007d08"
            },
            "calling": [
                "timers_init"
            ],
            "called": [
                "enable_tim_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_and_register_08007da8",
            "code": "\n\n\nvoid setFlagsAndRegister_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_and_register_08007da8"
            },
            "calling": [
                "timers_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_step_timer_08007e08",
            "code": "\nvoid initializeStepTimer_08007e08(void)\n\n{\n  stepTimerInitialization();\n  g540TimerInitialization();\n  startG540Timer();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_step_timer_08007e08",
                "step_timer_init": "stepTimerInitialization",
                "g540_timer_init": "g540TimerInitialization",
                "g540_timer_start": "startG540Timer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "g540_timer_init",
                "g540_timer_start",
                "step_timer_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_for_flag_08007e1c",
            "code": "\n\n\nvoid waitForFlag_08007e1c(byte input)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)input;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_for_flag_08007e1c",
                "param_1": "input"
            },
            "calling": [
                "__io_putchar",
                "serial_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "is_flag_set_08007e58",
            "code": "\n\n\nbool isFlagSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "is_flag_set_08007e58"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_least_significant_byte_08007e84",
            "code": "\n\n\nuint get_least_significant_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_least_significant_byte_08007e84"
            },
            "calling": [
                "serial_read"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_memory_flags_08007ea4",
            "code": "\n\n\nvoid updateMemoryFlags_08007ea4(undefined *memoryAddress)\n\n{\n  if (memoryAddress == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memoryAddress == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memoryAddress == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memoryAddress == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memoryAddress == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memoryAddress == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_memory_flags_08007ea4",
                "param_1": "memoryAddress"
            },
            "calling": [
                "usart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_divider_08007f54",
            "code": "\nvoid calculateClockDivider_08007f54(int baseAddress,int divider)\n\n{\n  ulonglong pclkRatio;\n  int pclk1Freq;\n  int pclk2Freq;\n  undefined8 sysclkFreq;\n  \n  if ((*(uint *)(baseAddress + 0xc) & 0x8000) == 0) {\n    if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n      sysclkFreq = HAL_RCC_GetPCLK1Freq();\n      pclkRatio = (ulonglong)(uint)((int)sysclkFreq * 0x19) / (ulonglong)(uint)(divider << 2);\n      pclk1Freq = HAL_RCC_GetPCLK1Freq\n                        ((int)sysclkFreq,(int)((ulonglong)sysclkFreq >> 0x20),(int)(pclkRatio * 0x51eb851f));\n      pclk2Freq = HAL_RCC_GetPCLK1Freq();\n      *(uint *)(baseAddress + 8) =\n           (int)(pclkRatio / 100) << 4 |\n           (((uint)(pclk1Freq * 0x19) / (uint)(divider << 2) +\n            (int)(((ulonglong)(uint)(pclk2Freq * 0x19) / (ulonglong)(uint)(divider << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    sysclkFreq = HAL_RCC_GetPCLK2Freq();\n    pclkRatio = (ulonglong)(uint)((int)sysclkFreq * 0x19) / (ulonglong)(uint)(divider << 2);\n    pclk1Freq = HAL_RCC_GetPCLK2Freq\n                      ((int)sysclkFreq,(int)((ulonglong)sysclkFreq >> 0x20),(int)(pclkRatio * 0x51eb851f));\n    pclk2Freq = HAL_RCC_GetPCLK2Freq();\n    *(uint *)(baseAddress + 8) =\n         (int)(pclkRatio / 100) << 4 |\n         (((uint)(pclk1Freq * 0x19) / (uint)(divider << 2) +\n          (int)(((ulonglong)(uint)(pclk2Freq * 0x19) / (ulonglong)(uint)(divider << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((baseAddress != 0x40011000) && (baseAddress != 0x40011400)) {\n      sysclkFreq = HAL_RCC_GetPCLK1Freq();\n      pclkRatio = (ulonglong)(uint)((int)sysclkFreq * 0x19) / (ulonglong)(uint)(divider << 1);\n      pclk1Freq = HAL_RCC_GetPCLK1Freq\n                        ((int)sysclkFreq,(int)((ulonglong)sysclkFreq >> 0x20),(int)(pclkRatio * 0x51eb851f));\n      pclk2Freq = HAL_RCC_GetPCLK1Freq();\n      *(uint *)(baseAddress + 8) =\n           (int)(pclkRatio / 100) << 4 |\n           (((uint)(pclk1Freq * 0x19) / (uint)(divider << 1) +\n            (int)(((ulonglong)(uint)(pclk2Freq * 0x19) / (ulonglong)(uint)(divider << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    sysclkFreq = HAL_RCC_GetPCLK2Freq();\n    pclkRatio = (ulonglong)(uint)((int)sysclkFreq * 0x19) / (ulonglong)(uint)(divider << 1);\n    pclk1Freq = HAL_RCC_GetPCLK2Freq\n                      ((int)sysclkFreq,(int)((ulonglong)sysclkFreq >> 0x20),(int)(pclkRatio * 0x51eb851f));\n    pclk2Freq = HAL_RCC_GetPCLK2Freq();\n    *(uint *)(baseAddress + 8) =\n         (int)(pclkRatio / 100) << 4 |\n         (((uint)(pclk1Freq * 0x19) / (uint)(divider << 1) +\n          (int)(((ulonglong)(uint)(pclk2Freq * 0x19) / (ulonglong)(uint)(divider << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_divider_08007f54",
                "param_1": "baseAddress",
                "param_2": "divider",
                "uVar1": "pclkRatio",
                "iVar2": "pclk1Freq",
                "iVar3": "pclk2Freq",
                "uVar4": "sysclkFreq"
            },
            "calling": [
                "usart_init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_usart_08008190",
            "code": "\n\n\nvoid initializeUSART_08008190(void)\n\n{\n  enableClock(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  setBaudRate(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_usart_08008190",
                "enable_usart_clock": "enableClock",
                "set_baud_rate": "setBaudRate"
            },
            "calling": [
                "main"
            ],
            "called": [
                "enable_usart_clock",
                "set_baud_rate"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "send_character_08008250",
            "code": "\nvoid sendCharacter_08008250(undefined character)\n\n{\n  transmit(character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "send_character_08008250",
                "param_1": "character",
                "usart_putc": "transmit"
            },
            "calling": [
                "print_uint32_base10",
                "printPgmString",
                "printString",
                "print_base2",
                "printInteger",
                "printFloat"
            ],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "send_character_0800826a",
            "code": "\nvoid4 sendCharacter_0800826a(void character)\n\n{\n  sendToUSART(character);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "send_character_0800826a",
                "param_1": "character",
                "usart_putc": "sendToUSART",
                "undefined": "void"
            },
            "calling": [],
            "called": [
                "usart_putc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "receive_and_handle_serial_data_08008286",
            "code": "\nundefined receiveAndHandleSerialData_08008286(void)\n\n{\n  undefined receivedData;\n  int isDataAvailable;\n  \n  isDataAvailable = usart_tstc();\n  if (isDataAvailable != 0) {\n    receivedData = usart_getc();\n    isDataAvailable = serial_rx_hook(receivedData);\n    if (isDataAvailable == 0) {\n      return receivedData;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "receive_and_handle_serial_data_08008286",
                "uVar1": "receivedData",
                "iVar2": "isDataAvailable"
            },
            "calling": [
                "protocol_process"
            ],
            "called": [
                "usart_tstc",
                "serial_rx_hook",
                "usart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "grbl_main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "calculate_unsigned_product_080082d0",
            "code": "\nulonglong calculate_unsigned_product_080082d0(uint input_x,uint input_y,uint input_z,uint input_a)\n\n{\n  int shift_count1;\n  byte c1_overflow;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int shift_count2;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool check1;\n  bool check2;\n  bool bVar15;\n  \n  temp4 = input_a ^ 0x80000000;\n  temp6 = input_y << 1;\n  input_a = input_a << 1;\n  check1 = ((input_y ^ temp4) & 0x7fffffff) == 0;\n  check2 = check1 && input_x == input_z;\n  if (!check1 || input_x != input_z) {\n    check2 = (temp6 | input_x) == 0;\n  }\n  if (!check2) {\n    check2 = (input_a | input_z) == 0;\n  }\n  shift_count2 = (int)temp6 >> 0x15;\n  if (!check2) {\n    check2 = shift_count2 == -1;\n  }\n  shift_count1 = (int)input_a >> 0x15;\n  if (!check2) {\n    check2 = shift_count1 == -1;\n  }\n  if (check2) {\n    if (shift_count2 == -1 || shift_count1 == -1) {\n      temp6 = temp4;\n      temp8 = input_z;\n      if (shift_count2 == -1) {\n        temp6 = input_y;\n        temp8 = input_x;\n      }\n      if (shift_count2 != -1 || shift_count1 != -1) {\n        input_z = temp8;\n        temp4 = temp6;\n      }\n      check2 = (temp8 | temp6 << 0xc) == 0;\n      if (check2) {\n        check2 = (input_z | temp4 << 0xc) == 0;\n      }\n      if (check2) {\n        check2 = temp6 == temp4;\n      }\n      if (!check2) {\n        temp6 = temp6 | 0x80000;\n      }\n      return CONCAT44(temp6,temp8);\n    }\n    if (((input_y ^ temp4) & 0x7fffffff) != 0 || input_x != input_z) {\n      if ((temp6 | input_x) == 0) {\n        input_x = input_z;\n        input_y = temp4;\n      }\n      return CONCAT44(input_y,input_x);\n    }\n    if (input_y != temp4) {\n      return 0;\n    }\n    if (temp6 >> 0x15 == 0) {\n      check2 = (input_x & 0x80000000) != 0;\n      temp4 = input_y * 2 + (uint)check2;\n      if (CARRY4(input_y,input_y) || CARRY4(input_y * 2,(uint)check2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input_x << 1);\n    }\n    if (temp6 < 0xffc00000) {\n      return CONCAT44(input_y + 0x100000,input_x);\n    }\n    input_y = input_y & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input_y | 0x7ff00000) << 0x20;\n  }\n  temp6 = temp6 >> 0x15;\n  input_a = input_a >> 0x15;\n  temp8 = input_a - temp6;\n  check2 = temp8 != 0;\n  if (input_a < temp6) {\n    temp8 = -temp8;\n  }\n  temp7 = input_x;\n  temp5 = input_y;\n  if (check2 && temp6 <= input_a) {\n    temp6 = temp6 + temp8;\n    temp7 = input_z;\n    temp5 = temp4;\n    input_z = input_x;\n    temp4 = input_y;\n  }\n  if (0x36 < temp8) {\n    return CONCAT44(temp5,temp7);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    check2 = temp7 != 0;\n    temp7 = -temp7;\n    temp2 = -temp2 - (uint)check2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    check2 = input_z != 0;\n    input_z = -input_z;\n    temp5 = -temp5 - (uint)check2;\n  }\n  if (temp6 == temp8) {\n    temp5 = temp5 ^ 0x100000;\n    if (temp6 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp6 = 1;\n    }\n    else {\n      temp8 = temp8 - 1;\n    }\n  }\n  temp4 = -temp8 + 0x20;\n  if ((int)temp8 < 0x21) {\n    temp9 = input_z << (temp4 & 0xff);\n    input_z = input_z >> (temp8 & 0xff);\n    temp1 = temp7 + input_z;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp7,input_z) + ((int)temp5 >> (temp8 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp9 = temp5 << (-temp8 + 0x40 & 0xff);\n    if (input_z != 0) {\n      temp9 = temp9 | 2;\n    }\n    temp5 = (int)temp5 >> (temp8 - 0x20 & 0xff);\n    temp4 = temp7 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp7,temp5);\n  }\n  input_y = temp2 & 0x80000000;\n  temp8 = temp2;\n  if ((int)temp2 < 0) {\n    check2 = temp9 == 0;\n    temp9 = -temp9;\n    temp8 = -temp4;\n    temp4 = -(uint)!check2 - temp4;\n    temp8 = -(uint)(check2 <= temp8) - temp2;\n  }\n  if (0xfffff < temp8) {\n    temp7 = temp6 - 1;\n    if (0x1fffff < temp8) {\n      temp7 = temp8 & 1;\n      temp8 = temp8 >> 1;\n      c1_overflow = (byte)temp4;\n      temp4 = (uint)(temp7 != 0) << 0x1f | temp4 >> 1;\n      temp9 = (uint)(c1_overflow & 1) << 0x1f | temp9 >> 1;\n      temp7 = temp6;\n      if (0xffbfffff < temp6 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    check2 = 0x7fffffff < temp9;\n    if (temp9 == 0x80000000) {\n      check2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp8 + temp7 * 0x100000 + (uint)CARRY4(temp4,(uint)check2) | input_y,\n                    temp4 + check2);\n  }\n  check1 = (temp9 & 0x80000000) != 0;\n  temp9 = temp9 << 1;\n  temp7 = temp4 * 2;\n  check2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)check1;\n  temp8 = temp8 * 2 + (uint)(check2 || CARRY4(temp7,(uint)check1));\n  temp7 = temp6 - 2;\n  if (temp6 - 1 != 0 && 0xfffff < temp8) goto LAB_080083e0;\n  temp5 = temp4;\n  temp6 = temp8;\n  if (temp8 == 0) {\n    temp5 = 0;\n    temp6 = temp4;\n  }\n  shift_count2 = LZCOUNT(temp6);\n  if (temp8 == 0) {\n    shift_count2 = shift_count2 + 0x20;\n  }\n  temp8 = shift_count2 - 0xb;\n  bVar15 = SBORROW4(temp8,0x20);\n  temp4 = shift_count2 - 0x2b;\n  check2 = (int)temp4 < 0;\n  check1 = temp4 == 0;\n  if ((int)temp8 < 0x20) {\n    bVar15 = SCARRY4(temp4,0xc);\n    shift_count2 = shift_count2 + -0x1f;\n    check2 = shift_count2 < 0;\n    check1 = shift_count2 == 0;\n    temp4 = temp8;\n    if (!check1 && check2 == bVar15) {\n      temp5 = temp6 << (temp8 & 0xff);\n      temp6 = temp6 >> (0xcU - shift_count2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (check1 || check2 != bVar15) {\n    temp9 = 0x20 - temp4;\n  }\n  temp6 = temp6 << (temp4 & 0xff);\n  if (check1 || check2 != bVar15) {\n    temp6 = temp6 | temp5 >> (temp9 & 0xff);\n  }\n  if (check1 || check2 != bVar15) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp8 <= (int)temp7) {\n    return CONCAT44(temp6 + (temp7 - temp8) * 0x100000 | input_y,temp5);\n  }\n  temp4 = ~(temp7 - temp8);\n  if ((int)temp4 < 0x1f) {\n    shift_count2 = temp4 - 0x13;\n    if (shift_count2 != 0 && shift_count2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - shift_count2) & 0xff) | temp6 << (0xcU - shift_count2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input_y | temp6 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | temp6 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,temp6 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "calculate_unsigned_product_080082d0",
                "param_1": "input_x",
                "param_2": "input_y",
                "param_3": "input_z",
                "param_4": "input_a",
                "iVar1": "shift_count1",
                "bVar2": "c1_overflow",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "shift_count2",
                "uVar9": "temp6",
                "uVar10": "temp7",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "bVar13": "check1",
                "bVar14": "check2"
            },
            "calling": [
                "mc_arc",
                "__ieee754_rem_pio2",
                "sin",
                "__ieee754_sqrt",
                "atan",
                "__kernel_rem_pio2",
                "plan_buffer_line",
                "report_realtime_status",
                "__kernel_sin",
                "cos",
                "__kernel_cos",
                "__ieee754_hypot",
                "__ieee754_atan2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_unsigned_integer_080082d4",
            "code": "\nulonglong calculate_unsigned_integer_080082d4(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int shift1;\n  byte carry1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_num2;\n  uint shifted_num4;\n  uint shifted_temp2;\n  uint shifted_temp4;\n  uint temp5;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  shifted_num2 = num2 << 1;\n  shifted_temp2 = num4 << 1;\n  flag1 = ((num2 ^ num4) & 0x7fffffff) == 0;\n  flag2 = flag1 && num1 == num3;\n  if (!flag1 || num1 != num3) {\n    flag2 = (shifted_num2 | num1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (shifted_temp2 | num3) == 0;\n  }\n  shift2 = (int)shifted_num2 >> 0x15;\n  if (!flag2) {\n    flag2 = shift2 == -1;\n  }\n  shift1 = (int)shifted_temp2 >> 0x15;\n  if (!flag2) {\n    flag2 = shift1 == -1;\n  }\n  if (flag2) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_temp2 = num4;\n      shifted_num2 = num3;\n      if (shift2 == -1) {\n        shifted_temp2 = num2;\n        shifted_num2 = num1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        num3 = shifted_num2;\n        num4 = shifted_temp2;\n      }\n      flag2 = (shifted_num2 | shifted_temp2 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (num3 | num4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = shifted_temp2 == num4;\n      }\n      if (!flag2) {\n        shifted_temp2 = shifted_temp2 | 0x80000;\n      }\n      return CONCAT44(shifted_temp2,shifted_num2);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((shifted_num2 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (shifted_num2 >> 0x15 == 0) {\n      flag2 = (num1 & 0x80000000) != 0;\n      shifted_temp2 = num2 * 2 + (uint)flag2;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)flag2)) {\n        shifted_temp2 = shifted_temp2 | 0x80000000;\n      }\n      return CONCAT44(shifted_temp2,num1 << 1);\n    }\n    if (shifted_num2 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  shifted_num2 = shifted_num2 >> 0x15;\n  shifted_temp2 = shifted_temp2 >> 0x15;\n  shifted_temp4 = shifted_temp2 - shifted_num2;\n  flag2 = shifted_temp4 != 0;\n  if (shifted_temp2 < shifted_num2) {\n    shifted_temp4 = -shifted_temp4;\n  }\n  shifted_num4 = num1;\n  temp3 = num2;\n  if (flag2 && shifted_num2 <= shifted_temp2) {\n    shifted_num2 = shifted_num2 + shifted_temp4;\n    shifted_num4 = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < shifted_temp4) {\n    return CONCAT44(temp3,shifted_num4);\n  }\n  shifted_temp2 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    flag2 = shifted_num4 != 0;\n    shifted_num4 = -shifted_num4;\n    shifted_temp2 = -shifted_temp2 - (uint)flag2;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    flag2 = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)flag2;\n  }\n  if (shifted_num2 == shifted_temp4) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_num2 == 0) {\n      shifted_temp2 = shifted_temp2 ^ 0x100000;\n      shifted_num2 = 1;\n    }\n    else {\n      shifted_temp4 = shifted_temp4 - 1;\n    }\n  }\n  temp6 = -shifted_temp4 + 0x20;\n  if ((int)shifted_temp4 < 0x21) {\n    temp5 = num3 << (temp6 & 0xff);\n    num3 = num3 >> (shifted_temp4 & 0xff);\n    temp1 = shifted_num4 + num3;\n    temp2 = temp3 << (temp6 & 0xff);\n    temp6 = temp1 + temp2;\n    shifted_temp2 = shifted_temp2 + CARRY4(shifted_num4,num3) + ((int)temp3 >> (shifted_temp4 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp5 = temp3 << (-shifted_temp4 + 0x40 & 0xff);\n    if (num3 != 0) {\n      temp5 = temp5 | 2;\n    }\n    temp3 = (int)temp3 >> (shifted_temp4 - 0x20 & 0xff);\n    temp6 = shifted_num4 + temp3;\n    shifted_temp2 = shifted_temp2 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_num4,temp3);\n  }\n  num2 = shifted_temp2 & 0x80000000;\n  shifted_temp4 = shifted_temp2;\n  if ((int)shifted_temp2 < 0) {\n    flag2 = temp5 == 0;\n    temp5 = -temp5;\n    shifted_temp4 = -temp6;\n    temp6 = -(uint)!flag2 - temp6;\n    shifted_temp4 = -(uint)(flag2 <= shifted_temp4) - shifted_temp2;\n  }\n  if (0xfffff < shifted_temp4) {\n    shifted_num4 = shifted_num2 - 1;\n    if (0x1fffff < shifted_temp4) {\n      shifted_temp2 = shifted_temp4 & 1;\n      shifted_temp4 = shifted_temp4 >> 1;\n      carry1 = (byte)temp6;\n      temp6 = (uint)(shifted_temp2 != 0) << 0x1f | temp6 >> 1;\n      temp5 = (uint)(carry1 & 1) << 0x1f | temp5 >> 1;\n      shifted_num4 = shifted_num2;\n      if (0xffbfffff < shifted_num2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag2 = 0x7fffffff < temp5;\n    if (temp5 == 0x80000000) {\n      flag2 = (temp6 & 1) != 0;\n    }\n    return CONCAT44(shifted_temp4 + shifted_num4 * 0x100000 + (uint)CARRY4(temp6,(uint)flag2) | num2,\n                    temp6 + flag2);\n  }\n  flag1 = (temp5 & 0x80000000) != 0;\n  temp5 = temp5 << 1;\n  shifted_num4 = temp6 * 2;\n  flag2 = CARRY4(temp6,temp6);\n  temp6 = temp6 * 2 + (uint)flag1;\n  shifted_temp4 = shifted_temp4 * 2 + (uint)(flag2 || CARRY4(shifted_num4,(uint)flag1));\n  shifted_num4 = shifted_num2 - 2;\n  if (shifted_num2 - 1 != 0 && 0xfffff < shifted_temp4) goto LAB_080083e0;\n  temp3 = temp6;\n  shifted_num2 = shifted_temp4;\n  if (shifted_temp4 == 0) {\n    temp3 = 0;\n    shifted_num2 = temp6;\n  }\n  shift2 = LZCOUNT(shifted_num2);\n  if (shifted_temp4 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp6 = shift2 - 0xb;\n  flag3 = SBORROW4(temp6,0x20);\n  shifted_temp4 = shift2 - 0x2b;\n  flag2 = (int)shifted_temp4 < 0;\n  flag1 = shifted_temp4 == 0;\n  if ((int)temp6 < 0x20) {\n    flag3 = SCARRY4(shifted_temp4,0xc);\n    shift2 = shift2 + -0x1f;\n    flag2 = shift2 < 0;\n    flag1 = shift2 == 0;\n    shifted_temp4 = temp6;\n    if (!flag1 && flag2 == flag3) {\n      temp3 = shifted_num2 << (temp6 & 0xff);\n      shifted_num2 = shifted_num2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = 0x20 - shifted_temp4;\n  }\n  shifted_num2 = shifted_num2 << (shifted_temp4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    shifted_num2 = shifted_num2 | temp3 >> (temp5 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp3 = temp3 << (shifted_temp4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp6 <= (int)shifted_num4) {\n    return CONCAT44(shifted_num2 + (shifted_num4 - temp6) * 0x100000 | num2,temp3);\n  }\n  shifted_temp4 = ~(shifted_num4 - temp6);\n  if ((int)shifted_temp4 < 0x1f) {\n    shift2 = shifted_temp4 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(shifted_temp4 - 0x1f,0xc)) {\n      return CONCAT44(shifted_temp2,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_num2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_temp4 = shifted_temp4 + 1;\n    return CONCAT44(num2 | shifted_num2 >> (shifted_temp4 & 0xff),\n                    temp3 >> (shifted_temp4 & 0xff) | shifted_num2 << (0x20 - shifted_temp4 & 0xff));\n  }\n  return CONCAT44(shifted_temp2,shifted_num2 >> (shifted_temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_unsigned_integer_080082d4",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "shift1",
                "bVar2": "carry1",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "shift2",
                "uVar7": "shifted_num2",
                "uVar8": "shifted_num4",
                "uVar9": "shifted_temp2",
                "uVar10": "shifted_temp4",
                "uVar11": "temp5",
                "uVar12": "temp6",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "mc_arc",
                "__ieee754_rem_pio2",
                "__ieee754_sqrt",
                "trunc",
                "atan",
                "floor",
                "__kernel_rem_pio2",
                "scalbn",
                "__kernel_sin",
                "ceil",
                "__kernel_cos",
                "__ieee754_hypot",
                "__ieee754_atan2",
                "round"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "reverse_bits_and_shift_0800854c",
            "code": "\nulonglong reverseBitsAndShift_0800854c(uint input)\n\n{\n  uint resultHigh;\n  uint shiftValue;\n  int bitCount;\n  uint adjustedBitCount;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isBorrowed;\n  \n  if (input == 0) {\n    return 0;\n  }\n  resultHigh = 0;\n  bitCount = LZCOUNT(input);\n  adjustedBitCount = bitCount + 0x15;\n  isBorrowed = SBORROW4(adjustedBitCount,0x20);\n  shiftValue = bitCount - 0xb;\n  isNegative = (int)shiftValue < 0;\n  isZero = shiftValue == 0;\n  if (adjustedBitCount < 0x20) {\n    isBorrowed = SCARRY4(shiftValue,0xc);\n    isNegative = false;\n    isZero = bitCount + 1 == 0;\n    shiftValue = adjustedBitCount;\n    if (!isZero && isBorrowed == false) {\n      resultHigh = input << adjustedBitCount;\n      input = input >> (0xcU - (bitCount + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != isBorrowed) {\n    remainingBits = 0x20 - shiftValue;\n  }\n  input = input << (shiftValue & 0xff);\n  if (isZero || isNegative != isBorrowed) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isBorrowed) {\n    resultHigh = 0 << (shiftValue & 0xff);\n  }\nLAB_08008458:\n  if (adjustedBitCount < 0x433) {\n    return CONCAT44(input + (0x432 - adjustedBitCount) * 0x100000,resultHigh);\n  }\n  shiftValue = ~(0x432 - adjustedBitCount);\n  if (0x1e < (int)shiftValue) {\n    return (ulonglong)(input >> (shiftValue - 0x1f & 0xff));\n  }\n  bitCount = shiftValue - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftValue - 0x1f,0xc)) {\n    shiftValue = shiftValue + 1;\n    return CONCAT44(input >> (shiftValue & 0xff),\n                    resultHigh >> (shiftValue & 0xff) | input << (0x20 - shiftValue & 0xff));\n  }\n  return (ulonglong)(resultHigh >> (0x20 - (0xcU - bitCount) & 0xff) | input << (0xcU - bitCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "reverse_bits_and_shift_0800854c",
                "param_1": "input",
                "uVar1": "resultHigh",
                "uVar2": "shiftValue",
                "iVar3": "bitCount",
                "uVar4": "adjustedBitCount",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isBorrowed"
            },
            "calling": [
                "homing_cycle"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "bitwise_shift_combine_0800856c",
            "code": "\nulonglong bitwise_shift_combine_0800856c(uint input)\n\n{\n  uint shifted_input;\n  uint abs_input;\n  uint shift_count;\n  int leading_zeros;\n  uint shift_total;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shifted_input = 0;\n  leading_zeros = count_leading_zeros(abs_input);\n  shift_total = leading_zeros + 0x15;\n  overflow = subtraction_borrow(shift_total,0x20);\n  shift_count = leading_zeros - 0xb;\n  is_negative = (int)shift_count < 0;\n  is_zero = shift_count == 0;\n  if (shift_total < 0x20) {\n    overflow = subtraction_carry(shift_count,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_count = shift_total;\n    if (!is_zero && overflow == false) {\n      shifted_input = abs_input << shift_total;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_zero || is_negative != overflow) {\n    remaining_bits = 0x20 - shift_count;\n  }\n  abs_input = abs_input << (shift_count & 0xff);\n  if (is_zero || is_negative != overflow) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != overflow) {\n    shifted_input = 0 << (shift_count & 0xff);\n  }\nLAB_08008458:\n  if (shift_total < 0x433) {\n    return CONCAT44(abs_input + (0x432 - shift_total) * 0x100000 | sign_bit,shifted_input);\n  }\n  shift_count = ~(0x432 - shift_total);\n  if (0x1e < (int)shift_count) {\n    return CONCAT44(input,abs_input >> (shift_count - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_count - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != subtraction_carry(shift_count - 0x1f,0xc)) {\n    shift_count = shift_count + 1;\n    return CONCAT44(sign_bit | abs_input >> (shift_count & 0xff),\n                    shifted_input >> (shift_count & 0xff) | abs_input << (0x20 - shift_count & 0xff));\n  }\n  return CONCAT44(input,shifted_input >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "bitwise_shift_combine_0800856c",
                "param_1": "input",
                "uVar1": "shifted_input",
                "uVar2": "abs_input",
                "uVar3": "shift_count",
                "iVar4": "leading_zeros",
                "uVar5": "shift_total",
                "uVar6": "sign_bit",
                "in_r12": "remaining_bits",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "overflow",
                "LZCOUNT": "count_leading_zeros",
                "SCARRY4": "subtraction_carry",
                "SBORROW4": "subtraction_borrow"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "reverse_bits_08008590",
            "code": "\nulonglong reverseBits_08008590(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint bitMask;\n  uint temp1;\n  uint result;\n  uint shifted;\n  uint temp2;\n  int bitCount;\n  uint remaining;\n  uint constant;\n  bool isZero;\n  bool isFF000000;\n  bool isNegative;\n  \n  temp2 = input << 1;\n  isFF000000 = temp2 == 0;\n  bitMask = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted = (uint)((int)temp2 >> 3) >> 1;\n  result = bitMask | shifted;\n  input = input << 0x1d;\n  if (!isFF000000) {\n    param4 = temp2 & 0xff000000;\n    isFF000000 = param4 == 0;\n  }\n  if (!isFF000000) {\n    isFF000000 = param4 == 0xff000000;\n  }\n  if (!isFF000000) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((temp2 & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  temp1 = input;\n  temp2 = shifted;\n  if (shifted == 0) {\n    temp1 = 0;\n    temp2 = input;\n  }\n  bitCount = LZCOUNT(temp2);\n  if (shifted == 0) {\n    bitCount = bitCount + 0x20;\n  }\n  remaining = bitCount - 0xb;\n  isNegative = SBORROW4(remaining,0x20);\n  shifted = bitCount - 0x2b;\n  isFF000000 = (int)shifted < 0;\n  isZero = shifted == 0;\n  if ((int)remaining < 0x20) {\n    isNegative = SCARRY4(shifted,0xc);\n    bitCount = bitCount + -0x1f;\n    isFF000000 = bitCount < 0;\n    isZero = bitCount == 0;\n    shifted = remaining;\n    if (!isZero && isFF000000 == isNegative) {\n      temp1 = temp2 << (remaining & 0xff);\n      temp2 = temp2 >> (0xcU - bitCount & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isFF000000 != isNegative) {\n    constant = 0x20 - shifted;\n  }\n  temp2 = temp2 << (shifted & 0xff);\n  if (isZero || isFF000000 != isNegative) {\n    temp2 = temp2 | temp1 >> (constant & 0xff);\n  }\n  if (isZero || isFF000000 != isNegative) {\n    temp1 = temp1 << (shifted & 0xff);\n  }\nLAB_08008458:\n  if ((int)remaining < 0x381) {\n    return CONCAT44(temp2 + (0x380 - remaining) * 0x100000 | bitMask,temp1);\n  }\n  shifted = ~(0x380 - remaining);\n  if (0x1e < (int)shifted) {\n    return CONCAT44(result,temp2 >> (shifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bitCount = shifted - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shifted - 0x1f,0xc)) {\n    shifted = shifted + 1;\n    return CONCAT44(bitMask | temp2 >> (shifted & 0xff),\n                    temp1 >> (shifted & 0xff) | temp2 << (0x20 - shifted & 0xff));\n  }\n  return CONCAT44(result,temp1 >> (0x20 - (0xcU - bitCount) & 0xff) | temp2 << (0xcU - bitCount & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "reverse_bits_08008590",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bitMask",
                "uVar2": "temp1",
                "uVar3": "result",
                "uVar4": "shifted",
                "uVar5": "temp2",
                "iVar6": "bitCount",
                "uVar7": "remaining",
                "in_r12": "constant",
                "bVar8": "isZero",
                "bVar9": "isFF000000",
                "bVar10": "isNegative"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "protocol_execute_line",
                "gc_execute_line",
                "calculate_trapezoid_for_block",
                "max_allowable_speed",
                "homing_cycle",
                "mc_dwell",
                "plan_buffer_line",
                "report_realtime_status",
                "report_gcode_parameters",
                "to_millimeters",
                "read_float",
                "report_gcode_modes"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_result_08008640",
            "code": "\nulonglong calculate_result_08008640(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  ulonglong result_1;\n  longlong result_2;\n  uint result_3;\n  uint result_4;\n  int result_5;\n  uint result_6;\n  uint result_7;\n  uint result_8;\n  uint result_9;\n  bool boolean_1;\n  bool boolean_2;\n  bool boolean_3;\n  ulonglong result_10;\n  \n  result_10 = CONCAT44(input_param_2,input_param_1);\n  result_8 = 0x7ff;\n  result_4 = input_param_2 >> 0x14 & 0x7ff;\n  boolean_1 = result_4 == 0;\n  if (!boolean_1) {\n    result_7 = input_param_4 >> 0x14 & 0x7ff;\n    boolean_1 = result_7 == 0;\n  }\n  if (!boolean_1) {\n    boolean_1 = result_4 == 0x7ff;\n  }\n  if (!boolean_1) {\n    boolean_1 = result_7 == 0x7ff;\n  }\n  if (boolean_1) {\n    result_10 = calculate_bitwise_xor_0800881c();\n  }\n  result_3 = (uint)(result_10 >> 0x20);\n  result_5 = result_4 + result_7;\n  result_4 = result_3 ^ input_param_4;\n  result_3 = result_3 & ~(result_8 << 0x15);\n  input_param_4 = input_param_4 & ~(result_8 << 0x15);\n  boolean_1 = ((uint)result_10 | result_3 << 0xc) == 0;\n  if (!boolean_1) {\n    boolean_1 = (input_param_3 | input_param_4 << 0xc) == 0;\n  }\n  result_3 = result_3 | 0x100000;\n  input_param_4 = input_param_4 | 0x100000;\n  if (boolean_1) {\n    input_param_3 = (uint)result_10 | input_param_3;\n    input_param_4 = (result_4 & 0x80000000 | result_3) ^ input_param_4;\n    result_4 = result_8 >> 1;\n    boolean_3 = SBORROW4(result_5,result_4);\n    result_6 = result_5 - result_4;\n    boolean_1 = result_6 == 0;\n    result_3 = result_6;\n    if (!boolean_1 && (int)result_4 <= result_5) {\n      boolean_3 = SBORROW4(result_8,result_6);\n      result_3 = result_8 - result_6;\n      boolean_1 = result_8 == result_6;\n    }\n    if (!boolean_1 && (int)result_3 < 0 == boolean_3) {\n      input_param_4 = input_param_4 | result_6 * 0x100000;\n    }\n    if (!boolean_1 && (int)result_3 < 0 == boolean_3) {\n      return CONCAT44(input_param_4,input_param_3);\n    }\n    input_param_4 = input_param_4 | 0x100000;\n    result_8 = 0;\n    boolean_3 = SBORROW4(result_6,1);\n    result_6 = result_6 - 1;\n    boolean_1 = result_6 == 0;\n    result_4 = result_6;\n  }\n  else {\n    result_1 = (result_10 & 0xffffffff) * (ulonglong)input_param_3;\n    result_10 = (result_10 & 0xffffffff) * (ulonglong)input_param_4 +\n             (ulonglong)result_3 * (ulonglong)input_param_3 + (result_1 >> 0x20);\n    result_9 = (uint)result_10;\n    result_2 = (ulonglong)result_3 * (ulonglong)input_param_4 + (result_10 >> 0x20);\n    result_8 = (uint)result_2;\n    result_3 = (uint)((ulonglong)result_2 >> 0x20);\n    if ((int)result_1 != 0) {\n      result_9 = result_9 | 1;\n    }\n    result_6 = (result_5 + -0x3ff) - (uint)(result_3 < 0x200);\n    if (result_3 < 0x200) {\n      boolean_1 = (result_9 & 0x80000000) != 0;\n      result_9 = result_9 << 1;\n      result_2 = CONCAT44(result_3 * 2 + (uint)(CARRY4(result_8,result_8) || CARRY4(result_8 * 2,(uint)boolean_1)),\n                       result_8 * 2 + (uint)boolean_1);\n    }\n    input_param_4 = result_4 & 0x80000000 | (int)((ulonglong)result_2 >> 0x20) << 0xb | (uint)result_2 >> 0x15;\n    input_param_3 = (uint)result_2 << 0xb | result_9 >> 0x15;\n    result_8 = result_9 * 0x800;\n    boolean_2 = 0xfc < result_6;\n    boolean_3 = SBORROW4(result_6,0xfd);\n    result_3 = result_6 - 0xfd;\n    boolean_1 = result_3 == 0;\n    result_4 = result_3;\n    if (boolean_2 && !boolean_1) {\n      boolean_2 = 0x6ff < result_3;\n      boolean_3 = SBORROW4(result_3,0x700);\n      result_4 = result_6 - 0x7fd;\n      boolean_1 = result_3 == 0x700;\n    }\n    if (!boolean_2 || boolean_1) {\n      boolean_1 = 0x7fffffff < result_8;\n      if (result_8 == 0x80000000) {\n        boolean_1 = (result_9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param_4 + result_6 * 0x100000 + (uint)CARRY4(input_param_3,(uint)boolean_1),input_param_3 + boolean_1\n                     );\n    }\n  }\n  if (!boolean_1 && (int)result_4 < 0 == boolean_3) {\n    return (ulonglong)(input_param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  boolean_2 = SCARRY4(result_6,0x36);\n  boolean_1 = (int)(result_6 + 0x36) < 0;\n  boolean_3 = result_6 == 0xffffffca;\n  if (boolean_3 || boolean_1 != boolean_2) {\n    input_param_3 = 0;\n  }\n  if (boolean_3 || boolean_1 != boolean_2) {\n    input_param_4 = input_param_4 & 0x80000000;\n  }\n  if (boolean_3 || boolean_1 != boolean_2) {\n    return CONCAT44(input_param_4,input_param_3);\n  }\n  result_4 = -result_6;\n  result_3 = result_4 - 0x20;\n  if (0x1f < (int)result_4) {\n    result_6 = input_param_3 >> (result_3 & 0xff) | input_param_4 << (0x20 - result_3 & 0xff);\n    result_4 = (input_param_4 >> (result_3 & 0xff) & ~((input_param_4 & 0x80000000) >> (result_3 & 0xff))) -\n            ((int)result_6 >> 0x1f);\n    if ((result_8 | input_param_3 << (0x20 - result_3 & 0xff) | result_6 << 1) == 0) {\n      result_4 = result_4 & ~(result_6 >> 0x1f);\n    }\n    return CONCAT44(input_param_4,result_4) & 0x80000000ffffffff;\n  }\n  result_5 = result_4 - 0x14;\n  if (result_5 == 0 || result_5 < 0 != SCARRY4(result_3,0xc)) {\n    result_9 = input_param_3 << (result_6 + 0x20 & 0xff);\n    result_3 = input_param_3 >> (result_4 & 0xff) | input_param_4 << (result_6 + 0x20 & 0xff);\n    result_6 = result_3 + -((int)result_9 >> 0x1f);\n    if ((result_8 | result_9 << 1) == 0) {\n      result_6 = result_6 & ~(result_9 >> 0x1f);\n    }\n    return CONCAT44((input_param_4 & 0x80000000) +\n                    ((input_param_4 & 0x7fffffff) >> (result_4 & 0xff)) +\n                    (uint)CARRY4(result_3,-((int)result_9 >> 0x1f)),result_6);\n  }\n  result_4 = 0xc - result_5;\n  result_6 = input_param_3 << (result_4 & 0xff);\n  result_4 = input_param_3 >> (0x20 - result_4 & 0xff) | input_param_4 << (result_4 & 0xff);\n  result_3 = result_4 + -((int)result_6 >> 0x1f);\n  if ((result_8 | result_6 << 1) == 0) {\n    result_3 = result_3 & ~(result_6 >> 0x1f);\n  }\n  return CONCAT44((input_param_4 & 0x80000000) + (uint)CARRY4(result_4,-((int)result_6 >> 0x1f)),result_3);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_result_08008640",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result_1",
                "lVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4",
                "iVar5": "result_5",
                "uVar6": "result_6",
                "unaff_r5": "result_7",
                "uVar7": "result_8",
                "uVar8": "result_9",
                "bVar9": "boolean_1",
                "bVar10": "boolean_2",
                "bVar11": "boolean_3",
                "uVar12": "result_10"
            },
            "calling": [
                "mc_arc",
                "__ieee754_rem_pio2",
                "__ieee754_sqrt",
                "calculate_trapezoid_for_block",
                "atan",
                "homing_cycle",
                "__kernel_rem_pio2",
                "scalbn",
                "plan_buffer_line",
                "report_realtime_status",
                "__kernel_sin",
                "report_gcode_parameters",
                "__kernel_cos",
                "to_millimeters",
                "__ieee754_hypot",
                "read_float",
                "report_gcode_modes"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_bitwise_xor_0800881c",
            "code": "\nulonglong calculate_bitwise_xor_0800881c(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  uint bit_a;\n  uint bit_b;\n  uint bit_c;\n  uint bit_d;\n  uint mask;\n  bool condition;\n  \n  bit_c = mask & input_d >> 0x14;\n  if (bit_b != mask && bit_c != mask) {\n    condition = (input_a | input_b << 1) == 0;\n    if (!condition) {\n      condition = (input_c | input_d << 1) == 0;\n    }\n    if (condition) {\n      return (ulonglong)((input_b ^ input_d) & 0x80000000) << 0x20;\n    }\n    if (bit_b == 0) {\n      bit_d = input_b & 0x80000000;\n      do {\n        bit_a = input_a & 0x80000000;\n        input_a = input_a << 1;\n        input_b = input_b * 2 + (uint)(bit_a != 0);\n      } while ((input_b & 0x100000) == 0);\n      input_b = input_b | bit_d;\n      if (bit_c != 0) {\n        return CONCAT44(input_b,input_a);\n      }\n    }\n    do {\n      bit_c = input_c & 0x80000000;\n      input_c = input_c << 1;\n      input_d = input_d * 2 + (uint)(bit_c != 0);\n    } while ((input_d & 0x100000) == 0);\n    return CONCAT44(input_b,input_a);\n  }\n  condition = (input_a | input_b << 1) == 0;\n  if (condition) {\n    input_b = input_d;\n    input_a = input_c;\n  }\n  if (!condition) {\n    condition = (input_c | input_d << 1) == 0;\n  }\n  bit_d = input_b;\n  if (((!condition) && ((bit_b != mask || ((input_a | input_b << 0xc) == 0)))) &&\n     ((bit_c != mask || (input_a = input_c, bit_d = input_d, (input_c | input_d << 0xc) == 0)))) {\n    return (ulonglong)((input_b ^ input_d) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit_d,input_a) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_bitwise_xor_0800881c",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "uVar1": "bit_a",
                "unaff_r4": "bit_b",
                "uVar2": "bit_c",
                "uVar3": "bit_d",
                "in_r12": "mask",
                "bVar4": "condition"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_floating_point_08008894",
            "code": "\nulonglong calculateFloatingPoint_08008894(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool isZero1;\n  bool isZero2;\n  bool isOverflow;\n  undefined8 temp17;\n  \n  temp17 = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  isZero1 = temp7 == 0;\n  if (!isZero1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    isZero1 = temp10 == 0;\n  }\n  if (!isZero1) {\n    isZero1 = temp7 == 0x7ff;\n  }\n  if (!isZero1) {\n    isZero1 = temp10 == 0x7ff;\n  }\n  if (isZero1) {\n    temp17 = extracted_function_08008a02();\n  }\n  temp9 = (uint)((ulonglong)temp17 >> 0x20);\n  temp12 = (uint)temp17;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    isOverflow = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    isZero1 = (int)temp9 < 0;\n    isZero2 = temp9 == 0;\n    if (!isZero2 && isZero1 == isOverflow) {\n      isOverflow = SBORROW4(temp14,temp9);\n      isZero1 = (int)(temp14 - temp9) < 0;\n      isZero2 = temp14 == temp9;\n    }\n    if (!isZero2 && isZero1 == isOverflow) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!isZero2 && isZero1 == isOverflow) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    isZero2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    isZero1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    isZero1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      isZero1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)isZero1;\n    temp9 = temp8 + 0x3fd;\n    if (isZero1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      isZero1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)isZero1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!isZero1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      isZero2 = temp1 <= temp13;\n      isZero1 = temp11 - temp5 < (uint)isZero2;\n      temp14 = temp11;\n      if (temp5 < temp11 || isZero1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!isZero2;\n      }\n      if (temp5 < temp11 || isZero1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      isZero2 = temp2 <= temp13;\n      isZero1 = temp14 - temp11 < (uint)isZero2;\n      temp5 = temp14;\n      if (temp11 < temp14 || isZero1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!isZero2;\n      }\n      if (temp11 < temp14 || isZero1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      isZero2 = temp1 <= temp13;\n      isZero1 = temp5 - temp6 < (uint)isZero2;\n      temp11 = temp5;\n      if (temp6 < temp5 || isZero1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!isZero2;\n      }\n      if (temp6 < temp5 || isZero1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    isOverflow = 0xfc < temp9;\n    isZero2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    isZero1 = temp4 == 0;\n    temp3 = temp4;\n    if (isOverflow && !isZero1) {\n      isOverflow = 0x6ff < temp4;\n      isZero2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      isZero1 = temp4 == 0x700;\n    }\n    if (!isOverflow || isZero1) {\n      isZero1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        isZero1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        isZero1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)isZero1),temp12 + isZero1);\n    }\n  }\n  if (!isZero1 && (int)temp3 < 0 == isZero2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  isOverflow = SCARRY4(temp9,0x36);\n  isZero1 = (int)(temp9 + 0x36) < 0;\n  isZero2 = temp9 == 0xffffffca;\n  if (isZero2 || isZero1 != isOverflow) {\n    temp12 = 0;\n  }\n  if (isZero2 || isZero1 != isOverflow) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (isZero2 || isZero1 != isOverflow) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_floating_point_08008894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "isZero1",
                "bVar15": "isZero2",
                "bVar16": "isOverflow"
            },
            "calling": [
                "sqrt",
                "__ieee754_sqrt",
                "gc_execute_line",
                "atan",
                "__ieee754_atan2",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "extracted_function_08008a02",
            "code": "\nulonglong extractedFunction_08008a02(uint inputParam1,uint inputParam2,uint inputParam3,uint inputParam4)\n\n{\n  uint result1;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  bool isZero;\n  \n  tempVar2 = tempVar4 & inputParam4 >> 0x14;\n  tempVar3 = inputParam2;\n  if (tempVar1 != tempVar4 || tempVar2 != tempVar4) {\n    if (tempVar1 == tempVar4) {\n      if (((inputParam1 | inputParam2 << 0xc) == 0) && (inputParam1 = inputParam3, tempVar3 = inputParam4, tempVar2 != tempVar4)\n         ) {\nLAB_08008874:\n        return (ulonglong)((inputParam2 ^ inputParam4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (tempVar2 == tempVar4) {\n      inputParam1 = inputParam3;\n      tempVar3 = inputParam4;\n      if ((inputParam3 | inputParam4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((inputParam2 ^ inputParam4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (inputParam1 | inputParam2 << 1) == 0;\n      if (!isZero) {\n        isZero = (inputParam3 | inputParam4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (tempVar1 == 0) {\n          tempVar3 = inputParam2 & 0x80000000;\n          do {\n            result1 = inputParam1 & 0x80000000;\n            inputParam1 = inputParam1 << 1;\n            inputParam2 = inputParam2 * 2 + (uint)(result1 != 0);\n          } while ((inputParam2 & 0x100000) == 0);\n          inputParam2 = inputParam2 | tempVar3;\n          if (tempVar2 != 0) {\n            return CONCAT44(inputParam2,inputParam1);\n          }\n        }\n        do {\n          tempVar3 = inputParam3 & 0x80000000;\n          inputParam3 = inputParam3 << 1;\n          inputParam4 = inputParam4 * 2 + (uint)(tempVar3 != 0);\n        } while ((inputParam4 & 0x100000) == 0);\n        return CONCAT44(inputParam2,inputParam1);\n      }\n      if ((inputParam1 | inputParam2 << 1) != 0) goto LAB_08008874;\n      if ((inputParam3 | inputParam4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(tempVar3,inputParam1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "extracted_function_08008a02",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "result1",
                "unaff_r4": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "in_r12": "tempVar4",
                "bVar4": "isZero"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_parameters_08008a74",
            "code": "\nuint check_parameters_08008a74(uint param1,uint param2,uint param3,uint param4)\n\n{\n  uint result;\n  bool isInvalid;\n  bool isLess;\n  \n  if (((int)(param2 << 1) >> 0x15 == -1 || (int)(param4 << 1) >> 0x15 == -1) &&\n     ((((int)(param2 << 1) >> 0x15 == -1 && ((param1 | param2 << 0xc) != 0)) ||\n      (((int)(param4 << 1) >> 0x15 == -1 && ((param3 | param4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isInvalid = (param1 | param2 << 1) == 0;\n  if (isInvalid) {\n    isInvalid = (param3 | param4 << 1) == 0;\n  }\n  if (!isInvalid) {\n    isInvalid = param2 == param4;\n  }\n  if (isInvalid) {\n    isInvalid = param1 == param3;\n  }\n  if (!isInvalid) {\n    result = param2 ^ param4;\n    isInvalid = result == 0;\n    if (-1 < (int)result) {\n      isInvalid = param2 == param4;\n    }\n    isLess = -1 < (int)result && param4 <= param2;\n    if (isInvalid) {\n      isLess = param3 <= param1;\n    }\n    param4 = (int)param4 >> 0x1f;\n    if (!isLess) {\n      param4 = ~param4;\n    }\n    return param4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "bVar2": "isInvalid",
                "bVar3": "isLess"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "compare_floats_08008af0",
            "code": "\nvoid compareFloats_08008af0(undefined4 resultFlag,undefined4 sourceFlag,undefined4 floatA,undefined4 floatB)\n\n{\n  __aeabi_cdcmpeq(floatA,floatB,resultFlag,sourceFlag);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "compare_floats_08008af0",
                "param_1": "resultFlag",
                "param_2": "sourceFlag",
                "param_3": "floatA",
                "param_4": "floatB"
            },
            "calling": [
                "__aeabi_dcmpgt",
                "__aeabi_dcmpge"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "convert_float_to_undefined_08008b00",
            "code": "\nundefined4 convertFloatToUndefined_08008b00(undefined4 inputFloat)\n\n{\n  convertFloatToUndefined_08008b00_helper();\n  return inputFloat;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "convert_float_to_undefined_08008b00",
                "param_1": "inputFloat",
                "__nedf2": "convertFloatToUndefined_helper"
            },
            "calling": [
                "__aeabi_cdrcmple",
                "__aeabi_dcmpeq",
                "__aeabi_dcmplt"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_if_not_zero_08008b10",
            "code": "\nbool checkIfNotZero_08008b10(void)\n\n{\n  char comparisonResult;\n  \n  __aeabi_cdcmpeq();\n  return comparisonResult != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_if_not_zero_08008b10",
                "in_ZR": "comparisonResult"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "check_if_carry_flag_is_zero_08008b24",
            "code": "\nbool check_if_carry_flag_is_zero_08008b24(void)\n\n{\n  char carry_flag;\n  \n  compare_double_values();\n  return carry_flag == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "check_if_carry_flag_is_zero_08008b24",
                "in_CY": "carry_flag",
                "__aeabi_cdcmpeq": "compare_double_values"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "check_condition_08008b4c",
            "code": "\nbool check_condition_08008b4c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  __aeabi_cdrcmple();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "check_condition_08008b4c",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "is_null_character_08008b60",
            "code": "\nbool is_null_character_08008b60(void)\n\n{\n  char input_char;\n  \n  __aeabi_cdrcmple();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "is_null_character_08008b60",
                "in_CY": "input_char"
            },
            "calling": [
                "ceil",
                "atan",
                "floor",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "is_valid_conditions_08008b74",
            "code": "\nundefined4 is_valid_conditions_08008b74(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "is_valid_conditions_08008b74",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "sqrt"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "calculate_inverse_08008ba0",
            "code": "\nuint calculate_inverse_08008ba0(uint dividend,uint divisor)\n\n{\n  uint quotient;\n  int adjusted_divisor;\n  uint shift_amount;\n  \n  adjusted_divisor = divisor * 2 + 0x200000;\n  if (divisor * 2 < 0xffe00000) {\n    if (-1 < adjusted_divisor) {\n      return 0;\n    }\n    quotient = adjusted_divisor >> 0x15;\n    shift_amount = -quotient - 0x3e1;\n    if (quotient < 0xfffffc20 && shift_amount != 0) {\n      quotient = (divisor << 0xb | 0x80000000 | dividend >> 0x15) >> (shift_amount & 0xff);\n      if ((divisor & 0x80000000) != 0) {\n        quotient = -quotient;\n      }\n      return quotient;\n    }\n  }\n  else if ((dividend | divisor << 0xc) != 0) {\n    return 0;\n  }\n  divisor = divisor & 0x80000000;\n  if (divisor == 0) {\n    divisor = 0x7fffffff;\n  }\n  return divisor;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "calculate_inverse_08008ba0",
                "param_1": "dividend",
                "param_2": "divisor",
                "iVar2": "adjusted_divisor",
                "uVar1": "quotient",
                "uVar3": "shift_amount"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "gc_execute_line",
                "__kernel_cos",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2",
                "lround",
                "plan_buffer_line",
                "__kernel_sin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "calculate_shifted_value_08008bf0",
            "code": "\nuint calculateShiftedValue_08008bf0(uint inputValue,uint shiftAmount)\n\n{\n  int shiftedValue;\n  uint shiftMaskedValue;\n  \n  if ((shiftAmount & 0x80000000) != 0) {\n    return 0;\n  }\n  shiftedValue = shiftAmount * 2 + 0x200000;\n  if (shiftAmount * 2 < 0xffe00000) {\n    if (-1 < shiftedValue) {\n      return 0;\n    }\n    shiftMaskedValue = -(shiftedValue >> 0x15) - 0x3e1;\n    if (-1 < (int)shiftMaskedValue) {\n      return (shiftAmount << 0xb | 0x80000000 | inputValue >> 0x15) >> (shiftMaskedValue & 0xff);\n    }\n  }\n  else if ((inputValue | shiftAmount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "param_1": "inputValue",
                "param_2": "shiftAmount",
                "iVar1": "shiftedValue",
                "uVar2": "shiftMaskedValue"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "protocol_execute_line",
                "gc_execute_line",
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "mc_dwell",
                "plan_buffer_line"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_float_08008c30",
            "code": "\nuint calculateFloat_08008c30(uint inputValue,uint multiplier)\n\n{\n  uint result;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  bool isZero;\n  bool conditionMet;\n  \n  tempVar1 = multiplier * 2;\n  conditionMet = tempVar1 < 0x70000000;\n  tempVar2 = tempVar1 + 0x90000000;\n  result = tempVar2;\n  if (!conditionMet) {\n    tempVar3 = tempVar1 + 0x8fe00000;\n    result = tempVar3;\n  }\n  isZero = result == 0;\n  if (!conditionMet && tempVar2 >= 0x200000) {\n    isZero = tempVar3 == 0x1fc00000;\n  }\n  if (((conditionMet || tempVar2 < 0x200000) || 0x1fc00000 < tempVar3) || isZero) {\n    if ((multiplier & 0x40000000) != 0) {\n      if (((int)tempVar1 >> 0x15 == -1) && ((inputValue | multiplier << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return multiplier & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(tempVar1 + 0x92e00000) < 0 != SCARRY4(tempVar2,0x2e00000)) {\n      return multiplier & 0x80000000;\n    }\n    tempVar1 = 0x18 - (tempVar1 + 0x92e00000 >> 0x15);\n    result = inputValue >> (tempVar1 & 0xff);\n    if (inputValue << (0x20 - tempVar1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    tempVar2 = multiplier & 0x1fffff | 0x100000;\n    inputValue = result | tempVar2 << (0x20 - tempVar1 & 0xff);\n    tempVar2 = (tempVar2 >> (tempVar1 & 0xff)) << 1;\n  }\n  result = (multiplier & 0x80000000 | inputValue >> 0x1d) + tempVar2 * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_float_08008c30",
                "param_1": "inputValue",
                "param_2": "multiplier",
                "uVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "in_r12": "tempVar3",
                "bVar4": "isZero",
                "bVar5": "conditionMet"
            },
            "calling": [
                "mc_arc",
                "report_gcode_parameters",
                "gc_execute_line",
                "to_millimeters",
                "read_float",
                "max_allowable_speed",
                "homing_cycle",
                "plan_buffer_line",
                "report_realtime_status",
                "report_gcode_modes"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_float_08008cd8",
            "code": "\nuint calculate_float_08008cd8(uint number,uint exponent,undefined4 sign,uint rounding_mode)\n\n{\n  int int_part;\n  int int_part_shifted;\n  uint num_xor;\n  uint fraction_part_shifted;\n  uint number_shifted;\n  uint int_shift;\n  uint difference;\n  bool is_zero;\n  \n  num_xor = exponent ^ 0x80000000;\n  number_shifted = number << 1;\n  is_zero = number_shifted == 0;\n  if (!is_zero) {\n    rounding_mode = exponent << 1;\n    is_zero = rounding_mode == 0;\n  }\n  if (!is_zero) {\n    is_zero = number_shifted == rounding_mode;\n  }\n  int_part = (int)number_shifted >> 0x18;\n  if (!is_zero) {\n    is_zero = int_part == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)rounding_mode >> 0x18 == -1;\n  }\n  if (is_zero) {\n    int_part_shifted = (int)(exponent << 1) >> 0x18;\n    if (int_part == -1 || int_part_shifted == -1) {\n      number_shifted = num_xor;\n      if (int_part == -1) {\n        number_shifted = number;\n      }\n      if (int_part != -1 || int_part_shifted != -1) {\n        num_xor = number_shifted;\n      }\n      is_zero = (number_shifted & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (num_xor & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = number_shifted == num_xor;\n      }\n      if (!is_zero) {\n        number_shifted = number_shifted | 0x400000;\n      }\n      return number_shifted;\n    }\n    if (((number ^ num_xor) & 0x7fffffff) != 0) {\n      if (number_shifted == 0) {\n        number = num_xor;\n      }\n      return number;\n    }\n    if (number != num_xor) {\n      return 0;\n    }\n    if ((number_shifted & 0xff000000) == 0) {\n      num_xor = number << 1;\n      if ((number & 0x80000000) != 0) {\n        num_xor = num_xor | 0x80000000;\n      }\n      return num_xor;\n    }\n    if (number_shifted < 0xfe000000) {\n      return number + 0x800000;\n    }\n    number = number & 0x80000000;\nLAB_08008e12:\n    return number | 0x7f800000;\n  }\n  number_shifted = number_shifted >> 0x18;\n  rounding_mode = rounding_mode >> 0x18;\n  difference = rounding_mode - number_shifted;\n  is_zero = difference != 0;\n  int_shift = number_shifted;\n  if (is_zero && number_shifted <= rounding_mode) {\n    int_shift = number_shifted + difference;\n  }\n  if (is_zero && number_shifted <= rounding_mode) {\n    num_xor = num_xor ^ number;\n  }\n  if (is_zero && number_shifted <= rounding_mode) {\n    number = number ^ num_xor;\n  }\n  if (is_zero && number_shifted <= rounding_mode) {\n    num_xor = num_xor ^ number;\n  }\n  if (rounding_mode < number_shifted) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return number;\n  }\n  number_shifted = number & 0xffffff | 0x800000;\n  if ((number & 0x80000000) != 0) {\n    number_shifted = -number_shifted;\n  }\n  fraction_part_shifted = num_xor & 0xffffff | 0x800000;\n  if ((num_xor & 0x80000000) != 0) {\n    fraction_part_shifted = -fraction_part_shifted;\n  }\n  if (int_shift == difference) {\n    fraction_part_shifted = fraction_part_shifted ^ 0x800000;\n    if (int_shift == 0) {\n      number_shifted = number_shifted ^ 0x800000;\n      int_shift = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  number_shifted = number_shifted + ((int)fraction_part_shifted >> (difference & 0xff));\n  fraction_part_shifted = fraction_part_shifted << (0x20 - difference & 0xff);\n  number = number_shifted & 0x80000000;\n  if ((int)number_shifted < 0) {\n    is_zero = fraction_part_shifted != 0;\n    fraction_part_shifted = -fraction_part_shifted;\n    number_shifted = -number_shifted - (uint)is_zero;\n  }\n  if (number_shifted < 0x800000) {\n    num_xor = fraction_part_shifted & 0x80000000;\n    fraction_part_shifted = fraction_part_shifted << 1;\n    number_shifted = number_shifted * 2 + (uint)(num_xor != 0);\n    num_xor = int_shift - 2;\n    if (int_shift - 1 == 0 || number_shifted < 0x800000) {\n      difference = LZCOUNT(number_shifted) - 8;\n      number_shifted = number_shifted << (difference & 0xff);\n      if ((int)num_xor < (int)difference) {\n        number_shifted = number_shifted >> (-(num_xor - difference) & 0xff);\n      }\n      else {\n        number_shifted = number_shifted + (num_xor - difference) * 0x800000;\n      }\n      return number_shifted | number;\n    }\n  }\n  else {\n    num_xor = int_shift - 1;\n    if (0xffffff < number_shifted) {\n      num_xor = number_shifted & 1;\n      number_shifted = number_shifted >> 1;\n      fraction_part_shifted = (uint)(num_xor != 0) << 0x1f | fraction_part_shifted >> 1;\n      num_xor = int_shift;\n      if (0xfd < int_shift) goto LAB_08008e12;\n    }\n  }\n  number_shifted = number_shifted + num_xor * 0x800000 + (uint)(0x7fffffff < fraction_part_shifted);\n  if (fraction_part_shifted == 0x80000000) {\n    number_shifted = number_shifted & 0xfffffffe;\n  }\n  return number_shifted | number;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_float_08008cd8",
                "param_1": "number",
                "param_2": "exponent",
                "param_3": "sign",
                "param_4": "rounding_mode",
                "iVar1": "int_part",
                "iVar2": "int_part_shifted",
                "uVar3": "num_xor",
                "uVar4": "fraction_part_shifted",
                "uVar5": "number_shifted",
                "uVar6": "int_shift",
                "uVar7": "difference",
                "bVar8": "is_zero"
            },
            "calling": [
                "mc_arc",
                "estimate_acceleration_distance",
                "gc_execute_line",
                "max_allowable_speed",
                "mc_dwell",
                "intersection_distance",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_float_distance_08008cdc",
            "code": "\nuint calculateFloatDistance_08008cdc(uint float1,uint float2,undefined4 val1,uint val2)\n\n{\n  int exponent1;\n  int exponent2;\n  uint mantissa1;\n  uint mantissa2;\n  uint shiftBits;\n  uint difference;\n  bool isNegativeComparison;\n  \n  mantissa2 = float1 << 1;\n  isNegativeComparison = mantissa2 == 0;\n  if (!isNegativeComparison) {\n    val2 = float2 << 1;\n    isNegativeComparison = val2 == 0;\n  }\n  if (!isNegativeComparison) {\n    isNegativeComparison = mantissa2 == val2;\n  }\n  exponent1 = (int)mantissa2 >> 0x18;\n  if (!isNegativeComparison) {\n    isNegativeComparison = exponent1 == -1;\n  }\n  if (!isNegativeComparison) {\n    isNegativeComparison = (int)val2 >> 0x18 == -1;\n  }\n  if (isNegativeComparison) {\n    exponent2 = (int)(float2 << 1) >> 0x18;\n    if (exponent1 == -1 || exponent2 == -1) {\n      mantissa2 = float2;\n      if (exponent1 == -1) {\n        mantissa2 = float1;\n      }\n      if (exponent1 != -1 || exponent2 != -1) {\n        float2 = mantissa2;\n      }\n      isNegativeComparison = (mantissa2 & 0x7fffff) == 0;\n      if (isNegativeComparison) {\n        isNegativeComparison = (float2 & 0x7fffff) == 0;\n      }\n      if (isNegativeComparison) {\n        isNegativeComparison = mantissa2 == float2;\n      }\n      if (!isNegativeComparison) {\n        mantissa2 = mantissa2 | 0x400000;\n      }\n      return mantissa2;\n    }\n    if (((float1 ^ float2) & 0x7fffffff) != 0) {\n      if (mantissa2 == 0) {\n        float1 = float2;\n      }\n      return float1;\n    }\n    if (float1 != float2) {\n      return 0;\n    }\n    if ((mantissa2 & 0xff000000) == 0) {\n      mantissa2 = float1 << 1;\n      if ((float1 & 0x80000000) != 0) {\n        mantissa2 = mantissa2 | 0x80000000;\n      }\n      return mantissa2;\n    }\n    if (mantissa2 < 0xfe000000) {\n      return float1 + 0x800000;\n    }\n    float1 = float1 & 0x80000000;\nLAB_08008e12:\n    return float1 | 0x7f800000;\n  }\n  mantissa2 = mantissa2 >> 0x18;\n  val2 = val2 >> 0x18;\n  difference = val2 - mantissa2;\n  isNegativeComparison = difference != 0;\n  shiftBits = mantissa2;\n  if (isNegativeComparison && mantissa2 <= val2) {\n    shiftBits = mantissa2 + difference;\n  }\n  if (isNegativeComparison && mantissa2 <= val2) {\n    float2 = float2 ^ float1;\n  }\n  if (isNegativeComparison && mantissa2 <= val2) {\n    float1 = float1 ^ float2;\n  }\n  if (isNegativeComparison && mantissa2 <= val2) {\n    float2 = float2 ^ float1;\n  }\n  if (val2 < mantissa2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return float1;\n  }\n  mantissa2 = float1 & 0xffffff | 0x800000;\n  if ((float1 & 0x80000000) != 0) {\n    mantissa2 = -mantissa2;\n  }\n  mantissa1 = float2 & 0xffffff | 0x800000;\n  if ((float2 & 0x80000000) != 0) {\n    mantissa1 = -mantissa1;\n  }\n  if (shiftBits == difference) {\n    mantissa1 = mantissa1 ^ 0x800000;\n    if (shiftBits == 0) {\n      mantissa2 = mantissa2 ^ 0x800000;\n      shiftBits = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  mantissa2 = mantissa2 + ((int)mantissa1 >> (difference & 0xff));\n  mantissa1 = mantissa1 << (0x20 - difference & 0xff);\n  float1 = mantissa2 & 0x80000000;\n  if ((int)mantissa2 < 0) {\n    isNegativeComparison = mantissa1 != 0;\n    mantissa1 = -mantissa1;\n    mantissa2 = -mantissa2 - (uint)isNegativeComparison;\n  }\n  if (mantissa2 < 0x800000) {\n    difference = mantissa1 & 0x80000000;\n    mantissa1 = mantissa1 << 1;\n    mantissa2 = mantissa2 * 2 + (uint)(difference != 0);\n    difference = shiftBits - 2;\n    if (shiftBits - 1 == 0 || mantissa2 < 0x800000) {\n      shiftBits = LZCOUNT(mantissa2) - 8;\n      mantissa2 = mantissa2 << (shiftBits & 0xff);\n      if ((int)difference < (int)shiftBits) {\n        mantissa2 = mantissa2 >> (-(difference - shiftBits) & 0xff);\n      }\n      else {\n        mantissa2 = mantissa2 + (difference - shiftBits) * 0x800000;\n      }\n      return mantissa2 | float1;\n    }\n  }\n  else {\n    difference = shiftBits - 1;\n    if (0xffffff < mantissa2) {\n      difference = mantissa2 & 1;\n      mantissa2 = mantissa2 >> 1;\n      mantissa1 = (uint)(difference != 0) << 0x1f | mantissa1 >> 1;\n      difference = shiftBits;\n      if (0xfd < shiftBits) goto LAB_08008e12;\n    }\n  }\n  mantissa2 = mantissa2 + difference * 0x800000 + (uint)(0x7fffffff < mantissa1);\n  if (mantissa1 == 0x80000000) {\n    mantissa2 = mantissa2 & 0xfffffffe;\n  }\n  return mantissa2 | float1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_float_distance_08008cdc",
                "param_1": "float1",
                "param_2": "float2",
                "param_3": "val1",
                "param_4": "val2",
                "iVar1": "exponent1",
                "iVar2": "exponent2",
                "uVar3": "mantissa1",
                "uVar4": "mantissa2",
                "uVar5": "shiftBits",
                "uVar6": "difference",
                "bVar7": "isNegativeComparison"
            },
            "calling": [
                "mc_arc",
                "estimate_acceleration_distance",
                "gc_execute_line",
                "max_allowable_speed",
                "intersection_distance",
                "printFloat",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_result_08008e3c",
            "code": "\nuint calculateResult_08008e3c(uint inputValue)\n\n{\n  uint leadingZeroes;\n  uint shiftAmount;\n  int intermediateResult;\n  uint threshold;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(inputValue);\n  shiftAmount = leadingZeroes - 8;\n  intermediateResult = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroes) {\n    threshold = 0 << (shiftAmount & 0xff);\n    leadingZeroes = intermediateResult + (inputValue << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < threshold);\n    if (threshold == 0x80000000) {\n      leadingZeroes = leadingZeroes & 0xfffffffe;\n    }\n    return leadingZeroes;\n  }\n  shiftAmount = inputValue << leadingZeroes + 0x18;\n  leadingZeroes = intermediateResult + ((inputValue >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeroes = leadingZeroes & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_result_08008e3c",
                "param_1": "inputValue",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "iVar3": "intermediateResult",
                "uVar4": "threshold"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "read_float"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "reverse_conversion_08008e44",
            "code": "\nuint reverseConversion_08008e44(uint inputNumber)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint isNegative;\n  int intermediateResult;\n  \n  isNegative = inputNumber & 0x80000000;\n  if ((int)isNegative < 0) {\n    inputNumber = -inputNumber;\n  }\n  if (inputNumber == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputNumber);\n  shiftAmount = leadingZeros - 8;\n  intermediateResult = ((isNegative | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    isNegative = intermediateResult + (inputNumber << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftAmount = inputNumber << leadingZeros + 0x18;\n  isNegative = intermediateResult + ((inputNumber >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftAmount >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "reverse_conversion_08008e44",
                "param_1": "inputNumber",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "isNegative",
                "iVar4": "intermediateResult"
            },
            "calling": [
                "mc_arc",
                "plan_cycle_reinitialize",
                "calculate_trapezoid_for_block",
                "gc_set_current_position",
                "mc_dwell",
                "mc_go_home",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_floating_point_08008eec",
            "code": "\nuint calculateFloatingPoint_08008eec(uint input1,uint input2,undefined4 bitMask1,uint bitMask2)\n\n{\n  longlong product;\n  uint result;\n  uint shiftedBits1;\n  int sum;\n  int difference;\n  uint temp1;\n  int difference2;\n  uint temp2;\n  bool isZero1;\n  bool isNegative;\n  \n  shiftedBits1 = input1 >> 0x17 & 0xff;\n  isZero1 = shiftedBits1 == 0;\n  if (!isZero1) {\n    bitMask2 = input2 >> 0x17 & 0xff;\n    isZero1 = bitMask2 == 0;\n  }\n  if (!isZero1) {\n    isZero1 = shiftedBits1 == 0xff;\n  }\n  if (!isZero1) {\n    isZero1 = bitMask2 == 0xff;\n  }\n  if (isZero1) {\n    bitMask2 = input2 >> 0x17 & 0xff;\n    if (shiftedBits1 == 0xff || bitMask2 == 0xff) {\n      isZero1 = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero1 = input2 == 0;\n        result = input1;\n      }\n      if (!isZero1) {\n        isZero1 = input2 == 0x80000000;\n      }\n      temp2 = result;\n      if (((isZero1) || ((shiftedBits1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((bitMask2 == 0xff && (temp2 = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp2 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    isZero1 = (input1 & 0x7fffffff) == 0;\n    if (!isZero1) {\n      isZero1 = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero1) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero1 = shiftedBits1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        input1 = input1 << 1;\n        isZero1 = (input1 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      shiftedBits1 = shiftedBits1 - 1;\n    }\n    input1 = input1 | result;\n    isZero1 = bitMask2 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (isZero1) {\n        input2 = input2 << 1;\n        isZero1 = (input2 & 0x800000) == 0;\n      }\n      if (!isZero1) break;\n      bitMask2 = bitMask2 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shiftedBits1 + bitMask2;\n  temp2 = input1 ^ input2;\n  shiftedBits1 = input1 << 9;\n  isZero1 = shiftedBits1 == 0;\n  if (!isZero1) {\n    input2 = input2 << 9;\n    isZero1 = input2 == 0;\n  }\n  if (isZero1) {\n    if (shiftedBits1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp2 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isNegative = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    isZero1 = difference == 0;\n    difference2 = difference;\n    if (!isZero1 && 0x7e < sum) {\n      isNegative = SBORROW4(0xff,difference);\n      difference2 = 0xff - difference;\n      isZero1 = difference == 0xff;\n    }\n    if (!isZero1 && difference2 < 0 == isNegative) {\n      result = result | difference * 0x800000;\n    }\n    if (!isZero1 && difference2 < 0 == isNegative) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp1 = 0;\n    isNegative = SBORROW4(difference,1);\n    temp2 = sum - 0x80;\n    isZero1 = temp2 == 0;\n    shiftedBits1 = temp2;\n  }\n  else {\n    product = (ulonglong)(shiftedBits1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    temp1 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    isZero1 = result < 0x800000;\n    if (isZero1) {\n      result = result << 1;\n    }\n    if (isZero1) {\n      result = result | temp1 >> 0x1f;\n      temp1 = temp1 << 1;\n    }\n    result = temp2 & 0x80000000 | result;\n    temp2 = (sum + -0x7f) - (uint)isZero1;\n    isNegative = SBORROW4(temp2,0xfd);\n    isZero1 = temp2 == 0xfd;\n    shiftedBits1 = temp2 - 0xfd;\n    if (temp2 < 0xfe) {\n      result = result + temp2 * 0x800000 + (uint)(0x7fffffff < temp1);\n      if (temp1 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (isZero1 || (int)shiftedBits1 < 0 != isNegative) {\n    isZero1 = (int)(temp2 + 0x19) < 0;\n    if (temp2 == 0xffffffe7 || isZero1 != SCARRY4(temp2,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp2 != 0xffffffe7 && isZero1 == SCARRY4(temp2,0x19)) {\n      shiftedBits1 = (result << 1) >> (-temp2 & 0xff);\n      temp2 = result << (temp2 + 0x20 & 0xff);\n      shiftedBits1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shiftedBits1 >> 1) + (uint)((byte)shiftedBits1 & 1);\n      if ((temp1 | temp2 << 1) == 0) {\n        shiftedBits1 = shiftedBits1 & ~(temp2 >> 0x1f);\n      }\n      return shiftedBits1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "bitMask1",
                "param_4": "bitMask2",
                "uVar2": "result",
                "uVar3": "shiftedBits1",
                "uVar6": "temp1",
                "uVar8": "temp2",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "difference2",
                "bVar9": "isZero1",
                "bVar10": "isNegative",
                "lVar1": "product"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "estimate_acceleration_distance",
                "gc_execute_line",
                "plan_cycle_reinitialize",
                "calculate_trapezoid_for_block",
                "max_allowable_speed",
                "homing_cycle",
                "mc_dwell",
                "intersection_distance",
                "mc_go_home",
                "plan_buffer_line",
                "read_float",
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_float_08009054",
            "code": "\nuint calculateFloat_08009054(uint num1,uint num2,undefined4 var3,uint var4)\n\n{\n  uint remainder;\n  uint shift1;\n  int difference;\n  uint shift2;\n  int shiftedVal;\n  uint result;\n  bool isZero;\n  bool isNegative;\n  bool carry;\n  \n  shift1 = num1 >> 0x17 & 0xff;\n  isZero = shift1 == 0;\n  if (!isZero) {\n    var4 = num2 >> 0x17 & 0xff;\n    isZero = var4 == 0;\n  }\n  if (!isZero) {\n    isZero = shift1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = var4 == 0xff;\n  }\n  if (isZero) {\n    var4 = num2 >> 0x17 & 0xff;\n    result = num1;\n    if (shift1 == 0xff) {\n      if (((num1 & 0x7fffff) != 0) || (result = num2, var4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (var4 == 0xff) {\n        result = num2;\n        if ((num2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (num1 ^ num2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      isZero = (num1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (num2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = shift1 == 0;\n        result = num1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            num1 = num1 << 1;\n            isZero = (num1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          shift1 = shift1 - 1;\n        }\n        num1 = num1 | result;\n        isZero = var4 == 0;\n        result = num2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            num2 = num2 << 1;\n            isZero = (num2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          var4 = var4 - 1;\n        }\n        num2 = num2 | result;\n        goto LAB_0800906c;\n      }\n      if ((num1 & 0x7fffffff) == 0) {\n        if ((num2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    num1 = num1 ^ num2;\n  }\n  else {\nLAB_0800906c:\n    difference = shift1 - var4;\n    if (num2 << 9 == 0) {\n      num1 = (num1 ^ num2) & 0x80000000 | num1 & 0x7fffff;\n      carry = SCARRY4(difference,0x7f);\n      shiftedVal = difference + 0x7f;\n      isZero = shiftedVal < 0;\n      isNegative = shiftedVal == 0;\n      if (!isNegative && isZero == carry) {\n        carry = SBORROW4(0xff,shiftedVal);\n        isZero = 0xff - shiftedVal < 0;\n        isNegative = shiftedVal == 0xff;\n      }\n      if (!isNegative && isZero == carry) {\n        num1 = num1 | shiftedVal * 0x800000;\n      }\n      if (!isNegative && isZero == carry) {\n        return num1;\n      }\n      num1 = num1 | 0x800000;\n      shift1 = 0;\n      isNegative = SBORROW4(shiftedVal,1);\n      shift2 = difference + 0x7e;\n      isZero = shift2 == 0;\n      result = shift2;\n    }\n    else {\n      remainder = (num2 << 9) >> 4 | 0x10000000;\n      shift1 = (num1 << 9) >> 4 | 0x10000000;\n      num1 = (num1 ^ num2) & 0x80000000;\n      isZero = remainder <= shift1;\n      if (!isZero) {\n        shift1 = shift1 << 1;\n      }\n      shift2 = difference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (remainder <= shift1) {\n          shift1 = shift1 - remainder;\n          num1 = num1 | result;\n        }\n        isZero = remainder >> 1 <= shift1;\n        if (isZero) {\n          shift1 = shift1 - (remainder >> 1);\n        }\n        if (isZero) {\n          num1 = num1 | result >> 1;\n        }\n        isZero = remainder >> 2 <= shift1;\n        if (isZero) {\n          shift1 = shift1 - (remainder >> 2);\n        }\n        if (isZero) {\n          num1 = num1 | result >> 2;\n        }\n        isZero = remainder >> 3 <= shift1;\n        if (isZero) {\n          shift1 = shift1 - (remainder >> 3);\n        }\n        if (isZero) {\n          num1 = num1 | result >> 3;\n        }\n        shift1 = shift1 * 0x10;\n        isZero = shift1 == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isNegative = SBORROW4(shift2,0xfd);\n      isZero = shift2 == 0xfd;\n      result = shift2 - 0xfd;\n      if (shift2 < 0xfe) {\n        num1 = num1 + shift2 * 0x800000 + (uint)(remainder <= shift1);\n        if (shift1 - remainder == 0) {\n          num1 = num1 & 0xfffffffe;\n        }\n        return num1;\n      }\n    }\n    if (isZero || (int)result < 0 != isNegative) {\n      isZero = (int)(shift2 + 0x19) < 0;\n      if (shift2 == 0xffffffe7 || isZero != SCARRY4(shift2,0x19)) {\n        num1 = num1 & 0x80000000;\n      }\n      if (shift2 == 0xffffffe7 || isZero != SCARRY4(shift2,0x19)) {\n        return num1;\n      }\n      result = (num1 << 1) >> (-shift2 & 0xff);\n      shift2 = num1 << (shift2 + 0x20 & 0xff);\n      result = ((uint)((num1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((shift1 | shift2 << 1) == 0) {\n        result = result & ~(shift2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return num1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_float_08009054",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "var3",
                "param_4": "var4",
                "uVar1": "remainder",
                "uVar2": "shift1",
                "iVar3": "difference",
                "uVar4": "shift2",
                "iVar5": "shiftedVal",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "carry"
            },
            "calling": [
                "planner_recalculate_trapezoids",
                "mc_arc",
                "estimate_acceleration_distance",
                "plan_cycle_reinitialize",
                "report_grbl_settings",
                "homing_cycle",
                "gc_set_current_position",
                "intersection_distance",
                "plan_buffer_line",
                "report_realtime_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "check_bounds_and_return_0800919c",
            "code": "\nuint check_bounds_and_return_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined;\n  bool is_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = combined == 0;\n  if (!is_zero) {\n    combined = input_1 ^ input_2;\n    is_zero = combined == 0;\n  }\n  is_negative = -1 < (int)combined;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "check_bounds_and_return_0800919c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "compare_floats_080091fc",
            "code": "\nvoid compareFloats_080091fc(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "compare_floats_080091fc",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpge",
                "__aeabi_fcmpgt"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "concatenate_unsigned_integers_08009204",
            "code": "\nundefined8 concatenateUnsignedIntegers_08009204(undefined4 srcValue,undefined4 dstValue)\n\n{\n  __cmpsf2();\n  return CONCAT44(dstValue,srcValue);\n}\n\n",
            "renaming": {
                "FUN_08009204": "concatenate_unsigned_integers_08009204",
                "param_1": "srcValue",
                "param_2": "dstValue"
            },
            "calling": [
                "__aeabi_fcmplt",
                "__aeabi_cfrcmple",
                "__aeabi_fcmple",
                "__aeabi_fcmpeq"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_cf_compare_08009214",
            "code": "\nbool check_CF_compare_08009214(void)\n\n{\n  char comparison_result;\n  \n  __aeabi_cfcmpeq();\n  return comparison_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_cf_compare_08009214",
                "in_ZR": "comparison_result"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "planner_forward_pass_kernel",
                "gc_execute_line",
                "planner_reverse_pass_kernel",
                "read_float"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "is_null_ptr_08009228",
            "code": "\nbool is_null_ptr_08009228(void)\n\n{\n  char char_value;\n  \n  __aeabi_cfcmpeq();\n  return char_value == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "is_null_ptr_08009228",
                "in_CY": "char_value"
            },
            "calling": [
                "settings_store_global_setting",
                "planner_forward_pass_kernel",
                "gc_execute_line",
                "planner_reverse_pass_kernel",
                "printFloat",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "compare_floats_0800923c",
            "code": "\nbool compareFloats_0800923c(void)\n\n{\n  undefined isZeroResult;\n  undefined carryFlag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carryFlag || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "compare_floats_0800923c",
                "in_ZR": "isZeroResult",
                "in_CY": "carryFlag"
            },
            "calling": [
                "settings_store_global_setting",
                "mc_arc",
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "is_comparison_or_zero_08009250",
            "code": "\nbool isComparisonOrZero_08009250(void)\n\n{\n  undefined isZero;\n  undefined isCmpResult;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isCmpResult || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_08009250": "is_comparison_or_zero_08009250",
                "in_ZR": "isZero",
                "in_CY": "isCmpResult"
            },
            "calling": [
                "mc_arc",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_for_null_08009264",
            "code": "\nbool check_for_null_08009264(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_for_null_08009264",
                "in_CY": "input_character"
            },
            "calling": [
                "planner_reverse_pass_kernel",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_to_positive_08009278",
            "code": "\nuint convertToPositive_08009278(uint num)\n\n{\n  uint shiftedBits;\n  uint difference;\n  \n  if (num << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedBits = (num << 1) >> 0x18;\n  difference = 0x9e - shiftedBits;\n  if (shiftedBits < 0x9f && difference != 0) {\n    shiftedBits = (num << 8 | 0x80000000) >> (difference & 0xff);\n    if ((num & 0x80000000) != 0) {\n      shiftedBits = -shiftedBits;\n    }\n    return shiftedBits;\n  }\n  if ((difference == 0xffffff9f) && ((num & 0x7fffff) != 0)) {\n    return 0;\n  }\n  num = num & 0x80000000;\n  if (num == 0) {\n    num = 0x7fffffff;\n  }\n  return num;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_to_positive_08009278",
                "param_1": "num",
                "uVar1": "shiftedBits",
                "uVar2": "difference"
            },
            "calling": [
                "protocol_execute_line",
                "printFloat"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080092c4": {
            "entrypoint": "0x080092c4",
            "current_name": "initialize_memory_080092c4",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initializeMemory_080092c4(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_2000044c; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800c0c0);\n  }\n  for (ptr = &DAT_2000044c; ptr < &DAT_20000f20; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x80092fa;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080092c4": "initialize_memory_080092c4",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "__libc_init_array",
                "main",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_floating_point_08009318",
            "code": "\nlonglong calculateFloatingPoint_08009318(uint input1,uint input2,undefined4 constant1,undefined4 constant2)\n\n{\n  int comparisonResult;\n  uint exponent;\n  uint mask;\n  bool carryCheck;\n  undefined8 result;\n  longlong output;\n  \n  mask = (input2 << 1) >> 0x15;\n  exponent = mask - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,constant2);\n      comparisonResult = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (comparisonResult != 0) {\n        if ((int)input2 < 0) {\n          output = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          output = 0;\n        }\n        else {\n          output = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (exponent & 0xff);\n      output = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,constant2);\n        comparisonResult = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        output = CONCAT44(input2,input1);\n        if (comparisonResult != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (exponent & 0xff));\n          }\n          output = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)exponent < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    output = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,constant2);\n      comparisonResult = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (comparisonResult != 0) {\n        if (0 < (int)input2) {\n          if (exponent == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            exponent = 1 << (0x34 - exponent & 0xff);\n            carryCheck = CARRY4(exponent,input1);\n            input1 = exponent + input1;\n            if (carryCheck != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        output = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    output = CONCAT44(input2,input1);\n    if (exponent == 0x400) {\n      output = __aeabi_dadd();\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_floating_point_08009318",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "constant1",
                "param_4": "constant2",
                "uVar2": "exponent",
                "uVar3": "mask",
                "bVar4": "carryCheck",
                "uVar5": "result",
                "lVar6": "output",
                "iVar1": "comparisonResult"
            },
            "calling": [
                "calculate_trapezoid_for_block",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "calculate_trigonometric_value_08009410",
            "code": "\nundefined4 calculateTrigonometricValue_08009410(undefined4 inputAngle,uint inputFlag)\n\n{\n  undefined4 result;\n  uint angleRemainder;\n  undefined4 remainderVariable1;\n  undefined4 remainderVariable2;\n  undefined4 remainderVariable3;\n  undefined4 remainderVariable4;\n  \n  if (0x3fe921fb < (inputFlag & 0x7fffffff)) {\n    if ((inputFlag & 0x7fffffff) < 0x7ff00000) {\n      angleRemainder = __ieee754_rem_pio2(inputAngle,inputFlag,&remainderVariable1);\n      angleRemainder = angleRemainder & 3;\n      if (angleRemainder == 1) {\n        result = __kernel_sin(remainderVariable1,remainderVariable2,remainderVariable3,remainderVariable4,1);\n      }\n      else if (angleRemainder == 2) {\n        result = __kernel_cos(remainderVariable1,remainderVariable2,remainderVariable3,remainderVariable4);\n      }\n      else if (angleRemainder == 0) {\n        result = __kernel_cos(remainderVariable1,remainderVariable2,remainderVariable3,remainderVariable4);\n      }\n      else {\n        result = __kernel_sin(remainderVariable1,remainderVariable2,remainderVariable3,remainderVariable4,1);\n      }\n    }\n    else {\n      result = __subdf3(inputAngle,inputFlag,inputAngle,inputFlag);\n    }\n    return result;\n  }\n  result = __kernel_cos(inputAngle,inputFlag,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "calculate_trigonometric_value_08009410",
                "param_1": "inputAngle",
                "param_2": "inputFlag",
                "uVar1": "result",
                "uVar2": "angleRemainder",
                "local_28": "remainderVariable1",
                "uStack_24": "remainderVariable2",
                "local_20": "remainderVariable3",
                "uStack_1c": "remainderVariable4"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_cos",
                "__subdf3",
                "__kernel_sin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_floating_point_value_080094c0",
            "code": "\nlonglong calculateFloatingPointValue_080094c0(uint input1,uint input2,undefined4 unknown1,undefined4 unknown2)\n\n{\n  int comparisonResult;\n  uint shiftedDifference;\n  uint shiftedMask;\n  bool carryFlag;\n  undefined8 additionResult;\n  longlong output;\n  \n  shiftedMask = (input2 << 1) >> 0x15;\n  shiftedDifference = shiftedMask - 0x3ff;\n  if ((int)shiftedDifference < 0x14) {\n    if ((int)shiftedDifference < 0) {\n      additionResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,unknown2);\n      comparisonResult = __aeabi_dcmpgt((int)additionResult,(int)((ulonglong)additionResult >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (comparisonResult != 0) {\n        if ((int)input2 < 0) {\n          if ((input1 | input2 & 0x7fffffff) != 0) {\n            input2 = 0xbff00000;\n          }\n          output = (ulonglong)input2 << 0x20;\n        }\n        else {\n          output = 0;\n        }\n      }\n    }\n    else {\n      shiftedMask = 0xfffff >> (shiftedDifference & 0xff);\n      output = CONCAT44(input2,input1);\n      if ((input2 & shiftedMask | input1) != 0) {\n        additionResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,unknown2);\n        comparisonResult = __aeabi_dcmpgt((int)additionResult,(int)((ulonglong)additionResult >> 0x20),0,0);\n        output = CONCAT44(input2,input1);\n        if (comparisonResult != 0) {\n          if ((int)input2 < 0) {\n            input2 = input2 + (0x100000 >> (shiftedDifference & 0xff));\n          }\n          output = (ulonglong)(input2 & ~shiftedMask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shiftedDifference < 0x34) {\n    shiftedMask = 0xffffffff >> (shiftedMask - 0x413 & 0xff);\n    output = CONCAT44(input2,input1);\n    if ((shiftedMask & input1) != 0) {\n      additionResult = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,unknown2);\n      comparisonResult = __aeabi_dcmpgt((int)additionResult,(int)((ulonglong)additionResult >> 0x20),0,0);\n      output = CONCAT44(input2,input1);\n      if (comparisonResult != 0) {\n        if ((int)input2 < 0) {\n          if (shiftedDifference == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shiftedDifference = 1 << (0x34 - shiftedDifference & 0xff);\n            carryFlag = CARRY4(shiftedDifference,input1);\n            input1 = shiftedDifference + input1;\n            if (carryFlag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        output = CONCAT44(input2,input1 & ~shiftedMask);\n      }\n    }\n  }\n  else {\n    output = CONCAT44(input2,input1);\n    if (shiftedDifference == 0x400) {\n      output = __aeabi_dadd();\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_floating_point_value_080094c0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unknown1",
                "param_4": "unknown2",
                "iVar1": "comparisonResult",
                "uVar2": "shiftedDifference",
                "uVar3": "shiftedMask",
                "bVar4": "carryFlag",
                "uVar5": "additionResult",
                "lVar6": "output"
            },
            "calling": [
                "mc_arc",
                "calculate_trapezoid_for_block",
                "__kernel_rem_pio2",
                "mc_dwell"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_product_080095b8",
            "code": "\nint calculate_product_080095b8(uint input_1,uint input_2)\n\n{\n  uint mask;\n  uint shifted_input;\n  uint result;\n  int sign;\n  uint shifted_difference;\n  \n  shifted_input = (input_2 << 1) >> 0x15;\n  shifted_difference = shifted_input - 0x3ff;\n  if ((int)input_2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input_2 & 0xfffff | 0x100000;\n  if ((int)shifted_difference < 0x14) {\n    if ((int)shifted_difference < 0) {\n      if (shifted_difference != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (shifted_difference & 0xff)) >> (0x14 - shifted_difference & 0xff);\n  }\n  else {\n    if (0x1e < shifted_difference) {\n      sign = __aeabi_d2iz();\n      return sign;\n    }\n    if ((int)shifted_difference < 0x34) {\n      mask = 0x80000000 >> (shifted_input - 0x413 & 0xff);\n      if (CARRY4(mask,input_1) != false) {\n        result = result + 1;\n      }\n      result = result << (shifted_input - 0x413 & 0xff);\n      if (shifted_difference != 0x14) {\n        result = result | mask + input_1 >> (0x34 - shifted_difference & 0xff);\n      }\n    }\n    else {\n      result = result << (shifted_input - 0x413 & 0xff) | input_1 << (shifted_input - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_product_080095b8",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "mask",
                "uVar2": "shifted_input",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "shifted_difference"
            },
            "calling": [
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__aeabi_d2iz"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_to_double_08009654",
            "code": "\nlonglong convertToDouble_08009654(uint input1,uint input2)\n\n{\n  uint exponentDifference;\n  uint shiftAmount;\n  longlong result;\n  \n  result = combineValues(input2,input1);\n  shiftAmount = (input2 << 1) >> 0x15;\n  exponentDifference = shiftAmount - 0x3ff;\n  if ((int)exponentDifference < 0x14) {\n    if ((int)exponentDifference < 0) {\n      input2 = input2 & 0x80000000;\n      if (exponentDifference == 0xffffffff) {\n        input2 = input2 | 0x3ff00000;\n      }\n      result = (ulonglong)input2 << 0x20;\n    }\n    else {\n      shiftAmount = 0xfffff >> (exponentDifference & 0xff);\n      result = combineValues(input2,input1);\n      if ((input2 & shiftAmount | input1) != 0) {\n        result = (ulonglong)(input2 + (0x80000 >> (exponentDifference & 0xff)) & ~shiftAmount) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponentDifference < 0x34) {\n    shiftAmount = 0xffffffff >> (shiftAmount - 0x413 & 0xff);\n    if ((input1 & shiftAmount) != 0) {\n      exponentDifference = 1 << (0x33 - exponentDifference & 0xff);\n      if (CHECKCARRY(input1,exponentDifference) != false) {\n        input2 = input2 + 1;\n      }\n      result = combineValues(input2,input1 + exponentDifference & ~shiftAmount);\n    }\n  }\n  else {\n    result = combineValues(input2,input1);\n    if (exponentDifference == 0x400) {\n      result = addExponents();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_to_double_08009654",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "exponentDifference",
                "uVar2": "shiftAmount",
                "lVar3": "result",
                "CARRY4": "CHECKCARRY",
                "__aeabi_dadd": "addExponents",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "settings_store_global_setting"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "calculate_trigonometric_value_080096e8",
            "code": "\nundefined4 calculate_trigonometric_value_080096e8(undefined4 input_value,uint input_flag)\n\n{\n  undefined4 result;\n  uint remainder;\n  undefined4 temp_var_1;\n  undefined4 temp_var_2;\n  undefined4 temp_var_3;\n  undefined4 temp_var_4;\n  \n  if (0x3fe921fb < (input_flag & 0x7fffffff)) {\n    if ((input_flag & 0x7fffffff) < 0x7ff00000) {\n      remainder = __ieee754_rem_pio2(input_value,input_flag,&temp_var_1);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = __kernel_cos(temp_var_1,temp_var_2,temp_var_3,temp_var_4);\n      }\n      else if (remainder == 2) {\n        result = __kernel_sin(temp_var_1,temp_var_2,temp_var_3,temp_var_4,1);\n      }\n      else if (remainder == 0) {\n        result = __kernel_sin(temp_var_1,temp_var_2,temp_var_3,temp_var_4,1);\n      }\n      else {\n        result = __kernel_cos(temp_var_1,temp_var_2,temp_var_3,temp_var_4);\n      }\n    }\n    else {\n      result = __subdf3(input_value,input_flag,input_value,input_flag);\n    }\n    return result;\n  }\n  result = __kernel_sin(input_value,input_flag,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "calculate_trigonometric_value_080096e8",
                "param_1": "input_value",
                "param_2": "input_flag",
                "uVar1": "result",
                "uVar2": "remainder",
                "local_28": "temp_var_1",
                "uStack_24": "temp_var_2",
                "local_20": "temp_var_3",
                "uStack_1c": "temp_var_4"
            },
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_rem_pio2",
                "__kernel_cos",
                "__subdf3",
                "__kernel_sin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "extract_bits_08009798",
            "code": "\nlonglong extract_bits_08009798(uint input_1,uint input_2,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  uint bit_difference;\n  uint shifted_bits;\n  longlong result;\n  \n  shifted_bits = (input_2 << 1) >> 0x15;\n  bit_difference = shifted_bits - 0x3ff;\n  if ((int)bit_difference < 0x14) {\n    if ((int)bit_difference < 0) {\n      return ((ulonglong)input_2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input_2 & ~(0xfffff >> (bit_difference & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)bit_difference < 0x34) {\n      return CONCAT44(input_2,input_1 & ~(0xffffffffU >> (shifted_bits - 0x413 & 0xff)));\n    }\n    if (bit_difference != 0x400) {\n      return CONCAT44(input_2,input_1);\n    }\n    result = __aeabi_dadd(input_1,input_2,input_1,input_2,unused_param_2);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "extract_bits_08009798",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "bit_difference",
                "uVar2": "shifted_bits",
                "lVar3": "result"
            },
            "calling": [
                "settings_store_global_setting",
                "protocol_execute_line",
                "gc_execute_line"
            ],
            "called": [
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009818": {
            "entrypoint": "0x08009818",
            "current_name": "FUN_08009818",
            "code": "\nuint __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  \n  uVar4 = param_4 & 0x7fffffff;\n  if (((uVar4 | (-param_3 | param_3) >> 0x1f) < 0x7ff00001) &&\n     (uVar5 = param_2 & 0x7fffffff, (uVar5 | (-param_1 | param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((param_4 + 0xc0100000 | param_3) == 0) {\n      uVar4 = atan();\n      return uVar4;\n    }\n    uVar3 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n    if ((uVar5 | param_1) == 0) {\n      if (uVar3 == 2) {\n        param_1 = 0x54442d18;\n      }\n      else if (uVar3 == 3) {\n        param_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((uVar4 | param_3) != 0) {\n        if (uVar4 == 0x7ff00000) {\n          uVar3 = uVar3 - 1;\n          if (uVar5 == 0x7ff00000) {\n            if (uVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + uVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (uVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + uVar3 * 8);\n          }\n          return 0;\n        }\n        if (uVar5 != 0x7ff00000) {\n          iVar1 = (int)(uVar5 - uVar4) >> 0x14;\n          if ((int)(uVar5 - uVar4) < 0x3d00000) {\n            if (((int)param_4 < 0) && (iVar1 + 0x3c < 0 != SCARRY4(iVar1,0x3c))) {\n              uVar6 = 0;\n            }\n            else {\n              __divdf3(param_1,param_2,param_3,param_4,param_4);\n              fabs();\n              uVar6 = atan();\n            }\n          }\n          else {\n            uVar6 = 0x3ff921fb54442d18;\n          }\n          uVar2 = (undefined4)((ulonglong)uVar6 >> 0x20);\n          uVar4 = (uint)uVar6;\n          if (uVar3 == 1) {\n            return uVar4;\n          }\n          if (uVar3 == 2) {\n            uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n            uVar4 = __subdf3(0x54442d18,0x400921fb,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n            return uVar4;\n          }\n          if (uVar3 == 0) {\n            return uVar4;\n          }\n          uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n          uVar4 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),0x54442d18,0x400921fb);\n          return uVar4;\n        }\n      }\n      if ((int)param_2 < 0) {\n        param_1 = 0x54442d18;\n      }\n      else {\n        param_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    param_1 = __aeabi_dadd(param_3,param_4,param_1,param_2);\n  }\n  return param_1;\n}\n\n",
            "renaming": {},
            "calling": [
                "mc_arc"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_hypotenuse_0800981c",
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 side_a,undefined4 side_b,undefined4 side_c,undefined4 side_d)\n\n{\n  int is_finite;\n  undefined4 *errno_ptr;\n  int *errno_ptr_int;\n  undefined8 result;\n  undefined4 error_result;\n  char *error_msg;\n  undefined4 side_a_copy;\n  undefined4 side_b_copy;\n  undefined4 side_c_copy;\n  undefined4 side_d_copy;\n  undefined4 exponent_bits;\n  undefined4 mantissa_bits;\n  int finite_result;\n  \n  result = __ieee754_hypot();\n  if (DAT_20000014 == -1) {\n    return result;\n  }\n  finite_result = finite();\n  if (finite_result != 0) {\n    return result;\n  }\n  is_finite = finite(side_a,side_b);\n  if (is_finite == 0) {\n    return result;\n  }\n  is_finite = finite(side_c,side_d);\n  if (is_finite == 0) {\n    return result;\n  }\n  error_result = 3;\n  error_msg = \"hypot\";\n  side_a_copy = side_a;\n  side_b_copy = side_b;\n  side_c_copy = side_c;\n  side_d_copy = side_d;\n  if (DAT_20000014 == '\\0') {\n    exponent_bits = 0xe0000000;\n    mantissa_bits = 0x47efffff;\nLAB_080098aa:\n    is_finite = matherr(&error_result);\n    if (is_finite != 0) goto LAB_08009896;\n  }\n  else {\n    exponent_bits = 0;\n    mantissa_bits = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  errno_ptr = (undefined4 *)__errno();\n  *errno_ptr = 0x22;\nLAB_08009896:\n  result = CONCAT44(mantissa_bits,exponent_bits);\n  if (finite_result != 0) {\n    errno_ptr_int = (int *)__errno();\n    result = CONCAT44(mantissa_bits,exponent_bits);\n    *errno_ptr_int = finite_result;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "param_1": "side_a",
                "param_2": "side_b",
                "param_3": "side_c",
                "param_4": "side_d",
                "iVar1": "is_finite",
                "puVar2": "errno_ptr",
                "piVar3": "errno_ptr_int",
                "uVar4": "result",
                "local_50": "error_result",
                "pcStack_4c": "error_msg",
                "local_48": "side_a_copy",
                "uStack_44": "side_b_copy",
                "local_40": "side_c_copy",
                "uStack_3c": "side_d_copy",
                "local_38": "exponent_bits",
                "uStack_34": "mantissa_bits",
                "local_30": "finite_result"
            },
            "calling": [
                "mc_arc",
                "gc_execute_line"
            ],
            "called": [
                "matherr",
                "__errno",
                "__ieee754_hypot",
                "finite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "calculate_square_root_080098d0",
            "code": "\nundefined4 calculateSquareRoot_080098d0(undefined4 input1,undefined4 input2)\n\n{\n  char flag;\n  undefined4 result;\n  int comparisonResult;\n  undefined4 *errorPointer;\n  int *errnoPointer;\n  undefined4 localFlag;\n  undefined *localPointer;\n  undefined4 localInput1;\n  undefined4 localInput2;\n  undefined4 localInput1Copy;\n  undefined4 localInput2Copy;\n  undefined8 localResult;\n  int localError;\n  \n  result = __ieee754_sqrt();\n  flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (localError = __unorddf2(input1,input2,input1,input2), localError != 0)) ||\n     (comparisonResult = __aeabi_dcmplt(input1,input2,0,0), comparisonResult == 0)) {\n    return result;\n  }\n  localFlag = 1;\n  localPointer = &DAT_0800be5c;\n  localInput1 = input1;\n  localInput2 = input2;\n  localInput1Copy = input1;\n  localInput2Copy = input2;\n  if (flag == '\\0') {\n    localResult = 0;\nLAB_0800996c:\n    comparisonResult = matherr(&localFlag);\n    if (comparisonResult != 0) goto joined_r0x0800997a;\n  }\n  else {\n    localResult = __divdf3(0,0,0,0);\n    if (flag != '\\x02') goto LAB_0800996c;\n  }\n  errorPointer = (undefined4 *)__errno();\n  *errorPointer = 0x21;\njoined_r0x0800997a:\n  if (localError != 0) {\n    errnoPointer = (int *)__errno();\n    *errnoPointer = localError;\n  }\n  return (undefined4)localResult;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "calculate_square_root_080098d0",
                "param_1": "input1",
                "param_2": "input2",
                "cVar1": "flag",
                "uVar2": "result",
                "iVar3": "comparisonResult",
                "puVar4": "errorPointer",
                "piVar5": "errnoPointer",
                "local_50": "localFlag",
                "local_4c": "localPointer",
                "local_48": "localInput1",
                "uStack_44": "localInput2",
                "local_40": "localInput1Copy",
                "uStack_3c": "localInput2Copy",
                "local_38": "localResult",
                "local_30": "localError"
            },
            "calling": [
                "gc_execute_line",
                "max_allowable_speed",
                "homing_cycle",
                "plan_buffer_line"
            ],
            "called": [
                "__ieee754_sqrt",
                "matherr",
                "__errno",
                "__unorddf2",
                "__divdf3",
                "__aeabi_dcmplt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_inverse_tangent_08009990",
            "code": "\nuint calculate_inverse_tangent_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int temp_var;\n  undefined4 temp_result;\n  uint temp_flag;\n  uint param_4_masked;\n  uint param_2_masked;\n  undefined8 result;\n  \n  param_4_masked = input_4 & 0x7fffffff;\n  if (((param_4_masked | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (param_2_masked = input_2 & 0x7fffffff, (param_2_masked | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      param_4_masked = arctangent();\n      return param_4_masked;\n    }\n    temp_flag = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((param_2_masked | input_1) == 0) {\n      if (temp_flag == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (temp_flag == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((param_4_masked | input_3) != 0) {\n        if (param_4_masked == 0x7ff00000) {\n          temp_flag = temp_flag - 1;\n          if (param_2_masked == 0x7ff00000) {\n            if (temp_flag < 3) {\n              return *(uint *)(&DAT_0800be68 + temp_flag * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp_flag < 3) {\n            return *(uint *)(&DAT_0800be80 + temp_flag * 8);\n          }\n          return 0;\n        }\n        if (param_2_masked != 0x7ff00000) {\n          temp_var = (int)(param_2_masked - param_4_masked) >> 0x14;\n          if ((int)(param_2_masked - param_4_masked) < 0x3d00000) {\n            if (((int)input_4 < 0) && (temp_var + 0x3c < 0 != signed_overflow_check(temp_var,0x3c))) {\n              result = 0;\n            }\n            else {\n              divide_double(input_1,input_2,input_3,input_4,input_4);\n              absolute_value();\n              result = arctangent();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          temp_result = (undefined4)((ulonglong)result >> 0x20);\n          param_4_masked = (uint)result;\n          if (temp_flag == 1) {\n            return param_4_masked;\n          }\n          if (temp_flag == 2) {\n            result = subtract_double(param_4_masked,temp_result,0x33145c07,0x3ca1a626);\n            param_4_masked = subtract_double(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return param_4_masked;\n          }\n          if (temp_flag == 0) {\n            return param_4_masked;\n          }\n          result = subtract_double(param_4_masked,temp_result,0x33145c07,0x3ca1a626);\n          param_4_masked = subtract_double((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return param_4_masked;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = add_double(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_inverse_tangent_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "temp_var",
                "uVar2": "temp_result",
                "uVar3": "temp_flag",
                "uVar4": "param_4_masked",
                "uVar5": "param_2_masked",
                "uVar6": "result",
                "__divdf3": "divide_double",
                "__subdf3": "subtract_double",
                "atan": "arctangent",
                "fabs": "absolute_value",
                "SCARRY4": "signed_overflow_check",
                "__aeabi_dadd": "add_double"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "__aeabi_dadd",
                "atan",
                "fabs",
                "__divdf3",
                "__subdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_square_root_08009b24",
            "code": "\nuint calculateSquareRoot_08009b24(uint num1,uint num2,uint num3,uint num4)\n\n{\n  undefined4 result1;\n  int comparisonResult;\n  uint result;\n  int intResult;\n  undefined4 temp1;\n  int temp2;\n  uint maxNum;\n  undefined4 uVar8;\n  undefined4 uVar9;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined8 temp5;\n  undefined8 temp6;\n  int localVar;\n  \n  num2 = num2 & 0x7fffffff;\n  num4 = num4 & 0x7fffffff;\n  result = num1;\n  maxNum = num2;\n  if (num2 < num4) {\n    result = num3;\n    num3 = num1;\n    maxNum = num4;\n    num4 = num2;\n  }\n  if (0x3c00000 < (int)(maxNum - num4)) {\n    result = __aeabi_dadd(result,maxNum,num3,num4);\n    return result;\n  }\n  if (maxNum < 0x5f300001) {\n    localVar = 0;\n  }\n  else {\n    if (0x7fefffff < maxNum) {\n      if ((maxNum & 0xfffff | result) != 0) {\n        result = __aeabi_dadd(result,maxNum,num3,num4);\n      }\n      if ((num4 ^ 0x7ff00000 | num3) != 0) {\n        return result;\n      }\n      return num3;\n    }\n    maxNum = maxNum + 0xda800000;\n    num4 = num4 + 0xda800000;\n    localVar = 600;\n  }\n  temp4 = CONCAT44(maxNum,result);\n  temp3 = CONCAT44(num4,num3);\n  if ((int)num4 < 0x20b00000) {\n    if ((int)num4 < 0x100000) {\n      if ((num4 | num3) == 0) {\n        return result;\n      }\n      temp3 = __muldf3(num3,num4,0,0x7fd00000);\n      temp4 = __muldf3(result,maxNum,0,0x7fd00000);\n      localVar = localVar + -0x3fe;\n    }\n    else {\n      maxNum = maxNum + 0x25800000;\n      temp4 = CONCAT44(maxNum,result);\n      num4 = num4 + 0x25800000;\n      temp3 = CONCAT44(num4,num3);\n      localVar = localVar + -600;\n    }\n  }\n  uVar9 = (undefined4)((ulonglong)temp4 >> 0x20);\n  uVar8 = (undefined4)temp4;\n  temp2 = (int)((ulonglong)temp3 >> 0x20);\n  temp1 = (undefined4)temp3;\n  temp3 = __subdf3(uVar8,uVar9,temp1,temp2);\n  intResult = (int)((ulonglong)temp3 >> 0x20);\n  result1 = (undefined4)temp3;\n  comparisonResult = __aeabi_dcmplt(temp1,temp2,result1,intResult);\n  if (comparisonResult == 0) {\n    temp3 = __muldf3(0,num4,0);\n    temp4 = __muldf3(result1,intResult + -0x80000000,result1,intResult);\n    temp5 = __aeabi_dadd(uVar8,uVar9,uVar8,uVar9);\n    temp5 = __subdf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),0,maxNum + 0x100000);\n    temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp1,temp2);\n    temp6 = __subdf3(temp1,temp2,0,num4);\n    temp6 = __muldf3((int)temp6,(int)((ulonglong)temp6 >> 0x20),0,maxNum + 0x100000);\n    temp5 = __aeabi_dadd((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp6,\n                          (int)((ulonglong)temp6 >> 0x20));\n    temp4 = __subdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                      (int)((ulonglong)temp5 >> 0x20));\n    __subdf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n             (int)((ulonglong)temp4 >> 0x20));\n    temp3 = __ieee754_sqrt();\n  }\n  else {\n    temp3 = __muldf3(0,maxNum,0,maxNum);\n    temp4 = __muldf3(temp1,temp2 + -0x80000000,temp1,temp2);\n    temp5 = __aeabi_dadd(uVar8,uVar9,0,maxNum);\n    temp6 = __subdf3(uVar8,uVar9,0,maxNum);\n    temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp6,\n                      (int)((ulonglong)temp6 >> 0x20));\n    temp4 = __subdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                      (int)((ulonglong)temp5 >> 0x20));\n    __subdf3((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n             (int)((ulonglong)temp4 >> 0x20));\n    temp3 = __ieee754_sqrt();\n  }\n  result = (uint)temp3;\n  if (localVar != 0) {\n    result = __muldf3(result,(int)((ulonglong)temp3 >> 0x20),0,localVar * 0x100000 + 0x3ff00000);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_square_root_08009b24",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "uVar1": "result1",
                "iVar2": "comparisonResult",
                "uVar3": "result",
                "iVar4": "intResult",
                "uVar5": "temp1",
                "iVar6": "temp2",
                "uVar7": "maxNum",
                "uVar10": "temp3",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "uVar13": "temp6",
                "local_3c": "localVar"
            },
            "calling": [
                "hypot"
            ],
            "called": [
                "__ieee754_sqrt",
                "__aeabi_dadd",
                "__subdf3",
                "__muldf3",
                "__aeabi_dcmplt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "calculate_trig_ratio_08009d78",
            "code": "\nint calculate_trig_ratio_08009d78(undefined4 input_value,uint input_flag,undefined8 *output_values)\n\n{\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  undefined4 temp_var5;\n  undefined4 temp_var6;\n  undefined4 temp_var7;\n  uint abs_input_flag;\n  int angle;\n  undefined8 result1;\n  undefined8 result2;\n  undefined8 result3;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  \n  abs_input_flag = input_flag & 0x7fffffff;\n  if (abs_input_flag < 0x3fe921fc) {\n    *(undefined4 *)output_values = input_value;\n    *(uint *)((int)output_values + 4) = input_flag;\n    *(undefined4 *)(output_values + 1) = 0;\n    *(undefined4 *)((int)output_values + 0xc) = 0;\n    return 0;\n  }\n  if (abs_input_flag < 0x4002d97c) {\n    if ((int)input_flag < 1) {\n      result1 = __aeabi_dadd(input_value,input_flag,0x54400000,0x3ff921fb);\n      temp_var3 = (undefined4)((ulonglong)result1 >> 0x20);\n      temp_var1 = (undefined4)result1;\n      if (abs_input_flag != 0x3ff921fb) {\n        result1 = __aeabi_dadd(temp_var1,temp_var3,0x1a626331,0x3dd0b461);\n        *output_values = result1;\n        result1 = __subdf3(temp_var1,temp_var3);\n        result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0x1a626331,0x3dd0b461);\n        output_values[1] = result1;\n        return -1;\n      }\n      result1 = __aeabi_dadd(temp_var1,temp_var3,0x1a600000,0x3dd0b461);\n      temp_var1 = (undefined4)((ulonglong)result1 >> 0x20);\n      result2 = __aeabi_dadd((int)result1,temp_var1,0x2e037073,0x3ba3198a);\n      *output_values = result2;\n      result1 = __subdf3((int)result1,temp_var1);\n      result1 = __aeabi_dadd((int)result1,(int)((ulonglong)result1 >> 0x20),0x2e037073,0x3ba3198a);\n      output_values[1] = result1;\n      return -1;\n    }\n    result1 = __subdf3();\n    temp_var3 = (undefined4)((ulonglong)result1 >> 0x20);\n    temp_var1 = (undefined4)result1;\n    if (abs_input_flag != 0x3ff921fb) {\n      result1 = __subdf3(temp_var1,temp_var3,0x1a626331,0x3dd0b461);\n      *output_values = result1;\n      result1 = __subdf3(temp_var1,temp_var3);\n      result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),0x1a626331,0x3dd0b461);\n      output_values[1] = result1;\n      return 1;\n    }\n    result1 = __subdf3(temp_var1,temp_var3,0x1a600000,0x3dd0b461);\n    temp_var1 = (undefined4)((ulonglong)result1 >> 0x20);\n    result2 = __subdf3((int)result1,temp_var1,0x2e037073,0x3ba3198a);\n    *output_values = result2;\n    result1 = __subdf3((int)result1,temp_var1);\n    result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),0x2e037073,0x3ba3198a);\n    output_values[1] = result1;\n    return 1;\n  }\n  if (0x413921fb < abs_input_flag) {\n    if (0x7fefffff < abs_input_flag) {\n      result1 = __subdf3(input_value,input_flag,input_value,input_flag);\n      output_values[1] = result1;\n      *output_values = result1;\n      return 0;\n    }\n    angle = ((int)abs_input_flag >> 0x14) + -0x416;\n    __aeabi_d2iz();\n    local_var3 = __aeabi_i2d();\n    result1 = __subdf3(input_value,abs_input_flag + angle * -0x100000,(int)local_var3,\n                      (int)((ulonglong)local_var3 >> 0x20));\n    result1 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),0,0x41700000);\n    __aeabi_d2iz();\n    local_var4 = __aeabi_i2d();\n    result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20));\n    local_var5 = __muldf3((int)result1,(int)((ulonglong)result1 >> 0x20),0,0x41700000);\n    __aeabi_dcmpeq((int)local_var5,(int)((ulonglong)local_var5 >> 0x20),0,0);\n    angle = __kernel_rem_pio2(&local_var3,output_values,angle);\n    if (-1 < (int)input_flag) {\n      return angle;\n    }\n    *(int *)((int)output_values + 4) = *(int *)((int)output_values + 4) + -0x80000000;\n    *(int *)((int)output_values + 0xc) = *(int *)((int)output_values + 0xc) + -0x80000000;\n    return -angle;\n  }\n  result1 = fabs();\n  temp_var3 = (undefined4)((ulonglong)result1 >> 0x20);\n  result2 = __muldf3((int)result1,temp_var3,0x6dc9c883,0x3fe45f30);\n  __aeabi_dadd((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x3fe00000);\n  angle = __aeabi_d2iz();\n  result2 = __aeabi_i2d();\n  temp_var4 = (undefined4)((ulonglong)result2 >> 0x20);\n  temp_var1 = (undefined4)result2;\n  result2 = __muldf3(temp_var1,temp_var4,0x54400000,0x3ff921fb);\n  result1 = __subdf3((int)result1,temp_var3,(int)result2,(int)((ulonglong)result2 >> 0x20));\n  temp_var5 = (undefined4)((ulonglong)result1 >> 0x20);\n  temp_var3 = (undefined4)result1;\n  result2 = __muldf3(temp_var1,temp_var4,0x1a626331,0x3dd0b461);\n  if ((0x1f < angle) || (*(uint *)(&DAT_0800be98 + (angle + -1) * 4) == abs_input_flag)) {\n    result3 = __subdf3(temp_var3,temp_var5,(int)result2,(int)((ulonglong)result2 >> 0x20));\n    if ((int)((abs_input_flag >> 0x14) - ((uint)((int)((ulonglong)result3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    result2 = __muldf3(temp_var1,temp_var4,0x1a600000,0x3dd0b461);\n    temp_var6 = (undefined4)((ulonglong)result2 >> 0x20);\n    result1 = __subdf3(temp_var3,temp_var5,(int)result2,temp_var6);\n    temp_var7 = (undefined4)((ulonglong)result1 >> 0x20);\n    temp_var2 = (undefined4)result1;\n    result3 = __subdf3(temp_var3,temp_var5,temp_var2,temp_var7);\n    result2 = __subdf3((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result2,temp_var6);\n    result3 = __muldf3(temp_var1,temp_var4,0x2e037073,0x3ba3198a);\n    result2 = __subdf3((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result2,\n                      (int)((ulonglong)result2 >> 0x20));\n    result3 = __subdf3(temp_var2,temp_var7,(int)result2,(int)((ulonglong)result2 >> 0x20));\n    if ((int)(((int)abs_input_flag >> 0x14) - ((uint)((int)((ulonglong)result3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    result2 = __muldf3(temp_var1,temp_var4,0x2e000000,0x3ba3198a);\n    temp_var3 = (undefined4)((ulonglong)result2 >> 0x20);\n    result1 = __subdf3(temp_var2,temp_var7,(int)result2,temp_var3);\n    result3 = __subdf3(temp_var2,temp_var7);\n    result2 = __subdf3((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result2,temp_var3);\n    result3 = __muldf3(temp_var1,temp_var4,0x252049c1,0x397b839a);\n    result2 = __subdf3((int)result3,(int)((ulonglong)result3 >> 0x20),(int)result2,\n                      (int)((ulonglong)result2 >> 0x20));\n  }\n  result3 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                    (int)((ulonglong)result2 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (undefined4)((ulonglong)result1 >> 0x20);\n  local_var1 = (undefined4)result1;\n  *output_values = result3;\n  result1 = __subdf3(local_var1,local_var2);\n  result1 = __subdf3((int)result1,(int)((ulonglong)result1 >> 0x20),(int)result2,\n                    (int)((ulonglong)result2 >> 0x20));\n  output_values[1] = result1;\n  if ((int)input_flag < 0) {\n    *(int *)output_values = (int)result3;\n    *(int *)((int)output_values + 4) = (int)((ulonglong)result3 >> 0x20) + -0x80000000;\n    *(int *)(output_values + 1) = (int)result1;\n    *(int *)((int)output_values + 0xc) = (int)((ulonglong)result1 >> 0x20) + -0x80000000;\n    angle = -angle;\n  }\n  return angle;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "calculate_trig_ratio_08009d78",
                "param_1": "input_value",
                "param_2": "input_flag",
                "param_3": "output_values",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp_var6",
                "uVar7": "temp_var7",
                "uVar8": "abs_input_flag",
                "iVar9": "angle",
                "uVar10": "result1",
                "uVar11": "result2",
                "uVar12": "result3",
                "local_50": "local_var1",
                "uStack_4c": "local_var2",
                "local_40": "local_var3",
                "local_38": "local_var4",
                "local_30": "local_var5"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "fabs",
                "__aeabi_i2d",
                "__aeabi_dcmpeq",
                "__kernel_rem_pio2",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_sum_0800a1bc",
            "code": "\nuint calculate_sum_0800a1bc(uint num_1,uint num_2)\n\n{\n  uint shift_amount;\n  int counter;\n  uint remainder;\n  undefined4 temp;\n  uint shift;\n  uint mask;\n  uint result;\n  uint shifted_num;\n  uint temp_num;\n  int bit_counter;\n  uint temp_result;\n  uint msb_position;\n  undefined8 product;\n  \n  if ((~num_2 & 0x7ff00000) == 0) {\n    product = __muldf3(num_1,num_2,num_1,num_2);\n    result = __aeabi_dadd((int)product,(int)((ulonglong)product >> 0x20),num_1,num_2);\n    return result;\n  }\n  if ((int)num_2 < 1) {\n    if ((num_2 & 0x7fffffff | num_1) == 0) {\n      return num_1;\n    }\n    if (num_2 != 0) {\n      product = __subdf3(num_1,num_2,num_1);\n      temp = (undefined4)((ulonglong)product >> 0x20);\n      result = __divdf3((int)product,temp,(int)product,temp);\n      return result;\n    }\n    do {\n      temp_num = num_1;\n      result = temp_num >> 0xb;\n      num_2 = num_2 - 0x15;\n      num_1 = temp_num << 0x15;\n    } while (result == 0);\n    shift_amount = num_2;\n    if (-1 < (int)temp_num) goto LAB_0800a290;\n    msb_position = 0x20;\n    shift = 0xffffffff;\n    temp_num = num_1;\n  }\n  else {\n    shift_amount = (int)num_2 >> 0x14;\n    result = num_2;\n    temp_num = num_1;\n    if (shift_amount != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp_num = 0;\n    msb_position = result;\n    do {\n      shift = temp_num;\n      result = msb_position << 1;\n      bit_counter = msb_position << 0xc;\n      temp_num = shift + 1;\n      msb_position = result;\n    } while (-1 < bit_counter);\n    msb_position = 0x20 - temp_num;\n    num_2 = shift_amount;\n    temp_num = num_1 << (temp_num & 0xff);\n  }\n  result = num_1 >> (msb_position & 0xff) | result;\n  shift_amount = num_2 - shift;\nLAB_0800a1da:\n  result = result & 0xfffff | 0x100000;\n  if (-1 < (int)(shift_amount << 0x1f)) {\n    result = result * 2 - ((int)temp_num >> 0x1f);\n    temp_num = temp_num << 1;\n  }\n  msb_position = 0;\n  result = result * 2 - ((int)temp_num >> 0x1f);\n  temp_num = temp_num << 1;\n  shift_amount = 0;\n  bit_counter = 0x16;\n  shift = 0x200000;\n  do {\n    counter = shift_amount + shift;\n    if (counter <= (int)result) {\n      result = result - counter;\n      shift_amount = counter + shift;\n      msb_position = msb_position + shift;\n    }\n    bit_counter = bit_counter + -1;\n    result = result * 2 - ((int)temp_num >> 0x1f);\n    shift = shift >> 1;\n    temp_num = temp_num << 1;\n  } while (bit_counter != 0);\n  counter = 0x20;\n  mask = 0x80000000;\n  bit_counter = 0;\n  shift = 0;\n  do {\n    remainder = mask + bit_counter;\n    temp_result = shift_amount;\n    if ((int)shift_amount < (int)result) {\n      if ((int)remainder < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(remainder + mask)) {\n          temp_result = shift_amount + 1;\n        }\n      }\n      shifted_num = result - shift_amount;\n      shift_amount = temp_result;\n      if (temp_num < remainder) {\n        shifted_num = shifted_num - 1;\n      }\nLAB_0800a262:\n      bit_counter = remainder + mask;\n      temp_num = temp_num - remainder;\n      shift = shift + mask;\n      result = shifted_num;\n    }\n    else if ((result == shift_amount) && (remainder <= temp_num)) {\n      if ((int)remainder < 0) goto LAB_0800a26a;\n      shifted_num = 0;\n      shift_amount = result;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    mask = mask >> 1;\n    result = result * 2 - ((int)temp_num >> 0x1f);\n    temp_num = temp_num << 1;\n    if (counter == 0) {\n      if ((result | temp_num) == 0) {\n        shift = shift >> 1;\n      }\n      else if (shift == 0xffffffff) {\n        msb_position = msb_position + 1;\n        shift = 0;\n      }\n      else {\n        shift = shift + 1 >> 1;\n      }\n      if ((msb_position & 1) != 0) {\n        shift = shift | 0x80000000;\n      }\n      return shift;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_sum_0800a1bc",
                "param_1": "num_1",
                "param_2": "num_2",
                "uVar1": "shift_amount",
                "iVar2": "counter",
                "uVar3": "remainder",
                "uVar4": "temp",
                "uVar5": "shift",
                "uVar6": "mask",
                "uVar7": "result",
                "uVar8": "shifted_num",
                "uVar9": "temp_num",
                "iVar10": "bit_counter",
                "uVar11": "temp_result",
                "uVar12": "msb_position",
                "uVar13": "product"
            },
            "calling": [
                "sqrt",
                "__ieee754_hypot"
            ],
            "called": [
                "__aeabi_dadd",
                "__divdf3",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_polynomial_0800a348",
            "code": "\nundefined4 calculatePolynomial_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint absInput2;\n  undefined8 tempResult1;\n  undefined8 tempResult2;\n  undefined8 tempResult3;\n  undefined4 subResult1;\n  undefined4 subResult2;\n  undefined4 subResult3;\n  undefined4 subResult4;\n  \n  absInput2 = input2 & 0x7fffffff;\n  if (absInput2 < 0x3e400000) {\n    result1 = __aeabi_d2iz();\n    if (result1 == 0) {\n      return 0;\n    }\n    tempResult1 = __muldf3(input1,input2,input1,input2);\n    result3 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    result2 = (undefined4)tempResult1;\n    tempResult2 = __muldf3(result2,result3,0xbe8838d4,0xbda8fae9);\n    tempResult2 = __aeabi_dadd((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n    tempResult2 = __subdf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x809c52ad,0x3e927e4f);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n    tempResult2 = __aeabi_dadd((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x19cb1590,0x3efa01a0);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n    tempResult2 = __subdf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x16c15177,0x3f56c16c);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n    tempResult2 = __aeabi_dadd((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x5555554c,0x3fa55555);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n  }\n  else {\n    tempResult1 = __muldf3(input1,input2,input1,input2);\n    result3 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n    result2 = (undefined4)tempResult1;\n    tempResult2 = __muldf3(result2,result3,0xbe8838d4,0xbda8fae9);\n    tempResult2 = __aeabi_dadd((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n    tempResult2 = __subdf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x809c52ad,0x3e927e4f);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n    tempResult2 = __aeabi_dadd((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x19cb1590,0x3efa01a0);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n    tempResult2 = __subdf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x16c15177,0x3f56c16c);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n    tempResult2 = __aeabi_dadd((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),0x5555554c,0x3fa55555);\n    tempResult2 = __muldf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),result2,result3);\n    if (0x3fd33332 < absInput2) {\n      if (absInput2 < 0x3fe90001) {\n        result1 = absInput2 - 0x200000;\n        tempResult1 = __subdf3(0,0x3ff00000,0,result1);\n      }\n      else {\n        result1 = 0x3fd20000;\n        tempResult1 = 0x3fe7000000000000;\n      }\n      subResult4 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n      subResult3 = (undefined4)tempResult1;\n      tempResult1 = __muldf3(result2,result3,0,0x3fe00000);\n      tempResult1 = __subdf3((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),0,result1);\n      tempResult2 = __muldf3(result2,result3,(int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20));\n      tempResult3 = __muldf3(input1,input2,input3,input4);\n      tempResult2 = __subdf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult3,\n                       (int)((ulonglong)tempResult3 >> 0x20));\n      tempResult1 = __subdf3((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult2,\n                       (int)((ulonglong)tempResult2 >> 0x20));\n      result2 = __subdf3(subResult3,subResult4,(int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n      return result2;\n    }\n  }\n  subResult2 = (undefined4)((ulonglong)tempResult2 >> 0x20);\n  subResult1 = (undefined4)tempResult2;\n  result2 = (undefined4)((ulonglong)tempResult1 >> 0x20);\n  tempResult2 = __muldf3((int)tempResult1,result2,0,0x3fe00000);\n  tempResult1 = __muldf3((int)tempResult1,result2,subResult1,subResult2);\n  tempResult3 = __muldf3(input1,input2,input3,input4);\n  tempResult1 = __subdf3((int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20),(int)tempResult3,\n                   (int)((ulonglong)tempResult3 >> 0x20));\n  tempResult1 = __subdf3((int)tempResult2,(int)((ulonglong)tempResult2 >> 0x20),(int)tempResult1,\n                   (int)((ulonglong)tempResult1 >> 0x20));\n  result2 = __subdf3(0,0x3ff00000,(int)tempResult1,(int)((ulonglong)tempResult1 >> 0x20));\n  return result2;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_polynomial_0800a348",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "absInput2",
                "uVar5": "tempResult1",
                "uVar6": "tempResult2",
                "uVar7": "tempResult3",
                "local_30": "subResult1",
                "uStack_2c": "subResult2",
                "local_28": "subResult3",
                "uStack_24": "subResult4"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "FUNC_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint *puVar5;\n  undefined4 uVar6;\n  uint **ppuVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 *puVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  uint *puVar13;\n  int iVar14;\n  int iVar15;\n  undefined8 *puVar16;\n  int iVar17;\n  undefined4 *puVar18;\n  undefined8 *puVar19;\n  undefined4 uVar20;\n  int iVar21;\n  undefined8 *puVar22;\n  undefined4 *puVar23;\n  bool bVar24;\n  undefined8 uVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 *local_284;\n  int local_280;\n  int local_270;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined8 local_168;\n  int local_160 [38];\n  undefined8 uStack_c8;\n  \n  iVar15 = *(int *)(&DAT_0800c060 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (param_3 + -3) / 0x18;\n    local_270 = (local_26c + 1) * -0x18;\n  }\n  else {\n    local_270 = -0x18;\n    local_26c = 0;\n  }\n  local_270 = param_3 + local_270;\n  iVar17 = local_26c - iVar9;\n  if (-1 < iVar15 + iVar9) {\n    iVar21 = iVar15 + iVar9 + 1 + iVar17;\n    puVar16 = &uStack_208;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)puVar16 = 0;\n        *(undefined4 *)((int)puVar16 + 4) = 0;\n        puVar16 = puVar16 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      uVar26 = __aeabi_i2d(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  puVar10 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar15) {\n    puVar22 = &uStack_208 + param_4;\n    iVar17 = iVar9;\n    puVar16 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar23 = puVar10;\n        puVar19 = puVar22;\n        do {\n          puVar18 = puVar23 + 2;\n          uVar25 = __muldf3(*puVar18,puVar23[3],*(undefined4 *)(puVar19 + -1),\n                            *(undefined4 *)((int)puVar19 + -4));\n          uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          puVar23 = puVar18;\n          puVar19 = puVar19 + -1;\n        } while (puVar18 != puVar10 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar22 = puVar22 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_260[0] = local_258 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    uVar26 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&uStack_c8 + iVar17));\n    if (0 < iVar17) {\n      puVar16 = &uStack_c8 + iVar17;\n      puVar5 = local_258;\n      do {\n        uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        __muldf3((int)uVar26,uVar6,0,0x3e700000);\n        __aeabi_d2iz();\n        uVar25 = __aeabi_i2d();\n        uVar8 = (undefined4)((ulonglong)uVar25 >> 0x20);\n        uVar27 = __muldf3((int)uVar25,uVar8,0,0x41700000);\n        __subdf3((int)uVar26,uVar6,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        uVar2 = __aeabi_d2iz();\n        puVar22 = puVar16 + -1;\n        uVar6 = *(undefined4 *)puVar22;\n        uVar11 = *(undefined4 *)((int)puVar16 + -4);\n        *puVar5 = uVar2;\n        uVar26 = __aeabi_dadd((int)uVar25,uVar8,uVar6,uVar11);\n        puVar16 = puVar22;\n        puVar5 = puVar5 + 1;\n      } while (puVar22 != &uStack_c8);\n    }\n    uVar26 = scalbn((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_270);\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    __muldf3((int)uVar26,uVar8,0,0x3fc00000);\n    uVar25 = floor();\n    uVar25 = __muldf3((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),0,0x40200000);\n    uVar26 = __subdf3((int)uVar26,uVar8,(int)uVar25,(int)((ulonglong)uVar25 >> 0x20));\n    uVar2 = __aeabi_d2iz();\n    uVar25 = __aeabi_i2d();\n    uVar26 = __subdf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                      (int)((ulonglong)uVar25 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    uVar8 = (undefined4)uVar26;\n    if (local_270 < 1) {\n      if (local_270 == 0) {\n        iVar21 = (int)local_258[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = __aeabi_dcmpge(uVar8,uVar6,0,0x3fe00000);\n      if (iVar21 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar26 = __subdf3(0,0x3ff00000,uVar8,uVar6);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar4 = (int)local_258[iVar17 + -1] >> (0x18U - local_270 & 0xff);\n      uVar12 = local_258[iVar17 + -1] - (iVar4 << (0x18U - local_270 & 0xff));\n      iVar21 = (int)uVar12 >> (0x17U - local_270 & 0xff);\n      local_258[iVar17 + -1] = uVar12;\n      uVar2 = uVar2 + iVar4;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          bVar24 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (local_258[0] == 0) {\n            bVar24 = false;\n            if (iVar17 != 1) {\n              puVar5 = local_258;\n              iVar4 = 1;\n              do {\n                puVar5 = puVar5 + 1;\n                if (*puVar5 != 0) {\n                  iVar14 = iVar4 + 1;\n                  uVar12 = *puVar5;\n                  goto LAB_0800a8e2;\n                }\n                iVar4 = iVar4 + 1;\n              } while (iVar4 != iVar17);\n              bVar24 = false;\n            }\n          }\n          else {\n            iVar14 = 1;\n            iVar4 = 0;\n            uVar12 = local_258[0];\nLAB_0800a8e2:\n            local_258[iVar4] = 0x1000000 - uVar12;\n            if (iVar14 < iVar17) {\n              uVar12 = local_258[iVar14];\n              puVar5 = local_258 + iVar14;\n              while( true ) {\n                puVar13 = puVar5 + 1;\n                *puVar5 = 0xffffff - uVar12;\n                if (puVar13 == local_258 + iVar17) break;\n                uVar12 = *puVar13;\n                puVar5 = puVar13;\n              }\n            }\n            bVar24 = true;\n          }\n        }\n        if (0 < local_270) {\n          if (local_270 == 1) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_270 == 2) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          uVar26 = __subdf3(0,0x3ff00000,uVar8,uVar6);\n          if (bVar24) {\n            uVar25 = scalbn(0,0x3ff00000,local_270);\n            uVar26 = __subdf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                              (int)((ulonglong)uVar25 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar4 = __aeabi_dcmpeq((int)uVar26,uVar8,0,0);\n    if (iVar4 == 0) {\n      uVar26 = scalbn((int)uVar26,uVar8,-local_270);\n      uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      uVar8 = (undefined4)uVar26;\n      iVar9 = __aeabi_dcmpge(uVar8,uVar6,0,0x41700000);\n      if (iVar9 == 0) {\n        uVar12 = __aeabi_d2iz(uVar8,uVar6);\n        local_258[iVar17] = uVar12;\n        iVar4 = iVar17;\n      }\n      else {\n        __muldf3(uVar8,uVar6,0,0x3e700000);\n        uVar12 = __aeabi_d2iz();\n        uVar26 = __aeabi_i2d();\n        uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x41700000);\n        __subdf3(uVar8,uVar6,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar3 = __aeabi_d2iz();\n        local_270 = local_270 + 0x18;\n        local_258[iVar17] = uVar3;\n        local_258[iVar17 + 1] = uVar12;\n        iVar4 = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar4 = iVar17 + -1;\n    if (iVar15 <= iVar4) {\n      uVar12 = 0;\n      puVar5 = local_258 + iVar17 + 0x3fffffff;\n      do {\n        puVar13 = puVar5 + -1;\n        uVar12 = uVar12 | *puVar5;\n        puVar5 = puVar13;\n      } while (puVar13 != local_260[0]);\n      if (uVar12 != 0) break;\n    }\n    if (local_258[iVar15 + -1] == 0) {\n      local_280 = 1;\n      ppuVar7 = local_260 + iVar15;\n      do {\n        puVar5 = *ppuVar7;\n        local_280 = local_280 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (puVar5 == (uint *)0x0);\n      local_280 = iVar17 + local_280;\n    }\n    else {\n      local_280 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    puVar23 = (undefined4 *)(param_6 + (iVar21 + local_26c + 0x3fffffff) * 4);\n    puVar16 = &uStack_208 + iVar17 + param_4;\n    local_284 = &uStack_c8 + iVar21;\n    do {\n      puVar23 = puVar23 + 1;\n      uVar26 = __aeabi_i2d(*puVar23);\n      *puVar16 = uVar26;\n      puVar22 = puVar16 + 1;\n      if (iVar9 < 0) {\n        uVar25 = 0;\n      }\n      else {\n        uVar25 = 0;\n        puVar18 = puVar10;\n        while( true ) {\n          puVar16 = puVar16 + -1;\n          puVar1 = puVar18 + 2;\n          uVar26 = __muldf3((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar1,puVar18[3]);\n          uVar25 = __aeabi_dadd((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          if (puVar1 == puVar10 + param_4 * 2) break;\n          uVar26 = *puVar16;\n          puVar18 = puVar1;\n        }\n      }\n      *local_284 = uVar25;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_280;\n      puVar16 = puVar22;\n      local_284 = local_284 + 1;\n    } while (iVar21 <= local_280);\n  } while( true );\n  local_270 = local_270 + -0x18;\n  if (local_258[iVar4] == 0) {\n    puVar5 = local_258 + iVar17 + 0x3ffffffe;\n    do {\n      uVar12 = *puVar5;\n      iVar4 = iVar4 + -1;\n      local_270 = local_270 + -0x18;\n      puVar5 = puVar5 + -1;\n    } while (uVar12 == 0);\n  }\nLAB_0800a9f6:\n  uVar26 = scalbn(0,0x3ff00000,local_270);\n  if (iVar4 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        uVar26 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_260[1] = (undefined4)local_168;\n          *(int *)((int)local_260[1] + 4) = local_168._4_4_;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar26;\n          *(int *)((int)local_260[1] + 8) = local_160[0];\n          *(int *)((int)local_260[1] + 0xc) = local_160[1];\n          return uVar2 & 7;\n        }\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar26;\n        *(int *)((int)local_260[1] + 8) = local_160[0];\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar26 >> 0x20) + -0x80000000;\n        *(int *)((int)local_260[1] + 4) = local_168._4_4_ + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = local_160[1] + -0x80000000;\n        *local_260[1] = (undefined4)local_168;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      uVar26 = 0;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar26 >> 0x20);\n      if (iVar21 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar26;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar26 = 0;\n  }\n  else {\n    puVar22 = &uStack_c8 + iVar4;\n    puVar5 = local_258 + iVar4 + 1;\n    puVar16 = &uStack_c8 + iVar4 + 1;\n    do {\n      uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      puVar5 = puVar5 + -1;\n      uVar25 = __aeabi_i2d(*puVar5);\n      uVar25 = __muldf3((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,uVar8);\n      puVar16 = puVar16 + -1;\n      *puVar16 = uVar25;\n      uVar26 = __muldf3((int)uVar26,uVar8,0,0x3e700000);\n    } while (puVar5 != local_258);\n    iVar9 = 0;\n    do {\n      if (iVar15 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar8 = 0x40000000;\n        uVar6 = 0x3ff921fb;\n        uVar26 = 0;\n        iVar17 = 0;\n        puVar16 = puVar22;\n        puVar10 = &DAT_0800c028;\n        while( true ) {\n          uVar25 = __muldf3(*(undefined4 *)puVar16,*(undefined4 *)((int)puVar16 + 4),uVar8,uVar6);\n          uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (iVar9 < iVar17)) break;\n          uVar8 = *puVar10;\n          uVar6 = puVar10[1];\n          puVar16 = puVar16 + 1;\n          puVar10 = puVar10 + 2;\n        }\n      }\n      bVar24 = iVar9 != iVar4;\n      *(int *)(&local_168 + iVar9) = (int)uVar26;\n      *(int *)((int)&local_168 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)uVar26 >> 0x20);\n      puVar22 = puVar22 + -1;\n      iVar9 = iVar9 + 1;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar4 != 0) {\n          puVar16 = &local_168 + iVar4;\n          uVar26 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                            *(undefined4 *)puVar16);\n          do {\n            uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n            uVar8 = (undefined4)uVar26;\n            uVar11 = *(undefined4 *)(puVar16 + -1);\n            uVar20 = *(undefined4 *)((int)puVar16 + -4);\n            uVar26 = __aeabi_dadd(uVar8,uVar6,uVar11,uVar20);\n            uVar25 = __subdf3(uVar11,uVar20,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n            uVar25 = __aeabi_dadd((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),uVar8,uVar6);\n            *puVar16 = uVar25;\n            puVar16 = puVar16 + -1;\n            *puVar16 = uVar26;\n          } while (&local_168 != puVar16);\n          if (1 < iVar4) {\n            puVar16 = &local_168 + iVar4;\n            uVar26 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                              *(undefined4 *)puVar16);\n            do {\n              uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n              uVar8 = (undefined4)uVar26;\n              uVar11 = *(undefined4 *)(puVar16 + -1);\n              uVar20 = *(undefined4 *)((int)puVar16 + -4);\n              uVar26 = __aeabi_dadd(uVar8,uVar6,uVar11,uVar20);\n              uVar25 = __subdf3(uVar11,uVar20,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n              uVar25 = __aeabi_dadd((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),uVar8,uVar6);\n              *puVar16 = uVar25;\n              puVar16 = puVar16 + -1;\n              *puVar16 = uVar26;\n            } while (&local_168 + 1 != puVar16);\n            uVar26 = 0;\n            puVar16 = &local_168 + iVar4 + 1;\n            do {\n              puVar22 = puVar16 + -1;\n              uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),\n                                    *(undefined4 *)puVar22,*(undefined4 *)((int)puVar16 + -4));\n              puVar16 = puVar22;\n            } while (&local_168 + 2 != puVar22);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar26 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      uVar26 = 0;\n      puVar16 = &local_168 + iVar4 + 1;\n      do {\n        puVar22 = puVar16 + -1;\n        uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*(undefined4 *)puVar22,\n                              *(undefined4 *)((int)puVar16 + -4));\n        puVar16 = puVar22;\n      } while (&local_168 != puVar22);\n      goto LAB_0800aafc;\n    }\n    uVar26 = 0;\n    puVar16 = &local_168 + iVar4 + 1;\n    do {\n      puVar22 = puVar16 + -1;\n      uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*(undefined4 *)puVar22,\n                            *(undefined4 *)((int)puVar16 + -4));\n      puVar16 = puVar22;\n    } while (&local_168 != puVar22);\n  }\n  iVar9 = (int)((ulonglong)uVar26 >> 0x20);\n  uVar8 = (undefined4)uVar26;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_260[1] = uVar26;\n    uVar26 = __subdf3((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (iVar4 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar16 = &local_168;\n    do {\n      uVar26 = __aeabi_dadd((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),\n                            *(undefined4 *)(puVar16 + 1),*(undefined4 *)((int)puVar16 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar9 <= iVar4);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar8;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar26 = __subdf3((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (0 < iVar4) goto LAB_0800ad04;\n  }\n  uVar26 = CONCAT44((int)((ulonglong)uVar26 >> 0x20) + -0x80000000,(int)uVar26);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_260[1] + 8) = uVar26;\n  return uVar2 & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "calling": [
                "__ieee754_rem_pio2"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__aeabi_i2d",
                "floor",
                "__aeabi_dcmpeq",
                "__aeabi_dcmpge",
                "scalbn",
                "__subdf3",
                "__muldf3"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_0800adf0",
            "code": "\nundefined4\ncalculate_0800adf0(undefined4 input_value,uint input_power,undefined4 operand_1,undefined4 operand_2,int flag)\n\n{\n  int conversion_result;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 temp_low;\n  undefined4 temp_high;\n  undefined4 sub_result_low;\n  undefined8 sub_result_high;\n  undefined8 temp_mul_low;\n  \n  if (((input_power & 0x7fffffff) < 0x3e400000) && (conversion_result = __aeabi_d2iz(), conversion_result == 0)) {\n    return input_value;\n  }\n  sub_result_high = __muldf3(input_value,input_power,input_value);\n  temp_low = (undefined4)((ulonglong)sub_result_high >> 0x20);\n  result_high = (undefined4)sub_result_high;\n  sub_result_high = __muldf3(input_value,input_power,result_high,temp_low);\n  temp_high = (undefined4)((ulonglong)sub_result_high >> 0x20);\n  result_low = (undefined4)sub_result_high;\n  sub_result_high = __muldf3(result_high,temp_low,0x5acfd57c,0x3de5d93a);\n  sub_result_high = __subdf3((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  sub_result_high = __muldf3((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),result_high,temp_low);\n  sub_result_high = __aeabi_dadd((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),0x57b1fe7d,0x3ec71de3);\n  sub_result_high = __muldf3((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),result_high,temp_low);\n  sub_result_high = __subdf3((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),0x19c161d5,0x3f2a01a0);\n  sub_result_high = __muldf3((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),result_high,temp_low);\n  sub_result_high = __aeabi_dadd((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),0x1110f8a6,0x3f811111);\n  sub_result_low = (undefined4)((ulonglong)sub_result_high >> 0x20);\n  if (flag != 0) {\n    temp_mul_low = __muldf3(operand_1,operand_2,0,0x3fe00000);\n    sub_result_high = __muldf3(result_low,temp_high,(int)sub_result_high,sub_result_low);\n    sub_result_high = __subdf3((int)temp_mul_low,(int)((ulonglong)temp_mul_low >> 0x20),(int)sub_result_high,\n                     (int)((ulonglong)sub_result_high >> 0x20));\n    sub_result_high = __muldf3((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),result_high,temp_low);\n    sub_result_high = __subdf3((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),operand_1,operand_2);\n    temp_mul_low = __muldf3(result_low,temp_high,0x55555549,0x3fc55555);\n    sub_result_high = __aeabi_dadd((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),(int)temp_mul_low,\n                         (int)((ulonglong)temp_mul_low >> 0x20));\n    result_high = __subdf3(input_value,input_power,(int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20));\n    return result_high;\n  }\n  sub_result_high = __muldf3(result_high,temp_low,(int)sub_result_high,sub_result_low);\n  sub_result_high = __subdf3((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),0x55555549,0x3fc55555);\n  sub_result_high = __muldf3((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),result_low,temp_high);\n  result_high = __aeabi_dadd((int)sub_result_high,(int)((ulonglong)sub_result_high >> 0x20),input_value,input_power);\n  return result_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_0800adf0",
                "param_1": "input_value",
                "param_2": "input_power",
                "param_3": "operand_1",
                "param_4": "operand_2",
                "param_5": "flag",
                "iVar1": "conversion_result",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "temp_low",
                "uVar5": "temp_high",
                "uVar6": "sub_result_low",
                "uVar7": "sub_result_high",
                "uVar8": "temp_mul_low"
            },
            "calling": [
                "sin",
                "cos"
            ],
            "called": [
                "__aeabi_dadd",
                "__aeabi_d2iz",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_square_root_0800af78",
            "code": "\nint calculateSquareRoot_0800af78(int input1,uint input2)\n\n{\n  undefined4 resultLeft;\n  undefined4 resultRight;\n  undefined4 temp1;\n  undefined4 temp2;\n  int result;\n  undefined4 temp3;\n  uint unsignedInput2;\n  undefined8 temp4;\n  undefined8 temp5;\n  undefined4 temp6;\n  \n  temp4 = CONCAT44(input2,input1);\n  unsignedInput2 = input2 & 0x7fffffff;\n  if (unsignedInput2 < 0x44100000) {\n    if (unsignedInput2 < 0x3fdc0000) {\n      if (unsignedInput2 < 0x3e200000) {\n        temp5 = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c);\n        result = __aeabi_dcmpgt((int)temp5,(int)((ulonglong)temp5 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return input1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp4 = fabs();\n      temp2 = (undefined4)((ulonglong)temp4 >> 0x20);\n      resultLeft = (undefined4)temp4;\n      if (unsignedInput2 < 0x3ff30000) {\n        if (unsignedInput2 < 0x3fe60000) {\n          temp4 = __aeabi_dadd(resultLeft,temp2,resultLeft,temp2);\n          temp4 = __subdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n          temp5 = __aeabi_dadd(resultLeft,temp2,0,0x40000000);\n          temp4 = __divdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                           (int)((ulonglong)temp5 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp4 = __subdf3(resultLeft,temp2,0,0x3ff00000);\n          temp5 = __aeabi_dadd(resultLeft,temp2,0,0x3ff00000);\n          temp4 = __divdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                           (int)((ulonglong)temp5 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (unsignedInput2 < 0x40038000) {\n        temp4 = __subdf3(resultLeft,temp2,0,0x3ff80000);\n        temp5 = __muldf3(resultLeft,temp2,0,0x3ff80000);\n        temp5 = __aeabi_dadd((int)temp5,(int)((ulonglong)temp5 >> 0x20),0,0x3ff00000);\n        temp4 = __divdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                         (int)((ulonglong)temp5 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp4 = __divdf3(0,0xbff00000,resultLeft,temp2);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)temp4 >> 0x20);\n    temp3 = (undefined4)temp4;\n    temp4 = __muldf3(temp3,temp6,temp3);\n    resultRight = (undefined4)((ulonglong)temp4 >> 0x20);\n    resultLeft = (undefined4)temp4;\n    temp4 = __muldf3(resultLeft,resultRight,resultLeft,resultRight);\n    temp1 = (undefined4)((ulonglong)temp4 >> 0x20);\n    temp2 = (undefined4)temp4;\n    temp4 = __muldf3(temp2,temp1,0xe322da11,0x3f90ad3a);\n    temp4 = __aeabi_dadd((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp2,temp1);\n    temp4 = __aeabi_dadd((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp2,temp1);\n    temp4 = __aeabi_dadd((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp2,temp1);\n    temp4 = __aeabi_dadd((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x920083ff,0x3fc24924);\n    temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp2,temp1);\n    temp4 = __aeabi_dadd((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x5555550d,0x3fd55555);\n    temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),resultLeft,resultRight);\n    resultLeft = (undefined4)((ulonglong)temp4 >> 0x20);\n    temp5 = __muldf3(temp2,temp1,0x2c6a6c2f,0xbfa2b444);\n    temp5 = __subdf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,temp1);\n    temp5 = __subdf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,temp1);\n    temp5 = __subdf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,temp1);\n    temp5 = __subdf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp5 = __muldf3((int)temp5,(int)((ulonglong)temp5 >> 0x20),temp2,temp1);\n    temp2 = (undefined4)((ulonglong)temp5 >> 0x20);\n    if (result == -1) {\n      temp4 = __aeabi_dadd((int)temp4,resultLeft,(int)temp5,temp2);\n      temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp3,temp6);\n      result = __subdf3(temp3,temp6,(int)temp4,(int)((ulonglong)temp4 >> 0x20));\n      return result;\n    }\n    temp4 = __aeabi_dadd((int)temp4,resultLeft,(int)temp5,temp2);\n    temp4 = __muldf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp3,temp6);\n    temp4 = __subdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),\n                     *(undefined4 *)(&UNK_0800c090 + result * 8),\n                     *(undefined4 *)(&UNK_0800c094 + result * 8));\n    temp4 = __subdf3((int)temp4,(int)((ulonglong)temp4 >> 0x20),temp3,temp6);\n    result = __subdf3(*(undefined4 *)(&UNK_0800c070 + result * 8),\n                     *(undefined4 *)(&UNK_0800c074 + result * 8),(int)temp4,\n                     (int)((ulonglong)temp4 >> 0x20));\n    if ((int)input2 < 0) {\n      return result;\n    }\n  }\n  else {\n    if ((0x7ff00000 < unsignedInput2) || ((unsignedInput2 == 0x7ff00000 && (input1 != 0)))) {\n      result = __aeabi_dadd(input1,input2,input1);\n      return result;\n    }\n    result = 0x54442d18;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_square_root_0800af78",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "resultLeft",
                "uVar2": "resultRight",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "result",
                "uVar6": "temp3",
                "uVar7": "unsignedInput2",
                "uVar8": "temp4",
                "uVar9": "temp5",
                "local_2c": "temp6"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "__aeabi_dcmpgt",
                "__aeabi_dadd",
                "fabs",
                "__divdf3",
                "__subdf3",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "__ieee754_rem_pio2",
                "atan",
                "__ieee754_atan2"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "set_msb_flag_and_shift_right_0800b2d4",
            "code": "\nuint setMSBFlagAndShiftRight_0800b2d4(undefined4 inputFlag,uint inputNumber)\n\n{\n  return (inputNumber | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "set_msb_flag_and_shift_right_0800b2d4",
                "param_1": "inputFlag",
                "param_2": "inputNumber"
            },
            "calling": [
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_application_0800b2e0",
            "code": "\nundefined4 initializeApplication_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_application_0800b2e0"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_result_0800b2e8",
            "code": "\nuint calculate_result_0800b2e8(uint input1,uint input2,int offset,undefined4 flags)\n\n{\n  uint shifted_input2;\n  int sum;\n  uint upper_bits;\n  undefined8 concatenated_inputs;\n  \n  concatenated_inputs = CONCAT44(input2,input1);\n  shifted_input2 = (input2 << 1) >> 0x15;\n  if (shifted_input2 == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    concatenated_inputs = __muldf3(input1,input2,0,0x43500000);\n    if (offset < -50000) goto LAB_0800b34a;\n    shifted_input2 = ((uint)((int)((ulonglong)concatenated_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_input2 == 0x7ff) {\n    shifted_input2 = __aeabi_dadd(input1,input2,input1,input2,flags);\n    return shifted_input2;\n  }\n  upper_bits = (uint)((ulonglong)concatenated_inputs >> 0x20);\n  sum = shifted_input2 + offset;\n  if (sum < 0x7ff) {\n    if (0 < sum) {\n      return (uint)concatenated_inputs;\n    }\n    if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n      shifted_input2 = __muldf3((uint)concatenated_inputs,upper_bits & 0x800fffff | (sum + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_input2;\n    }\n    if (offset < 0xc351) {\n      concatenated_inputs = CONCAT44(upper_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_input2 = __muldf3((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_input2;\n    }\n  }\n  shifted_input2 = __muldf3(0x8800759c,upper_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_input2;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "offset",
                "param_4": "flags",
                "uVar1": "shifted_input2",
                "iVar2": "sum",
                "uVar3": "upper_bits",
                "uVar4": "concatenated_inputs"
            },
            "calling": [
                "__kernel_rem_pio2"
            ],
            "called": [
                "__aeabi_dadd",
                "__muldf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_global_value_0800b3dc",
            "code": "\nundefined4 getGlobalValue_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_global_value_0800b3dc"
            },
            "calling": [
                "sqrt",
                "hypot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "initialize_and_execute_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid initializeAndExecute_0800b3e8(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  _init();\n  iterationCount = 0;\n  functionPointerArray = (code **)&DAT_0800c0b4;\n  do {\n    iterationCount = iterationCount + 1;\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  } while (iterationCount != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "initialize_and_execute_0800b3e8",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "frame_dummy",
                "register_fini",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "fill_memory_0800b430",
            "code": "\nvoid fillMemory_0800b430(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *nextPtr;\n  uint remainingSize;\n  undefined4 value32;\n  bool isZero;\n  \n  if (((uint)destination & 3) != 0) {\n    remainingSize = size - 1;\n    destPtr = destination;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      size = remainingSize;\n      if (((uint)destination & 3) == 0) break;\n      isZero = remainingSize == 0;\n      remainingSize = remainingSize - 1;\n      destPtr = destination;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      destPtr = destination + 4;\n      do {\n        destPtr[-4] = value32;\n        destPtr[-3] = value32;\n        destPtr[-2] = value32;\n        destPtr[-1] = value32;\n        destPtr = destPtr + 4;\n      } while (destPtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x20));\n      remainingSize = size & 0xc;\n      destination = destination + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remainingSize == 0) goto joined_r0x0800b4a8;\n    }\n    destPtr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)destination);\n    do {\n      nextPtr = destination + 1;\n      *destination = value32;\n      destination = nextPtr;\n    } while (destPtr != nextPtr);\n    size = size & 3;\n    destination = destPtr;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    destPtr = destination;\n    do {\n      nextPtr = (undefined4 *)((int)destPtr + 1);\n      *(undefined *)destPtr = value;\n      destPtr = nextPtr;\n    } while ((undefined4 *)(size + (int)destination) != nextPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "fill_memory_0800b430",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "nextPtr",
                "uVar3": "remainingSize",
                "uVar4": "value32",
                "bVar5": "isZero"
            },
            "calling": [
                "grbl_main",
                "settings_read_coord_data",
                "st_reset",
                "debounce_init",
                "plan_init",
                "gc_execute_line",
                "gc_init",
                "eeprom_init",
                "homing_cycle",
                "mc_go_home"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "__register_exitproc"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "__register_exitproc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_0800b524",
            "code": "\nundefined4 updateData_0800b524(int operation,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined *dataPtr;\n  undefined4 returnValue;\n  uint bitMask;\n  uint count;\n  \n  __retarget_lock_acquire_recursive(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataPtr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (operation != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = data1;\n      bitMask = 1 << (count & 0xff);\n      *(uint *)(dataPtr + 0x188) = *(uint *)(dataPtr + 0x188) | bitMask;\n      *(undefined4 *)(dataPtr + count * 4 + 0x108) = data2;\n      if (operation == 2) {\n        *(uint *)(dataPtr + 0x18c) = bitMask | *(uint *)(dataPtr + 0x18c);\n      }\n    }\n    returnValue = DAT_20000448;\n    *(uint *)(dataPtr + 4) = count + 1;\n    *(undefined4 *)(dataPtr + (count + 2) * 4) = value;\n    __retarget_lock_release_recursive(returnValue);\n    returnValue = 0;\n  }\n  else {\n    __retarget_lock_release_recursive(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_0800b524",
                "param_1": "operation",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "dataPtr",
                "uVar2": "returnValue",
                "uVar3": "bitMask",
                "uVar4": "count"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "frame_dummy",
                "__libc_init_array",
                "__do_global_dtors_aux"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 184869,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005bdc",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078f4",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_080092c4",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_08001994",
            "FUN_08005c30",
            "FUN_08006d2e",
            "FUN_08007930",
            "FUN_08008640",
            "FUN_08008894"
        ],
        [
            "FUN_0800618c"
        ]
    ],
    "locked_functions": []
}