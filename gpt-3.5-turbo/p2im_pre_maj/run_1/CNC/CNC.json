{
    "functions": {
        "FUN_08000188": {
            "entrypoint": "0x08000188",
            "current_name": "initialize_flag_08000188",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initializeFlag_08000188(undefined4 inputValue)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "concatenate_param_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_param_080001ac(undefined4 input_1,undefined4 input_2)\n\n{\n  return CONCAT44(input_2,input_1);\n}\n\n",
            "renaming": {
                "FUN_080001ac": "concatenate_param_080001ac",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b5b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080001c8": {
            "entrypoint": "0x080001c8",
            "current_name": "FUNC_080001c8",
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001d4": {
            "entrypoint": "0x080001d4",
            "current_name": "FUNC_080001d4",
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001e0": {
            "entrypoint": "0x080001e0",
            "current_name": "FUNC_080001e0",
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "calling": [
                "FUN_08000220"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001ec": {
            "entrypoint": "0x080001ec",
            "current_name": "FUNC_080001ec",
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "calling": [
                "FUN_08000210"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080001f8": {
            "entrypoint": "0x080001f8",
            "current_name": "initialize_program_080001f8",
            "code": "\nvoid initializeProgram_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initializeOtherFunction();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080001f8": "initialize_program_080001f8",
                "initialize_08000210": "initializeOtherFunction"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000210": {
            "entrypoint": "0x08000210",
            "current_name": "initialize_08000210",
            "code": "\nvoid initialize_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000210": "initialize_08000210"
            },
            "calling": [
                "FUN_080001f8",
                "FUN_080025e8",
                "FUN_08000220"
            ],
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000220": {
            "entrypoint": "0x08000220",
            "current_name": "process_alarm_update_08000220",
            "code": "\nvoid process_alarm_update_08000220(char alarm_state)\n\n{\n  if (alarm_state != DAT_20000468) {\n    handle_alarm_state_updates_08002fd4();\n    if (alarm_state == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = alarm_state;\n    }\n    else if (alarm_state == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = alarm_state;\n    }\n    else {\n      initialize_08000210();\n      DAT_20000468 = alarm_state;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000220": "process_alarm_update_08000220",
                "param_1": "alarm_state"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080001e0",
                "FUN_08002fd4",
                "FUN_08000210",
                "FUN_080001c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000268": {
            "entrypoint": "0x08000268",
            "current_name": "calculate_updated_value_08000268",
            "code": "\n\n\nint calculateUpdatedValue_08000268(void)\n\n{\n  int globalData;\n  \n  globalData = getGlobalData();\n  return (globalData + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "renaming": {
                "FUN_08000268": "calculate_updated_value_08000268",
                "iVar1": "globalData",
                "get_global_data_08005a84": "getGlobalData"
            },
            "calling": [
                "FUN_080002b6"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002a0": {
            "entrypoint": "0x080002a0",
            "current_name": "wait_until_sum_exceeds_threshold_080002a0",
            "code": "\nvoid wait_until_sum_exceeds_threshold_080002a0(undefined4 threshold)\n\n{\n  wait_until_sum_exceeds_08005a98(threshold);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002a0": "wait_until_sum_exceeds_threshold_080002a0",
                "param_1": "threshold"
            },
            "calling": [
                "FUN_08002408"
            ],
            "called": [
                "FUN_08005a98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002b6": {
            "entrypoint": "0x080002b6",
            "current_name": "wait_until_calculation_complete_080002b6",
            "code": "\nvoid wait_until_calculation_complete_080002b6(uint input_value)\n\n{\n  uint upper_value;\n  uint updated_upper_value;\n  bool is_condition_met;\n  longlong updated_value;\n  undefined8 latest_value;\n  \n  updated_value = calculate_updated_value_08000268();\n  updated_upper_value = (uint)(updated_value + (ulonglong)input_value >> 0x20);\n  do {\n    latest_value = calculate_updated_value_08000268();\n    upper_value = (uint)((ulonglong)latest_value >> 0x20);\n    is_condition_met = updated_upper_value <= upper_value;\n    if (upper_value == updated_upper_value) {\n      is_condition_met = (uint)(updated_value + (ulonglong)input_value) <= (uint)latest_value;\n    }\n  } while (!is_condition_met);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002b6": "wait_until_calculation_complete_080002b6",
                "param_1": "input_value",
                "uVar1": "upper_value",
                "uVar2": "updated_upper_value",
                "bVar3": "is_condition_met",
                "lVar4": "updated_value",
                "uVar5": "latest_value"
            },
            "calling": [],
            "called": [
                "FUN_08000268"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002f0": {
            "entrypoint": "0x080002f0",
            "current_name": "initialize_buffer_080002f0",
            "code": "\nvoid initializeBuffer_080002f0(void)\n\n{\n  copy_and_fill_buffer_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080002f0": "initialize_buffer_080002f0"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000310": {
            "entrypoint": "0x08000310",
            "current_name": "get_buffer_data_08000310",
            "code": "\nundefined getBufferData_08000310(uint bufferIndex)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeBuffer();\n  }\n  return (&DAT_20000470)[bufferIndex & 0x3ff];\n}\n\n",
            "renaming": {
                "FUN_08000310": "get_buffer_data_08000310",
                "param_1": "bufferIndex",
                "initialize_buffer_080002f0": "initializeBuffer"
            },
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000340": {
            "entrypoint": "0x08000340",
            "current_name": "store_data_08000340",
            "code": "\nvoid storeData_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initializeBuffer();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000340": "store_data_08000340",
                "param_1": "index",
                "param_2": "value",
                "initialize_buffer_080002f0": "initializeBuffer"
            },
            "calling": [
                "FUN_08000374",
                "FUN_08004c2a"
            ],
            "called": [
                "FUN_080002f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000374": {
            "entrypoint": "0x08000374",
            "current_name": "process_data_08000374",
            "code": "\nvoid processData_08000374(int inputSize,char *inputBuffer,int bufferSize)\n\n{\n  int remainingSize;\n  char *currentChar;\n  int outputIndex;\n  char checksum;\n  \n  checksum = '\\0';\n  remainingSize = bufferSize;\n  currentChar = inputBuffer;\n  outputIndex = inputSize;\n  if (DAT_2000046c == 0) {\n    initialize_buffer_080002f0();\n    currentChar = inputBuffer;\n    outputIndex = inputSize;\n  }\n  for (; remainingSize != 0; remainingSize = remainingSize + -1) {\n    checksum = (checksum != '\\0') + *currentChar;\n    store_data_08000340(outputIndex,*currentChar);\n    currentChar = currentChar + 1;\n    outputIndex = outputIndex + 1;\n  }\n  store_data_08000340(outputIndex,checksum);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000374": "process_data_08000374",
                "param_1": "inputSize",
                "param_2": "inputBuffer",
                "param_3": "bufferSize",
                "local_1c": "remainingSize",
                "local_18": "currentChar",
                "local_14": "outputIndex",
                "local_9": "checksum"
            },
            "calling": [
                "FUN_08004c2a",
                "FUN_08004bc0",
                "FUN_08004bf4"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080003ec": {
            "entrypoint": "0x080003ec",
            "current_name": "validate_data_080003ec",
            "code": "\nbool validate_data_080003ec(char *data,int start_index,int length)\n\n{\n  char current_byte;\n  uint buffer_data;\n  int remaining_length;\n  int current_index;\n  char *current_ptr;\n  byte sum_of_bytes;\n  \n  sum_of_bytes = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_ptr = data;\n  if (DAT_2000046c == 0) {\n    initialize_buffer_080002f0();\n    current_index = start_index;\n    current_ptr = data;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_byte = get_buffer_data_08000310(current_index);\n    sum_of_bytes = current_byte + (sum_of_bytes != 0);\n    *current_ptr = current_byte;\n    current_index = current_index + 1;\n    current_ptr = current_ptr + 1;\n  }\n  buffer_data = get_buffer_data_08000310(current_index);\n  return sum_of_bytes == buffer_data;\n}\n\n",
            "renaming": {
                "FUN_080003ec": "validate_data_080003ec",
                "param_1": "data",
                "param_2": "start_index",
                "param_3": "length",
                "local_1c": "remaining_length",
                "local_18": "current_index",
                "local_14": "current_ptr",
                "local_9": "sum_of_bytes",
                "cVar1": "current_byte",
                "uVar2": "buffer_data"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_08004d2c",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000478": {
            "entrypoint": "0x08000478",
            "current_name": "initialize_variables_08000478",
            "code": "\nvoid initializeVariables_08000478(undefined input_1,undefined input_2,undefined input_3)\n\n{\n  DAT_20000e89 = input_1;\n  DAT_20000e8a = input_2;\n  DAT_20000e8b = input_3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000478": "initialize_variables_08000478",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_080005b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004ac": {
            "entrypoint": "0x080004ac",
            "current_name": "initialize_data_080004ac",
            "code": "\nvoid initializeData_080004ac(void)\n\n{\n  int validationResult;\n  \n  copy_and_fill_buffer_0800b430(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initialize_variables_08000478(0,1,2);\n  DAT_20000e74 = 1;\n  validationResult = validate_and_process_data_08004d7c(DAT_20000e8c,&DAT_20000e90);\n  if (validationResult == 0) {\n    handle_error_08004030(10);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004ac": "initialize_data_080004ac",
                "iVar1": "validationResult"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_0800b430",
                "FUN_08000478",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004fc": {
            "entrypoint": "0x080004fc",
            "current_name": "calculate_and_store_float_values_080004fc",
            "code": "\nvoid calculate_and_store_float_values_080004fc(undefined4 hash_input_1,undefined4 hash_input_2,undefined4 hash_input_3)\n\n{\n  undefined4 hash_result;\n  \n  hash_result = calculate_hash_08008e44(hash_input_1);\n  DAT_20000e7c = calculate_float_08009054(hash_result,DAT_20000ebc);\n  hash_result = calculate_hash_08008e44(hash_input_2);\n  DAT_20000e80 = calculate_float_08009054(hash_result,DAT_20000ec0);\n  hash_result = calculate_hash_08008e44(hash_input_3);\n  DAT_20000e84 = calculate_float_08009054(hash_result,DAT_20000ec4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080004fc": "calculate_and_store_float_values_080004fc",
                "param_1": "hash_input_1",
                "param_2": "hash_input_2",
                "param_3": "hash_input_3",
                "uVar1": "hash_result"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800056c": {
            "entrypoint": "0x0800056c",
            "current_name": "calculate_float_hash_0800056c",
            "code": "\nundefined4 calculateFloatHash_0800056c(undefined4 inputValue)\n\n{\n  undefined8 decodedValue;\n  \n  if (DAT_20000e73 != '\\0') {\n    decodedValue = decode_unsigned_long_long_08008590(inputValue);\n    decodedValue = calculate_hash_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x66666666,0x40396666);\n    inputValue = calculate_float_value_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800056c": "calculate_float_hash_0800056c",
                "param_1": "inputValue",
                "uVar1": "decodedValue"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005b4": {
            "entrypoint": "0x080005b4",
            "current_name": "process_input_080005b4",
            "code": "\nchar processInput_080005b4(undefined4 input)\n\n{\n  int result;\n  undefined4 temp1;\n  char errorCode;\n  uint temp2;\n  undefined4 temp3;\n  undefined8 temp4;\n  undefined8 temp5;\n  undefined8 temp6;\n  undefined4 buffer1 [4];\n  undefined4 buffer2;\n  undefined4 buffer3;\n  undefined4 buffer4;\n  undefined4 temp7;\n  undefined4 temp8;\n  undefined4 floatBuffer [6];\n  undefined4 inputValue;\n  byte inputChar;\n  undefined flag;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined flag2;\n  uint temp11;\n  byte temp12;\n  byte temp13;\n  byte temp14;\n  byte flag3;\n  char shiftAmount;\n  uint floatValue;\n  undefined4 temp15;\n  sbyte state;\n  char action;\n  char flag4;\n  undefined4 floatValue1;\n  byte flag5;\n  ushort flags;\n  uint opcode;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    errorCode = '\\f';\n  }\n  else {\n    flag = 0;\n    flags = 0;\n    flag5 = 0;\n    floatValue1 = 0xbf800000;\n    flag4 = '\\0';\n    action = '\\0';\n    copy_and_fill_buffer_0800b430(floatBuffer + 3,0,0xc);\n    copy_and_fill_buffer_0800b430(floatBuffer,0,0xc);\n    DAT_20000e70 = '\\0';\n    state = 0;\n    while (result = check_and_parse_char_0800184c(&inputChar,floatBuffer + 6,input,&flag), result != 0) {\n      temp4 = decode_unsigned_long_long_08008590(inputValue);\n      temp4 = extract_bits_and_shift_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n      opcode = FUNC_08008ba0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n      if (inputChar == 0x47) {\n        switch(opcode) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          state = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          state = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          state = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          state = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          state = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          state = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          state = 6;\n        }\n        switch(opcode) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          action = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          action = '\\x02';\n          break;\n        case 0x11:\n          initialize_variables_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_variables_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_variables_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp1 = calculate_float_08008eec(inputValue,0x41200000);\n          temp4 = decode_unsigned_long_long_08008590(temp1);\n          temp4 = extract_bits_and_shift_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          opcode = FUNC_08008ba0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          switch(opcode) {\n          case 0x118:\n            action = '\\x03';\n            break;\n          case 0x119:\n            action = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            action = '\\x05';\n            break;\n          case 0x12d:\n            action = '\\x06';\n          }\n          break;\n        case 0x35:\n          flag4 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)opcode - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp1 = calculate_float_08008eec(inputValue,0x41200000);\n          temp4 = decode_unsigned_long_long_08008590(temp1);\n          temp4 = extract_bits_and_shift_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          opcode = FUNC_08008ba0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          if (opcode == 0x398) {\n            action = '\\a';\n          }\n          else if (opcode == 0x399) {\n            action = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (inputChar == 0x4d) {\n        if (opcode == 0x1e) {\nLAB_08000b96:\n          state = 5;\n        }\n        else if ((int)opcode < 0x1f) {\n          if ((int)opcode < 3) {\n            if (-1 < (int)opcode) goto LAB_08000b96;\n          }\n          else if (opcode - 3 < 3) {\n            state = 8;\n          }\n        }\n        switch(opcode) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (state != 0) {\n        if (((int)(uint)flags >> state & 1U) == 0) {\n          flags = flags | (ushort)(1 << state);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        state = 0;\n      }\n    }\n    errorCode = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      temp15 = 0;\n      floatValue = 0;\n      shiftAmount = '\\0';\n      flag = 0;\nswitchD_08000d18_caseD_47:\n      result = check_and_parse_char_0800184c(&inputChar,floatBuffer + 6,input,&flag);\n      if (result != 0) {\n        switch(inputChar) {\n        case 0x46:\n          result = check_combined_parameters_0800923c(inputValue,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = calculate_float_hash_0800056c(inputValue);\n          }\n          else {\n            floatValue1 = calculate_float_hash_0800056c(inputValue);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp2 = (uint)inputChar;\n          temp1 = calculate_float_hash_0800056c(inputValue);\n          floatBuffer[temp2 - 0x49] = temp1;\n          break;\n        case 0x4c:\n          temp4 = decode_unsigned_long_long_08008590(inputValue);\n          temp4 = extract_bits_and_shift_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          shiftAmount = validate_and_shift_08008bf0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          break;\n        case 0x50:\n          temp15 = inputValue;\n          break;\n        case 0x52:\n          floatValue = calculate_float_hash_0800056c(inputValue);\n          break;\n        case 0x53:\n          result = is_input_empty_08009228(inputValue,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = is_input_empty_08009228(inputValue,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp4 = decode_unsigned_long_long_08008590(inputValue);\n          temp4 = extract_bits_and_shift_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          DAT_20000e88 = validate_and_shift_08008bf0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          break;\n        case 0x58:\n          floatBuffer[3] = calculate_float_hash_0800056c(inputValue);\n          flag5 = flag5 | 1;\n          break;\n        case 0x59:\n          floatBuffer[4] = calculate_float_hash_0800056c(inputValue);\n          flag5 = flag5 | 2;\n          break;\n        case 0x5a:\n          floatBuffer[5] = calculate_float_hash_0800056c(inputValue);\n          flag5 = flag5 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      errorCode = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          handle_state_update_0800525c((int)DAT_20000e76);\n          process_alarm_update_08000220(DAT_20000e77);\n        }\n        if ((flags & 0x200) != 0) {\n          result = validate_and_process_data_08004d7c(DAT_20000e8c,&buffer4);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = buffer4;\n          DAT_20000e94 = temp7;\n          DAT_20000e98 = temp8;\n        }\n        switch(action) {\n        case '\\x01':\n          result = is_input_empty_08009228(temp15,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_alarm_updates_08002408(temp15);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp4 = decode_unsigned_long_long_08008590(temp15);\n          temp4 = extract_bits_and_shift_08009798((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          opcode = FUNC_08008ba0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n          if ((((shiftAmount == '\\x02') || (shiftAmount == '\\x14')) && (-1 < (int)opcode)) &&\n             ((int)opcode < 7)) {\n            if ((flag5 == 0) && (shiftAmount == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)opcode < 1) {\n                opcode = (uint)DAT_20000e8c;\n              }\n              else {\n                opcode = opcode - 1;\n              }\n              result = validate_and_process_data_08004d7c(opcode & 0xff,buffer1);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (flag3 = 0; flag3 < 3; flag3 = flag3 + 1) {\n                if (((int)(uint)flag5 >> flag3 & 1U) != 0) {\n                  if (shiftAmount == '\\x14') {\n                    temp2 = (uint)flag3;\n                    temp1 = calculate_inverse_08008cd8(*(undefined4 *)(&DAT_20000e74 + (flag3 + 2) * 4),\n                                         floatBuffer[flag3 + 3]);\n                    buffer1[temp2] = temp1;\n                  }\n                  else {\n                    buffer1[flag3] = floatBuffer[flag3 + 3];\n                  }\n                }\n              }\n              process_data_08004bf4(opcode & 0xff,buffer1);\n              if (opcode == DAT_20000e8c) {\n                DAT_20000e90 = buffer1[0];\n                DAT_20000e94 = buffer1[1];\n                DAT_20000e98 = buffer1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          flag5 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (flag5 != 0) {\n            for (temp14 = 0; temp14 < 3; temp14 = temp14 + 1) {\n              if (((int)(uint)flag5 >> temp14 & 1U) == 0) {\n                floatBuffer[temp14 + 3] = *(undefined4 *)(&DAT_20000e74 + (temp14 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp2 = (uint)temp14;\n                temp1 = calculate_floating_point_08008cdc(floatBuffer[temp14 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (temp14 + 2) * 4));\n                floatBuffer[temp2 + 3] = temp1;\n              }\n              else {\n                temp3 = floatBuffer[temp14 + 3];\n                temp1 = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (temp14 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (temp14 + 10) * 4));\n                temp2 = (uint)temp14;\n                temp1 = calculate_floating_point_08008cdc(temp3,temp1);\n                floatBuffer[temp2 + 3] = temp1;\n              }\n            }\n            handle_alarm_update_08001e98(floatBuffer[3],floatBuffer[4],floatBuffer[5],DAT_20000ed0,0);\n          }\n          if (action == '\\x05') {\n            result = validate_and_process_data_08004d7c(7,buffer1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = validate_and_process_data_08004d7c(6,buffer1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          handle_alarm_update_08001e98(buffer1[3],buffer2,buffer3,DAT_20000ed0,0);\n          DAT_20000e7c = buffer1[3];\n          DAT_20000e80 = buffer2;\n          DAT_20000e84 = buffer3;\n          flag5 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (action == '\\x06') {\n            process_data_08004bf4(7,&DAT_20000e7c);\n          }\n          else {\n            process_data_08004bf4(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (flag5 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (temp13 = 0; temp13 < 3; temp13 = temp13 + 1) {\n              if (((int)(uint)flag5 >> temp13 & 1U) != 0) {\n                temp1 = calculate_inverse_08008cd8(*(undefined4 *)(&DAT_20000e74 + (temp13 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (temp13 + 8) * 4));\n                temp2 = (uint)temp13;\n                temp1 = calculate_inverse_08008cd8(temp1,floatBuffer[temp13 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp2 + 10) * 4) = temp1;\n              }\n            }\n          }\n          flag5 = 0;\n          break;\n        case '\\b':\n          copy_and_fill_buffer_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((flags & 4) != 0) || (flag5 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = is_input_empty_08009228(floatValue1,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((flag4 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (temp12 = 0; temp12 < 3; temp12 = temp12 + 1) {\n            if (((int)(uint)flag5 >> temp12 & 1U) == 0) {\n              floatBuffer[temp12 + 3] = *(undefined4 *)(&DAT_20000e74 + (temp12 + 2) * 4);\n            }\n            else if (flag4 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp2 = (uint)temp12;\n                temp1 = calculate_floating_point_08008cdc(floatBuffer[temp12 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (temp12 + 2) * 4));\n                floatBuffer[temp2 + 3] = temp1;\n              }\n              else {\n                temp3 = floatBuffer[temp12 + 3];\n                temp1 = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (temp12 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (temp12 + 10) * 4));\n                temp2 = (uint)temp12;\n                temp1 = calculate_floating_point_08008cdc(temp3,temp1);\n                floatBuffer[temp2 + 3] = temp1;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (flag5 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              handle_alarm_update_08001e98(floatBuffer[3],floatBuffer[4],floatBuffer[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (flag5 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp1 = floatValue1;\n              if (DAT_20000e72 == '\\0') {\n                temp1 = DAT_20000e78;\n              }\n              handle_alarm_update_08001e98(floatBuffer[3],floatBuffer[4],floatBuffer[5],temp1,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            flag5 = flag5 & ~(byte)(1 << DAT_20000e8b);\n            if ((flag5 == 0) ||\n               (((result = check_if_combination_exists_08009214(floatValue,0), result != 0 &&\n                 (result = check_if_combination_exists_08009214(floatBuffer[DAT_20000e89],0), result != 0)) &&\n                (result = check_if_combination_exists_08009214(floatBuffer[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = check_if_combination_exists_08009214(floatValue,0);\n              if (result == 0) {\n                temp10 = calculate_inverse_08008cd8(floatBuffer[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                temp9 = calculate_inverse_08008cd8(floatBuffer[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                copy_and_fill_buffer_0800b430(floatBuffer,0,0xc);\n                temp1 = calculate_float_08008eec(floatValue,0x40800000);\n                temp1 = calculate_float_08008eec(temp1,floatValue);\n                temp3 = calculate_float_08008eec(temp10,temp10);\n                temp1 = calculate_inverse_08008cd8(temp1,temp3);\n                temp3 = calculate_float_08008eec(temp9,temp9);\n                temp11 = calculate_inverse_08008cd8(temp1,temp3);\n                result = is_input_empty_08009228(temp11,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp4 = decode_unsigned_long_long_08008590(temp11);\n                temp4 = process_data_080098d0((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n                temp5 = decode_unsigned_long_long_08008590(temp10);\n                temp6 = decode_unsigned_long_long_08008590(temp9);\n                temp5 = calculate_updated_value_0800981c((int)temp5,(int)((ulonglong)temp5 >> 0x20),(int)temp6,\n                                     (int)((ulonglong)temp6 >> 0x20));\n                temp4 = calculate_double_08008894((int)temp4,(uint)((ulonglong)temp4 >> 0x20) ^ 0x80000000,\n                                     (int)temp5,(int)((ulonglong)temp5 >> 0x20));\n                temp11 = calculate_float_value_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  temp11 = temp11 ^ 0x80000000;\n                }\n                result = is_input_empty_08009228(floatValue,0);\n                if (result != 0) {\n                  temp11 = temp11 ^ 0x80000000;\n                  floatValue = floatValue ^ 0x80000000;\n                }\n                temp1 = calculate_float_08008eec(temp9,temp11);\n                temp1 = calculate_inverse_08008cd8(temp10,temp1);\n                temp2 = (uint)DAT_20000e89;\n                temp1 = calculate_float_08008eec(temp1,0x3f000000);\n                floatBuffer[temp2] = temp1;\n                temp1 = calculate_float_08008eec(temp10,temp11);\n                temp1 = calculate_floating_point_08008cdc(temp1,temp9);\n                temp2 = (uint)DAT_20000e8a;\n                temp1 = calculate_float_08008eec(temp1,0x3f000000);\n                floatBuffer[temp2] = temp1;\n              }\n              else {\n                temp4 = decode_unsigned_long_long_08008590(floatBuffer[DAT_20000e89]);\n                temp5 = decode_unsigned_long_long_08008590(floatBuffer[DAT_20000e8a]);\n                temp4 = calculate_updated_value_0800981c((int)temp4,(int)((ulonglong)temp4 >> 0x20),(int)temp5,\n                                     (int)((ulonglong)temp5 >> 0x20));\n                floatValue = calculate_float_value_08008c30((int)temp4,(int)((ulonglong)temp4 >> 0x20));\n              }\n              flag2 = DAT_20000e71 == '\\x02';\n              temp1 = floatValue1;\n              if (DAT_20000e72 == '\\0') {\n                temp1 = DAT_20000e78;\n              }\n              calculate_and_update_alarms_08001f00(&DAT_20000e7c,floatBuffer + 3,floatBuffer,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,temp1,DAT_20000e72,floatValue,flag2);\n            }\n            break;\n          case '\\x04':\n            if (flag5 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = floatBuffer[3];\n          DAT_20000e80 = floatBuffer[4];\n          DAT_20000e84 = floatBuffer[5];\n        }\n        errorCode = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          handle_alarm_state_updates_08002fd4();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_and_check_application_080025e8();\n            errorCode = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            errorCode = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_080005b4": "process_input_080005b4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "temp1",
                "cVar3": "errorCode",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar8": "temp6",
                "local_94": "buffer1",
                "local_84": "buffer2",
                "local_80": "buffer3",
                "local_7c": "buffer4",
                "uStack_78": "temp7",
                "uStack_74": "temp8",
                "auStack_70": "floatBuffer",
                "local_58": "inputValue",
                "local_52": "inputChar",
                "local_51": "flag",
                "local_50": "temp9",
                "local_4c": "temp10",
                "local_45": "flag2",
                "local_44": "temp11",
                "local_3d": "temp12",
                "local_3c": "temp13",
                "local_3b": "temp14",
                "local_3a": "flag3",
                "local_39": "shiftAmount",
                "local_38": "floatValue",
                "local_34": "temp15",
                "local_2f": "state",
                "local_2e": "action",
                "local_2d": "flag4",
                "local_2c": "floatValue1",
                "local_27": "flag5",
                "local_26": "flags",
                "local_24": "opcode"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08009798",
                "FUN_08000478",
                "FUN_0800184c",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_0800b430",
                "FUN_0800923c",
                "FUN_0800056c",
                "FUN_08004d7c",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_080025e8",
                "FUN_08004bf4",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08008590",
                "FUN_0800525c",
                "FUN_08002fd4",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08008ba0",
                "FUN_08000220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800184c": {
            "entrypoint": "0x0800184c",
            "current_name": "check_and_parse_char_0800184c",
            "code": "\nundefined4 checkAndParseChar_0800184c(byte *outputByte,undefined4 inputArg,int baseAddress,byte *inputCharPtr)\n\n{\n  int parseResult;\n  undefined4 successFlag;\n  \n  if (*(char *)(baseAddress + (uint)*inputCharPtr) == '\\0') {\n    successFlag = 0;\n  }\n  else {\n    *outputByte = *(byte *)(baseAddress + (uint)*inputCharPtr);\n    if ((*outputByte < 0x41) || (0x5a < *outputByte)) {\n      DAT_20000e70 = 2;\n      successFlag = 0;\n    }\n    else {\n      *inputCharPtr = *inputCharPtr + 1;\n      parseResult = parse_integer_08002638(baseAddress,inputCharPtr,inputArg);\n      if (parseResult == 0) {\n        DAT_20000e70 = 1;\n        successFlag = 0;\n      }\n      else {\n        successFlag = 1;\n      }\n    }\n  }\n  return successFlag;\n}\n\n",
            "renaming": {
                "FUN_0800184c": "check_and_parse_char_0800184c",
                "param_1": "outputByte",
                "param_2": "inputArg",
                "param_3": "baseAddress",
                "param_4": "inputCharPtr",
                "iVar1": "parseResult",
                "uVar2": "successFlag"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08002638"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018cc": {
            "entrypoint": "0x080018cc",
            "current_name": "update_data_with_mask_080018cc",
            "code": "\n\n\nvoid updateDataWithMask_080018cc(uint newData)\n\n{\n  _DAT_40021014 = newData | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018cc": "update_data_with_mask_080018cc",
                "param_1": "newData"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018fc": {
            "entrypoint": "0x080018fc",
            "current_name": "set_flag_bits_080018fc",
            "code": "\n\n\nvoid setFlagBits_080018fc(uint flagValue)\n\n{\n  _DAT_40021014 = flagValue | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018fc": "set_flag_bits_080018fc",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800192c": {
            "entrypoint": "0x0800192c",
            "current_name": "extract_flag_from_data_0800192c",
            "code": "\nvoid extractFlagFromData_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800192c": "extract_flag_from_data_0800192c"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800195c": {
            "entrypoint": "0x0800195c",
            "current_name": "initialize_and_check_app_0800195c",
            "code": "\nvoid initialize_and_check_app_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_and_check_app_0800195clication_080025e8();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800195c": "initialize_and_check_app_0800195c"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001994": {
            "entrypoint": "0x08001994",
            "current_name": "process_data_08001994",
            "code": "\nvoid processData_08001994(byte flag,char isFlagSet,char isDataValid,undefined4 hashValue)\n\n{\n  undefined4 result1;\n  uint maxProduct;\n  undefined8 reverseBits;\n  undefined8 processedData;\n  byte localFlag;\n  uint product1;\n  uint product2;\n  uint product3;\n  ushort initialData;\n  uint product4;\n  int shiftedData;\n  undefined4 floatValue1;\n  uint maxProduct;\n  uint sum;\n  ushort updatedData;\n  uint increment;\n  uint totalCount;\n  int shiftCount;\n  int localCount1;\n  int localCount2;\n  int localCount3;\n  ushort maskValue;\n  uint minProduct;\n  char counter;\n  \n  counter = '\\0';\n  copy_and_fill_buffer_0800b430(&product1,0,0xc);\n  if ((flag & 1) != 0) {\n    counter = counter + '\\x01';\n    reverseBits = decode_unsigned_long_long_08008590(DAT_20000ebc);\n    product1 = calculate_product_080095b8((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20));\n  }\n  if ((flag & 2) != 0) {\n    counter = counter + '\\x01';\n    reverseBits = decode_unsigned_long_long_08008590(DAT_20000ec0);\n    product2 = calculate_product_080095b8((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20));\n  }\n  if ((flag & 4) != 0) {\n    counter = counter + '\\x01';\n    reverseBits = decode_unsigned_long_long_08008590(DAT_20000ec4);\n    product3 = calculate_product_080095b8((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20));\n  }\n  maxProduct = product3;\n  if (product3 < product2) {\n    maxProduct = product2;\n  }\n  maxProduct = product1;\n  if (product1 < maxProduct) {\n    maxProduct = maxProduct;\n  }\n  reverseBits = reverse_bits_0800854c(maxProduct);\n  processedData = reverse_bits_0800854c(counter);\n  processedData = process_data_080098d0((int)processedData,(int)((ulonglong)processedData >> 0x20));\n  reverseBits = calculate_double_08008894((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20),(int)processedData,\n                       (int)((ulonglong)processedData >> 0x20));\n  floatValue1 = calculate_float_value_08008c30((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20));\n  result1 = calculate_float_08008eec(DAT_20000edc,floatValue1);\n  result1 = calculate_float_08009054(result1,0x453b8000);\n  reverseBits = decode_unsigned_long_long_08008590(result1);\n  reverseBits = calculate_floating_point_value_08009318((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20));\n  shiftedData = validate_and_shift_08008bf0((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20));\n  reverseBits = reverse_bits_0800854c(counter);\n  reverseBits = process_data_080098d0((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20));\n  processedData = decode_unsigned_long_long_08008590(hashValue);\n  reverseBits = calculate_hash_08008640((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20),(int)processedData,\n                       (int)((ulonglong)processedData >> 0x20));\n  result1 = calculate_float_value_08008c30((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20));\n  result1 = calculate_float_08008eec(floatValue1,result1);\n  result1 = calculate_float_08009054(0x4c64e1c0,result1);\n  reverseBits = decode_unsigned_long_long_08008590(result1);\n  product4 = calculate_product_080095b8((int)reverseBits,(int)((ulonglong)reverseBits >> 0x20));\n  minProduct = 75000;\n  if (product4 < 75000) {\n    minProduct = product4;\n  }\n  initialData = DAT_20000ed4;\n  maskValue = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (isFlagSet == '\\0') {\n    maskValue = maskValue ^ 0xaa0;\n  }\n  set_flag_bits_080018fc(maskValue);\n  update_data_with_mask_080018cc(initialData);\n  localCount1 = -(maxProduct >> 1);\n  shiftCount = minProduct - DAT_20000ec9;\n  totalCount = 0;\n  increment = 10000;\n  localFlag = flag;\n  localCount2 = localCount1;\n  localCount3 = localCount1;\n  while( true ) {\n    updatedData = initialData;\n    sum = calculate_sum_080078f4();\n    if (isDataValid == '\\0') {\n      sum = sum ^ 0x1e;\n    }\n    if (((localFlag & 1) != 0) && (localCount3 = localCount3 + product1, 0 < localCount3)) {\n      if ((sum & 0x10) == 0) {\n        localFlag = localFlag & 0xfe;\n      }\n      else {\n        updatedData = updatedData ^ 0x10;\n      }\n      localCount3 = localCount3 - maxProduct;\n    }\n    if (((localFlag & 2) != 0) && (localCount2 = localCount2 + product2, 0 < localCount2)) {\n      if ((sum & 8) == 0) {\n        localFlag = localFlag & 0xfd;\n      }\n      else {\n        updatedData = updatedData ^ 0x440;\n      }\n      localCount2 = localCount2 - maxProduct;\n    }\n    if (((localFlag & 4) != 0) && (localCount1 = localCount1 + product3, 0 < localCount1)) {\n      if ((sum & 4) == 0) {\n        localFlag = localFlag & 0xfb;\n      }\n      else {\n        updatedData = updatedData ^ 0x100;\n      }\n      localCount1 = localCount1 - maxProduct;\n    }\n    if ((localFlag == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_data_with_mask_080018cc(updatedData);\n    FUNC_08002828(DAT_20000ec9);\n    update_data_with_mask_080018cc(initialData);\n    FUNC_08002828(shiftCount);\n    if ((product4 < minProduct) && (increment = minProduct + increment, 20000 < increment)) {\n      increment = increment - 20000;\n      totalCount = shiftedData + totalCount;\n      minProduct = 60000000 / totalCount;\n      if (minProduct < product4) {\n        minProduct = product4;\n      }\n      shiftCount = minProduct - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001994": "process_data_08001994",
                "param_1": "flag",
                "param_2": "isFlagSet",
                "param_3": "isDataValid",
                "param_4": "hashValue",
                "uVar1": "result1",
                "uVar2": "maxProduct",
                "uVar3": "reverseBits",
                "uVar4": "processedData",
                "local_61": "localFlag",
                "local_5c": "product1",
                "local_58": "product2",
                "local_54": "product3",
                "local_4e": "initialData",
                "local_4c": "product4",
                "local_48": "shiftedData",
                "local_44": "floatValue1",
                "local_40": "maxProduct",
                "local_3c": "sum",
                "local_36": "updatedData",
                "local_34": "increment",
                "local_30": "totalCount",
                "local_2c": "shiftCount",
                "local_28": "localCount1",
                "local_24": "localCount2",
                "local_20": "localCount3",
                "local_1a": "maskValue",
                "local_18": "minProduct",
                "local_11": "counter"
            },
            "calling": [
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008bf0",
                "FUN_0800854c",
                "FUN_08009054",
                "FUN_08009318",
                "FUN_080078f4",
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08002828",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_080098d0",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08008894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "entrypoint": "0x08001d4c",
            "current_name": "initialize_and_process_data_08001d4c",
            "code": "\nvoid initialize_and_process_data_08001d4c(void)\n\n{\n  char updated_counter;\n  char loop_counter;\n  \n  initialize_global_values_08005790();\n  process_data_08001994(4,1,0,DAT_20000eec);\n  process_data_08001994(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  loop_counter = '\\x02';\n  while( true ) {\n    updated_counter = loop_counter + -1;\n    if (loop_counter == '\\0') break;\n    process_data_08001994(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    loop_counter = updated_counter;\n    if ('\\0' < updated_counter) {\n      process_data_08001994(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  clear_flags_and_check_conditions_080057e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d4c": "initialize_and_process_data_08001d4c",
                "local_9": "loop_counter",
                "cVar1": "updated_counter"
            },
            "calling": [
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_08001994",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "entrypoint": "0x08001ddc",
            "current_name": "process_data_loop_08001ddc",
            "code": "\nvoid processDataLoop_08001ddc(void)\n\n{\n  FUNC_08008244();\n  processAndValidateData();\n  initializeData();\n  copyAndFillBuffer(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      updateAndCopyBuffer();\n      initializeData();\n      initializeGrbl();\n      initializeAndReset();\n      initializeProgram();\n      extractFlagFromData();\n      initializeData();\n      initializeAndCalculateFloatValues();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        displayStatusMessage(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        processData();\n      }\n    }\n    handleAlarmStateUpdate();\n    processInput();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001ddc": "process_data_loop_08001ddc",
                "process_and_validate_data_080051b4": "processAndValidateData",
                "initialize_data_0800583c": "initializeData",
                "copy_and_fill_buffer_0800b430": "copyAndFillBuffer",
                "update_and_copy_buffer_08002f24": "updateAndCopyBuffer",
                "initialize_data_080004ac": "initializeData",
                "initialize_grbl_080039a0": "initializeGrbl",
                "initialize_and_reset_08005238": "initializeAndReset",
                "initialize_program_080001f8": "initializeProgram",
                "extract_flag_from_data_0800192c": "extractFlagFromData",
                "initialize_data_08005814": "initializeData",
                "initialize_and_calculate_float_values_0800283a": "initializeAndCalculateFloatValues",
                "display_status_message_080041a0": "displayStatusMessage",
                "process_data_080039bc": "processData",
                "handle_alarm_state_update_08003a74": "handleAlarmStateUpdate",
                "process_input_08003f34": "processInput"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800583c",
                "FUN_08005814",
                "FUN_080001f8",
                "FUN_080082ba",
                "FUN_08003a74",
                "FUN_08008244",
                "FUN_08002f24",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_0800283a",
                "FUN_080039a0",
                "FUN_08005238",
                "FUN_080041a0",
                "FUN_0800b430",
                "FUN_080039bc",
                "FUN_0800192c",
                "FUN_080051b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e98": {
            "entrypoint": "0x08001e98",
            "current_name": "handle_alarm_update_08001e98",
            "code": "\nvoid handle_alarm_update_08001e98(undefined4 product_id,undefined4 quantity,undefined4 price,undefined4 discount,\n                 undefined flag)\n\n{\n  int are_data_equal;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      handle_alarm_state_update_08003a74();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      are_data_equal = are_data_equal_08002fac();\n    } while (are_data_equal != 0);\n    calculate_product(product_id,quantity,price,discount,flag);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_if_needed();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e98": "handle_alarm_update_08001e98",
                "param_1": "product_id",
                "param_2": "quantity",
                "param_3": "price",
                "param_4": "discount",
                "param_5": "flag",
                "iVar1": "are_data_equal",
                "calculate_product_08003004": "calculate_product",
                "initialize_if_needed_0800585c": "initialize_if_needed"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08003004",
                "FUN_0800585c",
                "FUN_08003a74",
                "FUN_08002fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f00": {
            "entrypoint": "0x08001f00",
            "current_name": "calculate_and_update_alarms_08001f00",
            "code": "\nvoid calculateAndUpdateAlarms_08001f00(int inputArray1,undefined4 *outputArray,int inputArray2,byte index1,byte index2,byte index3\n                 ,undefined4 value1,char condition1,undefined4 value2,char condition2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int checkResult;\n  uint floatResult;\n  undefined8 unsignedResult1;\n  undefined8 unsignedResult2;\n  uint floatArray [4];\n  undefined4 unknownFloat;\n  undefined4 unknownFloat1;\n  undefined4 unknownFloat2;\n  undefined4 unknownFloat3;\n  undefined4 unknownFloat4;\n  undefined4 unknownFloat5;\n  ushort shiftedValue;\n  undefined4 floatValue;\n  undefined4 inverse1;\n  undefined4 inverse2;\n  uint value3;\n  undefined4 float1;\n  undefined4 float2;\n  char condition3;\n  ushort increment;\n  undefined4 floatValue2;\n  uint value4;\n  uint value5;\n  \n  float2 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)index1 * 4 + inputArray1),\n                          *(undefined4 *)((uint)index1 * 4 + inputArray2));\n  float1 = calculate_floating_point_08008cdc(*(undefined4 *)((uint)index2 * 4 + inputArray1),\n                          *(undefined4 *)((uint)index2 * 4 + inputArray2));\n  value3 = calculate_inverse_08008cd8(outputArray[index3],*(undefined4 *)((uint)index3 * 4 + inputArray1));\n  value5 = *(uint *)((uint)index1 * 4 + inputArray2) ^ 0x80000000;\n  value4 = *(uint *)((uint)index2 * 4 + inputArray2) ^ 0x80000000;\n  inverse2 = calculate_inverse_08008cd8(outputArray[index1],float2);\n  inverse1 = calculate_inverse_08008cd8(outputArray[index2],float1);\n  result1 = calculate_float_08008eec(value5,inverse1);\n  result2 = calculate_float_08008eec(value4,inverse2);\n  result1 = calculate_inverse_08008cd8(result1,result2);\n  unsignedResult1 = decode_unsigned_long_long_08008590(result1);\n  result1 = calculate_float_08008eec(value5,inverse2);\n  result2 = calculate_float_08008eec(value4,inverse1);\n  result1 = calculate_floating_point_08008cdc(result1,result2);\n  unsignedResult2 = decode_unsigned_long_long_08008590(result1);\n  unsignedResult1 = calculate_updated_value_thunk_08009990((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20),(int)unsignedResult2,\n                             (int)((ulonglong)unsignedResult2 >> 0x20));\n  floatValue2 = calculate_float_value_08008c30((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n  if (condition2 == '\\0') {\n    checkResult = check_combined_parameters_0800923c(floatValue2,0);\n    if (checkResult != 0) {\n      unsignedResult1 = decode_unsigned_long_long_08008590(floatValue2);\n      unsignedResult1 = calculate_sum_080082d4((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20),0x54442d18,0x401921fb);\n      floatValue2 = calculate_float_value_08008c30((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n    }\n  }\n  else {\n    checkResult = check_combination_08009250(floatValue2,0);\n    if (checkResult != 0) {\n      unsignedResult1 = decode_unsigned_long_long_08008590(floatValue2);\n      unsignedResult1 = reverse_bitwise_operations_080082d0((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20),0x54442d18,0x401921fb);\n      floatValue2 = calculate_float_value_08008c30((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n    }\n  }\n  result1 = calculate_float_08008eec(floatValue2,value2);\n  unsignedResult1 = decode_unsigned_long_long_08008590(result1);\n  unsignedResult2 = decode_unsigned_long_long_08008590(value3 & 0x7fffffff);\n  unsignedResult1 = calculate_updated_value_0800981c((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20),(int)unsignedResult2,\n                       (int)((ulonglong)unsignedResult2 >> 0x20));\n  floatValue = calculate_float_value_08008c30((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n  checkResult = check_if_combination_exists_08009214(floatValue,0);\n  if (checkResult == 0) {\n    result1 = calculate_float_08009054(floatValue,DAT_20000ed8);\n    unsignedResult1 = decode_unsigned_long_long_08008590(result1);\n    unsignedResult1 = calculate_result_080094c0((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n    shiftedValue = validate_and_shift_08008bf0((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n    if (condition1 != '\\0') {\n      result1 = calculate_hash_08008e44(shiftedValue);\n      value1 = calculate_float_08008eec(value1,result1);\n    }\n    result1 = calculate_hash_08008e44(shiftedValue);\n    unknownFloat5 = calculate_float_08009054(floatValue2,result1);\n    result1 = calculate_hash_08008e44(shiftedValue);\n    unknownFloat4 = calculate_float_08009054(value3,result1);\n    unsignedResult1 = decode_unsigned_long_long_08008590(unknownFloat5);\n    unsignedResult1 = calculate_hash_08008640((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20),0,0x3fe00000);\n    unsignedResult2 = decode_unsigned_long_long_08008590(unknownFloat5);\n    unsignedResult1 = calculate_hash_08008640((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20),(int)unsignedResult2,\n                         (int)((ulonglong)unsignedResult2 >> 0x20));\n    unsignedResult1 = reverse_bitwise_operations_080082d0(0,0x3ff00000,(int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n    unknownFloat3 = calculate_float_value_08008c30((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n    unknownFloat2 = unknownFloat5;\n    condition3 = '\\0';\n    floatArray[index3] = *(uint *)(inputArray1 + (uint)index3 * 4);\n    for (increment = 1; increment < shiftedValue; increment = increment + 1) {\n      if ((int)condition3 < (int)(uint)DAT_20000efa) {\n        result1 = calculate_float_08008eec(value5,unknownFloat2);\n        result2 = calculate_float_08008eec(value4,unknownFloat3);\n        floatArray[3] = calculate_floating_point_08008cdc(result1,result2);\n        result1 = calculate_float_08008eec(value5,unknownFloat3);\n        result2 = calculate_float_08008eec(value4,unknownFloat2);\n        value5 = calculate_inverse_08008cd8(result1,result2);\n        value4 = floatArray[3];\n        condition3 = condition3 + '\\x01';\n      }\n      else {\n        result1 = calculate_hash_08008e44(increment);\n        result1 = calculate_float_08008eec(result1,unknownFloat5);\n        unsignedResult1 = decode_unsigned_long_long_08008590(result1);\n        unsignedResult1 = process_data_08009410((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n        unknownFloat1 = calculate_float_value_08008c30((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n        result1 = calculate_hash_08008e44(increment);\n        result1 = calculate_float_08008eec(result1,unknownFloat5);\n        unsignedResult1 = decode_unsigned_long_long_08008590(result1);\n        unsignedResult1 = process_data_080096e8((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n        unknownFloat = calculate_float_value_08008c30((int)unsignedResult1,(int)((ulonglong)unsignedResult1 >> 0x20));\n        result1 = calculate_float_08008eec(*(uint *)((uint)index1 * 4 + inputArray2) ^ 0x80000000,unknownFloat1);\n        result2 = calculate_float_08008eec(*(undefined4 *)((uint)index2 * 4 + inputArray2),unknownFloat);\n        value5 = calculate_floating_point_08008cdc(result1,result2);\n        result1 = calculate_float_08008eec(*(uint *)((uint)index1 * 4 + inputArray2) ^ 0x80000000,unknownFloat);\n        result2 = calculate_float_08008eec(*(undefined4 *)((uint)index2 * 4 + inputArray2),unknownFloat1);\n        value4 = calculate_inverse_08008cd8(result1,result2);\n        condition3 = '\\0';\n      }\n      floatResult = calculate_floating_point_08008cdc(float2,value5);\n      floatArray[index1] = floatResult;\n      floatResult = calculate_floating_point_08008cdc(float1,value4);\n      floatArray[index2] = floatResult;\n      floatResult = calculate_floating_point_08008cdc(floatArray[index3],unknownFloat4);\n      floatArray[index3] = floatResult;\n      handle_alarm_update_08001e98(floatArray[0],floatArray[1],floatArray[2],value1,condition1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    handle_alarm_update_08001e98(*outputArray,outputArray[1],outputArray[2],value1,condition1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001f00": "calculate_and_update_alarms_08001f00",
                "param_1": "inputArray1",
                "param_2": "outputArray",
                "param_3": "inputArray2",
                "param_4": "index1",
                "param_5": "index2",
                "param_6": "index3",
                "param_7": "value1",
                "param_8": "condition1",
                "param_9": "value2",
                "param_10": "condition2",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "checkResult",
                "uVar4": "floatResult",
                "uVar5": "unsignedResult1",
                "uVar6": "unsignedResult2",
                "local_6c": "floatArray",
                "local_5c": "unknownFloat",
                "local_58": "unknownFloat1",
                "local_54": "unknownFloat2",
                "local_50": "unknownFloat3",
                "local_4c": "unknownFloat4",
                "local_48": "unknownFloat5",
                "local_42": "shiftedValue",
                "local_40": "floatValue",
                "local_3c": "inverse1",
                "local_38": "inverse2",
                "local_34": "value3",
                "local_30": "float1",
                "local_2c": "float2",
                "local_27": "condition3",
                "local_26": "increment",
                "local_24": "floatValue2",
                "local_20": "value4",
                "local_1c": "value5"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08001e98",
                "FUN_08008eec",
                "thunk_FUN_08009990",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08009410",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_0800981c",
                "FUN_0800923c",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002408": {
            "entrypoint": "0x08002408",
            "current_name": "process_alarm_updates_08002408",
            "code": "\nvoid process_alarm_updates_08002408(undefined4 input_param)\n\n{\n  undefined2 result;\n  undefined4 float_value1;\n  undefined4 hash_value;\n  undefined8 decoded_value;\n  ushort counter;\n  \n  float_value1 = calculate_float_08008eec(input_param,0x41a00000);\n  decoded_value = decode_unsigned_long_long_08008590(float_value1);\n  decoded_value = calculate_result_080094c0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  counter = validate_and_shift_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  handle_alarm_state_updates_08002fd4();\n  float_value1 = calculate_float_08008eec(input_param,0x447a0000);\n  hash_value = calculate_hash_08008e44((uint)counter * 0x32);\n  float_value1 = calculate_inverse_08008cd8(float_value1,hash_value);\n  decoded_value = decode_unsigned_long_long_08008590(float_value1);\n  decoded_value = calculate_result_080094c0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  result = validate_and_shift_08008bf0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  FUNC_08002814(result);\n  while ((counter != 0 && (handle_alarm_state_update_08003a74(), DAT_20000ea8 == '\\0'))) {\n    wait_until_sum_exceeds_threshold_080002a0(0x32);\n    counter = counter - 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002408": "process_alarm_updates_08002408",
                "param_1": "input_param",
                "uVar1": "result",
                "uVar2": "float_value1",
                "uVar3": "hash_value",
                "uVar4": "decoded_value",
                "local_12": "counter"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_080002a0",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024c4": {
            "entrypoint": "0x080024c4",
            "current_name": "handle_alarm_080024c4",
            "code": "\nvoid handle_alarm_080024c4(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  undefined4 uVar3;\n  char isAlarmEnabled;\n  char isAlarmActivated;\n  char isAlarmTriggered;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initializeAndProcessData();\n  handleAlarmStateUpdate();\n  if (DAT_20000ea8 == '\\0') {\n    copyAndFillBuffer(&DAT_20000eac,0,0xc);\n    initializeAndCalculateFloatValues();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      isAlarmTriggered = -1;\n    }\n    else {\n      isAlarmTriggered = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      isAlarmActivated = -1;\n    }\n    else {\n      isAlarmActivated = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      isAlarmEnabled = -1;\n    }\n    else {\n      isAlarmEnabled = '\\x01';\n    }\n    uVar1 = calculateHash((int)isAlarmTriggered);\n    uVar1 = calculateFloat(uVar1,DAT_20000ef4);\n    uVar2 = calculateHash((int)isAlarmActivated);\n    uVar2 = calculateFloat(uVar2,DAT_20000ef4);\n    uVar3 = calculateHash((int)isAlarmEnabled);\n    uVar3 = calculateFloat(uVar3,DAT_20000ef4);\n    handleAlarmUpdate(uVar1,uVar2,uVar3,DAT_20000eec,0);\n    initializeIfNeeded();\n    handleAlarmStateUpdates();\n    initializeAndCalculateFloatValues();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024c4": "handle_alarm_080024c4",
                "local_13": "isAlarmEnabled",
                "local_12": "isAlarmActivated",
                "local_11": "isAlarmTriggered",
                "initialize_and_process_data_08001d4c": "initializeAndProcessData",
                "handle_alarm_state_update_08003a74": "handleAlarmStateUpdate",
                "copy_and_fill_buffer_0800b430": "copyAndFillBuffer",
                "initialize_and_calculate_float_values_0800283a": "initializeAndCalculateFloatValues",
                "calculate_hash_08008e44": "calculateHash",
                "calculate_float_08008eec": "calculateFloat",
                "handle_alarm_update_08001e98": "handleAlarmUpdate",
                "initialize_if_needed_0800585c": "initializeIfNeeded",
                "handle_alarm_state_updates_08002fd4": "handleAlarmStateUpdates"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08001e98",
                "FUN_08008eec",
                "FUN_0800585c",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_0800283a",
                "FUN_08002fd4",
                "FUN_08003a74",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "initialize_and_check_application_080025e8",
            "code": "\nvoid initialize_and_check_application_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    initialize_application_08005250();\n    initialize_08000210();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      clear_flags_and_check_conditions_080057e4();\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "initialize_and_check_application_080025e8"
            },
            "calling": [
                "FUN_08003a18",
                "FUN_08003b98",
                "FUN_08005900",
                "FUN_080005b4",
                "FUN_0800195c"
            ],
            "called": [
                "FUN_080057e4",
                "FUN_08005250",
                "FUN_08000210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002638": {
            "entrypoint": "0x08002638",
            "current_name": "parse_integer_08002638",
            "code": "\nundefined4 parseInteger_08002638(int baseAddress,byte *inputString,uint *outputValue)\n\n{\n  byte digit;\n  bool isNegative;\n  bool skipCombinations;\n  int combinationResult;\n  char *currChar;\n  char *nextChar;\n  undefined4 returnStatus;\n  undefined8 tempValue;\n  uint calculationResult;\n  byte digitCount;\n  char skipCount;\n  int intValue;\n  char currByte;\n  char *nextByte;\n  \n  nextChar = (char *)(baseAddress + (uint)*inputString);\n  currChar = nextChar + 1;\n  currByte = *nextChar;\n  isNegative = false;\n  if (currByte == '-') {\n    isNegative = true;\n    currByte = *currChar;\n    nextByte = nextChar + 2;\n  }\n  else {\n    nextByte = currChar;\n    if (currByte == '+') {\n      nextByte = nextChar + 2;\n      currByte = *currChar;\n    }\n  }\n  intValue = 0;\n  skipCount = '\\0';\n  digitCount = 0;\n  skipCombinations = false;\n  do {\n    digit = currByte - 0x30;\n    if (digit < 10) {\n      digitCount = digitCount + 1;\n      if (digitCount < 9) {\n        if (skipCombinations) {\n          skipCount = skipCount + -1;\n        }\n        intValue = (uint)digit + intValue * 10;\n      }\n      else if (!skipCombinations) {\n        skipCount = skipCount + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (skipCombinations)) {\n        if (digitCount == 0) {\n          returnStatus = 0;\n        }\n        else {\n          calculationResult = calculate_result_08008e3c(intValue);\n          combinationResult = check_if_combination_exists_08009214(calculationResult,0);\n          if (combinationResult == 0) {\n            for (; skipCount < -1; skipCount = skipCount + '\\x02') {\n              tempValue = decode_unsigned_long_long_08008590(calculationResult);\n              tempValue = calculate_hash_08008640((int)tempValue,(int)((ulonglong)tempValue >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              calculationResult = calculate_float_value_08008c30((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n            }\n            if (skipCount < '\\0') {\n              tempValue = decode_unsigned_long_long_08008590(calculationResult);\n              tempValue = calculate_hash_08008640((int)tempValue,(int)((ulonglong)tempValue >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              calculationResult = calculate_float_value_08008c30((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n            }\n            else {\n              for (; '\\0' < skipCount; skipCount = skipCount + -1) {\n                calculationResult = calculate_float_08008eec(calculationResult,0x41200000);\n              }\n            }\n          }\n          if (isNegative) {\n            *outputValue = calculationResult ^ 0x80000000;\n          }\n          else {\n            *outputValue = calculationResult;\n          }\n          *inputString = ((char)nextByte - (char)baseAddress) - 1;\n          returnStatus = 1;\n        }\n        return returnStatus;\n      }\n      skipCombinations = true;\n    }\n    currByte = *nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "param_1": "baseAddress",
                "param_2": "inputString",
                "param_3": "outputValue",
                "bVar1": "digit",
                "bVar2": "isNegative",
                "bVar3": "skipCombinations",
                "iVar4": "combinationResult",
                "pcVar5": "currChar",
                "pcVar6": "nextChar",
                "uVar7": "returnStatus",
                "uVar8": "tempValue",
                "local_1c": "calculationResult",
                "local_16": "digitCount",
                "local_15": "skipCount",
                "local_14": "intValue",
                "local_d": "currByte",
                "local_c": "nextByte"
            },
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_08009214",
                "FUN_08008c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002814": {
            "entrypoint": "0x08002814",
            "current_name": "FUNC_08002814",
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "calling": [
                "FUN_08002408",
                "FUN_08001d4c",
                "FUN_08004148"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002828": {
            "entrypoint": "0x08002828",
            "current_name": "FUNC_08002828",
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800283a": {
            "entrypoint": "0x0800283a",
            "current_name": "initialize_and_calculate_float_values_0800283a",
            "code": "\nvoid initializeAndCalculateFloatValues_0800283a(void)\n\n{\n  initialize_data_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  calculate_and_store_float_values_080004fc(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800283a": "initialize_and_calculate_float_values_0800283a"
            },
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002870": {
            "entrypoint": "0x08002870",
            "current_name": "increment_and_limit_08002870",
            "code": "\nchar increment_and_limit_08002870(char input_char)\n\n{\n  char result;\n  \n  result = input_char + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002870": "increment_and_limit_08002870",
                "param_1": "input_char",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002f40",
                "FUN_08002e08",
                "FUN_08002ef0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002896": {
            "entrypoint": "0x08002896",
            "current_name": "decrement_and_handle_null_08002896",
            "code": "\nchar decrementAndHandleNull_08002896(char inputChar)\n\n{\n  char result;\n  \n  result = inputChar;\n  if (inputChar == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "renaming": {
                "FUN_08002896": "decrement_and_handle_null_08002896",
                "param_1": "inputChar",
                "local_9": "result"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028bc": {
            "entrypoint": "0x080028bc",
            "current_name": "calculate_result_080028bc",
            "code": "\nundefined4 calculate_result_080028bc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_float_08008eec(input_2,input_2);\n  result_2 = calculate_float_08008eec(input_1,input_1);\n  result_1 = calculate_inverse_08008cd8(result_1,result_2);\n  result_2 = calculate_floating_point_08008cdc(input_3,input_3);\n  result_1 = calculate_float_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_080028bc": "calculate_result_080028bc",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002908": {
            "entrypoint": "0x08002908",
            "current_name": "calculate_result_08002908",
            "code": "\nundefined4 calculate_result_08002908(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  temp1 = calculate_floating_point_08008cdc(value3,value3);\n  temp1 = calculate_float_08008eec(temp1,value4);\n  temp2 = calculate_float_08008eec(value1,value1);\n  temp1 = calculate_inverse_08008cd8(temp1,temp2);\n  temp2 = calculate_float_08008eec(value2,value2);\n  temp1 = calculate_floating_point_08008cdc(temp1,temp2);\n  temp2 = calculate_float_08008eec(value3,0x40800000);\n  temp1 = calculate_float_08009054(temp1,temp2);\n  return temp1;\n}\n\n",
            "renaming": {
                "FUN_08002908": "calculate_result_08002908",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "temp1",
                "uVar2": "temp2"
            },
            "calling": [
                "FUN_08002c18"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002978": {
            "entrypoint": "0x08002978",
            "current_name": "process_data_08002978",
            "code": "\nundefined4 process_data_08002978(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3)\n\n{\n  undefined4 float_result1;\n  undefined4 float_result2;\n  undefined8 decoded_value;\n  \n  float_result1 = calculate_float_08008eec(input_param2,input_param2);\n  float_result2 = calculate_floating_point_08008cdc(input_param1,input_param1);\n  float_result2 = calculate_float_08008eec(float_result2,input_param3);\n  float_result1 = calculate_inverse_08008cd8(float_result1,float_result2);\n  decoded_value = decode_unsigned_long_long_08008590(float_result1);\n  decoded_value = process_data_08002978_080098d0((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  float_result1 = calculate_float_value_08008c30((int)decoded_value,(int)((ulonglong)decoded_value >> 0x20));\n  return float_result1;\n}\n\n",
            "renaming": {
                "FUN_08002978": "process_data_08002978",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "uVar1": "float_result1",
                "uVar2": "float_result2",
                "uVar3": "decoded_value"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_08002afc"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_080098d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029d8": {
            "entrypoint": "0x080029d8",
            "current_name": "update_combination_080029d8",
            "code": "\nvoid updateCombination_080029d8(undefined4 status,int combination,int data)\n\n{\n  int combinationExists;\n  undefined4 processedData;\n  undefined4 currentData;\n  \n  if (((combination != 0) && (data != 0)) &&\n     (combinationExists = checkCombinationExists(*(undefined4 *)(combination + 0x18),*(undefined4 *)(combination + 0x1c)),\n     combinationExists == 0)) {\n    if ((*(char *)(combination + 0x25) == '\\0') &&\n       (combinationExists = checkEmptyString(*(undefined4 *)(combination + 0x1c),*(undefined4 *)(data + 0x18)),\n       combinationExists != 0)) {\n      currentData = *(undefined4 *)(combination + 0x1c);\n      processedData = processData(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data + 0x18),\n                           *(undefined4 *)(combination + 0x20));\n      combinationExists = isInputEmpty(currentData,processedData);\n      if (combinationExists == 0) {\n        processedData = processData(DAT_20000edc ^ 0x80000000,*(undefined4 *)(data + 0x18),\n                             *(undefined4 *)(combination + 0x20));\n      }\n      else {\n        processedData = *(undefined4 *)(combination + 0x1c);\n      }\n      *(undefined4 *)(combination + 0x18) = processedData;\n    }\n    else {\n      *(undefined4 *)(combination + 0x18) = *(undefined4 *)(combination + 0x1c);\n    }\n    *(undefined *)(combination + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029d8": "update_combination_080029d8",
                "param_1": "status",
                "param_2": "combination",
                "param_3": "data",
                "iVar1": "combinationExists",
                "uVar2": "processedData",
                "uVar3": "currentData",
                "check_if_combination_exists_08009214": "checkCombinationExists",
                "check_if_empty_string_08009264": "checkEmptyString",
                "process_data_08002978": "processData",
                "is_input_empty_08009228": "isInputEmpty"
            },
            "calling": [
                "FUN_08002a94"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214",
                "FUN_08009264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002a94": {
            "entrypoint": "0x08002a94",
            "current_name": "handle_combination_08002a94",
            "code": "\nvoid handle_combination_08002a94(void)\n\n{\n  undefined *previous_combination_ptr;\n  undefined *current_combination;\n  undefined *previous_combination;\n  byte byte_value;\n  \n  byte_value = DAT_20000cf0;\n  current_combination = (undefined *)0x0;\n  previous_combination = (undefined *)0x0;\n  while (previous_combination_ptr = previous_combination, byte_value != DAT_20000cf1) {\n    byte_value = decrement_and_handle_null_08002896(byte_value);\n    previous_combination = current_combination;\n    update_combination_080029d8(&DAT_20000870 + (uint)byte_value * 0x40,current_combination,previous_combination_ptr);\n    current_combination = &DAT_20000870 + (uint)byte_value * 0x40;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002a94": "handle_combination_08002a94",
                "local_9": "byte_value",
                "local_18": "current_combination",
                "local_14": "previous_combination",
                "puVar1": "previous_combination_ptr"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_080029d8",
                "FUN_08002896"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002afc": {
            "entrypoint": "0x08002afc",
            "current_name": "process_input_08002afc",
            "code": "\nvoid processInput_08002afc(int input1,int input2)\n\n{\n  int isEmpty;\n  undefined4 processedData;\n  undefined4 tempData;\n  \n  if (((input1 != 0) && (*(char *)(input1 + 0x25) == '\\0')) &&\n     (isEmpty = is_input_empty_08009228(*(undefined4 *)(input1 + 0x18),*(undefined4 *)(input2 + 0x18)),\n     isEmpty != 0)) {\n    tempData = *(undefined4 *)(input2 + 0x18);\n    processedData = process_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input1 + 0x18),\n                         *(undefined4 *)(input1 + 0x20));\n    isEmpty = is_input_empty_08009228(tempData,processedData);\n    if (isEmpty == 0) {\n      processedData = process_data_08002978(DAT_20000edc ^ 0x80000000,*(undefined4 *)(input1 + 0x18),\n                           *(undefined4 *)(input1 + 0x20));\n    }\n    else {\n      processedData = *(undefined4 *)(input2 + 0x18);\n    }\n    isEmpty = check_if_combination_exists_08009214(processedData,*(undefined4 *)(input2 + 0x18));\n    if (isEmpty == 0) {\n      *(undefined4 *)(input2 + 0x18) = processedData;\n      *(undefined *)(input2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002afc": "process_input_08002afc",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "isEmpty",
                "uVar2": "processedData",
                "uVar3": "tempData"
            },
            "calling": [
                "FUN_08002ba8"
            ],
            "called": [
                "FUN_08002978",
                "FUN_08009228",
                "FUN_08009214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "entrypoint": "0x08002ba8",
            "current_name": "process_input_loop_08002ba8",
            "code": "\nvoid process_input_loop_08002ba8(void)\n\n{\n  uint input_uint;\n  undefined *previous_input_ptr;\n  undefined *previous_input_ptr_2;\n  undefined *previous_input;\n  undefined *current_input;\n  byte input_value;\n  \n  previous_input = (undefined *)0x0;\n  current_input = (undefined *)0x0;\n  input_value = DAT_20000cf1;\n  previous_input_ptr_2 = (undefined *)0x0;\n  while (previous_input_ptr = previous_input, input_value != DAT_20000cf0) {\n    previous_input = current_input;\n    input_uint = (uint)input_value;\n    process_input(previous_input_ptr,current_input,&DAT_20000870 + input_uint * 0x40);\n    input_value = increment_and_limit(input_value);\n    previous_input_ptr_2 = previous_input_ptr;\n    current_input = &DAT_20000870 + input_uint * 0x40;\n  }\n  process_input(previous_input,current_input,0,previous_input,previous_input_ptr_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ba8": "process_input_loop_08002ba8",
                "local_14": "previous_input",
                "local_10": "current_input",
                "local_9": "input_value",
                "puVar2": "previous_input_ptr",
                "puVar3": "previous_input_ptr_2",
                "uVar1": "input_uint",
                "process_input_08002afc": "process_input",
                "increment_and_limit_08002870": "increment_and_limit"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c18": {
            "entrypoint": "0x08002c18",
            "current_name": "calculate_values_08002c18",
            "code": "\nvoid calculate_values_08002c18(int input_data,undefined4 float_value_1,undefined4 float_value_2)\n\n{\n  undefined4 result_1;\n  int hash_result;\n  undefined4 result_2;\n  undefined4 hash_result_2;\n  undefined4 hash_result_3;\n  uint shifted_result;\n  undefined8 floating_point_value;\n  int difference;\n  uint computed_value;\n  \n  result_1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  result_1 = calculate_float_08008eec(result_1,float_value_1);\n  floating_point_value = decode_unsigned_long_long_08008590(result_1);\n  floating_point_value = calculate_floating_point_value_08009318((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n  result_1 = validate_and_shift_08008bf0((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n  *(undefined4 *)(input_data + 0x28) = result_1;\n  result_1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  result_1 = calculate_float_08008eec(result_1,float_value_2);\n  floating_point_value = decode_unsigned_long_long_08008590(result_1);\n  floating_point_value = calculate_floating_point_value_08009318((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n  result_1 = validate_and_shift_08008bf0((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n  *(undefined4 *)(input_data + 0x2c) = result_1;\n  floating_point_value = bitwise_shift_0800856c(*(int *)(input_data + 0x30) * 0x32);\n  floating_point_value = calculate_hash_08008640((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20),0,0x404e0000);\n  hash_result = FUNC_08008ba0((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n  result_1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x28));\n  result_2 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  hash_result_2 = calculate_hash_08008e44(hash_result);\n  result_1 = calculate_result_080028bc(result_1,result_2,hash_result_2);\n  floating_point_value = decode_unsigned_long_long_08008590(result_1);\n  floating_point_value = calculate_floating_point_value_08009318((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n  computed_value = FUNC_08008ba0((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n  result_1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  result_2 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x2c));\n  hash_result_2 = calculate_hash_08008e44(-hash_result);\n  result_1 = calculate_result_080028bc(result_1,result_2,hash_result_2);\n  floating_point_value = decode_unsigned_long_long_08008590(result_1);\n  floating_point_value = calculate_result_080094c0((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n  difference = FUNC_08008ba0((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n  difference = (*(int *)(input_data + 0x10) - computed_value) - difference;\n  if (difference < 0) {\n    result_1 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x28));\n    result_2 = calculate_result_08008e3c(*(undefined4 *)(input_data + 0x2c));\n    hash_result_2 = calculate_hash_08008e44(hash_result);\n    hash_result_3 = calculate_hash_08008e44(*(undefined4 *)(input_data + 0x10));\n    result_1 = calculate_result_08002908(result_1,result_2,hash_result_2,hash_result_3);\n    floating_point_value = decode_unsigned_long_long_08008590(result_1);\n    floating_point_value = calculate_floating_point_value_08009318((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n    shifted_result = FUNC_08008ba0((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20));\n    shifted_result = shifted_result & ~((int)shifted_result >> 0x1f);\n    computed_value = *(uint *)(input_data + 0x10);\n    if ((int)shifted_result <= (int)*(uint *)(input_data + 0x10)) {\n      computed_value = shifted_result;\n    }\n    difference = 0;\n  }\n  *(uint *)(input_data + 0x34) = computed_value;\n  *(uint *)(input_data + 0x38) = difference + computed_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c18": "calculate_values_08002c18",
                "param_1": "input_data",
                "param_2": "float_value_1",
                "param_3": "float_value_2",
                "uVar1": "result_1",
                "iVar2": "hash_result",
                "uVar3": "result_2",
                "uVar4": "hash_result_2",
                "uVar5": "hash_result_3",
                "uVar6": "shifted_result",
                "uVar7": "floating_point_value",
                "local_20": "difference",
                "local_1c": "computed_value"
            },
            "calling": [
                "FUN_08002e08"
            ],
            "called": [
                "FUN_080094c0",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_0800856c",
                "FUN_08008e44",
                "FUN_08008640",
                "FUN_08008e3c",
                "FUN_080028bc",
                "FUN_08008ba0",
                "FUN_08002908",
                "FUN_08009318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002e08": {
            "entrypoint": "0x08002e08",
            "current_name": "calculate_and_update_values_08002e08",
            "code": "\nvoid calculate_and_update_values_08002e08(void)\n\n{\n  undefined4 uVar1;\n  undefined4 uVar2;\n  int index;\n  undefined *data_ptr;\n  byte byte_value;\n  \n  data_ptr = (undefined *)0x0;\n  byte_value = DAT_20000cf1;\n  while (byte_value != DAT_20000cf0) {\n    index = (uint)byte_value * 0x40;\n    if ((data_ptr != (undefined *)0x0) &&\n       ((data_ptr[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      uVar1 = calculate_float(*(undefined4 *)(data_ptr + 0x18),*(undefined4 *)(data_ptr + 0x14));\n      uVar2 = calculate_float(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(data_ptr + 0x14));\n      update_values(data_ptr,uVar1,uVar2);\n      data_ptr[0x24] = 0;\n    }\n    byte_value = increment_and_limit(byte_value);\n    data_ptr = &DAT_20000870 + index;\n  }\n  uVar1 = calculate_float(*(undefined4 *)(data_ptr + 0x18),*(undefined4 *)(data_ptr + 0x14));\n  uVar2 = calculate_float(0,*(undefined4 *)(data_ptr + 0x14));\n  update_values(data_ptr,uVar1,uVar2);\n  data_ptr[0x24] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002e08": "calculate_and_update_values_08002e08",
                "local_18": "data_ptr",
                "local_11": "byte_value",
                "iVar3": "index",
                "calculate_float_08009054": "calculate_float",
                "calculate_values_08002c18": "update_values",
                "increment_and_limit_08002870": "increment_and_limit"
            },
            "calling": [
                "FUN_08002edc"
            ],
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002edc": {
            "entrypoint": "0x08002edc",
            "current_name": "initialize_system_08002edc",
            "code": "\nvoid initialize_system_08002edc(void)\n\n{\n  handle_combination();\n  process_input_loop();\n  calculate_and_update_values();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002edc": "initialize_system_08002edc",
                "handle_combination_08002a94": "handle_combination",
                "process_input_loop_08002ba8": "process_input_loop",
                "calculate_and_update_values_08002e08": "calculate_and_update_values"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "called": [
                "FUN_08002ba8",
                "FUN_08002e08",
                "FUN_08002a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "entrypoint": "0x08002ef0",
            "current_name": "update_dat20000cf1_and_dat20000cf2_08002ef0",
            "code": "\nvoid update_dat20000cf1_and_dat20000cf2_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_limit(DAT_20000cf0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ef0": "update_dat20000cf1_and_dat20000cf2_08002ef0",
                "increment_and_limit_08002870": "increment_and_limit"
            },
            "calling": [
                "FUN_08002f24"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f24": {
            "entrypoint": "0x08002f24",
            "current_name": "update_and_copy_buffer_08002f24",
            "code": "\nvoid update_and_copy_buffer_08002f24(void)\n\n{\n  update_data();\n  copy_buffer(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f24": "update_and_copy_buffer_08002f24",
                "update_dat20000cf1_and_dat20000cf2_08002ef0": "update_data",
                "copy_and_fill_buffer_0800b430": "copy_buffer"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f40": {
            "entrypoint": "0x08002f40",
            "current_name": "update_data_08002f40",
            "code": "\nvoid update_data_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_limit_08002870(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f40": "update_data_08002f40"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08002870"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f74": {
            "entrypoint": "0x08002f74",
            "current_name": "get_active_pointer_08002f74",
            "code": "\nundefined * getActivePointer_08002f74(void)\n\n{\n  undefined *activePointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    activePointer = (undefined *)0x0;\n  }\n  else {\n    activePointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return activePointer;\n}\n\n",
            "renaming": {
                "FUN_08002f74": "get_active_pointer_08002f74",
                "puVar1": "activePointer"
            },
            "calling": [
                "FUN_08002fd4",
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fac": {
            "entrypoint": "0x08002fac",
            "current_name": "are_data_equal_08002fac",
            "code": "\nbool areDataEqual_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "renaming": {
                "FUN_08002fac": "are_data_equal_08002fac"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "entrypoint": "0x08002fd4",
            "current_name": "handle_alarm_state_updates_08002fd4",
            "code": "\nvoid handle_alarm_state_updates_08002fd4(void)\n\n{\n  int activePointer;\n  \n  while ((activePointer = getActivePointer(), activePointer != 0 || (DAT_20000ea9 == '\\x03'))) {\n    handleAlarmStateUpdate();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002fd4": "handle_alarm_state_updates_08002fd4",
                "iVar1": "activePointer",
                "get_active_pointer_08002f74": "getActivePointer",
                "handle_alarm_state_update_08003a74": "handleAlarmStateUpdate"
            },
            "calling": [
                "FUN_08002408",
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_08000220"
            ],
            "called": [
                "FUN_08002f74",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003004": {
            "entrypoint": "0x08003004",
            "current_name": "calculate_product_08003004",
            "code": "\nvoid calculateProduct_08003004(undefined4 inputValue1,undefined4 inputValue2,undefined4 inputValue3,undefined4 inputValue4,\n                 char flag)\n\n{\n  undefined4 floatValue1;\n  int product1;\n  int product2;\n  int product3;\n  undefined4 hash1;\n  undefined4 hash2;\n  undefined4 hash3;\n  undefined4 hash4;\n  uint maxValue;\n  int index;\n  ushort *pointer;\n  int difference;\n  uint minValue;\n  undefined8 decodedValue;\n  undefined8 decodedValue2;\n  undefined8 decodedValue3;\n  undefined4 result1;\n  undefined4 result2;\n  \n  index = (uint)DAT_20000cf0 * 0x40;\n  pointer = (ushort *)(&DAT_20000870 + index);\n  floatValue1 = calculate_float_08008eec(DAT_20000ebc,inputValue1);\n  decodedValue = decode_unsigned_long_long_08008590(floatValue1);\n  product1 = calculate_product_080095b8((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n  floatValue1 = calculate_float_08008eec(DAT_20000ec0,inputValue2);\n  decodedValue = decode_unsigned_long_long_08008590(floatValue1);\n  product2 = calculate_product_080095b8((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n  floatValue1 = calculate_float_08008eec(DAT_20000ec4,inputValue3);\n  decodedValue = decode_unsigned_long_long_08008590(floatValue1);\n  product3 = calculate_product_080095b8((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n  *pointer = 0;\n  if (product1 < DAT_20000cf4) {\n    *pointer = *pointer | 0x20;\n  }\n  if (product2 < DAT_20000cf8) {\n    *pointer = *pointer | 0x880;\n  }\n  if (product3 < DAT_20000cfc) {\n    *pointer = *pointer | 0x200;\n  }\n  difference = product1 - DAT_20000cf4;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000874 + index) = difference;\n  difference = product2 - DAT_20000cf8;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_20000878 + index) = difference;\n  difference = product3 - DAT_20000cfc;\n  if (difference < 0) {\n    difference = -difference;\n  }\n  *(int *)(&DAT_2000087c + index) = difference;\n  maxValue = *(uint *)(&DAT_2000087c + index);\n  if (*(uint *)(&DAT_2000087c + index) < *(uint *)(&DAT_20000878 + index)) {\n    maxValue = *(uint *)(&DAT_20000878 + index);\n  }\n  minValue = *(uint *)(&DAT_20000874 + index);\n  if (*(uint *)(&DAT_20000874 + index) < maxValue) {\n    minValue = maxValue;\n  }\n  *(uint *)(&DAT_20000880 + index) = minValue;\n  if (*(int *)(&DAT_20000880 + index) != 0) {\n    floatValue1 = calculate_hash_08008e44(product1 - DAT_20000cf4);\n    floatValue1 = calculate_float_08009054(floatValue1,DAT_20000ebc);\n    hash1 = calculate_hash_08008e44(product2 - DAT_20000cf8);\n    hash1 = calculate_float_08009054(hash1,DAT_20000ec0);\n    hash2 = calculate_hash_08008e44(product3 - DAT_20000cfc);\n    hash2 = calculate_float_08009054(hash2,DAT_20000ec4);\n    hash3 = calculate_float_08008eec(floatValue1,floatValue1);\n    hash4 = calculate_float_08008eec(hash1,hash1);\n    hash3 = calculate_floating_point_08008cdc(hash3,hash4);\n    hash4 = calculate_float_08008eec(hash2,hash2);\n    hash3 = calculate_floating_point_08008cdc(hash3,hash4);\n    decodedValue = decode_unsigned_long_long_08008590(hash3);\n    decodedValue = process_data_080098d0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n    hash3 = calculate_float_value_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + index) = hash3;\n    hash3 = calculate_float_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + index));\n    if (flag == '\\0') {\n      result2 = calculate_float_08008eec(inputValue4,hash3);\n    }\n    else {\n      result2 = calculate_float_08009054(0x3f800000,inputValue4);\n    }\n    hash4 = calculate_float_08008eec(*(undefined4 *)(&DAT_20000890 + index),result2);\n    *(undefined4 *)(&DAT_20000884 + index) = hash4;\n    hash4 = calculate_hash_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    hash4 = calculate_float_08008eec(hash4,result2);\n    decodedValue = decode_unsigned_long_long_08008590(hash4);\n    decodedValue = calculate_floating_point_value_08009318((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n    hash4 = validate_and_shift_08008bf0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + index) = hash4;\n    hash4 = calculate_hash_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    hash4 = calculate_float_08008eec(hash4,hash3);\n    hash4 = calculate_float_08008eec(hash4,DAT_20000edc);\n    hash4 = calculate_float_08009054(hash4,0x453b8000);\n    decodedValue = decode_unsigned_long_long_08008590(hash4);\n    decodedValue = calculate_floating_point_value_08009318((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n    hash4 = FUNC_08008ba0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + index) = hash4;\n    maxValue = calculate_float_08008eec(floatValue1,hash3);\n    floatValue1 = calculate_float_08008eec(hash1,hash3);\n    hash1 = calculate_float_08008eec(hash2,hash3);\n    result1 = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (difference = check_if_empty_string_08009264(DAT_20000d0c,0), difference != 0)) {\n      hash2 = calculate_float_08008eec(DAT_20000d00 ^ 0x80000000,maxValue);\n      hash3 = calculate_float_08008eec(DAT_20000d04,floatValue1);\n      hash2 = calculate_inverse_08008cd8(hash2,hash3);\n      hash3 = calculate_float_08008eec(DAT_20000d08,hash1);\n      hash2 = calculate_inverse_08008cd8(hash2,hash3);\n      decodedValue = decode_unsigned_long_long_08008590(hash2);\n      difference = is_cy_null_08008b24((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x66666666,0x3fee6666);\n      if (difference != 0) {\n        difference = is_input_empty_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + index));\n        result1 = DAT_20000d0c;\n        if (difference == 0) {\n          result1 = *(undefined4 *)(&DAT_20000884 + index);\n        }\n        decodedValue = decode_unsigned_long_long_08008590(hash2);\n        difference = check_null_terminator_08008b60((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x66666666,0xbfee6666);\n        if (difference != 0) {\n          decodedValue = decode_unsigned_long_long_08008590(hash2);\n          decodedValue = reverse_bitwise_operations_080082d0(0,0x3ff00000,(int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          decodedValue = calculate_hash_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0,0x3fe00000);\n          decodedValue = process_data_080098d0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          hash2 = calculate_float_value_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          decodedValue = decode_unsigned_long_long_08008590(result1);\n          hash3 = calculate_float_08008eec(DAT_20000edc,DAT_20000ee0);\n          hash3 = calculate_float_08008eec(hash3,hash2);\n          decodedValue2 = decode_unsigned_long_long_08008590(hash3);\n          decodedValue3 = decode_unsigned_long_long_08008590(hash2);\n          decodedValue3 = reverse_bitwise_operations_080082d0(0,0x3ff00000,(int)decodedValue3,(int)((ulonglong)decodedValue3 >> 0x20));\n          decodedValue2 = calculate_double_08008894((int)decodedValue2,(int)((ulonglong)decodedValue2 >> 0x20),(int)decodedValue3,\n                                (int)((ulonglong)decodedValue3 >> 0x20));\n          decodedValue2 = process_data_080098d0((int)decodedValue2,(int)((ulonglong)decodedValue2 >> 0x20));\n          difference = is_cy_null_08008b24((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),(int)decodedValue2,\n                                (int)((ulonglong)decodedValue2 >> 0x20));\n          if (difference == 0) {\n            hash3 = calculate_float_08008eec(DAT_20000edc,DAT_20000ee0);\n            hash3 = calculate_float_08008eec(hash3,hash2);\n            decodedValue = decode_unsigned_long_long_08008590(hash3);\n            decodedValue2 = decode_unsigned_long_long_08008590(hash2);\n            decodedValue2 = reverse_bitwise_operations_080082d0(0,0x3ff00000,(int)decodedValue2,(int)((ulonglong)decodedValue2 >> 0x20));\n            decodedValue = calculate_double_08008894((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),(int)decodedValue2,\n                                  (int)((ulonglong)decodedValue2 >> 0x20));\n            decodedValue = process_data_080098d0((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n            result1 = calculate_float_value_08008c30((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + index) = result1;\n    hash3 = process_data_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + index));\n    difference = is_input_empty_08009228(result1,hash3);\n    hash2 = hash3;\n    if (difference != 0) {\n      hash2 = result1;\n    }\n    *(undefined4 *)(&DAT_20000888 + index) = hash2;\n    difference = check_combination_08009250(hash3,*(undefined4 *)(&DAT_20000884 + index));\n    if (difference == 0) {\n      (&DAT_20000895)[index] = 0;\n    }\n    else {\n      (&DAT_20000895)[index] = 1;\n    }\n    (&DAT_20000894)[index] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + index);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = maxValue;\n    DAT_20000d04 = floatValue1;\n    DAT_20000d08 = hash1;\n    DAT_20000cf2 = increment_and_limit_08002870(DAT_20000cf2);\n    DAT_20000cf4 = product1;\n    DAT_20000cf8 = product2;\n    DAT_20000cfc = product3;\n    initialize_system_08002edc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003004": "calculate_product_08003004",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "inputValue4",
                "param_5": "flag",
                "uVar1": "floatValue1",
                "iVar2": "product1",
                "iVar3": "product2",
                "iVar4": "product3",
                "uVar5": "hash1",
                "uVar6": "hash2",
                "uVar7": "hash3",
                "uVar8": "hash4",
                "uVar9": "maxValue",
                "iVar10": "index",
                "puVar11": "pointer",
                "iVar12": "difference",
                "uVar13": "minValue",
                "uVar14": "decodedValue",
                "uVar15": "decodedValue2",
                "uVar16": "decodedValue3",
                "local_20": "result1",
                "local_1c": "result2"
            },
            "calling": [
                "FUN_08001e98"
            ],
            "called": [
                "FUN_080095b8",
                "FUN_08008cdc",
                "FUN_08008bf0",
                "FUN_08008b24",
                "FUN_08002edc",
                "FUN_08002978",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008b60",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_08009228",
                "FUN_080098d0",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008ba0",
                "FUN_08009250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035ec": {
            "entrypoint": "0x080035ec",
            "current_name": "initialize_data_080035ec",
            "code": "\nvoid initializeData_080035ec(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  DAT_20000cf4 = input1;\n  DAT_20000cf8 = input2;\n  DAT_20000cfc = input3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035ec": "initialize_data_080035ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "FUN_0800283a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003618": {
            "entrypoint": "0x08003618",
            "current_name": "initialize_and_calculate_hash_08003618",
            "code": "\nvoid initialize_and_calculate_hash_08003618(undefined4 input_value)\n\n{\n  undefined4 calculated_hash;\n  int array_index;\n  undefined4 temp_value;\n  \n  array_index = (uint)DAT_20000cf1 * 0x40;\n  temp_value = *(undefined4 *)(&DAT_20000890 + array_index);\n  calculated_hash = calculate_hash(input_value);\n  calculated_hash = calculate_float(temp_value,calculated_hash);\n  temp_value = calculate_hash(*(undefined4 *)(&DAT_20000880 + array_index));\n  calculated_hash = calculate_another_float(calculated_hash,temp_value);\n  *(undefined4 *)(&DAT_20000890 + array_index) = calculated_hash;\n  *(undefined4 *)(&DAT_20000880 + array_index) = input_value;\n  *(undefined4 *)(&DAT_20000888 + array_index) = 0;\n  *(undefined4 *)(&DAT_2000088c + array_index) = 0;\n  (&DAT_20000895)[array_index] = 0;\n  (&DAT_20000894)[array_index] = 1;\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003618": "initialize_and_calculate_hash_08003618",
                "param_1": "input_value",
                "uVar1": "calculated_hash",
                "iVar2": "array_index",
                "uVar3": "temp_value",
                "calculate_hash_08008e44": "calculate_hash",
                "calculate_float_08008eec": "calculate_float",
                "calculate_float_08009054": "calculate_another_float",
                "initialize_system_08002edc": "initialize_system"
            },
            "calling": [
                "FUN_080058a0"
            ],
            "called": [
                "FUN_08002edc",
                "FUN_08008eec",
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800369c": {
            "entrypoint": "0x0800369c",
            "current_name": "wait_for_characters_0800369c",
            "code": "\nvoid waitForCharacters_0800369c(char *inputString)\n\n{\n  char *currentCharacter;\n  \n  currentCharacter = inputString;\n  while (*currentCharacter != '\\0') {\n    wait_for_bit_to_be_set_08008250(*currentCharacter);\n    currentCharacter = currentCharacter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800369c": "wait_for_characters_0800369c",
                "param_1": "inputString",
                "local_c": "currentCharacter"
            },
            "calling": [
                "FUN_08004900",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036c6": {
            "entrypoint": "0x080036c6",
            "current_name": "wait_for_characters_080036c6",
            "code": "\nvoid wait_for_characters_080036c6(char *characters)\n\n{\n  char *current_character;\n  \n  current_character = characters;\n  while (*current_character != '\\0') {\n    wait_for_bit_to_be_set_08008250(*current_character);\n    current_character = current_character + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036c6": "wait_for_characters_080036c6",
                "param_1": "characters",
                "local_c": "current_character"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004900",
                "FUN_08004030",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004940",
                "FUN_08004148"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080036f0": {
            "entrypoint": "0x080036f0",
            "current_name": "bit_wait_080036f0",
            "code": "\nvoid bitWait_080036f0(uint value,int bitCount)\n\n{\n  undefined4 bitValue;\n  int bitIndex;\n  uint bitMask;\n  \n  bitMask = 1 << (bitCount - 1U & 0xff);\n  for (bitIndex = 0; bitIndex < bitCount; bitIndex = bitIndex + 1) {\n    if ((bitMask & value) == 0) {\n      bitValue = 0x30;\n    }\n    else {\n      bitValue = 0x31;\n    }\n    wait_for_bit_to_be_set_08008250(bitValue);\n    bitMask = bitMask >> 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080036f0": "bit_wait_080036f0",
                "param_1": "value",
                "param_2": "bitCount",
                "uVar1": "bitValue",
                "local_10": "bitIndex",
                "local_c": "bitMask"
            },
            "calling": [
                "FUN_0800375c",
                "FUN_08003740"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003740": {
            "entrypoint": "0x08003740",
            "current_name": "wait_for_bit_08003740",
            "code": "\nvoid wait_for_bit_08003740(undefined input)\n\n{\n  wait_for_bit_08003740(input,8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003740": "wait_for_bit_08003740",
                "param_1": "input",
                "bit_wait_080036f0": "wait_for_bit"
            },
            "calling": [],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800375c": {
            "entrypoint": "0x0800375c",
            "current_name": "wait_for_bit_0800375c",
            "code": "\nvoid wait_for_bit_0800375c(undefined2 bit_mask)\n\n{\n  wait_for_bit_0800375c_helper(bit_mask,0x10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800375c": "wait_for_bit_0800375c",
                "param_1": "bit_mask",
                "bit_wait_080036f0": "wait_for_bit_helper"
            },
            "calling": [
                "FUN_08004250"
            ],
            "called": [
                "FUN_080036f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003778": {
            "entrypoint": "0x08003778",
            "current_name": "convert_number_to_bits_08003778",
            "code": "\nvoid convertNumberToBits_08003778(uint inputNumber)\n\n{\n  uint index;\n  uint quotient;\n  char reversedBits [12];\n  byte numDigits;\n  \n  numDigits = 0;\n  quotient = inputNumber;\n  if (inputNumber == 0) {\n    wait_for_bit_to_be_set_08008250(0x30);\n  }\n  else {\n    for (; quotient != 0; quotient = quotient / 10) {\n      index = (uint)numDigits;\n      numDigits = numDigits + 1;\n      reversedBits[index + 1] = (char)(quotient % 10) + '0';\n    }\n    for (; numDigits != 0; numDigits = numDigits - 1) {\n      wait_for_bit_to_be_set_08008250(reversedBits[numDigits]);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003778": "convert_number_to_bits_08003778",
                "param_1": "inputNumber",
                "uVar1": "index",
                "local_1c": "quotient",
                "acStack_15": "reversedBits",
                "local_9": "numDigits"
            },
            "calling": [
                "FUN_080037fc"
            ],
            "called": [
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080037fc": {
            "entrypoint": "0x080037fc",
            "current_name": "convert_and_print_number_080037fc",
            "code": "\nvoid convertAndPrintNumber_080037fc(int inputNumber)\n\n{\n  int absoluteValue;\n  \n  absoluteValue = inputNumber;\n  if (inputNumber < 0) {\n    waitForBitToBeSet(0x2d);\n    absoluteValue = -inputNumber;\n  }\n  convertToBinary(absoluteValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080037fc": "convert_and_print_number_080037fc",
                "param_1": "inputNumber",
                "local_c": "absoluteValue",
                "wait_for_bit_to_be_set_08008250": "waitForBitToBeSet",
                "convert_number_to_bits_08003778": "convertToBinary"
            },
            "calling": [
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004900"
            ],
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003826": {
            "entrypoint": "0x08003826",
            "current_name": "convert_float_to_ascii_08003826",
            "code": "\nvoid convertFloatToAscii_08003826(uint inputValue)\n\n{\n  int isEmpty;\n  undefined4 convertedValue;\n  byte digit;\n  uint index;\n  uint processedValue;\n  char asciiDigits [13];\n  uint remainder;\n  byte numDigits;\n  byte loopCounter;\n  \n  isEmpty = is_input_empty_08009228(inputValue,0);\n  processedValue = inputValue;\n  if (isEmpty != 0) {\n    wait_for_bit_to_be_set_08008250(0x2d);\n    processedValue = inputValue ^ 0x80000000;\n  }\n  for (loopCounter = DAT_20000ef9; 1 < loopCounter; loopCounter = loopCounter - 2) {\n    processedValue = calculate_float_08008eec(processedValue,0x42c80000);\n  }\n  if (loopCounter != 0) {\n    processedValue = calculate_float_08008eec(processedValue,0x41200000);\n  }\n  convertedValue = calculate_floating_point_08008cdc(processedValue,0x3f000000);\n  numDigits = 0;\n  remainder = convert_to_signed_integer_08009278(convertedValue);\n  asciiDigits[DAT_20000ef9 + 1] = '.';\n  for (; remainder != 0; remainder = remainder / 10) {\n    if (numDigits == DAT_20000ef9) {\n      numDigits = numDigits + 1;\n    }\n    index = (uint)numDigits;\n    numDigits = numDigits + 1;\n    asciiDigits[index + 1] = (char)(remainder % 10) + '0';\n  }\n  while (numDigits < DAT_20000ef9) {\n    index = (uint)numDigits;\n    numDigits = numDigits + 1;\n    asciiDigits[index + 1] = '0';\n  }\n  if (numDigits == DAT_20000ef9) {\n    digit = numDigits + 1;\n    numDigits = numDigits + 2;\n    asciiDigits[digit + 1] = '0';\n  }\n  for (; numDigits != 0; numDigits = numDigits - 1) {\n    wait_for_bit_to_be_set_08008250(asciiDigits[numDigits]);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003826": "convert_float_to_ascii_08003826",
                "param_1": "inputValue",
                "iVar1": "isEmpty",
                "uVar2": "convertedValue",
                "bVar3": "digit",
                "uVar4": "index",
                "local_24": "processedValue",
                "acStack_1d": "asciiDigits",
                "local_10": "remainder",
                "local_a": "numDigits",
                "local_9": "loopCounter"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08004250",
                "FUN_08004940"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08009228",
                "FUN_08008250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003980": {
            "entrypoint": "0x08003980",
            "current_name": "initialize_data_08003980",
            "code": "\nvoid initializeData_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003980": "initialize_data_08003980"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039a0": {
            "entrypoint": "0x080039a0",
            "current_name": "initialize_grbl_080039a0",
            "code": "\nvoid initialize_grbl_080039a0(void)\n\n{\n  initialize_data();\n  print_grbl_version();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039a0": "initialize_grbl_080039a0",
                "initialize_data_08003980": "initialize_data",
                "print_grbl_version_08004228": "print_grbl_version"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080039bc": {
            "entrypoint": "0x080039bc",
            "current_name": "process_data_080039bc",
            "code": "\nvoid processData_080039bc(void)\n\n{\n  int validationResult;\n  undefined4 inputProcessingResult;\n  byte loopIndex;\n  \n  for (loopIndex = 0; loopIndex < 2; loopIndex = loopIndex + 1) {\n    validationResult = validate_and_process_data_08004d2c(loopIndex,&DAT_20000d10);\n    if (validationResult == 0) {\n      handle_error_08004030(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      wait_for_characters_0800369c(&DAT_20000d10);\n      inputProcessingResult = process_input_080005b4(&DAT_20000d10);\n      handle_error_08004030(inputProcessingResult);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080039bc": "process_data_080039bc",
                "iVar1": "validationResult",
                "uVar2": "inputProcessingResult",
                "local_9": "loopIndex"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004030",
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a18": {
            "entrypoint": "0x08003a18",
            "current_name": "process_param_08003a18",
            "code": "\nvoid processParam_08003a18(uint input)\n\n{\n  if ((input & 0x80) == 0) {\n    if ((input & 0x40) == 0) {\n      if ((input & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initialize_and_check_application_080025e8();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a18": "process_param_08003a18",
                "param_1": "input"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a74": {
            "entrypoint": "0x08003a74",
            "current_name": "handle_alarm_state_update_08003a74",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid handleAlarmStateUpdate_08003a74(void)\n\n{\n  byte previousState;\n  \n  previousState = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        displayAlarmMessage(0xffffffff);\n        displayStatusMessage(1);\n        do {\n        } while( true );\n      }\n      displayAlarmMessage(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((previousState & 0x10) == 0) {\n      if ((previousState & 1) != 0) {\n        printPositionInformation();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((previousState & 8) != 0) {\n        updateFlagAndCounter();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((previousState & 4) != 0) {\n        initializeData();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((previousState & 2) != 0) {\n        initializeIfNeeded();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003a74": "handle_alarm_state_update_08003a74",
                "bVar1": "previousState",
                "display_alarm_message_08004148": "displayAlarmMessage",
                "display_status_message_080041a0": "displayStatusMessage",
                "print_position_information_08004940": "printPositionInformation",
                "update_flag_and_counter_0800587c": "updateFlagAndCounter",
                "initialize_data_080058a0": "initializeData",
                "initialize_if_needed_0800585c": "initializeIfNeeded"
            },
            "calling": [
                "FUN_08003f34",
                "FUN_08001e98",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_0800585c",
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_08004940",
                "FUN_080058a0",
                "FUN_08004148"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003b98": {
            "entrypoint": "0x08003b98",
            "current_name": "process_command_08003b98",
            "code": "\nuint process_command_08003b98(char *command)\n\n{\n  byte command_char;\n  int result;\n  undefined4 converted_value;\n  uint status;\n  undefined8 shifted_value;\n  undefined4 second_value;\n  undefined4 converted_second_value;\n  byte index_1;\n  byte index_2;\n  \n  if (*command != '$') {\n    status = process_input_080005b4(command);\n    return status;\n  }\n  index_1 = 1;\n  index_2 = '\\0';\n  command_char = command[1];\n  if (command_char == 0) {\n    initialize_console_menu_0800423c();\n    return 0;\n  }\n  if ((0x58 < command_char) || (command_char < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(command_char) {\n  case 0x23:\n    index_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    process_data_080044e8();\n    break;\n  case 0x24:\n    index_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_settings_08004250();\n    break;\n  case 0x43:\n    index_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_and_check_application_080025e8();\n      display_status_message_080041a0(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_status_message_080041a0(4);\n    }\n    break;\n  case 0x47:\n    index_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_data_080046d0();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    handle_alarm_080024c4();\n    if (DAT_20000ea8 == '\\0') {\n      process_data_080039bc();\n    }\n    break;\n  case 0x4e:\n    index_1 = 2;\n    if (command[2] == '\\0') {\n      for (index_2 = 0; index_2 < 2; index_2 = index_2 + 1) {\n        result = validate_and_process_data_08004d2c(index_2,command);\n        if (result == 0) {\n          handle_error_08004030(10);\n        }\n        else {\n          print_converted_number_08004900(index_2,command);\n        }\n      }\n      return 0;\n    }\n    index_2 = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = parse_integer_08002638(command,&index_1,&converted_second_value);\n    if (result == 0) {\n      return 1;\n    }\n    command_char = index_1 + 1;\n    if (command[index_1] != '=') {\n      return 3;\n    }\n    index_1 = command_char;\n    if (index_2 == '\\0') {\n      result = parse_integer_08002638(command,&index_1,&second_value);\n      if (result == 0) {\n        return 1;\n      }\n      if (command[index_1] == '\\0') {\n        converted_value = convert_to_signed_integer_08009278(converted_second_value);\n        status = set_parameter_08004e30(converted_value,second_value);\n        return status;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)index_1 - (uint)command_char] = command[index_1];\n      status = (uint)index_1;\n      index_1 = index_1 + 1;\n    } while (command[status] != '\\0');\n    index_2 = command_char;\n    index_2 = process_input_080005b4(command);\n    if (index_2 != 0) {\n      return (uint)index_2;\n    }\n    shifted_value = decode_unsigned_long_long_08008590(converted_second_value);\n    shifted_value = extract_bits_and_shift_08009798((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    index_2 = validate_and_shift_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    process_data_08004bc0(index_2,command);\n    break;\n  case 0x58:\n    index_1 = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_status_message_080041a0(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003b98": "process_command_08003b98",
                "param_1": "command",
                "bVar1": "command_char",
                "iVar2": "result",
                "uVar3": "converted_value",
                "uVar4": "status",
                "uVar5": "shifted_value",
                "local_14": "second_value",
                "local_10": "converted_second_value",
                "local_a": "index_1",
                "local_9": "index_2"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08008bf0",
                "FUN_0800423c",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08009798",
                "FUN_08004e30",
                "FUN_080025e8",
                "FUN_080024c4",
                "FUN_08004bc0",
                "FUN_080044e8",
                "FUN_08008590",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08004d2c",
                "FUN_080039bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f34": {
            "entrypoint": "0x08003f34",
            "current_name": "process_input_08003f34",
            "code": "\nvoid processInput_08003f34(void)\n\n{\n  byte currentByte;\n  undefined4 errorCode;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      currentByte = check_and_process_byte_08008286();\n      if (currentByte == 0xff) {\n        return;\n      }\n      if ((currentByte == 10) || (currentByte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < currentByte) && (currentByte != 0x2f)) {\n          if (currentByte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            handle_error_08004030(0xd);\n            initialize_data_08003980();\n          }\n          else if ((currentByte < 0x61) || (0x7a < currentByte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = currentByte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = currentByte - 0x20;\n          }\n        }\n      }\n      else if (currentByte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    handle_alarm_state_update_08003a74();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      handle_error_08004030(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      errorCode = process_command_08003b98(&DAT_20000d10);\n      handle_error_08004030(errorCode);\n    }\n    initialize_data_08003980();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f34": "process_input_08003f34",
                "bVar1": "currentByte",
                "uVar2": "errorCode",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08008286",
                "FUN_08003b98",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08003a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004030": {
            "entrypoint": "0x08004030",
            "current_name": "handle_error_08004030",
            "code": "\nvoid handleError_08004030(char errorCode)\n\n{\n  if (errorCode == '\\0') {\n    printErrorMessage(&DAT_0800b5c8);\n  }\n  else {\n    printErrorMessage(\"error: \");\n    switch(errorCode) {\n    case '\\x01':\n      printErrorMessage(\"Bad number format\");\n      break;\n    case '\\x02':\n      printErrorMessage(\"Expected command letter\");\n      break;\n    case '\\x03':\n      printErrorMessage(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      printErrorMessage(\"Invalid radius\");\n      break;\n    case '\\x05':\n      printErrorMessage(\"Modal group violation\");\n      break;\n    case '\\x06':\n      printErrorMessage(\"Invalid statement\");\n      break;\n    case '\\a':\n      printErrorMessage(\"Setting disabled\");\n      break;\n    case '\\b':\n      printErrorMessage(\"Value < 0.0\");\n      break;\n    case '\\t':\n      printErrorMessage(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      printErrorMessage(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      printErrorMessage(\"Busy or queued\");\n      break;\n    case '\\f':\n      printErrorMessage(\"Alarm lock\");\n      break;\n    case '\\r':\n      printErrorMessage(\"Line overflow\");\n    }\n    printErrorMessage(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004030": "handle_error_08004030",
                "param_1": "errorCode",
                "wait_for_characters_080036c6": "printErrorMessage"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003f34",
                "FUN_08003b98",
                "FUN_080039bc",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004148": {
            "entrypoint": "0x08004148",
            "current_name": "display_alarm_message_08004148",
            "code": "\nvoid displayAlarmMessage_08004148(char errorCode)\n\n{\n  waitForCharacters(\"ALARM: \");\n  if (errorCode == -2) {\n    waitForCharacters(\"Abort during cycle\");\n  }\n  else if (errorCode == -1) {\n    waitForCharacters(\"Hard limit\");\n  }\n  waitForCharacters(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "errorCode",
                "wait_for_characters_080036c6": "waitForCharacters"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08002814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041a0": {
            "entrypoint": "0x080041a0",
            "current_name": "display_status_message_080041a0",
            "code": "\nvoid displayStatusMessage_080041a0(undefined statusCode)\n\n{\n  waitForCharacters(&DAT_0800b710);\n  switch(statusCode) {\n  case 1:\n    waitForCharacters(\"Reset to continue\");\n    break;\n  case 2:\n    waitForCharacters(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    waitForCharacters(\"Caution: Unlocked\");\n    break;\n  case 4:\n    waitForCharacters(\"Enabled\");\n    break;\n  case 5:\n    waitForCharacters(\"Disabled\");\n  }\n  waitForCharacters(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041a0": "display_status_message_080041a0",
                "param_1": "statusCode",
                "wait_for_characters_080036c6": "waitForCharacters"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004228": {
            "entrypoint": "0x08004228",
            "current_name": "print_grbl_version_08004228",
            "code": "\nvoid printGrblVersion_08004228(void)\n\n{\n  waitForCharacters(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228",
                "wait_for_characters_080036c6": "waitForCharacters"
            },
            "calling": [
                "FUN_080039a0"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800423c": {
            "entrypoint": "0x0800423c",
            "current_name": "initialize_console_menu_0800423c",
            "code": "\nvoid initializeConsoleMenu_0800423c(void)\n\n{\n  waitForCharacters(\n              \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800423c": "initialize_console_menu_0800423c",
                "wait_for_characters_080036c6": "waitForCharacters"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004250": {
            "entrypoint": "0x08004250",
            "current_name": "print_settings_08004250",
            "code": "\nvoid printSettings_08004250(void)\n\n{\n  undefined4 uVar1;\n  \n  wait_for_characters_080036c6(&DAT_0800b8b8);\n  convert_float_to_ascii_08003826(DAT_20000ebc);\n  wait_for_characters_080036c6(\" (x, step/mm)\\r\\n$1=\");\n  convert_float_to_ascii_08003826(DAT_20000ec0);\n  wait_for_characters_080036c6(\" (y, step/mm)\\r\\n$2=\");\n  convert_float_to_ascii_08003826(DAT_20000ec4);\n  wait_for_characters_080036c6(\" (z, step/mm)\\r\\n$3=\");\n  convert_and_print_number_080037fc(DAT_20000ec9);\n  wait_for_characters_080036c6(\" (step pulse, usec)\\r\\n$4=\");\n  convert_float_to_ascii_08003826(DAT_20000ecc);\n  wait_for_characters_080036c6(\" (default feed, mm/min)\\r\\n$5=\");\n  convert_float_to_ascii_08003826(DAT_20000ed0);\n  wait_for_characters_080036c6(\" (default seek, mm/min)\\r\\n$6=\");\n  convert_and_print_number_080037fc(DAT_20000ed4);\n  wait_for_characters_080036c6(\" (step port invert mask, int:\");\n  wait_for_bit_0800375c(DAT_20000ed4);\n  wait_for_characters_080036c6(\")\\r\\n$7=\");\n  convert_and_print_number_080037fc(DAT_20000ef8);\n  wait_for_characters_080036c6(\" (step idle delay, msec)\\r\\n$8=\");\n  uVar1 = calculate_float_08009054(DAT_20000edc,0x45610000);\n  convert_float_to_ascii_08003826(uVar1);\n  wait_for_characters_080036c6(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  convert_float_to_ascii_08003826(DAT_20000ee0);\n  wait_for_characters_080036c6(\" (junction deviation, mm)\\r\\n$10=\");\n  convert_float_to_ascii_08003826(DAT_20000ed8);\n  wait_for_characters_080036c6(\" (arc, mm/segment)\\r\\n$11=\");\n  convert_and_print_number_080037fc(DAT_20000efa);\n  wait_for_characters_080036c6(\" (n-arc correction, int)\\r\\n$12=\");\n  convert_and_print_number_080037fc(DAT_20000ef9);\n  wait_for_characters_080036c6(\" (n-decimals, int)\\r\\n$13=\");\n  convert_and_print_number_080037fc((DAT_20000ee4 & 1) != 0);\n  wait_for_characters_080036c6(\" (report inches, bool)\\r\\n$14=\");\n  convert_and_print_number_080037fc((DAT_20000ee4 & 2) != 0);\n  wait_for_characters_080036c6(\" (auto start, bool)\\r\\n$15=\");\n  convert_and_print_number_080037fc((DAT_20000ee4 & 4) != 0);\n  wait_for_characters_080036c6(\" (invert step enable, bool)\\r\\n$16=\");\n  convert_and_print_number_080037fc((DAT_20000ee4 & 8) != 0);\n  wait_for_characters_080036c6(\" (hard limits, bool)\\r\\n$17=\");\n  convert_and_print_number_080037fc((DAT_20000ee4 & 0x10) != 0);\n  wait_for_characters_080036c6(\" (homing cycle, bool)\\r\\n$18=\");\n  convert_and_print_number_080037fc(DAT_20000ee6);\n  wait_for_characters_080036c6(\" (homing dir invert mask, int:\");\n  wait_for_bit_0800375c(DAT_20000ee6);\n  wait_for_characters_080036c6(\")\\r\\n$19=\");\n  convert_float_to_ascii_08003826(DAT_20000ee8);\n  wait_for_characters_080036c6(\" (homing feed, mm/min)\\r\\n$20=\");\n  convert_float_to_ascii_08003826(DAT_20000eec);\n  wait_for_characters_080036c6(\" (homing seek, mm/min)\\r\\n$21=\");\n  convert_and_print_number_080037fc(DAT_20000ef0);\n  wait_for_characters_080036c6(\" (homing debounce, msec)\\r\\n$22=\");\n  convert_float_to_ascii_08003826(DAT_20000ef4);\n  wait_for_characters_080036c6(\" (homing pull-off, mm)\\r\\n$23=\");\n  convert_and_print_number_080037fc(DAT_20000ed6);\n  wait_for_characters_080036c6(\" (dir port invert mask, int:\");\n  wait_for_bit_0800375c(DAT_20000ed6);\n  wait_for_characters_080036c6(&DAT_0800bb94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004250": "print_settings_08004250"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044e8": {
            "entrypoint": "0x080044e8",
            "current_name": "process_data_080044e8",
            "code": "\nvoid processData_080044e8(void)\n\n{\n  int validationResult;\n  undefined4 floatValue;\n  undefined8 hashValue;\n  undefined4 dataBuffer [3];\n  byte index;\n  byte loopCounter;\n  \n  loopCounter = 0;\n  while( true ) {\n    if (7 < loopCounter) {\n      wait_for_characters_080036c6(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          convert_float_to_ascii_08003826(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          hashValue = decode_unsigned_long_long_08008590(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          hashValue = calculate_hash_08008640((int)hashValue,(int)((ulonglong)hashValue >> 0x20),0x57e16865,0x3fa42851);\n          floatValue = calculate_float_value_08008c30((int)hashValue,(int)((ulonglong)hashValue >> 0x20));\n          convert_float_to_ascii_08003826(floatValue);\n        }\n        if (index < 2) {\n          wait_for_characters_080036c6(&DAT_0800bbbc);\n        }\n        else {\n          wait_for_characters_080036c6(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    validationResult = validate_and_process_data_08004d7c(loopCounter,dataBuffer);\n    if (validationResult == 0) break;\n    wait_for_characters_080036c6(&DAT_0800bb98);\n    switch(loopCounter) {\n    case 0:\n      wait_for_characters_080036c6(&DAT_0800bb9c);\n      break;\n    case 1:\n      wait_for_characters_080036c6(&DAT_0800bba0);\n      break;\n    case 2:\n      wait_for_characters_080036c6(&DAT_0800bba4);\n      break;\n    case 3:\n      wait_for_characters_080036c6(&DAT_0800bba8);\n      break;\n    case 4:\n      wait_for_characters_080036c6(&DAT_0800bbac);\n      break;\n    case 5:\n      wait_for_characters_080036c6(&DAT_0800bbb0);\n      break;\n    case 6:\n      wait_for_characters_080036c6(&DAT_0800bbb4);\n      break;\n    case 7:\n      wait_for_characters_080036c6(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        convert_float_to_ascii_08003826(dataBuffer[index]);\n      }\n      else {\n        hashValue = decode_unsigned_long_long_08008590(dataBuffer[index]);\n        hashValue = calculate_hash_08008640((int)hashValue,(int)((ulonglong)hashValue >> 0x20),0x57e16865,0x3fa42851);\n        floatValue = calculate_float_value_08008c30((int)hashValue,(int)((ulonglong)hashValue >> 0x20));\n        convert_float_to_ascii_08003826(floatValue);\n      }\n      if (index < 2) {\n        wait_for_characters_080036c6(&DAT_0800bbbc);\n      }\n      else {\n        wait_for_characters_080036c6(&DAT_0800b764);\n      }\n    }\n    loopCounter = loopCounter + 1;\n  }\n  handle_error_08004030(10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044e8": "process_data_080044e8",
                "iVar1": "validationResult",
                "uVar2": "floatValue",
                "uVar3": "hashValue",
                "auStack_18": "dataBuffer",
                "local_a": "index",
                "local_9": "loopCounter"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08004030",
                "FUN_08008c30",
                "FUN_08003826",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046d0": {
            "entrypoint": "0x080046d0",
            "current_name": "print_data_080046d0",
            "code": "\nvoid printData_080046d0(void)\n\n{\n  undefined4 floatValue;\n  undefined8 hashValue;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    wait_for_characters_080036c6(&DAT_0800bbc8);\n    break;\n  case 1:\n    wait_for_characters_080036c6(&DAT_0800bbcc);\n    break;\n  case 2:\n    wait_for_characters_080036c6(&DAT_0800bbd0);\n    break;\n  case 3:\n    wait_for_characters_080036c6(&DAT_0800bbd4);\n    break;\n  case 4:\n    wait_for_characters_080036c6(&DAT_0800bbd8);\n  }\n  wait_for_characters_080036c6(&DAT_0800bbe0);\n  convert_and_print_number_080037fc(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      wait_for_characters_080036c6(&DAT_0800bbe4);\n    }\n    else {\n      wait_for_characters_080036c6(&DAT_0800bbec);\n    }\n  }\n  else {\n    wait_for_characters_080036c6(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    wait_for_characters_080036c6(&DAT_0800bc04);\n  }\n  else {\n    wait_for_characters_080036c6(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    wait_for_characters_080036c6(&DAT_0800bc14);\n  }\n  else {\n    wait_for_characters_080036c6(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    wait_for_characters_080036c6(&DAT_0800bc24);\n  }\n  else {\n    wait_for_characters_080036c6(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    wait_for_characters_080036c6(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      wait_for_characters_080036c6(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      wait_for_characters_080036c6(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    wait_for_characters_080036c6(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      wait_for_characters_080036c6(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      wait_for_characters_080036c6(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    wait_for_characters_080036c6(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      wait_for_characters_080036c6(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      wait_for_characters_080036c6(&DAT_0800bc48);\n    }\n  }\n  wait_for_characters_080036c6(&DAT_0800bc50);\n  convert_and_print_number_080037fc(DAT_20000e88);\n  wait_for_characters_080036c6(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    convert_float_to_ascii_08003826(DAT_20000e78);\n  }\n  else {\n    hashValue = decode_unsigned_long_long_08008590(DAT_20000e78);\n    hashValue = calculate_hash_08008640((int)hashValue,(int)((ulonglong)hashValue >> 0x20),0x57e16865,0x3fa42851);\n    floatValue = calculate_float_value_08008c30((int)hashValue,(int)((ulonglong)hashValue >> 0x20));\n    convert_float_to_ascii_08003826(floatValue);\n  }\n  wait_for_characters_080036c6(&DAT_0800b764);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046d0": "print_data_080046d0",
                "uVar1": "floatValue",
                "uVar2": "hashValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008c30",
                "FUN_08003826"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004900": {
            "entrypoint": "0x08004900",
            "current_name": "print_converted_number_08004900",
            "code": "\nvoid printConvertedNumber_08004900(undefined inputNumber,undefined4 additionalData)\n\n{\n  waitForHeader3(&DAT_0800bc58);\n  convertAndPrint(inputNumber);\n  waitForHeader3(&DAT_0800bc5c);\n  waitForHeader2(additionalData);\n  waitForHeader3(&DAT_0800b6d8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004900": "print_converted_number_08004900",
                "param_1": "inputNumber",
                "param_2": "additionalData",
                "wait_for_characters_080036c6": "waitForHeader3",
                "convert_and_print_number_080037fc": "convertAndPrint",
                "wait_for_characters_0800369c": "waitForHeader2"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_0800369c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004940": {
            "entrypoint": "0x08004940",
            "current_name": "print_position_information_08004940",
            "code": "\nvoid printPositionInformation_08004940(void)\n\n{\n  undefined4 hash;\n  uint index;\n  undefined4 floatingPoint;\n  undefined8 unsignedLongLong;\n  undefined8 decodedValue;\n  undefined4 positionValues [6];\n  byte counter;\n  \n  positionValues[3] = DAT_20000eac;\n  positionValues[4] = DAT_20000eb0;\n  positionValues[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    wait_for_characters_080036c6(\"<Idle\");\n    break;\n  case 2:\n    wait_for_characters_080036c6(\"<Queue\");\n    break;\n  case 3:\n    wait_for_characters_080036c6(&DAT_0800bc70);\n    break;\n  case 4:\n    wait_for_characters_080036c6(\"<Hold\");\n    break;\n  case 5:\n    wait_for_characters_080036c6(\"<Home\");\n    break;\n  case 6:\n    wait_for_characters_080036c6(\"<Alarm\");\n    break;\n  case 7:\n    wait_for_characters_080036c6(\"<Check\");\n  }\n  wait_for_characters_080036c6(\",MPos:\");\n  for (counter = 0; counter < 3; counter = counter + 1) {\n    hash = calculate_hash_08008e44(positionValues[counter + 3]);\n    index = (uint)counter;\n    hash = calculate_float_08009054(hash,(&DAT_20000ebc)[counter]);\n    positionValues[index] = hash;\n    if ((DAT_20000ee4 & 1) != 0) {\n      unsignedLongLong = decode_unsigned_long_long_08008590(positionValues[counter]);\n      unsignedLongLong = calculate_hash_08008640((int)unsignedLongLong,(int)((ulonglong)unsignedLongLong >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)counter;\n      hash = calculate_float_value_08008c30((int)unsignedLongLong,(int)((ulonglong)unsignedLongLong >> 0x20));\n      positionValues[index] = hash;\n    }\n    convert_float_to_ascii_08003826(positionValues[counter]);\n    wait_for_characters_080036c6(&DAT_0800bbbc);\n  }\n  wait_for_characters_080036c6(\"WPos:\");\n  for (counter = 0; counter < 3; counter = counter + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      floatingPoint = positionValues[counter];\n      hash = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (counter + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (counter + 10) * 4));\n      index = (uint)counter;\n      hash = calculate_inverse_08008cd8(floatingPoint,hash);\n      positionValues[index] = hash;\n    }\n    else {\n      unsignedLongLong = decode_unsigned_long_long_08008590(positionValues[counter]);\n      hash = calculate_floating_point_08008cdc(*(undefined4 *)(&DAT_20000e70 + (counter + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (counter + 10) * 4));\n      decodedValue = decode_unsigned_long_long_08008590(hash);\n      decodedValue = calculate_hash_08008640((int)decodedValue,(int)((ulonglong)decodedValue >> 0x20),0x57e16865,0x3fa42851);\n      unsignedLongLong = reverse_bitwise_operations_080082d0((int)unsignedLongLong,(int)((ulonglong)unsignedLongLong >> 0x20),(int)decodedValue,\n                           (int)((ulonglong)decodedValue >> 0x20));\n      index = (uint)counter;\n      hash = calculate_float_value_08008c30((int)unsignedLongLong,(int)((ulonglong)unsignedLongLong >> 0x20));\n      positionValues[index] = hash;\n    }\n    convert_float_to_ascii_08003826(positionValues[counter]);\n    if (counter < 2) {\n      wait_for_characters_080036c6(&DAT_0800bbbc);\n    }\n  }\n  wait_for_characters_080036c6(&DAT_0800bca8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004940": "print_position_information_08004940",
                "auStack_2c": "positionValues",
                "uVar1": "hash",
                "uVar2": "index",
                "uVar3": "floatingPoint",
                "uVar4": "unsignedLongLong",
                "uVar5": "decodedValue",
                "local_11": "counter"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08008cdc",
                "FUN_080036c6",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08009054",
                "FUN_08003826",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "entrypoint": "0x08004bc0",
            "current_name": "process_data_08004bc0",
            "code": "\nvoid process_data_08004bc0(byte input_value,undefined4 input_data)\n\n{\n  process_data_08004bc0_helper((word)input_value * 0x101 + 0x300,input_data,0x100);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bc0": "process_data_08004bc0",
                "param_1": "input_value",
                "param_2": "input_data",
                "process_data_08000374": "process_data_helper",
                "ushort": "word"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "entrypoint": "0x08004bf4",
            "current_name": "process_data_08004bf4",
            "code": "\nvoid process_data_08004bf4(byte input_byte,undefined4 input_value)\n\n{\n  process_data_08004bf4_08000374((ushort)input_byte * 0xd + 0x200,input_value,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bf4": "process_data_08004bf4",
                "param_1": "input_byte",
                "param_2": "input_value"
            },
            "calling": [
                "FUN_080005b4",
                "FUN_08004d7c"
            ],
            "called": [
                "FUN_08000374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "entrypoint": "0x08004c2a",
            "current_name": "initialize_data_08004c2a",
            "code": "\nvoid initializeData_08004c2a(void)\n\n{\n  storeData(0,5);\n  processData(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c2a": "initialize_data_08004c2a",
                "store_data_08000340": "storeData",
                "process_data_08000374": "processData"
            },
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "initialize_data_08004c48",
            "code": "\nvoid initialize_data_08004c48(char input_value)\n\n{\n  if (input_value != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data_08004c48_08004c2a();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "initialize_data_08004c48",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08004dd2",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_08004c2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "entrypoint": "0x08004d2c",
            "current_name": "validate_and_process_data_08004d2c",
            "code": "\nbool validateAndProcessData_08004d2c(byte byteValue,undefined *dataPtr)\n\n{\n  int validationResult;\n  \n  validationResult = validate_data_080003ec(dataPtr,(ushort)byteValue * 0x101 + 0x300,0x100);\n  if (validationResult == 0) {\n    *dataPtr = 0;\n    process_data_08004bc0(byteValue,dataPtr);\n  }\n  return validationResult != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d2c": "validate_and_process_data_08004d2c",
                "param_1": "byteValue",
                "param_2": "dataPtr",
                "iVar1": "validationResult"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "entrypoint": "0x08004d7c",
            "current_name": "validate_and_process_data_08004d7c",
            "code": "\nbool validate_and_process_data_08004d7c(byte byte_param,undefined4 param_2)\n\n{\n  int validation_result;\n  \n  validation_result = validate_data_080003ec(param_2,(ushort)byte_param * 0xd + 0x200,0xc);\n  if (validation_result == 0) {\n    copy_and_fill_buffer_0800b430(param_2,0,0xc);\n    process_data_08004bf4(byte_param,param_2);\n  }\n  return validation_result != 0;\n}\n\n",
            "renaming": {
                "FUN_08004d7c": "validate_and_process_data_08004d7c",
                "param_1": "byte_param",
                "iVar1": "validation_result"
            },
            "calling": [
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_080005b4",
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_0800b430",
                "FUN_08004bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "entrypoint": "0x08004dd2",
            "current_name": "process_buffer_08004dd2",
            "code": "\nundefined4 process_buffer_08004dd2(void)\n\n{\n  byte buffer_data;\n  int validation_result;\n  \n  buffer_data = get_buffer_data_08000310(0);\n  if (buffer_data == 5) {\n    validation_result = validate_data_080003ec(&DAT_20000ebc,1,0x40);\n    if (validation_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < buffer_data) {\n      return 0;\n    }\n    validation_result = validate_data_080003ec(&DAT_20000ebc,1,0x28);\n    if (validation_result == 0) {\n      return 0;\n    }\n    initialize_data_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004dd2": "process_buffer_08004dd2",
                "bVar1": "buffer_data",
                "iVar2": "validation_result"
            },
            "calling": [
                "FUN_080051b4"
            ],
            "called": [
                "FUN_080003ec",
                "FUN_08004c48",
                "FUN_08000310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e30": {
            "entrypoint": "0x08004e30",
            "current_name": "set_parameter_08004e30",
            "code": "\nundefined4 setParameter_08004e30(int parameterIndex,uint parameterValue)\n\n{\n  undefined4 returnValue;\n  int checkResult;\n  undefined8 tempValue;\n  \n  switch(parameterIndex) {\n  case 0:\n  case 1:\n  case 2:\n    checkResult = check_combined_parameters_0800923c(parameterValue,0);\n    if (checkResult != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[parameterIndex] = parameterValue;\n    break;\n  case 3:\n    checkResult = is_input_empty_08009228(parameterValue,0x40400000);\n    if (checkResult != 0) {\n      return 9;\n    }\n    tempValue = decode_unsigned_long_long_08008590(parameterValue);\n    tempValue = convert_to_double_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ec9 = validate_and_shift_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = parameterValue;\n    break;\n  case 5:\n    DAT_20000ed0 = parameterValue;\n    break;\n  case 6:\n    tempValue = decode_unsigned_long_long_08008590(parameterValue);\n    tempValue = extract_bits_and_shift_08009798((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ed4 = validate_and_shift_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 7:\n    tempValue = decode_unsigned_long_long_08008590(parameterValue);\n    tempValue = convert_to_double_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ef8 = validate_and_shift_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 8:\n    returnValue = calculate_float_08008eec(parameterValue,0x42700000);\n    DAT_20000edc = calculate_float_08008eec(returnValue,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = parameterValue & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = parameterValue;\n    break;\n  case 0xb:\n    tempValue = decode_unsigned_long_long_08008590(parameterValue);\n    tempValue = convert_to_double_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000efa = validate_and_shift_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 0xc:\n    tempValue = decode_unsigned_long_long_08008590(parameterValue);\n    tempValue = convert_to_double_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ef9 = validate_and_shift_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 0xd:\n    checkResult = check_if_combination_exists_08009214(parameterValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    checkResult = check_if_combination_exists_08009214(parameterValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    checkResult = check_if_combination_exists_08009214(parameterValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    checkResult = check_if_combination_exists_08009214(parameterValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    extract_flag_from_data_0800192c();\n    break;\n  case 0x11:\n    checkResult = check_if_combination_exists_08009214(parameterValue,0);\n    if (checkResult == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    tempValue = decode_unsigned_long_long_08008590(parameterValue);\n    tempValue = extract_bits_and_shift_08009798((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ee6 = validate_and_shift_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = parameterValue;\n    break;\n  case 0x14:\n    DAT_20000eec = parameterValue;\n    break;\n  case 0x15:\n    tempValue = decode_unsigned_long_long_08008590(parameterValue);\n    tempValue = convert_to_double_08009654((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ef0 = validate_and_shift_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = parameterValue;\n    break;\n  case 0x17:\n    tempValue = decode_unsigned_long_long_08008590(parameterValue);\n    tempValue = extract_bits_and_shift_08009798((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    DAT_20000ed6 = validate_and_shift_08008bf0((int)tempValue,(int)((ulonglong)tempValue >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_08004c2a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004e30": "set_parameter_08004e30",
                "param_1": "parameterIndex",
                "param_2": "parameterValue",
                "uVar1": "returnValue",
                "iVar2": "checkResult",
                "uVar3": "tempValue"
            },
            "calling": [
                "FUN_08003b98"
            ],
            "called": [
                "FUN_08009654",
                "FUN_08008bf0",
                "FUN_08008eec",
                "FUN_08008590",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051b4": {
            "entrypoint": "0x080051b4",
            "current_name": "process_and_validate_data_080051b4",
            "code": "\nvoid process_and_validate_data_080051b4(void)\n\n{\n  int result;\n  undefined buffer [15];\n  byte index;\n  \n  result = process_buffer_08004dd2();\n  if (result == 0) {\n    handle_error_08004030(10);\n    initialize_data_08004c48(1);\n    print_settings_08004250();\n  }\n  for (index = 0; index < 8; index = index + 1) {\n    result = validate_and_process_data_08004d7c(index,buffer);\n    if (result == 0) {\n      handle_error_08004030(10);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051b4": "process_and_validate_data_080051b4",
                "iVar1": "result",
                "auStack_18": "buffer",
                "local_9": "index"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08004dd2",
                "FUN_08004250",
                "FUN_08004030",
                "FUN_08004c48",
                "FUN_08004d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005208": {
            "entrypoint": "0x08005208",
            "current_name": "FUNC_08005208",
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005214": {
            "entrypoint": "0x08005214",
            "current_name": "FUNC_08005214",
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "calling": [
                "FUN_08005250"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005220": {
            "entrypoint": "0x08005220",
            "current_name": "FUNC_08005220",
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800522c": {
            "entrypoint": "0x0800522c",
            "current_name": "FUNC_0800522c",
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "calling": [
                "FUN_0800525c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005238": {
            "entrypoint": "0x08005238",
            "current_name": "initialize_and_reset_08005238",
            "code": "\nvoid initializeAndReset_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  initialize_application_08005250();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005238": "initialize_and_reset_08005238"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005250"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005250": {
            "entrypoint": "0x08005250",
            "current_name": "initialize_application_08005250",
            "code": "\nvoid initializeApplication_08005250(void)\n\n{\n  FUNC_08005214();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005250": "initialize_application_08005250"
            },
            "calling": [
                "FUN_0800525c",
                "FUN_08005238",
                "FUN_080025e8"
            ],
            "called": [
                "FUN_08005214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800525c": {
            "entrypoint": "0x0800525c",
            "current_name": "handle_state_update_0800525c",
            "code": "\nvoid handle_state_update_0800525c(byte input_byte)\n\n{\n  if ((int)(char)input_byte != (uint)DAT_20000e12) {\n    process_alarm_state_updates();\n    if (input_byte == 0) {\n      initialize_application();\n      DAT_20000e12 = input_byte;\n    }\n    else {\n      if ((char)input_byte < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = input_byte;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800525c": "handle_state_update_0800525c",
                "param_1": "input_byte",
                "handle_alarm_state_updates_08002fd4": "process_alarm_state_updates",
                "initialize_application_08005250": "initialize_application"
            },
            "calling": [
                "FUN_080005b4"
            ],
            "called": [
                "FUN_0800522c",
                "FUN_08005250",
                "FUN_08002fd4",
                "FUN_08005220",
                "FUN_08005208"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052ac": {
            "entrypoint": "0x080052ac",
            "current_name": "update_data_register_080052ac",
            "code": "\n\n\nvoid updateDataRegister_080052ac(uint data)\n\n{\n  _DAT_40021014 = data | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052ac": "update_data_register_080052ac",
                "param_1": "data"
            },
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052dc": {
            "entrypoint": "0x080052dc",
            "current_name": "update_parameter_mask_080052dc",
            "code": "\n\n\nvoid updateParameterMask_080052dc(uint input)\n\n{\n  _DAT_40021014 = input | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080052dc": "update_parameter_mask_080052dc",
                "param_1": "input"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800530c": {
            "entrypoint": "0x0800530c",
            "current_name": "FUNC_0800530c",
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005318": {
            "entrypoint": "0x08005318",
            "current_name": "FUNC_08005318",
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005324": {
            "entrypoint": "0x08005324",
            "current_name": "calculate_data_limit_08005324",
            "code": "\nvoid calculateDataLimit_08005324(uint inputValue)\n\n{\n  uint adjustedValue;\n  \n  adjustedValue = inputValue;\n  if (inputValue < 800) {\n    adjustedValue = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjustedValue;\n  update_data_and_limit_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005324": "calculate_data_limit_08005324",
                "param_1": "inputValue",
                "local_14": "adjustedValue"
            },
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005360": {
            "entrypoint": "0x08005360",
            "current_name": "update_counter_08005360",
            "code": "\nbool updateCounter_08005360(void)\n\n{\n  bool isExceededThreshold;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  isExceededThreshold = 420000 < DAT_20000e2c;\n  if (isExceededThreshold) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return isExceededThreshold;\n}\n\n",
            "renaming": {
                "FUN_08005360": "update_counter_08005360",
                "bVar1": "isExceededThreshold"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "update_and_calculate_data_080053a0",
            "code": "\nvoid update_and_calculate_data_080053a0(void)\n\n{\n  int iVar1;\n  \n  update_parameter_mask_080052dc(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)get_active_pointer_08002f74();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      clear_flags_and_check_conditions_080057e4();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculate_data_limit_08005324(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        iVar1 = update_counter_08005360();\n        if (iVar1 != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculate_data_limit_08005324(DAT_20000e30);\n          }\n          else {\n            clear_flags_and_check_conditions_080057e4();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        iVar1 = update_counter_08005360();\n        if (iVar1 != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculate_data_limit_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculate_data_limit_08005324(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        iVar1 = update_counter_08005360();\n        if (iVar1 != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculate_data_limit_08005324(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      update_data_08002f40();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "update_and_calculate_data_080053a0"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_08002f40",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_register_08005760",
            "code": "\nvoid initializeDataRegister_08005760(void)\n\n{\n  updateDataRegister(DAT_20000ed4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_register_08005760",
                "update_data_register_080052ac": "updateDataRegister"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005778": {
            "entrypoint": "0x08005778",
            "current_name": "initialize_data_registers_08005778",
            "code": "\nvoid initializeDataRegisters_08005778(void)\n\n{\n  update_data_register_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005778": "initialize_data_registers_08005778"
            },
            "calling": [
                "FUN_08007c7c"
            ],
            "called": [
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005790": {
            "entrypoint": "0x08005790",
            "current_name": "initialize_global_values_08005790",
            "code": "\nvoid initializeGlobalValues_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    setGlobalValue(0x69);\n    setGlobalVariable((DAT_20000ec9 + 5) * 0x15);\n    updateFlagsAndRegisters();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005790": "initialize_global_values_08005790",
                "set_global_value_08007c40": "setGlobalValue",
                "set_global_variable_08007c5e": "setGlobalVariable",
                "set_flags_and_update_registers_08007b70": "updateFlagsAndRegisters"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_0800585c",
                "FUN_08001d4c"
            ],
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057e4": {
            "entrypoint": "0x080057e4",
            "current_name": "clear_flags_and_check_conditions_080057e4",
            "code": "\nvoid clear_flags_and_check_conditions_080057e4(void)\n\n{\n  clear_flags_08007bc2();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057e4": "clear_flags_and_check_conditions_080057e4"
            },
            "calling": [
                "FUN_0800583c",
                "FUN_08001d4c",
                "FUN_080025e8",
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005814": {
            "entrypoint": "0x08005814",
            "current_name": "initialize_data_08005814",
            "code": "\nvoid initialize_data_08005814(void)\n\n{\n  copy_and_fill_buffer(&DAT_20000e14,0,0x24);\n  calculate_data_limit(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "copy_and_fill_buffer_0800b430": "copy_and_fill_buffer",
                "calculate_data_limit_08005324": "calculate_data_limit"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "initialize_data_0800583c",
            "code": "\nvoid initialize_data_0800583c(void)\n\n{\n  update_data_register_080052ac(DAT_20000ed4);\n  initialize_global_values();\n  clear_flags_and_check_conditions();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "initialize_data_0800583c",
                "initialize_global_values_08005790": "initialize_global_values",
                "clear_flags_and_check_conditions_080057e4": "clear_flags_and_check_conditions"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [
                "FUN_08005790",
                "FUN_080057e4",
                "FUN_080052ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800585c": {
            "entrypoint": "0x0800585c",
            "current_name": "initialize_if_needed_0800585c",
            "code": "\nvoid initialize_if_needed_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_global_values();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800585c": "initialize_if_needed_0800585c",
                "initialize_global_values_08005790": "initialize_global_values"
            },
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "called": [
                "FUN_08005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800587c": {
            "entrypoint": "0x0800587c",
            "current_name": "update_flag_and_counter_0800587c",
            "code": "\nvoid updateFlagAndCounter_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800587c": "update_flag_and_counter_0800587c"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058a0": {
            "entrypoint": "0x080058a0",
            "current_name": "initialize_data_080058a0",
            "code": "\nvoid initialize_data_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    calculate_hash(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculate_data_limit(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058a0": "initialize_data_080058a0",
                "initialize_and_calculate_hash_08003618": "calculate_hash",
                "calculate_data_limit_08005324": "calculate_data_limit"
            },
            "calling": [
                "FUN_08003a74"
            ],
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "process_byte_08005900",
            "code": "\nundefined4 process_byte_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        initialize_and_check_application_080025e8();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005900": "process_byte_08005900",
                "param_1": "byte_value"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800597c": {
            "entrypoint": "0x0800597c",
            "current_name": "call_software_interrupt_0800597c",
            "code": "\nvoid callSoftwareInterrupt_0800597c(void)\n\n{\n  executeInterrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800597c": "call_software_interrupt_0800597c",
                "software_interrupt": "executeInterrupt"
            },
            "calling": [
                "FUN_08005984"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005984": {
            "entrypoint": "0x08005984",
            "current_name": "check_and_interrupt_08005984",
            "code": "\nundefined4 check_and_interrupt_08005984(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = call_software_interrupt_0800597c(1,input_param,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005984": "check_and_interrupt_08005984",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800597c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059b4": {
            "entrypoint": "0x080059b4",
            "current_name": "initialize_device_080059b4",
            "code": "\n\n\nundefined4 initializeDevice_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  allocateMemory(16000);\n  configureDataBits(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059b4": "initialize_device_080059b4",
                "set_memory_08006d72": "allocateMemory",
                "update_data_bits_08006ce0": "configureDataBits"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "initialize_data_080059f8",
            "code": "\n\n\nundefined4 initializeData_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "calling": [],
            "called": [
                "FUN_08005a5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a50": {
            "entrypoint": "0x08005a50",
            "current_name": "FUNC_08005a50",
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a5c": {
            "entrypoint": "0x08005a5c",
            "current_name": "FUNC_08005a5c",
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "calling": [
                "FUN_080059f8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "increment_counter_08005a68",
            "code": "\nvoid incrementCounter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "increment_counter_08005a68"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a84": {
            "entrypoint": "0x08005a84",
            "current_name": "get_global_data_08005a84",
            "code": "\nundefined4 getGlobalData_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "renaming": {
                "FUN_08005a84": "get_global_data_08005a84"
            },
            "calling": [
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec",
                "FUN_08005a98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a98": {
            "entrypoint": "0x08005a98",
            "current_name": "wait_until_sum_exceeds_08005a98",
            "code": "\nvoid waitUntilSumExceeds_08005a98(int targetSum)\n\n{\n  int initialSum;\n  uint currentSum;\n  \n  initialSum = get_global_data_08005a84();\n  do {\n    currentSum = get_global_data_08005a84();\n  } while (currentSum < (uint)(targetSum + initialSum));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a98": "wait_until_sum_exceeds_08005a98",
                "param_1": "targetSum",
                "iVar1": "initialSum",
                "uVar2": "currentSum"
            },
            "calling": [
                "FUN_080002a0"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "entrypoint": "0x08005bdc",
            "current_name": "write_byte_to_memory_08005bdc",
            "code": "\nvoid writeByteToMemory_08005bdc(byte address,uint data)\n\n{\n  if ((char)address < '\\0') {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)((data & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)address + -0x1fff1c00) = (char)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bdc": "write_byte_to_memory_08005bdc",
                "param_1": "address",
                "param_2": "data"
            },
            "calling": [
                "FUN_08005c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c30": {
            "entrypoint": "0x08005c30",
            "current_name": "check_and_initialize_memory_08005c30",
            "code": "\n\n\nbool checkAndInitializeMemory_08005c30(int inputValue)\n\n{\n  bool isValueValid;\n  \n  isValueValid = inputValue - 1U < 0x1000000;\n  if (isValueValid) {\n    _DAT_e000e014 = inputValue + -1;\n    write_byte_to_memory_08005bdc(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isValueValid;\n}\n\n",
            "renaming": {
                "FUN_08005c30": "check_and_initialize_memory_08005c30",
                "param_1": "inputValue",
                "bVar1": "isValueValid"
            },
            "calling": [
                "FUN_0800618c"
            ],
            "called": [
                "FUN_08005bdc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cec": {
            "entrypoint": "0x08005cec",
            "current_name": "check_flags_08005cec",
            "code": "\n\n\nundefined4 check_flags_08005cec(uint *flags)\n\n{\n  int data;\n  uint time;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (flag_value_1 != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      data = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        time = get_global_data_08005a84();\n        if (data + 5000U <= time) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = CONCAT13(DAT_40023800_3,CONCAT12((char)flag_value_1,_DAT_40023800));\n      if (flag_value_1 == 1) {\n        data = get_global_data_08005a84();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          time = get_global_data_08005a84();\n          if (data + 5000U <= time) {\n            return 3;\n          }\n        }\n      }\n      else {\n        data = get_global_data_08005a84();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          time = get_global_data_08005a84();\n          if (data + 5000U <= time) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (flag_value_2 != 1)) {\n        return 1;\n      }\n    }\n    else if (flag_value_2 == 0) {\n      _DAT_42470000 = 0;\n      data = get_global_data_08005a84();\n      while ((_DAT_40023800 & 2) != 0) {\n        time = get_global_data_08005a84();\n        if (data + 100U <= time) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      data = get_global_data_08005a84();\n      while ((_DAT_40023800 & 2) == 0) {\n        time = get_global_data_08005a84();\n        if (data + 100U <= time) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = flag_value_4 << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flag_value_6 == 0) {\n      _DAT_42470e80 = 0;\n      data = get_global_data_08005a84();\n      while ((_DAT_40023874 & 2) != 0) {\n        time = get_global_data_08005a84();\n        if (data + 100U <= time) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      data = get_global_data_08005a84();\n      while ((_DAT_40023874 & 2) == 0) {\n        time = get_global_data_08005a84();\n        if (data + 100U <= time) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    data = get_global_data_08005a84();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      time = get_global_data_08005a84();\n      if (data + 100U <= time) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    data = get_global_data_08005a84();\n    while ((_DAT_40023870 & 2) != 0) {\n      time = get_global_data_08005a84();\n      if (data + 5000U <= time) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)flag_value_5);\n    if (flag_value_5 == 1) {\n      data = get_global_data_08005a84();\n      while ((_DAT_40023870 & 2) == 0) {\n        time = get_global_data_08005a84();\n        if (data + 5000U <= time) {\n          return 3;\n        }\n      }\n    }\n    else {\n      data = get_global_data_08005a84();\n      while ((_DAT_40023870 & 2) != 0) {\n        time = get_global_data_08005a84();\n        if (data + 5000U <= time) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (flag_value_8 != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (flag_value_8 == 2) {\n      _DAT_42470060 = 0;\n      data = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        time = get_global_data_08005a84();\n        if (data + 100U <= time) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           config_value_1 << 0x18 |\n           config_value_2 | config_value_3 << 6 | ((config_value_4 >> 1) - 1) * 0x10000 | config_value_5 |\n           0x20000000;\n      _DAT_42470060 = 1;\n      data = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        time = get_global_data_08005a84();\n        if (data + 100U <= time) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      data = get_global_data_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        time = get_global_data_08005a84();\n        if (data + 100U <= time) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005cec": "check_flags_08005cec",
                "param_1": "flags",
                "iVar1": "data",
                "uVar2": "time",
                "param_1[1]": "flag_value_1",
                "param_1[3]": "flag_value_2",
                "param_1[4]": "flag_value_4",
                "param_1[2]": "flag_value_5",
                "param_1[5]": "flag_value_6",
                "param_1[6]": "flag_value_8",
                "param_1[0xb]": "config_value_1",
                "param_1[8]": "config_value_2",
                "param_1[9]": "config_value_3",
                "param_1[10]": "config_value_4",
                "param_1[7]": "config_value_5"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800618c": {
            "entrypoint": "0x0800618c",
            "current_name": "initialize_and_check_memory_0800618c",
            "code": "\n\n\nundefined4 initialize_and_check_memory_0800618c(uint *data_array,uint data_size)\n\n{\n  int global_data;\n  uint current_data;\n  uint target_data;\n  undefined8 clock_frequency;\n  \n  if ((_DAT_40023c00 & 0xf) < data_size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)data_size);\n    if (data_size != (data_size & 0xf)) {\n      return 1;\n    }\n    if ((*data_array & 1) != 0) {\n      if (data_array[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((data_array[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = data_array[1] | _DAT_40023808 & 0xfffffffc;\n      global_data = get_global_data_08005a84();\n      target_data = global_data + 5000;\n      if (data_array[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else if (data_array[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*data_array & 1) != 0) {\n      if (data_array[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (data_array[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = data_array[1] | _DAT_40023808 & 0xfffffffc;\n      global_data = get_global_data_08005a84();\n      target_data = global_data + 5000;\n      if (data_array[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else if (data_array[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_data = get_global_data_08005a84();\n          if (target_data <= current_data) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)data_size);\n    if (data_size != (data_size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*data_array & 2) != 0) {\n    _DAT_40023808 = data_array[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*data_array & 4) != 0) {\n    _DAT_40023808 = data_array[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*data_array & 8) != 0) {\n    _DAT_40023808 = data_array[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clock_frequency = calculate_clock_frequency_08006628();\n  check_and_initialize_memory_08005c30((uint)clock_frequency / 1000,(int)((ulonglong)clock_frequency >> 0x20),(uint)clock_frequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800618c": "initialize_and_check_memory_0800618c",
                "param_1": "data_array",
                "param_2": "data_size",
                "iVar1": "global_data",
                "uVar2": "current_data",
                "uVar3": "target_data",
                "uVar4": "clock_frequency"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [
                "FUN_08005a84",
                "FUN_08006628",
                "FUN_08005c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800640c": {
            "entrypoint": "0x0800640c",
            "current_name": "update_memory_0800640c",
            "code": "\n\n\nvoid updateMemory_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 blockSize;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    blockSize = 0x100;\n    constant1 = 2;\n    constant3 = 3;\n    constant2 = 0;\n    constant4 = 0;\n    update_registers_08006e88(0x40020000,&blockSize);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    blockSize = 0x200;\n    constant1 = 2;\n    constant3 = 3;\n    constant2 = 0;\n    constant4 = 0;\n    update_registers_08006e88(0x40020800,&blockSize);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800640c": "update_memory_0800640c",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "local_1c": "blockSize",
                "local_18": "constant1",
                "local_14": "constant2",
                "local_10": "constant3",
                "local_c": "constant4"
            },
            "calling": [],
            "called": [
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080064ec": {
            "entrypoint": "0x080064ec",
            "current_name": "calculate_clock_frequency_080064ec",
            "code": "\n\n\nuint calculateClockFrequency_080064ec(void)\n\n{\n  uint uVar1;\n  uint clockFrequency;\n  \n  uVar1 = _DAT_40023808 & 0xc;\n  if (uVar1 == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clockFrequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clockFrequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (uVar1 < 9) {\n    if (uVar1 == 0) {\n      return 16000000;\n    }\n    if (uVar1 == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "local_c": "clockFrequency"
            },
            "calling": [
                "FUN_08006628"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006628": {
            "entrypoint": "0x08006628",
            "current_name": "calculate_clock_frequency_08006628",
            "code": "\n\n\nuint calculateClockFrequency_08006628(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_080064ec();\n  DAT_20000000 = clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "renaming": {
                "FUN_08006628": "calculate_clock_frequency_08006628",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_0800618c",
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "called": [
                "FUN_080064ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006680": {
            "entrypoint": "0x08006680",
            "current_name": "calculate_clock_speed_08006680",
            "code": "\n\n\nuint calculateClockSpeed_08006680(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "renaming": {
                "FUN_08006680": "calculate_clock_speed_08006680",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066cc": {
            "entrypoint": "0x080066cc",
            "current_name": "calculate_clock_frequency_080066cc",
            "code": "\n\n\nuint calculateClockFrequency_080066cc(void)\n\n{\n  uint clockFrequency;\n  \n  clockFrequency = calculate_clock_frequency_08006628();\n  return clockFrequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "renaming": {
                "FUN_080066cc": "calculate_clock_frequency_080066cc",
                "uVar1": "clockFrequency"
            },
            "calling": [
                "FUN_08007f54"
            ],
            "called": [
                "FUN_08006628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006950": {
            "entrypoint": "0x08006950",
            "current_name": "update_data_bits_08006950",
            "code": "\n\n\nvoid updateDataBits_08006950(uint input)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006950": "update_data_bits_08006950",
                "param_1": "input"
            },
            "calling": [
                "FUN_08006ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006998": {
            "entrypoint": "0x08006998",
            "current_name": "extract_bit_value_08006998",
            "code": "\n\n\nuint extractBitValue_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "renaming": {
                "FUN_08006998": "extract_bit_value_08006998"
            },
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069b4": {
            "entrypoint": "0x080069b4",
            "current_name": "set_bit_position_080069b4",
            "code": "\nvoid setBitPosition_080069b4(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069b4": "set_bit_position_080069b4",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006d2e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "set_bit_at_index_080069e4",
            "code": "\nvoid setBitAtIndex_080069e4(byte byteValue)\n\n{\n  *(int *)((((uint)(int)(char)byteValue >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "set_bit_at_index_080069e4",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006d4a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a18": {
            "entrypoint": "0x08006a18",
            "current_name": "check_bit_08006a18",
            "code": "\nbool checkBit_08006a18(byte byteValue)\n\n{\n  return (*(uint *)((((uint)(int)(char)byteValue >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byteValue & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006a18": "check_bit_08006a18",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_08006de0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a58": {
            "entrypoint": "0x08006a58",
            "current_name": "set_bit_08006a58",
            "code": "\nvoid setBit_08006a58(byte inputByte)\n\n{\n  *(int *)((((uint)(int)(char)inputByte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a58": "set_bit_08006a58",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08006dc4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "entrypoint": "0x08006a8c",
            "current_name": "set_bit_in_array_08006a8c",
            "code": "\nvoid setBitInArray_08006a8c(byte bitIndex)\n\n{\n  *(int *)((((uint)(int)(char)bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006a8c": "set_bit_in_array_08006a8c",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08006dfe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "check_bit_08006ac0",
            "code": "\nbool checkBit_08006ac0(byte input_byte)\n\n{\n  return (*(uint *)((((uint)(int)(char)input_byte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (input_byte & 0x1f)) != 0;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "check_bit_08006ac0",
                "param_1": "input_byte"
            },
            "calling": [
                "FUN_08006e1a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b00": {
            "entrypoint": "0x08006b00",
            "current_name": "write_data_to_memory_08006b00",
            "code": "\nvoid writeDataToMemory_08006b00(byte data,uint value)\n\n{\n  if (signedData < '\\0') {\n    *(char *)((data & 0xf) + 0xe000ed14) = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)(signedData + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006b00": "write_data_to_memory_08006b00",
                "param_1": "data",
                "param_2": "value",
                "(char)param_1": "signedData"
            },
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006b54": {
            "entrypoint": "0x08006b54",
            "current_name": "get_nibble_value_08006b54",
            "code": "\nbyte getNibbleValue_08006b54(byte input)\n\n{\n  byte result;\n  \n  if (charInput < '\\0') {\n    result = *(byte *)((input & 0xf) + 0xe000ed14);\n  }\n  else {\n    result = *(byte *)(charInput + -0x1fff1c00);\n  }\n  return result >> 4;\n}\n\n",
            "renaming": {
                "FUN_08006b54": "get_nibble_value_08006b54",
                "param_1": "input",
                "bVar1": "result",
                "(char)param_1": "charInput"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "entrypoint": "0x08006ba0",
            "current_name": "bitwise_combination_08006ba0",
            "code": "\nuint bitwiseCombination_08006ba0(uint bitOffset,uint value1,uint value2)\n\n{\n  uint remainingBits;\n  \n  bitOffset = bitOffset & 7;\n  remainingBits = 7 - bitOffset;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (bitOffset + 4 < 7) {\n    bitOffset = 0;\n  }\n  else {\n    bitOffset = bitOffset - 3;\n  }\n  return value2 & (1 << (bitOffset & 0xff)) - 1U |\n         ((1 << (remainingBits & 0xff)) - 1U & value1) << (bitOffset & 0xff);\n}\n\n",
            "renaming": {
                "FUN_08006ba0": "bitwise_combination_08006ba0",
                "param_1": "bitOffset",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "remainingBits"
            },
            "calling": [
                "FUN_08006cf6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c04": {
            "entrypoint": "0x08006c04",
            "current_name": "extract_bits_08006c04",
            "code": "\nvoid extractBits_08006c04(uint input,uint numBits,uint *output1,uint *output2)\n\n{\n  uint shiftAmount;\n  \n  numBits = numBits & 7;\n  shiftAmount = 7 - numBits;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (numBits + 4 < 7) {\n    numBits = 0;\n  }\n  else {\n    numBits = numBits - 3;\n  }\n  *output1 = (1 << (shiftAmount & 0xff)) - 1U & input >> (numBits & 0xff);\n  *output2 = (1 << (numBits & 0xff)) - 1U & input;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c04": "extract_bits_08006c04",
                "param_1": "input",
                "param_2": "numBits",
                "param_3": "output1",
                "param_4": "output2",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08006d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c70": {
            "entrypoint": "0x08006c70",
            "current_name": "infinite_loop_08006c70",
            "code": "\nvoid infiniteLoop_08006c70(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006c70": "infinite_loop_08006c70",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_08006d66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "entrypoint": "0x08006c9c",
            "current_name": "check_and_set_memory_08006c9c",
            "code": "\n\n\nbool checkAndSetMemory_08006c9c(int inputValue)\n\n{\n  bool isInRange;\n  \n  isInRange = inputValue - 1U < 0x1000000;\n  if (isInRange) {\n    _DAT_e000e014 = inputValue + -1;\n    writeDataToMemory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !isInRange;\n}\n\n",
            "renaming": {
                "FUN_08006c9c": "check_and_set_memory_08006c9c",
                "param_1": "inputValue",
                "bVar1": "isInRange",
                "write_data_to_memory_08006b00": "writeDataToMemory"
            },
            "calling": [
                "FUN_08006d72"
            ],
            "called": [
                "FUN_08006b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "entrypoint": "0x08006ce0",
            "current_name": "update_data_bits_08006ce0",
            "code": "\nvoid update_data_bits_08006ce0(undefined4 input_data)\n\n{\n  update_data_bits_08006ce0_08006950(input_data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ce0": "update_data_bits_08006ce0",
                "param_1": "input_data"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006950"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "entrypoint": "0x08006cf6",
            "current_name": "write_bit_value_to_memory_08006cf6",
            "code": "\nvoid writeBitValueToMemory_08006cf6(char memoryAddress,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 bitValue;\n  \n  bitValue = extract_bit_value_08006998();\n  bitValue = bitwise_combination_08006ba0(bitValue,value1,value2);\n  write_data_to_memory_08006b00((int)memoryAddress,bitValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cf6": "write_bit_value_to_memory_08006cf6",
                "param_1": "memoryAddress",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "bitValue"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [
                "FUN_08006998",
                "FUN_08006b00",
                "FUN_08006ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "entrypoint": "0x08006d2e",
            "current_name": "set_bit_position_08006d2e",
            "code": "\nvoid setBitPosition_08006d2e(char input)\n\n{\n  setBitPosition_08006d2eHelper((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d2e": "set_bit_position_08006d2e",
                "param_1": "input",
                "set_bit_position_080069b4": "setBitPositionHelper"
            },
            "calling": [],
            "called": [
                "FUN_080069b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "entrypoint": "0x08006d4a",
            "current_name": "set_bit_at_index_08006d4a",
            "code": "\nvoid set_bit_at_index_08006d4a(char index)\n\n{\n  set_bit_at_index_08006d4a_080069e4((int)index);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d4a": "set_bit_at_index_08006d4a",
                "param_1": "index"
            },
            "calling": [],
            "called": [
                "FUN_080069e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d66": {
            "entrypoint": "0x08006d66",
            "current_name": "run_infinite_loop_08006d66",
            "code": "\nvoid runInfiniteLoop_08006d66(void)\n\n{\n  infiniteLoop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d66": "run_infinite_loop_08006d66",
                "infinite_loop_08006c70": "infiniteLoop"
            },
            "calling": [],
            "called": [
                "FUN_08006c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d72": {
            "entrypoint": "0x08006d72",
            "current_name": "set_memory_08006d72",
            "code": "\nundefined4 setMemory_08006d72(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = check_and_set_memory_08006c9c(input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006d72": "set_memory_08006d72",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080059b4"
            ],
            "called": [
                "FUN_08006c9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "entrypoint": "0x08006d8a",
            "current_name": "extract_and_return_bit_value_08006d8a",
            "code": "\nundefined4 extractAndReturnBitValue_08006d8a(void)\n\n{\n  undefined4 bitValue;\n  \n  bitValue = extract_bit_value_08006998();\n  return bitValue;\n}\n\n",
            "renaming": {
                "FUN_08006d8a": "extract_and_return_bit_value_08006d8a",
                "uVar1": "bitValue"
            },
            "calling": [],
            "called": [
                "FUN_08006998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d98": {
            "entrypoint": "0x08006d98",
            "current_name": "extract_nibble_08006d98",
            "code": "\nvoid extractNibble_08006d98(char inputChar,undefined4 output1,undefined4 output2,undefined4 output3)\n\n{\n  undefined4 nibbleValue;\n  \n  nibbleValue = get_nibble_value_08006b54((int)inputChar);\n  extract_bits_08006c04(nibbleValue,output1,output2,output3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006d98": "extract_nibble_08006d98",
                "param_1": "inputChar",
                "param_2": "output1",
                "param_3": "output2",
                "param_4": "output3",
                "uVar1": "nibbleValue"
            },
            "calling": [],
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "entrypoint": "0x08006dc4",
            "current_name": "set_bit_08006dc4",
            "code": "\nvoid set_bit_08006dc4(char input)\n\n{\n  set_bit_08006dc4_in_memory((int)input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dc4": "set_bit_08006dc4",
                "param_1": "input",
                "set_bit_08006a58": "set_bit_in_memory"
            },
            "calling": [],
            "called": [
                "FUN_08006a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006de0": {
            "entrypoint": "0x08006de0",
            "current_name": "check_bit_and_return_08006de0",
            "code": "\nundefined4 checkBitAndReturn_08006de0(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_08006a18((int)input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006de0": "check_bit_and_return_08006de0",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "entrypoint": "0x08006dfe",
            "current_name": "set_bit_in_array_08006dfe",
            "code": "\nvoid setBitInArray_08006dfe(char inputCharacter)\n\n{\n  set_bit_in_array_08006a8c((int)inputCharacter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006dfe": "set_bit_in_array_08006dfe",
                "param_1": "inputCharacter"
            },
            "calling": [],
            "called": [
                "FUN_08006a8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "entrypoint": "0x08006e1a",
            "current_name": "check_bit_08006e1a",
            "code": "\nundefined4 check_bit_08006e1a(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_08006e1a_08006ac0((int)input);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006e1a": "check_bit_08006e1a",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e88": {
            "entrypoint": "0x08006e88",
            "current_name": "update_registers_08006e88",
            "code": "\n\n\nvoid updateRegisters_08006e88(uint *registerA,uint *registerB)\n\n{\n  uint bitMask;\n  uint bitValue;\n  int registerIndex;\n  uint loopIndex;\n  \n  for (loopIndex = 0; loopIndex < 0x10; loopIndex = loopIndex + 1) {\n    bitMask = 1 << (loopIndex & 0xff);\n    bitValue = *registerB & bitMask;\n    if (bitValue == bitMask) {\n      if ((registerB[1] == 2) || (registerB[1] == 0x12)) {\n        bitMask = registerB[4];\n        registerA[(loopIndex >> 3) + 8] = registerA[(loopIndex >> 3) + 8] & ~(0xf << ((loopIndex & 7) << 2));\n        registerA[(loopIndex >> 3) + 8] = registerA[(loopIndex >> 3) + 8] | bitMask << ((loopIndex & 7) << 2);\n      }\n      *registerA = *registerA & ~(3 << ((loopIndex & 0x7f) << 1));\n      *registerA = *registerA | (registerB[1] & 3) << ((loopIndex & 0x7f) << 1);\n      if ((((registerB[1] == 1) || (registerB[1] == 2)) || (registerB[1] == 0x11)) || (registerB[1] == 0x12)\n         ) {\n        registerA[2] = registerA[2] & ~(3 << ((loopIndex & 0x7f) << 1));\n        registerA[2] = registerA[2] | registerB[3] << ((loopIndex & 0x7f) << 1);\n        registerA[1] = registerA[1] & ~(1 << (loopIndex & 0xff));\n        registerA[1] = registerA[1] | (registerB[1] >> 4 & 1) << (loopIndex & 0xff);\n      }\n      registerA[3] = registerA[3] & ~(3 << ((loopIndex & 0x7f) << 1));\n      registerA[3] = registerA[3] | registerB[2] << ((loopIndex & 0x7f) << 1);\n      if ((registerB[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((loopIndex & 3) << 2)) & *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800);\n        if (registerA == (uint *)0x40020000) {\n          registerIndex = 0;\n        }\n        else if (registerA == (uint *)0x40020400) {\n          registerIndex = 1;\n        }\n        else if (registerA == (uint *)0x40020800) {\n          registerIndex = 2;\n        }\n        else if (registerA == (uint *)0x40020c00) {\n          registerIndex = 3;\n        }\n        else if (registerA == (uint *)0x40021000) {\n          registerIndex = 4;\n        }\n        else if (registerA == (uint *)0x40021400) {\n          registerIndex = 5;\n        }\n        else if (registerA == (uint *)0x40021800) {\n          registerIndex = 6;\n        }\n        else if (registerA == (uint *)0x40021c00) {\n          registerIndex = 7;\n        }\n        else if (registerA == (uint *)0x40022000) {\n          registerIndex = 8;\n        }\n        else if (registerA == (uint *)0x40022400) {\n          registerIndex = 9;\n        }\n        else {\n          registerIndex = 10;\n        }\n        *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800) =\n             registerIndex << ((loopIndex & 3) << 2) | *(uint *)(((loopIndex >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bitValue & _DAT_40013c00;\n        _DAT_40013c04 = ~bitValue & _DAT_40013c04;\n        if ((registerB[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bitValue | _DAT_40013c00;\n        }\n        if ((registerB[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bitValue | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bitValue & _DAT_40013c08;\n        _DAT_40013c0c = ~bitValue & _DAT_40013c0c;\n        if ((registerB[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bitValue | _DAT_40013c08;\n        }\n        if ((registerB[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bitValue | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e88": "update_registers_08006e88",
                "param_1": "registerA",
                "param_2": "registerB",
                "uVar1": "bitMask",
                "uVar2": "bitValue",
                "iVar3": "registerIndex",
                "local_c": "loopIndex"
            },
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800733e": {
            "entrypoint": "0x0800733e",
            "current_name": "update_parameter_0800733e",
            "code": "\nvoid updateParameter_0800733e(int baseAddress,undefined2 newValue,char flag)\n\n{\n  if (flag == '\\0') {\n    *(undefined2 *)(baseAddress + 0x1a) = newValue;\n  }\n  else {\n    *(undefined2 *)(baseAddress + 0x18) = newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800733e": "update_parameter_0800733e",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "flag"
            },
            "calling": [
                "FUN_0800778c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800738e": {
            "entrypoint": "0x0800738e",
            "current_name": "update_data_if_bit_set_0800738e",
            "code": "\n\n\nvoid update_data_if_bit_set_0800738e(ushort input_value)\n\n{\n  if ((input_value & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)input_value;\n    FUNC_080073c0(input_value);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800738e": "update_data_if_bit_set_0800738e",
                "param_1": "input_value"
            },
            "calling": [],
            "called": [
                "FUN_080073c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080073c0": {
            "entrypoint": "0x080073c0",
            "current_name": "FUNC_080073c0",
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "calling": [
                "FUN_0800738e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080073d4": {
            "entrypoint": "0x080073d4",
            "current_name": "set_bit_080073d4",
            "code": "\nvoid setBit_080073d4(uint value)\n\n{\n  *(short *)(((int)value >> 4) * 0x400 + 0x4002001a) = (short)(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_080073d4": "set_bit_080073d4",
                "param_1": "value"
            },
            "calling": [
                "FUN_08007520"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007402": {
            "entrypoint": "0x08007402",
            "current_name": "set_bit_in_memory_08007402",
            "code": "\nvoid setBitInMemory_08007402(uint inputValue)\n\n{\n  *(short *)(((int)inputValue >> 4) * 0x400 + 0x40020018) = (short)(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_080074c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007430": {
            "entrypoint": "0x08007430",
            "current_name": "infinite_loop_08007430",
            "code": "\nvoid infiniteLoop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08007430": "infinite_loop_08007430"
            },
            "calling": [
                "FUN_08007436"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007436": {
            "entrypoint": "0x08007436",
            "current_name": "initialize_and_check_memory_08007436",
            "code": "\n\n\nvoid initialize_and_check_memory_08007436(void)\n\n{\n  int iVar1;\n  undefined4 flag_1;\n  undefined4 flag_2;\n  undefined4 flag_3;\n  undefined4 flag_4;\n  undefined4 flag_5;\n  undefined4 flag_6;\n  undefined4 flag_7;\n  undefined4 flag_8;\n  undefined4 memory_size;\n  undefined4 memory_flag;\n  undefined4 memory_offset;\n  undefined4 memory_start;\n  undefined4 memory_size2;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag_1 = 1;\n  flag_2 = 1;\n  flag_3 = 2;\n  flag_4 = 0x400000;\n  flag_5 = 8;\n  flag_6 = 0x150;\n  flag_7 = 2;\n  flag_8 = 7;\n  iVar1 = check_flags_08005cec(&flag_1);\n  if (iVar1 != 0) {\n    infinite_loop_08007430();\n  }\n  memory_size = 0xf;\n  memory_flag = 2;\n  memory_offset = 0;\n  memory_start = 0x1400;\n  memory_size2 = 0x1000;\n  iVar1 = initialize_and_check_memory_08007436_0800618c(&memory_size,5);\n  if (iVar1 != 0) {\n    infinite_loop_08007430();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007436": "initialize_and_check_memory_08007436",
                "local_4c": "flag_1",
                "local_48": "flag_2",
                "local_34": "flag_3",
                "local_30": "flag_4",
                "local_2c": "flag_5",
                "local_28": "flag_6",
                "local_24": "flag_7",
                "local_20": "flag_8",
                "local_1c": "memory_size",
                "local_18": "memory_flag",
                "local_14": "memory_offset",
                "local_10": "memory_start",
                "local_c": "memory_size2"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080074c8": {
            "entrypoint": "0x080074c8",
            "current_name": "update_function_based_on_param_080074c8",
            "code": "\nvoid updateFunctionBasedOnParam_080074c8(uint param)\n\n{\n  if ((param & 1) != 0) {\n    setMemoryBit(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((param & 0x1e) != 0)) {\n    initializeAndCheckApp();\n  }\n  if ((DAT_20000e50 != 0) && ((param & 0x80) != 0)) {\n    processParam(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080074c8": "update_function_based_on_param_080074c8",
                "param_1": "param",
                "set_bit_in_memory_08007402": "setMemoryBit",
                "initialize_and_check_app_0800195c": "initializeAndCheckApp",
                "process_param_08003a18": "processParam"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08003a18",
                "FUN_08007402",
                "FUN_0800195c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007520": {
            "entrypoint": "0x08007520",
            "current_name": "set_bit_if_odd_08007520",
            "code": "\nvoid setBitIfOdd_08007520(uint inputValue)\n\n{\n  if ((inputValue & 1) != 0) {\n    set_bit_080073d4(0x3e);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007520": "set_bit_if_odd_08007520",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_080073d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007540": {
            "entrypoint": "0x08007540",
            "current_name": "initialize_device_and_run_program_08007540",
            "code": "\nundefined4 initialize_device_and_run_program_08007540(void)\n\n{\n  initialize_device();\n  initialize_and_check_memory();\n  initialize_registers();\n  initialize_program();\n  initialize_buffer();\n  initialize_memory_settings();\n  check_and_interrupt(0);\n  process_data_loop();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08007540": "initialize_device_and_run_program_08007540",
                "initialize_device_080059b4": "initialize_device",
                "initialize_and_check_memory_08007436": "initialize_and_check_memory",
                "initialize_registers_0800778c": "initialize_registers",
                "initialize_program_08007e08": "initialize_program",
                "initialize_buffer_080079c0": "initialize_buffer",
                "initialize_memory_settings_08008190": "initialize_memory_settings",
                "check_and_interrupt_08005984": "check_and_interrupt",
                "process_data_loop_08001ddc": "process_data_loop"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005984",
                "FUN_08007436",
                "FUN_08007e08",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08001ddc",
                "FUN_0800778c",
                "FUN_08008190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800756c": {
            "entrypoint": "0x0800756c",
            "current_name": "initialize_system_0800756c",
            "code": "\n\n\nvoid initializeSystem_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080076c8": {
            "entrypoint": "0x080076c8",
            "current_name": "update_bitwise_value_080076c8",
            "code": "\nvoid updateBitwiseValue_080076c8(uint inputValue)\n\n{\n  *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) =\n       *(uint *)(((int)inputValue >> 4) * 0x400 + 0x40020014) ^ 1 << (inputValue & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080076c8": "update_bitwise_value_080076c8",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007756": {
            "entrypoint": "0x08007756",
            "current_name": "update_global_data_08007756",
            "code": "\nvoid updateGlobalData_08007756(void)\n\n{\n  uint globalData;\n  \n  globalData = fetchGlobalData();\n  if ((globalData & 0x1ff) == 0) {\n    updateBitwiseValue(0x3c);\n  }\n  if ((globalData & 0xf) == 0) {\n    updateBitFlags();\n  }\n  incrementCounter();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007756": "update_global_data_08007756",
                "uVar1": "globalData",
                "get_global_data_08005a84": "fetchGlobalData",
                "update_bitwise_value_080076c8": "updateBitwiseValue",
                "update_bit_flags_08007930": "updateBitFlags",
                "increment_counter_08005a68": "incrementCounter"
            },
            "calling": [],
            "called": [
                "FUN_08005a84",
                "FUN_08005a68",
                "FUN_08007930",
                "FUN_080076c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800778c": {
            "entrypoint": "0x0800778c",
            "current_name": "initialize_registers_0800778c",
            "code": "\n\n\nvoid initializeRegisters_0800778c(void)\n\n{\n  int index;\n  int bitMask;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  uint *parameter;\n  uint loopCounter;\n  \n  for (loopCounter = 0; loopCounter < 0x11; loopCounter = loopCounter + 1) {\n    index = loopCounter * 0x18;\n    parameter = (uint *)(&DAT_0800bcbc + index);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*parameter >> 4 & 0xff);\n    bitMask = 1 << (*parameter & 0xf);\n    value1 = *(undefined4 *)(&DAT_0800bcc0 + index);\n    value2 = *(undefined4 *)(&DAT_0800bcc4 + index);\n    value3 = *(undefined4 *)(&DAT_0800bcc8 + index);\n    value4 = *(undefined4 *)(&DAT_0800bccc + index);\n    update_registers_08006e88(((*parameter >> 4) + 0x100080) * 0x400,&bitMask);\n    if (-1 < (int)parameter[5]) {\n      update_parameter_0800733e(((*parameter >> 4) + 0x100080) * 0x400,1 << (*parameter & 0xf) & 0xffff,\n                   parameter[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800778c": "initialize_registers_0800778c",
                "local_24": "bitMask",
                "local_20": "value1",
                "local_1c": "value2",
                "local_18": "value3",
                "local_14": "value4",
                "local_10": "parameter",
                "local_c": "loopCounter",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007854": {
            "entrypoint": "0x08007854",
            "current_name": "check_bit_in_memory_08007854",
            "code": "\nuint check_bit_in_memory_08007854(uint input_value)\n\n{\n  return *(uint *)(((int)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08007854": "check_bit_in_memory_08007854",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08007884"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007884": {
            "entrypoint": "0x08007884",
            "current_name": "extract_bit_flags_08007884",
            "code": "\nuint extractBitFlags_08007884(void)\n\n{\n  int bit0;\n  int bit1;\n  int bit2;\n  int bit3;\n  int bit4;\n  uint bit5;\n  \n  bit0 = check_bit_in_memory_08007854(0x36);\n  bit1 = check_bit_in_memory_08007854(0x37);\n  bit2 = check_bit_in_memory_08007854(0x38);\n  bit3 = check_bit_in_memory_08007854(0x39);\n  bit4 = check_bit_in_memory_08007854(0xf);\n  bit5 = check_bit_in_memory_08007854(0);\n  return bit5 | bit0 << 4 | bit1 << 3 | bit2 << 2 | bit3 << 1 | bit4 << 7;\n}\n\n",
            "renaming": {
                "FUN_08007884": "extract_bit_flags_08007884",
                "iVar1": "bit0",
                "iVar2": "bit1",
                "iVar3": "bit2",
                "iVar4": "bit3",
                "iVar5": "bit4",
                "uVar6": "bit5"
            },
            "calling": [
                "FUN_08007930"
            ],
            "called": [
                "FUN_08007854"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080078f4": {
            "entrypoint": "0x080078f4",
            "current_name": "calculate_sum_080078f4",
            "code": "\nuint calculateSum_080078f4(void)\n\n{\n  int index;\n  uint sum;\n  \n  sum = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    sum = *(uint *)(&DAT_20000e54 + index * 4) | sum;\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_080078f4": "calculate_sum_080078f4",
                "local_10": "index",
                "local_c": "sum"
            },
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007930": {
            "entrypoint": "0x08007930",
            "current_name": "update_bit_flags_08007930",
            "code": "\nvoid updateBitFlags_08007930(void)\n\n{\n  int dataIndex;\n  uint previousValue;\n  undefined4 newFlags;\n  uint calculatedSum;\n  uint changedBits;\n  \n  dataIndex = DAT_20000e68;\n  previousValue = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    newFlags = extract_bit_flags_08007884();\n    *(undefined4 *)(&DAT_20000e54 + dataIndex * 4) = newFlags;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    calculatedSum = calculate_sum_080078f4();\n    previousValue = DAT_20000e64;\n    if (calculatedSum != DAT_20000e64) {\n      changedBits = ~calculatedSum & DAT_20000e64;\n      if ((~DAT_20000e64 & calculatedSum) != 0) {\n        update_function_based_on_param_080074c8(~DAT_20000e64 & calculatedSum);\n      }\n      previousValue = calculatedSum;\n      if (changedBits != 0) {\n        set_bit_if_odd_08007520(changedBits);\n      }\n    }\n  }\n  DAT_20000e64 = previousValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007930": "update_bit_flags_08007930",
                "iVar1": "dataIndex",
                "uVar2": "previousValue",
                "uVar3": "newFlags",
                "uVar4": "calculatedSum",
                "uVar5": "changedBits"
            },
            "calling": [
                "FUN_08007756"
            ],
            "called": [
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_080074c8",
                "FUN_08007884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079c0": {
            "entrypoint": "0x080079c0",
            "current_name": "initialize_buffer_080079c0",
            "code": "\nvoid initializeBuffer_080079c0(void)\n\n{\n  copy_and_fill_buffer_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079c0": "initialize_buffer_080079c0"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_0800b430"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080079e0": {
            "entrypoint": "0x080079e0",
            "current_name": "set_bit_080079e0",
            "code": "\nvoid setBit_080079e0(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080079e0": "set_bit_080079e0",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_08007a70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a10": {
            "entrypoint": "0x08007a10",
            "current_name": "update_flags_08007a10",
            "code": "\n\n\nvoid updateFlags_08007a10(undefined *flagAddress)\n\n{\n  if (flagAddress == (undefined *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (flagAddress == (undefined *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (flagAddress == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a10": "update_flags_08007a10",
                "param_1": "flagAddress"
            },
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007a70": {
            "entrypoint": "0x08007a70",
            "current_name": "write_bit_value_and_set_bit_08007a70",
            "code": "\nvoid write_bit_value_and_set_bit_08007a70(undefined *memory_address,undefined4 bit_value,undefined4 bit_mask)\n\n{\n  undefined value_to_write;\n  \n  if (memory_address == (undefined *)0x40000000) {\n    value_to_write = 0x1c;\n  }\n  else if (memory_address == (undefined *)0x40000400) {\n    value_to_write = 0x1d;\n  }\n  else {\n    if (memory_address != &DAT_40000800) {\n      return;\n    }\n    value_to_write = 0x1e;\n  }\n  write_bit_value_to_memory_08006cf6(value_to_write,bit_value,bit_mask);\n  set_bit_080079e0(value_to_write);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007a70": "write_bit_value_and_set_bit_08007a70",
                "param_1": "memory_address",
                "param_2": "bit_value",
                "param_3": "bit_mask",
                "local_c": "value_to_write"
            },
            "calling": [
                "FUN_08007ad0"
            ],
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "entrypoint": "0x08007ad0",
            "current_name": "initialize_memory_08007ad0",
            "code": "\n\n\nvoid initializeMemory_08007ad0(void)\n\n{\n  updateFlags(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  writeAndSetBitValue(0x40000000,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "update_flags_08007a10": "updateFlags",
                "write_bit_value_and_set_bit_08007a70": "writeAndSetBitValue"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007b70": {
            "entrypoint": "0x08007b70",
            "current_name": "set_flags_and_update_registers_08007b70",
            "code": "\n\n\nvoid setFlagsAndUpdateRegisters_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007b70": "set_flags_and_update_registers_08007b70",
                "local_c": "flags"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "entrypoint": "0x08007bc2",
            "current_name": "clear_flags_08007bc2",
            "code": "\n\n\nvoid clearFlags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bc2": "clear_flags_08007bc2"
            },
            "calling": [
                "FUN_080057e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "entrypoint": "0x08007bf0",
            "current_name": "update_data_and_limit_08007bf0",
            "code": "\n\n\nvoid update_data_and_limit_08007bf0(uint new_data)\n\n{\n  _DAT_4000002c = new_data;\n  if (new_data <= _DAT_40000024) {\n    _DAT_40000024 = new_data;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007bf0": "update_data_and_limit_08007bf0",
                "param_1": "new_data"
            },
            "calling": [
                "FUN_08005324"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c40": {
            "entrypoint": "0x08007c40",
            "current_name": "set_global_value_08007c40",
            "code": "\n\n\nvoid setGlobalValue_08007c40(undefined4 newValue)\n\n{\n  _DAT_40000034 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c40": "set_global_value_08007c40",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "entrypoint": "0x08007c5e",
            "current_name": "set_global_variable_08007c5e",
            "code": "\n\n\nvoid setGlobalVariable_08007c5e(undefined4 newValue)\n\n{\n  _DAT_40000038 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c5e": "set_global_variable_08007c5e",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08005790"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "entrypoint": "0x08007c7c",
            "current_name": "initialize_data_registers_08007c7c",
            "code": "\n\n\nvoid initialize_data_registers_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    initialize_data_registers_08007c7c_fn1();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    initialize_data_register_fn2();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_and_calculate_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007c7c": "initialize_data_registers_08007c7c",
                "initialize_data_registers_08005778": "initialize_data_registers_fn1",
                "initialize_data_register_08005760": "initialize_data_register_fn2",
                "update_and_calculate_data_080053a0": "update_and_calculate_data"
            },
            "calling": [],
            "called": [
                "FUN_08005760",
                "FUN_08005778",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007d08": {
            "entrypoint": "0x08007d08",
            "current_name": "initialize_registers_08007d08",
            "code": "\n\n\nvoid initializeRegisters_08007d08(void)\n\n{\n  update_flags_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007d08": "initialize_registers_08007d08"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [
                "FUN_08007a10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007da8": {
            "entrypoint": "0x08007da8",
            "current_name": "set_flags_08007da8",
            "code": "\n\n\nvoid set_flags_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007da8": "set_flags_08007da8"
            },
            "calling": [
                "FUN_08007e08"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e08": {
            "entrypoint": "0x08007e08",
            "current_name": "initialize_program_08007e08",
            "code": "\nvoid initialize_program_08007e08(void)\n\n{\n  initialize_memory();\n  initialize_registers();\n  set_flags();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e08": "initialize_program_08007e08",
                "initialize_memory_08007ad0": "initialize_memory",
                "initialize_registers_08007d08": "initialize_registers",
                "set_flags_08007da8": "set_flags"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007d08",
                "FUN_08007ad0",
                "FUN_08007da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "entrypoint": "0x08007e1c",
            "current_name": "wait_until_bit_is_set_08007e1c",
            "code": "\n\n\nvoid waitUntilBitIsSet_08007e1c(byte data)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007e1c": "wait_until_bit_is_set_08007e1c",
                "param_1": "data"
            },
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e58": {
            "entrypoint": "0x08007e58",
            "current_name": "is_bit_set_08007e58",
            "code": "\n\n\nbool isBitSet_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "renaming": {
                "FUN_08007e58": "is_bit_set_08007e58"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007e84": {
            "entrypoint": "0x08007e84",
            "current_name": "get_lower_byte_08007e84",
            "code": "\n\n\nuint get_lower_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "renaming": {
                "FUN_08007e84": "get_lower_byte_08007e84"
            },
            "calling": [
                "FUN_08008286"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "entrypoint": "0x08007ea4",
            "current_name": "update_memory_settings_08007ea4",
            "code": "\n\n\nvoid updateMemorySettings_08007ea4(undefined *memoryAddress)\n\n{\n  if (memoryAddress == (undefined *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memoryAddress == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memoryAddress == (undefined *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memoryAddress == (undefined *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memoryAddress == (undefined *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memoryAddress == (undefined *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007ea4": "update_memory_settings_08007ea4",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007f54": {
            "entrypoint": "0x08007f54",
            "current_name": "calculate_clock_speed_and_set_threshold_08007f54",
            "code": "\nvoid calculateClockSpeedAndSetThreshold_08007f54(int deviceAddress,int paramValue)\n\n{\n  ulonglong clockSpeedRatio;\n  int clockSpeedRatioScaled;\n  int extraClockSpeedRatio;\n  undefined8 clockFrequency;\n  \n  if ((*(uint *)(deviceAddress + 0xc) & 0x8000) == 0) {\n    if ((deviceAddress != 0x40011000) && (deviceAddress != 0x40011400)) {\n      clockFrequency = calculateClockSpeed();\n      clockSpeedRatio = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(paramValue << 2);\n      clockSpeedRatioScaled = calculateClockSpeed((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(clockSpeedRatio * 0x51eb851f));\n      extraClockSpeedRatio = calculateClockSpeed();\n      *(uint *)(deviceAddress + 8) =\n           (int)(clockSpeedRatio / 100) << 4 |\n           (((uint)(clockSpeedRatioScaled * 0x19) / (uint)(paramValue << 2) +\n            (int)(((ulonglong)(uint)(extraClockSpeedRatio * 0x19) / (ulonglong)(uint)(paramValue << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockFrequency = calculateClockFrequency();\n    clockSpeedRatio = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(paramValue << 2);\n    clockSpeedRatioScaled = calculateClockFrequency((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(clockSpeedRatio * 0x51eb851f));\n    extraClockSpeedRatio = calculateClockFrequency();\n    *(uint *)(deviceAddress + 8) =\n         (int)(clockSpeedRatio / 100) << 4 |\n         (((uint)(clockSpeedRatioScaled * 0x19) / (uint)(paramValue << 2) +\n          (int)(((ulonglong)(uint)(extraClockSpeedRatio * 0x19) / (ulonglong)(uint)(paramValue << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((deviceAddress != 0x40011000) && (deviceAddress != 0x40011400)) {\n      clockFrequency = calculateClockSpeed();\n      clockSpeedRatio = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(paramValue << 1);\n      clockSpeedRatioScaled = calculateClockSpeed((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(clockSpeedRatio * 0x51eb851f));\n      extraClockSpeedRatio = calculateClockSpeed();\n      *(uint *)(deviceAddress + 8) =\n           (int)(clockSpeedRatio / 100) << 4 |\n           (((uint)(clockSpeedRatioScaled * 0x19) / (uint)(paramValue << 1) +\n            (int)(((ulonglong)(uint)(extraClockSpeedRatio * 0x19) / (ulonglong)(uint)(paramValue << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clockFrequency = calculateClockFrequency();\n    clockSpeedRatio = (ulonglong)(uint)((int)clockFrequency * 0x19) / (ulonglong)(uint)(paramValue << 1);\n    clockSpeedRatioScaled = calculateClockFrequency((int)clockFrequency,(int)((ulonglong)clockFrequency >> 0x20),(int)(clockSpeedRatio * 0x51eb851f));\n    extraClockSpeedRatio = calculateClockFrequency();\n    *(uint *)(deviceAddress + 8) =\n         (int)(clockSpeedRatio / 100) << 4 |\n         (((uint)(clockSpeedRatioScaled * 0x19) / (uint)(paramValue << 1) +\n          (int)(((ulonglong)(uint)(extraClockSpeedRatio * 0x19) / (ulonglong)(uint)(paramValue << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007f54": "calculate_clock_speed_and_set_threshold_08007f54",
                "param_1": "deviceAddress",
                "param_2": "paramValue",
                "uVar1": "clockSpeedRatio",
                "iVar2": "clockSpeedRatioScaled",
                "iVar3": "extraClockSpeedRatio",
                "uVar4": "clockFrequency",
                "calculate_clock_speed_08006680": "calculateClockSpeed",
                "calculate_clock_frequency_080066cc": "calculateClockFrequency"
            },
            "calling": [
                "FUN_08008190"
            ],
            "called": [
                "FUN_08006680",
                "FUN_080066cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008190": {
            "entrypoint": "0x08008190",
            "current_name": "initialize_memory_settings_08008190",
            "code": "\n\n\nvoid initializeMemorySettings_08008190(void)\n\n{\n  updateMemorySettings(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculateClockSpeedAndSetThreshold(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008190": "initialize_memory_settings_08008190",
                "update_memory_settings_08007ea4": "updateMemorySettings",
                "calculate_clock_speed_and_set_threshold_08007f54": "calculateClockSpeedAndSetThreshold"
            },
            "calling": [
                "FUN_08007540"
            ],
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008244": {
            "entrypoint": "0x08008244",
            "current_name": "FUNC_08008244",
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008250": {
            "entrypoint": "0x08008250",
            "current_name": "wait_for_bit_to_be_set_08008250",
            "code": "\nvoid waitForBitToBeSet_08008250(undefined inputParam)\n\n{\n  waitForBitToBeSet_08008250Function(inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008250": "wait_for_bit_to_be_set_08008250",
                "param_1": "inputParam",
                "wait_until_bit_is_set_08007e1c": "waitForBitToBeSetFunction"
            },
            "calling": [
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_0800369c",
                "FUN_08003826",
                "FUN_080036f0"
            ],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800826a": {
            "entrypoint": "0x0800826a",
            "current_name": "wait_until_bit_is_set_0800826a",
            "code": "\nundefined4 wait_until_bit_is_set_0800826a(undefined input_param)\n\n{\n  wait_until_bit_is_set_0800826a_08007e1c(input_param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800826a": "wait_until_bit_is_set_0800826a",
                "param_1": "input_param"
            },
            "calling": [],
            "called": [
                "FUN_08007e1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008286": {
            "entrypoint": "0x08008286",
            "current_name": "check_and_process_byte_08008286",
            "code": "\nundefined check_and_process_byte_08008286(void)\n\n{\n  undefined lower_byte;\n  int is_bit_set;\n  \n  is_bit_set = is_bit_set_08007e58();\n  if (is_bit_set != 0) {\n    lower_byte = get_lower_byte();\n    is_bit_set = process_byte(lower_byte);\n    if (is_bit_set == 0) {\n      return lower_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "renaming": {
                "FUN_08008286": "check_and_process_byte_08008286",
                "uVar1": "lower_byte",
                "iVar2": "is_bit_set",
                "get_lower_byte_08007e84": "get_lower_byte",
                "process_byte_08005900": "process_byte"
            },
            "calling": [
                "FUN_08003f34"
            ],
            "called": [
                "FUN_08005900",
                "FUN_08007e58",
                "FUN_08007e84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082ba": {
            "entrypoint": "0x080082ba",
            "current_name": "FUNC_080082ba",
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "calling": [
                "FUN_08001ddc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080082d0": {
            "entrypoint": "0x080082d0",
            "current_name": "reverse_bitwise_operations_080082d0",
            "code": "\nulonglong reverseBitwiseOperations_080082d0(uint inputParam1,uint inputParam2,uint inputParam3,uint inputParam4)\n\n{\n  int tempVar5;\n  byte tempVar6;\n  uint tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  uint modifiedInputParam4;\n  uint tempVar10;\n  int tempVar12;\n  uint tempVar1;\n  uint tempVar2;\n  uint tempVar3;\n  uint tempVar4;\n  bool isConditionMet1;\n  bool isConditionMet2;\n  bool isConditionMet3;\n  \n  modifiedInputParam4 = inputParam4 ^ 0x80000000;\n  tempVar1 = inputParam2 << 1;\n  inputParam4 = inputParam4 << 1;\n  isConditionMet1 = ((inputParam2 ^ modifiedInputParam4) & 0x7fffffff) == 0;\n  isConditionMet2 = isConditionMet1 && inputParam1 == inputParam3;\n  if (!isConditionMet1 || inputParam1 != inputParam3) {\n    isConditionMet2 = (tempVar1 | inputParam1) == 0;\n  }\n  if (!isConditionMet2) {\n    isConditionMet2 = (inputParam4 | inputParam3) == 0;\n  }\n  tempVar12 = (int)tempVar1 >> 0x15;\n  if (!isConditionMet2) {\n    isConditionMet2 = tempVar12 == -1;\n  }\n  tempVar5 = (int)inputParam4 >> 0x15;\n  if (!isConditionMet2) {\n    isConditionMet2 = tempVar5 == -1;\n  }\n  if (isConditionMet2) {\n    if (tempVar12 == -1 || tempVar5 == -1) {\n      tempVar1 = modifiedInputParam4;\n      tempVar3 = inputParam3;\n      if (tempVar12 == -1) {\n        tempVar1 = inputParam2;\n        tempVar3 = inputParam1;\n      }\n      if (tempVar12 != -1 || tempVar5 != -1) {\n        inputParam3 = tempVar3;\n        modifiedInputParam4 = tempVar1;\n      }\n      isConditionMet2 = (tempVar3 | tempVar1 << 0xc) == 0;\n      if (isConditionMet2) {\n        isConditionMet2 = (inputParam3 | modifiedInputParam4 << 0xc) == 0;\n      }\n      if (isConditionMet2) {\n        isConditionMet2 = tempVar1 == modifiedInputParam4;\n      }\n      if (!isConditionMet2) {\n        tempVar1 = tempVar1 | 0x80000;\n      }\n      return CONCAT44(tempVar1,tempVar3);\n    }\n    if (((inputParam2 ^ modifiedInputParam4) & 0x7fffffff) != 0 || inputParam1 != inputParam3) {\n      if ((tempVar1 | inputParam1) == 0) {\n        inputParam1 = inputParam3;\n        inputParam2 = modifiedInputParam4;\n      }\n      return CONCAT44(inputParam2,inputParam1);\n    }\n    if (inputParam2 != modifiedInputParam4) {\n      return 0;\n    }\n    if (tempVar1 >> 0x15 == 0) {\n      isConditionMet2 = (inputParam1 & 0x80000000) != 0;\n      modifiedInputParam4 = inputParam2 * 2 + (uint)isConditionMet2;\n      if (CARRY4(inputParam2,inputParam2) || CARRY4(inputParam2 * 2,(uint)isConditionMet2)) {\n        modifiedInputParam4 = modifiedInputParam4 | 0x80000000;\n      }\n      return CONCAT44(modifiedInputParam4,inputParam1 << 1);\n    }\n    if (tempVar1 < 0xffc00000) {\n      return CONCAT44(inputParam2 + 0x100000,inputParam1);\n    }\n    inputParam2 = inputParam2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(inputParam2 | 0x7ff00000) << 0x20;\n  }\n  tempVar1 = tempVar1 >> 0x15;\n  inputParam4 = inputParam4 >> 0x15;\n  tempVar3 = inputParam4 - tempVar1;\n  isConditionMet2 = tempVar3 != 0;\n  if (inputParam4 < tempVar1) {\n    tempVar3 = -tempVar3;\n  }\n  tempVar2 = inputParam1;\n  tempVar10 = inputParam2;\n  if (isConditionMet2 && tempVar1 <= inputParam4) {\n    tempVar1 = tempVar1 + tempVar3;\n    tempVar2 = inputParam3;\n    tempVar10 = modifiedInputParam4;\n    inputParam3 = inputParam1;\n    modifiedInputParam4 = inputParam2;\n  }\n  if (0x36 < tempVar3) {\n    return CONCAT44(tempVar10,tempVar2);\n  }\n  tempVar8 = tempVar10 & 0xfffff | 0x100000;\n  if ((tempVar10 & 0x80000000) != 0) {\n    isConditionMet2 = tempVar2 != 0;\n    tempVar2 = -tempVar2;\n    tempVar8 = -tempVar8 - (uint)isConditionMet2;\n  }\n  tempVar10 = modifiedInputParam4 & 0xfffff | 0x100000;\n  if ((modifiedInputParam4 & 0x80000000) != 0) {\n    isConditionMet2 = inputParam3 != 0;\n    inputParam3 = -inputParam3;\n    tempVar10 = -tempVar10 - (uint)isConditionMet2;\n  }\n  if (tempVar1 == tempVar3) {\n    tempVar10 = tempVar10 ^ 0x100000;\n    if (tempVar1 == 0) {\n      tempVar8 = tempVar8 ^ 0x100000;\n      tempVar1 = 1;\n    }\n    else {\n      tempVar3 = tempVar3 - 1;\n    }\n  }\n  modifiedInputParam4 = -tempVar3 + 0x20;\n  if ((int)tempVar3 < 0x21) {\n    tempVar4 = inputParam3 << (modifiedInputParam4 & 0xff);\n    inputParam3 = inputParam3 >> (tempVar3 & 0xff);\n    tempVar7 = tempVar2 + inputParam3;\n    tempVar9 = tempVar10 << (modifiedInputParam4 & 0xff);\n    modifiedInputParam4 = tempVar7 + tempVar9;\n    tempVar8 = tempVar8 + CARRY4(tempVar2,inputParam3) + ((int)tempVar10 >> (tempVar3 & 0xff)) +\n            (uint)CARRY4(tempVar7,tempVar9);\n  }\n  else {\n    tempVar4 = tempVar10 << (-tempVar3 + 0x40 & 0xff);\n    if (inputParam3 != 0) {\n      tempVar4 = tempVar4 | 2;\n    }\n    tempVar10 = (int)tempVar10 >> (tempVar3 - 0x20 & 0xff);\n    modifiedInputParam4 = tempVar2 + tempVar10;\n    tempVar8 = tempVar8 + ((int)tempVar10 >> 0x1f) + (uint)CARRY4(tempVar2,tempVar10);\n  }\n  inputParam2 = tempVar8 & 0x80000000;\n  tempVar3 = tempVar8;\n  if ((int)tempVar8 < 0) {\n    isConditionMet2 = tempVar4 == 0;\n    tempVar4 = -tempVar4;\n    tempVar3 = -modifiedInputParam4;\n    modifiedInputParam4 = -(uint)!isConditionMet2 - modifiedInputParam4;\n    tempVar3 = -(uint)(isConditionMet2 <= tempVar3) - tempVar8;\n  }\n  if (0xfffff < tempVar3) {\n    tempVar2 = tempVar1 - 1;\n    if (0x1fffff < tempVar3) {\n      tempVar2 = tempVar3 & 1;\n      tempVar3 = tempVar3 >> 1;\n      tempVar6 = (byte)modifiedInputParam4;\n      modifiedInputParam4 = (uint)(tempVar2 != 0) << 0x1f | modifiedInputParam4 >> 1;\n      tempVar4 = (uint)(tempVar6 & 1) << 0x1f | tempVar4 >> 1;\n      tempVar2 = tempVar1;\n      if (0xffbfffff < tempVar1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    isConditionMet2 = 0x7fffffff < tempVar4;\n    if (tempVar4 == 0x80000000) {\n      isConditionMet2 = (modifiedInputParam4 & 1) != 0;\n    }\n    return CONCAT44(tempVar3 + tempVar2 * 0x100000 + (uint)CARRY4(modifiedInputParam4,(uint)isConditionMet2) | inputParam2,\n                    modifiedInputParam4 + isConditionMet2);\n  }\n  isConditionMet1 = (tempVar4 & 0x80000000) != 0;\n  tempVar4 = tempVar4 << 1;\n  tempVar2 = modifiedInputParam4 * 2;\n  isConditionMet2 = CARRY4(modifiedInputParam4,modifiedInputParam4);\n  modifiedInputParam4 = modifiedInputParam4 * 2 + (uint)isConditionMet1;\n  tempVar3 = tempVar3 * 2 + (uint)(isConditionMet2 || CARRY4(tempVar2,(uint)isConditionMet1));\n  tempVar2 = tempVar1 - 2;\n  if (tempVar1 - 1 != 0 && 0xfffff < tempVar3) goto LAB_080083e0;\n  tempVar10 = modifiedInputParam4;\n  tempVar1 = tempVar3;\n  if (tempVar3 == 0) {\n    tempVar10 = 0;\n    tempVar1 = modifiedInputParam4;\n  }\n  tempVar12 = LZCOUNT(tempVar1);\n  if (tempVar3 == 0) {\n    tempVar12 = tempVar12 + 0x20;\n  }\n  tempVar3 = tempVar12 - 0xb;\n  isConditionMet3 = SBORROW4(tempVar3,0x20);\n  modifiedInputParam4 = tempVar12 - 0x2b;\n  isConditionMet2 = (int)modifiedInputParam4 < 0;\n  isConditionMet1 = modifiedInputParam4 == 0;\n  if ((int)tempVar3 < 0x20) {\n    isConditionMet3 = SCARRY4(modifiedInputParam4,0xc);\n    tempVar12 = tempVar12 + -0x1f;\n    isConditionMet2 = tempVar12 < 0;\n    isConditionMet1 = tempVar12 == 0;\n    modifiedInputParam4 = tempVar3;\n    if (!isConditionMet1 && isConditionMet2 == isConditionMet3) {\n      tempVar10 = tempVar1 << (tempVar3 & 0xff);\n      tempVar1 = tempVar1 >> (0xcU - tempVar12 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isConditionMet1 || isConditionMet2 != isConditionMet3) {\n    tempVar4 = 0x20 - modifiedInputParam4;\n  }\n  tempVar1 = tempVar1 << (modifiedInputParam4 & 0xff);\n  if (isConditionMet1 || isConditionMet2 != isConditionMet3) {\n    tempVar1 = tempVar1 | tempVar10 >> (tempVar4 & 0xff);\n  }\n  if (isConditionMet1 || isConditionMet2 != isConditionMet3) {\n    tempVar10 = tempVar10 << (modifiedInputParam4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)tempVar3 <= (int)tempVar2) {\n    return CONCAT44(tempVar1 + (tempVar2 - tempVar3) * 0x100000 | inputParam2,tempVar10);\n  }\n  modifiedInputParam4 = ~(tempVar2 - tempVar3);\n  if ((int)modifiedInputParam4 < 0x1f) {\n    tempVar12 = modifiedInputParam4 - 0x13;\n    if (tempVar12 != 0 && tempVar12 < 0 == SCARRY4(modifiedInputParam4 - 0x1f,0xc)) {\n      return CONCAT44(tempVar8,tempVar10 >> (0x20 - (0xcU - tempVar12) & 0xff) | tempVar1 << (0xcU - tempVar12 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    modifiedInputParam4 = modifiedInputParam4 + 1;\n    return CONCAT44(inputParam2 | tempVar1 >> (modifiedInputParam4 & 0xff),\n                    tempVar10 >> (modifiedInputParam4 & 0xff) | tempVar1 << (0x20 - modifiedInputParam4 & 0xff));\n  }\n  return CONCAT44(tempVar8,tempVar1 >> (modifiedInputParam4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d0": "reverse_bitwise_operations_080082d0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar6": "modifiedInputParam4",
                "uVar9": "tempVar1",
                "uVar10": "tempVar2",
                "uVar11": "tempVar3",
                "uVar12": "tempVar4",
                "bVar13": "isConditionMet1",
                "bVar14": "isConditionMet2",
                "bVar15": "isConditionMet3",
                "iVar1": "tempVar5",
                "bVar2": "tempVar6",
                "uVar3": "tempVar7",
                "uVar4": "tempVar8",
                "uVar5": "tempVar9",
                "uVar7": "tempVar10",
                "iVar8": "tempVar12"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009990",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080082d4": {
            "entrypoint": "0x080082d4",
            "current_name": "calculate_sum_080082d4",
            "code": "\nulonglong calculate_sum_080082d4(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int shift1;\n  byte carry;\n  uint sum1;\n  uint sum2;\n  uint value1;\n  int shift2;\n  uint a_shifted;\n  uint b_shifted;\n  uint value2;\n  uint diff;\n  uint temp1;\n  uint temp2;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  a_shifted = param_2 << 1;\n  value2 = param_4 << 1;\n  condition1 = ((param_2 ^ param_4) & 0x7fffffff) == 0;\n  condition2 = condition1 && param_1 == param_3;\n  if (!condition1 || param_1 != param_3) {\n    condition2 = (a_shifted | param_1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (value2 | param_3) == 0;\n  }\n  shift2 = (int)a_shifted >> 0x15;\n  if (!condition2) {\n    condition2 = shift2 == -1;\n  }\n  shift1 = (int)value2 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (shift2 == -1 || shift1 == -1) {\n      value2 = param_4;\n      a_shifted = param_3;\n      if (shift2 == -1) {\n        value2 = param_2;\n        a_shifted = param_1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        param_3 = a_shifted;\n        param_4 = value2;\n      }\n      condition2 = (a_shifted | value2 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (param_3 | param_4 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = value2 == param_4;\n      }\n      if (!condition2) {\n        value2 = value2 | 0x80000;\n      }\n      return CONCAT44(value2,a_shifted);\n    }\n    if (((param_2 ^ param_4) & 0x7fffffff) != 0 || param_1 != param_3) {\n      if ((a_shifted | param_1) == 0) {\n        param_1 = param_3;\n        param_2 = param_4;\n      }\n      return CONCAT44(param_2,param_1);\n    }\n    if (param_2 != param_4) {\n      return 0;\n    }\n    if (a_shifted >> 0x15 == 0) {\n      condition2 = (param_1 & 0x80000000) != 0;\n      value2 = param_2 * 2 + (uint)condition2;\n      if (CARRY4(param_2,param_2) || CARRY4(param_2 * 2,(uint)condition2)) {\n        value2 = value2 | 0x80000000;\n      }\n      return CONCAT44(value2,param_1 << 1);\n    }\n    if (a_shifted < 0xffc00000) {\n      return CONCAT44(param_2 + 0x100000,param_1);\n    }\n    param_2 = param_2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(param_2 | 0x7ff00000) << 0x20;\n  }\n  a_shifted = a_shifted >> 0x15;\n  value2 = value2 >> 0x15;\n  diff = value2 - a_shifted;\n  condition2 = diff != 0;\n  if (value2 < a_shifted) {\n    diff = -diff;\n  }\n  b_shifted = param_1;\n  value1 = param_2;\n  if (condition2 && a_shifted <= value2) {\n    a_shifted = a_shifted + diff;\n    b_shifted = param_3;\n    value1 = param_4;\n    param_3 = param_1;\n    param_4 = param_2;\n  }\n  if (0x36 < diff) {\n    return CONCAT44(value1,b_shifted);\n  }\n  value2 = value1 & 0xfffff | 0x100000;\n  if ((value1 & 0x80000000) != 0) {\n    condition2 = b_shifted != 0;\n    b_shifted = -b_shifted;\n    value2 = -value2 - (uint)condition2;\n  }\n  value1 = param_4 & 0xfffff | 0x100000;\n  if ((param_4 & 0x80000000) != 0) {\n    condition2 = param_3 != 0;\n    param_3 = -param_3;\n    value1 = -value1 - (uint)condition2;\n  }\n  if (a_shifted == diff) {\n    value1 = value1 ^ 0x100000;\n    if (a_shifted == 0) {\n      value2 = value2 ^ 0x100000;\n      a_shifted = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  temp2 = -diff + 0x20;\n  if ((int)diff < 0x21) {\n    temp1 = param_3 << (temp2 & 0xff);\n    param_3 = param_3 >> (diff & 0xff);\n    sum1 = b_shifted + param_3;\n    sum2 = value1 << (temp2 & 0xff);\n    temp2 = sum1 + sum2;\n    value2 = value2 + CARRY4(b_shifted,param_3) + ((int)value1 >> (diff & 0xff)) +\n            (uint)CARRY4(sum1,sum2);\n  }\n  else {\n    temp1 = value1 << (-diff + 0x40 & 0xff);\n    if (param_3 != 0) {\n      temp1 = temp1 | 2;\n    }\n    value1 = (int)value1 >> (diff - 0x20 & 0xff);\n    temp2 = b_shifted + value1;\n    value2 = value2 + ((int)value1 >> 0x1f) + (uint)CARRY4(b_shifted,value1);\n  }\n  param_2 = value2 & 0x80000000;\n  diff = value2;\n  if ((int)value2 < 0) {\n    condition2 = temp1 == 0;\n    temp1 = -temp1;\n    diff = -temp2;\n    temp2 = -(uint)!condition2 - temp2;\n    diff = -(uint)(condition2 <= diff) - value2;\n  }\n  if (0xfffff < diff) {\n    b_shifted = a_shifted - 1;\n    if (0x1fffff < diff) {\n      value2 = diff & 1;\n      diff = diff >> 1;\n      carry = (byte)temp2;\n      temp2 = (uint)(value2 != 0) << 0x1f | temp2 >> 1;\n      temp1 = (uint)(carry & 1) << 0x1f | temp1 >> 1;\n      b_shifted = a_shifted;\n      if (0xffbfffff < a_shifted * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    condition2 = 0x7fffffff < temp1;\n    if (temp1 == 0x80000000) {\n      condition2 = (temp2 & 1) != 0;\n    }\n    return CONCAT44(diff + b_shifted * 0x100000 + (uint)CARRY4(temp2,(uint)condition2) | param_2,\n                    temp2 + condition2);\n  }\n  condition1 = (temp1 & 0x80000000) != 0;\n  temp1 = temp1 << 1;\n  b_shifted = temp2 * 2;\n  condition2 = CARRY4(temp2,temp2);\n  temp2 = temp2 * 2 + (uint)condition1;\n  diff = diff * 2 + (uint)(condition2 || CARRY4(b_shifted,(uint)condition1));\n  b_shifted = a_shifted - 2;\n  if (a_shifted - 1 != 0 && 0xfffff < diff) goto LAB_080083e0;\n  value1 = temp2;\n  a_shifted = diff;\n  if (diff == 0) {\n    value1 = 0;\n    a_shifted = temp2;\n  }\n  shift2 = LZCOUNT(a_shifted);\n  if (diff == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp2 = shift2 - 0xb;\n  condition3 = SBORROW4(temp2,0x20);\n  diff = shift2 - 0x2b;\n  condition2 = (int)diff < 0;\n  condition1 = diff == 0;\n  if ((int)temp2 < 0x20) {\n    condition3 = SCARRY4(diff,0xc);\n    shift2 = shift2 + -0x1f;\n    condition2 = shift2 < 0;\n    condition1 = shift2 == 0;\n    diff = temp2;\n    if (!condition1 && condition2 == condition3) {\n      value1 = a_shifted << (temp2 & 0xff);\n      a_shifted = a_shifted >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp1 = 0x20 - diff;\n  }\n  a_shifted = a_shifted << (diff & 0xff);\n  if (condition1 || condition2 != condition3) {\n    a_shifted = a_shifted | value1 >> (temp1 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    value1 = value1 << (diff & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp2 <= (int)b_shifted) {\n    return CONCAT44(a_shifted + (b_shifted - temp2) * 0x100000 | param_2,value1);\n  }\n  diff = ~(b_shifted - temp2);\n  if ((int)diff < 0x1f) {\n    shift2 = diff - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(diff - 0x1f,0xc)) {\n      return CONCAT44(value2,value1 >> (0x20 - (0xcU - shift2) & 0xff) | a_shifted << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    diff = diff + 1;\n    return CONCAT44(param_2 | a_shifted >> (diff & 0xff),\n                    value1 >> (diff & 0xff) | a_shifted << (0x20 - diff & 0xff));\n  }\n  return CONCAT44(value2,a_shifted >> (diff - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_080082d4": "calculate_sum_080082d4",
                "iVar1": "shift1",
                "bVar2": "carry",
                "uVar3": "sum1",
                "uVar4": "sum2",
                "uVar5": "value1",
                "iVar6": "shift2",
                "uVar7": "a_shifted",
                "uVar8": "b_shifted",
                "uVar9": "value2",
                "uVar10": "diff",
                "uVar11": "temp1",
                "uVar12": "temp2",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08009798",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_08009318",
                "FUN_08009990",
                "FUN_08009654",
                "FUN_0800b2e8",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800854c": {
            "entrypoint": "0x0800854c",
            "current_name": "reverse_bits_0800854c",
            "code": "\nulonglong reverseBits_0800854c(uint input)\n\n{\n  uint output;\n  uint shiftAmount;\n  int bitCount;\n  uint newBitCount;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool isBorrow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  output = 0;\n  bitCount = LZCOUNT(input);\n  newBitCount = bitCount + 0x15;\n  isBorrow = SBORROW4(newBitCount,0x20);\n  shiftAmount = bitCount - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (newBitCount < 0x20) {\n    isBorrow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = bitCount + 1 == 0;\n    shiftAmount = newBitCount;\n    if (!isZero && isBorrow == false) {\n      output = input << newBitCount;\n      input = input >> (0xcU - (bitCount + 1) & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isZero || isNegative != isBorrow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  input = input << (shiftAmount & 0xff);\n  if (isZero || isNegative != isBorrow) {\n    input = input | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != isBorrow) {\n    output = 0 << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if (newBitCount < 0x433) {\n    return CONCAT44(input + (0x432 - newBitCount) * 0x100000,output);\n  }\n  shiftAmount = ~(0x432 - newBitCount);\n  if (0x1e < (int)shiftAmount) {\n    return (ulonglong)(input >> (shiftAmount - 0x1f & 0xff));\n  }\n  bitCount = shiftAmount - 0x13;\n  if (bitCount == 0 || bitCount < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(input >> (shiftAmount & 0xff),\n                    output >> (shiftAmount & 0xff) | input << (0x20 - shiftAmount & 0xff));\n  }\n  return (ulonglong)(output >> (0x20 - (0xcU - bitCount) & 0xff) | input << (0xcU - bitCount & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800854c": "reverse_bits_0800854c",
                "param_1": "input",
                "uVar1": "output",
                "uVar2": "shiftAmount",
                "iVar3": "bitCount",
                "uVar4": "newBitCount",
                "in_r12": "remainingBits",
                "bVar5": "isNegative",
                "bVar6": "isZero",
                "bVar7": "isBorrow"
            },
            "calling": [
                "FUN_08001994"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800856c": {
            "entrypoint": "0x0800856c",
            "current_name": "bitwise_shift_0800856c",
            "code": "\nulonglong bitwiseShift_0800856c(uint input)\n\n{\n  uint result1;\n  uint result2;\n  uint shiftAmount;\n  int leadingZeroCount;\n  uint shiftedAmount;\n  uint signBit;\n  uint fixedValue;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  result2 = input;\n  if ((int)signBit < 0) {\n    result2 = -input;\n  }\n  result1 = 0;\n  leadingZeroCount = LZCOUNT(result2);\n  shiftedAmount = leadingZeroCount + 0x15;\n  isCarry = SBORROW4(shiftedAmount,0x20);\n  shiftAmount = leadingZeroCount - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (shiftedAmount < 0x20) {\n    isCarry = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeroCount + 1 == 0;\n    shiftAmount = shiftedAmount;\n    if (!isZero && isCarry == false) {\n      result1 = result2 << shiftedAmount;\n      result2 = result2 >> (0xcU - (leadingZeroCount + 1) & 0xff);\n      goto shiftAndCombine;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    fixedValue = 0x20 - shiftAmount;\n  }\n  result2 = result2 << (shiftAmount & 0xff);\n  if (isZero || isNegative != isCarry) {\n    result2 = result2 | 0U >> (fixedValue & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    result1 = 0 << (shiftAmount & 0xff);\n  }\nshiftAndCombine:\n  if (shiftedAmount < 0x433) {\n    return CONCAT44(result2 + (0x432 - shiftedAmount) * 0x100000 | signBit,result1);\n  }\n  shiftAmount = ~(0x432 - shiftedAmount);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,result2 >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeroCount = shiftAmount - 0x13;\n  if (leadingZeroCount == 0 || leadingZeroCount < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | result2 >> (shiftAmount & 0xff),\n                    result1 >> (shiftAmount & 0xff) | result2 << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,result1 >> (0x20 - (0xcU - leadingZeroCount) & 0xff) | result2 << (0xcU - leadingZeroCount & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800856c": "bitwise_shift_0800856c",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeroCount",
                "uVar5": "shiftedAmount",
                "uVar6": "signBit",
                "in_r12": "fixedValue",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isCarry",
                "LAB_08008458": "shiftAndCombine"
            },
            "calling": [
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008590": {
            "entrypoint": "0x08008590",
            "current_name": "decode_unsigned_long_long_08008590",
            "code": "\nulonglong decodeUnsignedLongLong_08008590(uint inputValue,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint bit31Set;\n  uint tempValue;\n  uint result;\n  uint shiftAmount;\n  uint tempValue2;\n  int count;\n  uint tempValue3;\n  uint bit24;\n  bool isNegative;\n  bool isZero;\n  bool isCarry;\n  \n  tempValue2 = inputValue << 1;\n  isZero = tempValue2 == 0;\n  bit31Set = (uint)((inputValue & 0x80000000) != 0) << 0x1f;\n  shiftAmount = (uint)((int)tempValue2 >> 3) >> 1;\n  result = bit31Set | shiftAmount;\n  inputValue = inputValue << 0x1d;\n  if (!isZero) {\n    param4 = tempValue2 & 0xff000000;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(result,inputValue) ^ 0x3800000000000000;\n  }\n  if ((tempValue2 & 0xffffff) == 0) {\n    return CONCAT44(result,inputValue);\n  }\n  if (param4 == 0xff000000) {\n    return CONCAT44(result,inputValue) | 0x8000000000000;\n  }\n  tempValue = inputValue;\n  tempValue2 = shiftAmount;\n  if (shiftAmount == 0) {\n    tempValue = 0;\n    tempValue2 = inputValue;\n  }\n  count = LZCOUNT(tempValue2);\n  if (shiftAmount == 0) {\n    count = count + 0x20;\n  }\n  tempValue3 = count - 0xb;\n  isCarry = SBORROW4(tempValue3,0x20);\n  shiftAmount = count - 0x2b;\n  isZero = (int)shiftAmount < 0;\n  isNegative = shiftAmount == 0;\n  if ((int)tempValue3 < 0x20) {\n    isCarry = SCARRY4(shiftAmount,0xc);\n    count = count + -0x1f;\n    isZero = count < 0;\n    isNegative = count == 0;\n    shiftAmount = tempValue3;\n    if (!isNegative && isZero == isCarry) {\n      tempValue = tempValue2 << (tempValue3 & 0xff);\n      tempValue2 = tempValue2 >> (0xcU - count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (isNegative || isZero != isCarry) {\n    bit24 = 0x20 - shiftAmount;\n  }\n  tempValue2 = tempValue2 << (shiftAmount & 0xff);\n  if (isNegative || isZero != isCarry) {\n    tempValue2 = tempValue2 | tempValue >> (bit24 & 0xff);\n  }\n  if (isNegative || isZero != isCarry) {\n    tempValue = tempValue << (shiftAmount & 0xff);\n  }\nLAB_08008458:\n  if ((int)tempValue3 < 0x381) {\n    return CONCAT44(tempValue2 + (0x380 - tempValue3) * 0x100000 | bit31Set,tempValue);\n  }\n  shiftAmount = ~(0x380 - tempValue3);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(result,tempValue2 >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shiftAmount - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(bit31Set | tempValue2 >> (shiftAmount & 0xff),\n                    tempValue >> (shiftAmount & 0xff) | tempValue2 << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(result,tempValue >> (0x20 - (0xcU - count) & 0xff) | tempValue2 << (0xcU - count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008590": "decode_unsigned_long_long_08008590",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bit31Set",
                "uVar2": "tempValue",
                "uVar3": "result",
                "uVar4": "shiftAmount",
                "uVar5": "tempValue2",
                "iVar6": "count",
                "uVar7": "tempValue3",
                "in_r12": "bit24",
                "bVar8": "isNegative",
                "bVar9": "isZero",
                "bVar10": "isCarry"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004940",
                "FUN_08004e30",
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008640": {
            "entrypoint": "0x08008640",
            "current_name": "calculate_hash_08008640",
            "code": "\nulonglong calculate_hash_08008640(undefined4 input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  ulonglong result_upper;\n  longlong temp_var;\n  uint result_lower;\n  uint var1;\n  int var2;\n  uint var3;\n  uint var4;\n  uint var5;\n  uint var6;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  ulonglong combined_params;\n  \n  combined_params = CONCAT44(input_param2,input_param1);\n  var5 = 0x7ff;\n  var1 = input_param2 >> 0x14 & 0x7ff;\n  condition1 = var1 == 0;\n  if (!condition1) {\n    var4 = input_param4 >> 0x14 & 0x7ff;\n    condition1 = var4 == 0;\n  }\n  if (!condition1) {\n    condition1 = var1 == 0x7ff;\n  }\n  if (!condition1) {\n    condition1 = var4 == 0x7ff;\n  }\n  if (condition1) {\n    combined_params = calculate_hash_08008640_0800881c();\n  }\n  result_lower = (uint)(combined_params >> 0x20);\n  var2 = var1 + var4;\n  var1 = result_lower ^ input_param4;\n  result_lower = result_lower & ~(var5 << 0x15);\n  input_param4 = input_param4 & ~(var5 << 0x15);\n  condition1 = ((uint)combined_params | result_lower << 0xc) == 0;\n  if (!condition1) {\n    condition1 = (input_param3 | input_param4 << 0xc) == 0;\n  }\n  result_lower = result_lower | 0x100000;\n  input_param4 = input_param4 | 0x100000;\n  if (condition1) {\n    input_param3 = (uint)combined_params | input_param3;\n    input_param4 = (var1 & 0x80000000 | result_lower) ^ input_param4;\n    var1 = var5 >> 1;\n    condition3 = SBORROW4(var2,var1);\n    var3 = var2 - var1;\n    condition1 = var3 == 0;\n    result_lower = var3;\n    if (!condition1 && (int)var1 <= var2) {\n      condition3 = SBORROW4(var5,var3);\n      result_lower = var5 - var3;\n      condition1 = var5 == var3;\n    }\n    if (!condition1 && (int)result_lower < 0 == condition3) {\n      input_param4 = input_param4 | var3 * 0x100000;\n    }\n    if (!condition1 && (int)result_lower < 0 == condition3) {\n      return CONCAT44(input_param4,input_param3);\n    }\n    input_param4 = input_param4 | 0x100000;\n    var5 = 0;\n    condition3 = SBORROW4(var3,1);\n    var3 = var3 - 1;\n    condition1 = var3 == 0;\n    var1 = var3;\n  }\n  else {\n    result_upper = (combined_params & 0xffffffff) * (ulonglong)input_param3;\n    combined_params = (combined_params & 0xffffffff) * (ulonglong)input_param4 +\n             (ulonglong)result_lower * (ulonglong)input_param3 + (result_upper >> 0x20);\n    var6 = (uint)combined_params;\n    temp_var = (ulonglong)result_lower * (ulonglong)input_param4 + (combined_params >> 0x20);\n    var5 = (uint)temp_var;\n    result_lower = (uint)((ulonglong)temp_var >> 0x20);\n    if ((int)result_upper != 0) {\n      var6 = var6 | 1;\n    }\n    var3 = (var2 + -0x3ff) - (uint)(result_lower < 0x200);\n    if (result_lower < 0x200) {\n      condition1 = (var6 & 0x80000000) != 0;\n      var6 = var6 << 1;\n      temp_var = CONCAT44(result_lower * 2 + (uint)(CARRY4(var5,var5) || CARRY4(var5 * 2,(uint)condition1)),\n                       var5 * 2 + (uint)condition1);\n    }\n    input_param4 = var1 & 0x80000000 | (int)((ulonglong)temp_var >> 0x20) << 0xb | (uint)temp_var >> 0x15;\n    input_param3 = (uint)temp_var << 0xb | var6 >> 0x15;\n    var5 = var6 * 0x800;\n    condition2 = 0xfc < var3;\n    condition3 = SBORROW4(var3,0xfd);\n    result_lower = var3 - 0xfd;\n    condition1 = result_lower == 0;\n    var1 = result_lower;\n    if (condition2 && !condition1) {\n      condition2 = 0x6ff < result_lower;\n      condition3 = SBORROW4(result_lower,0x700);\n      var1 = var3 - 0x7fd;\n      condition1 = result_lower == 0x700;\n    }\n    if (!condition2 || condition1) {\n      condition1 = 0x7fffffff < var5;\n      if (var5 == 0x80000000) {\n        condition1 = (var6 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param4 + var3 * 0x100000 + (uint)CARRY4(input_param3,(uint)condition1),input_param3 + condition1\n                     );\n    }\n  }\n  if (!condition1 && (int)var1 < 0 == condition3) {\n    return (ulonglong)(input_param4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  condition2 = SCARRY4(var3,0x36);\n  condition1 = (int)(var3 + 0x36) < 0;\n  condition3 = var3 == 0xffffffca;\n  if (condition3 || condition1 != condition2) {\n    input_param3 = 0;\n  }\n  if (condition3 || condition1 != condition2) {\n    input_param4 = input_param4 & 0x80000000;\n  }\n  if (condition3 || condition1 != condition2) {\n    return CONCAT44(input_param4,input_param3);\n  }\n  var1 = -var3;\n  result_lower = var1 - 0x20;\n  if (0x1f < (int)var1) {\n    var3 = input_param3 >> (result_lower & 0xff) | input_param4 << (0x20 - result_lower & 0xff);\n    var1 = (input_param4 >> (result_lower & 0xff) & ~((input_param4 & 0x80000000) >> (result_lower & 0xff))) -\n            ((int)var3 >> 0x1f);\n    if ((var5 | input_param3 << (0x20 - result_lower & 0xff) | var3 << 1) == 0) {\n      var1 = var1 & ~(var3 >> 0x1f);\n    }\n    return CONCAT44(input_param4,var1) & 0x80000000ffffffff;\n  }\n  var2 = var1 - 0x14;\n  if (var2 == 0 || var2 < 0 != SCARRY4(result_lower,0xc)) {\n    var6 = input_param3 << (var3 + 0x20 & 0xff);\n    result_lower = input_param3 >> (var1 & 0xff) | input_param4 << (var3 + 0x20 & 0xff);\n    var3 = result_lower + -((int)var6 >> 0x1f);\n    if ((var5 | var6 << 1) == 0) {\n      var3 = var3 & ~(var6 >> 0x1f);\n    }\n    return CONCAT44((input_param4 & 0x80000000) +\n                    ((input_param4 & 0x7fffffff) >> (var1 & 0xff)) +\n                    (uint)CARRY4(result_lower,-((int)var6 >> 0x1f)),var3);\n  }\n  var1 = 0xc - var2;\n  var3 = input_param3 << (var1 & 0xff);\n  var1 = input_param3 >> (0x20 - var1 & 0xff) | input_param4 << (var1 & 0xff);\n  result_lower = var1 + -((int)var3 >> 0x1f);\n  if ((var5 | var3 << 1) == 0) {\n    result_lower = result_lower & ~(var3 >> 0x1f);\n  }\n  return CONCAT44((input_param4 & 0x80000000) + (uint)CARRY4(var1,-((int)var3 >> 0x1f)),result_lower);\n}\n\n",
            "renaming": {
                "FUN_08008640": "calculate_hash_08008640",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "result_upper",
                "lVar2": "temp_var",
                "uVar3": "result_lower",
                "uVar4": "var1",
                "iVar5": "var2",
                "uVar6": "var3",
                "unaff_r5": "var4",
                "uVar7": "var5",
                "uVar8": "var6",
                "bVar9": "condition1",
                "bVar10": "condition2",
                "bVar11": "condition3",
                "uVar12": "combined_params"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08009b24",
                "FUN_0800adf0",
                "FUN_0800af78",
                "FUN_08004940",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_080044e8",
                "FUN_0800b2e8",
                "FUN_08001994",
                "FUN_08002c18",
                "FUN_0800056c",
                "FUN_0800a348",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_0800881c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800881c": {
            "entrypoint": "0x0800881c",
            "current_name": "calculate_hash_0800881c",
            "code": "\nulonglong calculate_hash_0800881c(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  uint flag_a;\n  uint flag_b;\n  uint temp_a;\n  uint temp_b;\n  uint temp_c;\n  bool is_zero;\n  \n  temp_a = temp_c & input_d >> 0x14;\n  if (flag_b != temp_c && temp_a != temp_c) {\n    is_zero = (input_a | input_b << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_c | input_d << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_b ^ input_d) & 0x80000000) << 0x20;\n    }\n    if (flag_b == 0) {\n      temp_b = input_b & 0x80000000;\n      do {\n        flag_a = input_a & 0x80000000;\n        input_a = input_a << 1;\n        input_b = input_b * 2 + (uint)(flag_a != 0);\n      } while ((input_b & 0x100000) == 0);\n      input_b = input_b | temp_b;\n      if (temp_a != 0) {\n        return CONCAT44(input_b,input_a);\n      }\n    }\n    do {\n      temp_a = input_c & 0x80000000;\n      input_c = input_c << 1;\n      input_d = input_d * 2 + (uint)(temp_a != 0);\n    } while ((input_d & 0x100000) == 0);\n    return CONCAT44(input_b,input_a);\n  }\n  is_zero = (input_a | input_b << 1) == 0;\n  if (is_zero) {\n    input_b = input_d;\n    input_a = input_c;\n  }\n  if (!is_zero) {\n    is_zero = (input_c | input_d << 1) == 0;\n  }\n  temp_b = input_b;\n  if (((!is_zero) && ((flag_b != temp_c || ((input_a | input_b << 0xc) == 0)))) &&\n     ((temp_a != temp_c || (input_a = input_c, temp_b = input_d, (input_c | input_d << 0xc) == 0)))) {\n    return (ulonglong)((input_b ^ input_d) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(temp_b,input_a) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_0800881c": "calculate_hash_0800881c",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "uVar1": "flag_a",
                "unaff_r4": "flag_b",
                "uVar2": "temp_a",
                "uVar3": "temp_b",
                "in_r12": "temp_c",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08008640"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008894": {
            "entrypoint": "0x08008894",
            "current_name": "calculate_double_08008894",
            "code": "\nulonglong calculate_double_08008894(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_double_08008894_08008a02();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_08008894": "calculate_double_08008894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08009990",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_0800a1bc"
            ],
            "called": [
                "FUN_08008a02"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a02": {
            "entrypoint": "0x08008a02",
            "current_name": "calculate_double_08008a02",
            "code": "\nulonglong calculate_double_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool is_zero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08008874;\n      if ((input3 | input4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08008a02": "calculate_double_08008a02",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_08008894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008a74": {
            "entrypoint": "0x08008a74",
            "current_name": "check_parameters_08008a74",
            "code": "\nuint check_parameters_08008a74(uint first_param,uint second_param,uint third_param,uint fourth_param)\n\n{\n  uint result;\n  bool isZero;\n  bool isLessOrEqual;\n  \n  if (((int)(second_param << 1) >> 0x15 == -1 || (int)(fourth_param << 1) >> 0x15 == -1) &&\n     ((((int)(second_param << 1) >> 0x15 == -1 && ((first_param | second_param << 0xc) != 0)) ||\n      (((int)(fourth_param << 1) >> 0x15 == -1 && ((third_param | fourth_param << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (first_param | second_param << 1) == 0;\n  if (isZero) {\n    isZero = (third_param | fourth_param << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = second_param == fourth_param;\n  }\n  if (isZero) {\n    isZero = first_param == third_param;\n  }\n  if (!isZero) {\n    result = second_param ^ fourth_param;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = second_param == fourth_param;\n    }\n    isLessOrEqual = -1 < (int)result && fourth_param <= second_param;\n    if (isZero) {\n      isLessOrEqual = third_param <= first_param;\n    }\n    fourth_param = (int)fourth_param >> 0x1f;\n    if (!isLessOrEqual) {\n      fourth_param = ~fourth_param;\n    }\n    return fourth_param | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08008a74": "check_parameters_08008a74",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isLessOrEqual"
            },
            "calling": [
                "FUN_08008b00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008af0": {
            "entrypoint": "0x08008af0",
            "current_name": "verify_and_return_08008af0",
            "code": "\nvoid verify_and_return_08008af0(undefined4 input_1,undefined4 input_2,undefined4 param_3,undefined4 param_4)\n\n{\n  verify_parameters_08008b00(param_3,param_4,input_1,input_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08008af0": "verify_and_return_08008af0",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b00": {
            "entrypoint": "0x08008b00",
            "current_name": "verify_parameters_08008b00",
            "code": "\nundefined4 verify_parameters_08008b00(undefined4 input_parameter)\n\n{\n  check_parameters_08008a74();\n  return input_parameter;\n}\n\n",
            "renaming": {
                "FUN_08008b00": "verify_parameters_08008b00",
                "param_1": "input_parameter"
            },
            "calling": [
                "FUN_08008b24",
                "FUN_08008b10",
                "FUN_08008af0"
            ],
            "called": [
                "FUN_08008a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b10": {
            "entrypoint": "0x08008b10",
            "current_name": "check_parameters_08008b10",
            "code": "\nbool check_parameters_08008b10(void)\n\n{\n  char parameter_valid;\n  \n  verify_parameters();\n  return parameter_valid != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b10": "check_parameters_08008b10",
                "in_ZR": "parameter_valid",
                "verify_parameters_08008b00": "verify_parameters"
            },
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b24": {
            "entrypoint": "0x08008b24",
            "current_name": "is_cy_null_08008b24",
            "code": "\nbool is_cy_null_08008b24(void)\n\n{\n  char cy_character;\n  \n  verify_parameters_08008b00();\n  return cy_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b24": "is_cy_null_08008b24",
                "in_CY": "cy_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_08008b00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "entrypoint": "0x08008b4c",
            "current_name": "verify_and_return_error_08008b4c",
            "code": "\nbool verify_and_return_error_08008b4c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  verify_and_return_08008af0();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "renaming": {
                "FUN_08008b4c": "verify_and_return_error_08008b4c",
                "in_ZR": "zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b60": {
            "entrypoint": "0x08008b60",
            "current_name": "check_null_terminator_08008b60",
            "code": "\nbool check_null_terminator_08008b60(void)\n\n{\n  char input_char;\n  \n  verify_and_return_08008af0();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08008b60": "check_null_terminator_08008b60",
                "in_CY": "input_char"
            },
            "calling": [
                "FUN_080094c0",
                "FUN_08003004",
                "FUN_0800af78",
                "FUN_08009318"
            ],
            "called": [
                "FUN_08008af0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008b74": {
            "entrypoint": "0x08008b74",
            "current_name": "check_inputs_08008b74",
            "code": "\nundefined4 check_inputs_08008b74(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08008b74": "check_inputs_08008b74",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "entrypoint": "0x08008ba0",
            "current_name": "FUNC_08008ba0",
            "code": "\nuint FUNC_08008ba0(uint param_1,uint param_2)\n\n{\n  uint uVar1;\n  int iVar2;\n  uint uVar3;\n  \n  iVar2 = param_2 * 2 + 0x200000;\n  if (param_2 * 2 < 0xffe00000) {\n    if (-1 < iVar2) {\n      return 0;\n    }\n    uVar1 = iVar2 >> 0x15;\n    uVar3 = -uVar1 - 0x3e1;\n    if (uVar1 < 0xfffffc20 && uVar3 != 0) {\n      uVar1 = (param_2 << 0xb | 0x80000000 | param_1 >> 0x15) >> (uVar3 & 0xff);\n      if ((param_2 & 0x80000000) != 0) {\n        uVar1 = -uVar1;\n      }\n      return uVar1;\n    }\n  }\n  else if ((param_1 | param_2 << 0xc) != 0) {\n    return 0;\n  }\n  param_2 = param_2 & 0x80000000;\n  if (param_2 == 0) {\n    param_2 = 0x7fffffff;\n  }\n  return param_2;\n}\n\n",
            "renaming": {
                "FUN_08008ba0": "FUNC_08008ba0"
            },
            "calling": [
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "entrypoint": "0x08008bf0",
            "current_name": "validate_and_shift_08008bf0",
            "code": "\nuint validate_and_shift_08008bf0(uint input_1,uint input_2)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((input_2 & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (input_2 << 0xb | 0x80000000 | input_1 >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_1 | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08008bf0": "validate_and_shift_08008bf0",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "shifted_value",
                "uVar2": "shift_amount"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008c30": {
            "entrypoint": "0x08008c30",
            "current_name": "calculate_float_value_08008c30",
            "code": "\nuint calculateFloatValue_08008c30(uint inputValue,uint bitFlags)\n\n{\n  uint result;\n  uint multipliedValue;\n  uint adjustedValue;\n  uint secondaryAdjustedValue;\n  bool isZero;\n  bool isLessThanThreshold;\n  \n  multipliedValue = bitFlags * 2;\n  isLessThanThreshold = multipliedValue < 0x70000000;\n  adjustedValue = multipliedValue + 0x90000000;\n  result = adjustedValue;\n  if (!isLessThanThreshold) {\n    secondaryAdjustedValue = multipliedValue + 0x8fe00000;\n    result = secondaryAdjustedValue;\n  }\n  isZero = result == 0;\n  if (!isLessThanThreshold && adjustedValue >= 0x200000) {\n    isZero = secondaryAdjustedValue == 0x1fc00000;\n  }\n  if (((isLessThanThreshold || adjustedValue < 0x200000) || 0x1fc00000 < secondaryAdjustedValue) || isZero) {\n    if ((bitFlags & 0x40000000) != 0) {\n      if (((int)multipliedValue >> 0x15 == -1) && ((inputValue | bitFlags << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return bitFlags & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(multipliedValue + 0x92e00000) < 0 != SCARRY4(adjustedValue,0x2e00000)) {\n      return bitFlags & 0x80000000;\n    }\n    multipliedValue = 0x18 - (multipliedValue + 0x92e00000 >> 0x15);\n    result = inputValue >> (multipliedValue & 0xff);\n    if (inputValue << (0x20 - multipliedValue & 0xff) != 0) {\n      result = result | 1;\n    }\n    adjustedValue = bitFlags & 0x1fffff | 0x100000;\n    inputValue = result | adjustedValue << (0x20 - multipliedValue & 0xff);\n    adjustedValue = (adjustedValue >> (multipliedValue & 0xff)) << 1;\n  }\n  result = (bitFlags & 0x80000000 | inputValue >> 0x1d) + adjustedValue * 4 + (uint)(0x7fffffff < inputValue * 8);\n  if (inputValue * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08008c30": "calculate_float_value_08008c30",
                "param_1": "inputValue",
                "param_2": "bitFlags",
                "uVar1": "result",
                "uVar2": "multipliedValue",
                "uVar3": "adjustedValue",
                "in_r12": "secondaryAdjustedValue",
                "bVar4": "isZero",
                "bVar5": "isLessThanThreshold"
            },
            "calling": [
                "FUN_08002638",
                "FUN_080044e8",
                "FUN_080046d0",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_0800056c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "entrypoint": "0x08008cd8",
            "current_name": "calculate_inverse_08008cd8",
            "code": "\nuint calculate_inverse_08008cd8(uint input_value,uint bit_mask,undefined4 shift_amount,uint param_4)\n\n{\n  int msb_input;\n  int msb_shifted_input;\n  uint masked_input;\n  uint masked_output;\n  uint shifted_input;\n  uint shifted_value;\n  uint difference;\n  bool is_equal;\n  \n  masked_input = bit_mask ^ 0x80000000;\n  shifted_input = input_value << 1;\n  is_equal = shifted_input == 0;\n  if (!is_equal) {\n    param_4 = bit_mask << 1;\n    is_equal = param_4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = shifted_input == param_4;\n  }\n  msb_input = (int)shifted_input >> 0x18;\n  if (!is_equal) {\n    is_equal = msb_input == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)param_4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    msb_shifted_input = (int)(bit_mask << 1) >> 0x18;\n    if (msb_input == -1 || msb_shifted_input == -1) {\n      shifted_input = masked_input;\n      if (msb_input == -1) {\n        shifted_input = input_value;\n      }\n      if (msb_input != -1 || msb_shifted_input != -1) {\n        masked_input = shifted_input;\n      }\n      is_equal = (shifted_input & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (masked_input & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = shifted_input == masked_input;\n      }\n      if (!is_equal) {\n        shifted_input = shifted_input | 0x400000;\n      }\n      return shifted_input;\n    }\n    if (((input_value ^ masked_input) & 0x7fffffff) != 0) {\n      if (shifted_input == 0) {\n        input_value = masked_input;\n      }\n      return input_value;\n    }\n    if (input_value != masked_input) {\n      return 0;\n    }\n    if ((shifted_input & 0xff000000) == 0) {\n      masked_input = input_value << 1;\n      if ((input_value & 0x80000000) != 0) {\n        masked_input = masked_input | 0x80000000;\n      }\n      return masked_input;\n    }\n    if (shifted_input < 0xfe000000) {\n      return input_value + 0x800000;\n    }\n    input_value = input_value & 0x80000000;\nLAB_08008e12:\n    return input_value | 0x7f800000;\n  }\n  shifted_input = shifted_input >> 0x18;\n  param_4 = param_4 >> 0x18;\n  difference = param_4 - shifted_input;\n  is_equal = difference != 0;\n  shifted_value = shifted_input;\n  if (is_equal && shifted_input <= param_4) {\n    shifted_value = shifted_input + difference;\n  }\n  if (is_equal && shifted_input <= param_4) {\n    masked_input = masked_input ^ input_value;\n  }\n  if (is_equal && shifted_input <= param_4) {\n    input_value = input_value ^ masked_input;\n  }\n  if (is_equal && shifted_input <= param_4) {\n    masked_input = masked_input ^ input_value;\n  }\n  if (param_4 < shifted_input) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_value;\n  }\n  shifted_input = input_value & 0xffffff | 0x800000;\n  if ((input_value & 0x80000000) != 0) {\n    shifted_input = -shifted_input;\n  }\n  masked_output = masked_input & 0xffffff | 0x800000;\n  if ((masked_input & 0x80000000) != 0) {\n    masked_output = -masked_output;\n  }\n  if (shifted_value == difference) {\n    masked_output = masked_output ^ 0x800000;\n    if (shifted_value == 0) {\n      shifted_input = shifted_input ^ 0x800000;\n      shifted_value = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input = shifted_input + ((int)masked_output >> (difference & 0xff));\n  masked_output = masked_output << (0x20 - difference & 0xff);\n  input_value = shifted_input & 0x80000000;\n  if ((int)shifted_input < 0) {\n    is_equal = masked_output != 0;\n    masked_output = -masked_output;\n    shifted_input = -shifted_input - (uint)is_equal;\n  }\n  if (shifted_input < 0x800000) {\n    masked_input = masked_output & 0x80000000;\n    masked_output = masked_output << 1;\n    shifted_input = shifted_input * 2 + (uint)(masked_input != 0);\n    masked_input = shifted_value - 2;\n    if (shifted_value - 1 == 0 || shifted_input < 0x800000) {\n      difference = LZCOUNT(shifted_input) - 8;\n      shifted_input = shifted_input << (difference & 0xff);\n      if ((int)masked_input < (int)difference) {\n        shifted_input = shifted_input >> (-(masked_input - difference) & 0xff);\n      }\n      else {\n        shifted_input = shifted_input + (masked_input - difference) * 0x800000;\n      }\n      return shifted_input | input_value;\n    }\n  }\n  else {\n    masked_input = shifted_value - 1;\n    if (0xffffff < shifted_input) {\n      masked_input = shifted_input & 1;\n      shifted_input = shifted_input >> 1;\n      masked_output = (uint)(masked_input != 0) << 0x1f | masked_output >> 1;\n      masked_input = shifted_value;\n      if (0xfd < shifted_value) goto LAB_08008e12;\n    }\n  }\n  shifted_input = shifted_input + masked_input * 0x800000 + (uint)(0x7fffffff < masked_output);\n  if (masked_output == 0x80000000) {\n    shifted_input = shifted_input & 0xfffffffe;\n  }\n  return shifted_input | input_value;\n}\n\n",
            "renaming": {
                "FUN_08008cd8": "calculate_inverse_08008cd8",
                "param_1": "input_value",
                "param_2": "bit_mask",
                "param_3": "shift_amount",
                "uVar3": "masked_input",
                "uVar4": "masked_output",
                "uVar5": "shifted_input",
                "uVar6": "shifted_value",
                "uVar7": "difference",
                "bVar8": "is_equal",
                "iVar1": "msb_input",
                "iVar2": "msb_shifted_input"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "entrypoint": "0x08008cdc",
            "current_name": "calculate_floating_point_08008cdc",
            "code": "\nuint calculateFloatingPoint_08008cdc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint input1_sign;\n  uint input1_mantissa;\n  uint input2_sign;\n  uint input2_mantissa;\n  bool isEqual;\n  \n  input1_mantissa = input1 << 1;\n  isEqual = input1_mantissa == 0;\n  if (!isEqual) {\n    input4 = input2 << 1;\n    isEqual = input4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = input1_mantissa == input4;\n  }\n  shiftedInput1 = (int)input1_mantissa >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      input1_mantissa = input2;\n      if (shiftedInput1 == -1) {\n        input1_mantissa = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = input1_mantissa;\n      }\n      isEqual = (input1_mantissa & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = input1_mantissa == input2;\n      }\n      if (!isEqual) {\n        input1_mantissa = input1_mantissa | 0x400000;\n      }\n      return input1_mantissa;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (input1_mantissa == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((input1_mantissa & 0xff000000) == 0) {\n      input1_mantissa = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        input1_mantissa = input1_mantissa | 0x80000000;\n      }\n      return input1_mantissa;\n    }\n    if (input1_mantissa < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  input1_mantissa = input1_mantissa >> 0x18;\n  input4 = input4 >> 0x18;\n  input2_mantissa = input4 - input1_mantissa;\n  isEqual = input2_mantissa != 0;\n  input2_sign = input1_mantissa;\n  if (isEqual && input1_mantissa <= input4) {\n    input2_sign = input1_mantissa + input2_mantissa;\n  }\n  if (isEqual && input1_mantissa <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && input1_mantissa <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && input1_mantissa <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < input1_mantissa) {\n    input2_mantissa = -input2_mantissa;\n  }\n  if (0x19 < input2_mantissa) {\n    return input1;\n  }\n  input1_mantissa = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    input1_mantissa = -input1_mantissa;\n  }\n  input1_sign = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    input1_sign = -input1_sign;\n  }\n  if (input2_sign == input2_mantissa) {\n    input1_sign = input1_sign ^ 0x800000;\n    if (input2_sign == 0) {\n      input1_mantissa = input1_mantissa ^ 0x800000;\n      input2_sign = 1;\n    }\n    else {\n      input2_mantissa = input2_mantissa - 1;\n    }\n  }\n  input1_mantissa = input1_mantissa + ((int)input1_sign >> (input2_mantissa & 0xff));\n  input1_sign = input1_sign << (0x20 - input2_mantissa & 0xff);\n  input1 = input1_mantissa & 0x80000000;\n  if ((int)input1_mantissa < 0) {\n    isEqual = input1_sign != 0;\n    input1_sign = -input1_sign;\n    input1_mantissa = -input1_mantissa - (uint)isEqual;\n  }\n  if (input1_mantissa < 0x800000) {\n    input2_mantissa = input1_sign & 0x80000000;\n    input1_sign = input1_sign << 1;\n    input1_mantissa = input1_mantissa * 2 + (uint)(input2_mantissa != 0);\n    input2_mantissa = input2_sign - 2;\n    if (input2_sign - 1 == 0 || input1_mantissa < 0x800000) {\n      input2_sign = LZCOUNT(input1_mantissa) - 8;\n      input1_mantissa = input1_mantissa << (input2_sign & 0xff);\n      if ((int)input2_mantissa < (int)input2_sign) {\n        input1_mantissa = input1_mantissa >> (-(input2_mantissa - input2_sign) & 0xff);\n      }\n      else {\n        input1_mantissa = input1_mantissa + (input2_mantissa - input2_sign) * 0x800000;\n      }\n      return input1_mantissa | input1;\n    }\n  }\n  else {\n    input2_mantissa = input2_sign - 1;\n    if (0xffffff < input1_mantissa) {\n      input2_mantissa = input1_mantissa & 1;\n      input1_mantissa = input1_mantissa >> 1;\n      input1_sign = (uint)(input2_mantissa != 0) << 0x1f | input1_sign >> 1;\n      input2_mantissa = input2_sign;\n      if (0xfd < input2_sign) goto LAB_08008e12;\n    }\n  }\n  input1_mantissa = input1_mantissa + input2_mantissa * 0x800000 + (uint)(0x7fffffff < input1_sign);\n  if (input1_sign == 0x80000000) {\n    input1_mantissa = input1_mantissa & 0xfffffffe;\n  }\n  return input1_mantissa | input1;\n}\n\n",
            "renaming": {
                "FUN_08008cdc": "calculate_floating_point_08008cdc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "input1_sign",
                "uVar4": "input1_mantissa",
                "uVar5": "input2_sign",
                "uVar6": "input2_mantissa",
                "bVar7": "isEqual"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_080005b4",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003826",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "entrypoint": "0x08008e3c",
            "current_name": "calculate_result_08008e3c",
            "code": "\nuint calculateResult_08008e3c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  int initialValue;\n  uint overflowCheck;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftAmount = leadingZeros - 8;\n  initialValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    overflowCheck = 0 << (shiftAmount & 0xff);\n    leadingZeros = initialValue + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < overflowCheck);\n    if (overflowCheck == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  leadingZeros = initialValue + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_08008e3c": "calculate_result_08008e3c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "iVar3": "initialValue",
                "uVar4": "overflowCheck"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08002c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008e44": {
            "entrypoint": "0x08008e44",
            "current_name": "calculate_hash_08008e44",
            "code": "\nuint calculateHash_08008e44(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftCount;\n  uint signBit;\n  int hashResult;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftCount = leadingZeros - 8;\n  hashResult = ((signBit | 0x4b000000) - 0x800000) + shiftCount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftCount & 0xff);\n    signBit = hashResult + (input << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftCount = input << leadingZeros + 0x18;\n  signBit = hashResult + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftCount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_08008e44": "calculate_hash_08008e44",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftCount",
                "uVar3": "signBit",
                "iVar4": "hashResult"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080004fc",
                "FUN_08004940",
                "FUN_08002c18",
                "FUN_080024c4",
                "FUN_08003618"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08008eec": {
            "entrypoint": "0x08008eec",
            "current_name": "calculate_float_08008eec",
            "code": "\nuint calculateFloat_08008eec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong lVar1;\n  uint result1;\n  uint shift1;\n  int sum;\n  int diff;\n  uint mulResultLow;\n  int count;\n  uint result2;\n  bool isZero;\n  bool carryFlag;\n  \n  shift1 = input1 >> 0x17 & 0xff;\n  isZero = shift1 == 0;\n  if (!isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = shift1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = input4 == 0xff;\n  }\n  if (isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (shift1 == 0xff || input4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result1 = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result1 = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      result2 = result1;\n      if (((isZero) || ((shift1 == 0xff && ((result1 & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (result2 = input2, (input2 & 0x7fffff) != 0)))) {\n        return result2 | 0x7fc00000;\n      }\n      result1 = result1 ^ input2;\n      goto LAB_0800903c;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = shift1 == 0;\n    result1 = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      shift1 = shift1 - 1;\n    }\n    input1 = input1 | result1;\n    isZero = input4 == 0;\n    result1 = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result1;\n  }\n  sum = shift1 + input4;\n  result2 = input1 ^ input2;\n  shift1 = input1 << 9;\n  isZero = shift1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (shift1 == 0) {\n      input2 = input2 << 9;\n    }\n    result1 = result2 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    carryFlag = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    isZero = diff == 0;\n    count = diff;\n    if (!isZero && 0x7e < sum) {\n      carryFlag = SBORROW4(0xff,diff);\n      count = 0xff - diff;\n      isZero = diff == 0xff;\n    }\n    if (!isZero && count < 0 == carryFlag) {\n      result1 = result1 | diff * 0x800000;\n    }\n    if (!isZero && count < 0 == carryFlag) {\n      return result1;\n    }\n    result1 = result1 | 0x800000;\n    mulResultLow = 0;\n    carryFlag = SBORROW4(diff,1);\n    result2 = sum - 0x80;\n    isZero = result2 == 0;\n    shift1 = result2;\n  }\n  else {\n    lVar1 = (ulonglong)(shift1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    mulResultLow = (uint)lVar1;\n    result1 = (uint)((ulonglong)lVar1 >> 0x20);\n    isZero = result1 < 0x800000;\n    if (isZero) {\n      result1 = result1 << 1;\n    }\n    if (isZero) {\n      result1 = result1 | mulResultLow >> 0x1f;\n      mulResultLow = mulResultLow << 1;\n    }\n    result1 = result2 & 0x80000000 | result1;\n    result2 = (sum + -0x7f) - (uint)isZero;\n    carryFlag = SBORROW4(result2,0xfd);\n    isZero = result2 == 0xfd;\n    shift1 = result2 - 0xfd;\n    if (result2 < 0xfe) {\n      result1 = result1 + result2 * 0x800000 + (uint)(0x7fffffff < mulResultLow);\n      if (mulResultLow == 0x80000000) {\n        result1 = result1 & 0xfffffffe;\n      }\n      return result1;\n    }\n  }\n  if (isZero || (int)shift1 < 0 != carryFlag) {\n    isZero = (int)(result2 + 0x19) < 0;\n    if (result2 == 0xffffffe7 || isZero != SCARRY4(result2,0x19)) {\n      result1 = result1 & 0x80000000;\n    }\n    if (result2 != 0xffffffe7 && isZero == SCARRY4(result2,0x19)) {\n      shift1 = (result1 << 1) >> (-result2 & 0xff);\n      result2 = result1 << (result2 + 0x20 & 0xff);\n      shift1 = ((uint)((result1 & 0x80000000) != 0) << 0x1f | shift1 >> 1) + (uint)((byte)shift1 & 1);\n      if ((mulResultLow | result2 << 1) == 0) {\n        shift1 = shift1 & ~(result2 >> 0x1f);\n      }\n      return shift1;\n    }\n    return result1;\n  }\nLAB_0800903c:\n  return result1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08008eec": "calculate_float_08008eec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "count",
                "uVar2": "result1",
                "uVar3": "shift1",
                "uVar6": "mulResultLow",
                "uVar8": "result2",
                "bVar9": "isZero",
                "bVar10": "carryFlag"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002978",
                "FUN_08004e30",
                "FUN_080024c4",
                "FUN_08003826",
                "FUN_08002408",
                "FUN_08001994",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009054": {
            "entrypoint": "0x08009054",
            "current_name": "calculate_float_08009054",
            "code": "\nuint calculateFloat_08009054(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    input4 = input2 >> 0x17 & 0xff;\n    flag1 = input4 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = input4 == 0xff;\n  }\n  if (flag1) {\n    input4 = input2 >> 0x17 & 0xff;\n    temp6 = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (temp6 = input2, input4 == 0xff)) {\nLAB_0800904a:\n        return temp6 | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        temp6 = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      flag1 = (input1 & 0x7fffffff) == 0;\n      if (!flag1) {\n        flag1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!flag1) {\n        flag1 = temp2 == 0;\n        temp6 = input1 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input1 = input1 << 1;\n            flag1 = (input1 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | temp6;\n        flag1 = input4 == 0;\n        temp6 = input2 & 0x80000000;\n        while( true ) {\n          if (flag1) {\n            input2 = input2 << 1;\n            flag1 = (input2 & 0x800000) == 0;\n          }\n          if (!flag1) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | temp6;\n        goto LAB_0800906c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_0800906c:\n    temp3 = temp2 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = SCARRY4(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      flag1 = temp5 < 0;\n      flag2 = temp5 == 0;\n      if (!flag2 && flag1 == flag3) {\n        flag3 = SBORROW4(0xff,temp5);\n        flag1 = 0xff - temp5 < 0;\n        flag2 = temp5 == 0xff;\n      }\n      if (!flag2 && flag1 == flag3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!flag2 && flag1 == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      flag2 = SBORROW4(temp5,1);\n      temp4 = temp3 + 0x7e;\n      flag1 = temp4 == 0;\n      temp6 = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      flag1 = temp1 <= temp2;\n      if (!flag1) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)flag1;\n      temp6 = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | temp6;\n        }\n        flag1 = temp1 >> 1 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (flag1) {\n          input1 = input1 | temp6 >> 1;\n        }\n        flag1 = temp1 >> 2 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (flag1) {\n          input1 = input1 | temp6 >> 2;\n        }\n        flag1 = temp1 >> 3 <= temp2;\n        if (flag1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (flag1) {\n          input1 = input1 | temp6 >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        flag1 = temp2 == 0;\n        if (!flag1) {\n          temp6 = temp6 >> 4;\n          flag1 = temp6 == 0;\n        }\n      } while (!flag1);\n      flag2 = SBORROW4(temp4,0xfd);\n      flag1 = temp4 == 0xfd;\n      temp6 = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (flag1 || (int)temp6 < 0 != flag2) {\n      flag1 = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || flag1 != SCARRY4(temp4,0x19)) {\n        return input1;\n      }\n      temp6 = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      temp6 = ((uint)((input1 & 0x80000000) != 0) << 0x1f | temp6 >> 1) + (uint)((byte)temp6 & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        temp6 = temp6 & ~(temp4 >> 0x1f);\n      }\n      return temp6;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08009054": "calculate_float_08009054",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "bVar7": "flag1",
                "bVar8": "flag2",
                "bVar9": "flag3"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080004fc",
                "FUN_08004250",
                "FUN_08002e08",
                "FUN_08001994",
                "FUN_08004940",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08002908"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800919c": {
            "entrypoint": "0x0800919c",
            "current_name": "calculate_bitwise_operation_0800919c",
            "code": "\nuint calculate_bitwise_operation_0800919c(uint input_value_1,uint input_value_2)\n\n{\n  bool is_negative_result;\n  uint multiplied_value_1;\n  uint multiplied_value_2;\n  uint combined_values;\n  bool is_result_zero;\n  \n  multiplied_value_1 = input_value_1 * 2;\n  multiplied_value_2 = input_value_2 * 2;\n  if (((int)multiplied_value_1 >> 0x18 == -1 || (int)multiplied_value_2 >> 0x18 == -1) &&\n     ((((int)multiplied_value_1 >> 0x18 == -1 && ((input_value_1 & 0x7fffff) != 0)) ||\n      (((int)multiplied_value_2 >> 0x18 == -1 && ((input_value_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_values = multiplied_value_1 | input_value_2 & 0x7fffffff;\n  is_result_zero = combined_values == 0;\n  if (!is_result_zero) {\n    combined_values = input_value_1 ^ input_value_2;\n    is_result_zero = combined_values == 0;\n  }\n  is_negative_result = -1 < (int)combined_values;\n  if (is_negative_result) {\n    input_value_1 = multiplied_value_1 + input_value_2 * -2;\n    is_result_zero = input_value_1 == 0;\n  }\n  if ((is_negative_result && multiplied_value_2 <= multiplied_value_1) && !is_result_zero) {\n    input_value_1 = (int)input_value_2 >> 0x1f;\n  }\n  if (!is_negative_result || multiplied_value_2 > multiplied_value_1) {\n    input_value_1 = ~((int)input_value_2 >> 0x1f);\n  }\n  if (!is_result_zero) {\n    input_value_1 = input_value_1 | 1;\n  }\n  return input_value_1;\n}\n\n",
            "renaming": {
                "FUN_0800919c": "calculate_bitwise_operation_0800919c",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "bVar1": "is_negative_result",
                "uVar2": "multiplied_value_1",
                "uVar3": "multiplied_value_2",
                "uVar4": "combined_values",
                "bVar5": "is_result_zero"
            },
            "calling": [
                "FUN_08009204"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080091fc": {
            "entrypoint": "0x080091fc",
            "current_name": "combine_parameters_080091fc",
            "code": "\nvoid combineParameters_080091fc(undefined4 destination,undefined4 source)\n\n{\n  combineParameters_080091fc(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080091fc": "combine_parameters_080091fc",
                "param_1": "destination",
                "param_2": "source",
                "combine_parameters_08009204": "combineParameters"
            },
            "calling": [
                "FUN_08009264",
                "FUN_08009250"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009204": {
            "entrypoint": "0x08009204",
            "current_name": "combine_parameters_08009204",
            "code": "\nundefined8 combineParameters_08009204(undefined4 input1,undefined4 input2)\n\n{\n  calculate_bitwise_operation_0800919c();\n  return CONCAT44(input2,input1);\n}\n\n",
            "renaming": {
                "FUN_08009204": "combine_parameters_08009204",
                "param_1": "input1",
                "param_2": "input2"
            },
            "calling": [
                "FUN_080091fc",
                "FUN_08009214",
                "FUN_08009228",
                "FUN_0800923c"
            ],
            "called": [
                "FUN_0800919c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009214": {
            "entrypoint": "0x08009214",
            "current_name": "check_if_combination_exists_08009214",
            "code": "\nbool check_if_combination_exists_08009214(void)\n\n{\n  char is_combination_present;\n  \n  combine_parameters_08009204();\n  return is_combination_present != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009214": "check_if_combination_exists_08009214",
                "in_ZR": "is_combination_present"
            },
            "calling": [
                "FUN_08002638",
                "FUN_08001f00",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009228": {
            "entrypoint": "0x08009228",
            "current_name": "is_input_empty_08009228",
            "code": "\nbool isInputEmpty_08009228(void)\n\n{\n  char inputChar;\n  \n  combine_parameters_08009204();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009228": "is_input_empty_08009228",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8",
                "FUN_080005b4",
                "FUN_08002afc",
                "FUN_08004e30",
                "FUN_08003826"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800923c": {
            "entrypoint": "0x0800923c",
            "current_name": "check_combined_parameters_0800923c",
            "code": "\nbool check_combined_parameters_0800923c(void)\n\n{\n  undefined isZeroResult;\n  undefined isCarryFlagSet;\n  \n  combine_parameters_08009204();\n  return !(bool)isCarryFlagSet || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_0800923c": "check_combined_parameters_0800923c",
                "in_ZR": "isZeroResult",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_08009204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009250": {
            "entrypoint": "0x08009250",
            "current_name": "check_combination_08009250",
            "code": "\nbool check_combination_08009250(void)\n\n{\n  undefined is_zero_result;\n  undefined is_combine_successful;\n  \n  combine_parameters_080091fc();\n  return !(bool)is_combine_successful || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_08009250": "check_combination_08009250",
                "in_ZR": "is_zero_result",
                "in_CY": "is_combine_successful"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009264": {
            "entrypoint": "0x08009264",
            "current_name": "check_if_empty_string_08009264",
            "code": "\nbool check_if_empty_string_08009264(void)\n\n{\n  char input_character;\n  \n  combine_parameters_080091fc();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08009264": "check_if_empty_string_08009264",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "called": [
                "FUN_080091fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009278": {
            "entrypoint": "0x08009278",
            "current_name": "convert_to_signed_integer_08009278",
            "code": "\nuint convertToSignedInteger_08009278(uint input)\n\n{\n  uint shiftedBits;\n  uint difference;\n  \n  if (input << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedBits = (input << 1) >> 0x18;\n  difference = 0x9e - shiftedBits;\n  if (shiftedBits < 0x9f && difference != 0) {\n    shiftedBits = (input << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input & 0x80000000) != 0) {\n      shiftedBits = -shiftedBits;\n    }\n    return shiftedBits;\n  }\n  if ((difference == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input = input & 0x80000000;\n  if (input == 0) {\n    input = 0x7fffffff;\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08009278": "convert_to_signed_integer_08009278",
                "param_1": "input",
                "uVar1": "shiftedBits",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x080092c4",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_0800756c();\n  initialize_and_execute_functions_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_device_and_run_program_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_0800756c",
                "FUN_08007540",
                "FUN_0800b3e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009318": {
            "entrypoint": "0x08009318",
            "current_name": "calculate_floating_point_value_08009318",
            "code": "\nlonglong calculateFloatingPointValue_08009318(uint integerPart,uint fractionPart,undefined4 param3,undefined4 param4)\n\n{\n  int isTerminatorNull;\n  uint bitShiftAmount;\n  uint mask;\n  bool carryFlag;\n  undefined8 sum;\n  longlong result;\n  \n  mask = (fractionPart << 1) >> 0x15;\n  bitShiftAmount = mask - 0x3ff;\n  if ((int)bitShiftAmount < 0x14) {\n    if ((int)bitShiftAmount < 0) {\n      sum = calculate_sum_080082d4(integerPart,fractionPart,0x8800759c,0x7e37e43c,param4);\n      isTerminatorNull = check_null_terminator_08008b60((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      result = CONCAT44(fractionPart,integerPart);\n      if (isTerminatorNull != 0) {\n        if ((int)fractionPart < 0) {\n          result = -0x8000000000000000;\n        }\n        else if ((integerPart | fractionPart) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (bitShiftAmount & 0xff);\n      result = CONCAT44(fractionPart,integerPart);\n      if ((fractionPart & mask | integerPart) != 0) {\n        sum = calculate_sum_080082d4(integerPart,fractionPart,0x8800759c,0x7e37e43c,param4);\n        isTerminatorNull = check_null_terminator_08008b60((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n        result = CONCAT44(fractionPart,integerPart);\n        if (isTerminatorNull != 0) {\n          if (0 < (int)fractionPart) {\n            fractionPart = fractionPart + (0x100000 >> (bitShiftAmount & 0xff));\n          }\n          result = (ulonglong)(fractionPart & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)bitShiftAmount < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(fractionPart,integerPart);\n    if ((mask & integerPart) != 0) {\n      sum = calculate_sum_080082d4(integerPart,fractionPart,0x8800759c,0x7e37e43c,param4);\n      isTerminatorNull = check_null_terminator_08008b60((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      result = CONCAT44(fractionPart,integerPart);\n      if (isTerminatorNull != 0) {\n        if (0 < (int)fractionPart) {\n          if (bitShiftAmount == 0x14) {\n            fractionPart = fractionPart + 1;\n          }\n          else {\n            bitShiftAmount = 1 << (0x34 - bitShiftAmount & 0xff);\n            carryFlag = CARRY4(bitShiftAmount,integerPart);\n            integerPart = bitShiftAmount + integerPart;\n            if (carryFlag != false) {\n              fractionPart = fractionPart + 1;\n            }\n          }\n        }\n        result = CONCAT44(fractionPart,integerPart & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(fractionPart,integerPart);\n    if (bitShiftAmount == 0x400) {\n      result = calculate_sum_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009318": "calculate_floating_point_value_08009318",
                "param_1": "integerPart",
                "param_2": "fractionPart",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "isTerminatorNull",
                "uVar2": "bitShiftAmount",
                "uVar3": "mask",
                "bVar4": "carryFlag",
                "uVar5": "sum",
                "lVar6": "result"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994",
                "FUN_08002c18"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009410": {
            "entrypoint": "0x08009410",
            "current_name": "process_data_08009410",
            "code": "\nundefined4 processData_08009410(undefined4 input,uint dataSize)\n\n{\n  undefined4 result;\n  uint dataType;\n  undefined4 processedData;\n  undefined4 stackVar1;\n  undefined4 stackVar2;\n  undefined4 stackVar3;\n  \n  if (0x3fe921fb < (dataSize & 0x7fffffff)) {\n    if ((dataSize & 0x7fffffff) < 0x7ff00000) {\n      dataType = process_data_08009d78(input,dataSize,&processedData);\n      dataType = dataType & 3;\n      if (dataType == 1) {\n        result = calculate_updated_value_0800adf0(processedData,stackVar1,stackVar2,stackVar3,1);\n      }\n      else if (dataType == 2) {\n        result = calculate_hash_sum_0800a348(processedData,stackVar1,stackVar2,stackVar3);\n      }\n      else if (dataType == 0) {\n        result = calculate_hash_sum_0800a348(processedData,stackVar1,stackVar2,stackVar3);\n      }\n      else {\n        result = calculate_updated_value_0800adf0(processedData,stackVar1,stackVar2,stackVar3,1);\n      }\n    }\n    else {\n      result = reverse_bitwise_operations_080082d0(input,dataSize,input,dataSize);\n    }\n    return result;\n  }\n  result = calculate_hash_sum_0800a348(input,dataSize,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009410": "process_data_08009410",
                "param_1": "input",
                "param_2": "dataSize",
                "uVar1": "result",
                "uVar2": "dataType",
                "local_28": "processedData",
                "uStack_24": "stackVar1",
                "local_20": "stackVar2",
                "uStack_1c": "stackVar3"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080094c0": {
            "entrypoint": "0x080094c0",
            "current_name": "calculate_result_080094c0",
            "code": "\nlonglong calculate_result_080094c0(uint input_1,uint input_2,undefined4 constant_1,undefined4 constant_2)\n\n{\n  int result;\n  uint shifted_bits;\n  uint mask;\n  bool carry;\n  undefined8 sum;\n  longlong final_result;\n  \n  mask = (input_2 << 1) >> 0x15;\n  shifted_bits = mask - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      sum = calculate_sum_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n      result = check_null_terminator_08008b60((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (result != 0) {\n        if ((int)input_2 < 0) {\n          if ((input_1 | input_2 & 0x7fffffff) != 0) {\n            input_2 = 0xbff00000;\n          }\n          final_result = (ulonglong)input_2 << 0x20;\n        }\n        else {\n          final_result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shifted_bits & 0xff);\n      final_result = CONCAT44(input_2,input_1);\n      if ((input_2 & mask | input_1) != 0) {\n        sum = calculate_sum_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n        result = check_null_terminator_08008b60((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n        final_result = CONCAT44(input_2,input_1);\n        if (result != 0) {\n          if ((int)input_2 < 0) {\n            input_2 = input_2 + (0x100000 >> (shifted_bits & 0xff));\n          }\n          final_result = (ulonglong)(input_2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_bits < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    final_result = CONCAT44(input_2,input_1);\n    if ((mask & input_1) != 0) {\n      sum = calculate_sum_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,constant_2);\n      result = check_null_terminator_08008b60((int)sum,(int)((ulonglong)sum >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (result != 0) {\n        if ((int)input_2 < 0) {\n          if (shifted_bits == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            shifted_bits = 1 << (0x34 - shifted_bits & 0xff);\n            carry = CARRY4(shifted_bits,input_1);\n            input_1 = shifted_bits + input_1;\n            if (carry != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input_2,input_1 & ~mask);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input_2,input_1);\n    if (shifted_bits == 0x400) {\n      final_result = calculate_sum_080082d4();\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_080094c0": "calculate_result_080094c0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "iVar1": "result",
                "uVar2": "shifted_bits",
                "uVar3": "mask",
                "bVar4": "carry",
                "uVar5": "sum",
                "lVar6": "final_result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080095b8": {
            "entrypoint": "0x080095b8",
            "current_name": "calculate_product_080095b8",
            "code": "\nint calculateProduct_080095b8(uint input1,uint input2)\n\n{\n  uint carry;\n  uint shiftedBits;\n  uint result;\n  int sign;\n  uint exponent;\n  \n  shiftedBits = (input2 << 1) >> 0x15;\n  exponent = shiftedBits - 0x3ff;\n  if ((int)input2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input2 & 0xfffff | 0x100000;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      if (exponent != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (exponent & 0xff)) >> (0x14 - exponent & 0xff);\n  }\n  else {\n    if (0x1e < exponent) {\n      sign = FUNC_08008ba0();\n      return sign;\n    }\n    if ((int)exponent < 0x34) {\n      carry = 0x80000000 >> (shiftedBits - 0x413 & 0xff);\n      if (CARRY4(carry,input1) != false) {\n        result = result + 1;\n      }\n      result = result << (shiftedBits - 0x413 & 0xff);\n      if (exponent != 0x14) {\n        result = result | carry + input1 >> (0x34 - exponent & 0xff);\n      }\n    }\n    else {\n      result = result << (shiftedBits - 0x413 & 0xff) | input1 << (shiftedBits - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "renaming": {
                "FUN_080095b8": "calculate_product_080095b8",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "carry",
                "uVar2": "shiftedBits",
                "uVar3": "result",
                "iVar4": "sign",
                "uVar5": "exponent"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08001994"
            ],
            "called": [
                "FUN_08008ba0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009654": {
            "entrypoint": "0x08009654",
            "current_name": "convert_to_double_08009654",
            "code": "\nlonglong convertToDouble_08009654(uint input1,uint input2)\n\n{\n  uint bitDifference;\n  uint shiftedBits;\n  longlong result;\n  \n  result = CONCAT44(input2,input1);\n  shiftedBits = (input2 << 1) >> 0x15;\n  bitDifference = shiftedBits - 0x3ff;\n  if ((int)bitDifference < 0x14) {\n    if ((int)bitDifference < 0) {\n      input2 = input2 & 0x80000000;\n      if (bitDifference == 0xffffffff) {\n        input2 = input2 | 0x3ff00000;\n      }\n      result = (ulonglong)input2 << 0x20;\n    }\n    else {\n      shiftedBits = 0xfffff >> (bitDifference & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & shiftedBits | input1) != 0) {\n        result = (ulonglong)(input2 + (0x80000 >> (bitDifference & 0xff)) & ~shiftedBits) << 0x20;\n      }\n    }\n  }\n  else if ((int)bitDifference < 0x34) {\n    shiftedBits = 0xffffffff >> (shiftedBits - 0x413 & 0xff);\n    if ((input1 & shiftedBits) != 0) {\n      bitDifference = 1 << (0x33 - bitDifference & 0xff);\n      if (CARRY4(input1,bitDifference) != false) {\n        input2 = input2 + 1;\n      }\n      result = CONCAT44(input2,input1 + bitDifference & ~shiftedBits);\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (bitDifference == 0x400) {\n      result = calculate_sum_080082d4();\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009654": "convert_to_double_08009654",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "bitDifference",
                "uVar2": "shiftedBits",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080096e8": {
            "entrypoint": "0x080096e8",
            "current_name": "process_data_080096e8",
            "code": "\nundefined4 processData_080096e8(undefined4 input,uint dataLength)\n\n{\n  undefined4 result;\n  uint dataFlag;\n  undefined4 dataBuffer;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  \n  if (0x3fe921fb < (dataLength & 0x7fffffff)) {\n    if ((dataLength & 0x7fffffff) < 0x7ff00000) {\n      dataFlag = process_data_08009d78(input,dataLength,&dataBuffer);\n      dataFlag = dataFlag & 3;\n      if (dataFlag == 1) {\n        result = calculate_hash_sum_0800a348(dataBuffer,tempVar1,tempVar2,tempVar3);\n      }\n      else if (dataFlag == 2) {\n        result = calculate_updated_value_0800adf0(dataBuffer,tempVar1,tempVar2,tempVar3,1);\n      }\n      else if (dataFlag == 0) {\n        result = calculate_updated_value_0800adf0(dataBuffer,tempVar1,tempVar2,tempVar3,1);\n      }\n      else {\n        result = calculate_hash_sum_0800a348(dataBuffer,tempVar1,tempVar2,tempVar3);\n      }\n    }\n    else {\n      result = reverse_bitwise_operations_080082d0(input,dataLength,input,dataLength);\n    }\n    return result;\n  }\n  result = calculate_updated_value_0800adf0(input,dataLength,0,0,0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080096e8": "process_data_080096e8",
                "param_1": "input",
                "param_2": "dataLength",
                "uVar1": "result",
                "uVar2": "dataFlag",
                "local_28": "dataBuffer",
                "uStack_24": "tempVar1",
                "local_20": "tempVar2",
                "uStack_1c": "tempVar3"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009798": {
            "entrypoint": "0x08009798",
            "current_name": "extract_bits_and_shift_08009798",
            "code": "\nlonglong extract_bits_and_shift_08009798(uint input_1,uint input_2,undefined4 unused_param_3,undefined4 unused_param_4)\n\n{\n  uint shift_amount;\n  uint shifted_input;\n  longlong result;\n  \n  shifted_input = (input_2 << 1) >> 0x15;\n  shift_amount = shifted_input - 0x3ff;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      return ((ulonglong)input_2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input_2 & ~(0xfffff >> (shift_amount & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shift_amount < 0x34) {\n      return CONCAT44(input_2,input_1 & ~(0xffffffffU >> (shifted_input - 0x413 & 0xff)));\n    }\n    if (shift_amount != 0x400) {\n      return CONCAT44(input_2,input_1);\n    }\n    result = calculate_sum_080082d4(input_1,input_2,input_1,input_2,unused_param_4);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009798": "extract_bits_and_shift_08009798",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "unused_param_3",
                "param_4": "unused_param_4",
                "uVar1": "shift_amount",
                "uVar2": "shifted_input",
                "lVar3": "result"
            },
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "called": [
                "FUN_080082d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "entrypoint": "0x08009818",
            "current_name": "calculate_updated_value_thunk_08009990",
            "code": "\nuint calculate_updated_value_thunk_08009990(uint input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  int difference;\n  undefined4 upper_bits;\n  uint flag;\n  uint updated_param_4;\n  uint updated_param_2;\n  undefined8 temp_result;\n  \n  updated_param_4 = input_param_4 & 0x7fffffff;\n  if (((updated_param_4 | (-input_param_3 | input_param_3) >> 0x1f) < 0x7ff00001) &&\n     (updated_param_2 = input_param_2 & 0x7fffffff, (updated_param_2 | (-input_param_1 | input_param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_param_4 + 0xc0100000 | input_param_3) == 0) {\n      updated_param_4 = calculate_improved_value_0800af78();\n      return updated_param_4;\n    }\n    flag = (int)input_param_4 >> 0x1e & 2U | input_param_2 >> 0x1f;\n    if ((updated_param_2 | input_param_1) == 0) {\n      if (flag == 2) {\n        input_param_1 = 0x54442d18;\n      }\n      else if (flag == 3) {\n        input_param_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((updated_param_4 | input_param_3) != 0) {\n        if (updated_param_4 == 0x7ff00000) {\n          flag = flag - 1;\n          if (updated_param_2 == 0x7ff00000) {\n            if (flag < 3) {\n              return *(uint *)(&DAT_0800be68 + flag * 8);\n            }\n            return 0x54442d18;\n          }\n          if (flag < 3) {\n            return *(uint *)(&DAT_0800be80 + flag * 8);\n          }\n          return 0;\n        }\n        if (updated_param_2 != 0x7ff00000) {\n          difference = (int)(updated_param_2 - updated_param_4) >> 0x14;\n          if ((int)(updated_param_2 - updated_param_4) < 0x3d00000) {\n            if (((int)input_param_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              temp_result = 0;\n            }\n            else {\n              calculate_double_08008894(input_param_1,input_param_2,input_param_3,input_param_4,input_param_4);\n              FUNC_0800b2cc();\n              temp_result = calculate_improved_value_0800af78();\n            }\n          }\n          else {\n            temp_result = 0x3ff921fb54442d18;\n          }\n          upper_bits = (undefined4)((ulonglong)temp_result >> 0x20);\n          updated_param_4 = (uint)temp_result;\n          if (flag == 1) {\n            return updated_param_4;\n          }\n          if (flag == 2) {\n            temp_result = reverse_bitwise_operations_080082d0(updated_param_4,upper_bits,0x33145c07,0x3ca1a626);\n            updated_param_4 = reverse_bitwise_operations_080082d0(0x54442d18,0x400921fb,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n            return updated_param_4;\n          }\n          if (flag == 0) {\n            return updated_param_4;\n          }\n          temp_result = reverse_bitwise_operations_080082d0(updated_param_4,upper_bits,0x33145c07,0x3ca1a626);\n          updated_param_4 = reverse_bitwise_operations_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x54442d18,0x400921fb);\n          return updated_param_4;\n        }\n      }\n      if ((int)input_param_2 < 0) {\n        input_param_1 = 0x54442d18;\n      }\n      else {\n        input_param_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_param_1 = calculate_sum_080082d4(input_param_3,input_param_4,input_param_1,input_param_2);\n  }\n  return input_param_1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08009990": "calculate_updated_value_thunk_08009990",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "difference",
                "uVar2": "upper_bits",
                "uVar3": "flag",
                "uVar4": "updated_param_4",
                "uVar5": "updated_param_2",
                "uVar6": "temp_result"
            },
            "calling": [
                "FUN_08001f00"
            ],
            "called": [
                "FUN_08009990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800981c": {
            "entrypoint": "0x0800981c",
            "current_name": "calculate_updated_value_0800981c",
            "code": "\nundefined8 calculate_updated_value_0800981c(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  undefined4 *data_ptr;\n  int *global_data_ptr;\n  undefined8 updated_value;\n  undefined4 constant_1;\n  char *constant_string;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 limit_1;\n  undefined4 limit_2;\n  int bitwise_shift_result;\n  \n  updated_value = calculate_updated_value_0800981c_08009b24();\n  if (DAT_20000014 == -1) {\n    return updated_value;\n  }\n  bitwise_shift_result = bitwise_shift_division_0800b2d4();\n  if (bitwise_shift_result != 0) {\n    return updated_value;\n  }\n  result = bitwise_shift_division_0800b2d4(input_1,input_2);\n  if (result == 0) {\n    return updated_value;\n  }\n  result = bitwise_shift_division_0800b2d4(input_3,input_4);\n  if (result == 0) {\n    return updated_value;\n  }\n  constant_1 = 3;\n  constant_string = \"hypot\";\n  param_1_copy = input_1;\n  param_2_copy = input_2;\n  param_3_copy = input_3;\n  param_4_copy = input_4;\n  if (DAT_20000014 == '\\0') {\n    limit_1 = 0xe0000000;\n    limit_2 = 0x47efffff;\nLAB_080098aa:\n    result = initialize_0800b2e0(&constant_1);\n    if (result != 0) goto LAB_08009896;\n  }\n  else {\n    limit_1 = 0;\n    limit_2 = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  data_ptr = (undefined4 *)get_global_data_0800b3dc();\n  *data_ptr = 0x22;\nLAB_08009896:\n  updated_value = CONCAT44(limit_2,limit_1);\n  if (bitwise_shift_result != 0) {\n    global_data_ptr = (int *)get_global_data_0800b3dc();\n    updated_value = CONCAT44(limit_2,limit_1);\n    *global_data_ptr = bitwise_shift_result;\n  }\n  return updated_value;\n}\n\n",
            "renaming": {
                "FUN_0800981c": "calculate_updated_value_0800981c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result",
                "puVar2": "data_ptr",
                "piVar3": "global_data_ptr",
                "uVar4": "updated_value",
                "local_50": "constant_1",
                "pcStack_4c": "constant_string",
                "local_48": "param_1_copy",
                "uStack_44": "param_2_copy",
                "local_40": "param_3_copy",
                "uStack_3c": "param_4_copy",
                "local_38": "limit_1",
                "uStack_34": "limit_2",
                "local_30": "bitwise_shift_result"
            },
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08009b24",
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080098d0": {
            "entrypoint": "0x080098d0",
            "current_name": "process_data_080098d0",
            "code": "\nundefined4 processData_080098d0(undefined4 input1,undefined4 input2)\n\n{\n  char flag;\n  undefined4 calculatedValue;\n  int result;\n  undefined4 *globalDataPtr;\n  int *globalDataIntPtr;\n  undefined4 flagValue;\n  undefined *dataPtr;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input1Copy2;\n  undefined4 input2Copy2;\n  undefined8 doubleValue;\n  int checkResult;\n  \n  calculatedValue = calculate_0800a1bc();\n  flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (checkResult = check_inputs_08008b74(input1,input2,input1,input2), checkResult != 0)) ||\n     (result = is_cy_null_08008b24(input1,input2,0,0), result == 0)) {\n    return calculatedValue;\n  }\n  flagValue = 1;\n  dataPtr = &DAT_0800be5c;\n  input1Copy = input1;\n  input2Copy = input2;\n  input1Copy2 = input1;\n  input2Copy2 = input2;\n  if (flag == '\\0') {\n    doubleValue = 0;\nLAB_0800996c:\n    result = initialize_0800b2e0(&flagValue);\n    if (result != 0) goto joined_r0x0800997a;\n  }\n  else {\n    doubleValue = calculate_double_08008894(0,0,0,0);\n    if (flag != '\\x02') goto LAB_0800996c;\n  }\n  globalDataPtr = (undefined4 *)get_global_data_0800b3dc();\n  *globalDataPtr = 0x21;\njoined_r0x0800997a:\n  if (checkResult != 0) {\n    globalDataIntPtr = (int *)get_global_data_0800b3dc();\n    *globalDataIntPtr = checkResult;\n  }\n  return (undefined4)doubleValue;\n}\n\n",
            "renaming": {
                "FUN_080098d0": "process_data_080098d0",
                "param_1": "input1",
                "param_2": "input2",
                "uVar2": "calculatedValue",
                "cVar1": "flag",
                "iVar3": "result",
                "puVar4": "globalDataPtr",
                "piVar5": "globalDataIntPtr",
                "local_50": "flagValue",
                "local_4c": "dataPtr",
                "local_48": "input1Copy",
                "uStack_44": "input2Copy",
                "local_40": "input1Copy2",
                "uStack_3c": "input2Copy2",
                "local_38": "doubleValue",
                "local_30": "checkResult"
            },
            "calling": [
                "FUN_08003004",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_080005b4"
            ],
            "called": [
                "FUN_08008b24",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_0800b2e0",
                "FUN_0800a1bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009990": {
            "entrypoint": "0x08009990",
            "current_name": "calculate_08009990",
            "code": "\nuint calculate_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int difference;\n  undefined4 upper_half_result;\n  uint bit_shifted_result;\n  uint masked_result_4;\n  uint masked_result_5;\n  undefined8 improved_value;\n  \n  masked_result_4 = input_4 & 0x7fffffff;\n  if (((masked_result_4 | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (masked_result_5 = input_2 & 0x7fffffff, (masked_result_5 | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      masked_result_4 = calculate_08009990_improved_value();\n      return masked_result_4;\n    }\n    bit_shifted_result = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((masked_result_5 | input_1) == 0) {\n      if (bit_shifted_result == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (bit_shifted_result == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((masked_result_4 | input_3) != 0) {\n        if (masked_result_4 == 0x7ff00000) {\n          bit_shifted_result = bit_shifted_result - 1;\n          if (masked_result_5 == 0x7ff00000) {\n            if (bit_shifted_result < 3) {\n              return *(uint *)(&DAT_0800be68 + bit_shifted_result * 8);\n            }\n            return 0x54442d18;\n          }\n          if (bit_shifted_result < 3) {\n            return *(uint *)(&DAT_0800be80 + bit_shifted_result * 8);\n          }\n          return 0;\n        }\n        if (masked_result_5 != 0x7ff00000) {\n          difference = (int)(masked_result_5 - masked_result_4) >> 0x14;\n          if ((int)(masked_result_5 - masked_result_4) < 0x3d00000) {\n            if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              improved_value = 0;\n            }\n            else {\n              calculate_08009990_double(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              improved_value = calculate_08009990_improved_value();\n            }\n          }\n          else {\n            improved_value = 0x3ff921fb54442d18;\n          }\n          upper_half_result = (undefined4)((ulonglong)improved_value >> 0x20);\n          masked_result_4 = (uint)improved_value;\n          if (bit_shifted_result == 1) {\n            return masked_result_4;\n          }\n          if (bit_shifted_result == 2) {\n            improved_value = reverse_bitwise_operations(masked_result_4,upper_half_result,0x33145c07,0x3ca1a626);\n            masked_result_4 = reverse_bitwise_operations(0x54442d18,0x400921fb,(int)improved_value,(int)((ulonglong)improved_value >> 0x20));\n            return masked_result_4;\n          }\n          if (bit_shifted_result == 0) {\n            return masked_result_4;\n          }\n          improved_value = reverse_bitwise_operations(masked_result_4,upper_half_result,0x33145c07,0x3ca1a626);\n          masked_result_4 = reverse_bitwise_operations((int)improved_value,(int)((ulonglong)improved_value >> 0x20),0x54442d18,0x400921fb);\n          return masked_result_4;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = calculate_08009990_sum(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08009990": "calculate_08009990",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar2": "upper_half_result",
                "uVar3": "bit_shifted_result",
                "uVar4": "masked_result_4",
                "uVar5": "masked_result_5",
                "uVar6": "improved_value",
                "iVar1": "difference",
                "calculate_improved_value_0800af78": "calculate_improved_value",
                "calculate_double_08008894": "calculate_double",
                "reverse_bitwise_operations_080082d0": "reverse_bitwise_operations",
                "calculate_sum_080082d4": "calculate_sum"
            },
            "calling": [
                "thunk_FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009b24": {
            "entrypoint": "0x08009b24",
            "current_name": "calculate_updated_value_08009b24",
            "code": "\nuint calculate_updated_value_08009b24(uint input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  undefined4 updated_var1;\n  int updated_var2;\n  uint result;\n  int updated_var4;\n  undefined4 updated_var5;\n  int updated_var6;\n  uint updated_var7;\n  undefined4 updated_var8;\n  undefined4 updated_var9;\n  undefined8 hash_value1;\n  undefined8 hash_value2;\n  undefined8 hash_value3;\n  undefined8 hash_value4;\n  int local_variable;\n  \n  input_param2 = input_param2 & 0x7fffffff;\n  input_param4 = input_param4 & 0x7fffffff;\n  result = input_param1;\n  updated_var7 = input_param2;\n  if (input_param2 < input_param4) {\n    result = input_param3;\n    input_param3 = input_param1;\n    updated_var7 = input_param4;\n    input_param4 = input_param2;\n  }\n  if (0x3c00000 < (int)(updated_var7 - input_param4)) {\n    result = calculate_sum_080082d4(result,updated_var7,input_param3,input_param4);\n    return result;\n  }\n  if (updated_var7 < 0x5f300001) {\n    local_variable = 0;\n  }\n  else {\n    if (0x7fefffff < updated_var7) {\n      if ((updated_var7 & 0xfffff | result) != 0) {\n        result = calculate_sum_080082d4(result,updated_var7,input_param3,input_param4);\n      }\n      if ((input_param4 ^ 0x7ff00000 | input_param3) != 0) {\n        return result;\n      }\n      return input_param3;\n    }\n    updated_var7 = updated_var7 + 0xda800000;\n    input_param4 = input_param4 + 0xda800000;\n    local_variable = 600;\n  }\n  hash_value2 = CONCAT44(updated_var7,result);\n  hash_value1 = CONCAT44(input_param4,input_param3);\n  if ((int)input_param4 < 0x20b00000) {\n    if ((int)input_param4 < 0x100000) {\n      if ((input_param4 | input_param3) == 0) {\n        return result;\n      }\n      hash_value1 = calculate_hash_08008640(input_param3,input_param4,0,0x7fd00000);\n      hash_value2 = calculate_hash_08008640(result,updated_var7,0,0x7fd00000);\n      local_variable = local_variable + -0x3fe;\n    }\n    else {\n      updated_var7 = updated_var7 + 0x25800000;\n      hash_value2 = CONCAT44(updated_var7,result);\n      input_param4 = input_param4 + 0x25800000;\n      hash_value1 = CONCAT44(input_param4,input_param3);\n      local_variable = local_variable + -600;\n    }\n  }\n  updated_var9 = (undefined4)((ulonglong)hash_value2 >> 0x20);\n  updated_var8 = (undefined4)hash_value2;\n  updated_var6 = (int)((ulonglong)hash_value1 >> 0x20);\n  updated_var5 = (undefined4)hash_value1;\n  hash_value1 = reverse_bitwise_operations_080082d0(updated_var8,updated_var9,updated_var5,updated_var6);\n  updated_var4 = (int)((ulonglong)hash_value1 >> 0x20);\n  updated_var1 = (undefined4)hash_value1;\n  updated_var2 = is_cy_null_08008b24(updated_var5,updated_var6,updated_var1,updated_var4);\n  if (updated_var2 == 0) {\n    hash_value1 = calculate_hash_08008640(0,input_param4,0);\n    hash_value2 = calculate_hash_08008640(updated_var1,updated_var4 + -0x80000000,updated_var1,updated_var4);\n    hash_value3 = calculate_sum_080082d4(updated_var8,updated_var9,updated_var8,updated_var9);\n    hash_value3 = reverse_bitwise_operations_080082d0((int)hash_value3,(int)((ulonglong)hash_value3 >> 0x20),0,updated_var7 + 0x100000);\n    hash_value3 = calculate_hash_08008640((int)hash_value3,(int)((ulonglong)hash_value3 >> 0x20),updated_var5,updated_var6);\n    hash_value4 = reverse_bitwise_operations_080082d0(updated_var5,updated_var6,0,input_param4);\n    hash_value4 = calculate_hash_08008640((int)hash_value4,(int)((ulonglong)hash_value4 >> 0x20),0,updated_var7 + 0x100000);\n    hash_value3 = calculate_sum_080082d4((int)hash_value3,(int)((ulonglong)hash_value3 >> 0x20),(int)hash_value4,\n                          (int)((ulonglong)hash_value4 >> 0x20));\n    hash_value2 = reverse_bitwise_operations_080082d0((int)hash_value2,(int)((ulonglong)hash_value2 >> 0x20),(int)hash_value3,\n                          (int)((ulonglong)hash_value3 >> 0x20));\n    reverse_bitwise_operations_080082d0((int)hash_value1,(int)((ulonglong)hash_value1 >> 0x20),(int)hash_value2,\n                 (int)((ulonglong)hash_value2 >> 0x20));\n    hash_value1 = calculate_0800a1bc();\n  }\n  else {\n    hash_value1 = calculate_hash_08008640(0,updated_var7,0,updated_var7);\n    hash_value2 = calculate_hash_08008640(updated_var5,updated_var6 + -0x80000000,updated_var5,updated_var6);\n    hash_value3 = calculate_sum_080082d4(updated_var8,updated_var9,0,updated_var7);\n    hash_value4 = reverse_bitwise_operations_080082d0(updated_var8,updated_var9,0,updated_var7);\n    hash_value3 = calculate_hash_08008640((int)hash_value3,(int)((ulonglong)hash_value3 >> 0x20),(int)hash_value4,\n                          (int)((ulonglong)hash_value4 >> 0x20));\n    hash_value2 = reverse_bitwise_operations_080082d0((int)hash_value2,(int)((ulonglong)hash_value2 >> 0x20),(int)hash_value3,\n                          (int)((ulonglong)hash_value3 >> 0x20));\n    reverse_bitwise_operations_080082d0((int)hash_value1,(int)((ulonglong)hash_value1 >> 0x20),(int)hash_value2,\n                 (int)((ulonglong)hash_value2 >> 0x20));\n    hash_value1 = calculate_0800a1bc();\n  }\n  result = (uint)hash_value1;\n  if (local_variable != 0) {\n    result = calculate_hash_08008640(result,(int)((ulonglong)hash_value1 >> 0x20),0,local_variable * 0x100000 + 0x3ff00000);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08009b24": "calculate_updated_value_08009b24",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "updated_var1",
                "iVar2": "updated_var2",
                "uVar3": "result",
                "iVar4": "updated_var4",
                "uVar5": "updated_var5",
                "iVar6": "updated_var6",
                "uVar7": "updated_var7",
                "uVar8": "updated_var8",
                "uVar9": "updated_var9",
                "uVar10": "hash_value1",
                "uVar11": "hash_value2",
                "uVar12": "hash_value3",
                "uVar13": "hash_value4",
                "local_3c": "local_variable"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b24",
                "FUN_08008640",
                "FUN_0800a1bc",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08009d78": {
            "entrypoint": "0x08009d78",
            "current_name": "process_data_08009d78",
            "code": "\nint processData_08009d78(undefined4 input1,uint input2,undefined8 *output)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  undefined4 temp7;\n  uint maskedInput2;\n  int returnValue;\n  undefined8 result;\n  undefined8 temp8;\n  undefined8 temp9;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined8 localVariable3;\n  undefined8 localVariable4;\n  undefined8 localVariable5;\n  \n  maskedInput2 = input2 & 0x7fffffff;\n  if (maskedInput2 < 0x3fe921fc) {\n    *(undefined4 *)output = input1;\n    *(uint *)((int)output + 4) = input2;\n    *(undefined4 *)(output + 1) = 0;\n    *(undefined4 *)((int)output + 0xc) = 0;\n    return 0;\n  }\n  if (maskedInput2 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      result = calculate_sum_080082d4(input1,input2,0x54400000,0x3ff921fb);\n      temp3 = (undefined4)((ulonglong)result >> 0x20);\n      temp1 = (undefined4)result;\n      if (maskedInput2 != 0x3ff921fb) {\n        result = calculate_sum_080082d4(temp1,temp3,0x1a626331,0x3dd0b461);\n        *output = result;\n        result = reverse_bitwise_operations_080082d0(temp1,temp3);\n        result = calculate_sum_080082d4((int)result,(int)((ulonglong)result >> 0x20),0x1a626331,0x3dd0b461);\n        output[1] = result;\n        return -1;\n      }\n      result = calculate_sum_080082d4(temp1,temp3,0x1a600000,0x3dd0b461);\n      temp1 = (undefined4)((ulonglong)result >> 0x20);\n      temp8 = calculate_sum_080082d4((int)result,temp1,0x2e037073,0x3ba3198a);\n      *output = temp8;\n      result = reverse_bitwise_operations_080082d0((int)result,temp1);\n      result = calculate_sum_080082d4((int)result,(int)((ulonglong)result >> 0x20),0x2e037073,0x3ba3198a);\n      output[1] = result;\n      return -1;\n    }\n    result = reverse_bitwise_operations_080082d0();\n    temp3 = (undefined4)((ulonglong)result >> 0x20);\n    temp1 = (undefined4)result;\n    if (maskedInput2 != 0x3ff921fb) {\n      result = reverse_bitwise_operations_080082d0(temp1,temp3,0x1a626331,0x3dd0b461);\n      *output = result;\n      result = reverse_bitwise_operations_080082d0(temp1,temp3);\n      result = reverse_bitwise_operations_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x1a626331,0x3dd0b461);\n      output[1] = result;\n      return 1;\n    }\n    result = reverse_bitwise_operations_080082d0(temp1,temp3,0x1a600000,0x3dd0b461);\n    temp1 = (undefined4)((ulonglong)result >> 0x20);\n    temp8 = reverse_bitwise_operations_080082d0((int)result,temp1,0x2e037073,0x3ba3198a);\n    *output = temp8;\n    result = reverse_bitwise_operations_080082d0((int)result,temp1);\n    result = reverse_bitwise_operations_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x2e037073,0x3ba3198a);\n    output[1] = result;\n    return 1;\n  }\n  if (0x413921fb < maskedInput2) {\n    if (0x7fefffff < maskedInput2) {\n      result = reverse_bitwise_operations_080082d0(input1,input2,input1,input2);\n      output[1] = result;\n      *output = result;\n      return 0;\n    }\n    returnValue = ((int)maskedInput2 >> 0x14) + -0x416;\n    FUNC_08008ba0();\n    localVariable3 = bitwise_shift_0800856c();\n    result = reverse_bitwise_operations_080082d0(input1,maskedInput2 + returnValue * -0x100000,(int)localVariable3,\n                          (int)((ulonglong)localVariable3 >> 0x20));\n    result = calculate_hash_08008640((int)result,(int)((ulonglong)result >> 0x20),0,0x41700000);\n    FUNC_08008ba0();\n    localVariable4 = bitwise_shift_0800856c();\n    result = reverse_bitwise_operations_080082d0((int)result,(int)((ulonglong)result >> 0x20));\n    localVariable5 = calculate_hash_08008640((int)result,(int)((ulonglong)result >> 0x20),0,0x41700000);\n    check_parameters_08008b10((int)localVariable5,(int)((ulonglong)localVariable5 >> 0x20),0,0);\n    returnValue = FUNC_0800a5a0(&localVariable3,output,returnValue);\n    if (-1 < (int)input2) {\n      return returnValue;\n    }\n    *(int *)((int)output + 4) = *(int *)((int)output + 4) + -0x80000000;\n    *(int *)((int)output + 0xc) = *(int *)((int)output + 0xc) + -0x80000000;\n    return -returnValue;\n  }\n  result = FUNC_0800b2cc();\n  temp3 = (undefined4)((ulonglong)result >> 0x20);\n  temp8 = calculate_hash_08008640((int)result,temp3,0x6dc9c883,0x3fe45f30);\n  calculate_sum_080082d4((int)temp8,(int)((ulonglong)temp8 >> 0x20),0,0x3fe00000);\n  returnValue = FUNC_08008ba0();\n  temp8 = bitwise_shift_0800856c();\n  temp4 = (undefined4)((ulonglong)temp8 >> 0x20);\n  temp1 = (undefined4)temp8;\n  temp8 = calculate_hash_08008640(temp1,temp4,0x54400000,0x3ff921fb);\n  result = reverse_bitwise_operations_080082d0((int)result,temp3,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n  temp5 = (undefined4)((ulonglong)result >> 0x20);\n  temp3 = (undefined4)result;\n  temp8 = calculate_hash_08008640(temp1,temp4,0x1a626331,0x3dd0b461);\n  if ((0x1f < returnValue) || (*(uint *)(&DAT_0800be98 + (returnValue + -1) * 4) == maskedInput2)) {\n    temp9 = reverse_bitwise_operations_080082d0(temp3,temp5,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n    if ((int)((maskedInput2 >> 0x14) - ((uint)((int)((ulonglong)temp9 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp8 = calculate_hash_08008640(temp1,temp4,0x1a600000,0x3dd0b461);\n    temp6 = (undefined4)((ulonglong)temp8 >> 0x20);\n    result = reverse_bitwise_operations_080082d0(temp3,temp5,(int)temp8,temp6);\n    temp7 = (undefined4)((ulonglong)result >> 0x20);\n    temp2 = (undefined4)result;\n    temp9 = reverse_bitwise_operations_080082d0(temp3,temp5,temp2,temp7);\n    temp8 = reverse_bitwise_operations_080082d0((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,temp6);\n    temp9 = calculate_hash_08008640(temp1,temp4,0x2e037073,0x3ba3198a);\n    temp8 = reverse_bitwise_operations_080082d0((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                          (int)((ulonglong)temp8 >> 0x20));\n    temp9 = reverse_bitwise_operations_080082d0(temp2,temp7,(int)temp8,(int)((ulonglong)temp8 >> 0x20));\n    if ((int)(((int)maskedInput2 >> 0x14) - ((uint)((int)((ulonglong)temp9 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp8 = calculate_hash_08008640(temp1,temp4,0x2e000000,0x3ba3198a);\n    temp3 = (undefined4)((ulonglong)temp8 >> 0x20);\n    result = reverse_bitwise_operations_080082d0(temp2,temp7,(int)temp8,temp3);\n    temp9 = reverse_bitwise_operations_080082d0(temp2,temp7);\n    temp8 = reverse_bitwise_operations_080082d0((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,temp3);\n    temp9 = calculate_hash_08008640(temp1,temp4,0x252049c1,0x397b839a);\n    temp8 = reverse_bitwise_operations_080082d0((int)temp9,(int)((ulonglong)temp9 >> 0x20),(int)temp8,\n                          (int)((ulonglong)temp8 >> 0x20));\n  }\n  temp9 = reverse_bitwise_operations_080082d0((int)result,(int)((ulonglong)result >> 0x20),(int)temp8,\n                        (int)((ulonglong)temp8 >> 0x20));\nLAB_0800a0ce:\n  localVariable2 = (undefined4)((ulonglong)result >> 0x20);\n  localVariable1 = (undefined4)result;\n  *output = temp9;\n  result = reverse_bitwise_operations_080082d0(localVariable1,localVariable2);\n  result = reverse_bitwise_operations_080082d0((int)result,(int)((ulonglong)result >> 0x20),(int)temp8,\n                        (int)((ulonglong)temp8 >> 0x20));\n  output[1] = result;\n  if ((int)input2 < 0) {\n    *(int *)output = (int)temp9;\n    *(int *)((int)output + 4) = (int)((ulonglong)temp9 >> 0x20) + -0x80000000;\n    *(int *)(output + 1) = (int)result;\n    *(int *)((int)output + 0xc) = (int)((ulonglong)result >> 0x20) + -0x80000000;\n    returnValue = -returnValue;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08009d78": "process_data_08009d78",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar8": "maskedInput2",
                "iVar9": "returnValue",
                "uVar10": "result",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "local_50": "localVariable1",
                "uStack_4c": "localVariable2",
                "local_40": "localVariable3",
                "local_38": "localVariable4",
                "local_30": "localVariable5"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b10",
                "FUN_0800b2cc",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "entrypoint": "0x0800a1bc",
            "current_name": "calculate_0800a1bc",
            "code": "\nuint calculate_0800a1bc(uint input1,uint input2)\n\n{\n  uint shift_count;\n  int loop_counter;\n  uint temp;\n  undefined4 result_1;\n  uint result_2;\n  uint mask;\n  uint sum;\n  uint diff;\n  uint shifted_input;\n  int inner_loop_counter;\n  uint carry;\n  uint shifted_input_len;\n  undefined8 hash_result;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    hash_result = calculate_0800a1bc_hash(input1,input2,input1,input2);\n    sum = calculate_0800a1bc_sum((int)hash_result,(int)((ulonglong)hash_result >> 0x20),input1,input2);\n    return sum;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return input1;\n    }\n    if (input2 != 0) {\n      hash_result = reverse_bitwise_operations(input1,input2,input1);\n      result_1 = (undefined4)((ulonglong)hash_result >> 0x20);\n      sum = calculate_0800a1bc_double((int)hash_result,result_1,(int)hash_result,result_1);\n      return sum;\n    }\n    do {\n      shifted_input = input1;\n      sum = shifted_input >> 0xb;\n      input2 = input2 - 0x15;\n      input1 = shifted_input << 0x15;\n    } while (sum == 0);\n    shift_count = input2;\n    if (-1 < (int)shifted_input) goto LAB_0800a290;\n    shifted_input_len = 0x20;\n    result_2 = 0xffffffff;\n    shifted_input = input1;\n  }\n  else {\n    shift_count = (int)input2 >> 0x14;\n    sum = input2;\n    shifted_input = input1;\n    if (shift_count != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    shifted_input = 0;\n    shifted_input_len = sum;\n    do {\n      result_2 = shifted_input;\n      sum = shifted_input_len << 1;\n      inner_loop_counter = shifted_input_len << 0xc;\n      shifted_input = result_2 + 1;\n      shifted_input_len = sum;\n    } while (-1 < inner_loop_counter);\n    shifted_input_len = 0x20 - shifted_input;\n    input2 = shift_count;\n    shifted_input = input1 << (shifted_input & 0xff);\n  }\n  sum = input1 >> (shifted_input_len & 0xff) | sum;\n  shift_count = input2 - result_2;\nLAB_0800a1da:\n  sum = sum & 0xfffff | 0x100000;\n  if (-1 < (int)(shift_count << 0x1f)) {\n    sum = sum * 2 - ((int)shifted_input >> 0x1f);\n    shifted_input = shifted_input << 1;\n  }\n  shifted_input_len = 0;\n  sum = sum * 2 - ((int)shifted_input >> 0x1f);\n  shifted_input = shifted_input << 1;\n  shift_count = 0;\n  inner_loop_counter = 0x16;\n  result_2 = 0x200000;\n  do {\n    loop_counter = shift_count + result_2;\n    if (loop_counter <= (int)sum) {\n      sum = sum - loop_counter;\n      shift_count = loop_counter + result_2;\n      shifted_input_len = shifted_input_len + result_2;\n    }\n    inner_loop_counter = inner_loop_counter + -1;\n    sum = sum * 2 - ((int)shifted_input >> 0x1f);\n    result_2 = result_2 >> 1;\n    shifted_input = shifted_input << 1;\n  } while (inner_loop_counter != 0);\n  loop_counter = 0x20;\n  mask = 0x80000000;\n  inner_loop_counter = 0;\n  result_2 = 0;\n  do {\n    temp = mask + inner_loop_counter;\n    carry = shift_count;\n    if ((int)shift_count < (int)sum) {\n      if ((int)temp < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp + mask)) {\n          carry = shift_count + 1;\n        }\n      }\n      diff = sum - shift_count;\n      shift_count = carry;\n      if (shifted_input < temp) {\n        diff = diff - 1;\n      }\nLAB_0800a262:\n      inner_loop_counter = temp + mask;\n      shifted_input = shifted_input - temp;\n      result_2 = result_2 + mask;\n      sum = diff;\n    }\n    else if ((sum == shift_count) && (temp <= shifted_input)) {\n      if ((int)temp < 0) goto LAB_0800a26a;\n      diff = 0;\n      shift_count = sum;\n      goto LAB_0800a262;\n    }\n    loop_counter = loop_counter + -1;\n    mask = mask >> 1;\n    sum = sum * 2 - ((int)shifted_input >> 0x1f);\n    shifted_input = shifted_input << 1;\n    if (loop_counter == 0) {\n      if ((sum | shifted_input) == 0) {\n        result_2 = result_2 >> 1;\n      }\n      else if (result_2 == 0xffffffff) {\n        shifted_input_len = shifted_input_len + 1;\n        result_2 = 0;\n      }\n      else {\n        result_2 = result_2 + 1 >> 1;\n      }\n      if ((shifted_input_len & 1) != 0) {\n        result_2 = result_2 | 0x80000000;\n      }\n      return result_2;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800a1bc": "calculate_0800a1bc",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shift_count",
                "iVar2": "loop_counter",
                "uVar3": "temp",
                "uVar4": "result_1",
                "uVar5": "result_2",
                "uVar6": "mask",
                "uVar7": "sum",
                "uVar8": "diff",
                "uVar9": "shifted_input",
                "iVar10": "inner_loop_counter",
                "uVar11": "carry",
                "uVar12": "shifted_input_len",
                "uVar13": "hash_result",
                "calculate_hash_08008640": "calculate_hash",
                "calculate_sum_080082d4": "calculate_sum",
                "calculate_double_08008894": "calculate_double",
                "reverse_bitwise_operations_080082d0": "reverse_bitwise_operations"
            },
            "calling": [
                "FUN_08009b24",
                "FUN_080098d0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a348": {
            "entrypoint": "0x0800a348",
            "current_name": "calculate_hash_sum_0800a348",
            "code": "\nundefined4 calculate_hash_sum_0800a348(undefined4 input_data,uint input_data_length,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  undefined4 hash_result_high;\n  undefined4 hash_result_low;\n  uint modified_data_length;\n  undefined8 temp_result;\n  undefined8 final_result;\n  undefined8 hash_param;\n  undefined4 local_30;\n  undefined4 uStack_2c;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  \n  modified_data_length = input_data_length & 0x7fffffff;\n  if (modified_data_length < 0x3e400000) {\n    result = FUNC_08008ba0();\n    if (result == 0) {\n      return 0;\n    }\n    temp_result = calculate_hash_08008640(input_data,input_data_length,input_data,input_data_length);\n    hash_result_low = (undefined4)((ulonglong)temp_result >> 0x20);\n    hash_result_high = (undefined4)temp_result;\n    final_result = calculate_hash_08008640(hash_result_high,hash_result_low,0xbe8838d4,0xbda8fae9);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n    final_result = reverse_bitwise_operations_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n    final_result = reverse_bitwise_operations_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x16c15177,0x3f56c16c);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555554c,0x3fa55555);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n  }\n  else {\n    temp_result = calculate_hash_08008640(input_data,input_data_length,input_data,input_data_length);\n    hash_result_low = (undefined4)((ulonglong)temp_result >> 0x20);\n    hash_result_high = (undefined4)temp_result;\n    final_result = calculate_hash_08008640(hash_result_high,hash_result_low,0xbe8838d4,0xbda8fae9);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n    final_result = reverse_bitwise_operations_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n    final_result = reverse_bitwise_operations_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x16c15177,0x3f56c16c);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n    final_result = calculate_sum_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555554c,0x3fa55555);\n    final_result = calculate_hash_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),hash_result_high,hash_result_low);\n    if (0x3fd33332 < modified_data_length) {\n      if (modified_data_length < 0x3fe90001) {\n        result = modified_data_length - 0x200000;\n        temp_result = reverse_bitwise_operations_080082d0(0,0x3ff00000,0,result);\n      }\n      else {\n        result = 0x3fd20000;\n        temp_result = 0x3fe7000000000000;\n      }\n      uStack_24 = (undefined4)((ulonglong)temp_result >> 0x20);\n      local_28 = (undefined4)temp_result;\n      temp_result = calculate_hash_08008640(hash_result_high,hash_result_low,0,0x3fe00000);\n      temp_result = reverse_bitwise_operations_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,result);\n      final_result = calculate_hash_08008640(hash_result_high,hash_result_low,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n      hash_param = calculate_hash_08008640(input_data,input_data_length,param_3,param_4);\n      final_result = reverse_bitwise_operations_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)hash_param,\n                           (int)((ulonglong)hash_param >> 0x20));\n      temp_result = reverse_bitwise_operations_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)final_result,\n                           (int)((ulonglong)final_result >> 0x20));\n      hash_result_high = reverse_bitwise_operations_080082d0(local_28,uStack_24,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n      return hash_result_high;\n    }\n  }\n  uStack_2c = (undefined4)((ulonglong)final_result >> 0x20);\n  local_30 = (undefined4)final_result;\n  hash_result_high = (undefined4)((ulonglong)temp_result >> 0x20);\n  final_result = calculate_hash_08008640((int)temp_result,hash_result_high,0,0x3fe00000);\n  temp_result = calculate_hash_08008640((int)temp_result,hash_result_high,local_30,uStack_2c);\n  hash_param = calculate_hash_08008640(input_data,input_data_length,param_3,param_4);\n  temp_result = reverse_bitwise_operations_080082d0((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)hash_param,\n                       (int)((ulonglong)hash_param >> 0x20));\n  temp_result = reverse_bitwise_operations_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                       (int)((ulonglong)temp_result >> 0x20));\n  hash_result_high = reverse_bitwise_operations_080082d0(0,0x3ff00000,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n  return hash_result_high;\n}\n\n",
            "renaming": {
                "FUN_0800a348": "calculate_hash_sum_0800a348",
                "param_1": "input_data",
                "param_2": "input_data_length",
                "iVar1": "result",
                "uVar2": "hash_result_high",
                "uVar3": "hash_result_low",
                "uVar4": "modified_data_length",
                "uVar5": "temp_result",
                "uVar6": "final_result",
                "uVar7": "hash_param"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "entrypoint": "0x0800a5a0",
            "current_name": "FUNC_0800a5a0",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint FUNC_0800a5a0(int param_1,undefined8 *param_2,int param_3,int param_4,int param_5,int param_6)\n\n{\n  undefined4 *puVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint *puVar5;\n  undefined4 uVar6;\n  uint **ppuVar7;\n  undefined4 uVar8;\n  int iVar9;\n  undefined4 *puVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  uint *puVar13;\n  int iVar14;\n  int iVar15;\n  undefined8 *puVar16;\n  int iVar17;\n  undefined4 *puVar18;\n  undefined8 *puVar19;\n  undefined4 uVar20;\n  int iVar21;\n  undefined8 *puVar22;\n  undefined4 *puVar23;\n  bool bVar24;\n  undefined8 uVar25;\n  undefined8 uVar26;\n  undefined8 uVar27;\n  undefined8 *local_284;\n  int local_280;\n  int local_270;\n  int local_26c;\n  uint *local_260 [2];\n  uint local_258 [20];\n  undefined8 uStack_208;\n  undefined8 local_168;\n  int local_160 [38];\n  undefined8 uStack_c8;\n  \n  iVar15 = *(int *)(&DAT_0800c060 + param_5 * 4);\n  iVar9 = param_4 + -1;\n  local_260[1] = (uint *)param_2;\n  if (param_3 + 0x14 < 0 == SCARRY4(param_3,0x14)) {\n    local_26c = (param_3 + -3) / 0x18;\n    local_270 = (local_26c + 1) * -0x18;\n  }\n  else {\n    local_270 = -0x18;\n    local_26c = 0;\n  }\n  local_270 = param_3 + local_270;\n  iVar17 = local_26c - iVar9;\n  if (-1 < iVar15 + iVar9) {\n    iVar21 = iVar15 + iVar9 + 1 + iVar17;\n    puVar16 = &uStack_208;\n    do {\n      while (iVar17 < 0) {\n        iVar17 = iVar17 + 1;\n        *(undefined4 *)puVar16 = 0;\n        *(undefined4 *)((int)puVar16 + 4) = 0;\n        puVar16 = puVar16 + 1;\n        if (iVar17 == iVar21) goto LAB_0800a626;\n      }\n      uVar26 = bitwise_shift_0800856c(*(undefined4 *)(param_6 + iVar17 * 4));\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar21);\n  }\nLAB_0800a626:\n  puVar10 = (undefined4 *)(param_1 + -8);\n  if (-1 < iVar15) {\n    puVar22 = &uStack_208 + param_4;\n    iVar17 = iVar9;\n    puVar16 = &uStack_c8;\n    do {\n      if (iVar9 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        puVar23 = puVar10;\n        puVar19 = puVar22;\n        do {\n          puVar18 = puVar23 + 2;\n          uVar25 = calculate_hash_08008640(*puVar18,puVar23[3],*(undefined4 *)(puVar19 + -1),\n                                *(undefined4 *)((int)puVar19 + -4));\n          uVar26 = calculate_sum_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          puVar23 = puVar18;\n          puVar19 = puVar19 + -1;\n        } while (puVar18 != puVar10 + param_4 * 2);\n      }\n      iVar17 = iVar17 + 1;\n      *puVar16 = uVar26;\n      puVar22 = puVar22 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar17 != iVar15 + param_4);\n  }\n  local_260[0] = local_258 + iVar15 + -1;\n  iVar17 = iVar15;\n  do {\n    uVar26 = CONCAT44(*(undefined4 *)((int)&uStack_c8 + iVar17 * 8 + 4),\n                      *(undefined4 *)(&uStack_c8 + iVar17));\n    if (0 < iVar17) {\n      puVar16 = &uStack_c8 + iVar17;\n      puVar5 = local_258;\n      do {\n        uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n        calculate_hash_08008640((int)uVar26,uVar6,0,0x3e700000);\n        FUNC_08008ba0();\n        uVar25 = bitwise_shift_0800856c();\n        uVar8 = (undefined4)((ulonglong)uVar25 >> 0x20);\n        uVar27 = calculate_hash_08008640((int)uVar25,uVar8,0,0x41700000);\n        reverse_bitwise_operations_080082d0((int)uVar26,uVar6,(int)uVar27,(int)((ulonglong)uVar27 >> 0x20));\n        uVar2 = FUNC_08008ba0();\n        puVar22 = puVar16 + -1;\n        uVar6 = *(undefined4 *)puVar22;\n        uVar11 = *(undefined4 *)((int)puVar16 + -4);\n        *puVar5 = uVar2;\n        uVar26 = calculate_sum_080082d4((int)uVar25,uVar8,uVar6,uVar11);\n        puVar16 = puVar22;\n        puVar5 = puVar5 + 1;\n      } while (puVar22 != &uStack_c8);\n    }\n    uVar26 = calculate_output_0800b2e8((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),local_270);\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    calculate_hash_08008640((int)uVar26,uVar8,0,0x3fc00000);\n    uVar25 = calculate_result_080094c0();\n    uVar25 = calculate_hash_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),0,0x40200000);\n    uVar26 = reverse_bitwise_operations_080082d0((int)uVar26,uVar8,(int)uVar25,(int)((ulonglong)uVar25 >> 0x20));\n    uVar2 = FUNC_08008ba0();\n    uVar25 = bitwise_shift_0800856c();\n    uVar26 = reverse_bitwise_operations_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                          (int)((ulonglong)uVar25 >> 0x20));\n    uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    uVar8 = (undefined4)uVar26;\n    if (local_270 < 1) {\n      if (local_270 == 0) {\n        iVar21 = (int)local_258[iVar17 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      iVar21 = verify_and_return_error_08008b4c(uVar8,uVar6,0,0x3fe00000);\n      if (iVar21 != 0) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          uVar26 = reverse_bitwise_operations_080082d0(0,0x3ff00000,uVar8,uVar6);\n          iVar21 = 2;\n          goto LAB_0800a7a4;\n        }\n        iVar21 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      iVar4 = (int)local_258[iVar17 + -1] >> (0x18U - local_270 & 0xff);\n      uVar12 = local_258[iVar17 + -1] - (iVar4 << (0x18U - local_270 & 0xff));\n      iVar21 = (int)uVar12 >> (0x17U - local_270 & 0xff);\n      local_258[iVar17 + -1] = uVar12;\n      uVar2 = uVar2 + iVar4;\njoined_r0x0800a8b8:\n      if (0 < iVar21) {\n        uVar2 = uVar2 + 1;\n        if (iVar17 < 1) {\n          bVar24 = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (local_258[0] == 0) {\n            bVar24 = false;\n            if (iVar17 != 1) {\n              puVar5 = local_258;\n              iVar4 = 1;\n              do {\n                puVar5 = puVar5 + 1;\n                if (*puVar5 != 0) {\n                  iVar14 = iVar4 + 1;\n                  uVar12 = *puVar5;\n                  goto LAB_0800a8e2;\n                }\n                iVar4 = iVar4 + 1;\n              } while (iVar4 != iVar17);\n              bVar24 = false;\n            }\n          }\n          else {\n            iVar14 = 1;\n            iVar4 = 0;\n            uVar12 = local_258[0];\nLAB_0800a8e2:\n            local_258[iVar4] = 0x1000000 - uVar12;\n            if (iVar14 < iVar17) {\n              uVar12 = local_258[iVar14];\n              puVar5 = local_258 + iVar14;\n              while( true ) {\n                puVar13 = puVar5 + 1;\n                *puVar5 = 0xffffff - uVar12;\n                if (puVar13 == local_258 + iVar17) break;\n                uVar12 = *puVar13;\n                puVar5 = puVar13;\n              }\n            }\n            bVar24 = true;\n          }\n        }\n        if (0 < local_270) {\n          if (local_270 == 1) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x7fffff;\n          }\n          else if (local_270 == 2) {\n            local_258[iVar17 + -1] = local_258[iVar17 + -1] & 0x3fffff;\n          }\n        }\n        if (iVar21 == 2) {\n          uVar26 = reverse_bitwise_operations_080082d0(0,0x3ff00000,uVar8,uVar6);\n          if (bVar24) {\n            uVar25 = calculate_output_0800b2e8(0,0x3ff00000,local_270);\n            uVar26 = reverse_bitwise_operations_080082d0((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                  (int)((ulonglong)uVar25 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n    iVar4 = check_parameters_08008b10((int)uVar26,uVar8,0,0);\n    if (iVar4 == 0) {\n      uVar26 = calculate_output_0800b2e8((int)uVar26,uVar8,-local_270);\n      uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      uVar8 = (undefined4)uVar26;\n      iVar9 = verify_and_return_error_08008b4c(uVar8,uVar6,0,0x41700000);\n      if (iVar9 == 0) {\n        uVar12 = FUNC_08008ba0(uVar8,uVar6);\n        local_258[iVar17] = uVar12;\n        iVar4 = iVar17;\n      }\n      else {\n        calculate_hash_08008640(uVar8,uVar6,0,0x3e700000);\n        uVar12 = FUNC_08008ba0();\n        uVar26 = bitwise_shift_0800856c();\n        uVar26 = calculate_hash_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),0,0x41700000);\n        reverse_bitwise_operations_080082d0(uVar8,uVar6,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n        uVar3 = FUNC_08008ba0();\n        local_270 = local_270 + 0x18;\n        local_258[iVar17] = uVar3;\n        local_258[iVar17 + 1] = uVar12;\n        iVar4 = iVar17 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    iVar4 = iVar17 + -1;\n    if (iVar15 <= iVar4) {\n      uVar12 = 0;\n      puVar5 = local_258 + iVar17 + 0x3fffffff;\n      do {\n        puVar13 = puVar5 + -1;\n        uVar12 = uVar12 | *puVar5;\n        puVar5 = puVar13;\n      } while (puVar13 != local_260[0]);\n      if (uVar12 != 0) break;\n    }\n    if (local_258[iVar15 + -1] == 0) {\n      local_280 = 1;\n      ppuVar7 = local_260 + iVar15;\n      do {\n        puVar5 = *ppuVar7;\n        local_280 = local_280 + 1;\n        ppuVar7 = ppuVar7 + -1;\n      } while (puVar5 == (uint *)0x0);\n      local_280 = iVar17 + local_280;\n    }\n    else {\n      local_280 = iVar17 + 1;\n    }\n    iVar21 = iVar17 + 1;\n    puVar23 = (undefined4 *)(param_6 + (iVar21 + local_26c + 0x3fffffff) * 4);\n    puVar16 = &uStack_208 + iVar17 + param_4;\n    local_284 = &uStack_c8 + iVar21;\n    do {\n      puVar23 = puVar23 + 1;\n      uVar26 = bitwise_shift_0800856c(*puVar23);\n      *puVar16 = uVar26;\n      puVar22 = puVar16 + 1;\n      if (iVar9 < 0) {\n        uVar25 = 0;\n      }\n      else {\n        uVar25 = 0;\n        puVar18 = puVar10;\n        while( true ) {\n          puVar16 = puVar16 + -1;\n          puVar1 = puVar18 + 2;\n          uVar26 = calculate_hash_08008640((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*puVar1,puVar18[3]);\n          uVar25 = calculate_sum_080082d4((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,\n                                (int)((ulonglong)uVar26 >> 0x20));\n          if (puVar1 == puVar10 + param_4 * 2) break;\n          uVar26 = *puVar16;\n          puVar18 = puVar1;\n        }\n      }\n      *local_284 = uVar25;\n      iVar21 = iVar21 + 1;\n      iVar17 = local_280;\n      puVar16 = puVar22;\n      local_284 = local_284 + 1;\n    } while (iVar21 <= local_280);\n  } while( true );\n  local_270 = local_270 + -0x18;\n  if (local_258[iVar4] == 0) {\n    puVar5 = local_258 + iVar17 + 0x3ffffffe;\n    do {\n      uVar12 = *puVar5;\n      iVar4 = iVar4 + -1;\n      local_270 = local_270 + -0x18;\n      puVar5 = puVar5 + -1;\n    } while (uVar12 == 0);\n  }\nLAB_0800a9f6:\n  uVar26 = calculate_output_0800b2e8(0,0x3ff00000,local_270);\n  if (iVar4 < 0) {\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        uVar26 = 0;\nLAB_0800abe4:\n        if (iVar21 == 0) {\n          *local_260[1] = (undefined4)local_168;\n          *(int *)((int)local_260[1] + 4) = local_168._4_4_;\n          *(undefined8 *)((int)local_260[1] + 0x10) = uVar26;\n          *(int *)((int)local_260[1] + 8) = local_160[0];\n          *(int *)((int)local_260[1] + 0xc) = local_160[1];\n          return uVar2 & 7;\n        }\n        *(int *)((int)local_260[1] + 0x10) = (int)uVar26;\n        *(int *)((int)local_260[1] + 8) = local_160[0];\n        *(int *)((int)local_260[1] + 0x14) = (int)((ulonglong)uVar26 >> 0x20) + -0x80000000;\n        *(int *)((int)local_260[1] + 4) = local_168._4_4_ + -0x80000000;\n        *(int *)((int)local_260[1] + 0xc) = local_160[1] + -0x80000000;\n        *local_260[1] = (undefined4)local_168;\n        return uVar2 & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      uVar26 = 0;\nLAB_0800aafc:\n      iVar9 = (int)((ulonglong)uVar26 >> 0x20);\n      if (iVar21 != 0) {\n        iVar9 = iVar9 + -0x80000000;\n      }\n      *local_260[1] = (int)uVar26;\n      *(int *)((int)local_260[1] + 4) = iVar9;\nLAB_0800ab0e:\n      return uVar2 & 7;\n    }\n    uVar26 = 0;\n  }\n  else {\n    puVar22 = &uStack_c8 + iVar4;\n    puVar5 = local_258 + iVar4 + 1;\n    puVar16 = &uStack_c8 + iVar4 + 1;\n    do {\n      uVar8 = (undefined4)((ulonglong)uVar26 >> 0x20);\n      puVar5 = puVar5 + -1;\n      uVar25 = bitwise_shift_0800856c(*puVar5);\n      uVar25 = calculate_hash_08008640((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),(int)uVar26,uVar8);\n      puVar16 = puVar16 + -1;\n      *puVar16 = uVar25;\n      uVar26 = calculate_hash_08008640((int)uVar26,uVar8,0,0x3e700000);\n    } while (puVar5 != local_258);\n    iVar9 = 0;\n    do {\n      if (iVar15 < 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar8 = 0x40000000;\n        uVar6 = 0x3ff921fb;\n        uVar26 = 0;\n        iVar17 = 0;\n        puVar16 = puVar22;\n        puVar10 = &DAT_0800c028;\n        while( true ) {\n          uVar25 = calculate_hash_08008640(*(undefined4 *)puVar16,*(undefined4 *)((int)puVar16 + 4),uVar8,uVar6\n                               );\n          uVar26 = calculate_sum_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),(int)uVar25,\n                                (int)((ulonglong)uVar25 >> 0x20));\n          iVar17 = iVar17 + 1;\n          if ((iVar15 < iVar17) || (iVar9 < iVar17)) break;\n          uVar8 = *puVar10;\n          uVar6 = puVar10[1];\n          puVar16 = puVar16 + 1;\n          puVar10 = puVar10 + 2;\n        }\n      }\n      bVar24 = iVar9 != iVar4;\n      *(int *)(&local_168 + iVar9) = (int)uVar26;\n      *(int *)((int)&local_168 + (iVar9 * 2 + 1) * 4) = (int)((ulonglong)uVar26 >> 0x20);\n      puVar22 = puVar22 + -1;\n      iVar9 = iVar9 + 1;\n    } while (bVar24);\n    if (2 < param_5) {\n      if (param_5 == 3) {\n        if (iVar4 != 0) {\n          puVar16 = &local_168 + iVar4;\n          uVar26 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                            *(undefined4 *)puVar16);\n          do {\n            uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n            uVar8 = (undefined4)uVar26;\n            uVar11 = *(undefined4 *)(puVar16 + -1);\n            uVar20 = *(undefined4 *)((int)puVar16 + -4);\n            uVar26 = calculate_sum_080082d4(uVar8,uVar6,uVar11,uVar20);\n            uVar25 = reverse_bitwise_operations_080082d0(uVar11,uVar20,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n            uVar25 = calculate_sum_080082d4((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),uVar8,uVar6);\n            *puVar16 = uVar25;\n            puVar16 = puVar16 + -1;\n            *puVar16 = uVar26;\n          } while (&local_168 != puVar16);\n          if (1 < iVar4) {\n            puVar16 = &local_168 + iVar4;\n            uVar26 = CONCAT44(*(undefined4 *)((int)&local_168 + (iVar4 * 2 + 1) * 4),\n                              *(undefined4 *)puVar16);\n            do {\n              uVar6 = (undefined4)((ulonglong)uVar26 >> 0x20);\n              uVar8 = (undefined4)uVar26;\n              uVar11 = *(undefined4 *)(puVar16 + -1);\n              uVar20 = *(undefined4 *)((int)puVar16 + -4);\n              uVar26 = calculate_sum_080082d4(uVar8,uVar6,uVar11,uVar20);\n              uVar25 = reverse_bitwise_operations_080082d0(uVar11,uVar20,(int)uVar26,(int)((ulonglong)uVar26 >> 0x20));\n              uVar25 = calculate_sum_080082d4((int)uVar25,(int)((ulonglong)uVar25 >> 0x20),uVar8,uVar6);\n              *puVar16 = uVar25;\n              puVar16 = puVar16 + -1;\n              *puVar16 = uVar26;\n            } while (&local_168 + 1 != puVar16);\n            uVar26 = 0;\n            puVar16 = &local_168 + iVar4 + 1;\n            do {\n              puVar22 = puVar16 + -1;\n              uVar26 = calculate_sum_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),\n                                    *(undefined4 *)puVar22,*(undefined4 *)((int)puVar16 + -4));\n              puVar16 = puVar22;\n            } while (&local_168 + 2 != puVar22);\n            goto LAB_0800abe4;\n          }\n        }\n        uVar26 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (param_5 < 1) {\n      if (param_5 != 0) goto LAB_0800ab0e;\n      uVar26 = 0;\n      puVar16 = &local_168 + iVar4 + 1;\n      do {\n        puVar22 = puVar16 + -1;\n        uVar26 = calculate_sum_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*(undefined4 *)puVar22,\n                              *(undefined4 *)((int)puVar16 + -4));\n        puVar16 = puVar22;\n      } while (&local_168 != puVar22);\n      goto LAB_0800aafc;\n    }\n    uVar26 = 0;\n    puVar16 = &local_168 + iVar4 + 1;\n    do {\n      puVar22 = puVar16 + -1;\n      uVar26 = calculate_sum_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),*(undefined4 *)puVar22,\n                            *(undefined4 *)((int)puVar16 + -4));\n      puVar16 = puVar22;\n    } while (&local_168 != puVar22);\n  }\n  iVar9 = (int)((ulonglong)uVar26 >> 0x20);\n  uVar8 = (undefined4)uVar26;\n  if (iVar21 == 0) {\n    *(undefined8 *)local_260[1] = uVar26;\n    uVar26 = reverse_bitwise_operations_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (iVar4 < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    iVar9 = 1;\n    puVar16 = &local_168;\n    do {\n      uVar26 = calculate_sum_080082d4((int)uVar26,(int)((ulonglong)uVar26 >> 0x20),\n                            *(undefined4 *)(puVar16 + 1),*(undefined4 *)((int)puVar16 + 0xc));\n      iVar9 = iVar9 + 1;\n      puVar16 = puVar16 + 1;\n    } while (iVar9 <= iVar4);\n    if (iVar21 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_260[1] = uVar8;\n    *(int *)((int)local_260[1] + 4) = iVar9 + -0x80000000;\n    uVar26 = reverse_bitwise_operations_080082d0((undefined4)local_168,local_168._4_4_,uVar8,iVar9);\n    if (0 < iVar4) goto LAB_0800ad04;\n  }\n  uVar26 = CONCAT44((int)((ulonglong)uVar26 >> 0x20) + -0x80000000,(int)uVar26);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_260[1] + 8) = uVar26;\n  return uVar2 & 7;\n}\n\n",
            "renaming": {
                "FUN_0800a5a0": "FUNC_0800a5a0"
            },
            "calling": [
                "FUN_08009d78"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_080094c0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_0800b2e8",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "entrypoint": "0x0800adf0",
            "current_name": "calculate_updated_value_0800adf0",
            "code": "\nundefined4\ncalculate_updated_value_0800adf0(undefined4 input_value,uint input_size,undefined4 temp_value1,undefined4 temp_value2,int is_calculated)\n\n{\n  int result;\n  undefined4 first_hash_low;\n  undefined4 first_hash_high;\n  undefined4 second_hash_low;\n  undefined4 second_hash_high;\n  undefined4 third_hash_low;\n  undefined8 third_hash_high;\n  undefined8 fourth_hash_high;\n  \n  if (((input_size & 0x7fffffff) < 0x3e400000) && (result = FUNC_08008ba0(), result == 0)) {\n    return input_value;\n  }\n  third_hash_high = calculate_hash(input_value,input_size,input_value);\n  second_hash_low = (undefined4)((ulonglong)third_hash_high >> 0x20);\n  first_hash_high = (undefined4)third_hash_high;\n  third_hash_high = calculate_hash(input_value,input_size,first_hash_high,second_hash_low);\n  second_hash_high = (undefined4)((ulonglong)third_hash_high >> 0x20);\n  first_hash_low = (undefined4)third_hash_high;\n  third_hash_high = calculate_hash(first_hash_high,second_hash_low,0x5acfd57c,0x3de5d93a);\n  third_hash_high = reverse_operations((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  third_hash_high = calculate_hash((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),first_hash_high,second_hash_low);\n  third_hash_high = calculate_sum((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),0x57b1fe7d,0x3ec71de3);\n  third_hash_high = calculate_hash((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),first_hash_high,second_hash_low);\n  third_hash_high = reverse_operations((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),0x19c161d5,0x3f2a01a0);\n  third_hash_high = calculate_hash((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),first_hash_high,second_hash_low);\n  third_hash_high = calculate_sum((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),0x1110f8a6,0x3f811111);\n  third_hash_low = (undefined4)((ulonglong)third_hash_high >> 0x20);\n  if (is_calculated != 0) {\n    fourth_hash_high = calculate_hash(temp_value1,temp_value2,0,0x3fe00000);\n    third_hash_high = calculate_hash(first_hash_low,second_hash_high,(int)third_hash_high,third_hash_low);\n    third_hash_high = reverse_operations((int)fourth_hash_high,(int)((ulonglong)fourth_hash_high >> 0x20),(int)third_hash_high,\n                         (int)((ulonglong)third_hash_high >> 0x20));\n    third_hash_high = calculate_hash((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),first_hash_high,second_hash_low);\n    third_hash_high = reverse_operations((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),temp_value1,temp_value2);\n    fourth_hash_high = calculate_hash(first_hash_low,second_hash_high,0x55555549,0x3fc55555);\n    third_hash_high = calculate_sum((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),(int)fourth_hash_high,\n                         (int)((ulonglong)fourth_hash_high >> 0x20));\n    first_hash_high = reverse_operations(input_value,input_size,(int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20));\n    return first_hash_high;\n  }\n  third_hash_high = calculate_hash(first_hash_high,second_hash_low,(int)third_hash_high,third_hash_low);\n  third_hash_high = reverse_operations((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),0x55555549,0x3fc55555);\n  third_hash_high = calculate_hash((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),first_hash_low,second_hash_high);\n  first_hash_high = calculate_sum((int)third_hash_high,(int)((ulonglong)third_hash_high >> 0x20),input_value,input_size);\n  return first_hash_high;\n}\n\n",
            "renaming": {
                "FUN_0800adf0": "calculate_updated_value_0800adf0",
                "param_1": "input_value",
                "param_2": "input_size",
                "param_3": "temp_value1",
                "param_4": "temp_value2",
                "param_5": "is_calculated",
                "iVar1": "result",
                "uVar2": "first_hash_low",
                "uVar3": "first_hash_high",
                "uVar4": "second_hash_low",
                "uVar5": "second_hash_high",
                "uVar6": "third_hash_low",
                "uVar7": "third_hash_high",
                "uVar8": "fourth_hash_high",
                "calculate_hash_08008640": "calculate_hash",
                "reverse_bitwise_operations_080082d0": "reverse_operations",
                "calculate_sum_080082d4": "calculate_sum"
            },
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640",
                "FUN_08008ba0",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800af78": {
            "entrypoint": "0x0800af78",
            "current_name": "calculate_improved_value_0800af78",
            "code": "\nint calculateImprovedValue_0800af78(int inputValue,uint bitmask)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int returnValue;\n  undefined4 hashValue;\n  uint maskedBitmask;\n  undefined8 calculationResult;\n  undefined8 sumResult;\n  undefined4 localValue;\n  \n  calculationResult = CONCAT44(bitmask,inputValue);\n  maskedBitmask = bitmask & 0x7fffffff;\n  if (maskedBitmask < 0x44100000) {\n    if (maskedBitmask < 0x3fdc0000) {\n      if (maskedBitmask < 0x3e200000) {\n        sumResult = calculate_sum_080082d4(inputValue,bitmask,0x8800759c,0x7e37e43c);\n        returnValue = check_null_terminator_08008b60((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0,0x3ff00000);\n        if (returnValue != 0) {\n          return inputValue;\n        }\n      }\n      returnValue = -1;\n    }\n    else {\n      calculationResult = FUNC_0800b2cc();\n      result4 = (undefined4)((ulonglong)calculationResult >> 0x20);\n      result1 = (undefined4)calculationResult;\n      if (maskedBitmask < 0x3ff30000) {\n        if (maskedBitmask < 0x3fe60000) {\n          calculationResult = calculate_sum_080082d4(result1,result4,result1,result4);\n          calculationResult = reverse_bitwise_operations_080082d0((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0,0x3ff00000);\n          sumResult = calculate_sum_080082d4(result1,result4,0,0x40000000);\n          calculationResult = calculate_double_08008894((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),(int)sumResult,\n                               (int)((ulonglong)sumResult >> 0x20));\n          returnValue = 0;\n        }\n        else {\n          calculationResult = reverse_bitwise_operations_080082d0(result1,result4,0,0x3ff00000);\n          sumResult = calculate_sum_080082d4(result1,result4,0,0x3ff00000);\n          calculationResult = calculate_double_08008894((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),(int)sumResult,\n                               (int)((ulonglong)sumResult >> 0x20));\n          returnValue = 1;\n        }\n      }\n      else if (maskedBitmask < 0x40038000) {\n        calculationResult = reverse_bitwise_operations_080082d0(result1,result4,0,0x3ff80000);\n        sumResult = calculate_hash_08008640(result1,result4,0,0x3ff80000);\n        sumResult = calculate_sum_080082d4((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0,0x3ff00000);\n        calculationResult = calculate_double_08008894((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),(int)sumResult,\n                             (int)((ulonglong)sumResult >> 0x20));\n        returnValue = 2;\n      }\n      else {\n        calculationResult = calculate_double_08008894(0,0xbff00000,result1,result4);\n        returnValue = 3;\n      }\n    }\n    localValue = (undefined4)((ulonglong)calculationResult >> 0x20);\n    hashValue = (undefined4)calculationResult;\n    calculationResult = calculate_hash_08008640(hashValue,localValue,hashValue);\n    result2 = (undefined4)((ulonglong)calculationResult >> 0x20);\n    result1 = (undefined4)calculationResult;\n    calculationResult = calculate_hash_08008640(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)calculationResult >> 0x20);\n    result4 = (undefined4)calculationResult;\n    calculationResult = calculate_hash_08008640(result4,result3,0xe322da11,0x3f90ad3a);\n    calculationResult = calculate_sum_080082d4((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x24760deb,0x3fa97b4b);\n    calculationResult = calculate_hash_08008640((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),result4,result3);\n    calculationResult = calculate_sum_080082d4((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0xa0d03d51,0x3fb10d66);\n    calculationResult = calculate_hash_08008640((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),result4,result3);\n    calculationResult = calculate_sum_080082d4((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0xc54c206e,0x3fb745cd);\n    calculationResult = calculate_hash_08008640((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),result4,result3);\n    calculationResult = calculate_sum_080082d4((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x920083ff,0x3fc24924);\n    calculationResult = calculate_hash_08008640((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),result4,result3);\n    calculationResult = calculate_sum_080082d4((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),0x5555550d,0x3fd55555);\n    calculationResult = calculate_hash_08008640((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)calculationResult >> 0x20);\n    sumResult = calculate_hash_08008640(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    sumResult = reverse_bitwise_operations_080082d0((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0x52defd9a,0x3fadde2d);\n    sumResult = calculate_hash_08008640((int)sumResult,(int)((ulonglong)sumResult >> 0x20),result4,result3);\n    sumResult = reverse_bitwise_operations_080082d0((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    sumResult = calculate_hash_08008640((int)sumResult,(int)((ulonglong)sumResult >> 0x20),result4,result3);\n    sumResult = reverse_bitwise_operations_080082d0((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0xfe231671,0x3fbc71c6);\n    sumResult = calculate_hash_08008640((int)sumResult,(int)((ulonglong)sumResult >> 0x20),result4,result3);\n    sumResult = reverse_bitwise_operations_080082d0((int)sumResult,(int)((ulonglong)sumResult >> 0x20),0x9998ebc4,0x3fc99999);\n    sumResult = calculate_hash_08008640((int)sumResult,(int)((ulonglong)sumResult >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)sumResult >> 0x20);\n    if (returnValue == -1) {\n      calculationResult = calculate_sum_080082d4((int)calculationResult,result1,(int)sumResult,result4);\n      calculationResult = calculate_hash_08008640((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),hashValue,localValue);\n      returnValue = reverse_bitwise_operations_080082d0(hashValue,localValue,(int)calculationResult,(int)((ulonglong)calculationResult >> 0x20));\n      return returnValue;\n    }\n    calculationResult = calculate_sum_080082d4((int)calculationResult,result1,(int)sumResult,result4);\n    calculationResult = calculate_hash_08008640((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),hashValue,localValue);\n    calculationResult = reverse_bitwise_operations_080082d0((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + returnValue * 8),\n                         *(undefined4 *)(&UNK_0800c094 + returnValue * 8));\n    calculationResult = reverse_bitwise_operations_080082d0((int)calculationResult,(int)((ulonglong)calculationResult >> 0x20),hashValue,localValue);\n    returnValue = reverse_bitwise_operations_080082d0(*(undefined4 *)(&UNK_0800c070 + returnValue * 8),\n                         *(undefined4 *)(&UNK_0800c074 + returnValue * 8),(int)calculationResult,\n                         (int)((ulonglong)calculationResult >> 0x20));\n    if ((int)bitmask < 0) {\n      return returnValue;\n    }\n  }\n  else {\n    if ((0x7ff00000 < maskedBitmask) || ((maskedBitmask == 0x7ff00000 && (inputValue != 0)))) {\n      returnValue = calculate_sum_080082d4(inputValue,bitmask,inputValue);\n      return returnValue;\n    }\n    returnValue = 0x54442d18;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800af78": "calculate_improved_value_0800af78",
                "param_1": "inputValue",
                "param_2": "bitmask",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "iVar5": "returnValue",
                "uVar6": "hashValue",
                "uVar7": "maskedBitmask",
                "uVar8": "calculationResult",
                "uVar9": "sumResult",
                "local_2c": "localValue"
            },
            "calling": [
                "FUN_08009990"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008b60",
                "FUN_08008640",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "entrypoint": "0x0800b2cc",
            "current_name": "FUNC_0800b2cc",
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "calling": [
                "FUN_08009990",
                "FUN_0800af78",
                "FUN_08009d78"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2d4": {
            "entrypoint": "0x0800b2d4",
            "current_name": "bitwise_shift_division_0800b2d4",
            "code": "\nuint bitwise_shift_division_0800b2d4(undefined4 input_value,uint bitwise_operand)\n\n{\n  return (bitwise_operand | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_0800b2d4": "bitwise_shift_division_0800b2d4",
                "param_1": "input_value",
                "param_2": "bitwise_operand"
            },
            "calling": [
                "FUN_0800981c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "entrypoint": "0x0800b2e0",
            "current_name": "initialize_0800b2e0",
            "code": "\nvoid initialize_0800b2e0(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800b2e0": "initialize_0800b2e0",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "entrypoint": "0x0800b2e8",
            "current_name": "calculate_output_0800b2e8",
            "code": "\nuint calculate_output_0800b2e8(uint input1,uint input2,int modifier,undefined4 config)\n\n{\n  uint shifted_input2;\n  int modified_modifier;\n  uint high_bits;\n  undefined8 combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  shifted_input2 = (input2 << 1) >> 0x15;\n  if (shifted_input2 == 0) {\n    if ((input1 | input2 & 0x7fffffff) == 0) {\n      return input1;\n    }\n    combined_input = calculate_hash(input1,input2,0,0x43500000);\n    if (modifier < -50000) goto LAB_0800b34a;\n    shifted_input2 = ((uint)((int)((ulonglong)combined_input >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_input2 == 0x7ff) {\n    shifted_input2 = calculate_sum(input1,input2,input1,input2,config);\n    return shifted_input2;\n  }\n  high_bits = (uint)((ulonglong)combined_input >> 0x20);\n  modified_modifier = shifted_input2 + modifier;\n  if (modified_modifier < 0x7ff) {\n    if (0 < modified_modifier) {\n      return (uint)combined_input;\n    }\n    if (modified_modifier + 0x35 < 0 == SCARRY4(modified_modifier,0x35)) {\n      shifted_input2 = calculate_hash((uint)combined_input,high_bits & 0x800fffff | (modified_modifier + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_input2;\n    }\n    if (modifier < 0xc351) {\n      combined_input = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_input2 = calculate_hash((int)combined_input,(int)((ulonglong)combined_input >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_input2;\n    }\n  }\n  shifted_input2 = calculate_hash(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_input2;\n}\n\n",
            "renaming": {
                "FUN_0800b2e8": "calculate_output_0800b2e8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "modifier",
                "param_4": "config",
                "uVar1": "shifted_input2",
                "iVar2": "modified_modifier",
                "uVar3": "high_bits",
                "uVar4": "combined_input",
                "calculate_hash_08008640": "calculate_hash",
                "calculate_sum_080082d4": "calculate_sum"
            },
            "calling": [
                "FUN_0800a5a0"
            ],
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "entrypoint": "0x0800b3dc",
            "current_name": "get_global_data_0800b3dc",
            "code": "\nundefined4 getGlobalData_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "renaming": {
                "FUN_0800b3dc": "get_global_data_0800b3dc"
            },
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "entrypoint": "0x0800b3e8",
            "current_name": "initialize_and_execute_functions_0800b3e8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid initializeAndExecuteFunctions_0800b3e8(void)\n\n{\n  int counter;\n  code **functionPointerArray;\n  \n  FUNC_0800b5b0();\n  counter = 0;\n  functionPointerArray = (code **)&DAT_0800c0b4;\n  do {\n    counter = counter + 1;\n    (**functionPointerArray)();\n    functionPointerArray = functionPointerArray + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b3e8": "initialize_and_execute_functions_0800b3e8",
                "iVar1": "counter",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b430": {
            "entrypoint": "0x0800b430",
            "current_name": "copy_and_fill_buffer_0800b430",
            "code": "\nvoid copyAndFillBuffer_0800b430(undefined4 *buffer,undefined value,uint size)\n\n{\n  undefined4 *dstPtr;\n  undefined4 *srcPtr;\n  uint remaining;\n  undefined4 filledValue;\n  bool isZeroSize;\n  \n  if (((uint)buffer & 3) != 0) {\n    remaining = size - 1;\n    dstPtr = buffer;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      buffer = (undefined4 *)((int)dstPtr + 1);\n      *(undefined *)dstPtr = value;\n      size = remaining;\n      if (((uint)buffer & 3) == 0) break;\n      isZeroSize = remaining == 0;\n      remaining = remaining - 1;\n      dstPtr = buffer;\n      if (isZeroSize) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    filledValue = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      dstPtr = buffer + 4;\n      do {\n        dstPtr[-4] = filledValue;\n        dstPtr[-3] = filledValue;\n        dstPtr[-2] = filledValue;\n        dstPtr[-1] = filledValue;\n        dstPtr = dstPtr + 4;\n      } while (dstPtr != (undefined4 *)((int)buffer + (size - 0x10 & 0xfffffff0) + 0x20));\n      remaining = size & 0xc;\n      buffer = buffer + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining == 0) goto joined_r0x0800b4a8;\n    }\n    dstPtr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)buffer);\n    do {\n      srcPtr = buffer + 1;\n      *buffer = filledValue;\n      buffer = srcPtr;\n    } while (dstPtr != srcPtr);\n    size = size & 3;\n    buffer = dstPtr;\n  }\njoined_r0x0800b4a8:\n  if (size != 0) {\n    dstPtr = buffer;\n    do {\n      srcPtr = (undefined4 *)((int)dstPtr + 1);\n      *(undefined *)dstPtr = value;\n      dstPtr = srcPtr;\n    } while ((undefined4 *)(size + (int)buffer) != srcPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b430": "copy_and_fill_buffer_0800b430",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dstPtr",
                "puVar2": "srcPtr",
                "uVar3": "remaining",
                "uVar4": "filledValue",
                "bVar5": "isZeroSize"
            },
            "calling": [
                "FUN_080004ac",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_080005b4",
                "FUN_08001994",
                "FUN_08001ddc",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_08002f24",
                "FUN_08004d7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "entrypoint": "0x0800b4d0",
            "current_name": "FUNC_0800b4d0",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "calling": [
                "FUN_0800b3e8"
            ],
            "called": [
                "FUN_0800b524"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b51c": {
            "entrypoint": "0x0800b51c",
            "current_name": "FUNC_0800b51c",
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b520": {
            "entrypoint": "0x0800b520",
            "current_name": "FUNC_0800b520",
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "calling": [
                "FUN_0800b524"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b524": {
            "entrypoint": "0x0800b524",
            "current_name": "update_data_and_flags_0800b524",
            "code": "\nundefined4 updateDataAndFlags_0800b524(int type,undefined4 data,undefined4 flag1,undefined4 flag2)\n\n{\n  undefined *dataBuffer;\n  undefined4 returnValue;\n  uint mask;\n  uint dataIndex;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  dataBuffer = DAT_20000168;\n  dataIndex = *(uint *)(DAT_20000168 + 4);\n  if ((int)dataIndex < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + dataIndex * 4 + 0x88) = flag1;\n      mask = 1 << (dataIndex & 0xff);\n      *(uint *)(dataBuffer + 0x188) = *(uint *)(dataBuffer + 0x188) | mask;\n      *(undefined4 *)(dataBuffer + dataIndex * 4 + 0x108) = flag2;\n      if (type == 2) {\n        *(uint *)(dataBuffer + 0x18c) = mask | *(uint *)(dataBuffer + 0x18c);\n      }\n    }\n    returnValue = DAT_20000448;\n    *(uint *)(dataBuffer + 4) = dataIndex + 1;\n    *(undefined4 *)(dataBuffer + (dataIndex + 2) * 4) = data;\n    FUNC_0800b520(returnValue);\n    returnValue = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0800b524": "update_data_and_flags_0800b524",
                "param_1": "type",
                "param_2": "data",
                "param_3": "flag1",
                "param_4": "flag2",
                "puVar1": "dataBuffer",
                "uVar2": "returnValue",
                "uVar3": "mask",
                "uVar4": "dataIndex"
            },
            "calling": [
                "FUN_0800b4d0"
            ],
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "entrypoint": "0x0800b5b0",
            "current_name": "FUNC_0800b5b0",
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "calling": [
                "FUN_0800b3e8",
                "FUN_080001ac",
                "FUN_08000188"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800b5bc": {
            "entrypoint": "0x0800b5bc",
            "current_name": "FUNC_0800b5bc",
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 202225,
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "thunk_FUN_08009990",
            "FUN_08009990",
            "FUN_0800a5a0"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": []
}