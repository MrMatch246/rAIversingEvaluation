{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 inputParam)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_in_array_08000230",
            "code": "\nbyte * find_byte_in_array_08000230(uint *array,uint byte_to_find,uint array_length)\n\n{\n  byte byte_value;\n  char is_byte_equal;\n  char is_byte_equal_shifted8;\n  char is_byte_equal_shifted16;\n  char is_byte_equal_shifted24;\n  byte *next_byte_ptr;\n  uint *current_uint_ptr;\n  byte *found_byte_ptr;\n  uint array_alignment;\n  uint aligned_array_length;\n  uint xor_result;\n  uint xor_result_shifted;\n  bool is_byte_equal_shifted8_xor;\n  bool is_byte_equal_shifted16_xor;\n  bool is_byte_equal_shifted24_xor;\n  bool is_byte_equal_shifted32_xor;\n  \n  byte_to_find = byte_to_find & 0xff;\n  if ((int)array_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n      current_uint_ptr = (uint *)((int)array + 1);\n      byte_value = *(byte *)array;\n      array_length = array_length - 1;\n      array = current_uint_ptr;\n    } while (byte_value != byte_to_find);\n  }\n  else {\n    array_alignment = (uint)array & 7;\n    while( true ) {\n      if (array_alignment == 0) {\n        array_alignment = byte_to_find | byte_to_find << 8;\n        array_alignment = array_alignment | array_alignment << 0x10;\n        aligned_array_length = array_length & 0xfffffff8;\n        do {\n          current_uint_ptr = array + 2;\n          aligned_array_length = aligned_array_length - 8;\n          xor_result = *array ^ array_alignment;\n          xor_result_shifted = array[1] ^ array_alignment;\n          is_byte_equal = -((char)xor_result == '\\0');\n          is_byte_equal_shifted8 = -((char)(xor_result >> 8) == '\\0');\n          is_byte_equal_shifted16 = -((char)(xor_result >> 0x10) == '\\0');\n          is_byte_equal_shifted24 = -((char)(xor_result >> 0x18) == '\\0');\n          xor_result = CONCAT13(is_byte_equal_shifted24,CONCAT12(is_byte_equal_shifted16,CONCAT11(is_byte_equal_shifted8,is_byte_equal)));\n          is_byte_equal_shifted8_xor = (char)xor_result_shifted != '\\0';\n          is_byte_equal_shifted16_xor = (char)(xor_result_shifted >> 8) != '\\0';\n          is_byte_equal_shifted24_xor = (char)(xor_result_shifted >> 0x10) != '\\0';\n          is_byte_equal_shifted32_xor = (char)(xor_result_shifted >> 0x18) != '\\0';\n          xor_result_shifted = CONCAT13(is_byte_equal_shifted32_xor * is_byte_equal_shifted24 - !is_byte_equal_shifted32_xor,\n                            CONCAT12(is_byte_equal_shifted24_xor * is_byte_equal_shifted16 - !is_byte_equal_shifted24_xor,\n                                     CONCAT11(is_byte_equal_shifted16_xor * is_byte_equal_shifted8 - !is_byte_equal_shifted16_xor,is_byte_equal_shifted8_xor * is_byte_equal - !is_byte_equal_shifted8_xor)));\n          if (xor_result_shifted != 0) {\n            if (xor_result == 0) {\n              found_byte_ptr = (byte *)((int)array + 5);\n              xor_result = xor_result_shifted;\n            }\n            else {\n              found_byte_ptr = (byte *)((int)array + 1);\n            }\n            if ((xor_result & 1) == 0) {\n              is_byte_equal_shifted8_xor = (xor_result & 0x100) == 0;\n              next_byte_ptr = found_byte_ptr + 1;\n              if (is_byte_equal_shifted8_xor) {\n                is_byte_equal_shifted8_xor = (xor_result & 0x18000) == 0;\n                next_byte_ptr = found_byte_ptr + 2;\n              }\n              found_byte_ptr = next_byte_ptr;\n              if (is_byte_equal_shifted8_xor) {\n                found_byte_ptr = found_byte_ptr + 1;\n              }\n            }\n            return found_byte_ptr + -1;\n          }\n          array = current_uint_ptr;\n        } while (aligned_array_length != 0);\n        array_length = array_length & 7;\n        goto joined_r0x08000290;\n      }\n      current_uint_ptr = (uint *)((int)array + 1);\n      array_length = array_length - 1;\n      if (*(byte *)array == byte_to_find) break;\n      array_alignment = (uint)current_uint_ptr & 7;\n      array = current_uint_ptr;\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_uint_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_in_array_08000230",
                "param_1": "array",
                "param_2": "byte_to_find",
                "param_3": "array_length",
                "bVar1": "byte_value",
                "cVar2": "is_byte_equal",
                "cVar3": "is_byte_equal_shifted8",
                "cVar4": "is_byte_equal_shifted16",
                "cVar5": "is_byte_equal_shifted24",
                "pbVar6": "next_byte_ptr",
                "puVar7": "current_uint_ptr",
                "pbVar8": "found_byte_ptr",
                "uVar9": "array_alignment",
                "uVar10": "aligned_array_length",
                "uVar11": "xor_result",
                "uVar12": "xor_result_shifted",
                "bVar13": "is_byte_equal_shifted8_xor",
                "bVar14": "is_byte_equal_shifted16_xor",
                "bVar15": "is_byte_equal_shifted24_xor",
                "bVar16": "is_byte_equal_shifted32_xor"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "check_params_and_return_080002d0",
            "code": "\nundefined8 check_params_and_return_080002d0(int value1,int value2,int value3,int value4)\n\n{\n  undefined8 result;\n  \n  if ((value4 == 0) && (value3 == 0)) {\n    if (value2 != 0 || value1 != 0) {\n      value2 = -1;\n      value1 = -1;\n    }\n    return CONCAT44(value2,value1);\n  }\n  result = FUN_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "check_params_and_return_080002d0",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_and_modulus_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divideAndModulus_08000300(uint dividend,uint dividendLow,uint divisor,uint dividendHigh,uint *remainder)\n\n{\n  ulonglong quotient;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  int shiftAmount;\n  bool carryFlag;\n  \n  if (dividendHigh == 0) {\n    if (dividendLow < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount != 0) {\n        divisor = divisor << shiftAmount;\n        dividendLow = dividend >> (0x20U - shiftAmount & 0xff) | dividendLow << shiftAmount;\n        dividend = dividend << shiftAmount;\n      }\n      temp7 = divisor >> 0x10;\n      temp5 = dividendLow / temp7;\n      temp4 = dividend >> 0x10 | (dividendLow - temp7 * temp5) * 0x10000;\n      temp3 = temp5 * (divisor & 0xffff);\n      temp2 = temp5;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        carryFlag = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp2 = temp5 - 1;\n        if ((carryFlag == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          temp2 = temp5 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp5 = (temp4 - temp3) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - temp3) - temp7 * temp5) * 0x10000;\n      temp7 = temp5 * (divisor & 0xffff);\n      temp3 = temp5;\n      if (temp4 <= temp7 && temp7 - temp4 != 0) {\n        carryFlag = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp5 - 1;\n        if ((carryFlag == false) && (temp4 <= temp7 && temp7 - temp4 != 0)) {\n          temp3 = temp5 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp7;\n      temp3 = temp3 | temp2 << 0x10;\n      temp2 = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendLow = dividendLow - divisor;\n        temp4 = divisor >> 0x10;\n        temp8 = divisor & 0xffff;\n        temp2 = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        temp4 = divisor >> 0x10;\n        temp3 = dividendLow >> (0x20U - shiftAmount & 0xff);\n        temp6 = dividend >> (0x20U - shiftAmount & 0xff) | dividendLow << shiftAmount;\n        temp2 = temp3 / temp4;\n        temp8 = divisor & 0xffff;\n        temp7 = temp6 >> 0x10 | (temp3 - temp4 * temp2) * 0x10000;\n        temp5 = temp2 * temp8;\n        dividend = dividend << shiftAmount;\n        temp3 = temp2;\n        if (temp7 <= temp5 && temp5 - temp7 != 0) {\n          carryFlag = CARRY4(temp7,divisor);\n          temp7 = temp7 + divisor;\n          temp3 = temp2 - 1;\n          if ((carryFlag == false) && (temp7 <= temp5 && temp5 - temp7 != 0)) {\n            temp3 = temp2 - 2;\n            temp7 = temp7 + divisor;\n          }\n        }\n        temp1 = (temp7 - temp5) / temp4;\n        dividendLow = temp6 & 0xffff | ((temp7 - temp5) - temp4 * temp1) * 0x10000;\n        temp5 = temp1 * temp8;\n        temp2 = temp1;\n        if (dividendLow <= temp5 && temp5 - dividendLow != 0) {\n          carryFlag = CARRY4(dividendLow,divisor);\n          dividendLow = dividendLow + divisor;\n          temp2 = temp1 - 1;\n          if ((carryFlag == false) && (dividendLow <= temp5 && temp5 - dividendLow != 0)) {\n            temp2 = temp1 - 2;\n            dividendLow = dividendLow + divisor;\n          }\n        }\n        dividendLow = dividendLow - temp5;\n        temp2 = temp2 | temp3 << 0x10;\n      }\n      temp6 = dividendLow / temp4;\n      temp7 = dividend >> 0x10 | (dividendLow - temp4 * temp6) * 0x10000;\n      temp3 = temp8 * temp6;\n      temp5 = temp6;\n      if (temp7 <= temp3 && temp3 - temp7 != 0) {\n        carryFlag = CARRY4(temp7,divisor);\n        temp7 = temp7 + divisor;\n        temp5 = temp6 - 1;\n        if ((carryFlag == false) && (temp7 <= temp3 && temp3 - temp7 != 0)) {\n          temp5 = temp6 - 2;\n          temp7 = temp7 + divisor;\n        }\n      }\n      temp6 = (temp7 - temp3) / temp4;\n      temp4 = dividend & 0xffff | ((temp7 - temp3) - temp4 * temp6) * 0x10000;\n      temp8 = temp8 * temp6;\n      temp3 = temp6;\n      if (temp4 <= temp8 && temp8 - temp4 != 0) {\n        carryFlag = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp6 - 1;\n        if ((carryFlag == false) && (temp4 <= temp8 && temp8 - temp4 != 0)) {\n          temp3 = temp6 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp8;\n      temp3 = temp3 | temp5 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp4 >> shiftAmount;\n      remainder[1] = 0;\n      return CONCAT44(temp2,temp3);\n    }\n  }\n  else if (dividendLow < dividendHigh) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividendLow;\n      return 0;\n    }\n    temp3 = 0;\n    temp2 = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(dividendHigh);\n    if (shiftAmount != 0) {\n      temp7 = 0x20 - shiftAmount;\n      temp2 = divisor >> (temp7 & 0xff) | dividendHigh << shiftAmount;\n      temp8 = temp2 >> 0x10;\n      temp3 = dividendLow >> (temp7 & 0xff);\n      temp1 = dividend >> (temp7 & 0xff) | dividendLow << shiftAmount;\n      temp6 = temp3 / temp8;\n      temp5 = temp1 >> 0x10 | (temp3 - temp8 * temp6) * 0x10000;\n      temp4 = temp6 * (temp2 & 0xffff);\n      dividend = dividend << shiftAmount;\n      temp3 = temp6;\n      if (temp5 <= temp4 && temp4 - temp5 != 0) {\n        carryFlag = CARRY4(temp5,temp2);\n        temp5 = temp5 + temp2;\n        temp3 = temp6 - 1;\n        if ((carryFlag == false) && (temp5 <= temp4 && temp4 - temp5 != 0)) {\n          temp3 = temp6 - 2;\n          temp5 = temp5 + temp2;\n        }\n      }\n      temp6 = (temp5 - temp4) / temp8;\n      temp5 = temp1 & 0xffff | ((temp5 - temp4) - temp8 * temp6) * 0x10000;\n      temp8 = temp6 * (temp2 & 0xffff);\n      temp4 = temp6;\n      if (temp5 <= temp8 && temp8 - temp5 != 0) {\n        carryFlag = CARRY4(temp5,temp2);\n        temp5 = temp5 + temp2;\n        temp4 = temp6 - 1;\n        if ((carryFlag == false) && (temp5 <= temp8 && temp8 - temp5 != 0)) {\n          temp4 = temp6 - 2;\n          temp5 = temp5 + temp2;\n        }\n      }\n      temp4 = temp4 | temp3 << 0x10;\n      quotient = (ulonglong)temp4 * (ulonglong)(divisor << shiftAmount);\n      if (CONCAT44(temp5 - temp8,dividend) < quotient) {\n        quotient = quotient - CONCAT44(temp2,divisor << shiftAmount);\n        temp4 = temp4 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        temp3 = ((temp5 - temp8) - (int)(quotient >> 0x20)) - (uint)(dividend < (uint)quotient);\n        *remainder = temp3 << (temp7 & 0xff) | dividend - (uint)quotient >> shiftAmount;\n        remainder[1] = temp3 >> shiftAmount;\n      }\n      return (ulonglong)temp4;\n    }\n    if ((dividendHigh < dividendLow) || (divisor <= dividend)) {\n      carryFlag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividendLow = (dividendLow - dividendHigh) - (uint)carryFlag;\n      temp3 = 1;\n    }\n    else {\n      temp3 = 0;\n    }\n    temp2 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividendLow;\n      return (ulonglong)temp3;\n    }\n  }\n  return CONCAT44(temp2,temp3);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_and_modulus_08000300",
                "param_1": "dividend",
                "param_2": "dividendLow",
                "param_3": "divisor",
                "param_4": "dividendHigh",
                "param_5": "remainder",
                "uVar1": "quotient",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "bVar11": "carryFlag",
                "iVar10": "shiftAmount"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "execute_software_interrupt_080005e0",
            "code": "\nvoid execute_software_interrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "execute_software_interrupt_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_if_not_busy_080005e4",
            "code": "\nundefined4 executeIfNotBusy_080005e4(undefined4 value1,undefined4 value2,undefined4 value3,undefined4 value4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = FUN_080005e0(1,value1,0,0,value4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_if_not_busy_080005e4",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_data_08000600",
            "code": "\nvoid initializeData_08000600(int **dataPointer,undefined4 value)\n\n{\n  char dataType;\n  int result;\n  \n  dataType = *(char *)((int)dataPointer + 5);\n  if (dataType == '\\x02') {\n    *dataPointer = &DAT_20000338;\n  }\n  else if (dataType == '\\x03') {\n    *dataPointer = &DAT_20000338;\n  }\n  else if (dataType == '\\x01') {\n    *dataPointer = &DAT_20000338;\n  }\n  else {\n    *dataPointer = &DAT_20000338;\n  }\n  FUN_08004388(*dataPointer,value,6);\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    FUN_08004110(*(byte *)((int)dataPointer + 6),1);\n    FUN_080041bc(*(undefined *)((int)dataPointer + 6),0);\n  }\n  do {\n    result = (**(code **)(**dataPointer + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  *(undefined *)((int)dataPointer + 0x4a) = 0;\n  *(undefined2 *)(dataPointer + 0x15) = 0;\n  *(undefined2 *)((int)dataPointer + 0x52) = 0;\n  *(undefined2 *)(dataPointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_data_08000600",
                "param_1": "dataPointer",
                "param_2": "value",
                "cVar1": "dataType",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_08004388",
                "FUN_08004110",
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "update_data_entry_0800066c",
            "code": "\nvoid updateDataEntry_0800066c(int entryAddress,undefined value1,int value2,undefined value3)\n\n{\n  *(undefined *)(entryAddress + 4) = value1;\n  if (3 < value2) {\n    value2 = 0;\n  }\n  *(char *)(entryAddress + 5) = (char)value2;\n  *(undefined *)(entryAddress + 6) = value3;\n  *(undefined2 *)(entryAddress + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "update_data_entry_0800066c",
                "param_1": "entryAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_08000682",
            "code": "\nundefined4 initialize_08000682(undefined4 input_value)\n\n{\n  FUN_0800066c();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_08000682",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "check_parameter_08000690",
            "code": "\nvoid check_parameter_08000690(int input_value,int flag_value,undefined4 unused_param,undefined4 output_param)\n\n{\n  if (input_value != 1) {\n    return;\n  }\n  if (flag_value == 0xffff) {\n    FUN_08000682(&DAT_20000124,1,0,0,output_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "check_parameter_08000690",
                "param_1": "input_value",
                "param_2": "flag_value",
                "param_3": "unused_param",
                "param_4": "output_param"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_data_080006b4",
            "code": "\nint processData_080006b4(int **data)\n\n{\n  bool exceedLimit;\n  undefined result;\n  int returnValue;\n  byte index;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_080041bc(*(byte *)((int)data + 6),0);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    exceedLimit = false;\n    while (returnValue = (**(code **)(**data + 8))(), returnValue != 0) {\n      index = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      *(undefined *)((int)data + index + 9) = result;\n      index = *(char *)((int)data + 0x49) + 1;\n      *(byte *)((int)data + 0x49) = index;\n      if (0x3f < index) {\n        exceedLimit = true;\n      }\n    }\n  }\n  else {\n    exceedLimit = false;\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (exceedLimit) {\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)data + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_data_080006b4",
                "param_1": "data",
                "bVar1": "exceedLimit",
                "uVar2": "result",
                "iVar3": "returnValue",
                "bVar4": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_crc_08000728",
            "code": "\nuint calculate_crc_08000728(int data_start,int data_length)\n\n{\n  byte bit_counter;\n  uint crc;\n  uint bit;\n  uint data_index;\n  \n  crc = 0xffff;\n  for (data_index = 0; (int)data_index < data_length; data_index = data_index + 1 & 0xff) {\n    crc = crc ^ *(byte *)(data_start + data_index + 9);\n    for (bit_counter = 1; bit_counter < 9; bit_counter = bit_counter + 1) {\n      bit = crc & 1;\n      crc = crc >> 1;\n      if (bit != 0) {\n        crc = crc ^ 0xa001;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_crc_08000728",
                "param_1": "data_start",
                "param_2": "data_length",
                "bVar1": "bit_counter",
                "uVar2": "crc",
                "uVar3": "bit",
                "uVar4": "data_index"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_param_values_0800076c",
            "code": "\nvoid updateParamValues_0800076c(int **paramArray,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined2 result1;\n  int result2;\n  uint index;\n  \n  index = (uint)*(byte *)((int)paramArray + 0x49);\n  result1 = FUN_08000728(paramArray,index,value2,value3,value3);\n  *(char *)((int)paramArray + index + 9) = (char)((ushort)result1 >> 8);\n  index = index + 1 & 0xff;\n  *(char *)((int)paramArray + index + 9) = (char)result1;\n  *(char *)((int)paramArray + 0x49) = (char)index + '\\x01';\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_080041bc(*(byte *)((int)paramArray + 6),1);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    (**(code **)(**paramArray + 4))(*paramArray,(int)paramArray + 9,*(undefined *)((int)paramArray + 0x49));\n  }\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_080041bc(*(byte *)((int)paramArray + 6),0);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    do {\n      result2 = (**(code **)(**paramArray + 0xc))();\n    } while (-1 < result2);\n  }\n  *(undefined *)((int)paramArray + 0x49) = 0;\n  result2 = FUN_08004204();\n  paramArray[0x17] = (int *)(result2 + (uint)*(ushort *)((int)paramArray + 0x56));\n  *(short *)((int)paramArray + 0x52) = *(short *)((int)paramArray + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_param_values_0800076c",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uVar1": "result1",
                "iVar2": "result2",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08000b54",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004204",
                "FUN_08000728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_condition_080007f0",
            "code": "\nundefined4 check_condition_080007f0(int ptr1,undefined4 param2,uint value,undefined4 param4)\n\n{\n  bool isMatch;\n  byte result;\n  char match1;\n  char match2;\n  int result1;\n  uint counter;\n  int result2;\n  \n  counter = 0;\n  do {\n    if (7 < counter) {\n      isMatch = false;\nLAB_0800080a:\n      if (!isMatch) {\n        *(short *)(ptr1 + 0x54) = *(short *)(ptr1 + 0x54) + 1;\n        return 1;\n      }\n      result2 = *(byte *)(ptr1 + 10) - 1;\n      switch(*(byte *)(ptr1 + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        match1 = FUN_08004640(*(undefined *)(ptr1 + 0xb),*(undefined *)(ptr1 + 0xc),value,\n                             result2,param4);\n        match2 = FUN_08004640(*(undefined *)(ptr1 + 0xd),*(undefined *)(ptr1 + 0xe));\n        if (*(byte *)(ptr1 + 0x60) < (byte)(match2 + match1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        result2 = FUN_08004640(*(undefined *)(ptr1 + 0xb),*(undefined *)(ptr1 + 0xc),value,\n                             result2,param4);\n        if ((uint)*(byte *)(ptr1 + 0x60) < (uint)(result2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        result = FUN_08004640(*(undefined *)(ptr1 + 0xb),*(undefined *)(ptr1 + 0xc),value,\n                             result2,param4);\n        if (*(byte *)(ptr1 + 0x60) < result) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    value = (uint)*(byte *)(ptr1 + 10);\n    if ((byte)(&DAT_08005a10)[counter] == value) {\n      isMatch = true;\n      goto LAB_0800080a;\n    }\n    counter = counter + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  result2 = FUN_08004640(*(undefined *)(ptr1 + 0xb),*(undefined *)(ptr1 + 0xc),value,result2,\n                       param4);\n  result1 = FUN_08004640(*(undefined *)(ptr1 + 0xd),*(undefined *)(ptr1 + 0xe));\n  if ((uint)*(byte *)(ptr1 + 0x60) <\n      (((uint)(result2 << 0xc) >> 0x10) + ((uint)(result1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_condition_080007f0",
                "param_1": "ptr1",
                "param_2": "param2",
                "param_3": "value",
                "param_4": "param4",
                "bVar1": "isMatch",
                "bVar2": "result",
                "cVar3": "match1",
                "cVar4": "match2",
                "iVar5": "result1",
                "uVar6": "counter",
                "iVar7": "result2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_byte_to_address_080008cc",
            "code": "\nvoid copyByteToAddress_080008cc(int destinationAddress,undefined sourceByte)\n\n{\n  *(undefined *)(destinationAddress + 9) = *(undefined *)(destinationAddress + 4);\n  *(byte *)(destinationAddress + 10) = *(byte *)(destinationAddress + 10) ^ 0x80;\n  *(undefined *)(destinationAddress + 0xb) = sourceByte;\n  *(undefined *)(destinationAddress + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_byte_to_address_080008cc",
                "param_1": "destinationAddress",
                "param_2": "sourceByte"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "decode_and_update_080008e2",
            "code": "\nint decode_and_update_080008e2(int input_data,int lookup_table,undefined4 param_a,undefined4 param_b)\n\n{\n  int result1;\n  uint result2;\n  uint counter;\n  uint bit_counter;\n  char shifted_char;\n  int updated_value;\n  \n  result1 = FUN_08004640(*(undefined *)(input_data + 0xb),*(undefined *)(input_data + 0xc),param_a,param_b,\n                       param_b);\n  result2 = FUN_08004640(*(undefined *)(input_data + 0xd),*(undefined *)(input_data + 0xe));\n  shifted_char = (char)((result2 << 0x15) >> 0x18);\n  if ((result2 & 7) != 0) {\n    shifted_char = shifted_char + '\\x01';\n  }\n  *(char *)(input_data + 0xb) = shifted_char;\n  *(undefined *)(input_data + 0x49) = 3;\n  bit_counter = 0;\n  for (counter = 0; (int)counter < (int)result2; counter = counter + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(lookup_table + ((counter + result1) * 0x100000 >> 0x18) * 2) >>\n         (counter + result1 & 0xf) & 1U) == 0) {\n      updated_value = (uint)*(byte *)(input_data + 0x49) + input_data;\n      *(byte *)(updated_value + 9) = *(byte *)(updated_value + 9) & ~(byte)(1 << bit_counter);\n    }\n    else {\n      updated_value = (uint)*(byte *)(input_data + 0x49) + input_data;\n      *(byte *)(updated_value + 9) = *(byte *)(updated_value + 9) | (byte)(1 << bit_counter);\n    }\n    bit_counter = bit_counter + 1 & 0xff;\n    if (7 < bit_counter) {\n      *(char *)(input_data + 0x49) = *(char *)(input_data + 0x49) + '\\x01';\n      bit_counter = 0;\n    }\n  }\n  if ((result2 & 7) != 0) {\n    *(char *)(input_data + 0x49) = *(char *)(input_data + 0x49) + '\\x01';\n  }\n  shifted_char = *(char *)(input_data + 0x49);\n  FUN_0800076c(input_data);\n  return (int)(char)(shifted_char + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "decode_and_update_080008e2",
                "param_1": "input_data",
                "param_2": "lookup_table",
                "param_3": "param_a",
                "param_4": "param_b",
                "iVar1": "result1",
                "uVar2": "result2",
                "uVar3": "counter",
                "uVar4": "bit_counter",
                "cVar5": "shifted_char",
                "iVar6": "updated_value"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_and_return_sum_08000998",
            "code": "\nint process_and_return_sum_08000998(int input_address,int data_address,undefined4 param_3,undefined4 param_4)\n\n{\n  byte temp_byte_1;\n  char temp_char;\n  byte result_1;\n  byte result_2;\n  uint loop_index;\n  uint temp_index;\n  \n  result_1 = FUN_08004640(*(undefined *)(input_address + 0xb),*(undefined *)(input_address + 0xc),param_3,param_4,\n                       param_4);\n  result_2 = FUN_08004640(*(undefined *)(input_address + 0xd),*(undefined *)(input_address + 0xe));\n  *(byte *)(input_address + 0xb) = result_2 << 1;\n  *(undefined *)(input_address + 0x49) = 3;\n  for (loop_index = (uint)result_1; loop_index < (uint)result_1 + (uint)result_2; loop_index = loop_index + 1 & 0xff) {\n    temp_byte_1 = *(byte *)(input_address + 0x49);\n    *(char *)(input_address + (uint)temp_byte_1 + 9) = (char)((ushort)*(undefined2 *)(data_address + loop_index * 2) >> 8)\n    ;\n    temp_index = temp_byte_1 + 1 & 0xff;\n    temp_char = (char)temp_index;\n    *(char *)(input_address + 0x49) = temp_char;\n    *(undefined *)(input_address + temp_index + 9) = *(undefined *)(data_address + loop_index * 2);\n    *(char *)(input_address + 0x49) = temp_char + '\\x01';\n  }\n  temp_char = *(char *)(input_address + 0x49);\n  FUN_0800076c(input_address);\n  return (int)(char)(temp_char + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_and_return_sum_08000998",
                "param_1": "input_address",
                "param_2": "data_address",
                "bVar1": "temp_byte_1",
                "cVar2": "temp_char",
                "bVar3": "result_1",
                "bVar4": "result_2",
                "uVar5": "loop_index",
                "uVar6": "temp_index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_array_08000a00",
            "code": "\nundefined4 updateArray_08000a00(int arrayPointer,int targetArrayPointer,undefined4 param3,undefined4 param4)\n\n{\n  uint result;\n  uint index;\n  \n  result = FUN_08004640(*(undefined *)(arrayPointer + 0xb),*(undefined *)(arrayPointer + 0xc),param3,param4,\n                       param4);\n  index = (result << 0x14) >> 0x18;\n  if (*(char *)(arrayPointer + 0xd) == -1) {\n    *(ushort *)(targetArrayPointer + index * 2) =\n         (ushort)(1 << (result & 0xf)) | *(ushort *)(targetArrayPointer + index * 2);\n  }\n  else {\n    *(ushort *)(targetArrayPointer + index * 2) =\n         *(ushort *)(targetArrayPointer + index * 2) & ~(ushort)(1 << (result & 0xf));\n  }\n  *(undefined *)(arrayPointer + 0x49) = 6;\n  FUN_0800076c(arrayPointer);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_array_08000a00",
                "param_1": "arrayPointer",
                "param_2": "targetArrayPointer",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_data_08000a4e",
            "code": "\nundefined4 updateData_08000a4e(int dataAddress,int resultAddress)\n\n{\n  byte value1;\n  undefined2 value2;\n  \n  value1 = FUN_08004640(*(undefined *)(dataAddress + 0xb),*(undefined *)(dataAddress + 0xc));\n  value2 = FUN_08004640(*(undefined *)(dataAddress + 0xd),*(undefined *)(dataAddress + 0xe));\n  *(undefined2 *)(resultAddress + (uint)value1 * 2) = value2;\n  *(undefined *)(dataAddress + 0x49) = 6;\n  FUN_0800076c(dataAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_data_08000a4e",
                "param_1": "dataAddress",
                "param_2": "resultAddress",
                "bVar1": "value1",
                "uVar2": "value2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_data_08000a7a",
            "code": "\nundefined4 updateData_08000a7a(int dataAddress,int resultAddress,undefined4 param3,undefined4 param4)\n\n{\n  int firstResult;\n  int secondResult;\n  uint counter;\n  uint bitCounter;\n  uint bitShift;\n  uint index;\n  uint index2;\n  \n  firstResult = FUN_08004640(*(undefined *)(dataAddress + 0xb),*(undefined *)(dataAddress + 0xc),param3,param4,\n                       param4);\n  secondResult = FUN_08004640(*(undefined *)(dataAddress + 0xd),*(undefined *)(dataAddress + 0xe));\n  bitCounter = 0;\n  index2 = 7;\n  for (counter = 0; (int)counter < secondResult; counter = counter + 1 & 0xffff) {\n    index = (counter + firstResult) * 0x100000 >> 0x18;\n    bitShift = counter + firstResult & 0xf;\n    if (((int)(uint)*(byte *)(dataAddress + index2 + 9) >> bitCounter & 1U) == 0) {\n      *(ushort *)(resultAddress + index * 2) = *(ushort *)(resultAddress + index * 2) & ~(ushort)(1 << bitShift);\n    }\n    else {\n      *(ushort *)(resultAddress + index * 2) = (ushort)(1 << bitShift) | *(ushort *)(resultAddress + index * 2);\n    }\n    bitCounter = bitCounter + 1 & 0xff;\n    if (7 < bitCounter) {\n      index2 = index2 + 1 & 0xff;\n      bitCounter = 0;\n    }\n  }\n  *(undefined *)(dataAddress + 0x49) = 6;\n  FUN_0800076c(dataAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_data_08000a7a",
                "param_1": "dataAddress",
                "param_2": "resultAddress",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "firstResult",
                "iVar2": "secondResult",
                "uVar3": "counter",
                "uVar4": "bitCounter",
                "uVar5": "bitShift",
                "uVar6": "index",
                "uVar7": "index2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "decode_and_copy_data_08000b04",
            "code": "\nint decode_and_copy_data_08000b04(int input_data,int output_data)\n\n{\n  byte offset;\n  byte length;\n  char result;\n  undefined2 decoded_value;\n  uint index;\n  \n  offset = *(byte *)(input_data + 0xc);\n  length = *(byte *)(input_data + 0xe);\n  *(undefined *)(input_data + 0xd) = 0;\n  *(byte *)(input_data + 0xe) = length;\n  *(undefined *)(input_data + 0x49) = 6;\n  for (index = 0; index < length; index = index + 1 & 0xff) {\n    decoded_value = FUN_08004640(*(undefined *)(index * 2 + input_data + 0x10),\n                         *(undefined *)(input_data + (index + 4) * 2 + 9));\n    *(undefined2 *)(output_data + (offset + index) * 2) = decoded_value;\n  }\n  result = *(char *)(input_data + 0x49);\n  FUN_0800076c(input_data);\n  return (int)(char)(result + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "decode_and_copy_data_08000b04",
                "param_1": "input_data",
                "param_2": "output_data",
                "bVar1": "offset",
                "bVar2": "length",
                "cVar3": "result",
                "uVar4": "decoded_value",
                "uVar5": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_data_08000b54",
            "code": "\nint process_data_08000b54(int **data,int *value,undefined4 flag)\n\n{\n  byte result;\n  int status;\n  uint returnValue;\n  int resultValue;\n  \n  data[0x13] = value;\n  *(char *)(data + 0x18) = (char)flag;\n  if (*(byte *)((int)data + 5) < 4) {\n    result = (**(code **)(**data + 8))();\n    returnValue = (uint)result;\n  }\n  if (returnValue == 0) {\n    resultValue = 0;\n  }\n  else if ((int)returnValue < 8) {\n    resultValue = 0;\n  }\n  else {\n    resultValue = FUN_080006b4(data);\n    *(char *)(data + 2) = (char)resultValue;\n    if (*(char *)((int)data + 9) == *(char *)(data + 1)) {\n      status = FUN_080007f0(data);\n      if (status < 1) {\n        status = FUN_08004204();\n        data[0x17] = (int *)((uint)*(ushort *)((int)data + 0x56) + status);\n        *(undefined *)(data + 2) = 0;\n        switch(*(undefined *)((int)data + 10)) {\n        case 1:\n        case 2:\n          resultValue = FUN_080008e2(data,value,flag);\n          break;\n        case 3:\n        case 4:\n          resultValue = FUN_08000998(data,value,flag);\n          break;\n        case 5:\n          resultValue = FUN_08000a00(data,value,flag);\n          break;\n        case 6:\n          resultValue = FUN_08000a4e(data,value,flag);\n          break;\n        case 0xf:\n          resultValue = FUN_08000a7a(data,value,flag);\n          break;\n        case 0x10:\n          resultValue = FUN_08000b04(data,value,flag);\n        }\n      }\n      else {\n        if (status != 0xff) {\n          FUN_080008cc(data,status);\n          FUN_0800076c(data);\n        }\n        *(char *)(data + 2) = (char)status;\n        resultValue = (int)(char)status;\n      }\n    }\n    else {\n      resultValue = 0;\n    }\n  }\n  return resultValue;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_data_08000b54",
                "param_1": "data",
                "param_2": "value",
                "param_3": "flag",
                "bVar1": "result",
                "iVar2": "status",
                "unaff_r5": "returnValue",
                "iVar3": "resultValue"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a4e",
                "FUN_0800076c",
                "FUN_080008e2",
                "FUN_080008cc",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_08004204",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_memory_08000c4c",
            "code": "\nvoid initializeMemory_08000c4c(void)\n\n{\n  FUN_080005e4(0);\n  FUN_08000600(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_memory_08000c4c"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000600",
                "FUN_080005e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "initialize_data_08000c64",
            "code": "\nvoid initializeData_08000c64(void)\n\n{\n  undefined4 inputValue;\n  \n  FUN_08000b54(&DAT_20000124,&DAT_20000004,0x10,inputValue,inputValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "initialize_data_08000c64",
                "in_r3": "inputValue"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initializeSystem_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 flag;\n  undefined4 value1;\n  undefined4 parameter1;\n  undefined4 value2;\n  undefined4 parameter2;\n  undefined4 value3;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  undefined4 option1;\n  undefined4 option2;\n  undefined4 option3;\n  undefined4 option4;\n  undefined4 option5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag = 1;\n  value1 = 0x50000;\n  parameter1 = 2;\n  value2 = 0x400000;\n  parameter2 = 8;\n  value3 = 0x150;\n  parameter3 = 2;\n  parameter4 = 7;\n  FUN_0800201c(&flag);\n  FUN_08001f9c();\n  option1 = 0xf;\n  option2 = 2;\n  option3 = 0;\n  option4 = 0x1400;\n  option5 = 0x1000;\n  FUN_08002488(&option1,5);\n  uVar1 = FUN_080025e0();\n  FUN_08000ee0(uVar1 / 1000);\n  FUN_08000f2c(4);\n  FUN_08000e60(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "flag",
                "local_50": "value1",
                "local_3c": "parameter1",
                "local_38": "value2",
                "local_34": "parameter2",
                "local_30": "value3",
                "local_2c": "parameter3",
                "local_28": "parameter4",
                "local_24": "option1",
                "local_20": "option2",
                "local_1c": "option3",
                "local_18": "option4",
                "local_14": "option5"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_080025e0",
                "FUN_08000e60",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08001f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_080035bc();\n  FUN_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  FUN_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_080035bc",
                "FUN_08004658",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_application_08000d8e",
            "code": "\nvoid initializeApplication_08000d8e(void)\n\n{\n  FUN_080034ce();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_application_08000d8e"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "check_and_set_param_08000d98",
            "code": "\nundefined4 checkAndSetParam_08000d98(uint inputParam)\n\n{\n  int result;\n  \n  result = FUN_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (result != 0) {\n    return 1;\n  }\n  if (0xf < inputParam) {\n    return 1;\n  }\n  FUN_08000e60(0xffffffff,inputParam,0);\n  DAT_20000028 = inputParam;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "check_and_set_param_08000d98",
                "param_1": "inputParam",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_system_08000de4",
            "code": "\n\n\nundefined4 initializeSystem_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  FUN_08000e3c(3);\n  FUN_08000d98(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_system_08000de4"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000e3c",
                "FUN_08000d96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "update_sum_variable_08000e18",
            "code": "\nvoid update_sum_variable_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "update_sum_variable_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_dat_value_08000e30",
            "code": "\nundefined4 get_dat_value_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_dat_value_08000e30"
            },
            "calling": [
                "FUN_0800346c",
                "FUN_08003d18",
                "FUN_08002488",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08002dd0",
                "FUN_08002d0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_memory_value_08000e3c",
            "code": "\n\n\nvoid updateMemoryValue_08000e3c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_memory_value_08000e3c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_memory_value_08000e60",
            "code": "\n\n\nvoid updateMemoryValue_08000e60(uint memoryAddress,uint bitMask,uint newValue)\n\n{\n  uint shiftedBits;\n  uint remainingBits;\n  \n  shiftedBits = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftedBits;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftedBits + 4 < 7) {\n    shiftedBits = 0;\n  }\n  else {\n    shiftedBits = shiftedBits - 3;\n  }\n  shiftedBits = (bitMask & (1 << (remainingBits & 0xff)) - 1U) << (shiftedBits & 0xff) |\n          (1 << (shiftedBits & 0xff)) - 1U & newValue;\n  if ((int)memoryAddress < 0) {\n    *(char *)((memoryAddress & 0xf) + 0xe000ed14) = (char)(shiftedBits << 4);\n  }\n  else {\n    *(char *)(memoryAddress + 0xe000e400) = (char)(shiftedBits << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_memory_value_08000e60",
                "param_1": "memoryAddress",
                "param_2": "bitMask",
                "param_3": "newValue",
                "uVar1": "shiftedBits",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08000d98",
                "FUN_08000c8c",
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_08000ec4",
            "code": "\nvoid setBit_08000ec4(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_08000ec4",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "sanitize_and_initialize_08000ee0",
            "code": "\n\n\nundefined4 sanitizeAndInitialize_08000ee0(int inputValue)\n\n{\n  if (inputValue - 1U < 0x1000000) {\n    _DAT_e000e014 = inputValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "sanitize_and_initialize_08000ee0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08000d98",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_value_08000f0c",
            "code": "\nvoid setBitValue_08000f0c(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)(((bitPosition >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_value_08000f0c",
                "param_1": "bitPosition"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_flag_08000f2c",
            "code": "\n\n\nvoid updateFlag_08000f2c(int flagValue)\n\n{\n  if (flagValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_flag_08000f2c",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "execute_08000f4e_08000f4e",
            "code": "\nvoid execute_08000f4e_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "execute_08000f4e_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "initialize_memory_08000f56",
            "code": "\nundefined4 initializeMemory_08000f56(int memoryAddress)\n\n{\n  if (memoryAddress != 0) {\n    *(undefined *)(memoryAddress + 4) = 2;\n    FUN_080033c8();\n    *(undefined4 *)(memoryAddress + 0x10) = 0;\n    *(undefined *)(memoryAddress + 4) = 0;\n    *(undefined *)(memoryAddress + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "initialize_memory_08000f56",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **array,uint bitIndex)\n\n{\n  **array = **array & ~(1 << (bitIndex & 0xff));\n  *(undefined *)(array + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "array",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_value_08000f8c",
            "code": "\nundefined4 updateParamValue_08000f8c(uint **paramList)\n\n{\n  if (*(char *)((int)paramList + 0x35) != '\\x02') {\n    paramList[0x15] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)paramList + 0x35) = 5;\n  **paramList = **paramList & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_value_08000f8c",
                "param_1": "paramList"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_settings_08000fb4",
            "code": "\n\n\nvoid updateSettings_08000fb4(uint *settings,uint *newSettings)\n\n{\n  uint tempVar1;\n  uint tempVar2;\n  uint index;\n  uint bitMask;\n  uint value;\n  int subIndex;\n  uint shiftedIndex;\n  int shift;\n  \n  for (index = 0; index < 0x10; index = index + 1) {\n    tempVar2 = 1 << (index & 0xff);\n    bitMask = tempVar2 & *newSettings;\n    tempVar1 = _DAT_40013c0c;\n    if (tempVar2 == bitMask) {\n      if ((newSettings[1] == 2) || (newSettings[1] == 0x12)) {\n        subIndex = (index >> 3) + 8;\n        shift = (index & 7) << 2;\n        settings[subIndex] = settings[subIndex] & ~(0xf << shift) | newSettings[4] << shift;\n      }\n      shiftedIndex = index << 1;\n      tempVar1 = ~(3 << (shiftedIndex & 0xff));\n      *settings = *settings & tempVar1 | (newSettings[1] & 3) << (shiftedIndex & 0xff);\n      value = newSettings[1];\n      if (((value - 1 < 2) || (value == 0x11)) || (value == 0x12)) {\n        settings[2] = settings[2] & tempVar1 | newSettings[3] << (shiftedIndex & 0xff);\n        settings[1] = settings[1] & ~tempVar2 | ((newSettings[1] << 0x1b) >> 0x1f) << (index & 0xff);\n      }\n      settings[3] = tempVar1 & settings[3] | newSettings[2] << (shiftedIndex & 0xff);\n      tempVar1 = _DAT_40013c0c;\n      if ((newSettings[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        shift = (index & 3) << 2;\n        if (settings == (uint *)0x40020000) {\n          subIndex = 0;\n        }\n        else if (settings == (uint *)0x40020400) {\n          subIndex = 1;\n        }\n        else if (settings == (uint *)0x40020800) {\n          subIndex = 2;\n        }\n        else if (settings == (uint *)0x40020c00) {\n          subIndex = 3;\n        }\n        else if (settings == (uint *)0x40021000) {\n          subIndex = 4;\n        }\n        else if (settings == (uint *)0x40021400) {\n          subIndex = 5;\n        }\n        else if (settings == (uint *)0x40021800) {\n          subIndex = 6;\n        }\n        else if (settings == (uint *)0x40021c00) {\n          subIndex = 7;\n        }\n        else if (settings == (uint *)0x40022000) {\n          subIndex = 8;\n        }\n        else if (settings == (uint *)0x40022400) {\n          subIndex = 9;\n        }\n        else {\n          subIndex = 10;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) & ~(0xf << shift) | subIndex << shift;\n        tempVar1 = ~bitMask;\n        tempVar2 = _DAT_40013c00 & tempVar1;\n        if ((newSettings[1] & 0x10000) != 0) {\n          tempVar2 = bitMask | _DAT_40013c00;\n        }\n        value = tempVar1 & _DAT_40013c04;\n        if ((newSettings[1] & 0x20000) != 0) {\n          value = bitMask | _DAT_40013c04;\n        }\n        shiftedIndex = tempVar1 & _DAT_40013c08;\n        if ((newSettings[1] & 0x100000) != 0) {\n          shiftedIndex = bitMask | _DAT_40013c08;\n        }\n        _DAT_40013c00 = tempVar2;\n        _DAT_40013c04 = value;\n        _DAT_40013c08 = shiftedIndex;\n        tempVar1 = tempVar1 & _DAT_40013c0c;\n        if ((newSettings[1] & 0x200000) != 0) {\n          tempVar1 = bitMask | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = tempVar1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_settings_08000fb4",
                "param_1": "settings",
                "param_2": "newSettings",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "index",
                "uVar4": "bitMask",
                "uVar5": "value",
                "iVar6": "subIndex",
                "uVar7": "shiftedIndex",
                "iVar8": "shift",
                "param_2[1]": "newSettings[1]",
                "param_1[1]": "settings[1]",
                "param_1[2]": "settings[2]",
                "param_1[3]": "settings[3]",
                "param_2[4]": "newSettings[4]",
                "param_2[2]": "newSettings[2]",
                "param_2[3]": "newSettings[3]"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "set_param_value_08001198",
            "code": "\nvoid set_param_value_08001198(int struct_address,int value,int use_high_bits)\n\n{\n  if (use_high_bits == 0) {\n    *(int *)(struct_address + 0x18) = value << 0x10;\n    return;\n  }\n  *(int *)(struct_address + 0x18) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "struct_address",
                "param_2": "value",
                "param_3": "use_high_bits"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_and_call_function_080011a4",
            "code": "\n\n\nvoid update_and_call_function_080011a4(uint update_value)\n\n{\n  if ((_DAT_40013c14 & update_value) != 0) {\n    _DAT_40013c14 = update_value;\n    FUN_080047d0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_and_call_function_080011a4",
                "param_1": "update_value"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_flag_value_080011c0",
            "code": "\nundefined4 updateFlagValue_080011c0(int *flagsArray)\n\n{\n  if (*(char *)((int)flagsArray + 0x3e) == '@') {\n    if (flagsArray[20] == 0) {\n      *(uint *)(*flagsArray + 0x10) = flagsArray[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*flagsArray + 0x10) = flagsArray[17] & 0xffU | 1;\n    }\n  }\n  else if (flagsArray[4] == 0x4000) {\n    if (*(char *)((int)flagsArray + 0x3d) == '!') {\n      *(uint *)(*flagsArray + 0x10) = flagsArray[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*flagsArray + 0x10) = flagsArray[17] & 0xffU | 1;\n    }\n  }\n  else if (flagsArray[20] == 0) {\n    *(uint *)(*flagsArray + 0x10) = (uint)(flagsArray[17] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flagsArray[20] == 1) {\n    *(uint *)(*flagsArray + 0x10) = (uint)(flagsArray[17] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_flag_value_080011c0",
                "param_1": "flagsArray",
                "param_1[0x14]": "flagsArray[20]",
                "param_1[0x11]": "flagsArray[17]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "update_parameter_value_0800124a",
            "code": "\nundefined4 updateParameterValue_0800124a(int *parameterArray)\n\n{\n  *(uint *)(*parameterArray + 0x10) = parameterArray[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "update_parameter_value_0800124a",
                "param_1": "parameterArray"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "process_flags_08001256",
            "code": "\nundefined4 processFlags_08001256(uint **parameters)\n\n{\n  uint *pointerVar1;\n  \n  pointerVar1 = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((parameters[0x14] != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((parameters[0x14] == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (pointerVar1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          pointerVar1 = *parameters;\n          if ((pointerVar1[1] & 0x800) == 0) {\n            *pointerVar1 = *pointerVar1 | 0x200;\n          }\n          else {\n            *pointerVar1 = *pointerVar1 & 0xfffffbff;\n          }\n        }\n        else if (((pointerVar1 == (uint *)0x4) || (pointerVar1 == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        pointerVar1 = *parameters;\n        if ((pointerVar1[1] & 0x800) != 0) {\n          pointerVar1[1] = pointerVar1[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        pointerVar1 = *parameters;\n        if ((pointerVar1[1] & 0x800) != 0) {\n          pointerVar1[1] = pointerVar1[1] | 0x1000;\n        }\n      }\n      parameters[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "process_flags_08001256",
                "param_1": "parameters",
                "puVar1": "pointerVar1"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_data_08001420",
            "code": "\nundefined4 updateData_08001420(int *data)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)arrayElement;\n    arrayElement = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_data_08001420",
                "param_1": "data",
                "pbVar1": "bytePointer",
                "param_1[9]": "arrayElement"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_data_08001440",
            "code": "\nundefined4 updateData_08001440(int *data)\n\n{\n  undefined *ptrToData;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptrToData = (undefined *)ptrToDataOffset;\n    ptrToDataOffset = (int)(ptrToData + 1);\n    *ptrToData = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_data_08001440",
                "param_1": "data",
                "puVar1": "ptrToData",
                "param_1[9]": "ptrToDataOffset"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "initialize_parameters_08001460",
            "code": "\nundefined4 initializeParameters_08001460(uint **parameterList,uint *inputPointer,int inputSize,uint *outputPointer)\n\n{\n  undefined4 returnValue;\n  uint *firstElementPtr;\n  \n  if (*(char *)((int)parameterList + 0x3d) == '(') {\n    if (inputPointer == (uint *)0x0) {\n      returnValue = 1;\n    }\n    else if (inputSize == 0) {\n      returnValue = 1;\n    }\n    else if (*(char *)(parameterList + 0xf) == '\\x01') {\n      returnValue = 2;\n    }\n    else {\n      *(undefined *)(parameterList + 0xf) = 1;\n      firstElementPtr = *parameterList;\n      if ((*firstElementPtr & 1) == 0) {\n        *firstElementPtr = *firstElementPtr | 1;\n      }\n      **parameterList = **parameterList & 0xfffff7ff;\n      *(undefined *)((int)parameterList + 0x3d) = 0x29;\n      *(undefined *)((int)parameterList + 0x3e) = 0x20;\n      returnValue = 0;\n      parameterList[0x10] = (uint *)0x0;\n      parameterList[9] = inputPointer;\n      *(short *)((int)parameterList + 0x2a) = (short)inputSize;\n      parameterList[0xb] = outputPointer;\n      *(undefined2 *)(parameterList + 10) = *(undefined2 *)((int)parameterList + 0x2a);\n      *(undefined *)(parameterList + 0xf) = 0;\n      (*parameterList)[1] = (*parameterList)[1] | 0x700;\n    }\n  }\n  else {\n    returnValue = 2;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001460": "initialize_parameters_08001460",
                "param_1": "parameterList",
                "param_2": "inputPointer",
                "param_3": "inputSize",
                "param_4": "outputPointer",
                "uVar1": "returnValue",
                "puVar2": "firstElementPtr"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "check_and_update_parameters_080014ec",
            "code": "\nundefined4 check_and_update_parameters_080014ec(uint **parameter_1,uint *parameter_2,int parameter_3,uint *parameter_4)\n\n{\n  undefined4 result;\n  uint *pointer_2;\n  \n  if (*(char *)((int)parameter_1 + 0x3d) == '(') {\n    if (parameter_2 == (uint *)0x0) {\n      result = 1;\n    }\n    else if (parameter_3 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(parameter_1 + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(parameter_1 + 0xf) = 1;\n      pointer_2 = *parameter_1;\n      if ((*pointer_2 & 1) == 0) {\n        *pointer_2 = *pointer_2 | 1;\n      }\n      **parameter_1 = **parameter_1 & 0xfffff7ff;\n      *(undefined *)((int)parameter_1 + 0x3d) = 0x2a;\n      *(undefined *)((int)parameter_1 + 0x3e) = 0x20;\n      result = 0;\n      parameter_1[0x10] = (uint *)0x0;\n      parameter_1[9] = parameter_2;\n      *(short *)((int)parameter_1 + 0x2a) = (short)parameter_3;\n      parameter_1[0xb] = parameter_4;\n      *(undefined2 *)(parameter_1 + 10) = *(undefined2 *)((int)parameter_1 + 0x2a);\n      *(undefined *)(parameter_1 + 0xf) = 0;\n      (*parameter_1)[1] = (*parameter_1)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "check_and_update_parameters_080014ec",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "uVar1": "result",
                "puVar2": "pointer_2"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_parameters_08001578",
            "code": "\nundefined4 initializeParameters_08001578(uint **parameters)\n\n{\n  uint *firstParameter;\n  \n  if (*(char *)((int)parameters + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)parameters + 0x3d) = 0x28;\n  firstParameter = *parameters;\n  if ((*firstParameter & 1) == 0) {\n    *firstParameter = *firstParameter | 1;\n  }\n  **parameters = **parameters | 0x400;\n  (*parameters)[1] = (*parameters)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_parameters_08001578",
                "param_1": "parameters",
                "puVar1": "firstParameter"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_data_080015bc",
            "code": "\nundefined4 processData_080015bc(int *data)\n\n{\n  char currentChar;\n  byte *bytePtr;\n  \n  currentChar = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePtr = (byte *)byteArray;\n    byteArray = (int)(bytePtr + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePtr;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (currentChar == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      someValue = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data",
                "cVar1": "currentChar",
                "pbVar2": "bytePtr",
                "param_1[9]": "byteArray",
                "param_1[0xc]": "someValue"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "process_param_0800160e",
            "code": "\nundefined4 processParam_0800160e(int *paramArray)\n\n{\n  char character;\n  undefined *pointerToUndefined;\n  \n  character = *(char *)((int)paramArray + 0x3d);\n  if (*(short *)((int)paramArray + 0x2a) != 0) {\n    pointerToUndefined = (undefined *)arrayPointer;\n    arrayPointer = (int)(pointerToUndefined + 1);\n    *pointerToUndefined = (char)*(undefined4 *)(*paramArray + 0x10);\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    if ((*(short *)((int)paramArray + 0x2a) == 0) && (character == '*')) {\n      *(uint *)(*paramArray + 4) = *(uint *)(*paramArray + 4) & 0xfffffbff;\n      valueC = 0x22;\n      *(undefined *)((int)paramArray + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "process_param_0800160e",
                "param_1": "paramArray",
                "cVar1": "character",
                "puVar2": "pointerToUndefined",
                "param_1[9]": "arrayPointer",
                "param_1[0xc]": "valueC"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "extract_data_and_call_function_0800165a",
            "code": "\nundefined4 extractDataAndCallFunction_0800165a(int *dataPointer,undefined4 unusedParam,undefined4 unusedParam,undefined4 additionalParam)\n\n{\n  undefined2 selectedValue;\n  uint dataValue;\n  \n  dataValue = *(uint *)(*dataPointer + 0x18);\n  if ((dataValue & 0x80) == 0) {\n    selectedValue = *(undefined2 *)(dataPointer + 3);\n  }\n  else {\n    selectedValue = *(undefined2 *)(dataPointer + 6);\n  }\n  FUN_08003880(dataPointer,(*(uint *)(*dataPointer + 0x18) & 4) == 0,selectedValue,dataValue,additionalParam);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "extract_data_and_call_function_0800165a",
                "param_1": "dataPointer",
                "param_2": "unusedParam",
                "param_3": "unusedParam",
                "param_4": "additionalParam",
                "uVar1": "selectedValue",
                "uVar2": "dataValue"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "parse_input_08001684",
            "code": "\nundefined4 parseInput_08001684(uint **input)\n\n{\n  if (((condition == (uint *)0x4) || (condition == (uint *)0x8)) &&\n     (*(char *)((int)input + 0x3d) == '(')) {\n    condition = (uint *)0xffff0000;\n    (*input)[1] = (*input)[1] & 0xfffff8ff;\n    (*input)[5] = 0xfffffbff;\n    **input = **input & 0xfffffbff;\n    value = (uint *)0x0;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    FUN_080038d0();\n  }\n  else if (*(char *)((int)input + 0x3d) == '!') {\n    condition = (uint *)0xffff0000;\n    value = (uint *)0x21;\n    *(undefined *)((int)input + 0x3d) = 0x20;\n    *(undefined *)((int)input + 0x3e) = 0;\n    (*input)[1] = (*input)[1] & 0xfffff8ff;\n    (*input)[5] = 0xfffffbff;\n    **input = **input & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*input)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "parse_input_08001684",
                "param_1": "input",
                "param_1[0xb]": "condition",
                "param_1[0xc]": "value"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_08001864",
                "FUN_0800171a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "process_parameters_0800171a",
            "code": "\nundefined4 process_parameters_0800171a(uint **parameters)\n\n{\n  char character;\n  uint *pointer;\n  \n  character = *(char *)((int)parameters + 0x3d);\n  pointer = parameter11;\n  if ((*(short *)(parameters + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n      **parameters = **parameters | 0x200;\n      parameter12 = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      if (*(char *)((int)parameters + 0x3e) == '@') {\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)parameters + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n      parameter12 = (uint *)0x11;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)parameters + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)parameters + 0x2a) == 0) {\n      (*parameters)[1] = (*parameters)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)parameters + 0x3e) == '@') {\n      if (parameters[0x14] == (uint *)0x0) {\n        if (parameters[0x13] == (uint *)0x1) {\n          (*parameters)[4] = (uint)parameters[0x12] & 0xff;\n          parameters[0x14] = (uint *)((int)parameters[0x14] + 2);\n        }\n        else {\n          (*parameters)[4] = (uint)((int)parameters[0x12] << 0x10) >> 0x18;\n          parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n        }\n      }\n      else if (parameters[0x14] == (uint *)0x1) {\n        (*parameters)[4] = (uint)parameters[0x12] & 0xff;\n        parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n      }\n      else if (parameters[0x14] == (uint *)0x2) {\n        if (*(char *)((int)parameters + 0x3d) == '\\\"') {\n          **parameters = **parameters | 0x100;\n        }\n        else if (*(char *)((int)parameters + 0x3d) == '!') {\n          pointer = parameters[9];\n          parameters[9] = (uint *)((int)pointer + 1);\n          (*parameters)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = parameters[9];\n      parameters[9] = (uint *)((int)pointer + 1);\n      (*parameters)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "process_parameters_0800171a",
                "param_1": "parameters",
                "cVar1": "character",
                "puVar2": "pointer",
                "param_1[0xb]": "parameter11",
                "param_1[0xc]": "parameter12"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "update_settings_08001864",
            "code": "\nundefined4 updateSettings_08001864(uint **settings)\n\n{\n  uint *value;\n  \n  value = settings[0xb];\n  if (*(char *)((int)settings + 0x3d) == '!') {\n    if (*(short *)((int)settings + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*settings)[1] = (*settings)[1] & 0xfffff8ff;\n        **settings = **settings | 0x200;\n        settings[0xc] = (uint *)0x0;\n        *(undefined *)((int)settings + 0x3d) = 0x20;\n        if (*(char *)((int)settings + 0x3e) == '@') {\n          *(undefined *)((int)settings + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)settings + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*settings)[1] = (*settings)[1] & 0xfffff8ff;\n        settings[0xc] = (uint *)0x11;\n        *(undefined *)((int)settings + 0x3e) = 0;\n        *(undefined *)((int)settings + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      value = settings[9];\n      settings[9] = (uint *)((int)value + 1);\n      (*settings)[4] = (uint)*(byte *)value;\n      *(short *)((int)settings + 0x2a) = *(short *)((int)settings + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "update_settings_08001864",
                "param_1": "settings",
                "puVar1": "value",
                "param_1[0xb]": "settings[0xb]",
                "param_1[0xc]": "settings[0xc]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001718",
                "FUN_080015b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "update_string_08001904",
            "code": "\nundefined4 updateString_08001904(uint **stringPtr)\n\n{\n  uint *pointer;\n  \n  if (*(char *)((int)stringPtr + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)stringPtr + 0x2a) < 4) {\n      if (*(ushort *)((int)stringPtr + 0x2a) < 2) {\n        **stringPtr = **stringPtr & 0xfffffbff;\n        (*stringPtr)[1] = (*stringPtr)[1] & 0xfffff8ff;\n        pointer = pointerArray;\n        pointerArray = (uint *)((int)pointer + 1);\n        *(char *)pointer = (char)(*stringPtr)[4];\n        *(short *)((int)stringPtr + 0x2a) = *(short *)((int)stringPtr + 0x2a) + -1;\n        *(undefined *)((int)stringPtr + 0x3d) = 0x20;\n        stringPtr[0xc] = (uint *)0x0;\n        if (*(char *)((int)stringPtr + 0x3e) == '@') {\n          *(undefined *)((int)stringPtr + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)stringPtr + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      pointer = pointerArray;\n      pointerArray = (uint *)((int)pointer + 1);\n      *(char *)pointer = (char)(*stringPtr)[4];\n      *(short *)((int)stringPtr + 0x2a) = *(short *)((int)stringPtr + 0x2a) + -1;\n      if (*(short *)((int)stringPtr + 0x2a) == 3) {\n        (*stringPtr)[1] = (*stringPtr)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "update_string_08001904",
                "param_1": "stringPtr",
                "puVar1": "pointer",
                "param_1[9]": "pointerArray"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_param_080019a0",
            "code": "\nundefined4 process_param_080019a0(uint **param)\n\n{\n  uint *temp_var;\n  \n  if (*(short *)((int)param + 0x2a) == 4) {\n    (*param)[1] = (*param)[1] & 0xfffffbff;\n    temp_var = param[9];\n    param[9] = (uint *)((int)temp_var + 1);\n    *(char *)temp_var = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param + 0x2a) == 3) {\n    (*param)[1] = (*param)[1] & 0xfffffbff;\n    **param = **param & 0xfffffbff;\n    temp_var = param[9];\n    param[9] = (uint *)((int)temp_var + 1);\n    *(char *)temp_var = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  else if (*(short *)((int)param + 0x2a) == 2) {\n    if ((int)param[0xb] - 1U < 2) {\n      **param = **param & 0xfffffbff;\n      **param = **param | 0x100;\n    }\n    else {\n      **param = **param | 0x200;\n    }\n    temp_var = param[9];\n    param[9] = (uint *)((int)temp_var + 1);\n    *(char *)temp_var = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    temp_var = param[9];\n    param[9] = (uint *)((int)temp_var + 1);\n    *(char *)temp_var = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    (*param)[1] = (*param)[1] & 0xfffffcff;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    param[0xc] = (uint *)0x0;\n    if (*(char *)((int)param + 0x3e) == '@') {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    temp_var = param[9];\n    param[9] = (uint *)((int)temp_var + 1);\n    *(char *)temp_var = (char)(*param)[4];\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_param_080019a0",
                "param_1": "param",
                "puVar1": "temp_var"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001902",
                "FUN_080015b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "process_data_08001ab0",
            "code": "\nvoid processData_08001ab0(uint **data)\n\n{\n  int result;\n  uint *tempPtr;\n  uint *tempPtr2;\n  \n  if (*(byte *)((int)data + 0x3d) - 0x29 < 2) {\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)data + 0x3d) != '`') && (((*data)[1] & 0x800) == 0)) {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n    }\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3e) = 0;\n  }\n  **data = **data & 0xfffff7ff;\n  tempPtr2 = *data;\n  if ((tempPtr2[1] & 0x800) == 0) {\n    if (*(char *)((int)data + 0x3d) == '`') {\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      data[0x10] = (uint *)0x0;\n      if ((tempPtr2[5] & 0x40) != 0) {\n        tempPtr = data[9];\n        data[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)tempPtr2[4];\n      }\n      **data = **data & 0xfffffffe;\n      FUNC_08001aac(data);\n    }\n    else {\n      if ((tempPtr2[5] & 0x40) != 0) {\n        tempPtr = data[9];\n        data[9] = (uint *)((int)tempPtr + 1);\n        *(char *)tempPtr = (char)tempPtr2[4];\n      }\n      FUN_08003900(data);\n    }\n  }\n  else {\n    tempPtr2[1] = tempPtr2[1] & 0xfffff7ff;\n    if (*(char *)((int)data[0xd] + 0x35) == '\\x01') {\n      data[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      result = FUN_08000f8c(data[0xe]);\n      if (result != 0) {\n        if (((*data)[5] & 0x40) != 0) {\n          tempPtr2 = data[9];\n          data[9] = (uint *)((int)tempPtr2 + 1);\n          *(char *)tempPtr2 = (char)(*data)[4];\n        }\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xe][0x14])();\n      }\n    }\n    else {\n      data[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      result = FUN_08000f8c(data[0xd]);\n      if (result != 0) {\n        **data = **data & 0xfffffffe;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        (*(code *)data[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)data + 0x3d) == '(') && (((uint)data[0x10] & 4) != 0)) {\n    data[0xb] = (uint *)0xffff0000;\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    FUN_080038d0(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "process_data_08001ab0",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "tempPtr",
                "puVar3": "tempPtr2"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001aac",
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_param_08001bfc",
            "code": "\nundefined4 processParam_08001bfc(uint **param)\n\n{\n  char charValue;\n  uint *ptr1;\n  uint *ptr2;\n  \n  charValue = *(char *)((int)param + 0x3d);\n  (*param)[1] = (*param)[1] & 0xfffff8ff;\n  **param = **param | 1;\n  **param = **param & 0xfffffbff;\n  ptr1 = *param;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param + 0x3d) == '\\\"') || (*(char *)((int)param + 0x3d) == '*')) {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = param[9];\n      param[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    if (((*param)[5] & 0x40) != 0) {\n      ptr1 = param[9];\n      param[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    param[0x10] = (uint *)((uint)param[0x10] | 4);\n  }\n  if (param[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      param[0xb] = (uint *)0xffff0000;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUN_080038d0();\n    }\n    else if ((param[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    FUN_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_param_08001bfc",
                "param_1": "param",
                "cVar1": "charValue",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_data_08001d00",
            "code": "\nvoid processData_08001d00(int *data)\n\n{\n  int ptrData;\n  uint var2;\n  uint var3;\n  uint var4;\n  \n  ptrData = *data;\n  var4 = *(uint *)(ptrData + 0x18);\n  var2 = *(uint *)(ptrData + 0x14);\n  var3 = *(uint *)(ptrData + 4);\n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((var2 & 0x10001) == 0) || ((var3 & 0x200) == 0)) {\n      if (((var2 & 0x10008) == 0) || ((var3 & 0x200) == 0)) {\n        if (((var2 & 0x10002) != 0) && ((var3 & 0x200) != 0)) {\n          FUN_08001256(data);\n        }\n      }\n      else {\n        FUN_0800124a(data);\n      }\n    }\n    else {\n      FUN_080011c0(data);\n    }\n    if ((var4 & 0x100004) == 0) {\n      if ((((var2 & 0x10040) != 0) && ((var3 & 0x400) != 0)) && ((var2 & 0x10004) == 0)) {\n        FUN_08001904(data);\n        return;\n      }\n      if (((var2 & 0x10004) != 0) && ((var3 & 0x200) != 0)) {\n        FUN_080019a0(data);\n        return;\n      }\n    }\n    else {\n      if ((((var2 & 0x10080) != 0) && ((var3 & 0x400) != 0)) && ((var2 & 0x10004) == 0)) {\n        FUN_0800171a(data);\n        return;\n      }\n      if (((var2 & 0x10004) != 0) && ((var3 & 0x200) != 0)) {\n        FUN_08001864(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((var2 & 0x10002) != 0) && ((var3 & 0x200) != 0)) {\n      FUN_0800165a();\n      return;\n    }\n    if (((var2 & 0x10010) != 0) && ((var3 & 0x200) != 0)) {\n      FUN_08001bfc(data);\n      return;\n    }\n    if ((var4 & 0x100004) == 0) {\n      if ((((var2 & 0x10040) != 0) && ((var3 & 0x400) != 0)) && ((var2 & 0x10004) == 0)) {\n        FUN_0800160e(data);\n        return;\n      }\n      if (((var2 & 0x10004) != 0) && ((var3 & 0x200) != 0)) {\n        FUN_08001440(data);\n      }\n    }\n    else {\n      if ((((var2 & 0x10080) != 0) && ((var3 & 0x400) != 0)) && ((var2 & 0x10004) == 0)) {\n        FUN_080015bc(data);\n        return;\n      }\n      if (((var2 & 0x10004) != 0) && ((var3 & 0x200) != 0)) {\n        FUN_08001420(data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_data_08001d00",
                "param_1": "data",
                "iVar1": "ptrData",
                "uVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4"
            },
            "calling": [],
            "called": [
                "FUN_0800160e",
                "FUN_08001256",
                "FUN_080015bc",
                "FUN_08001440",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_080011c0",
                "FUN_0800165a",
                "FUN_0800124a",
                "FUN_08001864",
                "FUN_08001bfc",
                "FUN_0800171a",
                "FUN_080019a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "process_flags_08001e68",
            "code": "\nvoid processFlags_08001e68(uint **parameters)\n\n{\n  char charValue;\n  uint *pointer;\n  uint flagValue;\n  uint conditionValue;\n  \n  pointer = *parameters;\n  flagValue = pointer[5];\n  conditionValue = pointer[1];\n  if (((flagValue & 0x10100) != 0) && ((conditionValue & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 1);\n    pointer[5] = 0xfffffeff;\n  }\n  if (((flagValue & 0x10200) != 0) && ((conditionValue & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 2);\n    (*parameters)[5] = 0xfffffdff;\n  }\n  if (((flagValue & 0x10400) != 0) && ((conditionValue & 0x100) != 0)) {\n    charValue = *(char *)((int)parameters + 0x3d);\n    if (((*(char *)((int)parameters + 0x3e) == ' ') && (*(short *)((int)parameters + 0x2a) == 0)) &&\n       (((charValue == '!' || (charValue == ')')) || ((charValue == '(' && (parameters[0xc] == (uint *)0x21)))))) {\n      FUN_08001684(parameters);\n    }\n    else {\n      parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n      if (*(char *)((int)parameters + 0x3e) == '\\x10') {\n        **parameters = **parameters | 0x200;\n      }\n      (*parameters)[5] = 0xfffffbff;\n    }\n  }\n  if (((flagValue & 0x10800) != 0) && ((conditionValue & 0x100) != 0)) {\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 8);\n    (*parameters)[5] = 0xfffff7ff;\n  }\n  if (parameters[0x10] != (uint *)0x0) {\n    FUN_08001ab0(parameters);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "process_flags_08001e68",
                "param_1": "parameters",
                "puVar2": "pointer",
                "uVar3": "flagValue",
                "uVar4": "conditionValue",
                "cVar1": "charValue"
            },
            "calling": [],
            "called": [
                "FUN_08001684",
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "check_data_status_08001f9c",
            "code": "\n\n\nundefined4 check_data_status_08001f9c(void)\n\n{\n  int initial_data;\n  int current_data;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  initial_data = FUN_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      initial_data = FUN_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        current_data = FUN_08000e30();\n      } while ((uint)(current_data - initial_data) < 0x3e9);\n      return 3;\n    }\n    current_data = FUN_08000e30();\n  } while ((uint)(current_data - initial_data) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "check_data_status_08001f9c",
                "iVar1": "initial_data",
                "iVar2": "current_data"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "check_and_control_device_0800201c",
            "code": "\n\n\nundefined4 checkAndControlDevice_0800201c(uint *deviceConfig)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isFlagSet;\n  \n  if (deviceConfig == (uint *)0x0) {\n    return 1;\n  }\n  if ((*deviceConfig & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (deviceConfig[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (deviceConfig[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (deviceConfig[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (deviceConfig[1] == 0) {\n        startTime = FUN_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = FUN_08000e30();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = FUN_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = FUN_08000e30();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*deviceConfig & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (deviceConfig[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | deviceConfig[4] << 3;\n    }\n    else if (deviceConfig[3] == 0) {\n      _DAT_42470000 = 0;\n      startTime = FUN_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTime = FUN_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | deviceConfig[4] << 3;\n    }\n  }\n  if ((*deviceConfig & 8) != 0) {\n    if (deviceConfig[5] == 0) {\n      _DAT_42470e80 = 0;\n      startTime = FUN_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTime = FUN_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*deviceConfig & 4) != 0) {\n    isFlagSet = (_DAT_40023840 & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = FUN_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = FUN_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (deviceConfig[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (deviceConfig[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (deviceConfig[2] == 0) {\n      startTime = FUN_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = FUN_08000e30();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = FUN_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = FUN_08000e30();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isFlagSet) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (deviceConfig[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (deviceConfig[6] == 2) {\n    _DAT_42470060 = 0;\n    startTime = FUN_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             deviceConfig[7] | deviceConfig[8] | deviceConfig[9] << 6 | ((deviceConfig[10] >> 1) - 1) * 0x10000 |\n             deviceConfig[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startTime = FUN_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = FUN_08000e30();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = FUN_08000e30();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startTime = FUN_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = FUN_08000e30();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "check_and_control_device_0800201c",
                "param_1": "deviceConfig",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isFlagSet"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_clock_speed_080023b4",
            "code": "\n\n\nuint calculateClockSpeed_080023b4(void)\n\n{\n  undefined4 inputVariable;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = FUN_080002d0(result * 16000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)CARRY4(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,inputVariable);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = FUN_080002d0(result * 8000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)CARRY4(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,inputVariable);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_clock_speed_080023b4",
                "in_r3": "inputVariable",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "initialize_system_08002488",
            "code": "\n\n\nundefined4 initializeSystem_08002488(uint *configParams,uint numParams)\n\n{\n  int startTime;\n  int currentTime;\n  uint tempValue;\n  \n  if (configParams == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < numParams) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numParams);\n    if (numParams != (numParams & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configParams & 2) != 0) {\n    if ((*configParams & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*configParams & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | configParams[2];\n  }\n  if ((*configParams & 1) != 0) {\n    tempValue = configParams[1];\n    if (tempValue == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (tempValue - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = tempValue | _DAT_40023808 & 0xfffffffc;\n    startTime = FUN_08000e30();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == configParams[1] * 4) break;\n      currentTime = FUN_08000e30();\n      if (5000 < (uint)(currentTime - startTime)) {\n        return 3;\n      }\n    }\n  }\n  if (numParams < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numParams);\n    if (numParams != (numParams & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configParams & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | configParams[3];\n  }\n  if ((*configParams & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | configParams[4] << 3;\n  }\n  tempValue = FUN_080023b4();\n  DAT_2000002c = tempValue >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  FUN_08000d98(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "initialize_system_08002488",
                "param_1": "configParams",
                "param_2": "numParams",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "tempValue"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_080023b4",
                "FUN_08000e30",
                "FUN_08000d98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_value_080025e0",
            "code": "\nundefined4 get_data_value_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_value_080025e0"
            },
            "calling": [
                "FUN_080025ec",
                "FUN_0800260c",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "get_shifted_value_080025ec",
            "code": "\n\n\nuint getShiftedValue_080025ec(void)\n\n{\n  uint result;\n  \n  result = FUN_080025e0();\n  return result >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "get_shifted_value_080025ec",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "calculate_shifted_value_0800260c",
            "code": "\n\n\nuint calculateShiftedValue_0800260c(void)\n\n{\n  uint result;\n  \n  result = FUN_080025e0();\n  return result >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "calculate_shifted_value_0800260c",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "check_flags_0800262c",
            "code": "\n\n\nvoid check_flags_0800262c(int *ptr)\n\n{\n  if (((*(uint *)(*ptr + 0xc) & 0x100) != 0) && ((*(uint *)(*ptr + 8) & 0x1000) != 0)) {\n    FUN_08003594();\n    *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*ptr + 0xc) & 0x200) != 0) && ((*(uint *)(*ptr + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(ptr);\n    *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)ptr + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "check_flags_0800262c",
                "param_1": "ptr"
            },
            "calling": [],
            "called": [
                "FUN_0800268c",
                "FUN_08003594"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "update_flags_and_execute_0800268e",
            "code": "\nvoid updateFlagsAndExecute_0800268e(uint **inputData)\n\n{\n  uint *dataPointer;\n  \n  *(undefined *)((int)inputData + 0x39) = 2;\n  dataPointer = *inputData;\n  if ((dataPointer[8] & 0x1111) == 0) {\n    if ((dataPointer[8] & 0x444) == 0) {\n      *dataPointer = *dataPointer & 0xfffffffe;\n    }\n  }\n  FUN_0800340c(inputData);\n  *(undefined *)((int)inputData + 0x39) = 0;\n  *(undefined *)(inputData + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "update_flags_and_execute_0800268e",
                "param_1": "inputData",
                "puVar1": "dataPointer"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_conditions_080026ce",
            "code": "\nvoid processConditions_080026ce(int *inputArray)\n\n{\n  int value;\n  \n  value = *inputArray;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(inputArray + 6) = 1;\n    if ((*(uint *)(*inputArray + 0x18) & 3) == 0) {\n      FUN_08003754();\n      FUNC_080026ca(inputArray);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(inputArray + 6) = 0;\n  }\n  value = *inputArray;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(inputArray + 6) = 2;\n    if ((*(uint *)(*inputArray + 0x18) & 0x300) == 0) {\n      FUN_08003754(inputArray);\n      FUNC_080026ca(inputArray);\n    }\n    else {\n      FUNC_080026c8(inputArray);\n    }\n    *(undefined *)(inputArray + 6) = 0;\n  }\n  value = *inputArray;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(inputArray + 6) = 4;\n    if ((*(uint *)(*inputArray + 0x1c) & 3) == 0) {\n      FUN_08003754(inputArray);\n      FUNC_080026ca(inputArray);\n    }\n    else {\n      FUNC_080026c8(inputArray);\n    }\n    *(undefined *)(inputArray + 6) = 0;\n  }\n  value = *inputArray;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(inputArray + 6) = 8;\n    if ((*(uint *)(*inputArray + 0x1c) & 0x300) == 0) {\n      FUN_08003754(inputArray);\n      FUNC_080026ca(inputArray);\n    }\n    else {\n      FUNC_080026c8(inputArray);\n    }\n    *(undefined *)(inputArray + 6) = 0;\n  }\n  value = *inputArray;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    FUN_0800376e(inputArray);\n  }\n  value = *inputArray;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800293e(inputArray);\n  }\n  value = *inputArray;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_080026cc(inputArray);\n  }\n  value = *inputArray;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_0800293c(inputArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_conditions_080026ce",
                "param_1": "inputArray",
                "iVar1": "value"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800293c",
                "FUN_080026c8",
                "FUN_08003754",
                "FUN_080026ca",
                "FUN_0800293e",
                "FUN_0800376e",
                "FUN_080026cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_value_08002848",
            "code": "\nvoid updateBitValue_08002848(int data,uint bitIndex,int bitValue)\n\n{\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(data + 0x20) = *(uint *)(data + 0x20) | bitValue << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_value_08002848",
                "param_1": "data",
                "param_2": "bitIndex",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_permissions_08002864",
            "code": "\nundefined4 updatePermissions_08002864(uint **permissions,undefined4 value)\n\n{\n  bool isSpecialAddress;\n  uint *address;\n  \n  FUN_08002848(*permissions,value,0);\n  address = *permissions;\n  if (address == (uint *)0x40010000) {\n    isSpecialAddress = true;\n  }\n  else if (address == (uint *)0x40010400) {\n    isSpecialAddress = true;\n  }\n  else {\n    isSpecialAddress = false;\n  }\n  if (((isSpecialAddress) && ((address[8] & 0x1111) == 0)) && ((address[8] & 0x444) == 0)) {\n    address[0x11] = address[0x11] & 0xffff7fff;\n  }\n  address = *permissions;\n  if (((address[8] & 0x1111) == 0) && ((address[8] & 0x444) == 0)) {\n    *address = *address & 0xfffffffe;\n  }\n  *(undefined *)((int)permissions + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_permissions_08002864",
                "param_1": "permissions",
                "param_2": "value",
                "bVar1": "isSpecialAddress",
                "puVar2": "address"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "set_bit_value_080028d4",
            "code": "\nvoid setBitValue_080028d4(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "set_bit_value_080028d4",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_array_values_080028f0",
            "code": "\nundefined4 updateArrayValues_080028f0(uint **param_1,undefined4 value)\n\n{\n  uint *currentElement;\n  \n  FUN_080028d4(*param_1,value,0);\n  currentElement = *param_1;\n  if (((currentElement[8] & 0x1111) == 0) && ((currentElement[8] & 0x444) == 0)) {\n    currentElement[0x11] = currentElement[0x11] & 0xffff7fff;\n  }\n  currentElement = *param_1;\n  if (((currentElement[8] & 0x1111) == 0) && ((currentElement[8] & 0x444) == 0)) {\n    *currentElement = *currentElement & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_array_values_080028f0",
                "param_2": "value",
                "puVar1": "currentElement"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "clear_flags_08002940",
            "code": "\nvoid clearFlags_08002940(int *pointer)\n\n{\n  *(uint *)(*pointer + 0xc) = *(uint *)(*pointer + 0xc) & 0xfffffedf;\n  *(uint *)(*pointer + 0x14) = *(uint *)(*pointer + 0x14) & 0xfffffffe;\n  *(undefined *)((int)pointer + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "clear_flags_08002940",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "process_binary_data_0800295c",
            "code": "\nundefined4 processBinaryData_0800295c(int *data)\n\n{\n  short count;\n  byte *bytePtr;\n  \n  if (*(char *)((int)data + 0x39) != '!') {\n    return 2;\n  }\n  if (data[2] == 0x1000) {\n    *(uint *)(*data + 4) = *(ushort *)data[8] & 0x1ff;\n    if (data[4] == 0) {\n      data[8] = data[8] + 2;\n    }\n    else {\n      data[8] = data[8] + 1;\n    }\n  }\n  else {\n    bytePtr = (byte *)data[8];\n    data[8] = (int)(bytePtr + 1);\n    *(uint *)(*data + 4) = (uint)*bytePtr;\n  }\n  count = *(short *)((int)data + 0x26) + -1;\n  *(short *)((int)data + 0x26) = count;\n  if (count == 0) {\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffff7f;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "process_binary_data_0800295c",
                "param_1": "data",
                "sVar1": "count",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_and_set_values_080029c8",
            "code": "\nvoid calculateAndSetValues_080029c8(int *inputArray)\n\n{\n  int result1;\n  int result2;\n  int result3;\n  int result4;\n  int result5;\n  int result6;\n  int result7;\n  int result8;\n  int result9;\n  int result10;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       *(uint *)(*inputArray + 0xc) & 0xffff69f3 | inputArray[2] | inputArray[4] | inputArray[5] | inputArray[7];\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  if (inputArray[7] == 0x8000) {\n    result10 = *inputArray;\n    if ((result10 != 0x40011000) && (result10 != 0x40011400)) {\n      result1 = FUN_080025ec();\n      result6 = inputArray[1];\n      result2 = FUN_080025ec();\n      result7 = inputArray[1];\n      result3 = FUN_080025ec();\n      result8 = inputArray[1];\n      result4 = FUN_080025ec();\n      result9 = inputArray[1];\n      result5 = FUN_080025ec();\n      *(uint *)(result10 + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                          (int)(((ulonglong)(uint)(result5 * 0x19) /\n                                (ulonglong)(uint)(inputArray[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n             (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n      return;\n    }\n    result1 = FUN_0800260c();\n    result6 = inputArray[1];\n    result2 = FUN_0800260c();\n    result7 = inputArray[1];\n    result3 = FUN_0800260c();\n    result8 = inputArray[1];\n    result4 = FUN_0800260c();\n    result9 = inputArray[1];\n    result5 = FUN_0800260c();\n    *(uint *)(result10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 1) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 1) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 1)) / 100) * 0x10;\n    return;\n  }\n  result10 = *inputArray;\n  if ((result10 != 0x40011000) && (result10 != 0x40011400)) {\n    result1 = FUN_080025ec();\n    result6 = inputArray[1];\n    result2 = FUN_080025ec();\n    result7 = inputArray[1];\n    result3 = FUN_080025ec();\n    result8 = inputArray[1];\n    result4 = FUN_080025ec();\n    result9 = inputArray[1];\n    result5 = FUN_080025ec();\n    *(uint *)(result10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                        (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n           (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n    return;\n  }\n  result1 = FUN_0800260c();\n  result6 = inputArray[1];\n  result2 = FUN_0800260c();\n  result7 = inputArray[1];\n  result3 = FUN_0800260c();\n  result8 = inputArray[1];\n  result4 = FUN_0800260c();\n  result9 = inputArray[1];\n  result5 = FUN_0800260c();\n  *(uint *)(result10 + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(result4 * 0x19) / (uint)(result9 << 2) +\n                      (int)(((ulonglong)(uint)(result5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(result2 * 0x19) / (uint)(result7 << 2) +\n         (int)(((ulonglong)(uint)(result3 * 0x19) / (ulonglong)(uint)(result8 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(result1 * 0x19) / (ulonglong)(uint)(result6 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_and_set_values_080029c8",
                "param_1": "inputArray",
                "iVar1": "result1",
                "iVar2": "result2",
                "iVar3": "result3",
                "iVar4": "result4",
                "iVar5": "result5",
                "iVar6": "result6",
                "iVar7": "result7",
                "iVar8": "result8",
                "iVar9": "result9",
                "iVar10": "result10"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_080025ec",
                "FUN_0800260c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_param_conditions_08002d0c",
            "code": "\nundefined4 check_param_conditions_08002d0c(uint **param_pointer,uint param_2_value,uint param_3_value,int param_4_value,uint param_5_value)\n\n{\n  int temp_var;\n  \n  do {\n    if (((param_2_value & ~**param_pointer) == 0) != param_3_value) {\n      return 0;\n    }\n  } while ((param_5_value == 0xffffffff) ||\n          ((param_5_value != 0 && (temp_var = FUN_08000e30(), (uint)(temp_var - param_4_value) <= param_5_value))));\n  (*param_pointer)[3] = (*param_pointer)[3] & 0xfffffe5f;\n  (*param_pointer)[5] = (*param_pointer)[5] & 0xfffffffe;\n  *(undefined *)((int)param_pointer + 0x39) = 0x20;\n  *(undefined *)((int)param_pointer + 0x3a) = 0x20;\n  *(undefined *)(param_pointer + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_param_conditions_08002d0c",
                "param_1": "param_pointer",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "param_4": "param_4_value",
                "param_5": "param_5_value",
                "iVar1": "temp_var"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_data_08002d72",
            "code": "\nundefined4 initializeData_08002d72(int *dataPointer)\n\n{\n  if (dataPointer != (int *)0x0) {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 0x24;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffdfff;\n    FUN_080029c8(dataPointer);\n    *(uint *)(*dataPointer + 0x10) = *(uint *)(*dataPointer + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPointer + 0x14) = *(uint *)(*dataPointer + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) | 0x2000;\n    index = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 0x20;\n    *(undefined *)((int)dataPointer + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_data_08002d72",
                "param_1": "dataPointer",
                "param_1[0xf]": "index"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_08002d70",
                "FUN_080029c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 processData_08002dd0(int *dataPtr,ushort *ushortPtr,int size,undefined4 param)\n\n{\n  int returnValue;\n  undefined4 status;\n  \n  if (*(char *)((int)dataPtr + 0x39) == ' ') {\n    if (ushortPtr == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (size == 0) {\n      status = 1;\n    }\n    else if (*(char *)(dataPtr + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(dataPtr + 0xe) = 1;\n      dataPtr[0xf] = 0;\n      *(undefined *)((int)dataPtr + 0x39) = 0x21;\n      status = FUN_08000e30();\n      *(short *)(dataPtr + 9) = (short)size;\n      *(short *)((int)dataPtr + 0x26) = (short)size;\n      while (*(short *)((int)dataPtr + 0x26) != 0) {\n        *(short *)((int)dataPtr + 0x26) = *(short *)((int)dataPtr + 0x26) + -1;\n        if (dataPtr[2] == 0x1000) {\n          returnValue = FUN_08002d0c(dataPtr,0x80,0,status,param);\n          if (returnValue != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = *ushortPtr & 0x1ff;\n          if (dataPtr[4] == 0) {\n            ushortPtr = ushortPtr + 1;\n          }\n          else {\n            ushortPtr = (ushort *)((int)ushortPtr + 1);\n          }\n        }\n        else {\n          returnValue = FUN_08002d0c(dataPtr,0x80,0,status,param);\n          if (returnValue != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = (uint)*(byte *)ushortPtr;\n          ushortPtr = (ushort *)((int)ushortPtr + 1);\n        }\n      }\n      returnValue = FUN_08002d0c(dataPtr,0x40,0,status,param);\n      if (returnValue == 0) {\n        *(undefined *)((int)dataPtr + 0x39) = 0x20;\n        *(undefined *)(dataPtr + 0xe) = 0;\n        status = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "dataPtr",
                "param_2": "ushortPtr",
                "param_3": "size",
                "param_4": "param",
                "iVar1": "returnValue",
                "uVar2": "status"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08002d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_inputs_and_set_values_08002eb2",
            "code": "\nundefined4 validate_inputs_and_set_values_08002eb2(int *input_array,int value_1,int value_2)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = value_1;\n    *(short *)(input_array + 9) = (short)value_2;\n    *(short *)((int)input_array + 0x26) = (short)value_2;\n    value_3 = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_inputs_and_set_values_08002eb2",
                "param_1": "input_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[0xf]": "value_3"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_input_08002efa",
            "code": "\nundefined4 validate_input_08002efa(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[0xf]"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "update_flag_and_value_08002f4c",
            "code": "\nundefined4 updateFlagAndValue_08002f4c(int *pointer)\n\n{\n  *(uint *)(*pointer + 0xc) = *(uint *)(*pointer + 0xc) & 0xffffffbf;\n  *(undefined *)((int)pointer + 0x39) = 0x20;\n  FUN_08003f48();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "update_flag_and_value_08002f4c",
                "param_1": "pointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_binary_data_08002f66",
            "code": "\nundefined4 processBinaryData_08002f66(int *binaryData)\n\n{\n  byte *targetByte;\n  short remainingSteps;\n  undefined *targetPointer;\n  \n  if (*(char *)((int)binaryData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (binaryData[2] == 0x1000) {\n    if (binaryData[4] == 0) {\n      *(ushort *)binaryData[10] = (ushort)((uint)(*(int *)(*binaryData + 4) << 0x17) >> 0x17);\n      binaryData[10] = binaryData[10] + 2;\n    }\n    else {\n      *(ushort *)binaryData[10] = (ushort)*(undefined4 *)(*binaryData + 4) & 0xff;\n      binaryData[10] = binaryData[10] + 1;\n    }\n  }\n  else if (binaryData[4] == 0) {\n    targetPointer = (undefined *)binaryData[10];\n    binaryData[10] = (int)(targetPointer + 1);\n    *targetPointer = (char)*(undefined4 *)(*binaryData + 4);\n  }\n  else {\n    targetByte = (byte *)binaryData[10];\n    binaryData[10] = (int)(targetByte + 1);\n    *targetByte = (byte)*(undefined4 *)(*binaryData + 4) & 0x7f;\n  }\n  remainingSteps = *(short *)((int)binaryData + 0x2e) + -1;\n  *(short *)((int)binaryData + 0x2e) = remainingSteps;\n  if (remainingSteps != 0) {\n    return 0;\n  }\n  *(uint *)(*binaryData + 0xc) = *(uint *)(*binaryData + 0xc) & 0xfffffedf;\n  *(uint *)(*binaryData + 0x14) = *(uint *)(*binaryData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)binaryData + 0x3a) = 0x20;\n  FUN_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_binary_data_08002f66",
                "param_1": "binaryData",
                "pbVar1": "targetByte",
                "sVar2": "remainingSteps",
                "puVar3": "targetPointer"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "handle_flags_08002ffc",
            "code": "\nvoid handleFlags_08002ffc(uint **parameters)\n\n{\n  int indexVar;\n  uint value2;\n  uint *pointerVar;\n  uint value4;\n  uint value5;\n  \n  pointerVar = *parameters;\n  value5 = *pointerVar;\n  value2 = pointerVar[3];\n  if ((((value5 & 0xf) == 0) && ((value5 & 0x20) != 0)) && ((value2 & 0x20) != 0)) {\n    FUN_08002f66(parameters);\n    return;\n  }\n  if (((value5 & 0xf) == 0) || ((value4 = pointerVar[5] & 1, value4 == 0 && ((value2 & 0x120) == 0)))) {\n    if (((value5 & 0x80) != 0) && ((value2 & 0x80) != 0)) {\n      FUN_0800295c(parameters);\n      return;\n    }\n    if (((value5 & 0x40) != 0) && ((value2 & 0x40) != 0)) {\n      FUN_08002f4c(parameters);\n    }\n  }\n  else {\n    if (((value5 & 1) != 0) && ((value2 & 0x100) != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 1);\n    }\n    if (((value5 & 4) != 0) && (value4 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 2);\n    }\n    if (((value5 & 2) != 0) && (value4 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 4);\n    }\n    if (((value5 & 8) != 0) && (value4 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 8);\n    }\n    if (parameters[0xf] != (uint *)0x0) {\n      if (((value5 & 0x20) != 0) && ((value2 & 0x20) != 0)) {\n        FUN_08002f66(parameters);\n      }\n      if ((((uint)parameters[0xf] & 8) == 0) && (((*parameters)[5] & 0x40) == 0)) {\n        FUNC_08003f94(parameters);\n        parameters[0xf] = (uint *)0x0;\n        return;\n      }\n      FUN_08002940(parameters);\n      pointerVar = *parameters;\n      if ((pointerVar[5] & 0x40) == 0) {\n        FUNC_08003f94(parameters);\n        return;\n      }\n      pointerVar[5] = pointerVar[5] & 0xffffffbf;\n      if (parameters[0xd] == (uint *)0x0) {\n        FUNC_08003f94(parameters);\n        return;\n      }\n      parameters[0xd][0x14] = (uint)&LAB_0800311c_1;\n      indexVar = FUN_08000f8c(parameters[0xd]);\n      if (indexVar != 0) {\n        (*(code *)parameters[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "handle_flags_08002ffc",
                "param_1": "parameters",
                "iVar1": "indexVar",
                "uVar2": "value2",
                "puVar3": "pointerVar",
                "uVar4": "value4",
                "uVar5": "value5"
            },
            "calling": [],
            "called": [
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002940",
                "FUN_08002f4c",
                "FUN_08000f8c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_byte_values_0800312c",
            "code": "\nbyte combineByteValues_0800312c(int address)\n\n{\n  return *(byte *)(address + 0x3a) | *(byte *)(address + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_byte_values_0800312c",
                "param_1": "address"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "extracted_bit_08003138",
            "code": "\nuint extractedBit_08003138(uint value,int address)\n\n{\n  return *(uint *)(address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "extracted_bit_08003138",
                "param_1": "value",
                "param_2": "address"
            },
            "calling": [
                "FUN_08004110",
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "update_value_in_array_0800314e",
            "code": "\nvoid updateValueInArray_0800314e(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (value & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "update_value_in_array_0800314e",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_value_in_array_0800316c",
            "code": "\nvoid updateValueInArray_0800316c(uint value,int array)\n\n{\n  uint index;\n  \n  index = (value << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) & ~(1 << (value & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_value_in_array_0800316c",
                "param_1": "value",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_config_flag_080031fc",
            "code": "\n\n\nundefined4 setConfigFlag_080031fc(undefined4 configIndex)\n\n{\n  undefined4 baseAddress;\n  \n  switch(configIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    baseAddress = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    baseAddress = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    baseAddress = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    baseAddress = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    baseAddress = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    baseAddress = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    baseAddress = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    baseAddress = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    baseAddress = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    baseAddress = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    baseAddress = 0x40022800;\n    break;\n  default:\n    baseAddress = 0;\n  }\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_config_flag_080031fc",
                "param_1": "configIndex",
                "uVar1": "baseAddress"
            },
            "calling": [
                "FUN_08003486",
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_status_08003380",
            "code": "\nundefined4 check_status_08003380(undefined4 input,undefined4 data,undefined4 flag1,undefined4 flag2)\n\n{\n  int result;\n  \n  result = FUN_0800354a(input,&DAT_08005a18,flag1,flag2,flag2);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_status_08003380",
                "param_1": "input",
                "param_2": "data",
                "param_3": "flag1",
                "param_4": "flag2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "identify_flag_0800339c",
            "code": "\nundefined4 identifyFlag_0800339c(undefined4 inputValue,undefined4 param2,undefined4 flagValue,undefined4 param4)\n\n{\n  int result;\n  uint shiftedValue;\n  \n  result = FUN_0800354a(inputValue,&DAT_08005a3c,flagValue,param4,param4);\n  shiftedValue = (uint)(result << 0xc) >> 0x1b;\n  if (shiftedValue == 3) {\n    return 8;\n  }\n  if (shiftedValue != 4) {\n    if (shiftedValue != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "identify_flag_0800339c",
                "param_1": "inputValue",
                "param_2": "param2",
                "param_3": "flagValue",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "shiftedValue"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_memory_permissions_080033c8",
            "code": "\n\n\nvoid clearMemoryPermissions_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_memory_permissions_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "execute_code_080033d8",
            "code": "\nvoid executeCode_080033d8(undefined4 argument)\n\n{\n  int returnValue;\n  int array [5];\n  \n  array[0] = FUN_080034f4(argument,&DAT_08005a18);\n  if ((array[0] != 0) && ((returnValue = FUN_08003380(argument), returnValue == 0 || (returnValue == 0x10)))) {\n    FUN_08000f72(array,returnValue);\n    FUN_08000f56(array);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "execute_code_080033d8",
                "param_1": "argument",
                "iVar1": "returnValue",
                "local_1c": "array"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f56",
                "FUN_080034f4",
                "FUN_08003380",
                "FUN_08000f72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "initialize_and_execute_0800340c",
            "code": "\nvoid initialize_and_execute_0800340c(void)\n\n{\n  FUN_080035fc();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "initialize_and_execute_0800340c"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "process_data_08003414",
            "code": "\nvoid processData_08003414(undefined4 inputData)\n\n{\n  int result;\n  uint flag;\n  int dataBuffer [16];\n  \n  dataBuffer[0] = FUN_080034f4(inputData,&DAT_08005a3c);\n  if ((dataBuffer[0] != 0) &&\n     ((((result = FUN_0800339c(inputData), result == 0 || (result == 4)) || (result == 8)) ||\n      ((result == 0xc || (result == 0x18)))))) {\n    flag = FUN_0800354a(inputData,&DAT_08005a3c);\n    if ((flag & 0x100000) == 0) {\n      FUN_08002864(dataBuffer,result);\n    }\n    else {\n      FUN_080028f0(dataBuffer,result);\n    }\n    FUN_0800268e(dataBuffer);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "process_data_08003414",
                "param_1": "inputData",
                "iVar1": "result",
                "uVar2": "flag",
                "local_4c": "dataBuffer"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_080034f4",
                "FUN_08002864",
                "FUN_0800268e",
                "FUN_080028f0",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_0800346c",
            "code": "\nvoid initialize_0800346c(void)\n\n{\n  FUN_08000e30();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_0800346c"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "initialize_08003476",
            "code": "\nvoid initialize_08003476(void)\n\n{\n  FUN_08000e18();\n  FUN_08000f4e();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "initialize_08003476"
            },
            "calling": [],
            "called": [
                "FUN_08003474",
                "FUN_08000f4e",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "initialize_flag_08003486",
            "code": "\nvoid initializeFlag_08003486(uint flagIndex,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 shiftedValue;\n  uint bitMask;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined4 localVariable3;\n  \n  shiftedValue = FUN_080031fc((flagIndex << 0x18) >> 0x1c);\n  bitMask = 1 << (flagIndex & 0xf) & 0xffff;\n  localVariable3 = 2;\n  localVariable1 = param2;\n  localVariable2 = param3;\n  FUN_08000fb4(shiftedValue,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "initialize_flag_08003486",
                "param_1": "flagIndex",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "shiftedValue",
                "local_24": "bitMask",
                "local_20": "localVariable1",
                "local_1c": "localVariable2",
                "local_18": "localVariable3"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "execute_conditionally_080034b6",
            "code": "\nvoid executeConditionally_080034b6(undefined4 argument1,undefined2 argument2,int condition,undefined4 data)\n\n{\n  if (condition == 0) {\n    FUN_08001198(argument1,argument2,0,data,data);\n    return;\n  }\n  FUN_08001198(argument1,argument2,1,data,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "execute_conditionally_080034b6",
                "param_1": "argument1",
                "param_2": "argument2",
                "param_3": "condition",
                "param_4": "data"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_system_080034ce",
            "code": "\nvoid initializeSystem_080034ce(void)\n\n{\n  FUN_08000de4();\n  FUN_08000c8c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_in_array_080034da",
            "code": "\nundefined4 find_value_in_array_080034da(int value_to_find,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value_to_find) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_in_array_080034da",
                "param_1": "value_to_find",
                "param_2": "array"
            },
            "calling": [
                "FUN_080034f4",
                "FUN_080034da"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "check_if_valid_080034f4",
            "code": "\nundefined4 checkIfValid_080034f4(int value)\n\n{\n  undefined4 returnValue;\n  \n  if (value != -1) {\n    returnValue = FUN_080034da();\n    return returnValue;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "check_if_valid_080034f4",
                "param_1": "value",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_080033d8",
                "FUN_08003414",
                "FUN_08003d18",
                "FUN_08003978",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_element_08003506",
            "code": "\nint find_element_08003506(int target,short *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 2) == target) break;\n    array = array + 6;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_element_08003506",
                "param_1": "target",
                "param_2": "array"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "check_parameter_0800351e",
            "code": "\nundefined4 checkParameter_0800351e(int inputParameter)\n\n{\n  undefined4 returnValue;\n  \n  if (inputParameter != 0) {\n    returnValue = FUN_08003506();\n    return returnValue;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "check_parameter_0800351e",
                "param_1": "inputParameter",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800447c",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_index_0800352e",
            "code": "\nundefined4 find_value_index_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "check_param_0800354a",
            "code": "\nundefined4 check_param_0800354a(int input_param)\n\n{\n  undefined4 result;\n  \n  if (input_param == -1) {\n    return 0xffffffff;\n  }\n  result = FUN_0800352e();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "check_param_0800354a",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003380",
                "FUN_08003978"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "compare_param1_to_param2_0800355e",
            "code": "\nundefined4 compareParam1ToParam2_0800355e(int inputValue,short *inputArray)\n\n{\n  if (inputValue == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*inputArray == -1) {\n      return 0;\n    }\n    if (inputValue == *inputArray) break;\n    inputArray = inputArray + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "compare_param1_to_param2_0800355e",
                "param_1": "inputValue",
                "param_2": "inputArray"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "check_and_return_non_zero_value_08003582",
            "code": "\nint check_and_return_non_zero_value_08003582(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    if (value1 == 0) {\n      return value2;\n    }\n    if (value2 == 0) {\n      return value1;\n    }\n    value1 = 0;\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "check_and_return_non_zero_value_08003582",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_function_08003594",
            "code": "\nvoid executeCallbackFunction_08003594(void)\n\n{\n  if (DAT_20000188 != (functionPointer *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_function_08003594",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_memory_080035bc",
            "code": "\n\n\nvoid initializeMemory_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_memory_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "update_flags_based_on_param_080035fc",
            "code": "\n\n\nvoid updateFlagsBasedOnParam_080035fc(int *param)\n\n{\n  if (*param == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*param == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*param == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*param == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*param == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*param == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*param == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*param == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*param == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*param == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*param == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*param == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*param == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*param == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "update_flags_based_on_param_080035fc",
                "param_1": "param"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtract_four_08003750(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08003754",
                "FUN_0800376e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_function_if_condition_met_08003754",
            "code": "\nvoid executeFunctionIfConditionMet_08003754(int inputParam)\n\n{\n  int functionAddress;\n  \n  functionAddress = FUN_08003750();\n  if ((*(functionPointer **)(functionAddress + 0x48) != (functionPointer *)0x0) && (*(char *)(inputParam + 0x18) == '\\x01')) {\n    (**(functionPointer **)(functionAddress + 0x48))(functionAddress,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_function_if_condition_met_08003754",
                "param_1": "inputParam",
                "iVar1": "functionAddress",
                "code": "functionPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_callback_0800376e",
            "code": "\nvoid executeCallback_0800376e(void)\n\n{\n  int callbackAddress;\n  \n  callbackAddress = FUN_08003750();\n  if (*(code **)(callbackAddress + 0x44) != (code *)0x0) {\n    (**(code **)(callbackAddress + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_callback_0800376e",
                "iVar1": "callbackAddress"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "check_and_execute_functions_0800377c",
            "code": "\nvoid check_and_execute_functions_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    FUN_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    FUN_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "check_and_execute_functions_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtractFour_0800387c(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003880",
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "process_input_08003880",
            "code": "\nvoid processInput_08003880(int input,int flag,int comparison,undefined4 parameter)\n\n{\n  int result;\n  \n  result = FUN_0800387c();\n  if (comparison == *(int *)(input + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      FUN_08001460(input,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    FUN_080014ec(input,result + 0x68,0x20,8,parameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "process_input_08003880",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "comparison",
                "param_4": "parameter",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_080014ec",
                "FUN_08001460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "execute_function_if_valid_080038d0",
            "code": "\nvoid executeFunctionIfValid_080038d0(undefined4 inputParam)\n\n{\n  int functionPtr;\n  \n  functionPtr = FUN_0800387c();\n  if (((*(code **)(functionPtr + 0x60) != (code *)0x0) && (*(char *)(functionPtr + 0x5e) == '\\x01')) &&\n     (*(char *)(functionPtr + 0x2c) != ' ')) {\n    (**(code **)(functionPtr + 0x60))(functionPtr + 0x68);\n  }\n  FUN_08001578(inputParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "execute_function_if_valid_080038d0",
                "param_1": "inputParam",
                "iVar1": "functionPtr"
            },
            "calling": [
                "FUN_08001684",
                "FUN_08001ab0",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "check_and_call_function_08003900",
            "code": "\nvoid checkAndCallFunction_08003900(undefined4 inputData)\n\n{\n  int result;\n  \n  result = FUN_0800387c();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    FUN_08001578(inputData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "check_and_call_function_08003900",
                "param_1": "inputData",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001578"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_08003978",
            "code": "\n\n\nvoid configureUART_08003978(int *uartConfig)\n\n{\n  int uartPin1Periph;\n  int uartPin2Periph;\n  undefined4 uartPin1Settings;\n  uint uartPin2Settings;\n  uint uartPin1Bit;\n  uint uartPin2Bit;\n  uint uartPin2Mode;\n  undefined4 uartEnabled;\n  uint uartPin2BaudRate;\n  \n  if (uartConfig != (int *)0x0) {\n    uartPin1Periph = FUN_080034f4((int)*(short *)(uartConfig + 0x16),&DAT_08005ca0);\n    uartPin2Periph = FUN_080034f4((int)*(short *)((int)uartConfig + 0x5a),&DAT_08005c10);\n    if ((uartPin2Periph == 0) || (uartPin1Periph == 0)) {\n      FUN_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",uartPin2Periph);\n    }\n    else {\n      uartPin1Periph = FUN_08003582(uartPin1Periph);\n      *uartConfig = uartPin1Periph;\n      if (uartPin1Periph == 0) {\n        FUN_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPin1Periph == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(uartConfig + 0x11) = 0;\n          *(undefined *)(uartConfig + 0x17) = 0x25;\n        }\n        else if (uartPin1Periph == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(uartConfig + 0x11) = 1;\n          *(undefined *)(uartConfig + 0x17) = 0x26;\n        }\n        else if (uartPin1Periph == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(uartConfig + 0x11) = 2;\n          *(undefined *)(uartConfig + 0x17) = 0x27;\n        }\n        else if (uartPin1Periph == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(uartConfig + 0x11) = 3;\n          *(undefined *)(uartConfig + 0x17) = 0x34;\n        }\n        else if (uartPin1Periph == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(uartConfig + 0x11) = 4;\n          *(undefined *)(uartConfig + 0x17) = 0x35;\n        }\n        else if (uartPin1Periph == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(uartConfig + 0x11) = 5;\n          *(undefined *)(uartConfig + 0x17) = 0x47;\n        }\n        else if (uartPin1Periph == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(uartConfig + 0x11) = 6;\n          *(undefined *)(uartConfig + 0x17) = 0x52;\n        }\n        else if (uartPin1Periph == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(uartConfig + 0x11) = 7;\n          *(undefined *)(uartConfig + 0x17) = 0x53;\n        }\n        uartPin1Settings = FUN_080031fc((uint)((int)*(short *)((int)uartConfig + 0x5a) << 0x18) >> 0x1c);\n        uartPin2Settings = FUN_0800354a((int)*(short *)((int)uartConfig + 0x5a),&DAT_08005c10);\n        uartPin1Bit = 1 << (*(ushort *)((int)uartConfig + 0x5a) & 0xf) & 0xffff;\n        uartPin2Bit = (uartPin2Settings >> 3 & 1) << 4 | uartPin2Settings & 7;\n        uartPin2Mode = (uartPin2Settings << 0x1a) >> 0x1e;\n        uartPin2BaudRate = (uartPin2Settings << 0x11) >> 0x19;\n        uartEnabled = 3;\n        FUN_08000fb4(uartPin1Settings,&uartPin1Bit);\n        uartPin1Settings = FUN_080031fc((uint)((int)*(short *)(uartConfig + 0x16) << 0x18) >> 0x1c);\n        uartPin2Settings = FUN_0800354a((int)*(short *)(uartConfig + 0x16),&DAT_08005ca0);\n        uartPin1Bit = 1 << (*(ushort *)(uartConfig + 0x16) & 0xf) & 0xffff;\n        uartPin2Bit = (uartPin2Settings >> 3 & 1) << 4 | uartPin2Settings & 7;\n        uartPin2Mode = (uartPin2Settings << 0x1a) >> 0x1e;\n        FUN_08000fb4(uartPin1Settings,&uartPin1Bit);\n        (&DAT_200002b4)[*(byte *)(uartConfig + 0x11)] = uartConfig + 1;\n        uartConfig[1] = *uartConfig;\n        uartConfig[2] = uartConfig[0x12];\n        uartConfig[3] = uartConfig[0x13];\n        uartConfig[4] = uartConfig[0x14];\n        uartConfig[5] = uartConfig[0x15];\n        uartConfig[6] = 0xc;\n        uartConfig[7] = 0;\n        uartConfig[8] = 0;\n        FUN_08002d72(uartConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_08003978",
                "param_1": "uartConfig",
                "iVar1": "uartPin1Periph",
                "iVar2": "uartPin2Periph",
                "uVar3": "uartPin1Settings",
                "uVar4": "uartPin2Settings",
                "local_2c": "uartPin1Bit",
                "local_28": "uartPin2Bit",
                "local_24": "uartPin2Mode",
                "local_20": "uartEnabled",
                "local_1c": "uartPin2BaudRate"
            },
            "calling": [
                "FUN_08004388",
                "FUN_08003cc8"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_08003582",
                "FUN_08002d72",
                "FUN_08000fb4",
                "FUN_08004fdc",
                "FUN_0800354a",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_data_08003cc8",
            "code": "\nvoid initializeData_08003cc8(void)\n\n{\n  int result1;\n  undefined4 result2;\n  \n  result1 = FUN_080034f4(0x38,&DAT_08005ca0);\n  if (result1 != 0) {\n    result2 = FUN_080034f4(0x38,&DAT_08005ca0);\n    DAT_2000008a = FUN_0800351e(result2,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    FUN_08003978(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_data_08003cc8",
                "iVar1": "result1",
                "uVar2": "result2"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_0800351e",
                "FUN_08003978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "find_and_process_data_08003d18",
            "code": "\nuint find_and_process_data_08003d18(undefined4 input_value,uint input_length)\n\n{\n  int initial_value;\n  int found_value;\n  uint index;\n  \n  initial_value = FUN_08000e30();\n  found_value = FUN_080034f4(0x38,&DAT_08005ca0);\n  if (found_value == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 10 &&\n      (((&DAT_200002b4)[index] == 0 ||\n       (found_value = FUN_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[index] != found_value))));\n      index = index + 1 & 0xff) {\n  }\n  if (9 < index) {\n    if ((9 < DAT_20000074) && (FUN_08003cc8(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    index = (uint)DAT_20000074;\n  }\n  do {\n    found_value = FUN_08002dd0((&DAT_200002b4)[index],input_value,input_length & 0xffff,1000);\n    if (found_value == 0) {\n      return input_length;\n    }\n    found_value = FUN_08000e30();\n  } while ((uint)(found_value - initial_value) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "find_and_process_data_08003d18",
                "param_1": "input_value",
                "param_2": "input_length",
                "iVar1": "initial_value",
                "iVar2": "found_value",
                "uVar3": "index"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_080034f4",
                "FUN_08000e30",
                "FUN_08003cc8",
                "FUN_08002dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "check_value_for_condition_08003dd0",
            "code": "\nbool checkValueForCondition_08003dd0(int inputParameter)\n\n{\n  uint computedValue;\n  \n  computedValue = FUN_0800312c((&DAT_200002b4)[*(byte *)(inputParameter + 0x44)]);\n  return (computedValue & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "check_value_for_condition_08003dd0",
                "param_1": "inputParameter",
                "uVar1": "computedValue"
            },
            "calling": [
                "FUN_08003e54",
                "FUN_08003e18"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "check_flag_validity_08003df4",
            "code": "\nbool checkFlagValidity_08003df4(int flagIndex)\n\n{\n  uint flagResult;\n  \n  flagResult = FUN_0800312c((&DAT_200002b4)[*(byte *)(flagIndex + 0x44)]);\n  return (flagResult & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "check_flag_validity_08003df4",
                "param_1": "flagIndex",
                "uVar1": "flagResult"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "extract_data_08003e18",
            "code": "\nundefined4 extractData_08003e18(int dataPointer,undefined *output,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  if (dataPointer == 0) {\n    return 0xffffffff;\n  }\n  result = FUN_08003dd0();\n  if (result == 0) {\n    *output = *(undefined *)(dataPointer + 0x45);\n    FUN_08002efa((&DAT_200002b4)[*(byte *)(dataPointer + 0x44)],dataPointer + 0x45,1,&DAT_200002b4,param4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "extract_data_08003e18",
                "param_1": "dataPointer",
                "param_2": "output",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_data_08003e54",
            "code": "\nvoid updateData_08003e54(int dataPtr,undefined4 newValue,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  int result;\n  uint index;\n  \n  if (dataPtr != 0) {\n    result = FUN_08003dd0();\n    if (result == 0) {\n      index = (uint)*(byte *)(dataPtr + 0x44);\n      *(undefined4 *)(&DAT_20000214 + index * 4) = newValue;\n      *(int *)(&DAT_2000023c + index * 4) = dataPtr;\n      FUN_08000e60((int)*(char *)(dataPtr + 0x5c),0,1,index,unusedParam2);\n      FUN_08000ec4((int)*(char *)(dataPtr + 0x5c));\n      FUN_08002efa((&DAT_200002b4)[*(byte *)(dataPtr + 0x44)],dataPtr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_data_08003e54",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "iVar1": "result",
                "uVar2": "index"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08000e60",
                "FUN_08003dd0",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_data_08003eac",
            "code": "\nvoid updateData_08003eac(int dataAddress,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataAddress != 0) {\n    byteValue = *(byte *)(dataAddress + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_2000028c + (uint)byteValue * 4) = dataAddress;\n    FUN_08000e60((int)*(char *)(dataAddress + 0x5c),0,2);\n    FUN_08000ec4((int)*(char *)(dataAddress + 0x5c));\n    FUN_08002eb2((&DAT_200002b4)[*(byte *)(dataAddress + 0x44)],\n                 *(int *)(dataAddress + 0x68) + (uint)*(ushort *)(dataAddress + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08000e60",
                "FUN_08000ec4",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_element_index_08003f00",
            "code": "\nuint find_element_index_08003f00(int element)\n\n{\n  uint index;\n  \n  if (element == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (element == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_element_index_08003f00",
                "param_1": "element",
                "uVar1": "index"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_function_based_on_value_08003f24",
            "code": "\nvoid executeFunctionBasedOnValue_08003f24(void)\n\n{\n  uint value;\n  \n  value = FUN_08003f00();\n  if (value < 10) {\n    (**(code **)(&DAT_20000214 + value * 4))(*(undefined4 *)(&DAT_2000023c + value * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_function_based_on_value_08003f24",
                "uVar1": "value"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "process_binary_function_08003f48",
            "code": "\nvoid processBinaryFunction_08003f48(void)\n\n{\n  uint randomIndex;\n  int result;\n  int dataPointer;\n  \n  randomIndex = FUN_08003f00();\n  dataPointer = *(int *)(&DAT_2000028c + randomIndex * 4);\n  if ((randomIndex < 10) && (result = (**(code **)(&DAT_20000264 + randomIndex * 4))(dataPointer), result != -1)) {\n    FUN_08002eb2((&DAT_200002b4)[*(byte *)(dataPointer + 0x44)],\n                 *(int *)(dataPointer + 0x68) + (uint)*(ushort *)(dataPointer + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "process_binary_function_08003f48",
                "uVar1": "randomIndex",
                "iVar2": "result",
                "iVar3": "dataPointer"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocateMemory_08004094(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocatedMemory = DAT_200002dc;\n  if (DAT_200002dc + size <= endMemory) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocatedMemory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "endMemory"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_default_value_080040d0",
            "code": "\nundefined4 get_default_value_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_default_value_080040d0"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "initialize_memory_080040d6",
            "code": "\nundefined4 initializeMemory_080040d6(undefined4 baseAddress,int offset)\n\n{\n  *(undefined4 *)(offset + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "initialize_memory_080040d6",
                "param_1": "baseAddress",
                "param_2": "offset"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "check_result_080040e0",
            "code": "\nint checkResult_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "check_result_080040e0",
                "undefined4": "int"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_application_080040e4",
            "code": "\nundefined4 initializeApplication_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_application_080040e4"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_080040e8",
            "code": "\nvoid initialize_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_080040e8",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "execute_process_080040ec",
            "code": "\nvoid execute_process_080040ec(undefined4 arg_1,undefined4 arg_2,undefined4 arg_3,undefined4 arg_4)\n\n{\n  FUN_08003d18(arg_2,arg_3,arg_3,arg_4,arg_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "execute_process_080040ec",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "arg_3",
                "param_4": "arg_4"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infiniteLoop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initializeData_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "check_for_valid_condition_0800410c",
            "code": "\nundefined4 check_for_valid_condition_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "check_for_valid_condition_0800410c"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "process_data_08004110",
            "code": "\nvoid processData_08004110(uint size,undefined4 mode,undefined4 data,undefined *buffer)\n\n{\n  int result;\n  undefined *lookupTable;\n  int index;\n  \n  if (size < 0x60) {\n    index = (int)*(short *)(&DAT_08005d3c + size * 2);\n    lookupTable = &DAT_08005d3c;\n  }\n  else {\n    index = -1;\n    lookupTable = buffer;\n  }\n  if (index != -1) {\n    result = FUN_08003138(index,&DAT_200002e0,data,lookupTable,buffer);\n    if (result != 0) {\n      result = FUN_0800355e(index,&DAT_08005a18);\n      if (result == 0) {\n        result = FUN_0800355e(index,&DAT_08005a3c);\n        if (result != 0) {\n          FUN_08003414(index);\n        }\n      }\n      else {\n        FUN_080033d8(index);\n      }\n      FUN_0800316c(index,&DAT_200002e0);\n    }\n    switch(mode) {\n    case 0:\n      FUN_08003486(index,0);\n      break;\n    case 1:\n      FUN_08003486(index,1,0);\n      break;\n    case 2:\n      FUN_08003486(index,0,1);\n      break;\n    case 3:\n      FUN_08003486(index,0,2);\n    }\n    FUN_0800314e(index,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "process_data_08004110",
                "param_1": "size",
                "param_2": "mode",
                "param_3": "data",
                "param_4": "buffer",
                "iVar1": "result",
                "puVar2": "lookupTable",
                "iVar3": "index"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_0800314e",
                "FUN_080033d8",
                "FUN_08003138",
                "FUN_08003414",
                "FUN_0800355e",
                "FUN_08003486",
                "FUN_0800316c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "process_data_080041bc",
            "code": "\nvoid processData_080041bc(uint value,undefined4 count,undefined4 data,undefined *buffer)\n\n{\n  int result;\n  undefined4 shiftedValue;\n  undefined *ptr;\n  uint index;\n  \n  if (value < 0x60) {\n    index = (uint)*(short *)(&DAT_08005d3c + value * 2);\n    ptr = &DAT_08005d3c;\n  }\n  else {\n    index = 0xffffffff;\n    ptr = buffer;\n  }\n  if ((index != 0xffffffff) &&\n     (result = FUN_08003138(index,&DAT_2000030c,data,ptr,buffer), result != 0)) {\n    shiftedValue = FUN_0800318c((index << 0x18) >> 0x1c);\n    FUN_080034b6(shiftedValue,1 << (index & 0xf) & 0xffff,count);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "process_data_080041bc",
                "param_1": "value",
                "param_2": "count",
                "param_3": "data",
                "param_4": "buffer",
                "iVar1": "result",
                "uVar2": "shiftedValue",
                "puVar3": "ptr",
                "uVar4": "index"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_0800318c",
                "FUN_08003138",
                "FUN_080034b6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_08004204",
            "code": "\nvoid initialize_08004204(void)\n\n{\n  FUN_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_shifted_difference_08004240",
            "code": "\nushort calculate_shifted_difference_08004240(int input_value)\n\n{\n  return (*(short *)(input_value + 0x138) + 0x40) - *(short *)(input_value + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_shifted_difference_08004240",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_data_080042ac",
            "code": "\nvoid updateData_080042ac(int data)\n\n{\n  int result;\n  ushort newIndex;\n  undefined newValue;\n  \n  result = FUN_08003e18(data,&newValue);\n  if ((result == 0) &&\n     (newIndex = *(short *)(data + 100) + 1U & 0x3f, newIndex != *(ushort *)(data + 0x66))) {\n    *(undefined *)(*(int *)(data + 0x60) + (uint)*(ushort *)(data + 100)) = newValue;\n    *(ushort *)(data + 100) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_data_080042ac",
                "param_1": "data",
                "iVar1": "result",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "initialize_data_080042e8",
            "code": "\nundefined4 initializeData_080042e8(int dataAddress,undefined dataValue)\n\n{\n  byte byteValue;\n  byte maskedValue;\n  int counter;\n  \n  *(undefined *)(dataAddress + 0x10) = 1;\n  counter = *(ushort *)(dataAddress + 0x140) + 1;\n  byteValue = (byte)counter;\n  maskedValue = byteValue & 0x7f;\n  if (counter == 0) {\n    maskedValue = -(-byteValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(dataAddress + 0x142) == (ushort)maskedValue);\n  *(undefined *)(*(int *)(dataAddress + 0x13c) + (uint)*(ushort *)(dataAddress + 0x140)) = dataValue;\n  *(ushort *)(dataAddress + 0x140) = (ushort)maskedValue;\n  counter = FUN_08003df4(dataAddress + 0xd4);\n  if (counter == 0) {\n    FUN_08003eac(dataAddress + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "initialize_data_080042e8",
                "param_1": "dataAddress",
                "param_2": "dataValue",
                "bVar1": "byteValue",
                "bVar2": "maskedValue",
                "iVar3": "counter"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_parameters_08004364",
            "code": "\nvoid initializeParameters_08004364(int structAddress)\n\n{\n  *(int *)(structAddress + 0x134) = structAddress + 0x11;\n  *(undefined2 *)(structAddress + 0x138) = 0;\n  *(undefined2 *)(structAddress + 0x13a) = 0;\n  *(int *)(structAddress + 0x13c) = structAddress + 0x51;\n  *(undefined2 *)(structAddress + 0x140) = 0;\n  *(undefined2 *)(structAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_parameters_08004364",
                "param_1": "structAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_serial_08004388",
            "code": "\nvoid initializeSerial_08004388(int serialPortAddress,undefined4 baudRate,byte serialConfig)\n\n{\n  uint extraOutput;\n  byte configBits;\n  int configValue;\n  code *unrecoveredJumpTable;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = baudRate;\n  *(byte *)(serialPortAddress + 0x144) = serialConfig;\n  configBits = serialConfig & 7;\n  if (configBits == 4) {\n    configValue = 7;\n  }\n  else if (configBits == 6) {\n    configValue = 8;\n  }\n  else if (configBits == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((serialConfig & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((serialConfig & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((serialConfig & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    FUN_08003978(serialPortAddress + 0xd4);\n    FUN_08003e54(serialPortAddress + 0xd4,0x80042ad);\n    return;\n  }\n  unrecoveredJumpTable = (code *)0x8004432;\n  FUN_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (extraOutput < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + extraOutput * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_serial_08004388",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "serialConfig",
                "extraout_r1": "extraOutput",
                "bVar1": "configBits",
                "iVar2": "configValue",
                "UNRECOVERED_JUMPTABLE": "unrecoveredJumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003e54",
                "FUN_08003978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "assign_jump_table_value_08004444",
            "code": "\nvoid assignJumpTableValue_08004444(int memoryAddress1,uint value2)\n\n{\n  undefined2 assignedValue;\n  code *jumpTableFunction;\n  \n  if (value2 < 0x60) {\n    assignedValue = *(undefined2 *)(&DAT_08005d3c + value2 * 2);\n  }\n  else {\n    assignedValue = 0xffff;\n  }\n  *(undefined2 *)(memoryAddress1 + 0x12e) = assignedValue;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunction)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "assign_jump_table_value_08004444",
                "param_1": "memoryAddress1",
                "param_2": "value2",
                "uVar1": "assignedValue",
                "UNRECOVERED_JUMPTABLE": "jumpTableFunction"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_parameter_value_08004460",
            "code": "\nvoid set_parameter_value_08004460(int base_address,uint index)\n\n{\n  undefined2 result_value;\n  \n  if (index < 0x60) {\n    result_value = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    result_value = 0xffff;\n  }\n  *(undefined2 *)(base_address + 300) = result_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_parameter_value_08004460",
                "param_1": "base_address",
                "param_2": "index",
                "uVar1": "result_value"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_function_0800447c",
            "code": "\nundefined4 *\ninitializeFunction_0800447c(undefined4 *outputArray,undefined4 inputValue,undefined4 param3Value,undefined4 param4Value)\n\n{\n  undefined2 resultValue;\n  \n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  *outputArray = &PTR_FUN_080042e8_1_08005ed4;\n  if (outputArray == &DAT_20000338) {\n    FUN_08004444(&DAT_20000338,0x4c,param3Value,&DAT_20000338,param4Value);\n    FUN_08004460(&DAT_20000338,0x4d);\n  }\n  else {\n    resultValue = FUN_0800351e(inputValue,&DAT_08005c10);\n    *(undefined2 *)((int)outputArray + 0x12e) = resultValue;\n    resultValue = FUN_0800351e(inputValue,&DAT_08005ca0);\n    *(undefined2 *)(outputArray + 0x4b) = resultValue;\n  }\n  FUN_08004364(outputArray);\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_function_0800447c",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "param3Value",
                "param_4": "param4Value",
                "uVar1": "resultValue"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004444",
                "FUN_08004364",
                "FUN_0800351e",
                "FUN_08004460"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "check_and_execute_080044d8",
            "code": "\nvoid check_and_execute_080044d8(int value,int flag,undefined4 param_3,undefined4 param_4)\n\n{\n  if (value != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    FUN_0800447c(&DAT_20000338,0x40004800,param_3,0xffff,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "check_and_execute_080044d8",
                "param_1": "value",
                "param_2": "flag"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initializeData_08004544(undefined4 *outputPointer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *outputPointer = &DAT_08005f28;\n  *(undefined *)(outputPointer + 1) = value1;\n  *(undefined *)((int)outputPointer + 5) = value2;\n  *(undefined *)((int)outputPointer + 6) = value3;\n  *(undefined *)((int)outputPointer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "outputPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "check_parameters_08004560",
            "code": "\nvoid check_parameters_08004560(int value1,int value2)\n\n{\n  if ((value1 == 1) && (value2 == 0xffff)) {\n    FUN_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "check_parameters_08004560",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_value_and_shift_08004640",
            "code": "\nuint combineValueAndShift_08004640(int inputValue,uint mask)\n\n{\n  return mask | inputValue << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_value_and_shift_08004640",
                "param_1": "inputValue",
                "param_2": "mask"
            },
            "calling": [
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000b04",
                "FUN_08000998",
                "FUN_080007f0",
                "FUN_08000a7a",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_application_08004648",
            "code": "\nvoid initializeApplication_08004648(void)\n\n{\n  FUN_08000e3c(3);\n  FUN_08000d8e();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_application_08004648"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000e3c",
                "FUN_08000d8e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "execute_infinite_loop_08004658",
            "code": "\nvoid execute_infinite_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  FUN_08000c4c();\n  do {\n    FUN_08000c64();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "execute_infinite_loop_08004658"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004338",
                "FUN_08000c64",
                "FUN_08000c4c",
                "FUN_08004646"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar countSetBits_08004678(uint number)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "number",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int isFirstInitialization,int paramValue,undefined4 param3,undefined4 param4)\n\n{\n  if (isFirstInitialization != 1) {\n    return;\n  }\n  if (paramValue == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    FUN_080047fe(0,&label1,&DAT_20000000,&DAT_20000488,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "isFirstInitialization",
                "param_2": "paramValue",
                "param_3": "param3",
                "param_4": "param4",
                "LAB_0800468c_1": "label1"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "execute_next_step_080047c0",
            "code": "\nvoid executeNextStep_080047c0(int context)\n\n{\n  int index;\n  \n  if (*(int *)(context + 8) != 0) {\n    (**(code **)(context + 0xc))();\n    return;\n  }\n  FUN_08005760();\n  index = FUN_08004678();\n  if ((&DAT_20000494)[index * 5] != 0) {\n    executeNextStep_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "execute_next_step_080047c0",
                "param_1": "context",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_execute_function_080047d0",
            "code": "\nvoid checkAndExecuteFunction_080047d0(void)\n\n{\n  int returnValue;\n  \n  returnValue = FUN_08004678();\n  if ((&DAT_20000494)[returnValue * 5] != 0) {\n    FUN_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_execute_function_080047d0",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_08004678",
                "FUN_080047c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "copy_parameters_080047fe",
            "code": "\nvoid copyParameters_080047fe(undefined4 destination,undefined4 source)\n\n{\n  FUN_08004844(source,destination);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "copy_parameters_080047fe",
                "param_1": "destination",
                "param_2": "source"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "print_assertion_failure_08004808",
            "code": "\nvoid printAssertionFailure_08004808(undefined4 filename,undefined4 lineNumber,char *condition,undefined4 functionName)\n\n{\n  undefined4 filePtr;\n  char *message;\n  undefined8 result;\n  undefined4 args;\n  \n  filePtr = *(undefined4 *)(DAT_200000a0 + 0xc);\n  args = functionName;\n  if (condition == (char *)0x0) goto LAB_0800482c;\n  message = \", function: \";\n  do {\n    FUN_08004860(filePtr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,filename,lineNumber\n                 ,message,condition,args);\n    result = FUN_080051ac();\n    lineNumber = (undefined4)((ulonglong)result >> 0x20);\n    filePtr = (undefined4)result;\nLAB_0800482c:\n    condition = \"\";\n    message = condition;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "print_assertion_failure_08004808",
                "param_1": "filename",
                "param_2": "lineNumber",
                "param_3": "condition",
                "param_4": "functionName",
                "uVar1": "filePtr",
                "pcVar2": "message",
                "uVar3": "result",
                "uVar4": "args"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "shift_left_by32_bits_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong shiftLeftBy32Bits_08004844(undefined4 inputParam,uint value)\n\n{\n  return (unsignedLongLong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "shift_left_by32_bits_08004844",
                "param_1": "inputParam",
                "param_2": "value",
                "ulonglong": "unsignedLongLong"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "execute_function_08004860",
            "code": "\nvoid executeFunction_08004860(undefined4 inputParam1,undefined4 inputParam2,undefined4 stackVar1,undefined4 stackVar2)\n\n{\n  undefined4 stackVar3;\n  undefined4 stackVar4;\n  \n  stackVar3 = stackVar1;\n  stackVar4 = stackVar2;\n  FUN_08004a84(DAT_200000a0,inputParam1,inputParam2,&stackVar3,inputParam1,&stackVar3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "execute_function_08004860",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "stackVar1",
                "param_4": "stackVar2",
                "uStack_8": "stackVar3",
                "uStack_4": "stackVar4"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int counter;\n  \n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (*(code *)(&DAT_08006008)[counter])();\n  }\n  FUNC_080059f8();\n  for (counter = 0; counter != 10; counter = counter + 1) {\n    (*(code *)(&DAT_08006008)[counter])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "counter"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "memset_080048cc",
            "code": "\nvoid memset_080048cc(undefined *dest,undefined value,int size)\n\n{\n  undefined *end_ptr;\n  \n  end_ptr = dest + size;\n  for (; dest != end_ptr; dest = dest + 1) {\n    *dest = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "memset_080048cc",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "end_ptr"
            },
            "calling": [
                "FUN_08005400",
                "FUN_08005374",
                "FUN_0800532c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_data_080048dc",
            "code": "\nvoid updateData_080048dc(undefined4 *ptrArray,int arraySize,undefined4 var1,undefined4 var2)\n\n{\n  int *ptrValue1;\n  int **ptrValue2;\n  int **ptrPtr1;\n  int **ptrPtr2;\n  int **ptrPtr3;\n  int **ptrPtr4;\n  bool isConditionTrue;\n  \n  if (arraySize == 0) {\n    return;\n  }\n  ptrPtr4 = (int **)(arraySize + -4);\n  if (*(int *)(arraySize + -4) < 0) {\n    ptrPtr4 = (int **)((int)ptrPtr4 + *(int *)(arraySize + -4));\n  }\n  FUNC_0800557c();\n  ptrPtr2 = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    ptrPtr4[1] = (int *)0x0;\n    ptrPtr1 = ptrValue2;\n    DAT_200005c8 = ptrPtr4;\n  }\n  else {\n    ptrPtr2 = DAT_200005c8;\n    if (ptrPtr4 < DAT_200005c8) {\n      ptrPtr1 = (int **)*ptrPtr4;\n      ptrPtr2 = (int **)((int)ptrPtr4 + (int)ptrPtr1);\n      isConditionTrue = DAT_200005c8 == ptrPtr2;\n      if (isConditionTrue) {\n        ptrPtr2 = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      ptrPtr4[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = ptrPtr4;\n      if (isConditionTrue) {\n        ptrPtr2 = (int **)((int)ptrPtr2 + (int)ptrPtr1);\n        *ptrPtr4 = (int *)ptrPtr2;\n      }\n    }\n    else {\n      do {\n        ptrPtr3 = ptrPtr2;\n        ptrPtr2 = (int **)ptrPtr3[1];\n        if (ptrPtr2 == (int **)0x0) break;\n      } while (ptrPtr2 <= ptrPtr4);\n      ptrPtr1 = (int **)*ptrPtr3;\n      if ((int **)((int)ptrPtr3 + (int)ptrPtr1) == ptrPtr4) {\n        ptrPtr1 = (int **)((int)ptrPtr1 + (int)*ptrPtr4);\n        *ptrPtr3 = (int *)ptrPtr1;\n        if (ptrPtr2 == (int **)((int)ptrPtr3 + (int)ptrPtr1)) {\n          ptrValue1 = *ptrPtr2;\n          ptrPtr2 = (int **)ptrPtr2[1];\n          ptrPtr3[1] = (int *)ptrPtr2;\n          ptrPtr1 = (int **)((int)ptrPtr1 + (int)ptrValue1);\n          *ptrPtr3 = (int *)ptrPtr1;\n        }\n      }\n      else if (ptrPtr4 < (int **)((int)ptrPtr3 + (int)ptrPtr1)) {\n        *ptrArray = 0xc;\n      }\n      else {\n        ptrPtr1 = (int **)((int)ptrPtr4 + (int)*ptrPtr4);\n        isConditionTrue = ptrPtr2 == ptrPtr1;\n        if (isConditionTrue) {\n          ptrPtr1 = (int **)*ptrPtr2;\n          ptrPtr2 = (int **)ptrPtr2[1];\n        }\n        ptrPtr4[1] = (int *)ptrPtr2;\n        if (isConditionTrue) {\n          ptrPtr1 = (int **)((int)ptrPtr1 + (int)*ptrPtr4);\n          *ptrPtr4 = (int *)ptrPtr1;\n        }\n        ptrPtr3[1] = (int *)ptrPtr4;\n      }\n    }\n  }\n  FUNC_0800557e(ptrArray,ptrPtr1,ptrPtr2,var2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_data_080048dc",
                "param_1": "ptrArray",
                "param_2": "arraySize",
                "param_3": "var1",
                "param_4": "var2",
                "piVar1": "ptrValue1",
                "extraout_r1": "ptrValue2",
                "ppiVar2": "ptrPtr1",
                "ppiVar3": "ptrPtr2",
                "ppiVar4": "ptrPtr3",
                "ppiVar5": "ptrPtr4",
                "bVar6": "isConditionTrue"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800557e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_block_08004978",
            "code": "\nuint allocate_memory_block_08004978(undefined4 *pointer_to_size,uint requested_size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *next_block;\n  uint size_difference;\n  uint *previous_block;\n  uint allocated_size;\n  \n  allocated_size = (requested_size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < requested_size)) {\n    *pointer_to_size = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_block = DAT_200005c8;\n    previous_block = DAT_200005c8;\n    while (next_block = current_block, next_block != (uint *)0x0) {\n      size_difference = *next_block - allocated_size;\n      if (-1 < (int)size_difference) {\n        if (size_difference < 0xc) {\n          if (previous_block == next_block) {\n            current_block = (uint *)previous_block[1];\n          }\n          else {\n            current_block = (uint *)next_block[1];\n          }\n          if (previous_block != next_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = next_block;\n            current_block = DAT_200005c8;\n          }\n        }\n        else {\n          *next_block = size_difference;\n          *(uint *)((int)next_block + size_difference) = allocated_size;\n          previous_block = (uint *)((int)next_block + size_difference);\n          current_block = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      previous_block = next_block;\n      current_block = (uint *)next_block[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = FUN_0800500c(pointer_to_size);\n    }\n    current_block = (uint *)FUN_0800500c(pointer_to_size,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (remaining_space = FUN_0800500c(pointer_to_size,(int)previous_block - (int)current_block), remaining_space != -1)))) {\n      *previous_block = allocated_size;\n      current_block = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_block;\n      FUNC_0800557e(pointer_to_size);\n      allocated_size = (int)previous_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(previous_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)previous_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *pointer_to_size = 0xc;\n    FUNC_0800557e(pointer_to_size);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_block_08004978",
                "param_1": "pointer_to_size",
                "param_2": "requested_size",
                "puVar1": "current_block",
                "iVar2": "remaining_space",
                "puVar3": "next_block",
                "uVar4": "size_difference",
                "puVar5": "previous_block",
                "uVar6": "allocated_size"
            },
            "calling": [
                "FUN_080054fc",
                "FUN_08005374"
            ],
            "called": [
                "FUN_0800557c",
                "FUN_0800557e",
                "FUN_0800500c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_data_08004a34",
            "code": "\nuint processData_08004a34(int inputData,byte byteData,byte **outputData)\n\n{\n  int temp1;\n  byte *temp2;\n  byte *temp3;\n  uint result;\n  \n  temp2 = outputData[2] + -1;\n  outputData[2] = temp2;\n  if ((-1 < (int)temp2) ||\n     (((int)outputData[6] <= (int)temp2 && (temp2 = (byte *)(uint)byteData, temp2 != (byte *)0xa))))\n  {\n    temp2 = *outputData;\n    *outputData = temp2 + 1;\n    *temp2 = byteData;\n    return (uint)byteData;\n  }\n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (outputData == (byte **)&DAT_08005fc0) {\n    outputData = *(byte ***)(inputData + 4);\n  }\n  else if (outputData == (byte **)&DAT_08005fe0) {\n    outputData = *(byte ***)(inputData + 8);\n  }\n  else if (outputData == (byte **)&DAT_08005fa0) {\n    outputData = *(byte ***)(inputData + 0xc);\n  }\n  outputData[2] = outputData[6];\n  temp3 = (byte *)(uint)*(ushort *)(outputData + 3);\n  temp1 = (int)temp3 << 0x1c;\n  if (((temp1 < 0) && (temp3 = outputData[4], temp3 != (byte *)0x0)) ||\n     (temp1 = FUN_080050d0(inputData,outputData,temp1,temp3,temp2), temp1 == 0)) {\n    temp1 = (int)*outputData - (int)outputData[4];\n    result = (uint)byteData;\n    if ((temp1 < (int)outputData[5]) || (temp1 = FUN_080052cc(inputData,outputData), temp1 == 0)) {\n      outputData[2] = outputData[2] + -1;\n      temp2 = *outputData;\n      *outputData = temp2 + 1;\n      *temp2 = byteData;\n      if ((byte *)(temp1 + 1) != outputData[5]) {\n        if (-1 < (int)((uint)*(ushort *)(outputData + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp1 = FUN_080052cc(inputData,outputData);\n      if (temp1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_data_08004a34",
                "param_1": "inputData",
                "param_2": "byteData",
                "param_3": "outputData",
                "iVar1": "temp1",
                "pbVar2": "temp2",
                "pbVar3": "temp3",
                "uVar4": "result"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080052cc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "iterate_and_process_08004a60",
            "code": "\nint iterateAndProcess_08004a60(undefined4 ptr_param_1,undefined4 ptr_param_2,undefined *ptr_data,int data_length)\n\n{\n  int iteration_result;\n  undefined *ptr_end_of_data;\n  int current_index;\n  \n  ptr_end_of_data = ptr_data + data_length;\n  current_index = data_length;\n  do {\n    if (ptr_data == ptr_end_of_data) {\n      return 0;\n    }\n    iteration_result = FUN_08004a34(ptr_param_1,*ptr_data,ptr_param_2,data_length,current_index);\n    data_length = iteration_result + 1;\n    ptr_data = ptr_data + 1;\n  } while (data_length != 0);\n  return iteration_result;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "iterate_and_process_08004a60",
                "param_1": "ptr_param_1",
                "param_2": "ptr_param_2",
                "param_3": "ptr_data",
                "param_4": "data_length",
                "iVar1": "iteration_result",
                "puVar2": "ptr_end_of_data",
                "iVar3": "current_index"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "parse_and_process_input_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint parse_and_process_input_08004a84(int input_address,undefined4 *input_data,byte *input_string,int *input_length)\n\n{\n  int result;\n  int *ptr;\n  bool found_digit;\n  byte *ptr1;\n  byte *ptr2;\n  int unaffected_r9;\n  int temp_var;\n  int *output_address;\n  uint flags;\n  int precision;\n  undefined4 temp_value;\n  int width;\n  int total_length;\n  byte format_character;\n  undefined space_flag;\n  undefined extra_flag;\n  undefined hash_flag;\n  undefined4 temp;\n  \n  output_address = input_length;\n  if ((input_address != 0) && (*(int *)(input_address + 0x18) == 0)) {\n    FUN_080053a0();\n  }\n  if (input_data == &DAT_08005fc0) {\n    input_data = *(undefined4 **)(input_address + 4);\n  }\n  else if (input_data == (undefined4 *)&DAT_08005fe0) {\n    input_data = *(undefined4 **)(input_address + 8);\n  }\n  else if (input_data == (undefined4 *)&DAT_08005fa0) {\n    input_data = *(undefined4 **)(input_address + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(input_data + 3) << 0x1c)) || (input_data[4] == 0)) &&\n     (temp_var = FUN_080050d0(input_address,input_data), temp_var != 0)) {\n    return -1;\n  }\n  total_length = 0;\n  space_flag = 0x20;\n  extra_flag = 0x30;\n  ptr1 = input_string;\nLAB_08004ac6:\n  ptr2 = ptr1;\n  if (*ptr2 != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  ptr1 = ptr2 + 1;\n  if (*ptr2 != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  temp_var = (int)ptr2 - (int)input_string;\n  if (temp_var != 0) {\n    result = FUN_08004a60(input_address,input_data,input_string,temp_var);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(input_data + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_length;\n    }\n    total_length = total_length + temp_var;\n  }\n  if (*ptr2 == 0) goto LAB_08004c70;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  temp_value = 0;\n  hash_flag = 0;\n  temp = 0;\n  ptr1 = ptr2 + 1;\n  while( true ) {\n    temp_var = FUN_08000230(\"#-0+ \",*ptr1);\n    input_string = ptr1 + 1;\n    if (temp_var == 0) break;\n    flags = 1 << (temp_var + 0xf7ffa094U & 0xff) | flags;\n    ptr1 = input_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    hash_flag = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    hash_flag = 0x2b;\n  }\n  if (*ptr1 == 0x2a) {\n    ptr = output_address + 1;\n    temp_var = *output_address;\n    output_address = ptr;\n    if (temp_var < 0) {\n      width = -temp_var;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    found_digit = false;\n    temp_var = width;\n    input_string = ptr1;\n    while( true ) {\n      if (9 < *input_string - 0x30) break;\n      temp_var = temp_var * 10 + (*input_string - 0x30);\n      found_digit = true;\n      input_string = input_string + 1;\n    }\n    if (!found_digit) goto LAB_08004bae;\n  }\n  width = temp_var;\nLAB_08004bae:\n  if (*input_string == 0x2e) {\n    if (input_string[1] == 0x2a) {\n      precision = *output_address;\n      if (precision < 0) {\n        precision = -1;\n      }\n      input_string = input_string + 2;\n      output_address = output_address + 1;\n    }\n    else {\n      found_digit = false;\n      precision = 0;\n      temp_var = 0;\n      while( true ) {\n        input_string = input_string + 1;\n        if (9 < *input_string - 0x30) break;\n        temp_var = temp_var * 10 + (*input_string - 0x30);\n        found_digit = true;\n      }\n      if (found_digit) {\n        precision = temp_var;\n      }\n    }\n  }\n  temp_var = FUN_08000230(&DAT_08005f72,*input_string,3);\n  if (temp_var != 0) {\n    flags = flags | 0x40 << (temp_var + 0xf7ffa08eU & 0xff);\n    input_string = input_string + 1;\n  }\n  format_character = *input_string;\n  input_string = input_string + 1;\n  temp_var = FUN_08000230(\"efgEFG\",format_character,6);\n  if (temp_var == 0) {\n    unaffected_r9 = FUN_08004d9c(input_address,&flags,input_data,0x8004a61,&output_address);\n    if (unaffected_r9 == -1) goto LAB_08004c70;\n  }\n  else {\n    output_address = (int *)(((int)output_address + 7U & 0xfffffff8) + 8);\n  }\n  total_length = total_length + unaffected_r9;\n  ptr1 = input_string;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "parse_and_process_input_08004a84",
                "param_1": "input_address",
                "param_2": "input_data",
                "param_3": "input_string",
                "param_4": "input_length",
                "iVar1": "result",
                "piVar2": "ptr",
                "bVar3": "found_digit",
                "pbVar4": "ptr1",
                "pbVar5": "ptr2",
                "unaff_r9": "unaffected_r9",
                "iVar6": "temp_var",
                "local_8c": "output_address",
                "local_88": "flags",
                "local_84": "precision",
                "local_80": "temp_value",
                "local_7c": "width",
                "local_74": "total_length",
                "local_70": "format_character",
                "local_6f": "space_flag",
                "local_6e": "extra_flag",
                "local_45": "hash_flag",
                "local_30": "temp"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_08004a60",
                "FUN_08000230",
                "FUN_080053a0",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocessData_08004cb0(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint limit;\n  uint count;\n  bool condition;\n  \n  limit = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    limit = data[2];\n  }\n  *output = limit;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = limit + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  limit = (uint)*(byte *)((int)data + 0x43);\n  if (limit != 0) {\n    limit = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + limit + 0x43) = 0x30;\n    *(undefined *)((int)data + limit + 0x44) = *(undefined *)((int)data + 0x45);\n    limit = limit + 2;\n  }\n  index = (*callback)(input,param,(int)data + 0x43,limit);\n  if (index != -1) {\n    limit = data[3];\n    condition = (*data & 6) == 4;\n    if (condition) {\n      limit = limit - *output;\n    }\n    if (condition) {\n      limit = limit & ~((int)limit >> 0x1f);\n    }\n    else {\n      limit = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      limit = limit + (data[2] - data[4]);\n    }\n    count = 0;\n    while( true ) {\n      if (limit == count) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      count = count + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "limit",
                "uVar4": "count",
                "bVar5": "condition"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "parse_and_format_number_08004d9c",
            "code": "\nuint parseAndFormatNumber_08004d9c(undefined4 arg1,uint *number,undefined4 arg3,code *callback,uint **arg5)\n\n{\n  byte byteValue;\n  int result;\n  uint *pointer;\n  int tempVar;\n  char *hexDigits;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint tempValue;\n  char *formattedNumber;\n  char *numberString;\n  uint outputSize [2];\n  \n  byteValue = *(byte *)(number + 6);\n  numberString = (char *)((int)number + 0x43);\n  if (byteValue != 0x6e) {\n    if (byteValue < 0x6f) {\n      if (byteValue != 99) {\n        if (byteValue < 100) {\n          if (byteValue == 0) goto LAB_08004f56;\n          if (byteValue != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)number + 0x45) = 0x58;\n          hexDigits = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          base = *number;\n          pointer = *arg5;\n          *arg5 = pointer + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)pointer;\n          }\n          else {\n            value = *pointer;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *number = base | 0x20;\n          }\n          if (value == 0) {\n            *number = *number & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)number + 0x43) = 0;\n        }\n        else {\n          if ((byteValue != 100) && (byteValue != 0x69)) goto LAB_08004dcc;\n          value = *number;\n          pointer = *arg5;\n          if ((value & 0x80) == 0) {\n            *arg5 = pointer + 1;\n            if ((value & 0x40) == 0) goto LAB_08004dec;\n            value = (uint)(short)*(ushort *)pointer;\n          }\n          else {\n            *arg5 = pointer + 1;\nLAB_08004dec:\n            value = *pointer;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)number + 0x43) = 0x2d;\n          }\n          hexDigits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        tempValue = number[1];\n        number[2] = tempValue;\n        formattedNumber = numberString;\n        if ((int)tempValue < 0) {\n          if (value != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)number + 0x42) = *hexDigits;\n          formattedNumber = (char *)((int)number + 0x42);\n        }\n        else {\n          *number = *number & 0xfffffffb;\n          if (value == 0) {\n            if (tempValue != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              tempValue = value / base;\n              formattedNumber = formattedNumber + -1;\n              *formattedNumber = hexDigits[value - base * tempValue];\n              value = tempValue;\n            } while (tempValue != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*number << 0x1f) < 0)) && ((int)number[1] <= (int)number[4]))\n        {\n          formattedNumber[-1] = '0';\n          formattedNumber = formattedNumber + -1;\n        }\n        number[4] = (int)numberString - (int)formattedNumber;\n        numberString = formattedNumber;\n        goto LAB_08004ec2;\n      }\n      pointer = *arg5;\n      *arg5 = pointer + 1;\n      *(char *)((int)number + 0x42) = (char)*pointer;\nLAB_08004e2c:\n      numberString = (char *)((int)number + 0x42);\n      value = 1;\n    }\n    else {\n      if (byteValue != 0x73) {\n        if (byteValue < 0x74) {\n          if (byteValue == 0x6f) {\nLAB_08004e52:\n            value = *number;\n            pointer = *arg5;\n            if ((value & 0x80) == 0) {\n              *arg5 = pointer + 1;\n              if ((value & 0x40) == 0) goto LAB_08004e60;\n              value = (uint)*(ushort *)pointer;\n            }\n            else {\n              *arg5 = pointer + 1;\nLAB_08004e60:\n              value = *pointer;\n            }\n            hexDigits = \"0123456789ABCDEF\";\n            if (byteValue == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byteValue == 0x70) {\n            *number = *number | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)number + 0x45) = 0x78;\n            hexDigits = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byteValue == 0x75) goto LAB_08004e52;\n          if (byteValue == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)number + 0x42) = byteValue;\n        goto LAB_08004e2c;\n      }\n      ppcVar8 = (char **)*arg5;\n      *arg5 = (uint *)(ppcVar8 + 1);\n      numberString = *ppcVar8;\n      result = FUN_08000230(numberString,0,number[1]);\n      if (result != 0) {\n        number[1] = result - (int)numberString;\n      }\n      value = number[1];\n    }\n    number[4] = value;\n    *(undefined *)((int)number + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  value = *number;\n  ppuVar7 = (uint **)*arg5;\n  base = number[5];\n  if ((value & 0x80) == 0) {\n    *arg5 = (uint *)(ppuVar7 + 1);\n    pointer = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_08004f42;\n    *(short *)pointer = (short)base;\n  }\n  else {\n    *arg5 = (uint *)(ppuVar7 + 1);\n    pointer = *ppuVar7;\nLAB_08004f42:\n    *pointer = base;\n  }\nLAB_08004f56:\n  number[4] = 0;\nLAB_08004ec2:\n  result = FUN_08004cb0(arg1,number,outputSize,arg3,callback);\n  if ((result == -1) || (result = (*callback)(arg1,arg3,numberString,number[4]), result == -1)) {\nLAB_08004ed6:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*number << 0x1e) < 0) {\n      for (result = 0; result < (int)(number[3] - outputSize[0]); result = result + 1) {\n        tempVar = (*callback)(arg1,arg3,(int)number + 0x19,1);\n        if (tempVar == -1) goto LAB_08004ed6;\n      }\n    }\n    value = number[3];\n    if ((int)number[3] < (int)outputSize[0]) {\n      value = outputSize[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "parse_and_format_number_08004d9c",
                "param_1": "arg1",
                "param_2": "number",
                "param_3": "arg3",
                "param_4": "callback",
                "param_5": "arg5",
                "bVar1": "byteValue",
                "iVar2": "result",
                "puVar3": "pointer",
                "iVar4": "tempVar",
                "pcVar5": "hexDigits",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "tempValue",
                "pcVar11": "formattedNumber",
                "pcVar12": "numberString",
                "local_24": "outputSize"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004cb0",
                "FUN_08000230"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "initialize_function_08004fdc",
            "code": "\nvoid initializeFunction_08004fdc(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int variable1;\n  undefined4 variable2;\n  undefined4 variable3;\n  undefined4 variable4;\n  undefined4 variable5;\n  \n  variable1 = DAT_200000a0;\n  variable2 = param1;\n  variable3 = param2;\n  variable4 = param3;\n  variable5 = param4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUN_080053a0(DAT_200000a0);\n  }\n  FUN_08004a84(variable1,*(undefined4 *)(variable1 + 8),param1,&variable3,variable2,&variable3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "initialize_function_08004fdc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "variable1",
                "uVar2": "variable2",
                "uStack_c": "variable3",
                "uStack_8": "variable4",
                "uStack_4": "variable5"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_08004a84",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "update_param_if_error_0800500c",
            "code": "\nvoid updateParamIfError_0800500c(int *outputParam,undefined4 inputParam)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_08004094(inputParam);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *outputParam = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "update_param_if_error_0800500c",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "update_data_080050d0",
            "code": "\nuint updateData_080050d0(undefined4 *pointer1,undefined4 *pointer2)\n\n{\n  int data;\n  uint result;\n  ushort value;\n  \n  data = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUN_080053a0(DAT_200000a0);\n  }\n  if (pointer2 == &DAT_08005fc0) {\n    pointer2 = *(undefined4 **)(data + 4);\n  }\n  else if (pointer2 == (undefined4 *)&DAT_08005fe0) {\n    pointer2 = *(undefined4 **)(data + 8);\n  }\n  else if (pointer2 == (undefined4 *)&DAT_08005fa0) {\n    pointer2 = *(undefined4 **)(data + 0xc);\n  }\n  value = *(ushort *)(pointer2 + 3);\n  result = (uint)value;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *pointer1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)pointer2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)pointer2[0xd] != pointer2 + 0x11) {\n          FUN_080048dc(pointer1);\n        }\n        pointer2[0xd] = 0;\n      }\n      *(ushort *)(pointer2 + 3) = *(ushort *)(pointer2 + 3) & 0xffdb;\n      pointer2[1] = 0;\n      *pointer2 = pointer2[4];\n    }\n    *(ushort *)(pointer2 + 3) = *(ushort *)(pointer2 + 3) | 8;\n  }\n  if ((pointer2[4] == 0) && ((*(ushort *)(pointer2 + 3) & 0x280) != 0x200)) {\n    FUN_080054fc(pointer1,pointer2);\n  }\n  value = *(ushort *)(pointer2 + 3);\n  result = value & 1;\n  if ((value & 1) == 0) {\n    if (-1 < (int)((uint)value << 0x1e)) {\n      result = pointer2[5];\n    }\n    pointer2[2] = result;\n  }\n  else {\n    pointer2[2] = 0;\n    pointer2[6] = -pointer2[5];\n  }\n  if (pointer2[4] == 0) {\n    value = *(ushort *)(pointer2 + 3);\n    result = (int)(short)value & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(pointer2 + 3) = value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "update_data_080050d0",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "iVar1": "data",
                "uVar2": "result",
                "uVar3": "value"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080054fc",
                "FUN_080048dc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_binary_function_080051ac",
            "code": "\nvoid processBinaryFunction_080051ac(void)\n\n{\n  uint *ptrData;\n  int var1;\n  int *ptrArray1;\n  int *ptrArray2;\n  uint ushortValue;\n  ushort tempUshort;\n  int tempVar;\n  code *functionPtr;\n  int var2;\n  uint tempUint;\n  code *jumptablePtr;\n  bool boolFlag;\n  undefined8 tempLong;\n  \n  FUN_080055d0(6);\n  jumptablePtr = (code *)0x80051bb;\n  tempLong = FUN_080040f8(1);\n  ptrArray1 = (int *)((ulonglong)tempLong >> 0x20);\n  ptrData = (uint *)tempLong;\n  tempUshort = *(ushort *)(ptrArray1 + 3);\n  ushortValue = (uint)tempUshort;\n  if ((int)(ushortValue << 0x1c) < 0) {\n    var1 = ptrArray1[4];\n    if (var1 != 0) {\n      tempVar = ushortValue << 0x1e;\n      boolFlag = tempVar == 0;\n      var2 = *ptrArray1;\n      if (boolFlag) {\n        tempVar = ptrArray1[5];\n      }\n      *ptrArray1 = var1;\n      if (!boolFlag) {\n        tempVar = 0;\n      }\n      ptrArray1[2] = tempVar;\n      for (var2 = var2 - var1; 0 < var2; var2 = var2 - tempVar) {\n        tempVar = (*(code *)ptrArray1[10])(ptrData,ptrArray1[8],var1,var2);\n        if (tempVar < 1) {\n          tempUshort = *(ushort *)(ptrArray1 + 3);\n          goto LAB_080052b2;\n        }\n        var1 = var1 + tempVar;\n      }\n    }\n  }\n  else if (((0 < ptrArray1[1]) || (0 < ptrArray1[0x10])) &&\n          (functionPtr = (code *)ptrArray1[0xb], functionPtr != (code *)0x0)) {\n    tempUint = *ptrData;\n    *ptrData = 0;\n    if ((tempUshort & 0x1000) == 0) {\n      var1 = (*functionPtr)(ptrData,ptrArray1[8],ushortValue & 0x1000,1);\n      if ((var1 == -1) && (ushortValue = *ptrData, ushortValue != 0)) {\n        if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n          *(ushort *)(ptrArray1 + 3) = *(ushort *)(ptrArray1 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumptablePtr)();\n          return;\n        }\n        *ptrData = tempUint;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      var1 = ptrArray1[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptrArray1 + 3) << 0x1d) < 0) &&\n       (var1 = var1 - ptrArray1[1], ptrArray1[0xd] != 0)) {\n      var1 = var1 - ptrArray1[0x10];\n    }\n    var1 = (*(code *)ptrArray1[0xb])(ptrData,ptrArray1[8],var1,0);\n    tempUshort = *(ushort *)(ptrArray1 + 3);\n    if ((var1 == -1) &&\n       ((0x1d < *ptrData || (-1 < (int)((0x20400001U >> (*ptrData & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(ptrArray1 + 3) = tempUshort | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumptablePtr)(0xffffffff);\n      return;\n    }\n    ptrArray1[1] = 0;\n    *ptrArray1 = ptrArray1[4];\n    if (((int)((uint)tempUshort << 0x13) < 0) && ((var1 != -1 || (*ptrData == 0)))) {\n      ptrArray1[0x15] = var1;\n    }\n    ptrArray2 = (int *)ptrArray1[0xd];\n    *ptrData = tempUint;\n    if (ptrArray2 != (int *)0x0) {\n      if (ptrArray2 != ptrArray1 + 0x11) {\n        FUN_080048dc(ptrData);\n      }\n      ptrArray1[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumptablePtr)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptablePtr)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "process_binary_function_080051ac",
                "puVar1": "ptrData",
                "iVar2": "var1",
                "piVar3": "ptrArray1",
                "piVar4": "ptrArray2",
                "uVar5": "ushortValue",
                "uVar6": "tempUshort",
                "iVar7": "tempVar",
                "pcVar8": "functionPtr",
                "iVar9": "var2",
                "uVar10": "tempUint",
                "UNRECOVERED_JUMPTABLE_00": "jumptablePtr",
                "bVar11": "boolFlag",
                "uVar12": "tempLong"
            },
            "calling": [
                "FUN_08004808",
                "FUN_08005760"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080040f8",
                "FUN_080055d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "decode_and_process_data_080052cc",
            "code": "\nundefined4 decode_and_process_data_080052cc(uint *data_array,int *info_array)\n\n{\n  undefined4 result;\n  int count;\n  int *temp_ptr;\n  uint temp_value;\n  ushort temp_flag;\n  int temp_offset;\n  undefined4 unused_arg1;\n  undefined4 unused_arg2;\n  code *callback_func;\n  int temp_count;\n  uint temp_flag2;\n  code *jump_table;\n  bool flag_condition;\n  \n  if (info_array[4] != 0) {\n    if ((data_array != (uint *)0x0) && (data_array[6] == 0)) {\n      FUN_080053a0();\n    }\n    if (info_array == &DAT_08005fc0) {\n      info_array = (int *)data_array[1];\n    }\n    else if (info_array == (int *)&DAT_08005fe0) {\n      info_array = (int *)data_array[2];\n    }\n    else if (info_array == (int *)&DAT_08005fa0) {\n      info_array = (int *)data_array[3];\n    }\n    if (*(short *)(info_array + 3) != 0) {\n      temp_flag = *(ushort *)(info_array + 3);\n      temp_value = (uint)temp_flag;\n      if ((int)(temp_value << 0x1c) < 0) {\n        count = info_array[4];\n        if (count != 0) {\n          temp_offset = temp_value << 0x1e;\n          flag_condition = temp_offset == 0;\n          temp_count = *info_array;\n          if (flag_condition) {\n            temp_offset = info_array[5];\n          }\n          *info_array = count;\n          if (!flag_condition) {\n            temp_offset = 0;\n          }\n          info_array[2] = temp_offset;\n          for (temp_count = temp_count - count; 0 < temp_count; temp_count = temp_count - temp_offset) {\n            temp_offset = (*(code *)info_array[10])(data_array,info_array[8],count,temp_count,unused_arg1,unused_arg2);\n            if (temp_offset < 1) {\n              temp_flag = *(ushort *)(info_array + 3);\n              goto LAB_080052b2;\n            }\n            count = count + temp_offset;\n          }\n        }\n      }\n      else if (((0 < info_array[1]) || (0 < info_array[0x10])) &&\n              (callback_func = (code *)info_array[0xb], callback_func != (code *)0x0)) {\n        temp_flag2 = *data_array;\n        *data_array = 0;\n        if ((temp_flag & 0x1000) == 0) {\n          count = (*callback_func)(data_array,info_array[8],temp_value & 0x1000,1);\n          if ((count == -1) && (temp_value = *data_array, temp_value != 0)) {\n            if ((temp_value != 0x1d) && (temp_value != 0x16)) {\n              *(ushort *)(info_array + 3) = *(ushort *)(info_array + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              result = (*jump_table)();\n              return result;\n            }\n            *data_array = temp_flag2;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          count = info_array[0x15];\n        }\n        if (((int)((uint)*(ushort *)(info_array + 3) << 0x1d) < 0) &&\n           (count = count - info_array[1], info_array[0xd] != 0)) {\n          count = count - info_array[0x10];\n        }\n        count = (*(code *)info_array[0xb])(data_array,info_array[8],count,0);\n        temp_flag = *(ushort *)(info_array + 3);\n        if ((count == -1) &&\n           ((0x1d < *data_array || (-1 < (int)((0x20400001U >> (*data_array & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(info_array + 3) = temp_flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)(0xffffffff);\n          return result;\n        }\n        info_array[1] = 0;\n        *info_array = info_array[4];\n        if (((int)((uint)temp_flag << 0x13) < 0) && ((count != -1 || (*data_array == 0)))) {\n          info_array[0x15] = count;\n        }\n        temp_ptr = (int *)info_array[0xd];\n        *data_array = temp_flag2;\n        if (temp_ptr != (int *)0x0) {\n          if (temp_ptr != info_array + 0x11) {\n            FUN_080048dc(data_array);\n          }\n          info_array[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          result = (*jump_table)();\n          return result;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      result = (*jump_table)(0);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "decode_and_process_data_080052cc",
                "param_1": "data_array",
                "param_2": "info_array",
                "uVar1": "result",
                "iVar2": "count",
                "piVar3": "temp_ptr",
                "uVar4": "temp_value",
                "uVar5": "temp_flag",
                "iVar6": "temp_offset",
                "unaff_r4": "unused_arg1",
                "unaff_r5": "unused_arg2",
                "pcVar7": "callback_func",
                "iVar8": "temp_count",
                "uVar9": "temp_flag2",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "bVar10": "flag_condition"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_function_0800532c",
            "code": "\nvoid initializeFunction_0800532c(undefined4 *outputArray,undefined2 parameter2,undefined2 parameter3)\n\n{\n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  *(undefined2 *)(outputArray + 3) = parameter2;\n  outputArray[0x19] = 0;\n  *(undefined2 *)((int)outputArray + 0xe) = parameter3;\n  outputArray[4] = 0;\n  outputArray[5] = 0;\n  outputArray[6] = 0;\n  FUN_080048cc(outputArray + 0x17,0,8);\n  outputArray[9] = 0x8005609;\n  outputArray[10] = 0x800562b;\n  outputArray[0xb] = 0x8005663;\n  outputArray[8] = outputArray;\n  outputArray[0xc] = &LAB_08005686_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_function_0800532c",
                "param_1": "outputArray",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "initialize_array_08005374",
            "code": "\nundefined4 * initializeArray_08005374(undefined4 initialValue,int size)\n\n{\n  undefined4 *arrayPointer;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  arrayPointer = (undefined4 *)FUN_08004978(initialValue,offset + 0x74);\n  if (arrayPointer != (undefined4 *)0x0) {\n    *arrayPointer = 0;\n    arrayPointer[1] = size;\n    arrayPointer[2] = arrayPointer + 3;\n    FUN_080048cc(arrayPointer + 3,0,offset + 0x68);\n  }\n  return arrayPointer;\n}\n\n",
            "renaming": {
                "FUN_08005374": "initialize_array_08005374",
                "param_1": "initialValue",
                "param_2": "size",
                "puVar1": "arrayPointer",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_080053a0",
            "code": "\nvoid initializeData_080053a0(undefined4 *data)\n\n{\n  undefined4 result;\n  undefined4 *ptr;\n  \n  if (data[6] == 0) {\n    data[0x12] = 0;\n    data[0x13] = 0;\n    data[0x14] = 0;\n    ptr = &DAT_200000a4;\n    data[10] = &LAB_08005320_1;\n    if (data == &DAT_200000a4) {\n      ptr = (undefined4 *)0x1;\n    }\n    if (data == &DAT_200000a4) {\n      data[6] = ptr;\n    }\n    result = FUN_08005400();\n    data[1] = result;\n    result = FUN_08005400(data);\n    data[2] = result;\n    result = FUN_08005400(data);\n    data[3] = result;\n    FUN_0800532c(data[1],4,0);\n    FUN_0800532c(data[2],9,1);\n    FUN_0800532c(data[3],0x12,2);\n    data[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_080053a0",
                "param_1": "data",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_08005400",
                "FUN_0800532c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "process_data_08005400",
            "code": "\nint * processData_08005400(undefined4 *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int *currentPtr;\n  int *nextPtr;\n  int **list;\n  \n  if (DAT_200000bc == 0) {\n    FUN_080053a0(&DAT_200000a4);\n  }\n  list = (int **)&DAT_200000ec;\n  do {\n    nextPtr = list[2];\n    currentPtr = list[1];\n    while (currentPtr = (int *)((int)currentPtr + -1), -1 < (int)currentPtr) {\n      if (*(short *)(nextPtr + 3) == 0) {\n        *(undefined2 *)((int)nextPtr + 0xe) = 0xffff;\n        *(undefined2 *)(nextPtr + 3) = 1;\n        nextPtr[0x19] = 0;\n        *nextPtr = 0;\n        nextPtr[2] = 0;\n        nextPtr[1] = 0;\n        nextPtr[4] = 0;\n        nextPtr[5] = 0;\n        nextPtr[6] = 0;\n        FUN_080048cc(nextPtr + 0x17,0,8,1,input3);\n        nextPtr[0xd] = 0;\n        nextPtr[0xe] = 0;\n        nextPtr[0x12] = 0;\n        nextPtr[0x13] = 0;\n        return nextPtr;\n      }\n      nextPtr = nextPtr + 0x1a;\n    }\n    if (*list == (int *)0x0) {\n      currentPtr = (int *)FUN_08005374(output,4);\n      *list = currentPtr;\n      if (currentPtr == (int *)0x0) {\n        *output = 0xc;\n        return (int *)0x0;\n      }\n    }\n    list = (int **)*list;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "process_data_08005400",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "piVar1": "currentPtr",
                "piVar2": "nextPtr",
                "ppiVar3": "list"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_08005374",
                "FUN_080048cc",
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_permissions_080054b4",
            "code": "\nundefined4 check_permissions_080054b4(undefined4 status,int input,undefined4 *result,uint *flags)\n\n{\n  int result_code;\n  undefined4 permission_code;\n  undefined temp_buffer [4];\n  uint permissions;\n  \n  if ((*(short *)(input + 0xe) < 0) ||\n     (result_code = FUN_080056d4(status,(int)*(short *)(input + 0xe),temp_buffer), result_code < 0)) {\n    *flags = 0;\n    if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n      permission_code = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *flags = (uint)((permissions & 0xf000) == 0x2000);\n  }\n  permission_code = 0x400;\nLAB_080054f4:\n  *result = permission_code;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_permissions_080054b4",
                "param_1": "status",
                "param_2": "input",
                "param_3": "result",
                "param_4": "flags",
                "iVar1": "result_code",
                "uVar2": "permission_code",
                "auStack_4c": "temp_buffer",
                "local_48": "permissions"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "process_data_080054fc",
            "code": "\nvoid processData_080054fc(int inputPointer,int *outputPointer)\n\n{\n  ushort result;\n  int status;\n  int localVar1;\n  int *localVar2;\n  \n  if (-1 < (int)((uint)*(ushort *)(outputPointer + 3) << 0x1e)) {\n    localVar1 = inputPointer;\n    localVar2 = outputPointer;\n    result = FUN_080054b4(inputPointer,outputPointer,&localVar1,&localVar2);\n    status = FUN_08004978(inputPointer,localVar1);\n    if (status != 0) {\n      *(undefined **)(inputPointer + 0x28) = &LAB_08005320_1;\n      *outputPointer = status;\n      *(ushort *)(outputPointer + 3) = *(ushort *)(outputPointer + 3) | 0x80;\n      outputPointer[5] = localVar1;\n      outputPointer[4] = status;\n      if ((localVar2 != (int *)0x0) &&\n         (status = FUN_080056f8(inputPointer,(int)*(short *)((int)outputPointer + 0xe)), status != 0)) {\n        *(ushort *)(outputPointer + 3) = *(ushort *)(outputPointer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(outputPointer + 3) = result | *(ushort *)(outputPointer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(outputPointer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(outputPointer + 3) = *(ushort *)(outputPointer + 3) & 0xfffc | 2;\n  }\n  *outputPointer = (int)outputPointer + 0x47;\n  outputPointer[4] = (int)outputPointer + 0x47;\n  outputPointer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "process_data_080054fc",
                "param_1": "inputPointer",
                "param_2": "outputPointer",
                "uVar1": "result",
                "iVar2": "status",
                "local_18": "localVar1",
                "local_14": "localVar2"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080054b4",
                "FUN_080056f8",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "execute_code_080055d0",
            "code": "\nint execute_code_080055d0(uint value)\n\n{\n  int *ptr_value;\n  undefined4 result_value;\n  int stored_value;\n  code *function_ptr;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 *ptr_stored_value;\n  \n  ptr_value = DAT_200000a0;\n  ptr_stored_value = &DAT_200000a0;\n  if (0x1f < value) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  stored_value = DAT_200000a0[0x11];\n  if ((stored_value != 0) && (function_ptr = *(code **)(stored_value + value * 4), function_ptr != (code *)0x0)) {\n    if (function_ptr != (code *)0x1) {\n      if (function_ptr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(stored_value + value * 4) = 0;\n      (*function_ptr)(value);\n    }\n    return 0;\n  }\n  result_value = thunk_FUN_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  stored_value = FUN_080040fc(result_value,value,value,0,ptr_stored_value,unused1,unused2,unused3);\n  if ((stored_value == -1) && (DAT_20000674 != 0)) {\n    *ptr_value = DAT_20000674;\n  }\n  return stored_value;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "execute_code_080055d0",
                "param_1": "value",
                "piVar1": "ptr_value",
                "uVar2": "result_value",
                "iVar3": "stored_value",
                "pcVar4": "function_ptr",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "in_lr": "unused3",
                "puVar5": "ptr_stored_value"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "FUN_080040fc",
                "thunk_FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "get_return_value_thunk_0800410c",
            "code": "\nundefined4 getReturnValue_thunk_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "get_return_value_thunk_0800410c"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_value_08005608",
            "code": "\nvoid updateValue_08005608(undefined4 param1,int param2)\n\n{\n  int result;\n  uint newValue;\n  bool isPositive;\n  \n  result = FUN_0800573c(param1,(int)*(short *)(param2 + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    newValue = *(int *)(param2 + 0x54) + result;\n  }\n  else {\n    newValue = *(ushort *)(param2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(param2 + 0x54) = newValue;\n  }\n  if (!isPositive) {\n    *(short *)(param2 + 0xc) = (short)newValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_value_08005608",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "newValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "validate_and_process_data_0800562a",
            "code": "\nvoid validate_and_process_data_0800562a(int *result,int data,undefined4 param3,undefined4 param4)\n\n{\n  int returnValue;\n  undefined4 secondary_param1;\n  undefined4 secondary_param2;\n  undefined4 return_address;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    FUN_08005718(result,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  returnValue = FUN_080040ec((int)*(short *)(data + 0xe),param3,param4,param4,param4,secondary_param1,\n                       secondary_param2,return_address);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "validate_and_process_data_0800562a",
                "param_1": "result",
                "param_2": "data",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "returnValue",
                "unaff_r4": "secondary_param1",
                "unaff_r5": "secondary_param2",
                "in_lr": "return_address"
            },
            "calling": [],
            "called": [
                "FUN_08005718",
                "FUN_080040ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "modify_data_08005662",
            "code": "\nvoid modifyData_08005662(undefined4 input,int data)\n\n{\n  int result;\n  ushort modifiedValue;\n  bool isError;\n  \n  result = FUN_08005718(input,(int)*(short *)(data + 0xe));\n  isError = result == -1;\n  if (isError) {\n    modifiedValue = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    modifiedValue = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(data + 0xc) = modifiedValue;\n  }\n  if (!isError) {\n    *(ushort *)(data + 0xc) = modifiedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "modify_data_08005662",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "modifiedValue",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "update_pointer_type_080056d4",
            "code": "\nvoid updatePointerType_080056d4(int *pointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040d6(value1,value2,value2,0,value3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *pointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "update_pointer_type_080056d4",
                "param_1": "pointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "check_and_set_result_080056f8",
            "code": "\nvoid checkAndSetResult_080056f8(int *resultPtr,undefined4 inputValue)\n\n{\n  int returnValue;\n  \n  DAT_20000674 = 0;\n  returnValue = FUN_080040e0(inputValue);\n  if ((returnValue == -1) && (DAT_20000674 != 0)) {\n    *resultPtr = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "check_and_set_result_080056f8",
                "param_1": "resultPtr",
                "param_2": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "extract_data_08005718",
            "code": "\nvoid extract_data_08005718(int *output_data,undefined4 input_param1,undefined4 input_param2,undefined4 input_param3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040e4(input_param1,input_param2,input_param3,input_param3,input_param3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output_data = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "extract_data_08005718",
                "param_1": "output_data",
                "param_2": "input_param1",
                "param_3": "input_param2",
                "param_4": "input_param3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005662",
                "FUN_0800562a"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "verify_and_update_value_0800573c",
            "code": "\nvoid verifyAndUpdateValue_0800573c(int *outputValue,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = FUN_080040e8(value1,value2,value3,value3,value3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *outputValue = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "verify_and_update_value_0800573c",
                "param_1": "outputValue",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_08005760",
            "code": "\nvoid initializeData_08005760(void)\n\n{\n  code *jumptable;\n  \n  jumptable = initializeData_08005760;\n  FUN_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_08005760",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 119703,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_080002d0",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_08000600",
            "FUN_0800066c",
            "FUN_08000682",
            "FUN_08000690",
            "FUN_080006b4",
            "FUN_08000728",
            "FUN_0800076c",
            "FUN_080007f0",
            "FUN_080008cc",
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000b54",
            "FUN_08000c4c",
            "FUN_08000c64",
            "FUN_08000c8c",
            "FUN_08000d8e",
            "FUN_08000d98",
            "FUN_08000de4",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f56",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011a4",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_08001ab0",
            "FUN_08001bfc",
            "FUN_08001d00",
            "FUN_08001e68",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080023b4",
            "FUN_08002488",
            "FUN_080025e0",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_08002848",
            "FUN_08002864",
            "FUN_080028d4",
            "FUN_080028f0",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_080029c8",
            "FUN_08002d0c",
            "FUN_08002d72",
            "FUN_08002dd0",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08002ffc",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_080033c8",
            "FUN_080033d8",
            "FUN_0800340c",
            "FUN_08003414",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034ce",
            "FUN_080034da",
            "FUN_080034f4",
            "FUN_08003506",
            "FUN_0800351e",
            "FUN_0800352e",
            "FUN_0800354a",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_0800377c",
            "FUN_0800387c",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003978",
            "FUN_08003cc8",
            "FUN_08003d18",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_08003eac",
            "FUN_08003f00",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040ec",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004110",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_08004240",
            "FUN_080042ac",
            "FUN_080042e8",
            "FUN_08004364",
            "FUN_08004388",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_0800447c",
            "FUN_080044d8",
            "FUN_08004544",
            "FUN_08004560",
            "FUN_08004640",
            "FUN_08004648",
            "FUN_08004658",
            "FUN_08004678",
            "FUN_080046b4",
            "FUN_080047c0",
            "FUN_080047d0",
            "FUN_080047fe",
            "FUN_08004808",
            "FUN_08004844",
            "FUN_08004860",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004978",
            "FUN_08004a34",
            "FUN_08004a60",
            "FUN_08004a84",
            "FUN_08004cb0",
            "FUN_08004d9c",
            "FUN_08004fdc",
            "FUN_0800500c",
            "FUN_080050d0",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_0800532c",
            "FUN_08005374",
            "FUN_080053a0",
            "FUN_08005400",
            "FUN_080054b4",
            "FUN_080054fc",
            "FUN_080055d0",
            "thunk_FUN_0800410c",
            "FUN_08005608",
            "FUN_0800562a",
            "FUN_08005662",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c",
            "FUN_08005760"
        ]
    ],
    "locked_functions": []
}