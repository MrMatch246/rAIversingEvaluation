{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *buffer,uint target_byte,uint buffer_size)\n\n{\n  byte current_byte;\n  char check_byte1;\n  char check_byte2;\n  char check_byte3;\n  char check_byte4;\n  byte *result;\n  uint *current_ptr;\n  byte *result_ptr;\n  uint buffer_alignment;\n  uint aligned_buffer_size;\n  uint result_byte1;\n  uint result_byte2;\n  bool current_byte3;\n  bool current_byte4;\n  bool current_byte5;\n  bool current_byte6;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)buffer_size < 0x10) {\njoined_r0x08000290:\n    do {\n      if (buffer_size == 0) {\n        return (byte *)0x0;\n      }\n      current_ptr = (uint *)((int)buffer + 1);\n      current_byte = *(byte *)buffer;\n      buffer_size = buffer_size - 1;\n      buffer = current_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    buffer_alignment = (uint)buffer & 7;\n    while( true ) {\n      if (buffer_alignment == 0) {\n        buffer_alignment = target_byte | target_byte << 8;\n        buffer_alignment = buffer_alignment | buffer_alignment << 0x10;\n        aligned_buffer_size = buffer_size & 0xfffffff8;\n        do {\n          current_ptr = buffer + 2;\n          aligned_buffer_size = aligned_buffer_size - 8;\n          result_byte1 = *buffer ^ buffer_alignment;\n          result_byte2 = buffer[1] ^ buffer_alignment;\n          check_byte1 = -((char)result_byte1 == '\\0');\n          check_byte2 = -((char)(result_byte1 >> 8) == '\\0');\n          check_byte3 = -((char)(result_byte1 >> 0x10) == '\\0');\n          check_byte4 = -((char)(result_byte1 >> 0x18) == '\\0');\n          result_byte1 = CONCAT13(check_byte4,CONCAT12(check_byte3,CONCAT11(check_byte2,check_byte1)));\n          current_byte3 = (char)result_byte2 != '\\0';\n          current_byte4 = (char)(result_byte2 >> 8) != '\\0';\n          current_byte5 = (char)(result_byte2 >> 0x10) != '\\0';\n          current_byte6 = (char)(result_byte2 >> 0x18) != '\\0';\n          result_byte2 = CONCAT13(current_byte6 * check_byte4 - !current_byte6,\n                            CONCAT12(current_byte5 * check_byte3 - !current_byte5,\n                                     CONCAT11(current_byte4 * check_byte2 - !current_byte4,current_byte3 * check_byte1 - !current_byte3)));\n          if (result_byte2 != 0) {\n            if (result_byte1 == 0) {\n              result_ptr = (byte *)((int)buffer + 5);\n              result_byte1 = result_byte2;\n            }\n            else {\n              result_ptr = (byte *)((int)buffer + 1);\n            }\n            if ((result_byte1 & 1) == 0) {\n              current_byte3 = (result_byte1 & 0x100) == 0;\n              result = result_ptr + 1;\n              if (current_byte3) {\n                current_byte3 = (result_byte1 & 0x18000) == 0;\n                result = result_ptr + 2;\n              }\n              result_ptr = result;\n              if (current_byte3) {\n                result_ptr = result_ptr + 1;\n              }\n            }\n            return result_ptr + -1;\n          }\n          buffer = current_ptr;\n        } while (aligned_buffer_size != 0);\n        buffer_size = buffer_size & 7;\n        goto joined_r0x08000290;\n      }\n      current_ptr = (uint *)((int)buffer + 1);\n      buffer_size = buffer_size - 1;\n      if (*(byte *)buffer == target_byte) break;\n      buffer_alignment = (uint)current_ptr & 7;\n      buffer = current_ptr;\n      if (buffer_size == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "buffer",
                "param_2": "target_byte",
                "param_3": "buffer_size",
                "bVar1": "current_byte",
                "cVar2": "check_byte1",
                "cVar3": "check_byte2",
                "cVar4": "check_byte3",
                "cVar5": "check_byte4",
                "pbVar6": "result",
                "puVar7": "current_ptr",
                "pbVar8": "result_ptr",
                "uVar9": "buffer_alignment",
                "uVar10": "aligned_buffer_size",
                "uVar11": "result_byte1",
                "uVar12": "result_byte2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "calculate_result_080002d0",
            "code": "\nundefined8 calculateResult_080002d0(int input1,int input2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return CONCAT44(input2,input1);\n  }\n  result = extended_division_08000300();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "calculate_result_080002d0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_080023b4"
            ],
            "called": [
                "FUN_08000300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "extended_division_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong extended_division_08000300(uint dividend,uint dividend_high,uint divisor,uint remainder,uint *quotient_ptr)\n\n{\n  ulonglong quotient;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  int shift_count;\n  bool carry;\n  \n  if (remainder == 0) {\n    if (dividend_high < divisor) {\n      shift_count = LZCOUNT(divisor);\n      if (shift_count != 0) {\n        divisor = divisor << shift_count;\n        dividend_high = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        dividend = dividend << shift_count;\n      }\n      temp7 = divisor >> 0x10;\n      temp5 = dividend_high / temp7;\n      temp4 = dividend >> 0x10 | (dividend_high - temp7 * temp5) * 0x10000;\n      temp3 = temp5 * (divisor & 0xffff);\n      temp2 = temp5;\n      if (temp4 <= temp3 && temp3 - temp4 != 0) {\n        carry = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp2 = temp5 - 1;\n        if ((carry == false) && (temp4 <= temp3 && temp3 - temp4 != 0)) {\n          temp2 = temp5 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp5 = (temp4 - temp3) / temp7;\n      temp4 = dividend & 0xffff | ((temp4 - temp3) - temp7 * temp5) * 0x10000;\n      temp7 = temp5 * (divisor & 0xffff);\n      temp3 = temp5;\n      if (temp4 <= temp7 && temp7 - temp4 != 0) {\n        carry = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp5 - 1;\n        if ((carry == false) && (temp4 <= temp7 && temp7 - temp4 != 0)) {\n          temp3 = temp5 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp7;\n      temp3 = temp3 | temp2 << 0x10;\n      temp2 = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_count = LZCOUNT(divisor);\n      if (shift_count == 0) {\n        dividend_high = dividend_high - divisor;\n        temp4 = divisor >> 0x10;\n        temp8 = divisor & 0xffff;\n        temp2 = 1;\n      }\n      else {\n        divisor = divisor << shift_count;\n        temp4 = divisor >> 0x10;\n        temp3 = dividend_high >> (0x20U - shift_count & 0xff);\n        temp6 = dividend >> (0x20U - shift_count & 0xff) | dividend_high << shift_count;\n        temp2 = temp3 / temp4;\n        temp8 = divisor & 0xffff;\n        temp7 = temp6 >> 0x10 | (temp3 - temp4 * temp2) * 0x10000;\n        temp5 = temp2 * temp8;\n        dividend = dividend << shift_count;\n        temp3 = temp2;\n        if (temp7 <= temp5 && temp5 - temp7 != 0) {\n          carry = CARRY4(temp7,divisor);\n          temp7 = temp7 + divisor;\n          temp3 = temp2 - 1;\n          if ((carry == false) && (temp7 <= temp5 && temp5 - temp7 != 0)) {\n            temp3 = temp2 - 2;\n            temp7 = temp7 + divisor;\n          }\n        }\n        temp1 = (temp7 - temp5) / temp4;\n        dividend_high = temp6 & 0xffff | ((temp7 - temp5) - temp4 * temp1) * 0x10000;\n        temp5 = temp1 * temp8;\n        temp2 = temp1;\n        if (dividend_high <= temp5 && temp5 - dividend_high != 0) {\n          carry = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          temp2 = temp1 - 1;\n          if ((carry == false) && (dividend_high <= temp5 && temp5 - dividend_high != 0)) {\n            temp2 = temp1 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - temp5;\n        temp2 = temp2 | temp3 << 0x10;\n      }\n      temp6 = dividend_high / temp4;\n      temp7 = dividend >> 0x10 | (dividend_high - temp4 * temp6) * 0x10000;\n      temp3 = temp8 * temp6;\n      temp5 = temp6;\n      if (temp7 <= temp3 && temp3 - temp7 != 0) {\n        carry = CARRY4(temp7,divisor);\n        temp7 = temp7 + divisor;\n        temp5 = temp6 - 1;\n        if ((carry == false) && (temp7 <= temp3 && temp3 - temp7 != 0)) {\n          temp5 = temp6 - 2;\n          temp7 = temp7 + divisor;\n        }\n      }\n      temp6 = (temp7 - temp3) / temp4;\n      temp4 = dividend & 0xffff | ((temp7 - temp3) - temp4 * temp6) * 0x10000;\n      temp8 = temp8 * temp6;\n      temp3 = temp6;\n      if (temp4 <= temp8 && temp8 - temp4 != 0) {\n        carry = CARRY4(temp4,divisor);\n        temp4 = temp4 + divisor;\n        temp3 = temp6 - 1;\n        if ((carry == false) && (temp4 <= temp8 && temp8 - temp4 != 0)) {\n          temp3 = temp6 - 2;\n          temp4 = temp4 + divisor;\n        }\n      }\n      temp4 = temp4 - temp8;\n      temp3 = temp3 | temp5 << 0x10;\n    }\n    if (quotient_ptr != (uint *)0x0) {\n      *quotient_ptr = temp4 >> shift_count;\n      quotient_ptr[1] = 0;\n      return CONCAT44(temp2,temp3);\n    }\n  }\n  else if (dividend_high < remainder) {\n    if (quotient_ptr != (uint *)0x0) {\n      *quotient_ptr = dividend;\n      quotient_ptr[1] = dividend_high;\n      return 0;\n    }\n    temp3 = 0;\n    temp2 = 0;\n  }\n  else {\n    shift_count = LZCOUNT(remainder);\n    if (shift_count != 0) {\n      temp7 = 0x20 - shift_count;\n      temp2 = divisor >> (temp7 & 0xff) | remainder << shift_count;\n      temp8 = temp2 >> 0x10;\n      temp3 = dividend_high >> (temp7 & 0xff);\n      temp1 = dividend >> (temp7 & 0xff) | dividend_high << shift_count;\n      temp6 = temp3 / temp8;\n      temp5 = temp1 >> 0x10 | (temp3 - temp8 * temp6) * 0x10000;\n      temp4 = temp6 * (temp2 & 0xffff);\n      dividend = dividend << shift_count;\n      temp3 = temp6;\n      if (temp5 <= temp4 && temp4 - temp5 != 0) {\n        carry = CARRY4(temp5,temp2);\n        temp5 = temp5 + temp2;\n        temp3 = temp6 - 1;\n        if ((carry == false) && (temp5 <= temp4 && temp4 - temp5 != 0)) {\n          temp3 = temp6 - 2;\n          temp5 = temp5 + temp2;\n        }\n      }\n      temp6 = (temp5 - temp4) / temp8;\n      temp5 = temp1 & 0xffff | ((temp5 - temp4) - temp8 * temp6) * 0x10000;\n      temp8 = temp6 * (temp2 & 0xffff);\n      temp4 = temp6;\n      if (temp5 <= temp8 && temp8 - temp5 != 0) {\n        carry = CARRY4(temp5,temp2);\n        temp5 = temp5 + temp2;\n        temp4 = temp6 - 1;\n        if ((carry == false) && (temp5 <= temp8 && temp8 - temp5 != 0)) {\n          temp4 = temp6 - 2;\n          temp5 = temp5 + temp2;\n        }\n      }\n      temp4 = temp4 | temp3 << 0x10;\n      quotient = (ulonglong)temp4 * (ulonglong)(divisor << shift_count);\n      if (CONCAT44(temp5 - temp8,dividend) < quotient) {\n        quotient = quotient - CONCAT44(temp2,divisor << shift_count);\n        temp4 = temp4 - 1;\n      }\n      if (quotient_ptr != (uint *)0x0) {\n        temp3 = ((temp5 - temp8) - (int)(quotient >> 0x20)) - (uint)(dividend < (uint)quotient);\n        *quotient_ptr = temp3 << (temp7 & 0xff) | dividend - (uint)quotient >> shift_count;\n        quotient_ptr[1] = temp3 >> shift_count;\n      }\n      return (ulonglong)temp4;\n    }\n    if ((remainder < dividend_high) || (divisor <= dividend)) {\n      carry = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - remainder) - (uint)carry;\n      temp3 = 1;\n    }\n    else {\n      temp3 = 0;\n    }\n    temp2 = 0;\n    if (quotient_ptr != (uint *)0x0) {\n      *quotient_ptr = dividend;\n      quotient_ptr[1] = dividend_high;\n      return (ulonglong)temp3;\n    }\n  }\n  return CONCAT44(temp2,temp3);\n}\n\n",
            "renaming": {
                "FUN_08000300": "extended_division_08000300",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "quotient_ptr",
                "uVar1": "quotient",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "iVar10": "shift_count",
                "bVar11": "carry"
            },
            "calling": [
                "FUN_080002d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "interrupt_software_080005e0",
            "code": "\nvoid interrupt_software_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "interrupt_software_080005e0"
            },
            "calling": [
                "FUN_080005e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_interrupt_080005e4",
            "code": "\nundefined4 executeInterrupt_080005e4(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = interrupt_software_080005e0(1,input1,0,0,input4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_interrupt_080005e4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080005e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "configure_and_process_08000600",
            "code": "\nvoid configureAndProcess_08000600(int **data,undefined4 value)\n\n{\n  char flag;\n  int result;\n  \n  flag = *(char *)((int)data + 5);\n  if (flag == '\\x02') {\n    *data = &DAT_20000338;\n  }\n  else if (flag == '\\x03') {\n    *data = &DAT_20000338;\n  }\n  else if (flag == '\\x01') {\n    *data = &DAT_20000338;\n  }\n  else {\n    *data = &DAT_20000338;\n  }\n  configure_serial_08004388(*data,value,6);\n  if (1 < *(byte *)((int)data + 6)) {\n    execute_memory_operation_08004110(*(byte *)((int)data + 6),1);\n    process_parameter_080041bc(*(undefined *)((int)data + 6),0);\n  }\n  do {\n    result = (**(code **)(**data + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)data + 0x49) = 0;\n  *(undefined *)((int)data + 0x4a) = 0;\n  *(undefined2 *)(data + 0x15) = 0;\n  *(undefined2 *)((int)data + 0x52) = 0;\n  *(undefined2 *)(data + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "configure_and_process_08000600",
                "param_1": "data",
                "param_2": "value",
                "cVar1": "flag",
                "iVar2": "result"
            },
            "calling": [
                "FUN_08000c4c"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08004110",
                "FUN_08004388"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_data_0800066c",
            "code": "\nvoid initializeData_0800066c(int dataPointer,undefined value1,int value2,undefined value3)\n\n{\n  *(undefined *)(dataPointer + 4) = value1;\n  if (3 < value2) {\n    value2 = 0;\n  }\n  *(char *)(dataPointer + 5) = (char)value2;\n  *(undefined *)(dataPointer + 6) = value3;\n  *(undefined2 *)(dataPointer + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_data_0800066c",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_08000682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_and_return_08000682",
            "code": "\nundefined4 initialize_and_return_08000682(undefined4 input_param)\n\n{\n  initialize_data();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_and_return_08000682",
                "param_1": "input_param",
                "initialize_data_0800066c": "initialize_data"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "initialize_if_param1_is_1_08000690",
            "code": "\nvoid initialize_if_param1_is_1_08000690(int input_1,int input_2,undefined4 config_param,undefined4 additional_param)\n\n{\n  if (input_1 != 1) {\n    return;\n  }\n  if (input_2 == 0xffff) {\n    initialize_and_return(&DAT_20000124,1,0,0,additional_param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "initialize_if_param1_is_1_08000690",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "config_param",
                "param_4": "additional_param",
                "initialize_and_return_08000682": "initialize_and_return"
            },
            "calling": [],
            "called": [
                "FUN_08000682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_param_080006b4",
            "code": "\nint processParam_080006b4(int **paramList)\n\n{\n  bool isExceededLimit;\n  undefined returnValue;\n  int result;\n  byte byteValue;\n  \n  if (1 < *(byte *)((int)paramList + 6)) {\n    processParam_080006b4eter(*(byte *)((int)paramList + 6),0);\n  }\n  *(undefined *)((int)paramList + 0x49) = 0;\n  if (*(byte *)((int)paramList + 5) < 4) {\n    isExceededLimit = false;\n    while (result = (**(code **)(**paramList + 8))(), result != 0) {\n      byteValue = *(byte *)((int)paramList + 0x49);\n      returnValue = (**(code **)(**paramList + 0xc))();\n      *(undefined *)((int)paramList + byteValue + 9) = returnValue;\n      byteValue = *(char *)((int)paramList + 0x49) + 1;\n      *(byte *)((int)paramList + 0x49) = byteValue;\n      if (0x3f < byteValue) {\n        isExceededLimit = true;\n      }\n    }\n  }\n  else {\n    isExceededLimit = false;\n  }\n  *(short *)(paramList + 0x14) = *(short *)(paramList + 0x14) + 1;\n  if (isExceededLimit) {\n    *(short *)(paramList + 0x15) = *(short *)(paramList + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)paramList + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_param_080006b4",
                "param_1": "paramList",
                "bVar1": "isExceededLimit",
                "uVar2": "returnValue",
                "iVar3": "result",
                "bVar4": "byteValue",
                "process_parameter_080041bc": "processParameter"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_080041bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_crc_08000728",
            "code": "\nuint calculate_crc_08000728(int data_address,int data_length)\n\n{\n  byte bit_counter;\n  uint crc;\n  uint bit;\n  uint i;\n  \n  crc = 0xffff;\n  for (i = 0; (int)i < data_length; i = i + 1 & 0xff) {\n    crc = crc ^ *(byte *)(data_address + i + 9);\n    for (bit_counter = 1; bit_counter < 9; bit_counter = bit_counter + 1) {\n      bit = crc & 1;\n      crc = crc >> 1;\n      if (bit != 0) {\n        crc = crc ^ 0xa001;\n      }\n    }\n  }\n  return (crc & 0xff) << 8 | crc >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_crc_08000728",
                "param_1": "data_address",
                "param_2": "data_length",
                "bVar1": "bit_counter",
                "uVar2": "crc",
                "uVar3": "bit",
                "uVar4": "i"
            },
            "calling": [
                "FUN_0800076c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_crc_and_process_data_0800076c",
            "code": "\nvoid updateCrcAndProcessData_0800076c(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 crcValue;\n  int result;\n  uint byteIndex;\n  \n  byteIndex = (uint)*(byte *)((int)data + 0x49);\n  crcValue = calculate_crc_08000728(data,byteIndex,param3,param4,param4);\n  *(char *)((int)data + byteIndex + 9) = (char)((ushort)crcValue >> 8);\n  byteIndex = byteIndex + 1 & 0xff;\n  *(char *)((int)data + byteIndex + 9) = (char)crcValue;\n  *(char *)((int)data + 0x49) = (char)byteIndex + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    process_parameter_080041bc(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    process_parameter_080041bc(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result = initialize_data_08004204();\n  data[0x17] = (int *)(result + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_crc_and_process_data_0800076c",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "crcValue",
                "iVar2": "result",
                "uVar3": "byteIndex"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_08000b54",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [
                "FUN_080041bc",
                "FUN_08000728",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "process_binary_data_080007f0",
            "code": "\nundefined4 process_binary_data_080007f0(int data_offset,undefined4 data_size,uint param_3,undefined4 param_4)\n\n{\n  bool is_match;\n  byte byte_value;\n  char merged_value_1;\n  char merged_value_2;\n  int result_1;\n  uint counter;\n  int result_2;\n  \n  counter = 0;\n  do {\n    if (7 < counter) {\n      is_match = false;\nLAB_0800080a:\n      if (!is_match) {\n        *(short *)(data_offset + 0x54) = *(short *)(data_offset + 0x54) + 1;\n        return 1;\n      }\n      result_2 = *(byte *)(data_offset + 10) - 1;\n      switch(*(byte *)(data_offset + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        merged_value_1 = merge_values_08004640(*(undefined *)(data_offset + 0xb),*(undefined *)(data_offset + 0xc),param_3,\n                             result_2,param_4);\n        merged_value_2 = merge_values_08004640(*(undefined *)(data_offset + 0xd),*(undefined *)(data_offset + 0xe));\n        if (*(byte *)(data_offset + 0x60) < (byte)(merged_value_2 + merged_value_1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        result_2 = merge_values_08004640(*(undefined *)(data_offset + 0xb),*(undefined *)(data_offset + 0xc),param_3,\n                             result_2,param_4);\n        if ((uint)*(byte *)(data_offset + 0x60) < (uint)(result_2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        byte_value = merge_values_08004640(*(undefined *)(data_offset + 0xb),*(undefined *)(data_offset + 0xc),param_3,\n                             result_2,param_4);\n        if (*(byte *)(data_offset + 0x60) < byte_value) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    param_3 = (uint)*(byte *)(data_offset + 10);\n    if ((byte)(&DAT_08005a10)[counter] == param_3) {\n      is_match = true;\n      goto LAB_0800080a;\n    }\n    counter = counter + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  result_2 = merge_values_08004640(*(undefined *)(data_offset + 0xb),*(undefined *)(data_offset + 0xc),param_3,result_2,\n                       param_4);\n  result_1 = merge_values_08004640(*(undefined *)(data_offset + 0xd),*(undefined *)(data_offset + 0xe));\n  if ((uint)*(byte *)(data_offset + 0x60) <\n      (((uint)(result_2 << 0xc) >> 0x10) + ((uint)(result_1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "process_binary_data_080007f0",
                "param_1": "data_offset",
                "param_2": "data_size",
                "bVar1": "is_match",
                "bVar2": "byte_value",
                "cVar3": "merged_value_1",
                "cVar4": "merged_value_2",
                "iVar5": "result_1",
                "uVar6": "counter",
                "iVar7": "result_2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_and_modify_data_080008cc",
            "code": "\nvoid copyAndModifyData_080008cc(int dataOffset,undefined newData)\n\n{\n  *(undefined *)(dataOffset + 9) = *(undefined *)(dataOffset + 4);\n  *(byte *)(dataOffset + 10) = *(byte *)(dataOffset + 10) ^ 0x80;\n  *(undefined *)(dataOffset + 0xb) = newData;\n  *(undefined *)(dataOffset + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_and_modify_data_080008cc",
                "param_1": "dataOffset",
                "param_2": "newData"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "process_data_080008e2",
            "code": "\nint process_data_080008e2(int source_address,int target_address,undefined4 param_3,undefined4 param_4)\n\n{\n  int merge_result;\n  uint data_size;\n  uint index;\n  uint bit_index;\n  char bit_value;\n  int address_offset;\n  \n  merge_result = merge_values_08004640(*(undefined *)(source_address + 0xb),*(undefined *)(source_address + 0xc),param_3,param_4,\n                       param_4);\n  data_size = merge_values_08004640(*(undefined *)(source_address + 0xd),*(undefined *)(source_address + 0xe));\n  bit_value = (char)((data_size << 0x15) >> 0x18);\n  if ((data_size & 7) != 0) {\n    bit_value = bit_value + '\\x01';\n  }\n  *(char *)(source_address + 0xb) = bit_value;\n  *(undefined *)(source_address + 0x49) = 3;\n  bit_index = 0;\n  for (index = 0; (int)index < (int)data_size; index = index + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(target_address + ((index + merge_result) * 0x100000 >> 0x18) * 2) >>\n         (index + merge_result & 0xf) & 1U) == 0) {\n      address_offset = (uint)*(byte *)(source_address + 0x49) + source_address;\n      *(byte *)(address_offset + 9) = *(byte *)(address_offset + 9) & ~(byte)(1 << bit_index);\n    }\n    else {\n      address_offset = (uint)*(byte *)(source_address + 0x49) + source_address;\n      *(byte *)(address_offset + 9) = *(byte *)(address_offset + 9) | (byte)(1 << bit_index);\n    }\n    bit_index = bit_index + 1 & 0xff;\n    if (7 < bit_index) {\n      *(char *)(source_address + 0x49) = *(char *)(source_address + 0x49) + '\\x01';\n      bit_index = 0;\n    }\n  }\n  if ((data_size & 7) != 0) {\n    *(char *)(source_address + 0x49) = *(char *)(source_address + 0x49) + '\\x01';\n  }\n  bit_value = *(char *)(source_address + 0x49);\n  update_crc_and_process_data_080008e2_0800076c(source_address);\n  return (int)(char)(bit_value + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "process_data_080008e2",
                "param_1": "source_address",
                "param_2": "target_address",
                "iVar1": "merge_result",
                "uVar2": "data_size",
                "uVar3": "index",
                "uVar4": "bit_index",
                "cVar5": "bit_value",
                "iVar6": "address_offset"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_data_08000998",
            "code": "\nint process_data_08000998(int data,int input,undefined4 param_3,undefined4 param_4)\n\n{\n  byte counter;\n  char updated_counter;\n  byte merged_value_1;\n  byte merged_value_2;\n  uint i;\n  uint temp;\n  \n  merged_value_1 = merge_values_08004640(*(undefined *)(data + 0xb),*(undefined *)(data + 0xc),param_3,param_4,\n                       param_4);\n  merged_value_2 = merge_values_08004640(*(undefined *)(data + 0xd),*(undefined *)(data + 0xe));\n  *(byte *)(data + 0xb) = merged_value_2 << 1;\n  *(undefined *)(data + 0x49) = 3;\n  for (i = (uint)merged_value_1; i < (uint)merged_value_1 + (uint)merged_value_2; i = i + 1 & 0xff) {\n    counter = *(byte *)(data + 0x49);\n    *(char *)(data + (uint)counter + 9) = (char)((ushort)*(undefined2 *)(input + i * 2) >> 8)\n    ;\n    temp = counter + 1 & 0xff;\n    updated_counter = (char)temp;\n    *(char *)(data + 0x49) = updated_counter;\n    *(undefined *)(data + temp + 9) = *(undefined *)(input + i * 2);\n    *(char *)(data + 0x49) = updated_counter + '\\x01';\n  }\n  updated_counter = *(char *)(data + 0x49);\n  update_crc(data);\n  return (int)(char)(updated_counter + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "data",
                "param_2": "input",
                "bVar1": "counter",
                "cVar2": "updated_counter",
                "bVar3": "merged_value_1",
                "bVar4": "merged_value_2",
                "uVar5": "i",
                "uVar6": "temp",
                "update_crc_and_process_data_0800076c": "update_crc"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_data_08000a00",
            "code": "\nundefined4 update_data_08000a00(int data_ptr,int output_ptr,undefined4 param_a,undefined4 param_b)\n\n{\n  uint merged_value;\n  uint shifted_value;\n  \n  merged_value = merge_values_08004640(*(undefined *)(data_ptr + 0xb),*(undefined *)(data_ptr + 0xc),param_a,param_b,\n                       param_b);\n  shifted_value = (merged_value << 0x14) >> 0x18;\n  if (*(char *)(data_ptr + 0xd) == -1) {\n    *(ushort *)(output_ptr + shifted_value * 2) =\n         (ushort)(1 << (merged_value & 0xf)) | *(ushort *)(output_ptr + shifted_value * 2);\n  }\n  else {\n    *(ushort *)(output_ptr + shifted_value * 2) =\n         *(ushort *)(output_ptr + shifted_value * 2) & ~(ushort)(1 << (merged_value & 0xf));\n  }\n  *(undefined *)(data_ptr + 0x49) = 6;\n  update_crc_and_process_data_0800076c(data_ptr);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_data_08000a00",
                "param_1": "data_ptr",
                "param_2": "output_ptr",
                "param_3": "param_a",
                "param_4": "param_b",
                "uVar1": "merged_value",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_data_and_return_error_code_08000a4e",
            "code": "\nundefined4 updateDataAndReturnErrorCode_08000a4e(int dataPointer,int outputPointer)\n\n{\n  byte mergedValue1;\n  undefined2 mergedValue2;\n  \n  mergedValue1 = merge_values_08004640(*(undefined *)(dataPointer + 0xb),*(undefined *)(dataPointer + 0xc));\n  mergedValue2 = merge_values_08004640(*(undefined *)(dataPointer + 0xd),*(undefined *)(dataPointer + 0xe));\n  *(undefined2 *)(outputPointer + (uint)mergedValue1 * 2) = mergedValue2;\n  *(undefined *)(dataPointer + 0x49) = 6;\n  update_crc_and_process_data_0800076c(dataPointer);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_data_and_return_error_code_08000a4e",
                "param_1": "dataPointer",
                "param_2": "outputPointer",
                "bVar1": "mergedValue1",
                "uVar2": "mergedValue2"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "process_values_08000a7a",
            "code": "\nundefined4 process_values_08000a7a(int input_buffer_ptr,int output_buffer_ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  int merged_value1;\n  int merged_value2;\n  uint loop_counter;\n  uint bit_counter;\n  uint bit_offset;\n  uint byte_offset;\n  uint byte_counter;\n  \n  merged_value1 = merge_values_08004640(*(undefined *)(input_buffer_ptr + 0xb),*(undefined *)(input_buffer_ptr + 0xc),param_3,param_4,\n                       param_4);\n  merged_value2 = merge_values_08004640(*(undefined *)(input_buffer_ptr + 0xd),*(undefined *)(input_buffer_ptr + 0xe));\n  bit_counter = 0;\n  byte_counter = 7;\n  for (loop_counter = 0; (int)loop_counter < merged_value2; loop_counter = loop_counter + 1 & 0xffff) {\n    byte_offset = (loop_counter + merged_value1) * 0x100000 >> 0x18;\n    bit_offset = loop_counter + merged_value1 & 0xf;\n    if (((int)(uint)*(byte *)(input_buffer_ptr + byte_counter + 9) >> bit_counter & 1U) == 0) {\n      *(ushort *)(output_buffer_ptr + byte_offset * 2) = *(ushort *)(output_buffer_ptr + byte_offset * 2) & ~(ushort)(1 << bit_offset);\n    }\n    else {\n      *(ushort *)(output_buffer_ptr + byte_offset * 2) = (ushort)(1 << bit_offset) | *(ushort *)(output_buffer_ptr + byte_offset * 2);\n    }\n    bit_counter = bit_counter + 1 & 0xff;\n    if (7 < bit_counter) {\n      byte_counter = byte_counter + 1 & 0xff;\n      bit_counter = 0;\n    }\n  }\n  *(undefined *)(input_buffer_ptr + 0x49) = 6;\n  update_crc_and_process_data_0800076c(input_buffer_ptr);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "process_values_08000a7a",
                "param_1": "input_buffer_ptr",
                "param_2": "output_buffer_ptr",
                "iVar1": "merged_value1",
                "iVar2": "merged_value2",
                "uVar3": "loop_counter",
                "uVar4": "bit_counter",
                "uVar5": "bit_offset",
                "uVar6": "byte_offset",
                "uVar7": "byte_counter"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "process_data_08000b04",
            "code": "\nint process_data_08000b04(int data_ptr,int result_ptr)\n\n{\n  byte base_offset;\n  byte num_elements;\n  char character;\n  undefined2 merged_value;\n  uint index;\n  \n  base_offset = *(byte *)(data_ptr + 0xc);\n  num_elements = *(byte *)(data_ptr + 0xe);\n  *(undefined *)(data_ptr + 0xd) = 0;\n  *(byte *)(data_ptr + 0xe) = num_elements;\n  *(undefined *)(data_ptr + 0x49) = 6;\n  for (index = 0; index < num_elements; index = index + 1 & 0xff) {\n    merged_value = merge_values_08004640(*(undefined *)(index * 2 + data_ptr + 0x10),\n                         *(undefined *)(data_ptr + (index + 4) * 2 + 9));\n    *(undefined2 *)(result_ptr + (base_offset + index) * 2) = merged_value;\n  }\n  character = *(char *)(data_ptr + 0x49);\n  update_crc_and_process_data_08000b04_0800076c(data_ptr);\n  return (int)(char)(character + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "process_data_08000b04",
                "param_1": "data_ptr",
                "param_2": "result_ptr",
                "bVar1": "base_offset",
                "bVar2": "num_elements",
                "cVar3": "character",
                "uVar4": "merged_value",
                "uVar5": "index"
            },
            "calling": [
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800076c",
                "FUN_08004640"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_param_08000b54",
            "code": "\nint process_param_08000b54(int **param_array,int *input_array,undefined4 input_value)\n\n{\n  byte byte_result;\n  int data_processing_result;\n  uint byte_condition;\n  int function_result;\n  \n  param_array[0x13] = input_array;\n  *(char *)(param_array + 0x18) = (char)input_value;\n  if (*(byte *)((int)param_array + 5) < 4) {\n    byte_result = (**(code **)(**param_array + 8))();\n    byte_condition = (uint)byte_result;\n  }\n  if (byte_condition == 0) {\n    function_result = 0;\n  }\n  else if ((int)byte_condition < 8) {\n    function_result = 0;\n  }\n  else {\n    function_result = process_param_08000b54_080006b4(param_array);\n    *(char *)(param_array + 2) = (char)function_result;\n    if (*(char *)((int)param_array + 9) == *(char *)(param_array + 1)) {\n      data_processing_result = process_binary_data_080007f0(param_array);\n      if (data_processing_result < 1) {\n        data_processing_result = initialize_data_08004204();\n        param_array[0x17] = (int *)((uint)*(ushort *)((int)param_array + 0x56) + data_processing_result);\n        *(undefined *)(param_array + 2) = 0;\n        switch(*(undefined *)((int)param_array + 10)) {\n        case 1:\n        case 2:\n          function_result = process_data_080008e2(param_array,input_array,input_value);\n          break;\n        case 3:\n        case 4:\n          function_result = process_data_08000998(param_array,input_array,input_value);\n          break;\n        case 5:\n          function_result = update_data_08000a00(param_array,input_array,input_value);\n          break;\n        case 6:\n          function_result = update_data_and_return_error_code_08000a4e(param_array,input_array,input_value);\n          break;\n        case 0xf:\n          function_result = process_values_08000a7a(param_array,input_array,input_value);\n          break;\n        case 0x10:\n          function_result = process_data_08000b04(param_array,input_array,input_value);\n        }\n      }\n      else {\n        if (data_processing_result != 0xff) {\n          copy_and_modify_data_080008cc(param_array,data_processing_result);\n          update_crc_and_process_data_0800076c(param_array);\n        }\n        *(char *)(param_array + 2) = (char)data_processing_result;\n        function_result = (int)(char)data_processing_result;\n      }\n    }\n    else {\n      function_result = 0;\n    }\n  }\n  return function_result;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_param_08000b54",
                "param_1": "param_array",
                "param_2": "input_array",
                "param_3": "input_value",
                "bVar1": "byte_result",
                "iVar2": "data_processing_result",
                "unaff_r5": "byte_condition",
                "iVar3": "function_result"
            },
            "calling": [
                "FUN_08000c64"
            ],
            "called": [
                "FUN_08000a7a",
                "FUN_0800076c",
                "FUN_080008cc",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_08000a4e",
                "FUN_080007f0",
                "FUN_080006b4",
                "FUN_080008e2",
                "FUN_08000a00",
                "FUN_08004204"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_system_08000c4c",
            "code": "\nvoid initialize_system_08000c4c(void)\n\n{\n  trigger_interrupt(0);\n  configure_and_process(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_system_08000c4c",
                "execute_interrupt_080005e4": "trigger_interrupt",
                "configure_and_process_08000600": "configure_and_process"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_080005e4",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "initialize_data_processing_08000c64",
            "code": "\nvoid initializeDataProcessing_08000c64(void)\n\n{\n  undefined4 inputData;\n  \n  processData(&DAT_20000124,&DAT_20000004,0x10,inputData,inputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "initialize_data_processing_08000c64",
                "in_r3": "inputData",
                "process_param_08000b54": "processData"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08000b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initialize_system_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 config_param_1;\n  undefined4 config_param_2;\n  undefined4 config_param_3;\n  undefined4 config_param_4;\n  undefined4 config_param_5;\n  undefined4 config_param_6;\n  undefined4 config_param_7;\n  undefined4 config_param_8;\n  undefined4 peripheral_param_1;\n  undefined4 peripheral_param_2;\n  undefined4 peripheral_param_3;\n  undefined4 peripheral_param_4;\n  undefined4 peripheral_param_5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  config_param_1 = 1;\n  config_param_2 = 0x50000;\n  config_param_3 = 2;\n  config_param_4 = 0x400000;\n  config_param_5 = 8;\n  config_param_6 = 0x150;\n  config_param_7 = 2;\n  config_param_8 = 7;\n  configure_system_params(&config_param_1);\n  initialize_global_data();\n  peripheral_param_1 = 0xf;\n  peripheral_param_2 = 2;\n  peripheral_param_3 = 0;\n  peripheral_param_4 = 0x1400;\n  peripheral_param_5 = 0x1000;\n  configure_peripheral(&peripheral_param_1,5);\n  uVar1 = get_data_value();\n  initialize_data(uVar1 / 1000);\n  update_control_register(4);\n  update_data(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "config_param_1",
                "local_50": "config_param_2",
                "local_3c": "config_param_3",
                "local_38": "config_param_4",
                "local_34": "config_param_5",
                "local_30": "config_param_6",
                "local_2c": "config_param_7",
                "local_28": "config_param_8",
                "local_24": "peripheral_param_1",
                "local_20": "peripheral_param_2",
                "local_1c": "peripheral_param_3",
                "local_18": "peripheral_param_4",
                "local_14": "peripheral_param_5",
                "check_and_set_configuration_0800201c": "configure_system_params",
                "initialize_data_08001f9c": "initialize_global_data",
                "configure_peripheral_08002488": "configure_peripheral",
                "get_data_value_080025e0": "get_data_value",
                "initialize_data_08000ee0": "initialize_data",
                "update_control_register_08000f2c": "update_control_register",
                "update_data_08000e60": "update_data"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_080025e0",
                "FUN_08002488",
                "FUN_08000f2c",
                "FUN_08000ee0",
                "FUN_0800201c",
                "FUN_08001f9c",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08000d3c",
            "current_name": "entry",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000104; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8006034);\n  }\n  for (puVar2 = &DAT_20000104; puVar2 < &DAT_20000678; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_data_080035bc();\n  execute_functions_08004884();\n  UNRECOVERED_JUMPTABLE = (code *)0x8000d72;\n  run_infinite_loop_08004658();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004658",
                "FUN_08004884",
                "FUN_080035bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_system_08000d8e",
            "code": "\nvoid initialize_system_08000d8e(void)\n\n{\n  initialize_and_update_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_system_08000d8e",
                "initialize_and_update_system_080034ce": "initialize_and_update_system"
            },
            "calling": [
                "FUN_08004648"
            ],
            "called": [
                "FUN_080034ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "FUN_08000de4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "initialize_and_update_data_08000d98",
            "code": "\nundefined4 initializeAndUpdateData_08000d98(uint inputValue)\n\n{\n  int dataInitializationResult;\n  \n  dataInitializationResult = initialize_data_08000ee0(DAT_2000002c / (1000 / DAT_20000024));\n  if (dataInitializationResult != 0) {\n    return 1;\n  }\n  if (0xf < inputValue) {\n    return 1;\n  }\n  update_data_08000e60(0xffffffff,inputValue,0);\n  DAT_20000028 = inputValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "initialize_and_update_data_08000d98",
                "param_1": "inputValue",
                "iVar1": "dataInitializationResult"
            },
            "calling": [
                "FUN_08002488",
                "FUN_08000de4"
            ],
            "called": [
                "FUN_08000ee0",
                "FUN_08000e60"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_and_update_registers_08000de4",
            "code": "\n\n\nundefined4 initialize_and_update_registers_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  update_register_value(3);\n  initialize_and_update_data(0xf);\n  FUNC_08000d96();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_and_update_registers_08000de4",
                "update_register_value_08000e3c": "update_register_value",
                "initialize_and_update_data_08000d98": "initialize_and_update_data"
            },
            "calling": [
                "FUN_080034ce"
            ],
            "called": [
                "FUN_08000d98",
                "FUN_08000d96",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "update_global_value_08000e18",
            "code": "\nvoid updateGlobalValue_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "update_global_value_08000e18"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_data_08000e30",
            "code": "\nundefined4 get_data_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_data_08000e30"
            },
            "calling": [
                "FUN_08002d0c",
                "FUN_08002488",
                "FUN_0800346c",
                "FUN_0800201c",
                "FUN_08003d18",
                "FUN_08002dd0",
                "FUN_08001f9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_register_value_08000e3c",
            "code": "\n\n\nvoid updateRegisterValue_08000e3c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_register_value_08000e3c",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08004648",
                "FUN_08000de4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_data_08000e60",
            "code": "\n\n\nvoid updateData_08000e60(uint address,uint dataBitmask,uint value)\n\n{\n  uint shiftedValue;\n  uint shiftedDistance;\n  \n  shiftedValue = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftedDistance = 7 - shiftedValue;\n  if (3 < shiftedDistance) {\n    shiftedDistance = 4;\n  }\n  if (shiftedValue + 4 < 7) {\n    shiftedValue = 0;\n  }\n  else {\n    shiftedValue = shiftedValue - 3;\n  }\n  shiftedValue = (dataBitmask & (1 << (shiftedDistance & 0xff)) - 1U) << (shiftedValue & 0xff) |\n          (1 << (shiftedValue & 0xff)) - 1U & value;\n  if ((int)address < 0) {\n    *(byte *)((address & 0xf) + 0xe000ed14) = (byte)(shiftedValue << 4);\n  }\n  else {\n    *(byte *)(address + 0xe000e400) = (byte)(shiftedValue << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_data_08000e60",
                "param_1": "address",
                "param_2": "dataBitmask",
                "param_3": "value",
                "uVar1": "shiftedValue",
                "uVar2": "shiftedDistance",
                "char": "byte"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98",
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "set_bit_at_position_08000ec4",
            "code": "\nvoid setBitAtPosition_08000ec4(uint bitPosition)\n\n{\n  if (-1 < (int)bitPosition) {\n    *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "set_bit_at_position_08000ec4",
                "param_1": "bitPosition"
            },
            "calling": [
                "FUN_08003eac",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "initialize_data_08000ee0",
            "code": "\n\n\nundefined4 initializeData_08000ee0(int inputValue)\n\n{\n  if (inputValue - 1U < 0x1000000) {\n    _DAT_e000e014 = inputValue - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "initialize_data_08000ee0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_08000c8c",
                "FUN_08000d98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_in_memory_08000f0c",
            "code": "\nvoid setBitInMemory_08000f0c(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_in_memory_08000f0c",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_control_register_08000f2c",
            "code": "\n\n\nvoid updateControlRegister_08000f2c(int value)\n\n{\n  if (value != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_control_register_08000f2c",
                "param_1": "value"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "FUN_08000f4e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "initialize_08000f4e",
            "code": "\nvoid initialize_08000f4e(void)\n\n{\n  FUNC_08000f4c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "initialize_08000f4e"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [
                "FUN_08000f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "clear_flags_08000f56",
            "code": "\nundefined4 clearFlags_08000f56(int input)\n\n{\n  if (input != 0) {\n    *(undefined *)(input + 4) = 2;\n    clear_dat_flag_080033c8();\n    *(undefined4 *)(input + 0x10) = 0;\n    *(undefined *)(input + 4) = 0;\n    *(undefined *)(input + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "clear_flags_08000f56",
                "param_1": "input"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_080033c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **pPointerToPointer,uint bitPosition)\n\n{\n  **pPointerToPointer = **pPointerToPointer & ~(1 << (bitPosition & 0xff));\n  *(undefined *)(pPointerToPointer + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "pPointerToPointer",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_08000f8c",
            "code": "\nundefined4 updateParam_08000f8c(uint **paramArray)\n\n{\n  if (*(char *)((int)paramArray + 0x35) != '\\x02') {\n    paramArray[0x15] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)paramArray + 0x35) = 5;\n  **paramArray = **paramArray & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_08000f8c",
                "param_1": "paramArray"
            },
            "calling": [
                "FUN_08002ffc",
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_data_array_08000fb4",
            "code": "\n\n\nvoid updateDataArray_08000fb4(uint *dataArray,uint *inputArray)\n\n{\n  uint mask;\n  uint bit;\n  uint index;\n  uint maskAndInput;\n  uint value;\n  int arrayIndex1;\n  uint shift;\n  int arrayIndex2;\n  \n  for (index = 0; index < 0x10; index = index + 1) {\n    bit = 1 << (index & 0xff);\n    maskAndInput = bit & *inputArray;\n    mask = _DAT_40013c0c;\n    if (bit == maskAndInput) {\n      if ((inputArray[1] == 2) || (inputArray[1] == 0x12)) {\n        arrayIndex1 = (index >> 3) + 8;\n        arrayIndex2 = (index & 7) << 2;\n        dataArray[arrayIndex1] = dataArray[arrayIndex1] & ~(0xf << arrayIndex2) | inputArray[4] << arrayIndex2;\n      }\n      shift = index << 1;\n      mask = ~(3 << (shift & 0xff));\n      *dataArray = *dataArray & mask | (inputArray[1] & 3) << (shift & 0xff);\n      value = inputArray[1];\n      if (((value - 1 < 2) || (value == 0x11)) || (value == 0x12)) {\n        dataArray[2] = dataArray[2] & mask | inputArray[3] << (shift & 0xff);\n        dataArray[1] = dataArray[1] & ~bit | ((inputArray[1] << 0x1b) >> 0x1f) << (index & 0xff);\n      }\n      dataArray[3] = mask & dataArray[3] | inputArray[2] << (shift & 0xff);\n      mask = _DAT_40013c0c;\n      if ((inputArray[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        arrayIndex2 = (index & 3) << 2;\n        if (dataArray == (uint *)0x40020000) {\n          arrayIndex1 = 0;\n        }\n        else if (dataArray == (uint *)0x40020400) {\n          arrayIndex1 = 1;\n        }\n        else if (dataArray == (uint *)0x40020800) {\n          arrayIndex1 = 2;\n        }\n        else if (dataArray == (uint *)0x40020c00) {\n          arrayIndex1 = 3;\n        }\n        else if (dataArray == (uint *)0x40021000) {\n          arrayIndex1 = 4;\n        }\n        else if (dataArray == (uint *)0x40021400) {\n          arrayIndex1 = 5;\n        }\n        else if (dataArray == (uint *)0x40021800) {\n          arrayIndex1 = 6;\n        }\n        else if (dataArray == (uint *)0x40021c00) {\n          arrayIndex1 = 7;\n        }\n        else if (dataArray == (uint *)0x40022000) {\n          arrayIndex1 = 8;\n        }\n        else if (dataArray == (uint *)0x40022400) {\n          arrayIndex1 = 9;\n        }\n        else {\n          arrayIndex1 = 10;\n        }\n        *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((index >> 2) + 2) * 4 + 0x40013800) & ~(0xf << arrayIndex2) | arrayIndex1 << arrayIndex2;\n        mask = ~maskAndInput;\n        bit = _DAT_40013c00 & mask;\n        if ((inputArray[1] & 0x10000) != 0) {\n          bit = maskAndInput | _DAT_40013c00;\n        }\n        value = mask & _DAT_40013c04;\n        if ((inputArray[1] & 0x20000) != 0) {\n          value = maskAndInput | _DAT_40013c04;\n        }\n        shift = mask & _DAT_40013c08;\n        if ((inputArray[1] & 0x100000) != 0) {\n          shift = maskAndInput | _DAT_40013c08;\n        }\n        _DAT_40013c00 = bit;\n        _DAT_40013c04 = value;\n        _DAT_40013c08 = shift;\n        mask = mask & _DAT_40013c0c;\n        if ((inputArray[1] & 0x200000) != 0) {\n          mask = maskAndInput | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = mask;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_data_array_08000fb4",
                "param_1": "dataArray",
                "param_2": "inputArray",
                "uVar1": "mask",
                "uVar2": "bit",
                "uVar3": "index",
                "uVar4": "maskAndInput",
                "uVar5": "value",
                "iVar6": "arrayIndex1",
                "uVar7": "shift",
                "iVar8": "arrayIndex2"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "update_param_value_08001198",
            "code": "\nvoid updateParamValue_08001198(int baseAddress,int newValue,int shiftValue)\n\n{\n  if (shiftValue == 0) {\n    *(int *)(baseAddress + 0x18) = newValue << 0x10;\n    return;\n  }\n  *(int *)(baseAddress + 0x18) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "update_param_value_08001198",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "param_3": "shiftValue"
            },
            "calling": [
                "FUN_080034b6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_data_if_flag_set_080011a4",
            "code": "\n\n\nvoid updateDataIfFlagSet_080011a4(uint flag)\n\n{\n  if ((_DAT_40013c14 & flag) != 0) {\n    _DAT_40013c14 = flag;\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_data_if_flag_set_080011a4",
                "param_1": "flag",
                "check_and_process_data_080047d0": "processData"
            },
            "calling": [],
            "called": [
                "FUN_080047d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "update_flag_based_on_conditions_080011c0",
            "code": "\nundefined4 updateFlagBasedOnConditions_080011c0(int *params)\n\n{\n  if (*(char *)((int)params + 0x3e) == '@') {\n    if (params[20] == 0) {\n      *(uint *)(*params + 0x10) = params[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*params + 0x10) = params[17] & 0xffU | 1;\n    }\n  }\n  else if (params[4] == 0x4000) {\n    if (*(char *)((int)params + 0x3d) == '!') {\n      *(uint *)(*params + 0x10) = params[17] & 0xfe;\n    }\n    else {\n      *(uint *)(*params + 0x10) = params[17] & 0xffU | 1;\n    }\n  }\n  else if (params[20] == 0) {\n    *(uint *)(*params + 0x10) = (uint)(params[17] << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (params[20] == 1) {\n    *(uint *)(*params + 0x10) = (uint)(params[17] << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "update_flag_based_on_conditions_080011c0",
                "param_1": "params",
                "param_1[0x14]": "params[20]",
                "param_1[0x11]": "params[17]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "update_value_from_pointer_0800124a",
            "code": "\nundefined4 updateValueFromPointer_0800124a(int *inputPointer)\n\n{\n  *(uint *)(*inputPointer + 0x10) = inputPointer[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "update_value_from_pointer_0800124a",
                "param_1": "inputPointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "update_flags_08001256",
            "code": "\nundefined4 updateFlags_08001256(uint **parameters)\n\n{\n  uint *tempPtr;\n  \n  tempPtr = ptr3;\n  if ((*(char *)(intValue + 0x3d) == '\\\"') &&\n     ((ptr1 != (uint *)0x0 || (*(char *)(intValue + 0x3e) != '@')))) {\n    if ((ptr1 == (uint *)0x0) && (ptr2 == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      ptr1 = (uint *)(ptr1Value + 1);\n    }\n    else {\n      if (*(short *)(intValue + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)(intValue + 0x2a) == 1) {\n        if (tempPtr == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          tempPtr = *parameters;\n          if ((tempPtr[1] & 0x800) == 0) {\n            *tempPtr = *tempPtr | 0x200;\n          }\n          else {\n            *tempPtr = *tempPtr & 0xfffffbff;\n          }\n        }\n        else if (((tempPtr == (uint *)0x4) || (tempPtr == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (ptr3 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)(intValue + 0x2a) == 2) {\n        if (ptr3 == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        tempPtr = *parameters;\n        if ((tempPtr[1] & 0x800) != 0) {\n          tempPtr[1] = tempPtr[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        tempPtr = *parameters;\n        if ((tempPtr[1] & 0x800) != 0) {\n          tempPtr[1] = tempPtr[1] | 0x1000;\n        }\n      }\n      ptr1 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "update_flags_08001256",
                "param_1": "parameters",
                "puVar1": "tempPtr",
                "param_1[0x14]": "ptr1",
                "param_1[4]": "ptr2",
                "param_1[0xb]": "ptr3",
                "(int)param_1": "intValue",
                "(int)param_1[0x14]": "ptr1Value"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "update_pointer_08001420",
            "code": "\nundefined4 updatePointer_08001420(int *pointer)\n\n{\n  byte *bytePayloadPointer;\n  \n  if (*(short *)((int)pointer + 0x2a) != 0) {\n    bytePayloadPointer = (byte *)pointer[9];\n    pointer[9] = (int)(bytePayloadPointer + 1);\n    *(uint *)(*pointer + 0x10) = (uint)*bytePayloadPointer;\n    *(short *)((int)pointer + 0x2a) = *(short *)((int)pointer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "update_pointer_08001420",
                "param_1": "pointer",
                "pbVar1": "bytePayloadPointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_value_08001440",
            "code": "\nundefined4 updateValue_08001440(int *array)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)array + 0x2a) != 0) {\n    ptr = (undefined *)arrayPtr;\n    arrayPtr = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*array + 0x10);\n    *(short *)((int)array + 0x2a) = *(short *)((int)array + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_value_08001440",
                "param_1": "array",
                "puVar1": "ptr",
                "param_1[9]": "arrayPtr"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "update_flags_08001460",
            "code": "\nundefined4 updateFlags_08001460(uint **flags,uint *value,int length,uint *address)\n\n{\n  undefined4 status;\n  uint *ptr;\n  \n  if (*(char *)((int)flags + 0x3d) == '(') {\n    if (value == (uint *)0x0) {\n      status = 1;\n    }\n    else if (length == 0) {\n      status = 1;\n    }\n    else if (*(char *)(flags + 0xf) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(flags + 0xf) = 1;\n      ptr = *flags;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **flags = **flags & 0xfffff7ff;\n      *(undefined *)((int)flags + 0x3d) = 0x29;\n      *(undefined *)((int)flags + 0x3e) = 0x20;\n      status = 0;\n      otherFlags = (uint *)0x0;\n      newValue = value;\n      *(short *)((int)flags + 0x2a) = (short)length;\n      memory = address;\n      *(undefined2 *)(flags + 10) = *(undefined2 *)((int)flags + 0x2a);\n      *(undefined *)(flags + 0xf) = 0;\n      (*flags)[1] = (*flags)[1] | 0x700;\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08001460": "update_flags_08001460",
                "param_1": "flags",
                "param_2": "value",
                "param_3": "length",
                "param_4": "address",
                "uVar1": "status",
                "puVar2": "ptr",
                "param_1[0x10]": "otherFlags",
                "param_1[9]": "newValue",
                "param_1[0xb]": "memory"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "validate_and_set_parameters_080014ec",
            "code": "\nundefined4 validate_and_set_parameters_080014ec(uint **function_info,uint *input_array,int array_size,uint *output_array)\n\n{\n  undefined4 return_value;\n  uint *pointer_to_function_info;\n  \n  if (*(char *)((int)function_info + 0x3d) == '(') {\n    if (input_array == (uint *)0x0) {\n      return_value = 1;\n    }\n    else if (array_size == 0) {\n      return_value = 1;\n    }\n    else if (*(char *)(function_info + 0xf) == '\\x01') {\n      return_value = 2;\n    }\n    else {\n      *(undefined *)(function_info + 0xf) = 1;\n      pointer_to_function_info = *function_info;\n      if ((*pointer_to_function_info & 1) == 0) {\n        *pointer_to_function_info = *pointer_to_function_info | 1;\n      }\n      **function_info = **function_info & 0xfffff7ff;\n      *(undefined *)((int)function_info + 0x3d) = 0x2a;\n      *(undefined *)((int)function_info + 0x3e) = 0x20;\n      return_value = 0;\n      function_info[0x10] = (uint *)0x0;\n      function_info[9] = input_array;\n      *(short *)((int)function_info + 0x2a) = (short)array_size;\n      function_info[0xb] = output_array;\n      *(undefined2 *)(function_info + 10) = *(undefined2 *)((int)function_info + 0x2a);\n      *(undefined *)(function_info + 0xf) = 0;\n      (*function_info)[1] = (*function_info)[1] | 0x700;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "validate_and_set_parameters_080014ec",
                "param_1": "function_info",
                "param_2": "input_array",
                "param_3": "array_size",
                "param_4": "output_array",
                "uVar1": "return_value",
                "puVar2": "pointer_to_function_info"
            },
            "calling": [
                "FUN_08003880"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_data_structure_08001578",
            "code": "\nundefined4 initializeDataStructure_08001578(uint **dataStructure)\n\n{\n  uint *firstElement;\n  \n  if (*(char *)((int)dataStructure + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)dataStructure + 0x3d) = 0x28;\n  firstElement = *dataStructure;\n  if ((*firstElement & 1) == 0) {\n    *firstElement = *firstElement | 1;\n  }\n  **dataStructure = **dataStructure | 0x400;\n  (*dataStructure)[1] = (*dataStructure)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_data_structure_08001578",
                "param_1": "dataStructure",
                "puVar1": "firstElement"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "FUN_080015bc",
                "FUN_08001684"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_input_080015bc",
            "code": "\nundefined4 processInput_080015bc(int *inputArray)\n\n{\n  char character;\n  byte *bytePointer;\n  \n  character = *(char *)((int)inputArray + 0x3d);\n  if (*(short *)((int)inputArray + 0x2a) != 0) {\n    bytePointer = (byte *)inputArray[9];\n    inputArray[9] = (int)(bytePointer + 1);\n    *(uint *)(*inputArray + 0x10) = (uint)*bytePointer;\n    *(short *)((int)inputArray + 0x2a) = *(short *)((int)inputArray + 0x2a) + -1;\n    if ((*(short *)((int)inputArray + 0x2a) == 0) && (character == ')')) {\n      *(uint *)(*inputArray + 4) = *(uint *)(*inputArray + 4) & 0xfffffbff;\n      inputArray[0xc] = 0x21;\n      *(undefined *)((int)inputArray + 0x3d) = 0x28;\n      FUNC_080015ba();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_input_080015bc",
                "param_1": "inputArray",
                "cVar1": "character",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "FUN_0800160e",
                "FUN_08001bfc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "process_data_0800160e",
            "code": "\nundefined4 processData_0800160e(int *data)\n\n{\n  char charVar;\n  undefined *ptr;\n  \n  charVar = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)ptrArray;\n    ptrArray = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charVar == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      var = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      FUNC_0800160c();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "process_data_0800160e",
                "param_1": "data",
                "cVar1": "charVar",
                "puVar2": "ptr",
                "param_1[9]": "ptrArray",
                "param_1[0xc]": "var"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_0800160c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "process_function_0800165a",
            "code": "\nundefined4 processFunction_0800165a(int *inputArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  uint value;\n  \n  value = *(uint *)(*inputArray + 0x18);\n  if ((value & 0x80) == 0) {\n    result = *(undefined2 *)(inputArray + 3);\n  }\n  else {\n    result = *(undefined2 *)(inputArray + 6);\n  }\n  processParameters(inputArray,(*(uint *)(*inputArray + 0x18) & 4) == 0,result,value,param4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "process_function_0800165a",
                "param_1": "inputArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar2": "value",
                "process_parameters_08003880": "processParameters"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08003880"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "initialize_config_08001684",
            "code": "\nundefined4 initialize_config_08001684(uint **config)\n\n{\n  if (((config[0xb] == (uint *)0x4) || (config[0xb] == (uint *)0x8)) &&\n     (*(char *)((int)config + 0x3d) == '(')) {\n    config[0xb] = (uint *)0xffff0000;\n    (*config)[1] = (*config)[1] & 0xfffff8ff;\n    (*config)[5] = 0xfffffbff;\n    **config = **config & 0xfffffbff;\n    config[0xc] = (uint *)0x0;\n    *(undefined *)((int)config + 0x3d) = 0x20;\n    *(undefined *)((int)config + 0x3e) = 0;\n    initialize_module();\n  }\n  else if (*(char *)((int)config + 0x3d) == '!') {\n    config[0xb] = (uint *)0xffff0000;\n    config[0xc] = (uint *)0x21;\n    *(undefined *)((int)config + 0x3d) = 0x20;\n    *(undefined *)((int)config + 0x3e) = 0;\n    (*config)[1] = (*config)[1] & 0xfffff8ff;\n    (*config)[5] = 0xfffffbff;\n    **config = **config & 0xfffffbff;\n    FUNC_080015ba();\n  }\n  else {\n    (*config)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "initialize_config_08001684",
                "param_1": "config",
                "initialize_and_call_function_080038d0": "initialize_module"
            },
            "calling": [
                "FUN_08001e68"
            ],
            "called": [
                "FUN_080015ba",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "FUN_0800171a",
                "FUN_08001864"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "parse_and_process_data_0800171a",
            "code": "\nundefined4 parse_and_process_data_0800171a(uint **data)\n\n{\n  char char1;\n  uint *ptr2;\n  \n  char1 = *(char *)((int)data + 0x3d);\n  ptr2 = data[11];\n  if ((*(short *)(data + 10) == 0) && (char1 == '!')) {\n    if ((ptr2 == (uint *)0x4) || ((ptr2 == (uint *)0x8 || (ptr2 == (uint *)0xffff0000)))) {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      **data = **data | 0x200;\n      data[12] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      if (*(char *)((int)data + 0x3e) == '@') {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_08001718();\n      }\n      else {\n        *(undefined *)((int)data + 0x3e) = 0;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      (*data)[1] = (*data)[1] & 0xfffff8ff;\n      data[12] = (uint *)0x11;\n      *(undefined *)((int)data + 0x3e) = 0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      FUNC_080015b6();\n    }\n  }\n  else if ((char1 == '!') || ((*(char *)((int)data + 0x3e) == '@' && (char1 == '\\\"')))) {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      (*data)[1] = (*data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)data + 0x3e) == '@') {\n      if (data[20] == (uint *)0x0) {\n        if (data[19] == (uint *)0x1) {\n          (*data)[4] = (uint)data[18] & 0xff;\n          data[20] = (uint *)((int)data[20] + 2);\n        }\n        else {\n          (*data)[4] = (uint)((int)data[18] << 0x10) >> 0x18;\n          data[20] = (uint *)((int)data[20] + 1);\n        }\n      }\n      else if (data[20] == (uint *)0x1) {\n        (*data)[4] = (uint)data[18] & 0xff;\n        data[20] = (uint *)((int)data[20] + 1);\n      }\n      else if (data[20] == (uint *)0x2) {\n        if (*(char *)((int)data + 0x3d) == '\\\"') {\n          **data = **data | 0x100;\n        }\n        else if (*(char *)((int)data + 0x3d) == '!') {\n          ptr2 = data[9];\n          data[9] = (uint *)((int)ptr2 + 1);\n          (*data)[4] = (uint)*(byte *)ptr2;\n          *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      (*data)[4] = (uint)*(byte *)ptr2;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "parse_and_process_data_0800171a",
                "param_1": "data",
                "cVar1": "char1",
                "puVar2": "ptr2",
                "param_1[0xb]": "data[11]",
                "param_1[0xc]": "data[12]",
                "param_1[0x14]": "data[20]",
                "param_1[0x13]": "data[19]",
                "param_1[0x12]": "data[18]"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_data_08001864",
            "code": "\nundefined4 processData_08001864(uint **data)\n\n{\n  uint *value;\n  \n  value = data[0xb];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((value == (uint *)0x4) || (value == (uint *)0x8)) || (value == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        value3 = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          FUNC_08001718();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          FUNC_080015b6();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        value3 = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        FUNC_080015b6();\n      }\n    }\n    else {\n      value = data[9];\n      data[9] = (uint *)((int)value + 1);\n      (*data)[4] = (uint)*(byte *)value;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_data_08001864",
                "param_1": "data",
                "puVar1": "value",
                "param_1[0xc]": "value3"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b6",
                "FUN_08001718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "FUN_08001904",
                "FUN_080019a0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_string_08001904",
            "code": "\nundefined4 processString_08001904(uint **stringPtr)\n\n{\n  uint *tempPtr1;\n  \n  if (*(char *)((int)stringPtr + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)stringPtr + 0x2a) < 4) {\n      if (*(ushort *)((int)stringPtr + 0x2a) < 2) {\n        **stringPtr = **stringPtr & 0xfffffbff;\n        (*stringPtr)[1] = (*stringPtr)[1] & 0xfffff8ff;\n        tempPtr1 = stringPtr[9];\n        stringPtr[9] = (uint *)((int)tempPtr1 + 1);\n        *(char *)tempPtr1 = (char)(*stringPtr)[4];\n        *(short *)((int)stringPtr + 0x2a) = *(short *)((int)stringPtr + 0x2a) + -1;\n        *(undefined *)((int)stringPtr + 0x3d) = 0x20;\n        stringPtr[0xc] = (uint *)0x0;\n        if (*(char *)((int)stringPtr + 0x3e) == '@') {\n          *(undefined *)((int)stringPtr + 0x3e) = 0;\n          FUNC_08001902();\n        }\n        else {\n          *(undefined *)((int)stringPtr + 0x3e) = 0;\n          FUNC_080015b8();\n        }\n      }\n    }\n    else {\n      tempPtr1 = stringPtr[9];\n      stringPtr[9] = (uint *)((int)tempPtr1 + 1);\n      *(char *)tempPtr1 = (char)(*stringPtr)[4];\n      *(short *)((int)stringPtr + 0x2a) = *(short *)((int)stringPtr + 0x2a) + -1;\n      if (*(short *)((int)stringPtr + 0x2a) == 3) {\n        (*stringPtr)[1] = (*stringPtr)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_string_08001904",
                "param_1": "stringPtr",
                "puVar1": "tempPtr1"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "update_flags_and_values_080019a0",
            "code": "\nundefined4 updateFlagsAndValues_080019a0(uint **paramList)\n\n{\n  uint *tempPointer;\n  \n  if (*(short *)((int)paramList + 0x2a) == 4) {\n    (*paramList)[1] = (*paramList)[1] & 0xfffffbff;\n    tempPointer = pointerList;\n    pointerList = (uint *)((int)tempPointer + 1);\n    *(char *)tempPointer = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n  }\n  else if (*(short *)((int)paramList + 0x2a) == 3) {\n    (*paramList)[1] = (*paramList)[1] & 0xfffffbff;\n    **paramList = **paramList & 0xfffffbff;\n    tempPointer = pointerList;\n    pointerList = (uint *)((int)tempPointer + 1);\n    *(char *)tempPointer = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n  }\n  else if (*(short *)((int)paramList + 0x2a) == 2) {\n    if ((int)paramList[0xb] - 1U < 2) {\n      **paramList = **paramList & 0xfffffbff;\n      **paramList = **paramList | 0x100;\n    }\n    else {\n      **paramList = **paramList | 0x200;\n    }\n    tempPointer = pointerList;\n    pointerList = (uint *)((int)tempPointer + 1);\n    *(char *)tempPointer = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n    tempPointer = pointerList;\n    pointerList = (uint *)((int)tempPointer + 1);\n    *(char *)tempPointer = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n    (*paramList)[1] = (*paramList)[1] & 0xfffffcff;\n    *(undefined *)((int)paramList + 0x3d) = 0x20;\n    counter = (uint *)0x0;\n    if (*(char *)((int)paramList + 0x3e) == '@') {\n      *(undefined *)((int)paramList + 0x3e) = 0;\n      FUNC_08001902();\n    }\n    else {\n      *(undefined *)((int)paramList + 0x3e) = 0;\n      FUNC_080015b8();\n    }\n  }\n  else {\n    tempPointer = pointerList;\n    pointerList = (uint *)((int)tempPointer + 1);\n    *(char *)tempPointer = (char)(*paramList)[4];\n    *(short *)((int)paramList + 0x2a) = *(short *)((int)paramList + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "update_flags_and_values_080019a0",
                "param_1": "paramList",
                "puVar1": "tempPointer",
                "param_1[9]": "pointerList",
                "param_1[0xc]": "counter"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_080015b8",
                "FUN_08001902"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_and_call_function_08001ab0",
            "code": "\nvoid initializeAndCallFunction_08001ab0(uint **param)\n\n{\n  int result;\n  uint *tempPtr1;\n  uint *tempPtr2;\n  \n  if (*(byte *)((int)param + 0x3d) - 0x29 < 2) {\n    param[0xc] = (uint *)0x0;\n    *(undefined *)((int)param + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)param + 0x3d) != '`') && (((*param)[1] & 0x800) == 0)) {\n      *(undefined *)((int)param + 0x3d) = 0x20;\n    }\n    param[0xc] = (uint *)0x0;\n    *(undefined *)((int)param + 0x3e) = 0;\n  }\n  **param = **param & 0xfffff7ff;\n  tempPtr2 = *param;\n  if ((tempPtr2[1] & 0x800) == 0) {\n    if (*(char *)((int)param + 0x3d) == '`') {\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      param[0x10] = (uint *)0x0;\n      if ((tempPtr2[5] & 0x40) != 0) {\n        tempPtr1 = param[9];\n        param[9] = (uint *)((int)tempPtr1 + 1);\n        *(char *)tempPtr1 = (char)tempPtr2[4];\n      }\n      **param = **param & 0xfffffffe;\n      FUNC_08001aac(param);\n    }\n    else {\n      if ((tempPtr2[5] & 0x40) != 0) {\n        tempPtr1 = param[9];\n        param[9] = (uint *)((int)tempPtr1 + 1);\n        *(char *)tempPtr1 = (char)tempPtr2[4];\n      }\n      initialize_data_if_zero_08003900(param);\n    }\n  }\n  else {\n    tempPtr2[1] = tempPtr2[1] & 0xfffff7ff;\n    if (*(char *)((int)param[0xd] + 0x35) == '\\x01') {\n      param[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      result = update_param_08000f8c(param[0xe]);\n      if (result != 0) {\n        if (((*param)[5] & 0x40) != 0) {\n          tempPtr2 = param[9];\n          param[9] = (uint *)((int)tempPtr2 + 1);\n          *(char *)tempPtr2 = (char)(*param)[4];\n        }\n        **param = **param & 0xfffffffe;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        (*(code *)param[0xe][0x14])();\n      }\n    }\n    else {\n      param[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      result = update_param_08000f8c(param[0xd]);\n      if (result != 0) {\n        **param = **param & 0xfffffffe;\n        *(undefined *)((int)param + 0x3d) = 0x20;\n        (*(code *)param[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)param + 0x3d) == '(') && (((uint)param[0x10] & 4) != 0)) {\n    param[0xb] = (uint *)0xffff0000;\n    param[0xc] = (uint *)0x0;\n    *(undefined *)((int)param + 0x3d) = 0x20;\n    *(undefined *)((int)param + 0x3e) = 0;\n    initialize_and_call_function_080038d0(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_and_call_function_08001ab0",
                "param_1": "param",
                "iVar1": "result",
                "puVar2": "tempPtr1",
                "puVar3": "tempPtr2"
            },
            "calling": [
                "FUN_08001e68",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08000f8c",
                "FUN_080038d0",
                "FUN_08001aac",
                "FUN_08003900"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_param_08001bfc",
            "code": "\nundefined4 processParam_08001bfc(uint **param)\n\n{\n  char charValue;\n  uint *ptr1;\n  uint *ptr2;\n  \n  charValue = *(char *)((int)param + 0x3d);\n  (*param)[1] = (*param)[1] & 0xfffff8ff;\n  **param = **param | 1;\n  **param = **param & 0xfffffbff;\n  ptr1 = *param;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)param + 0x3d) == '\\\"') || (*(char *)((int)param + 0x3d) == '*')) {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xe] + 4);\n    }\n    else {\n      *(short *)((int)param + 0x2a) = (short)*(undefined4 *)(*param[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)param + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = param[9];\n      param[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    if (((*param)[5] & 0x40) != 0) {\n      ptr1 = param[9];\n      param[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*param)[4];\n      *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n    }\n    param[0x10] = (uint *)((uint)param[0x10] | 4);\n  }\n  if (param[0x10] == (uint *)0x0) {\n    if (((charValue == '(') || (charValue == '*')) || (charValue == ')')) {\n      param[0xb] = (uint *)0xffff0000;\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      initialize_and_call_function_080038d0();\n    }\n    else if ((param[0xc] == (uint *)0x22) || (charValue == '\\\"')) {\n      param[0xc] = (uint *)0x0;\n      *(undefined *)((int)param + 0x3d) = 0x20;\n      *(undefined *)((int)param + 0x3e) = 0;\n      FUNC_0800160c();\n    }\n  }\n  else {\n    initialize_and_call_function_08001ab0();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_param_08001bfc",
                "param_1": "param",
                "cVar1": "charValue",
                "puVar2": "ptr1",
                "puVar3": "ptr2"
            },
            "calling": [
                "FUN_08001d00"
            ],
            "called": [
                "FUN_08001ab0",
                "FUN_0800160c",
                "FUN_080038d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "process_data_08001d00",
            "code": "\nvoid process_data_08001d00(int *data)\n\n{\n  int ptr_value;\n  uint flag_value;\n  uint condition_value;\n  uint update_flag_value;\n  \n  ptr_value = *data;\n  update_flag_value = *(uint *)(ptr_value + 0x18);\n  flag_value = *(uint *)(ptr_value + 0x14);\n  condition_value = *(uint *)(ptr_value + 4);\n  if ((*(char *)((int)data + 0x3e) == '\\x10') || (*(char *)((int)data + 0x3e) == '@')) {\n    if (((flag_value & 0x10001) == 0) || ((condition_value & 0x200) == 0)) {\n      if (((flag_value & 0x10008) == 0) || ((condition_value & 0x200) == 0)) {\n        if (((flag_value & 0x10002) != 0) && ((condition_value & 0x200) != 0)) {\n          update_flags_08001256(data);\n        }\n      }\n      else {\n        update_value_from_pointer_0800124a(data);\n      }\n    }\n    else {\n      update_flag_based_on_conditions_080011c0(data);\n    }\n    if ((update_flag_value & 0x100004) == 0) {\n      if ((((flag_value & 0x10040) != 0) && ((condition_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_string_08001904(data);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((condition_value & 0x200) != 0)) {\n        update_flags_and_values_080019a0(data);\n        return;\n      }\n    }\n    else {\n      if ((((flag_value & 0x10080) != 0) && ((condition_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        parse_and_process_data_08001d00_0800171a(data);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((condition_value & 0x200) != 0)) {\n        process_data_08001d00_08001864(data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag_value & 0x10002) != 0) && ((condition_value & 0x200) != 0)) {\n      process_function_0800165a();\n      return;\n    }\n    if (((flag_value & 0x10010) != 0) && ((condition_value & 0x200) != 0)) {\n      process_param_08001bfc(data);\n      return;\n    }\n    if ((update_flag_value & 0x100004) == 0) {\n      if ((((flag_value & 0x10040) != 0) && ((condition_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_data_08001d00_0800160e(data);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((condition_value & 0x200) != 0)) {\n        update_value_08001440(data);\n      }\n    }\n    else {\n      if ((((flag_value & 0x10080) != 0) && ((condition_value & 0x400) != 0)) && ((flag_value & 0x10004) == 0)) {\n        process_input_080015bc(data);\n        return;\n      }\n      if (((flag_value & 0x10004) != 0) && ((condition_value & 0x200) != 0)) {\n        update_pointer_08001420(data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "process_data_08001d00",
                "param_1": "data",
                "iVar1": "ptr_value",
                "uVar2": "flag_value",
                "uVar3": "condition_value",
                "uVar4": "update_flag_value"
            },
            "calling": [],
            "called": [
                "FUN_08001440",
                "FUN_080019a0",
                "FUN_080015bc",
                "FUN_0800165a",
                "FUN_0800160e",
                "FUN_0800171a",
                "FUN_08001256",
                "FUN_08001420",
                "FUN_08001904",
                "FUN_0800124a",
                "FUN_080011c0",
                "FUN_08001bfc",
                "FUN_08001864"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "update_config_08001e68",
            "code": "\nvoid updateConfig_08001e68(uint **config)\n\n{\n  char charValue;\n  uint *param;\n  uint value1;\n  uint value2;\n  \n  param = *config;\n  value1 = param[5];\n  value2 = param[1];\n  if (((value1 & 0x10100) != 0) && ((value2 & 0x100) != 0)) {\n    config[0x10] = (uint *)((uint)config[0x10] | 1);\n    param[5] = 0xfffffeff;\n  }\n  if (((value1 & 0x10200) != 0) && ((value2 & 0x100) != 0)) {\n    config[0x10] = (uint *)((uint)config[0x10] | 2);\n    (*config)[5] = 0xfffffdff;\n  }\n  if (((value1 & 0x10400) != 0) && ((value2 & 0x100) != 0)) {\n    charValue = *(char *)((int)config + 0x3d);\n    if (((*(char *)((int)config + 0x3e) == ' ') && (*(short *)((int)config + 0x2a) == 0)) &&\n       (((charValue == '!' || (charValue == ')')) || ((charValue == '(' && (config[0xc] == (uint *)0x21)))))) {\n      initialize_config_08001684(config);\n    }\n    else {\n      config[0x10] = (uint *)((uint)config[0x10] | 4);\n      if (*(char *)((int)config + 0x3e) == '\\x10') {\n        **config = **config | 0x200;\n      }\n      (*config)[5] = 0xfffffbff;\n    }\n  }\n  if (((value1 & 0x10800) != 0) && ((value2 & 0x100) != 0)) {\n    config[0x10] = (uint *)((uint)config[0x10] | 8);\n    (*config)[5] = 0xfffff7ff;\n  }\n  if (config[0x10] != (uint *)0x0) {\n    initialize_and_call_function_08001ab0(config);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "update_config_08001e68",
                "param_1": "config",
                "cVar1": "charValue",
                "puVar2": "param",
                "uVar3": "value1",
                "uVar4": "value2"
            },
            "calling": [],
            "called": [
                "FUN_08001ab0",
                "FUN_08001684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "initialize_data_08001f9c",
            "code": "\n\n\nundefined4 initializeData_08001f9c(void)\n\n{\n  int startTime;\n  int currentTime;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  startTime = get_data_08000e30();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      startTime = get_data_08000e30();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        currentTime = get_data_08000e30();\n      } while ((uint)(currentTime - startTime) < 0x3e9);\n      return 3;\n    }\n    currentTime = get_data_08000e30();\n  } while ((uint)(currentTime - startTime) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "initialize_data_08001f9c",
                "iVar1": "startTime",
                "iVar2": "currentTime"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "check_and_set_configuration_0800201c",
            "code": "\n\n\nundefined4 checkAndSetConfiguration_0800201c(uint *config)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isFirstTime;\n  \n  if (config == (uint *)0x0) {\n    return 1;\n  }\n  if ((*config & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (config[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (config[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (config[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (config[1] == 0) {\n        startTime = get_data_08000e30();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = get_data_08000e30();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = get_data_08000e30();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = get_data_08000e30();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*config & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (config[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | config[4] << 3;\n    }\n    else if (config[3] == 0) {\n      _DAT_42470000 = 0;\n      startTime = get_data_08000e30();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = get_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTime = get_data_08000e30();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = get_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | config[4] << 3;\n    }\n  }\n  if ((*config & 8) != 0) {\n    if (config[5] == 0) {\n      _DAT_42470e80 = 0;\n      startTime = get_data_08000e30();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = get_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTime = get_data_08000e30();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = get_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*config & 4) != 0) {\n    isFirstTime = (_DAT_40023840 & 0x10000000) == 0;\n    if (isFirstTime) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = get_data_08000e30();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = get_data_08000e30();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (config[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (config[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (config[2] == 0) {\n      startTime = get_data_08000e30();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = get_data_08000e30();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = get_data_08000e30();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = get_data_08000e30();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isFirstTime) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (config[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (config[6] == 2) {\n    _DAT_42470060 = 0;\n    startTime = get_data_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             config[7] | config[8] | config[9] << 6 | ((config[10] >> 1) - 1) * 0x10000 |\n             config[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startTime = get_data_08000e30();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = get_data_08000e30();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = get_data_08000e30();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startTime = get_data_08000e30();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = get_data_08000e30();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "check_and_set_configuration_0800201c",
                "param_1": "config",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isFirstTime"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_frequency_080023b4",
            "code": "\n\n\nuint calculate_frequency_080023b4(void)\n\n{\n  undefined4 parameter;\n  uint result;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result(result * 16000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)calculate_carry(result * 0x3d08,result)) * 0x400 | result * 0x3d09 >> 0x16,\n                         _DAT_40023804 & 0x3f,0,parameter);\n  }\n  else {\n    result = (_DAT_40023804 << 0x11) >> 0x17;\n    result = calculate_result(result * 8000000,\n                         (((uint)(result * 0x20 < result) * -0x3f -\n                          (uint)(result * 0x7c0 < result * 0x1f)) * 8 +\n                         (uint)calculate_carry(result * 0x3d08,result)) * 0x200,_DAT_40023804 & 0x3f,0,parameter);\n  }\n  return result / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_frequency_080023b4",
                "in_r3": "parameter",
                "uVar1": "result",
                "CARRY4": "calculate_carry",
                "calculate_result_080002d0": "calculate_result"
            },
            "calling": [
                "FUN_08002488"
            ],
            "called": [
                "FUN_080002d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "configure_peripheral_08002488",
            "code": "\n\n\nundefined4 configurePeripheral_08002488(uint *configurationFlags,uint numFlags)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  if (configurationFlags == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < numFlags) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numFlags);\n    if (numFlags != (numFlags & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configurationFlags & 2) != 0) {\n    if ((*configurationFlags & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*configurationFlags & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | configurationFlags[2];\n  }\n  if ((*configurationFlags & 1) != 0) {\n    uVar3 = configurationFlags[1];\n    if (uVar3 == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (uVar3 - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = uVar3 | _DAT_40023808 & 0xfffffffc;\n    iVar1 = getCurrentTime();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == configurationFlags[1] * 4) break;\n      iVar2 = getCurrentTime();\n      if (5000 < (uint)(iVar2 - iVar1)) {\n        return 3;\n      }\n    }\n  }\n  if (numFlags < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)numFlags);\n    if (numFlags != (numFlags & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*configurationFlags & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | configurationFlags[3];\n  }\n  if ((*configurationFlags & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | configurationFlags[4] << 3;\n  }\n  uVar3 = calculateFrequency();\n  DAT_2000002c = uVar3 >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  initializeAndUpdateData(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "configure_peripheral_08002488",
                "param_1": "configurationFlags",
                "param_2": "numFlags",
                "get_data_08000e30": "getCurrentTime",
                "calculate_frequency_080023b4": "calculateFrequency",
                "initialize_and_update_data_08000d98": "initializeAndUpdateData"
            },
            "calling": [
                "FUN_08000c8c"
            ],
            "called": [
                "FUN_08000e30",
                "FUN_08000d98",
                "FUN_080023b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_value_080025e0",
            "code": "\nundefined4 get_data_value_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_value_080025e0"
            },
            "calling": [
                "FUN_0800260c",
                "FUN_080025ec",
                "FUN_08000c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "get_shifted_data_value_080025ec",
            "code": "\n\n\nuint get_shifted_data_value_080025ec(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  return data_value >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "get_shifted_data_value_080025ec",
                "uVar1": "data_value",
                "get_data_value_080025e0": "get_data_value"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_shifted_data_value_0800260c",
            "code": "\n\n\nuint get_shifted_data_value_0800260c(void)\n\n{\n  uint dataValue;\n  \n  dataValue = get_data_value();\n  return dataValue >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_shifted_data_value_0800260c",
                "uVar1": "dataValue",
                "get_data_value_080025e0": "get_data_value"
            },
            "calling": [
                "FUN_080029c8"
            ],
            "called": [
                "FUN_080025e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "execute_and_update_flags_0800262c",
            "code": "\n\n\nvoid execute_and_update_flags_0800262c(int *ptr_to_flag_addresses)\n\n{\n  if (((*(uint *)(*ptr_to_flag_addresses + 0xc) & 0x100) != 0) && ((*(uint *)(*ptr_to_flag_addresses + 8) & 0x1000) != 0)) {\n    execute_callback();\n    *(uint *)(*ptr_to_flag_addresses + 0xc) = *(uint *)(*ptr_to_flag_addresses + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*ptr_to_flag_addresses + 0xc) & 0x200) != 0) && ((*(uint *)(*ptr_to_flag_addresses + 8) & 0x2000) != 0)) {\n    FUNC_0800268c(ptr_to_flag_addresses);\n    *(uint *)(*ptr_to_flag_addresses + 0xc) = *(uint *)(*ptr_to_flag_addresses + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)ptr_to_flag_addresses + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "execute_and_update_flags_0800262c",
                "param_1": "ptr_to_flag_addresses",
                "execute_callback_08003594": "execute_callback"
            },
            "calling": [],
            "called": [
                "FUN_08003594",
                "FUN_0800268c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "initialize_memory_permissions_0800268e",
            "code": "\nvoid initializeMemoryPermissions_0800268e(uint **memoryData)\n\n{\n  uint *memoryPointer;\n  \n  *(undefined *)((int)memoryData + 0x39) = 2;\n  memoryPointer = *memoryData;\n  if ((memoryPointer[8] & 0x1111) == 0) {\n    if ((memoryPointer[8] & 0x444) == 0) {\n      *memoryPointer = *memoryPointer & 0xfffffffe;\n    }\n  }\n  initializeMemoryPermissions_0800268eHelper(memoryData);\n  *(undefined *)((int)memoryData + 0x39) = 0;\n  *(undefined *)(memoryData + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "initialize_memory_permissions_0800268e",
                "param_1": "memoryData",
                "puVar1": "memoryPointer",
                "initialize_memory_permissions_0800340c": "initializeMemoryPermissionsHelper"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800340c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_flags_080026ce",
            "code": "\nvoid processFlags_080026ce(int *flags)\n\n{\n  int value;\n  \n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 2) != 0) && ((*(uint *)(value + 0xc) & 2) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffd;\n    *(undefined *)(flags + 6) = 1;\n    if ((*(uint *)(*flags + 0x18) & 3) == 0) {\n      executeCallbackIfEnabled();\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8();\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 4) != 0) && ((*(uint *)(value + 0xc) & 4) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffb;\n    *(undefined *)(flags + 6) = 2;\n    if ((*(uint *)(*flags + 0x18) & 0x300) == 0) {\n      executeCallbackIfEnabled(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 8) != 0) && ((*(uint *)(value + 0xc) & 8) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffff7;\n    *(undefined *)(flags + 6) = 4;\n    if ((*(uint *)(*flags + 0x1c) & 3) == 0) {\n      executeCallbackIfEnabled(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x10) != 0) && ((*(uint *)(value + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffef;\n    *(undefined *)(flags + 6) = 8;\n    if ((*(uint *)(*flags + 0x1c) & 0x300) == 0) {\n      executeCallbackIfEnabled(flags);\n      FUNC_080026ca(flags);\n    }\n    else {\n      FUNC_080026c8(flags);\n    }\n    *(undefined *)(flags + 6) = 0;\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 1) != 0) && ((*(uint *)(value + 0xc) & 1) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xfffffffe;\n    executeSubtractFour(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x80) != 0) && ((*(uint *)(value + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffff7f;\n    FUNC_0800293e(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x40) != 0) && ((*(uint *)(value + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffbf;\n    FUNC_080026cc(flags);\n  }\n  value = *flags;\n  if (((*(uint *)(value + 0x10) & 0x20) != 0) && ((*(uint *)(value + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(value + 0x10) = 0xffffffdf;\n    FUNC_0800293c(flags);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_flags_080026ce",
                "param_1": "flags",
                "iVar1": "value",
                "execute_callback_if_enabled_08003754": "executeCallbackIfEnabled",
                "execute_subtract_four_0800376e": "executeSubtractFour"
            },
            "calling": [
                "FUN_0800377c"
            ],
            "called": [
                "FUN_0800376e",
                "FUN_0800293c",
                "FUN_080026cc",
                "FUN_08003754",
                "FUN_080026c8",
                "FUN_080026ca",
                "FUN_0800293e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bitwise_value_08002848",
            "code": "\nvoid updateBitwiseValue_08002848(int baseAddress,uint bitPosition,int newValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) bitwiseAND bitwiseNOT(1 << (bitPosition bitwiseAND 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | newValue << (bitPosition bitwiseAND 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bitwise_value_08002848",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "newValue",
                "&": "bitwiseAND",
                "~": "bitwiseNOT"
            },
            "calling": [
                "FUN_08002864"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "update_bitwise_value_08002864",
            "code": "\nundefined4 updateBitwiseValue_08002864(uint **bitwiseArray,undefined4 value)\n\n{\n  bool isSpecialAddress;\n  uint *currentAddress;\n  \n  update_bitwise_value_08002848(*bitwiseArray,value,0);\n  currentAddress = *bitwiseArray;\n  if (currentAddress == (uint *)0x40010000) {\n    isSpecialAddress = true;\n  }\n  else if (currentAddress == (uint *)0x40010400) {\n    isSpecialAddress = true;\n  }\n  else {\n    isSpecialAddress = false;\n  }\n  if (((isSpecialAddress) && ((currentAddress[8] & 0x1111) == 0)) && ((currentAddress[8] & 0x444) == 0)) {\n    currentAddress[0x11] = currentAddress[0x11] & 0xffff7fff;\n  }\n  currentAddress = *bitwiseArray;\n  if (((currentAddress[8] & 0x1111) == 0) && ((currentAddress[8] & 0x444) == 0)) {\n    *currentAddress = *currentAddress & 0xfffffffe;\n  }\n  *(undefined *)((int)bitwiseArray + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "update_bitwise_value_08002864",
                "param_1": "bitwiseArray",
                "param_2": "value",
                "bVar1": "isSpecialAddress",
                "puVar2": "currentAddress"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_08002848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_value_080028d4",
            "code": "\nvoid updateValue_080028d4(int ptr,uint offset,int value)\n\n{\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) & ~(4 << (offset & 0xff));\n  *(uint *)(ptr + 0x20) = *(uint *)(ptr + 0x20) | value << (offset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_value_080028d4",
                "param_1": "ptr",
                "param_2": "offset",
                "param_3": "value"
            },
            "calling": [
                "FUN_080028f0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "update_and_check_condition_080028f0",
            "code": "\nundefined4 update_and_check_condition_080028f0(uint **arrayPtr,undefined4 value)\n\n{\n  uint *array;\n  \n  update_value_080028d4(*arrayPtr,value,0);\n  array = *arrayPtr;\n  if (((array[8] & 0x1111) == 0) && ((array[8] & 0x444) == 0)) {\n    array[0x11] = array[0x11] & 0xffff7fff;\n  }\n  array = *arrayPtr;\n  if (((array[8] & 0x1111) == 0) && ((array[8] & 0x444) == 0)) {\n    *array = *array & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "update_and_check_condition_080028f0",
                "param_1": "arrayPtr",
                "param_2": "value",
                "puVar1": "array"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_080028d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "set_flags_and_value_08002940",
            "code": "\nvoid setFlagsAndValue_08002940(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xfffffedf;\n  *(uint *)(*ptr + 0x14) = *(uint *)(*ptr + 0x14) & 0xfffffffe;\n  *(undefined *)((int)ptr + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "set_flags_and_value_08002940",
                "param_1": "ptr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "parse_and_update_data_0800295c",
            "code": "\nundefined4 parse_and_update_data_0800295c(int *data_ptr)\n\n{\n  short remaining_iterations;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data_ptr + 0x39) != '!') {\n    return 2;\n  }\n  if (data_ptr[2] == 0x1000) {\n    *(uint *)(*data_ptr + 4) = *(ushort *)data_ptr[8] & 0x1ff;\n    if (data_ptr[4] == 0) {\n      data_ptr[8] = data_ptr[8] + 2;\n    }\n    else {\n      data_ptr[8] = data_ptr[8] + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)data_ptr[8];\n    data_ptr[8] = (int)(byte_ptr + 1);\n    *(uint *)(*data_ptr + 4) = (uint)*byte_ptr;\n  }\n  remaining_iterations = *(short *)((int)data_ptr + 0x26) + -1;\n  *(short *)((int)data_ptr + 0x26) = remaining_iterations;\n  if (remaining_iterations == 0) {\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xffffff7f;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "parse_and_update_data_0800295c",
                "param_1": "data_ptr",
                "sVar1": "remaining_iterations",
                "pbVar2": "byte_ptr"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_shifted_value_080029c8",
            "code": "\nvoid calculateShiftedValue_080029c8(int *inputValues)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int param1Value1;\n  int param1Value2;\n  int param1Value3;\n  int param1Value4;\n  int param1Value;\n  \n  *(uint *)(*inputValues + 0x10) = *(uint *)(*inputValues + 0x10) & 0xffffcfff | inputValues[3];\n  *(uint *)(*inputValues + 0xc) =\n       *(uint *)(*inputValues + 0xc) & 0xffff69f3 | inputValues[2] | inputValues[4] | inputValues[5] | inputValues[7];\n  *(uint *)(*inputValues + 0x14) = *(uint *)(*inputValues + 0x14) & 0xfffffcff | inputValues[6];\n  if (inputValues[7] == 0x8000) {\n    param1Value = *inputValues;\n    if ((param1Value != 0x40011000) && (param1Value != 0x40011400)) {\n      shiftedValue1 = get_shifted_data_value_080025ec();\n      param1Value1 = inputValues[1];\n      shiftedValue2 = get_shifted_data_value_080025ec();\n      param1Value2 = inputValues[1];\n      shiftedValue3 = get_shifted_data_value_080025ec();\n      param1Value3 = inputValues[1];\n      shiftedValue4 = get_shifted_data_value_080025ec();\n      param1Value4 = inputValues[1];\n      shiftedValue5 = get_shifted_data_value_080025ec();\n      *(uint *)(param1Value + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 1) +\n                          (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) /\n                                (ulonglong)(uint)(inputValues[1] << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 1) +\n             (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 1)) / 100) * 0x10;\n      return;\n    }\n    shiftedValue1 = get_shifted_data_value_0800260c();\n    param1Value1 = inputValues[1];\n    shiftedValue2 = get_shifted_data_value_0800260c();\n    param1Value2 = inputValues[1];\n    shiftedValue3 = get_shifted_data_value_0800260c();\n    param1Value3 = inputValues[1];\n    shiftedValue4 = get_shifted_data_value_0800260c();\n    param1Value4 = inputValues[1];\n    shiftedValue5 = get_shifted_data_value_0800260c();\n    *(uint *)(param1Value + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 1) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputValues[1] << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 1) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 1)) / 100) * 0x10;\n    return;\n  }\n  param1Value = *inputValues;\n  if ((param1Value != 0x40011000) && (param1Value != 0x40011400)) {\n    shiftedValue1 = get_shifted_data_value_080025ec();\n    param1Value1 = inputValues[1];\n    shiftedValue2 = get_shifted_data_value_080025ec();\n    param1Value2 = inputValues[1];\n    shiftedValue3 = get_shifted_data_value_080025ec();\n    param1Value3 = inputValues[1];\n    shiftedValue4 = get_shifted_data_value_080025ec();\n    param1Value4 = inputValues[1];\n    shiftedValue5 = get_shifted_data_value_080025ec();\n    *(uint *)(param1Value + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputValues[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedValue1 = get_shifted_data_value_0800260c();\n  param1Value1 = inputValues[1];\n  shiftedValue2 = get_shifted_data_value_0800260c();\n  param1Value2 = inputValues[1];\n  shiftedValue3 = get_shifted_data_value_0800260c();\n  param1Value3 = inputValues[1];\n  shiftedValue4 = get_shifted_data_value_0800260c();\n  param1Value4 = inputValues[1];\n  shiftedValue5 = get_shifted_data_value_0800260c();\n  *(uint *)(param1Value + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(shiftedValue4 * 0x19) / (uint)(param1Value4 << 2) +\n                      (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputValues[1] << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(shiftedValue2 * 0x19) / (uint)(param1Value2 << 2) +\n         (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(param1Value3 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(param1Value1 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_shifted_value_080029c8",
                "param_1": "inputValues",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "param1Value1",
                "iVar7": "param1Value2",
                "iVar8": "param1Value3",
                "iVar9": "param1Value4",
                "iVar10": "param1Value"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [
                "FUN_0800260c",
                "FUN_080025ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "check_validity_08002d0c",
            "code": "\nundefined4 checkValidity_08002d0c(uint **pointerArray,uint value,uint isTrue,int baseValue,uint threshold)\n\n{\n  int dataDifference;\n  \n  do {\n    if (((value & ~**pointerArray) == 0) != isTrue) {\n      return 0;\n    }\n  } while ((threshold == 0xffffffff) ||\n          ((threshold != 0 && (dataDifference = get_data_08000e30(), (uint)(dataDifference - baseValue) <= threshold))));\n  (*pointerArray)[3] = (*pointerArray)[3] & 0xfffffe5f;\n  (*pointerArray)[5] = (*pointerArray)[5] & 0xfffffffe;\n  *(undefined *)((int)pointerArray + 0x39) = 0x20;\n  *(undefined *)((int)pointerArray + 0x3a) = 0x20;\n  *(undefined *)(pointerArray + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "check_validity_08002d0c",
                "param_1": "pointerArray",
                "param_2": "value",
                "param_3": "isTrue",
                "param_4": "baseValue",
                "param_5": "threshold",
                "iVar1": "dataDifference"
            },
            "calling": [
                "FUN_08002dd0"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "FUN_08002d72"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "process_data_08002d72",
            "code": "\nundefined4 processData_08002d72(int *dataPtr)\n\n{\n  if (dataPtr != (int *)0x0) {\n    if (*(char *)((int)dataPtr + 0x39) == '\\0') {\n      *(undefined *)(dataPtr + 0xe) = 0;\n      FUNC_08002d70();\n    }\n    *(undefined *)((int)dataPtr + 0x39) = 0x24;\n    *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) & 0xffffdfff;\n    calculateShiftedValue(dataPtr);\n    *(uint *)(*dataPtr + 0x10) = *(uint *)(*dataPtr + 0x10) & 0xffffb7ff;\n    *(uint *)(*dataPtr + 0x14) = *(uint *)(*dataPtr + 0x14) & 0xffffffd5;\n    *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) | 0x2000;\n    value4 = 0;\n    *(undefined *)((int)dataPtr + 0x39) = 0x20;\n    *(undefined *)((int)dataPtr + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "process_data_08002d72",
                "param_1": "dataPtr",
                "calculate_shifted_value_080029c8(param_1)": "calculateShiftedValue(dataPtr)",
                "param_1[0xf]": "value4"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080029c8",
                "FUN_08002d70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_data_08002dd0",
            "code": "\nundefined4 process_data_08002dd0(int *data_array,ushort *data_values,int num_values,undefined4 additional_param)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (*(char *)((int)data_array + 0x39) == ' ') {\n    if (data_values == (ushort *)0x0) {\n      status = 1;\n    }\n    else if (num_values == 0) {\n      status = 1;\n    }\n    else if (*(char *)(data_array + 0xe) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(data_array + 0xe) = 1;\n      data_index = 0;\n      *(undefined *)((int)data_array + 0x39) = 0x21;\n      status = get_data;\n      *(short *)(data_array + 9) = (short)num_values;\n      *(short *)((int)data_array + 0x26) = (short)num_values;\n      while (*(short *)((int)data_array + 0x26) != 0) {\n        *(short *)((int)data_array + 0x26) = *(short *)((int)data_array + 0x26) + -1;\n        if (check_value == 0x1000) {\n          result = check_validity_08002d0c(data_array,0x80,0,status,additional_param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_array + 4) = *data_values & 0x1ff;\n          if (data_array[4] == 0) {\n            data_values = data_values + 1;\n          }\n          else {\n            data_values = (ushort *)((int)data_values + 1);\n          }\n        }\n        else {\n          result = check_validity_08002d0c(data_array,0x80,0,status,additional_param);\n          if (result != 0) {\n            return 3;\n          }\n          *(uint *)(*data_array + 4) = (uint)*(byte *)data_values;\n          data_values = (ushort *)((int)data_values + 1);\n        }\n      }\n      result = check_validity_08002d0c(data_array,0x40,0,status,additional_param);\n      if (result == 0) {\n        *(undefined *)((int)data_array + 0x39) = 0x20;\n        *(undefined *)(data_array + 0xe) = 0;\n        status = 0;\n      }\n      else {\n        status = 3;\n      }\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_data_08002dd0",
                "param_1": "data_array",
                "param_2": "data_values",
                "param_3": "num_values",
                "param_4": "additional_param",
                "iVar1": "result",
                "uVar2": "status",
                "param_1[0xf]": "data_index",
                "get_data_08000e30()": "get_data",
                "param_1[2]": "check_value"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08002d0c",
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "validate_and_update_parameters_08002eb2",
            "code": "\nundefined4 validate_and_update_parameters_08002eb2(int *input_array,int param_2_value,int param_3_value)\n\n{\n  if (*(char *)((int)input_array + 0x39) != ' ') {\n    return 2;\n  }\n  if (param_2_value == 0) {\n    return 1;\n  }\n  if (param_3_value == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[8] = param_2_value;\n    *(short *)(input_array + 9) = short_param_3_value;\n    *(short *)((int)input_array + 0x26) = short_param_3_value;\n    input_array[0xf] = 0;\n    *(undefined *)((int)input_array + 0x39) = 0x21;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "validate_and_update_parameters_08002eb2",
                "param_1": "input_array",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "(short)param_3": "short_param_3_value"
            },
            "calling": [
                "FUN_08003f48",
                "FUN_08003eac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_input_08002efa",
            "code": "\nundefined4 validateInput_08002efa(int *inputArray,int value1,int value2)\n\n{\n  if (*(char *)((int)inputArray + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(inputArray + 0xe) != '\\x01') {\n    inputArray[10] = value1;\n    *(short *)(inputArray + 0xb) = (short)value2;\n    *(short *)((int)inputArray + 0x2e) = (short)value2;\n    inputArray[15] = 0;\n    *(undefined *)((int)inputArray + 0x3a) = 0x22;\n    *(undefined *)(inputArray + 0xe) = 0;\n    *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) | 1;\n    *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_input_08002efa",
                "param_1": "inputArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "inputArray[10]",
                "param_1[0xf]": "inputArray[15]"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "update_parameter_08002f4c",
            "code": "\nundefined4 updateParameter_08002f4c(int *ptr)\n\n{\n  *(uint *)(*ptr + 0xc) = *(uint *)(*ptr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)ptr + 0x39) = 0x20;\n  findAndUpdateParams;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "update_parameter_08002f4c",
                "param_1": "ptr",
                "find_and_update_parameters_08003f48()": "findAndUpdateParams"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "decode_string_08002f66",
            "code": "\nundefined4 decode_string_08002f66(int *input_array)\n\n{\n  byte *output_byte;\n  short remaining_chars;\n  undefined *output_pointer;\n  \n  if (*(char *)((int)input_array + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (condition_1 == 0x1000) {\n    if (condition_2 == 0) {\n      *(ushort *)output_index = (ushort)((uint)(*(int *)(*input_array + 4) << 0x17) >> 0x17);\n      output_index = output_index + 2;\n    }\n    else {\n      *(ushort *)output_index = (ushort)*(undefined4 *)(*input_array + 4) & 0xff;\n      output_index = output_index + 1;\n    }\n  }\n  else if (condition_2 == 0) {\n    output_pointer = (undefined *)output_index;\n    output_index = (int)(output_pointer + 1);\n    *output_pointer = (char)*(undefined4 *)(*input_array + 4);\n  }\n  else {\n    output_byte = (byte *)output_index;\n    output_index = (int)(output_byte + 1);\n    *output_byte = (byte)*(undefined4 *)(*input_array + 4) & 0x7f;\n  }\n  remaining_chars = *(short *)((int)input_array + 0x2e) + -1;\n  *(short *)((int)input_array + 0x2e) = remaining_chars;\n  if (remaining_chars != 0) {\n    return 0;\n  }\n  *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) & 0xfffffedf;\n  *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) & 0xfffffffe;\n  *(undefined *)((int)input_array + 0x3a) = 0x20;\n  execute_function_if_number_less_than_ten_08003f24();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "decode_string_08002f66",
                "param_1": "input_array",
                "pbVar1": "output_byte",
                "sVar2": "remaining_chars",
                "puVar3": "output_pointer",
                "param_1[2]": "condition_1",
                "param_1[4]": "condition_2",
                "param_1[10]": "output_index"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [
                "FUN_08003f24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_parameters_08002ffc",
            "code": "\nvoid processParameters_08002ffc(uint **parameters)\n\n{\n  int returnValue;\n  uint value1;\n  uint *pointer;\n  uint value2;\n  uint value3;\n  \n  pointer = *parameters;\n  value3 = *pointer;\n  value1 = pointer[3];\n  if ((((value3 & 0xf) == 0) && ((value3 & 0x20) != 0)) && ((value1 & 0x20) != 0)) {\n    decode_string_08002f66(parameters);\n    return;\n  }\n  if (((value3 & 0xf) == 0) || ((value2 = pointer[5] & 1, value2 == 0 && ((value1 & 0x120) == 0)))) {\n    if (((value3 & 0x80) != 0) && ((value1 & 0x80) != 0)) {\n      parse_and_update_data_0800295c(parameters);\n      return;\n    }\n    if (((value3 & 0x40) != 0) && ((value1 & 0x40) != 0)) {\n      update_parameter_08002f4c(parameters);\n    }\n  }\n  else {\n    if (((value3 & 1) != 0) && ((value1 & 0x100) != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 1);\n    }\n    if (((value3 & 4) != 0) && (value2 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 2);\n    }\n    if (((value3 & 2) != 0) && (value2 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 4);\n    }\n    if (((value3 & 8) != 0) && (value2 != 0)) {\n      parameters[0xf] = (uint *)((uint)parameters[0xf] | 8);\n    }\n    if (parameters[0xf] != (uint *)0x0) {\n      if (((value3 & 0x20) != 0) && ((value1 & 0x20) != 0)) {\n        decode_string_08002f66(parameters);\n      }\n      if ((((uint)parameters[0xf] & 8) == 0) && (((*parameters)[5] & 0x40) == 0)) {\n        FUNC_08003f94(parameters);\n        parameters[0xf] = (uint *)0x0;\n        return;\n      }\n      set_flags_and_value_08002940(parameters);\n      pointer = *parameters;\n      if ((pointer[5] & 0x40) == 0) {\n        FUNC_08003f94(parameters);\n        return;\n      }\n      pointer[5] = pointer[5] & 0xffffffbf;\n      if (parameters[0xd] == (uint *)0x0) {\n        FUNC_08003f94(parameters);\n        return;\n      }\n      parameters[0xd][0x14] = (uint)&LAB_0800311c_1;\n      returnValue = update_param_08000f8c(parameters[0xd]);\n      if (returnValue != 0) {\n        (*(code *)parameters[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_parameters_08002ffc",
                "param_1": "parameters",
                "iVar1": "returnValue",
                "uVar2": "value1",
                "puVar3": "pointer",
                "uVar4": "value2",
                "uVar5": "value3"
            },
            "calling": [],
            "called": [
                "FUN_08002940",
                "FUN_08000f8c",
                "FUN_08002f4c",
                "FUN_08003f94",
                "FUN_0800295c",
                "FUN_08002f66"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "input"
            },
            "calling": [
                "FUN_08003dd0",
                "FUN_08003df4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "extract_bit_08003138",
            "code": "\nuint extractBit_08003138(uint value,int ptr)\n\n{\n  return *(uint *)(ptr + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "extract_bit_08003138",
                "param_1": "value",
                "param_2": "ptr"
            },
            "calling": [
                "FUN_080041bc",
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_in_array_0800314e",
            "code": "\nvoid setBitInArray_0800314e(uint bitPosition,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) | 1 << (bitPosition & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_in_array_0800314e",
                "param_1": "bitPosition",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "clear_bit_in_array_0800316c",
            "code": "\nvoid clearBitInArray_0800316c(uint bitIndex,int array)\n\n{\n  uint shiftedIndex;\n  \n  shiftedIndex = (bitIndex << 0x18) >> 0x1c;\n  *(uint *)(array + shiftedIndex * 4) = *(uint *)(array + shiftedIndex * 4) & ~(1 << (bitIndex & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "clear_bit_in_array_0800316c",
                "param_1": "bitIndex",
                "param_2": "array",
                "uVar1": "shiftedIndex"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "map_parameter_value_0800318c",
            "code": "\nundefined4 mapParameterValue_0800318c(undefined4 value)\n\n{\n  switch(value) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "map_parameter_value_0800318c",
                "param_1": "value"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_memory_address_flag_080031fc",
            "code": "\n\n\nundefined4 setMemoryAddressFlag_080031fc(undefined4 flagIndex)\n\n{\n  undefined4 newMemoryAddress;\n  \n  switch(flagIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    newMemoryAddress = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    newMemoryAddress = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    newMemoryAddress = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    newMemoryAddress = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    newMemoryAddress = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    newMemoryAddress = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    newMemoryAddress = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    newMemoryAddress = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    newMemoryAddress = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    newMemoryAddress = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    newMemoryAddress = 0x40022800;\n    break;\n  default:\n    newMemoryAddress = 0;\n  }\n  return newMemoryAddress;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_memory_address_flag_080031fc",
                "param_1": "flagIndex",
                "uVar1": "newMemoryAddress"
            },
            "calling": [
                "FUN_08003978",
                "FUN_08003486"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_valid_index_08003380",
            "code": "\nundefined4 check_valid_index_08003380(undefined4 input_data,undefined4 unused_param,undefined4 array_start,undefined4 array_end)\n\n{\n  int index;\n  \n  index = find_index_or_negative_one_0800354a(input_data,&DAT_08005a18,array_start,array_end,array_end);\n  if ((uint)(index << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_valid_index_08003380",
                "param_1": "input_data",
                "param_2": "unused_param",
                "param_3": "array_start",
                "param_4": "array_end",
                "iVar1": "index"
            },
            "calling": [
                "FUN_080033d8"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "find_index_0800339c",
            "code": "\nundefined4 find_index_0800339c(undefined4 input_value,undefined4 parameter_2,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  int index;\n  uint shifted_value;\n  \n  index = find_index_0800339c_or_negative_one_0800354a(input_value,&DAT_08005a3c,parameter_3,parameter_4,parameter_4);\n  shifted_value = (uint)(index << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "find_index_0800339c",
                "param_1": "input_value",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "param_4": "parameter_4",
                "iVar1": "index",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08003414"
            ],
            "called": [
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_dat_flag_080033c8",
            "code": "\n\n\nvoid clearDatFlag_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_dat_flag_080033c8"
            },
            "calling": [
                "FUN_08000f56"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "update_value_080033d8",
            "code": "\nvoid updateValue_080033d8(undefined4 value)\n\n{\n  int index;\n  int valueIndices [5];\n  \n  valueIndices[0] = find_value_index_if_not_minus1_080034f4(value,&DAT_08005a18);\n  if ((valueIndices[0] != 0) && ((index = check_valid_index_08003380(value), index == 0 || (index == 0x10)))) {\n    clear_bit_and_set_flag_08000f72(valueIndices,index);\n    clear_flags_08000f56(valueIndices);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "update_value_080033d8",
                "param_1": "value",
                "iVar1": "index",
                "local_1c": "valueIndices"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000f72",
                "FUN_08003380",
                "FUN_08000f56",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "initialize_memory_permissions_0800340c",
            "code": "\nvoid initializeMemoryPermissions_0800340c(void)\n\n{\n  updateMemoryPermissions();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "initialize_memory_permissions_0800340c",
                "update_memory_permissions_080035fc": "updateMemoryPermissions"
            },
            "calling": [
                "FUN_0800268e"
            ],
            "called": [
                "FUN_080035fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "initialize_permissions_08003414",
            "code": "\nvoid initializePermissions_08003414(undefined4 input)\n\n{\n  int index;\n  uint indexOrNegativeOne;\n  int valueArray [16];\n  \n  valueArray[0] = find_value_index_if_not_minus1_080034f4(input,&DAT_08005a3c);\n  if ((valueArray[0] != 0) &&\n     ((((index = find_index_0800339c(input), index == 0 || (index == 4)) || (index == 8)) ||\n      ((index == 0xc || (index == 0x18)))))) {\n    indexOrNegativeOne = find_index_or_negative_one_0800354a(input,&DAT_08005a3c);\n    if ((indexOrNegativeOne & 0x100000) == 0) {\n      update_bitwise_value_08002864(valueArray,index);\n    }\n    else {\n      update_and_check_condition_080028f0(valueArray,index);\n    }\n    initialize_memory_permissions_0800268e(valueArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "initialize_permissions_08003414",
                "param_1": "input",
                "iVar1": "index",
                "uVar2": "indexOrNegativeOne",
                "local_4c": "valueArray"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_0800339c",
                "FUN_0800268e",
                "FUN_08002864",
                "FUN_080028f0",
                "FUN_080034f4",
                "FUN_0800354a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "initialize_data_0800346c",
            "code": "\nvoid initialize_data_0800346c(void)\n\n{\n  fetch_data();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "initialize_data_0800346c",
                "get_data_08000e30": "fetch_data"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08000e30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "FUN_08003476"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "initialize_and_update_08003476",
            "code": "\nvoid initialize_and_update_08003476(void)\n\n{\n  update_global_value();\n  initialize();\n  FUNC_08003474();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "initialize_and_update_08003476",
                "update_global_value_08000e18": "update_global_value",
                "initialize_08000f4e": "initialize"
            },
            "calling": [],
            "called": [
                "FUN_08000f4e",
                "FUN_08003474",
                "FUN_08000e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "set_memory_address_flag_08003486",
            "code": "\nvoid set_memory_address_flag_08003486(uint input_value,undefined4 parameter_2,undefined4 parameter_3)\n\n{\n  undefined4 memory_address_flag;\n  uint bitmask;\n  undefined4 storage_1;\n  undefined4 storage_2;\n  undefined4 constant_2;\n  \n  memory_address_flag = set_memory_address_flag_08003486_080031fc((input_value << 0x18) >> 0x1c);\n  bitmask = 1 << (input_value & 0xf) & 0xffff;\n  constant_2 = 2;\n  storage_1 = parameter_2;\n  storage_2 = parameter_3;\n  update_data_array_08000fb4(memory_address_flag,&bitmask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "set_memory_address_flag_08003486",
                "param_1": "input_value",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "uVar1": "memory_address_flag",
                "local_24": "bitmask",
                "local_20": "storage_1",
                "local_1c": "storage_2",
                "local_18": "constant_2"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [
                "FUN_08000fb4",
                "FUN_080031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "update_param_value_080034b6",
            "code": "\nvoid update_param_value_080034b6(undefined4 param_ptr,undefined2 param_value,int condition,undefined4 data_ptr)\n\n{\n  if (condition == 0) {\n    update_param_value_080034b6_08001198(param_ptr,param_value,0,data_ptr,data_ptr);\n    return;\n  }\n  update_param_value_080034b6_08001198(param_ptr,param_value,1,data_ptr,data_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "update_param_value_080034b6",
                "param_1": "param_ptr",
                "param_2": "param_value",
                "param_3": "condition",
                "param_4": "data_ptr"
            },
            "calling": [
                "FUN_080041bc"
            ],
            "called": [
                "FUN_08001198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_and_update_system_080034ce",
            "code": "\nvoid initialize_and_update_system_080034ce(void)\n\n{\n  initialize_and_update_registers();\n  initialize_system();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_and_update_system_080034ce",
                "initialize_and_update_registers_08000de4": "initialize_and_update_registers",
                "initialize_system_08000c8c": "initialize_system"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "FUN_08000c8c",
                "FUN_08000de4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_index_080034da",
            "code": "\nundefined4 find_value_index_080034da(int target_value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == target_value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_index_080034da",
                "param_1": "target_value",
                "param_2": "array"
            },
            "calling": [
                "FUN_080034da",
                "FUN_080034f4"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "find_value_index_if_not_minus1_080034f4",
            "code": "\nundefined4 find_value_index_if_not_minus1_080034f4(int input_value)\n\n{\n  undefined4 value_index;\n  \n  if (input_value != -1) {\n    value_index = find_value_index_080034da();\n    return value_index;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "find_value_index_if_not_minus1_080034f4",
                "param_1": "input_value",
                "uVar1": "value_index"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08003414",
                "FUN_080033d8",
                "FUN_08003978",
                "FUN_08003d18"
            ],
            "called": [
                "FUN_080034da"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_in_array_08003506",
            "code": "\nint findValueInArray_08003506(int value,short *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 2) == value) break;\n    array = array + 6;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_in_array_08003506",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08003506",
                "FUN_0800351e"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_value_or_fail_0800351e",
            "code": "\nundefined4 find_value_or_fail_0800351e(int value_to_find)\n\n{\n  undefined4 found_value;\n  \n  if (value_to_find != 0) {\n    found_value = find_value_in_array_08003506();\n    return found_value;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_value_or_fail_0800351e",
                "param_1": "value_to_find",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_0800447c"
            ],
            "called": [
                "FUN_08003506"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_index_in_array_0800352e",
            "code": "\nundefined4 find_index_in_array_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_index_in_array_0800352e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_0800352e",
                "FUN_0800354a"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "find_index_or_negative_one_0800354a",
            "code": "\nundefined4 findIndexOrNegativeOne_0800354a(int inputValue)\n\n{\n  undefined4 indexOrNegativeOne;\n  \n  if (inputValue == -1) {\n    return 0xffffffff;\n  }\n  indexOrNegativeOne = find_index_in_array_0800352e();\n  return indexOrNegativeOne;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "find_index_or_negative_one_0800354a",
                "param_1": "inputValue",
                "uVar1": "indexOrNegativeOne"
            },
            "calling": [
                "FUN_08003414",
                "FUN_0800339c",
                "FUN_08003978",
                "FUN_08003380"
            ],
            "called": [
                "FUN_0800352e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "compare_values_0800355e",
            "code": "\nundefined4 compareValues_0800355e(int value1,short *valuesList)\n\n{\n  if (value1 == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*valuesList == -1) {\n      return 0;\n    }\n    if (value1 == *valuesList) exitLoop;\n    valuesList = valuesList + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "compare_values_0800355e",
                "param_1": "value1",
                "param_2": "valuesList",
                "break": "exitLoop"
            },
            "calling": [
                "FUN_08004110"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "compare_return_smaller_08003582",
            "code": "\nint compare_return_smaller_08003582(int first_number,int second_number)\n\n{\n  if (first_number != second_number) {\n    if (first_number == 0) {\n      return second_number;\n    }\n    if (second_number == 0) {\n      return first_number;\n    }\n    first_number = 0;\n  }\n  return first_number;\n}\n\n",
            "renaming": {
                "FUN_08003582": "compare_return_smaller_08003582",
                "param_1": "first_number",
                "param_2": "second_number"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_08003594",
            "code": "\nvoid executeCallback_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_08003594"
            },
            "calling": [
                "FUN_0800262c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_data_080035bc",
            "code": "\n\n\nvoid initializeData_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_data_080035bc"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "update_memory_permissions_080035fc",
            "code": "\n\n\nvoid updateMemoryPermissions_080035fc(int *memoryAddress)\n\n{\n  if (*memoryAddress == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*memoryAddress == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*memoryAddress == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*memoryAddress == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*memoryAddress == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*memoryAddress == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*memoryAddress == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*memoryAddress == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*memoryAddress == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*memoryAddress == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*memoryAddress == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*memoryAddress == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*memoryAddress == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*memoryAddress == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "update_memory_permissions_080035fc",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_0800340c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtract_four_08003750(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_0800376e",
                "FUN_08003754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_callback_if_enabled_08003754",
            "code": "\nvoid executeCallbackIfEnabled_08003754(int callbackData)\n\n{\n  int callbackPointer;\n  \n  callbackPointer = getCallbackPointer();\n  if ((*(code **)(callbackPointer + 0x48) != (code *)0x0) && (*(char *)(callbackData + 0x18) == '\\x01')) {\n    (**(code **)(callbackPointer + 0x48))(callbackPointer,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_callback_if_enabled_08003754",
                "param_1": "callbackData",
                "iVar1": "callbackPointer",
                "subtract_four_08003750": "getCallbackPointer"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_subtract_four_0800376e",
            "code": "\nvoid executeSubtractFour_0800376e(void)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (*(code **)(result + 0x44) != (code *)0x0) {\n    (**(code **)(result + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_subtract_four_0800376e",
                "iVar1": "result",
                "subtract_four_08003750": "subtractFour"
            },
            "calling": [
                "FUN_080026ce"
            ],
            "called": [
                "FUN_08003750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "process_flags_0800377c",
            "code": "\nvoid process_flags_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    process_flags_0800377c_080026ce();\n  }\n  if (DAT_200001d4 != 0) {\n    process_flags_0800377c_080026ce();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "process_flags_0800377c"
            },
            "calling": [],
            "called": [
                "FUN_080026ce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtract_four_0800387c(int input_num)\n\n{\n  return input_num + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "input_num"
            },
            "calling": [
                "FUN_080038d0",
                "FUN_08003880",
                "FUN_08003900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "process_parameters_08003880",
            "code": "\nvoid processParameters_08003880(int inputPtr,int flag,int condition,undefined4 callback)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (condition == *(int *)(inputPtr + 0xc)) {\n    if (flag == 0) {\n      *(undefined *)(result + 0x88) = 0;\n      *(undefined *)(result + 0x5e) = 0;\n      if (*(code **)(result + 100) != (code *)0x0) {\n        (**(code **)(result + 100))();\n      }\n      updateFlags(inputPtr,result + 0x68,*(undefined *)(result + 0x88),8);\n      return;\n    }\n    *(undefined *)(result + 0x5e) = 1;\n    validateAndSetParams(inputPtr,result + 0x68,0x20,8,callback);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "process_parameters_08003880",
                "param_1": "inputPtr",
                "param_2": "flag",
                "param_3": "condition",
                "param_4": "callback",
                "iVar1": "result",
                "subtract_four_0800387c": "subtractFour",
                "update_flags_08001460": "updateFlags",
                "validate_and_set_parameters_080014ec": "validateAndSetParams"
            },
            "calling": [
                "FUN_0800165a"
            ],
            "called": [
                "FUN_0800387c",
                "FUN_08001460",
                "FUN_080014ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "initialize_and_call_function_080038d0",
            "code": "\nvoid initialize_and_call_function_080038d0(undefined4 param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (((*(code **)(result + 0x60) != (code *)0x0) && (*(char *)(result + 0x5e) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(code **)(result + 0x60))(result + 0x68);\n  }\n  initialize_data_structure(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "initialize_and_call_function_080038d0",
                "param_1": "param",
                "iVar1": "result",
                "subtract_four_0800387c": "subtract_four",
                "initialize_data_structure_08001578": "initialize_data_structure"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08001684",
                "FUN_08001bfc"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "initialize_data_if_zero_08003900",
            "code": "\nvoid initialize_data_if_zero_08003900(undefined4 param)\n\n{\n  int result;\n  \n  result = subtract_four();\n  if (*(char *)(result + 0x5f) == '\\0') {\n    initialize_data_structure(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "initialize_data_if_zero_08003900",
                "param_1": "param",
                "iVar1": "result",
                "subtract_four_0800387c": "subtract_four",
                "initialize_data_structure_08001578": "initialize_data_structure"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08001578",
                "FUN_0800387c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "initialize_uart_peripheral_08003978",
            "code": "\n\n\nvoid initializeUARTPeripheral_08003978(int *uartPinConfig)\n\n{\n  int uartPinIndex1;\n  int uartPinIndex2;\n  undefined4 memoryAddressFlag;\n  uint indexOrNegativeOne;\n  uint bitmask1;\n  uint bitmask2;\n  uint bitmask3;\n  undefined4 bitmask4;\n  uint bitmask5;\n  \n  if (uartPinConfig != (int *)0x0) {\n    uartPinIndex1 = find_value_index_if_not_minus1_080034f4((int)*(short *)(uartPinConfig + 0x16),&DAT_08005ca0);\n    uartPinIndex2 = find_value_index_if_not_minus1_080034f4((int)*(short *)((int)uartPinConfig + 0x5a),&DAT_08005c10);\n    if ((uartPinIndex2 == 0) || (uartPinIndex1 == 0)) {\n      initialize_and_process_08004fdc(\"ERROR: at least one UART pin has no peripheral\\n\",uartPinIndex2);\n    }\n    else {\n      uartPinIndex1 = compare_return_smaller_08003582(uartPinIndex1);\n      *uartPinConfig = uartPinIndex1;\n      if (uartPinIndex1 == 0) {\n        initialize_and_process_08004fdc(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPinIndex1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(uartPinConfig + 0x11) = 0;\n          *(undefined *)(uartPinConfig + 0x17) = 0x25;\n        }\n        else if (uartPinIndex1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(uartPinConfig + 0x11) = 1;\n          *(undefined *)(uartPinConfig + 0x17) = 0x26;\n        }\n        else if (uartPinIndex1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(uartPinConfig + 0x11) = 2;\n          *(undefined *)(uartPinConfig + 0x17) = 0x27;\n        }\n        else if (uartPinIndex1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(uartPinConfig + 0x11) = 3;\n          *(undefined *)(uartPinConfig + 0x17) = 0x34;\n        }\n        else if (uartPinIndex1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(uartPinConfig + 0x11) = 4;\n          *(undefined *)(uartPinConfig + 0x17) = 0x35;\n        }\n        else if (uartPinIndex1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(uartPinConfig + 0x11) = 5;\n          *(undefined *)(uartPinConfig + 0x17) = 0x47;\n        }\n        else if (uartPinIndex1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(uartPinConfig + 0x11) = 6;\n          *(undefined *)(uartPinConfig + 0x17) = 0x52;\n        }\n        else if (uartPinIndex1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(uartPinConfig + 0x11) = 7;\n          *(undefined *)(uartPinConfig + 0x17) = 0x53;\n        }\n        memoryAddressFlag = set_memory_address_flag_080031fc((uint)((int)*(short *)((int)uartPinConfig + 0x5a) << 0x18) >> 0x1c);\n        indexOrNegativeOne = find_index_or_negative_one_0800354a((int)*(short *)((int)uartPinConfig + 0x5a),&DAT_08005c10);\n        bitmask1 = 1 << (*(ushort *)((int)uartPinConfig + 0x5a) & 0xf) & 0xffff;\n        bitmask2 = (indexOrNegativeOne >> 3 & 1) << 4 | indexOrNegativeOne & 7;\n        bitmask3 = (indexOrNegativeOne << 0x1a) >> 0x1e;\n        bitmask5 = (indexOrNegativeOne << 0x11) >> 0x19;\n        bitmask4 = 3;\n        update_data_array_08000fb4(memoryAddressFlag,&bitmask1);\n        memoryAddressFlag = set_memory_address_flag_080031fc((uint)((int)*(short *)(uartPinConfig + 0x16) << 0x18) >> 0x1c);\n        indexOrNegativeOne = find_index_or_negative_one_0800354a((int)*(short *)(uartPinConfig + 0x16),&DAT_08005ca0);\n        bitmask1 = 1 << (*(ushort *)(uartPinConfig + 0x16) & 0xf) & 0xffff;\n        bitmask2 = (indexOrNegativeOne >> 3 & 1) << 4 | indexOrNegativeOne & 7;\n        bitmask3 = (indexOrNegativeOne << 0x1a) >> 0x1e;\n        update_data_array_08000fb4(memoryAddressFlag,&bitmask1);\n        (&DAT_200002b4)[*(byte *)(uartPinConfig + 0x11)] = uartPinConfig + 1;\n        uartPinConfig[1] = *uartPinConfig;\n        uartPinConfig[2] = uartPinConfig[0x12];\n        uartPinConfig[3] = uartPinConfig[0x13];\n        uartPinConfig[4] = uartPinConfig[0x14];\n        uartPinConfig[5] = uartPinConfig[0x15];\n        uartPinConfig[6] = 0xc;\n        uartPinConfig[7] = 0;\n        uartPinConfig[8] = 0;\n        process_data_08002d72(uartPinConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "initialize_uart_peripheral_08003978",
                "param_1": "uartPinConfig",
                "iVar1": "uartPinIndex1",
                "iVar2": "uartPinIndex2",
                "uVar3": "memoryAddressFlag",
                "uVar4": "indexOrNegativeOne",
                "local_2c": "bitmask1",
                "local_28": "bitmask2",
                "local_24": "bitmask3",
                "local_20": "bitmask4",
                "local_1c": "bitmask5"
            },
            "calling": [
                "FUN_08003cc8",
                "FUN_08004388"
            ],
            "called": [
                "FUN_08003582",
                "FUN_08004fdc",
                "FUN_080031fc",
                "FUN_08000fb4",
                "FUN_080034f4",
                "FUN_0800354a",
                "FUN_08002d72"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_08003cc8",
            "code": "\nvoid initialize_uart_08003cc8(void)\n\n{\n  int index1;\n  undefined4 index2;\n  \n  index1 = find_index_not_minus1(0x38,&DAT_08005ca0);\n  if (index1 != 0) {\n    index2 = find_index_not_minus1(0x38,&DAT_08005ca0);\n    DAT_2000008a = find_value_or_fail(index2,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    initialize_uart_08003cc8_peripheral(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "iVar1": "index1",
                "uVar2": "index2",
                "find_value_index_if_not_minus1_080034f4": "find_index_not_minus1",
                "find_value_or_fail_0800351e": "find_value_or_fail",
                "initialize_uart_peripheral_08003978": "initialize_uart_peripheral"
            },
            "calling": [
                "FUN_08003d18"
            ],
            "called": [
                "FUN_08003978",
                "FUN_0800351e",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "process_data_08003d18",
            "code": "\nuint process_data_08003d18(undefined4 input_arg,uint val)\n\n{\n  int data1;\n  int index;\n  uint counter;\n  \n  data1 = get_data_08000e30();\n  index = find_value_index_if_not_minus1_080034f4(0x38,&DAT_08005ca0);\n  if (index == 0) {\n    return 0;\n  }\n  for (counter = 0;\n      (counter < 10 &&\n      (((&DAT_200002b4)[counter] == 0 ||\n       (index = find_value_index_if_not_minus1_080034f4(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[counter] != index))));\n      counter = counter + 1 & 0xff) {\n  }\n  if (9 < counter) {\n    if ((9 < DAT_20000074) && (initialize_uart_08003cc8(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    counter = (uint)DAT_20000074;\n  }\n  do {\n    index = process_data_08003d18_08002dd0((&DAT_200002b4)[counter],input_arg,val & 0xffff,1000);\n    if (index == 0) {\n      return val;\n    }\n    index = get_data_08000e30();\n  } while ((uint)(index - data1) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "process_data_08003d18",
                "param_1": "input_arg",
                "param_2": "val",
                "iVar1": "data1",
                "iVar2": "index",
                "uVar3": "counter"
            },
            "calling": [
                "FUN_080040ec"
            ],
            "called": [
                "FUN_08003cc8",
                "FUN_08000e30",
                "FUN_08002dd0",
                "FUN_080034f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "is_combination_valid_08003dd0",
            "code": "\nbool isCombinationValid_08003dd0(int inputValue)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combineBytes((&DAT_200002b4)[*(byte *)(inputValue + 0x44)]);\n  return (combinedBytes & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "is_combination_valid_08003dd0",
                "param_1": "inputValue",
                "uVar1": "combinedBytes",
                "combine_bytes_0800312c": "combineBytes"
            },
            "calling": [
                "FUN_08003e18",
                "FUN_08003e54"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "check_combination_08003df4",
            "code": "\nbool checkCombination_08003df4(int inputParam)\n\n{\n  uint combinedBytes;\n  \n  combinedBytes = combineBytes((&DAT_200002b4)[*(byte *)(inputParam + 0x44)]);\n  return (combinedBytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "check_combination_08003df4",
                "param_1": "inputParam",
                "uVar1": "combinedBytes",
                "combine_bytes_0800312c": "combineBytes"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_0800312c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "validate_combination_08003e18",
            "code": "\nundefined4 validate_combination_08003e18(int input_data,undefined *output_data,undefined4 var3,undefined4 var4)\n\n{\n  int is_valid_combination;\n  \n  if (input_data == 0) {\n    return 0xffffffff;\n  }\n  is_valid_combination = is_valid_combination_check();\n  if (is_valid_combination == 0) {\n    *output_data = *(undefined *)(input_data + 0x45);\n    validate_input((&DAT_200002b4)[*(byte *)(input_data + 0x44)],input_data + 0x45,1,&DAT_200002b4,var4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "validate_combination_08003e18",
                "param_1": "input_data",
                "param_2": "output_data",
                "param_3": "var3",
                "param_4": "var4",
                "iVar1": "is_valid_combination",
                "is_combination_valid_08003dd0": "is_valid_combination_check",
                "validate_input_08002efa": "validate_input"
            },
            "calling": [
                "FUN_080042ac"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "update_combination_08003e54",
            "code": "\nvoid updateCombination_08003e54(int combination,undefined4 newData,undefined4 unused1,undefined4 unused2)\n\n{\n  int isValidCombination;\n  uint combinationIndex;\n  \n  if (combination != 0) {\n    isValidCombination = is_combination_valid_08003dd0();\n    if (isValidCombination == 0) {\n      combinationIndex = (uint)*(byte *)(combination + 0x44);\n      *(undefined4 *)(&DAT_20000214 + combinationIndex * 4) = newData;\n      *(int *)(&DAT_2000023c + combinationIndex * 4) = combination;\n      update_data_08000e60((int)*(char *)(combination + 0x5c),0,1,combinationIndex,unused2);\n      set_bit_at_position_08000ec4((int)*(char *)(combination + 0x5c));\n      validate_input_08002efa((&DAT_200002b4)[*(byte *)(combination + 0x44)],combination + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "update_combination_08003e54",
                "param_1": "combination",
                "param_2": "newData",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "isValidCombination",
                "uVar2": "combinationIndex"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_08002efa",
                "FUN_08003dd0",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "update_data_08003eac",
            "code": "\nvoid updateData_08003eac(int dataPointer,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataPointer != 0) {\n    byteValue = *(byte *)(dataPointer + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_2000028c + (uint)byteValue * 4) = dataPointer;\n    updateData_08003eacFunction((int)*(char *)(dataPointer + 0x5c),0,2);\n    setBitFunction((int)*(char *)(dataPointer + 0x5c));\n    validateAndUpdateParameters((&DAT_200002b4)[*(byte *)(dataPointer + 0x44)],\n                 *(int *)(dataPointer + 0x68) + (uint)*(ushort *)(dataPointer + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "update_data_08003eac",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "bVar1": "byteValue",
                "update_data_08000e60": "updateDataFunction",
                "set_bit_at_position_08000ec4": "setBitFunction",
                "validate_and_update_parameters_08002eb2": "validateAndUpdateParameters"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "FUN_08002eb2",
                "FUN_08000e60",
                "FUN_08000ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_number_in_array_08003f00",
            "code": "\nuint find_number_in_array_08003f00(int number)\n\n{\n  uint result;\n  \n  if (number == 0) {\n    result = 10;\n  }\n  else {\n    result = 0;\n    while( true ) {\n      if (9 < result) {\n        return result;\n      }\n      if (number == (&DAT_200002b4)[result]) break;\n      result = result + 1 & 0xff;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_number_in_array_08003f00",
                "param_1": "number",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08003f24",
                "FUN_08003f48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_function_if_number_less_than_ten_08003f24",
            "code": "\nvoid executeFunctionIfNumberLessThanTen_08003f24(void)\n\n{\n  uint number;\n  \n  number = findNumberInArray();\n  if (number < 10) {\n    (**(code **)(&DAT_20000214 + number * 4))(*(undefined4 *)(&DAT_2000023c + number * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_function_if_number_less_than_ten_08003f24",
                "uVar1": "number",
                "find_number_in_array_08003f00": "findNumberInArray"
            },
            "calling": [
                "FUN_08002f66"
            ],
            "called": [
                "FUN_08003f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "find_and_update_parameters_08003f48",
            "code": "\nvoid findAndUpdateParameters_08003f48(void)\n\n{\n  uint numIndex;\n  int result;\n  int dataPtr;\n  \n  numIndex = findNumberInArray();\n  dataPtr = *(int *)(&DAT_2000028c + numIndex * 4);\n  if ((numIndex < 10) && (result = (**(functionPtr **)(&DAT_20000264 + numIndex * 4))(dataPtr), result != -1)) {\n    validateAndUpdateParameters((&DAT_200002b4)[*(byte *)(dataPtr + 0x44)],\n                 *(int *)(dataPtr + 0x68) + (uint)*(ushort *)(dataPtr + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "find_and_update_parameters_08003f48",
                "uVar1": "numIndex",
                "iVar2": "result",
                "iVar3": "dataPtr",
                "find_number_in_array_08003f00": "findNumberInArray",
                "code": "functionPtr",
                "validate_and_update_parameters_08002eb2": "validateAndUpdateParameters"
            },
            "calling": [
                "FUN_08002f4c"
            ],
            "called": [
                "FUN_08003f00",
                "FUN_08002eb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "FUN_08002ffc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocateMemory_08004094(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  allocatedMemory = DAT_200002dc;\n  if (DAT_200002dc + size <= &stackBase) {\n    DAT_200002dc = DAT_200002dc + size;\n    return allocatedMemory;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "stack0x00000000": "stackBase"
            },
            "calling": [
                "FUN_0800500c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_default_value_080040d0",
            "code": "\nuint32_t get_default_value_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_default_value_080040d0",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "initialize_memory_080040d6",
            "code": "\nundefined4 initializeMemory_080040d6(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "initialize_memory_080040d6",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "FUN_080056d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "check_success_080040e0",
            "code": "\nint checkSuccess_080040e0(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "check_success_080040e0",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "FUN_080056f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_080040e4",
            "code": "\nvoid initialize_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_080040e4",
                "undefined4": "void"
            },
            "calling": [
                "FUN_08005718"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "initialize_application_080040e8",
            "code": "\nundefined4 initializeApplication_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "initialize_application_080040e8"
            },
            "calling": [
                "FUN_0800573c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "process_data_080040ec",
            "code": "\nvoid process_data_080040ec(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  process_data_080040ec_08003d18(input_2,input_3,input_3,input_4,input_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "process_data_080040ec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_0800562a"
            ],
            "called": [
                "FUN_08003d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "infinite_loop_080040f8",
            "code": "\nvoid infiniteLoop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "infinite_loop_080040f8"
            },
            "calling": [
                "FUN_080051ac",
                "FUN_080040f8"
            ],
            "called": [
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_default_value_080040fc",
            "code": "\nundefined4 initializeDefaultValue_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_default_value_080040fc"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "check_success_0800410c",
            "code": "\nundefined4 check_success_0800410c(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "check_success_0800410c",
                "return": "result"
            },
            "calling": [
                "thunk_FUN_0800410c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "execute_memory_operation_08004110",
            "code": "\nvoid executeMemoryOperation_08004110(uint operationType,undefined4 addressFlag,undefined4 extraParameter,undefined *address)\n\n{\n  int result;\n  undefined *lookupTable;\n  int index;\n  \n  if (operationType < 0x60) {\n    index = (int)*(short *)(&DAT_08005d3c + operationType * 2);\n    lookupTable = &DAT_08005d3c;\n  }\n  else {\n    index = -1;\n    lookupTable = address;\n  }\n  if (index != -1) {\n    result = extract_bit_08003138(index,&DAT_200002e0,extraParameter,lookupTable,address);\n    if (result != 0) {\n      result = compare_values_0800355e(index,&DAT_08005a18);\n      if (result == 0) {\n        result = compare_values_0800355e(index,&DAT_08005a3c);\n        if (result != 0) {\n          initialize_permissions_08003414(index);\n        }\n      }\n      else {\n        update_value_080033d8(index);\n      }\n      clear_bit_in_array_0800316c(index,&DAT_200002e0);\n    }\n    switch(addressFlag) {\n    case 0:\n      set_memory_address_flag_08003486(index,0);\n      break;\n    case 1:\n      set_memory_address_flag_08003486(index,1,0);\n      break;\n    case 2:\n      set_memory_address_flag_08003486(index,0,1);\n      break;\n    case 3:\n      set_memory_address_flag_08003486(index,0,2);\n    }\n    set_bit_in_array_0800314e(index,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "execute_memory_operation_08004110",
                "param_1": "operationType",
                "param_2": "addressFlag",
                "param_3": "extraParameter",
                "param_4": "address",
                "iVar1": "result",
                "puVar2": "lookupTable",
                "iVar3": "index"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08003138",
                "FUN_0800316c",
                "FUN_0800314e",
                "FUN_08003414",
                "FUN_08003486",
                "FUN_080033d8",
                "FUN_0800355e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "process_parameter_080041bc",
            "code": "\nvoid processParameter_080041bc(uint param,undefined4 value1,undefined4 value2,undefined *data)\n\n{\n  int bitResult;\n  undefined4 mappedValue;\n  undefined *pointer;\n  uint extractedValue;\n  \n  if (param < 0x60) {\n    extractedValue = (uint)*(short *)(&DAT_08005d3c + param * 2);\n    pointer = &DAT_08005d3c;\n  }\n  else {\n    extractedValue = 0xffffffff;\n    pointer = data;\n  }\n  if ((extractedValue != 0xffffffff) &&\n     (bitResult = extract_bit_08003138(extractedValue,&DAT_2000030c,value2,pointer,data), bitResult != 0)) {\n    mappedValue = map_parameter_value_0800318c((extractedValue << 0x18) >> 0x1c);\n    update_param_value_080034b6(mappedValue,1 << (extractedValue & 0xf) & 0xffff,value1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "process_parameter_080041bc",
                "param_1": "param",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data",
                "iVar1": "bitResult",
                "uVar2": "mappedValue",
                "puVar3": "pointer",
                "uVar4": "extractedValue"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000600",
                "FUN_080006b4"
            ],
            "called": [
                "FUN_08003138",
                "FUN_080034b6",
                "FUN_0800318c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "initialize_data_08004204",
            "code": "\nvoid initializeData_08004204(void)\n\n{\n  initialize_data_0800346c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "initialize_data_08004204"
            },
            "calling": [
                "FUN_0800076c",
                "FUN_08000b54"
            ],
            "called": [
                "FUN_0800346c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_offset_08004240",
            "code": "\nushort calculateOffset_08004240(int inputParameter)\n\n{\n  return (*(short *)(inputParameter + 0x138) + 0x40) - *(short *)(inputParameter + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "inputParameter"
            },
            "calling": [
                "FUN_08004338"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "update_combination_080042ac",
            "code": "\nvoid updateCombination_080042ac(int combination)\n\n{\n  int validationResult;\n  ushort newIndex;\n  undefined newValue;\n  \n  validationResult = validate_combination_08003e18(combination,&newValue);\n  if ((validationResult == 0) &&\n     (newIndex = *(short *)(combination + 100) + 1U & 0x3f, newIndex != *(ushort *)(combination + 0x66))) {\n    *(undefined *)(*(int *)(combination + 0x60) + (uint)*(ushort *)(combination + 100)) = newValue;\n    *(ushort *)(combination + 100) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "update_combination_080042ac",
                "param_1": "combination",
                "iVar1": "validationResult",
                "uVar2": "newIndex",
                "local_9": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_08003e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "initialize_data_080042e8",
            "code": "\nundefined4 initializeData_080042e8(int dataPointer,undefined param2)\n\n{\n  byte byteValue1;\n  byte byteValue2;\n  int intValue;\n  \n  *(undefined *)(dataPointer + 0x10) = 1;\n  intValue = *(ushort *)(dataPointer + 0x140) + 1;\n  byteValue1 = (byte)intValue;\n  byteValue2 = byteValue1 & 0x7f;\n  if (intValue == 0) {\n    byteValue2 = -(-byteValue1 & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(dataPointer + 0x142) == (ushort)byteValue2);\n  *(undefined *)(*(int *)(dataPointer + 0x13c) + (uint)*(ushort *)(dataPointer + 0x140)) = param2;\n  *(ushort *)(dataPointer + 0x140) = (ushort)byteValue2;\n  intValue = checkCombination(dataPointer + 0xd4);\n  if (intValue == 0) {\n    updateData(dataPointer + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "initialize_data_080042e8",
                "param_1": "dataPointer",
                "param_2": "param2",
                "bVar1": "byteValue1",
                "bVar2": "byteValue2",
                "iVar3": "intValue",
                "check_combination_08003df4": "checkCombination",
                "update_data_08003eac": "updateData"
            },
            "calling": [],
            "called": [
                "FUN_08003eac",
                "FUN_08003df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [
                "FUN_08004240"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_parameters_08004364",
            "code": "\nvoid initializeParameters_08004364(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x134) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x138) = 0;\n  *(undefined2 *)(baseAddress + 0x13a) = 0;\n  *(int *)(baseAddress + 0x13c) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x140) = 0;\n  *(undefined2 *)(baseAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_parameters_08004364",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "configure_serial_08004388",
            "code": "\nvoid configureSerial_08004388(int serialPortAddress,undefined4 baudRate,byte configByte)\n\n{\n  uint errorCode;\n  byte configMask;\n  int configuration;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPortAddress + 0x11c) = baudRate;\n  *(byte *)(serialPortAddress + 0x144) = configByte;\n  configMask = configByte & 7;\n  if (configMask == 4) {\n    configuration = 7;\n  }\n  else if (configMask == 6) {\n    configuration = 8;\n  }\n  else if (configMask == 2) {\n    configuration = 6;\n  }\n  else {\n    configuration = 0;\n  }\n  if ((configByte & 0x30) == 0x30) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x600;\n    configuration = configuration + 1;\n  }\n  else if ((configByte & 0x20) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x128) = 0x400;\n    configuration = configuration + 1;\n  }\n  if ((configByte & 8) == 0) {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPortAddress + 0x124) = 0x2000;\n  }\n  if (configuration == 8) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0;\n  }\n  else if (configuration == 9) {\n    *(undefined4 *)(serialPortAddress + 0x120) = 0x1000;\n  }\n  else {\n    configuration = 0;\n  }\n  if (configuration != 0) {\n    initialize_uart_peripheral_08003978(serialPortAddress + 0xd4);\n    update_combination_08003e54(serialPortAddress + 0xd4,0x80042ad);\n    return;\n  }\n  jumpTable = (code *)0x8004432;\n  assertion_failed_08004808(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (errorCode < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + errorCode * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "configure_serial_08004388",
                "param_1": "serialPortAddress",
                "param_2": "baudRate",
                "param_3": "configByte",
                "extraout_r1": "errorCode",
                "bVar1": "configMask",
                "iVar2": "configuration",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "FUN_08004808",
                "FUN_08003978",
                "FUN_08003e54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "update_value_based_on_range_08004444",
            "code": "\nvoid updateValueBasedOnRange_08004444(int dataPointer,uint rangeValue)\n\n{\n  undefined2 updatedValue;\n  code *jumpTable;\n  \n  if (rangeValue < 0x60) {\n    updatedValue = *(undefined2 *)(&DAT_08005d3c + rangeValue * 2);\n  }\n  else {\n    updatedValue = 0xffff;\n  }\n  *(undefined2 *)(dataPointer + 0x12e) = updatedValue;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "update_value_based_on_range_08004444",
                "param_1": "dataPointer",
                "param_2": "rangeValue",
                "uVar1": "updatedValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_value_in_array_08004460",
            "code": "\nvoid set_value_in_array_08004460(int array_address,uint index)\n\n{\n  undefined2 value;\n  \n  if (index < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(array_address + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_value_in_array_08004460",
                "param_1": "array_address",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "FUN_0800447c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_array_0800447c",
            "code": "\nundefined4 *\ninitialize_array_0800447c(undefined4 *array,undefined4 value_1,undefined4 value_2,undefined4 value_3)\n\n{\n  undefined2 found_value;\n  \n  array[1] = 0;\n  array[2] = 1000;\n  *array = &PTR_initialize_data_080042e8_1_08005ed4;\n  if (array == &DAT_20000338) {\n    update_value_based_on_range_08004444(&DAT_20000338,0x4c,value_2,&DAT_20000338,value_3);\n    set_value_in_array_08004460(&DAT_20000338,0x4d);\n  }\n  else {\n    found_value = find_value_or_fail_0800351e(value_1,&DAT_08005c10);\n    *(undefined2 *)((int)array + 0x12e) = found_value;\n    found_value = find_value_or_fail_0800351e(value_1,&DAT_08005ca0);\n    *(undefined2 *)(array + 0x4b) = found_value;\n  }\n  initialize_parameters_08004364(array);\n  return array;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_array_0800447c",
                "param_1": "array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "FUN_08004460",
                "FUN_08004444",
                "FUN_0800351e",
                "FUN_08004364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_array_if_condition_met_080044d8",
            "code": "\nvoid initialize_array_if_condition_met_080044d8(int condition,int value,undefined4 arg_1,undefined4 arg_2)\n\n{\n  if (condition != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    initialize_array(&DAT_20000338,0x40004800,arg_1,0xffff,arg_2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_array_if_condition_met_080044d8",
                "param_1": "condition",
                "param_2": "value",
                "param_3": "arg_1",
                "param_4": "arg_2",
                "initialize_array_0800447c": "initialize_array"
            },
            "calling": [],
            "called": [
                "FUN_0800447c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initializeData_08004544(undefined4 *dataBuffer,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataBuffer = &DAT_08005f28;\n  *(undefined *)(dataBuffer + 1) = value1;\n  *(undefined *)((int)dataBuffer + 5) = value2;\n  *(undefined *)((int)dataBuffer + 6) = value3;\n  *(undefined *)((int)dataBuffer + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "dataBuffer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "initialize_data_08004560",
            "code": "\nvoid initializeData_08004560(int status,int value)\n\n{\n  if ((status == 1) && (value == 0xffff)) {\n    initialize_data_08004544(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "initialize_data_08004560",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08004544"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "merge_values_08004640",
            "code": "\nuint mergeValues_08004640(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "merge_values_08004640",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_08000a7a",
                "FUN_08000998",
                "FUN_08000b04",
                "FUN_080007f0",
                "FUN_08000a4e",
                "FUN_080008e2",
                "FUN_08000a00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "FUN_08004658"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_system_08004648",
            "code": "\nvoid initialize_system_08004648(void)\n\n{\n  update_register(3);\n  initialize_system_08004648();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_system_08004648",
                "update_register_value_08000e3c": "update_register",
                "initialize_system_08000d8e": "initialize_system"
            },
            "calling": [
                "FUN_08004884"
            ],
            "called": [
                "FUN_08000d8e",
                "FUN_08000e3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "run_infinite_loop_08004658",
            "code": "\nvoid run_infinite_loop_08004658(void)\n\n{\n  FUNC_08004646();\n  initialize_system();\n  do {\n    initialize_data_processing();\n    FUNC_08004338();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "run_infinite_loop_08004658",
                "initialize_system_08000c4c": "initialize_system",
                "initialize_data_processing_08000c64": "initialize_data_processing"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08000c4c",
                "FUN_08004646",
                "FUN_08004338",
                "FUN_08000c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_set_bits_08004678",
            "code": "\nchar countSetBits_08004678(uint num)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; num != 1; num = num >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_set_bits_08004678",
                "param_1": "num",
                "cVar1": "bitCount"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int status,int value,undefined4 param3,undefined4 param4)\n\n{\n  if (status != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    shiftLeft(0,&LAB_0800468c_1,&DAT_20000000,&DAT_20000488,param4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "status",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "shift_left_080047fe": "shiftLeft"
            },
            "calling": [],
            "called": [
                "FUN_080047fe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "process_data_080047c0",
            "code": "\nvoid processData_080047c0(int dataPointer)\n\n{\n  int bitCount;\n  \n  if (*(int *)(dataPointer + 8) != 0) {\n    (**(code **)(dataPointer + 0xc))();\n    return;\n  }\n  updateAndProcessData();\n  bitCount = countSetBits();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    processData_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "process_data_080047c0",
                "param_1": "dataPointer",
                "iVar1": "bitCount",
                "update_and_process_data_08005760": "updateAndProcessData",
                "count_set_bits_08004678": "countSetBits"
            },
            "calling": [
                "FUN_080047d0"
            ],
            "called": [
                "FUN_08005760"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_process_data_080047d0",
            "code": "\nvoid checkAndProcessData_080047d0(void)\n\n{\n  int bitCount;\n  \n  bitCount = countSetBits();\n  if ((&DAT_20000494)[bitCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_process_data_080047d0",
                "iVar1": "bitCount",
                "count_set_bits_08004678": "countSetBits",
                "process_data_080047c0": "processData"
            },
            "calling": [
                "FUN_080011a4"
            ],
            "called": [
                "FUN_080047c0",
                "FUN_08004678"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "shift_left_080047fe",
            "code": "\nvoid shiftLeft_080047fe(undefined4 dest,undefined4 src)\n\n{\n  shift_left_08004844(src,dest);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "shift_left_080047fe",
                "param_1": "dest",
                "param_2": "src"
            },
            "calling": [
                "FUN_080046b4"
            ],
            "called": [
                "FUN_08004844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "assertion_failed_08004808",
            "code": "\nvoid assertionFailed_08004808(undefined4 assertion,undefined4 file,char *lineNumber,undefined4 extraInfo)\n\n{\n  undefined4 assertionPtr;\n  char *additionalInfo;\n  undefined8 result;\n  undefined4 extraInfoPtr;\n  \n  assertionPtr = *(undefined4 *)(DAT_200000a0 + 0xc);\n  extraInfoPtr = extraInfo;\n  if (lineNumber == (char *)0x0) goto LAB_0800482c;\n  additionalInfo = \", function: \";\n  do {\n    process_and_count_08004860(assertionPtr,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",extraInfo,assertion,file\n                 ,additionalInfo,lineNumber,extraInfoPtr);\n    result = process_and_update_080051ac();\n    file = (undefined4)((ulonglong)result >> 0x20);\n    assertionPtr = (undefined4)result;\nLAB_0800482c:\n    lineNumber = \"\";\n    additionalInfo = lineNumber;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "assertion_failed_08004808",
                "param_1": "assertion",
                "param_2": "file",
                "param_3": "lineNumber",
                "param_4": "extraInfo",
                "uVar1": "assertionPtr",
                "pcVar2": "additionalInfo",
                "uVar3": "result",
                "uVar4": "extraInfoPtr"
            },
            "calling": [
                "FUN_08004388"
            ],
            "called": [
                "FUN_080051ac",
                "FUN_08004860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "shift_left_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong shiftLeft_08004844(undefined4 inputValue,uint shiftAmount)\n\n{\n  return (ulonglong)shiftAmount << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "shift_left_08004844",
                "param_1": "inputValue",
                "param_2": "shiftAmount"
            },
            "calling": [
                "FUN_080047fe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "process_and_count_08004860",
            "code": "\nvoid process_and_count_08004860(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 temp_var_1;\n  undefined4 temp_var_2;\n  \n  temp_var_1 = input_param_3;\n  temp_var_2 = input_param_4;\n  process_and_count_08004860_08004a84(DAT_200000a0,input_param_1,input_param_2,&temp_var_1,input_param_1,&temp_var_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "process_and_count_08004860",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uStack_8": "temp_var_1",
                "uStack_4": "temp_var_2"
            },
            "calling": [
                "FUN_08004808"
            ],
            "called": [
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(functionPointer *)(&DAT_08006008)[index])();\n  }\n  FUNC_080059f8();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(functionPointer *)(&DAT_08006008)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "index",
                "code": "functionPointer"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08004648",
                "FUN_080059f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_memory_with_080048cc",
            "code": "\nvoid fillMemoryWith_080048cc(undefined *memory,undefined value,int count)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memory + count;\n  for (; memory != endAddress; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_memory_with_080048cc",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_0800532c",
                "FUN_08005374",
                "FUN_08005400"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "update_linked_list_080048dc",
            "code": "\nvoid updateLinkedList_080048dc(undefined4 *linked_list,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int *current_node;\n  int **tmp_ptr1;\n  int **prev_node;\n  int **head_node;\n  int **next_node;\n  int **new_node;\n  bool check_condition;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  FUNC_0800557c();\n  head_node = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    prev_node = tmp_ptr1;\n    DAT_200005c8 = new_node;\n  }\n  else {\n    head_node = DAT_200005c8;\n    if (new_node < DAT_200005c8) {\n      prev_node = (int **)*new_node;\n      head_node = (int **)((int)new_node + (int)prev_node);\n      check_condition = DAT_200005c8 == head_node;\n      if (check_condition) {\n        head_node = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      new_node[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = new_node;\n      if (check_condition) {\n        head_node = (int **)((int)head_node + (int)prev_node);\n        *new_node = (int *)head_node;\n      }\n    }\n    else {\n      do {\n        next_node = head_node;\n        head_node = (int **)next_node[1];\n        if (head_node == (int **)0x0) break;\n      } while (head_node <= new_node);\n      prev_node = (int **)*next_node;\n      if ((int **)((int)next_node + (int)prev_node) == new_node) {\n        prev_node = (int **)((int)prev_node + (int)*new_node);\n        *next_node = (int *)prev_node;\n        if (head_node == (int **)((int)next_node + (int)prev_node)) {\n          current_node = *head_node;\n          head_node = (int **)head_node[1];\n          next_node[1] = (int *)head_node;\n          prev_node = (int **)((int)prev_node + (int)current_node);\n          *next_node = (int *)prev_node;\n        }\n      }\n      else if (new_node < (int **)((int)next_node + (int)prev_node)) {\n        *linked_list = 0xc;\n      }\n      else {\n        prev_node = (int **)((int)new_node + (int)*new_node);\n        check_condition = head_node == prev_node;\n        if (check_condition) {\n          prev_node = (int **)*head_node;\n          head_node = (int **)head_node[1];\n        }\n        new_node[1] = (int *)head_node;\n        if (check_condition) {\n          prev_node = (int **)((int)prev_node + (int)*new_node);\n          *new_node = (int *)prev_node;\n        }\n        next_node[1] = (int *)new_node;\n      }\n    }\n  }\n  FUNC_0800557e(linked_list,prev_node,head_node,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "update_linked_list_080048dc",
                "param_1": "linked_list",
                "param_2": "size",
                "piVar1": "current_node",
                "extraout_r1": "tmp_ptr1",
                "ppiVar2": "prev_node",
                "ppiVar3": "head_node",
                "ppiVar4": "next_node",
                "ppiVar5": "new_node",
                "bVar6": "check_condition"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_080051ac"
            ],
            "called": [
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_and_update_memory_08004978",
            "code": "\nuint allocate_and_update_memory_08004978(undefined4 *destination_ptr,uint size)\n\n{\n  uint *current_ptr;\n  int difference;\n  uint *previous_ptr;\n  uint size_difference;\n  uint *new_ptr;\n  uint new_size;\n  \n  new_size = (size + 3 & 0xfffffffc) + 8;\n  if (new_size < 0xc) {\n    new_size = 0xc;\n  }\n  if (((int)new_size < 0) || (new_size < size)) {\n    *destination_ptr = 0xc;\n  }\n  else {\n    FUNC_0800557c();\n    current_ptr = DAT_200005c8;\n    new_ptr = DAT_200005c8;\n    while (previous_ptr = current_ptr, previous_ptr != (uint *)0x0) {\n      size_difference = *previous_ptr - new_size;\n      if (-1 < (int)size_difference) {\n        if (size_difference < 0xc) {\n          if (new_ptr == previous_ptr) {\n            current_ptr = (uint *)new_ptr[1];\n          }\n          else {\n            current_ptr = (uint *)previous_ptr[1];\n          }\n          if (new_ptr != previous_ptr) {\n            new_ptr[1] = (uint)current_ptr;\n            new_ptr = previous_ptr;\n            current_ptr = DAT_200005c8;\n          }\n        }\n        else {\n          *previous_ptr = size_difference;\n          *(uint *)((int)previous_ptr + size_difference) = new_size;\n          new_ptr = (uint *)((int)previous_ptr + size_difference);\n          current_ptr = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      new_ptr = previous_ptr;\n      current_ptr = (uint *)previous_ptr[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = initialize_memory_0800500c(destination_ptr);\n    }\n    current_ptr = (uint *)initialize_memory_0800500c(destination_ptr,new_size);\n    if ((current_ptr != (uint *)0xffffffff) &&\n       ((new_ptr = (uint *)((int)current_ptr + 3U & 0xfffffffc), current_ptr == new_ptr ||\n        (difference = initialize_memory_0800500c(destination_ptr,(int)new_ptr - (int)current_ptr), difference != -1)))) {\n      *new_ptr = new_size;\n      current_ptr = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = current_ptr;\n      FUNC_0800557e(destination_ptr);\n      new_size = (int)new_ptr + 0xbU & 0xfffffff8;\n      difference = new_size - (int)(new_ptr + 1);\n      if (difference != 0) {\n        *(int *)((int)new_ptr + difference) = -difference;\n        return new_size;\n      }\n      return new_size;\n    }\n    *destination_ptr = 0xc;\n    FUNC_0800557e(destination_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_and_update_memory_08004978",
                "param_1": "destination_ptr",
                "param_2": "size",
                "puVar1": "current_ptr",
                "iVar2": "difference",
                "puVar3": "previous_ptr",
                "uVar4": "size_difference",
                "puVar5": "new_ptr",
                "uVar6": "new_size"
            },
            "calling": [
                "FUN_08005374",
                "FUN_080054fc"
            ],
            "called": [
                "FUN_0800500c",
                "FUN_0800557e",
                "FUN_0800557c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_input_08004a34",
            "code": "\nuint process_input_08004a34(int input_type,byte input_byte,byte **input_ptr)\n\n{\n  int temp_var;\n  byte *byte_ptr_1;\n  byte *byte_ptr_2;\n  uint result;\n  \n  byte_ptr_1 = input_ptr[2] + -1;\n  input_ptr[2] = byte_ptr_1;\n  if ((-1 < (int)byte_ptr_1) ||\n     (((int)input_ptr[6] <= (int)byte_ptr_1 && (byte_ptr_1 = (byte *)(uint)input_byte, byte_ptr_1 != (byte *)0xa))))\n  {\n    byte_ptr_1 = *input_ptr;\n    *input_ptr = byte_ptr_1 + 1;\n    *byte_ptr_1 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((input_type != 0) && (*(int *)(input_type + 0x18) == 0)) {\n    initialize_data_structure();\n  }\n  if (input_ptr == (byte **)&DAT_08005fc0) {\n    input_ptr = *(byte ***)(input_type + 4);\n  }\n  else if (input_ptr == (byte **)&DAT_08005fe0) {\n    input_ptr = *(byte ***)(input_type + 8);\n  }\n  else if (input_ptr == (byte **)&DAT_08005fa0) {\n    input_ptr = *(byte ***)(input_type + 0xc);\n  }\n  input_ptr[2] = input_ptr[6];\n  byte_ptr_2 = (byte *)(uint)*(ushort *)(input_ptr + 3);\n  temp_var = (int)byte_ptr_2 << 0x1c;\n  if (((temp_var < 0) && (byte_ptr_2 = input_ptr[4], byte_ptr_2 != (byte *)0x0)) ||\n     (temp_var = process_data_1(input_type,input_ptr,temp_var,byte_ptr_2,byte_ptr_1), temp_var == 0)) {\n    temp_var = (int)*input_ptr - (int)input_ptr[4];\n    result = (uint)input_byte;\n    if ((temp_var < (int)input_ptr[5]) || (temp_var = process_data_2(input_type,input_ptr), temp_var == 0)) {\n      input_ptr[2] = input_ptr[2] + -1;\n      byte_ptr_1 = *input_ptr;\n      *input_ptr = byte_ptr_1 + 1;\n      *byte_ptr_1 = input_byte;\n      if ((byte *)(temp_var + 1) != input_ptr[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_ptr + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      temp_var = process_data_2(input_type,input_ptr);\n      if (temp_var == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_input_08004a34",
                "param_1": "input_type",
                "param_2": "input_byte",
                "param_3": "input_ptr",
                "iVar1": "temp_var",
                "pbVar2": "byte_ptr_1",
                "pbVar3": "byte_ptr_2",
                "uVar4": "result",
                "initialize_data_structure_080053a0": "initialize_data_structure",
                "process_data_080050d0": "process_data_1",
                "process_data_080052cc": "process_data_2"
            },
            "calling": [
                "FUN_08004a60"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_080052cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "process_and_increment_08004a60",
            "code": "\nint process_and_increment_08004a60(undefined4 input_param_1,undefined4 input_param_2,undefined *input_array,int array_length)\n\n{\n  int processed_count;\n  undefined *end_of_array;\n  int current_index;\n  \n  end_of_array = input_array + array_length;\n  current_index = array_length;\n  do {\n    if (input_array == end_of_array) {\n      return 0;\n    }\n    processed_count = process_input_08004a34(input_param_1,*input_array,input_param_2,array_length,current_index);\n    array_length = processed_count + 1;\n    input_array = input_array + 1;\n  } while (array_length != 0);\n  return processed_count;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "process_and_increment_08004a60",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_array",
                "param_4": "array_length",
                "iVar1": "processed_count",
                "puVar2": "end_of_array",
                "iVar3": "current_index"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08004a34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "process_and_count_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint process_and_count_08004a84(int input_data,undefined4 *lookup_table,byte *byte_sequence,int *output_count)\n\n{\n  int result;\n  int *current_value;\n  bool is_digit;\n  byte *current_byte;\n  byte *next_byte;\n  int decoded_data;\n  int temp_value;\n  int *output_index;\n  uint flags;\n  int decimal_places;\n  undefined4 unused;\n  int integer_part;\n  int total_count;\n  byte character;\n  undefined flag_1;\n  undefined flag_2;\n  undefined flag_3;\n  undefined4 unused2;\n  \n  output_index = output_count;\n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    initialize_data_structure();\n  }\n  if (lookup_table == &DAT_08005fc0) {\n    lookup_table = *(undefined4 **)(input_data + 4);\n  }\n  else if (lookup_table == (undefined4 *)&DAT_08005fe0) {\n    lookup_table = *(undefined4 **)(input_data + 8);\n  }\n  else if (lookup_table == (undefined4 *)&DAT_08005fa0) {\n    lookup_table = *(undefined4 **)(input_data + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(lookup_table + 3) << 0x1c)) || (lookup_table[4] == 0)) &&\n     (temp_value = process_data(input_data,lookup_table), temp_value != 0)) {\n    return -1;\n  }\n  total_count = 0;\n  flag_1 = 0x20;\n  flag_2 = 0x30;\n  current_byte = byte_sequence;\nLAB_08004ac6:\n  next_byte = current_byte;\n  if (*next_byte != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  current_byte = next_byte + 1;\n  if (*next_byte != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  temp_value = (int)next_byte - (int)byte_sequence;\n  if (temp_value != 0) {\n    result = process_and_increment(input_data,lookup_table,byte_sequence,temp_value);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(lookup_table + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_count;\n    }\n    total_count = total_count + temp_value;\n  }\n  if (*next_byte == 0) goto LAB_08004c70;\n  flags = 0;\n  integer_part = 0;\n  decimal_places = -1;\n  unused = 0;\n  flag_3 = 0;\n  unused2 = 0;\n  current_byte = next_byte + 1;\n  while( true ) {\n    temp_value = find_sequence(\"#-0+ \",*current_byte);\n    byte_sequence = current_byte + 1;\n    if (temp_value == 0) break;\n    flags = 1 << (temp_value + 0xf7ffa094U & 0xff) | flags;\n    current_byte = byte_sequence;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag_3 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag_3 = 0x2b;\n  }\n  if (*current_byte == 0x2a) {\n    current_value = output_index + 1;\n    temp_value = *output_index;\n    output_index = current_value;\n    if (temp_value < 0) {\n      integer_part = -temp_value;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    is_digit = false;\n    temp_value = integer_part;\n    byte_sequence = current_byte;\n    while( true ) {\n      if (9 < *byte_sequence - 0x30) break;\n      temp_value = temp_value * 10 + (*byte_sequence - 0x30);\n      is_digit = true;\n      byte_sequence = byte_sequence + 1;\n    }\n    if (!is_digit) goto LAB_08004bae;\n  }\n  integer_part = temp_value;\nLAB_08004bae:\n  if (*byte_sequence == 0x2e) {\n    if (byte_sequence[1] == 0x2a) {\n      decimal_places = *output_index;\n      if (decimal_places < 0) {\n        decimal_places = -1;\n      }\n      byte_sequence = byte_sequence + 2;\n      output_index = output_index + 1;\n    }\n    else {\n      is_digit = false;\n      decimal_places = 0;\n      temp_value = 0;\n      while( true ) {\n        byte_sequence = byte_sequence + 1;\n        if (9 < *byte_sequence - 0x30) break;\n        temp_value = temp_value * 10 + (*byte_sequence - 0x30);\n        is_digit = true;\n      }\n      if (is_digit) {\n        decimal_places = temp_value;\n      }\n    }\n  }\n  temp_value = find_sequence(&DAT_08005f72,*byte_sequence,3);\n  if (temp_value != 0) {\n    flags = flags | 0x40 << (temp_value + 0xf7ffa08eU & 0xff);\n    byte_sequence = byte_sequence + 1;\n  }\n  character = *byte_sequence;\n  byte_sequence = byte_sequence + 1;\n  temp_value = find_sequence(\"efgEFG\",character,6);\n  if (temp_value == 0) {\n    decoded_data = decode_and_convert_data(input_data,&flags,lookup_table,0x8004a61,&output_index);\n    if (decoded_data == -1) goto LAB_08004c70;\n  }\n  else {\n    output_index = (int *)(((int)output_index + 7U & 0xfffffff8) + 8);\n  }\n  total_count = total_count + decoded_data;\n  current_byte = byte_sequence;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "process_and_count_08004a84",
                "param_1": "input_data",
                "param_2": "lookup_table",
                "param_3": "byte_sequence",
                "param_4": "output_count",
                "iVar1": "result",
                "piVar2": "current_value",
                "bVar3": "is_digit",
                "pbVar4": "current_byte",
                "pbVar5": "next_byte",
                "unaff_r9": "decoded_data",
                "iVar6": "temp_value",
                "local_8c": "output_index",
                "local_88": "flags",
                "local_84": "decimal_places",
                "local_80": "unused",
                "local_7c": "integer_part",
                "local_74": "total_count",
                "local_70": "character",
                "local_6f": "flag_1",
                "local_6e": "flag_2",
                "local_45": "flag_3",
                "local_30": "unused2",
                "initialize_data_structure_080053a0": "initialize_data_structure",
                "process_data_080050d0": "process_data",
                "process_and_increment_08004a60": "process_and_increment",
                "find_byte_sequence_08000230": "find_sequence",
                "decode_and_convert_data_08004d9c": "decode_and_convert_data"
            },
            "calling": [
                "FUN_08004860",
                "FUN_08004fdc"
            ],
            "called": [
                "FUN_080050d0",
                "FUN_080053a0",
                "FUN_08000230",
                "FUN_08004a60",
                "FUN_08004d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "calculate_new_size_08004cb0",
            "code": "\nundefined4\ncalculateNewSize_08004cb0(undefined4 inputParam,uint *dataArray,uint *outputSize,undefined4 param,code *callbackFunction)\n\n{\n  int loopCounter;\n  int returnValue;\n  uint maxSize;\n  uint counter;\n  bool checkCondition;\n  \n  maxSize = dataArray[4];\n  if ((int)dataArray[4] < (int)dataArray[2]) {\n    maxSize = dataArray[2];\n  }\n  *outputSize = maxSize;\n  if (*(char *)((int)dataArray + 0x43) != '\\0') {\n    *outputSize = maxSize + 1;\n  }\n  if ((int)(*dataArray << 0x1a) < 0) {\n    *outputSize = *outputSize + 2;\n  }\n  if ((*dataArray & 6) == 0) {\n    for (loopCounter = 0; loopCounter < (int)(dataArray[3] - *outputSize); loopCounter = loopCounter + 1) {\n      returnValue = (*callbackFunction)(inputParam,param,(int)dataArray + 0x19,1);\n      if (returnValue == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxSize = (uint)*(byte *)((int)dataArray + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*dataArray << 0x1a) < 0) {\n    *(undefined *)((int)dataArray + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)dataArray + maxSize + 0x44) = *(undefined *)((int)dataArray + 0x45);\n    maxSize = maxSize + 2;\n  }\n  loopCounter = (*callbackFunction)(inputParam,param,(int)dataArray + 0x43,maxSize);\n  if (loopCounter != -1) {\n    maxSize = dataArray[3];\n    checkCondition = (*dataArray & 6) == 4;\n    if (checkCondition) {\n      maxSize = maxSize - *outputSize;\n    }\n    if (checkCondition) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)dataArray[4] < (int)dataArray[2]) {\n      maxSize = maxSize + (dataArray[2] - dataArray[4]);\n    }\n    counter = 0;\n    while( true ) {\n      if (maxSize == counter) {\n        return 0;\n      }\n      loopCounter = (*callbackFunction)(inputParam,param,(int)dataArray + 0x1a,1);\n      if (loopCounter == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "calculate_new_size_08004cb0",
                "param_1": "inputParam",
                "param_2": "dataArray",
                "param_3": "outputSize",
                "param_4": "param",
                "param_5": "callbackFunction",
                "iVar1": "loopCounter",
                "iVar2": "returnValue",
                "uVar3": "maxSize",
                "uVar4": "counter",
                "bVar5": "checkCondition"
            },
            "calling": [
                "FUN_08004d9c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "decode_and_convert_data_08004d9c",
            "code": "\nuint decode_and_convert_data_08004d9c(undefined4 param_value,uint *data_ptr,undefined4 param3_value,code *conversion_function,uint **output_data_ptr)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int temp_index;\n  char *hex_chars;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint data;\n  uint temp;\n  char *char_ptr;\n  char *str_ptr;\n  uint temp_data [2];\n  \n  byte_value = *(byte *)(data_ptr + 6);\n  str_ptr = (char *)((int)data_ptr + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_08004f56;\n          if (byte_value != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)data_ptr + 0x45) = 0x58;\n          hex_chars = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          base = *data_ptr;\n          ptr = *output_data_ptr;\n          *output_data_ptr = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            data = (uint)*(ushort *)ptr;\n          }\n          else {\n            data = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data_ptr = base | 0x20;\n          }\n          if (data == 0) {\n            *data_ptr = *data_ptr & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)data_ptr + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_08004dcc;\n          data = *data_ptr;\n          ptr = *output_data_ptr;\n          if ((data & 0x80) == 0) {\n            *output_data_ptr = ptr + 1;\n            if ((data & 0x40) == 0) goto LAB_08004dec;\n            data = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *output_data_ptr = ptr + 1;\nLAB_08004dec:\n            data = *ptr;\n          }\n          if ((int)data < 0) {\n            data = -data;\n            *(undefined *)((int)data_ptr + 0x43) = 0x2d;\n          }\n          hex_chars = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        temp = data_ptr[1];\n        data_ptr[2] = temp;\n        char_ptr = str_ptr;\n        if ((int)temp < 0) {\n          if (data != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)data_ptr + 0x42) = *hex_chars;\n          char_ptr = (char *)((int)data_ptr + 0x42);\n        }\n        else {\n          *data_ptr = *data_ptr & 0xfffffffb;\n          if (data == 0) {\n            if (temp != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              temp = data / base;\n              char_ptr = char_ptr + -1;\n              *char_ptr = hex_chars[data - base * temp];\n              data = temp;\n            } while (temp != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data_ptr << 0x1f) < 0)) && ((int)data_ptr[1] <= (int)data_ptr[4]))\n        {\n          char_ptr[-1] = '0';\n          char_ptr = char_ptr + -1;\n        }\n        data_ptr[4] = (int)str_ptr - (int)char_ptr;\n        str_ptr = char_ptr;\n        goto LAB_08004ec2;\n      }\n      ptr = *output_data_ptr;\n      *output_data_ptr = ptr + 1;\n      *(char *)((int)data_ptr + 0x42) = (char)*ptr;\nLAB_08004e2c:\n      str_ptr = (char *)((int)data_ptr + 0x42);\n      data = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08004e52:\n            data = *data_ptr;\n            ptr = *output_data_ptr;\n            if ((data & 0x80) == 0) {\n              *output_data_ptr = ptr + 1;\n              if ((data & 0x40) == 0) goto LAB_08004e60;\n              data = (uint)*(ushort *)ptr;\n            }\n            else {\n              *output_data_ptr = ptr + 1;\nLAB_08004e60:\n              data = *ptr;\n            }\n            hex_chars = \"0123456789ABCDEF\";\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (byte_value == 0x70) {\n            *data_ptr = *data_ptr | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)data_ptr + 0x45) = 0x78;\n            hex_chars = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08004e52;\n          if (byte_value == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)data_ptr + 0x42) = byte_value;\n        goto LAB_08004e2c;\n      }\n      ppcVar8 = (char **)*output_data_ptr;\n      *output_data_ptr = (uint *)(ppcVar8 + 1);\n      str_ptr = *ppcVar8;\n      index = find_byte_sequence_08000230(str_ptr,0,data_ptr[1]);\n      if (index != 0) {\n        data_ptr[1] = index - (int)str_ptr;\n      }\n      data = data_ptr[1];\n    }\n    data_ptr[4] = data;\n    *(undefined *)((int)data_ptr + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  data = *data_ptr;\n  ppuVar7 = (uint **)*output_data_ptr;\n  base = data_ptr[5];\n  if ((data & 0x80) == 0) {\n    *output_data_ptr = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((data & 0x40) == 0) goto LAB_08004f42;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *output_data_ptr = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_08004f42:\n    *ptr = base;\n  }\nLAB_08004f56:\n  data_ptr[4] = 0;\nLAB_08004ec2:\n  index = calculate_new_size_08004cb0(param_value,data_ptr,temp_data,param3_value,conversion_function);\n  if ((index == -1) || (index = (*conversion_function)(param_value,param3_value,str_ptr,data_ptr[4]), index == -1)) {\nLAB_08004ed6:\n    data = 0xffffffff;\n  }\n  else {\n    if ((int)(*data_ptr << 0x1e) < 0) {\n      for (index = 0; index < (int)(data_ptr[3] - temp_data[0]); index = index + 1) {\n        temp_index = (*conversion_function)(param_value,param3_value,(int)data_ptr + 0x19,1);\n        if (temp_index == -1) goto LAB_08004ed6;\n      }\n    }\n    data = data_ptr[3];\n    if ((int)data_ptr[3] < (int)temp_data[0]) {\n      data = temp_data[0];\n    }\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "decode_and_convert_data_08004d9c",
                "param_1": "param_value",
                "param_2": "data_ptr",
                "param_3": "param3_value",
                "param_4": "conversion_function",
                "param_5": "output_data_ptr",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "ptr",
                "iVar4": "temp_index",
                "pcVar5": "hex_chars",
                "uVar6": "base",
                "uVar9": "data",
                "uVar10": "temp",
                "pcVar11": "char_ptr",
                "pcVar12": "str_ptr",
                "local_24": "temp_data"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000230",
                "FUN_08004cb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "initialize_and_process_08004fdc",
            "code": "\nvoid initialize_and_process_08004fdc(undefined4 data_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int data_var;\n  undefined4 param_1_var;\n  undefined4 param_2_var;\n  undefined4 param_3_var;\n  undefined4 param_4_var;\n  \n  data_var = DAT_200000a0;\n  param_1_var = data_ptr;\n  param_2_var = param_2;\n  param_3_var = param_3;\n  param_4_var = param_4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_structure_080053a0(DAT_200000a0);\n  }\n  process_and_count_08004a84(data_var,*(undefined4 *)(data_var + 8),data_ptr,&param_2_var,param_1_var,&param_2_var);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "initialize_and_process_08004fdc",
                "param_1": "data_ptr",
                "iVar1": "data_var",
                "uVar2": "param_1_var",
                "uStack_c": "param_2_var",
                "uStack_8": "param_3_var",
                "uStack_4": "param_4_var"
            },
            "calling": [
                "FUN_08003978"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_08004a84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "initialize_memory_0800500c",
            "code": "\nvoid initializeMemory_0800500c(int *outputPointer,undefined4 inputSize)\n\n{\n  int allocatedMemory;\n  \n  DAT_20000674 = 0;\n  allocatedMemory = allocate_memory_08004094(inputSize);\n  if ((allocatedMemory == -1) && (DAT_20000674 != 0)) {\n    *outputPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "initialize_memory_0800500c",
                "param_1": "outputPointer",
                "param_2": "inputSize",
                "iVar1": "allocatedMemory"
            },
            "calling": [
                "FUN_08004978"
            ],
            "called": [
                "FUN_08004094"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_data_080050d0",
            "code": "\nuint processData_080050d0(undefined4 *output,undefined4 *input)\n\n{\n  int dataPointer;\n  uint result;\n  ushort flags;\n  \n  dataPointer = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initialize_data_structure_080053a0(DAT_200000a0);\n  }\n  if (input == &DAT_08005fc0) {\n    input = *(undefined4 **)(dataPointer + 4);\n  }\n  else if (input == (undefined4 *)&DAT_08005fe0) {\n    input = *(undefined4 **)(dataPointer + 8);\n  }\n  else if (input == (undefined4 *)&DAT_08005fa0) {\n    input = *(undefined4 **)(dataPointer + 0xc);\n  }\n  flags = *(ushort *)(input + 3);\n  result = (uint)flags;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *output = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          update_linked_list_080048dc(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    allocate_and_update_memory_080054fc(output,input);\n  }\n  flags = *(ushort *)(input + 3);\n  result = flags & 1;\n  if ((flags & 1) == 0) {\n    if (-1 < (int)((uint)flags << 0x1e)) {\n      result = input[5];\n    }\n    input[2] = result;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] == 0) {\n    flags = *(ushort *)(input + 3);\n    result = (int)(short)flags & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(input + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "dataPointer",
                "uVar2": "result",
                "uVar3": "flags"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080053a0",
                "FUN_080054fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080050d0(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    FUNC_080053a0(DAT_200000a0);\n  }\n  if (param_2 == &DAT_08005fc0) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fe0) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08005fa0) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_linked_list_080048dc(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_and_update_memory_080054fc(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08005100:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "process_and_update_080051ac",
            "code": "\nvoid process_and_update_080051ac(void)\n\n{\n  uint *pointer_1;\n  int integer_1;\n  int *pointer_2;\n  int *pointer_3;\n  uint unsigned_integer_1;\n  ushort unsigned_short_1;\n  int integer_2;\n  code *function_pointer;\n  int integer_3;\n  uint unsigned_integer_2;\n  code *jumptable_function;\n  bool boolean_var;\n  undefined8 undefined_var;\n  \n  process_input_080055d0(6);\n  jumptable_function = (code *)0x80051bb;\n  undefined_var = infinite_loop_080040f8(1);\n  pointer_2 = (int *)((ulonglong)undefined_var >> 0x20);\n  pointer_1 = (uint *)undefined_var;\n  unsigned_short_1 = *(ushort *)(pointer_2 + 3);\n  unsigned_integer_1 = (uint)unsigned_short_1;\n  if ((int)(unsigned_integer_1 << 0x1c) < 0) {\n    integer_1 = pointer_2[4];\n    if (integer_1 != 0) {\n      integer_2 = unsigned_integer_1 << 0x1e;\n      boolean_var = integer_2 == 0;\n      integer_3 = *pointer_2;\n      if (boolean_var) {\n        integer_2 = pointer_2[5];\n      }\n      *pointer_2 = integer_1;\n      if (!boolean_var) {\n        integer_2 = 0;\n      }\n      pointer_2[2] = integer_2;\n      for (integer_3 = integer_3 - integer_1; 0 < integer_3; integer_3 = integer_3 - integer_2) {\n        integer_2 = (*(code *)pointer_2[10])(pointer_1,pointer_2[8],integer_1,integer_3);\n        if (integer_2 < 1) {\n          unsigned_short_1 = *(ushort *)(pointer_2 + 3);\n          goto LAB_080052b2;\n        }\n        integer_1 = integer_1 + integer_2;\n      }\n    }\n  }\n  else if (((0 < pointer_2[1]) || (0 < pointer_2[0x10])) &&\n          (function_pointer = (code *)pointer_2[0xb], function_pointer != (code *)0x0)) {\n    unsigned_integer_2 = *pointer_1;\n    *pointer_1 = 0;\n    if ((unsigned_short_1 & 0x1000) == 0) {\n      integer_1 = (*function_pointer)(pointer_1,pointer_2[8],unsigned_integer_1 & 0x1000,1);\n      if ((integer_1 == -1) && (unsigned_integer_1 = *pointer_1, unsigned_integer_1 != 0)) {\n        if ((unsigned_integer_1 != 0x1d) && (unsigned_integer_1 != 0x16)) {\n          *(ushort *)(pointer_2 + 3) = *(ushort *)(pointer_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*jumptable_function)();\n          return;\n        }\n        *pointer_1 = unsigned_integer_2;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      integer_1 = pointer_2[0x15];\n    }\n    if (((int)((uint)*(ushort *)(pointer_2 + 3) << 0x1d) < 0) &&\n       (integer_1 = integer_1 - pointer_2[1], pointer_2[0xd] != 0)) {\n      integer_1 = integer_1 - pointer_2[0x10];\n    }\n    integer_1 = (*(code *)pointer_2[0xb])(pointer_1,pointer_2[8],integer_1,0);\n    unsigned_short_1 = *(ushort *)(pointer_2 + 3);\n    if ((integer_1 == -1) &&\n       ((0x1d < *pointer_1 || (-1 < (int)((0x20400001U >> (*pointer_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(pointer_2 + 3) = unsigned_short_1 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumptable_function)(0xffffffff);\n      return;\n    }\n    pointer_2[1] = 0;\n    *pointer_2 = pointer_2[4];\n    if (((int)((uint)unsigned_short_1 << 0x13) < 0) && ((integer_1 != -1 || (*pointer_1 == 0)))) {\n      pointer_2[0x15] = integer_1;\n    }\n    pointer_3 = (int *)pointer_2[0xd];\n    *pointer_1 = unsigned_integer_2;\n    if (pointer_3 != (int *)0x0) {\n      if (pointer_3 != pointer_2 + 0x11) {\n        update_linked_list_080048dc(pointer_1);\n      }\n      pointer_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumptable_function)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable_function)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "process_and_update_080051ac",
                "puVar1": "pointer_1",
                "iVar2": "integer_1",
                "piVar3": "pointer_2",
                "piVar4": "pointer_3",
                "uVar5": "unsigned_integer_1",
                "uVar6": "unsigned_short_1",
                "iVar7": "integer_2",
                "pcVar8": "function_pointer",
                "iVar9": "integer_3",
                "uVar10": "unsigned_integer_2",
                "UNRECOVERED_JUMPTABLE_00": "jumptable_function",
                "bVar11": "boolean_var",
                "uVar12": "undefined_var"
            },
            "calling": [
                "FUN_08005760",
                "FUN_08004808"
            ],
            "called": [
                "FUN_080048dc",
                "FUN_080055d0",
                "FUN_080040f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "process_data_080052cc",
            "code": "\nundefined4 processData_080052cc(uint *dataPtr,int *infoPtr)\n\n{\n  undefined4 returnValue;\n  int loopVar1;\n  int *linkedlistPtr;\n  uint ushortValue;\n  ushort tempValue;\n  int loopVar2;\n  undefined4 unaffected_r4;\n  undefined4 unaffected_r5;\n  code *callbackFunc;\n  int loopVar3;\n  uint tempValue2;\n  code *jumpTable;\n  bool isConditionTrue;\n  \n  if (infoPtr[4] != 0) {\n    if ((dataPtr != (uint *)0x0) && (dataPtr[6] == 0)) {\n      initialize_data_structure_080053a0();\n    }\n    if (infoPtr == &DAT_08005fc0) {\n      infoPtr = (int *)dataPtr[1];\n    }\n    else if (infoPtr == (int *)&DAT_08005fe0) {\n      infoPtr = (int *)dataPtr[2];\n    }\n    else if (infoPtr == (int *)&DAT_08005fa0) {\n      infoPtr = (int *)dataPtr[3];\n    }\n    if (*(short *)(infoPtr + 3) != 0) {\n      tempValue = *(ushort *)(infoPtr + 3);\n      ushortValue = (uint)tempValue;\n      if ((int)(ushortValue << 0x1c) < 0) {\n        loopVar1 = infoPtr[4];\n        if (loopVar1 != 0) {\n          loopVar2 = ushortValue << 0x1e;\n          isConditionTrue = loopVar2 == 0;\n          loopVar3 = *infoPtr;\n          if (isConditionTrue) {\n            loopVar2 = infoPtr[5];\n          }\n          *infoPtr = loopVar1;\n          if (!isConditionTrue) {\n            loopVar2 = 0;\n          }\n          infoPtr[2] = loopVar2;\n          for (loopVar3 = loopVar3 - loopVar1; 0 < loopVar3; loopVar3 = loopVar3 - loopVar2) {\n            loopVar2 = (*(code *)infoPtr[10])(dataPtr,infoPtr[8],loopVar1,loopVar3,unaffected_r4,unaffected_r5);\n            if (loopVar2 < 1) {\n              tempValue = *(ushort *)(infoPtr + 3);\n              goto LAB_080052b2;\n            }\n            loopVar1 = loopVar1 + loopVar2;\n          }\n        }\n      }\n      else if (((0 < infoPtr[1]) || (0 < infoPtr[0x10])) &&\n              (callbackFunc = (code *)infoPtr[0xb], callbackFunc != (code *)0x0)) {\n        tempValue2 = *dataPtr;\n        *dataPtr = 0;\n        if ((tempValue & 0x1000) == 0) {\n          loopVar1 = (*callbackFunc)(dataPtr,infoPtr[8],ushortValue & 0x1000,1);\n          if ((loopVar1 == -1) && (ushortValue = *dataPtr, ushortValue != 0)) {\n            if ((ushortValue != 0x1d) && (ushortValue != 0x16)) {\n              *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *dataPtr = tempValue2;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          loopVar1 = infoPtr[0x15];\n        }\n        if (((int)((uint)*(ushort *)(infoPtr + 3) << 0x1d) < 0) &&\n           (loopVar1 = loopVar1 - infoPtr[1], infoPtr[0xd] != 0)) {\n          loopVar1 = loopVar1 - infoPtr[0x10];\n        }\n        loopVar1 = (*(code *)infoPtr[0xb])(dataPtr,infoPtr[8],loopVar1,0);\n        tempValue = *(ushort *)(infoPtr + 3);\n        if ((loopVar1 == -1) &&\n           ((0x1d < *dataPtr || (-1 < (int)((0x20400001U >> (*dataPtr & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(infoPtr + 3) = tempValue | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        infoPtr[1] = 0;\n        *infoPtr = infoPtr[4];\n        if (((int)((uint)tempValue << 0x13) < 0) && ((loopVar1 != -1 || (*dataPtr == 0)))) {\n          infoPtr[0x15] = loopVar1;\n        }\n        linkedlistPtr = (int *)infoPtr[0xd];\n        *dataPtr = tempValue2;\n        if (linkedlistPtr != (int *)0x0) {\n          if (linkedlistPtr != infoPtr + 0x11) {\n            update_linked_list_080048dc(dataPtr);\n          }\n          infoPtr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "process_data_080052cc",
                "param_1": "dataPtr",
                "param_2": "infoPtr",
                "uVar1": "returnValue",
                "iVar2": "loopVar1",
                "piVar3": "linkedlistPtr",
                "uVar4": "ushortValue",
                "uVar5": "tempValue",
                "iVar6": "loopVar2",
                "unaff_r4": "unaffected_r4",
                "unaff_r5": "unaffected_r5",
                "pcVar7": "callbackFunc",
                "iVar8": "loopVar3",
                "uVar9": "tempValue2",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar10": "isConditionTrue"
            },
            "calling": [
                "FUN_08004a34"
            ],
            "called": [
                "FUN_080053a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_080052cc(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_080053a0();\n    }\n    if (param_2 == &DAT_08005fc0) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08005fe0) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_08005fa0) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 == 0;\n          iVar8 = *param_2;\n          if (bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          if (!bVar10) {\n            iVar6 = 0;\n          }\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_080052b2;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_linked_list_080048dc(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_memory_0800532c",
            "code": "\nvoid initializeMemory_0800532c(undefined4 *memoryArray,undefined2 value1,undefined2 value2)\n\n{\n  *memoryArray = 0;\n  memoryArray[1] = 0;\n  memoryArray[2] = 0;\n  *(undefined2 *)(memoryArray + 3) = value1;\n  memoryArray[0x19] = 0;\n  *(undefined2 *)((int)memoryArray + 0xe) = value2;\n  memoryArray[4] = 0;\n  memoryArray[5] = 0;\n  memoryArray[6] = 0;\n  fill_memory_with_080048cc(memoryArray + 0x17,0,8);\n  memoryArray[9] = 0x8005609;\n  memoryArray[10] = 0x800562b;\n  memoryArray[0xb] = 0x8005663;\n  memoryArray[8] = memoryArray;\n  memoryArray[0xc] = &LAB_08005686_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_memory_0800532c",
                "param_1": "memoryArray",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080048cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "allocate_and_update_memory_08005374",
            "code": "\nundefined4 * allocateAndUpdateMemory_08005374(undefined4 param,int count)\n\n{\n  undefined4 *memoryPtr;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  memoryPtr = (undefined4 *)allocate_and_update_memory_08004978(param,offset + 0x74);\n  if (memoryPtr != (undefined4 *)0x0) {\n    *memoryPtr = 0;\n    memoryPtr[1] = count;\n    memoryPtr[2] = memoryPtr + 3;\n    fill_memory_with_080048cc(memoryPtr + 3,0,offset + 0x68);\n  }\n  return memoryPtr;\n}\n\n",
            "renaming": {
                "FUN_08005374": "allocate_and_update_memory_08005374",
                "param_1": "param",
                "param_2": "count",
                "puVar1": "memoryPtr",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08005400"
            ],
            "called": [
                "FUN_080048cc",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_data_structure_080053a0",
            "code": "\nvoid initialize_data_structure_080053a0(undefined4 *data_structure)\n\n{\n  undefined4 result;\n  undefined4 *pointer;\n  \n  if (data_structure[6] == 0) {\n    data_structure[0x12] = 0;\n    data_structure[0x13] = 0;\n    data_structure[0x14] = 0;\n    pointer = &DAT_200000a4;\n    data_structure[10] = label_1;\n    if (data_structure == &DAT_200000a4) {\n      pointer = (undefined4 *)0x1;\n    }\n    if (data_structure == &DAT_200000a4) {\n      data_structure[6] = pointer;\n    }\n    result = initialize_data_08005400();\n    data_structure[1] = result;\n    result = initialize_data_08005400(data_structure);\n    data_structure[2] = result;\n    result = initialize_data_08005400(data_structure);\n    data_structure[3] = result;\n    initialize_memory_0800532c(data_structure[1],4,0);\n    initialize_memory_0800532c(data_structure[2],9,1);\n    initialize_memory_0800532c(data_structure[3],0x12,2);\n    data_structure[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_data_structure_080053a0",
                "param_1": "data_structure",
                "uVar1": "result",
                "puVar2": "pointer",
                "&LAB_08005320_1": "label_1"
            },
            "calling": [
                "FUN_080050d0",
                "FUN_08004fdc",
                "FUN_08004a84",
                "FUN_080052cc",
                "FUN_08005400",
                "FUN_08004a34"
            ],
            "called": [
                "FUN_0800532c",
                "FUN_08005400"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_08005400",
            "code": "\nint * initializeData_08005400(undefined4 *errorCode,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *currentPtr;\n  int *nextPtr;\n  int **dataPointer;\n  \n  if (DAT_200000bc == 0) {\n    initialize_data_structure_080053a0(&DAT_200000a4);\n  }\n  dataPointer = (int **)&DAT_200000ec;\n  do {\n    nextPtr = dataPointer[2];\n    currentPtr = dataPointer[1];\n    while (currentPtr = (int *)((int)currentPtr + -1), -1 < (int)currentPtr) {\n      if (*(short *)(nextPtr + 3) == 0) {\n        *(undefined2 *)((int)nextPtr + 0xe) = 0xffff;\n        *(undefined2 *)(nextPtr + 3) = 1;\n        nextPtr[0x19] = 0;\n        *nextPtr = 0;\n        nextPtr[2] = 0;\n        nextPtr[1] = 0;\n        nextPtr[4] = 0;\n        nextPtr[5] = 0;\n        nextPtr[6] = 0;\n        fill_memory_with_080048cc(nextPtr + 0x17,0,8,1,param4);\n        nextPtr[0xd] = 0;\n        nextPtr[0xe] = 0;\n        nextPtr[0x12] = 0;\n        nextPtr[0x13] = 0;\n        return nextPtr;\n      }\n      nextPtr = nextPtr + 0x1a;\n    }\n    if (*dataPointer == (int *)0x0) {\n      currentPtr = (int *)allocate_and_update_memory_08005374(errorCode,4);\n      *dataPointer = currentPtr;\n      if (currentPtr == (int *)0x0) {\n        *errorCode = 0xc;\n        return (int *)0x0;\n      }\n    }\n    dataPointer = (int **)*dataPointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_08005400",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentPtr",
                "piVar2": "nextPtr",
                "ppiVar3": "dataPointer"
            },
            "calling": [
                "FUN_080053a0"
            ],
            "called": [
                "FUN_080053a0",
                "FUN_080048cc",
                "FUN_08005374"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08005400(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_200000bc == 0) {\n    FUNC_080053a0(&DAT_200000a4);\n  }\n  ppiVar3 = (int **)&DAT_200000ec;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        piVar2[0x19] = 0;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_with_080048cc(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_update_memory_08005374(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_memory_status_080054b4",
            "code": "\nundefined4 check_memory_status_080054b4(undefined4 status,int input_values,undefined4 *output_value,uint *memory_status)\n\n{\n  int result;\n  undefined4 value;\n  undefined temp_stack [4];\n  uint local_value;\n  \n  if ((*(short *)(input_values + 0xe) < 0) ||\n     (result = initialize_and_check_memory_080056d4(status,(int)*(short *)(input_values + 0xe),temp_stack), result < 0)) {\n    *memory_status = 0;\n    if ((int)((uint)*(ushort *)(input_values + 0xc) << 0x18) < 0) {\n      value = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *memory_status = (uint)((local_value & 0xf000) == 0x2000);\n  }\n  value = 0x400;\nLAB_080054f4:\n  *output_value = value;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_memory_status_080054b4",
                "param_1": "status",
                "param_2": "input_values",
                "param_3": "output_value",
                "param_4": "memory_status",
                "iVar1": "result",
                "uVar2": "value",
                "auStack_4c": "temp_stack",
                "local_48": "local_value"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080056d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "allocate_and_update_memory_080054fc",
            "code": "\nvoid allocateAndUpdateMemory_080054fc(int memoryAddress,int *parameters)\n\n{\n  ushort memoryStatus;\n  int memoryAllocationResult;\n  int localBuffer;\n  int *tempBuffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(parameters + 3) << 0x1e)) {\n    localBuffer = memoryAddress;\n    tempBuffer = parameters;\n    memoryStatus = check_memory_status_080054b4(memoryAddress,parameters,&localBuffer,&tempBuffer);\n    memoryAllocationResult = allocate_and_update_memory_08004978(memoryAddress,localBuffer);\n    if (memoryAllocationResult != 0) {\n      *(undefined **)(memoryAddress + 0x28) = &LAB_08005320_1;\n      *parameters = memoryAllocationResult;\n      *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) | 0x80;\n      parameters[5] = localBuffer;\n      parameters[4] = memoryAllocationResult;\n      if ((tempBuffer != (int *)0x0) &&\n         (memoryAllocationResult = update_return_value_080056f8(memoryAddress,(int)*(short *)((int)parameters + 0xe)), memoryAllocationResult != 0)) {\n        *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(parameters + 3) = memoryStatus | *(ushort *)(parameters + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(parameters + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) & 0xfffc | 2;\n  }\n  *parameters = (int)parameters + 0x47;\n  parameters[4] = (int)parameters + 0x47;\n  parameters[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "allocate_and_update_memory_080054fc",
                "param_1": "memoryAddress",
                "param_2": "parameters",
                "uVar1": "memoryStatus",
                "iVar2": "memoryAllocationResult",
                "local_18": "localBuffer",
                "local_14": "tempBuffer"
            },
            "calling": [
                "FUN_080050d0"
            ],
            "called": [
                "FUN_080056f8",
                "FUN_080054b4",
                "FUN_08004978"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "FUN_080048dc",
                "FUN_08004978"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "process_input_080055d0",
            "code": "\nint processInput_080055d0(uint inputValue)\n\n{\n  int *dataPointer;\n  undefined4 returnValue;\n  int tempVar;\n  code *functionPtr;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  undefined4 *dataPointerPtr;\n  \n  dataPointer = DAT_200000a0;\n  dataPointerPtr = &DAT_200000a0;\n  if (0x1f < inputValue) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  tempVar = DAT_200000a0[0x11];\n  if ((tempVar != 0) && (functionPtr = *(code **)(tempVar + inputValue * 4), functionPtr != (code *)0x0)) {\n    if (functionPtr != (code *)0x1) {\n      if (functionPtr == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(tempVar + inputValue * 4) = 0;\n      (*functionPtr)(inputValue);\n    }\n    return 0;\n  }\n  returnValue = thunk_check_success_0800410c(DAT_200000a0);\n  DAT_20000674 = 0;\n  tempVar = initialize_default_value_080040fc(returnValue,inputValue,inputValue,0,dataPointerPtr,unaff_r4,unaff_r5,in_lr);\n  if ((tempVar == -1) && (DAT_20000674 != 0)) {\n    *dataPointer = DAT_20000674;\n  }\n  return tempVar;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "process_input_080055d0",
                "param_1": "inputValue",
                "piVar1": "dataPointer",
                "uVar2": "returnValue",
                "iVar3": "tempVar",
                "pcVar4": "functionPtr",
                "puVar5": "dataPointerPtr"
            },
            "calling": [
                "FUN_080051ac"
            ],
            "called": [
                "thunk_FUN_0800410c",
                "FUN_080040fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800410c": {
            "entrypoint": "0x08005604",
            "current_name": "get_one_thunk_0800410c",
            "code": "\nint get_one_thunk_0800410c(void)\n\n{\n  return_val 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800410c": "get_one_thunk_0800410c",
                "undefined4": "int",
                "return": "return_val"
            },
            "calling": [
                "FUN_080055d0"
            ],
            "called": [
                "FUN_0800410c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_application_data_08005608",
            "code": "\nvoid updateApplicationData_08005608(undefined4 param1,int param2)\n\n{\n  int appInitResult;\n  uint updatedValue;\n  bool isInitialized;\n  \n  appInitResult = initialize_application_0800573c(param1,(int)*(short *)(param2 + 0xe));\n  isInitialized = -1 < appInitResult;\n  if (isInitialized) {\n    updatedValue = *(int *)(param2 + 0x54) + appInitResult;\n  }\n  else {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xffffefff;\n  }\n  if (isInitialized) {\n    *(uint *)(param2 + 0x54) = updatedValue;\n  }\n  if (!isInitialized) {\n    *(short *)(param2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_application_data_08005608",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "appInitResult",
                "uVar2": "updatedValue",
                "bVar3": "isInitialized"
            },
            "calling": [],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "initialize_data_process_0800562a",
            "code": "\nvoid initializeDataProcess_0800562a(int *errorCode,int data,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_and_check_error_code_08005718(errorCode,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  result = process_data_080040ec((int)*(short *)(data + 0xe),param1,param2,param2,param2,param3,\n                       param4,param5);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *errorCode = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "initialize_data_process_0800562a",
                "param_1": "errorCode",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result",
                "unaff_r4": "param3",
                "unaff_r5": "param4",
                "in_lr": "param5"
            },
            "calling": [],
            "called": [
                "FUN_080040ec",
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "initialize_error_code_08005662",
            "code": "\nvoid initializeErrorCode_08005662(undefined4 errorCode,int paramOffset)\n\n{\n  int errorCodeResult;\n  ushort updatedFlags;\n  bool isError;\n  \n  errorCodeResult = initialize_and_check_error_code_08005718(errorCode,(int)*(short *)(paramOffset + 0xe));\n  isError = errorCodeResult == -1;\n  if (isError) {\n    updatedFlags = *(ushort *)(paramOffset + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(paramOffset + 0x54) = errorCodeResult;\n    updatedFlags = *(ushort *)(paramOffset + 0xc) | 0x1000;\n  }\n  if (isError) {\n    *(ushort *)(paramOffset + 0xc) = updatedFlags;\n  }\n  if (!isError) {\n    *(ushort *)(paramOffset + 0xc) = updatedFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "initialize_error_code_08005662",
                "param_1": "errorCode",
                "param_2": "paramOffset",
                "iVar1": "errorCodeResult",
                "uVar2": "updatedFlags",
                "bVar3": "isError"
            },
            "calling": [],
            "called": [
                "FUN_08005718"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "initialize_and_check_memory_080056d4",
            "code": "\nvoid initializeAndCheckMemory_080056d4(int *outputPointer,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = initialize_memory_080040d6(param2,param3,param3,0,param4);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *outputPointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "initialize_and_check_memory_080056d4",
                "param_1": "outputPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080054b4"
            ],
            "called": [
                "FUN_080040d6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "update_return_value_080056f8",
            "code": "\nvoid updateReturnValue_080056f8(int *result,undefined4 input)\n\n{\n  int successCode;\n  \n  DAT_20000674 = 0;\n  successCode = check_success_080040e0(input);\n  if ((successCode == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "update_return_value_080056f8",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "successCode"
            },
            "calling": [
                "FUN_080054fc"
            ],
            "called": [
                "FUN_080040e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "initialize_and_check_error_code_08005718",
            "code": "\nvoid initialize_and_check_error_code_08005718(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int error_code;\n  \n  DAT_20000674 = 0;\n  error_code = initialize_080040e4(arg1,arg2,arg3,arg3,arg3);\n  if ((error_code == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "initialize_and_check_error_code_08005718",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "error_code"
            },
            "calling": [
                "FUN_0800562a",
                "FUN_08005662"
            ],
            "called": [
                "FUN_080040e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "initialize_application_0800573c",
            "code": "\nvoid initializeApplication_0800573c(int *output,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_20000674 = 0;\n  result = initialize_application_080040e8(arg1,arg2,arg3,arg3,arg3);\n  if ((result == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "initialize_application_0800573c",
                "param_1": "output",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08005608"
            ],
            "called": [
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "update_and_process_data_08005760",
            "code": "\nvoid update_and_process_data_08005760(void)\n\n{\n  code *next_function;\n  \n  next_function = update_and_process_data_08005760;\n  process_and_update_080051ac();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*next_function)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "update_and_process_data_08005760",
                "UNRECOVERED_JUMPTABLE": "next_function"
            },
            "calling": [
                "FUN_080047c0"
            ],
            "called": [
                "FUN_080051ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "FUN_080001ac",
                "FUN_08004884"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 120246,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_0800066c",
            "FUN_08000728",
            "FUN_080008cc",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_080025e0",
            "FUN_08002848",
            "FUN_080028d4",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_080033c8",
            "FUN_080034da",
            "FUN_08003506",
            "FUN_0800352e",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_0800387c",
            "FUN_08003f00",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004240",
            "FUN_08004364",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_08004544",
            "FUN_08004640",
            "FUN_08004678",
            "FUN_08004844",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004cb0",
            "thunk_FUN_0800410c"
        ],
        [
            "FUN_080002d0",
            "FUN_080005e4",
            "FUN_08000682",
            "FUN_080007f0",
            "FUN_08000d98",
            "FUN_08000f56",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_08002864",
            "FUN_080028f0",
            "FUN_08002d0c",
            "FUN_0800340c",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034f4",
            "FUN_0800351e",
            "FUN_0800354a",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003eac",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004560",
            "FUN_080047fe",
            "FUN_08004d9c",
            "FUN_0800500c",
            "FUN_0800532c",
            "FUN_080055d0",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000690",
            "FUN_08000de4",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_08001ab0",
            "FUN_080023b4",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_080029c8",
            "FUN_08002dd0",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_080042e8",
            "FUN_0800447c",
            "FUN_080046b4",
            "FUN_08004978",
            "FUN_080051ac",
            "FUN_080054b4",
            "FUN_08005608",
            "FUN_08005662"
        ],
        [
            "FUN_080006b4",
            "FUN_0800076c",
            "FUN_08001bfc",
            "FUN_08001e68",
            "FUN_08002488",
            "FUN_08002d72",
            "FUN_08002ffc",
            "FUN_080033d8",
            "FUN_08003414",
            "FUN_0800377c",
            "FUN_080042ac",
            "FUN_080044d8",
            "FUN_08005374",
            "FUN_080054fc"
        ],
        [
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000c8c",
            "FUN_08001d00",
            "FUN_08004110"
        ],
        [
            "FUN_08000b54",
            "FUN_080034ce"
        ],
        [
            "FUN_08000c64",
            "FUN_08000d8e"
        ],
        [
            "FUN_08004648"
        ],
        [
            "FUN_08005760"
        ],
        [
            "FUN_080047c0"
        ],
        [
            "FUN_080047d0"
        ],
        [
            "FUN_080011a4"
        ],
        [
            "FUN_080050d0",
            "FUN_080052cc",
            "FUN_08005400"
        ],
        [
            "FUN_080053a0"
        ],
        [
            "FUN_08004a34"
        ],
        [
            "FUN_08004a60"
        ],
        [
            "FUN_08004a84"
        ],
        [
            "FUN_08004860",
            "FUN_08004fdc"
        ],
        [
            "FUN_08003978",
            "FUN_08004808"
        ],
        [
            "FUN_08003cc8",
            "FUN_08004388"
        ],
        [
            "FUN_08000600",
            "FUN_08003d18"
        ],
        [
            "FUN_08000c4c",
            "FUN_080040ec"
        ],
        [
            "FUN_08004658",
            "FUN_0800562a"
        ]
    ],
    "locked_functions": []
}