{
    "functions": {
        "FUN_080001ac": {
            "entrypoint": "0x080001ac",
            "current_name": "initialize_flag_080001ac",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b8) */\n\nundefined4 initializeFlag_080001ac(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000104 == '\\0') {\n    DAT_20000104._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_080001ac": "initialize_flag_080001ac",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000230": {
            "entrypoint": "0x08000230",
            "current_name": "find_byte_sequence_08000230",
            "code": "\nbyte * find_byte_sequence_08000230(uint *input_array,uint target_byte,uint array_length)\n\n{\n  byte current_byte;\n  char mask_0;\n  char mask_8;\n  char mask_16;\n  char mask_24;\n  byte *next_byte_ptr;\n  uint *current_uint_ptr;\n  byte *result;\n  uint shift_amount;\n  uint remaining_length;\n  uint xor_result_1;\n  uint xor_result_2;\n  bool not_zero_1;\n  bool not_zero_2;\n  bool not_zero_3;\n  bool not_zero_4;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)array_length < 0x10) {\njoined_r0x08000290:\n    do {\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n      current_uint_ptr = (uint *)((int)input_array + 1);\n      current_byte = *(byte *)input_array;\n      array_length = array_length - 1;\n      input_array = current_uint_ptr;\n    } while (current_byte != target_byte);\n  }\n  else {\n    shift_amount = (uint)input_array & 7;\n    while( true ) {\n      if (shift_amount == 0) {\n        shift_amount = target_byte | target_byte << 8;\n        shift_amount = shift_amount | shift_amount << 0x10;\n        remaining_length = array_length & 0xfffffff8;\n        do {\n          current_uint_ptr = input_array + 2;\n          remaining_length = remaining_length - 8;\n          xor_result_1 = *input_array ^ shift_amount;\n          xor_result_2 = input_array[1] ^ shift_amount;\n          mask_0 = -((char)xor_result_1 == '\\0');\n          mask_8 = -((char)(xor_result_1 >> 8) == '\\0');\n          mask_16 = -((char)(xor_result_1 >> 0x10) == '\\0');\n          mask_24 = -((char)(xor_result_1 >> 0x18) == '\\0');\n          xor_result_1 = CONCAT13(mask_24,CONCAT12(mask_16,CONCAT11(mask_8,mask_0)));\n          not_zero_1 = (char)xor_result_2 != '\\0';\n          not_zero_2 = (char)(xor_result_2 >> 8) != '\\0';\n          not_zero_3 = (char)(xor_result_2 >> 0x10) != '\\0';\n          not_zero_4 = (char)(xor_result_2 >> 0x18) != '\\0';\n          xor_result_2 = CONCAT13(not_zero_4 * mask_24 - !not_zero_4,\n                            CONCAT12(not_zero_3 * mask_16 - !not_zero_3,\n                                     CONCAT11(not_zero_2 * mask_8 - !not_zero_2,not_zero_1 * mask_0 - !not_zero_1)));\n          if (xor_result_2 != 0) {\n            if (xor_result_1 == 0) {\n              result = (byte *)((int)input_array + 5);\n              xor_result_1 = xor_result_2;\n            }\n            else {\n              result = (byte *)((int)input_array + 1);\n            }\n            if ((xor_result_1 & 1) == 0) {\n              not_zero_1 = (xor_result_1 & 0x100) == 0;\n              next_byte_ptr = result + 1;\n              if (not_zero_1) {\n                not_zero_1 = (xor_result_1 & 0x18000) == 0;\n                next_byte_ptr = result + 2;\n              }\n              result = next_byte_ptr;\n              if (not_zero_1) {\n                result = result + 1;\n              }\n            }\n            return result + -1;\n          }\n          input_array = current_uint_ptr;\n        } while (remaining_length != 0);\n        array_length = array_length & 7;\n        goto joined_r0x08000290;\n      }\n      current_uint_ptr = (uint *)((int)input_array + 1);\n      array_length = array_length - 1;\n      if (*(byte *)input_array == target_byte) break;\n      shift_amount = (uint)current_uint_ptr & 7;\n      input_array = current_uint_ptr;\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_uint_ptr + -1);\n}\n\n",
            "renaming": {
                "FUN_08000230": "find_byte_sequence_08000230",
                "param_1": "input_array",
                "param_2": "target_byte",
                "param_3": "array_length",
                "bVar1": "current_byte",
                "cVar2": "mask_0",
                "cVar3": "mask_8",
                "cVar4": "mask_16",
                "cVar5": "mask_24",
                "pbVar6": "next_byte_ptr",
                "puVar7": "current_uint_ptr",
                "pbVar8": "result",
                "uVar9": "shift_amount",
                "uVar10": "remaining_length",
                "uVar11": "xor_result_1",
                "uVar12": "xor_result_2",
                "bVar13": "not_zero_1",
                "bVar14": "not_zero_2",
                "bVar15": "not_zero_3",
                "bVar16": "not_zero_4"
            },
            "calling": [
                "_printf_i",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080002d0": {
            "entrypoint": "0x080002d0",
            "current_name": "divmod_function_080002d0",
            "code": "\nundefined8 divmod_function_080002d0(int dividend,int divisor,int quotient,int remainder)\n\n{\n  undefined8 result;\n  \n  if ((remainder == 0) && (quotient == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      divisor = -1;\n      dividend = -1;\n    }\n    return CONCAT44(divisor,dividend);\n  }\n  result = __udivmoddi4();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080002d0": "divmod_function_080002d0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar1": "result"
            },
            "calling": [
                "HAL_RCC_GetSysClockFreq"
            ],
            "called": [
                "__udivmoddi4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000300": {
            "entrypoint": "0x08000300",
            "current_name": "divide_with_remainder_08000300",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080005aa) */\n\nulonglong divide_with_remainder_08000300(uint dividend,uint dividend_lower,uint divisor,uint compare,uint *remainder_ptr)\n\n{\n  ulonglong quotient_higher;\n  uint quotient_lower;\n  uint temp_quotient;\n  uint temp_quotient_lower;\n  uint temp_remainder;\n  uint num_of_bits;\n  uint dividend_upper;\n  uint divisor_upper;\n  uint temp_divisor;\n  int shift_amount;\n  bool carry_flag;\n  \n  if (compare == 0) {\n    if (dividend_lower < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        divisor = divisor << shift_amount;\n        dividend_lower = dividend >> (0x20U - shift_amount & 0xff) | dividend_lower << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      divisor_upper = divisor >> 0x10;\n      num_of_bits = dividend_lower / divisor_upper;\n      temp_remainder = dividend >> 0x10 | (dividend_lower - divisor_upper * num_of_bits) * 0x10000;\n      temp_quotient_lower = num_of_bits * (divisor & 0xffff);\n      temp_quotient = num_of_bits;\n      if (temp_remainder <= temp_quotient_lower && temp_quotient_lower - temp_remainder != 0) {\n        carry_flag = CARRY4(temp_remainder,divisor);\n        temp_remainder = temp_remainder + divisor;\n        temp_quotient = num_of_bits - 1;\n        if ((carry_flag == false) && (temp_remainder <= temp_quotient_lower && temp_quotient_lower - temp_remainder != 0)) {\n          temp_quotient = num_of_bits - 2;\n          temp_remainder = temp_remainder + divisor;\n        }\n      }\n      num_of_bits = (temp_remainder - temp_quotient_lower) / divisor_upper;\n      temp_remainder = dividend & 0xffff | ((temp_remainder - temp_quotient_lower) - divisor_upper * num_of_bits) * 0x10000;\n      divisor_upper = num_of_bits * (divisor & 0xffff);\n      temp_quotient_lower = num_of_bits;\n      if (temp_remainder <= divisor_upper && divisor_upper - temp_remainder != 0) {\n        carry_flag = CARRY4(temp_remainder,divisor);\n        temp_remainder = temp_remainder + divisor;\n        temp_quotient_lower = num_of_bits - 1;\n        if ((carry_flag == false) && (temp_remainder <= divisor_upper && divisor_upper - temp_remainder != 0)) {\n          temp_quotient_lower = num_of_bits - 2;\n          temp_remainder = temp_remainder + divisor;\n        }\n      }\n      temp_remainder = temp_remainder - divisor_upper;\n      temp_quotient_lower = temp_quotient_lower | temp_quotient << 0x10;\n      temp_quotient = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_lower = dividend_lower - divisor;\n        temp_remainder = divisor >> 0x10;\n        temp_divisor = divisor & 0xffff;\n        temp_quotient = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        temp_remainder = divisor >> 0x10;\n        temp_quotient_lower = dividend_lower >> (0x20U - shift_amount & 0xff);\n        dividend_upper = dividend >> (0x20U - shift_amount & 0xff) | dividend_lower << shift_amount;\n        temp_quotient = temp_quotient_lower / temp_remainder;\n        temp_divisor = divisor & 0xffff;\n        divisor_upper = dividend_upper >> 0x10 | (temp_quotient_lower - temp_remainder * temp_quotient) * 0x10000;\n        num_of_bits = temp_quotient * temp_divisor;\n        dividend = dividend << shift_amount;\n        temp_quotient_lower = temp_quotient;\n        if (divisor_upper <= num_of_bits && num_of_bits - divisor_upper != 0) {\n          carry_flag = CARRY4(divisor_upper,divisor);\n          divisor_upper = divisor_upper + divisor;\n          temp_quotient_lower = temp_quotient - 1;\n          if ((carry_flag == false) && (divisor_upper <= num_of_bits && num_of_bits - divisor_upper != 0)) {\n            temp_quotient_lower = temp_quotient - 2;\n            divisor_upper = divisor_upper + divisor;\n          }\n        }\n        quotient_lower = (divisor_upper - num_of_bits) / temp_remainder;\n        dividend_lower = dividend_upper & 0xffff | ((divisor_upper - num_of_bits) - temp_remainder * quotient_lower) * 0x10000;\n        num_of_bits = quotient_lower * temp_divisor;\n        temp_quotient = quotient_lower;\n        if (dividend_lower <= num_of_bits && num_of_bits - dividend_lower != 0) {\n          carry_flag = CARRY4(dividend_lower,divisor);\n          dividend_lower = dividend_lower + divisor;\n          temp_quotient = quotient_lower - 1;\n          if ((carry_flag == false) && (dividend_lower <= num_of_bits && num_of_bits - dividend_lower != 0)) {\n            temp_quotient = quotient_lower - 2;\n            dividend_lower = dividend_lower + divisor;\n          }\n        }\n        dividend_lower = dividend_lower - num_of_bits;\n        temp_quotient = temp_quotient | temp_quotient_lower << 0x10;\n      }\n      dividend_upper = dividend_lower / temp_remainder;\n      divisor_upper = dividend >> 0x10 | (dividend_lower - temp_remainder * dividend_upper) * 0x10000;\n      temp_quotient_lower = temp_divisor * dividend_upper;\n      num_of_bits = dividend_upper;\n      if (divisor_upper <= temp_quotient_lower && temp_quotient_lower - divisor_upper != 0) {\n        carry_flag = CARRY4(divisor_upper,divisor);\n        divisor_upper = divisor_upper + divisor;\n        num_of_bits = dividend_upper - 1;\n        if ((carry_flag == false) && (divisor_upper <= temp_quotient_lower && temp_quotient_lower - divisor_upper != 0)) {\n          num_of_bits = dividend_upper - 2;\n          divisor_upper = divisor_upper + divisor;\n        }\n      }\n      dividend_upper = (divisor_upper - temp_quotient_lower) / temp_remainder;\n      temp_remainder = dividend & 0xffff | ((divisor_upper - temp_quotient_lower) - temp_remainder * dividend_upper) * 0x10000;\n      temp_divisor = temp_divisor * dividend_upper;\n      temp_quotient_lower = dividend_upper;\n      if (temp_remainder <= temp_divisor && temp_divisor - temp_remainder != 0) {\n        carry_flag = CARRY4(temp_remainder,divisor);\n        temp_remainder = temp_remainder + divisor;\n        temp_quotient_lower = dividend_upper - 1;\n        if ((carry_flag == false) && (temp_remainder <= temp_divisor && temp_divisor - temp_remainder != 0)) {\n          temp_quotient_lower = dividend_upper - 2;\n          temp_remainder = temp_remainder + divisor;\n        }\n      }\n      temp_remainder = temp_remainder - temp_divisor;\n      temp_quotient_lower = temp_quotient_lower | num_of_bits << 0x10;\n    }\n    if (remainder_ptr != (uint *)0x0) {\n      *remainder_ptr = temp_remainder >> shift_amount;\n      remainder_ptr[1] = 0;\n      return CONCAT44(temp_quotient,temp_quotient_lower);\n    }\n  }\n  else if (dividend_lower < compare) {\n    if (remainder_ptr != (uint *)0x0) {\n      *remainder_ptr = dividend;\n      remainder_ptr[1] = dividend_lower;\n      return 0;\n    }\n    temp_quotient_lower = 0;\n    temp_quotient = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(compare);\n    if (shift_amount != 0) {\n      divisor_upper = 0x20 - shift_amount;\n      temp_quotient = divisor >> (divisor_upper & 0xff) | compare << shift_amount;\n      temp_divisor = temp_quotient >> 0x10;\n      temp_quotient_lower = dividend_lower >> (divisor_upper & 0xff);\n      quotient_lower = dividend >> (divisor_upper & 0xff) | dividend_lower << shift_amount;\n      dividend_upper = temp_quotient_lower / temp_divisor;\n      num_of_bits = quotient_lower >> 0x10 | (temp_quotient_lower - temp_divisor * dividend_upper) * 0x10000;\n      temp_remainder = dividend_upper * (temp_quotient & 0xffff);\n      dividend = dividend << shift_amount;\n      temp_quotient_lower = dividend_upper;\n      if (num_of_bits <= temp_remainder && temp_remainder - num_of_bits != 0) {\n        carry_flag = CARRY4(num_of_bits,temp_quotient);\n        num_of_bits = num_of_bits + temp_quotient;\n        temp_quotient_lower = dividend_upper - 1;\n        if ((carry_flag == false) && (num_of_bits <= temp_remainder && temp_remainder - num_of_bits != 0)) {\n          temp_quotient_lower = dividend_upper - 2;\n          num_of_bits = num_of_bits + temp_quotient;\n        }\n      }\n      dividend_upper = (num_of_bits - temp_remainder) / temp_divisor;\n      num_of_bits = quotient_lower & 0xffff | ((num_of_bits - temp_remainder) - temp_divisor * dividend_upper) * 0x10000;\n      temp_divisor = dividend_upper * (temp_quotient & 0xffff);\n      temp_remainder = dividend_upper;\n      if (num_of_bits <= temp_divisor && temp_divisor - num_of_bits != 0) {\n        carry_flag = CARRY4(num_of_bits,temp_quotient);\n        num_of_bits = num_of_bits + temp_quotient;\n        temp_remainder = dividend_upper - 1;\n        if ((carry_flag == false) && (num_of_bits <= temp_divisor && temp_divisor - num_of_bits != 0)) {\n          temp_remainder = dividend_upper - 2;\n          num_of_bits = num_of_bits + temp_quotient;\n        }\n      }\n      temp_remainder = temp_remainder | temp_quotient_lower << 0x10;\n      quotient_higher = (ulonglong)temp_remainder * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(num_of_bits - temp_divisor,dividend) < quotient_higher) {\n        quotient_higher = quotient_higher - CONCAT44(temp_quotient,divisor << shift_amount);\n        temp_remainder = temp_remainder - 1;\n      }\n      if (remainder_ptr != (uint *)0x0) {\n        temp_quotient_lower = ((num_of_bits - temp_divisor) - (int)(quotient_higher >> 0x20)) - (uint)(dividend < (uint)quotient_higher);\n        *remainder_ptr = temp_quotient_lower << (divisor_upper & 0xff) | dividend - (uint)quotient_higher >> shift_amount;\n        remainder_ptr[1] = temp_quotient_lower >> shift_amount;\n      }\n      return (ulonglong)temp_remainder;\n    }\n    if ((compare < dividend_lower) || (divisor <= dividend)) {\n      carry_flag = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_lower = (dividend_lower - compare) - (uint)carry_flag;\n      temp_quotient_lower = 1;\n    }\n    else {\n      temp_quotient_lower = 0;\n    }\n    temp_quotient = 0;\n    if (remainder_ptr != (uint *)0x0) {\n      *remainder_ptr = dividend;\n      remainder_ptr[1] = dividend_lower;\n      return (ulonglong)temp_quotient_lower;\n    }\n  }\n  return CONCAT44(temp_quotient,temp_quotient_lower);\n}\n\n",
            "renaming": {
                "FUN_08000300": "divide_with_remainder_08000300",
                "param_1": "dividend",
                "param_2": "dividend_lower",
                "param_3": "divisor",
                "param_4": "compare",
                "param_5": "remainder_ptr",
                "uVar1": "quotient_higher",
                "uVar2": "quotient_lower",
                "uVar3": "temp_quotient",
                "uVar4": "temp_quotient_lower",
                "uVar5": "temp_remainder",
                "uVar6": "num_of_bits",
                "uVar7": "dividend_upper",
                "uVar8": "divisor_upper",
                "uVar9": "temp_divisor",
                "iVar10": "shift_amount",
                "bVar11": "carry_flag"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e0": {
            "entrypoint": "0x080005e0",
            "current_name": "execute_software_interrupt_080005e0",
            "code": "\nvoid executeSoftwareInterrupt_080005e0(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080005e0": "execute_software_interrupt_080005e0"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080005e4": {
            "entrypoint": "0x080005e4",
            "current_name": "execute_afl_call_080005e4",
            "code": "\nundefined4 executeAflCall_080005e4(undefined4 inputParam,undefined4 unusedParam,undefined4 unusedParam2,undefined4 outputParam)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000120 != 0) {\n    return 0;\n  }\n  result = aflCall(1,inputParam,0,0,outputParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080005e4": "execute_afl_call_080005e4",
                "param_1": "inputParam",
                "param_2": "unusedParam",
                "param_3": "unusedParam2",
                "param_4": "outputParam",
                "uVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000600": {
            "entrypoint": "0x08000600",
            "current_name": "initialize_device_08000600",
            "code": "\nvoid initializeDevice_08000600(int **deviceConfiguration,undefined4 configValue)\n\n{\n  char configurationValue;\n  int result;\n  \n  configurationValue = *(char *)((int)deviceConfiguration + 5);\n  if (configurationValue == '\\x02') {\n    *deviceConfiguration = &DAT_20000338;\n  }\n  else if (configurationValue == '\\x03') {\n    *deviceConfiguration = &DAT_20000338;\n  }\n  else if (configurationValue == '\\x01') {\n    *deviceConfiguration = &DAT_20000338;\n  }\n  else {\n    *deviceConfiguration = &DAT_20000338;\n  }\n  startDevice(*deviceConfiguration,configValue,6);\n  if (1 < *(byte *)((int)deviceConfiguration + 6)) {\n    setPinMode(*(byte *)((int)deviceConfiguration + 6),1);\n    setDigitalOutput(*(undefined *)((int)deviceConfiguration + 6),0);\n  }\n  do {\n    result = (**(code **)(**deviceConfiguration + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)deviceConfiguration + 0x49) = 0;\n  *(undefined *)((int)deviceConfiguration + 0x4a) = 0;\n  *(undefined2 *)(deviceConfiguration + 0x15) = 0;\n  *(undefined2 *)((int)deviceConfiguration + 0x52) = 0;\n  *(undefined2 *)(deviceConfiguration + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000600": "initialize_device_08000600",
                "param_1": "deviceConfiguration",
                "param_2": "configValue",
                "cVar1": "configurationValue",
                "iVar2": "result",
                "begin": "startDevice",
                "pinMode": "setPinMode",
                "digitalWrite": "setDigitalOutput"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "digitalWrite",
                "pinMode",
                "begin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800066c": {
            "entrypoint": "0x0800066c",
            "current_name": "initialize_data_0800066c",
            "code": "\nvoid initializeData_0800066c(int dataPointer,undefined value,int limit,undefined data)\n\n{\n  *(undefined *)(dataPointer + 4) = value;\n  if (3 < limit) {\n    limit = 0;\n  }\n  *(char *)(dataPointer + 5) = (char)limit;\n  *(undefined *)(dataPointer + 6) = data;\n  *(undefined2 *)(dataPointer + 0x56) = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800066c": "initialize_data_0800066c",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "limit",
                "param_4": "data"
            },
            "calling": [
                "Modbus"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000682": {
            "entrypoint": "0x08000682",
            "current_name": "initialize_and_return_08000682",
            "code": "\nundefined4 initialize_and_return_08000682(undefined4 input_param)\n\n{\n  initialize_data();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000682": "initialize_and_return_08000682",
                "param_1": "input_param",
                "initialize_data_0800066c": "initialize_data"
            },
            "calling": [
                "FUN_08000690"
            ],
            "called": [
                "FUN_0800066c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000690": {
            "entrypoint": "0x08000690",
            "current_name": "process_modbus_data_08000690",
            "code": "\nvoid process_modbus_data_08000690(int mode,int flag,undefined4 arg1,undefined4 arg2)\n\n{\n  if (mode != 1) {\n    return;\n  }\n  if (flag == 0xffff) {\n    Modbus(&DAT_20000124,1,0,0,arg2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000690": "process_modbus_data_08000690",
                "param_1": "mode",
                "param_2": "flag",
                "param_3": "arg1",
                "param_4": "arg2"
            },
            "calling": [],
            "called": [
                "Modbus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006b4": {
            "entrypoint": "0x080006b4",
            "current_name": "process_data_080006b4",
            "code": "\nint processData_080006b4(int **inputData)\n\n{\n  bool isFull;\n  undefined dataValue;\n  int result;\n  byte index;\n  \n  if (1 < *(byte *)((int)inputData + 6)) {\n    digitalWrite(*(byte *)((int)inputData + 6),0);\n  }\n  *(undefined *)((int)inputData + 0x49) = 0;\n  if (*(byte *)((int)inputData + 5) < 4) {\n    isFull = false;\n    while (result = (**(code **)(**inputData + 8))(), result != 0) {\n      index = *(byte *)((int)inputData + 0x49);\n      dataValue = (**(code **)(**inputData + 0xc))();\n      *(undefined *)((int)inputData + index + 9) = dataValue;\n      index = *(char *)((int)inputData + 0x49) + 1;\n      *(byte *)((int)inputData + 0x49) = index;\n      if (0x3f < index) {\n        isFull = true;\n      }\n    }\n  }\n  else {\n    isFull = false;\n  }\n  *(short *)(inputData + 0x14) = *(short *)(inputData + 0x14) + 1;\n  if (isFull) {\n    *(short *)(inputData + 0x15) = *(short *)(inputData + 0x15) + 1;\n    return -3;\n  }\n  return (int)*(char *)((int)inputData + 0x49);\n}\n\n",
            "renaming": {
                "FUN_080006b4": "process_data_080006b4",
                "param_1": "inputData",
                "bVar1": "isFull",
                "uVar2": "dataValue",
                "iVar3": "result",
                "bVar4": "index"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000728": {
            "entrypoint": "0x08000728",
            "current_name": "calculate_checksum_08000728",
            "code": "\nuint calculateChecksum_08000728(int dataPointer,int dataLength)\n\n{\n  byte bitIndex;\n  uint checksum;\n  uint bit;\n  uint index;\n  \n  checksum = 0xffff;\n  for (index = 0; (int)index < dataLength; index = index + 1 & 0xff) {\n    checksum = checksum ^ *(byte *)(dataPointer + index + 9);\n    for (bitIndex = 1; bitIndex < 9; bitIndex = bitIndex + 1) {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n    }\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_08000728": "calculate_checksum_08000728",
                "param_1": "dataPointer",
                "param_2": "dataLength",
                "bVar1": "bitIndex",
                "uVar2": "checksum",
                "uVar3": "bit",
                "uVar4": "index"
            },
            "calling": [
                "sendTxBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800076c": {
            "entrypoint": "0x0800076c",
            "current_name": "update_checksum_0800076c",
            "code": "\nvoid updateChecksum_0800076c(int **data,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined2 crc;\n  int result;\n  uint index;\n  \n  index = (uint)*(byte *)((int)data + 0x49);\n  crc = calcCRC(data,index,arg2,arg3,arg3);\n  *(char *)((int)data + index + 9) = (char)((ushort)crc >> 8);\n  index = index + 1 & 0xff;\n  *(char *)((int)data + index + 9) = (char)crc;\n  *(char *)((int)data + 0x49) = (char)index + '\\x01';\n  if (1 < *(byte *)((int)data + 6)) {\n    digitalWrite(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    digitalWrite(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result = millis();\n  data[0x17] = (int *)(result + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800076c": "update_checksum_0800076c",
                "param_1": "data",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uVar1": "crc",
                "iVar2": "result",
                "uVar3": "index"
            },
            "calling": [
                "process_FC3",
                "poll",
                "process_FC15",
                "process_FC6",
                "process_FC5",
                "process_FC16",
                "process_FC1"
            ],
            "called": [
                "digitalWrite",
                "calcCRC",
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080007f0": {
            "entrypoint": "0x080007f0",
            "current_name": "check_threshold_080007f0",
            "code": "\nundefined4 checkThreshold_080007f0(int data,undefined4 value,uint param1,undefined4 param2)\n\n{\n  bool found;\n  byte result;\n  char value1;\n  char value2;\n  int result1;\n  uint index;\n  int result2;\n  \n  index = 0;\n  do {\n    if (7 < index) {\n      found = false;\nLAB_0800080a:\n      if (!found) {\n        *(short *)(data + 0x54) = *(short *)(data + 0x54) + 1;\n        return 1;\n      }\n      result2 = *(byte *)(data + 10) - 1;\n      switch(*(byte *)(data + 10)) {\n      case 1:\n      case 2:\n      case 0xf:\n        goto switchD_08000816_caseD_1;\n      case 3:\n      case 4:\n      case 0x10:\n        value1 = makeWord(*(undefined *)(data + 0xb),*(undefined *)(data + 0xc),param1,result2,\n                         param2);\n        value2 = makeWord(*(undefined *)(data + 0xd),*(undefined *)(data + 0xe));\n        if (*(byte *)(data + 0x60) < (byte)(value2 + value1)) {\n          return 2;\n        }\n        return 0;\n      case 5:\n        result2 = makeWord(*(undefined *)(data + 0xb),*(undefined *)(data + 0xc),param1,result2,\n                         param2);\n        if ((uint)*(byte *)(data + 0x60) < (uint)(result2 << 0x14) >> 0x18) {\n          return 2;\n        }\n        return 0;\n      case 6:\n        result = makeWord(*(undefined *)(data + 0xb),*(undefined *)(data + 0xc),param1,result2,\n                         param2);\n        if (*(byte *)(data + 0x60) < result) {\n          return 2;\n        }\n        return 0;\n      default:\n        return 0;\n      }\n    }\n    param1 = (uint)*(byte *)(data + 10);\n    if ((byte)(&DAT_08005a10)[index] == param1) {\n      found = true;\n      goto LAB_0800080a;\n    }\n    index = index + 1 & 0xff;\n  } while( true );\nswitchD_08000816_caseD_1:\n  result2 = makeWord(*(undefined *)(data + 0xb),*(undefined *)(data + 0xc),param1,result2,param2\n                  );\n  result1 = makeWord(*(undefined *)(data + 0xd),*(undefined *)(data + 0xe));\n  if ((uint)*(byte *)(data + 0x60) <\n      (((uint)(result2 << 0xc) >> 0x10) + ((uint)(result1 << 0xc) >> 0x10) & 0xff)) {\n    return 2;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080007f0": "check_threshold_080007f0",
                "param_1": "data",
                "param_2": "value",
                "param_3": "param1",
                "param_4": "param2",
                "bVar1": "found",
                "bVar2": "result",
                "cVar3": "value1",
                "cVar4": "value2",
                "iVar5": "result1",
                "uVar6": "index",
                "iVar7": "result2"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008cc": {
            "entrypoint": "0x080008cc",
            "current_name": "copy_and_modify_data_080008cc",
            "code": "\nvoid copyAndModifyData_080008cc(int dataAddress,undefined newValue)\n\n{\n  *(undefined *)(dataAddress + 9) = *(undefined *)(dataAddress + 4);\n  *(byte *)(dataAddress + 10) = *(byte *)(dataAddress + 10) ^ 0x80;\n  *(undefined *)(dataAddress + 0xb) = newValue;\n  *(undefined *)(dataAddress + 0x49) = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080008cc": "copy_and_modify_data_080008cc",
                "param_1": "dataAddress",
                "param_2": "newValue"
            },
            "calling": [
                "poll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008e2": {
            "entrypoint": "0x080008e2",
            "current_name": "process_binary_data_080008e2",
            "code": "\nint processBinaryData_080008e2(int binaryData,int buffer,undefined4 param3,undefined4 param4)\n\n{\n  int word1;\n  uint word2;\n  uint index;\n  uint bitIndex;\n  char shiftedBits;\n  int computedAddress;\n  \n  word1 = makeWord(*(undefined *)(binaryData + 0xb),*(undefined *)(binaryData + 0xc),param3,param4,\n                   param4);\n  word2 = makeWord(*(undefined *)(binaryData + 0xd),*(undefined *)(binaryData + 0xe));\n  shiftedBits = (char)((word2 << 0x15) >> 0x18);\n  if ((word2 & 7) != 0) {\n    shiftedBits = shiftedBits + '\\x01';\n  }\n  *(char *)(binaryData + 0xb) = shiftedBits;\n  *(undefined *)(binaryData + 0x49) = 3;\n  bitIndex = 0;\n  for (index = 0; (int)index < (int)word2; index = index + 1 & 0xffff) {\n    if (((int)(uint)*(ushort *)(buffer + ((index + word1) * 0x100000 >> 0x18) * 2) >>\n         (index + word1 & 0xf) & 1U) == 0) {\n      computedAddress = (uint)*(byte *)(binaryData + 0x49) + binaryData;\n      *(byte *)(computedAddress + 9) = *(byte *)(computedAddress + 9) & ~(byte)(1 << bitIndex);\n    }\n    else {\n      computedAddress = (uint)*(byte *)(binaryData + 0x49) + binaryData;\n      *(byte *)(computedAddress + 9) = *(byte *)(computedAddress + 9) | (byte)(1 << bitIndex);\n    }\n    bitIndex = bitIndex + 1 & 0xff;\n    if (7 < bitIndex) {\n      *(char *)(binaryData + 0x49) = *(char *)(binaryData + 0x49) + '\\x01';\n      bitIndex = 0;\n    }\n  }\n  if ((word2 & 7) != 0) {\n    *(char *)(binaryData + 0x49) = *(char *)(binaryData + 0x49) + '\\x01';\n  }\n  shiftedBits = *(char *)(binaryData + 0x49);\n  sendTxBuffer(binaryData);\n  return (int)(char)(shiftedBits + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_080008e2": "process_binary_data_080008e2",
                "param_1": "binaryData",
                "param_2": "buffer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "word1",
                "uVar2": "word2",
                "uVar3": "index",
                "uVar4": "bitIndex",
                "cVar5": "shiftedBits",
                "iVar6": "computedAddress"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000998": {
            "entrypoint": "0x08000998",
            "current_name": "process_data_08000998",
            "code": "\nint processData_08000998(int dataPtr,int bufferPtr,undefined4 param1,undefined4 param2)\n\n{\n  byte counter;\n  char tempChar;\n  byte word1;\n  byte word2;\n  uint startIndex;\n  uint index;\n  \n  word1 = makeWord(*(undefined *)(dataPtr + 0xb),*(undefined *)(dataPtr + 0xc),param1,param2,\n                   param2);\n  word2 = makeWord(*(undefined *)(dataPtr + 0xd),*(undefined *)(dataPtr + 0xe));\n  *(byte *)(dataPtr + 0xb) = word2 << 1;\n  *(undefined *)(dataPtr + 0x49) = 3;\n  for (startIndex = (uint)word1; startIndex < (uint)word1 + (uint)word2; startIndex = startIndex + 1 & 0xff) {\n    counter = *(byte *)(dataPtr + 0x49);\n    *(char *)(dataPtr + (uint)counter + 9) = (char)((ushort)*(undefined2 *)(bufferPtr + startIndex * 2) >> 8)\n    ;\n    index = counter + 1 & 0xff;\n    tempChar = (char)index;\n    *(char *)(dataPtr + 0x49) = tempChar;\n    *(undefined *)(dataPtr + index + 9) = *(undefined *)(bufferPtr + startIndex * 2);\n    *(char *)(dataPtr + 0x49) = tempChar + '\\x01';\n  }\n  tempChar = *(char *)(dataPtr + 0x49);\n  transmitData(dataPtr);\n  return (int)(char)(tempChar + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000998": "process_data_08000998",
                "param_1": "dataPtr",
                "param_2": "bufferPtr",
                "param_3": "param1",
                "param_4": "param2",
                "bVar1": "counter",
                "cVar2": "tempChar",
                "bVar3": "word1",
                "bVar4": "word2",
                "uVar5": "startIndex",
                "uVar6": "index",
                "sendTxBuffer": "transmitData"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a00": {
            "entrypoint": "0x08000a00",
            "current_name": "update_tx_buffer_08000a00",
            "code": "\nundefined4 updateTxBuffer_08000a00(int bufferAddress,int txBufferAddress,undefined4 value1,undefined4 value2)\n\n{\n  uint word;\n  uint shiftedIndex;\n  \n  word = makeWord(*(undefined *)(bufferAddress + 0xb),*(undefined *)(bufferAddress + 0xc),value1,value2,\n                   value2);\n  shiftedIndex = (word << 0x14) >> 0x18;\n  if (*(char *)(bufferAddress + 0xd) == -1) {\n    *(ushort *)(txBufferAddress + shiftedIndex * 2) =\n         (ushort)(1 << (word & 0xf)) | *(ushort *)(txBufferAddress + shiftedIndex * 2);\n  }\n  else {\n    *(ushort *)(txBufferAddress + shiftedIndex * 2) =\n         *(ushort *)(txBufferAddress + shiftedIndex * 2) & ~(ushort)(1 << (word & 0xf));\n  }\n  *(undefined *)(bufferAddress + 0x49) = 6;\n  sendTxBuffer(bufferAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a00": "update_tx_buffer_08000a00",
                "param_1": "bufferAddress",
                "param_2": "txBufferAddress",
                "param_3": "value1",
                "param_4": "value2",
                "uVar1": "word",
                "uVar2": "shiftedIndex"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a4e": {
            "entrypoint": "0x08000a4e",
            "current_name": "update_tx_buffer_08000a4e",
            "code": "\nundefined4 updateTxBuffer_08000a4e(int bufferAddress,int txBufferOffset)\n\n{\n  byte word1;\n  undefined2 word2;\n  \n  word1 = makeWord(*(undefined *)(bufferAddress + 0xb),*(undefined *)(bufferAddress + 0xc));\n  word2 = makeWord(*(undefined *)(bufferAddress + 0xd),*(undefined *)(bufferAddress + 0xe));\n  *(undefined2 *)(txBufferOffset + (uint)word1 * 2) = word2;\n  *(undefined *)(bufferAddress + 0x49) = 6;\n  sendTxBuffer(bufferAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a4e": "update_tx_buffer_08000a4e",
                "param_1": "bufferAddress",
                "param_2": "txBufferOffset",
                "bVar1": "word1",
                "uVar2": "word2"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a7a": {
            "entrypoint": "0x08000a7a",
            "current_name": "update_buffer_08000a7a",
            "code": "\nundefined4 updateBuffer_08000a7a(int bufferAddress,int outputAddress,undefined4 param3,undefined4 param4)\n\n{\n  int word1;\n  int word2;\n  uint counter;\n  uint bitCounter;\n  uint bitPosition;\n  uint wordIndex;\n  uint byteIndex;\n  \n  word1 = makeWord(*(undefined *)(bufferAddress + 0xb),*(undefined *)(bufferAddress + 0xc),param3,param4,\n                   param4);\n  word2 = makeWord(*(undefined *)(bufferAddress + 0xd),*(undefined *)(bufferAddress + 0xe));\n  bitCounter = 0;\n  byteIndex = 7;\n  for (counter = 0; (int)counter < word2; counter = counter + 1 & 0xffff) {\n    wordIndex = (counter + word1) * 0x100000 >> 0x18;\n    bitPosition = counter + word1 & 0xf;\n    if (((int)(uint)*(byte *)(bufferAddress + byteIndex + 9) >> bitCounter & 1U) == 0) {\n      *(ushort *)(outputAddress + wordIndex * 2) = *(ushort *)(outputAddress + wordIndex * 2) & ~(ushort)(1 << bitPosition);\n    }\n    else {\n      *(ushort *)(outputAddress + wordIndex * 2) = (ushort)(1 << bitPosition) | *(ushort *)(outputAddress + wordIndex * 2);\n    }\n    bitCounter = bitCounter + 1 & 0xff;\n    if (7 < bitCounter) {\n      byteIndex = byteIndex + 1 & 0xff;\n      bitCounter = 0;\n    }\n  }\n  *(undefined *)(bufferAddress + 0x49) = 6;\n  sendTxBuffer(bufferAddress);\n  return 8;\n}\n\n",
            "renaming": {
                "FUN_08000a7a": "update_buffer_08000a7a",
                "param_1": "bufferAddress",
                "param_2": "outputAddress",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "word1",
                "iVar2": "word2",
                "uVar3": "counter",
                "uVar4": "bitCounter",
                "uVar5": "bitPosition",
                "uVar6": "wordIndex",
                "uVar7": "byteIndex"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b04": {
            "entrypoint": "0x08000b04",
            "current_name": "convert_and_copy_data_08000b04",
            "code": "\nint convertAndCopyData_08000b04(int sourceArray,int destinationArray)\n\n{\n  byte sourceOffset;\n  byte sourceLength;\n  char resultChar;\n  undefined2 convertedValue;\n  uint loopIndex;\n  \n  sourceOffset = *(byte *)(sourceArray + 0xc);\n  sourceLength = *(byte *)(sourceArray + 0xe);\n  *(undefined *)(sourceArray + 0xd) = 0;\n  *(byte *)(sourceArray + 0xe) = sourceLength;\n  *(undefined *)(sourceArray + 0x49) = 6;\n  for (loopIndex = 0; loopIndex < sourceLength; loopIndex = loopIndex + 1 & 0xff) {\n    convertedValue = makeWord(*(undefined *)(loopIndex * 2 + sourceArray + 0x10),\n                     *(undefined *)(sourceArray + (loopIndex + 4) * 2 + 9));\n    *(undefined2 *)(destinationArray + (sourceOffset + loopIndex) * 2) = convertedValue;\n  }\n  resultChar = *(char *)(sourceArray + 0x49);\n  sendTxBuffer(sourceArray);\n  return (int)(char)(resultChar + '\\x02');\n}\n\n",
            "renaming": {
                "FUN_08000b04": "convert_and_copy_data_08000b04",
                "param_1": "sourceArray",
                "param_2": "destinationArray",
                "bVar1": "sourceOffset",
                "bVar2": "sourceLength",
                "cVar3": "resultChar",
                "uVar4": "convertedValue",
                "uVar5": "loopIndex"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b54": {
            "entrypoint": "0x08000b54",
            "current_name": "process_request_08000b54",
            "code": "\nint processRequest_08000b54(int **inputArray,int *outputArray,undefined4 flag)\n\n{\n  byte byteResult;\n  int result;\n  uint tempValue;\n  int returnValue;\n  \n  inputArray[0x13] = outputArray;\n  *(char *)(inputArray + 0x18) = (char)flag;\n  if (*(byte *)((int)inputArray + 5) < 4) {\n    byteResult = (**(code **)(**inputArray + 8))();\n    tempValue = (uint)byteResult;\n  }\n  if (tempValue == 0) {\n    returnValue = 0;\n  }\n  else if ((int)tempValue < 8) {\n    returnValue = 0;\n  }\n  else {\n    returnValue = getRxBuffer(inputArray);\n    *(char *)(inputArray + 2) = (char)returnValue;\n    if (*(char *)((int)inputArray + 9) == *(char *)(inputArray + 1)) {\n      result = validateRequest(inputArray);\n      if (result < 1) {\n        result = millis();\n        inputArray[0x17] = (int *)((uint)*(ushort *)((int)inputArray + 0x56) + result);\n        *(undefined *)(inputArray + 2) = 0;\n        switch(*(undefined *)((int)inputArray + 10)) {\n        case 1:\n        case 2:\n          returnValue = process_FC1(inputArray,outputArray,flag);\n          break;\n        case 3:\n        case 4:\n          returnValue = process_FC3(inputArray,outputArray,flag);\n          break;\n        case 5:\n          returnValue = process_FC5(inputArray,outputArray,flag);\n          break;\n        case 6:\n          returnValue = process_FC6(inputArray,outputArray,flag);\n          break;\n        case 0xf:\n          returnValue = process_FC15(inputArray,outputArray,flag);\n          break;\n        case 0x10:\n          returnValue = process_FC16(inputArray,outputArray,flag);\n        }\n      }\n      else {\n        if (result != 0xff) {\n          buildException(inputArray,result);\n          sendTxBuffer(inputArray);\n        }\n        *(char *)(inputArray + 2) = (char)result;\n        returnValue = (int)(char)result;\n      }\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08000b54": "process_request_08000b54",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "param_3": "flag",
                "bVar1": "byteResult",
                "iVar2": "result",
                "unaff_r5": "tempValue",
                "iVar3": "returnValue"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "buildException",
                "process_FC3",
                "process_FC15",
                "getRxBuffer",
                "process_FC6",
                "validateRequest",
                "process_FC5",
                "process_FC16",
                "millis",
                "process_FC1",
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c4c": {
            "entrypoint": "0x08000c4c",
            "current_name": "initialize_device_08000c4c",
            "code": "\nvoid initialize_device_08000c4c(void)\n\n{\n  startForkserver(0);\n  initialize_device_08000c4c_08000600(&DAT_20000124,0x4b00);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c4c": "initialize_device_08000c4c"
            },
            "calling": [
                "main"
            ],
            "called": [
                "startForkserver",
                "FUN_08000600"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c64": {
            "entrypoint": "0x08000c64",
            "current_name": "poll_data_08000c64",
            "code": "\nvoid poll_data_08000c64(void)\n\n{\n  undefined4 unused_parameter;\n  \n  poll(&DAT_20000124,&DAT_20000004,0x10,unused_parameter,unused_parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c64": "poll_data_08000c64",
                "in_r3": "unused_parameter"
            },
            "calling": [
                "main"
            ],
            "called": [
                "poll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c8c": {
            "entrypoint": "0x08000c8c",
            "current_name": "initialize_system_08000c8c",
            "code": "\n\n\nvoid initializeSystem_08000c8c(void)\n\n{\n  uint uVar1;\n  undefined4 parameter1;\n  undefined4 parameter2;\n  undefined4 parameter3;\n  undefined4 parameter4;\n  undefined4 parameter5;\n  undefined4 parameter6;\n  undefined4 parameter7;\n  undefined4 parameter8;\n  undefined4 parameter9;\n  undefined4 parameter10;\n  undefined4 parameter11;\n  undefined4 parameter12;\n  undefined4 parameter13;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  parameter1 = 1;\n  parameter2 = 0x50000;\n  parameter3 = 2;\n  parameter4 = 0x400000;\n  parameter5 = 8;\n  parameter6 = 0x150;\n  parameter7 = 2;\n  parameter8 = 7;\n  HAL_RCC_OscConfig(&parameter1);\n  HAL_PWREx_EnableOverDrive();\n  parameter9 = 0xf;\n  parameter10 = 2;\n  parameter11 = 0;\n  parameter12 = 0x1400;\n  parameter13 = 0x1000;\n  HAL_RCC_ClockConfig(&parameter9,5);\n  uVar1 = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(uVar1 / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000c8c": "initialize_system_08000c8c",
                "local_54": "parameter1",
                "local_50": "parameter2",
                "local_3c": "parameter3",
                "local_38": "parameter4",
                "local_34": "parameter5",
                "local_30": "parameter6",
                "local_2c": "parameter7",
                "local_28": "parameter8",
                "local_24": "parameter9",
                "local_20": "parameter10",
                "local_1c": "parameter11",
                "local_18": "parameter12",
                "local_14": "parameter13"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "HAL_PWREx_EnableOverDrive",
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_CLKSourceConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d3c": {
            "entrypoint": "0x08000d3c",
            "current_name": "initialize_memory_08000d3c",
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initializeMemory_08000d3c(void)\n\n{\n  int offset;\n  undefined4 *pointer;\n  code *jumptable;\n  \n  for (offset = 0; (undefined4 *)(offset + 0x20000000) < &DAT_20000104; offset = offset + 4) {\n    *(undefined4 *)(offset + 0x20000000) = *(undefined4 *)(offset + 0x8006034);\n  }\n  for (pointer = &DAT_20000104; pointer < &DAT_20000678; pointer = pointer + 1) {\n    *pointer = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumptable = (code *)0x8000d72;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08000d72. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d3c": "initialize_memory_08000d3c",
                "iVar1": "offset",
                "puVar2": "pointer",
                "UNRECOVERED_JUMPTABLE": "jumptable"
            },
            "calling": [],
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d8e": {
            "entrypoint": "0x08000d8e",
            "current_name": "initialize_hw_config_08000d8e",
            "code": "\nvoid initialize_hw_config_08000d8e(void)\n\n{\n  initialize_hardware_configuration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d8e": "initialize_hw_config_08000d8e",
                "hw_config_init": "initialize_hardware_configuration"
            },
            "calling": [
                "premain"
            ],
            "called": [
                "hw_config_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000d96": {
            "entrypoint": "0x08000d96",
            "current_name": "FUNC_08000d96",
            "code": "\nvoid FUNC_08000d96(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000d96": "FUNC_08000d96"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000d98": {
            "entrypoint": "0x08000d98",
            "current_name": "configure_sys_tick_08000d98",
            "code": "\nundefined4 configureSysTick_08000d98(uint priorityLevel)\n\n{\n  int configResult;\n  \n  configResult = HAL_SYSTICK_Config(DAT_2000002c / (1000 / DAT_20000024));\n  if (configResult != 0) {\n    return 1;\n  }\n  if (0xf < priorityLevel) {\n    return 1;\n  }\n  HAL_NVIC_SetPriority(0xffffffff,priorityLevel,0);\n  DAT_20000028 = priorityLevel;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000d98": "configure_sys_tick_08000d98",
                "param_1": "priorityLevel",
                "iVar1": "configResult"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000de4": {
            "entrypoint": "0x08000de4",
            "current_name": "initialize_hardware_08000de4",
            "code": "\n\n\nundefined4 initializeHardware_08000de4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  setPriorityGrouping(3);\n  initializeTick(0xf);\n  initializeHardware_08000de4Specific();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000de4": "initialize_hardware_08000de4",
                "HAL_NVIC_SetPriorityGrouping": "setPriorityGrouping",
                "HAL_InitTick": "initializeTick",
                "HAL_MspInit": "initializeHardwareSpecific"
            },
            "calling": [
                "hw_config_init"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e18": {
            "entrypoint": "0x08000e18",
            "current_name": "addition_operation_08000e18",
            "code": "\nvoid additionOperation_08000e18(void)\n\n{\n  DAT_20000670 = (uint)DAT_20000024 + DAT_20000670;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e18": "addition_operation_08000e18"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e30": {
            "entrypoint": "0x08000e30",
            "current_name": "get_data_value_08000e30",
            "code": "\nundefined4 get_data_value_08000e30(void)\n\n{\n  return DAT_20000670;\n}\n\n",
            "renaming": {
                "FUN_08000e30": "get_data_value_08000e30"
            },
            "calling": [
                "UART_WaitOnFlagUntilTimeout",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_OscConfig",
                "uart_debug_write",
                "HAL_UART_Transmit",
                "HAL_PWREx_EnableOverDrive",
                "GetCurrentMilli"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e3c": {
            "entrypoint": "0x08000e3c",
            "current_name": "update_data_value_08000e3c",
            "code": "\n\n\nvoid updateDataValue_08000e3c(uint inputValue)\n\n{\n  _DAT_e000ed0c = (inputValue & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e3c": "update_data_value_08000e3c",
                "param_1": "inputValue"
            },
            "calling": [
                "premain",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e60": {
            "entrypoint": "0x08000e60",
            "current_name": "update_char_in_memory_08000e60",
            "code": "\n\n\nvoid updateCharInMemory_08000e60(uint address,uint bitmask1,uint bitmask2)\n\n{\n  uint shiftCount;\n  uint remainingShiftCount;\n  \n  shiftCount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingShiftCount = 7 - shiftCount;\n  if (3 < remainingShiftCount) {\n    remainingShiftCount = 4;\n  }\n  if (shiftCount + 4 < 7) {\n    shiftCount = 0;\n  }\n  else {\n    shiftCount = shiftCount - 3;\n  }\n  shiftCount = (bitmask1 & (1 << (remainingShiftCount & 0xff)) - 1U) << (shiftCount & 0xff) |\n          (1 << (shiftCount & 0xff)) - 1U & bitmask2;\n  if ((int)address < 0) {\n    *(char *)((address & 0xf) + 0xe000ed14) = (char)(shiftCount << 4);\n  }\n  else {\n    *(char *)(address + 0xe000e400) = (char)(shiftCount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000e60": "update_char_in_memory_08000e60",
                "param_1": "address",
                "param_2": "bitmask1",
                "param_3": "bitmask2",
                "uVar1": "shiftCount",
                "uVar2": "remainingShiftCount"
            },
            "calling": [
                "uart_attach_rx_callback",
                "HAL_InitTick",
                "uart_attach_tx_callback",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ec4": {
            "entrypoint": "0x08000ec4",
            "current_name": "update_bit_at_index_08000ec4",
            "code": "\nvoid updateBitAtIndex_08000ec4(uint index)\n\n{\n  if (-1 < (int)index) {\n    *(int *)((index >> 5) * 4 + -0x1fff1f00) = 1 << (index & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ec4": "update_bit_at_index_08000ec4",
                "param_1": "index"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ee0": {
            "entrypoint": "0x08000ee0",
            "current_name": "set_parameters_08000ee0",
            "code": "\n\n\nundefined4 set_parameters_08000ee0(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000ee0": "set_parameters_08000ee0",
                "param_1": "value"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f0c": {
            "entrypoint": "0x08000f0c",
            "current_name": "set_bit_in_array_08000f0c",
            "code": "\nvoid setBitInArray_08000f0c(uint arrayIndex)\n\n{\n  if (-1 < (int)arrayIndex) {\n    *(int *)(((arrayIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (arrayIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f0c": "set_bit_in_array_08000f0c",
                "param_1": "arrayIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f2c": {
            "entrypoint": "0x08000f2c",
            "current_name": "update_flag_08000f2c",
            "code": "\n\n\nvoid updateFlag_08000f2c(int flagValue)\n\n{\n  if (flagValue != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f2c": "update_flag_08000f2c",
                "param_1": "flagValue"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4c": {
            "entrypoint": "0x08000f4c",
            "current_name": "FUNC_08000f4c",
            "code": "\nvoid FUNC_08000f4c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4c": "FUNC_08000f4c"
            },
            "calling": [
                "HAL_SYSTICK_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08000f4e": {
            "entrypoint": "0x08000f4e",
            "current_name": "handle_sys_tick_interrupt_08000f4e",
            "code": "\nvoid handleSysTickInterrupt_08000f4e(void)\n\n{\n  handleSysTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000f4e": "handle_sys_tick_interrupt_08000f4e",
                "HAL_SYSTICK_Callback": "handleSysTick"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [
                "HAL_SYSTICK_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f56": {
            "entrypoint": "0x08000f56",
            "current_name": "reset_dac_and_msp_deinit_08000f56",
            "code": "\nundefined4 resetDacAndMspDeinit_08000f56(int dacPointer)\n\n{\n  if (dacPointer != 0) {\n    *(undefined *)(dacPointer + 4) = 2;\n    deinitializeDacMsp();\n    *(undefined4 *)(dacPointer + 0x10) = 0;\n    *(undefined *)(dacPointer + 4) = 0;\n    *(undefined *)(dacPointer + 5) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000f56": "reset_dac_and_msp_deinit_08000f56",
                "param_1": "dacPointer",
                "HAL_DAC_MspDeInit": "deinitializeDacMsp"
            },
            "calling": [
                "dac_stop"
            ],
            "called": [
                "HAL_DAC_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f72": {
            "entrypoint": "0x08000f72",
            "current_name": "clear_bit_and_set_flag_08000f72",
            "code": "\nundefined4 clearBitAndSetFlag_08000f72(uint **input,uint bitPosition)\n\n{\n  **input = **input & ~(1 << (bitPosition & 0xff));\n  *(undefined *)(input + 1) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f72": "clear_bit_and_set_flag_08000f72",
                "param_1": "input",
                "param_2": "bitPosition"
            },
            "calling": [
                "dac_stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f8c": {
            "entrypoint": "0x08000f8c",
            "current_name": "update_param_08000f8c",
            "code": "\nundefined4 updateParam_08000f8c(uint **paramArray)\n\n{\n  if (*(char *)((int)paramArray + 0x35) != '\\x02') {\n    paramArray[21] = (uint *)0x80;\n    return 1;\n  }\n  *(undefined *)((int)paramArray + 0x35) = 5;\n  **paramArray = **paramArray & 0xfffffffe;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000f8c": "update_param_08000f8c",
                "param_1": "paramArray",
                "param_1[0x15]": "paramArray[21]"
            },
            "calling": [
                "I2C_ITError",
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000fb4": {
            "entrypoint": "0x08000fb4",
            "current_name": "update_registers_08000fb4",
            "code": "\n\n\nvoid updateRegisters_08000fb4(uint *registerValues,uint *newRegisterValues)\n\n{\n  uint originalRegisterValue;\n  uint bitMask;\n  uint iteration;\n  uint bitResult;\n  uint typeValue;\n  int index1;\n  uint index2;\n  int index3;\n  \n  for (iteration = 0; iteration < 0x10; iteration = iteration + 1) {\n    bitMask = 1 << (iteration & 0xff);\n    bitResult = bitMask & *newRegisterValues;\n    originalRegisterValue = _DAT_40013c0c;\n    if (bitMask == bitResult) {\n      if ((newRegisterValues[1] == 2) || (newRegisterValues[1] == 0x12)) {\n        index1 = (iteration >> 3) + 8;\n        index3 = (iteration & 7) << 2;\n        registerValues[index1] = registerValues[index1] & ~(0xf << index3) | newRegisterValues[4] << index3;\n      }\n      index2 = iteration << 1;\n      originalRegisterValue = ~(3 << (index2 & 0xff));\n      *registerValues = *registerValues & originalRegisterValue | (newRegisterValues[1] & 3) << (index2 & 0xff);\n      typeValue = newRegisterValues[1];\n      if (((typeValue - 1 < 2) || (typeValue == 0x11)) || (typeValue == 0x12)) {\n        registerValues[2] = registerValues[2] & originalRegisterValue | newRegisterValues[3] << (index2 & 0xff);\n        registerValues[1] = registerValues[1] & ~bitMask | ((newRegisterValues[1] << 0x1b) >> 0x1f) << (iteration & 0xff);\n      }\n      registerValues[3] = originalRegisterValue & registerValues[3] | newRegisterValues[2] << (index2 & 0xff);\n      originalRegisterValue = _DAT_40013c0c;\n      if ((newRegisterValues[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        index3 = (iteration & 3) << 2;\n        if (registerValues == (uint *)0x40020000) {\n          index1 = 0;\n        }\n        else if (registerValues == (uint *)0x40020400) {\n          index1 = 1;\n        }\n        else if (registerValues == (uint *)0x40020800) {\n          index1 = 2;\n        }\n        else if (registerValues == (uint *)0x40020c00) {\n          index1 = 3;\n        }\n        else if (registerValues == (uint *)0x40021000) {\n          index1 = 4;\n        }\n        else if (registerValues == (uint *)0x40021400) {\n          index1 = 5;\n        }\n        else if (registerValues == (uint *)0x40021800) {\n          index1 = 6;\n        }\n        else if (registerValues == (uint *)0x40021c00) {\n          index1 = 7;\n        }\n        else if (registerValues == (uint *)0x40022000) {\n          index1 = 8;\n        }\n        else if (registerValues == (uint *)0x40022400) {\n          index1 = 9;\n        }\n        else {\n          index1 = 10;\n        }\n        *(uint *)(((iteration >> 2) + 2) * 4 + 0x40013800) =\n             *(uint *)(((iteration >> 2) + 2) * 4 + 0x40013800) & ~(0xf << index3) | index1 << index3;\n        originalRegisterValue = ~bitResult;\n        bitMask = _DAT_40013c00 & originalRegisterValue;\n        if ((newRegisterValues[1] & 0x10000) != 0) {\n          bitMask = bitResult | _DAT_40013c00;\n        }\n        typeValue = originalRegisterValue & _DAT_40013c04;\n        if ((newRegisterValues[1] & 0x20000) != 0) {\n          typeValue = bitResult | _DAT_40013c04;\n        }\n        index2 = originalRegisterValue & _DAT_40013c08;\n        if ((newRegisterValues[1] & 0x100000) != 0) {\n          index2 = bitResult | _DAT_40013c08;\n        }\n        _DAT_40013c00 = bitMask;\n        _DAT_40013c04 = typeValue;\n        _DAT_40013c08 = index2;\n        originalRegisterValue = originalRegisterValue & _DAT_40013c0c;\n        if ((newRegisterValues[1] & 0x200000) != 0) {\n          originalRegisterValue = bitResult | _DAT_40013c0c;\n        }\n      }\n    }\n    _DAT_40013c0c = originalRegisterValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000fb4": "update_registers_08000fb4",
                "param_1": "registerValues",
                "param_2": "newRegisterValues",
                "uVar1": "originalRegisterValue",
                "uVar2": "bitMask",
                "uVar3": "iteration",
                "uVar4": "bitResult",
                "uVar5": "typeValue",
                "iVar6": "index1",
                "uVar7": "index2",
                "iVar8": "index3"
            },
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001198": {
            "entrypoint": "0x08001198",
            "current_name": "set_param_value_08001198",
            "code": "\nvoid set_param_value_08001198(int object_address,int new_value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    *(int *)(object_address + 0x18) = new_value << 0x10;\n    return;\n  }\n  *(int *)(object_address + 0x18) = new_value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001198": "set_param_value_08001198",
                "param_1": "object_address",
                "param_2": "new_value",
                "param_3": "is_shifted"
            },
            "calling": [
                "digital_io_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011a4": {
            "entrypoint": "0x080011a4",
            "current_name": "update_if_flag_set_080011a4",
            "code": "\n\n\nvoid update_if_flag_set_080011a4(uint flag)\n\n{\n  if ((_DAT_40013c14 & flag) != 0) {\n    _DAT_40013c14 = flag;\n    handle_external_interrupt();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011a4": "update_if_flag_set_080011a4",
                "param_1": "flag",
                "HAL_GPIO_EXTI_Callback": "handle_external_interrupt"
            },
            "calling": [],
            "called": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011c0": {
            "entrypoint": "0x080011c0",
            "current_name": "set_flag_based_on_conditions_080011c0",
            "code": "\nundefined4 setFlagBasedOnConditions_080011c0(int *parameters)\n\n{\n  if (*(char *)((int)parameters + 0x3e) == '@') {\n    if (flag1 == 0) {\n      *(uint *)(*parameters + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*parameters + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (flag2 == 0x4000) {\n    if (*(char *)((int)parameters + 0x3d) == '!') {\n      *(uint *)(*parameters + 0x10) = value & 0xfe;\n    }\n    else {\n      *(uint *)(*parameters + 0x10) = value & 0xffU | 1;\n    }\n  }\n  else if (flag1 == 0) {\n    *(uint *)(*parameters + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (flag1 == 1) {\n    *(uint *)(*parameters + 0x10) = (uint)(value << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080011c0": "set_flag_based_on_conditions_080011c0",
                "param_1": "parameters",
                "param_1[0x14]": "flag1",
                "param_1[0x11]": "value",
                "param_1[4]": "flag2"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800124a": {
            "entrypoint": "0x0800124a",
            "current_name": "set_byte_value_0800124a",
            "code": "\nundefined4 setByteValue_0800124a(int *paramArray)\n\n{\n  *(uint *)(*paramArray + 0x10) = paramArray[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800124a": "set_byte_value_0800124a",
                "param_1": "paramArray"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001256": {
            "entrypoint": "0x08001256",
            "current_name": "process_flags_08001256",
            "code": "\nundefined4 processFlags_08001256(uint **parameters)\n\n{\n  uint *tempVar1;\n  \n  tempVar1 = parameters[0xb];\n  if ((*(char *)((int)parameters + 0x3d) == '\\\"') &&\n     ((parameters[0x14] != (uint *)0x0 || (*(char *)((int)parameters + 0x3e) != '@')))) {\n    if ((parameters[0x14] == (uint *)0x0) && (parameters[4] == (uint *)0xc000)) {\n      **parameters = **parameters | 0x100;\n      parameters[0x14] = (uint *)((int)parameters[0x14] + 1);\n    }\n    else {\n      if (*(short *)((int)parameters + 0x2a) == 0) {\n        **parameters = **parameters | 0x200;\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 1) {\n        if (tempVar1 == (uint *)0xffff0000) {\n          **parameters = **parameters & 0xfffffbff;\n          tempVar1 = *parameters;\n          if ((tempVar1[1] & 0x800) == 0) {\n            *tempVar1 = *tempVar1 | 0x200;\n          }\n          else {\n            *tempVar1 = *tempVar1 & 0xfffffbff;\n          }\n        }\n        else if (((tempVar1 == (uint *)0x4) || (tempVar1 == (uint *)0x8)) ||\n                (parameters[0xc] == (uint *)0x12)) {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x200;\n        }\n        else if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)parameters + 0x2a) == 2) {\n        if (parameters[0xb] == (uint *)0x2) {\n          **parameters = **parameters | 0x400;\n        }\n        else {\n          **parameters = **parameters & 0xfffffbff;\n          **parameters = **parameters | 0x800;\n        }\n        tempVar1 = *parameters;\n        if ((tempVar1[1] & 0x800) != 0) {\n          tempVar1[1] = tempVar1[1] | 0x1000;\n        }\n      }\n      else {\n        **parameters = **parameters | 0x400;\n        tempVar1 = *parameters;\n        if ((tempVar1[1] & 0x800) != 0) {\n          tempVar1[1] = tempVar1[1] | 0x1000;\n        }\n      }\n      parameters[0x14] = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001256": "process_flags_08001256",
                "param_1": "parameters",
                "puVar1": "tempVar1"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001420": {
            "entrypoint": "0x08001420",
            "current_name": "process_byte_array_08001420",
            "code": "\nundefined4 processByteArray_08001420(int *arrayPointer)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)arrayPointer + 0x2a) != 0) {\n    bytePointer = (byte *)arrayPointer[9];\n    arrayPointer[9] = (int)(bytePointer + 1);\n    *(uint *)(*arrayPointer + 0x10) = (uint)*bytePointer;\n    *(short *)((int)arrayPointer + 0x2a) = *(short *)((int)arrayPointer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001420": "process_byte_array_08001420",
                "param_1": "arrayPointer",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001440": {
            "entrypoint": "0x08001440",
            "current_name": "update_data_08001440",
            "code": "\nundefined4 updateData_08001440(int *data)\n\n{\n  undefined *ptr;\n  \n  if (*(short *)((int)data + 0x2a) != 0) {\n    ptr = (undefined *)data[9];\n    data[9] = (int)(ptr + 1);\n    *ptr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001440": "update_data_08001440",
                "param_1": "data",
                "puVar1": "ptr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "validate_and_initialize_08001460",
            "code": "\nundefined4 validate_and_initialize_08001460(uint **pointer_array,uint *target_pointer,int count,uint *source_pointer)\n\n{\n  undefined4 result;\n  uint *temp_pointer;\n  \n  if (*(char *)((int)pointer_array + 0x3d) == '(') {\n    if (target_pointer == (uint *)0x0) {\n      result = 1;\n    }\n    else if (count == 0) {\n      result = 1;\n    }\n    else if (*(char *)(pointer_array + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(pointer_array + 0xf) = 1;\n      temp_pointer = *pointer_array;\n      if ((*temp_pointer & 1) == 0) {\n        *temp_pointer = *temp_pointer | 1;\n      }\n      **pointer_array = **pointer_array & 0xfffff7ff;\n      *(undefined *)((int)pointer_array + 0x3d) = 0x29;\n      *(undefined *)((int)pointer_array + 0x3e) = 0x20;\n      result = 0;\n      pointer_array[0x10] = (uint *)0x0;\n      pointer_array[9] = target_pointer;\n      *(short *)((int)pointer_array + 0x2a) = (short)count;\n      pointer_array[0xb] = source_pointer;\n      *(undefined2 *)(pointer_array + 10) = *(undefined2 *)((int)pointer_array + 0x2a);\n      *(undefined *)(pointer_array + 0xf) = 0;\n      (*pointer_array)[1] = (*pointer_array)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001460": "validate_and_initialize_08001460",
                "param_1": "pointer_array",
                "param_2": "target_pointer",
                "param_3": "count",
                "param_4": "source_pointer",
                "uVar1": "result",
                "puVar2": "temp_pointer"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ec": {
            "entrypoint": "0x080014ec",
            "current_name": "validate_input_080014ec",
            "code": "\nundefined4 validate_input_080014ec(uint **input_param,uint *buffer_param,int length_param,uint *output_param)\n\n{\n  undefined4 result;\n  uint *first_ptr;\n  \n  if (*(char *)((int)input_param + 0x3d) == '(') {\n    if (buffer_param == (uint *)0x0) {\n      result = 1;\n    }\n    else if (length_param == 0) {\n      result = 1;\n    }\n    else if (*(char *)(input_param + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(input_param + 0xf) = 1;\n      first_ptr = *input_param;\n      if ((*first_ptr & 1) == 0) {\n        *first_ptr = *first_ptr | 1;\n      }\n      **input_param = **input_param & 0xfffff7ff;\n      *(undefined *)((int)input_param + 0x3d) = 0x2a;\n      *(undefined *)((int)input_param + 0x3e) = 0x20;\n      result = 0;\n      input_param[0x10] = (uint *)0x0;\n      input_param[9] = buffer_param;\n      *(short *)((int)input_param + 0x2a) = (short)length_param;\n      input_param[0xb] = output_param;\n      *(undefined2 *)(input_param + 10) = *(undefined2 *)((int)input_param + 0x2a);\n      *(undefined *)(input_param + 0xf) = 0;\n      (*input_param)[1] = (*input_param)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080014ec": "validate_input_080014ec",
                "param_1": "input_param",
                "param_2": "buffer_param",
                "param_3": "length_param",
                "param_4": "output_param",
                "uVar1": "result",
                "puVar2": "first_ptr"
            },
            "calling": [
                "HAL_I2C_AddrCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001578": {
            "entrypoint": "0x08001578",
            "current_name": "initialize_parameters_08001578",
            "code": "\nundefined4 initializeParameters_08001578(uint **paramArray)\n\n{\n  uint *firstElement;\n  \n  if (*(char *)((int)paramArray + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)paramArray + 0x3d) = 0x28;\n  firstElement = *paramArray;\n  if ((*firstElement & 1) == 0) {\n    *firstElement = *firstElement | 1;\n  }\n  **paramArray = **paramArray | 0x400;\n  (*paramArray)[1] = (*paramArray)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001578": "initialize_parameters_08001578",
                "param_1": "paramArray",
                "puVar1": "firstElement"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b6": {
            "entrypoint": "0x080015b6",
            "current_name": "FUNC_080015b6",
            "code": "\nvoid FUNC_080015b6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b6": "FUNC_080015b6"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015b8": {
            "entrypoint": "0x080015b8",
            "current_name": "FUNC_080015b8",
            "code": "\nvoid FUNC_080015b8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015b8": "FUNC_080015b8"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015ba": {
            "entrypoint": "0x080015ba",
            "current_name": "FUNC_080015ba",
            "code": "\nvoid FUNC_080015ba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080015ba": "FUNC_080015ba"
            },
            "calling": [
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_AF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080015bc": {
            "entrypoint": "0x080015bc",
            "current_name": "process_data_080015bc",
            "code": "\nundefined4 processData_080015bc(int *data)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bytePointer = (byte *)data[9];\n    data[9] = (int)(bytePointer + 1);\n    *(uint *)(*data + 0x10) = (uint)*bytePointer;\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x21;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      HAL_I2C_SlaveTxCpltCallback();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080015bc": "process_data_080015bc",
                "param_1": "data",
                "cVar1": "charValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800160c": {
            "entrypoint": "0x0800160c",
            "current_name": "FUNC_0800160c",
            "code": "\nvoid FUNC_0800160c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800160c": "FUNC_0800160c"
            },
            "calling": [
                "I2C_SlaveReceive_RXNE",
                "I2C_Slave_STOPF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800160e": {
            "entrypoint": "0x0800160e",
            "current_name": "handle_i2_c_data_0800160e",
            "code": "\nundefined4 handleI2CData_0800160e(int *data)\n\n{\n  char dataChar;\n  undefined *bufferPtr;\n  \n  dataChar = *(char *)((int)data + 0x3d);\n  if (*(short *)((int)data + 0x2a) != 0) {\n    bufferPtr = (undefined *)data[9];\n    data[9] = (int)(bufferPtr + 1);\n    *bufferPtr = (char)*(undefined4 *)(*data + 0x10);\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    if ((*(short *)((int)data + 0x2a) == 0) && (dataChar == '*')) {\n      *(uint *)(*data + 4) = *(uint *)(*data + 4) & 0xfffffbff;\n      data[0xc] = 0x22;\n      *(undefined *)((int)data + 0x3d) = 0x28;\n      HAL_I2C_SlaveRxCpltCallback();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800160e": "handle_i2_c_data_0800160e",
                "param_1": "data",
                "cVar1": "dataChar",
                "puVar2": "bufferPtr"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800165a": {
            "entrypoint": "0x0800165a",
            "current_name": "i2c_callback_0800165a",
            "code": "\nundefined4 i2c_callback_0800165a(int *i2c_data,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 address;\n  uint status;\n  \n  status = *(uint *)(*i2c_data + 0x18);\n  if ((status & 0x80) == 0) {\n    address = *(undefined2 *)(i2c_data + 3);\n  }\n  else {\n    address = *(undefined2 *)(i2c_data + 6);\n  }\n  HAL_I2C_AddrCallback(i2c_data,(*(uint *)(*i2c_data + 0x18) & 4) == 0,address,status,param_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800165a": "i2c_callback_0800165a",
                "param_1": "i2c_data",
                "uVar1": "address",
                "uVar2": "status"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_AddrCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001684": {
            "entrypoint": "0x08001684",
            "current_name": "handle_i2_c_data_08001684",
            "code": "\nundefined4 handleI2CData_08001684(uint **data)\n\n{\n  if (((data[11] == (uint *)0x4) || (data[11] == (uint *)0x8)) &&\n     (*(char *)((int)data + 0x3d) == '(')) {\n    data[11] = (uint *)0xffff0000;\n    (*data)[1] = (*data)[1] & 0xfffff8ff;\n    (*data)[5] = 0xfffffbff;\n    **data = **data & 0xfffffbff;\n    data[12] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback();\n  }\n  else if (*(char *)((int)data + 0x3d) == '!') {\n    data[11] = (uint *)0xffff0000;\n    data[12] = (uint *)0x21;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    (*data)[1] = (*data)[1] & 0xfffff8ff;\n    (*data)[5] = 0xfffffbff;\n    **data = **data & 0xfffffbff;\n    HAL_I2C_SlaveTxCpltCallback();\n  }\n  else {\n    (*data)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001684": "handle_i2_c_data_08001684",
                "param_1": "data",
                "param_1[0xb]": "data[11]",
                "param_1[0xc]": "data[12]"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler"
            ],
            "called": [
                "HAL_I2C_SlaveTxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001718": {
            "entrypoint": "0x08001718",
            "current_name": "FUNC_08001718",
            "code": "\nvoid FUNC_08001718(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001718": "FUNC_08001718"
            },
            "calling": [
                "I2C_MasterTransmit_BTF",
                "I2C_MasterTransmit_TXE"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800171a": {
            "entrypoint": "0x0800171a",
            "current_name": "handle_i2c_event_0800171a",
            "code": "\nundefined4 handle_i2c_event_0800171a(uint **event_data)\n\n{\n  char event_char;\n  uint *temp_ptr;\n  \n  event_char = *(char *)((int)event_data + 0x3d);\n  temp_ptr = event_data[0xb];\n  if ((*(short *)(event_data + 10) == 0) && (event_char == '!')) {\n    if ((temp_ptr == (uint *)0x4) || ((temp_ptr == (uint *)0x8 || (temp_ptr == (uint *)0xffff0000)))) {\n      (*event_data)[1] = (*event_data)[1] & 0xfffff8ff;\n      **event_data = **event_data | 0x200;\n      event_data[0xc] = (uint *)0x0;\n      *(undefined *)((int)event_data + 0x3d) = 0x20;\n      if (*(char *)((int)event_data + 0x3e) == '@') {\n        *(undefined *)((int)event_data + 0x3e) = 0;\n        handle_mem_tx_complete();\n      }\n      else {\n        *(undefined *)((int)event_data + 0x3e) = 0;\n        handle_master_tx_complete();\n      }\n    }\n    else {\n      (*event_data)[1] = (*event_data)[1] & 0xfffff8ff;\n      event_data[0xc] = (uint *)0x11;\n      *(undefined *)((int)event_data + 0x3e) = 0;\n      *(undefined *)((int)event_data + 0x3d) = 0x20;\n      handle_master_tx_complete();\n    }\n  }\n  else if ((event_char == '!') || ((*(char *)((int)event_data + 0x3e) == '@' && (event_char == '\\\"')))) {\n    if (*(short *)((int)event_data + 0x2a) == 0) {\n      (*event_data)[1] = (*event_data)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)event_data + 0x3e) == '@') {\n      if (event_data[0x14] == (uint *)0x0) {\n        if (event_data[0x13] == (uint *)0x1) {\n          (*event_data)[4] = (uint)event_data[0x12] & 0xff;\n          event_data[0x14] = (uint *)((int)event_data[0x14] + 2);\n        }\n        else {\n          (*event_data)[4] = (uint)((int)event_data[0x12] << 0x10) >> 0x18;\n          event_data[0x14] = (uint *)((int)event_data[0x14] + 1);\n        }\n      }\n      else if (event_data[0x14] == (uint *)0x1) {\n        (*event_data)[4] = (uint)event_data[0x12] & 0xff;\n        event_data[0x14] = (uint *)((int)event_data[0x14] + 1);\n      }\n      else if (event_data[0x14] == (uint *)0x2) {\n        if (*(char *)((int)event_data + 0x3d) == '\\\"') {\n          **event_data = **event_data | 0x100;\n        }\n        else if (*(char *)((int)event_data + 0x3d) == '!') {\n          temp_ptr = event_data[9];\n          event_data[9] = (uint *)((int)temp_ptr + 1);\n          (*event_data)[4] = (uint)*(byte *)temp_ptr;\n          *(short *)((int)event_data + 0x2a) = *(short *)((int)event_data + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      temp_ptr = event_data[9];\n      event_data[9] = (uint *)((int)temp_ptr + 1);\n      (*event_data)[4] = (uint)*(byte *)temp_ptr;\n      *(short *)((int)event_data + 0x2a) = *(short *)((int)event_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800171a": "handle_i2c_event_0800171a",
                "param_1": "event_data",
                "cVar1": "event_char",
                "puVar2": "temp_ptr",
                "HAL_I2C_MemTxCpltCallback": "handle_mem_tx_complete",
                "HAL_I2C_MasterTxCpltCallback": "handle_master_tx_complete"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001864": {
            "entrypoint": "0x08001864",
            "current_name": "process_data_08001864",
            "code": "\nundefined4 processData_08001864(uint **data)\n\n{\n  uint *tempPtr;\n  \n  tempPtr = data[11];\n  if (*(char *)((int)data + 0x3d) == '!') {\n    if (*(short *)((int)data + 0x2a) == 0) {\n      if (((tempPtr == (uint *)0x4) || (tempPtr == (uint *)0x8)) || (tempPtr == (uint *)0xffff0000)) {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        **data = **data | 0x200;\n        data[12] = (uint *)0x0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MemTxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MasterTxCpltCallback();\n        }\n      }\n      else {\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        data[12] = (uint *)0x11;\n        *(undefined *)((int)data + 0x3e) = 0;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        HAL_I2C_MasterTxCpltCallback();\n      }\n    }\n    else {\n      tempPtr = data[9];\n      data[9] = (uint *)((int)tempPtr + 1);\n      (*data)[4] = (uint)*(byte *)tempPtr;\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001864": "process_data_08001864",
                "param_1": "data",
                "puVar1": "tempPtr",
                "param_1[0xb]": "data[11]",
                "param_1[0xc]": "data[12]",
                "param_1[9]": "data[9]"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemTxCpltCallback",
                "HAL_I2C_MasterTxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001902": {
            "entrypoint": "0x08001902",
            "current_name": "FUNC_08001902",
            "code": "\nvoid FUNC_08001902(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001902": "FUNC_08001902"
            },
            "calling": [
                "I2C_MasterReceive_RXNE",
                "I2C_MasterReceive_BTF"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001904": {
            "entrypoint": "0x08001904",
            "current_name": "process_data_08001904",
            "code": "\nundefined4 processData_08001904(uint **data)\n\n{\n  uint *ptr1;\n  \n  if (*(char *)((int)data + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)data + 0x2a) < 4) {\n      if (*(ushort *)((int)data + 0x2a) < 2) {\n        **data = **data & 0xfffffbff;\n        (*data)[1] = (*data)[1] & 0xfffff8ff;\n        ptr1 = data[9];\n        data[9] = (uint *)((int)ptr1 + 1);\n        *(char *)ptr1 = (char)(*data)[4];\n        *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n        *(undefined *)((int)data + 0x3d) = 0x20;\n        data[0xc] = (uint *)0x0;\n        if (*(char *)((int)data + 0x3e) == '@') {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MemRxCpltCallback();\n        }\n        else {\n          *(undefined *)((int)data + 0x3e) = 0;\n          HAL_I2C_MasterRxCpltCallback();\n        }\n      }\n    }\n    else {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n      if (*(short *)((int)data + 0x2a) == 3) {\n        (*data)[1] = (*data)[1] & 0xfffffbff;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001904": "process_data_08001904",
                "param_1": "data",
                "puVar1": "ptr1"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019a0": {
            "entrypoint": "0x080019a0",
            "current_name": "process_data_080019a0",
            "code": "\nundefined4 processData_080019a0(uint **data)\n\n{\n  uint *temp;\n  \n  if (*(short *)((int)data + 0x2a) == 4) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    temp = counterPtr;\n    counterPtr = (uint *)((int)temp + 1);\n    *(char *)temp = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 3) {\n    (*data)[1] = (*data)[1] & 0xfffffbff;\n    **data = **data & 0xfffffbff;\n    temp = counterPtr;\n    counterPtr = (uint *)((int)temp + 1);\n    *(char *)temp = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if ((int)length - 1U < 2) {\n      **data = **data & 0xfffffbff;\n      **data = **data | 0x100;\n    }\n    else {\n      **data = **data | 0x200;\n    }\n    temp = counterPtr;\n    counterPtr = (uint *)((int)temp + 1);\n    *(char *)temp = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    temp = counterPtr;\n    counterPtr = (uint *)((int)temp + 1);\n    *(char *)temp = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    (*data)[1] = (*data)[1] & 0xfffffcff;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_MemRxCpltCallback();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      HAL_I2C_MasterRxCpltCallback();\n    }\n  }\n  else {\n    temp = counterPtr;\n    counterPtr = (uint *)((int)temp + 1);\n    *(char *)temp = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080019a0": "process_data_080019a0",
                "param_1": "data",
                "puVar1": "temp",
                "param_1[9]": "counterPtr",
                "param_1[0xb]": "length"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "HAL_I2C_MemRxCpltCallback",
                "HAL_I2C_MasterRxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001aac": {
            "entrypoint": "0x08001aac",
            "current_name": "FUNC_08001aac",
            "code": "\nvoid FUNC_08001aac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001aac": "FUNC_08001aac"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "handle_i2_c_event_08001ab0",
            "code": "\nvoid handleI2CEvent_08001ab0(uint **eventData)\n\n{\n  int errorCode;\n  uint *writeDataPtr;\n  uint *readDataPtr;\n  \n  if (*(byte *)((int)eventData + 0x3d) - 0x29 < 2) {\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)eventData + 0x3d) != '`') && (((*eventData)[1] & 0x800) == 0)) {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n    }\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n  }\n  **eventData = **eventData & 0xfffff7ff;\n  readDataPtr = *eventData;\n  if ((readDataPtr[1] & 0x800) == 0) {\n    if (*(char *)((int)eventData + 0x3d) == '`') {\n      *(undefined *)((int)eventData + 0x3d) = 0x20;\n      eventData[0x10] = (uint *)0x0;\n      if ((readDataPtr[5] & 0x40) != 0) {\n        writeDataPtr = eventData[9];\n        eventData[9] = (uint *)((int)writeDataPtr + 1);\n        *(char *)writeDataPtr = (char)readDataPtr[4];\n      }\n      **eventData = **eventData & 0xfffffffe;\n      HAL_I2C_AbortCpltCallback(eventData);\n    }\n    else {\n      if ((readDataPtr[5] & 0x40) != 0) {\n        writeDataPtr = eventData[9];\n        eventData[9] = (uint *)((int)writeDataPtr + 1);\n        *(char *)writeDataPtr = (char)readDataPtr[4];\n      }\n      HAL_I2C_ErrorCallback(eventData);\n    }\n  }\n  else {\n    readDataPtr[1] = readDataPtr[1] & 0xfffff7ff;\n    if (*(char *)((int)eventData[0xd] + 0x35) == '\\x01') {\n      eventData[0xe][0x14] = (uint)&LAB_08001f3c_1;\n      errorCode = HAL_DMA_Abort_IT(eventData[0xe]);\n      if (errorCode != 0) {\n        if (((*eventData)[5] & 0x40) != 0) {\n          readDataPtr = eventData[9];\n          eventData[9] = (uint *)((int)readDataPtr + 1);\n          *(char *)readDataPtr = (char)(*eventData)[4];\n        }\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)eventData[0xe][0x14])();\n      }\n    }\n    else {\n      eventData[0xd][0x14] = (uint)&LAB_08001f3c_1;\n      errorCode = HAL_DMA_Abort_IT(eventData[0xd]);\n      if (errorCode != 0) {\n        **eventData = **eventData & 0xfffffffe;\n        *(undefined *)((int)eventData + 0x3d) = 0x20;\n        (*(code *)eventData[0xd][0x14])();\n      }\n    }\n  }\n  if ((*(char *)((int)eventData + 0x3d) == '(') && (((uint)eventData[0x10] & 4) != 0)) {\n    eventData[0xb] = (uint *)0xffff0000;\n    eventData[0xc] = (uint *)0x0;\n    *(undefined *)((int)eventData + 0x3d) = 0x20;\n    *(undefined *)((int)eventData + 0x3e) = 0;\n    HAL_I2C_ListenCpltCallback(eventData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "handle_i2_c_event_08001ab0",
                "param_1": "eventData",
                "iVar1": "errorCode",
                "puVar2": "writeDataPtr",
                "puVar3": "readDataPtr"
            },
            "calling": [
                "HAL_I2C_ER_IRQHandler",
                "I2C_Slave_STOPF"
            ],
            "called": [
                "HAL_I2C_ErrorCallback",
                "HAL_DMA_Abort_IT",
                "HAL_I2C_AbortCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001bfc": {
            "entrypoint": "0x08001bfc",
            "current_name": "process_data_08001bfc",
            "code": "\nundefined4 processData_08001bfc(uint **data)\n\n{\n  char character;\n  uint *ptr1;\n  uint *ptr2;\n  \n  character = *(char *)((int)data + 0x3d);\n  (*data)[1] = (*data)[1] & 0xfffff8ff;\n  **data = **data | 1;\n  **data = **data & 0xfffffbff;\n  ptr1 = *data;\n  if ((ptr1[1] & 0x800) != 0) {\n    if ((*(char *)((int)data + 0x3d) == '\\\"') || (*(char *)((int)data + 0x3d) == '*')) {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xe] + 4);\n    }\n    else {\n      *(short *)((int)data + 0x2a) = (short)*(undefined4 *)(*data[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)data + 0x2a) != 0) {\n    if ((ptr1[5] & 4) != 0) {\n      ptr2 = data[9];\n      data[9] = (uint *)((int)ptr2 + 1);\n      *(char *)ptr2 = (char)ptr1[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    if (((*data)[5] & 0x40) != 0) {\n      ptr1 = data[9];\n      data[9] = (uint *)((int)ptr1 + 1);\n      *(char *)ptr1 = (char)(*data)[4];\n      *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    }\n    data[0x10] = (uint *)((uint)data[0x10] | 4);\n  }\n  if (data[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      data[0xb] = (uint *)0xffff0000;\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      handleListenComplete();\n    }\n    else if ((data[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      data[0xc] = (uint *)0x0;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)((int)data + 0x3e) = 0;\n      handleSlaveReceive();\n    }\n  }\n  else {\n    handleI2CError();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001bfc": "process_data_08001bfc",
                "param_1": "data",
                "cVar1": "character",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "HAL_I2C_ListenCpltCallback": "handleListenComplete",
                "HAL_I2C_SlaveRxCpltCallback": "handleSlaveReceive",
                "I2C_ITError": "handleI2CError"
            },
            "calling": [
                "HAL_I2C_EV_IRQHandler"
            ],
            "called": [
                "I2C_ITError",
                "HAL_I2C_SlaveRxCpltCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001d00": {
            "entrypoint": "0x08001d00",
            "current_name": "handle_i2_c_operation_08001d00",
            "code": "\nvoid handle_I2C_operation_08001d00(int *input_data)\n\n{\n  int address;\n  uint register_value_1;\n  uint register_value_2;\n  uint register_value_3;\n  \n  address = *input_data;\n  register_value_3 = *(uint *)(address + 0x18);\n  register_value_1 = *(uint *)(address + 0x14);\n  register_value_2 = *(uint *)(address + 4);\n  if ((*(char *)((int)input_data + 0x3e) == '\\x10') || (*(char *)((int)input_data + 0x3e) == '@')) {\n    if (((register_value_1 & 0x10001) == 0) || ((register_value_2 & 0x200) == 0)) {\n      if (((register_value_1 & 0x10008) == 0) || ((register_value_2 & 0x200) == 0)) {\n        if (((register_value_1 & 0x10002) != 0) && ((register_value_2 & 0x200) != 0)) {\n          I2C_Master_ADDR(input_data);\n        }\n      }\n      else {\n        I2C_Master_ADD10(input_data);\n      }\n    }\n    else {\n      I2C_Master_SB(input_data);\n    }\n    if ((register_value_3 & 0x100004) == 0) {\n      if ((((register_value_1 & 0x10040) != 0) && ((register_value_2 & 0x400) != 0)) && ((register_value_1 & 0x10004) == 0)) {\n        I2C_MasterReceive_RXNE(input_data);\n        return;\n      }\n      if (((register_value_1 & 0x10004) != 0) && ((register_value_2 & 0x200) != 0)) {\n        I2C_MasterReceive_BTF(input_data);\n        return;\n      }\n    }\n    else {\n      if ((((register_value_1 & 0x10080) != 0) && ((register_value_2 & 0x400) != 0)) && ((register_value_1 & 0x10004) == 0)) {\n        I2C_MasterTransmit_TXE(input_data);\n        return;\n      }\n      if (((register_value_1 & 0x10004) != 0) && ((register_value_2 & 0x200) != 0)) {\n        I2C_MasterTransmit_BTF(input_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((register_value_1 & 0x10002) != 0) && ((register_value_2 & 0x200) != 0)) {\n      I2C_Slave_ADDR();\n      return;\n    }\n    if (((register_value_1 & 0x10010) != 0) && ((register_value_2 & 0x200) != 0)) {\n      I2C_Slave_STOPF(input_data);\n      return;\n    }\n    if ((register_value_3 & 0x100004) == 0) {\n      if ((((register_value_1 & 0x10040) != 0) && ((register_value_2 & 0x400) != 0)) && ((register_value_1 & 0x10004) == 0)) {\n        I2C_SlaveReceive_RXNE(input_data);\n        return;\n      }\n      if (((register_value_1 & 0x10004) != 0) && ((register_value_2 & 0x200) != 0)) {\n        I2C_SlaveReceive_BTF(input_data);\n      }\n    }\n    else {\n      if ((((register_value_1 & 0x10080) != 0) && ((register_value_2 & 0x400) != 0)) && ((register_value_1 & 0x10004) == 0)) {\n        I2C_SlaveTransmit_TXE(input_data);\n        return;\n      }\n      if (((register_value_1 & 0x10004) != 0) && ((register_value_2 & 0x200) != 0)) {\n        I2C_SlaveTransmit_BTF(input_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001d00": "handle_i2_c_operation_08001d00",
                "param_1": "input_data",
                "iVar1": "address",
                "uVar2": "register_value_1",
                "uVar3": "register_value_2",
                "uVar4": "register_value_3"
            },
            "calling": [],
            "called": [
                "I2C_MasterReceive_RXNE",
                "I2C_SlaveReceive_BTF",
                "I2C_Master_SB",
                "I2C_SlaveReceive_RXNE",
                "I2C_SlaveTransmit_TXE",
                "I2C_Slave_ADDR",
                "I2C_MasterTransmit_TXE",
                "I2C_MasterTransmit_BTF",
                "I2C_Master_ADD10",
                "I2C_Slave_STOPF",
                "I2C_Master_ADDR",
                "I2C_SlaveTransmit_BTF",
                "I2C_MasterReceive_BTF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e68": {
            "entrypoint": "0x08001e68",
            "current_name": "update_i2_c_status_08001e68",
            "code": "\nvoid updateI2CStatus_08001e68(uint **param)\n\n{\n  char charVar;\n  uint *ptrParam;\n  uint flag1;\n  uint flag2;\n  \n  ptrParam = *param;\n  flag1 = ptrParam[5];\n  flag2 = ptrParam[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 1);\n    ptrParam[5] = 0xfffffeff;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 2);\n    (*param)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    charVar = *(char *)((int)param + 0x3d);\n    if (((*(char *)((int)param + 0x3e) == ' ') && (*(short *)((int)param + 0x2a) == 0)) &&\n       (((charVar == '!' || (charVar == ')')) || ((charVar == '(' && (param[0xc] == (uint *)0x21)))))) {\n      I2C_Slave_AF(param);\n    }\n    else {\n      param[0x10] = (uint *)((uint)param[0x10] | 4);\n      if (*(char *)((int)param + 0x3e) == '\\x10') {\n        **param = **param | 0x200;\n      }\n      (*param)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    param[0x10] = (uint *)((uint)param[0x10] | 8);\n    (*param)[5] = 0xfffff7ff;\n  }\n  if (param[0x10] != (uint *)0x0) {\n    I2C_ITError(param);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001e68": "update_i2_c_status_08001e68",
                "param_1": "param",
                "cVar1": "charVar",
                "puVar2": "ptrParam",
                "uVar3": "flag1",
                "uVar4": "flag2"
            },
            "calling": [],
            "called": [
                "I2C_ITError",
                "I2C_Slave_AF"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f9c": {
            "entrypoint": "0x08001f9c",
            "current_name": "wait_for_initialization_08001f9c",
            "code": "\n\n\nundefined4 waitForInitialization_08001f9c(void)\n\n{\n  int startTime;\n  int currentTime;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_420e0040 = 1;\n  startTime = getCurrentTime();\n  do {\n    if ((_DAT_40007004 & 0x10000) != 0) {\n      _DAT_420e0044 = 1;\n      startTime = getCurrentTime();\n      do {\n        if ((_DAT_40007004 & 0x20000) != 0) {\n          return 0;\n        }\n        currentTime = getCurrentTime();\n      } while ((uint)(currentTime - startTime) < 0x3e9);\n      return 3;\n    }\n    currentTime = getCurrentTime();\n  } while ((uint)(currentTime - startTime) < 0x3e9);\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001f9c": "wait_for_initialization_08001f9c",
                "iVar1": "startTime",
                "HAL_GetTick": "getCurrentTime",
                "iVar2": "currentTime"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800201c": {
            "entrypoint": "0x0800201c",
            "current_name": "perform_action_0800201c",
            "code": "\n\n\nundefined4 performAction_0800201c(uint *actionParams)\n\n{\n  int startTime;\n  int currentTime;\n  undefined4 result;\n  bool isFlagSet;\n  \n  if (actionParams == (uint *)0x0) {\n    return 1;\n  }\n  if ((*actionParams & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) != 0)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (actionParams[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (actionParams[1] == 0x10000) {\n        _DAT_40023800 = _DAT_40023800 | 0x10000;\n      }\n      else if (actionParams[1] == 0x50000) {\n        _DAT_40023800 = _DAT_40023800 | 0x50000;\n      }\n      else {\n        _DAT_40023800 = _DAT_40023800 & 0xfffaffff;\n      }\n      if (actionParams[1] == 0) {\n        startTime = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startTime = HAL_GetTick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          currentTime = HAL_GetTick();\n          if (100 < (uint)(currentTime - startTime)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*actionParams & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (actionParams[3] != 1)) {\n        return 1;\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | actionParams[4] << 3;\n    }\n    else if (actionParams[3] == 0) {\n      _DAT_42470000 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40023800 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40023800 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = _DAT_40023800 & 0xffffff07 | actionParams[4] << 3;\n    }\n  }\n  if ((*actionParams & 8) != 0) {\n    if (actionParams[5] == 0) {\n      _DAT_42470e80 = 0;\n      startTime = HAL_GetTick();\n      while ((_DAT_40023874 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      startTime = HAL_GetTick();\n      while ((_DAT_40023874 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*actionParams & 4) != 0) {\n    isFlagSet = (_DAT_40023840 & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startTime = HAL_GetTick();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentTime = HAL_GetTick();\n        if (2 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (actionParams[2] == 1) {\n      _DAT_40023870 = _DAT_40023870 | 1;\n    }\n    else if (actionParams[2] == 5) {\n      _DAT_40023870 = _DAT_40023870 | 5;\n    }\n    else {\n      _DAT_40023870 = _DAT_40023870 & 0xfffffffa;\n    }\n    if (actionParams[2] == 0) {\n      startTime = HAL_GetTick();\n      while ((_DAT_40023870 & 2) != 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startTime = HAL_GetTick();\n      while ((_DAT_40023870 & 2) == 0) {\n        currentTime = HAL_GetTick();\n        if (5000 < (uint)(currentTime - startTime)) {\n          return 3;\n        }\n      }\n    }\n    if (isFlagSet) {\n      _DAT_40023840 = _DAT_40023840 & 0xefffffff;\n    }\n  }\n  if (actionParams[6] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40023808 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (actionParams[6] == 2) {\n    _DAT_42470060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        _DAT_40023804 =\n             actionParams[7] | actionParams[8] | actionParams[9] << 6 | ((actionParams[10] >> 1) - 1) * 0x10000 |\n             actionParams[0xb] << 0x18;\n        _DAT_42470060 = 1;\n        startTime = HAL_GetTick();\n        do {\n          if ((_DAT_40023800 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentTime = HAL_GetTick();\n        } while ((uint)(currentTime - startTime) < 3);\n        return 3;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42470060 = 0;\n    startTime = HAL_GetTick();\n    do {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800201c": "perform_action_0800201c",
                "param_1": "actionParams",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "result",
                "bVar4": "isFlagSet"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023b4": {
            "entrypoint": "0x080023b4",
            "current_name": "calculate_clock_speed_080023b4",
            "code": "\n\n\nuint calculateClockSpeed_080023b4(void)\n\n{\n  undefined4 inValue;\n  uint adjustedClockSpeed;\n  \n  if ((_DAT_40023808 & 0xc) == 4) {\n    return 8000000;\n  }\n  if ((_DAT_40023808 & 0xc) != 8) {\n    return 16000000;\n  }\n  if ((_DAT_40023804 & 0x400000) == 0) {\n    adjustedClockSpeed = (_DAT_40023804 << 0x11) >> 0x17;\n    adjustedClockSpeed = __aeabi_uldivmod(adjustedClockSpeed * 16000000,\n                             (((uint)(adjustedClockSpeed * 0x20 < adjustedClockSpeed) * -0x3f -\n                              (uint)(adjustedClockSpeed * 0x7c0 < adjustedClockSpeed * 0x1f)) * 8 +\n                             (uint)CARRY4(adjustedClockSpeed * 0x3d08,adjustedClockSpeed)) * 0x400 | adjustedClockSpeed * 0x3d09 >> 0x16,\n                             _DAT_40023804 & 0x3f,0,inValue);\n  }\n  else {\n    adjustedClockSpeed = (_DAT_40023804 << 0x11) >> 0x17;\n    adjustedClockSpeed = __aeabi_uldivmod(adjustedClockSpeed * 8000000,\n                             (((uint)(adjustedClockSpeed * 0x20 < adjustedClockSpeed) * -0x3f -\n                              (uint)(adjustedClockSpeed * 0x7c0 < adjustedClockSpeed * 0x1f)) * 8 +\n                             (uint)CARRY4(adjustedClockSpeed * 0x3d08,adjustedClockSpeed)) * 0x200,_DAT_40023804 & 0x3f,0,\n                             inValue);\n  }\n  return adjustedClockSpeed / ((((_DAT_40023804 << 0xe) >> 0x1e) + 1) * 2);\n}\n\n",
            "renaming": {
                "FUN_080023b4": "calculate_clock_speed_080023b4",
                "in_r3": "inValue",
                "uVar1": "adjustedClockSpeed"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [
                "__aeabi_uldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002488": {
            "entrypoint": "0x08002488",
            "current_name": "configure_device_08002488",
            "code": "\n\n\nundefined4 configureDevice_08002488(uint *config,uint configSize)\n\n{\n  int startTime;\n  int currentTime;\n  uint systemClockFreq;\n  \n  if (config == (uint *)0x0) {\n    return 1;\n  }\n  if ((_DAT_40023c00 & 0xf) < configSize) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)configSize);\n    if (configSize != (configSize & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config & 2) != 0) {\n    if ((*config & 4) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0x1c00;\n    }\n    if ((*config & 8) != 0) {\n      _DAT_40023808 = _DAT_40023808 | 0xe000;\n    }\n    _DAT_40023808 = _DAT_40023808 & 0xffffff0f | config[2];\n  }\n  if ((*config & 1) != 0) {\n    systemClockFreq = config[1];\n    if (systemClockFreq == 1) {\n      if ((_DAT_40023800 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if (systemClockFreq - 2 < 2) {\n      if ((_DAT_40023800 & 0x2000000) == 0) {\n        return 1;\n      }\n    }\n    else if ((_DAT_40023800 & 2) == 0) {\n      return 1;\n    }\n    _DAT_40023808 = systemClockFreq | _DAT_40023808 & 0xfffffffc;\n    startTime = getCurrentTime();\n    while( true ) {\n      if ((_DAT_40023808 & 0xc) == config[1] * 4) break;\n      currentTime = getCurrentTime();\n      if (5000 < (uint)(currentTime - startTime)) {\n        return 3;\n      }\n    }\n  }\n  if (configSize < (_DAT_40023c00 & 0xf)) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)configSize);\n    if (configSize != (configSize & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config & 4) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffffe3ff | config[3];\n  }\n  if ((*config & 8) != 0) {\n    _DAT_40023808 = _DAT_40023808 & 0xffff1fff | config[4] << 3;\n  }\n  systemClockFreq = getSystemClockFreq();\n  DAT_2000002c = systemClockFreq >> (&DAT_08005dfc)[(_DAT_40023808 << 0x18) >> 0x1c];\n  HAL_InitTick(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002488": "configure_device_08002488",
                "param_1": "config",
                "param_2": "configSize",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "uVar3": "systemClockFreq",
                "HAL_GetTick": "getCurrentTime",
                "HAL_RCC_GetSysClockFreq": "getSystemClockFreq"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e0": {
            "entrypoint": "0x080025e0",
            "current_name": "get_data_value_080025e0",
            "code": "\nundefined4 get_data_value_080025e0(void)\n\n{\n  return DAT_2000002c;\n}\n\n",
            "renaming": {
                "FUN_080025e0": "get_data_value_080025e0"
            },
            "calling": [
                "HAL_RCC_GetPCLK1Freq",
                "SystemClock_Config",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025ec": {
            "entrypoint": "0x080025ec",
            "current_name": "get_adjusted_hclk_freq_080025ec",
            "code": "\n\n\nuint getAdjustedHCLKFreq_080025ec(void)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = getHCLKFreq();\n  return hclkFreq >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x13) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_080025ec": "get_adjusted_hclk_freq_080025ec",
                "uVar1": "hclkFreq",
                "HAL_RCC_GetHCLKFreq": "getHCLKFreq"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800260c": {
            "entrypoint": "0x0800260c",
            "current_name": "get_adjusted_freq_0800260c",
            "code": "\n\n\nuint getAdjustedFreq_0800260c(void)\n\n{\n  uint hCLKFreq;\n  \n  hCLKFreq = HAL_RCC_GetHCLKFreq();\n  return hCLKFreq >> (&DAT_08005e0c)[(uint)(_DAT_40023808 << 0x10) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_0800260c": "get_adjusted_freq_0800260c",
                "uVar1": "hCLKFreq"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [
                "HAL_RCC_GetHCLKFreq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800262c": {
            "entrypoint": "0x0800262c",
            "current_name": "handle_alarm_callbacks_0800262c",
            "code": "\n\n\nvoid handleAlarmCallbacks_0800262c(int *alarmData)\n\n{\n  if (((*(uint *)(*alarmData + 0xc) & 0x100) != 0) && ((*(uint *)(*alarmData + 8) & 0x1000) != 0)) {\n    HAL_RTC_AlarmAEventCallback();\n    *(uint *)(*alarmData + 0xc) = *(uint *)(*alarmData + 0xc) & 0xff | 0xfffffe7f;\n  }\n  if (((*(uint *)(*alarmData + 0xc) & 0x200) != 0) && ((*(uint *)(*alarmData + 8) & 0x2000) != 0)) {\n    HAL_RTCEx_AlarmBEventCallback(alarmData);\n    *(uint *)(*alarmData + 0xc) = *(uint *)(*alarmData + 0xc) & 0xff | 0xfffffd7f;\n  }\n  _DAT_40013c14 = 0x20000;\n  *(undefined *)((int)alarmData + 0x1d) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800262c": "handle_alarm_callbacks_0800262c",
                "param_1": "alarmData"
            },
            "calling": [],
            "called": [
                "HAL_RTC_AlarmAEventCallback",
                "HAL_RTCEx_AlarmBEventCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800268c": {
            "entrypoint": "0x0800268c",
            "current_name": "FUNC_0800268c",
            "code": "\nvoid FUNC_0800268c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268c": "FUNC_0800268c"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800268e": {
            "entrypoint": "0x0800268e",
            "current_name": "deinit_pwm_0800268e",
            "code": "\nvoid deinit_pwm_0800268e(uint **param)\n\n{\n  uint *ptr_param;\n  \n  *(undefined *)((int)param + 0x39) = 2;\n  ptr_param = *param;\n  if ((ptr_param[8] & 0x1111) == 0) {\n    if ((ptr_param[8] & 0x444) == 0) {\n      *ptr_param = *ptr_param & 0xfffffffe;\n    }\n  }\n  deinit_pwm_0800268e_io(param);\n  *(undefined *)((int)param + 0x39) = 0;\n  *(undefined *)(param + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800268e": "deinit_pwm_0800268e",
                "param_1": "param",
                "puVar1": "ptr_param",
                "HAL_TIM_PWM_MspDeInit": "deinit_pwm_io"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080026c8": {
            "entrypoint": "0x080026c8",
            "current_name": "FUNC_080026c8",
            "code": "\nvoid FUNC_080026c8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026c8": "FUNC_080026c8"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ca": {
            "entrypoint": "0x080026ca",
            "current_name": "FUNC_080026ca",
            "code": "\nvoid FUNC_080026ca(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ca": "FUNC_080026ca"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026cc": {
            "entrypoint": "0x080026cc",
            "current_name": "FUNC_080026cc",
            "code": "\nvoid FUNC_080026cc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026cc": "FUNC_080026cc"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080026ce": {
            "entrypoint": "0x080026ce",
            "current_name": "process_callbacks_080026ce",
            "code": "\nvoid processCallbacks_080026ce(int *callbackInfo)\n\n{\n  int data;\n  \n  data = *callbackInfo;\n  if (((*(uint *)(data + 0x10) & 2) != 0) && ((*(uint *)(data + 0xc) & 2) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffffd;\n    *(undefined *)(callbackInfo + 6) = 1;\n    if ((*(uint *)(*callbackInfo + 0x18) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback();\n      HAL_TIM_PWM_PulseFinishedCallback(callbackInfo);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback();\n    }\n    *(undefined *)(callbackInfo + 6) = 0;\n  }\n  data = *callbackInfo;\n  if (((*(uint *)(data + 0x10) & 4) != 0) && ((*(uint *)(data + 0xc) & 4) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffffb;\n    *(undefined *)(callbackInfo + 6) = 2;\n    if ((*(uint *)(*callbackInfo + 0x18) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(callbackInfo);\n      HAL_TIM_PWM_PulseFinishedCallback(callbackInfo);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(callbackInfo);\n    }\n    *(undefined *)(callbackInfo + 6) = 0;\n  }\n  data = *callbackInfo;\n  if (((*(uint *)(data + 0x10) & 8) != 0) && ((*(uint *)(data + 0xc) & 8) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffff7;\n    *(undefined *)(callbackInfo + 6) = 4;\n    if ((*(uint *)(*callbackInfo + 0x1c) & 3) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(callbackInfo);\n      HAL_TIM_PWM_PulseFinishedCallback(callbackInfo);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(callbackInfo);\n    }\n    *(undefined *)(callbackInfo + 6) = 0;\n  }\n  data = *callbackInfo;\n  if (((*(uint *)(data + 0x10) & 0x10) != 0) && ((*(uint *)(data + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffffef;\n    *(undefined *)(callbackInfo + 6) = 8;\n    if ((*(uint *)(*callbackInfo + 0x1c) & 0x300) == 0) {\n      HAL_TIM_OC_DelayElapsedCallback(callbackInfo);\n      HAL_TIM_PWM_PulseFinishedCallback(callbackInfo);\n    }\n    else {\n      HAL_TIM_IC_CaptureCallback(callbackInfo);\n    }\n    *(undefined *)(callbackInfo + 6) = 0;\n  }\n  data = *callbackInfo;\n  if (((*(uint *)(data + 0x10) & 1) != 0) && ((*(uint *)(data + 0xc) & 1) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xfffffffe;\n    HAL_TIM_PeriodElapsedCallback(callbackInfo);\n  }\n  data = *callbackInfo;\n  if (((*(uint *)(data + 0x10) & 0x80) != 0) && ((*(uint *)(data + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffff7f;\n    HAL_TIMEx_BreakCallback(callbackInfo);\n  }\n  data = *callbackInfo;\n  if (((*(uint *)(data + 0x10) & 0x40) != 0) && ((*(uint *)(data + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffffbf;\n    HAL_TIM_TriggerCallback(callbackInfo);\n  }\n  data = *callbackInfo;\n  if (((*(uint *)(data + 0x10) & 0x20) != 0) && ((*(uint *)(data + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(data + 0x10) = 0xffffffdf;\n    HAL_TIMEx_CommutationCallback(callbackInfo);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080026ce": "process_callbacks_080026ce",
                "param_1": "callbackInfo",
                "iVar1": "data"
            },
            "calling": [
                "TIM1_UP_TIM10_IRQHandler"
            ],
            "called": [
                "HAL_TIMEx_CommutationCallback",
                "HAL_TIM_TriggerCallback",
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback",
                "HAL_TIM_PWM_PulseFinishedCallback",
                "HAL_TIM_IC_CaptureCallback",
                "HAL_TIMEx_BreakCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "update_bit_value_08002848",
            "code": "\nvoid updateBitValue_08002848(int baseAddress,uint bitIndex,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitIndex & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002848": "update_bit_value_08002848",
                "param_1": "baseAddress",
                "param_2": "bitIndex",
                "param_3": "bitValue"
            },
            "calling": [
                "HAL_TIM_PWM_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002864": {
            "entrypoint": "0x08002864",
            "current_name": "configure_timer_channel_08002864",
            "code": "\nundefined4 configureTimerChannel_08002864(uint **timerChannelPtr,undefined4 command)\n\n{\n  bool isConfigured;\n  uint *timerPtr;\n  \n  TIM_CCxChannelCmd(*timerChannelPtr,command,0);\n  timerPtr = *timerChannelPtr;\n  if (timerPtr == (uint *)0x40010000) {\n    isConfigured = true;\n  }\n  else if (timerPtr == (uint *)0x40010400) {\n    isConfigured = true;\n  }\n  else {\n    isConfigured = false;\n  }\n  if (((isConfigured) && ((timerPtr[8] & 0x1111) == 0)) && ((timerPtr[8] & 0x444) == 0)) {\n    timerPtr[0x11] = timerPtr[0x11] & 0xffff7fff;\n  }\n  timerPtr = *timerChannelPtr;\n  if (((timerPtr[8] & 0x1111) == 0) && ((timerPtr[8] & 0x444) == 0)) {\n    *timerPtr = *timerPtr & 0xfffffffe;\n  }\n  *(undefined *)((int)timerChannelPtr + 0x39) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002864": "configure_timer_channel_08002864",
                "param_1": "timerChannelPtr",
                "param_2": "command",
                "bVar1": "isConfigured",
                "puVar2": "timerPtr"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d4": {
            "entrypoint": "0x080028d4",
            "current_name": "update_bits_080028d4",
            "code": "\nvoid updateBits_080028d4(int baseAddress,uint bitOffset,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080028d4": "update_bits_080028d4",
                "param_1": "baseAddress",
                "param_2": "bitOffset",
                "param_3": "bitValue"
            },
            "calling": [
                "HAL_TIMEx_PWMN_Stop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028f0": {
            "entrypoint": "0x080028f0",
            "current_name": "configure_c_cx_n_channel_080028f0",
            "code": "\nundefined4 configureCCxNChannel_080028f0(uint **channelConfig,undefined4 command)\n\n{\n  uint *channelData;\n  \n  TIM_CCxNChannelCmd(*channelConfig,command,0);\n  channelData = *channelConfig;\n  if (((channelData[8] & 0x1111) == 0) && ((channelData[8] & 0x444) == 0)) {\n    channelData[0x11] = channelData[0x11] & 0xffff7fff;\n  }\n  channelData = *channelConfig;\n  if (((channelData[8] & 0x1111) == 0) && ((channelData[8] & 0x444) == 0)) {\n    *channelData = *channelData & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028f0": "configure_c_cx_n_channel_080028f0",
                "param_1": "channelConfig",
                "param_2": "command",
                "puVar1": "channelData"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "TIM_CCxNChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800293c": {
            "entrypoint": "0x0800293c",
            "current_name": "FUNC_0800293c",
            "code": "\nvoid FUNC_0800293c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293c": "FUNC_0800293c"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800293e": {
            "entrypoint": "0x0800293e",
            "current_name": "FUNC_0800293e",
            "code": "\nvoid FUNC_0800293e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800293e": "FUNC_0800293e"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002940": {
            "entrypoint": "0x08002940",
            "current_name": "set_flags_and_values_08002940",
            "code": "\nvoid setFlagsAndValues_08002940(int *inputArray)\n\n{\n  *(uint *)(*inputArray + 0xc) = *(uint *)(*inputArray + 0xc) & 0xfffffedf;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputArray + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002940": "set_flags_and_values_08002940",
                "param_1": "inputArray"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800295c": {
            "entrypoint": "0x0800295c",
            "current_name": "extract_data_from_binary_0800295c",
            "code": "\nundefined4 extractDataFromBinary_0800295c(int *inputData)\n\n{\n  short remainingIterations;\n  byte *currentByte;\n  \n  if (*(char *)((int)inputData + 0x39) != '!') {\n    return 2;\n  }\n  if (inputData[2] == 0x1000) {\n    *(uint *)(*inputData + 4) = *(ushort *)inputData[8] & 0x1ff;\n    if (inputData[4] == 0) {\n      inputData[8] = inputData[8] + 2;\n    }\n    else {\n      inputData[8] = inputData[8] + 1;\n    }\n  }\n  else {\n    currentByte = (byte *)inputData[8];\n    inputData[8] = (int)(currentByte + 1);\n    *(uint *)(*inputData + 4) = (uint)*currentByte;\n  }\n  remainingIterations = *(short *)((int)inputData + 0x26) + -1;\n  *(short *)((int)inputData + 0x26) = remainingIterations;\n  if (remainingIterations == 0) {\n    *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xffffff7f;\n    *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800295c": "extract_data_from_binary_0800295c",
                "param_1": "inputData",
                "sVar1": "remainingIterations",
                "pbVar2": "currentByte",
                "param_1[2]": "inputData[2]",
                "param_1[4]": "inputData[4]",
                "param_1[8]": "inputData[8]"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080029c8": {
            "entrypoint": "0x080029c8",
            "current_name": "calculate_frequency_080029c8",
            "code": "\nvoid calculateFrequency_080029c8(int *frequencyParams)\n\n{\n  int pclk1Freq1;\n  int pclk1Freq2;\n  int pclk1Freq3;\n  int pclk1Freq4;\n  int pclk1Freq5;\n  int pclk2Freq1;\n  int pclk2Freq2;\n  int pclk2Freq3;\n  int pclk2Freq4;\n  int temp;\n  \n  *(uint *)(*frequencyParams + 0x10) = *(uint *)(*frequencyParams + 0x10) & 0xffffcfff | paramValue3;\n  *(uint *)(*frequencyParams + 0xc) =\n       *(uint *)(*frequencyParams + 0xc) & 0xffff69f3 | paramValue2 | paramValue4 | paramValue5 | paramValue7;\n  *(uint *)(*frequencyParams + 0x14) = *(uint *)(*frequencyParams + 0x14) & 0xfffffcff | paramValue6;\n  if (paramValue7 == 0x8000) {\n    temp = *frequencyParams;\n    if ((temp != 0x40011000) && (temp != 0x40011400)) {\n      pclk1Freq1 = HAL_RCC_GetPCLK1Freq();\n      pclk2Freq1 = paramValue1;\n      pclk1Freq2 = HAL_RCC_GetPCLK1Freq();\n      pclk2Freq2 = paramValue1;\n      pclk1Freq3 = HAL_RCC_GetPCLK1Freq();\n      pclk2Freq3 = paramValue1;\n      pclk1Freq4 = HAL_RCC_GetPCLK1Freq();\n      pclk2Freq4 = paramValue1;\n      pclk1Freq5 = HAL_RCC_GetPCLK1Freq();\n      *(uint *)(temp + 8) =\n           ((uint)((int)((ulonglong)\n                         (((uint)(pclk1Freq4 * 0x19) / (uint)(pclk2Freq4 << 1) +\n                          (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) /\n                                (ulonglong)(uint)(paramValue1 << 1)) / 100) * -100) * 8 + 0x32) *\n                         0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n           ((((uint)(pclk1Freq2 * 0x19) / (uint)(pclk2Freq2 << 1) +\n             (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(pclk2Freq3 << 1)) / 100) * -100)\n             * 8 + 0x32) / 100 & 0xf8) * 2 +\n           (int)(((ulonglong)(uint)(pclk1Freq1 * 0x19) / (ulonglong)(uint)(pclk2Freq1 << 1)) / 100) * 0x10;\n      return;\n    }\n    pclk1Freq1 = HAL_RCC_GetPCLK2Freq();\n    pclk2Freq1 = paramValue1;\n    pclk1Freq2 = HAL_RCC_GetPCLK2Freq();\n    pclk2Freq2 = paramValue1;\n    pclk1Freq3 = HAL_RCC_GetPCLK2Freq();\n    pclk2Freq3 = paramValue1;\n    pclk1Freq4 = HAL_RCC_GetPCLK2Freq();\n    pclk2Freq4 = paramValue1;\n    pclk1Freq5 = HAL_RCC_GetPCLK2Freq();\n    *(uint *)(temp + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1Freq4 * 0x19) / (uint)(pclk2Freq4 << 1) +\n                        (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) / (ulonglong)(uint)(paramValue1 << 1))\n                             / 100) * -100) * 8 + 0x32) * 0x51eb851f >> 0x20) << 0x18) >> 0x1d) +\n         ((((uint)(pclk1Freq2 * 0x19) / (uint)(pclk2Freq2 << 1) +\n           (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(pclk2Freq3 << 1)) / 100) * -100) *\n           8 + 0x32) / 100 & 0xf8) * 2 +\n         (int)(((ulonglong)(uint)(pclk1Freq1 * 0x19) / (ulonglong)(uint)(pclk2Freq1 << 1)) / 100) * 0x10;\n    return;\n  }\n  temp = *frequencyParams;\n  if ((temp != 0x40011000) && (temp != 0x40011400)) {\n    pclk1Freq1 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq1 = paramValue1;\n    pclk1Freq2 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq2 = paramValue1;\n    pclk1Freq3 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq3 = paramValue1;\n    pclk1Freq4 = HAL_RCC_GetPCLK1Freq();\n    pclk2Freq4 = paramValue1;\n    pclk1Freq5 = HAL_RCC_GetPCLK1Freq();\n    *(uint *)(temp + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(pclk1Freq4 * 0x19) / (uint)(pclk2Freq4 << 2) +\n                        (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) / (ulonglong)(uint)(paramValue1 << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(pclk1Freq2 * 0x19) / (uint)(pclk2Freq2 << 2) +\n           (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(pclk2Freq3 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(pclk1Freq1 * 0x19) / (ulonglong)(uint)(pclk2Freq1 << 2)) / 100) * 0x10;\n    return;\n  }\n  pclk1Freq1 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq1 = paramValue1;\n  pclk1Freq2 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq2 = paramValue1;\n  pclk1Freq3 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq3 = paramValue1;\n  pclk1Freq4 = HAL_RCC_GetPCLK2Freq();\n  pclk2Freq4 = paramValue1;\n  pclk1Freq5 = HAL_RCC_GetPCLK2Freq();\n  *(uint *)(temp + 8) =\n       ((uint)((int)((ulonglong)\n                     (((uint)(pclk1Freq4 * 0x19) / (uint)(pclk2Freq4 << 2) +\n                      (int)(((ulonglong)(uint)(pclk1Freq5 * 0x19) / (ulonglong)(uint)(paramValue1 << 2)) /\n                           100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n       ((((uint)(pclk1Freq2 * 0x19) / (uint)(pclk2Freq2 << 2) +\n         (int)(((ulonglong)(uint)(pclk1Freq3 * 0x19) / (ulonglong)(uint)(pclk2Freq3 << 2)) / 100) * -100) *\n         0x10 + 0x32) / 100 & 0xf0) +\n       (int)(((ulonglong)(uint)(pclk1Freq1 * 0x19) / (ulonglong)(uint)(pclk2Freq1 << 2)) / 100) * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080029c8": "calculate_frequency_080029c8",
                "param_1": "frequencyParams",
                "iVar1": "pclk1Freq1",
                "iVar2": "pclk1Freq2",
                "iVar3": "pclk1Freq3",
                "iVar4": "pclk1Freq4",
                "iVar5": "pclk1Freq5",
                "iVar6": "pclk2Freq1",
                "iVar7": "pclk2Freq2",
                "iVar8": "pclk2Freq3",
                "iVar9": "pclk2Freq4",
                "iVar10": "temp",
                "param_1[1]": "paramValue1",
                "param_1[2]": "paramValue2",
                "param_1[3]": "paramValue3",
                "param_1[4]": "paramValue4",
                "param_1[5]": "paramValue5",
                "param_1[6]": "paramValue6",
                "param_1[7]": "paramValue7"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_RCC_GetPCLK2Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d0c": {
            "entrypoint": "0x08002d0c",
            "current_name": "validate_flag_08002d0c",
            "code": "\nundefined4 validateFlag_08002d0c(uint **flags,uint inputFlag,uint expectedValue,int startTime,uint timeout)\n\n{\n  int currentTime;\n  \n  do {\n    if (((inputFlag & ~**flags) == 0) != expectedValue) {\n      return 0;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout))));\n  (*flags)[3] = (*flags)[3] & 0xfffffe5f;\n  (*flags)[5] = (*flags)[5] & 0xfffffffe;\n  *(undefined *)((int)flags + 0x39) = 0x20;\n  *(undefined *)((int)flags + 0x3a) = 0x20;\n  *(undefined *)(flags + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08002d0c": "validate_flag_08002d0c",
                "param_1": "flags",
                "param_2": "inputFlag",
                "param_3": "expectedValue",
                "param_4": "startTime",
                "param_5": "timeout",
                "iVar1": "currentTime"
            },
            "calling": [
                "HAL_UART_Transmit"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d70": {
            "entrypoint": "0x08002d70",
            "current_name": "FUNC_08002d70",
            "code": "\nvoid FUNC_08002d70(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d70": "FUNC_08002d70"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002d72": {
            "entrypoint": "0x08002d72",
            "current_name": "initialize_uart_08002d72",
            "code": "\nundefined4 initialize_uart_08002d72(int *uart_handle)\n\n{\n  if (uart_handle != (int *)0x0) {\n    if (*(char *)((int)uart_handle + 0x39) == '\\0') {\n      *(undefined *)(uart_handle + 0xe) = 0;\n      initialize_uart_08002d72_peripherals();\n    }\n    *(undefined *)((int)uart_handle + 0x39) = 0x24;\n    *(uint *)(*uart_handle + 0xc) = *(uint *)(*uart_handle + 0xc) & 0xffffdfff;\n    configure_uart(uart_handle);\n    *(uint *)(*uart_handle + 0x10) = *(uint *)(*uart_handle + 0x10) & 0xffffb7ff;\n    *(uint *)(*uart_handle + 0x14) = *(uint *)(*uart_handle + 0x14) & 0xffffffd5;\n    *(uint *)(*uart_handle + 0xc) = *(uint *)(*uart_handle + 0xc) | 0x2000;\n    uart_data = 0;\n    *(undefined *)((int)uart_handle + 0x39) = 0x20;\n    *(undefined *)((int)uart_handle + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002d72": "initialize_uart_08002d72",
                "param_1": "uart_handle",
                "HAL_UART_MspInit": "initialize_uart_peripherals",
                "UART_SetConfig": "configure_uart",
                "param_1[0xf]": "uart_data"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "UART_SetConfig",
                "HAL_UART_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002dd0": {
            "entrypoint": "0x08002dd0",
            "current_name": "process_transmission_08002dd0",
            "code": "\nundefined4 processTransmission_08002dd0(int *ptrParam1,ushort *ptrParam2,int param3,undefined4 param4)\n\n{\n  int tempVar1;\n  undefined4 result;\n  \n  if (*(char *)((int)ptrParam1 + 0x39) == ' ') {\n    if (ptrParam2 == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (param3 == 0) {\n      result = 1;\n    }\n    else if (*(char *)(ptrParam1 + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(ptrParam1 + 0xe) = 1;\n      ptrParam1[0xf] = 0;\n      *(undefined *)((int)ptrParam1 + 0x39) = 0x21;\n      result = HAL_GetTick();\n      *(short *)(ptrParam1 + 9) = (short)param3;\n      *(short *)((int)ptrParam1 + 0x26) = (short)param3;\n      while (*(short *)((int)ptrParam1 + 0x26) != 0) {\n        *(short *)((int)ptrParam1 + 0x26) = *(short *)((int)ptrParam1 + 0x26) + -1;\n        if (ptrParam1[2] == 0x1000) {\n          tempVar1 = waitForFlagUntilTimeout(ptrParam1,0x80,0,result,param4);\n          if (tempVar1 != 0) {\n            return 3;\n          }\n          *(uint *)(*ptrParam1 + 4) = *ptrParam2 & 0x1ff;\n          if (ptrParam1[4] == 0) {\n            ptrParam2 = ptrParam2 + 1;\n          }\n          else {\n            ptrParam2 = (ushort *)((int)ptrParam2 + 1);\n          }\n        }\n        else {\n          tempVar1 = waitForFlagUntilTimeout(ptrParam1,0x80,0,result,param4);\n          if (tempVar1 != 0) {\n            return 3;\n          }\n          *(uint *)(*ptrParam1 + 4) = (uint)*(byte *)ptrParam2;\n          ptrParam2 = (ushort *)((int)ptrParam2 + 1);\n        }\n      }\n      tempVar1 = waitForFlagUntilTimeout(ptrParam1,0x40,0,result,param4);\n      if (tempVar1 == 0) {\n        *(undefined *)((int)ptrParam1 + 0x39) = 0x20;\n        *(undefined *)(ptrParam1 + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002dd0": "process_transmission_08002dd0",
                "param_1": "ptrParam1",
                "param_2": "ptrParam2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "tempVar1",
                "uVar2": "result",
                "UART_WaitOnFlagUntilTimeout": "waitForFlagUntilTimeout"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "HAL_GetTick",
                "UART_WaitOnFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002eb2": {
            "entrypoint": "0x08002eb2",
            "current_name": "FUNC_08002eb2",
            "code": "\nundefined4 FUNC_08002eb2(int *param_1,int param_2,int param_3)\n\n{\n  if (*(char *)((int)param_1 + 0x39) != ' ') {\n    return 2;\n  }\n  if (param_2 == 0) {\n    return 1;\n  }\n  if (param_3 == 0) {\n    return 1;\n  }\n  if (*(char *)(param_1 + 0xe) != '\\x01') {\n    param_1[8] = param_2;\n    *(short *)(param_1 + 9) = (short)param_3;\n    *(short *)((int)param_1 + 0x26) = (short)param_3;\n    param_1[0xf] = 0;\n    *(undefined *)((int)param_1 + 0x39) = 0x21;\n    *(undefined *)(param_1 + 0xe) = 0;\n    *(uint *)(*param_1 + 0xc) = *(uint *)(*param_1 + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002eb2": "FUNC_08002eb2"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "uart_attach_tx_callback"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002efa": {
            "entrypoint": "0x08002efa",
            "current_name": "validate_parameters_08002efa",
            "code": "\nundefined4 validate_parameters_08002efa(int *ptr_data,int value_1,int value_2)\n\n{\n  if (*(char *)((int)ptr_data + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value_1 == 0) {\n    return 1;\n  }\n  if (value_2 == 0) {\n    return 1;\n  }\n  if (*(char *)(ptr_data + 0xe) != '\\x01') {\n    ptr_data[10] = value_1;\n    *(short *)(ptr_data + 0xb) = (short)value_2;\n    *(short *)((int)ptr_data + 0x2e) = (short)value_2;\n    ptr_data[0xf] = 0;\n    *(undefined *)((int)ptr_data + 0x3a) = 0x22;\n    *(undefined *)(ptr_data + 0xe) = 0;\n    *(uint *)(*ptr_data + 0x14) = *(uint *)(*ptr_data + 0x14) | 1;\n    *(uint *)(*ptr_data + 0xc) = *(uint *)(*ptr_data + 0xc) | 0x120;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002efa": "validate_parameters_08002efa",
                "param_1": "ptr_data",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_1[10]": "ptr_data[10]",
                "param_1[0xf]": "ptr_data[0xf]"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f4c": {
            "entrypoint": "0x08002f4c",
            "current_name": "set_uart_configuration_08002f4c",
            "code": "\nundefined4 setUARTConfiguration_08002f4c(int *configData)\n\n{\n  *(uint *)(*configData + 0xc) = *(uint *)(*configData + 0xc) & 0xffffffbf;\n  *(undefined *)((int)configData + 0x39) = 0x20;\n  handleTxComplete();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f4c": "set_uart_configuration_08002f4c",
                "param_1": "configData",
                "HAL_UART_TxCpltCallback": "handleTxComplete"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_TxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f66": {
            "entrypoint": "0x08002f66",
            "current_name": "process_data_08002f66",
            "code": "\nundefined4 processData_08002f66(int *inputData)\n\n{\n  byte *bytePtr;\n  short counter;\n  undefined *tempPtr;\n  \n  if (*(char *)((int)inputData + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (inputData[2] == 0x1000) {\n    if (inputData[4] == 0) {\n      *(ushort *)inputData[10] = (ushort)((uint)(*(int *)(*inputData + 4) << 0x17) >> 0x17);\n      inputData[10] = inputData[10] + 2;\n    }\n    else {\n      *(ushort *)inputData[10] = (ushort)*(undefined4 *)(*inputData + 4) & 0xff;\n      inputData[10] = inputData[10] + 1;\n    }\n  }\n  else if (inputData[4] == 0) {\n    tempPtr = (undefined *)inputData[10];\n    inputData[10] = (int)(tempPtr + 1);\n    *tempPtr = (char)*(undefined4 *)(*inputData + 4);\n  }\n  else {\n    bytePtr = (byte *)inputData[10];\n    inputData[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*inputData + 4) & 0x7f;\n  }\n  counter = *(short *)((int)inputData + 0x2e) + -1;\n  *(short *)((int)inputData + 0x2e) = counter;\n  if (counter != 0) {\n    return 0;\n  }\n  *(uint *)(*inputData + 0xc) = *(uint *)(*inputData + 0xc) & 0xfffffedf;\n  *(uint *)(*inputData + 0x14) = *(uint *)(*inputData + 0x14) & 0xfffffffe;\n  *(undefined *)((int)inputData + 0x3a) = 0x20;\n  HAL_UART_RxCpltCallback();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f66": "process_data_08002f66",
                "param_1": "inputData",
                "pbVar1": "bytePtr",
                "sVar2": "counter",
                "puVar3": "tempPtr"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ffc": {
            "entrypoint": "0x08002ffc",
            "current_name": "process_received_data_08002ffc",
            "code": "\nvoid processReceivedData_08002ffc(uint **dataPointer)\n\n{\n  int result;\n  uint value1;\n  uint *pointerValue;\n  uint value2;\n  uint value3;\n  \n  pointerValue = *dataPointer;\n  value3 = *pointerValue;\n  value1 = pointerValue[3];\n  if ((((value3 & 0xf) == 0) && ((value3 & 0x20) != 0)) && ((value1 & 0x20) != 0)) {\n    UART_Receive_IT(dataPointer);\n    return;\n  }\n  if (((value3 & 0xf) == 0) || ((value2 = pointerValue[5] & 1, value2 == 0 && ((value1 & 0x120) == 0)))) {\n    if (((value3 & 0x80) != 0) && ((value1 & 0x80) != 0)) {\n      UART_Transmit_IT(dataPointer);\n      return;\n    }\n    if (((value3 & 0x40) != 0) && ((value1 & 0x40) != 0)) {\n      UART_EndTransmit_IT(dataPointer);\n    }\n  }\n  else {\n    if (((value3 & 1) != 0) && ((value1 & 0x100) != 0)) {\n      dataPointer[0xf] = (uint *)((uint)dataPointer[0xf] | 1);\n    }\n    if (((value3 & 4) != 0) && (value2 != 0)) {\n      dataPointer[0xf] = (uint *)((uint)dataPointer[0xf] | 2);\n    }\n    if (((value3 & 2) != 0) && (value2 != 0)) {\n      dataPointer[0xf] = (uint *)((uint)dataPointer[0xf] | 4);\n    }\n    if (((value3 & 8) != 0) && (value2 != 0)) {\n      dataPointer[0xf] = (uint *)((uint)dataPointer[0xf] | 8);\n    }\n    if (dataPointer[0xf] != (uint *)0x0) {\n      if (((value3 & 0x20) != 0) && ((value1 & 0x20) != 0)) {\n        UART_Receive_IT(dataPointer);\n      }\n      if ((((uint)dataPointer[0xf] & 8) == 0) && (((*dataPointer)[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(dataPointer);\n        dataPointer[0xf] = (uint *)0x0;\n        return;\n      }\n      UART_EndRxTransfer(dataPointer);\n      pointerValue = *dataPointer;\n      if ((pointerValue[5] & 0x40) == 0) {\n        HAL_UART_ErrorCallback(dataPointer);\n        return;\n      }\n      pointerValue[5] = pointerValue[5] & 0xffffffbf;\n      if (dataPointer[0xd] == (uint *)0x0) {\n        HAL_UART_ErrorCallback(dataPointer);\n        return;\n      }\n      dataPointer[0xd][0x14] = (uint)&LAB_0800311c_1;\n      result = HAL_DMA_Abort_IT(dataPointer[0xd]);\n      if (result != 0) {\n        (*(code *)dataPointer[0xd][0x14])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ffc": "process_received_data_08002ffc",
                "param_1": "dataPointer",
                "iVar1": "result",
                "uVar2": "value1",
                "puVar3": "pointerValue",
                "uVar4": "value2",
                "uVar5": "value3"
            },
            "calling": [],
            "called": [
                "UART_Transmit_IT",
                "HAL_DMA_Abort_IT",
                "HAL_UART_ErrorCallback",
                "UART_Receive_IT",
                "UART_EndTransmit_IT",
                "UART_EndRxTransfer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800312c": {
            "entrypoint": "0x0800312c",
            "current_name": "combine_bytes_0800312c",
            "code": "\nbyte combineBytes_0800312c(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_0800312c": "combine_bytes_0800312c",
                "param_1": "input"
            },
            "calling": [
                "serial_tx_active",
                "serial_rx_active"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003138": {
            "entrypoint": "0x08003138",
            "current_name": "get_bit_value_08003138",
            "code": "\nuint getBitValue_08003138(uint inputValue,int baseAddress)\n\n{\n  return *(uint *)(baseAddress + ((inputValue << 0x18) >> 0x1c) * 4) >> (inputValue & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_08003138": "get_bit_value_08003138",
                "param_1": "inputValue",
                "param_2": "baseAddress"
            },
            "calling": [
                "pinMode",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800314e": {
            "entrypoint": "0x0800314e",
            "current_name": "set_bit_0800314e",
            "code": "\nvoid setBit_0800314e(uint bitPosition,int arrayAddress)\n\n{\n  uint bitIndex;\n  \n  bitIndex = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + bitIndex * 4) = *(uint *)(arrayAddress + bitIndex * 4) | 1 << (bitPosition & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800314e": "set_bit_0800314e",
                "param_1": "bitPosition",
                "param_2": "arrayAddress",
                "uVar1": "bitIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "update_value_0800316c",
            "code": "\nvoid updateValue_0800316c(uint inputValue,int arrayAddress)\n\n{\n  uint shiftValue;\n  \n  shiftValue = (inputValue << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftValue * 4) = *(uint *)(arrayAddress + shiftValue * 4) & ~(1 << (inputValue & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "update_value_0800316c",
                "param_1": "inputValue",
                "param_2": "arrayAddress",
                "uVar1": "shiftValue"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800318c": {
            "entrypoint": "0x0800318c",
            "current_name": "get_memory_address_0800318c",
            "code": "\nundefined4 getMemoryAddress_0800318c(undefined4 inputCode)\n\n{\n  switch(inputCode) {\n  case 0:\n    return 0x40020000;\n  case 1:\n    return 0x40020400;\n  case 2:\n    return 0x40020800;\n  case 3:\n    return 0x40020c00;\n  case 4:\n    return 0x40021000;\n  case 5:\n    return 0x40021400;\n  case 6:\n    return 0x40021800;\n  case 7:\n    return 0x40021c00;\n  case 8:\n    return 0x40022000;\n  case 9:\n    return 0x40022400;\n  case 10:\n    return 0x40022800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_0800318c": "get_memory_address_0800318c",
                "param_1": "inputCode"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080031fc": {
            "entrypoint": "0x080031fc",
            "current_name": "set_permissions_080031fc",
            "code": "\n\n\nundefined4 setPermissions_080031fc(undefined4 permissionIndex)\n\n{\n  undefined4 baseAddress;\n  \n  switch(permissionIndex) {\n  case 0:\n    _DAT_40023830 = _DAT_40023830 | 1;\n    baseAddress = 0x40020000;\n    break;\n  case 1:\n    _DAT_40023830 = _DAT_40023830 | 2;\n    baseAddress = 0x40020400;\n    break;\n  case 2:\n    _DAT_40023830 = _DAT_40023830 | 4;\n    baseAddress = 0x40020800;\n    break;\n  case 3:\n    _DAT_40023830 = _DAT_40023830 | 8;\n    baseAddress = 0x40020c00;\n    break;\n  case 4:\n    _DAT_40023830 = _DAT_40023830 | 0x10;\n    baseAddress = 0x40021000;\n    break;\n  case 5:\n    _DAT_40023830 = _DAT_40023830 | 0x20;\n    baseAddress = 0x40021400;\n    break;\n  case 6:\n    _DAT_40023830 = _DAT_40023830 | 0x40;\n    baseAddress = 0x40021800;\n    break;\n  case 7:\n    _DAT_40023830 = _DAT_40023830 | 0x80;\n    baseAddress = 0x40021c00;\n    break;\n  case 8:\n    _DAT_40023830 = _DAT_40023830 | 0x100;\n    baseAddress = 0x40022000;\n    break;\n  case 9:\n    _DAT_40023830 = _DAT_40023830 | 0x200;\n    baseAddress = 0x40022400;\n    break;\n  case 10:\n    _DAT_40023830 = _DAT_40023830 | 0x400;\n    baseAddress = 0x40022800;\n    break;\n  default:\n    baseAddress = 0;\n  }\n  return baseAddress;\n}\n\n",
            "renaming": {
                "FUN_080031fc": "set_permissions_080031fc",
                "param_1": "permissionIndex",
                "uVar1": "baseAddress"
            },
            "calling": [
                "digital_io_init",
                "uart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003380": {
            "entrypoint": "0x08003380",
            "current_name": "check_pinmap_function_08003380",
            "code": "\nundefined4 check_pinmap_function_08003380(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  int result;\n  \n  result = pinmap_function(input_param1,&DAT_08005a18,input_param3,input_param4,input_param4);\n  if ((uint)(result << 0xc) >> 0x1b != 2) {\n    return 0;\n  }\n  return 0x10;\n}\n\n",
            "renaming": {
                "FUN_08003380": "check_pinmap_function_08003380",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "iVar1": "result"
            },
            "calling": [
                "dac_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800339c": {
            "entrypoint": "0x0800339c",
            "current_name": "pinmap_check_0800339c",
            "code": "\nundefined4 pinmap_check_0800339c(undefined4 device,undefined4 data,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  uint shiftedBits;\n  \n  result = pinmap_function(device,&DAT_08005a3c,param1,param2,param2);\n  shiftedBits = (uint)(result << 0xc) >> 0x1b;\n  if (shiftedBits == 3) {\n    return 8;\n  }\n  if (shiftedBits != 4) {\n    if (shiftedBits != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_0800339c": "pinmap_check_0800339c",
                "param_1": "device",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result",
                "uVar2": "shiftedBits"
            },
            "calling": [
                "pwm_stop"
            ],
            "called": [
                "pinmap_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033c8": {
            "entrypoint": "0x080033c8",
            "current_name": "clear_memory_protection_080033c8",
            "code": "\n\n\nvoid clearMemoryProtection_080033c8(void)\n\n{\n  _DAT_40023840 = _DAT_40023840 & 0xdfffffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033c8": "clear_memory_protection_080033c8"
            },
            "calling": [
                "HAL_DAC_DeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033d8": {
            "entrypoint": "0x080033d8",
            "current_name": "stop_and_deinit_dac_080033d8",
            "code": "\nvoid stopAndDeinitDAC_080033d8(undefined4 peripheral)\n\n{\n  int dacChannel;\n  int peripheralStatus [5];\n  \n  peripheralStatus[0] = pinmap_peripheral(peripheral,&DAT_08005a18);\n  if ((peripheralStatus[0] != 0) && ((dacChannel = get_dac_channel(peripheral), dacChannel == 0 || (dacChannel == 0x10)))) {\n    HAL_DAC_Stop(peripheralStatus,dacChannel);\n    HAL_DAC_DeInit(peripheralStatus);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033d8": "stop_and_deinit_dac_080033d8",
                "param_1": "peripheral",
                "iVar1": "dacChannel",
                "local_1c": "peripheralStatus"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_DAC_DeInit",
                "pinmap_peripheral",
                "HAL_DAC_Stop",
                "get_dac_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800340c": {
            "entrypoint": "0x0800340c",
            "current_name": "disable_timer_clock_0800340c",
            "code": "\nvoid disable_timer_clock_0800340c(void)\n\n{\n  timer_disable_clock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800340c": "disable_timer_clock_0800340c"
            },
            "calling": [
                "HAL_TIM_PWM_DeInit"
            ],
            "called": [
                "timer_disable_clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003414": {
            "entrypoint": "0x08003414",
            "current_name": "stop_pwm_if_configured_08003414",
            "code": "\nvoid stopPWMIfConfigured_08003414(undefined4 peripheral)\n\n{\n  int pwmChannel;\n  uint functionPinMap;\n  int pinMapArray [16];\n  \n  pinMapArray[0] = pinmap_peripheral(peripheral,&DAT_08005a3c);\n  if ((pinMapArray[0] != 0) &&\n     ((((pwmChannel = get_pwm_channel(peripheral), pwmChannel == 0 || (pwmChannel == 4)) || (pwmChannel == 8)) ||\n      ((pwmChannel == 0xc || (pwmChannel == 0x18)))))) {\n    functionPinMap = pinmap_function(peripheral,&DAT_08005a3c);\n    if ((functionPinMap & 0x100000) == 0) {\n      HAL_TIM_PWM_Stop(pinMapArray,pwmChannel);\n    }\n    else {\n      HAL_TIMEx_PWMN_Stop(pinMapArray,pwmChannel);\n    }\n    HAL_TIM_PWM_DeInit(pinMapArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003414": "stop_pwm_if_configured_08003414",
                "param_1": "peripheral",
                "iVar1": "pwmChannel",
                "uVar2": "functionPinMap",
                "local_4c": "pinMapArray"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "pinmap_peripheral",
                "pinmap_function",
                "HAL_TIMEx_PWMN_Stop",
                "HAL_TIM_PWM_DeInit",
                "get_pwm_channel",
                "HAL_TIM_PWM_Stop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800346c": {
            "entrypoint": "0x0800346c",
            "current_name": "get_current_time_0800346c",
            "code": "\nvoid get_current_time_0800346c(void)\n\n{\n  current_tick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800346c": "get_current_time_0800346c",
                "HAL_GetTick": "current_tick"
            },
            "calling": [
                "millis"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003474": {
            "entrypoint": "0x08003474",
            "current_name": "FUNC_08003474",
            "code": "\nvoid FUNC_08003474(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003474": "FUNC_08003474"
            },
            "calling": [
                "SysTick_Handler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003476": {
            "entrypoint": "0x08003476",
            "current_name": "handle_sys_tick_interrupt_08003476",
            "code": "\nvoid handleSysTickInterrupt_08003476(void)\n\n{\n  incrementSystemTick();\n  systemTickInterruptHandler();\n  handleNoOsSysTick();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003476": "handle_sys_tick_interrupt_08003476",
                "HAL_IncTick": "incrementSystemTick",
                "HAL_SYSTICK_IRQHandler": "systemTickInterruptHandler",
                "noOsSystickHandler": "handleNoOsSysTick"
            },
            "calling": [],
            "called": [
                "noOsSystickHandler",
                "HAL_SYSTICK_IRQHandler",
                "HAL_IncTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003486": {
            "entrypoint": "0x08003486",
            "current_name": "initialize_gpio_08003486",
            "code": "\nvoid initializeGPIO_08003486(uint pinNumber,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 gpioPort;\n  uint pinMask;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 mode;\n  \n  gpioPort = set_GPIO_Port_Clock((pinNumber << 0x18) >> 0x1c);\n  pinMask = 1 << (pinNumber & 0xf) & 0xffff;\n  mode = 2;\n  param2Copy = param2;\n  param3Copy = param3;\n  HAL_GPIO_Init(gpioPort,&pinMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003486": "initialize_gpio_08003486",
                "param_1": "pinNumber",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "gpioPort",
                "local_24": "pinMask",
                "local_20": "param2Copy",
                "local_1c": "param3Copy",
                "local_18": "mode"
            },
            "calling": [
                "pinMode"
            ],
            "called": [
                "HAL_GPIO_Init",
                "set_GPIO_Port_Clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034b6": {
            "entrypoint": "0x080034b6",
            "current_name": "gpio_set_pin_state_080034b6",
            "code": "\nvoid GPIO_SetPinState_080034b6(undefined4 port,undefined2 pin,int state,undefined4 param)\n\n{\n  if (state == 0) {\n    HAL_GPIO_WritePin(port,pin,0,param,param);\n    return;\n  }\n  HAL_GPIO_WritePin(port,pin,1,param,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034b6": "gpio_set_pin_state_080034b6",
                "param_1": "port",
                "param_2": "pin",
                "param_3": "state",
                "param_4": "param"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034ce": {
            "entrypoint": "0x080034ce",
            "current_name": "initialize_system_080034ce",
            "code": "\nvoid initializeSystem_080034ce(void)\n\n{\n  initializeHardware();\n  configureSystemClock();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080034ce": "initialize_system_080034ce",
                "HAL_Init": "initializeHardware",
                "SystemClock_Config": "configureSystemClock"
            },
            "calling": [
                "FUN_08000d8e"
            ],
            "called": [
                "SystemClock_Config",
                "HAL_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034da": {
            "entrypoint": "0x080034da",
            "current_name": "find_value_index_080034da",
            "code": "\nundefined4 find_value_index_080034da(int search_value,short *value_array)\n\n{\n  while( true ) {\n    if (*value_array == -1) {\n      return 0;\n    }\n    if (*value_array == search_value) break;\n    value_array = value_array + 6;\n  }\n  return *(undefined4 *)(value_array + 2);\n}\n\n",
            "renaming": {
                "FUN_080034da": "find_value_index_080034da",
                "param_1": "search_value",
                "param_2": "value_array"
            },
            "calling": [
                "pinmap_peripheral",
                "pinmap_find_peripheral"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080034f4": {
            "entrypoint": "0x080034f4",
            "current_name": "find_valid_peripheral_080034f4",
            "code": "\nundefined4 findValidPeripheral_080034f4(int peripheralId)\n\n{\n  undefined4 validPeripheral;\n  \n  if (peripheralId != -1) {\n    validPeripheral = pinmap_find_peripheral();\n    return validPeripheral;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080034f4": "find_valid_peripheral_080034f4",
                "param_1": "peripheralId",
                "uVar1": "validPeripheral"
            },
            "calling": [
                "dac_stop",
                "pwm_stop",
                "uart_debug_write",
                "uart_debug_init",
                "uart_init"
            ],
            "called": [
                "pinmap_find_peripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003506": {
            "entrypoint": "0x08003506",
            "current_name": "find_value_in_array_08003506",
            "code": "\nint find_value_in_array_08003506(int target_value,short *array_ptr)\n\n{\n  while( true ) {\n    if (*(int *)(array_ptr + 2) == 0) {\n      return -1;\n    }\n    if (*(int *)(array_ptr + 2) == target_value) break;\n    array_ptr = array_ptr + 6;\n  }\n  return (int)*array_ptr;\n}\n\n",
            "renaming": {
                "FUN_08003506": "find_value_in_array_08003506",
                "param_1": "target_value",
                "param_2": "array_ptr"
            },
            "calling": [
                "pinmap_pin",
                "pinmap_find_pin"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800351e": {
            "entrypoint": "0x0800351e",
            "current_name": "find_pin_0800351e",
            "code": "\nundefined4 findPin_0800351e(int pin)\n\n{\n  undefined4 result;\n  \n  if (pin != 0) {\n    result = pinmap_find_pin();\n    return result;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800351e": "find_pin_0800351e",
                "param_1": "pin",
                "uVar1": "result"
            },
            "calling": [
                "HardwareSerial",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_find_pin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800352e": {
            "entrypoint": "0x0800352e",
            "current_name": "find_value_index_0800352e",
            "code": "\nundefined4 find_value_index_0800352e(int value,short *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0xffffffff;\n    }\n    if (*array == value) break;\n    array = array + 6;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_0800352e": "find_value_index_0800352e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "pinmap_function",
                "pinmap_find_function"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800354a": {
            "entrypoint": "0x0800354a",
            "current_name": "find_function_0800354a",
            "code": "\nundefined4 findFunction_0800354a(int input)\n\n{\n  undefined4 result;\n  \n  if (input == -1) {\n    return 0xffffffff;\n  }\n  result = pinmap_find_function();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800354a": "find_function_0800354a",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "pwm_stop",
                "get_dac_channel",
                "get_pwm_channel",
                "uart_init"
            ],
            "called": [
                "pinmap_find_function"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800355e": {
            "entrypoint": "0x0800355e",
            "current_name": "find_integer_0800355e",
            "code": "\nundefined4 find_integer_0800355e(int target,short *array)\n\n{\n  if (target == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (target == *array) break;\n    array = array + 6;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800355e": "find_integer_0800355e",
                "param_1": "target",
                "param_2": "array"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003582": {
            "entrypoint": "0x08003582",
            "current_name": "param_comparison_08003582",
            "code": "\nint param_comparison_08003582(int value_1,int value_2)\n\n{\n  if (value_1 != value_2) {\n    if (value_1 == 0) {\n      return value_2;\n    }\n    if (value_2 == 0) {\n      return value_1;\n    }\n    value_1 = 0;\n  }\n  return value_1;\n}\n\n",
            "renaming": {
                "FUN_08003582": "param_comparison_08003582",
                "param_1": "value_1",
                "param_2": "value_2"
            },
            "calling": [
                "uart_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003594": {
            "entrypoint": "0x08003594",
            "current_name": "execute_callback_function_08003594",
            "code": "\nvoid executeCallbackFunction_08003594(void)\n\n{\n  if (DAT_20000188 != (code *)0x0) {\n    (*DAT_20000188)(DAT_200001ac);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003594": "execute_callback_function_08003594"
            },
            "calling": [
                "HAL_RTC_AlarmIRQHandler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035bc": {
            "entrypoint": "0x080035bc",
            "current_name": "initialize_device_080035bc",
            "code": "\n\n\nvoid initialize_device_080035bc(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035bc": "initialize_device_080035bc"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080035fc": {
            "entrypoint": "0x080035fc",
            "current_name": "set_flags_based_on_value_080035fc",
            "code": "\n\n\nvoid setFlagsBasedOnValue_080035fc(int *value)\n\n{\n  if (*value == 0x40010000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffe;\n  }\n  if (*value == 0x40000000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffe;\n  }\n  if (*value == 0x40000400) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffd;\n  }\n  if (*value == 0x40000800) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffffb;\n  }\n  if (*value == 0x40000c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffff7;\n  }\n  if (*value == 0x40001000) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffef;\n  }\n  if (*value == 0x40001400) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffdf;\n  }\n  if (*value == 0x40010400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffffffd;\n  }\n  if (*value == 0x40014000) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffeffff;\n  }\n  if (*value == 0x40014400) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffdffff;\n  }\n  if (*value == 0x40014800) {\n    _DAT_40023844 = _DAT_40023844 & 0xfffbffff;\n  }\n  if (*value == 0x40001800) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffffbf;\n  }\n  if (*value == 0x40001c00) {\n    _DAT_40023840 = _DAT_40023840 & 0xffffff7f;\n  }\n  if (*value == 0x40002000) {\n    _DAT_40023840 = _DAT_40023840 & 0xfffffeff;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080035fc": "set_flags_based_on_value_080035fc",
                "param_1": "value"
            },
            "calling": [
                "HAL_TIM_PWM_MspDeInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003750": {
            "entrypoint": "0x08003750",
            "current_name": "subtract_four_08003750",
            "code": "\nint subtract_four_08003750(int input_value)\n\n{\n  return input_value + -4;\n}\n\n",
            "renaming": {
                "FUN_08003750": "subtract_four_08003750",
                "param_1": "input_value"
            },
            "calling": [
                "HAL_TIM_OC_DelayElapsedCallback",
                "HAL_TIM_PeriodElapsedCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003754": {
            "entrypoint": "0x08003754",
            "current_name": "execute_timer_function_08003754",
            "code": "\nvoid executeTimerFunction_08003754(int timerID)\n\n{\n  int timerObj;\n  \n  timerObj = getTimerObject();\n  if ((*(functionPointer **)(timerObj + 0x48) != (functionPointer *)0x0) && (*(char *)(timerID + 0x18) == '\\x01')) {\n    (**(functionPointer **)(timerObj + 0x48))(timerObj,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003754": "execute_timer_function_08003754",
                "param_1": "timerID",
                "iVar1": "timerObj",
                "get_timer_obj": "getTimerObject",
                "code": "functionPointer"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800376e": {
            "entrypoint": "0x0800376e",
            "current_name": "execute_timer_function_0800376e",
            "code": "\nvoid executeTimerFunction_0800376e(void)\n\n{\n  int timerObject;\n  \n  timerObject = getTimerObject();\n  if (*(code **)(timerObject + 0x44) != (code *)0x0) {\n    (**(code **)(timerObject + 0x44))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800376e": "execute_timer_function_0800376e",
                "iVar1": "timerObject",
                "get_timer_obj": "getTimerObject"
            },
            "calling": [
                "HAL_TIM_IRQHandler"
            ],
            "called": [
                "get_timer_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800377c": {
            "entrypoint": "0x0800377c",
            "current_name": "handle_tim_interrupts_0800377c",
            "code": "\nvoid handle_TIM_interrupts_0800377c(void)\n\n{\n  if (DAT_200001b0 != 0) {\n    HAL_TIM_IRQHandler();\n  }\n  if (DAT_200001d4 != 0) {\n    HAL_TIM_IRQHandler();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800377c": "handle_tim_interrupts_0800377c"
            },
            "calling": [],
            "called": [
                "HAL_TIM_IRQHandler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800387c": {
            "entrypoint": "0x0800387c",
            "current_name": "subtract_four_0800387c",
            "code": "\nint subtractFour_0800387c(int number)\n\n{\n  return number + -4;\n}\n\n",
            "renaming": {
                "FUN_0800387c": "subtract_four_0800387c",
                "param_1": "number"
            },
            "calling": [
                "HAL_I2C_ErrorCallback",
                "HAL_I2C_AddrCallback",
                "HAL_I2C_ListenCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003880": {
            "entrypoint": "0x08003880",
            "current_name": "transmit_or_receive_data_08003880",
            "code": "\nvoid transmitOrReceiveData_08003880(int devicePtr,int isTransmit,int paramPtr,undefined4 callbackPtr)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (paramPtr == *(int *)(devicePtr + 0xc)) {\n    if (isTransmit == 0) {\n      *(undefined *)(i2cObj + 0x88) = 0;\n      *(undefined *)(i2cObj + 0x5e) = 0;\n      if (*(code **)(i2cObj + 100) != (code *)0x0) {\n        (**(code **)(i2cObj + 100))();\n      }\n      transmitDataSequentially(devicePtr,i2cObj + 0x68,*(undefined *)(i2cObj + 0x88),8);\n      return;\n    }\n    *(undefined *)(i2cObj + 0x5e) = 1;\n    receiveDataSequentially(devicePtr,i2cObj + 0x68,0x20,8,callbackPtr);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003880": "transmit_or_receive_data_08003880",
                "param_1": "devicePtr",
                "param_2": "isTransmit",
                "param_3": "paramPtr",
                "param_4": "callbackPtr",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_Slave_Sequential_Transmit_IT": "transmitDataSequentially",
                "HAL_I2C_Slave_Sequential_Receive_IT": "receiveDataSequentially"
            },
            "calling": [
                "I2C_Slave_ADDR"
            ],
            "called": [
                "HAL_I2C_Slave_Sequential_Receive_IT",
                "HAL_I2C_Slave_Sequential_Transmit_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080038d0": {
            "entrypoint": "0x080038d0",
            "current_name": "enable_i2_c_and_listen_080038d0",
            "code": "\nvoid enableI2CAndListen_080038d0(undefined4 param)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (((*(code **)(i2cObj + 0x60) != (code *)0x0) && (*(char *)(i2cObj + 0x5e) == '\\x01')) &&\n     (*(char *)(i2cObj + 0x2c) != ' ')) {\n    (**(code **)(i2cObj + 0x60))(i2cObj + 0x68);\n  }\n  enableI2CListenInterrupt(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080038d0": "enable_i2_c_and_listen_080038d0",
                "param_1": "param",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "I2C_ITError",
                "I2C_Slave_STOPF",
                "I2C_Slave_AF"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003900": {
            "entrypoint": "0x08003900",
            "current_name": "enable_i2_c_listen_08003900",
            "code": "\nvoid enableI2CListen_08003900(undefined4 objectHandle)\n\n{\n  int i2cObj;\n  \n  i2cObj = getI2CObject();\n  if (*(char *)(i2cObj + 0x5f) == '\\0') {\n    enableI2CListen_08003900Interrupt(objectHandle);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003900": "enable_i2_c_listen_08003900",
                "param_1": "objectHandle",
                "iVar1": "i2cObj",
                "get_i2c_obj": "getI2CObject",
                "HAL_I2C_EnableListen_IT": "enableI2CListenInterrupt"
            },
            "calling": [
                "I2C_ITError"
            ],
            "called": [
                "HAL_I2C_EnableListen_IT",
                "get_i2c_obj"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003978": {
            "entrypoint": "0x08003978",
            "current_name": "configure_uart_pins_08003978",
            "code": "\n\n\nvoid configureUARTPins_08003978(int *uartPins)\n\n{\n  int pin1;\n  int pin2;\n  undefined4 gpioPortClock;\n  uint pinFunction;\n  uint pinBitMask;\n  uint pinConfigValue;\n  uint pinConfigBitOffset;\n  undefined4 gpioInitConfig;\n  uint pullConfiguration;\n  \n  if (uartPins != (int *)0x0) {\n    pin1 = pinmap_peripheral((int)*(short *)(uartPins + 0x16),&DAT_08005ca0);\n    pin2 = pinmap_peripheral((int)*(short *)((int)uartPins + 0x5a),&DAT_08005c10);\n    if ((pin2 == 0) || (pin1 == 0)) {\n      iprintf(\"ERROR: at least one UART pin has no peripheral\\n\",pin2);\n    }\n    else {\n      pin1 = pinmap_merge_peripheral(pin1);\n      *uartPins = pin1;\n      if (pin1 == 0) {\n        iprintf(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (pin1 == 0x40011000) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffef;\n          _DAT_40023844 = _DAT_40023844 | 0x10;\n          *(undefined *)(uartPins + 0x11) = 0;\n          *(undefined *)(uartPins + 0x17) = 0x25;\n        }\n        else if (pin1 == 0x40004400) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffdffff;\n          _DAT_40023840 = _DAT_40023840 | 0x20000;\n          *(undefined *)(uartPins + 0x11) = 1;\n          *(undefined *)(uartPins + 0x17) = 0x26;\n        }\n        else if (pin1 == 0x40004800) {\n          _DAT_40023820 = _DAT_40023820 & 0xfffbffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000;\n          *(undefined *)(uartPins + 0x11) = 2;\n          *(undefined *)(uartPins + 0x17) = 0x27;\n        }\n        else if (pin1 == 0x40004c00) {\n          _DAT_40023820 = _DAT_40023820 & 0xfff7ffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000;\n          *(undefined *)(uartPins + 0x11) = 3;\n          *(undefined *)(uartPins + 0x17) = 0x34;\n        }\n        else if (pin1 == 0x40005000) {\n          _DAT_40023820 = _DAT_40023820 & 0xffefffff;\n          _DAT_40023840 = _DAT_40023840 | 0x100000;\n          *(undefined *)(uartPins + 0x11) = 4;\n          *(undefined *)(uartPins + 0x17) = 0x35;\n        }\n        else if (pin1 == 0x40011400) {\n          _DAT_40023824 = _DAT_40023824 & 0xffffffdf;\n          _DAT_40023844 = _DAT_40023844 | 0x20;\n          *(undefined *)(uartPins + 0x11) = 5;\n          *(undefined *)(uartPins + 0x17) = 0x47;\n        }\n        else if (pin1 == 0x40007800) {\n          _DAT_40023820 = _DAT_40023820 & 0xbfffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x40000000;\n          *(undefined *)(uartPins + 0x11) = 6;\n          *(undefined *)(uartPins + 0x17) = 0x52;\n        }\n        else if (pin1 == 0x40007c00) {\n          _DAT_40023820 = _DAT_40023820 & 0x7fffffff;\n          _DAT_40023840 = _DAT_40023840 | 0x80000000;\n          *(undefined *)(uartPins + 0x11) = 7;\n          *(undefined *)(uartPins + 0x17) = 0x53;\n        }\n        gpioPortClock = set_GPIO_Port_Clock((uint)((int)*(short *)((int)uartPins + 0x5a) << 0x18) >> 0x1c);\n        pinFunction = pinmap_function((int)*(short *)((int)uartPins + 0x5a),&DAT_08005c10);\n        pinBitMask = 1 << (*(ushort *)((int)uartPins + 0x5a) & 0xf) & 0xffff;\n        pinConfigValue = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        pinConfigBitOffset = (pinFunction << 0x1a) >> 0x1e;\n        pullConfiguration = (pinFunction << 0x11) >> 0x19;\n        gpioInitConfig = 3;\n        HAL_GPIO_Init(gpioPortClock,&pinBitMask);\n        gpioPortClock = set_GPIO_Port_Clock((uint)((int)*(short *)(uartPins + 0x16) << 0x18) >> 0x1c);\n        pinFunction = pinmap_function((int)*(short *)(uartPins + 0x16),&DAT_08005ca0);\n        pinBitMask = 1 << (*(ushort *)(uartPins + 0x16) & 0xf) & 0xffff;\n        pinConfigValue = (pinFunction >> 3 & 1) << 4 | pinFunction & 7;\n        pinConfigBitOffset = (pinFunction << 0x1a) >> 0x1e;\n        HAL_GPIO_Init(gpioPortClock,&pinBitMask);\n        (&DAT_200002b4)[*(byte *)(uartPins + 0x11)] = uartPins + 1;\n        uartPins[1] = *uartPins;\n        uartPins[2] = uartPins[0x12];\n        uartPins[3] = uartPins[0x13];\n        uartPins[4] = uartPins[0x14];\n        uartPins[5] = uartPins[0x15];\n        uartPins[6] = 0xc;\n        uartPins[7] = 0;\n        uartPins[8] = 0;\n        HAL_UART_Init(uartPins + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003978": "configure_uart_pins_08003978",
                "param_1": "uartPins",
                "iVar1": "pin1",
                "iVar2": "pin2",
                "uVar3": "gpioPortClock",
                "uVar4": "pinFunction",
                "local_2c": "pinBitMask",
                "local_28": "pinConfigValue",
                "local_24": "pinConfigBitOffset",
                "local_20": "gpioInitConfig",
                "local_1c": "pullConfiguration"
            },
            "calling": [
                "begin",
                "uart_debug_init"
            ],
            "called": [
                "pinmap_peripheral",
                "pinmap_function",
                "HAL_UART_Init",
                "HAL_GPIO_Init",
                "pinmap_merge_peripheral",
                "iprintf",
                "set_GPIO_Port_Clock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003cc8": {
            "entrypoint": "0x08003cc8",
            "current_name": "initialize_uart_08003cc8",
            "code": "\nvoid initializeUART_08003cc8(void)\n\n{\n  int result;\n  undefined4 pinPeripheral;\n  \n  result = pinmap_peripheral(0x38,&DAT_08005ca0);\n  if (result != 0) {\n    pinPeripheral = pinmap_peripheral(0x38,&DAT_08005ca0);\n    DAT_2000008a = pinmap_pin(pinPeripheral,&DAT_08005c10);\n    DAT_20000088 = 0x38;\n    DAT_20000078 = 0x2580;\n    DAT_20000084 = 0;\n    DAT_2000007c = 0;\n    DAT_20000080 = 0;\n    uart_init(&DAT_20000030);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003cc8": "initialize_uart_08003cc8",
                "iVar1": "result",
                "uVar2": "pinPeripheral"
            },
            "calling": [
                "uart_debug_write"
            ],
            "called": [
                "pinmap_peripheral",
                "pinmap_pin",
                "uart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003d18": {
            "entrypoint": "0x08003d18",
            "current_name": "transmit_data_08003d18",
            "code": "\nuint transmitData_08003d18(undefined4 data,uint length)\n\n{\n  int startTick;\n  int peripheral;\n  uint i;\n  \n  startTick = HAL_GetTick();\n  peripheral = pinmap_peripheral(0x38,&DAT_08005ca0);\n  if (peripheral == 0) {\n    return 0;\n  }\n  for (i = 0;\n      (i < 10 &&\n      (((&DAT_200002b4)[i] == 0 ||\n       (peripheral = pinmap_peripheral(0x38,&DAT_08005ca0), *(int *)(&DAT_200002b4)[i] != peripheral))));\n      i = i + 1 & 0xff) {\n  }\n  if (9 < i) {\n    if ((9 < DAT_20000074) && (uart_debug_init(), 9 < DAT_20000074)) {\n      return 0;\n    }\n    i = (uint)DAT_20000074;\n  }\n  do {\n    peripheral = HAL_UART_Transmit((&DAT_200002b4)[i],data,length & 0xffff,1000);\n    if (peripheral == 0) {\n      return length;\n    }\n    peripheral = HAL_GetTick();\n  } while ((uint)(peripheral - startTick) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003d18": "transmit_data_08003d18",
                "param_1": "data",
                "param_2": "length",
                "iVar1": "startTick",
                "iVar2": "peripheral",
                "uVar3": "i"
            },
            "calling": [
                "_write"
            ],
            "called": [
                "pinmap_peripheral",
                "HAL_GetTick",
                "HAL_UART_Transmit",
                "uart_debug_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003dd0": {
            "entrypoint": "0x08003dd0",
            "current_name": "is_uart_state_high_08003dd0",
            "code": "\nbool is_uart_state_high_08003dd0(int input)\n\n{\n  uint uart_state;\n  \n  uart_state = HAL_UART_GetState((&DAT_200002b4)[*(byte *)(input + 0x44)]);\n  return (uart_state & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_08003dd0": "is_uart_state_high_08003dd0",
                "param_1": "input",
                "uVar1": "uart_state"
            },
            "calling": [
                "uart_attach_rx_callback",
                "uart_getc"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003df4": {
            "entrypoint": "0x08003df4",
            "current_name": "is_uart_state_valid_08003df4",
            "code": "\nbool is_uart_state_valid_08003df4(int input_value)\n\n{\n  uint uart_state;\n  \n  uart_state = HAL_UART_GetState((&DAT_200002b4)[*(byte *)(input_value + 0x44)]);\n  return (uart_state & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_08003df4": "is_uart_state_valid_08003df4",
                "param_1": "input_value",
                "uVar1": "uart_state"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "HAL_UART_GetState"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e18": {
            "entrypoint": "0x08003e18",
            "current_name": "receive_serial_data_08003e18",
            "code": "\nundefined4 receiveSerialData_08003e18(int dataLength,undefined *dataBuffer,undefined4 param3,undefined4 param4)\n\n{\n  int isSerialActive;\n  \n  if (dataLength == 0) {\n    return 0xffffffff;\n  }\n  isSerialActive = serial_rx_active();\n  if (isSerialActive == 0) {\n    *dataBuffer = *(undefined *)(dataLength + 0x45);\n    HAL_UART_Receive_IT((&DAT_200002b4)[*(byte *)(dataLength + 0x44)],dataLength + 0x45,1,&DAT_200002b4,\n                        param4);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08003e18": "receive_serial_data_08003e18",
                "param_1": "dataLength",
                "param_2": "dataBuffer",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "isSerialActive"
            },
            "calling": [
                "_rx_complete_irq"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003e54": {
            "entrypoint": "0x08003e54",
            "current_name": "initialize_serial_communication_08003e54",
            "code": "\nvoid initializeSerialCommunication_08003e54(int serialDevice,undefined4 data,undefined4 unusedParameter1,undefined4 unusedParameter2)\n\n{\n  int isSerialRxActive;\n  uint offset;\n  \n  if (serialDevice != 0) {\n    isSerialRxActive = serial_rx_active();\n    if (isSerialRxActive == 0) {\n      offset = (uint)*(byte *)(serialDevice + 0x44);\n      *(undefined4 *)(&DAT_20000214 + offset * 4) = data;\n      *(int *)(&DAT_2000023c + offset * 4) = serialDevice;\n      setInterruptPriority((int)*(char *)(serialDevice + 0x5c),0,1,offset,unusedParameter2);\n      enableInterrupt((int)*(char *)(serialDevice + 0x5c));\n      HAL_UART_Receive_IT((&DAT_200002b4)[*(byte *)(serialDevice + 0x44)],serialDevice + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003e54": "initialize_serial_communication_08003e54",
                "param_1": "serialDevice",
                "param_2": "data",
                "param_3": "unusedParameter1",
                "param_4": "unusedParameter2",
                "iVar1": "isSerialRxActive",
                "uVar2": "offset",
                "HAL_NVIC_SetPriority": "setInterruptPriority",
                "HAL_NVIC_EnableIRQ": "enableInterrupt"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "HAL_UART_Receive_IT",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority",
                "serial_rx_active"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eac": {
            "entrypoint": "0x08003eac",
            "current_name": "initialize_peripheral_08003eac",
            "code": "\nvoid initializePeripheral_08003eac(int peripheralAddress,undefined4 peripheralValue)\n\n{\n  byte peripheralIndex;\n  \n  if (peripheralAddress != 0) {\n    peripheralIndex = *(byte *)(peripheralAddress + 0x44);\n    *(undefined4 *)(&DAT_20000264 + (uint)peripheralIndex * 4) = peripheralValue;\n    *(int *)(&DAT_2000028c + (uint)peripheralIndex * 4) = peripheralAddress;\n    HAL_NVIC_SetPriority((int)*(char *)(peripheralAddress + 0x5c),0,2);\n    HAL_NVIC_EnableIRQ((int)*(char *)(peripheralAddress + 0x5c));\n    HAL_UART_Transmit_IT\n              ((&DAT_200002b4)[*(byte *)(peripheralAddress + 0x44)],\n               *(int *)(peripheralAddress + 0x68) + (uint)*(ushort *)(peripheralAddress + 0x6e),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003eac": "initialize_peripheral_08003eac",
                "param_1": "peripheralAddress",
                "param_2": "peripheralValue",
                "bVar1": "peripheralIndex"
            },
            "calling": [
                "FUN_080042e8"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "HAL_NVIC_EnableIRQ",
                "HAL_NVIC_SetPriority"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f00": {
            "entrypoint": "0x08003f00",
            "current_name": "find_value_index_08003f00",
            "code": "\nuint find_value_index_08003f00(int value)\n\n{\n  uint index;\n  \n  if (value == 0) {\n    index = 10;\n  }\n  else {\n    index = 0;\n    while( true ) {\n      if (9 < index) {\n        return index;\n      }\n      if (value == (&DAT_200002b4)[index]) break;\n      index = index + 1 & 0xff;\n    }\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_08003f00": "find_value_index_08003f00",
                "param_1": "value",
                "uVar1": "index"
            },
            "calling": [
                "HAL_UART_TxCpltCallback",
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f24": {
            "entrypoint": "0x08003f24",
            "current_name": "execute_uart_command_08003f24",
            "code": "\nvoid executeUartCommand_08003f24(void)\n\n{\n  uint uartIndex;\n  \n  uartIndex = uart_index();\n  if (uartIndex < 10) {\n    (**(code **)(&DAT_20000214 + uartIndex * 4))(*(undefined4 *)(&DAT_2000023c + uartIndex * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f24": "execute_uart_command_08003f24",
                "uVar1": "uartIndex"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f48": {
            "entrypoint": "0x08003f48",
            "current_name": "transmit_uart_data_08003f48",
            "code": "\nvoid transmitUARTData_08003f48(void)\n\n{\n  uint uartIndex;\n  int result;\n  int uartDescriptor;\n  \n  uartIndex = uart_index();\n  uartDescriptor = *(int *)(&DAT_2000028c + uartIndex * 4);\n  if ((uartIndex < 10) && (result = (**(code **)(&DAT_20000264 + uartIndex * 4))(uartDescriptor), result != -1)) {\n    HAL_UART_Transmit_IT\n              ((&DAT_200002b4)[*(byte *)(uartDescriptor + 0x44)],\n               *(int *)(uartDescriptor + 0x68) + (uint)*(ushort *)(uartDescriptor + 0x6e),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f48": "transmit_uart_data_08003f48",
                "uVar1": "uartIndex",
                "iVar2": "result",
                "iVar3": "uartDescriptor"
            },
            "calling": [
                "UART_EndTransmit_IT"
            ],
            "called": [
                "HAL_UART_Transmit_IT",
                "uart_index"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f94": {
            "entrypoint": "0x08003f94",
            "current_name": "FUNC_08003f94",
            "code": "\nvoid FUNC_08003f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f94": "FUNC_08003f94"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004094": {
            "entrypoint": "0x08004094",
            "current_name": "allocate_memory_08004094",
            "code": "\nundefined * allocateMemory_08004094(int size)\n\n{\n  undefined *memoryPointer;\n  \n  if (DAT_200002dc == (undefined *)0x0) {\n    DAT_200002dc = &DAT_20000678;\n  }\n  memoryPointer = DAT_200002dc;\n  if (DAT_200002dc + size <= &stack0x00000000) {\n    DAT_200002dc = DAT_200002dc + size;\n    return memoryPointer;\n  }\n  DAT_20000674 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004094": "allocate_memory_08004094",
                "param_1": "size",
                "puVar1": "memoryPointer"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d0": {
            "entrypoint": "0x080040d0",
            "current_name": "get_error_code_080040d0",
            "code": "\nErrorCode get_error_code_080040d0(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040d0": "get_error_code_080040d0",
                "undefined4": "ErrorCode"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040d6": {
            "entrypoint": "0x080040d6",
            "current_name": "set_memory_page_size_080040d6",
            "code": "\nundefined4 setMemoryPageSize_080040d6(undefined4 newValue,int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040d6": "set_memory_page_size_080040d6",
                "param_1": "newValue",
                "param_2": "memoryAddress"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e0": {
            "entrypoint": "0x080040e0",
            "current_name": "get_return_value_080040e0",
            "code": "\nundefined4 getReturnValue_080040e0(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080040e0": "get_return_value_080040e0"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e4": {
            "entrypoint": "0x080040e4",
            "current_name": "initialize_080040e4",
            "code": "\nundefined4 initialize_080040e4(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e4": "initialize_080040e4"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "do_nothing_080040e8",
            "code": "\nvoid do_nothing_080040e8(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "do_nothing_080040e8",
                "undefined4": "void"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040ec": {
            "entrypoint": "0x080040ec",
            "current_name": "write_debug_message_080040ec",
            "code": "\nvoid write_debug_message_080040ec(undefined4 arg1,undefined4 message,undefined4 size,undefined4 arg4)\n\n{\n  uart_debug_write(message,size,size,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040ec": "write_debug_message_080040ec",
                "param_1": "arg1",
                "param_2": "message",
                "param_3": "size",
                "param_4": "arg4"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_debug_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040f8": {
            "entrypoint": "0x080040f8",
            "current_name": "run_infinite_loop_080040f8",
            "code": "\nvoid run_infinite_loop_080040f8(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080040f8": "run_infinite_loop_080040f8"
            },
            "calling": [
                "_exit",
                "abort"
            ],
            "called": [
                "_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040fc": {
            "entrypoint": "0x080040fc",
            "current_name": "initialize_data_080040fc",
            "code": "\nundefined4 initializeData_080040fc(void)\n\n{\n  DAT_20000674 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080040fc": "initialize_data_080040fc"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800410c": {
            "entrypoint": "0x0800410c",
            "current_name": "check_success_0800410c",
            "code": "\nundefined4 check_success_0800410c(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800410c": "check_success_0800410c"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "configure_pin_08004110",
            "code": "\nvoid configurePin_08004110(uint pinNumber,undefined4 configOption,undefined4 configValue,undefined *pinMap)\n\n{\n  int result;\n  undefined *pinData;\n  int selectedPin;\n  \n  if (pinNumber < 0x60) {\n    selectedPin = (int)*(short *)(&DAT_08005d3c + pinNumber * 2);\n    pinData = &DAT_08005d3c;\n  }\n  else {\n    selectedPin = -1;\n    pinData = pinMap;\n  }\n  if (selectedPin != -1) {\n    result = checkIfPinConfigured(selectedPin,&DAT_200002e0,configValue,pinData,pinMap);\n    if (result != 0) {\n      result = checkPinInPinMap(selectedPin,&DAT_08005a18);\n      if (result == 0) {\n        result = checkPinInPinMap(selectedPin,&DAT_08005a3c);\n        if (result != 0) {\n          stopPwm(selectedPin);\n        }\n      }\n      else {\n        stopDac(selectedPin);\n      }\n      resetPinConfigured(selectedPin,&DAT_200002e0);\n    }\n    switch(configOption) {\n    case 0:\n      initializeDigitalIo(selectedPin,0);\n      break;\n    case 1:\n      initializeDigitalIo(selectedPin,1,0);\n      break;\n    case 2:\n      initializeDigitalIo(selectedPin,0,1);\n      break;\n    case 3:\n      initializeDigitalIo(selectedPin,0,2);\n    }\n    setPinConfigured(selectedPin,&DAT_2000030c);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "configure_pin_08004110",
                "param_1": "pinNumber",
                "param_2": "configOption",
                "param_3": "configValue",
                "param_4": "pinMap",
                "iVar1": "result",
                "iVar3": "selectedPin",
                "puVar2": "pinData",
                "is_pin_configured": "checkIfPinConfigured",
                "pin_in_pinmap": "checkPinInPinMap",
                "pwm_stop": "stopPwm",
                "dac_stop": "stopDac",
                "reset_pin_configured": "resetPinConfigured",
                "digital_io_init": "initializeDigitalIo",
                "set_pin_configured": "setPinConfigured"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "dac_stop",
                "reset_pin_configured",
                "pwm_stop",
                "digital_io_init",
                "set_pin_configured",
                "is_pin_configured",
                "pin_in_pinmap"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041bc": {
            "entrypoint": "0x080041bc",
            "current_name": "configure_pin_and_write_data_080041bc",
            "code": "\nvoid configurePinAndWriteData_080041bc(uint pinIndex,undefined4 data,undefined4 configParam,undefined *configData)\n\n{\n  int isPinConfigured;\n  undefined4 gpioPort;\n  undefined *pinConfigPtr;\n  uint pinConfig;\n  \n  if (pinIndex < 0x60) {\n    pinConfig = (uint)*(short *)(&DAT_08005d3c + pinIndex * 2);\n    pinConfigPtr = &DAT_08005d3c;\n  }\n  else {\n    pinConfig = 0xffffffff;\n    pinConfigPtr = configData;\n  }\n  if ((pinConfig != 0xffffffff) &&\n     (isPinConfigured = is_pin_configured(pinConfig,&DAT_2000030c,configParam,pinConfigPtr,configData), isPinConfigured != 0)) {\n    gpioPort = get_GPIO_Port((pinConfig << 0x18) >> 0x1c);\n    digital_io_write(gpioPort,1 << (pinConfig & 0xf) & 0xffff,data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041bc": "configure_pin_and_write_data_080041bc",
                "param_1": "pinIndex",
                "param_2": "data",
                "param_3": "configParam",
                "param_4": "configData",
                "iVar1": "isPinConfigured",
                "uVar2": "gpioPort",
                "puVar3": "pinConfigPtr",
                "uVar4": "pinConfig"
            },
            "calling": [
                "FUN_08000600",
                "getRxBuffer",
                "sendTxBuffer"
            ],
            "called": [
                "digital_io_write",
                "is_pin_configured",
                "get_GPIO_Port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "get_current_millis_08004204",
            "code": "\nvoid getCurrentMillis_08004204(void)\n\n{\n  GetCurrentMilli();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "get_current_millis_08004204"
            },
            "calling": [
                "poll",
                "sendTxBuffer"
            ],
            "called": [
                "GetCurrentMilli"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004240": {
            "entrypoint": "0x08004240",
            "current_name": "calculate_offset_08004240",
            "code": "\nushort calculate_offset_08004240(int base_address)\n\n{\n  return (*(short *)(base_address + 0x138) + 0x40) - *(short *)(base_address + 0x13a) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_08004240": "calculate_offset_08004240",
                "param_1": "base_address"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042ac": {
            "entrypoint": "0x080042ac",
            "current_name": "process_uart_input_080042ac",
            "code": "\nvoid process_uart_input_080042ac(int uart_handle)\n\n{\n  int read_result;\n  ushort new_index;\n  undefined received_data;\n  \n  read_result = uart_getc(uart_handle,&received_data);\n  if ((read_result == 0) &&\n     (new_index = *(short *)(uart_handle + 100) + 1U & 0x3f, new_index != *(ushort *)(uart_handle + 0x66))) {\n    *(undefined *)(*(int *)(uart_handle + 0x60) + (uint)*(ushort *)(uart_handle + 100)) = received_data;\n    *(ushort *)(uart_handle + 100) = new_index;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080042ac": "process_uart_input_080042ac",
                "param_1": "uart_handle",
                "iVar1": "read_result",
                "uVar2": "new_index",
                "local_9": "received_data"
            },
            "calling": [],
            "called": [
                "uart_getc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080042e8": {
            "entrypoint": "0x080042e8",
            "current_name": "initialize_data_080042e8",
            "code": "\nundefined4 initializeData_080042e8(int dataAddress,undefined newValue)\n\n{\n  byte byteValue;\n  byte maskedValue;\n  int incrementedValue;\n  \n  *(undefined *)(dataAddress + 0x10) = 1;\n  incrementedValue = *(ushort *)(dataAddress + 0x140) + 1;\n  byteValue = (byte)incrementedValue;\n  maskedValue = byteValue & 0x7f;\n  if (incrementedValue == 0) {\n    maskedValue = -(-byteValue & 0x7f);\n  }\n  do {\n  } while (*(ushort *)(dataAddress + 0x142) == (ushort)maskedValue);\n  *(undefined *)(*(int *)(dataAddress + 0x13c) + (uint)*(ushort *)(dataAddress + 0x140)) = newValue;\n  *(ushort *)(dataAddress + 0x140) = (ushort)maskedValue;\n  incrementedValue = serial_tx_active(dataAddress + 0xd4);\n  if (incrementedValue == 0) {\n    uart_attach_tx_callback(dataAddress + 0xd4,&LAB_0800420c_1);\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080042e8": "initialize_data_080042e8",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "bVar1": "byteValue",
                "bVar2": "maskedValue",
                "iVar3": "incrementedValue"
            },
            "calling": [],
            "called": [
                "serial_tx_active",
                "uart_attach_tx_callback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004338": {
            "entrypoint": "0x08004338",
            "current_name": "FUNC_08004338",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800433e) */\n/* WARNING: Removing unreachable block (ram,0x08004350) */\n/* WARNING: Removing unreachable block (ram,0x08004346) */\n/* WARNING: Removing unreachable block (ram,0x08004358) */\n\nvoid FUNC_08004338(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004338": "FUNC_08004338"
            },
            "calling": [
                "main"
            ],
            "called": [
                "available"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004364": {
            "entrypoint": "0x08004364",
            "current_name": "initialize_function_08004364",
            "code": "\nvoid initializeFunction_08004364(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x134) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x138) = 0;\n  *(undefined2 *)(baseAddress + 0x13a) = 0;\n  *(int *)(baseAddress + 0x13c) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x140) = 0;\n  *(undefined2 *)(baseAddress + 0x142) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004364": "initialize_function_08004364",
                "param_1": "baseAddress"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004388": {
            "entrypoint": "0x08004388",
            "current_name": "initialize_serial_08004388",
            "code": "\nvoid initializeSerial_08004388(int serialPort,undefined4 baudRate,byte config)\n\n{\n  uint configMask;\n  byte configBits;\n  int configValue;\n  code *jumpTable;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x144) = config;\n  configBits = config & 7;\n  if (configBits == 4) {\n    configValue = 7;\n  }\n  else if (configBits == 6) {\n    configValue = 8;\n  }\n  else if (configBits == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    uart_init(serialPort + 0xd4);\n    uart_attach_rx_callback(serialPort + 0xd4,0x80042ad);\n    return;\n  }\n  jumpTable = (code *)0x8004432;\n  __assert_func(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n                ,299,\"void HardwareSerial::begin(long unsigned int, byte)\");\n  if (configMask < 0x60) {\n    uRam0000012e = *(undefined2 *)(&DAT_08005d3c + configMask * 2);\n  }\n  else {\n    uRam0000012e = 0xffff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004388": "initialize_serial_08004388",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "config",
                "extraout_r1": "configMask",
                "bVar1": "configBits",
                "iVar2": "configValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "FUN_08000600"
            ],
            "called": [
                "uart_attach_rx_callback",
                "uart_init",
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004444": {
            "entrypoint": "0x08004444",
            "current_name": "update_data_08004444",
            "code": "\nvoid updateData_08004444(int address,uint value)\n\n{\n  undefined2 newValue;\n  code *jumpTable;\n  \n  if (value < 0x60) {\n    newValue = *(undefined2 *)(&DAT_08005d3c + value * 2);\n  }\n  else {\n    newValue = 0xffff;\n  }\n  *(undefined2 *)(address + 0x12e) = newValue;\n                    /* WARNING: Could not recover jumptable at 0x08004452. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004444": "update_data_08004444",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "newValue",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004460": {
            "entrypoint": "0x08004460",
            "current_name": "set_object_value_08004460",
            "code": "\nvoid setObjectValue_08004460(int objectAddress,uint index)\n\n{\n  undefined2 value;\n  \n  if (index < 0x60) {\n    value = *(undefined2 *)(&DAT_08005d3c + index * 2);\n  }\n  else {\n    value = 0xffff;\n  }\n  *(undefined2 *)(objectAddress + 300) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004460": "set_object_value_08004460",
                "param_1": "objectAddress",
                "param_2": "index",
                "uVar1": "value"
            },
            "calling": [
                "HardwareSerial"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800447c": {
            "entrypoint": "0x0800447c",
            "current_name": "initialize_device_0800447c",
            "code": "\nundefined4 *\ninitializeDevice_0800447c(undefined4 *device,undefined4 pinNumber,undefined4 rxConfig,undefined4 txConfig)\n\n{\n  undefined2 pinValue;\n  \n  device[1] = 0;\n  device[2] = 1000;\n  *device = &PTR_FUN_080042e8_1_08005ed4;\n  if (device == &DAT_20000338) {\n    setRx(&DAT_20000338,0x4c,rxConfig,&DAT_20000338,txConfig);\n    setTx(&DAT_20000338,0x4d);\n  }\n  else {\n    pinValue = pinmap_pin(pinNumber,&DAT_08005c10);\n    *(undefined2 *)((int)device + 0x12e) = pinValue;\n    pinValue = pinmap_pin(pinNumber,&DAT_08005ca0);\n    *(undefined2 *)(device + 0x4b) = pinValue;\n  }\n  init(device);\n  return device;\n}\n\n",
            "renaming": {
                "FUN_0800447c": "initialize_device_0800447c",
                "param_1": "device",
                "param_2": "pinNumber",
                "param_3": "rxConfig",
                "param_4": "txConfig",
                "uVar1": "pinValue"
            },
            "calling": [
                "FUN_080044d8"
            ],
            "called": [
                "setRx",
                "init",
                "pinmap_pin",
                "setTx"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080044d8": {
            "entrypoint": "0x080044d8",
            "current_name": "initialize_serial_080044d8",
            "code": "\nvoid initializeSerial_080044d8(int startCondition,int errorCode,undefined4 serialConfig,undefined4 portNumber)\n\n{\n  if (startCondition != 1) {\n    return;\n  }\n  if (errorCode == 0xffff) {\n    createSerialConnection(&DAT_20000338,0x40004800,serialConfig,0xffff,portNumber);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080044d8": "initialize_serial_080044d8",
                "param_1": "startCondition",
                "param_2": "errorCode",
                "param_3": "serialConfig",
                "param_4": "portNumber",
                "HardwareSerial": "createSerialConnection"
            },
            "calling": [],
            "called": [
                "HardwareSerial"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004544": {
            "entrypoint": "0x08004544",
            "current_name": "initialize_data_08004544",
            "code": "\nvoid initializeData_08004544(undefined4 *dataPtr,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *dataPtr = &DAT_08005f28;\n  *(undefined *)(dataPtr + 1) = value1;\n  *(undefined *)((int)dataPtr + 5) = value2;\n  *(undefined *)((int)dataPtr + 6) = value3;\n  *(undefined *)((int)dataPtr + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004544": "initialize_data_08004544",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "(int)param_1": "(int)dataPtr"
            },
            "calling": [
                "FUN_08004560"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004560": {
            "entrypoint": "0x08004560",
            "current_name": "reset_ip_address_08004560",
            "code": "\nvoid resetIPAddress_08004560(int isFirstParamOne,int isSecondParamFFFF)\n\n{\n  if ((isFirstParamOne == 1) && (isSecondParamFFFF == 0xffff)) {\n    IPAddress(&DAT_20000480,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004560": "reset_ip_address_08004560",
                "param_1": "isFirstParamOne",
                "param_2": "isSecondParamFFFF"
            },
            "calling": [],
            "called": [
                "IPAddress"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004640": {
            "entrypoint": "0x08004640",
            "current_name": "combine_offsets_08004640",
            "code": "\nuint combine_offsets_08004640(int offset1,uint offset2)\n\n{\n  return offset2 | offset1 << 8;\n}\n\n",
            "renaming": {
                "FUN_08004640": "combine_offsets_08004640",
                "param_1": "offset1",
                "param_2": "offset2"
            },
            "calling": [
                "process_FC3",
                "process_FC15",
                "validateRequest",
                "process_FC6",
                "process_FC5",
                "process_FC16",
                "process_FC1"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004646": {
            "entrypoint": "0x08004646",
            "current_name": "FUNC_08004646",
            "code": "\nvoid FUNC_08004646(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004646": "FUNC_08004646"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004648": {
            "entrypoint": "0x08004648",
            "current_name": "initialize_system_08004648",
            "code": "\nvoid initialize_system_08004648(void)\n\n{\n  set_priority_grouping(3);\n  initialize_hardware_configuration();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004648": "initialize_system_08004648",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "initialize_hw_config_08000d8e": "initialize_hardware_configuration"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "FUN_08000d8e",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004658": {
            "entrypoint": "0x08004658",
            "current_name": "initialize_and_run_08004658",
            "code": "\nvoid initializeAndRun_08004658(void)\n\n{\n  initializeVariant();\n  setupDevice();\n  do {\n    runLoop();\n    processSerialEvents();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004658": "initialize_and_run_08004658",
                "initVariant": "initializeVariant",
                "setup": "setupDevice",
                "loop": "runLoop",
                "serialEventRun": "processSerialEvents"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "setup",
                "serialEventRun",
                "initVariant",
                "loop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004678": {
            "entrypoint": "0x08004678",
            "current_name": "count_bits_08004678",
            "code": "\nchar countBits_08004678(uint number)\n\n{\n  char bitCount;\n  \n  bitCount = '\\0';\n  for (; number != 1; number = number >> 1) {\n    bitCount = bitCount + '\\x01';\n  }\n  return bitCount;\n}\n\n",
            "renaming": {
                "FUN_08004678": "count_bits_08004678",
                "param_1": "number",
                "cVar1": "bitCount"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b4": {
            "entrypoint": "0x080046b4",
            "current_name": "initialize_data_080046b4",
            "code": "\nvoid initializeData_080046b4(int flag,int value,undefined4 var3,undefined4 var4)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_20000488 = 6;\n    DAT_20000494 = 0;\n    DAT_2000049c = 7;\n    DAT_200004a8 = 0;\n    DAT_200004b0 = 8;\n    DAT_200004bc = 0;\n    DAT_200004c4 = 9;\n    DAT_200004d0 = 0;\n    DAT_200004d8 = 10;\n    DAT_200004e4 = 0;\n    DAT_200004ec = 0x17;\n    DAT_200004f8 = 0;\n    DAT_20000500 = 0x17;\n    DAT_2000050c = 0;\n    DAT_20000514 = 0x17;\n    DAT_20000520 = 0;\n    DAT_20000528 = 0x17;\n    DAT_20000534 = 0;\n    DAT_2000053c = 0x17;\n    DAT_20000548 = 0;\n    DAT_20000550 = 0x28;\n    DAT_2000055c = 0;\n    DAT_20000564 = 0x28;\n    DAT_20000570 = 0;\n    DAT_20000578 = 0x28;\n    DAT_20000584 = 0;\n    DAT_2000058c = 0x28;\n    DAT_20000598 = 0;\n    DAT_200005a0 = 0x28;\n    DAT_200005ac = 0;\n    DAT_200005b4 = 0x28;\n    DAT_200005c0 = 0;\n    registerExitCallback(0,&exitCallback,&DAT_20000000,&DAT_20000488,var4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b4": "initialize_data_080046b4",
                "param_1": "flag",
                "param_2": "value",
                "param_3": "var3",
                "param_4": "var4",
                "__aeabi_atexit": "registerExitCallback",
                "LAB_0800468c_1": "exitCallback",
                "&LAB_0800468c_1": "&exitCallback"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047c0": {
            "entrypoint": "0x080047c0",
            "current_name": "check_and_execute_function_080047c0",
            "code": "\nvoid checkAndExecuteFunction_080047c0(int inputParam)\n\n{\n  int pinId;\n  \n  if (*(int *)(inputParam + 8) != 0) {\n    (**(code **)(inputParam + 0xc))();\n    return;\n  }\n  __throw_bad_function_call();\n  pinId = get_pin_id();\n  if ((&DAT_20000494)[pinId * 5] != 0) {\n    checkAndExecuteFunction_080047c0();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047c0": "check_and_execute_function_080047c0",
                "param_1": "inputParam",
                "iVar1": "pinId"
            },
            "calling": [
                "HAL_GPIO_EXTI_Callback"
            ],
            "called": [
                "__throw_bad_function_call"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047d0": {
            "entrypoint": "0x080047d0",
            "current_name": "check_and_invoke_func_080047d0",
            "code": "\nvoid check_and_invoke_func_080047d0(void)\n\n{\n  int pin_id;\n  \n  pin_id = retrieve_pin_id();\n  if ((&DAT_20000494)[pin_id * 5] != 0) {\n    invoke_function();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047d0": "check_and_invoke_func_080047d0",
                "iVar1": "pin_id",
                "get_pin_id": "retrieve_pin_id",
                "operator()": "invoke_function"
            },
            "calling": [
                "HAL_GPIO_EXTI_IRQHandler"
            ],
            "called": [
                "operator()",
                "get_pin_id"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047fe": {
            "entrypoint": "0x080047fe",
            "current_name": "register_exit_function_080047fe",
            "code": "\nvoid registerExitFunction_080047fe(undefined4 exitFunction,undefined4 exitPriority)\n\n{\n  __cxa_atexit(exitPriority,exitFunction);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080047fe": "register_exit_function_080047fe",
                "param_1": "exitFunction",
                "param_2": "exitPriority"
            },
            "calling": [
                "__static_initialization_and_destruction_0"
            ],
            "called": [
                "__cxa_atexit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004808": {
            "entrypoint": "0x08004808",
            "current_name": "print_assertion_failed_message_08004808",
            "code": "\nvoid printAssertionFailedMessage_08004808(undefined4 file,undefined4 lineNumber,char *assertionMessage,undefined4 functionName)\n\n{\n  undefined4 fileOutput;\n  char *extraInfo;\n  undefined8 abortReturnVal;\n  undefined4 functionNameBackup;\n  \n  fileOutput = *(undefined4 *)(DAT_200000a0 + 0xc);\n  functionNameBackup = functionName;\n  if (assertionMessage == (char *)0x0) goto LAB_0800482c;\n  extraInfo = \", function: \";\n  do {\n    fiprintf(fileOutput,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionName,file,lineNumber,\n             extraInfo,assertionMessage,functionNameBackup);\n    abortReturnVal = abort();\n    lineNumber = (undefined4)((ulonglong)abortReturnVal >> 0x20);\n    fileOutput = (undefined4)abortReturnVal;\nLAB_0800482c:\n    assertionMessage = \"\";\n    extraInfo = assertionMessage;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004808": "print_assertion_failed_message_08004808",
                "param_1": "file",
                "param_2": "lineNumber",
                "param_3": "assertionMessage",
                "param_4": "functionName",
                "uVar1": "fileOutput",
                "pcVar2": "extraInfo",
                "uVar3": "abortReturnVal",
                "uVar4": "functionNameBackup"
            },
            "calling": [
                "begin"
            ],
            "called": [
                "fiprintf",
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004844": {
            "entrypoint": "0x08004844",
            "current_name": "left_shift_uint64_08004844",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800484c) */\n\nlonglong leftShiftUint64_08004844(undefined4 flags,uint value)\n\n{\n  return (ulonglong)value << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08004844": "left_shift_uint64_08004844",
                "param_1": "flags",
                "param_2": "value"
            },
            "calling": [
                "__aeabi_atexit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004860": {
            "entrypoint": "0x08004860",
            "current_name": "print_formatted_data_08004860",
            "code": "\nvoid printFormattedData_08004860(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 arg2_copy;\n  undefined4 arg3_copy;\n  \n  arg2_copy = arg2;\n  arg3_copy = arg3;\n  _vfiprintf_r(DAT_200000a0,formatString,arg1,&arg2_copy,formatString,&arg2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004860": "print_formatted_data_08004860",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "arg2_copy",
                "uStack_4": "arg3_copy"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "execute_functions_08004884",
            "code": "\nvoid executeFunctions_08004884(void)\n\n{\n  int counter;\n  \n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (*(code *)(&DAT_08006008)[counter])();\n  }\n  _init();\n  for (counter = 0; counter != 10; counter = counter + 1) {\n    (*(code *)(&DAT_08006008)[counter])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004884": "execute_functions_08004884",
                "iVar1": "counter"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "premain",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048cc": {
            "entrypoint": "0x080048cc",
            "current_name": "fill_memory_080048cc",
            "code": "\nvoid fillMemory_080048cc(undefined *destination,undefined value,int size)\n\n{\n  undefined *endPtr;\n  \n  endPtr = destination + size;\n  for (; destination != endPtr; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048cc": "fill_memory_080048cc",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "endPtr"
            },
            "calling": [
                "__sfp",
                "__sfmoreglue",
                "std.isra.0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080048dc": {
            "entrypoint": "0x080048dc",
            "current_name": "allocate_memory_080048dc",
            "code": "\nvoid allocateMemory_080048dc(undefined4 *result,int size,undefined4 param_3,undefined4 param_4)\n\n{\n  int *temp;\n  int **tempArr;\n  int **tempPtr;\n  int **currentPtr;\n  int **previousPtr;\n  int **newPtr;\n  bool isLastNode;\n  \n  if (size == 0) {\n    return;\n  }\n  newPtr = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newPtr = (int **)((int)newPtr + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  currentPtr = (int **)&DAT_200005c8;\n  if (DAT_200005c8 == (int **)0x0) {\n    newPtr[1] = (int *)0x0;\n    tempPtr = tempArr;\n    DAT_200005c8 = newPtr;\n  }\n  else {\n    currentPtr = DAT_200005c8;\n    if (newPtr < DAT_200005c8) {\n      tempPtr = (int **)*newPtr;\n      currentPtr = (int **)((int)newPtr + (int)tempPtr);\n      isLastNode = DAT_200005c8 == currentPtr;\n      if (isLastNode) {\n        currentPtr = (int **)*DAT_200005c8;\n        DAT_200005c8 = (int **)DAT_200005c8[1];\n      }\n      newPtr[1] = (int *)DAT_200005c8;\n      DAT_200005c8 = newPtr;\n      if (isLastNode) {\n        currentPtr = (int **)((int)currentPtr + (int)tempPtr);\n        *newPtr = (int *)currentPtr;\n      }\n    }\n    else {\n      do {\n        previousPtr = currentPtr;\n        currentPtr = (int **)previousPtr[1];\n        if (currentPtr == (int **)0x0) break;\n      } while (currentPtr <= newPtr);\n      tempPtr = (int **)*previousPtr;\n      if ((int **)((int)previousPtr + (int)tempPtr) == newPtr) {\n        tempPtr = (int **)((int)tempPtr + (int)*newPtr);\n        *previousPtr = (int *)tempPtr;\n        if (currentPtr == (int **)((int)previousPtr + (int)tempPtr)) {\n          temp = *currentPtr;\n          currentPtr = (int **)currentPtr[1];\n          previousPtr[1] = (int *)currentPtr;\n          tempPtr = (int **)((int)tempPtr + (int)temp);\n          *previousPtr = (int *)tempPtr;\n        }\n      }\n      else if (newPtr < (int **)((int)previousPtr + (int)tempPtr)) {\n        *result = 0xc;\n      }\n      else {\n        tempPtr = (int **)((int)newPtr + (int)*newPtr);\n        isLastNode = currentPtr == tempPtr;\n        if (isLastNode) {\n          tempPtr = (int **)*currentPtr;\n          currentPtr = (int **)currentPtr[1];\n        }\n        newPtr[1] = (int *)currentPtr;\n        if (isLastNode) {\n          tempPtr = (int **)((int)tempPtr + (int)*newPtr);\n          *newPtr = (int *)tempPtr;\n        }\n        previousPtr[1] = (int *)newPtr;\n      }\n    }\n  }\n  __malloc_unlock(result,tempPtr,currentPtr,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080048dc": "allocate_memory_080048dc",
                "param_1": "result",
                "param_2": "size",
                "piVar1": "temp",
                "extraout_r1": "tempArr",
                "ppiVar2": "tempPtr",
                "ppiVar3": "currentPtr",
                "ppiVar4": "previousPtr",
                "ppiVar5": "newPtr",
                "bVar6": "isLastNode"
            },
            "calling": [
                "__swsetup_r",
                "abort"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004978": {
            "entrypoint": "0x08004978",
            "current_name": "allocate_memory_08004978",
            "code": "\nuint allocateMemory_08004978(undefined4 *sizePointer,uint requestedSize)\n\n{\n  uint *currentBlock;\n  int blockDifference;\n  uint *previousBlock;\n  uint blockDifferenceAdjusted;\n  uint *currentBlockNext;\n  uint newBlockSize;\n  \n  newBlockSize = (requestedSize + 3 & 0xfffffffc) + 8;\n  if (newBlockSize < 0xc) {\n    newBlockSize = 0xc;\n  }\n  if (((int)newBlockSize < 0) || (newBlockSize < requestedSize)) {\n    *sizePointer = 0xc;\n  }\n  else {\n    __malloc_lock();\n    currentBlock = DAT_200005c8;\n    currentBlockNext = DAT_200005c8;\n    while (previousBlock = currentBlock, previousBlock != (uint *)0x0) {\n      blockDifferenceAdjusted = *previousBlock - newBlockSize;\n      if (-1 < (int)blockDifferenceAdjusted) {\n        if (blockDifferenceAdjusted < 0xc) {\n          if (currentBlockNext == previousBlock) {\n            currentBlock = (uint *)currentBlockNext[1];\n          }\n          else {\n            currentBlock = (uint *)previousBlock[1];\n          }\n          if (currentBlockNext != previousBlock) {\n            currentBlockNext[1] = (uint)currentBlock;\n            currentBlockNext = previousBlock;\n            currentBlock = DAT_200005c8;\n          }\n        }\n        else {\n          *previousBlock = blockDifferenceAdjusted;\n          *(uint *)((int)previousBlock + blockDifferenceAdjusted) = newBlockSize;\n          currentBlockNext = (uint *)((int)previousBlock + blockDifferenceAdjusted);\n          currentBlock = DAT_200005c8;\n        }\n        goto LAB_080049dc;\n      }\n      currentBlockNext = previousBlock;\n      currentBlock = (uint *)previousBlock[1];\n    }\n    if (DAT_200005cc == 0) {\n      DAT_200005cc = _sbrk_r(sizePointer);\n    }\n    currentBlock = (uint *)_sbrk_r(sizePointer,newBlockSize);\n    if ((currentBlock != (uint *)0xffffffff) &&\n       ((currentBlockNext = (uint *)((int)currentBlock + 3U & 0xfffffffc), currentBlock == currentBlockNext ||\n        (blockDifference = _sbrk_r(sizePointer,(int)currentBlockNext - (int)currentBlock), blockDifference != -1)))) {\n      *currentBlockNext = newBlockSize;\n      currentBlock = DAT_200005c8;\nLAB_080049dc:\n      DAT_200005c8 = currentBlock;\n      __malloc_unlock(sizePointer);\n      newBlockSize = (int)currentBlockNext + 0xbU & 0xfffffff8;\n      blockDifference = newBlockSize - (int)(currentBlockNext + 1);\n      if (blockDifference != 0) {\n        *(int *)((int)currentBlockNext + blockDifference) = -blockDifference;\n        return newBlockSize;\n      }\n      return newBlockSize;\n    }\n    *sizePointer = 0xc;\n    __malloc_unlock(sizePointer);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004978": "allocate_memory_08004978",
                "param_1": "sizePointer",
                "param_2": "requestedSize",
                "puVar1": "currentBlock",
                "iVar2": "blockDifference",
                "puVar3": "previousBlock",
                "uVar4": "blockDifferenceAdjusted",
                "puVar5": "currentBlockNext",
                "uVar6": "newBlockSize"
            },
            "calling": [
                "__smakebuf_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a34": {
            "entrypoint": "0x08004a34",
            "current_name": "process_byte_08004a34",
            "code": "\nuint processByte_08004a34(int arg1,byte byteToProcess,byte **bytePointer)\n\n{\n  int tempVar1;\n  byte *tempVar2;\n  byte *tempVar3;\n  uint result;\n  \n  tempVar2 = bytePointer[2] + -1;\n  bytePointer[2] = tempVar2;\n  if ((-1 < (int)tempVar2) ||\n     (((int)bytePointer[6] <= (int)tempVar2 && (tempVar2 = (byte *)(uint)byteToProcess, tempVar2 != (byte *)0xa))))\n  {\n    tempVar2 = *bytePointer;\n    *bytePointer = tempVar2 + 1;\n    *tempVar2 = byteToProcess;\n    return (uint)byteToProcess;\n  }\n  if ((arg1 != 0) && (*(int *)(arg1 + 0x18) == 0)) {\n    __sinit();\n  }\n  if (bytePointer == (byte **)&DAT_08005fc0) {\n    bytePointer = *(byte ***)(arg1 + 4);\n  }\n  else if (bytePointer == (byte **)&DAT_08005fe0) {\n    bytePointer = *(byte ***)(arg1 + 8);\n  }\n  else if (bytePointer == (byte **)&DAT_08005fa0) {\n    bytePointer = *(byte ***)(arg1 + 0xc);\n  }\n  bytePointer[2] = bytePointer[6];\n  tempVar3 = (byte *)(uint)*(ushort *)(bytePointer + 3);\n  tempVar1 = (int)tempVar3 << 0x1c;\n  if (((tempVar1 < 0) && (tempVar3 = bytePointer[4], tempVar3 != (byte *)0x0)) ||\n     (tempVar1 = __swsetup_r(arg1,bytePointer,tempVar1,tempVar3,tempVar2), tempVar1 == 0)) {\n    tempVar1 = (int)*bytePointer - (int)bytePointer[4];\n    result = (uint)byteToProcess;\n    if ((tempVar1 < (int)bytePointer[5]) || (tempVar1 = _fflush_r(arg1,bytePointer), tempVar1 == 0)) {\n      bytePointer[2] = bytePointer[2] + -1;\n      tempVar2 = *bytePointer;\n      *bytePointer = tempVar2 + 1;\n      *tempVar2 = byteToProcess;\n      if ((byte *)(tempVar1 + 1) != bytePointer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(bytePointer + 3) << 0x1f)) {\n          return result;\n        }\n        if (result != 10) {\n          return result;\n        }\n      }\n      tempVar1 = _fflush_r(arg1,bytePointer);\n      if (tempVar1 == 0) {\n        return result;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004a34": "process_byte_08004a34",
                "param_1": "arg1",
                "param_2": "byteToProcess",
                "param_3": "bytePointer",
                "iVar1": "tempVar1",
                "pbVar2": "tempVar2",
                "pbVar3": "tempVar3",
                "uVar4": "result"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swsetup_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a60": {
            "entrypoint": "0x08004a60",
            "current_name": "write_data_to_file_08004a60",
            "code": "\nint writeDataToFile_08004a60(undefined4 fileDescriptor,undefined4 buffer,undefined *data,int dataLength)\n\n{\n  int bytesWritten;\n  undefined *endOfData;\n  int remainingData;\n  \n  endOfData = data + dataLength;\n  remainingData = dataLength;\n  do {\n    if (data == endOfData) {\n      return 0;\n    }\n    bytesWritten = __sfputc_r(fileDescriptor,*data,buffer,dataLength,remainingData);\n    dataLength = bytesWritten + 1;\n    data = data + 1;\n  } while (dataLength != 0);\n  return bytesWritten;\n}\n\n",
            "renaming": {
                "FUN_08004a60": "write_data_to_file_08004a60",
                "param_1": "fileDescriptor",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "dataLength",
                "puVar2": "endOfData",
                "iVar3": "remainingData",
                "iVar1": "bytesWritten"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "printf_format_08004a84",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08004c58) */\n\nint printf_format_08004a84(int stream,undefined4 *format_flag,byte *format_string,int *arg_list)\n\n{\n  int result;\n  int *arg;\n  bool is_number;\n  byte *current_char;\n  byte *next_char;\n  int unaff_r9;\n  int temp;\n  int *arg_list_ptr;\n  uint flags;\n  int precision_width;\n  undefined4 arg_width;\n  int field_width;\n  int char_count;\n  byte conversion_specifier;\n  undefined flag_space;\n  undefined flag_plus;\n  undefined flag_zero;\n  undefined4 arg_arg;\n  \n  arg_list_ptr = arg_list;\n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (format_flag == &DAT_08005fc0) {\n    format_flag = *(undefined4 **)(stream + 4);\n  }\n  else if (format_flag == (undefined4 *)&DAT_08005fe0) {\n    format_flag = *(undefined4 **)(stream + 8);\n  }\n  else if (format_flag == (undefined4 *)&DAT_08005fa0) {\n    format_flag = *(undefined4 **)(stream + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format_flag + 3) << 0x1c)) || (format_flag[4] == 0)) &&\n     (temp = __swsetup_r(stream,format_flag), temp != 0)) {\n    return -1;\n  }\n  char_count = 0;\n  flag_space = 0x20;\n  flag_plus = 0x30;\n  current_char = format_string;\nLAB_08004ac6:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_08004b7c;\n  goto LAB_08004ad0;\nLAB_08004b7c:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08004ac6;\nLAB_08004ad0:\n  temp = (int)next_char - (int)format_string;\n  if (temp != 0) {\n    result = __sfputs_r(stream,format_flag,format_string,temp);\n    if (result == -1) {\nLAB_08004c70:\n      if ((int)((uint)*(ushort *)(format_flag + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return char_count;\n    }\n    char_count = char_count + temp;\n  }\n  if (*next_char == 0) goto LAB_08004c70;\n  flags = 0;\n  field_width = 0;\n  precision_width = -1;\n  arg_width = 0;\n  flag_zero = 0;\n  arg_arg = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    temp = memchr(\"#-0+ \",*current_char);\n    format_string = current_char + 1;\n    if (temp == 0) break;\n    flags = 1 << (temp + 0xf7ffa094U & 0xff) | flags;\n    current_char = format_string;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag_zero = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag_zero = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    arg = arg_list_ptr + 1;\n    temp = *arg_list_ptr;\n    arg_list_ptr = arg;\n    if (temp < 0) {\n      field_width = -temp;\n      flags = flags | 2;\n      goto LAB_08004bae;\n    }\n  }\n  else {\n    is_number = false;\n    temp = field_width;\n    format_string = current_char;\n    while( true ) {\n      if (9 < *format_string - 0x30) break;\n      temp = temp * 10 + (*format_string - 0x30);\n      is_number = true;\n      format_string = format_string + 1;\n    }\n    if (!is_number) goto LAB_08004bae;\n  }\n  field_width = temp;\nLAB_08004bae:\n  if (*format_string == 0x2e) {\n    if (format_string[1] == 0x2a) {\n      precision_width = *arg_list_ptr;\n      if (precision_width < 0) {\n        precision_width = -1;\n      }\n      format_string = format_string + 2;\n      arg_list_ptr = arg_list_ptr + 1;\n    }\n    else {\n      is_number = false;\n      precision_width = 0;\n      temp = 0;\n      while( true ) {\n        format_string = format_string + 1;\n        if (9 < *format_string - 0x30) break;\n        temp = temp * 10 + (*format_string - 0x30);\n        is_number = true;\n      }\n      if (is_number) {\n        precision_width = temp;\n      }\n    }\n  }\n  temp = memchr(&DAT_08005f72,*format_string,3);\n  if (temp != 0) {\n    flags = flags | 0x40 << (temp + 0xf7ffa08eU & 0xff);\n    format_string = format_string + 1;\n  }\n  conversion_specifier = *format_string;\n  format_string = format_string + 1;\n  temp = memchr(\"efgEFG\",conversion_specifier,6);\n  if (temp == 0) {\n    unaff_r9 = _printf_i(stream,&flags,format_flag,0x8004a61,&arg_list_ptr);\n    if (unaff_r9 == -1) goto LAB_08004c70;\n  }\n  else {\n    arg_list_ptr = (int *)(((int)arg_list_ptr + 7U & 0xfffffff8) + 8);\n  }\n  char_count = char_count + unaff_r9;\n  current_char = format_string;\n  goto LAB_08004ac6;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "printf_format_08004a84",
                "param_1": "stream",
                "param_2": "format_flag",
                "param_3": "format_string",
                "param_4": "arg_list",
                "iVar1": "result",
                "piVar2": "arg",
                "bVar3": "is_number",
                "pbVar4": "current_char",
                "pbVar5": "next_char",
                "iVar6": "temp",
                "local_8c": "arg_list_ptr",
                "local_88": "flags",
                "local_84": "precision_width",
                "local_80": "arg_width",
                "local_7c": "field_width",
                "local_74": "char_count",
                "local_70": "conversion_specifier",
                "local_6f": "flag_space",
                "local_6e": "flag_plus",
                "local_45": "flag_zero",
                "local_30": "arg_arg"
            },
            "calling": [
                "fiprintf",
                "iprintf"
            ],
            "called": [
                "memchr",
                "__swsetup_r",
                "_printf_i",
                "__sinit",
                "__sfputs_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb0": {
            "entrypoint": "0x08004cb0",
            "current_name": "process_data_08004cb0",
            "code": "\nundefined4\nprocessData_08004cb0(undefined4 input,uint *data,uint *output,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint maxValue;\n  uint counter;\n  bool flag;\n  \n  maxValue = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    maxValue = data[2];\n  }\n  *output = maxValue;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output = maxValue + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output = *output + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)data + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + maxValue + 0x43) = 0x30;\n    *(undefined *)((int)data + maxValue + 0x44) = *(undefined *)((int)data + 0x45);\n    maxValue = maxValue + 2;\n  }\n  index = (*callback)(input,param,(int)data + 0x43,maxValue);\n  if (index != -1) {\n    maxValue = data[3];\n    flag = (*data & 6) == 4;\n    if (flag) {\n      maxValue = maxValue - *output;\n    }\n    if (flag) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    else {\n      maxValue = 0;\n    }\n    if ((int)data[4] < (int)data[2]) {\n      maxValue = maxValue + (data[2] - data[4]);\n    }\n    counter = 0;\n    while( true ) {\n      if (maxValue == counter) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      counter = counter + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004cb0": "process_data_08004cb0",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index",
                "iVar2": "result",
                "uVar3": "maxValue",
                "uVar4": "counter",
                "bVar5": "flag"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d9c": {
            "entrypoint": "0x08004d9c",
            "current_name": "printf_wrapper_08004d9c",
            "code": "\nuint printf_wrapper_08004d9c(undefined4 format_string,uint *arg_list,undefined4 width,code *put_func,uint **parg)\n\n{\n  byte first_byte;\n  int result;\n  uint *arg_pointer;\n  int put_result;\n  char *hex_string;\n  uint base;\n  uint **parg_pointer;\n  char **char_pptr;\n  uint value;\n  uint arg1;\n  char *char_ptr;\n  char *string_result;\n  uint length [2];\n  \n  first_byte = *(byte *)(arg_list + 6);\n  string_result = (char *)((int)arg_list + 0x43);\n  if (first_byte != 0x6e) {\n    if (first_byte < 0x6f) {\n      if (first_byte != 99) {\n        if (first_byte < 100) {\n          if (first_byte == 0) goto LAB_08004f56;\n          if (first_byte != 0x58) goto LAB_08004dcc;\n          *(undefined *)((int)arg_list + 0x45) = 0x58;\n          hex_string = \"0123456789ABCDEF\";\nLAB_08004ee6:\n          base = *arg_list;\n          arg_pointer = *parg;\n          *parg = arg_pointer + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)arg_pointer;\n          }\n          else {\n            value = *arg_pointer;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *arg_list = base | 0x20;\n          }\n          if (value == 0) {\n            *arg_list = *arg_list & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08004e7c:\n          *(undefined *)((int)arg_list + 0x43) = 0;\n        }\n        else {\n          if ((first_byte != 100) && (first_byte != 0x69)) goto LAB_08004dcc;\n          value = *arg_list;\n          arg_pointer = *parg;\n          if ((value & 0x80) == 0) {\n            *parg = arg_pointer + 1;\n            if ((value & 0x40) == 0) goto LAB_08004dec;\n            value = (uint)(short)*(ushort *)arg_pointer;\n          }\n          else {\n            *parg = arg_pointer + 1;\nLAB_08004dec:\n            value = *arg_pointer;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)arg_list + 0x43) = 0x2d;\n          }\n          hex_string = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        arg1 = arg_list[1];\n        arg_list[2] = arg1;\n        char_ptr = string_result;\n        if ((int)arg1 < 0) {\n          if (value != 0) goto LAB_08004f1a;\nLAB_08004fc8:\n          *(char *)((int)arg_list + 0x42) = *hex_string;\n          char_ptr = (char *)((int)arg_list + 0x42);\n        }\n        else {\n          *arg_list = *arg_list & 0xfffffffb;\n          if (value == 0) {\n            if (arg1 != 0) goto LAB_08004fc8;\n          }\n          else {\nLAB_08004f1a:\n            do {\n              arg1 = value / base;\n              char_ptr = char_ptr + -1;\n              *char_ptr = hex_string[value - base * arg1];\n              value = arg1;\n            } while (arg1 != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*arg_list << 0x1f) < 0)) && ((int)arg_list[1] <= (int)arg_list[4]))\n        {\n          char_ptr[-1] = '0';\n          char_ptr = char_ptr + -1;\n        }\n        arg_list[4] = (int)string_result - (int)char_ptr;\n        string_result = char_ptr;\n        goto LAB_08004ec2;\n      }\n      arg_pointer = *parg;\n      *parg = arg_pointer + 1;\n      *(char *)((int)arg_list + 0x42) = (char)*arg_pointer;\nLAB_08004e2c:\n      string_result = (char *)((int)arg_list + 0x42);\n      value = 1;\n    }\n    else {\n      if (first_byte != 0x73) {\n        if (first_byte < 0x74) {\n          if (first_byte == 0x6f) {\nLAB_08004e52:\n            value = *arg_list;\n            arg_pointer = *parg;\n            if ((value & 0x80) == 0) {\n              *parg = arg_pointer + 1;\n              if ((value & 0x40) == 0) goto LAB_08004e60;\n              value = (uint)*(ushort *)arg_pointer;\n            }\n            else {\n              *parg = arg_pointer + 1;\nLAB_08004e60:\n              value = *arg_pointer;\n            }\n            hex_string = \"0123456789ABCDEF\";\n            if (first_byte == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            goto LAB_08004e7c;\n          }\n          if (first_byte == 0x70) {\n            *arg_list = *arg_list | 0x20;\nLAB_08004e12:\n            *(undefined *)((int)arg_list + 0x45) = 0x78;\n            hex_string = \"0123456789abcdef\";\n            goto LAB_08004ee6;\n          }\n        }\n        else {\n          if (first_byte == 0x75) goto LAB_08004e52;\n          if (first_byte == 0x78) goto LAB_08004e12;\n        }\nLAB_08004dcc:\n        *(byte *)((int)arg_list + 0x42) = first_byte;\n        goto LAB_08004e2c;\n      }\n      char_pptr = (char **)*parg;\n      *parg = (uint *)(char_pptr + 1);\n      string_result = *char_pptr;\n      result = memchr(string_result,0,arg_list[1]);\n      if (result != 0) {\n        arg_list[1] = result - (int)string_result;\n      }\n      value = arg_list[1];\n    }\n    arg_list[4] = value;\n    *(undefined *)((int)arg_list + 0x43) = 0;\n    goto LAB_08004ec2;\n  }\n  value = *arg_list;\n  parg_pointer = (uint **)*parg;\n  base = arg_list[5];\n  if ((value & 0x80) == 0) {\n    *parg = (uint *)(parg_pointer + 1);\n    arg_pointer = *parg_pointer;\n    if ((value & 0x40) == 0) goto LAB_08004f42;\n    *(short *)arg_pointer = (short)base;\n  }\n  else {\n    *parg = (uint *)(parg_pointer + 1);\n    arg_pointer = *parg_pointer;\nLAB_08004f42:\n    *arg_pointer = base;\n  }\nLAB_08004f56:\n  arg_list[4] = 0;\nLAB_08004ec2:\n  result = _printf_common(format_string,arg_list,length,width,put_func);\n  if ((result == -1) || (result = (*put_func)(format_string,width,string_result,arg_list[4]), result == -1)) {\nLAB_08004ed6:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*arg_list << 0x1e) < 0) {\n      for (result = 0; result < (int)(arg_list[3] - length[0]); result = result + 1) {\n        put_result = (*put_func)(format_string,width,(int)arg_list + 0x19,1);\n        if (put_result == -1) goto LAB_08004ed6;\n      }\n    }\n    value = arg_list[3];\n    if ((int)arg_list[3] < (int)length[0]) {\n      value = length[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_08004d9c": "printf_wrapper_08004d9c",
                "param_1": "format_string",
                "param_2": "arg_list",
                "param_3": "width",
                "param_4": "put_func",
                "param_5": "parg",
                "bVar1": "first_byte",
                "iVar2": "result",
                "puVar3": "arg_pointer",
                "iVar4": "put_result",
                "pcVar5": "hex_string",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "arg1",
                "pcVar11": "char_ptr",
                "pcVar12": "string_result",
                "local_24": "length",
                "ppuVar7": "parg_pointer",
                "ppcVar8": "char_pptr"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "memchr",
                "_printf_common"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fdc": {
            "entrypoint": "0x08004fdc",
            "current_name": "print_formatted_string_08004fdc",
            "code": "\nvoid printFormattedString_08004fdc(undefined4 formatString,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int dataPointer;\n  undefined4 formatArg;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 arg3;\n  \n  dataPointer = DAT_200000a0;\n  formatArg = formatString;\n  arg1 = param2;\n  arg2 = param3;\n  arg3 = param4;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    __sinit(DAT_200000a0);\n  }\n  _vfiprintf_r(dataPointer,*(undefined4 *)(dataPointer + 8),formatString,&arg1,formatArg,&arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fdc": "print_formatted_string_08004fdc",
                "param_1": "formatString",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "dataPointer",
                "uVar2": "formatArg",
                "uStack_c": "arg1",
                "uStack_8": "arg2",
                "uStack_4": "arg3"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "_vfiprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800500c": {
            "entrypoint": "0x0800500c",
            "current_name": "allocate_memory_0800500c",
            "code": "\nvoid allocateMemory_0800500c(int *pointer,undefined4 size)\n\n{\n  int memoryAddress;\n  \n  DAT_20000674 = 0;\n  memoryAddress = _sbrk(size);\n  if ((memoryAddress == -1) && (DAT_20000674 != 0)) {\n    *pointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800500c": "allocate_memory_0800500c",
                "param_1": "pointer",
                "param_2": "size",
                "iVar1": "memoryAddress"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050d0": {
            "entrypoint": "0x080050d0",
            "current_name": "process_data_080050d0",
            "code": "\nuint processData_080050d0(undefined4 *outputParam,undefined4 *inputParam)\n\n{\n  int dataPtr;\n  uint result;\n  ushort value;\n  \n  dataPtr = DAT_200000a0;\n  if ((DAT_200000a0 != 0) && (*(int *)(DAT_200000a0 + 0x18) == 0)) {\n    initializeData(DAT_200000a0);\n  }\n  if (inputParam == &DAT_08005fc0) {\n    inputParam = *(undefined4 **)(dataPtr + 4);\n  }\n  else if (inputParam == (undefined4 *)&DAT_08005fe0) {\n    inputParam = *(undefined4 **)(dataPtr + 8);\n  }\n  else if (inputParam == (undefined4 *)&DAT_08005fa0) {\n    inputParam = *(undefined4 **)(dataPtr + 0xc);\n  }\n  value = *(ushort *)(inputParam + 3);\n  result = (uint)value;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *outputParam = 9;\n      goto LAB_08005100;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)inputParam[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputParam[0xd] != inputParam + 0x11) {\n          freeMemory(outputParam);\n        }\n        inputParam[0xd] = 0;\n      }\n      *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) & 0xffdb;\n      inputParam[1] = 0;\n      *inputParam = inputParam[4];\n    }\n    *(ushort *)(inputParam + 3) = *(ushort *)(inputParam + 3) | 8;\n  }\n  if ((inputParam[4] == 0) && ((*(ushort *)(inputParam + 3) & 0x280) != 0x200)) {\n    createBuffer(outputParam,inputParam);\n  }\n  value = *(ushort *)(inputParam + 3);\n  result = value & 1;\n  if ((value & 1) == 0) {\n    if (-1 < (int)((uint)value << 0x1e)) {\n      result = value2;\n    }\n    output1 = result;\n  }\n  else {\n    output1 = 0;\n    output2 = -value2;\n  }\n  if (inputParam[4] == 0) {\n    value = *(ushort *)(inputParam + 3);\n    result = (int)(short)value & 0x80;\n    if (result != 0) {\nLAB_08005100:\n      *(ushort *)(inputParam + 3) = value | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080050d0": "process_data_080050d0",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "iVar1": "dataPtr",
                "uVar2": "result",
                "uVar3": "value",
                "__sinit": "initializeData",
                "_free_r": "freeMemory",
                "__smakebuf_r": "createBuffer",
                "param_2[5]": "value2",
                "param_2[2]": "output1",
                "param_2[6]": "output2"
            },
            "calling": [
                "__sfputc_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080051ac": {
            "entrypoint": "0x080051ac",
            "current_name": "handle_error_080051ac",
            "code": "\nvoid handle_error_080051ac(void)\n\n{\n  uint *data_pointer;\n  int offset;\n  int *ptr;\n  int *ptr2;\n  uint value;\n  ushort flags;\n  int temp;\n  code *function_ptr;\n  int length;\n  uint original_value;\n  code *unrecovered_jumptable;\n  bool is_zero;\n  undefined8 result;\n  \n  raise(6);\n  unrecovered_jumptable = (code *)0x80051bb;\n  result = _exit(1);\n  ptr = (int *)((ulonglong)result >> 0x20);\n  data_pointer = (uint *)result;\n  flags = *(ushort *)(ptr + 3);\n  value = (uint)flags;\n  if ((int)(value << 0x1c) < 0) {\n    offset = ptr[4];\n    if (offset != 0) {\n      temp = value << 0x1e;\n      is_zero = temp == 0;\n      length = *ptr;\n      if (is_zero) {\n        temp = ptr[5];\n      }\n      *ptr = offset;\n      if (!is_zero) {\n        temp = 0;\n      }\n      ptr[2] = temp;\n      for (length = length - offset; 0 < length; length = length - temp) {\n        temp = (*(code *)ptr[10])(data_pointer,ptr[8],offset,length);\n        if (temp < 1) {\n          flags = *(ushort *)(ptr + 3);\n          goto LAB_080052b2;\n        }\n        offset = offset + temp;\n      }\n    }\n  }\n  else if (((0 < ptr[1]) || (0 < ptr[0x10])) &&\n          (function_ptr = (code *)ptr[0xb], function_ptr != (code *)0x0)) {\n    original_value = *data_pointer;\n    *data_pointer = 0;\n    if ((flags & 0x1000) == 0) {\n      offset = (*function_ptr)(data_pointer,ptr[8],value & 0x1000,1);\n      if ((offset == -1) && (value = *data_pointer, value != 0)) {\n        if ((value != 0x1d) && (value != 0x16)) {\n          *(ushort *)(ptr + 3) = *(ushort *)(ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*unrecovered_jumptable)();\n          return;\n        }\n        *data_pointer = original_value;\n        goto LAB_080051d6;\n      }\n    }\n    else {\n      offset = ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(ptr + 3) << 0x1d) < 0) &&\n       (offset = offset - ptr[1], ptr[0xd] != 0)) {\n      offset = offset - ptr[0x10];\n    }\n    offset = (*(code *)ptr[0xb])(data_pointer,ptr[8],offset,0);\n    flags = *(ushort *)(ptr + 3);\n    if ((offset == -1) &&\n       ((0x1d < *data_pointer || (-1 < (int)((0x20400001U >> (*data_pointer & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n      *(ushort *)(ptr + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jumptable)(0xffffffff);\n      return;\n    }\n    ptr[1] = 0;\n    *ptr = ptr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((offset != -1 || (*data_pointer == 0)))) {\n      ptr[0x15] = offset;\n    }\n    ptr2 = (int *)ptr[0xd];\n    *data_pointer = original_value;\n    if (ptr2 != (int *)0x0) {\n      if (ptr2 != ptr + 0x11) {\n        _free_r(data_pointer);\n      }\n      ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecovered_jumptable)();\n      return;\n    }\n  }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecovered_jumptable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080051ac": "handle_error_080051ac",
                "puVar1": "data_pointer",
                "iVar2": "offset",
                "piVar3": "ptr",
                "piVar4": "ptr2",
                "uVar5": "value",
                "uVar6": "flags",
                "iVar7": "temp",
                "pcVar8": "function_ptr",
                "iVar9": "length",
                "uVar10": "original_value",
                "UNRECOVERED_JUMPTABLE_00": "unrecovered_jumptable",
                "bVar11": "is_zero",
                "uVar12": "result"
            },
            "calling": [
                "__throw_bad_function_call",
                "__assert_func"
            ],
            "called": [
                "_exit",
                "_free_r",
                "raise"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052cc": {
            "entrypoint": "0x080052cc",
            "current_name": "decode_and_process_080052cc",
            "code": "\nundefined4 decode_and_process_080052cc(uint *input_data,int *processing_params_ptr)\n\n{\n  undefined4 return_value;\n  int temp_var_1;\n  int *temp_var_2;\n  uint temp_var_3;\n  ushort temp_var_4;\n  int temp_var_5;\n  undefined4 unused_register_1;\n  undefined4 unused_register_2;\n  code *function_ptr;\n  int loop_counter;\n  uint temp_var_6;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (processing_params_ptr[4] != 0) {\n    if ((input_data != (uint *)0x0) && (input_data[6] == 0)) {\n      __sinit();\n    }\n    if (processing_params_ptr == &DAT_08005fc0) {\n      processing_params_ptr = (int *)input_data[1];\n    }\n    else if (processing_params_ptr == (int *)&DAT_08005fe0) {\n      processing_params_ptr = (int *)input_data[2];\n    }\n    else if (processing_params_ptr == (int *)&DAT_08005fa0) {\n      processing_params_ptr = (int *)input_data[3];\n    }\n    if (*(short *)(processing_params_ptr + 3) != 0) {\n      temp_var_4 = *(ushort *)(processing_params_ptr + 3);\n      temp_var_3 = (uint)temp_var_4;\n      if ((int)(temp_var_3 << 0x1c) < 0) {\n        temp_var_1 = processing_params_ptr[4];\n        if (temp_var_1 != 0) {\n          temp_var_5 = temp_var_3 << 0x1e;\n          bVar10 = temp_var_5 == 0;\n          loop_counter = *processing_params_ptr;\n          if (bVar10) {\n            temp_var_5 = processing_params_ptr[5];\n          }\n          *processing_params_ptr = temp_var_1;\n          if (!bVar10) {\n            temp_var_5 = 0;\n          }\n          processing_params_ptr[2] = temp_var_5;\n          for (loop_counter = loop_counter - temp_var_1; 0 < loop_counter; loop_counter = loop_counter - temp_var_5) {\n            temp_var_5 = (*(code *)processing_params_ptr[10])(input_data,processing_params_ptr[8],temp_var_1,loop_counter,unused_register_1,unused_register_2);\n            if (temp_var_5 < 1) {\n              temp_var_4 = *(ushort *)(processing_params_ptr + 3);\n              goto LAB_080052b2;\n            }\n            temp_var_1 = temp_var_1 + temp_var_5;\n          }\n        }\n      }\n      else if (((0 < processing_params_ptr[1]) || (0 < processing_params_ptr[0x10])) &&\n              (function_ptr = (code *)processing_params_ptr[0xb], function_ptr != (code *)0x0)) {\n        temp_var_6 = *input_data;\n        *input_data = 0;\n        if ((temp_var_4 & 0x1000) == 0) {\n          temp_var_1 = (*function_ptr)(input_data,processing_params_ptr[8],temp_var_3 & 0x1000,1);\n          if ((temp_var_1 == -1) && (temp_var_3 = *input_data, temp_var_3 != 0)) {\n            if ((temp_var_3 != 0x1d) && (temp_var_3 != 0x16)) {\n              *(ushort *)(processing_params_ptr + 3) = *(ushort *)(processing_params_ptr + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x0800527c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              return_value = (*UNRECOVERED_JUMPTABLE_00)();\n              return return_value;\n            }\n            *input_data = temp_var_6;\n            goto LAB_080051d6;\n          }\n        }\n        else {\n          temp_var_1 = processing_params_ptr[0x15];\n        }\n        if (((int)((uint)*(ushort *)(processing_params_ptr + 3) << 0x1d) < 0) &&\n           (temp_var_1 = temp_var_1 - processing_params_ptr[1], processing_params_ptr[0xd] != 0)) {\n          temp_var_1 = temp_var_1 - processing_params_ptr[0x10];\n        }\n        temp_var_1 = (*(code *)processing_params_ptr[0xb])(input_data,processing_params_ptr[8],temp_var_1,0);\n        temp_var_4 = *(ushort *)(processing_params_ptr + 3);\n        if ((temp_var_1 == -1) &&\n           ((0x1d < *input_data || (-1 < (int)((0x20400001U >> (*input_data & 0xff)) << 0x1f))))) {\nLAB_080052b2:\n          *(ushort *)(processing_params_ptr + 3) = temp_var_4 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x080052bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return return_value;\n        }\n        processing_params_ptr[1] = 0;\n        *processing_params_ptr = processing_params_ptr[4];\n        if (((int)((uint)temp_var_4 << 0x13) < 0) && ((temp_var_1 != -1 || (*input_data == 0)))) {\n          processing_params_ptr[0x15] = temp_var_1;\n        }\n        temp_var_2 = (int *)processing_params_ptr[0xd];\n        *input_data = temp_var_6;\n        if (temp_var_2 != (int *)0x0) {\n          if (temp_var_2 != processing_params_ptr + 0x11) {\n            _free_r(input_data);\n          }\n          processing_params_ptr[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08005252. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          return_value = (*UNRECOVERED_JUMPTABLE_00)();\n          return return_value;\n        }\n      }\nLAB_080051d6:\n                    /* WARNING: Could not recover jumptable at 0x080051d8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      return_value = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080052cc": "decode_and_process_080052cc",
                "param_1": "input_data",
                "param_2": "processing_params_ptr",
                "uVar1": "return_value",
                "iVar2": "temp_var_1",
                "piVar3": "temp_var_2",
                "uVar4": "temp_var_3",
                "uVar5": "temp_var_4",
                "iVar6": "temp_var_5",
                "unaff_r4": "unused_register_1",
                "unaff_r5": "unused_register_2",
                "pcVar7": "function_ptr",
                "iVar8": "loop_counter",
                "uVar9": "temp_var_6"
            },
            "calling": [
                "__sfputc_r"
            ],
            "called": [
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800532c": {
            "entrypoint": "0x0800532c",
            "current_name": "initialize_data_0800532c",
            "code": "\nvoid initializeData_0800532c(undefined4 *data,undefined2 value1,undefined2 value2)\n\n{\n  *data = 0;\n  data[1] = 0;\n  data[2] = 0;\n  *(undefined2 *)(data + 3) = value1;\n  data[0x19] = 0;\n  *(undefined2 *)((int)data + 0xe) = value2;\n  data[4] = 0;\n  data[5] = 0;\n  data[6] = 0;\n  memset(data + 0x17,0,8);\n  data[9] = 0x8005609;\n  data[10] = 0x800562b;\n  data[0xb] = 0x8005663;\n  data[8] = data;\n  data[0xc] = &LAB_08005686_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800532c": "initialize_data_0800532c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005374": {
            "entrypoint": "0x08005374",
            "current_name": "allocate_memory_08005374",
            "code": "\nundefined4 * allocate_memory_08005374(undefined4 size,int count)\n\n{\n  undefined4 *ptr;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  ptr = (undefined4 *)_malloc_r(size,offset + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = count;\n    ptr[2] = ptr + 3;\n    memset(ptr + 3,0,offset + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_08005374": "allocate_memory_08005374",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053a0": {
            "entrypoint": "0x080053a0",
            "current_name": "initialize_parameters_080053a0",
            "code": "\nvoid initializeParameters_080053a0(undefined4 *parameters)\n\n{\n  undefined4 result;\n  undefined4 *tempPointer;\n  \n  if (parameters[6] == 0) {\n    parameters[0x12] = 0;\n    parameters[0x13] = 0;\n    parameters[0x14] = 0;\n    tempPointer = &DAT_200000a4;\n    parameters[10] = &someLabel;\n    if (parameters == &DAT_200000a4) {\n      tempPointer = (undefined4 *)0x1;\n    }\n    if (parameters == &DAT_200000a4) {\n      parameters[6] = tempPointer;\n    }\n    result = __sfp();\n    parameters[1] = result;\n    result = __sfp(parameters);\n    parameters[2] = result;\n    result = __sfp(parameters);\n    parameters[3] = result;\n    std_isra_0(parameters[1],4,0);\n    std_isra_0(parameters[2],9,1);\n    std_isra_0(parameters[3],0x12,2);\n    parameters[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080053a0": "initialize_parameters_080053a0",
                "param_1": "parameters",
                "uVar1": "result",
                "puVar2": "tempPointer",
                "LAB_08005320_1": "someLabel"
            },
            "calling": [
                "__swsetup_r",
                "__sfputc_r",
                "__sfp",
                "iprintf",
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "called": [
                "__sfp",
                "std.isra.0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005400": {
            "entrypoint": "0x08005400",
            "current_name": "initialize_data_structure_08005400",
            "code": "\nint * initializeDataStructure_08005400(undefined4 *dataStructure,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  int *currPtr1;\n  int *currPtr2;\n  int **ptrToPtr;\n  \n  if (DAT_200000bc == 0) {\n    __sinit(&DAT_200000a4);\n  }\n  ptrToPtr = (int **)&DAT_200000ec;\n  do {\n    currPtr2 = ptrToPtr[2];\n    currPtr1 = ptrToPtr[1];\n    while (currPtr1 = (int *)((int)currPtr1 + -1), -1 < (int)currPtr1) {\n      if (*(short *)(currPtr2 + 3) == 0) {\n        *(undefined2 *)((int)currPtr2 + 0xe) = 0xffff;\n        *(undefined2 *)(currPtr2 + 3) = 1;\n        currPtr2[0x19] = 0;\n        *currPtr2 = 0;\n        currPtr2[2] = 0;\n        currPtr2[1] = 0;\n        currPtr2[4] = 0;\n        currPtr2[5] = 0;\n        currPtr2[6] = 0;\n        memset(currPtr2 + 0x17,0,8,1,param4);\n        currPtr2[0xd] = 0;\n        currPtr2[0xe] = 0;\n        currPtr2[0x12] = 0;\n        currPtr2[0x13] = 0;\n        return currPtr2;\n      }\n      currPtr2 = currPtr2 + 0x1a;\n    }\n    if (*ptrToPtr == (int *)0x0) {\n      currPtr1 = (int *)__sfmoreglue(dataStructure,4);\n      *ptrToPtr = currPtr1;\n      if (currPtr1 == (int *)0x0) {\n        *dataStructure = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ptrToPtr = (int **)*ptrToPtr;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005400": "initialize_data_structure_08005400",
                "param_1": "dataStructure",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currPtr1",
                "piVar2": "currPtr2",
                "ppiVar3": "ptrToPtr"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset",
                "__sfmoreglue",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b4": {
            "entrypoint": "0x080054b4",
            "current_name": "check_file_access_080054b4",
            "code": "\nundefined4 check_file_access_080054b4(undefined4 file_descriptor,int file_info,undefined4 *result,uint *is_executable)\n\n{\n  int status;\n  undefined4 access_type;\n  undefined file_status_buffer [4];\n  uint file_permissions;\n  \n  if ((*(short *)(file_info + 0xe) < 0) ||\n     (status = _fstat_r(file_descriptor,(int)*(short *)(file_info + 0xe),file_status_buffer), status < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n      access_type = 0x40;\n      goto LAB_080054f4;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_permissions & 0xf000) == 0x2000);\n  }\n  access_type = 0x400;\nLAB_080054f4:\n  *result = access_type;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080054b4": "check_file_access_080054b4",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "result",
                "param_4": "is_executable",
                "iVar1": "status",
                "uVar2": "access_type",
                "auStack_4c": "file_status_buffer",
                "local_48": "file_permissions"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054fc": {
            "entrypoint": "0x080054fc",
            "current_name": "process_function_080054fc",
            "code": "\nvoid processFunction_080054fc(int input,int *output)\n\n{\n  ushort buffer;\n  int allocatedMemory;\n  int inputSize;\n  int *pointerToOutput;\n  \n  if (-1 < (int)((uint)*(ushort *)(output + 3) << 0x1e)) {\n    inputSize = input;\n    pointerToOutput = output;\n    buffer = __swhatbuf_r(input,output,&inputSize,&pointerToOutput);\n    allocatedMemory = _malloc_r(input,inputSize);\n    if (allocatedMemory != 0) {\n      *(undefined **)(input + 0x28) = &LAB_08005320_1;\n      *output = allocatedMemory;\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x80;\n      output[5] = inputSize;\n      output[4] = allocatedMemory;\n      if ((pointerToOutput != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(input,(int)*(short *)((int)output + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(output + 3) = buffer | *(ushort *)(output + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(output + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) & 0xfffc | 2;\n  }\n  *output = (int)output + 0x47;\n  output[4] = (int)output + 0x47;\n  output[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080054fc": "process_function_080054fc",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "buffer",
                "iVar2": "allocatedMemory",
                "local_18": "inputSize",
                "local_14": "pointerToOutput"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "__swhatbuf_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800557c": {
            "entrypoint": "0x0800557c",
            "current_name": "FUNC_0800557c",
            "code": "\nvoid FUNC_0800557c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557c": "FUNC_0800557c"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800557e": {
            "entrypoint": "0x0800557e",
            "current_name": "FUNC_0800557e",
            "code": "\nvoid FUNC_0800557e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800557e": "FUNC_0800557e"
            },
            "calling": [
                "_free_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080055d0": {
            "entrypoint": "0x080055d0",
            "current_name": "handle_signal_080055d0",
            "code": "\nint handleSignal_080055d0(uint signalNumber)\n\n{\n  int *signalArray;\n  undefined4 processId;\n  int signalHandler;\n  code *functionPointer;\n  undefined4 unusedRegister4;\n  undefined4 unusedRegister5;\n  undefined4 registerLink;\n  undefined4 *pointerToSignalArray;\n  \n  signalArray = DAT_200000a0;\n  pointerToSignalArray = &DAT_200000a0;\n  if (0x1f < signalNumber) {\n    *DAT_200000a0 = 0x16;\n    return -1;\n  }\n  signalHandler = DAT_200000a0[0x11];\n  if ((signalHandler != 0) && (functionPointer = *(code **)(signalHandler + signalNumber * 4), functionPointer != (code *)0x0)) {\n    if (functionPointer != (code *)0x1) {\n      if (functionPointer == (code *)0xffffffff) {\n        *DAT_200000a0 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(signalHandler + signalNumber * 4) = 0;\n      (*functionPointer)(signalNumber);\n    }\n    return 0;\n  }\n  processId = _getpid_r(DAT_200000a0);\n  DAT_20000674 = 0;\n  signalHandler = _kill(processId,signalNumber,signalNumber,0,pointerToSignalArray,unusedRegister4,unusedRegister5,registerLink);\n  if ((signalHandler == -1) && (DAT_20000674 != 0)) {\n    *signalArray = DAT_20000674;\n  }\n  return signalHandler;\n}\n\n",
            "renaming": {
                "FUN_080055d0": "handle_signal_080055d0",
                "param_1": "signalNumber",
                "piVar1": "signalArray",
                "uVar2": "processId",
                "iVar3": "signalHandler",
                "pcVar4": "functionPointer",
                "unaff_r4": "unusedRegister4",
                "unaff_r5": "unusedRegister5",
                "in_lr": "registerLink",
                "puVar5": "pointerToSignalArray"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_kill",
                "_getpid_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "FUN_08005604",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005608": {
            "entrypoint": "0x08005608",
            "current_name": "update_data_08005608",
            "code": "\nvoid updateData_08005608(undefined4 fileDescriptor,int dataAddress)\n\n{\n  int readResult;\n  uint updatedValue;\n  bool isReadSuccessful;\n  \n  readResult = _read_r(fileDescriptor,(int)*(short *)(dataAddress + 0xe));\n  isReadSuccessful = -1 < readResult;\n  if (isReadSuccessful) {\n    updatedValue = *(int *)(dataAddress + 0x54) + readResult;\n  }\n  else {\n    updatedValue = *(ushort *)(dataAddress + 0xc) & 0xffffefff;\n  }\n  if (isReadSuccessful) {\n    *(uint *)(dataAddress + 0x54) = updatedValue;\n  }\n  if (!isReadSuccessful) {\n    *(short *)(dataAddress + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005608": "update_data_08005608",
                "param_1": "fileDescriptor",
                "param_2": "dataAddress",
                "iVar1": "readResult",
                "uVar2": "updatedValue",
                "bVar3": "isReadSuccessful"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800562a": {
            "entrypoint": "0x0800562a",
            "current_name": "write_to_file_0800562a",
            "code": "\nvoid writeToFile_0800562a(int *fileDescriptor,int headerAddress,undefined4 buffer,undefined4 size)\n\n{\n  int writeResult;\n  undefined4 unused_register_4;\n  undefined4 unused_register_5;\n  undefined4 unused_link_register;\n  \n  if ((int)((uint)*(ushort *)(headerAddress + 0xc) << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(headerAddress + 0xe),0,2);\n  }\n  *(ushort *)(headerAddress + 0xc) = *(ushort *)(headerAddress + 0xc) & 0xefff;\n  DAT_20000674 = 0;\n  writeResult = _write((int)*(short *)(headerAddress + 0xe),buffer,size,size,size,unused_register_4,unused_register_5,\n                 unused_link_register);\n  if ((writeResult == -1) && (DAT_20000674 != 0)) {\n    *fileDescriptor = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800562a": "write_to_file_0800562a",
                "param_1": "fileDescriptor",
                "param_2": "headerAddress",
                "param_3": "buffer",
                "param_4": "size",
                "iVar1": "writeResult",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "unused_link_register"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005662": {
            "entrypoint": "0x08005662",
            "current_name": "update_file_position_08005662",
            "code": "\nvoid updateFilePosition_08005662(undefined4 fileDescriptor,int structPtr)\n\n{\n  int seekResult;\n  ushort flags;\n  bool isSeekError;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(structPtr + 0xe));\n  isSeekError = seekResult == -1;\n  if (isSeekError) {\n    flags = *(ushort *)(structPtr + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(structPtr + 0x54) = seekResult;\n    flags = *(ushort *)(structPtr + 0xc) | 0x1000;\n  }\n  if (isSeekError) {\n    *(ushort *)(structPtr + 0xc) = flags;\n  }\n  if (!isSeekError) {\n    *(ushort *)(structPtr + 0xc) = flags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005662": "update_file_position_08005662",
                "param_1": "fileDescriptor",
                "param_2": "structPtr",
                "iVar1": "seekResult",
                "uVar2": "flags",
                "bVar3": "isSeekError"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056d4": {
            "entrypoint": "0x080056d4",
            "current_name": "set_stat_value_080056d4",
            "code": "\nvoid setStatValue_080056d4(int *result,undefined4 fileDescriptor,undefined4 statBuffer,undefined4 length)\n\n{\n  int status;\n  \n  DAT_20000674 = 0;\n  status = _fstat(fileDescriptor,statBuffer,statBuffer,0,length);\n  if ((status == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056d4": "set_stat_value_080056d4",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "statBuffer",
                "param_4": "length",
                "iVar1": "status"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080056f8": {
            "entrypoint": "0x080056f8",
            "current_name": "check_and_assign_tty_status_080056f8",
            "code": "\nvoid checkAndAssignTTYStatus_080056f8(int *result,undefined4 fileDescriptor)\n\n{\n  int isTTY;\n  \n  DAT_20000674 = 0;\n  isTTY = _isatty(fileDescriptor);\n  if ((isTTY == -1) && (DAT_20000674 != 0)) {\n    *result = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080056f8": "check_and_assign_tty_status_080056f8",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "iVar1": "isTTY"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005718": {
            "entrypoint": "0x08005718",
            "current_name": "seek_and_set_pointer_value_08005718",
            "code": "\nvoid seekAndSetPointerValue_08005718(int *newValuePointer,undefined4 fileDescriptor,undefined4 offset,undefined4 origin)\n\n{\n  int seekResult;\n  \n  DAT_20000674 = 0;\n  seekResult = _lseek(fileDescriptor,offset,origin,origin,origin);\n  if ((seekResult == -1) && (DAT_20000674 != 0)) {\n    *newValuePointer = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005718": "seek_and_set_pointer_value_08005718",
                "param_1": "newValuePointer",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "origin",
                "iVar1": "seekResult"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "read_and_assign_returned_value_0800573c",
            "code": "\nvoid readAndAssignReturnedValue_0800573c(int *output,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_20000674 = 0;\n  readResult = _read(fileDescriptor,buffer,count,count,count);\n  if ((readResult == -1) && (DAT_20000674 != 0)) {\n    *output = DAT_20000674;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800573c": "read_and_assign_returned_value_0800573c",
                "param_1": "output",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005760": {
            "entrypoint": "0x08005760",
            "current_name": "initialize_data_08005760",
            "code": "\nvoid initializeData_08005760(void)\n\n{\n  code *jumpTable;\n  \n  jumpTable = initializeData_08005760;\n  abort();\n  if (-1 < DAT_200005fc << 0x1f) {\n    DAT_200005fc = 1;\n  }\n  if (-1 < DAT_200005f8 << 0x1f) {\n    DAT_200005f8 = 1;\n  }\n  if (-1 < DAT_200005f4 << 0x1f) {\n    DAT_200005f4 = 1;\n  }\n  if (-1 < DAT_200005f0 << 0x1f) {\n    DAT_200005f0 = 1;\n  }\n  if (-1 < DAT_200005ec << 0x1f) {\n    DAT_200005ec = 1;\n  }\n  if (-1 < DAT_200005e8 << 0x1f) {\n    DAT_200005e8 = 1;\n  }\n  if (-1 < DAT_200005e4 << 0x1f) {\n    DAT_200005e4 = 1;\n  }\n  if (-1 < DAT_200005e0 << 0x1f) {\n    DAT_200005e0 = 1;\n  }\n  if (-1 < DAT_200005dc << 0x1f) {\n    DAT_200005dc = 1;\n  }\n  if (-1 < DAT_200005d8 << 0x1f) {\n    DAT_200005d8 = 1;\n  }\n  if (-1 < DAT_200005d4 << 0x1f) {\n    DAT_200005d4 = 1;\n  }\n  if (-1 < DAT_200005d0 << 0x1f) {\n    DAT_200005d0 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x080057f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005760": "initialize_data_08005760",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [
                "operator()"
            ],
            "called": [
                "abort"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080059f8": {
            "entrypoint": "0x080059f8",
            "current_name": "FUNC_080059f8",
            "code": "\nvoid FUNC_080059f8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080059f8": "FUNC_080059f8"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a04": {
            "entrypoint": "0x08005a04",
            "current_name": "FUNC_08005a04",
            "code": "\nvoid FUNC_08005a04(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a04": "FUNC_08005a04"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 117680,
    "layers": [
        [
            "FUN_080001ac",
            "FUN_08000230",
            "FUN_080002d0",
            "FUN_08000300",
            "FUN_080005e0",
            "FUN_080005e4",
            "FUN_08000600",
            "FUN_0800066c",
            "FUN_08000690",
            "FUN_080006b4",
            "FUN_08000728",
            "FUN_0800076c",
            "FUN_080007f0",
            "FUN_080008cc",
            "FUN_080008e2",
            "FUN_08000998",
            "FUN_08000a00",
            "FUN_08000a4e",
            "FUN_08000a7a",
            "FUN_08000b04",
            "FUN_08000b54",
            "FUN_08000c64",
            "FUN_08000c8c",
            "FUN_08000d3c",
            "FUN_08000d8e",
            "FUN_08000d98",
            "FUN_08000de4",
            "FUN_08000e18",
            "FUN_08000e30",
            "FUN_08000e3c",
            "FUN_08000e60",
            "FUN_08000ec4",
            "FUN_08000ee0",
            "FUN_08000f0c",
            "FUN_08000f2c",
            "FUN_08000f4e",
            "FUN_08000f56",
            "FUN_08000f72",
            "FUN_08000f8c",
            "FUN_08000fb4",
            "FUN_08001198",
            "FUN_080011a4",
            "FUN_080011c0",
            "FUN_0800124a",
            "FUN_08001256",
            "FUN_08001420",
            "FUN_08001440",
            "FUN_08001460",
            "FUN_080014ec",
            "FUN_08001578",
            "FUN_080015bc",
            "FUN_0800160e",
            "FUN_0800165a",
            "FUN_08001684",
            "FUN_0800171a",
            "FUN_08001864",
            "FUN_08001904",
            "FUN_080019a0",
            "FUN_08001ab0",
            "FUN_08001bfc",
            "FUN_08001d00",
            "FUN_08001e68",
            "FUN_08001f9c",
            "FUN_0800201c",
            "FUN_080023b4",
            "FUN_08002488",
            "FUN_080025e0",
            "FUN_080025ec",
            "FUN_0800260c",
            "FUN_0800262c",
            "FUN_0800268e",
            "FUN_080026ce",
            "FUN_08002848",
            "FUN_08002864",
            "FUN_080028d4",
            "FUN_080028f0",
            "FUN_08002940",
            "FUN_0800295c",
            "FUN_080029c8",
            "FUN_08002d0c",
            "FUN_08002d72",
            "FUN_08002dd0",
            "FUN_08002eb2",
            "FUN_08002efa",
            "FUN_08002f4c",
            "FUN_08002f66",
            "FUN_08002ffc",
            "FUN_0800312c",
            "FUN_08003138",
            "FUN_0800314e",
            "FUN_0800316c",
            "FUN_0800318c",
            "FUN_080031fc",
            "FUN_08003380",
            "FUN_0800339c",
            "FUN_080033c8",
            "FUN_080033d8",
            "FUN_0800340c",
            "FUN_08003414",
            "FUN_0800346c",
            "FUN_08003476",
            "FUN_08003486",
            "FUN_080034b6",
            "FUN_080034ce",
            "FUN_080034da",
            "FUN_080034f4",
            "FUN_08003506",
            "FUN_0800351e",
            "FUN_0800352e",
            "FUN_0800354a",
            "FUN_0800355e",
            "FUN_08003582",
            "FUN_08003594",
            "FUN_080035bc",
            "FUN_080035fc",
            "FUN_08003750",
            "FUN_08003754",
            "FUN_0800376e",
            "FUN_0800377c",
            "FUN_0800387c",
            "FUN_08003880",
            "FUN_080038d0",
            "FUN_08003900",
            "FUN_08003978",
            "FUN_08003cc8",
            "FUN_08003d18",
            "FUN_08003dd0",
            "FUN_08003df4",
            "FUN_08003e18",
            "FUN_08003e54",
            "FUN_08003eac",
            "FUN_08003f00",
            "FUN_08003f24",
            "FUN_08003f48",
            "FUN_08004094",
            "FUN_080040d0",
            "FUN_080040d6",
            "FUN_080040e0",
            "FUN_080040e4",
            "FUN_080040e8",
            "FUN_080040ec",
            "FUN_080040f8",
            "FUN_080040fc",
            "FUN_0800410c",
            "FUN_08004110",
            "FUN_080041bc",
            "FUN_08004204",
            "FUN_08004240",
            "FUN_080042ac",
            "FUN_080042e8",
            "FUN_08004364",
            "FUN_08004388",
            "FUN_08004444",
            "FUN_08004460",
            "FUN_0800447c",
            "FUN_080044d8",
            "FUN_08004544",
            "FUN_08004560",
            "FUN_08004640",
            "FUN_08004658",
            "FUN_08004678",
            "FUN_080046b4",
            "FUN_080047d0",
            "FUN_080047fe",
            "FUN_08004808",
            "FUN_08004844",
            "FUN_08004860",
            "FUN_08004884",
            "FUN_080048cc",
            "FUN_080048dc",
            "FUN_08004978",
            "FUN_08004a34",
            "FUN_08004a60",
            "FUN_08004a84",
            "FUN_08004cb0",
            "FUN_08004d9c",
            "FUN_08004fdc",
            "FUN_0800500c",
            "FUN_080050d0",
            "FUN_080051ac",
            "FUN_080052cc",
            "FUN_0800532c",
            "FUN_08005374",
            "FUN_080053a0",
            "FUN_08005400",
            "FUN_080054b4",
            "FUN_080054fc",
            "FUN_080055d0",
            "FUN_08005608",
            "FUN_0800562a",
            "FUN_08005662",
            "FUN_080056d4",
            "FUN_080056f8",
            "FUN_08005718",
            "FUN_0800573c"
        ],
        [
            "FUN_08000682",
            "FUN_08000c4c",
            "FUN_08004648"
        ],
        [
            "FUN_080047c0",
            "FUN_08005760"
        ]
    ],
    "locked_functions": []
}