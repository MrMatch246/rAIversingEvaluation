{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "calculate_new_values_00080164",
            "code": "\nvoid calculateNewValues_00080164(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  calculate_new_value_000806f8(&DAT_200708e8,0x5a);\n  calculate_new_value_000806f8(&DAT_200708d4,0x5a,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "calculate_new_values_00080164",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_and_check_system_000801e0",
            "code": "\nundefined8 initialize_and_check_system_000801e0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  initialize_data(&DAT_20070be8,0xe100,arg3,arg4,arg4);\n  check_bit(0xd,1);\n  check_bit(6,1);\n  check_bit(0x39,0);\n  check_bit(4,0);\n  check_bit(3,0);\n  check_bit(2,0);\n  initialize_bit(&DAT_200708d4,5);\n  initialize_bit(&DAT_200708e8,6);\n  calculate_new_values();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    perform_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_and_check_system_000801e0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "update_and_initialize_data_000813dc": "initialize_data",
                "update_and_check_bit_00080f0c": "check_bit",
                "initialize_and_update_bit_000806a0": "initialize_bit",
                "calculate_new_values_00080164": "calculate_new_values",
                "software_interrupt": "perform_interrupt"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_000813dc",
                "FUN_000806a0",
                "FUN_00080164",
                "FUN_00080f08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_function_00080250",
            "code": "\nvoid controlFunction_00080250(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  undefined *puVar3;\n  undefined auStack_1c [12];\n  \n  DAT_200708c0 = calculateResult(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  updateParameters(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        calculateNewValues();\n        calculateSum(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      uVar1 = calculateResult(3,1,20000);\n      DAT_200708d8 = calculateInterpolatedValue(0,1000,2000,0x28,0x96);\n      DAT_200708ec = calculateInterpolatedValue(uVar1,1000,2000,0x28,0x96);\n      while (iVar2 = calculateDifference2(&DAT_20070be8), 0 < iVar2) {\n        extractByteFromBuffer(&DAT_20070be8);\n        convertAndExecute(&DAT_20070be8,DAT_200708d8,10);\n        processNonzeroBytes(&DAT_20070be8,&DAT_00084b13);\n        calculateSum2(&DAT_20070be8,DAT_200708ec,10);\n      }\n      calculateNewValue(&DAT_200708e8,DAT_200708ec);\n      calculateNewValue(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        calculateNewValues();\n        calculateSum(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      iVar2 = calculateDifference2(&DAT_20070be8);\n      if (0 < iVar2) {\n        processData(auStack_1c,&DAT_20070be8,0x2c);\n        checkAndUpdateParameters(&DAT_200708dc,auStack_1c);\n        processRelocatedParameter(auStack_1c);\n        processData(auStack_1c,&DAT_20070be8,10);\n        checkAndUpdateParameters(&DAT_200708c8,auStack_1c);\n        processRelocatedParameter(auStack_1c);\n        extractByteFromBuffer(&DAT_20070be8);\n        iVar2 = compareAndReturnResult(&DAT_200708dc,\"steer\");\n        if (iVar2 == 0) goto LAB_0008039c;\n        uVar1 = parseNumber(&DAT_200708c8);\n        puVar3 = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    calculateNewValues();\n    calculateSum(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  iVar2 = compareAndReturnResult(&DAT_200708dc,\"motor\");\n  if (iVar2 != 0) {\n    uVar1 = parseNumber(&DAT_200708c8);\n    puVar3 = &DAT_200708e8;\nLAB_000803b2:\n    calculateNewValue(puVar3,uVar1);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_function_00080250",
                "calculate_result_00081624": "calculateResult",
                "update_and_set_parameters_00081014": "updateParameters",
                "calculate_new_values_00080164": "calculateNewValues",
                "calculate_sum_000810e8": "calculateSum",
                "calculate_interpolated_value_0008145c": "calculateInterpolatedValue",
                "calculate_difference_00081248": "calculateDifference2",
                "extract_byte_from_buffer_00081276": "extractByteFromBuffer",
                "thunk_convert_and_execute_0008113a": "convertAndExecute",
                "process_nonzero_bytes_000810c4": "processNonzeroBytes",
                "calculate_new_value_000806f8": "calculateNewValue",
                "calculate_sum_0008117a": "calculateSum2",
                "process_data_00081214": "processData",
                "check_and_update_parameters_00081560": "checkAndUpdateParameters",
                "process_relocated_parameter_00081472": "processRelocatedParameter",
                "compare_and_return_result_000815b8": "compareAndReturnResult",
                "parse_number_000815de": "parseNumber"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081560",
                "FUN_000815b8",
                "FUN_000815de",
                "FUN_00080164",
                "FUN_000806f8",
                "FUN_00081624",
                "FUN_00080f08",
                "FUN_00081248",
                "thunk_FUN_0008113a",
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_00081214",
                "FUN_00081276",
                "FUN_0008145c",
                "FUN_00081014",
                "FUN_0008117a",
                "FUN_00081472"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_tc_channel_000803fc",
            "code": "\nvoid initializeTcChannel_000803fc(int channelIndex,uint paramValue,undefined4 bitValue,uint offsetValue)\n\n{\n  undefined4 unknownValue;\n  undefined4 returnAddress;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(paramValue,channelIndex);\n  check_and_update_bit_00080aa8(bitValue);\n  configure_tc_channel_00080b2c(channelIndex,paramValue,0xc002);\n  store_value_at_offset_00080b90(channelIndex,paramValue,0xa41);\n  *(int *)((offsetValue >> 5) * 4 + -0x1fff1f00) = 1 << (offsetValue & 0x1f);\n  *(undefined4 *)(channelIndex + paramValue * 0x40 + 0x24) = 4;\n  if (2 < paramValue) {\n    combinedParams = process_assertion_failed_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         unknownValue,returnAddress);\n  }\n  *(undefined4 *)((int)combinedParams + (int)((ulonglong)combinedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_tc_channel_000803fc",
                "param_1": "channelIndex",
                "param_2": "paramValue",
                "param_3": "bitValue",
                "param_4": "offsetValue",
                "unaff_r4": "unknownValue",
                "in_lr": "returnAddress",
                "uVar1": "combinedParams"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080aa8",
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_flags_and_set_parameters_0008044c",
            "code": "\nvoid updateFlagsAndSetParameters_0008044c(int index,int data,int offset)\n\n{\n  uint value;\n  int temp;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    temp = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + temp < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp) * 8] << 0x19) < 0\n       )) {\n      updateAndSetParameters((&DAT_200708f8)[(temp + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  value = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  temp = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + temp < (int)value) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + temp) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + temp) * 8] << 0x19\n                  )) {\n      return;\n    }\n    updateAndSetParameters((&DAT_200708f8)[(temp + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  value = (offsetArray[6].r_offset / 1000000) * 20000 >> 5;\n  if (value <= *(int *)(data + 0x10) + 4U) {\n    value = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = value;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_flags_and_set_parameters_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "value",
                "iVar2": "temp",
                "update_and_set_parameters_00081014": "updateAndSetParameters",
                "Elf32_Rel_ARRAY_20070000": "offsetArray"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_parameter_000805a8",
            "code": "\nvoid updateParameter_000805a8(byte *output)\n\n{\n  char updatedValue;\n  uint currentValue;\n  \n  currentValue = (uint)DAT_200708f0;\n  if (currentValue < 0x3c) {\n    updatedValue = DAT_200708f0 + 1;\n    *output = DAT_200708f0;\n    DAT_200708f0 = updatedValue;\n    *(uint *)(&DAT_200708fc + currentValue * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_parameter_000805a8",
                "param_1": "output",
                "cVar1": "updatedValue",
                "uVar2": "currentValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "initialize_and_update_bit_000806a0",
            "code": "\nbyte initialize_and_update_bit_000806a0(byte *input_array,undefined4 param)\n\n{\n  byte temp_byte;\n  undefined4 base_address;\n  uint array_index;\n  undefined4 value;\n  int counter;\n  uint array_value;\n  \n  if (0x3b < *input_array) goto LAB_00080660;\n  update_and_check_bit_00080f0c(param,1,0x220,*input_array,0x960);\n  array_value = (uint)*input_array;\n  temp_byte = (&DAT_200708f8)[array_value * 8];\n  input_array[2] = 0;\n  array_index = array_value / 0xc;\n  (&DAT_200708f8)[array_value * 8] = temp_byte & 0xc0 | (byte)param & 0x3f;\n  input_array[1] = 0;\n  counter = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(counter + array_index * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    counter = counter + 1;\n  } while (counter != 0xc);\n  if (array_index == 0) {\n    base_address = 0x40084000;\n    value = 0x1e;\nLAB_0008064c:\n    initialize_tc_channel_000803fc(base_address,array_index,value,value);\n  }\n  else {\n    if (array_index == 1) {\n      base_address = 0x40084000;\n      value = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (array_index == 2) {\n      base_address = 0x40084000;\n      value = 0x20;\n      goto LAB_0008064c;\n    }\n    if (array_index == 3) {\n      base_address = 0x40080000;\n      array_index = 2;\n      value = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (array_index == 4) {\n      base_address = 0x40080000;\n      array_index = 0;\n      value = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*input_array * 8] = (&DAT_200708f8)[(uint)*input_array * 8] | 0x40;\nLAB_00080660:\n  return *input_array;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "initialize_and_update_bit_000806a0",
                "param_1": "input_array",
                "param_2": "param",
                "bVar1": "temp_byte",
                "uVar2": "base_address",
                "uVar4": "value",
                "iVar5": "counter",
                "uVar6": "array_value",
                "uVar3": "array_index"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "calculate_new_value_000806f8",
            "code": "\nvoid calculate_new_value_000806f8(byte *input_bytes,uint input_value)\n\n{\n  uint clamped_value;\n  \n  if ((int)input_value < 0x220) {\n    clamped_value = input_value;\n    if (0xb3 < (int)input_value) {\n      clamped_value = 0xb4;\n    }\n    input_value = interpolate_value(clamped_value & ~((int)clamped_value >> 0x1f),0,0xb4,(0x88 - (char)input_bytes[1]) * 4,\n                           (600 - (char)input_bytes[2]) * 4,input_value);\n  }\n  if (*input_bytes < 0x3c) {\n    clamped_value = (0x88 - (char)input_bytes[1]) * 4;\n    if (((int)(input_value + (0x88 - (char)input_bytes[1]) * -4) < 0 == SBORROW4(input_value,clamped_value)) &&\n       (clamped_value = (600 - (char)input_bytes[2]) * 4, (int)input_value <= (int)clamped_value)) {\n      clamped_value = input_value;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*input_bytes * 8) =\n         (rel_array[6].r_offset / 1000000) * (clamped_value - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "calculate_new_value_000806f8",
                "param_1": "input_bytes",
                "param_2": "input_value",
                "uVar1": "clamped_value",
                "calculate_interpolated_value_0008145c": "interpolate_value",
                "Elf32_Rel_ARRAY_20070000": "rel_array"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_and_configure_system_00080774",
            "code": "\n\n\nvoid initialize_and_configure_system_00080774(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  initialize_data_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_function_set();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    update_and_set_parameters(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_function(0x400e0e00,1,0x300,0);\n  update_and_set_parameters(0,1);\n  update_function(0x400e0e00,1,0xc00,0);\n  update_function(0x400e0e00,1,0x3000,0);\n  update_function(0x400e1400,2,0x30,0);\n  update_function(0x400e1000,1,0xc00,0);\n  update_function(0x400e0e00,1,3,0);\n  update_function(0x400e1000,1,0xc000,0);\n  check_and_update_bit(0x25);\n  calculate_threshold(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  update_parameters(0x400c0000,0,0x300000,1);\n  update_data_with_parameters(0x400c0000,0,0);\n  set_param_value(0x400c0000,0xffffffff);\n  initialize_data(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_and_configure_system_00080774",
                "iVar1": "index",
                "iVar2": "nextIndex",
                "execute_function_set_00081778": "execute_function_set",
                "update_and_set_parameters_00081014": "update_and_set_parameters",
                "update_function_00080a30": "update_function",
                "check_and_update_bit_00080aa8": "check_and_update_bit",
                "calculate_threshold_00080c98": "calculate_threshold",
                "update_parameters_00080d3e": "update_parameters",
                "update_data_with_parameters_00080d30": "update_data_with_parameters",
                "set_param_value_00080d6a": "set_param_value",
                "initialize_data_00080d62": "initialize_data"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00081778",
                "FUN_00080a30",
                "FUN_00080b98",
                "FUN_00081014",
                "FUN_00080d30",
                "FUN_00080c98",
                "FUN_00080d62",
                "FUN_00080d3e",
                "FUN_00080d6a",
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_memory_blocks_0008089c",
            "code": "\nvoid initializeMemoryBlocks_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initializeMemoryBlock(&DAT_20070c0c);\n  initializeMemoryBlock(&DAT_20070b60);\n  initializeParams(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  initializeMemoryBlock(&DAT_20070e6c);\n  initializeMemoryBlock(&DAT_20070ef4);\n  initializeMemoryBlock(&DAT_20070f7c);\n  initializeMemoryBlock(&DAT_20070ad8);\n  initializeMemoryBlock(&DAT_20070d0c);\n  initializeMemoryBlock(&DAT_20070d94);\n  initializeAndUpdateData(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  initializeAndUpdateData(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  initializeAndUpdateData(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_memory_blocks_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "initialize_memory_block_000811b0": "initializeMemoryBlock",
                "initialize_params_00081348": "initializeParams",
                "initialize_and_update_data_00081438": "initializeAndUpdateData"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081438",
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_execute_difference_calculations_00080970",
            "code": "\nvoid checkAndExecuteDifferenceCalculations_00080970(void)\n\n{\n  int result;\n  \n  result = calculateDifference(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = calculateDifference(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = calculateDifference(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = calculateDifference(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_execute_difference_calculations_00080970",
                "iVar1": "result",
                "calculate_difference_00081248": "calculateDifference"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074c",
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_values_000809be",
            "code": "\nvoid updateValues_000809be(int baseAddress,undefined4 mode,uint newValue)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(mode) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto defaultCase;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\ndefaultCase:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_values_000809be",
                "param_1": "baseAddress",
                "param_2": "mode",
                "param_3": "newValue",
                "uVar1": "updatedValue",
                "switchD_000809c4_caseD_6": "defaultCase"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_values_000809e4",
            "code": "\nvoid setValues_000809e4(undefined4 *outputArray,undefined4 inputValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  outputArray[0x11] = inputValue;\n  if (isNegative) {\n    outputArray[0x19] = inputValue;\n  }\n  if (!isNegative) {\n    outputArray[0x18] = inputValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    outputArray[8] = inputValue;\n  }\n  if (!isNegative) {\n    outputArray[9] = inputValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[0x20] = inputValue;\n  }\n  outputArray[5] = inputValue;\n  *outputArray = inputValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_values_000809e4",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_parameters_00080a0a",
            "code": "\nvoid setParameters_00080a0a(undefined4 *buffer,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  buffer[17] = value;\n  if (condition3 == 0) {\n    buffer[24] = value;\n  }\n  else {\n    buffer[25] = value;\n  }\n  if (condition2 == 0) {\n    buffer[21] = value;\n  }\n  else {\n    buffer[20] = value;\n  }\n  if (condition1 == 0) {\n    buffer[13] = value;\n  }\n  else {\n    buffer[12] = value;\n  }\n  buffer[4] = value;\n  *buffer = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_parameters_00080a0a",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3",
                "param_1[0x11]": "buffer[17]",
                "param_1[0x18]": "buffer[24]",
                "param_1[0x19]": "buffer[25]",
                "param_1[0x15]": "buffer[21]",
                "param_1[0x14]": "buffer[20]",
                "param_1[0xd]": "buffer[13]",
                "param_1[0xc]": "buffer[12]",
                "param_1[4]": "buffer[4]"
            },
            "calling": [
                "FUN_00080a30",
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_function_00080a30",
            "code": "\nundefined4 updateFunction_00080a30(int data,int valueType,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(valueType) {\n  case 1:\n  case 2:\n    updateValues(data,valueType,newValue);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(data + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(data + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(data + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    setValues(data,newValue,flags,0x809e5,data);\n    break;\n  case 4:\n  case 5:\n    setParameters(data,newValue,valueType == 5,(flags << 0x1d) >> 0x1f,flags & 1,valueType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_function_00080a30",
                "param_1": "data",
                "param_2": "valueType",
                "param_3": "newValue",
                "param_4": "flags",
                "bVar1": "isNegative",
                "update_values_000809be": "updateValues",
                "set_values_000809e4": "setValues",
                "set_parameters_00080a0a": "setParameters"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_000809e4",
                "FUN_000809be",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_bitwise_conditions_00080a94",
            "code": "\nuint check_bitwise_conditions_00080a94(int input_param,uint bitwise_param)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_param + 8) & bitwise_param;\n  if (result != 0) {\n    if ((bitwise_param & *(uint *)(input_param + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_bitwise_conditions_00080a94",
                "param_1": "input_param",
                "param_2": "bitwise_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_update_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndUpdateBit_00080aa8(uint input)\n\n{\n  uint bitMask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_update_bit_00080aa8",
                "param_1": "input",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_000803fc",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_channel_00080b2c",
            "code": "\nvoid configureTcChannel_00080b2c(undefined4 dwChannel,uint sizeofTcChannel,char *message)\n\n{\n  int offset;\n  int baseAddress;\n  undefined8 combinedParams;\n  \n  combinedParams = combineParams(sizeofTcChannel,dwChannel);\n  if (2 < sizeofTcChannel) {\n    message = \"TC_Configure\";\n    combinedParams = handleAssertionFailure(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  baseAddress = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(baseAddress + 0x28) = 0xffffffff;\n  *(char **)(baseAddress + 4) = message;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_channel_00080b2c",
                "param_1": "dwChannel",
                "param_2": "sizeofTcChannel",
                "param_3": "message",
                "uVar3": "combinedParams",
                "iVar1": "offset",
                "iVar2": "baseAddress",
                "CONCAT44": "combineParams",
                "process_assertion_failed_000816f8": "handleAssertionFailure"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "store_value_at_offset_00080b90",
            "code": "\nvoid storeValueAtOffset_00080b90(int baseAddress,int index,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "store_value_at_offset_00080b90",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_data_00080b98",
            "code": "\n\n\nvoid initializeData_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  elfRelocations[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_data_00080b98",
                "Elf32_Rel_ARRAY_20070000": "elfRelocations"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  initialize_system_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *outputArray,uint inputValue,int scaleFactor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholdArray [16];\n  \n  thresholdArray[0] = 0;\n  thresholdArray[1] = 8;\n  thresholdArray[2] = 0x10;\n  thresholdArray[3] = 0x18;\n  thresholdArray[4] = 0x40;\n  thresholdArray[5] = 0x50;\n  thresholdArray[6] = 0x60;\n  thresholdArray[7] = 0x70;\n  thresholdArray[8] = 0x200;\n  thresholdArray[9] = 0x240;\n  thresholdArray[10] = 0x280;\n  thresholdArray[11] = 0x2c0;\n  thresholdArray[12] = 0x300;\n  thresholdArray[13] = 0x340;\n  thresholdArray[14] = 0x380;\n  thresholdArray[15] = 0x3c0;\n  *outputArray = 1;\n  outputArray[1] = 0;\n  outputArray[0x48] = 0x202;\n  outputArray[0x41] = 0;\n  outputArray[0x45] = 0;\n  quotient = inputValue / (uint)(scaleFactor * 2);\n  if (inputValue == scaleFactor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)inputValue / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholdArray[index]) {\n      outputArray[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | outputArray[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "scaleFactor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "thresholdArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_data_with_parameters_00080d30",
            "code": "\nvoid updateDataWithParameters_00080d30(int dataAddress,uint value1,uint value2)\n\n{\n  *(uint *)(dataAddress + 4) = value1 | *(uint *)(dataAddress + 4) | (value2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_data_with_parameters_00080d30",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_parameters_00080d3e",
            "code": "\nvoid updateParameters_00080d3e(int baseAddress,uint value2,uint value1,uint value3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       value1 | *(uint *)(baseAddress + 4) | (value2 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_parameters_00080d3e",
                "param_1": "baseAddress",
                "param_2": "value2",
                "param_3": "value1",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_in_memory_00080d58",
            "code": "\nvoid setBitInMemory_00080d58(int memoryAddress,uint bitPosition)\n\n{\n  *(int *)(memoryAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_in_memory_00080d58",
                "param_1": "memoryAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_data_00080d62",
            "code": "\nvoid initializeData_00080d62(int data)\n\n{\n  *(undefined4 *)(data + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_data_00080d62",
                "param_1": "data"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_application_00080e80",
            "code": "\nvoid initializeApplication_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_application_00080e80",
                "undefined4": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "addition_00080e88",
            "code": "\nint addition_00080e88(int input)\n\n{\n  int current_sum;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  current_sum = DAT_20071208;\n  DAT_20071208 = input + DAT_20071208;\n  return current_sum;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "addition_00080e88",
                "param_1": "input",
                "iVar1": "current_sum"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_default_value_00080eaa",
            "code": "\nuint32_t get_default_value_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_default_value_00080eaa",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "set_memory_value_00080eb0",
            "code": "\nundefined4 setMemoryValue_00080eb0(undefined4 outputAddress,int inputAddress)\n\n{\n  *(undefined4 *)(inputAddress + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "set_memory_value_00080eb0",
                "param_1": "outputAddress",
                "param_2": "inputAddress"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "get_return_value_00080eba",
            "code": "\nuint32_t getReturnValue_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "get_return_value_00080eba",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_default_value_00080ebe",
            "code": "\nundefined4 get_default_value_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_default_value_00080ebe"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_00080ec2",
            "code": "\nundefined4 initialize_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_00080ec2"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 param1,int byteArrayAddress,uint arraySize)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)arraySize; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(byteArrayAddress + index);\n  }\n  return arraySize & ~((int)arraySize >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_1": "param1",
                "param_2": "byteArrayAddress",
                "param_3": "arraySize",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "infinite_loop_00080eec",
            "code": "\nvoid infiniteLoop_00080eec(undefined4 exitStatus,undefined4 ptr_2,undefined4 ptr_3,undefined4 ptr_4)\n\n{\n  execute_relocation_000817c8(\"Exiting with status %d.\\n\",exitStatus,ptr_3,ptr_4,ptr_4);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "infinite_loop_00080eec",
                "param_1": "exitStatus",
                "param_2": "ptr_2",
                "param_3": "ptr_3",
                "param_4": "ptr_4"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "reset_value_00080efe",
            "code": "\nundefined4 resetValue_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "reset_value_00080efe"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_data_value_thunk_000816d8",
            "code": "\nundefined4 get_data_value_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_data_value_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000815ec",
                "FUN_000801e0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "update_and_check_bit_00080f0c",
            "code": "\n\n\nint updateAndCheckBit_00080f0c(int inputParam1,int inputParam2)\n\n{\n  int output;\n  uint tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  byte bit1;\n  byte bit2;\n  int index;\n  int value;\n  \n  output = inputParam1;\n  if ((&DAT_00084b50)[inputParam1 * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[inputParam1] & 0xf) == 4) {\n      output = set_bit_in_memory_00080d58(0x400c0000,(&DAT_00084b5d)[inputParam1 * 0x1c]);\n    }\n    bit2 = (&DAT_20070e1c)[inputParam1];\n    bit1 = bit2 & 0xf;\n    if ((bit1 < 3) && (bit2 != 0)) {\n      if (bit1 == 2) {\n        if (inputParam2 == 0) {\n          return output;\n        }\n      }\n      else if (bit1 == 1) {\n        if (inputParam2 == 2) {\n          return output;\n        }\n      }\n      else if (bit1 == 3) {\n        if (inputParam2 == 1) {\n          return output;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (inputParam2 != 1) {\nLAB_00080f68:\n      if (inputParam2 == 0) {\n        output = inputParam1 * 0x1c;\n        check_and_update_bit_00080aa8(*(undefined4 *)(&DAT_00084b4c + output));\n        output = update_function_00080a30(*(undefined4 *)(&DAT_00084b44 + output),3,\n                             *(undefined4 *)(&DAT_00084b48 + output),0);\n        bit2 = (&DAT_20070e1c)[inputParam1] & 0xf0 | 2;\n      }\n      else {\n        if (inputParam2 != 2) {\n          return output;\n        }\n        output = inputParam1 * 0x1c;\n        check_and_update_bit_00080aa8(*(undefined4 *)(&DAT_00084b4c + output));\n        output = update_function_00080a30(*(undefined4 *)(&DAT_00084b44 + output),3,\n                             *(undefined4 *)(&DAT_00084b48 + output),1);\n        bit2 = (&DAT_20070e1c)[inputParam1] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[inputParam1] = bit2;\n      return output;\n    }\n    index = inputParam1 * 0x1c;\n    value = *(int *)(&DAT_00084b44 + index);\n    if (bit2 >> 4 == 0) {\n      tempVar2 = 4;\n    }\n    else {\n      tempVar2 = 5;\n    }\n    output = update_function_00080a30(value,tempVar2,*(undefined4 *)(&DAT_00084b48 + index),\n                         *(undefined4 *)(&DAT_00084b54 + index));\n    (&DAT_20070e1c)[inputParam1] = (&DAT_20070e1c)[inputParam1] & 0xf0 | 3;\n    if (*(int *)(value + 0x18) == -1) {\n      tempVar1 = *(uint *)(&DAT_00084b4c + index);\n      if (0x2c < tempVar1) {\n        return 1;\n      }\n      if (tempVar1 < 0x20) {\n        tempVar1 = 1 << (tempVar1 & 0xff);\n        tempVar3 = _DAT_400e0618 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0614 = tempVar3;\n        }\n      }\n      else {\n        tempVar1 = 1 << (tempVar1 - 0x20 & 0xff);\n        tempVar3 = _DAT_400e0708 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0704 = tempVar3;\n        }\n      }\n      return 0;\n    }\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "update_and_check_bit_00080f0c",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "iVar1": "output",
                "iVar7": "index",
                "iVar8": "value",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "bVar5": "bit1",
                "bVar6": "bit2"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_and_set_parameters_00081014",
            "code": "\nvoid updateAndSetParameters_00081014(int index,int value,undefined4 param)\n\n{\n  int condition;\n  undefined4 parameterValue;\n  int data;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      update_and_check_bit_00080f0c(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    data = *(int *)(&DAT_00084b44 + index * 0x1c);\n    parameterValue = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    condition = check_bitwise_conditions_00080a94(data,parameterValue);\n    if (condition == 0) {\n      if (value != 0) {\n        *(undefined4 *)(data + 100) = parameterValue;\n        return;\n      }\n      *(undefined4 *)(data + 0x60) = parameterValue;\n      return;\n    }\n    set_parameters_00080a0a(data,parameterValue,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_and_set_parameters_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "condition",
                "uVar2": "parameterValue",
                "iVar3": "data"
            },
            "calling": [
                "FUN_00080774",
                "FUN_0008044c",
                "FUN_00080250"
            ],
            "called": [
                "FUN_00080f0c",
                "FUN_00080a94",
                "FUN_00080a0a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "process_nonzero_bytes_000810a6",
            "code": "\nvoid processNonzeroBytes_000810a6(int *byteArray,int byteCount,undefined4 indexLastNonzeroByte,undefined4 callbackFunction)\n\n{\n  undefined4 lastNonzeroByteIndex;\n  \n  if (byteCount != 0) {\n    lastNonzeroByteIndex = find_last_nonzero_byte_index_00082688(byteCount);\n    (**(code **)(*byteArray + 4))(byteArray,byteCount,lastNonzeroByteIndex,*(code **)(*byteArray + 4),callbackFunction);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "process_nonzero_bytes_000810a6",
                "param_1": "byteArray",
                "param_2": "byteCount",
                "param_3": "indexLastNonzeroByte",
                "param_4": "callbackFunction",
                "uVar1": "lastNonzeroByteIndex"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_000810c4",
                "FUN_000810fc",
                "FUN_000810d8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "process_nonzero_bytes_000810c4",
            "code": "\nvoid process_nonzero_bytes_000810c4(void)\n\n{\n  process_nonzero_bytes_000810c4_000810a6();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "process_nonzero_bytes_000810c4"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_function_000810cc",
            "code": "\nvoid executeFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "process_nonzero_bytes_000810d8",
            "code": "\nvoid processNonzeroBytes_000810d8(undefined4 input,undefined4 unused,undefined4 length,undefined4 data)\n\n{\n  process_nonzero_bytes_000810a6(input,&DAT_00085635,length,data,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "process_nonzero_bytes_000810d8",
                "param_1": "input",
                "param_2": "unused",
                "param_3": "length",
                "param_4": "data"
            },
            "calling": [
                "FUN_000810e8",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = process_nonzero_bytes_000810a6();\n  result2 = process_nonzero_bytes_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_to_base_000810fc",
            "code": "\nvoid convertToBase_000810fc(undefined4 inputBuffer,uint inputNumber,uint base)\n\n{\n  char *resultBuffer;\n  uint quotient;\n  char *currentChar;\n  char convertedChar;\n  uint remainder;\n  char tempBuffer [5];\n  \n  tempBuffer[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  resultBuffer = tempBuffer;\n  do {\n    currentChar = resultBuffer;\n    quotient = inputNumber / base;\n    remainder = inputNumber - base * quotient & 0xff;\n    convertedChar = (char)remainder;\n    if (remainder < 10) {\n      convertedChar = convertedChar + '0';\n    }\n    else {\n      convertedChar = convertedChar + '7';\n    }\n    *currentChar = convertedChar;\n    inputNumber = quotient;\n    resultBuffer = currentChar + -1;\n  } while (quotient != 0);\n  process_nonzero_bytes_000810a6(inputBuffer,currentChar);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "param_1": "inputBuffer",
                "param_2": "inputNumber",
                "param_3": "base",
                "pcVar1": "resultBuffer",
                "uVar2": "quotient",
                "pcVar3": "currentChar",
                "cVar4": "convertedChar",
                "uVar5": "remainder",
                "local_15": "tempBuffer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "convert_and_execute_0008113a",
            "code": "\nint convertAndExecute_0008113a(undefined4 *dataPointer,uint value,uint base,undefined4 param_4)\n\n{\n  int errorCode;\n  int convertedValue;\n  \n  if (base == 0) {\n    errorCode = (**(code **)*dataPointer)(dataPointer,value & 0xff);\n    return errorCode;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)value < 0) {\n      errorCode = execute_function_000810cc(dataPointer,0x2d);\n      convertedValue = convert_to_base_000810fc(dataPointer,-value,10);\n      return convertedValue + errorCode;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  errorCode = convert_to_base_000810fc(dataPointer,value,base,param_4);\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "convert_and_execute_0008113a",
                "param_1": "dataPointer",
                "param_2": "value",
                "param_3": "base",
                "iVar1": "errorCode",
                "iVar2": "convertedValue"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810fc",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "convert_and_execute_thunk_0008113a",
            "code": "\nint convertAndExecute_thunk_0008113a(undefined4 *dataPointer,uint inputValue,uint conversionType,undefined4 unknownParam)\n\n{\n  int result;\n  int negativeResult;\n  \n  if (conversionType == 0) {\n    result = (**(code **)*dataPointer)(dataPointer,inputValue & 0xff);\n    return result;\n  }\n  if (conversionType == 10) {\n    conversionType = 10;\n    if ((int)inputValue < 0) {\n      result = executeFunction(dataPointer,0x2d);\n      negativeResult = convertToBase(dataPointer,-inputValue,10);\n      return negativeResult + result;\n    }\n  }\n  else {\n    conversionType = conversionType & 0xff;\n  }\n  result = convertToBase(dataPointer,inputValue,conversionType,unknownParam);\n  return result;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "convert_and_execute_thunk_0008113a",
                "param_1": "dataPointer",
                "param_2": "inputValue",
                "param_3": "conversionType",
                "param_4": "unknownParam",
                "iVar1": "result",
                "iVar2": "negativeResult",
                "execute_function_000810cc": "executeFunction",
                "convert_to_base_000810fc": "convertToBase"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculateSum_0008117a(undefined4 input)\n\n{\n  int convertedValue;\n  int processedValue;\n  \n  convertedValue = convert_and_execute_0008113a();\n  processedValue = process_nonzero_bytes_000810d8(input);\n  return processedValue + convertedValue;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "input",
                "iVar1": "convertedValue",
                "iVar2": "processedValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_relocation_not_empty_00081190",
            "code": "\nvoid executeIfRelocationNotEmpty_00081190(void)\n\n{\n  if ((relArray[6].relocationInfo != 0xffffffff) &&\n     (relArray[6].relocationInfo = relArray[6].relocationInfo - 1,\n     relArray[6].relocationInfo == 0)) {\n    (*(functionToExecute *)((int)&relArray[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_relocation_not_empty_00081190",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "relocationInfo",
                "r_offset": "offset",
                "code": "functionToExecute"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_block_000811b0",
            "code": "\nint initializeMemoryBlock_000811b0(int memoryBlock)\n\n{\n  setMemoryBlock(memoryBlock,0,0x80);\n  *(undefined4 *)(memoryBlock + 0x80) = 0;\n  *(undefined4 *)(memoryBlock + 0x84) = 0;\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_block_000811b0",
                "param_1": "memoryBlock",
                "memset_with_byte_00081f00": "setMemoryBlock"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_pointer_000811ca",
            "code": "\nvoid updatePointer_000811ca(int baseAddress,undefined newValue)\n\n{\n  uint currentOffset;\n  \n  currentOffset = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (currentOffset != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = currentOffset;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_pointer_000811ca",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "currentOffset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "update_data_value_000811e8",
            "code": "\nint updateDataValue_000811e8(int *dataValues)\n\n{\n  int value;\n  \n  value = getDataValueThunk();\n  dataValues[3] = value;\n  do {\n    value = (**(code **)(*dataValues + 0xc))(dataValues);\n    if (-1 < value) {\n      return value;\n    }\n    value = getDataValueThunk();\n  } while ((uint)(value - dataValues[3]) < (uint)dataValues[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "update_data_value_000811e8",
                "param_1": "dataValues",
                "iVar1": "value",
                "get_data_value_thunk_000816d8": "getDataValueThunk"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_data_00081214",
            "code": "\nvoid processData_00081214(undefined4 inputParam,undefined4 updateParam,uint targetValue)\n\n{\n  uint updateResult;\n  \n  initialize_param_000814f6(inputParam,&DAT_00085637);\n  while ((updateResult = update_data_value_000811e8(updateParam), -1 < (int)updateResult && (updateResult != targetValue))) {\n    process_and_copy_string_0008159e(inputParam,updateResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "inputParam",
                "param_2": "updateParam",
                "param_3": "targetValue",
                "uVar1": "updateResult"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000811e8",
                "FUN_000814f6",
                "FUN_0008159e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_byte_from_buffer_00081276",
            "code": "\nuint extractByteFromBuffer_00081276(int bufferAddress)\n\n{\n  byte extractedByte;\n  int bufferPtr;\n  \n  bufferPtr = *(int *)(bufferAddress + 0x10);\n  if (*(int *)(bufferPtr + 0x80) != *(int *)(bufferPtr + 0x84)) {\n    extractedByte = *(byte *)(bufferPtr + *(int *)(bufferPtr + 0x84));\n    *(uint *)(bufferPtr + 0x84) = *(int *)(bufferPtr + 0x84) + 1U & 0x7f;\n    return (uint)extractedByte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "param_1": "bufferAddress",
                "iVar2": "bufferPtr",
                "bVar1": "extractedByte"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataPtr,undefined4 newValue)\n\n{\n  int dataOffset;\n  uint newIndex;\n  \n  dataOffset = *(int *)(dataPtr + 0x14);\n  if ((*(int *)(*(int *)(dataPtr + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(dataOffset + 0x84) == *(int *)(dataOffset + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(dataOffset + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(dataOffset + 0x84) == newIndex);\n    *(char *)(dataOffset + *(int *)(dataOffset + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPtr + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataPtr + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "iVar1": "dataOffset",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_params_00081348",
            "code": "\nvoid initializeParams_00081348(undefined4 *outputArray,undefined4 inputValue,undefined flag,undefined4 param4Value,\n                 undefined4 param5Value,undefined4 param6Value)\n\n{\n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  outputArray[6] = inputValue;\n  *outputArray = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(outputArray + 7) = flag;\n  outputArray[4] = param5Value;\n  outputArray[8] = param4Value;\n  outputArray[5] = param6Value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_params_00081348",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "flag",
                "param_4": "param4Value",
                "param_5": "param5Value",
                "param_6": "param6Value"
            },
            "calling": [
                "FUN_0008089c",
                "FUN_00081438"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "update_and_initialize_data_000813dc",
            "code": "\nvoid updateAndInitializeData_000813dc(int inputData,uint paramDivisor)\n\n{\n  int tempVar1;\n  undefined4 *ptrToData;\n  \n  check_and_update_bit_00080aa8(*(undefined4 *)(inputData + 0x20));\n  ptrToData = *(undefined4 **)(inputData + 0x18);\n  ptrToData[0x48] = 0x202;\n  *ptrToData = 0xac;\n  ptrToData[1] = 0x800;\n  ptrToData[8] = relArray[6].offset / paramDivisor >> 4;\n  ptrToData[3] = 0xffffffff;\n  ptrToData[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(inputData + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(inputData + 0x1c) & 0x1f);\n  tempVar1 = *(int *)(inputData + 0x10);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  tempVar1 = *(int *)(inputData + 0x14);\n  *(undefined4 *)(tempVar1 + 0x84) = 0;\n  *(undefined4 *)(tempVar1 + 0x80) = 0;\n  *ptrToData = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "update_and_initialize_data_000813dc",
                "param_1": "inputData",
                "param_2": "paramDivisor",
                "iVar1": "tempVar1",
                "puVar2": "ptrToData",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_and_update_data_00081438",
            "code": "\nundefined4 * initializeAndUpdateData_00081438(undefined4 *outputArray,undefined4 inputValue)\n\n{\n  initializeParameters();\n  *outputArray = &PTR_update_data_000812b8_1_00085680;\n  outputArray[9] = inputValue;\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_and_update_data_00081438",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "initialize_params_00081348": "initializeParameters"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolated_value_0008145c",
            "code": "\nint calculateInterpolatedValue_0008145c(int startValue,int startPosition,int endPosition,int startOffset,int endOffset)\n\n{\n  return (uint)((startValue - startPosition) * (endOffset - startOffset)) / (uint)(endPosition - startPosition) + startOffset;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolated_value_0008145c",
                "param_1": "startValue",
                "param_2": "startPosition",
                "param_3": "endPosition",
                "param_4": "startOffset",
                "param_5": "endOffset"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "process_relocated_parameter_00081472",
            "code": "\nundefined4 * process_relocated_parameter_00081472(undefined4 *relocated_parameter)\n\n{\n  process_relocation(*relocated_parameter);\n  return relocated_parameter;\n}\n\n",
            "renaming": {
                "FUN_00081472": "process_relocated_parameter_00081472",
                "param_1": "relocated_parameter",
                "process_relocation_00081800": "process_relocation"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_params_00081480",
            "code": "\nvoid resetParams_00081480(int *param)\n\n{\n  if (*param != 0) {\n    processRelocation();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_params_00081480",
                "param_1": "param",
                "process_relocation_00081800": "processRelocation"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "check_and_process_relocation_00081496",
            "code": "\nint checkAndProcessRelocation_00081496(int *dataPointer,int size,undefined4 paramA,undefined4 paramB)\n\n{\n  int relocationResult;\n  \n  relocationResult = process_relocation_00081f9c(*dataPointer,size + 1,paramA,paramB,paramB);\n  if (relocationResult != 0) {\n    *dataPointer = relocationResult;\n    dataPointer[1] = size;\n    relocationResult = 1;\n  }\n  return relocationResult;\n}\n\n",
            "renaming": {
                "FUN_00081496": "check_and_process_relocation_00081496",
                "param_1": "dataPointer",
                "param_2": "size",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "relocationResult"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "process_and_check_relocation_000814ae",
            "code": "\nundefined4 processAndCheckRelocation_000814ae(int *relocationArray,uint arraySize)\n\n{\n  int relocationStatus;\n  \n  if ((*relocationArray == 0) || ((uint)relocationArray[1] < arraySize)) {\n    relocationStatus = check_and_process_relocation_00081496(relocationArray);\n    if (relocationStatus == 0) {\n      return 0;\n    }\n    if (relocationArray[2] == 0) {\n      *(undefined *)*relocationArray = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "process_and_check_relocation_000814ae",
                "param_1": "relocationArray",
                "param_2": "arraySize",
                "iVar1": "relocationStatus"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "process_and_check_params_000814d0",
            "code": "\nundefined4 * processAndCheckParams_000814d0(undefined4 *params,undefined4 stringToCopy,undefined4 newParam)\n\n{\n  int relocationResult;\n  \n  relocationResult = process_and_check_relocation_000814ae(params,newParam);\n  if (relocationResult == 0) {\n    reset_params_00081480(params);\n  }\n  else {\n    params[2] = newParam;\n    copy_string_with_compatibility_000825cc(*params,stringToCopy);\n  }\n  return params;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "process_and_check_params_000814d0",
                "param_1": "params",
                "param_2": "stringToCopy",
                "param_3": "newParam",
                "iVar1": "relocationResult"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_param_000814f6",
            "code": "\nundefined4 * initializeParam_000814f6(undefined4 *paramArray,int size)\n\n{\n  undefined4 lastNonzeroByteIndex;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (size != 0) {\n    lastNonzeroByteIndex = find_last_nonzero_byte_index_00082688(size);\n    process_and_check_params_000814d0(paramArray,size,lastNonzeroByteIndex);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_param_000814f6",
                "param_1": "paramArray",
                "param_2": "size",
                "uVar1": "lastNonzeroByteIndex"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_parameters_0008151c",
            "code": "\nvoid updateParameters_0008151c(int *source,int *destination)\n\n{\n  if (*source != 0) {\n    if ((*destination != 0) && ((uint)destination[2] <= (uint)source[1])) {\n      copyString();\n      source[2] = destination[2];\n      goto LAB_00081558;\n    }\n    performRelocation();\n  }\n  *source = *destination;\n  source[1] = destination[1];\n  source[2] = destination[2];\n  *destination = 0;\n  destination[1] = 0;\nLAB_00081558:\n  destination[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_parameters_0008151c",
                "param_1": "source",
                "param_2": "destination",
                "copy_string_with_compatibility_000825cc": "copyString",
                "process_relocation_00081800": "performRelocation"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "check_and_update_parameters_00081560",
            "code": "\nint checkAndUpdateParameters_00081560(int inputParameter1,int inputParameter2)\n\n{\n  if (inputParameter1 != inputParameter2) {\n    update_parameters_0008151c();\n  }\n  return inputParameter1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "check_and_update_parameters_00081560",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "process_and_copy_string_00081570",
            "code": "\nundefined4 processAndCopyString_00081570(int *inputArray,int inputSize,int relocationOffset)\n\n{\n  int relocationResult;\n  int arrayIndex;\n  \n  arrayIndex = inputArray[2];\n  if (inputSize == 0) {\n    return 0;\n  }\n  if (relocationOffset != 0) {\n    relocationResult = process_and_check_relocation_000814ae(inputArray,arrayIndex + relocationOffset);\n    if (relocationResult == 0) {\n      return 0;\n    }\n    copy_string_with_compatibility_000825cc(*inputArray + inputArray[2],inputSize);\n    inputArray[2] = arrayIndex + relocationOffset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "process_and_copy_string_00081570",
                "param_1": "inputArray",
                "param_2": "inputSize",
                "param_3": "relocationOffset",
                "iVar1": "relocationResult",
                "iVar2": "arrayIndex"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000825cc",
                "FUN_000814ae"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "process_and_copy_string_0008159e",
            "code": "\nvoid processAndCopyString_0008159e(undefined4 input,undefined4 ptrCopy,undefined4 ptrString)\n\n{\n  undefined4 copy;\n  undefined4 string;\n  \n  string = ptrString;\n  process_and_copy_string_00081570(input,&copy,1,0,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "process_and_copy_string_0008159e",
                "param_1": "input",
                "param_2": "ptrCopy",
                "param_3": "ptrString",
                "local_c": "copy",
                "uStack_8": "string"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "compare_and_return_result_000815b8",
            "code": "\nint compareAndReturnResult_000815b8(byte **inputData,byte *compareData)\n\n{\n  uint stringComparisonResult;\n  int result;\n  \n  if (inputData[2] == (byte *)0x0) {\n    if (compareData == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (compareData != (byte *)0x0) {\n      stringComparisonResult = compare_strings_00082390(*inputData);\n      goto LAB_000815d4;\n    }\n    compareData = *inputData;\n  }\n  stringComparisonResult = (uint)*compareData;\nLAB_000815d4:\n  result = 1 - stringComparisonResult;\n  if (1 < stringComparisonResult) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "compare_and_return_result_000815b8",
                "param_1": "inputData",
                "param_2": "compareData",
                "uVar1": "stringComparisonResult",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_number_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseNumber_000815de(byte **input)\n\n{\n  byte currentByte;\n  byte isNegative;\n  uint result;\n  byte *nextByte;\n  uint byteValue;\n  byte *currentChar;\n  int numericValue;\n  int validNumber;\n  uint maxValueDividedBy10;\n  uint maxValue;\n  \n  nextByte = *input;\n  if (*input == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    currentChar = nextByte;\n    nextByte = currentChar + 1;\n    byteValue = (uint)*currentChar;\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    isNegative = currentByte & 8;\n  } while ((currentByte & 8) != 0);\n  if (byteValue == 0x2d) {\n    nextByte = currentChar + 2;\n    byteValue = (uint)currentChar[1];\n    isNegative = 1;\n  }\n  else if (byteValue == 0x2b) {\n    byteValue = (uint)currentChar[1];\n    nextByte = currentChar + 2;\n  }\n  if (isNegative == 0) {\n    maxValue = 0x7fffffff;\n  }\n  else {\n    maxValue = 0x80000000;\n  }\n  maxValueDividedBy10 = maxValue / 10;\n  validNumber = 0;\n  result = 0;\n  do {\n    currentByte = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    if ((currentByte & 4) == 0) {\n      if ((currentByte & 3) == 0) {\nLAB_0008277e:\n        if (validNumber == -1) {\n          if (isNegative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (isNegative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((currentByte & 3) == 1) {\n        numericValue = 0x37;\n      }\n      else {\n        numericValue = 0x57;\n      }\n      numericValue = byteValue - numericValue;\n    }\n    else {\n      numericValue = byteValue - 0x30;\n    }\n    if (9 < numericValue) goto LAB_0008277e;\n    if (validNumber != -1) {\n      if ((maxValueDividedBy10 <= result && result != maxValueDividedBy10) || ((result == maxValueDividedBy10 && ((int)(maxValue % 10) < numericValue))))\n      {\n        validNumber = -1;\n      }\n      else {\n        result = result * 10 + numericValue;\n        validNumber = 1;\n      }\n    }\n    byteValue = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_number_000815de",
                "param_1": "input",
                "bVar1": "currentByte",
                "bVar2": "isNegative",
                "uVar3": "result",
                "pbVar4": "nextByte",
                "uVar5": "byteValue",
                "pbVar6": "currentChar",
                "iVar7": "numericValue",
                "iVar8": "validNumber",
                "uVar9": "maxValueDividedBy10",
                "uVar10": "maxValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "initialize_system_000815ec",
            "code": "\nvoid initialize_system_000815ec(void)\n\n{\n  initialize_data();\n  initialize_and_configure_system();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  initialize_and_check_system();\n  do {\n    control_function();\n    execute_difference_calculations();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "initialize_system_000815ec",
                "initialize_data_00081618": "initialize_data",
                "initialize_and_configure_system_00080774": "initialize_and_configure_system",
                "initialize_and_check_system_000801e0": "initialize_and_check_system",
                "control_function_00080250": "control_function",
                "check_and_execute_difference_calculations_00080970": "execute_difference_calculations"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000815e8",
                "FUN_00080774",
                "FUN_00080250",
                "FUN_00080970",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_000801e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_data_00081618",
            "code": "\n\n\nvoid initializeData_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_data_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_result_00081624",
            "code": "\nint calculateResult_00081624(int index,int flag,int multiplier,undefined4 offset)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = checkParamSequence(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((relArray[6].r_offset / 1000000) * multiplier) / 0x12,offset);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)relArray[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_result_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "offset",
                "iVar1": "result",
                "uVar2": "value",
                "check_param_sequence_00081684": "checkParamSequence",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_param_sequence_00081684",
            "code": "\nint check_param_sequence_00081684(uint *sequence,uint mask,uint comparison_value,int max_iterations)\n\n{\n  int match_count;\n  \n  do {\n    if ((*sequence & mask) != comparison_value) {\n      do {\n        if ((*sequence & mask) == comparison_value) {\n          match_count = 0;\n          do {\n            if ((*sequence & mask) != comparison_value) {\n              return match_count;\n            }\n            match_count = match_count + 1;\n          } while (max_iterations != match_count);\n          return 0;\n        }\n        max_iterations = max_iterations + -1;\n      } while (max_iterations != 0);\n      return 0;\n    }\n    max_iterations = max_iterations + -1;\n  } while (max_iterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_param_sequence_00081684",
                "param_1": "sequence",
                "param_2": "mask",
                "param_3": "comparison_value",
                "param_4": "max_iterations",
                "iVar1": "match_count"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_data_value_000816d8",
            "code": "\nundefined4 get_data_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_data_value_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_relocation_entry_000816ec",
            "code": "\nvoid updateRelocationEntry_000816ec(dword address,dword value,dword offset)\n\n{\n  dword *relocationEntry;\n  uint index;\n  uint bitmask;\n  code *handleError;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationEntry = (dword *)apply_relocation_000817f0(400);\n    if (relocationEntry == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*handleError)(0xffffffff);\n      return;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitmask = 1 << (index & 0xff);\n  relocationEntry[index + 0x22] = address;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitmask;\n  relocationEntry[index + 0x42] = offset;\n  relocationEntry[99] = bitmask | relocationEntry[99];\n  relocationEntry[1] = index + 1;\n  relocationEntry[index + 2] = value;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*handleError)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_relocation_entry_000816ec",
                "param_1": "address",
                "param_2": "value",
                "param_3": "offset",
                "pdVar1": "relocationEntry",
                "uVar2": "index",
                "uVar3": "bitmask",
                "UNRECOVERED_JUMPTABLE_00": "handleError"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "process_assertion_failed_000816f8",
            "code": "\nvoid processAssertionFailed_000816f8(undefined4 assertionMessage1,undefined4 assertionMessage2,char *fileName,undefined4 lineNumber)\n\n{\n  undefined4 relocationAddress;\n  undefined4 currentLineNumber;\n  char *functionName;\n  undefined8 executionResult;\n  \n  relocationAddress = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (fileName == (char *)0x0) goto LAB_0008171c;\n  currentLineNumber = lineNumber;\n  functionName = \", function: \";\n  do {\n    lineNumber = assertionMessage1;\n    process_relocation_00081750(relocationAddress,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",currentLineNumber,assertionMessage1,assertionMessage2,\n                 functionName,fileName);\n    executionResult = execute_and_relocate_000836ec();\n    assertionMessage2 = (undefined4)((ulonglong)executionResult >> 0x20);\n    relocationAddress = (undefined4)executionResult;\nLAB_0008171c:\n    fileName = \"\";\n    currentLineNumber = lineNumber;\n    functionName = fileName;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "process_assertion_failed_000816f8",
                "param_1": "assertionMessage1",
                "param_2": "assertionMessage2",
                "param_3": "fileName",
                "param_4": "lineNumber",
                "uVar1": "relocationAddress",
                "uVar2": "currentLineNumber",
                "pcVar3": "functionName",
                "uVar4": "executionResult"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_000836ec",
                "FUN_00081750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "process_relocation_00081750",
            "code": "\nvoid process_relocation_00081750(undefined4 offset,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 relocation_offset;\n  undefined4 arg4;\n  \n  relocation_offset = arg2;\n  arg4 = arg3;\n  process_formatted_string_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,arg1,&relocation_offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "process_relocation_00081750",
                "param_1": "offset",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "relocation_offset",
                "uStack_4": "arg4"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00081750(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,param_1,param_2,&uStack_8);\n  return;\n}\n\n"
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_function_set_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeFunctionSet_00081778(void)\n\n{\n  int iterationCount;\n  code **functionPointer;\n  \n  FUNC_00085844();\n  functionPointer = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointer = functionPointer + 1;\n    (**functionPointer)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_function_set_00081778",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointer"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_000836d8",
                "FUN_00080118",
                "FUN_00085844"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "execute_relocation_000817c8",
            "code": "\nvoid executeRelocation_000817c8(undefined4 baseAddress,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 newValue1;\n  undefined4 newValue2;\n  undefined4 newValue3;\n  \n  newValue1 = value1;\n  newValue2 = value2;\n  newValue3 = value3;\n  process_formatted_string_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),baseAddress,&newValue1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "execute_relocation_000817c8",
                "param_1": "baseAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uStack_c": "newValue1",
                "uStack_8": "newValue2",
                "uStack_4": "newValue3"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000817c8(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 uStack_c;\n  undefined4 uStack_8;\n  undefined4 uStack_4;\n  \n  uStack_c = param_2;\n  uStack_8 = param_3;\n  uStack_4 = param_4;\n  FUNC_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),param_1,&uStack_c);\n  return;\n}\n\n"
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "apply_relocation_000817f0",
            "code": "\nvoid apply_relocation_000817f0(undefined4 data)\n\n{\n  relocation_function_00081810(relocation_table[140].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "apply_relocation_000817f0",
                "param_1": "data",
                "Elf32_Rel_ARRAY_20070000": "relocation_table"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "process_relocation_00081800",
            "code": "\nvoid processRelocation_00081800(undefined4 input)\n\n{\n  process_relocation_section_00083b10(relocationSection[140].offset,input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "process_relocation_00081800",
                "param_1": "input",
                "Elf32_Rel_ARRAY_20070000": "relocationSection",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081480",
                "FUN_00081472"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "relocation_function_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocationFunction_00081810(undefined4 *resultPointer,uint size)\n\n{\n  dword info;\n  int pointerValue;\n  uint mask;\n  uint value;\n  int tempVar;\n  uint offset;\n  dword detailedOffset;\n  uint bitwiseValue;\n  int tempVar2;\n  undefined *pointer;\n  dword detailedOffset2;\n  dword tempOffset;\n  int tempVar3;\n  dword *pointerArray;\n  uint adjustedSize;\n  undefined *adjustedPointer;\n  dword *adjustedPointerArray;\n  uint tempSize;\n  \n  if (size + 0xb < 0x17) {\n    adjustedSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    adjustedSize = size + 0xb & 0xfffffff8;\n    if (((int)adjustedSize < 0) || (adjustedSize < size)) {\nLAB_00081876:\n      *resultPointer = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(resultPointer);\n  info = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (adjustedSize < 0x1f8) {\n    tempVar3 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + adjustedSize);\n    if ((tempVar3 != adjustedSize + 0x20070464) ||\n       (pointerValue = tempVar3 + 8, tempVar3 = *(int *)(tempVar3 + 0x14), pointerValue != tempVar3)) {\n      tempVar = *(int *)(tempVar3 + 0xc);\n      tempVar2 = (*(uint *)(tempVar3 + 4) & 0xfffffffc) + tempVar3;\n      adjustedSize = *(uint *)(tempVar2 + 4);\n      pointerValue = *(int *)(tempVar3 + 8);\n      *(int *)(pointerValue + 0xc) = tempVar;\n      *(int *)(tempVar + 8) = pointerValue;\n      *(uint *)(tempVar2 + 4) = adjustedSize | 1;\n      FUNC_00081f98(resultPointer);\n      return (int *)(tempVar3 + 8);\n    }\n    tempSize = (adjustedSize >> 3) + 2;\n  }\n  else {\n    tempSize = adjustedSize >> 9;\n    if (tempSize == 0) {\n      pointerValue = 0x7e;\n      tempVar3 = 0x3f;\n    }\n    else if (tempSize < 5) {\n      tempVar3 = (adjustedSize >> 6) + 0x38;\n      pointerValue = tempVar3 * 2;\n    }\n    else if (tempSize < 0x15) {\n      tempVar3 = tempSize + 0x5b;\n      pointerValue = tempVar3 * 2;\n    }\n    else if (tempSize < 0x55) {\n      tempVar3 = (adjustedSize >> 0xc) + 0x6e;\n      pointerValue = tempVar3 * 2;\n    }\n    else if (tempSize < 0x155) {\n      tempVar3 = (adjustedSize >> 0xf) + 0x77;\n      pointerValue = tempVar3 * 2;\n    }\n    else if (tempSize < 0x555) {\n      tempVar3 = (adjustedSize >> 0x12) + 0x7c;\n      pointerValue = tempVar3 * 2;\n    }\n    else {\n      pointerValue = 0xfc;\n      tempVar3 = 0x7e;\n    }\n    for (detailedOffset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[pointerValue]; pointerValue * 4 + 0x20070464U != detailedOffset\n        ; detailedOffset = *(dword *)(detailedOffset + 0xc)) {\n      tempSize = *(uint *)(detailedOffset + 4) & 0xfffffffc;\n      tempVar = tempSize - adjustedSize;\n      if (0xf < tempVar) {\n        tempVar3 = tempVar3 + -1;\n        break;\n      }\n      if (-1 < tempVar) {\n        pointerValue = tempSize + detailedOffset;\n        adjustedSize = *(uint *)(pointerValue + 4);\n        tempVar = *(int *)(detailedOffset + 0xc);\n        tempVar3 = *(int *)(detailedOffset + 8);\n        *(int *)(tempVar3 + 0xc) = tempVar;\n        *(int *)(tempVar + 8) = tempVar3;\n        *(uint *)(pointerValue + 4) = adjustedSize | 1;\n        FUNC_00081f98(resultPointer);\n        return (int *)(detailedOffset + 8);\n      }\n    }\n    tempSize = tempVar3 + 1;\n  }\n  detailedOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    mask = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    value = mask & 0xfffffffc;\n    offset = value - adjustedSize;\n    if (0xf < (int)offset) {\n      detailedOffset = adjustedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = adjustedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = detailedOffset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = detailedOffset;\n      *(undefined4 *)(detailedOffset + 0xc) = 0x2007046c;\n      *(undefined4 *)(detailedOffset + 8) = 0x2007046c;\n      *(uint *)(detailedOffset + 4) = offset | 1;\n      *(uint *)(detailedOffset + offset) = offset;\n      FUNC_00081f98(resultPointer);\n      return (int *)(info + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)offset) {\n      *(uint *)(value + info + 4) = *(uint *)(value + info + 4) | 1;\n      FUNC_00081f98(resultPointer);\n      return (int *)(info + 8);\n    }\n    if (value < 0x200) {\n      value = mask & 0xfffffff8;\n      tempVar3 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value);\n      detailedOffset = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(info + 8) = tempVar3;\n      *(uint *)(info + 0xc) = value + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = detailedOffset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + value) = info;\n      *(dword *)(tempVar3 + 0xc) = info;\n    }\n    else {\n      offset = mask >> 9;\n      if (offset < 5) {\n        pointerValue = (mask >> 6) + 0x38;\n        tempVar3 = pointerValue * 2;\n      }\n      else if (offset < 0x15) {\n        pointerValue = offset + 0x5b;\n        tempVar3 = pointerValue * 2;\n      }\n      else if (offset < 0x55) {\n        pointerValue = (mask >> 0xc) + 0x6e;\n        tempVar3 = pointerValue * 2;\n      }\n      else if (offset < 0x155) {\n        pointerValue = (mask >> 0xf) + 0x77;\n        tempVar3 = pointerValue * 2;\n      }\n      else if (offset < 0x555) {\n        pointerValue = (mask >> 0x12) + 0x7c;\n        tempVar3 = pointerValue * 2;\n      }\n      else {\n        tempVar3 = 0xfc;\n        pointerValue = 0x7e;\n      }\n      detailedOffset = tempVar3 * 4 + 0x20070464;\n      detailedOffset2 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[tempVar3];\n      if (detailedOffset2 == detailedOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (pointerValue >> 2 & 0xffU);\n        tempOffset = detailedOffset2;\n      }\n      else {\n        do {\n          tempOffset = detailedOffset2;\n          if ((*(uint *)(detailedOffset2 + 4) & 0xfffffffc) <= value) break;\n          detailedOffset2 = *(dword *)(detailedOffset2 + 8);\n          tempOffset = detailedOffset2;\n        } while (detailedOffset != detailedOffset2);\n        detailedOffset2 = *(dword *)(tempOffset + 0xc);\n      }\n      detailedOffset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(info + 0xc) = detailedOffset2;\n      *(dword *)(info + 8) = tempOffset;\n      *(dword *)(detailedOffset2 + 8) = info;\n      *(dword *)(tempOffset + 0xc) = info;\n    }\n  }\n  info = Elf32_Rel_ARRAY_20070000[141].r_info;\n  mask = 1 << ((int)tempSize >> 2 & 0xffU);\n  if (mask <= detailedOffset) {\n    if ((detailedOffset & mask) == 0) {\n      tempSize = tempSize & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        tempSize = tempSize + 4;\n      } while ((detailedOffset & mask) == 0);\n    }\n    do {\n      adjustedPointerArray = &Elf32_Rel_ARRAY_20070000[tempSize + 0x8c].r_info;\n      pointerArray = adjustedPointerArray;\n      value = tempSize;\n      do {\n        for (pointer = (undefined *)pointerArray[3]; pointerArray != (dword *)pointer;\n            pointer = *(undefined **)(pointer + 0xc)) {\n          offset = *(uint *)(pointer + 4) & 0xfffffffc;\n          bitwiseValue = offset - adjustedSize;\n          if (0xf < (int)bitwiseValue) {\n            pointerValue = *(int *)(pointer + 8);\n            tempVar3 = *(int *)(pointer + 0xc);\n            adjustedPointer = pointer + adjustedSize;\n            *(uint *)(pointer + 4) = adjustedSize | 1;\n            *(int *)(pointerValue + 0xc) = tempVar3;\n            *(int *)(tempVar3 + 8) = pointerValue;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)adjustedPointer;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)adjustedPointer;\n            *(undefined4 *)(adjustedPointer + 0xc) = 0x2007046c;\n            *(undefined4 *)(adjustedPointer + 8) = 0x2007046c;\n            *(uint *)(adjustedPointer + 4) = bitwiseValue | 1;\n            *(uint *)(adjustedPointer + bitwiseValue) = bitwiseValue;\n            FUNC_00081f98(resultPointer);\n            return (int *)(pointer + 8);\n          }\n          if (-1 < (int)bitwiseValue) {\n            tempVar3 = *(int *)(pointer + 8);\n            pointerValue = *(int *)(pointer + 0xc);\n            *(uint *)(pointer + offset + 4) = *(uint *)(pointer + offset + 4) | 1;\n            *(int *)(tempVar3 + 0xc) = pointerValue;\n            *(int *)(pointerValue + 8) = tempVar3;\n            FUNC_00081f98(resultPointer);\n            return (int *)(pointer + 8);\n          }\n        }\n        value = value + 1;\n        pointerArray = pointerArray + 2;\n      } while ((value & 3) != 0);\n      do {\n        offset = tempSize & 3;\n        pointer = (undefined *)(adjustedPointerArray + -2);\n        tempSize = tempSize - 1;\n        if (offset == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~mask;\n          break;\n        }\n        adjustedPointerArray = (dword *)*adjustedPointerArray;\n      } while (adjustedPointerArray == (dword *)pointer);\n      mask = mask * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= mask &&\n           mask - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (tempSize = value, mask == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & mask) == 0; mask = mask << 1) {\n        tempSize = tempSize + 4;\n      }\n    } while( true );\n  }\n  tempSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((adjustedSize <= tempSize) &&\n     (mask = tempSize - adjustedSize, detailedOffset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)mask))\n  goto LAB_00081b1a;\n  mask = Elf32_Rel_ARRAY_20070000[141].r_info + tempSize;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    value = adjustedSize + DAT_20071218 + 0x10;\n  }\n  else {\n    value = adjustedSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  detailedOffset = check_and_assign_result_0008236c(resultPointer,value);\n  if ((detailedOffset == 0xffffffff) || ((detailedOffset < mask && (info != 0x20070464)))) {\n    tempSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    detailedOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    offset = DAT_2007121c + value;\n    DAT_2007121c = offset;\n    if ((mask == detailedOffset) && ((mask & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = value + tempSize | 1;\n    }\n    else {\n      detailedOffset2 = detailedOffset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        detailedOffset2 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = offset + (detailedOffset - mask);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = detailedOffset2;\n      mask = detailedOffset & 7;\n      if (mask == 0) {\n        tempVar3 = 0x1000;\n      }\n      else {\n        detailedOffset = detailedOffset + (8 - mask);\n        tempVar3 = 0x1008 - mask;\n      }\n      tempVar3 = tempVar3 - (value + detailedOffset & 0xfff);\n      pointerValue = check_and_assign_result_0008236c(resultPointer,tempVar3);\n      if (pointerValue == -1) {\n        mask = 1;\n        tempVar3 = 0;\n      }\n      else {\n        mask = (pointerValue - detailedOffset) + tempVar3 | 1;\n      }\n      offset = DAT_2007121c + tempVar3;\n      Elf32_Rel_ARRAY_20070000[141].r_info = detailedOffset;\n      DAT_2007121c = offset;\n      *(uint *)(detailedOffset + 4) = mask;\n      if (info != 0x20070464) {\n        if (tempSize < 0x10) {\n          *(undefined4 *)(detailedOffset + 4) = 1;\n          tempSize = 0;\n          goto LAB_00081b04;\n        }\n        tempSize = tempSize - 0xc & 0xfffffff8;\n        *(uint *)(info + 4) = tempSize | *(uint *)(info + 4) & 1;\n        *(undefined4 *)(info + tempSize + 4) = 5;\n        *(undefined4 *)(info + tempSize + 8) = 5;\n        if (0xf < tempSize) {\n          process_relocation_section_00083b10(resultPointer,info + 8);\n          offset = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < offset) {\n      DAT_20071214 = offset;\n    }\n    if (DAT_20071210 < offset) {\n      DAT_20071210 = offset;\n    }\n    tempSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    detailedOffset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  mask = tempSize - adjustedSize;\n  if ((tempSize < adjustedSize) || ((int)mask < 0x10)) {\n    FUNC_00081f98(resultPointer);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = adjustedSize + detailedOffset;\n  *(uint *)(detailedOffset + 4) = adjustedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask | 1;\n  FUNC_00081f98(resultPointer);\n  return (int *)(detailedOffset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "relocation_function_00081810",
                "param_1": "resultPointer",
                "param_2": "size",
                "dVar1": "info",
                "iVar2": "pointerValue",
                "uVar3": "mask",
                "uVar4": "value",
                "iVar5": "tempVar",
                "uVar6": "offset",
                "dVar7": "detailedOffset",
                "uVar8": "bitwiseValue",
                "iVar9": "tempVar2",
                "puVar10": "pointer",
                "dVar11": "detailedOffset2",
                "dVar12": "tempOffset",
                "iVar13": "tempVar3",
                "pdVar14": "pointerArray",
                "uVar15": "adjustedSize",
                "puVar16": "adjustedPointer",
                "pdVar17": "adjustedPointerArray",
                "uVar18": "tempSize"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00084018",
                "FUN_000817f0",
                "FUN_00081fac"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_uint_data_00081d48",
            "code": "\nundefined4 * copyUintData_00081d48(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtrTemp;\n  undefined4 *srcPtr;\n  uint remainingLength;\n  uint temp;\n  bool loopCondition;\n  \n  destPtrTemp = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      temp = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          srcPtr = destPtrTemp;\n          loopCondition = temp != 0;\n          temp = temp - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtrTemp = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      temp = 4 - ((uint)destination & 3);\n      length = length - temp;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destPtrTemp = destPtr;\n      source = srcPtr;\n      if ((temp & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destPtrTemp = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *destPtrTemp = *source;\n    destPtrTemp[1] = source[1];\n    destPtrTemp[2] = source[2];\n    destPtrTemp[3] = source[3];\n    destPtrTemp[4] = source[4];\n    destPtrTemp[5] = source[5];\n    destPtrTemp[6] = source[6];\n    destPtrTemp[7] = source[7];\n    destPtrTemp[8] = source[8];\n    destPtrTemp[9] = source[9];\n    destPtrTemp[10] = source[10];\n    destPtrTemp[0xb] = source[0xb];\n    destPtrTemp[0xc] = source[0xc];\n    destPtrTemp[0xd] = source[0xd];\n    destPtrTemp[0xe] = source[0xe];\n    destPtrTemp[0xf] = source[0xf];\n    destPtrTemp = destPtrTemp + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *destPtrTemp = *source;\n      destPtrTemp[1] = source[1];\n      destPtrTemp[2] = source[2];\n      destPtrTemp[3] = source[3];\n      destPtrTemp = destPtrTemp + 4;\n      source = source + 4;\n      loopCondition = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (loopCondition);\n  }\n  temp = remainingLength + 0xc;\n  srcPtr = destPtrTemp;\n  destPtr = source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      loopCondition = 3 < temp;\n      temp = temp - 4;\n      destPtrTemp = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (loopCondition);\n  }\nLAB_00081dcc:\n  if (temp + 4 != 0) {\n    destPtr = destPtrTemp;\n    srcPtr = source;\n    if ((temp & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destPtrTemp + 1);\n      *(undefined *)destPtrTemp = *(undefined *)source;\n    }\n    if ((temp + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_uint_data_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "destPtrTemp",
                "puVar3": "srcPtr",
                "uVar4": "remainingLength",
                "uVar5": "temp",
                "bVar6": "loopCondition"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int iteration;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint tempSize;\n  undefined *tempPtr2;\n  uint remainingSize;\n  \n  if ((src < dest) && (tempPtr = (undefined4 *)((int)src + size), dest < tempPtr)) {\n    tempPtr2 = (undefined *)((int)dest + size);\n    iteration = size - 1;\n    if (size != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        iteration = iteration + -1;\n        tempPtr2 = tempPtr2 + -1;\n        *tempPtr2 = *(undefined *)tempPtr;\n      } while (iteration != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tempPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    iteration = (size - 0x10 >> 4) + 1;\n    remainingSize = size & 0xf;\n    src = src + iteration * 4;\n    dest = dest + iteration * 4;\n    tempSize = remainingSize;\n    tempPtr = dest;\n    srcPtr = src;\n    if (3 < remainingSize) {\n      do {\n        tempSize = tempSize - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempSize);\n      iteration = (remainingSize - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + iteration);\n      src = (undefined4 *)((int)src + iteration);\n      remainingSize = size & 3;\n    }\n    size = remainingSize;\n    if (size == 0) {\n      return;\n    }\n  }\n  tempPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "iteration",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "tempSize",
                "puVar6": "tempPtr2",
                "uVar7": "remainingSize"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081fac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_with_byte_00081f00",
            "code": "\nvoid memset_with_byte_00081f00(undefined4 *destination,undefined byte_to_fill,uint length)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 fill_pattern;\n  uint remaining_length;\n  bool is_length_zero;\n  \n  if (((uint)destination & 3) != 0) {\n    is_length_zero = length == 0;\n    dest_ptr = destination;\n    length = length - 1;\n    if (is_length_zero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = byte_to_fill;\n      if (((uint)destination & 3) == 0) break;\n      is_length_zero = length == 0;\n      dest_ptr = destination;\n      length = length - 1;\n      if (is_length_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < length) {\n    fill_pattern = CONCAT22(CONCAT11(byte_to_fill,byte_to_fill),CONCAT11(byte_to_fill,byte_to_fill));\n    remaining_length = length;\n    dest_ptr = destination;\n    if (0xf < length) {\n      remaining_length = length - 0x10;\n      do {\n        *dest_ptr = fill_pattern;\n        dest_ptr[1] = fill_pattern;\n        dest_ptr[2] = fill_pattern;\n        dest_ptr[3] = fill_pattern;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (remaining_length & 0xfffffff0) + 0x10));\n      length = length & 0xf;\n      destination = destination + ((remaining_length >> 4) + 1) * 4;\n      remaining_length = length;\n      dest_ptr = destination;\n      if (length < 4) goto LAB_00081f7c;\n    }\n    do {\n      length = length - 4;\n      *destination = fill_pattern;\n      destination = destination + 1;\n    } while (3 < length);\n    destination = (undefined4 *)((int)dest_ptr + (remaining_length - 4 & 0xfffffffc) + 4);\n    length = remaining_length & 3;\n  }\nLAB_00081f7c:\n  if (length != 0) {\n    dest_ptr = destination;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = byte_to_fill;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(length + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_with_byte_00081f00",
                "param_1": "destination",
                "param_2": "byte_to_fill",
                "param_3": "length",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "fill_pattern",
                "uVar4": "remaining_length",
                "bVar5": "is_length_zero"
            },
            "calling": [
                "FUN_00083888",
                "FUN_000811b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00083b10",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "process_relocation_00081f9c",
            "code": "\nvoid process_relocation_00081f9c(undefined4 param_1,undefined4 param_2)\n\n{\n  process_memory_00081fac(relocation_array[140].r_offset,param_1,param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "process_relocation_00081f9c",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "process_memory_00081fac",
            "code": "\nint * processMemory_00081fac(undefined4 *paramPointer,int *memoryArray,uint size)\n\n{\n  dword dWordVar;\n  int *newMemoryArray;\n  uint var3;\n  int var4;\n  uint var5;\n  int var6;\n  int *var7;\n  uint var8;\n  uint var9;\n  int *var10;\n  \n  if (memoryArray == (int *)0x0) {\n    newMemoryArray = (int *)relocation_function_00081810(paramPointer,size);\n    return newMemoryArray;\n  }\n  FUNC_00081f94();\n  var5 = memoryArray[-1];\n  var8 = var5 & 0xfffffffc;\n  newMemoryArray = memoryArray + -2;\n  if (size + 0xb < 0x17) {\n    var9 = 0x10;\n  }\n  else {\n    var9 = size + 0xb & 0xfffffff8;\n    if ((int)var9 < 0) goto LAB_00082078;\n  }\n  if (var9 < size) {\nLAB_00082078:\n    *paramPointer = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)var8 < (int)var9) {\n    dWordVar = (int)newMemoryArray + var8;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == dWordVar) {\n      var3 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      dWordVar = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(var9 + 0x10) <= (int)(var3 + var8)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newMemoryArray + var9;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (var3 + var8) - var9 | 1;\n        memoryArray[-1] = var9 | memoryArray[-1] & 1U;\n        FUNC_00081f98(paramPointer);\n        return memoryArray;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(dWordVar + 4) & 0xfffffffe) + dWordVar + 4) & 1) == 0) {\n      var3 = *(uint *)(dWordVar + 4) & 0xfffffffc;\n      if ((int)var9 <= (int)(var3 + var8)) {\n        var6 = *(int *)(dWordVar + 0xc);\n        var4 = *(int *)(dWordVar + 8);\n        *(int *)(var4 + 0xc) = var6;\n        *(int *)(var6 + 8) = var4;\n        var8 = var3 + var8;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      var3 = 0;\n      dWordVar = 0;\n    }\n    if (-1 < (int)(var5 << 0x1f)) {\n      var10 = (int *)((int)newMemoryArray - memoryArray[-2]);\n      var5 = (var10[1] & 0xfffffffcU) + var8;\n      if (dWordVar != 0) {\n        if (dWordVar == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(var9 + 0x10) <= (int)(var3 + var5)) {\n            newMemoryArray = var10 + 2;\n            var4 = *newMemoryArray;\n            var6 = var10[3];\n            var8 = var8 - 4;\n            *(int *)(var4 + 0xc) = var6;\n            *(int *)(var6 + 8) = var4;\n            if (var8 < 0x25) {\n              var7 = newMemoryArray;\n              if (0x13 < var8) {\n                var10[2] = *memoryArray;\n                var10[3] = memoryArray[1];\n                if (var8 < 0x1c) {\n                  memoryArray = memoryArray + 2;\n                  var7 = var10 + 4;\n                }\n                else {\n                  var10[4] = memoryArray[2];\n                  var10[5] = memoryArray[3];\n                  if (var8 == 0x24) {\n                    var10[6] = memoryArray[4];\n                    var7 = memoryArray + 5;\n                    memoryArray = memoryArray + 6;\n                    var10[7] = *var7;\n                    var7 = var10 + 8;\n                  }\n                  else {\n                    memoryArray = memoryArray + 4;\n                    var7 = var10 + 6;\n                  }\n                }\n              }\n              *var7 = *memoryArray;\n              var7[1] = memoryArray[1];\n              var7[2] = memoryArray[2];\n            }\n            else {\n              copy_memory_00081e34(newMemoryArray,memoryArray);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)var10 + var9;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (var3 + var5) - var9 | 1;\n            var10[1] = var9 | var10[1] & 1U;\n            FUNC_00081f98(paramPointer);\n            return newMemoryArray;\n          }\n        }\n        else {\n          var3 = var3 + var5;\n          if ((int)var9 <= (int)var3) {\n            var6 = *(int *)(dWordVar + 0xc);\n            var4 = *(int *)(dWordVar + 8);\n            *(int *)(var4 + 0xc) = var6;\n            *(int *)(var6 + 8) = var4;\n            var7 = var10 + 2;\n            var4 = *var7;\n            var6 = var10[3];\n            var5 = var8 - 4;\n            *(int *)(var4 + 0xc) = var6;\n            *(int *)(var6 + 8) = var4;\n            var8 = var3;\n            if (var5 < 0x25) {\n              newMemoryArray = var7;\n              if (0x13 < var5) {\n                var10[2] = *memoryArray;\n                var10[3] = memoryArray[1];\n                if (var5 < 0x1c) {\n                  memoryArray = memoryArray + 2;\n                  newMemoryArray = var10 + 4;\n                }\n                else {\n                  var10[4] = memoryArray[2];\n                  var10[5] = memoryArray[3];\n                  if (var5 == 0x24) {\n                    var10[6] = memoryArray[4];\n                    newMemoryArray = memoryArray + 5;\n                    memoryArray = memoryArray + 6;\n                    var10[7] = *newMemoryArray;\n                    newMemoryArray = var10 + 8;\n                  }\n                  else {\n                    memoryArray = memoryArray + 4;\n                    newMemoryArray = var10 + 6;\n                  }\n                }\n              }\n              *newMemoryArray = *memoryArray;\n              newMemoryArray[1] = memoryArray[1];\n              newMemoryArray[2] = memoryArray[2];\n              var5 = var10[1];\n              newMemoryArray = var10;\n              memoryArray = var7;\n            }\n            else {\n              copy_memory_00081e34(var7,memoryArray);\n              var5 = var10[1];\n              newMemoryArray = var10;\n              memoryArray = var7;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)var9 <= (int)var5) {\n        var7 = var10 + 2;\n        var4 = *var7;\n        var6 = var10[3];\n        var3 = var8 - 4;\n        *(int *)(var4 + 0xc) = var6;\n        *(int *)(var6 + 8) = var4;\n        var8 = var5;\n        if (var3 < 0x25) {\n          newMemoryArray = var7;\n          if (0x13 < var3) {\n            var10[2] = *memoryArray;\n            var10[3] = memoryArray[1];\n            if (var3 < 0x1c) {\n              memoryArray = memoryArray + 2;\n              newMemoryArray = var10 + 4;\n            }\n            else {\n              var10[4] = memoryArray[2];\n              var10[5] = memoryArray[3];\n              if (var3 == 0x24) {\n                var10[6] = memoryArray[4];\n                newMemoryArray = memoryArray + 5;\n                memoryArray = memoryArray + 6;\n                var10[7] = *newMemoryArray;\n                newMemoryArray = var10 + 8;\n              }\n              else {\n                memoryArray = memoryArray + 4;\n                newMemoryArray = var10 + 6;\n              }\n            }\n          }\n          *newMemoryArray = *memoryArray;\n          newMemoryArray[1] = memoryArray[1];\n          newMemoryArray[2] = memoryArray[2];\n          var5 = var10[1];\n          newMemoryArray = var10;\n          memoryArray = var7;\n        }\n        else {\n          copy_memory_00081e34(var7,memoryArray);\n          var5 = var10[1];\n          newMemoryArray = var10;\n          memoryArray = var7;\n        }\n        goto LAB_00082088;\n      }\n    }\n    var10 = (int *)relocation_function_00081810(paramPointer,size);\n    if (var10 == (int *)0x0) goto LAB_000820a0;\n    var5 = memoryArray[-1];\n    if (var10 + -2 != (int *)((var5 & 0xfffffffe) + (int)newMemoryArray)) {\n      var8 = var8 - 4;\n      if (var8 < 0x25) {\n        newMemoryArray = memoryArray;\n        var7 = var10;\n        if (0x13 < var8) {\n          *var10 = *memoryArray;\n          var10[1] = memoryArray[1];\n          if (var8 < 0x1c) {\n            newMemoryArray = memoryArray + 2;\n            var7 = var10 + 2;\n          }\n          else {\n            var10[2] = memoryArray[2];\n            var10[3] = memoryArray[3];\n            if (var8 == 0x24) {\n              var10[4] = memoryArray[4];\n              var10[5] = memoryArray[5];\n              newMemoryArray = memoryArray + 6;\n              var7 = var10 + 6;\n            }\n            else {\n              newMemoryArray = memoryArray + 4;\n              var7 = var10 + 4;\n            }\n          }\n        }\n        *var7 = *newMemoryArray;\n        var7[1] = newMemoryArray[1];\n        var7[2] = newMemoryArray[2];\n      }\n      else {\n        copy_memory_00081e34(var10,memoryArray);\n      }\n      process_relocation_section_00083b10(paramPointer,memoryArray);\n      goto LAB_000820a0;\n    }\n    var8 = var8 + (var10[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  var3 = var8 - var9;\n  var10 = memoryArray;\n  if (var3 < 0x10) {\n    newMemoryArray[1] = var5 & 1 | var8;\n    *(uint *)((int)newMemoryArray + var8 + 4) = *(uint *)((int)newMemoryArray + var8 + 4) | 1;\n  }\n  else {\n    newMemoryArray[1] = var5 & 1 | var9;\n    *(uint *)((int)newMemoryArray + var9 + 4) = var3 | 1;\n    *(uint *)((int)newMemoryArray + var3 + var9 + 4) = *(uint *)((int)newMemoryArray + var3 + var9 + 4) | 1;\n    process_relocation_section_00083b10(paramPointer,(int)newMemoryArray + var9 + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(paramPointer);\n  return var10;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "process_memory_00081fac",
                "param_1": "paramPointer",
                "param_2": "memoryArray",
                "param_3": "size",
                "dVar1": "dWordVar",
                "piVar2": "newMemoryArray",
                "uVar3": "var3",
                "iVar4": "var4",
                "uVar5": "var5",
                "iVar6": "var6",
                "piVar7": "var7",
                "uVar8": "var8",
                "uVar9": "var9",
                "piVar10": "var10"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_00081f9c"
            ],
            "called": [
                "FUN_00081f94",
                "FUN_00081e34",
                "FUN_00081f98",
                "FUN_00083b10",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "check_and_assign_result_0008236c",
            "code": "\nvoid checkAndAssignResult_0008236c(int *resultPointer,undefined4 inputValue)\n\n{\n  int additionResult;\n  \n  DAT_20071244 = 0;\n  additionResult = addition_00080e88(inputValue);\n  if ((additionResult == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "check_and_assign_result_0008236c",
                "param_1": "resultPointer",
                "param_2": "inputValue",
                "iVar1": "additionResult"
            },
            "calling": [
                "FUN_00083a74",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_strings_00082390",
            "code": "\nint compareStrings_00082390(uint *string1,uint *string2)\n\n{\n  uint *str1;\n  int result;\n  uint *str2;\n  uint *temp;\n  uint length1;\n  uint ch1;\n  uint ch2;\n  uint ch3;\n  uint diff;\n  \n  if ((((uint)string1 | (uint)string2) & 7) != 0) {\n    str1 = string1;\n    if (((uint)string1 & 3) != 0) {\n      str1 = (uint *)((uint)string1 & 0xfffffffc) + 1;\n      length1 = *(uint *)((uint)string1 & 0xfffffffc);\n      str2 = string2;\n      if (((uint)string1 & 1) == 0) {\nLAB_00082410:\n        temp = (uint *)((int)str2 + 1);\n        ch1 = length1 >> 0x10 & 0xff;\n        result = ch1 - *(byte *)str2;\n        if (result != 0) {\n          return result;\n        }\n        if (ch1 == 0) {\n          return 0;\n        }\n      }\n      else {\n        temp = string2;\n        if (((uint)string1 & 2) == 0) {\n          str2 = (uint *)((int)string2 + 1);\n          ch1 = length1 >> 8 & 0xff;\n          result = ch1 - *(byte *)string2;\n          if (result != 0) {\n            return result;\n          }\n          if (ch1 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      string2 = (uint *)((int)temp + 1);\n      result = (length1 >> 0x18) - (uint)*(byte *)temp;\n      if ((result != 0) || (length1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    length1 = (uint)string2 & 3;\n    if (length1 != 0) {\n      string2 = (uint *)((uint)string2 & 0xfffffffc);\n      if (length1 == 2) {\n        length1 = *string2;\n        do {\n          string2 = string2 + 1;\n          ch2 = *str1;\n          length1 = length1 >> 0x10;\n          ch3 = ch2 + 0xfefefeff & ~ch2;\n          diff = ch3 & 0x80808080;\n          ch1 = ch2 & 0xffff;\n          if ((ch3 & 0x8080) != 0 || ch1 != length1) goto LAB_0008258e;\n          length1 = *string2;\n          ch1 = ch1 ^ ch2;\n          ch2 = length1 * 0x10000;\n          str1 = str1 + 1;\n        } while (diff == 0 && ch1 == ch2);\n      }\n      else if (length1 < 2) {\n        length1 = *string2;\n        do {\n          string2 = string2 + 1;\n          ch2 = *str1;\n          length1 = length1 >> 8;\n          ch3 = ch2 + 0xfefefeff & ~ch2;\n          diff = ch3 & 0x80808080;\n          ch1 = ch2 & 0xffffff;\n          if ((ch3 & 0x808080) != 0 || ch1 != length1) goto LAB_0008258e;\n          length1 = *string2;\n          ch1 = ch1 ^ ch2;\n          ch2 = length1 * 0x1000000;\n          str1 = str1 + 1;\n        } while (diff == 0 && ch1 == ch2);\n      }\n      else {\n        length1 = *string2;\n        do {\n          string2 = string2 + 1;\n          ch2 = *str1;\n          length1 = length1 >> 0x18;\n          ch3 = ch2 + 0xfefefeff & ~ch2;\n          diff = ch3 & 0x80808080;\n          ch1 = ch2 & 0xff;\n          if ((ch3 & 0x80) != 0 || ch1 != length1) goto LAB_0008258e;\n          length1 = *string2;\n          ch1 = ch1 ^ ch2;\n          ch2 = length1 * 0x100;\n          str1 = str1 + 1;\n        } while (diff == 0 && ch1 == ch2);\n      }\n      ch1 = ch1 << 0x18 | (ch1 >> 8 & 0xff) << 0x10 | (ch1 >> 0x10 & 0xff) << 8 |\n              ch1 >> 0x18;\n      length1 = (ch2 >> 8 & 0xff) << 0x10 | (ch2 >> 0x10 & 0xff) << 8 | ch2 >> 0x18;\n      goto LAB_0008259e;\n    }\n    string1 = str1;\n    str2 = string2;\n    if (((uint)str1 & 4) != 0) {\n      string1 = str1 + 1;\n      length1 = *str1;\n      str2 = string2 + 1;\n      ch2 = *string2;\n      diff = length1 + 0xfefefeff & ~length1 & 0x80808080;\n      if (length1 != ch2 || diff != 0) {\nLAB_0008259a:\n        ch1 = length1 << 0x18 | (length1 >> 8 & 0xff) << 0x10 | (length1 >> 0x10 & 0xff) << 8 |\n                length1 >> 0x18;\n        length1 = ch2 << 0x18 | (ch2 >> 8 & 0xff) << 0x10 | (ch2 >> 0x10 & 0xff) << 8 |\n                ch2 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    string2 = str2;\n    if (((uint)str2 & 4) != 0) {\n      length1 = *str2;\n      str1 = str2 + 1;\n      do {\n        ch1 = *string1;\n        ch2 = string1[1];\n        diff = ch1 + 0xfefefeff & ~ch1 & 0x80808080;\n        if (ch1 != length1 || diff != 0) goto LAB_0008258e;\n        ch3 = *str1;\n        length1 = str1[1];\n        diff = ch2 + 0xfefefeff & ~ch2 & 0x80808080;\n        string1 = string1 + 2;\n        str1 = str1 + 2;\n      } while (ch2 == ch3 && diff == 0);\n      ch1 = ch2 << 0x18 | (ch2 >> 8 & 0xff) << 0x10 | (ch2 >> 0x10 & 0xff) << 8 |\n              ch2 >> 0x18;\n      length1 = ch3 << 0x18 | (ch3 >> 8 & 0xff) << 0x10 | (ch3 >> 0x10 & 0xff) << 8 |\n              ch3 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    length1 = *string1;\n    ch1 = string1[1];\n    ch2 = *string2;\n    ch3 = string2[1];\n    diff = length1 + 0xfefefeff & ~length1 & 0x80808080;\n    if (length1 != ch2 || diff != 0) goto LAB_0008259a;\n    diff = ch1 + 0xfefefeff & ~ch1 & 0x80808080;\n    string1 = string1 + 2;\n    string2 = string2 + 2;\n  } while (ch1 == ch3 && diff == 0);\n  ch1 = ch1 << 0x18 | (ch1 >> 8 & 0xff) << 0x10 | (ch1 >> 0x10 & 0xff) << 8 | ch1 >> 0x18;\n  length1 = ch3 << 0x18 | (ch3 >> 8 & 0xff) << 0x10 | (ch3 >> 0x10 & 0xff) << 8 | ch3 >> 0x18;\nLAB_0008259e:\n  ch2 = diff << 0x18 | (diff >> 8 & 0xff) << 0x10 | (diff >> 0x10 & 0xff) << 8 | diff >> 0x18;\n  if (ch2 != 0) {\n    ch2 = 0x18 - LZCOUNT(ch2);\n    ch1 = ch1 >> (ch2 & 0xff);\n    length1 = length1 >> (ch2 & 0xff);\n  }\n  result = 1;\n  if (ch1 <= length1) {\n    result = -(uint)(ch1 < length1);\n  }\n  return result;\nLAB_0008258e:\n  ch1 = ch1 << 0x18 | (ch1 >> 8 & 0xff) << 0x10 | (ch1 >> 0x10 & 0xff) << 8 | ch1 >> 0x18;\n  length1 = length1 << 0x18 | (length1 >> 8 & 0xff) << 0x10 | (length1 >> 0x10 & 0xff) << 8 | length1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_strings_00082390",
                "param_1": "string1",
                "param_2": "string2",
                "puVar1": "str1",
                "iVar2": "result",
                "puVar3": "str2",
                "puVar4": "temp",
                "uVar5": "length1",
                "uVar6": "ch1",
                "uVar7": "ch2",
                "uVar8": "ch3",
                "uVar9": "diff"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_with_compatibility_000825cc",
            "code": "\nvoid copyStringWithCompatibility_000825cc(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextSource;\n  uint *nextSource2;\n  uint currentWord;\n  uint currentWordRotated;\n  uint *nextDestination;\n  bool isZeroByteFound;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextSource2 = source;\n    if (((uint)source & 1) != 0) {\n      nextSource2 = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextSource2;\n    if (((uint)nextSource2 & 2) != 0) {\n      source = (uint *)((int)nextSource2 + 2);\n      currentShort = *(ushort *)nextSource2;\n      isZeroByteFound = (currentShort & 0xff) == 0;\n      if (isZeroByteFound) {\n        *(char *)destination = (char)currentShort;\n      }\n      else {\n        *(ushort *)destination = currentShort;\n        isZeroByteFound = (currentShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isZeroByteFound) {\n        return;\n      }\n    }\n  }\n  currentWord = *source;\n  nextSource2 = source + 1;\n  nextDestination = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) goto LAB_00082630;\n    nextDestination = destination + 1;\n    *destination = currentWord;\n    nextSource2 = source + 2;\n    currentWord = source[1];\n  }\n  while( true ) {\n    nextSource = nextSource2 + 1;\n    currentWordRotated = *nextSource2;\n    destination = nextDestination;\n    if ((currentWord + 0xfefefeff & ~currentWord & 0x80808080) != 0) break;\n    destination = nextDestination + 1;\n    *nextDestination = currentWord;\n    currentWord = currentWordRotated;\n    if ((currentWordRotated + 0xfefefeff & ~currentWordRotated & 0x80808080) != 0) break;\n    nextSource2 = nextSource2 + 2;\n    currentWord = *nextSource;\n    nextDestination = nextDestination + 2;\n    *destination = currentWordRotated;\n  }\nLAB_00082630:\n  do {\n    *(char *)destination = (char)currentWord;\n    currentWordRotated = currentWord & 0xff;\n    currentWord = currentWord >> 8 | currentWord << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (currentWordRotated != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_with_compatibility_000825cc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextSource",
                "puVar4": "nextSource2",
                "uVar5": "currentWord",
                "uVar6": "currentWordRotated",
                "puVar7": "nextDestination",
                "bVar8": "isZeroByteFound"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570",
                "FUN_0008151c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "find_last_nonzero_byte_index_00082688",
            "code": "\nint find_last_nonzero_byte_index_00082688(uint input)\n\n{\n  int index;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  index = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((index + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    index = index + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    index = index + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    index = index + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    index = index + 1;\n  }\n  return index;\n}\n\n",
            "renaming": {
                "FUN_00082688": "find_last_nonzero_byte_index_00082688",
                "param_1": "input",
                "iVar1": "index",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_000814f6",
                "FUN_000810a6",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_function_00082824",
            "code": "\nint processFunction_00082824(undefined4 param1,int param2,int **param3)\n\n{\n  int *pointerVar1;\n  int iVar;\n  int *pointerVar3;\n  uint uVar4;\n  undefined4 *pointerVar5;\n  uint uVar6;\n  uint uVar7;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    iVar = process_and_copy_data_00083ca8();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return iVar;\n  }\n  pointerVar3 = param3[2];\n  pointerVar1 = *param3;\n  while (pointerVar3 != (int *)0x0) {\n    uVar6 = pointerVar1[1];\n    uVar7 = uVar6 >> 2;\n    if (uVar7 != 0) {\n      pointerVar5 = (undefined4 *)(*pointerVar1 + -4);\n      uVar4 = 0;\n      do {\n        pointerVar5 = pointerVar5 + 1;\n        iVar = process_data_000839b4(param1,*pointerVar5,param2);\n        uVar4 = uVar4 + 1;\n        if (iVar == -1) goto LAB_00082864;\n      } while (uVar7 != uVar4);\n      pointerVar3 = param3[2];\n    }\n    pointerVar3 = (int *)((int)pointerVar3 - (uVar6 & 0xfffffffc));\n    param3[2] = pointerVar3;\n    pointerVar1 = pointerVar1 + 2;\n  }\n  iVar = 0;\nLAB_00082864:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return iVar;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_function_00082824",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "pointerVar1",
                "iVar2": "iVar",
                "piVar3": "pointerVar3",
                "puVar5": "pointerVar5"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "process_formatted_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint processFormattedString_0008289c(int data,int format,int *******formatString,int **args)\n\n{\n  bool plusFlag;\n  bool dashFlag;\n  bool hashFlag;\n  char specifier;\n  bool zeroPadFlag;\n  int ********formatStack;\n  int *numPtr;\n  int result;\n  char normalizedSpecifier;\n  int *******formatSpecifier;\n  uint digit;\n  int **argumentStack;\n  uint flags;\n  uint ch;\n  int iter;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool dashFlag6;\n  longlong combinedNum;\n  int *******numDigits;\n  int *******maxDigits;\n  int **currentArg;\n  int resultLength;\n  char *hexDigits;\n  char specifierChar;\n  undefined paddingChar;\n  undefined numDigitsFlag;\n  int ********currentSpecifier;\n  int argIndex;\n  int *******resultPtr;\n  undefined resultBuffer;\n  char stackBuffer;\n  undefined paddingCharExists;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((data != 0) && (*(int *)(data + 0x38) == 0)) {\n    initialize_data_00083888();\n  }\n  flags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format + 0xc) = (short)flags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = process_relocations_0008356c(data,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = process_data_000834f0(data,format,formatString,args);\n    return result;\n  }\nLAB_000828ee:\n  hexDigits = (char *)0x0;\n  resultPtr = (int *******)0x0;\n  argIndex = 0;\n  resultLength = 0;\n  formatStack = (int ********)local_68;\n  currentArg = args;\n  currentSpecifier = (int ********)local_68;\nLAB_00082902:\n  formatSpecifier = formatString;\n  if ((*(char *)formatString != '\\0') && (*(char *)formatString != '%')) {\n    do {\n      formatSpecifier = (int *******)((int)formatSpecifier + 1);\n      if (*(char *)formatSpecifier == '\\0') break;\n    } while (*(char *)formatSpecifier != '%');\n    pppppppiVar20 = (int *******)((int)formatSpecifier - (int)formatString);\n    if (pppppppiVar20 != (int *******)0x0) {\n      argIndex = argIndex + 1;\n      resultPtr = (int *******)((int)resultPtr + (int)pppppppiVar20);\n      *formatStack = formatString;\n      formatStack[1] = pppppppiVar20;\n      if (argIndex < 8) {\n        formatStack = formatStack + 2;\n      }\n      else {\n        if (resultPtr == (int *******)0x0) {\n          resultLength = resultLength + (int)pppppppiVar20;\n          argIndex = 0;\n          formatStack = (int ********)local_68;\n          goto LAB_00082952;\n        }\n        result = process_function_00082824(data,format,&currentSpecifier);\n        formatStack = (int ********)local_68;\n        if (result != 0) goto LAB_00083142;\n      }\n      resultLength = resultLength + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)formatSpecifier != '\\0') {\n    specifierChar = '\\0';\n    ch = (uint)*(byte *)((int)formatSpecifier + 1);\n    flags = 0;\n    zeroPadFlag = false;\n    dashFlag = false;\n    plusFlag = false;\n    hashFlag = false;\n    dashFlag6 = false;\n    pppppppiVar20 = (int *******)0x0;\n    maxDigits = (int *******)0xffffffff;\n    formatString = (int *******)((int)formatSpecifier + 1);\nLAB_00082976:\n    formatString = (int *******)((int)formatString + 1);\nLAB_0008297a:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (ch != 0) {\n        numDigits = (int *******)0x1;\n        maxDigits = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&resultBuffer;\n        resultBuffer = (char)ch;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      hashFlag = true;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*currentArg;\n      currentArg = currentArg + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2b:\n      ch = (uint)*(byte *)formatString;\n      specifierChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2e:\n      ch = (uint)*(byte *)formatString;\n      formatSpecifier = (int *******)((int)formatString + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)formatString + 1);\n        maxDigits = (int *******)*currentArg;\n        currentArg = currentArg + 1;\n        formatString = formatSpecifier;\n        if ((int)maxDigits < 0) {\n          maxDigits = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        uVar21 = 0;\n        do {\n          formatString = (int *******)((int)formatSpecifier + 1);\n          ch = (uint)*(byte *)formatSpecifier;\n          uVar21 = digit + uVar21 * 10;\n          digit = ch - 0x30;\n          formatSpecifier = formatString;\n        } while (digit < 10);\n        maxDigits = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        maxDigits = (int *******)0x0;\n        formatString = formatSpecifier;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      dashFlag = true;\n      if (plusFlag == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      currentArg = (int **)((int)currentArg + 7U & 0xfffffff8);\n      piVar19 = *currentArg;\n      piVar22 = currentArg[1];\n      currentArg = currentArg + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      dashFlag = true;\n      if (plusFlag != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)dashFlag << 4;\n      iter = (uint)plusFlag << 5;\n      if ((dashFlag == 0) && (iter = (uint)dashFlag6 << 6, dashFlag6 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)currentArg;\n        currentArg = currentArg + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        result = iter;\n        piVar19 = *currentArg;\n        currentArg = currentArg + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      dashFlag = true;\n      if (plusFlag != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((dashFlag) || (dashFlag6 == false)) {\n        result = 1;\n        piVar19 = *currentArg;\n        currentArg = currentArg + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)currentArg;\n        currentArg = currentArg + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexDigits = \"0123456789ABCDEF\";\n      if (plusFlag == false) goto LAB_00082efa;\nLAB_00082d1a:\n      argumentStack = (int **)((int)currentArg + 7U & 0xfffffff8);\n      currentArg = argumentStack + 2;\n      piVar19 = *argumentStack;\n      piVar22 = argumentStack[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar19 = *currentArg;\n      currentArg = currentArg + 1;\n      numDigits = (int *******)0x1;\n      resultBuffer = SUB41(piVar19,0);\n      maxDigits = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&resultBuffer;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (plusFlag != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((dashFlag == false) && (dashFlag6 != false)) {\n        piVar19 = (int *)(int)*(short *)currentArg;\n        currentArg = currentArg + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *currentArg;\n        currentArg = currentArg + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar22 < 0) {\n        dashFlag6 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)dashFlag6);\n        specifierChar = '-';\n        specifier = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)maxDigits) {\n        flags = flags & 0xffffff7f;\n      }\n      zeroPadFlag = false;\n      ch = (uint)piVar19 | (uint)piVar22;\n      result = 1;\n      specifier = specifierChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      dashFlag6 = true;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x6c:\n      ch = (uint)*(byte *)formatString;\n      if (ch == 0x6c) {\n        plusFlag = true;\n        ch = (uint)*(byte *)((int)formatString + 1);\n        formatString = (int *******)((int)formatString + 1);\n      }\n      else {\n        dashFlag = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (plusFlag == false) {\n        if (dashFlag == false) {\n          if (dashFlag6) {\n            piVar19 = *currentArg;\n            currentArg = currentArg + 1;\n            *(short *)piVar19 = (short)resultLength;\n          }\n          else {\n            piVar19 = *currentArg;\n            currentArg = currentArg + 1;\n            *piVar19 = resultLength;\n          }\n        }\n        else {\n          piVar19 = *currentArg;\n          currentArg = currentArg + 1;\n          *piVar19 = resultLength;\n        }\n      }\n      else {\n        piVar19 = *currentArg;\n        currentArg = currentArg + 1;\n        *piVar19 = resultLength;\n        piVar19[1] = resultLength >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (plusFlag == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      argumentStack = (int **)((int)currentArg + 7U & 0xfffffff8);\n      currentArg = argumentStack + 2;\n      piVar19 = *argumentStack;\n      piVar22 = argumentStack[1];\n      result = 0;\n      break;\n    case 0x70:\n      piVar19 = *currentArg;\n      currentArg = currentArg + 1;\n      numDigitsFlag = 0x78;\n      zeroPadFlag = true;\n      piVar22 = (int *)0x0;\n      paddingChar = 0x30;\n      hexDigits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      plusFlag = true;\n      ch = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*currentArg;\n      specifierChar = '\\0';\n      currentArg = currentArg + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)maxDigits < 0) {\n          maxDigits = (int *******)find_last_nonzero_byte_index_00082688(ppppppppiVar25);\n          formatSpecifier = (int *******)0x0;\n          specifier = specifierChar;\n        }\n        else {\n          result = find_char_in_buffer_000840f8(ppppppppiVar25,0,maxDigits);\n          specifier = specifierChar;\n          if (result == 0) {\n            formatSpecifier = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(result - (int)ppppppppiVar25);\n            if ((int)maxDigits <= (int)(int *******)(result - (int)ppppppppiVar25)) {\n              pppppppiVar18 = maxDigits;\n            }\n            formatSpecifier = (int *******)0x0;\n            maxDigits = pppppppiVar18;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < maxDigits) {\n        maxDigits = (int *******)0x6;\n      }\n      numDigits = (int *******)((uint)maxDigits & ~((int)maxDigits >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      specifierChar = '\\0';\n      formatSpecifier = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!plusFlag) goto LAB_00082ce0;\nLAB_00082bc6:\n      argumentStack = (int **)((int)currentArg + 7U & 0xfffffff8);\n      currentArg = argumentStack + 2;\n      piVar19 = *argumentStack;\n      piVar22 = argumentStack[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexDigits = \"0123456789abcdef\";\n      if (plusFlag != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((dashFlag == false) && (dashFlag6 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)currentArg;\n        currentArg = currentArg + 1;\n      }\n      else {\n        piVar19 = *currentArg;\n        currentArg = currentArg + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((hashFlag) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        zeroPadFlag = true;\n        paddingChar = 0x30;\n        result = 2;\n        numDigitsFlag = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    specifierChar = '\\0';\n    specifier = '\\0';\nLAB_00082ace:\n    if (-1 < (int)maxDigits) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082adc:\n    combinedNum = CONCAT44(piVar22,piVar19);\n    formatSpecifier = maxDigits;\n    if ((ch == 0) && (maxDigits == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((result != 0) || (!hashFlag)) goto LAB_00082b04;\n      ppppppppiVar25 = (int ********)(&stackBuffer + 1);\n      paddingCharExists = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&stackBuffer + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)combinedNum >> 0x20);\n          normalizedSpecifier = '\\n';\n          calculate_difference_or_return_neg1_00084530((int)combinedNum,uVar24,10,0);\n          *(char *)ppppppppiVar25 = normalizedSpecifier + '0';\n          combinedNum = calculate_difference_or_return_neg1_00084530((int)combinedNum,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (combinedNum != 0);\n        maxDigits = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082b04;\n      }\n      paddingCharExists = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&stackBuffer + 1);\n      goto LAB_00083282;\n    }\n    ppppppppiVar16 = (int ********)(&stackBuffer + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      ch = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = hexDigits[ch];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    maxDigits = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (resultPtr != (int *******)0x0) {\n    process_function_00082824(data,format,&currentSpecifier);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return resultLength;\nLAB_000830e2:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    numPtr = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    result = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)result;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = numPtr;\n  } while (((uint)numPtr | (uint)piVar22) != 0);\n  if (hashFlag) {\n    if (result == 0x30) {\nLAB_00082afe:\n      maxDigits = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      maxDigits = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_00083282:\n    maxDigits = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082b04:\n  numDigits = maxDigits;\n  if ((int)maxDigits < (int)formatSpecifier) {\n    numDigits = formatSpecifier;\n  }\n  if (specifier != '\\0') {\n    numDigits = (int *******)((int)numDigits + 1);\n  }\nLAB_00082b1e:\n  if (zeroPadFlag) {\n    numDigits = (int *******)((int)numDigits + 2);\n  }\n  if ((flags == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)numDigits), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      argIndex = argIndex + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        result = argIndex + 1;\n        resultPtr = resultPtr + 4;\n        *formatStack = (int *******)0x856f0;\n        formatStack[1] = (int *******)0x10;\n        if (result < 8) {\n          iter = argIndex + 2;\n          formatStack = formatStack + 2;\n          argIndex = result;\n        }\n        else if (resultPtr == (int *******)0x0) {\n          iter = 1;\n          formatStack = (int ********)local_68;\n          argIndex = 0;\n        }\n        else {\n          argIndex = result;\n          result = process_function_00082824(data,format,&currentSpecifier);\n          if (result != 0) goto LAB_00083142;\n          iter = argIndex + 1;\n          formatStack = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      argIndex = iter;\n    }\n    resultPtr = (int *******)((int)resultPtr + (int)pppppppiVar18);\n    *formatStack = (int *******)0x856f0;\n    formatStack[1] = pppppppiVar18;\n    if (argIndex < 8) {\n      result = argIndex + 1;\n      formatStack = formatStack + 2;\n    }\n    else if (resultPtr == (int *******)0x0) {\n      result = 1;\n      argIndex = 0;\n      formatStack = (int ********)local_68;\n    }\n    else {\n      result = process_function_00082824(data,format,&currentSpecifier);\n      if (result != 0) goto LAB_00083142;\n      result = argIndex + 1;\n      formatStack = (int ********)local_68;\n    }\n  }\n  else {\n    result = argIndex + 1;\n  }\n  iter = result;\n  if (specifierChar != '\\0') {\n    resultPtr = (int *******)((int)resultPtr + 1);\n    iter = 1;\n    *formatStack = (int *******)&specifierChar;\n    formatStack[1] = (int *******)0x1;\n    argIndex = result;\n    if (result < 8) {\n      iter = result + 1;\n      formatStack = formatStack + 2;\n    }\n    else if (resultPtr == (int *******)0x0) {\n      argIndex = 0;\n      formatStack = (int ********)local_68;\n    }\n    else {\n      result = process_function_00082824(data,format,&currentSpecifier);\n      if (result != 0) goto LAB_00083142;\n      iter = argIndex + 1;\n      formatStack = (int ********)local_68;\n    }\n  }\n  result = iter;\n  iVar17 = argIndex;\n  if (zeroPadFlag) {\n    resultPtr = (int *******)((int)resultPtr + 2);\n    *formatStack = (int *******)&paddingChar;\n    formatStack[1] = (int *******)0x2;\n    if (iter < 8) {\n      result = iter + 1;\n      iVar17 = iter;\n      formatStack = formatStack + 2;\n    }\n    else if (resultPtr == (int *******)0x0) {\n      result = 1;\n      iVar17 = 0;\n      formatStack = (int ********)local_68;\n    }\n    else {\n      argIndex = iter;\n      result = process_function_00082824(data,format,&currentSpecifier);\n      if (result != 0) goto LAB_00083142;\n      result = argIndex + 1;\n      iVar17 = argIndex;\n      formatStack = (int ********)local_68;\n    }\n  }\n  argIndex = iVar17;\n  if ((flags == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)numDigits), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          argIndex = iVar17 + 1;\n          resultPtr = resultPtr + 4;\n          *formatStack = (int *******)\"0000000000000000\";\n          formatStack[1] = (int *******)0x10;\n          if (7 < argIndex) break;\n          result = iVar17 + 2;\n          formatStack = formatStack + 2;\nLAB_000831f2:\n          iVar17 = argIndex;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (resultPtr != (int *******)0x0) {\n          result = process_function_00082824(data,format,&currentSpecifier);\n          if (result == 0) {\n            result = argIndex + 1;\n            formatStack = (int ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        formatStack = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_00083218:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    resultPtr = (int *******)((int)resultPtr + (int)pppppppiVar18);\n    *formatStack = (int *******)\"0000000000000000\";\n    formatStack[1] = pppppppiVar18;\n    argIndex = result;\n    if (result < 8) {\n      result = result + 1;\n      formatStack = formatStack + 2;\n    }\n    else if (resultPtr == (int *******)0x0) {\n      result = 1;\n      argIndex = 0;\n      formatStack = (int ********)local_68;\n    }\n    else {\n      result = process_function_00082824(data,format,&currentSpecifier);\n      if (result != 0) goto LAB_00083142;\n      result = argIndex + 1;\n      formatStack = (int ********)local_68;\n    }\n  }\n  formatSpecifier = (int *******)((int)formatSpecifier - (int)maxDigits);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)formatSpecifier < 1) {\nLAB_0008302a:\n    resultPtr = (int *******)((int)resultPtr + (int)maxDigits);\n    *formatStack = (int *******)ppppppppiVar25;\n    formatStack[1] = maxDigits;\n    maxDigits = resultPtr;\n    argIndex = result;\n    if (result < 8) goto LAB_000831be;\n    if (resultPtr == (int *******)0x0) {\n      argIndex = 0;\n    }\n    else {\n      result = process_function_00082824(data,format,&currentSpecifier);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    iter = argIndex;\n    if (0x10 < (int)formatSpecifier) {\n      do {\n        while( true ) {\n          pppppppiVar18 = formatSpecifier;\n          argIndex = iter + 1;\n          resultPtr = resultPtr + 4;\n          *formatStack = (int *******)\"0000000000000000\";\n          formatStack[1] = (int *******)0x10;\n          if (7 < argIndex) break;\n          result = iter + 2;\n          formatStack = formatStack + 2;\nLAB_00082fe6:\n          iter = argIndex;\n          formatSpecifier = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (resultPtr != (int *******)0x0) {\n          result = process_function_00082824(data,format,&currentSpecifier);\n          if (result == 0) {\n            result = argIndex + 1;\n            formatStack = (int ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        formatStack = (int ********)local_68;\n        iter = 0;\n        formatSpecifier = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_0008300e:\n      formatSpecifier = pppppppiVar18 + -4;\n    }\n    resultPtr = (int *******)((int)resultPtr + (int)formatSpecifier);\n    *formatStack = (int *******)\"0000000000000000\";\n    formatStack[1] = formatSpecifier;\n    if (result < 8) {\n      result = result + 1;\n      formatStack = formatStack + 2;\n      goto LAB_0008302a;\n    }\n    if (resultPtr != (int *******)0x0) {\n      argIndex = result;\n      result = process_function_00082824(data,format,&currentSpecifier);\n      if (result != 0) goto LAB_00083142;\n      result = argIndex + 1;\n      formatStack = (int ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = maxDigits;\n    argIndex = 1;\n    formatStack = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_000831be:\n    ppppppppiVar16 = formatStack + 2;\n    resultPtr = maxDigits;\n  }\n  if (((flags & 4) != 0) &&\n     (formatSpecifier = (int *******)((int)pppppppiVar20 - (int)numDigits), 0 < (int)formatSpecifier)) {\n    result = argIndex;\n    if ((int)formatSpecifier < 0x11) {\n      iter = argIndex + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argIndex = result + 1;\n          resultPtr = resultPtr + 4;\n          *ppppppppiVar16 = (int *******)0x856f0;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < argIndex) break;\n          iter = result + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_0008307a:\n          formatSpecifier = formatSpecifier + -4;\n          result = argIndex;\n          if ((int)formatSpecifier < 0x11) goto LAB_000830a2;\n        }\n        if (resultPtr != (int *******)0x0) {\n          result = process_function_00082824(data,format,&currentSpecifier);\n          if (result == 0) {\n            iter = argIndex + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        formatSpecifier = formatSpecifier + -4;\n        iter = 1;\n        result = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)formatSpecifier);\n    }\nLAB_000830a2:\n    resultPtr = (int *******)((int)resultPtr + (int)formatSpecifier);\n    *ppppppppiVar16 = (int *******)0x856f0;\n    ppppppppiVar16[1] = formatSpecifier;\n    argIndex = iter;\n    if (7 < iter) {\n      if (resultPtr == (int *******)0x0) {\n        if ((int)numDigits < (int)pppppppiVar20) {\n          numDigits = pppppppiVar20;\n        }\n        resultLength = resultLength + (int)numDigits;\n        goto LAB_00083186;\n      }\n      result = process_function_00082824(data,format,&currentSpecifier);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)numDigits < (int)pppppppiVar20) {\n    numDigits = pppppppiVar20;\n  }\n  resultLength = resultLength + (int)numDigits;\n  if ((resultPtr != (int *******)0x0) &&\n     (result = process_function_00082824(data,format,&currentSpecifier), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  argIndex = 0;\n  formatStack = (int ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = ch - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  formatSpecifier = formatString;\n  do {\n    formatString = (int *******)((int)formatSpecifier + 1);\n    ch = (uint)*(byte *)formatSpecifier;\n    pppppppiVar20 = (int *******)(digit + (int)pppppppiVar20 * 10);\n    digit = ch - 0x30;\n    formatSpecifier = formatString;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  ch = (uint)*(byte *)formatString;\n  if (specifierChar == '\\0') {\n    specifierChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "process_formatted_string_0008289c",
                "param_1": "data",
                "param_2": "format",
                "param_3": "formatString",
                "param_4": "args",
                "bVar1": "plusFlag",
                "bVar2": "dashFlag",
                "bVar3": "hashFlag",
                "cVar4": "specifier",
                "bVar5": "zeroPadFlag",
                "ppppppppiVar6": "formatStack",
                "piVar7": "numPtr",
                "iVar8": "result",
                "cVar9": "normalizedSpecifier",
                "pppppppiVar10": "formatSpecifier",
                "uVar11": "digit",
                "ppiVar12": "argumentStack",
                "uVar13": "flags",
                "uVar14": "ch",
                "iVar15": "iter",
                "lVar27": "combinedNum",
                "local_dc": "numDigits",
                "local_d4": "maxDigits",
                "local_c8": "currentArg",
                "local_c4": "resultLength",
                "local_c0": "hexDigits",
                "local_a1": "specifierChar",
                "local_a0": "paddingChar",
                "local_9f": "numDigitsFlag",
                "local_9c": "currentSpecifier",
                "local_98": "argIndex",
                "local_94": "resultPtr",
                "local_90": "resultBuffer",
                "cStack_6a": "stackBuffer",
                "local_69": "paddingCharExists"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_00083888",
                "FUN_000834f0",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00082824",
                "FUN_00082688",
                "FUN_00084530"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_data_000834f0",
            "code": "\nint processData_000834f0(undefined4 config,int data)\n\n{\n  int result;\n  int status;\n  undefined *local_488 [2];\n  undefined4 bufferSize1;\n  ushort flag;\n  undefined2 value;\n  undefined *buffer2;\n  undefined4 bufferSize2;\n  undefined4 count;\n  undefined4 value2;\n  undefined4 value3;\n  undefined4 value4;\n  undefined stackBuffer [1024];\n  \n  value4 = *(undefined4 *)(data + 100);\n  value2 = *(undefined4 *)(data + 0x1c);\n  value = *(undefined2 *)(data + 0xe);\n  value3 = *(undefined4 *)(data + 0x24);\n  local_488[0] = stackBuffer;\n  flag = *(ushort *)(data + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize2 = 0x400;\n  count = 0;\n  buffer2 = local_488[0];\n  result = process_formatted_string_0008289c(config,local_488);\n  if ((-1 < result) && (status = process_data_00083850(config,local_488), status != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)flag << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "config",
                "param_2": "data",
                "iVar1": "result",
                "iVar2": "status",
                "local_480": "bufferSize1",
                "local_47c": "flag",
                "local_47a": "value",
                "local_478": "buffer2",
                "local_474": "bufferSize2",
                "local_470": "count",
                "local_46c": "value2",
                "local_464": "value3",
                "local_424": "value4",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_000834f0(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_0008289c(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = process_data_00083850(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "process_relocations_0008356c",
            "code": "\nundefined4 process_relocations_0008356c(undefined4 *result,int *data_ptr)\n\n{\n  int data_value;\n  int relocation_value;\n  uint mask;\n  ushort data_flag;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_00083888();\n  }\n  data_flag = *(ushort *)(data_ptr + 3);\n  mask = (uint)data_flag;\n  if ((int)(mask << 0x1c) < 0) {\n    relocation_value = data_ptr[4];\n  }\n  else {\n    if (-1 < (int)(mask << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data_ptr + 3) = data_flag | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(mask << 0x1d) < 0) {\n      if ((int *)data_ptr[0xc] != (int *)0x0) {\n        if ((int *)data_ptr[0xc] != data_ptr + 0x10) {\n          process_relocation_section_00083b10(result);\n          data_flag = *(ushort *)(data_ptr + 3);\n        }\n        data_ptr[0xc] = 0;\n      }\n      relocation_value = data_ptr[4];\n      data_flag = data_flag & 0xffdb;\n      *data_ptr = relocation_value;\n      data_ptr[1] = 0;\n    }\n    else {\n      relocation_value = data_ptr[4];\n    }\n    *(ushort *)(data_ptr + 3) = data_flag | 8;\n    mask = (uint)(data_flag | 8);\n  }\n  if ((relocation_value == 0) && ((mask & 0x280) != 0x200)) {\n    validate_and_process_data_00084018(result,data_ptr);\n    mask = (uint)*(ushort *)(data_ptr + 3);\n    relocation_value = data_ptr[4];\n  }\n  if ((mask & 1) == 0) {\n    data_value = 0;\n    if (-1 < (int)(mask << 0x1e)) {\n      data_value = data_ptr[5];\n    }\n    data_ptr[2] = data_value;\n  }\n  else {\n    data_ptr[6] = -data_ptr[5];\n    data_ptr[2] = 0;\n  }\n  if ((relocation_value == 0) && ((int)((uint)*(ushort *)(data_ptr + 3) << 0x18) < 0)) {\n    *(ushort *)(data_ptr + 3) = *(ushort *)(data_ptr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "process_relocations_0008356c",
                "param_1": "result",
                "param_2": "data_ptr",
                "iVar1": "data_value",
                "iVar2": "relocation_value",
                "uVar3": "mask",
                "uVar4": "data_flag"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_000842a4",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00084018",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "execute_and_relocate_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid execute_and_relocate_000836ec(void)\n\n{\n  dword *relocated_pointer;\n  dword loop_result;\n  int loop_counter;\n  code *jump_table;\n  \n  execute_relocation_000841e4(6);\n  jump_table = (code *)0x836fb;\n  loop_result = infinite_loop_00080eec(1);\n  if (relocation_array[48].r_offset == 0) {\n    relocation_array[48].r_offset = 0x20070184;\n  }\n  loop_counter = *(int *)(relocation_array[48].r_offset + 4);\n  relocated_pointer = (dword *)relocation_array[48].r_offset;\n  if (0x1f < loop_counter) {\n    relocated_pointer = (dword *)apply_relocation_000817f0(400);\n    if (relocated_pointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jump_table)(0xffffffff);\n      return;\n    }\n    *relocated_pointer = relocation_array[48].r_offset;\n    relocated_pointer[1] = 0;\n    loop_counter = 0;\n    relocation_array[48].r_offset = (dword)relocated_pointer;\n    relocated_pointer[0x62] = 0;\n    relocated_pointer[99] = 0;\n  }\n  relocated_pointer[1] = loop_counter + 1;\n  relocated_pointer[loop_counter + 2] = loop_result;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "execute_and_relocate_000836ec",
                "pdVar1": "relocated_pointer",
                "dVar2": "loop_result",
                "iVar3": "loop_counter",
                "UNRECOVERED_JUMPTABLE_00": "jump_table",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_00080eec",
                "FUN_000841e4",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 processData_00083850(int *dataBuffer,int *infoBuffer)\n\n{\n  int *ptrVar1;\n  int var2;\n  ushort var3;\n  uint var4;\n  int var5;\n  code *functionPtr;\n  undefined4 returnValue;\n  int var7;\n  \n  if ((dataBuffer != (int *)0x0) && (dataBuffer[0xe] == 0)) {\n    initialize_data_00083888();\n  }\n  if (*(short *)(infoBuffer + 3) == 0) {\n    return 0;\n  }\n  var3 = *(ushort *)(infoBuffer + 3);\n  if ((int)((uint)var3 << 0x1c) < 0) {\n    var7 = infoBuffer[4];\n    if (var7 == 0) {\n      return 0;\n    }\n    var2 = *infoBuffer;\n    if ((var3 & 3) == 0) {\n      var5 = infoBuffer[5];\n    }\n    else {\n      var5 = 0;\n    }\n    *infoBuffer = var7;\n    var2 = var2 - var7;\n    infoBuffer[2] = var5;\n    do {\n      if (var2 < 1) {\n        return 0;\n      }\n      var5 = (*(code *)infoBuffer[9])(dataBuffer,infoBuffer[7],var7,var2,returnValue);\n      var2 = var2 - var5;\n      var7 = var7 + var5;\n    } while (0 < var5);\nLAB_000837c8:\n    *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoBuffer + 3) = var3 | 0x800;\n  if ((infoBuffer[1] < 1) && (infoBuffer[0xf] < 1)) {\n    return 0;\n  }\n  functionPtr = (code *)infoBuffer[10];\n  if (functionPtr == (code *)0x0) {\n    return 0;\n  }\n  var4 = (uint)(var3 | 0x800);\n  var7 = *dataBuffer;\n  *dataBuffer = 0;\n  if ((var3 & 0x1000) == 0) {\n    var2 = (*functionPtr)(dataBuffer,infoBuffer[7],var4 & 0x1000,1);\n    if ((var2 == -1) && (var5 = *dataBuffer, var5 != 0)) {\n      if ((var5 == 0x1d) || (var5 == 0x16)) {\n        *dataBuffer = var7;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    var4 = (uint)*(ushort *)(infoBuffer + 3);\n    functionPtr = (code *)infoBuffer[10];\n  }\n  else {\n    var2 = infoBuffer[0x14];\n  }\n  if (((int)(var4 << 0x1d) < 0) && (var2 = var2 - infoBuffer[1], infoBuffer[0xc] != 0)) {\n    var2 = var2 - infoBuffer[0xf];\n  }\n  var2 = (*functionPtr)(dataBuffer,infoBuffer[7],var2,0);\n  if (var2 == -1) {\n    var5 = *dataBuffer;\n    if (var5 != 0) {\n      if ((var5 != 0x1d) && (var5 != 0x16)) {\n        *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n      *infoBuffer = infoBuffer[4];\n      infoBuffer[1] = 0;\n      goto LAB_00083774;\n    }\n    var3 = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n    infoBuffer[1] = 0;\n    *(ushort *)(infoBuffer + 3) = var3;\n    *infoBuffer = infoBuffer[4];\n  }\n  else {\n    var3 = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n    *infoBuffer = infoBuffer[4];\n    *(ushort *)(infoBuffer + 3) = var3;\n    infoBuffer[1] = 0;\n  }\n  if ((int)((uint)var3 << 0x13) < 0) {\n    infoBuffer[0x14] = var2;\n  }\nLAB_00083774:\n  ptrVar1 = (int *)infoBuffer[0xc];\n  *dataBuffer = var7;\n  if (ptrVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptrVar1 != infoBuffer + 0x10) {\n    process_relocation_section_00083b10(dataBuffer);\n  }\n  infoBuffer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "dataBuffer",
                "param_2": "infoBuffer",
                "piVar1": "ptrVar1",
                "iVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "iVar5": "var5",
                "pcVar6": "functionPtr",
                "unaff_r4": "returnValue",
                "iVar7": "var7"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_00083888",
            "code": "\nvoid initializeData_00083888(int data)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(data + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(data + 4);\n    *(undefined **)(data + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(data + 0x2e4) = 3;\n    *(int *)(data + 0x2e8) = data + 0x2ec;\n    *(undefined4 *)(data + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset_with_byte_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(data + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    memset_with_byte_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(data + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset_with_byte_00081f00(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(data + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_00083888",
                "param_1": "data",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083850",
                "FUN_000842a4",
                "FUN_0008356c",
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "process_data_000839b4",
            "code": "\nuint processData_000839b4(undefined4 param1,uint param2,byte **param3)\n\n{\n  int relocation_offset;\n  uint result;\n  uint temp;\n  byte *current_byte;\n  uint index;\n  byte current_value;\n  byte stack_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  relocation_offset = get_relocation_offset_0008400c();\n  if ((relocation_offset == 1) && (param2 - 1 < 0xff)) {\n    temp = param2 & 0xff;\n    current_value = (byte)temp;\n    result = 1;\n  }\n  else {\n    result = process_function_0008434c(param1,&current_value,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    temp = (uint)current_value;\n  }\n  index = 0;\n  do {\n    current_byte = param3[2] + -1;\n    param3[2] = current_byte;\n    if ((int)current_byte < 0) {\n      if ((int)param3[6] <= (int)current_byte) {\n        **param3 = (byte)temp;\n        current_byte = *param3;\n        temp = (uint)*current_byte;\n        if (temp != 10) goto LAB_00083a04;\n      }\n      relocation_offset = process_data_000842a4(param1,temp,param3);\n      if (relocation_offset == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)temp;\n      current_byte = *param3;\nLAB_00083a04:\n      *param3 = current_byte + 1;\n    }\n    if (result <= index + 1) {\n      return param2;\n    }\n    temp = (uint)stack_array[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "relocation_offset",
                "uVar2": "result",
                "uVar3": "temp",
                "pbVar4": "current_byte",
                "uVar5": "index",
                "local_1c": "current_value",
                "abStack_1b": "stack_array"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008400c",
                "FUN_000842a4",
                "FUN_0008434c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "perform_memory_operation_00083a74",
            "code": "\nundefined4 performMemoryOperation_00083a74(undefined4 input,int offset)\n\n{\n  int result1;\n  uint relOffset;\n  int newOffset;\n  \n  FUNC_00081f94();\n  relOffset = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  newOffset = ((relOffset - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newOffset) {\n    result1 = check_and_assign_result_0008236c(input,0);\n    if (result1 == Elf32_Rel_ARRAY_20070000[141].r_info + relOffset) {\n      result1 = check_and_assign_result_0008236c(input,-newOffset);\n      if (result1 != -1) {\n        DAT_2007121c = DAT_2007121c - newOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relOffset - newOffset | 1;\n        FUNC_00081f98(input);\n        return 1;\n      }\n      newOffset = check_and_assign_result_0008236c(input,0);\n      if (0xf < (int)(newOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = newOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             newOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(input);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "perform_memory_operation_00083a74",
                "param_1": "input",
                "param_2": "offset",
                "iVar1": "result1",
                "uVar2": "relOffset",
                "iVar3": "newOffset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_0008236c",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "process_relocation_section_00083b10",
            "code": "\nvoid processRelocationSection_00083b10(undefined4 param1,int param2)\n\n{\n  int internalVar1;\n  bool isConditionMet;\n  uint relocationValue;\n  dword relocationAddress;\n  int internalVar2;\n  uint adjustedRelocationValue;\n  dword adjustedRelocationAddress;\n  uint newRelocationValue;\n  dword newRelocationAddress;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  relocationValue = *(uint *)(param2 + -4);\n  adjustedRelocationAddress = param2 - 8;\n  adjustedRelocationValue = relocationValue & 0xfffffffe;\n  relocationAddress = adjustedRelocationAddress + adjustedRelocationValue;\n  newRelocationValue = *(uint *)(relocationAddress + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == relocationAddress) {\n    newRelocationValue = newRelocationValue + adjustedRelocationValue;\n    if (-1 < (int)(relocationValue << 0x1f)) {\n      adjustedRelocationAddress = adjustedRelocationAddress - *(int *)(param2 + -8);\n      internalVar2 = *(int *)(adjustedRelocationAddress + 0xc);\n      internalVar1 = *(int *)(adjustedRelocationAddress + 8);\n      newRelocationValue = newRelocationValue + *(int *)(param2 + -8);\n      *(int *)(internalVar1 + 0xc) = internalVar2;\n      *(int *)(internalVar2 + 8) = internalVar1;\n    }\n    relocationAddress = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(adjustedRelocationAddress + 4) = newRelocationValue | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = adjustedRelocationAddress;\n    if (relocationAddress <= newRelocationValue) {\n      perform_memory_operation_00083a74(param1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(relocationAddress + 4) = newRelocationValue;\n    if ((relocationValue & 1) == 0) {\n      adjustedRelocationAddress = adjustedRelocationAddress - *(int *)(param2 + -8);\n      internalVar1 = *(int *)(adjustedRelocationAddress + 8);\n      adjustedRelocationValue = adjustedRelocationValue + *(int *)(param2 + -8);\n      if (internalVar1 == 0x2007046c) {\n        isConditionMet = true;\n      }\n      else {\n        internalVar2 = *(int *)(adjustedRelocationAddress + 0xc);\n        *(int *)(internalVar1 + 0xc) = internalVar2;\n        *(int *)(internalVar2 + 8) = internalVar1;\n        isConditionMet = false;\n      }\n    }\n    else {\n      isConditionMet = false;\n    }\n    if (-1 < *(int *)(relocationAddress + newRelocationValue + 4) << 0x1f) {\n      adjustedRelocationValue = adjustedRelocationValue + newRelocationValue;\n      internalVar1 = *(int *)(relocationAddress + 8);\n      if ((!isConditionMet) && (internalVar1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = adjustedRelocationAddress;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = adjustedRelocationAddress;\n        *(undefined4 *)(adjustedRelocationAddress + 0xc) = 0x2007046c;\n        *(undefined4 *)(adjustedRelocationAddress + 8) = 0x2007046c;\n        *(uint *)(adjustedRelocationAddress + 4) = adjustedRelocationValue | 1;\n        *(uint *)(adjustedRelocationAddress + adjustedRelocationValue) = adjustedRelocationValue;\n        goto LAB_00083ba4;\n      }\n      internalVar2 = *(int *)(relocationAddress + 0xc);\n      *(int *)(internalVar1 + 0xc) = internalVar2;\n      *(int *)(internalVar2 + 8) = internalVar1;\n    }\n    *(uint *)(adjustedRelocationAddress + 4) = adjustedRelocationValue | 1;\n    *(uint *)(adjustedRelocationAddress + adjustedRelocationValue) = adjustedRelocationValue;\n    if (!isConditionMet) {\n      if (adjustedRelocationValue < 0x200) {\n        relocationValue = adjustedRelocationValue & 0xfffffff8;\n        internalVar1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + relocationValue);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(adjustedRelocationValue >> 3) >> 2 & 0xffU);\n        *(int *)(adjustedRelocationAddress + 8) = internalVar1;\n        *(uint *)(adjustedRelocationAddress + 0xc) = relocationValue + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + relocationValue) = adjustedRelocationAddress;\n        *(dword *)(internalVar1 + 0xc) = adjustedRelocationAddress;\n        FUNC_00081f98(param1);\n        return;\n      }\n      relocationValue = adjustedRelocationValue >> 9;\n      if (relocationValue < 5) {\n        internalVar1 = (adjustedRelocationValue >> 6) + 0x38;\n        internalVar2 = internalVar1 * 2;\n      }\n      else if (relocationValue < 0x15) {\n        internalVar1 = relocationValue + 0x5b;\n        internalVar2 = internalVar1 * 2;\n      }\n      else if (relocationValue < 0x55) {\n        internalVar1 = (adjustedRelocationValue >> 0xc) + 0x6e;\n        internalVar2 = internalVar1 * 2;\n      }\n      else if (relocationValue < 0x155) {\n        internalVar1 = (adjustedRelocationValue >> 0xf) + 0x77;\n        internalVar2 = internalVar1 * 2;\n      }\n      else if (relocationValue < 0x555) {\n        internalVar1 = (adjustedRelocationValue >> 0x12) + 0x7c;\n        internalVar2 = internalVar1 * 2;\n      }\n      else {\n        internalVar2 = 0xfc;\n        internalVar1 = 0x7e;\n      }\n      newRelocationAddress = internalVar2 * 4 + 0x20070464;\n      relocationAddress = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[internalVar2];\n      if (relocationAddress == newRelocationAddress) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (internalVar1 >> 2 & 0xffU);\n        newRelocationAddress = relocationAddress;\n      }\n      else {\n        do {\n          if ((*(uint *)(relocationAddress + 4) & 0xfffffffc) <= adjustedRelocationValue) break;\n          relocationAddress = *(dword *)(relocationAddress + 8);\n        } while (newRelocationAddress != relocationAddress);\n        newRelocationAddress = *(dword *)(relocationAddress + 0xc);\n      }\n      *(dword *)(adjustedRelocationAddress + 0xc) = newRelocationAddress;\n      *(dword *)(adjustedRelocationAddress + 8) = relocationAddress;\n      *(dword *)(newRelocationAddress + 8) = adjustedRelocationAddress;\n      *(dword *)(relocationAddress + 0xc) = adjustedRelocationAddress;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "process_relocation_section_00083b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "internalVar1",
                "bVar2": "isConditionMet",
                "uVar3": "relocationValue",
                "dVar4": "relocationAddress",
                "iVar5": "internalVar2",
                "uVar6": "adjustedRelocationValue",
                "dVar7": "adjustedRelocationAddress",
                "uVar8": "newRelocationValue",
                "dVar9": "newRelocationAddress"
            },
            "calling": [
                "FUN_00084484",
                "FUN_00083ca8",
                "FUN_00081800",
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081fac",
                "FUN_00081810"
            ],
            "called": [
                "FUN_00083a74",
                "FUN_00081f94",
                "FUN_00081f98"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_and_copy_data_00083ca8",
            "code": "\nundefined4 processAndCopyData_00083ca8(undefined4 *outputData,uint *inputData,uint **metadata)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flags;\n  uint temp1;\n  uint *ptr1;\n  uint *ptr2;\n  uint count1;\n  uint count2;\n  uint temp2;\n  uint temp3;\n  uint localVar1;\n  \n  if (metadata[2] != (uint *)0x0) {\n    flags = *(ushort *)(inputData + 3);\n    temp1 = (uint)flags;\n    if (((int)(temp1 << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *metadata;\n    }\n    else {\n      result = process_relocations_0008356c(outputData,inputData);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(inputData + 3);\n      temp1 = (uint)flags;\n      ptr2 = *metadata;\n    }\n    if ((flags & 2) == 0) {\n      value1 = temp1 & 2;\n      temp2 = value1;\n      count1 = value1;\n      localVar1 = value1;\n      if ((temp1 & 1) == 0) {\n        value1 = 0;\n        temp2 = 0;\n        while( true ) {\n          while (value1 == 0) {\n            temp2 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          count1 = inputData[2];\n          if ((int)(temp1 << 0x16) < 0) {\n            if (value1 < count1) {\n              temp1 = *inputData;\n              count1 = value1;\n            }\n            else if ((temp1 & 0x480) == 0) {\n              temp1 = *inputData;\n            }\n            else {\n              result = *inputData - inputData[4];\n              count1 = result + 1 + value1;\n              count2 = (int)(inputData[5] * 3) / 2;\n              if (count1 <= count2) {\n                count1 = count2;\n              }\n              if ((int)(temp1 << 0x15) < 0) {\n                count2 = relocation_function_00081810(outputData,count1);\n                if (count2 == 0) {\n                  *outputData = 0xc;\n                  flags = *(ushort *)(inputData + 3);\n                  goto LAB_00083da4;\n                }\n                copy_uint_data_00081d48(count2,inputData[4],result);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                count2 = process_memory_00081fac(outputData);\n                if (count2 == 0) {\n                  process_relocation_section_00083b10(outputData,inputData[4]);\n                  flags = *(ushort *)(inputData + 3) & 0xff7f;\n                  *outputData = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              temp1 = count2 + result;\n              inputData[4] = count2;\n              inputData[5] = count1;\n              *inputData = temp1;\n              inputData[2] = count1 - result;\n              count1 = value1;\n            }\n            copy_memory_00081e34(temp1,temp2,count1);\n            inputData[2] = inputData[2] - count1;\n            *inputData = *inputData + count1;\n            count1 = value1;\n          }\n          else if ((inputData[4] < *inputData) || (temp1 = inputData[5], value1 < temp1)) {\n            if (value1 < count1) {\n              count1 = value1;\n            }\n            copy_memory_00081e34(*inputData,temp2,count1);\n            temp1 = inputData[2];\n            inputData[2] = temp1 - count1;\n            *inputData = *inputData + count1;\n            if ((temp1 - count1 == 0) && (result = process_data_00083850(outputData,inputData), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            count1 = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              count1 = value1;\n            }\n            count1 = (*(code *)inputData[9])(outputData,inputData[7],temp2,(count1 / temp1) * temp1);\n            if ((int)count1 < 1) goto LAB_00083da2;\n          }\n          ptr1 = metadata[2];\n          temp2 = temp2 + count1;\n          value1 = value1 - count1;\n          metadata[2] = (uint *)((int)ptr1 - count1);\n          if ((uint *)((int)ptr1 - count1) == (uint *)0x0) break;\n          temp1 = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            count1 = *ptr2;\n            value1 = ptr2[1];\n            localVar1 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar1 == 0) {\n            result = find_char_in_buffer_000840f8(count1,10,value1);\n            if (result == 0) {\n              temp2 = value1 + 1;\n              localVar1 = 1;\n            }\n            else {\n              temp2 = (result + 1) - count1;\n              localVar1 = 1;\n            }\n          }\n          count2 = *inputData;\n          temp1 = temp2;\n          if (value1 <= temp2) {\n            temp1 = value1;\n          }\n          value2 = inputData[5];\n          if ((inputData[4] < count2) && (temp3 = inputData[2] + value2, (int)temp3 < (int)temp1)) {\n            copy_memory_00081e34(count2,count1,temp3);\n            *inputData = *inputData + temp3;\n            result = process_data_00083850(outputData,inputData);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)temp1 < (int)value2) {\n            copy_memory_00081e34(count2,count1,temp1);\n            inputData[2] = inputData[2] - temp1;\n            *inputData = temp1 + *inputData;\n            temp3 = temp1;\n          }\n          else {\n            temp3 = (*(code *)inputData[9])(outputData,inputData[7],count1,value2);\n            if ((int)temp3 < 1) goto LAB_00083da2;\n          }\n          temp2 = temp2 - temp3;\n          if (temp2 == 0) {\n            result = process_data_00083850(outputData,inputData);\n            if (result != 0) goto LAB_00083da2;\n            localVar1 = 0;\n          }\n          ptr1 = metadata[2];\n          count1 = count1 + temp3;\n          value1 = value1 - temp3;\n          metadata[2] = (uint *)((int)ptr1 - temp3);\n        } while ((uint *)((int)ptr1 - temp3) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      temp1 = 0;\n      do {\n        while( true ) {\n          temp2 = temp1;\n          if (0x7ffffbff < temp1) {\n            temp2 = 0x7ffffc00;\n          }\n          if (temp1 != 0) break;\n          value1 = *ptr2;\n          temp1 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)inputData[9])(outputData,inputData[7],value1,temp2);\n        if (result < 1) {\nLAB_00083da2:\n          flags = *(ushort *)(inputData + 3);\nLAB_00083da4:\n          *(ushort *)(inputData + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = metadata[2];\n        value1 = value1 + result;\n        temp1 = temp1 - result;\n        metadata[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_and_copy_data_00083ca8",
                "param_1": "outputData",
                "param_2": "inputData",
                "param_3": "metadata",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flags",
                "uVar5": "temp1",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "count1",
                "uVar9": "count2",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "local_2c": "localVar1"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00083850",
                "FUN_0008356c",
                "FUN_00081e34",
                "FUN_00083b10",
                "FUN_000840f8",
                "FUN_00081d48",
                "FUN_00081810",
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nundefined4 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_relocation_offset_0008400c",
            "code": "\ndword getRelocationOffset_0008400c(void)\n\n{\n  return PointerToRelocationArray[275].RelocationOffset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "PointerToRelocationArray",
                "r_offset": "RelocationOffset"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "validate_and_process_data_00084018",
            "code": "\nvoid validateAndProcessData_00084018(int data,int *params)\n\n{\n  ushort param3;\n  int result;\n  int relocatedAddress;\n  uint value;\n  bool flag;\n  undefined memoryValue [4];\n  uint localValue;\n  \n  param3 = *(ushort *)(params + 3);\n  value = (uint)param3;\n  if ((int)(value << 0x1e) < 0) {\n    *params = (int)params + 0x43;\n    params[4] = (int)params + 0x43;\n    params[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)params + 0xe)) {\n    result = set_memory_value_and_update_00084494(data,(int)*(short *)((int)params + 0xe),memoryValue);\n    if (-1 < result) {\n      flag = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (params[10] == 0x8427d)) {\n        result = 0x400;\n        *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x400;\n        params[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    param3 = *(ushort *)(params + 3);\n    value = (uint)param3;\n  }\n  *(ushort *)(params + 3) = param3 | 0x800;\n  if ((value & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  flag = false;\nLAB_00084074:\n  relocatedAddress = relocation_function_00081810(data,result);\n  param3 = *(ushort *)(params + 3);\n  if (relocatedAddress == 0) {\n    if (-1 < (int)((uint)param3 << 0x16)) {\n      *(ushort *)(params + 3) = param3 | 2;\n      *params = (int)params + 0x43;\n      params[4] = (int)params + 0x43;\n      params[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(params + 3) = param3 | 0x80;\n    *params = relocatedAddress;\n    params[4] = relocatedAddress;\n    params[5] = result;\n    if ((flag) && (result = process_return_value_000844bc(data,(int)*(short *)((int)params + 0xe)), result != 0))\n    {\n      *(ushort *)(params + 3) = *(ushort *)(params + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "validate_and_process_data_00084018",
                "param_1": "data",
                "param_2": "params",
                "uVar1": "param3",
                "iVar2": "result",
                "iVar3": "relocatedAddress",
                "uVar4": "value",
                "bVar5": "flag",
                "auStack_54": "memoryValue",
                "local_50": "localValue"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_000844bc",
                "FUN_00084494",
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_char_in_buffer_000840f8",
            "code": "\nuint * find_char_in_buffer_000840f8(uint *buffer,char target_char,uint buffer_size)\n\n{\n  uint value;\n  int index;\n  uint *ptr;\n  bool is_last_index;\n  \n  if (((uint)buffer & 3) == 0) {\nLAB_00084128:\n    if (3 < buffer_size) {\n      ptr = buffer;\n      do {\n        value = *ptr ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        buffer = ptr;\n        if ((value + 0xfefefeff & ~value & 0x80808080) != 0) break;\n        buffer_size = buffer_size - 4;\n        buffer = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < buffer_size);\n    }\n    if (buffer_size == 0) {\n      buffer = (uint *)0x0;\n    }\n    else if (*(char *)buffer != target_char) {\n      index = 0;\n      do {\n        buffer = (uint *)((int)buffer + 1);\n        is_last_index = index == buffer_size - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_00084150;\n      } while (*(char *)buffer != target_char);\n    }\n  }\n  else if (buffer_size == 0) {\nLAB_00084150:\n    buffer = (uint *)0x0;\n  }\n  else if (*(char *)buffer != target_char) {\n    ptr = (uint *)((int)buffer + 1);\n    buffer_size = buffer_size - 1;\n    do {\n      buffer = ptr;\n      if (((uint)buffer & 3) == 0) goto LAB_00084128;\n      if (buffer_size == 0) goto LAB_00084150;\n      ptr = (uint *)((int)buffer + 1);\n      buffer_size = buffer_size - 1;\n    } while (*(char *)buffer != target_char);\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_char_in_buffer_000840f8",
                "param_1": "buffer",
                "param_2": "target_char",
                "param_3": "buffer_size",
                "uVar1": "value",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "is_last_index"
            },
            "calling": [
                "FUN_00083ca8",
                "FUN_0008289c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "execute_relocation_000841e4",
            "code": "\nint executeRelocation_000841e4(uint index)\n\n{\n  dword relocationOffset;\n  undefined4 resetValue;\n  int functionPointer;\n  code *pointerToCode;\n  undefined4 argument_4;\n  undefined4 argument_5;\n  undefined4 linkRegister;\n  undefined4 constant;\n  \n  relocationOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant = 0x20070460;\n  if (0x1f < index) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  functionPointer = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((functionPointer == 0) || (pointerToCode = *(code **)(functionPointer + index * 4), pointerToCode == (code *)0x0)) {\n    resetValue = resetValueThunk(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    functionPointer = FUNC_00080efc(resetValue,index,index,0,constant,argument_4,argument_5,linkRegister);\n    if ((functionPointer == -1) && (DAT_20071244 != 0)) {\n      *(int *)relocationOffset = DAT_20071244;\n      return -1;\n    }\n    return functionPointer;\n  }\n  if (pointerToCode == (code *)0x1) {\n    return 0;\n  }\n  if (pointerToCode != (code *)0xffffffff) {\n    *(undefined4 *)(functionPointer + index * 4) = 0;\n    (*pointerToCode)(index);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "execute_relocation_000841e4",
                "param_1": "index",
                "dVar1": "relocationOffset",
                "uVar2": "resetValue",
                "iVar3": "functionPointer",
                "pcVar4": "pointerToCode",
                "unaff_r4": "argument_4",
                "unaff_r5": "argument_5",
                "in_lr": "linkRegister",
                "uVar5": "constant",
                "thunk_reset_value_00080efe": "resetValueThunk"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "thunk_FUN_00080efe",
                "FUN_00080efc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_error_code_thunk_00080efe",
            "code": "\nundefined4 get_error_code_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_value_based_on_initialization_00084220",
            "code": "\nvoid updateValueBasedOnInitialization_00084220(undefined4 inputData,int memoryOffset)\n\n{\n  int result;\n  \n  result = initializeAndCheck(inputData,(int)*(short *)(memoryOffset + 0xe));\n  if (-1 < result) {\n    *(int *)(memoryOffset + 0x50) = *(int *)(memoryOffset + 0x50) + result;\n    return;\n  }\n  *(ushort *)(memoryOffset + 0xc) = *(ushort *)(memoryOffset + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_value_based_on_initialization_00084220",
                "param_1": "inputData",
                "param_2": "memoryOffset",
                "iVar1": "result",
                "initialize_and_check_00084508": "initializeAndCheck"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_param_data_00084244",
            "code": "\nvoid processParamData_00084244(int *output,int input,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  ushort paramC;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  \n  paramC = *(ushort *)(input + 0xc);\n  if ((int)((uint)paramC << 0x17) < 0) {\n    update_param_value_000844e0(output,(int)*(short *)(input + 0xe),0,2);\n    paramC = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = paramC & 0xefff;\n  DAT_20071244 = 0;\n  result = copy_bytes_00080ec8((int)*(short *)(input + 0xe),paramA,paramB,paramB,temp1,temp2,\n                       temp3,temp4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_param_data_00084244",
                "param_1": "output",
                "param_2": "input",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "uVar2": "paramC",
                "unaff_r4": "temp1",
                "unaff_r5": "temp2",
                "unaff_r6": "temp3",
                "in_lr": "temp4"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_parameter_value_0008427c",
            "code": "\nvoid updateParameterValue_0008427c(undefined4 param,int data)\n\n{\n  int updatedValue;\n  ushort modifiedFlag;\n  \n  updatedValue = update_param_value_000844e0(param,(int)*(short *)(data + 0xe));\n  if (updatedValue == -1) {\n    modifiedFlag = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    modifiedFlag = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (updatedValue != -1) {\n    *(int *)(data + 0x50) = updatedValue;\n  }\n  *(ushort *)(data + 0xc) = modifiedFlag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_parameter_value_0008427c",
                "param_1": "param",
                "param_2": "data",
                "iVar1": "updatedValue",
                "uVar2": "modifiedFlag"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint process_data_000842a4(int address,uint data,undefined4 *parameters,undefined4 param_4)\n\n{\n  ushort parameter_3_value;\n  uint parameter_value;\n  undefined *pointer;\n  int result;\n  \n  if ((address != 0) && (*(int *)(address + 0x38) == 0)) {\n    initialize_data();\n  }\n  parameter_3_value = *(ushort *)(parameters + 3);\n  parameter_value = (uint)parameter_3_value;\n  parameters[2] = parameters[6];\n  if ((-1 < (int)(parameter_value << 0x1c)) || (result = parameters[4], result == 0)) {\n    result = process_relocations(address,parameters,parameter_3_value,parameter_value,param_4);\n    if (result != 0) {\n      return 0xffffffff;\n    }\n    parameter_3_value = *(ushort *)(parameters + 3);\n    result = parameters[4];\n    parameter_value = (uint)parameter_3_value;\n  }\n  data = data & 0xff;\n  if ((int)(parameter_value << 0x12) < 0) {\n    pointer = (undefined *)*parameters;\n    result = (int)pointer - result;\n    if (result < (int)parameters[5]) {\nLAB_000842d6:\n      result = result + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    parameters[0x19] = parameters[0x19] & 0xffffdfff;\n    pointer = (undefined *)*parameters;\n    *(ushort *)(parameters + 3) = parameter_3_value | 0x2000;\n    result = (int)pointer - result;\n    if (result < (int)parameters[5]) goto LAB_000842d6;\n  }\n  result = process_data_000842a4(address,parameters);\n  if (result != 0) {\n    return 0xffffffff;\n  }\n  pointer = (undefined *)*parameters;\n  result = 1;\nLAB_000842d8:\n  parameters[2] = parameters[2] + -1;\n  *parameters = pointer + 1;\n  *pointer = (char)data;\n  if (((parameters[5] == result) ||\n      (((int)((uint)*(ushort *)(parameters + 3) << 0x1f) < 0 && (data == 10)))) &&\n     (result = process_data_000842a4(address,parameters), result != 0)) {\n    return 0xffffffff;\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "address",
                "param_2": "data",
                "param_3": "parameters",
                "uVar1": "parameter_3_value",
                "uVar2": "parameter_value",
                "puVar3": "pointer",
                "iVar4": "result",
                "initialize_data_00083888": "initialize_data",
                "process_relocations_0008356c": "process_relocations",
                "process_data_00083850": "process_data"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_00083888",
                "FUN_00083850",
                "FUN_0008356c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "process_function_0008434c",
            "code": "\nvoid processFunction_0008434c(undefined4 *output,int size,undefined4 input,undefined4 *result)\n\n{\n  dword relocation_info;\n  undefined4 memory_address;\n  int returnValue;\n  undefined auStack_24 [12];\n  \n  relocation_info = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    memory_address = get_memory_address_00084004();\n    returnValue = (*(code *)relocation_info)(output,auStack_24,0,memory_address,result);\n  }\n  else {\n    memory_address = get_memory_address_00084004();\n    returnValue = (*(code *)relocation_info)(output,size,input,memory_address,result);\n  }\n  if (returnValue == -1) {\n    *result = 0;\n    *output = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "process_function_0008434c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "input",
                "param_4": "result",
                "dVar1": "relocation_info",
                "uVar2": "memory_address",
                "iVar3": "returnValue"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "write_byte_to_memory_0008439c",
            "code": "\nundefined4 write_byte_to_memory_0008439c(undefined4 *destination_address,undefined *data_pointer,uint byte_data)\n\n{\n  if (data_pointer == (undefined *)0x0) {\n    return 0;\n  }\n  if (byte_data < 0x100) {\n    *data_pointer = (char)byte_data;\n    return 1;\n  }\n  *destination_address = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "destination_address",
                "param_2": "data_pointer",
                "param_3": "byte_data"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "process_function_00084484",
            "code": "\nundefined4 processFunction_00084484(int inputParam)\n\n{\n  dword offsetVar;\n  undefined4 returnValue;\n  int resultVar;\n  \n  offsetVar = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (inputParam != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_00083888();\n    }\n    if (*(short *)(inputParam + 0xc) != 0) {\n      returnValue = process_data_00083850(offsetVar,inputParam);\n      if ((*(code **)(inputParam + 0x2c) != (code *)0x0) &&\n         (resultVar = (**(code **)(inputParam + 0x2c))(offsetVar,*(undefined4 *)(inputParam + 0x1c)), resultVar < 0))\n      {\n        returnValue = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(inputParam + 0xc) << 0x18) < 0) {\n        process_relocation_section_00083b10(offsetVar,*(undefined4 *)(inputParam + 0x10));\n      }\n      if (*(int *)(inputParam + 0x30) != 0) {\n        if (*(int *)(inputParam + 0x30) != inputParam + 0x40) {\n          process_relocation_section_00083b10(offsetVar);\n        }\n        *(undefined4 *)(inputParam + 0x30) = 0;\n      }\n      if (*(int *)(inputParam + 0x44) != 0) {\n        process_relocation_section_00083b10(offsetVar);\n        *(undefined4 *)(inputParam + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(inputParam + 0xc) = 0;\n      FUNC_00083980();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "process_function_00084484",
                "param_1": "inputParam",
                "dVar1": "offsetVar",
                "uVar2": "returnValue",
                "iVar3": "resultVar"
            },
            "calling": [],
            "called": [
                "FUN_0008397c",
                "FUN_00083888",
                "FUN_00083850",
                "FUN_00083b10",
                "FUN_00083980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "set_memory_value_and_update_00084494",
            "code": "\nvoid setMemoryValueAndUpdate_00084494(int *result,undefined4 ptr_value1,undefined4 ptr_value2,undefined4 value)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = set_memory_value_00080eb0(ptr_value1,ptr_value2,ptr_value2,0,value);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "set_memory_value_and_update_00084494",
                "param_1": "result",
                "param_2": "ptr_value1",
                "param_3": "ptr_value2",
                "param_4": "value",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "process_return_value_000844bc",
            "code": "\nvoid processReturnValue_000844bc(int *result,undefined4 input)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = get_return_value_00080eba(input);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "process_return_value_000844bc",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "update_param_value_000844e0",
            "code": "\nvoid updateParamValue_000844e0(int *result,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int defaultValue;\n  \n  DAT_20071244 = 0;\n  defaultValue = get_default_value_00080ebe(value1,value2,value3);\n  if ((defaultValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "update_param_value_000844e0",
                "param_1": "result",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "defaultValue"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "initialize_and_check_00084508",
            "code": "\nvoid initializeAndCheck_00084508(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_20071244 = 0;\n  initResult = initialize_00080ec2(arg1,arg2,arg3);\n  if ((initResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "initialize_and_check_00084508",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "calculate_difference_or_return_neg1_00084530",
            "code": "\nint calculate_difference_or_return_neg1_00084530(int input_param1,int input_param2,int input_param3,int input_param4)\n\n{\n  int difference;\n  \n  if ((input_param4 == 0) && (input_param3 == 0)) {\n    if (input_param2 != 0 || input_param1 != 0) {\n      input_param1 = -1;\n    }\n    return input_param1;\n  }\n  difference = calculate_difference_0008458c();\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00084530": "calculate_difference_or_return_neg1_00084530",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "iVar1": "difference"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_remainder_0008455c",
            "code": "\nvoid calculate_remainder_0008455c(uint dividend,int divisor,undefined4 lower_half_divisor,undefined4 upper_half_divisor,int *result_array)\n\n{\n  uint quotient;\n  longlong product;\n  \n  product = calculate_division_remainder_000845c0();\n  product = product * CONCAT44(upper_half_divisor,lower_half_divisor);\n  quotient = (uint)product;\n  *result_array = dividend - quotient;\n  result_array[1] = (divisor - (int)((ulonglong)product >> 0x20)) - (uint)(dividend < quotient);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_remainder_0008455c",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "lower_half_divisor",
                "param_4": "upper_half_divisor",
                "param_5": "result_array",
                "uVar1": "quotient",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "calculate_difference_0008458c",
            "code": "\nvoid calculate_difference_0008458c(uint input_1,int input_2,undefined4 value_1,undefined4 value_2,int *output_array)\n\n{\n  uint result;\n  longlong division_result;\n  \n  division_result = calculate_division_00084860();\n  division_result = division_result * CONCAT44(value_2,value_1);\n  result = (uint)division_result;\n  *output_array = input_1 - result;\n  output_array[1] = (input_2 - (int)((ulonglong)division_result >> 0x20)) - (uint)(input_1 < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "value_1",
                "param_4": "value_2",
                "param_5": "output_array",
                "uVar1": "result",
                "lVar2": "division_result"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "calculate_division_remainder_000845c0",
            "code": "\nundefined8 calculate_division_remainder_000845c0(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper)\n\n{\n  longlong temp_long;\n  uint quotient_lower;\n  uint quotient_upper;\n  uint quotient_temp;\n  uint remainder_lower;\n  int bit_shift_count;\n  uint temp1;\n  uint temp2;\n  uint is_negative_dividend;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  bool is_negative_divisor;\n  \n  if ((int)dividend_upper < 0) {\n    is_negative_divisor = dividend != 0;\n    dividend = -dividend;\n    dividend_upper = -dividend_upper - (uint)is_negative_divisor;\n    is_negative_dividend = 0xffffffff;\n  }\n  else {\n    is_negative_dividend = 0;\n  }\n  if ((int)divisor_upper < 0) {\n    is_negative_dividend = ~is_negative_dividend;\n    is_negative_divisor = divisor != 0;\n    divisor = -divisor;\n    divisor_upper = -divisor_upper - (uint)is_negative_divisor;\n  }\n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      bit_shift_count = LZCOUNT(divisor);\n      if (bit_shift_count != 0) {\n        quotient_upper = dividend >> (0x20U - bit_shift_count & 0xff);\n        divisor = divisor << bit_shift_count;\n        dividend = dividend << bit_shift_count;\n        dividend_upper = dividend_upper << bit_shift_count | quotient_upper;\n      }\n      quotient_lower = divisor >> 0x10;\n      quotient_temp = dividend_upper / quotient_lower;\n      temp1 = (divisor & 0xffff) * quotient_temp;\n      temp3 = dividend >> 0x10 | (dividend_upper - quotient_lower * quotient_temp) * 0x10000;\n      quotient_upper = quotient_temp;\n      if (temp3 <= temp1 && temp1 - temp3 != 0) {\n        is_negative_divisor = CARRY4(temp3,divisor);\n        temp3 = temp3 + divisor;\n        quotient_upper = quotient_temp - 1;\n        if ((is_negative_divisor == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n          quotient_upper = quotient_temp - 2;\n          temp3 = temp3 + divisor;\n        }\n      }\n      temp2 = (temp3 - temp1) / quotient_lower;\n      quotient_temp = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((temp3 - temp1) - quotient_lower * temp2) * 0x10000;\n      quotient_lower = temp2;\n      if (temp1 <= quotient_temp && quotient_temp - temp1 != 0) {\n        quotient_lower = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= quotient_temp && quotient_temp - (temp1 + divisor) != 0)) {\n          quotient_lower = temp2 - 2;\n        }\n      }\n      quotient_lower = quotient_lower | quotient_upper << 0x10;\n      quotient_upper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      bit_shift_count = LZCOUNT(divisor);\n      if (bit_shift_count == 0) {\n        dividend_upper = dividend_upper - divisor;\n        quotient_temp = divisor >> 0x10;\n        temp5 = divisor & 0xffff;\n        quotient_upper = 1;\n      }\n      else {\n        divisor = divisor << bit_shift_count;\n        quotient_upper = dividend_upper >> (0x20U - bit_shift_count & 0xff);\n        quotient_temp = divisor >> 0x10;\n        temp3 = quotient_upper / quotient_temp;\n        temp5 = divisor & 0xffff;\n        temp1 = temp5 * temp3;\n        temp2 = dividend >> (0x20U - bit_shift_count & 0xff) | dividend_upper << bit_shift_count;\n        quotient_upper = temp2 >> 0x10 | (quotient_upper - quotient_temp * temp3) * 0x10000;\n        dividend = dividend << bit_shift_count;\n        quotient_lower = temp3;\n        if (quotient_upper <= temp1 && temp1 - quotient_upper != 0) {\n          is_negative_divisor = CARRY4(quotient_upper,divisor);\n          quotient_upper = quotient_upper + divisor;\n          quotient_lower = temp3 - 1;\n          if ((is_negative_divisor == false) && (quotient_upper <= temp1 && temp1 - quotient_upper != 0)) {\n            quotient_lower = temp3 - 2;\n            quotient_upper = quotient_upper + divisor;\n          }\n        }\n        remainder_lower = (quotient_upper - temp1) / quotient_temp;\n        temp3 = temp5 * remainder_lower;\n        dividend_upper = temp2 & 0xffff | ((quotient_upper - temp1) - quotient_temp * remainder_lower) * 0x10000;\n        quotient_upper = remainder_lower;\n        if (dividend_upper <= temp3 && temp3 - dividend_upper != 0) {\n          is_negative_divisor = CARRY4(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          quotient_upper = remainder_lower - 1;\n          if ((is_negative_divisor == false) && (dividend_upper <= temp3 && temp3 - dividend_upper != 0)) {\n            quotient_upper = remainder_lower - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - temp3;\n        quotient_upper = quotient_upper | quotient_lower << 0x10;\n      }\n      quotient_lower = dividend_upper / quotient_temp;\n      temp3 = temp5 * quotient_lower;\n      temp2 = dividend >> 0x10 | (dividend_upper - quotient_temp * quotient_lower) * 0x10000;\n      temp1 = quotient_lower;\n      if (temp2 <= temp3 && temp3 - temp2 != 0) {\n        is_negative_divisor = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient_lower - 1;\n        if ((is_negative_divisor == false) && (temp2 <= temp3 && temp3 - temp2 != 0)) {\n          temp1 = quotient_lower - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      remainder_lower = (temp2 - temp3) / quotient_temp;\n      temp5 = temp5 * remainder_lower;\n      quotient_temp = dividend & 0xffff | ((temp2 - temp3) - quotient_temp * remainder_lower) * 0x10000;\n      quotient_lower = remainder_lower;\n      if (quotient_temp <= temp5 && temp5 - quotient_temp != 0) {\n        quotient_lower = remainder_lower - 1;\n        if ((CARRY4(quotient_temp,divisor) == false) &&\n           (quotient_temp + divisor <= temp5 && temp5 - (quotient_temp + divisor) != 0)) {\n          quotient_lower = remainder_lower - 2;\n        }\n      }\n      quotient_lower = quotient_lower | temp1 << 0x10;\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    quotient_upper = 0;\n    quotient_lower = 0;\n  }\n  else {\n    bit_shift_count = LZCOUNT(divisor_upper);\n    if (bit_shift_count == 0) {\n      if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n        quotient_upper = 0;\n        quotient_lower = 1;\n      }\n      else {\n        quotient_lower = 0;\n        quotient_upper = 0;\n      }\n    }\n    else {\n      quotient_upper = 0x20 - bit_shift_count;\n      quotient_temp = dividend_upper >> (quotient_upper & 0xff);\n      temp5 = divisor >> (quotient_upper & 0xff) | divisor_upper << bit_shift_count;\n      temp3 = temp5 >> 0x10;\n      quotient_lower = quotient_temp / temp3;\n      temp2 = (temp5 & 0xffff) * quotient_lower;\n      temp1 = dividend_upper << bit_shift_count | dividend >> (quotient_upper & 0xff);\n      quotient_temp = temp1 >> 0x10 | (quotient_temp - temp3 * quotient_lower) * 0x10000;\n      quotient_upper = quotient_lower;\n      if (quotient_temp <= temp2 && temp2 - quotient_temp != 0) {\n        is_negative_divisor = CARRY4(quotient_temp,temp5);\n        quotient_temp = quotient_temp + temp5;\n        quotient_upper = quotient_lower - 1;\n        if ((is_negative_divisor == false) && (quotient_temp <= temp2 && temp2 - quotient_temp != 0)) {\n          quotient_upper = quotient_lower - 2;\n          quotient_temp = quotient_temp + temp5;\n        }\n      }\n      remainder_lower = (quotient_temp - temp2) / temp3;\n      temp4 = (temp5 & 0xffff) * remainder_lower;\n      quotient_temp = temp1 & 0xffff | ((quotient_temp - temp2) - temp3 * remainder_lower) * 0x10000;\n      quotient_lower = remainder_lower;\n      if (quotient_temp <= temp4 && temp4 - quotient_temp != 0) {\n        is_negative_divisor = CARRY4(quotient_temp,temp5);\n        quotient_temp = quotient_temp + temp5;\n        quotient_lower = remainder_lower - 1;\n        if ((is_negative_divisor == false) && (quotient_temp <= temp4 && temp4 - quotient_temp != 0)) {\n          quotient_lower = remainder_lower - 2;\n          quotient_temp = quotient_temp + temp5;\n        }\n      }\n      quotient_lower = quotient_lower | quotient_upper << 0x10;\n      temp_long = (ulonglong)quotient_lower * (ulonglong)(divisor << bit_shift_count);\n      temp1 = (uint)((ulonglong)temp_long >> 0x20);\n      quotient_upper = 0;\n      if ((quotient_temp - temp4 < temp1) ||\n         ((quotient_temp - temp4 == temp1 && (dividend << bit_shift_count < (uint)temp_long)))) {\n        quotient_lower = quotient_lower - 1;\n        quotient_upper = 0;\n      }\n    }\n  }\n  if (is_negative_dividend != 0) {\n    is_negative_divisor = quotient_lower != 0;\n    quotient_lower = -quotient_lower;\n    quotient_upper = -quotient_upper - (uint)is_negative_divisor;\n  }\n  return CONCAT44(quotient_upper,quotient_lower);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "calculate_division_remainder_000845c0",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "lVar1": "temp_long",
                "uVar2": "quotient_lower",
                "uVar3": "quotient_upper",
                "uVar4": "quotient_temp",
                "uVar5": "remainder_lower",
                "iVar6": "bit_shift_count",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_negative_dividend",
                "uVar10": "temp3",
                "uVar11": "temp4",
                "uVar12": "temp5",
                "bVar13": "is_negative_divisor"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "calculate_division_00084860",
            "code": "\nulonglong calculateDivision_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint result;\n  uint dividendTop;\n  uint divisorTop;\n  uint dividendBottom;\n  uint tempTop;\n  uint tempBottom;\n  uint tempResult;\n  uint quotientTop;\n  int shiftAmount;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(quotient);\n      if (shiftAmount == 0) {\n        divisor = divisor - quotient;\n        dividendTop = quotient >> 0x10;\n        dividendBottom = quotient & 0xffff;\n        result = 1;\n      }\n      else {\n        quotient = quotient << shiftAmount;\n        tempResult = divisor >> (0x20U - shiftAmount & 0xff);\n        dividendTop = quotient >> 0x10;\n        quotientTop = tempResult / dividendTop;\n        dividendBottom = quotient & 0xffff;\n        result = dividendBottom * quotientTop;\n        tempTop = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        divisorTop = tempTop >> 0x10 | (tempResult - dividendTop * quotientTop) * 0x10000;\n        dividend = dividend << shiftAmount;\n        tempResult = quotientTop;\n        if (divisorTop <= result && result - divisorTop != 0) {\n          carryFlag = CARRY4(divisorTop,quotient);\n          divisorTop = divisorTop + quotient;\n          tempResult = quotientTop - 1;\n          if ((carryFlag == false) && (divisorTop <= result && result - divisorTop != 0)) {\n            tempResult = quotientTop - 2;\n            divisorTop = divisorTop + quotient;\n          }\n        }\n        tempBottom = (divisorTop - result) / dividendTop;\n        quotientTop = dividendBottom * tempBottom;\n        divisor = tempTop & 0xffff | ((divisorTop - result) - dividendTop * tempBottom) * 0x10000;\n        result = tempBottom;\n        if (divisor <= quotientTop && quotientTop - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          result = tempBottom - 1;\n          if ((carryFlag == false) && (divisor <= quotientTop && quotientTop - divisor != 0)) {\n            result = tempBottom - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - quotientTop;\n        result = result | tempResult << 0x10;\n      }\n      quotientTop = divisor / dividendTop;\n      divisorTop = dividendBottom * quotientTop;\n      tempTop = dividend >> 0x10 | (divisor - dividendTop * quotientTop) * 0x10000;\n      tempResult = quotientTop;\n      if (tempTop <= divisorTop && divisorTop - tempTop != 0) {\n        carryFlag = CARRY4(tempTop,quotient);\n        tempTop = tempTop + quotient;\n        tempResult = quotientTop - 1;\n        if ((carryFlag == false) && (tempTop <= divisorTop && divisorTop - tempTop != 0)) {\n          tempResult = quotientTop - 2;\n          tempTop = tempTop + quotient;\n        }\n      }\n      quotientTop = (tempTop - divisorTop) / dividendTop;\n      dividendBottom = dividendBottom * quotientTop;\n      tempTop = dividend & 0xffff | ((tempTop - divisorTop) - dividendTop * quotientTop) * 0x10000;\n      dividendTop = quotientTop;\n      if (tempTop <= dividendBottom && dividendBottom - tempTop != 0) {\n        dividendTop = quotientTop - 1;\n        if ((CARRY4(tempTop,quotient) == false) &&\n           (tempTop + quotient <= dividendBottom && dividendBottom - (tempTop + quotient) != 0)) {\n          dividendTop = quotientTop - 2;\n        }\n      }\n      return CONCAT44(result,dividendTop | tempResult << 0x10);\n    }\n    shiftAmount = LZCOUNT(quotient);\n    if (shiftAmount != 0) {\n      tempResult = dividend >> (0x20U - shiftAmount & 0xff);\n      quotient = quotient << shiftAmount;\n      dividend = dividend << shiftAmount;\n      divisor = tempResult | divisor << shiftAmount;\n    }\n    result = quotient >> 0x10;\n    dividendTop = divisor / result;\n    dividendBottom = (quotient & 0xffff) * dividendTop;\n    quotientTop = dividend >> 0x10 | (divisor - result * dividendTop) * 0x10000;\n    tempResult = dividendTop;\n    if (quotientTop <= dividendBottom && dividendBottom - quotientTop != 0) {\n      carryFlag = CARRY4(quotientTop,quotient);\n      quotientTop = quotientTop + quotient;\n      tempResult = dividendTop - 1;\n      if ((carryFlag == false) && (quotientTop <= dividendBottom && dividendBottom - quotientTop != 0)) {\n        tempResult = dividendTop - 2;\n        quotientTop = quotientTop + quotient;\n      }\n    }\n    tempTop = (quotientTop - dividendBottom) / result;\n    dividendTop = (quotient & 0xffff) * tempTop;\n    dividendBottom = dividend & 0xffff | ((quotientTop - dividendBottom) - result * tempTop) * 0x10000;\n    result = tempTop;\n    if (dividendBottom <= dividendTop && dividendTop - dividendBottom != 0) {\n      result = tempTop - 1;\n      if ((CARRY4(dividendBottom,quotient) == false) &&\n         (dividendBottom + quotient <= dividendTop && dividendTop - (dividendBottom + quotient) != 0)) {\n        result = tempTop - 2;\n      }\n    }\n    result = result | tempResult << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shiftAmount = LZCOUNT(remainder);\n    if (shiftAmount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      result = 0;\n    }\n    else {\n      result = 0x20 - shiftAmount;\n      tempResult = divisor >> (result & 0xff);\n      dividendTop = remainder << shiftAmount | quotient >> (result & 0xff);\n      dividendBottom = dividendTop >> 0x10;\n      divisorTop = tempResult / dividendBottom;\n      quotientTop = (dividendTop & 0xffff) * divisorTop;\n      tempTop = dividend >> (result & 0xff) | divisor << shiftAmount;\n      result = tempTop >> 0x10 | (tempResult - dividendBottom * divisorTop) * 0x10000;\n      tempResult = divisorTop;\n      if (result <= quotientTop && quotientTop - result != 0) {\n        carryFlag = CARRY4(result,dividendTop);\n        result = result + dividendTop;\n        tempResult = divisorTop - 1;\n        if ((carryFlag == false) && (result <= quotientTop && quotientTop - result != 0)) {\n          tempResult = divisorTop - 2;\n          result = result + dividendTop;\n        }\n      }\n      divisorTop = (result - quotientTop) / dividendBottom;\n      tempBottom = (dividendTop & 0xffff) * divisorTop;\n      dividendBottom = tempTop & 0xffff | ((result - quotientTop) - dividendBottom * divisorTop) * 0x10000;\n      result = divisorTop;\n      if (dividendBottom <= tempBottom && tempBottom - dividendBottom != 0) {\n        carryFlag = CARRY4(dividendBottom,dividendTop);\n        dividendBottom = dividendBottom + dividendTop;\n        result = divisorTop - 1;\n        if ((carryFlag == false) && (dividendBottom <= tempBottom && tempBottom - dividendBottom != 0)) {\n          result = divisorTop - 2;\n          dividendBottom = dividendBottom + dividendTop;\n        }\n      }\n      result = result | tempResult << 0x10;\n      temp = (ulonglong)result * (ulonglong)(quotient << shiftAmount);\n      tempResult = (uint)((ulonglong)temp >> 0x20);\n      if ((dividendBottom - tempBottom < tempResult) || ((dividendBottom - tempBottom == tempResult && (dividend << shiftAmount < (uint)temp)))\n         ) {\n        result = result - 1;\n      }\n    }\n  }\n  return (ulonglong)result;\n}\n\n",
            "renaming": {
                "FUN_00084860": "calculate_division_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "result",
                "uVar3": "dividendTop",
                "uVar4": "divisorTop",
                "uVar5": "dividendBottom",
                "uVar6": "tempTop",
                "uVar7": "tempBottom",
                "uVar8": "tempResult",
                "uVar9": "quotientTop",
                "iVar10": "shiftAmount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 111660,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000805a8",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811ca",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_0008145c",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_00081778",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_000840f8",
            "thunk_FUN_00080efe",
            "FUN_0008439c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_000806f8",
            "FUN_00080970",
            "FUN_00080a30",
            "FUN_000810a6",
            "FUN_000811b0",
            "FUN_000811e8",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_000815b8",
            "FUN_00081624",
            "FUN_0008236c",
            "FUN_00083888",
            "FUN_000841e4",
            "FUN_0008434c",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_0008455c",
            "FUN_0008458c"
        ],
        [
            "FUN_00080164",
            "FUN_0008089c",
            "FUN_00080f0c",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_00083a74",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_00084530"
        ],
        [
            "FUN_00081014",
            "FUN_000810e8",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_00083b10"
        ],
        [
            "FUN_0008044c",
            "FUN_00080774",
            "FUN_0008117a",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00083850"
        ],
        [
            "FUN_00081472",
            "FUN_00081480",
            "FUN_0008151c",
            "FUN_000817f0",
            "FUN_00081fac",
            "FUN_00084018",
            "FUN_00084484"
        ],
        [
            "FUN_00081560",
            "FUN_00081f9c",
            "FUN_0008356c"
        ],
        [
            "FUN_00081496",
            "FUN_00083ca8",
            "FUN_000842a4"
        ],
        [
            "FUN_000814ae",
            "FUN_000839b4"
        ],
        [
            "FUN_000814d0",
            "FUN_00081570",
            "FUN_00082824"
        ],
        [
            "FUN_000814f6",
            "FUN_0008159e"
        ],
        [
            "FUN_00081214"
        ],
        [
            "FUN_00080250"
        ],
        [
            "FUN_00081750",
            "FUN_000817c8",
            "FUN_000834f0"
        ],
        [
            "FUN_00080eec",
            "FUN_0008289c"
        ],
        [
            "FUN_000836ec"
        ],
        [
            "FUN_000816f8"
        ],
        [
            "FUN_00080b2c"
        ],
        [
            "FUN_000803fc"
        ],
        [
            "FUN_000806a0"
        ],
        [
            "FUN_000801e0"
        ],
        [
            "FUN_000815ec"
        ]
    ],
    "locked_functions": []
}