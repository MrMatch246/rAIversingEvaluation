{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_if_unset_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlagIfUnset_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_if_unset_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "process_data_00080164",
            "code": "\nvoid processData_00080164(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  process_data_000806f8(&DAT_200708e8,0x5a);\n  process_data_000806f8(&DAT_200708d4,0x5a,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "process_data_00080164",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "setup",
                "loop"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_peripheral_and_stop_000801e0",
            "code": "\nundefined8 initializePeripheralAndStop_000801e0(undefined4 unused1,undefined4 unused2,undefined4 peripheralData,undefined4 delayData)\n\n{\n  initialize_peripheral_000813dc(&DAT_20070be8,0xe100,peripheralData,delayData,delayData);\n  pinMode(0xd,1);\n  pinMode(6,1);\n  pinMode(0x39,0);\n  pinMode(4,0);\n  pinMode(3,0);\n  pinMode(2,0);\n  attach(&DAT_200708d4,5);\n  attach(&DAT_200708e8,6);\n  straightAndStop();\n  delay(1000);\n  if (DAT_200708bc == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_peripheral_and_stop_000801e0",
                "param_1": "unused1",
                "param_2": "unused2",
                "param_3": "peripheralData",
                "param_4": "delayData"
            },
            "calling": [
                "main"
            ],
            "called": [
                "pinMode",
                "attach",
                "straightAndStop",
                "delay",
                "FUN_000813dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_system_00080250",
            "code": "\nvoid controlSystem_00080250(void)\n\n{\n  undefined4 pulseWidth;\n  int numCallbacks;\n  undefined *dataPointer;\n  undefined inputBuffer [12];\n  \n  DAT_200708c0 = pulseIn(4,1,20000);\n  delay(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  digitalWrite(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        straightAndStop();\n        calculate_sum_of_callbacks_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      delay(10);\n      pulseWidth = pulseIn(3,1,20000);\n      DAT_200708d8 = map(0,1000,2000,0x28,0x96);\n      DAT_200708ec = map(pulseWidth,1000,2000,0x28,0x96);\n      while (numCallbacks = available(&DAT_20070be8), 0 < numCallbacks) {\n        read(&DAT_20070be8);\n        print(&DAT_20070be8,DAT_200708d8,10);\n        execute_callback_000810c4(&DAT_20070be8,&DAT_00084b13);\n        println(&DAT_20070be8,DAT_200708ec,10);\n      }\n      process_data_000806f8(&DAT_200708e8,DAT_200708ec);\n      process_data_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        straightAndStop();\n        calculate_sum_of_callbacks_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      numCallbacks = available(&DAT_20070be8);\n      if (0 < numCallbacks) {\n        readStringUntil(inputBuffer,&DAT_20070be8,0x2c);\n        operator=(&DAT_200708dc,inputBuffer);\n        ~String(inputBuffer);\n        readStringUntil(inputBuffer,&DAT_20070be8,10);\n        operator=(&DAT_200708c8,inputBuffer);\n        ~String(inputBuffer);\n        read(&DAT_20070be8);\n        numCallbacks = equals(&DAT_200708dc,\"steer\");\n        if (numCallbacks == 0) goto LAB_0008039c;\n        pulseWidth = toInt(&DAT_200708c8);\n        dataPointer = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    straightAndStop();\n    calculate_sum_of_callbacks_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  numCallbacks = equals(&DAT_200708dc,\"motor\");\n  if (numCallbacks != 0) {\n    pulseWidth = toInt(&DAT_200708c8);\n    dataPointer = &DAT_200708e8;\nLAB_000803b2:\n    process_data_000806f8(dataPointer,pulseWidth);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_system_00080250",
                "uVar1": "pulseWidth",
                "iVar2": "numCallbacks",
                "puVar3": "dataPointer",
                "auStack_1c": "inputBuffer"
            },
            "calling": [
                "main"
            ],
            "called": [
                "digitalWrite",
                "FUN_000806f8",
                "~String",
                "delay",
                "FUN_000810c4",
                "operator=",
                "pulseIn",
                "read",
                "toInt",
                "map",
                "print",
                "readStringUntil",
                "straightAndStop",
                "available",
                "FUN_000810e8",
                "equals",
                "println"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_timer_000803fc",
            "code": "\nvoid initializeTimer_000803fc(int channel,uint index,undefined4 peripheralClock,uint bitMask)\n\n{\n  undefined4 temp_r4;\n  undefined4 temp_lr;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(index,channel);\n  pmc_enable_periph_clk(peripheralClock);\n  TC_Configure(channel,index,0xc002);\n  TC_SetRA(channel,index,0xa41);\n  *(int *)((bitMask >> 5) * 4 + -0x1fff1f00) = 1 << (bitMask & 0x1f);\n  *(undefined4 *)(channel + index * 0x40 + 0x24) = 4;\n  if (2 < index) {\n    combinedParams = __assert_func(\"../source/tc.c\",0x5c,\"TC_Start\",\n                          \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                          temp_r4,temp_lr);\n  }\n  *(undefined4 *)((int)combinedParams + (int)((ulonglong)combinedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_timer_000803fc",
                "param_1": "channel",
                "param_2": "index",
                "param_3": "peripheralClock",
                "param_4": "bitMask",
                "unaff_r4": "temp_r4",
                "in_lr": "temp_lr",
                "uVar1": "combinedParams"
            },
            "calling": [
                "attach"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "__assert_func",
                "TC_Configure",
                "TC_SetRA"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_flags_and_values_0008044c",
            "code": "\nvoid updateFlagsAndValues_0008044c(int index,int baseAddress,int offset)\n\n{\n  uint maxValue;\n  int offsetMultiplier;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    offsetMultiplier = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + offsetMultiplier < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offsetMultiplier) * 8] << 0x19) < 0\n       )) {\n      digitalWrite((&DAT_200708f8)[(offsetMultiplier + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(baseAddress + offset) = *(uint *)(baseAddress + offset) | 4;\n  }\n  maxValue = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  offsetMultiplier = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + offsetMultiplier < (int)maxValue) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(baseAddress + offset + 0x14) =\n         *(int *)(baseAddress + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + offsetMultiplier) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + offsetMultiplier) * 8] << 0x19\n                  )) {\n      return;\n    }\n    digitalWrite((&DAT_200708f8)[(offsetMultiplier + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  baseAddress = baseAddress + offset;\n  maxValue = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (maxValue <= *(int *)(baseAddress + 0x10) + 4U) {\n    maxValue = *(int *)(baseAddress + 0x10) + 4;\n  }\n  *(uint *)(baseAddress + 0x14) = maxValue;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_flags_and_values_0008044c",
                "param_1": "index",
                "param_2": "baseAddress",
                "param_3": "offset",
                "uVar1": "maxValue",
                "iVar2": "offsetMultiplier"
            },
            "calling": [],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "update_param_with_offset_000805a8",
            "code": "\nvoid updateParamWithOffset_000805a8(byte *outputByte)\n\n{\n  char tempChar;\n  uint dataCount;\n  \n  dataCount = (uint)DAT_200708f0;\n  if (dataCount < 0x3c) {\n    tempChar = DAT_200708f0 + 1;\n    *outputByte = DAT_200708f0;\n    DAT_200708f0 = tempChar;\n    *(uint *)(&DAT_200708fc + dataCount * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *outputByte = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "update_param_with_offset_000805a8",
                "param_1": "outputByte",
                "cVar1": "tempChar",
                "uVar2": "dataCount"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "initialize_port_000806a0",
            "code": "\nbyte initializePort_000806a0(byte *param_1,undefined4 pin)\n\n{\n  byte portConfig;\n  undefined4 baseAddress;\n  uint portIndex;\n  undefined4 interruptConfig;\n  int iteration;\n  uint portId;\n  \n  if (0x3b < *param_1) goto LAB_00080660;\n  pinMode(pin,1,0x220,*param_1,0x960);\n  portId = (uint)*param_1;\n  portConfig = (&DAT_200708f8)[portId * 8];\n  param_1[2] = 0;\n  portIndex = portId / 0xc;\n  (&DAT_200708f8)[portId * 8] = portConfig & 0xc0 | (byte)pin & 0x3f;\n  param_1[1] = 0;\n  iteration = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(iteration + portIndex * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    iteration = iteration + 1;\n  } while (iteration != 0xc);\n  if (portIndex == 0) {\n    baseAddress = 0x40084000;\n    interruptConfig = 0x1e;\nLAB_0008064c:\n    _initISR(baseAddress,portIndex,interruptConfig,interruptConfig);\n  }\n  else {\n    if (portIndex == 1) {\n      baseAddress = 0x40084000;\n      interruptConfig = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (portIndex == 2) {\n      baseAddress = 0x40084000;\n      interruptConfig = 0x20;\n      goto LAB_0008064c;\n    }\n    if (portIndex == 3) {\n      baseAddress = 0x40080000;\n      portIndex = 2;\n      interruptConfig = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (portIndex == 4) {\n      baseAddress = 0x40080000;\n      portIndex = 0;\n      interruptConfig = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*param_1 * 8] = (&DAT_200708f8)[(uint)*param_1 * 8] | 0x40;\nLAB_00080660:\n  return *param_1;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "initialize_port_000806a0",
                "param_2": "pin",
                "bVar1": "portConfig",
                "uVar2": "baseAddress",
                "uVar3": "portIndex",
                "uVar4": "interruptConfig",
                "iVar5": "iteration",
                "uVar6": "portId"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "_initISR"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "process_data_000806f8",
            "code": "\nvoid processData_000806f8(byte *data,uint size)\n\n{\n  uint clamped_size;\n  \n  if ((int)size < 0x220) {\n    clamped_size = size;\n    if (0xb3 < (int)size) {\n      clamped_size = 0xb4;\n    }\n    size = calculateValue(clamped_size & ~((int)clamped_size >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,\n                  (600 - (char)data[2]) * 4,size);\n  }\n  if (*data < 0x3c) {\n    clamped_size = (0x88 - (char)data[1]) * 4;\n    if (((int)(size + (0x88 - (char)data[1]) * -4) < 0 == checkBorrow(size,clamped_size)) &&\n       (clamped_size = (600 - (char)data[2]) * 4, (int)size <= (int)clamped_size)) {\n      clamped_size = size;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (variable3[6].r_offset / 1000000) * (clamped_size - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "process_data_000806f8",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "clamped_size",
                "map": "calculateValue",
                "SBORROW4": "checkBorrow",
                "Elf32_Rel_ARRAY_20070000": "variable3"
            },
            "calling": [
                "straightAndStop",
                "loop"
            ],
            "called": [
                "map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initializeSystem_00080774(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  SystemInit();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    digitalWrite(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(0x400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(0x400e0e00,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,0x3000,0);\n  PIO_Configure(0x400e1400,2,0x30,0);\n  PIO_Configure(0x400e1000,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,3,0);\n  PIO_Configure(0x400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  adc_disable_all_channel(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "main"
            ],
            "called": [
                "digitalWrite",
                "adc_disable_all_channel",
                "adc_init",
                "adc_disable_interrupt",
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_configure_timing",
                "__libc_init_array",
                "adc_configure_trigger",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_communication_0008089c",
            "code": "\nvoid initializeCommunication_0008089c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  RingBuffer(&DAT_20070c0c);\n  RingBuffer(&DAT_20070b60);\n  UARTClass(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,param3);\n  RingBuffer(&DAT_20070e6c);\n  RingBuffer(&DAT_20070ef4);\n  RingBuffer(&DAT_20070f7c);\n  RingBuffer(&DAT_20070ad8);\n  RingBuffer(&DAT_20070d0c);\n  RingBuffer(&DAT_20070d94);\n  USARTClass(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  USARTClass(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  USARTClass(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_communication_0008089c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "calling": [],
            "called": [
                "USARTClass",
                "UARTClass",
                "RingBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_serial_events_00080970",
            "code": "\nvoid checkSerialEvents_00080970(void)\n\n{\n  int result;\n  \n  result = available(&DAT_20070be8);\n  if (result != 0) {\n    serialEvent();\n  }\n  result = available(&DAT_20070c94);\n  if (result != 0) {\n    serialEvent1();\n  }\n  result = available(&DAT_20070cbc);\n  if (result != 0) {\n    serialEvent2();\n  }\n  result = available(&DAT_20070ce4);\n  if (result != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_serial_events_00080970",
                "iVar1": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent3",
                "available",
                "serialEvent2",
                "serialEvent1",
                "serialEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_data_000809be",
            "code": "\nvoid updateData_000809be(int baseAddress,undefined4 option,uint value)\n\n{\n  uint result;\n  \n  *(uint *)(baseAddress + 0x44) = value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    result = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~value;\n    break;\n  case 2:\n    result = *(uint *)(baseAddress + 0x70) | value;\n    break;\n  default:\n    goto switchD_000809c4_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = result;\nswitchD_000809c4_caseD_6:\n  *(uint *)(baseAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_data_000809be",
                "param_1": "baseAddress",
                "param_2": "option",
                "param_3": "value",
                "uVar1": "result"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "set_parameters_000809e4",
            "code": "\nvoid setParameters_000809e4(undefined4 *outputArray,undefined4 value,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  outputArray[0x11] = value;\n  if (isNegative) {\n    outputArray[0x19] = value;\n  }\n  if (!isNegative) {\n    outputArray[0x18] = value;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    outputArray[8] = value;\n  }\n  if (!isNegative) {\n    outputArray[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[0x20] = value;\n  }\n  outputArray[5] = value;\n  *outputArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "set_parameters_000809e4",
                "param_1": "outputArray",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "update_param_values_00080a0a",
            "code": "\nvoid updateParamValues_00080a0a(undefined4 *parameters,undefined4 value,int conditionA,int conditionB,int conditionC)\n\n{\n  parameters[0x11] = value;\n  if (conditionC == 0) {\n    parameters[0x18] = value;\n  }\n  else {\n    parameters[0x19] = value;\n  }\n  if (conditionB == 0) {\n    parameters[0x15] = value;\n  }\n  else {\n    parameters[0x14] = value;\n  }\n  if (conditionA == 0) {\n    parameters[0xd] = value;\n  }\n  else {\n    parameters[0xc] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "update_param_values_00080a0a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "conditionA",
                "param_4": "conditionB",
                "param_5": "conditionC"
            },
            "calling": [
                "digitalWrite",
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "set_peripheral_00080a30",
            "code": "\nundefined4 setPeripheral_00080a30(int device,int mode,undefined4 peripheral,uint value)\n\n{\n  bool isNegative;\n  \n  switch(mode) {\n  case 1:\n  case 2:\n    setPeripheral_00080a30Config(device,mode,peripheral);\n    isNegative = (int)(value << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = peripheral;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = peripheral;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = peripheral;\n    }\n    break;\n  case 3:\n    setInputConfig(device,peripheral,value,0x809e5,device);\n    break;\n  case 4:\n  case 5:\n    setOutputConfig(device,peripheral,mode == 5,(value << 0x1d) >> 0x1f,value & 1,mode,peripheral\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "set_peripheral_00080a30",
                "param_1": "device",
                "param_2": "mode",
                "param_3": "peripheral",
                "param_4": "value",
                "bVar1": "isNegative",
                "PIO_SetPeripheral": "setPeripheralConfig",
                "PIO_SetInput": "setInputConfig",
                "PIO_SetOutput": "setOutputConfig"
            },
            "calling": [
                "pinMode",
                "FUN_00080774"
            ],
            "called": [
                "PIO_SetOutput",
                "PIO_SetInput",
                "PIO_SetPeripheral"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_permissions_00080a94",
            "code": "\nuint check_permissions_00080a94(int data_address,uint permission_mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(data_address + 8) & permission_mask;\n  if (result != 0) {\n    if ((permission_mask & *(uint *)(data_address + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_permissions_00080a94",
                "param_1": "data_address",
                "param_2": "permission_mask",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_and_update_bit_00080aa8",
            "code": "\n\n\nundefined4 checkAndUpdateBit_00080aa8(uint input)\n\n{\n  uint bitMask;\n  \n  if (input < 0x2d) {\n    if (input < 0x20) {\n      bitMask = 1 << (input & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (input - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_and_update_bit_00080aa8",
                "param_1": "input",
                "uVar1": "bitMask"
            },
            "calling": [
                "pinMode",
                "_initISR",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "configure_tc_00080b2c",
            "code": "\nvoid configureTC_00080b2c(undefined4 param1,uint param2,char *param3)\n\n{\n  int offset;\n  int address;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    param3 = \"TC_Configure\";\n    combinedParams = __assert_func(\"../source/tc.c\",0x40,\"TC_Configure\",\n                          \"dwChannel < (sizeof( ptrTC->TC_CHANNEL )/sizeof( ptrTC->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  address = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(address + 0x28) = 0xffffffff;\n  *(char **)(address + 4) = param3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "configure_tc_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar3": "combinedParams",
                "iVar1": "offset",
                "iVar2": "address",
                "pTc": "ptrTC"
            },
            "calling": [
                "_initISR"
            ],
            "called": [
                "__assert_func"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "store_value_at_offset_00080b90",
            "code": "\nvoid storeValueAtOffset_00080b90(int baseAddress,int index,undefined4 value)\n\n{\n  *(undefined4 *)(baseAddress + index * 0x40 + 0x14) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "store_value_at_offset_00080b90",
                "param_1": "baseAddress",
                "param_2": "index",
                "param_3": "value"
            },
            "calling": [
                "_initISR"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_layout_00080b98",
            "code": "\n\n\nvoid initializeMemoryLayout_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationTable[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_layout_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c20": {
            "entrypoint": "0x00080c20",
            "current_name": "initialize_elf_relocations_00080c20",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid initializeElfRelocations_00080c20(void)\n\n{\n  int offset;\n  undefined4 *dataPtr;\n  \n  for (offset = 0; (undefined4 *)((int)&relocationArray[0].offset + offset) < &DAT_200708a0\n      ; offset = offset + 4) {\n    *(undefined4 *)((int)&relocationArray[0].offset + offset) =\n         *(undefined4 *)(&DAT_00085878 + offset);\n  }\n  for (dataPtr = &DAT_200708a0; dataPtr < (undefined4 *)0x20071248; dataPtr = dataPtr + 1) {\n    *dataPtr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080c20": "initialize_elf_relocations_00080c20",
                "iVar1": "offset",
                "puVar2": "dataPtr",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculateThreshold_00080c98(undefined4 *threshold,uint totalSize,int blockSize,int multiplier)\n\n{\n  uint blocks;\n  uint index;\n  uint thresholdValues [16];\n  \n  thresholdValues[0] = 0;\n  thresholdValues[1] = 8;\n  thresholdValues[2] = 0x10;\n  thresholdValues[3] = 0x18;\n  thresholdValues[4] = 0x40;\n  thresholdValues[5] = 0x50;\n  thresholdValues[6] = 0x60;\n  thresholdValues[7] = 0x70;\n  thresholdValues[8] = 0x200;\n  thresholdValues[9] = 0x240;\n  thresholdValues[10] = 0x280;\n  thresholdValues[11] = 0x2c0;\n  thresholdValues[12] = 0x300;\n  thresholdValues[13] = 0x340;\n  thresholdValues[14] = 0x380;\n  thresholdValues[15] = 0x3c0;\n  *threshold = 1;\n  threshold[1] = 0;\n  threshold[0x48] = 0x202;\n  threshold[0x41] = 0;\n  threshold[0x45] = 0;\n  blocks = totalSize / (uint)(blockSize * 2);\n  if (totalSize == blockSize * 2 * blocks) {\n    blocks = blocks - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)totalSize / (ulonglong)((blocks + 1) * 2)) / 1000000)) <=\n        thresholdValues[index]) {\n      threshold[1] = (index & 0xf) << 0x10 | (blocks & 0xff) << 8 | threshold[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "threshold",
                "param_2": "totalSize",
                "param_3": "blockSize",
                "param_4": "multiplier",
                "uVar1": "blocks",
                "uVar2": "index",
                "local_58": "thresholdValues"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "update_flags_00080d30",
            "code": "\nvoid updateFlags_00080d30(int ptr,uint value1,uint value2)\n\n{\n  *(uint *)(ptr + 4) = value1 | *(uint *)(ptr + 4) | (value2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "update_flags_00080d30",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_data_00080d3e",
            "code": "\nvoid updateData_00080d3e(int dataAddress,uint param2Value,uint param3Value,uint param4Value)\n\n{\n  *(uint *)(dataAddress + 4) =\n       param3Value | *(uint *)(dataAddress + 4) | (param2Value & 0xf) << 0x18 | (param4Value & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_data_00080d3e",
                "param_1": "dataAddress",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "param_4": "param4Value"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_value_00080d58",
            "code": "\nvoid setBitValue_00080d58(int baseAddress,uint bitPosition)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_value_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitPosition"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "initialize_memory_00080d62",
            "code": "\nvoid initializeMemory_00080d62(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "initialize_memory_00080d62",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int objectAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(objectAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "initialize_00080e80",
            "code": "\nundefined4 initialize_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "initialize_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "calculate_sum_00080e88",
            "code": "\nint calculateSum_00080e88(int input)\n\n{\n  int previousSum;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  previousSum = DAT_20071208;\n  DAT_20071208 = input + DAT_20071208;\n  return previousSum;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "calculate_sum_00080e88",
                "param_1": "input",
                "iVar1": "previousSum"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_error_code_00080eaa",
            "code": "\nundefined4 get_error_code_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_error_code_00080eaa"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initializeMemory_00080eb0(undefined4 param1,int param2)\n\n{\n  *(undefined4 *)(param2 + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param1",
                "param_2": "param2"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "get_one_00080eba",
            "code": "\nundefined4 getOne_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "get_one_00080eba"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "get_return_value_00080ebe",
            "code": "\nint getReturnValue_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "get_return_value_00080ebe",
                "undefined4": "int"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "initialize_application_00080ec2",
            "code": "\nundefined4 initializeApplication_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "initialize_application_00080ec2"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "copy_bytes_00080ec8",
            "code": "\n\n\nuint copyBytes_00080ec8(undefined4 ptrToDest,int ptrToSrc,uint numBytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)numBytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(ptrToSrc + i);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "copy_bytes_00080ec8",
                "param_1": "ptrToDest",
                "param_2": "ptrToSrc",
                "param_3": "numBytes",
                "iVar1": "i"
            },
            "calling": [
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "exit_with_status_00080eec",
            "code": "\nvoid exitWithStatus_00080eec(undefined4 status,undefined4 unused_param1,undefined4 unused_param2,undefined4 unused_param3)\n\n{\n  iprintf(\"Exiting with status %d.\\n\",status,unused_param2,unused_param3,unused_param3);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "exit_with_status_00080eec",
                "param_1": "status",
                "param_2": "unused_param1",
                "param_3": "unused_param2",
                "param_4": "unused_param3"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "raise"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_error_code_00080efe",
            "code": "\nerror_code get_error_code_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe",
                "undefined4": "error_code"
            },
            "calling": [
                "_getpid_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f04": {
            "entrypoint": "0x00080f04",
            "current_name": "FUN_00080f04",
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {},
            "calling": [
                "timedRead"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "setup",
                "loop",
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "configure_pin_00080f0c",
            "code": "\n\n\nint configurePin_00080f0c(int pinIndex,int mode)\n\n{\n  int result;\n  uint pmcMask;\n  undefined4 pioMode;\n  uint pioMask;\n  byte pinMode;\n  byte pinSettings;\n  int pioId;\n  int pioPeripheralId;\n  \n  result = pinIndex;\n  if ((&DAT_00084b50)[pinIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[pinIndex] & 0xf) == 4) {\n      result = adc_disable_channel(0x400c0000,(&DAT_00084b5d)[pinIndex * 0x1c]);\n    }\n    pinSettings = (&DAT_20070e1c)[pinIndex];\n    pinMode = pinSettings & 0xf;\n    if ((pinMode < 3) && (pinSettings != 0)) {\n      if (pinMode == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (pinMode == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (pinMode == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        result = pinIndex * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(&DAT_00084b4c + result));\n        result = PIO_Configure(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),0);\n        pinSettings = (&DAT_20070e1c)[pinIndex] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = pinIndex * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(&DAT_00084b4c + result));\n        result = PIO_Configure(*(undefined4 *)(&DAT_00084b44 + result),3,\n                              *(undefined4 *)(&DAT_00084b48 + result),1);\n        pinSettings = (&DAT_20070e1c)[pinIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[pinIndex] = pinSettings;\n      return result;\n    }\n    pioId = pinIndex * 0x1c;\n    pioPeripheralId = *(int *)(&DAT_00084b44 + pioId);\n    if (pinSettings >> 4 == 0) {\n      pioMode = 4;\n    }\n    else {\n      pioMode = 5;\n    }\n    result = PIO_Configure(pioPeripheralId,pioMode,*(undefined4 *)(&DAT_00084b48 + pioId),\n                          *(undefined4 *)(&DAT_00084b54 + pioId));\n    (&DAT_20070e1c)[pinIndex] = (&DAT_20070e1c)[pinIndex] & 0xf0 | 3;\n    if (*(int *)(pioPeripheralId + 0x18) == -1) {\n      pmcMask = *(uint *)(&DAT_00084b4c + pioId);\n      if (0x2c < pmcMask) {\n        return 1;\n      }\n      if (pmcMask < 0x20) {\n        pmcMask = 1 << (pmcMask & 0xff);\n        pioMask = _DAT_400e0618 & pmcMask;\n        if (pioMask == pmcMask) {\n          _DAT_400e0614 = pioMask;\n        }\n      }\n      else {\n        pmcMask = 1 << (pmcMask - 0x20 & 0xff);\n        pioMask = _DAT_400e0708 & pmcMask;\n        if (pioMask == pmcMask) {\n          _DAT_400e0704 = pioMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "configure_pin_00080f0c",
                "param_1": "pinIndex",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "pmcMask",
                "uVar3": "pioMode",
                "uVar4": "pioMask",
                "bVar5": "pinMode",
                "bVar6": "pinSettings",
                "iVar7": "pioId",
                "iVar8": "pioPeripheralId"
            },
            "calling": [
                "attach",
                "digitalWrite",
                "setup"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "set_pin_mode_and_output_data_00081014",
            "code": "\nvoid setPinModeAndOutputData_00081014(int pinNumber,int mode,undefined4 param)\n\n{\n  int status;\n  undefined4 outputData;\n  int outputPin;\n  \n  if ((&DAT_00084b50)[pinNumber * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[pinNumber] & 0xf) == 5) {\n      pinMode(pinNumber,1,param,5,pinNumber,mode,param);\n    }\n    (&DAT_20070e1c)[pinNumber] = (&DAT_20070e1c)[pinNumber] & 0xf | (byte)(mode << 4);\n    outputPin = *(int *)(&DAT_00084b44 + pinNumber * 0x1c);\n    outputData = *(undefined4 *)(&DAT_00084b48 + pinNumber * 0x1c);\n    status = PIO_GetOutputDataStatus(outputPin,outputData);\n    if (status == 0) {\n      if (mode != 0) {\n        *(undefined4 *)(outputPin + 100) = outputData;\n        return;\n      }\n      *(undefined4 *)(outputPin + 0x60) = outputData;\n      return;\n    }\n    PIO_SetOutput(outputPin,outputData,mode,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "set_pin_mode_and_output_data_00081014",
                "param_1": "pinNumber",
                "param_2": "mode",
                "param_3": "param",
                "iVar1": "status",
                "uVar2": "outputData",
                "iVar3": "outputPin"
            },
            "calling": [
                "Servo_Handler",
                "loop",
                "FUN_00080774"
            ],
            "called": [
                "PIO_SetOutput",
                "pinMode",
                "PIO_GetOutputDataStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "execute_callback_000810a6",
            "code": "\nvoid executeCallback_000810a6(int *callbackList,int callbackData,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined4 dataLength;\n  \n  if (callbackData != 0) {\n    dataLength = strlen(callbackData);\n    (**(code **)(*callbackList + 4))(callbackList,callbackData,dataLength,*(code **)(*callbackList + 4),arg2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "execute_callback_000810a6",
                "param_1": "callbackList",
                "param_2": "callbackData",
                "param_3": "arg1",
                "param_4": "arg2",
                "uVar1": "dataLength"
            },
            "calling": [
                "FUN_000810d8",
                "printNumber",
                "FUN_000810c4",
                "FUN_000810e8"
            ],
            "called": [
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "execute_callback_000810c4",
            "code": "\nvoid execute_callback_000810c4(void)\n\n{\n  execute_callback_000810c4_000810a6();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "execute_callback_000810c4"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_first_function_000810cc",
            "code": "\nvoid executeFirstFunction_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_first_function_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "execute_callback_000810d8",
            "code": "\nvoid execute_callback_000810d8(undefined4 callback_param,undefined4 unimportant_param,undefined4 data_param,undefined4 data_param_2)\n\n{\n  execute_callback_000810d8_000810a6(callback_param,&DAT_00085635,data_param,data_param_2,data_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "execute_callback_000810d8",
                "param_1": "callback_param",
                "param_2": "unimportant_param",
                "param_3": "data_param",
                "param_4": "data_param_2"
            },
            "calling": [
                "FUN_000810e8",
                "println"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_of_callbacks_000810e8",
            "code": "\nint calculateSumOfCallbacks_000810e8(undefined4 callbackParameter)\n\n{\n  int callbackResult1;\n  int callbackResult2;\n  \n  callbackResult1 = execute_callback_000810a6();\n  callbackResult2 = execute_callback_000810d8(callbackParameter);\n  return callbackResult2 + callbackResult1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_of_callbacks_000810e8",
                "param_1": "callbackParameter",
                "iVar1": "callbackResult1",
                "iVar2": "callbackResult2"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_decimal_to_base_000810fc",
            "code": "\nvoid convertDecimalToBase_000810fc(undefined4 callbackFunction,uint inputNumber,uint baseNumber)\n\n{\n  char *bufferPtr;\n  uint quotient;\n  char *currentPtr;\n  char digit;\n  uint remainder;\n  char digitBuffer [5];\n  \n  digitBuffer[1] = 0;\n  if (baseNumber < 2) {\n    baseNumber = 10;\n  }\n  bufferPtr = digitBuffer;\n  do {\n    currentPtr = bufferPtr;\n    quotient = inputNumber / baseNumber;\n    remainder = inputNumber - baseNumber * quotient & 0xff;\n    digit = (char)remainder;\n    if (remainder < 10) {\n      digit = digit + '0';\n    }\n    else {\n      digit = digit + '7';\n    }\n    *currentPtr = digit;\n    inputNumber = quotient;\n    bufferPtr = currentPtr + -1;\n  } while (quotient != 0);\n  execute_callback_000810a6(callbackFunction,currentPtr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_decimal_to_base_000810fc",
                "param_1": "callbackFunction",
                "param_2": "inputNumber",
                "param_3": "baseNumber",
                "pcVar1": "bufferPtr",
                "uVar2": "quotient",
                "pcVar3": "currentPtr",
                "cVar4": "digit",
                "uVar5": "remainder",
                "local_15": "digitBuffer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "print_number_with_formatting_0008113a",
            "code": "\nint printNumberWithFormatting_0008113a(undefined4 *functionPointer,uint number,uint base,undefined4 formatting)\n\n{\n  int returnValue;\n  int tempValue;\n  \n  if (base == 0) {\n    returnValue = (**(code **)*functionPointer)(functionPointer,number & 0xff);\n    return returnValue;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      returnValue = execute_first_function_000810cc(functionPointer,0x2d);\n      tempValue = printNumber(functionPointer,-number,10);\n      return tempValue + returnValue;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  returnValue = printNumber(functionPointer,number,base,formatting);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "print_number_with_formatting_0008113a",
                "param_1": "functionPointer",
                "param_2": "number",
                "param_3": "base",
                "param_4": "formatting",
                "iVar1": "returnValue",
                "iVar2": "tempValue"
            },
            "calling": [
                "print",
                "println"
            ],
            "called": [
                "printNumber",
                "FUN_000810cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081176": {
            "entrypoint": "0x00081176",
            "current_name": "FUN_00081176",
            "code": "\nint thunk_print_number_with_formatting_0008113a(undefined4 *param_1,uint param_2,uint param_3,undefined4 param_4)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (param_3 == 0) {\n    iVar1 = (**(code **)*param_1)(param_1,param_2 & 0xff);\n    return iVar1;\n  }\n  if (param_3 == 10) {\n    param_3 = 10;\n    if ((int)param_2 < 0) {\n      iVar1 = execute_first_function_000810cc(param_1,0x2d);\n      iVar2 = printNumber(param_1,-param_2,10);\n      return iVar2 + iVar1;\n    }\n  }\n  else {\n    param_3 = param_3 & 0xff;\n  }\n  iVar1 = printNumber(param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n",
            "renaming": {},
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_result_0008117a",
            "code": "\nint calculate_result_0008117a(undefined4 input_param)\n\n{\n  int formatted_number;\n  int callback_result;\n  \n  formatted_number = print_number_with_formatting_0008113a();\n  callback_result = execute_callback_000810d8(input_param);\n  return callback_result + formatted_number;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_result_0008117a",
                "param_1": "input_param",
                "iVar1": "formatted_number",
                "iVar2": "callback_result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_r_info_equals_zero_00081190",
            "code": "\nvoid executeIfRInfoEqualsZero_00081190(void)\n\n{\n  if ((relArray[6].info != 0xffffffff) &&\n     (relArray[6].info = relArray[6].info - 1,\n     relArray[6].info == 0)) {\n    (*(code *)((int)&relArray[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_r_info_equals_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "info",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryBuffer)\n\n{\n  memset(memoryBuffer,0,0x80);\n  *(undefined4 *)(memoryBuffer + 0x80) = 0;\n  *(undefined4 *)(memoryBuffer + 0x84) = 0;\n  return memoryBuffer;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryBuffer"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_buffer_000811ca",
            "code": "\nvoid updateBuffer_000811ca(int buffer,undefined value)\n\n{\n  uint newIndex;\n  \n  newIndex = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (newIndex != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = value;\n    *(uint *)(buffer + 0x80) = newIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_buffer_000811ca",
                "param_1": "buffer",
                "param_2": "value",
                "uVar1": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "wait_for_condition_000811e8",
            "code": "\nint waitForCondition_000811e8(int *inputParams)\n\n{\n  int currentTime;\n  \n  currentTime = getCurrentTime();\n  inputParams[3] = currentTime;\n  do {\n    currentTime = (**(code **)(*inputParams + 0xc))(inputParams);\n    if (-1 < currentTime) {\n      return currentTime;\n    }\n    currentTime = getCurrentTime();\n  } while ((uint)(currentTime - inputParams[3]) < (uint)maxWaitTime);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "wait_for_condition_000811e8",
                "param_1": "inputParams",
                "iVar1": "currentTime",
                "millis": "getCurrentTime",
                "param_1[3]": "inputParams[3]",
                "param_1[2]": "maxWaitTime"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "millis"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "read_and_concatenate_00081214",
            "code": "\nvoid readAndConcatenate_00081214(undefined4 outputString,undefined4 inputHandle,uint endCharacter)\n\n{\n  uint readResult;\n  \n  String(outputString,&DAT_00085637);\n  while ((readResult = timedRead(inputHandle), -1 < (int)readResult && (readResult != endCharacter))) {\n    concat(outputString,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "read_and_concatenate_00081214",
                "param_1": "outputString",
                "param_2": "inputHandle",
                "param_3": "endCharacter",
                "uVar1": "readResult"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "String",
                "timedRead",
                "concat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input"
            },
            "calling": [
                "serialEventRun",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_byte_from_buffer_00081276",
            "code": "\nuint extractByteFromBuffer_00081276(int bufferPtr)\n\n{\n  byte extractedByte;\n  int buffer;\n  \n  buffer = *(int *)(bufferPtr + 0x10);\n  if (*(int *)(buffer + 0x80) != *(int *)(buffer + 0x84)) {\n    extractedByte = *(byte *)(buffer + *(int *)(buffer + 0x84));\n    *(uint *)(buffer + 0x84) = *(int *)(buffer + 0x84) + 1U & 0x7f;\n    return (uint)extractedByte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "param_1": "bufferPtr",
                "iVar2": "buffer",
                "bVar1": "extractedByte"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataPointer,undefined4 newData)\n\n{\n  int dataEntry;\n  uint newIndex;\n  \n  dataEntry = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(dataEntry + 0x84) == *(int *)(dataEntry + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newData;\n  }\n  else {\n    newIndex = *(int *)(dataEntry + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(dataEntry + 0x84) == newIndex);\n    *(char *)(dataEntry + *(int *)(dataEntry + 0x80)) = (char)newData;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataPointer",
                "param_2": "newData",
                "iVar1": "dataEntry",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_function_00081348",
            "code": "\nvoid initializeFunction_00081348(undefined4 *outputArray,undefined4 inputValue,undefined configValue,undefined4 parameter4,\n                 undefined4 parameter5,undefined4 parameter6)\n\n{\n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  outputArray[6] = inputValue;\n  *outputArray = &PTR_write_1_00085650;\n  *(undefined *)(outputArray + 7) = configValue;\n  outputArray[4] = parameter5;\n  outputArray[8] = parameter4;\n  outputArray[5] = parameter6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_function_00081348",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "param_3": "configValue",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "param_6": "parameter6"
            },
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_peripheral_000813dc",
            "code": "\nvoid initializePeripheral_000813dc(int peripheralAddress,uint divisor)\n\n{\n  int tmpVar1;\n  undefined4 *pointerVar2;\n  \n  pmc_enable_periph_clk(*(undefined4 *)(peripheralAddress + 0x20));\n  pointerVar2 = *(undefined4 **)(peripheralAddress + 0x18);\n  pointerVar2[0x48] = 0x202;\n  *pointerVar2 = 0xac;\n  pointerVar2[1] = 0x800;\n  pointerVar2[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / divisor >> 4;\n  pointerVar2[3] = 0xffffffff;\n  pointerVar2[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(peripheralAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(peripheralAddress + 0x1c) & 0x1f);\n  tmpVar1 = *(int *)(peripheralAddress + 0x10);\n  *(undefined4 *)(tmpVar1 + 0x84) = 0;\n  *(undefined4 *)(tmpVar1 + 0x80) = 0;\n  tmpVar1 = *(int *)(peripheralAddress + 0x14);\n  *(undefined4 *)(tmpVar1 + 0x84) = 0;\n  *(undefined4 *)(tmpVar1 + 0x80) = 0;\n  *pointerVar2 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_peripheral_000813dc",
                "param_1": "peripheralAddress",
                "param_2": "divisor",
                "iVar1": "tmpVar1",
                "puVar2": "pointerVar2"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_uart_00081438",
            "code": "\nundefined4 * initializeUART_00081438(undefined4 *uartObject,undefined4 paramData)\n\n{\n  UARTClass();\n  *uartObject = &PTR_write_1_00085680;\n  uartObject[9] = paramData;\n  return uartObject;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_uart_00081438",
                "param_1": "uartObject",
                "param_2": "paramData"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_offset_0008145c",
            "code": "\nint calculateOffset_0008145c(int startValue,int previousValue,int endValue,int startOffset,int endOffset)\n\n{\n  return (uint)((startValue - previousValue) * (endOffset - startOffset)) / (uint)(endValue - previousValue) + startOffset;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_offset_0008145c",
                "param_1": "startValue",
                "param_2": "previousValue",
                "param_3": "endValue",
                "param_4": "startOffset",
                "param_5": "endOffset"
            },
            "calling": [
                "FUN_000806f8",
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "free_memory_00081472",
            "code": "\nundefined4 * freeMemory_00081472(undefined4 *memoryPointer)\n\n{\n  free(*memoryPointer);\n  return memoryPointer;\n}\n\n",
            "renaming": {
                "FUN_00081472": "free_memory_00081472",
                "param_1": "memoryPointer"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_memory_00081480",
            "code": "\nvoid resetMemory_00081480(int *memoryBlock)\n\n{\n  if (*memoryBlock != 0) {\n    free();\n  }\n  *memoryBlock = 0;\n  memoryBlock[2] = 0;\n  memoryBlock[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_memory_00081480",
                "param_1": "memoryBlock",
                "param_1[1]": "memoryBlock[1]",
                "param_1[2]": "memoryBlock[2]"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "resize_and_assign_memory_00081496",
            "code": "\nint resizeAndAssignMemory_00081496(int *pointerToMemory,int newSize,undefined4 argument3,undefined4 argument4)\n\n{\n  int reallocResult;\n  \n  reallocResult = realloc(*pointerToMemory,newSize + 1,argument3,argument4,argument4);\n  if (reallocResult != 0) {\n    *pointerToMemory = reallocResult;\n    pointerToMemory[1] = newSize;\n    reallocResult = 1;\n  }\n  return reallocResult;\n}\n\n",
            "renaming": {
                "FUN_00081496": "resize_and_assign_memory_00081496",
                "param_1": "pointerToMemory",
                "param_2": "newSize",
                "param_3": "argument3",
                "param_4": "argument4",
                "iVar1": "reallocResult"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_and_modify_buffer_000814ae",
            "code": "\nundefined4 checkAndModifyBuffer_000814ae(int *buffer,uint size)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < size)) {\n    result = modifyBuffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_and_modify_buffer_000814ae",
                "param_1": "buffer",
                "param_2": "size",
                "iVar1": "result",
                "changeBuffer": "modifyBuffer"
            },
            "calling": [
                "copy",
                "FUN_00081570"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "update_data_000814d0",
            "code": "\nundefined4 * updateData_000814d0(undefined4 *dataPtr,undefined4 sourceString,undefined4 size)\n\n{\n  int reservationResult;\n  \n  reservationResult = reserve(dataPtr,size);\n  if (reservationResult == 0) {\n    invalidate(dataPtr);\n  }\n  else {\n    dataPtr[2] = size;\n    strcpy(*dataPtr,sourceString);\n  }\n  return dataPtr;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "update_data_000814d0",
                "param_1": "dataPtr",
                "param_2": "sourceString",
                "param_3": "size",
                "iVar1": "reservationResult"
            },
            "calling": [
                "String"
            ],
            "called": [
                "reserve",
                "invalidate",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_param_000814f6",
            "code": "\nundefined4 * initializeParam_000814f6(undefined4 *paramArray,int inputString)\n\n{\n  undefined4 stringLength;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (inputString != 0) {\n    stringLength = strlen(inputString);\n    copy(paramArray,inputString,stringLength);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_param_000814f6",
                "param_1": "paramArray",
                "param_2": "inputString",
                "uVar1": "stringLength"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_params_0008151c",
            "code": "\nvoid updateParams_0008151c(int *sourceParams,int *destinationParams)\n\n{\n  if (*sourceParams != 0) {\n    if ((*destinationParams != 0) && ((uint)destinationParams[2] <= (uint)sourceParams[1])) {\n      strcpy();\n      sourceParams[2] = destinationParams[2];\n      goto finishUpdate;\n    }\n    free();\n  }\n  *sourceParams = *destinationParams;\n  sourceParams[1] = destinationParams[1];\n  sourceParams[2] = destinationParams[2];\n  *destinationParams = 0;\n  destinationParams[1] = 0;\nfinishUpdate:\n  destinationParams[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_params_0008151c",
                "param_1": "sourceParams",
                "param_2": "destinationParams",
                "param_2[2]": "destinationParams[2]",
                "param_1[1]": "sourceParams[1]",
                "param_1[2]": "sourceParams[2]",
                "param_2[1]": "destinationParams[1]",
                "LAB_00081558": "finishUpdate"
            },
            "calling": [
                "operator="
            ],
            "called": [
                "free",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "perform_comparison_00081560",
            "code": "\nint performComparison_00081560(int value1,int value2)\n\n{\n  if (value1 != value2) {\n    move();\n  }\n  return value1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "perform_comparison_00081560",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "move"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "reserve_and_copy_00081570",
            "code": "\nundefined4 reserveAndCopy_00081570(int *input,int size,int length)\n\n{\n  int result;\n  int offset;\n  \n  offset = input[2];\n  if (size == 0) {\n    return 0;\n  }\n  if (length != 0) {\n    result = reserve(input,offset + length);\n    if (result == 0) {\n      return 0;\n    }\n    strcpy(*input + input[2],size);\n    input[2] = offset + length;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "reserve_and_copy_00081570",
                "param_1": "input",
                "param_2": "size",
                "param_3": "length",
                "iVar1": "result",
                "iVar2": "offset"
            },
            "calling": [
                "concat"
            ],
            "called": [
                "reserve",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "copy_data_0008159e",
            "code": "\nvoid copyData_0008159e(undefined4 inputData,undefined4 buffer1,undefined4 buffer2)\n\n{\n  undefined4 buffer3;\n  undefined4 buffer4;\n  \n  buffer4 = buffer2;\n  reserve_and_copy_00081570(inputData,&buffer3,1,0,inputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "copy_data_0008159e",
                "param_1": "inputData",
                "param_2": "buffer1",
                "param_3": "buffer2",
                "local_c": "buffer3",
                "uStack_8": "buffer4"
            },
            "calling": [
                "readStringUntil"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "compare_values_000815b8",
            "code": "\nint compareValues_000815b8(byte **dataPtr,byte *valuePtr)\n\n{\n  uint comparisonResult;\n  int result;\n  \n  if (dataPtr[2] == (byte *)0x0) {\n    if (valuePtr == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (valuePtr != (byte *)0x0) {\n      comparisonResult = strcmp(*dataPtr);\n      goto LAB_000815d4;\n    }\n    valuePtr = *dataPtr;\n  }\n  comparisonResult = (uint)*valuePtr;\nLAB_000815d4:\n  result = 1 - comparisonResult;\n  if (1 < comparisonResult) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "compare_values_000815b8",
                "param_1": "dataPtr",
                "param_2": "valuePtr",
                "uVar1": "comparisonResult",
                "iVar2": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "extract_integer_from_byte_array_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint extractIntegerFromByteArray_000815de(byte **byteArray)\n\n{\n  byte byteValue;\n  byte isNegative;\n  uint result;\n  byte *bytePtr;\n  uint byteValue;\n  byte *currentByte;\n  int intValue;\n  int isFirstDigit;\n  uint maxValue;\n  uint minValue;\n  \n  bytePtr = *byteArray;\n  if (*byteArray == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    currentByte = bytePtr;\n    bytePtr = currentByte + 1;\n    byteValue = (uint)*currentByte;\n    byteValue = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    isNegative = byteValue & 8;\n  } while ((byteValue & 8) != 0);\n  if (byteValue == 0x2d) {\n    bytePtr = currentByte + 2;\n    byteValue = (uint)currentByte[1];\n    isNegative = 1;\n  }\n  else if (byteValue == 0x2b) {\n    byteValue = (uint)currentByte[1];\n    bytePtr = currentByte + 2;\n  }\n  if (isNegative == 0) {\n    minValue = 0x7fffffff;\n  }\n  else {\n    minValue = 0x80000000;\n  }\n  maxValue = minValue / 10;\n  isFirstDigit = 0;\n  result = 0;\n  do {\n    byteValue = *(byte *)(Elf32_Rel_ARRAY_20070000[270].r_info + byteValue + 1);\n    if ((byteValue & 4) == 0) {\n      if ((byteValue & 3) == 0) {\nLAB_0008277e:\n        if (isFirstDigit == -1) {\n          if (isNegative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x22;\n        }\n        else if (isNegative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((byteValue & 3) == 1) {\n        intValue = 0x37;\n      }\n      else {\n        intValue = 0x57;\n      }\n      intValue = byteValue - intValue;\n    }\n    else {\n      intValue = byteValue - 0x30;\n    }\n    if (9 < intValue) goto LAB_0008277e;\n    if (isFirstDigit != -1) {\n      if ((maxValue <= result && result != maxValue) || ((result == maxValue && ((int)(minValue % 10) < intValue))))\n      {\n        isFirstDigit = -1;\n      }\n      else {\n        result = result * 10 + intValue;\n        isFirstDigit = 1;\n      }\n    }\n    byteValue = (uint)*bytePtr;\n    bytePtr = bytePtr + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "extract_integer_from_byte_array_000815de",
                "param_1": "byteArray",
                "bVar1": "byteValue",
                "bVar2": "isNegative",
                "uVar3": "result",
                "pbVar4": "bytePtr",
                "uVar5": "byteValue",
                "pbVar6": "currentByte",
                "iVar7": "intValue",
                "iVar8": "isFirstDigit",
                "uVar9": "maxValue",
                "uVar10": "minValue"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_microcontroller_program_000815ec",
            "code": "\nvoid runMicrocontrollerProgram_000815ec(void)\n\n{\n  setupWatchdog();\n  initializeSystem();\n  initializeVariant();\n  microcontrollerDelay(1);\n  setupMicrocontroller();\n  do {\n    microcontrollerLoop();\n    runSerialEvents();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_microcontroller_program_000815ec",
                "_watchdogDefaultSetup": "setupWatchdog",
                "initialize_system_00080774": "initializeSystem",
                "initVariant": "initializeVariant",
                "delay": "microcontrollerDelay",
                "setup": "setupMicrocontroller",
                "loop": "microcontrollerLoop",
                "serialEventRun": "runSerialEvents"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_watchdogDefaultSetup",
                "serialEventRun",
                "setup",
                "delay",
                "loop",
                "initVariant",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_memory_00081618",
            "code": "\n\n\nvoid initializeMemory_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_memory_00081618"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_pulse_duration_00081624",
            "code": "\nint calculatePulseDuration_00081624(int index,int flag,int multiplier,undefined4 offset)\n\n{\n  int pulseDuration;\n  undefined4 dataValue;\n  \n  dataValue = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    dataValue = 0;\n  }\n  pulseDuration = countPulse(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                        *(undefined4 *)(&DAT_00084b48 + index * 0x1c),dataValue,\n                        ((elfArray[6].r_offset / 1000000) * multiplier) / 0x12,offset)\n  ;\n  if (pulseDuration != 0) {\n    pulseDuration = (int)((ulonglong)(pulseDuration * 18000 + 16000) /\n                 ((ulonglong)elfArray[6].r_offset / 1000));\n  }\n  return pulseDuration;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_pulse_duration_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "offset",
                "iVar1": "pulseDuration",
                "uVar2": "dataValue",
                "countPulseASM": "countPulse",
                "Elf32_Rel_ARRAY_20070000": "elfArray"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "countPulseASM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_occurrences_00081684",
            "code": "\nint checkOccurrences_00081684(uint *dataArray,uint mask,uint target,int maxIterations)\n\n{\n  int occurrenceCount;\n  \n  do {\n    if ((*dataArray & mask) != target) {\n      do {\n        if ((*dataArray & mask) == target) {\n          occurrenceCount = 0;\n          do {\n            if ((*dataArray & mask) != target) {\n              return occurrenceCount;\n            }\n            occurrenceCount = occurrenceCount + 1;\n          } while (maxIterations != occurrenceCount);\n          return 0;\n        }\n        maxIterations = maxIterations + -1;\n      } while (maxIterations != 0);\n      return 0;\n    }\n    maxIterations = maxIterations + -1;\n  } while (maxIterations != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_occurrences_00081684",
                "param_1": "dataArray",
                "param_2": "mask",
                "param_3": "target",
                "param_4": "maxIterations",
                "iVar1": "occurrenceCount"
            },
            "calling": [
                "pulseIn"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_global_value_000816d8",
            "code": "\nundefined4 getGlobalValue_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_global_value_000816d8"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_params_000816ec",
            "code": "\nvoid updateParams_000816ec(dword newParam1,dword newParam2,dword newParam3)\n\n{\n  dword *pdVar1;\n  uint index;\n  uint flag;\n  code *callFunction;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  pdVar1 = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    pdVar1 = (dword *)malloc(400);\n    if (pdVar1 == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*callFunction)(0xffffffff);\n      return;\n    }\n    *pdVar1 = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    pdVar1[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)pdVar1;\n    pdVar1[0x62] = 0;\n    pdVar1[99] = 0;\n  }\n  flag = 1 << (index & 0xff);\n  pdVar1[index + 0x22] = newParam1;\n  pdVar1[0x62] = pdVar1[0x62] | flag;\n  pdVar1[index + 0x42] = newParam3;\n  pdVar1[99] = flag | pdVar1[99];\n  pdVar1[1] = index + 1;\n  pdVar1[index + 2] = newParam2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*callFunction)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_params_000816ec",
                "param_1": "newParam1",
                "param_2": "newParam2",
                "param_3": "newParam3",
                "uVar2": "index",
                "uVar3": "flag",
                "UNRECOVERED_JUMPTABLE_00": "callFunction"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failed_000816f8",
            "code": "\nvoid print_assertion_failed_000816f8(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 output_file;\n  undefined4 temp_function;\n  char *extra_string;\n  undefined8 abort_result;\n  \n  output_file = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion == (char *)0x0) goto LAB_0008171c;\n  temp_function = function;\n  extra_string = \", function: \";\n  do {\n    function = file;\n    fiprintf(output_file,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",temp_function,file,line,\n             extra_string,assertion);\n    abort_result = abort();\n    line = (undefined4)((ulonglong)abort_result >> 0x20);\n    output_file = (undefined4)abort_result;\nLAB_0008171c:\n    assertion = \"\";\n    temp_function = function;\n    extra_string = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "uVar1": "output_file",
                "uVar2": "temp_function",
                "pcVar3": "extra_string",
                "uVar4": "abort_result"
            },
            "calling": [
                "_initISR",
                "TC_Configure"
            ],
            "called": [
                "abort",
                "fiprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "print_formatted_message_00081750",
            "code": "\nvoid printFormattedMessage_00081750(undefined4 formatString,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 formattedParam2;\n  undefined4 formattedParam3;\n  \n  formattedParam2 = param2;\n  formattedParam3 = param3;\n  _vfiprintf_r(Elf32_Rel_ARRAY_20070000[140].r_offset,formatString,param1,&formattedParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "print_formatted_message_00081750",
                "param_1": "formatString",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "uStack_8": "formattedParam2",
                "uStack_4": "formattedParam3"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_init_functions_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeInitFunctions_00081778(void)\n\n{\n  int iterationCount;\n  code **functionPointers;\n  \n  _init();\n  functionPointers = (code **)0x8584c;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointers = functionPointers + 1;\n    (**functionPointers)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_init_functions_00081778",
                "ppcVar2": "functionPointers",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "print_formatted_message_000817c8",
            "code": "\nvoid printFormattedMessage_000817c8(undefined4 message,undefined4 formatArg1,undefined4 formatArg2,undefined4 formatArg3)\n\n{\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 arg3;\n  \n  arg1 = formatArg1;\n  arg2 = formatArg2;\n  arg3 = formatArg3;\n  _vfiprintf_r(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),message,&arg1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "print_formatted_message_000817c8",
                "param_1": "message",
                "param_2": "formatArg1",
                "param_3": "formatArg2",
                "param_4": "formatArg3",
                "uStack_c": "arg1",
                "uStack_8": "arg2",
                "uStack_4": "arg3"
            },
            "calling": [
                "_exit"
            ],
            "called": [
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "allocate_memory_000817f0",
            "code": "\nvoid allocateMemory_000817f0(undefined4 size)\n\n{\n  dynamicMemoryAllocation(Elf32_Rel_ARRAY_20070000[140].r_offset,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "allocate_memory_000817f0",
                "param_1": "size",
                "_malloc_r": "dynamicMemoryAllocation"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "deallocate_relocation_00081800",
            "code": "\nvoid deallocateRelocation_00081800(undefined4 memoryBlock)\n\n{\n  _free_r(relocationTableArray[140].offset,memoryBlock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "deallocate_relocation_00081800",
                "param_1": "memoryBlock",
                "Elf32_Rel_ARRAY_20070000": "relocationTableArray",
                "r_offset": "offset"
            },
            "calling": [
                "invalidate",
                "~String",
                "move"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_block_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocateMemoryBlock_00081810(undefined4 *lock,uint size)\n\n{\n  dword entry;\n  int nextEntry;\n  uint mask;\n  uint blockDiff;\n  int prevSize;\n  uint newBlockSize;\n  dword currentEntry;\n  uint currentBlockSize;\n  int nextSize;\n  undefined *ptr;\n  dword firstEntry;\n  dword lastEntry;\n  int i;\n  dword *entry1;\n  uint adjustedSize;\n  undefined *blockStart;\n  dword *entry2;\n  uint shiftedSize;\n  \n  if (size + 0xb < 0x17) {\n    adjustedSize = 0x10;\n    if (0x10 < size) goto LAB_00081876;\n  }\n  else {\n    adjustedSize = size + 0xb & 0xfffffff8;\n    if (((int)adjustedSize < 0) || (adjustedSize < size)) {\nLAB_00081876:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(lock);\n  entry = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (adjustedSize < 0x1f8) {\n    i = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + adjustedSize);\n    if ((i != adjustedSize + 0x20070464) ||\n       (nextEntry = i + 8, i = *(int *)(i + 0x14), nextEntry != i)) {\n      prevSize = *(int *)(i + 0xc);\n      nextSize = (*(uint *)(i + 4) & 0xfffffffc) + i;\n      adjustedSize = *(uint *)(nextSize + 4);\n      nextEntry = *(int *)(i + 8);\n      *(int *)(nextEntry + 0xc) = prevSize;\n      *(int *)(prevSize + 8) = nextEntry;\n      *(uint *)(nextSize + 4) = adjustedSize | 1;\n      __malloc_unlock(lock);\n      return (int *)(i + 8);\n    }\n    shiftedSize = (adjustedSize >> 3) + 2;\n  }\n  else {\n    shiftedSize = adjustedSize >> 9;\n    if (shiftedSize == 0) {\n      nextEntry = 0x7e;\n      i = 0x3f;\n    }\n    else if (shiftedSize < 5) {\n      i = (adjustedSize >> 6) + 0x38;\n      nextEntry = i * 2;\n    }\n    else if (shiftedSize < 0x15) {\n      i = shiftedSize + 0x5b;\n      nextEntry = i * 2;\n    }\n    else if (shiftedSize < 0x55) {\n      i = (adjustedSize >> 0xc) + 0x6e;\n      nextEntry = i * 2;\n    }\n    else if (shiftedSize < 0x155) {\n      i = (adjustedSize >> 0xf) + 0x77;\n      nextEntry = i * 2;\n    }\n    else if (shiftedSize < 0x555) {\n      i = (adjustedSize >> 0x12) + 0x7c;\n      nextEntry = i * 2;\n    }\n    else {\n      nextEntry = 0xfc;\n      i = 0x7e;\n    }\n    for (currentEntry = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[nextEntry]; nextEntry * 4 + 0x20070464U != currentEntry\n        ; currentEntry = *(dword *)(currentEntry + 0xc)) {\n      shiftedSize = *(uint *)(currentEntry + 4) & 0xfffffffc;\n      prevSize = shiftedSize - adjustedSize;\n      if (0xf < prevSize) {\n        i = i + -1;\n        break;\n      }\n      if (-1 < prevSize) {\n        nextEntry = shiftedSize + currentEntry;\n        adjustedSize = *(uint *)(nextEntry + 4);\n        prevSize = *(int *)(currentEntry + 0xc);\n        i = *(int *)(currentEntry + 8);\n        *(int *)(i + 0xc) = prevSize;\n        *(int *)(prevSize + 8) = i;\n        *(uint *)(nextEntry + 4) = adjustedSize | 1;\n        __malloc_unlock(lock);\n        return (int *)(currentEntry + 8);\n      }\n    }\n    shiftedSize = i + 1;\n  }\n  currentEntry = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    mask = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    blockDiff = mask & 0xfffffffc;\n    newBlockSize = blockDiff - adjustedSize;\n    if (0xf < (int)newBlockSize) {\n      currentEntry = adjustedSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = adjustedSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = currentEntry;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = currentEntry;\n      *(undefined4 *)(currentEntry + 0xc) = 0x2007046c;\n      *(undefined4 *)(currentEntry + 8) = 0x2007046c;\n      *(uint *)(currentEntry + 4) = newBlockSize | 1;\n      *(uint *)(currentEntry + newBlockSize) = newBlockSize;\n      __malloc_unlock(lock);\n      return (int *)(entry + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)newBlockSize) {\n      *(uint *)(blockDiff + entry + 4) = *(uint *)(blockDiff + entry + 4) | 1;\n      __malloc_unlock(lock);\n      return (int *)(entry + 8);\n    }\n    if (blockDiff < 0x200) {\n      blockDiff = mask & 0xfffffff8;\n      i = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + blockDiff);\n      currentEntry = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(entry + 8) = i;\n      *(uint *)(entry + 0xc) = blockDiff + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = currentEntry;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + blockDiff) = entry;\n      *(dword *)(i + 0xc) = entry;\n    }\n    else {\n      newBlockSize = mask >> 9;\n      if (newBlockSize < 5) {\n        nextEntry = (mask >> 6) + 0x38;\n        i = nextEntry * 2;\n      }\n      else if (newBlockSize < 0x15) {\n        nextEntry = newBlockSize + 0x5b;\n        i = nextEntry * 2;\n      }\n      else if (newBlockSize < 0x55) {\n        nextEntry = (mask >> 0xc) + 0x6e;\n        i = nextEntry * 2;\n      }\n      else if (newBlockSize < 0x155) {\n        nextEntry = (mask >> 0xf) + 0x77;\n        i = nextEntry * 2;\n      }\n      else if (newBlockSize < 0x555) {\n        nextEntry = (mask >> 0x12) + 0x7c;\n        i = nextEntry * 2;\n      }\n      else {\n        i = 0xfc;\n        nextEntry = 0x7e;\n      }\n      currentEntry = i * 4 + 0x20070464;\n      firstEntry = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[i];\n      if (firstEntry == currentEntry) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (nextEntry >> 2 & 0xffU);\n        lastEntry = firstEntry;\n      }\n      else {\n        do {\n          lastEntry = firstEntry;\n          if ((*(uint *)(firstEntry + 4) & 0xfffffffc) <= blockDiff) break;\n          firstEntry = *(dword *)(firstEntry + 8);\n          lastEntry = firstEntry;\n        } while (currentEntry != firstEntry);\n        firstEntry = *(dword *)(lastEntry + 0xc);\n      }\n      currentEntry = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(entry + 0xc) = firstEntry;\n      *(dword *)(entry + 8) = lastEntry;\n      *(dword *)(firstEntry + 8) = entry;\n      *(dword *)(lastEntry + 0xc) = entry;\n    }\n  }\n  entry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  mask = 1 << ((int)shiftedSize >> 2 & 0xffU);\n  if (mask <= currentEntry) {\n    if ((currentEntry & mask) == 0) {\n      shiftedSize = shiftedSize & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        shiftedSize = shiftedSize + 4;\n      } while ((currentEntry & mask) == 0);\n    }\n    do {\n      entry2 = &Elf32_Rel_ARRAY_20070000[shiftedSize + 0x8c].r_info;\n      entry1 = entry2;\n      blockDiff = shiftedSize;\n      do {\n        for (ptr = (undefined *)entry1[3]; entry1 != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          newBlockSize = *(uint *)(ptr + 4) & 0xfffffffc;\n          currentBlockSize = newBlockSize - adjustedSize;\n          if (0xf < (int)currentBlockSize) {\n            nextEntry = *(int *)(ptr + 8);\n            i = *(int *)(ptr + 0xc);\n            blockStart = ptr + adjustedSize;\n            *(uint *)(ptr + 4) = adjustedSize | 1;\n            *(int *)(nextEntry + 0xc) = i;\n            *(int *)(i + 8) = nextEntry;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)blockStart;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)blockStart;\n            *(undefined4 *)(blockStart + 0xc) = 0x2007046c;\n            *(undefined4 *)(blockStart + 8) = 0x2007046c;\n            *(uint *)(blockStart + 4) = currentBlockSize | 1;\n            *(uint *)(blockStart + currentBlockSize) = currentBlockSize;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)currentBlockSize) {\n            i = *(int *)(ptr + 8);\n            nextEntry = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + newBlockSize + 4) = *(uint *)(ptr + newBlockSize + 4) | 1;\n            *(int *)(i + 0xc) = nextEntry;\n            *(int *)(nextEntry + 8) = i;\n            __malloc_unlock(lock);\n            return (int *)(ptr + 8);\n          }\n        }\n        blockDiff = blockDiff + 1;\n        entry1 = entry1 + 2;\n      } while ((blockDiff & 3) != 0);\n      do {\n        newBlockSize = shiftedSize & 3;\n        ptr = (undefined *)(entry2 + -2);\n        shiftedSize = shiftedSize - 1;\n        if (newBlockSize == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~mask;\n          break;\n        }\n        entry2 = (dword *)*entry2;\n      } while (entry2 == (dword *)ptr);\n      mask = mask * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= mask &&\n           mask - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (shiftedSize = blockDiff, mask == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & mask) == 0; mask = mask << 1) {\n        shiftedSize = shiftedSize + 4;\n      }\n    } while( true );\n  }\n  shiftedSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((adjustedSize <= shiftedSize) &&\n     (mask = shiftedSize - adjustedSize, currentEntry = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)mask))\n  goto LAB_00081b1a;\n  mask = Elf32_Rel_ARRAY_20070000[141].r_info + shiftedSize;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    blockDiff = adjustedSize + DAT_20071218 + 0x10;\n  }\n  else {\n    blockDiff = adjustedSize + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  currentEntry = _sbrk_r(lock,blockDiff);\n  if ((currentEntry == 0xffffffff) || ((currentEntry < mask && (entry != 0x20070464)))) {\n    shiftedSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentEntry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    newBlockSize = DAT_2007121c + blockDiff;\n    DAT_2007121c = newBlockSize;\n    if ((mask == currentEntry) && ((mask & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = blockDiff + shiftedSize | 1;\n    }\n    else {\n      firstEntry = currentEntry;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        firstEntry = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = newBlockSize + (currentEntry - mask);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = firstEntry;\n      mask = currentEntry & 7;\n      if (mask == 0) {\n        i = 0x1000;\n      }\n      else {\n        currentEntry = currentEntry + (8 - mask);\n        i = 0x1008 - mask;\n      }\n      i = i - (blockDiff + currentEntry & 0xfff);\n      nextEntry = _sbrk_r(lock,i);\n      if (nextEntry == -1) {\n        mask = 1;\n        i = 0;\n      }\n      else {\n        mask = (nextEntry - currentEntry) + i | 1;\n      }\n      newBlockSize = DAT_2007121c + i;\n      Elf32_Rel_ARRAY_20070000[141].r_info = currentEntry;\n      DAT_2007121c = newBlockSize;\n      *(uint *)(currentEntry + 4) = mask;\n      if (entry != 0x20070464) {\n        if (shiftedSize < 0x10) {\n          *(undefined4 *)(currentEntry + 4) = 1;\n          shiftedSize = 0;\n          goto LAB_00081b04;\n        }\n        shiftedSize = shiftedSize - 0xc & 0xfffffff8;\n        *(uint *)(entry + 4) = shiftedSize | *(uint *)(entry + 4) & 1;\n        *(undefined4 *)(entry + shiftedSize + 4) = 5;\n        *(undefined4 *)(entry + shiftedSize + 8) = 5;\n        if (0xf < shiftedSize) {\n          _free_r(lock,entry + 8);\n          newBlockSize = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < newBlockSize) {\n      DAT_20071214 = newBlockSize;\n    }\n    if (DAT_20071210 < newBlockSize) {\n      DAT_20071210 = newBlockSize;\n    }\n    shiftedSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentEntry = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  mask = shiftedSize - adjustedSize;\n  if ((shiftedSize < adjustedSize) || ((int)mask < 0x10)) {\n    __malloc_unlock(lock);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = adjustedSize + currentEntry;\n  *(uint *)(currentEntry + 4) = adjustedSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask | 1;\n  __malloc_unlock(lock);\n  return (int *)(currentEntry + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_block_00081810",
                "param_1": "lock",
                "param_2": "size",
                "dVar1": "entry",
                "iVar2": "nextEntry",
                "uVar3": "mask",
                "uVar4": "blockDiff",
                "iVar5": "prevSize",
                "uVar6": "newBlockSize",
                "dVar7": "currentEntry",
                "uVar8": "currentBlockSize",
                "iVar9": "nextSize",
                "puVar10": "ptr",
                "dVar11": "firstEntry",
                "dVar12": "lastEntry",
                "iVar13": "i",
                "pdVar14": "entry1",
                "uVar15": "adjustedSize",
                "puVar16": "blockStart",
                "pdVar17": "entry2",
                "uVar18": "shiftedSize"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r",
                "__smakebuf_r",
                "malloc"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_bytes_00081d48",
            "code": "\nundefined4 * copyBytes_00081d48(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtrAligned;\n  undefined4 *srcPtr;\n  uint remainingSize;\n  uint alignedSize;\n  bool loopCondition;\n  \n  destPtrAligned = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      alignedSize = size - 4;\n      if (3 < size) {\n        do {\n          destPtr = source;\n          srcPtr = destPtrAligned;\n          loopCondition = alignedSize != 0;\n          alignedSize = alignedSize - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtrAligned = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_00081dcc;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      alignedSize = 4 - ((uint)destination & 3);\n      size = size - alignedSize;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destPtrAligned = destPtr;\n      source = srcPtr;\n      if ((alignedSize & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destPtrAligned = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *destPtrAligned = *source;\n    destPtrAligned[1] = source[1];\n    destPtrAligned[2] = source[2];\n    destPtrAligned[3] = source[3];\n    destPtrAligned[4] = source[4];\n    destPtrAligned[5] = source[5];\n    destPtrAligned[6] = source[6];\n    destPtrAligned[7] = source[7];\n    destPtrAligned[8] = source[8];\n    destPtrAligned[9] = source[9];\n    destPtrAligned[10] = source[10];\n    destPtrAligned[0xb] = source[0xb];\n    destPtrAligned[0xc] = source[0xc];\n    destPtrAligned[0xd] = source[0xd];\n    destPtrAligned[0xe] = source[0xe];\n    destPtrAligned[0xf] = source[0xf];\n    destPtrAligned = destPtrAligned + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remainingSize = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *destPtrAligned = *source;\n      destPtrAligned[1] = source[1];\n      destPtrAligned[2] = source[2];\n      destPtrAligned[3] = source[3];\n      destPtrAligned = destPtrAligned + 4;\n      source = source + 4;\n      loopCondition = 0xf < remainingSize;\n      remainingSize = remainingSize - 0x10;\n    } while (loopCondition);\n  }\n  alignedSize = remainingSize + 0xc;\n  srcPtr = destPtrAligned;\n  destPtr = source;\n  if (0xfffffff3 < remainingSize) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      loopCondition = 3 < alignedSize;\n      alignedSize = alignedSize - 4;\n      destPtrAligned = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (loopCondition);\n  }\nLAB_00081dcc:\n  if (alignedSize + 4 != 0) {\n    destPtr = destPtrAligned;\n    srcPtr = source;\n    if ((alignedSize & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destPtrAligned + 1);\n      *(undefined *)destPtrAligned = *(undefined *)source;\n    }\n    if ((alignedSize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_bytes_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "destPtr",
                "puVar2": "destPtrAligned",
                "puVar3": "srcPtr",
                "uVar4": "remainingSize",
                "uVar5": "alignedSize",
                "bVar6": "loopCondition"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "reverse_copy_00081e34",
            "code": "\nvoid reverseCopy_00081e34(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int count;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint remainingLength;\n  undefined *temp;\n  uint remainingBytes;\n  \n  if ((src < dest) && (tempPtr = (undefined4 *)((int)src + length), dest < tempPtr)) {\n    temp = (undefined *)((int)dest + length);\n    count = length - 1;\n    if (length != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        count = count + -1;\n        temp = temp + -1;\n        *temp = *(undefined *)tempPtr;\n      } while (count != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tempPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    count = (length - 0x10 >> 4) + 1;\n    remainingBytes = length & 0xf;\n    src = src + count * 4;\n    dest = dest + count * 4;\n    remainingLength = remainingBytes;\n    tempPtr = dest;\n    srcPtr = src;\n    if (3 < remainingBytes) {\n      do {\n        remainingLength = remainingLength - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < remainingLength);\n      count = (remainingBytes - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + count);\n      src = (undefined4 *)((int)src + count);\n      remainingBytes = length & 3;\n    }\n    length = remainingBytes;\n    if (length == 0) {\n      return;\n    }\n  }\n  tempPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "reverse_copy_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "count",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "remainingLength",
                "puVar6": "temp",
                "uVar7": "remainingBytes"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "memset_00081f00",
            "code": "\nvoid memset_00081f00(undefined4 *dest,undefined value,uint count)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 value_4byte;\n  uint count_remaining;\n  bool is_count_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_count_zero = count == 0;\n    dest_ptr = dest;\n    count = count - 1;\n    if (is_count_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_count_zero = count == 0;\n      dest_ptr = dest;\n      count = count - 1;\n      if (is_count_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < count) {\n    value_4byte = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    count_remaining = count;\n    dest_ptr = dest;\n    if (0xf < count) {\n      count_remaining = count - 0x10;\n      do {\n        *dest_ptr = value_4byte;\n        dest_ptr[1] = value_4byte;\n        dest_ptr[2] = value_4byte;\n        dest_ptr[3] = value_4byte;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (count_remaining & 0xfffffff0) + 0x10));\n      count = count & 0xf;\n      dest = dest + ((count_remaining >> 4) + 1) * 4;\n      count_remaining = count;\n      dest_ptr = dest;\n      if (count < 4) goto LAB_00081f7c;\n    }\n    do {\n      count = count - 4;\n      *dest = value_4byte;\n      dest = dest + 1;\n    } while (3 < count);\n    dest = (undefined4 *)((int)dest_ptr + (count_remaining - 4 & 0xfffffffc) + 4);\n    count = count_remaining & 3;\n  }\nLAB_00081f7c:\n  if (count != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(count + (int)dest));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "memset_00081f00",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "count",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "value_4byte",
                "uVar4": "count_remaining",
                "bVar5": "is_count_zero"
            },
            "calling": [
                "__sinit",
                "RingBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "reallocate_memory_00081f9c",
            "code": "\nvoid reallocateMemory_00081f9c(undefined4 sourceAddress,undefined4 size)\n\n{\n  _realloc_r(relocationArray[140].offset,sourceAddress,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "reallocate_memory_00081f9c",
                "param_1": "sourceAddress",
                "param_2": "size",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_offset": "offset"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_00081fac",
            "code": "\nint * allocateMemory_00081fac(undefined4 *param_ptr,int *buffer,uint size)\n\n{\n  dword offset;\n  int *result;\n  uint temp;\n  int temp_var;\n  uint old_size;\n  int temp_var2;\n  int *temp_buffer;\n  uint new_size;\n  uint aligned_size;\n  int *new_buffer;\n  \n  if (buffer == (int *)0x0) {\n    result = (int *)_malloc_r(param_ptr,size);\n    return result;\n  }\n  __malloc_lock();\n  old_size = buffer[-1];\n  new_size = old_size & 0xfffffffc;\n  result = buffer + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_00082078;\n  }\n  if (aligned_size < size) {\nLAB_00082078:\n    *param_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)new_size < (int)aligned_size) {\n    offset = (int)result + new_size;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == offset) {\n      temp = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp + new_size)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)result + aligned_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp + new_size) - aligned_size | 1;\n        buffer[-1] = aligned_size | buffer[-1] & 1U;\n        __malloc_unlock(param_ptr);\n        return buffer;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(offset + 4) & 0xfffffffe) + offset + 4) & 1) == 0) {\n      temp = *(uint *)(offset + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp + new_size)) {\n        temp_var2 = *(int *)(offset + 0xc);\n        temp_var = *(int *)(offset + 8);\n        *(int *)(temp_var + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp_var;\n        new_size = temp + new_size;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      temp = 0;\n      offset = 0;\n    }\n    if (-1 < (int)(old_size << 0x1f)) {\n      new_buffer = (int *)((int)result - buffer[-2]);\n      old_size = (new_buffer[1] & 0xfffffffcU) + new_size;\n      if (offset != 0) {\n        if (offset == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp + old_size)) {\n            result = new_buffer + 2;\n            temp_var = *result;\n            temp_var2 = new_buffer[3];\n            new_size = new_size - 4;\n            *(int *)(temp_var + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var;\n            if (new_size < 0x25) {\n              temp_buffer = result;\n              if (0x13 < new_size) {\n                new_buffer[2] = *buffer;\n                new_buffer[3] = buffer[1];\n                if (new_size < 0x1c) {\n                  buffer = buffer + 2;\n                  temp_buffer = new_buffer + 4;\n                }\n                else {\n                  new_buffer[4] = buffer[2];\n                  new_buffer[5] = buffer[3];\n                  if (new_size == 0x24) {\n                    new_buffer[6] = buffer[4];\n                    temp_buffer = buffer + 5;\n                    buffer = buffer + 6;\n                    new_buffer[7] = *temp_buffer;\n                    temp_buffer = new_buffer + 8;\n                  }\n                  else {\n                    buffer = buffer + 4;\n                    temp_buffer = new_buffer + 6;\n                  }\n                }\n              }\n              *temp_buffer = *buffer;\n              temp_buffer[1] = buffer[1];\n              temp_buffer[2] = buffer[2];\n            }\n            else {\n              memmove(result,buffer);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_buffer + aligned_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp + old_size) - aligned_size | 1;\n            new_buffer[1] = aligned_size | new_buffer[1] & 1U;\n            __malloc_unlock(param_ptr);\n            return result;\n          }\n        }\n        else {\n          temp = temp + old_size;\n          if ((int)aligned_size <= (int)temp) {\n            temp_var2 = *(int *)(offset + 0xc);\n            temp_var = *(int *)(offset + 8);\n            *(int *)(temp_var + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var;\n            temp_buffer = new_buffer + 2;\n            temp_var = *temp_buffer;\n            temp_var2 = new_buffer[3];\n            old_size = new_size - 4;\n            *(int *)(temp_var + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp_var;\n            new_size = temp;\n            if (old_size < 0x25) {\n              result = temp_buffer;\n              if (0x13 < old_size) {\n                new_buffer[2] = *buffer;\n                new_buffer[3] = buffer[1];\n                if (old_size < 0x1c) {\n                  buffer = buffer + 2;\n                  result = new_buffer + 4;\n                }\n                else {\n                  new_buffer[4] = buffer[2];\n                  new_buffer[5] = buffer[3];\n                  if (old_size == 0x24) {\n                    new_buffer[6] = buffer[4];\n                    result = buffer + 5;\n                    buffer = buffer + 6;\n                    new_buffer[7] = *result;\n                    result = new_buffer + 8;\n                  }\n                  else {\n                    buffer = buffer + 4;\n                    result = new_buffer + 6;\n                  }\n                }\n              }\n              *result = *buffer;\n              result[1] = buffer[1];\n              result[2] = buffer[2];\n              old_size = new_buffer[1];\n              result = new_buffer;\n              buffer = temp_buffer;\n            }\n            else {\n              memmove(temp_buffer,buffer);\n              old_size = new_buffer[1];\n              result = new_buffer;\n              buffer = temp_buffer;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)old_size) {\n        temp_buffer = new_buffer + 2;\n        temp_var = *temp_buffer;\n        temp_var2 = new_buffer[3];\n        temp = new_size - 4;\n        *(int *)(temp_var + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp_var;\n        new_size = old_size;\n        if (temp < 0x25) {\n          result = temp_buffer;\n          if (0x13 < temp) {\n            new_buffer[2] = *buffer;\n            new_buffer[3] = buffer[1];\n            if (temp < 0x1c) {\n              buffer = buffer + 2;\n              result = new_buffer + 4;\n            }\n            else {\n              new_buffer[4] = buffer[2];\n              new_buffer[5] = buffer[3];\n              if (temp == 0x24) {\n                new_buffer[6] = buffer[4];\n                result = buffer + 5;\n                buffer = buffer + 6;\n                new_buffer[7] = *result;\n                result = new_buffer + 8;\n              }\n              else {\n                buffer = buffer + 4;\n                result = new_buffer + 6;\n              }\n            }\n          }\n          *result = *buffer;\n          result[1] = buffer[1];\n          result[2] = buffer[2];\n          old_size = new_buffer[1];\n          result = new_buffer;\n          buffer = temp_buffer;\n        }\n        else {\n          memmove(temp_buffer,buffer);\n          old_size = new_buffer[1];\n          result = new_buffer;\n          buffer = temp_buffer;\n        }\n        goto LAB_00082088;\n      }\n    }\n    new_buffer = (int *)_malloc_r(param_ptr,size);\n    if (new_buffer == (int *)0x0) goto LAB_000820a0;\n    old_size = buffer[-1];\n    if (new_buffer + -2 != (int *)((old_size & 0xfffffffe) + (int)result)) {\n      new_size = new_size - 4;\n      if (new_size < 0x25) {\n        result = buffer;\n        temp_buffer = new_buffer;\n        if (0x13 < new_size) {\n          *new_buffer = *buffer;\n          new_buffer[1] = buffer[1];\n          if (new_size < 0x1c) {\n            result = buffer + 2;\n            temp_buffer = new_buffer + 2;\n          }\n          else {\n            new_buffer[2] = buffer[2];\n            new_buffer[3] = buffer[3];\n            if (new_size == 0x24) {\n              new_buffer[4] = buffer[4];\n              new_buffer[5] = buffer[5];\n              result = buffer + 6;\n              temp_buffer = new_buffer + 6;\n            }\n            else {\n              result = buffer + 4;\n              temp_buffer = new_buffer + 4;\n            }\n          }\n        }\n        *temp_buffer = *result;\n        temp_buffer[1] = result[1];\n        temp_buffer[2] = result[2];\n      }\n      else {\n        memmove(new_buffer,buffer);\n      }\n      _free_r(param_ptr,buffer);\n      goto LAB_000820a0;\n    }\n    new_size = new_size + (new_buffer[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  temp = new_size - aligned_size;\n  new_buffer = buffer;\n  if (temp < 0x10) {\n    result[1] = old_size & 1 | new_size;\n    *(uint *)((int)result + new_size + 4) = *(uint *)((int)result + new_size + 4) | 1;\n  }\n  else {\n    result[1] = old_size & 1 | aligned_size;\n    *(uint *)((int)result + aligned_size + 4) = temp | 1;\n    *(uint *)((int)result + temp + aligned_size + 4) = *(uint *)((int)result + temp + aligned_size + 4) | 1;\n    _free_r(param_ptr,(int)result + aligned_size + 8);\n  }\nLAB_000820a0:\n  __malloc_unlock(param_ptr);\n  return new_buffer;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_00081fac",
                "param_1": "param_ptr",
                "param_2": "buffer",
                "param_3": "size",
                "dVar1": "offset",
                "piVar2": "result",
                "uVar3": "temp",
                "iVar4": "temp_var",
                "uVar5": "old_size",
                "iVar6": "temp_var2",
                "piVar7": "temp_buffer",
                "uVar8": "new_size",
                "uVar9": "aligned_size",
                "piVar10": "new_buffer"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "__malloc_unlock",
                "_free_r",
                "_malloc_r",
                "memmove",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "initialize_memory_0008236c",
            "code": "\nvoid initializeMemory_0008236c(int *resultPointer,undefined4 memorySize)\n\n{\n  int memoryAllocationResult;\n  \n  DAT_20071244 = 0;\n  memoryAllocationResult = _sbrk(memorySize);\n  if ((memoryAllocationResult == -1) && (DAT_20071244 != 0)) {\n    *resultPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "initialize_memory_0008236c",
                "param_1": "resultPointer",
                "param_2": "memorySize",
                "iVar1": "memoryAllocationResult"
            },
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_buffers_00082390",
            "code": "\nint compareBuffers_00082390(uint *buffer_1,uint *buffer_2)\n\n{\n  uint *ptr_1;\n  int result;\n  uint *ptr_2;\n  uint *ptr_3;\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  \n  if ((((uint)buffer_1 | (uint)buffer_2) & 7) != 0) {\n    ptr_1 = buffer_1;\n    if (((uint)buffer_1 & 3) != 0) {\n      ptr_1 = (uint *)((uint)buffer_1 & 0xfffffffc) + 1;\n      temp_1 = *(uint *)((uint)buffer_1 & 0xfffffffc);\n      ptr_2 = buffer_2;\n      if (((uint)buffer_1 & 1) == 0) {\nLAB_00082410:\n        ptr_3 = (uint *)((int)ptr_2 + 1);\n        temp_2 = temp_1 >> 0x10 & 0xff;\n        result = temp_2 - *(byte *)ptr_2;\n        if (result != 0) {\n          return result;\n        }\n        if (temp_2 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr_3 = buffer_2;\n        if (((uint)buffer_1 & 2) == 0) {\n          ptr_2 = (uint *)((int)buffer_2 + 1);\n          temp_2 = temp_1 >> 8 & 0xff;\n          result = temp_2 - *(byte *)buffer_2;\n          if (result != 0) {\n            return result;\n          }\n          if (temp_2 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      buffer_2 = (uint *)((int)ptr_3 + 1);\n      result = (temp_1 >> 0x18) - (uint)*(byte *)ptr_3;\n      if ((result != 0) || (temp_1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    temp_1 = (uint)buffer_2 & 3;\n    if (temp_1 != 0) {\n      buffer_2 = (uint *)((uint)buffer_2 & 0xfffffffc);\n      if (temp_1 == 2) {\n        temp_1 = *buffer_2;\n        do {\n          buffer_2 = buffer_2 + 1;\n          temp_3 = *ptr_1;\n          temp_1 = temp_1 >> 0x10;\n          temp_4 = temp_3 + 0xfefefeff & ~temp_3;\n          temp_5 = temp_4 & 0x80808080;\n          temp_2 = temp_3 & 0xffff;\n          if ((temp_4 & 0x8080) != 0 || temp_2 != temp_1) goto LAB_0008258e;\n          temp_1 = *buffer_2;\n          temp_2 = temp_2 ^ temp_3;\n          temp_3 = temp_1 * 0x10000;\n          ptr_1 = ptr_1 + 1;\n        } while (temp_5 == 0 && temp_2 == temp_3);\n      }\n      else if (temp_1 < 2) {\n        temp_1 = *buffer_2;\n        do {\n          buffer_2 = buffer_2 + 1;\n          temp_3 = *ptr_1;\n          temp_1 = temp_1 >> 8;\n          temp_4 = temp_3 + 0xfefefeff & ~temp_3;\n          temp_5 = temp_4 & 0x80808080;\n          temp_2 = temp_3 & 0xffffff;\n          if ((temp_4 & 0x808080) != 0 || temp_2 != temp_1) goto LAB_0008258e;\n          temp_1 = *buffer_2;\n          temp_2 = temp_2 ^ temp_3;\n          temp_3 = temp_1 * 0x1000000;\n          ptr_1 = ptr_1 + 1;\n        } while (temp_5 == 0 && temp_2 == temp_3);\n      }\n      else {\n        temp_1 = *buffer_2;\n        do {\n          buffer_2 = buffer_2 + 1;\n          temp_3 = *ptr_1;\n          temp_1 = temp_1 >> 0x18;\n          temp_4 = temp_3 + 0xfefefeff & ~temp_3;\n          temp_5 = temp_4 & 0x80808080;\n          temp_2 = temp_3 & 0xff;\n          if ((temp_4 & 0x80) != 0 || temp_2 != temp_1) goto LAB_0008258e;\n          temp_1 = *buffer_2;\n          temp_2 = temp_2 ^ temp_3;\n          temp_3 = temp_1 * 0x100;\n          ptr_1 = ptr_1 + 1;\n        } while (temp_5 == 0 && temp_2 == temp_3);\n      }\n      temp_2 = temp_2 << 0x18 | (temp_2 >> 8 & 0xff) << 0x10 | (temp_2 >> 0x10 & 0xff) << 8 |\n              temp_2 >> 0x18;\n      temp_1 = (temp_3 >> 8 & 0xff) << 0x10 | (temp_3 >> 0x10 & 0xff) << 8 | temp_3 >> 0x18;\n      goto LAB_0008259e;\n    }\n    buffer_1 = ptr_1;\n    ptr_2 = buffer_2;\n    if (((uint)ptr_1 & 4) != 0) {\n      buffer_1 = ptr_1 + 1;\n      temp_1 = *ptr_1;\n      ptr_2 = buffer_2 + 1;\n      temp_3 = *buffer_2;\n      temp_5 = temp_1 + 0xfefefeff & ~temp_1 & 0x80808080;\n      if (temp_1 != temp_3 || temp_5 != 0) {\nLAB_0008259a:\n        temp_2 = temp_1 << 0x18 | (temp_1 >> 8 & 0xff) << 0x10 | (temp_1 >> 0x10 & 0xff) << 8 |\n                temp_1 >> 0x18;\n        temp_1 = temp_3 << 0x18 | (temp_3 >> 8 & 0xff) << 0x10 | (temp_3 >> 0x10 & 0xff) << 8 |\n                temp_3 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    buffer_2 = ptr_2;\n    if (((uint)ptr_2 & 4) != 0) {\n      temp_1 = *ptr_2;\n      ptr_1 = ptr_2 + 1;\n      do {\n        temp_2 = *buffer_1;\n        temp_3 = buffer_1[1];\n        temp_5 = temp_2 + 0xfefefeff & ~temp_2 & 0x80808080;\n        if (temp_2 != temp_1 || temp_5 != 0) goto LAB_0008258e;\n        temp_4 = *ptr_1;\n        temp_1 = ptr_1[1];\n        temp_5 = temp_3 + 0xfefefeff & ~temp_3 & 0x80808080;\n        buffer_1 = buffer_1 + 2;\n        ptr_1 = ptr_1 + 2;\n      } while (temp_3 == temp_4 && temp_5 == 0);\n      temp_2 = temp_3 << 0x18 | (temp_3 >> 8 & 0xff) << 0x10 | (temp_3 >> 0x10 & 0xff) << 8 |\n              temp_3 >> 0x18;\n      temp_1 = temp_4 << 0x18 | (temp_4 >> 8 & 0xff) << 0x10 | (temp_4 >> 0x10 & 0xff) << 8 |\n              temp_4 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    temp_1 = *buffer_1;\n    temp_2 = buffer_1[1];\n    temp_3 = *buffer_2;\n    temp_4 = buffer_2[1];\n    temp_5 = temp_1 + 0xfefefeff & ~temp_1 & 0x80808080;\n    if (temp_1 != temp_3 || temp_5 != 0) goto LAB_0008259a;\n    temp_5 = temp_2 + 0xfefefeff & ~temp_2 & 0x80808080;\n    buffer_1 = buffer_1 + 2;\n    buffer_2 = buffer_2 + 2;\n  } while (temp_2 == temp_4 && temp_5 == 0);\n  temp_2 = temp_2 << 0x18 | (temp_2 >> 8 & 0xff) << 0x10 | (temp_2 >> 0x10 & 0xff) << 8 | temp_2 >> 0x18;\n  temp_1 = temp_4 << 0x18 | (temp_4 >> 8 & 0xff) << 0x10 | (temp_4 >> 0x10 & 0xff) << 8 | temp_4 >> 0x18;\nLAB_0008259e:\n  temp_3 = temp_5 << 0x18 | (temp_5 >> 8 & 0xff) << 0x10 | (temp_5 >> 0x10 & 0xff) << 8 | temp_5 >> 0x18;\n  if (temp_3 != 0) {\n    temp_3 = 0x18 - LZCOUNT(temp_3);\n    temp_2 = temp_2 >> (temp_3 & 0xff);\n    temp_1 = temp_1 >> (temp_3 & 0xff);\n  }\n  result = 1;\n  if (temp_2 <= temp_1) {\n    result = -(uint)(temp_2 < temp_1);\n  }\n  return result;\nLAB_0008258e:\n  temp_2 = temp_2 << 0x18 | (temp_2 >> 8 & 0xff) << 0x10 | (temp_2 >> 0x10 & 0xff) << 8 | temp_2 >> 0x18;\n  temp_1 = temp_1 << 0x18 | (temp_1 >> 8 & 0xff) << 0x10 | (temp_1 >> 0x10 & 0xff) << 8 | temp_1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_buffers_00082390",
                "param_1": "buffer_1",
                "param_2": "buffer_2",
                "puVar1": "ptr_1",
                "iVar2": "result",
                "puVar3": "ptr_2",
                "puVar4": "ptr_3",
                "uVar5": "temp_1",
                "uVar6": "temp_2",
                "uVar7": "temp_3",
                "uVar8": "temp_4",
                "uVar9": "temp_5"
            },
            "calling": [
                "equals"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_with_alignment_check_000825cc",
            "code": "\nvoid copyStringWithAlignmentCheck_000825cc(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentCharShort;\n  uint *nextElement;\n  uint *nextSourceElement;\n  uint currentElement;\n  uint tempElement;\n  uint *nextDestinationElement;\n  bool isCharZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextSourceElement = source;\n    if (((uint)source & 1) != 0) {\n      nextSourceElement = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextSourceElement;\n    if (((uint)nextSourceElement & 2) != 0) {\n      source = (uint *)((int)nextSourceElement + 2);\n      currentCharShort = *(ushort *)nextSourceElement;\n      isCharZero = (currentCharShort & 0xff) == 0;\n      if (isCharZero) {\n        *(char *)destination = (char)currentCharShort;\n      }\n      else {\n        *(ushort *)destination = currentCharShort;\n        isCharZero = (currentCharShort & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isCharZero) {\n        return;\n      }\n    }\n  }\n  currentElement = *source;\n  nextSourceElement = source + 1;\n  nextDestinationElement = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentElement + 0xfefefeff & ~currentElement & 0x80808080) != 0) goto LAB_00082630;\n    nextDestinationElement = destination + 1;\n    *destination = currentElement;\n    nextSourceElement = source + 2;\n    currentElement = source[1];\n  }\n  while( true ) {\n    nextElement = nextSourceElement + 1;\n    tempElement = *nextSourceElement;\n    destination = nextDestinationElement;\n    if ((currentElement + 0xfefefeff & ~currentElement & 0x80808080) != 0) break;\n    destination = nextDestinationElement + 1;\n    *nextDestinationElement = currentElement;\n    currentElement = tempElement;\n    if ((tempElement + 0xfefefeff & ~tempElement & 0x80808080) != 0) break;\n    nextSourceElement = nextSourceElement + 2;\n    currentElement = *nextElement;\n    nextDestinationElement = nextDestinationElement + 2;\n    *destination = tempElement;\n  }\nLAB_00082630:\n  do {\n    *(char *)destination = (char)currentElement;\n    tempElement = currentElement & 0xff;\n    currentElement = currentElement >> 8 | currentElement << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (tempElement != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_with_alignment_check_000825cc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentCharShort",
                "puVar3": "nextElement",
                "puVar4": "nextSourceElement",
                "uVar5": "currentElement",
                "uVar6": "tempElement",
                "puVar7": "nextDestinationElement",
                "bVar8": "isCharZero"
            },
            "calling": [
                "move",
                "copy",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zeroes_00082688",
            "code": "\nint countLeadingZeroes_00082688(uint input)\n\n{\n  int leadingZeroes;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeroes = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeroes + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeroes = leadingZeroes + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeroes = leadingZeroes + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeroes = leadingZeroes + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeroes = leadingZeroes + 1;\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zeroes_00082688",
                "param_1": "input",
                "iVar1": "leadingZeroes",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "String",
                "FUN_000810a6",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "write_data_to_file_00082824",
            "code": "\nint writeDataToFile_00082824(undefined4 fileDescriptor,int bufferSize,int **data)\n\n{\n  int *currentData;\n  int result;\n  int *remainingData;\n  uint index;\n  undefined4 *currentElement;\n  uint elementSize;\n  uint numberOfElements;\n  \n  if (-1 < *(int *)(bufferSize + 100) << 0x12) {\n    result = __sfvwrite_r();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  remainingData = data[2];\n  currentData = *data;\n  while (remainingData != (int *)0x0) {\n    elementSize = currentData[1];\n    numberOfElements = elementSize >> 2;\n    if (numberOfElements != 0) {\n      currentElement = (undefined4 *)(*currentData + -4);\n      index = 0;\n      do {\n        currentElement = currentElement + 1;\n        result = _fputwc_r(fileDescriptor,*currentElement,bufferSize);\n        index = index + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (numberOfElements != index);\n      remainingData = data[2];\n    }\n    remainingData = (int *)((int)remainingData - (elementSize & 0xfffffffc));\n    data[2] = remainingData;\n    currentData = currentData + 2;\n  }\n  result = 0;\nLAB_00082864:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "write_data_to_file_00082824",
                "param_1": "fileDescriptor",
                "param_2": "bufferSize",
                "param_3": "data",
                "piVar1": "currentData",
                "iVar2": "result",
                "piVar3": "remainingData",
                "uVar4": "index",
                "puVar5": "currentElement",
                "uVar6": "elementSize",
                "uVar7": "numberOfElements"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "print_formatted_text_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint print_formatted_text_0008289c(int output_buffer,int format_string,int *******format_args,int **format_values)\n\n{\n  bool is_flag_plus;\n  bool is_flag_minus;\n  bool is_flag_hash;\n  char cVar4;\n  bool is_flag_zero;\n  int ********args_array;\n  int *arg_value;\n  int result;\n  char current_char;\n  int *******current_format_arg;\n  uint digit;\n  int **next_format_arg;\n  uint format_flags;\n  uint char_value;\n  int int_value;\n  int ********ptr_temp;\n  int current_arg_index;\n  int *******remaining_format;\n  int *arg_ptr;\n  int *******pppppppiVar20;\n  uint base_value;\n  int *is_negative_ptr;\n  int *******temp_ptr;\n  undefined4 temp_value;\n  int ********ppppppppiVar25;\n  bool is_width_asterisk;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((output_buffer != 0) && (*(int *)(output_buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  format_flags = (uint)*(ushort *)(format_string + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format_string + 0xc) << 0x12)) {\n    format_flags = format_flags | 0x2000;\n    *(short *)(format_string + 0xc) = (short)format_flags;\n    *(uint *)(format_string + 100) = *(uint *)(format_string + 100) & 0xffffdfff;\n  }\n  if (((int)(format_flags << 0x1c) < 0) && (*(int *)(format_string + 0x10) != 0)) {\n    if ((format_flags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    result = __swsetup_r(output_buffer,format_string);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format_string + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(format_string + 0xe)) {\n    result = __sbprintf(output_buffer,format_string,format_args,format_values);\n    return result;\n  }\nLAB_000828ee:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  args_array = (int ********)local_68;\n  local_c8 = format_values;\n  local_9c = (int ********)local_68;\nLAB_00082902:\n  current_format_arg = format_args;\n  if ((*(char *)format_args != '\\0') && (*(char *)format_args != '%')) {\n    do {\n      current_format_arg = (int *******)((int)current_format_arg + 1);\n      if (*(char *)current_format_arg == '\\0') break;\n    } while (*(char *)current_format_arg != '%');\n    pppppppiVar20 = (int *******)((int)current_format_arg - (int)format_args);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *args_array = format_args;\n      args_array[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        args_array = args_array + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          args_array = (int ********)local_68;\n          goto LAB_00082952;\n        }\n        result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n        args_array = (int ********)local_68;\n        if (result != 0) goto LAB_00083142;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)current_format_arg != '\\0') {\n    local_a1 = '\\0';\n    char_value = (uint)*(byte *)((int)current_format_arg + 1);\n    format_flags = 0;\n    is_flag_zero = false;\n    is_flag_minus = false;\n    is_flag_plus = false;\n    is_flag_hash = false;\n    is_width_asterisk = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    format_args = (int *******)((int)current_format_arg + 1);\nLAB_00082976:\n    format_args = (int *******)((int)format_args + 1);\nLAB_0008297a:\n    switch(char_value) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (char_value != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)char_value;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      is_flag_hash = true;\n      char_value = (uint)*(byte *)format_args;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      char_value = (uint)*(byte *)format_args;\n      goto LAB_00082976;\n    case 0x2b:\n      char_value = (uint)*(byte *)format_args;\n      local_a1 = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      format_flags = format_flags | 4;\n      char_value = (uint)*(byte *)format_args;\n      goto LAB_00082976;\n    case 0x2e:\n      char_value = (uint)*(byte *)format_args;\n      current_format_arg = (int *******)((int)format_args + 1);\n      if (char_value == 0x2a) {\n        char_value = (uint)*(byte *)((int)format_args + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        format_args = current_format_arg;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = char_value - 0x30;\n      if (digit < 10) {\n        base_value = 0;\n        do {\n          format_args = (int *******)((int)current_format_arg + 1);\n          char_value = (uint)*(byte *)current_format_arg;\n          base_value = digit + base_value * 10;\n          digit = char_value - 0x30;\n          current_format_arg = format_args;\n        } while (digit < 10);\n        local_d4 = (int *******)(base_value | (int)base_value >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        format_args = current_format_arg;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      format_flags = format_flags | 0x80;\n      char_value = (uint)*(byte *)format_args;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      is_flag_minus = true;\n      if (is_flag_plus == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      arg_ptr = *local_c8;\n      is_negative_ptr = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      is_flag_minus = true;\n      if (is_flag_plus != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      result = (uint)is_flag_minus << 4;\n      int_value = (uint)is_flag_plus << 5;\n      if ((is_flag_minus == 0) && (int_value = (uint)is_width_asterisk << 6, is_width_asterisk != 0)) {\n        arg_ptr = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        is_negative_ptr = (int *)0x0;\n      }\n      else {\n        result = int_value;\n        arg_ptr = *local_c8;\n        local_c8 = local_c8 + 1;\n        is_negative_ptr = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_flag_minus = true;\n      if (is_flag_plus != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((is_flag_minus) || (is_width_asterisk == false)) {\n        result = 1;\n        arg_ptr = *local_c8;\n        local_c8 = local_c8 + 1;\n        is_negative_ptr = (int *)0x0;\n      }\n      else {\n        is_negative_ptr = (int *)0x0;\n        arg_ptr = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (is_flag_plus == false) goto LAB_00082efa;\nLAB_00082d1a:\n      next_format_arg = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = next_format_arg + 2;\n      arg_ptr = *next_format_arg;\n      is_negative_ptr = next_format_arg[1];\n      goto LAB_00082d2e;\n    case 99:\n      arg_ptr = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(arg_ptr,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (is_flag_plus != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((is_flag_minus == false) && (is_width_asterisk != false)) {\n        arg_ptr = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        is_negative_ptr = (int *)((int)arg_ptr >> 0x1f);\n      }\n      else {\n        arg_ptr = *local_c8;\n        local_c8 = local_c8 + 1;\n        is_negative_ptr = (int *)((int)arg_ptr >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)is_negative_ptr < 0) {\n        is_width_asterisk = arg_ptr != (int *)0x0;\n        arg_ptr = (int *)-(int)arg_ptr;\n        is_negative_ptr = (int *)(-(int)is_negative_ptr - (uint)is_width_asterisk);\n        local_a1 = '-';\n        cVar4 = '-';\n        result = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)local_d4) {\n        format_flags = format_flags & 0xffffff7f;\n      }\n      is_flag_zero = false;\n      char_value = (uint)arg_ptr | (uint)is_negative_ptr;\n      result = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082adc;\n    case 0x68:\n      is_width_asterisk = true;\n      char_value = (uint)*(byte *)format_args;\n      goto LAB_00082976;\n    case 0x6c:\n      char_value = (uint)*(byte *)format_args;\n      if (char_value == 0x6c) {\n        is_flag_plus = true;\n        char_value = (uint)*(byte *)((int)format_args + 1);\n        format_args = (int *******)((int)format_args + 1);\n      }\n      else {\n        is_flag_minus = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (is_flag_plus == false) {\n        if (is_flag_minus == false) {\n          if (is_width_asterisk) {\n            arg_ptr = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)arg_ptr = (short)local_c4;\n          }\n          else {\n            arg_ptr = *local_c8;\n            local_c8 = local_c8 + 1;\n            *arg_ptr = local_c4;\n          }\n        }\n        else {\n          arg_ptr = *local_c8;\n          local_c8 = local_c8 + 1;\n          *arg_ptr = local_c4;\n        }\n      }\n      else {\n        arg_ptr = *local_c8;\n        local_c8 = local_c8 + 1;\n        *arg_ptr = local_c4;\n        arg_ptr[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (is_flag_plus == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      next_format_arg = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = next_format_arg + 2;\n      arg_ptr = *next_format_arg;\n      is_negative_ptr = next_format_arg[1];\n      result = 0;\n      break;\n    case 0x70:\n      arg_ptr = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      is_flag_zero = true;\n      is_negative_ptr = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_flag_plus = true;\n      char_value = (uint)*(byte *)format_args;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)strlen(ppppppppiVar25);\n          current_format_arg = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          result = memchr(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (result == 0) {\n            current_format_arg = (int *******)0x0;\n          }\n          else {\n            remaining_format = (int *******)(result - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(result - (int)ppppppppiVar25)) {\n              remaining_format = local_d4;\n            }\n            current_format_arg = (int *******)0x0;\n            local_d4 = remaining_format;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      local_a1 = '\\0';\n      current_format_arg = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!is_flag_plus) goto LAB_00082ce0;\nLAB_00082bc6:\n      next_format_arg = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = next_format_arg + 2;\n      arg_ptr = *next_format_arg;\n      is_negative_ptr = next_format_arg[1];\n      result = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (is_flag_plus != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((is_flag_minus == false) && (is_width_asterisk != false)) {\n        is_negative_ptr = (int *)0x0;\n        arg_ptr = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        arg_ptr = *local_c8;\n        local_c8 = local_c8 + 1;\n        is_negative_ptr = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((is_flag_hash) && (((uint)arg_ptr | (uint)is_negative_ptr) != 0)) {\n        is_flag_zero = true;\n        local_a0 = 0x30;\n        result = 2;\n        local_9f = (char)char_value;\n      }\n      else {\n        result = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082ace:\n    if (-1 < (int)local_d4) {\n      format_flags = format_flags & 0xffffff7f;\n    }\n    char_value = (uint)arg_ptr | (uint)is_negative_ptr;\njoined_r0x00082adc:\n    lVar27 = CONCAT44(is_negative_ptr,arg_ptr);\n    current_format_arg = local_d4;\n    if ((char_value == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((result != 0) || (!is_flag_hash)) goto LAB_00082b04;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082afe;\n    }\n    if (result == 1) {\n      if (is_negative_ptr != (int *)0x0 || (int *)0x9 < arg_ptr) {\n        ptr_temp = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ptr_temp;\n          temp_value = (undefined4)((ulonglong)lVar27 >> 0x20);\n          current_char = '\\n';\n          __aeabi_uldivmod((int)lVar27,temp_value,10,0);\n          *(char *)ppppppppiVar25 = current_char + '0';\n          lVar27 = __aeabi_uldivmod((int)lVar27,temp_value,10,0);\n          ptr_temp = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082b04;\n      }\n      local_69 = (char)arg_ptr + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_00083282;\n    }\n    ptr_temp = (int ********)(&cStack_6a + 1);\n    if (result != 2) goto LAB_000830e2;\n    do {\n      ppppppppiVar25 = ptr_temp;\n      char_value = (uint)arg_ptr & 0xf;\n      arg_ptr = (int *)((uint)arg_ptr >> 4 | (int)is_negative_ptr << 0x1c);\n      is_negative_ptr = (int *)((uint)is_negative_ptr >> 4);\n      *(char *)ppppppppiVar25 = local_c0[char_value];\n      ptr_temp = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)arg_ptr | (uint)is_negative_ptr) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (local_94 != (int *******)0x0) {\n    __sprint_r_part_0(output_buffer,format_string,&local_9c);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(format_string + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_000830e2:\n  do {\n    ppppppppiVar25 = ptr_temp;\n    arg_value = (int *)((uint)arg_ptr >> 3 | (int)is_negative_ptr << 0x1d);\n    is_negative_ptr = (int *)((uint)is_negative_ptr >> 3);\n    result = ((uint)arg_ptr & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)result;\n    ptr_temp = (int ********)((int)ppppppppiVar25 + -1);\n    arg_ptr = arg_value;\n  } while (((uint)arg_value | (uint)is_negative_ptr) != 0);\n  if (is_flag_hash) {\n    if (result == 0x30) {\nLAB_00082afe:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ptr_temp;\n      local_d4 = (int *******)((int)local_68 - (int)ptr_temp);\n    }\n  }\n  else {\nLAB_00083282:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082b04:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)current_format_arg) {\n    local_dc = current_format_arg;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082b1e:\n  if (is_flag_zero) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((format_flags == 0) &&\n     (remaining_format = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)remaining_format)) {\n    if ((int)remaining_format < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        temp_ptr = remaining_format;\n        result = local_98 + 1;\n        local_94 = local_94 + 4;\n        *args_array = (int *******)0x856f0;\n        args_array[1] = (int *******)0x10;\n        if (result < 8) {\n          int_value = local_98 + 2;\n          args_array = args_array + 2;\n          local_98 = result;\n        }\n        else if (local_94 == (int *******)0x0) {\n          int_value = 1;\n          args_array = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = result;\n          result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n          if (result != 0) goto LAB_00083142;\n          int_value = local_98 + 1;\n          args_array = (int ********)local_68;\n        }\n        remaining_format = temp_ptr + -4;\n      } while (0x10 < (int)remaining_format);\n      remaining_format = temp_ptr + -4;\n      local_98 = int_value;\n    }\n    local_94 = (int *******)((int)local_94 + (int)remaining_format);\n    *args_array = (int *******)0x856f0;\n    args_array[1] = remaining_format;\n    if (local_98 < 8) {\n      result = local_98 + 1;\n      args_array = args_array + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      local_98 = 0;\n      args_array = (int ********)local_68;\n    }\n    else {\n      result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      result = local_98 + 1;\n      args_array = (int ********)local_68;\n    }\n  }\n  else {\n    result = local_98 + 1;\n  }\n  int_value = result;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    int_value = 1;\n    *args_array = (int *******)&local_a1;\n    args_array[1] = (int *******)0x1;\n    local_98 = result;\n    if (result < 8) {\n      int_value = result + 1;\n      args_array = args_array + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      args_array = (int ********)local_68;\n    }\n    else {\n      result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      int_value = local_98 + 1;\n      args_array = (int ********)local_68;\n    }\n  }\n  result = int_value;\n  current_arg_index = local_98;\n  if (is_flag_zero) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *args_array = (int *******)&local_a0;\n    args_array[1] = (int *******)0x2;\n    if (int_value < 8) {\n      result = int_value + 1;\n      current_arg_index = int_value;\n      args_array = args_array + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      current_arg_index = 0;\n      args_array = (int ********)local_68;\n    }\n    else {\n      local_98 = int_value;\n      result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      result = local_98 + 1;\n      current_arg_index = local_98;\n      args_array = (int ********)local_68;\n    }\n  }\n  local_98 = current_arg_index;\n  if ((format_flags == 0x80) &&\n     (remaining_format = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)remaining_format)) {\n    if (0x10 < (int)remaining_format) {\n      do {\n        while( true ) {\n          temp_ptr = remaining_format;\n          local_98 = current_arg_index + 1;\n          local_94 = local_94 + 4;\n          *args_array = (int *******)\"0000000000000000\";\n          args_array[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          result = current_arg_index + 2;\n          args_array = args_array + 2;\nLAB_000831f2:\n          current_arg_index = local_98;\n          remaining_format = temp_ptr + -4;\n          if ((int)(temp_ptr + -4) < 0x11) goto LAB_00083218;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n          if (result == 0) {\n            result = local_98 + 1;\n            args_array = (int ********)local_68;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        current_arg_index = 0;\n        remaining_format = temp_ptr + -4;\n        args_array = (int ********)local_68;\n      } while (0x10 < (int)(temp_ptr + -4));\nLAB_00083218:\n      remaining_format = temp_ptr + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)remaining_format);\n    *args_array = (int *******)\"0000000000000000\";\n    args_array[1] = remaining_format;\n    local_98 = result;\n    if (result < 8) {\n      result = result + 1;\n      args_array = args_array + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      result = 1;\n      local_98 = 0;\n      args_array = (int ********)local_68;\n    }\n    else {\n      result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      result = local_98 + 1;\n      args_array = (int ********)local_68;\n    }\n  }\n  current_format_arg = (int *******)((int)current_format_arg - (int)local_d4);\n  ptr_temp = (int ********)local_68;\n  if ((int)current_format_arg < 1) {\nLAB_0008302a:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *args_array = (int *******)ppppppppiVar25;\n    args_array[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = result;\n    if (result < 8) goto LAB_000831be;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    int_value = local_98;\n    if (0x10 < (int)current_format_arg) {\n      do {\n        while( true ) {\n          remaining_format = current_format_arg;\n          local_98 = int_value + 1;\n          local_94 = local_94 + 4;\n          *args_array = (int *******)\"0000000000000000\";\n          args_array[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          result = int_value + 2;\n          args_array = args_array + 2;\nLAB_00082fe6:\n          int_value = local_98;\n          current_format_arg = remaining_format + -4;\n          if ((int)(remaining_format + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n          if (result == 0) {\n            result = local_98 + 1;\n            args_array = (int ********)local_68;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        result = 1;\n        args_array = (int ********)local_68;\n        int_value = 0;\n        current_format_arg = remaining_format + -4;\n      } while (0x10 < (int)(remaining_format + -4));\nLAB_0008300e:\n      current_format_arg = remaining_format + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)current_format_arg);\n    *args_array = (int *******)\"0000000000000000\";\n    args_array[1] = current_format_arg;\n    if (result < 8) {\n      result = result + 1;\n      args_array = args_array + 2;\n      goto LAB_0008302a;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = result;\n      result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n      result = local_98 + 1;\n      args_array = (int ********)local_68;\n      goto LAB_0008302a;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    args_array = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_000831be:\n    ptr_temp = args_array + 2;\n    local_94 = local_d4;\n  }\n  if (((format_flags & 4) != 0) &&\n     (current_format_arg = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)current_format_arg)) {\n    result = local_98;\n    if ((int)current_format_arg < 0x11) {\n      int_value = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = result + 1;\n          local_94 = local_94 + 4;\n          *ptr_temp = (int *******)0x856f0;\n          ptr_temp[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          int_value = result + 2;\n          ptr_temp = ptr_temp + 2;\nLAB_0008307a:\n          current_format_arg = current_format_arg + -4;\n          result = local_98;\n          if ((int)current_format_arg < 0x11) goto LAB_000830a2;\n        }\n        if (local_94 != (int *******)0x0) {\n          result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n          if (result == 0) {\n            int_value = local_98 + 1;\n            ptr_temp = (int ********)local_68;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        current_format_arg = current_format_arg + -4;\n        int_value = 1;\n        result = 0;\n        ptr_temp = (int ********)local_68;\n      } while (0x10 < (int)current_format_arg);\n    }\nLAB_000830a2:\n    local_94 = (int *******)((int)local_94 + (int)current_format_arg);\n    *ptr_temp = (int *******)0x856f0;\n    ptr_temp[1] = current_format_arg;\n    local_98 = int_value;\n    if (7 < int_value) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083186;\n      }\n      result = __sprint_r_part_0(output_buffer,format_string,&local_9c);\n      if (result != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (result = __sprint_r_part_0(output_buffer,format_string,&local_9c), result != 0)) goto LAB_00083142;\nLAB_00083186:\n  local_98 = 0;\n  args_array = (int ********)local_68;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = char_value - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  current_format_arg = format_args;\n  do {\n    format_args = (int *******)((int)current_format_arg + 1);\n    char_value = (uint)*(byte *)current_format_arg;\n    pppppppiVar20 = (int *******)(digit + (int)pppppppiVar20 * 10);\n    digit = char_value - 0x30;\n    current_format_arg = format_args;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  char_value = (uint)*(byte *)format_args;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "print_formatted_text_0008289c",
                "param_1": "output_buffer",
                "param_2": "format_string",
                "param_3": "format_args",
                "param_4": "format_values",
                "bVar1": "is_flag_plus",
                "bVar2": "is_flag_minus",
                "bVar3": "is_flag_hash",
                "bVar5": "is_flag_zero",
                "ppppppppiVar6": "args_array",
                "piVar7": "arg_value",
                "iVar8": "result",
                "cVar9": "current_char",
                "pppppppiVar10": "current_format_arg",
                "uVar11": "digit",
                "ppiVar12": "next_format_arg",
                "uVar13": "format_flags",
                "uVar14": "char_value",
                "iVar15": "int_value",
                "ppppppppiVar16": "ptr_temp",
                "iVar17": "current_arg_index",
                "pppppppiVar18": "remaining_format",
                "piVar19": "arg_ptr",
                "uVar21": "base_value",
                "piVar22": "is_negative_ptr",
                "pppppppiVar23": "temp_ptr",
                "uVar24": "temp_value",
                "bVar26": "is_width_asterisk"
            },
            "calling": [
                "__sbprintf",
                "iprintf",
                "fiprintf"
            ],
            "called": [
                "__aeabi_uldivmod",
                "__sbprintf",
                "strlen",
                "__swsetup_r",
                "__sinit",
                "__sprint_r.part.0",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "print_formatted_string_000834f0",
            "code": "\nint printFormattedString_000834f0(undefined4 outputStream,int data)\n\n{\n  int numPrintedChars;\n  int flushResult;\n  undefined *bufferArray [2];\n  undefined4 bufferSize1;\n  ushort maskedValue;\n  undefined2 valueToWrite;\n  undefined *currentBuffer;\n  undefined4 bufferSize2;\n  undefined4 unused;\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 value3;\n  undefined stackBuffer [1024];\n  \n  value3 = *(undefined4 *)(data + 100);\n  value1 = *(undefined4 *)(data + 0x1c);\n  valueToWrite = *(undefined2 *)(data + 0xe);\n  value2 = *(undefined4 *)(data + 0x24);\n  bufferArray[0] = stackBuffer;\n  maskedValue = *(ushort *)(data + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize2 = 0x400;\n  unused = 0;\n  currentBuffer = bufferArray[0];\n  numPrintedChars = _vfiprintf_r(outputStream,bufferArray);\n  if ((-1 < numPrintedChars) && (flushResult = _fflush_r(outputStream,bufferArray), flushResult != 0)) {\n    numPrintedChars = -1;\n  }\n  if ((int)((uint)maskedValue << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return numPrintedChars;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "print_formatted_string_000834f0",
                "param_1": "outputStream",
                "param_2": "data",
                "iVar1": "numPrintedChars",
                "iVar2": "flushResult",
                "local_488": "bufferArray",
                "local_480": "bufferSize1",
                "local_47c": "maskedValue",
                "local_47a": "valueToWrite",
                "local_478": "currentBuffer",
                "local_474": "bufferSize2",
                "local_470": "unused",
                "local_46c": "value1",
                "local_464": "value2",
                "local_424": "value3",
                "auStack_420": "stackBuffer"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "initialize_buffer_0008356c",
            "code": "\nundefined4 initializeBuffer_0008356c(undefined4 *outputPointer,int *inputPointer)\n\n{\n  int result;\n  int tempVar1;\n  uint tempVar2;\n  ushort tempVar3;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    __sinit();\n  }\n  tempVar3 = *(ushort *)(inputPointer + 3);\n  tempVar2 = (uint)tempVar3;\n  if ((int)(tempVar2 << 0x1c) < 0) {\n    tempVar1 = inputPointer[4];\n  }\n  else {\n    if (-1 < (int)(tempVar2 << 0x1b)) {\n      *outputPointer = 9;\n      *(ushort *)(inputPointer + 3) = tempVar3 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(tempVar2 << 0x1d) < 0) {\n      if ((int *)inputPointer[0xc] != (int *)0x0) {\n        if ((int *)inputPointer[0xc] != inputPointer + 0x10) {\n          _free_r(outputPointer);\n          tempVar3 = *(ushort *)(inputPointer + 3);\n        }\n        inputPointer[0xc] = 0;\n      }\n      tempVar1 = inputPointer[4];\n      tempVar3 = tempVar3 & 0xffdb;\n      *inputPointer = tempVar1;\n      inputPointer[1] = 0;\n    }\n    else {\n      tempVar1 = inputPointer[4];\n    }\n    *(ushort *)(inputPointer + 3) = tempVar3 | 8;\n    tempVar2 = (uint)(tempVar3 | 8);\n  }\n  if ((tempVar1 == 0) && ((tempVar2 & 0x280) != 0x200)) {\n    __smakebuf_r(outputPointer,inputPointer);\n    tempVar2 = (uint)*(ushort *)(inputPointer + 3);\n    tempVar1 = inputPointer[4];\n  }\n  if ((tempVar2 & 1) == 0) {\n    result = 0;\n    if (-1 < (int)(tempVar2 << 0x1e)) {\n      result = inputPointer[5];\n    }\n    inputPointer[2] = result;\n  }\n  else {\n    inputPointer[6] = -inputPointer[5];\n    inputPointer[2] = 0;\n  }\n  if ((tempVar1 == 0) && ((int)((uint)*(ushort *)(inputPointer + 3) << 0x18) < 0)) {\n    *(ushort *)(inputPointer + 3) = *(ushort *)(inputPointer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "initialize_buffer_0008356c",
                "param_1": "outputPointer",
                "param_2": "inputPointer",
                "iVar1": "result",
                "iVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3"
            },
            "calling": [
                "__sfvwrite_r",
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "called": [
                "_free_r",
                "__smakebuf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "perform_initialization_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid performInitialization_000836ec(void)\n\n{\n  dword *arrayPointer;\n  dword exitCode;\n  int currentIndex;\n  code *errorHandler;\n  \n  raise(6);\n  errorHandler = (code *)0x836fb;\n  exitCode = _exit(1);\n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  currentIndex = *(int *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  arrayPointer = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < currentIndex) {\n    arrayPointer = (dword *)malloc(400);\n    if (arrayPointer == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*errorHandler)(0xffffffff);\n      return;\n    }\n    *arrayPointer = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    arrayPointer[1] = 0;\n    currentIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)arrayPointer;\n    arrayPointer[0x62] = 0;\n    arrayPointer[99] = 0;\n  }\n  arrayPointer[1] = currentIndex + 1;\n  arrayPointer[currentIndex + 2] = exitCode;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*errorHandler)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "perform_initialization_000836ec",
                "pdVar1": "arrayPointer",
                "dVar2": "exitCode",
                "iVar3": "currentIndex",
                "UNRECOVERED_JUMPTABLE_00": "errorHandler"
            },
            "calling": [
                "__assert_func"
            ],
            "called": [
                "_exit",
                "raise",
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 processData_00083850(int *inputArray,int *outputArray)\n\n{\n  int *tempPointer;\n  int tempVariable1;\n  ushort tempVariable2;\n  uint tempVariable3;\n  int tempVariable4;\n  code *functionPointer;\n  undefined4 returnCode;\n  int tempVariable5;\n  \n  if ((inputArray != (int *)0x0) && (inputArray[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(outputArray + 3) == 0) {\n    return 0;\n  }\n  tempVariable2 = *(ushort *)(outputArray + 3);\n  if ((int)((uint)tempVariable2 << 0x1c) < 0) {\n    tempVariable5 = outputArray[4];\n    if (tempVariable5 == 0) {\n      return 0;\n    }\n    tempVariable1 = *outputArray;\n    if ((tempVariable2 & 3) == 0) {\n      tempVariable4 = outputArray[5];\n    }\n    else {\n      tempVariable4 = 0;\n    }\n    *outputArray = tempVariable5;\n    tempVariable1 = tempVariable1 - tempVariable5;\n    outputArray[2] = tempVariable4;\n    do {\n      if (tempVariable1 < 1) {\n        return 0;\n      }\n      tempVariable4 = (*(code *)outputArray[9])(inputArray,outputArray[7],tempVariable5,tempVariable1,returnCode);\n      tempVariable1 = tempVariable1 - tempVariable4;\n      tempVariable5 = tempVariable5 + tempVariable4;\n    } while (0 < tempVariable4);\nLAB_000837c8:\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(outputArray + 3) = tempVariable2 | 0x800;\n  if ((outputArray[1] < 1) && (outputArray[0xf] < 1)) {\n    return 0;\n  }\n  functionPointer = (code *)outputArray[10];\n  if (functionPointer == (code *)0x0) {\n    return 0;\n  }\n  tempVariable3 = (uint)(tempVariable2 | 0x800);\n  tempVariable5 = *inputArray;\n  *inputArray = 0;\n  if ((tempVariable2 & 0x1000) == 0) {\n    tempVariable1 = (*functionPointer)(inputArray,outputArray[7],tempVariable3 & 0x1000,1);\n    if ((tempVariable1 == -1) && (tempVariable4 = *inputArray, tempVariable4 != 0)) {\n      if ((tempVariable4 == 0x1d) || (tempVariable4 == 0x16)) {\n        *inputArray = tempVariable5;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    tempVariable3 = (uint)*(ushort *)(outputArray + 3);\n    functionPointer = (code *)outputArray[10];\n  }\n  else {\n    tempVariable1 = outputArray[0x14];\n  }\n  if (((int)(tempVariable3 << 0x1d) < 0) && (tempVariable1 = tempVariable1 - outputArray[1], outputArray[0xc] != 0)) {\n    tempVariable1 = tempVariable1 - outputArray[0xf];\n  }\n  tempVariable1 = (*functionPointer)(inputArray,outputArray[7],tempVariable1,0);\n  if (tempVariable1 == -1) {\n    tempVariable4 = *inputArray;\n    if (tempVariable4 != 0) {\n      if ((tempVariable4 != 0x1d) && (tempVariable4 != 0x16)) {\n        *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xf7ff;\n      *outputArray = outputArray[4];\n      outputArray[1] = 0;\n      goto LAB_00083774;\n    }\n    tempVariable2 = *(ushort *)(outputArray + 3) & 0xf7ff;\n    outputArray[1] = 0;\n    *(ushort *)(outputArray + 3) = tempVariable2;\n    *outputArray = outputArray[4];\n  }\n  else {\n    tempVariable2 = *(ushort *)(outputArray + 3) & 0xf7ff;\n    *outputArray = outputArray[4];\n    *(ushort *)(outputArray + 3) = tempVariable2;\n    outputArray[1] = 0;\n  }\n  if ((int)((uint)tempVariable2 << 0x13) < 0) {\n    outputArray[0x14] = tempVariable1;\n  }\nLAB_00083774:\n  tempPointer = (int *)outputArray[0xc];\n  *inputArray = tempVariable5;\n  if (tempPointer == (int *)0x0) {\n    return 0;\n  }\n  if (tempPointer != outputArray + 0x10) {\n    _free_r(inputArray);\n  }\n  outputArray[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "inputArray",
                "param_2": "outputArray",
                "piVar1": "tempPointer",
                "iVar2": "tempVariable1",
                "uVar3": "tempVariable2",
                "uVar4": "tempVariable3",
                "iVar5": "tempVariable4",
                "pcVar6": "functionPointer",
                "unaff_r4": "returnCode",
                "iVar7": "tempVariable5"
            },
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "fclose",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStruct)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStruct + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStruct + 4);\n    *(undefined **)(dataStruct + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStruct + 0x2e4) = 3;\n    *(int *)(dataStruct + 0x2e8) = dataStruct + 0x2ec;\n    *(undefined4 *)(dataStruct + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStruct + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    memset(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStruct + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    memset(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStruct + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStruct",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "fclose",
                "__swsetup_r",
                "__swbuf_r",
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "convert_to_utf8_000839b4",
            "code": "\nuint convertToUTF8_000839b4(undefined4 locale,uint inputChar,byte **dataBuffer)\n\n{\n  int maxMBLength;\n  uint conversionResult;\n  uint convertedChar;\n  byte *bufferPointer;\n  uint iteration;\n  byte charToConvert;\n  byte additionalBuffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(dataBuffer + 3) << 0x12)) {\n    *(ushort *)(dataBuffer + 3) = *(ushort *)(dataBuffer + 3) | 0x2000;\n    dataBuffer[0x19] = (byte *)((uint)dataBuffer[0x19] | 0x2000);\n  }\n  maxMBLength = __locale_mb_cur_max();\n  if ((maxMBLength == 1) && (inputChar - 1 < 0xff)) {\n    convertedChar = inputChar & 0xff;\n    charToConvert = (byte)convertedChar;\n    conversionResult = 1;\n  }\n  else {\n    conversionResult = _wcrtomb_r(locale,&charToConvert,inputChar,dataBuffer + 0x17);\n    if (conversionResult == 0xffffffff) {\n      *(ushort *)(dataBuffer + 3) = *(ushort *)(dataBuffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (conversionResult == 0) {\n      return inputChar;\n    }\n    convertedChar = (uint)charToConvert;\n  }\n  iteration = 0;\n  do {\n    bufferPointer = dataBuffer[2] + -1;\n    dataBuffer[2] = bufferPointer;\n    if ((int)bufferPointer < 0) {\n      if ((int)dataBuffer[6] <= (int)bufferPointer) {\n        **dataBuffer = (byte)convertedChar;\n        bufferPointer = *dataBuffer;\n        convertedChar = (uint)*bufferPointer;\n        if (convertedChar != 10) goto LAB_00083a04;\n      }\n      maxMBLength = __swbuf_r(locale,convertedChar,dataBuffer);\n      if (maxMBLength == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **dataBuffer = (byte)convertedChar;\n      bufferPointer = *dataBuffer;\nLAB_00083a04:\n      *dataBuffer = bufferPointer + 1;\n    }\n    if (conversionResult <= iteration + 1) {\n      return inputChar;\n    }\n    convertedChar = (uint)additionalBuffer[iteration];\n    iteration = iteration + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "convert_to_utf8_000839b4",
                "param_1": "locale",
                "param_2": "inputChar",
                "param_3": "dataBuffer",
                "iVar1": "maxMBLength",
                "uVar2": "conversionResult",
                "uVar3": "convertedChar",
                "pbVar4": "bufferPointer",
                "uVar5": "iteration",
                "local_1c": "charToConvert",
                "abStack_1b": "additionalBuffer"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "__locale_mb_cur_max",
                "_wcrtomb_r",
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "allocate_memory_and_update_header_00083a74",
            "code": "\nundefined4 allocate_memory_and_update_header_00083a74(undefined4 lock,int size)\n\n{\n  int result;\n  uint header_value;\n  int adjusted_size;\n  \n  __malloc_lock();\n  header_value = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjusted_size = ((header_value - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_size) {\n    result = _sbrk_r(lock,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + header_value) {\n      result = _sbrk_r(lock,-adjusted_size);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - adjusted_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = header_value - adjusted_size | 1;\n        __malloc_unlock(lock);\n        return 1;\n      }\n      adjusted_size = _sbrk_r(lock,0);\n      if (0xf < (int)(adjusted_size - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = adjusted_size - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjusted_size - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  __malloc_unlock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "allocate_memory_and_update_header_00083a74",
                "param_1": "lock",
                "param_2": "size",
                "iVar1": "result",
                "uVar2": "header_value",
                "iVar3": "adjusted_size"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "rearrange_pointers_00083b10",
            "code": "\nvoid rearrangePointers_00083b10(undefined4 param,int size)\n\n{\n  int temp1;\n  bool isPointer;\n  uint flags;\n  dword currentPointer;\n  int temp2;\n  uint alignedSize;\n  dword previousPointer;\n  uint modifiedSize;\n  dword newPointer;\n  \n  if (size == 0) {\n    return;\n  }\n  __malloc_lock();\n  flags = *(uint *)(size + -4);\n  previousPointer = size - 8;\n  alignedSize = flags & 0xfffffffe;\n  currentPointer = previousPointer + alignedSize;\n  modifiedSize = *(uint *)(currentPointer + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentPointer) {\n    modifiedSize = modifiedSize + alignedSize;\n    if (-1 < (int)(flags << 0x1f)) {\n      previousPointer = previousPointer - *(int *)(size + -8);\n      temp2 = *(int *)(previousPointer + 0xc);\n      temp1 = *(int *)(previousPointer + 8);\n      modifiedSize = modifiedSize + *(int *)(size + -8);\n      *(int *)(temp1 + 0xc) = temp2;\n      *(int *)(temp2 + 8) = temp1;\n    }\n    currentPointer = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(previousPointer + 4) = modifiedSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = previousPointer;\n    if (currentPointer <= modifiedSize) {\n      _malloc_trim_r(param,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(currentPointer + 4) = modifiedSize;\n    if ((flags & 1) == 0) {\n      previousPointer = previousPointer - *(int *)(size + -8);\n      temp1 = *(int *)(previousPointer + 8);\n      alignedSize = alignedSize + *(int *)(size + -8);\n      if (temp1 == 0x2007046c) {\n        isPointer = true;\n      }\n      else {\n        temp2 = *(int *)(previousPointer + 0xc);\n        *(int *)(temp1 + 0xc) = temp2;\n        *(int *)(temp2 + 8) = temp1;\n        isPointer = false;\n      }\n    }\n    else {\n      isPointer = false;\n    }\n    if (-1 < *(int *)(currentPointer + modifiedSize + 4) << 0x1f) {\n      alignedSize = alignedSize + modifiedSize;\n      temp1 = *(int *)(currentPointer + 8);\n      if ((!isPointer) && (temp1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = previousPointer;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = previousPointer;\n        *(undefined4 *)(previousPointer + 0xc) = 0x2007046c;\n        *(undefined4 *)(previousPointer + 8) = 0x2007046c;\n        *(uint *)(previousPointer + 4) = alignedSize | 1;\n        *(uint *)(previousPointer + alignedSize) = alignedSize;\n        goto LAB_00083ba4;\n      }\n      temp2 = *(int *)(currentPointer + 0xc);\n      *(int *)(temp1 + 0xc) = temp2;\n      *(int *)(temp2 + 8) = temp1;\n    }\n    *(uint *)(previousPointer + 4) = alignedSize | 1;\n    *(uint *)(previousPointer + alignedSize) = alignedSize;\n    if (!isPointer) {\n      if (alignedSize < 0x200) {\n        flags = alignedSize & 0xfffffff8;\n        temp1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(alignedSize >> 3) >> 2 & 0xffU);\n        *(int *)(previousPointer + 8) = temp1;\n        *(uint *)(previousPointer + 0xc) = flags + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flags) = previousPointer;\n        *(dword *)(temp1 + 0xc) = previousPointer;\n        __malloc_unlock(param);\n        return;\n      }\n      flags = alignedSize >> 9;\n      if (flags < 5) {\n        temp1 = (alignedSize >> 6) + 0x38;\n        temp2 = temp1 * 2;\n      }\n      else if (flags < 0x15) {\n        temp1 = flags + 0x5b;\n        temp2 = temp1 * 2;\n      }\n      else if (flags < 0x55) {\n        temp1 = (alignedSize >> 0xc) + 0x6e;\n        temp2 = temp1 * 2;\n      }\n      else if (flags < 0x155) {\n        temp1 = (alignedSize >> 0xf) + 0x77;\n        temp2 = temp1 * 2;\n      }\n      else if (flags < 0x555) {\n        temp1 = (alignedSize >> 0x12) + 0x7c;\n        temp2 = temp1 * 2;\n      }\n      else {\n        temp2 = 0xfc;\n        temp1 = 0x7e;\n      }\n      newPointer = temp2 * 4 + 0x20070464;\n      currentPointer = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp2];\n      if (currentPointer == newPointer) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp1 >> 2 & 0xffU);\n        newPointer = currentPointer;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentPointer + 4) & 0xfffffffc) <= alignedSize) break;\n          currentPointer = *(dword *)(currentPointer + 8);\n        } while (newPointer != currentPointer);\n        newPointer = *(dword *)(currentPointer + 0xc);\n      }\n      *(dword *)(previousPointer + 0xc) = newPointer;\n      *(dword *)(previousPointer + 8) = currentPointer;\n      *(dword *)(newPointer + 8) = previousPointer;\n      *(dword *)(currentPointer + 0xc) = previousPointer;\n    }\n  }\nLAB_00083ba4:\n  __malloc_unlock(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "rearrange_pointers_00083b10",
                "param_1": "param",
                "param_2": "size",
                "iVar1": "temp1",
                "bVar2": "isPointer",
                "uVar3": "flags",
                "dVar4": "currentPointer",
                "iVar5": "temp2",
                "uVar6": "alignedSize",
                "dVar7": "previousPointer",
                "uVar8": "modifiedSize",
                "dVar9": "newPointer"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r",
                "fclose",
                "__swsetup_r",
                "_malloc_r",
                "free",
                "_fflush_r"
            ],
            "called": [
                "__malloc_unlock",
                "_malloc_trim_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "process_data_00083ca8",
            "code": "\nundefined4 processData_00083ca8(undefined4 *errorCode,uint *inputData,uint **buffer)\n\n{\n  int result;\n  uint temp1;\n  uint temp2;\n  ushort flag1;\n  uint flag2;\n  uint *ptr1;\n  uint *ptr2;\n  uint length;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  \n  if (buffer[2] != (uint *)0x0) {\n    flag1 = *(ushort *)(inputData + 3);\n    flag2 = (uint)flag1;\n    if (((int)(flag2 << 0x1c) < 0) && (inputData[4] != 0)) {\n      ptr2 = *buffer;\n    }\n    else {\n      result = __swsetup_r(errorCode,inputData);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag1 = *(ushort *)(inputData + 3);\n      flag2 = (uint)flag1;\n      ptr2 = *buffer;\n    }\n    if ((flag1 & 2) == 0) {\n      temp1 = flag2 & 2;\n      temp4 = temp1;\n      length = temp1;\n      temp6 = temp1;\n      if ((flag2 & 1) == 0) {\n        temp1 = 0;\n        temp4 = 0;\n        while( true ) {\n          while (temp1 == 0) {\n            temp4 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp1 = *ptr1;\n          }\n          length = inputData[2];\n          if ((int)(flag2 << 0x16) < 0) {\n            if (temp1 < length) {\n              flag2 = *inputData;\n              length = temp1;\n            }\n            else if ((flag2 & 0x480) == 0) {\n              flag2 = *inputData;\n            }\n            else {\n              result = *inputData - inputData[4];\n              length = result + 1 + temp1;\n              temp3 = (int)(inputData[5] * 3) / 2;\n              if (length <= temp3) {\n                length = temp3;\n              }\n              if ((int)(flag2 << 0x15) < 0) {\n                temp3 = _malloc_r(errorCode,length);\n                if (temp3 == 0) {\n                  *errorCode = 0xc;\n                  flag1 = *(ushort *)(inputData + 3);\n                  goto LAB_00083da4;\n                }\n                memcpy(temp3,inputData[4],result);\n                *(ushort *)(inputData + 3) = *(ushort *)(inputData + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp3 = _realloc_r(errorCode);\n                if (temp3 == 0) {\n                  _free_r(errorCode,inputData[4]);\n                  flag1 = *(ushort *)(inputData + 3) & 0xff7f;\n                  *errorCode = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              flag2 = temp3 + result;\n              inputData[4] = temp3;\n              inputData[5] = length;\n              *inputData = flag2;\n              inputData[2] = length - result;\n              length = temp1;\n            }\n            memmove(flag2,temp4,length);\n            inputData[2] = inputData[2] - length;\n            *inputData = *inputData + length;\n            length = temp1;\n          }\n          else if ((inputData[4] < *inputData) || (flag2 = inputData[5], temp1 < flag2)) {\n            if (temp1 < length) {\n              length = temp1;\n            }\n            memmove(*inputData,temp4,length);\n            flag2 = inputData[2];\n            inputData[2] = flag2 - length;\n            *inputData = *inputData + length;\n            if ((flag2 - length == 0) && (result = _fflush_r(errorCode,inputData), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            length = 0x7fffffff;\n            if (temp1 < 0x7fffffff) {\n              length = temp1;\n            }\n            length = (*(code *)inputData[9])(errorCode,inputData[7],temp4,(length / flag2) * flag2);\n            if ((int)length < 1) goto LAB_00083da2;\n          }\n          ptr1 = buffer[2];\n          temp4 = temp4 + length;\n          temp1 = temp1 - length;\n          buffer[2] = (uint *)((int)ptr1 - length);\n          if ((uint *)((int)ptr1 - length) == (uint *)0x0) break;\n          flag2 = (uint)*(ushort *)(inputData + 3);\n        }\n      }\n      else {\n        do {\n          while (temp1 == 0) {\n            length = *ptr2;\n            temp1 = ptr2[1];\n            temp6 = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (temp6 == 0) {\n            result = memchr(length,10,temp1);\n            if (result == 0) {\n              temp4 = temp1 + 1;\n              temp6 = 1;\n            }\n            else {\n              temp4 = (result + 1) - length;\n              temp6 = 1;\n            }\n          }\n          temp3 = *inputData;\n          flag2 = temp4;\n          if (temp1 <= temp4) {\n            flag2 = temp1;\n          }\n          temp2 = inputData[5];\n          if ((inputData[4] < temp3) && (temp5 = inputData[2] + temp2, (int)temp5 < (int)flag2)) {\n            memmove(temp3,length,temp5);\n            *inputData = *inputData + temp5;\n            result = _fflush_r(errorCode,inputData);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)flag2 < (int)temp2) {\n            memmove(temp3,length,flag2);\n            inputData[2] = inputData[2] - flag2;\n            *inputData = flag2 + *inputData;\n            temp5 = flag2;\n          }\n          else {\n            temp5 = (*(code *)inputData[9])(errorCode,inputData[7],length,temp2);\n            if ((int)temp5 < 1) goto LAB_00083da2;\n          }\n          temp4 = temp4 - temp5;\n          if (temp4 == 0) {\n            result = _fflush_r(errorCode,inputData);\n            if (result != 0) goto LAB_00083da2;\n            temp6 = 0;\n          }\n          ptr1 = buffer[2];\n          length = length + temp5;\n          temp1 = temp1 - temp5;\n          buffer[2] = (uint *)((int)ptr1 - temp5);\n        } while ((uint *)((int)ptr1 - temp5) != (uint *)0x0);\n      }\n    }\n    else {\n      temp1 = 0;\n      flag2 = 0;\n      do {\n        while( true ) {\n          temp4 = flag2;\n          if (0x7ffffbff < flag2) {\n            temp4 = 0x7ffffc00;\n          }\n          if (flag2 != 0) break;\n          temp1 = *ptr2;\n          flag2 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)inputData[9])(errorCode,inputData[7],temp1,temp4);\n        if (result < 1) {\nLAB_00083da2:\n          flag1 = *(ushort *)(inputData + 3);\nLAB_00083da4:\n          *(ushort *)(inputData + 3) = flag1 | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = buffer[2];\n        temp1 = temp1 + result;\n        flag2 = flag2 - result;\n        buffer[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "process_data_00083ca8",
                "param_1": "errorCode",
                "param_2": "inputData",
                "param_3": "buffer",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "flag1",
                "uVar5": "flag2",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "length",
                "uVar9": "temp3",
                "uVar10": "temp4",
                "uVar11": "temp5",
                "local_2c": "temp6"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memcpy",
                "_realloc_r",
                "_free_r",
                "__swsetup_r",
                "_malloc_r",
                "_fflush_r",
                "memchr",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_memory_address_00084004",
            "code": "\nundefined4 getMemoryAddress_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_memory_address_00084004"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_elf_relocation_offset_0008400c",
            "code": "\ndword getElfRelocationOffset_0008400c(void)\n\n{\n  return elfRelocationArray[275].relocationOffset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_elf_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "elfRelocationArray",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "process_file_access_00084018",
            "code": "\nvoid processFileAccess_00084018(int fileDescriptor,int *fileInfo)\n\n{\n  ushort filePermissions;\n  int status;\n  int allocationSize;\n  uint fileAttributes;\n  bool isRegularFile;\n  undefined statBuffer [4];\n  uint fileMode;\n  \n  filePermissions = *(ushort *)(fileInfo + 3);\n  fileAttributes = (uint)filePermissions;\n  if ((int)(fileAttributes << 0x1e) < 0) {\n    *fileInfo = (int)fileInfo + 0x43;\n    fileInfo[4] = (int)fileInfo + 0x43;\n    fileInfo[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileInfo + 0xe)) {\n    status = _fstat_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe),statBuffer);\n    if (-1 < status) {\n      isRegularFile = (fileMode & 0xf000) == 0x2000;\n      if (((fileMode & 0xf000) == 0x8000) && (fileInfo[10] == 0x8427d)) {\n        status = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x400;\n        fileInfo[0x13] = 0x400;\n      }\n      else {\n        status = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    filePermissions = *(ushort *)(fileInfo + 3);\n    fileAttributes = (uint)filePermissions;\n  }\n  *(ushort *)(fileInfo + 3) = filePermissions | 0x800;\n  if ((fileAttributes & 0x80) == 0) {\n    status = 0x400;\n  }\n  else {\n    status = 0x40;\n  }\n  isRegularFile = false;\nLAB_00084074:\n  allocationSize = _malloc_r(fileDescriptor,status);\n  filePermissions = *(ushort *)(fileInfo + 3);\n  if (allocationSize == 0) {\n    if (-1 < (int)((uint)filePermissions << 0x16)) {\n      *(ushort *)(fileInfo + 3) = filePermissions | 2;\n      *fileInfo = (int)fileInfo + 0x43;\n      fileInfo[4] = (int)fileInfo + 0x43;\n      fileInfo[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(fileDescriptor + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(fileInfo + 3) = filePermissions | 0x80;\n    *fileInfo = allocationSize;\n    fileInfo[4] = allocationSize;\n    fileInfo[5] = status;\n    if ((isRegularFile) && (status = _isatty_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe)), status != 0)) {\n      *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "process_file_access_00084018",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "uVar1": "filePermissions",
                "iVar2": "status",
                "iVar3": "allocationSize",
                "uVar4": "fileAttributes",
                "bVar5": "isRegularFile",
                "auStack_54": "statBuffer",
                "local_50": "fileMode"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_char_in_array_000840f8",
            "code": "\nuint * find_char_in_array_000840f8(uint *array,char target_char,uint array_length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_element;\n  bool is_last_iteration;\n  \n  if (((uint)array & 3) == 0) {\nLAB_00084128:\n    if (3 < array_length) {\n      current_element = array;\n      do {\n        xor_result = *current_element ^ CONCAT22(CONCAT11(target_char,target_char),CONCAT11(target_char,target_char));\n        array = current_element;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        array = current_element + 1;\n        current_element = current_element + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target_char) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_iteration = index == array_length - 1;\n        index = index + 1;\n        if (is_last_iteration) goto LAB_00084150;\n      } while (*(char *)array != target_char);\n    }\n  }\n  else if (array_length == 0) {\nLAB_00084150:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target_char) {\n    current_element = (uint *)((int)array + 1);\n    array_length = array_length - 1;\n    do {\n      array = current_element;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (array_length == 0) goto LAB_00084150;\n      current_element = (uint *)((int)array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)array != target_char);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_char_in_array_000840f8",
                "param_1": "array",
                "param_2": "target_char",
                "param_3": "array_length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_element",
                "bVar4": "is_last_iteration"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "validate_and_execute_action_000841e4",
            "code": "\nint validate_and_execute_action_000841e4(uint action_code)\n\n{\n  dword r_offset;\n  undefined4 process_id;\n  int function_ptr_array;\n  code *function_ptr;\n  undefined4 unused_register_4;\n  undefined4 unused_register_5;\n  undefined4 link_register;\n  undefined4 constant_value;\n  \n  r_offset = elf_relocation_array[140].r_offset;\n  constant_value = 0x20070460;\n  if (0x1f < action_code) {\n    *(undefined4 *)elf_relocation_array[140].r_offset = 0x16;\n    return -1;\n  }\n  function_ptr_array = *(int *)(elf_relocation_array[140].r_offset + 0x2dc);\n  if ((function_ptr_array == 0) || (function_ptr = *(code **)(function_ptr_array + action_code * 4), function_ptr == (code *)0x0)) {\n    process_id = _getpid_r(elf_relocation_array[140].r_offset);\n    DAT_20071244 = 0;\n    function_ptr_array = _kill(process_id,action_code,action_code,0,constant_value,unused_register_4,unused_register_5,link_register);\n    if ((function_ptr_array == -1) && (DAT_20071244 != 0)) {\n      *(int *)r_offset = DAT_20071244;\n      return -1;\n    }\n    return function_ptr_array;\n  }\n  if (function_ptr == (code *)0x1) {\n    return 0;\n  }\n  if (function_ptr != (code *)0xffffffff) {\n    *(undefined4 *)(function_ptr_array + action_code * 4) = 0;\n    (*function_ptr)(action_code);\n    return 0;\n  }\n  *(undefined4 *)elf_relocation_array[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "validate_and_execute_action_000841e4",
                "param_1": "action_code",
                "dVar1": "r_offset",
                "uVar2": "process_id",
                "iVar3": "function_ptr_array",
                "pcVar4": "function_ptr",
                "unaff_r4": "unused_register_4",
                "unaff_r5": "unused_register_5",
                "in_lr": "link_register",
                "uVar5": "constant_value",
                "Elf32_Rel_ARRAY_20070000": "elf_relocation_array"
            },
            "calling": [
                "abort"
            ],
            "called": [
                "_getpid_r",
                "_kill"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008421c": {
            "entrypoint": "0x0008421c",
            "current_name": "FUN_0008421c",
            "code": "\nundefined4 _getpid(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {},
            "calling": [
                "raise"
            ],
            "called": [
                "_getpid"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_file_offset_00084220",
            "code": "\nvoid updateFileOffset_00084220(undefined4 filePointer,int dataPointer)\n\n{\n  int readResult;\n  \n  readResult = _read_r(filePointer,(int)*(short *)(dataPointer + 0xe));\n  if (-1 < readResult) {\n    *(int *)(dataPointer + 0x50) = *(int *)(dataPointer + 0x50) + readResult;\n    return;\n  }\n  *(ushort *)(dataPointer + 0xc) = *(ushort *)(dataPointer + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_file_offset_00084220",
                "param_1": "filePointer",
                "param_2": "dataPointer",
                "iVar1": "readResult"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *fileDescriptor,int dataPointer,undefined4 buffer,undefined4 count)\n\n{\n  int result;\n  ushort flag;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  flag = *(ushort *)(dataPointer + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(dataPointer + 0xe),0,2);\n    flag = *(ushort *)(dataPointer + 0xc);\n  }\n  *(ushort *)(dataPointer + 0xc) = flag & 0xefff;\n  DAT_20071244 = 0;\n  result = _write((int)*(short *)(dataPointer + 0xe),buffer,count,count,unused1,unused2,unused3,\n                 unused4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *fileDescriptor = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "fileDescriptor",
                "param_2": "dataPointer",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "result",
                "uVar2": "flag",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_file_seek_position_0008427c",
            "code": "\nvoid updateFileSeekPosition_0008427c(undefined4 fileDescriptor,int structAddress)\n\n{\n  int seekResult;\n  ushort flag;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(structAddress + 0xe));\n  if (seekResult == -1) {\n    flag = *(ushort *)(structAddress + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(structAddress + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(structAddress + 0x50) = seekResult;\n  }\n  *(ushort *)(structAddress + 0xc) = flag;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_file_seek_position_0008427c",
                "param_1": "fileDescriptor",
                "param_2": "structAddress",
                "iVar1": "seekResult",
                "uVar2": "flag"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_input_data_000842a4",
            "code": "\nuint processInputData_000842a4(int input,uint character,undefined4 *dataBuffer,undefined4 flag)\n\n{\n  ushort tmpVar1;\n  uint tmpVar2;\n  undefined *dataPtr;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    __sinit();\n  }\n  tmpVar1 = *(ushort *)(dataBuffer + 3);\n  tmpVar2 = (uint)tmpVar1;\n  dataBuffer[2] = dataBuffer[6];\n  if ((-1 < (int)(tmpVar2 << 0x1c)) || (index = dataBuffer[4], index == 0)) {\n    index = __swsetup_r(input,dataBuffer,tmpVar1,tmpVar2,flag);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    tmpVar1 = *(ushort *)(dataBuffer + 3);\n    index = dataBuffer[4];\n    tmpVar2 = (uint)tmpVar1;\n  }\n  character = character & 0xff;\n  if ((int)(tmpVar2 << 0x12) < 0) {\n    dataPtr = (undefined *)*dataBuffer;\n    index = (int)dataPtr - index;\n    if (index < (int)dataBuffer[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    dataBuffer[0x19] = dataBuffer[0x19] & 0xffffdfff;\n    dataPtr = (undefined *)*dataBuffer;\n    *(ushort *)(dataBuffer + 3) = tmpVar1 | 0x2000;\n    index = (int)dataPtr - index;\n    if (index < (int)dataBuffer[5]) goto LAB_000842d6;\n  }\n  index = _fflush_r(input,dataBuffer);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  dataPtr = (undefined *)*dataBuffer;\n  index = 1;\nLAB_000842d8:\n  dataBuffer[2] = dataBuffer[2] + -1;\n  *dataBuffer = dataPtr + 1;\n  *dataPtr = (char)character;\n  if (((dataBuffer[5] == index) ||\n      (((int)((uint)*(ushort *)(dataBuffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (index = _fflush_r(input,dataBuffer), index != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_input_data_000842a4",
                "param_1": "input",
                "param_2": "character",
                "param_3": "dataBuffer",
                "param_4": "flag",
                "uVar1": "tmpVar1",
                "uVar2": "tmpVar2",
                "puVar3": "dataPtr",
                "iVar4": "index"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__swsetup_r",
                "__sinit",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "process_data_0008434c",
            "code": "\nvoid processData_0008434c(undefined4 *output,int size,undefined4 value,undefined4 *status)\n\n{\n  dword rInfo;\n  undefined4 charset;\n  int result;\n  undefined buffer [12];\n  \n  rInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    charset = __locale_charset();\n    result = (*(code *)rInfo)(output,buffer,0,charset,status);\n  }\n  else {\n    charset = __locale_charset();\n    result = (*(code *)rInfo)(output,size,value,charset,status);\n  }\n  if (result == -1) {\n    *status = 0;\n    *output = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "process_data_0008434c",
                "param_1": "output",
                "param_2": "size",
                "param_3": "value",
                "param_4": "status",
                "dVar1": "rInfo",
                "uVar2": "charset",
                "iVar3": "result",
                "auStack_24": "buffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__locale_charset",
                "__ascii_wctomb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "write_byte_to_memory_0008439c",
            "code": "\nundefined4 write_byte_to_memory_0008439c(undefined4 *output_ptr,undefined *input_ptr,uint value)\n\n{\n  if (input_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *input_ptr = (char)value;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "write_byte_to_memory_0008439c",
                "param_1": "output_ptr",
                "param_2": "input_ptr",
                "param_3": "value"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "flush_and_cleanup_00084484",
            "code": "\nundefined4 flushAndCleanup_00084484(int dataPtr)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (dataPtr != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(dataPtr + 0xc) != 0) {\n      result = _fflush_r(offset,dataPtr);\n      if ((*(code **)(dataPtr + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(dataPtr + 0x2c))(offset,*(undefined4 *)(dataPtr + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(dataPtr + 0xc) << 0x18) < 0) {\n        _free_r(offset,*(undefined4 *)(dataPtr + 0x10));\n      }\n      if (*(int *)(dataPtr + 0x30) != 0) {\n        if (*(int *)(dataPtr + 0x30) != dataPtr + 0x40) {\n          _free_r(offset);\n        }\n        *(undefined4 *)(dataPtr + 0x30) = 0;\n      }\n      if (*(int *)(dataPtr + 0x44) != 0) {\n        _free_r(offset);\n        *(undefined4 *)(dataPtr + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(dataPtr + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "flush_and_cleanup_00084484",
                "param_1": "dataPtr",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "_free_r",
                "__sinit",
                "__sfp_lock_release",
                "__sfp_lock_acquire",
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "update_file_status_00084494",
            "code": "\nvoid update_file_status_00084494(int *file_status,undefined4 file_descriptor,undefined4 buf,undefined4 mode)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = _fstat(file_descriptor,buf,buf,0,mode);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *file_status = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "update_file_status_00084494",
                "param_1": "file_status",
                "param_2": "file_descriptor",
                "param_3": "buf",
                "param_4": "mode",
                "iVar1": "result"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_is_terminal_000844bc",
            "code": "\nvoid checkIsTerminal_000844bc(int *result,undefined4 fileDescriptor)\n\n{\n  int isTerminal;\n  \n  DAT_20071244 = 0;\n  isTerminal = _isatty(fileDescriptor);\n  if ((isTerminal == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_is_terminal_000844bc",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "iVar1": "isTerminal"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "seek_and_set_value_000844e0",
            "code": "\nvoid seekAndSetValue_000844e0(int *result,undefined4 fileDescriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seekResult;\n  \n  DAT_20071244 = 0;\n  seekResult = _lseek(fileDescriptor,offset,whence);\n  if ((seekResult == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "seek_and_set_value_000844e0",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "whence",
                "iVar1": "seekResult"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "read_and_save_if_error_00084508",
            "code": "\nvoid readAndSaveIfError_00084508(int *errorPointer,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_20071244 = 0;\n  readResult = _read(fileDescriptor,buffer,count);\n  if ((readResult == -1) && (DAT_20071244 != 0)) {\n    *errorPointer = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "read_and_save_if_error_00084508",
                "param_1": "errorPointer",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "calculate_result_00084530",
            "code": "\nint calculate_result_00084530(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "calculate_result_00084530",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "calculate_difference_0008455c",
            "code": "\nvoid calculate_difference_0008455c(uint input_value,int subtract_value,undefined4 first_multiplier,undefined4 second_multiplier,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = __divdi3();\n  product = product * CONCAT44(second_multiplier,first_multiplier);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (subtract_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "calculate_difference_0008455c",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_3": "first_multiplier",
                "param_4": "second_multiplier",
                "param_5": "result_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "calculate_difference_0008458c",
            "code": "\nvoid calculate_difference_0008458c(uint value1,int value2,undefined4 factor_low,undefined4 factor_high,int *result_array)\n\n{\n  uint result_value;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(factor_high,factor_low);\n  result_value = (uint)product;\n  *result_array = value1 - result_value;\n  result_array[1] = (value2 - (int)((ulonglong)product >> 0x20)) - (uint)(value1 < result_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "factor_low",
                "param_4": "factor_high",
                "param_5": "result_array",
                "uVar1": "result_value",
                "lVar2": "product"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "divide_unsigned_000845c0",
            "code": "\nundefined8 divide_unsigned_000845c0(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong multiplication_result;\n  uint current_quotient;\n  uint next_quotient;\n  uint dividend_high;\n  uint multiplication_result_high;\n  int shift_amount;\n  uint dividend_low;\n  uint dividend_high_temp;\n  uint is_dividend_negative;\n  uint current_divisor;\n  uint next_divisor;\n  uint divisor_high;\n  bool bVar13;\n  \n  if ((int)divisor < 0) {\n    bVar13 = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)bVar13;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)remainder < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    bVar13 = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)bVar13;\n  }\n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shift_amount = LZCOUNT(quotient);\n      if (shift_amount != 0) {\n        next_quotient = dividend >> (0x20U - shift_amount & 0xff);\n        quotient = quotient << shift_amount;\n        dividend = dividend << shift_amount;\n        divisor = divisor << shift_amount | next_quotient;\n      }\n      current_quotient = quotient >> 0x10;\n      dividend_high = divisor / current_quotient;\n      dividend_low = (quotient & 0xffff) * dividend_high;\n      current_divisor = dividend >> 0x10 | (divisor - current_quotient * dividend_high) * 0x10000;\n      next_quotient = dividend_high;\n      if (current_divisor <= dividend_low && dividend_low - current_divisor != 0) {\n        bVar13 = CARRY4(current_divisor,quotient);\n        current_divisor = current_divisor + quotient;\n        next_quotient = dividend_high - 1;\n        if ((bVar13 == false) && (current_divisor <= dividend_low && dividend_low - current_divisor != 0)) {\n          next_quotient = dividend_high - 2;\n          current_divisor = current_divisor + quotient;\n        }\n      }\n      dividend_high_temp = (current_divisor - dividend_low) / current_quotient;\n      dividend_high = (quotient & 0xffff) * dividend_high_temp;\n      dividend_low = dividend & 0xffff | ((current_divisor - dividend_low) - current_quotient * dividend_high_temp) * 0x10000;\n      current_quotient = dividend_high_temp;\n      if (dividend_low <= dividend_high && dividend_high - dividend_low != 0) {\n        current_quotient = dividend_high_temp - 1;\n        if ((CARRY4(dividend_low,quotient) == false) &&\n           (dividend_low + quotient <= dividend_high && dividend_high - (dividend_low + quotient) != 0)) {\n          current_quotient = dividend_high_temp - 2;\n        }\n      }\n      current_quotient = current_quotient | next_quotient << 0x10;\n      next_quotient = 0;\n    }\n    else {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_amount = LZCOUNT(quotient);\n      if (shift_amount == 0) {\n        divisor = divisor - quotient;\n        dividend_high = quotient >> 0x10;\n        divisor_high = quotient & 0xffff;\n        next_quotient = 1;\n      }\n      else {\n        quotient = quotient << shift_amount;\n        next_quotient = divisor >> (0x20U - shift_amount & 0xff);\n        dividend_high = quotient >> 0x10;\n        current_divisor = next_quotient / dividend_high;\n        divisor_high = quotient & 0xffff;\n        dividend_low = divisor_high * current_divisor;\n        dividend_high_temp = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        next_quotient = dividend_high_temp >> 0x10 | (next_quotient - dividend_high * current_divisor) * 0x10000;\n        dividend = dividend << shift_amount;\n        current_quotient = current_divisor;\n        if (next_quotient <= dividend_low && dividend_low - next_quotient != 0) {\n          bVar13 = CARRY4(next_quotient,quotient);\n          next_quotient = next_quotient + quotient;\n          current_quotient = current_divisor - 1;\n          if ((bVar13 == false) && (next_quotient <= dividend_low && dividend_low - next_quotient != 0)) {\n            current_quotient = current_divisor - 2;\n            next_quotient = next_quotient + quotient;\n          }\n        }\n        multiplication_result_high = (next_quotient - dividend_low) / dividend_high;\n        current_divisor = divisor_high * multiplication_result_high;\n        divisor = dividend_high_temp & 0xffff | ((next_quotient - dividend_low) - dividend_high * multiplication_result_high) * 0x10000;\n        next_quotient = multiplication_result_high;\n        if (divisor <= current_divisor && current_divisor - divisor != 0) {\n          bVar13 = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          next_quotient = multiplication_result_high - 1;\n          if ((bVar13 == false) && (divisor <= current_divisor && current_divisor - divisor != 0)) {\n            next_quotient = multiplication_result_high - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - current_divisor;\n        next_quotient = next_quotient | current_quotient << 0x10;\n      }\n      current_quotient = divisor / dividend_high;\n      current_divisor = divisor_high * current_quotient;\n      dividend_high_temp = dividend >> 0x10 | (divisor - dividend_high * current_quotient) * 0x10000;\n      dividend_low = current_quotient;\n      if (dividend_high_temp <= current_divisor && current_divisor - dividend_high_temp != 0) {\n        bVar13 = CARRY4(dividend_high_temp,quotient);\n        dividend_high_temp = dividend_high_temp + quotient;\n        dividend_low = current_quotient - 1;\n        if ((bVar13 == false) && (dividend_high_temp <= current_divisor && current_divisor - dividend_high_temp != 0)) {\n          dividend_low = current_quotient - 2;\n          dividend_high_temp = dividend_high_temp + quotient;\n        }\n      }\n      multiplication_result_high = (dividend_high_temp - current_divisor) / dividend_high;\n      divisor_high = divisor_high * multiplication_result_high;\n      dividend_high = dividend & 0xffff | ((dividend_high_temp - current_divisor) - dividend_high * multiplication_result_high) * 0x10000;\n      current_quotient = multiplication_result_high;\n      if (dividend_high <= divisor_high && divisor_high - dividend_high != 0) {\n        current_quotient = multiplication_result_high - 1;\n        if ((CARRY4(dividend_high,quotient) == false) &&\n           (dividend_high + quotient <= divisor_high && divisor_high - (dividend_high + quotient) != 0)) {\n          current_quotient = multiplication_result_high - 2;\n        }\n      }\n      current_quotient = current_quotient | dividend_low << 0x10;\n    }\n  }\n  else if (divisor < remainder) {\n    next_quotient = 0;\n    current_quotient = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(remainder);\n    if (shift_amount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        next_quotient = 0;\n        current_quotient = 1;\n      }\n      else {\n        current_quotient = 0;\n        next_quotient = 0;\n      }\n    }\n    else {\n      next_quotient = 0x20 - shift_amount;\n      dividend_high = divisor >> (next_quotient & 0xff);\n      divisor_high = quotient >> (next_quotient & 0xff) | remainder << shift_amount;\n      current_divisor = divisor_high >> 0x10;\n      current_quotient = dividend_high / current_divisor;\n      dividend_high_temp = (divisor_high & 0xffff) * current_quotient;\n      dividend_low = divisor << shift_amount | dividend >> (next_quotient & 0xff);\n      dividend_high = dividend_low >> 0x10 | (dividend_high - current_divisor * current_quotient) * 0x10000;\n      next_quotient = current_quotient;\n      if (dividend_high <= dividend_high_temp && dividend_high_temp - dividend_high != 0) {\n        bVar13 = CARRY4(dividend_high,divisor_high);\n        dividend_high = dividend_high + divisor_high;\n        next_quotient = current_quotient - 1;\n        if ((bVar13 == false) && (dividend_high <= dividend_high_temp && dividend_high_temp - dividend_high != 0)) {\n          next_quotient = current_quotient - 2;\n          dividend_high = dividend_high + divisor_high;\n        }\n      }\n      multiplication_result_high = (dividend_high - dividend_high_temp) / current_divisor;\n      next_divisor = (divisor_high & 0xffff) * multiplication_result_high;\n      dividend_high = dividend_low & 0xffff | ((dividend_high - dividend_high_temp) - current_divisor * multiplication_result_high) * 0x10000;\n      current_quotient = multiplication_result_high;\n      if (dividend_high <= next_divisor && next_divisor - dividend_high != 0) {\n        bVar13 = CARRY4(dividend_high,divisor_high);\n        dividend_high = dividend_high + divisor_high;\n        current_quotient = multiplication_result_high - 1;\n        if ((bVar13 == false) && (dividend_high <= next_divisor && next_divisor - dividend_high != 0)) {\n          current_quotient = multiplication_result_high - 2;\n          dividend_high = dividend_high + divisor_high;\n        }\n      }\n      current_quotient = current_quotient | next_quotient << 0x10;\n      multiplication_result = (ulonglong)current_quotient * (ulonglong)(quotient << shift_amount);\n      dividend_low = (uint)((ulonglong)multiplication_result >> 0x20);\n      next_quotient = 0;\n      if ((dividend_high - next_divisor < dividend_low) ||\n         ((dividend_high - next_divisor == dividend_low && (dividend << shift_amount < (uint)multiplication_result)))) {\n        current_quotient = current_quotient - 1;\n        next_quotient = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    bVar13 = current_quotient != 0;\n    current_quotient = -current_quotient;\n    next_quotient = -next_quotient - (uint)bVar13;\n  }\n  return CONCAT44(next_quotient,current_quotient);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "divide_unsigned_000845c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "multiplication_result",
                "uVar2": "current_quotient",
                "uVar3": "next_quotient",
                "uVar4": "dividend_high",
                "uVar5": "multiplication_result_high",
                "iVar6": "shift_amount",
                "uVar7": "dividend_low",
                "uVar8": "dividend_high_temp",
                "uVar9": "is_dividend_negative",
                "uVar10": "current_divisor",
                "uVar11": "next_divisor",
                "uVar12": "divisor_high"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "perform_division_00084860",
            "code": "\nulonglong performDivision_00084860(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint value1;\n  uint value2;\n  uint value3;\n  uint temp1;\n  uint temp2;\n  int shift;\n  bool isOverflow;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift = LZCOUNT(quotient);\n      if (shift == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        value1 = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shift;\n        temp1 = divisor >> (0x20U - shift & 0xff);\n        quotient2 = quotient >> 0x10;\n        temp2 = temp1 / quotient2;\n        value1 = quotient & 0xffff;\n        quotient1 = value1 * temp2;\n        value2 = dividend >> (0x20U - shift & 0xff) | divisor << shift;\n        quotient3 = value2 >> 0x10 | (temp1 - quotient2 * temp2) * 0x10000;\n        dividend = dividend << shift;\n        temp1 = temp2;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          isOverflow = CARRY4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          temp1 = temp2 - 1;\n          if ((isOverflow == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            temp1 = temp2 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        value3 = (quotient3 - quotient1) / quotient2;\n        temp2 = value1 * value3;\n        divisor = value2 & 0xffff | ((quotient3 - quotient1) - quotient2 * value3) * 0x10000;\n        quotient1 = value3;\n        if (divisor <= temp2 && temp2 - divisor != 0) {\n          isOverflow = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = value3 - 1;\n          if ((isOverflow == false) && (divisor <= temp2 && temp2 - divisor != 0)) {\n            quotient1 = value3 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp2;\n        quotient1 = quotient1 | temp1 << 0x10;\n      }\n      temp2 = divisor / quotient2;\n      quotient3 = value1 * temp2;\n      value2 = dividend >> 0x10 | (divisor - quotient2 * temp2) * 0x10000;\n      temp1 = temp2;\n      if (value2 <= quotient3 && quotient3 - value2 != 0) {\n        isOverflow = CARRY4(value2,quotient);\n        value2 = value2 + quotient;\n        temp1 = temp2 - 1;\n        if ((isOverflow == false) && (value2 <= quotient3 && quotient3 - value2 != 0)) {\n          temp1 = temp2 - 2;\n          value2 = value2 + quotient;\n        }\n      }\n      temp2 = (value2 - quotient3) / quotient2;\n      value1 = value1 * temp2;\n      value2 = dividend & 0xffff | ((value2 - quotient3) - quotient2 * temp2) * 0x10000;\n      quotient2 = temp2;\n      if (value2 <= value1 && value1 - value2 != 0) {\n        quotient2 = temp2 - 1;\n        if ((CARRY4(value2,quotient) == false) &&\n           (value2 + quotient <= value1 && value1 - (value2 + quotient) != 0)) {\n          quotient2 = temp2 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | temp1 << 0x10);\n    }\n    shift = LZCOUNT(quotient);\n    if (shift != 0) {\n      temp1 = dividend >> (0x20U - shift & 0xff);\n      quotient = quotient << shift;\n      dividend = dividend << shift;\n      divisor = temp1 | divisor << shift;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient2 = divisor / quotient1;\n    value1 = (quotient & 0xffff) * quotient2;\n    temp2 = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n    temp1 = quotient2;\n    if (temp2 <= value1 && value1 - temp2 != 0) {\n      isOverflow = CARRY4(temp2,quotient);\n      temp2 = temp2 + quotient;\n      temp1 = quotient2 - 1;\n      if ((isOverflow == false) && (temp2 <= value1 && value1 - temp2 != 0)) {\n        temp1 = quotient2 - 2;\n        temp2 = temp2 + quotient;\n      }\n    }\n    value2 = (temp2 - value1) / quotient1;\n    quotient2 = (quotient & 0xffff) * value2;\n    value1 = dividend & 0xffff | ((temp2 - value1) - quotient1 * value2) * 0x10000;\n    quotient1 = value2;\n    if (value1 <= quotient2 && quotient2 - value1 != 0) {\n      quotient1 = value2 - 1;\n      if ((CARRY4(value1,quotient) == false) &&\n         (value1 + quotient <= quotient2 && quotient2 - (value1 + quotient) != 0)) {\n        quotient1 = value2 - 2;\n      }\n    }\n    quotient1 = quotient1 | temp1 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift = LZCOUNT(remainder);\n    if (shift == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shift;\n      temp1 = divisor >> (quotient1 & 0xff);\n      quotient2 = remainder << shift | quotient >> (quotient1 & 0xff);\n      value1 = quotient2 >> 0x10;\n      quotient3 = temp1 / value1;\n      temp2 = (quotient2 & 0xffff) * quotient3;\n      value2 = dividend >> (quotient1 & 0xff) | divisor << shift;\n      quotient1 = value2 >> 0x10 | (temp1 - value1 * quotient3) * 0x10000;\n      temp1 = quotient3;\n      if (quotient1 <= temp2 && temp2 - quotient1 != 0) {\n        isOverflow = CARRY4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        temp1 = quotient3 - 1;\n        if ((isOverflow == false) && (quotient1 <= temp2 && temp2 - quotient1 != 0)) {\n          temp1 = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - temp2) / value1;\n      value3 = (quotient2 & 0xffff) * quotient3;\n      value1 = value2 & 0xffff | ((quotient1 - temp2) - value1 * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (value1 <= value3 && value3 - value1 != 0) {\n        isOverflow = CARRY4(value1,quotient2);\n        value1 = value1 + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((isOverflow == false) && (value1 <= value3 && value3 - value1 != 0)) {\n          quotient1 = quotient3 - 2;\n          value1 = value1 + quotient2;\n        }\n      }\n      quotient1 = quotient1 | temp1 << 0x10;\n      temp = (ulonglong)quotient1 * (ulonglong)(quotient << shift);\n      temp1 = (uint)((ulonglong)temp >> 0x20);\n      if ((value1 - value3 < temp1) || ((value1 - value3 == temp1 && (dividend << shift < (uint)temp)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "renaming": {
                "FUN_00084860": "perform_division_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "value1",
                "uVar6": "value2",
                "uVar7": "value3",
                "uVar8": "temp1",
                "uVar9": "temp2",
                "iVar10": "shift",
                "bVar11": "isOverflow"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 114344,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c20",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810cc",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ],
        [
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_000810c4",
            "FUN_000810d8",
            "FUN_000810fc",
            "FUN_0008113a",
            "FUN_0008159e",
            "FUN_000815ec"
        ],
        [
            "FUN_000810e8",
            "FUN_0008117a"
        ],
        [
            "FUN_00080250"
        ]
    ],
    "locked_functions": []
}