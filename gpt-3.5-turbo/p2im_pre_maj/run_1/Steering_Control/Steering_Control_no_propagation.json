{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_if_zero_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlagIfZero_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_200708a0 == '\\0') {\n    DAT_200708a0._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_if_zero_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  FUN_000806f8(&DAT_200708e8,0x5a);\n  FUN_000806f8(&DAT_200708d4,0x5a,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000806f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801e0": {
            "entrypoint": "0x000801e0",
            "current_name": "initialize_system_000801e0",
            "code": "\nundefined8 initialize_system_000801e0(undefined4 first_param,undefined4 second_param,undefined4 third_param,undefined4 fourth_param)\n\n{\n  FUN_000813dc(&DAT_20070be8,0xe100,third_param,fourth_param,fourth_param);\n  FUN_00080f0c(0xd,1);\n  FUN_00080f0c(6,1);\n  FUN_00080f0c(0x39,0);\n  FUN_00080f0c(4,0);\n  FUN_00080f0c(3,0);\n  FUN_00080f0c(2,0);\n  FUN_000806a0(&DAT_200708d4,5);\n  FUN_000806a0(&DAT_200708e8,6);\n  FUN_00080164();\n  FUNC_00080f08(1000);\n  if (DAT_200708bc == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000801e0": "initialize_system_000801e0",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "third_param",
                "param_4": "fourth_param"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000806a0",
                "FUN_00080f0c",
                "FUN_00080f08",
                "FUN_00080164",
                "FUN_000813dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080250": {
            "entrypoint": "0x00080250",
            "current_name": "control_module_00080250",
            "code": "\nvoid controlModule_00080250(void)\n\n{\n  undefined4 result;\n  int count;\n  undefined *ptr;\n  undefined tempData [12];\n  \n  DAT_200708c0 = FUN_00081624(4,1,20000);\n  FUNC_00080f08(10);\n  DAT_200708c4 = DAT_200708c4 ^ 1;\n  FUN_00081014(0xd);\n  if (DAT_200708c0 < 0x641) {\n    if (DAT_200708c0 - 0x385U < 299) {\n      if (DAT_200708eb != '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered manual control mode.\");\n        DAT_200708eb = '\\0';\n      }\n      FUNC_00080f08(10);\n      result = FUN_00081624(3,1,20000);\n      DAT_200708d8 = FUN_0008145c(0,1000,2000,0x28,0x96);\n      DAT_200708ec = FUN_0008145c(result,1000,2000,0x28,0x96);\n      while (count = FUN_00081248(&DAT_20070be8), 0 < count) {\n        FUN_00081276(&DAT_20070be8);\n        thunk_FUN_0008113a(&DAT_20070be8,DAT_200708d8,10);\n        FUN_000810c4(&DAT_20070be8,&DAT_00084b13);\n        FUN_0008117a(&DAT_20070be8,DAT_200708ec,10);\n      }\n      FUN_000806f8(&DAT_200708e8,DAT_200708ec);\n      FUN_000806f8(&DAT_200708d4,DAT_200708d8);\n    }\n    else {\n      if (DAT_200708eb == '\\0') {\n        FUN_00080164();\n        FUN_000810e8(&DAT_20070be8,\"Entered autonomous control mode.\");\n      }\n      DAT_200708eb = '\\x01';\nLAB_00080346:\n      count = FUN_00081248(&DAT_20070be8);\n      if (0 < count) {\n        FUN_00081214(tempData,&DAT_20070be8,0x2c);\n        FUN_00081560(&DAT_200708dc,tempData);\n        FUN_00081472(tempData);\n        FUN_00081214(tempData,&DAT_20070be8,10);\n        FUN_00081560(&DAT_200708c8,tempData);\n        FUN_00081472(tempData);\n        FUN_00081276(&DAT_20070be8);\n        count = FUN_000815b8(&DAT_200708dc,\"steer\");\n        if (count == 0) goto LAB_0008039c;\n        result = FUN_000815de(&DAT_200708c8);\n        ptr = &DAT_200708d4;\n        goto LAB_000803b2;\n      }\n    }\n  }\n  else {\n    FUN_00080164();\n    FUN_000810e8(&DAT_20070be8,\"error\");\n  }\n  return;\nLAB_0008039c:\n  count = FUN_000815b8(&DAT_200708dc,\"motor\");\n  if (count != 0) {\n    result = FUN_000815de(&DAT_200708c8);\n    ptr = &DAT_200708e8;\nLAB_000803b2:\n    FUN_000806f8(ptr,result);\n  }\n  goto LAB_00080346;\n}\n\n",
            "renaming": {
                "FUN_00080250": "control_module_00080250",
                "uVar1": "result",
                "iVar2": "count",
                "puVar3": "ptr",
                "auStack_1c": "tempData"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_000810c4",
                "FUN_00081472",
                "FUN_000815b8",
                "FUN_00081248",
                "FUN_000806f8",
                "FUN_00081214",
                "FUN_00080164",
                "FUN_000810e8",
                "FUN_00080f08",
                "FUN_00081276",
                "FUN_00081560",
                "FUN_00081014",
                "FUN_00081624",
                "thunk_FUN_0008113a",
                "FUN_000815de",
                "FUN_0008117a",
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803fc": {
            "entrypoint": "0x000803fc",
            "current_name": "initialize_tc_000803fc",
            "code": "\nvoid initializeTC_000803fc(int channelID,uint paramSize,undefined4 param3,uint bitOffset)\n\n{\n  undefined4 unaffected_r4;\n  undefined4 in_link_register;\n  undefined8 concatenatedParams;\n  \n  concatenatedParams = CONCAT44(paramSize,channelID);\n  FUN_00080aa8(param3);\n  FUN_00080b2c(channelID,paramSize,0xc002);\n  FUN_00080b90(channelID,paramSize,0xa41);\n  *(int *)((bitOffset >> 5) * 4 + -0x1fff1f00) = 1 << (bitOffset & 0x1f);\n  *(undefined4 *)(channelID + paramSize * 0x40 + 0x24) = 4;\n  if (2 < paramSize) {\n    concatenatedParams = FUN_000816f8(\"../source/tc.c\",0x5c,\"TC_Start\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\",\n                         unaffected_r4,in_link_register);\n  }\n  *(undefined4 *)((int)concatenatedParams + (int)((ulonglong)concatenatedParams >> 0x20) * 0x40) = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000803fc": "initialize_tc_000803fc",
                "param_1": "channelID",
                "param_2": "paramSize",
                "param_3": "param3",
                "param_4": "bitOffset",
                "unaff_r4": "unaffected_r4",
                "in_lr": "in_link_register",
                "uVar1": "concatenatedParams"
            },
            "calling": [
                "FUN_000806a0"
            ],
            "called": [
                "FUN_00080b90",
                "FUN_00080b2c",
                "FUN_00080aa8",
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008044c": {
            "entrypoint": "0x0008044c",
            "current_name": "update_data_0008044c",
            "code": "\nvoid updateData_0008044c(int index,int data,int offset)\n\n{\n  uint tempVar1;\n  int tempVar2;\n  \n  offset = offset * 0x40;\n  if (((&DAT_200708f1)[index] & 0x80) == 0) {\n    tempVar2 = index * 0xc;\n    if (((char)(&DAT_200708f1)[index] + tempVar2 < (int)(uint)DAT_200708f0) &&\n       ((int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempVar2) * 8] << 0x19) < 0\n       )) {\n      FUN_00081014((&DAT_200708f8)[(tempVar2 + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,0);\n    }\n  }\n  else {\n    *(uint *)(data + offset) = *(uint *)(data + offset) | 4;\n  }\n  tempVar1 = (uint)DAT_200708f0;\n  (&DAT_200708f1)[index] = (&DAT_200708f1)[index] + '\\x01';\n  tempVar2 = index * 0xc;\n  if (((char)(&DAT_200708f1)[index] + tempVar2 < (int)tempVar1) &&\n     ((char)(&DAT_200708f1)[index] < '\\f')) {\n    *(int *)(data + offset + 0x14) =\n         *(int *)(data + offset + 0x10) +\n         *(int *)(&DAT_200708fc + ((char)(&DAT_200708f1)[index] + tempVar2) * 8);\n    if (-1 < (int)((uint)(byte)(&DAT_200708f8)[((char)(&DAT_200708f1)[index] + tempVar2) * 8] << 0x19\n                  )) {\n      return;\n    }\n    FUN_00081014((&DAT_200708f8)[(tempVar2 + (char)(&DAT_200708f1)[index]) * 8] & 0x3f,1);\n    return;\n  }\n  data = data + offset;\n  tempVar1 = (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * 20000 >> 5;\n  if (tempVar1 <= *(int *)(data + 0x10) + 4U) {\n    tempVar1 = *(int *)(data + 0x10) + 4;\n  }\n  *(uint *)(data + 0x14) = tempVar1;\n  (&DAT_200708f1)[index] = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008044c": "update_data_0008044c",
                "param_1": "index",
                "param_2": "data",
                "param_3": "offset",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2"
            },
            "calling": [],
            "called": [
                "FUN_00081014"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805a8": {
            "entrypoint": "0x000805a8",
            "current_name": "extract_and_store_value_000805a8",
            "code": "\nvoid extractAndStoreValue_000805a8(byte *output)\n\n{\n  char incrementedValue;\n  uint originalValue;\n  \n  originalValue = (uint)DAT_200708f0;\n  if (originalValue < 0x3c) {\n    incrementedValue = DAT_200708f0 + 1;\n    *output = DAT_200708f0;\n    DAT_200708f0 = incrementedValue;\n    *(uint *)(&DAT_200708fc + originalValue * 8) =\n         (arrayData[6].r_offset / 1000000) * 0x5dc >> 5;\n    return;\n  }\n  *output = 0xff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805a8": "extract_and_store_value_000805a8",
                "param_1": "output",
                "cVar1": "incrementedValue",
                "uVar2": "originalValue",
                "Elf32_Rel_ARRAY_20070000": "arrayData"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806a0": {
            "entrypoint": "0x000806a0",
            "current_name": "process_data_000806a0",
            "code": "\nbyte processData_000806a0(byte *data,undefined4 param)\n\n{\n  byte byteVar;\n  undefined4 funcAddr;\n  uint divResult;\n  undefined4 value;\n  int index;\n  uint dataValue;\n  \n  if (0x3b < *data) goto LAB_00080660;\n  FUN_00080f0c(param,1,0x220,*data,0x960);\n  dataValue = (uint)*data;\n  byteVar = (&DAT_200708f8)[dataValue * 8];\n  data[2] = 0;\n  divResult = dataValue / 0xc;\n  (&DAT_200708f8)[dataValue * 8] = byteVar & 0xc0 | (byte)param & 0x3f;\n  data[1] = 0;\n  index = 0;\n  do {\n    if ((int)((uint)(byte)(&DAT_200708f8)[(index + divResult * 0xc) * 8] << 0x19) < 0)\n    goto LAB_00080652;\n    index = index + 1;\n  } while (index != 0xc);\n  if (divResult == 0) {\n    funcAddr = 0x40084000;\n    value = 0x1e;\nLAB_0008064c:\n    FUN_000803fc(funcAddr,divResult,value,value);\n  }\n  else {\n    if (divResult == 1) {\n      funcAddr = 0x40084000;\n      value = 0x1f;\n      goto LAB_0008064c;\n    }\n    if (divResult == 2) {\n      funcAddr = 0x40084000;\n      value = 0x20;\n      goto LAB_0008064c;\n    }\n    if (divResult == 3) {\n      funcAddr = 0x40080000;\n      divResult = 2;\n      value = 0x1d;\n      goto LAB_0008064c;\n    }\n    if (divResult == 4) {\n      funcAddr = 0x40080000;\n      divResult = 0;\n      value = 0x1b;\n      goto LAB_0008064c;\n    }\n  }\nLAB_00080652:\n  (&DAT_200708f8)[(uint)*data * 8] = (&DAT_200708f8)[(uint)*data * 8] | 0x40;\nLAB_00080660:\n  return *data;\n}\n\n",
            "renaming": {
                "FUN_000806a0": "process_data_000806a0",
                "param_1": "data",
                "param_2": "param",
                "bVar1": "byteVar",
                "uVar2": "funcAddr",
                "uVar3": "divResult",
                "uVar4": "value",
                "iVar5": "index",
                "uVar6": "dataValue"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_000803fc",
                "FUN_00080f0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000806f8": {
            "entrypoint": "0x000806f8",
            "current_name": "process_data_000806f8",
            "code": "\nvoid processData_000806f8(byte *data,uint length)\n\n{\n  uint minLength;\n  \n  if ((int)length < 0x220) {\n    minLength = length;\n    if (0xb3 < (int)length) {\n      minLength = 0xb4;\n    }\n    length = FUN_0008145c(minLength & ~((int)minLength >> 0x1f),0,0xb4,(0x88 - (char)data[1]) * 4,\n                           (600 - (char)data[2]) * 4,length);\n  }\n  if (*data < 0x3c) {\n    minLength = (0x88 - (char)data[1]) * 4;\n    if (((int)(length + (0x88 - (char)data[1]) * -4) < 0 == SBORROW4(length,minLength)) &&\n       (minLength = (600 - (char)data[2]) * 4, (int)length <= (int)minLength)) {\n      minLength = length;\n    }\n    *(uint *)(&DAT_200708fc + (uint)*data * 8) =\n         (Elf32_Rel_ARRAY_20070000[6].r_offset / 1000000) * (minLength - 2) >> 5;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000806f8": "process_data_000806f8",
                "param_1": "data",
                "param_2": "length",
                "uVar1": "minLength"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080164"
            ],
            "called": [
                "FUN_0008145c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008073a": {
            "entrypoint": "0x0008073a",
            "current_name": "FUNC_0008073a",
            "code": "\nvoid FUNC_0008073a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008073a": "FUNC_0008073a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080748": {
            "entrypoint": "0x00080748",
            "current_name": "FUNC_00080748",
            "code": "\nvoid FUNC_00080748(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080748": "FUNC_00080748"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074a": {
            "entrypoint": "0x0008074a",
            "current_name": "FUNC_0008074a",
            "code": "\nvoid FUNC_0008074a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074a": "FUNC_0008074a"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008074c": {
            "entrypoint": "0x0008074c",
            "current_name": "FUNC_0008074c",
            "code": "\nvoid FUNC_0008074c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008074c": "FUNC_0008074c"
            },
            "calling": [
                "FUN_00080970"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080774": {
            "entrypoint": "0x00080774",
            "current_name": "initialize_system_00080774",
            "code": "\n\n\nvoid initializeSystem_00080774(void)\n\n{\n  int counter;\n  int nextCounter;\n  \n  FUN_00080b98();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081778();\n  counter = 0;\n  do {\n    nextCounter = counter + 1;\n    FUN_00081014(counter,0);\n    counter = nextCounter;\n  } while (nextCounter != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080a30(0x400e0e00,1,0x300,0);\n  FUN_00081014(0,1);\n  FUN_00080a30(0x400e0e00,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,0x3000,0);\n  FUN_00080a30(0x400e1400,2,0x30,0);\n  FUN_00080a30(0x400e1000,1,0xc00,0);\n  FUN_00080a30(0x400e0e00,1,3,0);\n  FUN_00080a30(0x400e1000,1,0xc000,0);\n  FUN_00080aa8(0x25);\n  FUN_00080c98(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00080d3e(0x400c0000,0,0x300000,1);\n  FUN_00080d30(0x400c0000,0,0);\n  FUN_00080d6a(0x400c0000,0xffffffff);\n  FUN_00080d62(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080774": "initialize_system_00080774",
                "iVar1": "counter",
                "iVar2": "nextCounter"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_00080d3e",
                "FUN_00081778",
                "FUN_00081014",
                "FUN_00080c98",
                "FUN_00080b98",
                "FUN_00080a30",
                "FUN_00080d30",
                "FUN_00080aa8",
                "FUN_00080d6a",
                "FUN_00080d62"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008089c": {
            "entrypoint": "0x0008089c",
            "current_name": "initialize_components_0008089c",
            "code": "\nvoid initializeComponents_0008089c(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  FUN_000811b0(&DAT_20070c0c);\n  FUN_000811b0(&DAT_20070b60);\n  FUN_00081348(&DAT_20070be8,0x400e0800,8,8,&DAT_20070c0c,&DAT_20070b60,arg3);\n  FUN_000811b0(&DAT_20070e6c);\n  FUN_000811b0(&DAT_20070ef4);\n  FUN_000811b0(&DAT_20070f7c);\n  FUN_000811b0(&DAT_20070ad8);\n  FUN_000811b0(&DAT_20070d0c);\n  FUN_000811b0(&DAT_20070d94);\n  FUN_00081438(&DAT_20070c94,0x40098000,0x11,0x11,&DAT_20070e6c,&DAT_20070ad8);\n  FUN_00081438(&DAT_20070cbc,0x4009c000,0x12,0x12,&DAT_20070ef4,&DAT_20070d0c);\n  FUN_00081438(&DAT_20070ce4,0x400a4000,0x14,0x14,&DAT_20070f7c,&DAT_20070d94);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008089c": "initialize_components_0008089c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "calling": [],
            "called": [
                "FUN_000811b0",
                "FUN_00081348",
                "FUN_00081438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080970": {
            "entrypoint": "0x00080970",
            "current_name": "check_and_execute_functions_00080970",
            "code": "\nvoid checkAndExecuteFunctions_00080970(void)\n\n{\n  int result;\n  \n  result = FUN_00081248(&DAT_20070be8);\n  if (result != 0) {\n    FUNC_0008073a();\n  }\n  result = FUN_00081248(&DAT_20070c94);\n  if (result != 0) {\n    FUNC_00080748();\n  }\n  result = FUN_00081248(&DAT_20070cbc);\n  if (result != 0) {\n    FUNC_0008074a();\n  }\n  result = FUN_00081248(&DAT_20070ce4);\n  if (result != 0) {\n    FUNC_0008074c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080970": "check_and_execute_functions_00080970",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [
                "FUN_0008074a",
                "FUN_0008073a",
                "FUN_00081248",
                "FUN_00080748",
                "FUN_0008074c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809be": {
            "entrypoint": "0x000809be",
            "current_name": "update_value_000809be",
            "code": "\nvoid updateValue_000809be(int baseAddress,undefined4 operationType,uint newValue)\n\n{\n  uint result;\n  \n  *(uint *)(baseAddress + 0x44) = newValue;\n  switch(operationType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    result = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~newValue;\n    break;\n  case 2:\n    result = *(uint *)(baseAddress + 0x70) | newValue;\n    break;\n  default:\n    goto defaultCase;\n  }\n  *(uint *)(baseAddress + 0x70) = result;\ndefaultCase:\n  *(uint *)(baseAddress + 4) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809be": "update_value_000809be",
                "param_1": "baseAddress",
                "param_2": "operationType",
                "param_3": "newValue",
                "uVar1": "result",
                "switchD_000809c4_caseD_6": "defaultCase"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000809e4": {
            "entrypoint": "0x000809e4",
            "current_name": "update_parameters_000809e4",
            "code": "\nvoid updateParameters_000809e4(undefined4 *parameters,undefined4 value,uint flags)\n\n{\n  bool isNegativeFlag;\n  \n  isNegativeFlag = (int)(flags << 0x1f) < 0;\n  parameters[0x11] = value;\n  if (isNegativeFlag) {\n    parameters[0x19] = value;\n  }\n  if (!isNegativeFlag) {\n    parameters[0x18] = value;\n  }\n  isNegativeFlag = (flags & 10) != 0;\n  if (isNegativeFlag) {\n    parameters[8] = value;\n  }\n  if (!isNegativeFlag) {\n    parameters[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    parameters[0x20] = value;\n  }\n  parameters[5] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000809e4": "update_parameters_000809e4",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "flags",
                "bVar1": "isNegativeFlag"
            },
            "calling": [
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a0a": {
            "entrypoint": "0x00080a0a",
            "current_name": "set_parameters_00080a0a",
            "code": "\nvoid setParameters_00080a0a(undefined4 *ptrArray,undefined4 newValue,int isParam3Zero,int isParam4Zero,int isParam5Zero)\n\n{\n  ptrArray[0x11] = newValue;\n  if (isParam5Zero == 0) {\n    ptrArray[0x18] = newValue;\n  }\n  else {\n    ptrArray[0x19] = newValue;\n  }\n  if (isParam4Zero == 0) {\n    ptrArray[0x15] = newValue;\n  }\n  else {\n    ptrArray[0x14] = newValue;\n  }\n  if (isParam3Zero == 0) {\n    ptrArray[0xd] = newValue;\n  }\n  else {\n    ptrArray[0xc] = newValue;\n  }\n  ptrArray[4] = newValue;\n  *ptrArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a0a": "set_parameters_00080a0a",
                "param_1": "ptrArray",
                "param_2": "newValue",
                "param_3": "isParam3Zero",
                "param_4": "isParam4Zero",
                "param_5": "isParam5Zero",
                "param_1[0x11]": "ptrArray[0x11]",
                "param_1[0x18]": "ptrArray[0x18]",
                "param_1[0x19]": "ptrArray[0x19]",
                "param_1[0x15]": "ptrArray[0x15]",
                "param_1[0x14]": "ptrArray[0x14]",
                "param_1[0xd]": "ptrArray[0xd]",
                "param_1[0xc]": "ptrArray[0xc]",
                "param_1[4]": "ptrArray[4]"
            },
            "calling": [
                "FUN_00081014",
                "FUN_00080a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a30": {
            "entrypoint": "0x00080a30",
            "current_name": "update_function_data_00080a30",
            "code": "\nundefined4 updateFunctionData_00080a30(int functionData,int caseNum,undefined4 newValue,uint flag)\n\n{\n  bool isFlagSet;\n  \n  switch(caseNum) {\n  case 1:\n  case 2:\n    FUN_000809be(functionData,caseNum,newValue);\n    isFlagSet = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(functionData + 0x44) = newValue;\n    if (isFlagSet) {\n      *(undefined4 *)(functionData + 100) = newValue;\n    }\n    if (!isFlagSet) {\n      *(undefined4 *)(functionData + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    FUN_000809e4(functionData,newValue,flag,0x809e5,functionData);\n    break;\n  case 4:\n  case 5:\n    FUN_00080a0a(functionData,newValue,caseNum == 5,(flag << 0x1d) >> 0x1f,flag & 1,caseNum,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080a30": "update_function_data_00080a30",
                "param_1": "functionData",
                "param_2": "caseNum",
                "param_3": "newValue",
                "param_4": "flag",
                "bVar1": "isFlagSet"
            },
            "calling": [
                "FUN_00080f0c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_000809e4",
                "FUN_000809be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a94": {
            "entrypoint": "0x00080a94",
            "current_name": "check_conditions_00080a94",
            "code": "\nuint check_conditions_00080a94(int ptr_param,uint param_mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(ptr_param + 8) & param_mask;\n  if (result != 0) {\n    if ((param_mask & *(uint *)(ptr_param + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080a94": "check_conditions_00080a94",
                "param_1": "ptr_param",
                "param_2": "param_mask",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081014"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "check_bit_in_data_00080aa8",
            "code": "\n\n\nundefined4 checkBitInData_00080aa8(uint bitIndex)\n\n{\n  uint bitMask;\n  \n  if (bitIndex < 0x2d) {\n    if (bitIndex < 0x20) {\n      bitMask = 1 << (bitIndex & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (bitIndex - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "check_bit_in_data_00080aa8",
                "param_1": "bitIndex",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080f0c",
                "FUN_00080774",
                "FUN_000813dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b2c": {
            "entrypoint": "0x00080b2c",
            "current_name": "initialize_tc_channel_00080b2c",
            "code": "\nvoid initializeTcChannel_00080b2c(undefined4 param1,uint param2,char *message)\n\n{\n  int offset;\n  int address;\n  undefined8 combinedParams;\n  \n  combinedParams = CONCAT44(param2,param1);\n  if (2 < param2) {\n    message = \"TC_Configure\";\n    combinedParams = FUN_000816f8(\"../source/tc.c\",0x40,\"TC_Configure\",\n                         \"dwChannel < (sizeof( pTc->TC_CHANNEL )/sizeof( pTc->TC_CHANNEL[0] ))\");\n  }\n  offset = (int)((ulonglong)combinedParams >> 0x20) * 0x40;\n  address = (int)combinedParams + offset;\n  *(undefined4 *)((int)combinedParams + offset) = 2;\n  *(undefined4 *)(address + 0x28) = 0xffffffff;\n  *(char **)(address + 4) = message;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b2c": "initialize_tc_channel_00080b2c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "message",
                "iVar1": "offset",
                "iVar2": "address",
                "uVar3": "combinedParams"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [
                "FUN_000816f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b90": {
            "entrypoint": "0x00080b90",
            "current_name": "update_value_in_array_00080b90",
            "code": "\nvoid updateValueInArray_00080b90(int arrayBaseAddress,int index,undefined4 newValue)\n\n{\n  *(undefined4 *)(arrayBaseAddress + index * 0x40 + 0x14) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b90": "update_value_in_array_00080b90",
                "param_1": "arrayBaseAddress",
                "param_2": "index",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_000803fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080b98": {
            "entrypoint": "0x00080b98",
            "current_name": "initialize_memory_00080b98",
            "code": "\n\n\nvoid initializeMemory_00080b98(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080b98": "initialize_memory_00080b98",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080c20",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080c6a) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_200708a0\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_00085878 + iVar1);\n  }\n  for (puVar2 = &DAT_200708a0; puVar2 < (undefined4 *)0x20071248; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000815ec();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000815ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c98": {
            "entrypoint": "0x00080c98",
            "current_name": "calculate_threshold_00080c98",
            "code": "\nundefined4 calculate_threshold_00080c98(undefined4 *result,uint input_size,int multiplier,int threshold)\n\n{\n  uint divisor;\n  uint index;\n  uint threshold_values [16];\n  \n  threshold_values[0] = 0;\n  threshold_values[1] = 8;\n  threshold_values[2] = 0x10;\n  threshold_values[3] = 0x18;\n  threshold_values[4] = 0x40;\n  threshold_values[5] = 0x50;\n  threshold_values[6] = 0x60;\n  threshold_values[7] = 0x70;\n  threshold_values[8] = 0x200;\n  threshold_values[9] = 0x240;\n  threshold_values[10] = 0x280;\n  threshold_values[11] = 0x2c0;\n  threshold_values[12] = 0x300;\n  threshold_values[13] = 0x340;\n  threshold_values[14] = 0x380;\n  threshold_values[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  divisor = input_size / (uint)(multiplier * 2);\n  if (input_size == multiplier * 2 * divisor) {\n    divisor = divisor - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(threshold * (int)(((ulonglong)input_size / (ulonglong)((divisor + 1) * 2)) / 1000000)) <=\n        threshold_values[index]) {\n      result[1] = (index & 0xf) << 0x10 | (divisor & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080c98": "calculate_threshold_00080c98",
                "param_1": "result",
                "param_2": "input_size",
                "param_3": "multiplier",
                "param_4": "threshold",
                "local_58": "threshold_values",
                "uVar1": "divisor",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d30": {
            "entrypoint": "0x00080d30",
            "current_name": "set_bit_in_memory_00080d30",
            "code": "\nvoid setBitInMemory_00080d30(int address,uint value,uint bitNumber)\n\n{\n  *(uint *)(address + 4) = value | *(uint *)(address + 4) | (bitNumber & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d30": "set_bit_in_memory_00080d30",
                "param_1": "address",
                "param_2": "value",
                "param_3": "bitNumber"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d3e": {
            "entrypoint": "0x00080d3e",
            "current_name": "update_parameters_00080d3e",
            "code": "\nvoid updateParameters_00080d3e(int dataPtr,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(dataPtr + 4) =\n       value2 | *(uint *)(dataPtr + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d3e": "update_parameters_00080d3e",
                "param_1": "dataPtr",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d58": {
            "entrypoint": "0x00080d58",
            "current_name": "set_bit_value_00080d58",
            "code": "\nvoid setBitValue_00080d58(int baseAddress,uint bitIndex)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d58": "set_bit_value_00080d58",
                "param_1": "baseAddress",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_00080f0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d62": {
            "entrypoint": "0x00080d62",
            "current_name": "set_param_value_to_max_00080d62",
            "code": "\nvoid setParamValueToMax_00080d62(int objectAddress)\n\n{\n  *(undefined4 *)(objectAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d62": "set_param_value_to_max_00080d62",
                "param_1": "objectAddress"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d6a": {
            "entrypoint": "0x00080d6a",
            "current_name": "set_param_value_00080d6a",
            "code": "\nvoid setParamValue_00080d6a(int baseAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(baseAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d6a": "set_param_value_00080d6a",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e80": {
            "entrypoint": "0x00080e80",
            "current_name": "get_default_value_00080e80",
            "code": "\nundefined4 getDefaultValue_00080e80(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080e80": "get_default_value_00080e80"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e88": {
            "entrypoint": "0x00080e88",
            "current_name": "calculate_new_value_00080e88",
            "code": "\nint calculateNewValue_00080e88(int inputValue)\n\n{\n  int returnValue;\n  \n  if (DAT_20071208 == 0) {\n    DAT_20071208 = 0x20071248;\n  }\n  returnValue = DAT_20071208;\n  DAT_20071208 = inputValue + DAT_20071208;\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00080e88": "calculate_new_value_00080e88",
                "param_1": "inputValue",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008236c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eaa": {
            "entrypoint": "0x00080eaa",
            "current_name": "get_default_value_00080eaa",
            "code": "\nuint32_t get_default_value_00080eaa(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080eaa": "get_default_value_00080eaa",
                "undefined4": "uint32_t"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eb0": {
            "entrypoint": "0x00080eb0",
            "current_name": "initialize_memory_00080eb0",
            "code": "\nundefined4 initializeMemory_00080eb0(undefined4 param1,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080eb0": "initialize_memory_00080eb0",
                "param_1": "param1",
                "param_2": "address"
            },
            "calling": [
                "FUN_00084494"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eba": {
            "entrypoint": "0x00080eba",
            "current_name": "determine_success_00080eba",
            "code": "\nuint32_t determine_success_00080eba(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080eba": "determine_success_00080eba",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_000844bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ebe": {
            "entrypoint": "0x00080ebe",
            "current_name": "initialize_value_00080ebe",
            "code": "\nundefined4 initialize_value_00080ebe(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ebe": "initialize_value_00080ebe"
            },
            "calling": [
                "FUN_000844e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec2": {
            "entrypoint": "0x00080ec2",
            "current_name": "clear_memory_00080ec2",
            "code": "\nundefined4 clearMemory_00080ec2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00080ec2": "clear_memory_00080ec2"
            },
            "calling": [
                "FUN_00084508"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ec8": {
            "entrypoint": "0x00080ec8",
            "current_name": "process_buffer_00080ec8",
            "code": "\n\n\nuint processBuffer_00080ec8(undefined4 param_1,int bufferAddress,uint bufferSize)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)bufferSize; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(bufferAddress + index);\n  }\n  return bufferSize & ~((int)bufferSize >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_00080ec8": "process_buffer_00080ec8",
                "param_2": "bufferAddress",
                "param_3": "bufferSize",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084244"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080eec": {
            "entrypoint": "0x00080eec",
            "current_name": "infinite_loop_00080eec",
            "code": "\nvoid infiniteLoop_00080eec(undefined4 status,undefined4 unused,undefined4 message,undefined4 unused)\n\n{\n  FUN_000817c8(\"Exiting with status %d.\\n\",status,message,unused,unused);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080eec": "infinite_loop_00080eec",
                "param_1": "status",
                "param_2": "unused",
                "param_3": "message",
                "param_4": "unused"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_000817c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080efc": {
            "entrypoint": "0x00080efc",
            "current_name": "FUNC_00080efc",
            "code": "\nvoid FUNC_00080efc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080efc": "FUNC_00080efc"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080efe": {
            "entrypoint": "0x00080efe",
            "current_name": "get_error_code_00080efe",
            "code": "\nundefined4 get_error_code_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080efe": "get_error_code_00080efe"
            },
            "calling": [
                "thunk_FUN_00080efe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_000816d8": {
            "entrypoint": "0x00080f04",
            "current_name": "get_data_value_thunk_000816d8",
            "code": "\nundefined4 get_data_value_thunk_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "thunk_FUN_000816d8": "get_data_value_thunk_000816d8"
            },
            "calling": [
                "FUN_000811e8"
            ],
            "called": [
                "FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f08": {
            "entrypoint": "0x00080f08",
            "current_name": "FUNC_00080f08",
            "code": "\nvoid FUNC_00080f08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080f08": "FUNC_00080f08"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000801e0",
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080f0c": {
            "entrypoint": "0x00080f0c",
            "current_name": "handle_operation_00080f0c",
            "code": "\n\n\nint handleOperation_00080f0c(int operation,int mode)\n\n{\n  int result;\n  uint temp;\n  undefined4 action;\n  uint mask;\n  byte lowerNibble;\n  byte value;\n  int offset;\n  int address;\n  \n  result = operation;\n  if ((&DAT_00084b50)[operation * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[operation] & 0xf) == 4) {\n      result = FUN_00080d58(0x400c0000,(&DAT_00084b5d)[operation * 0x1c]);\n    }\n    value = (&DAT_20070e1c)[operation];\n    lowerNibble = value & 0xf;\n    if ((lowerNibble < 3) && (value != 0)) {\n      if (lowerNibble == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_00080f68;\n      }\n    }\n    if (mode != 1) {\nLAB_00080f68:\n      if (mode == 0) {\n        result = operation * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),0);\n        value = (&DAT_20070e1c)[operation] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = operation * 0x1c;\n        FUN_00080aa8(*(undefined4 *)(&DAT_00084b4c + result));\n        result = FUN_00080a30(*(undefined4 *)(&DAT_00084b44 + result),3,\n                             *(undefined4 *)(&DAT_00084b48 + result),1);\n        value = (&DAT_20070e1c)[operation] & 0xf0 | 1;\n      }\n      (&DAT_20070e1c)[operation] = value;\n      return result;\n    }\n    offset = operation * 0x1c;\n    address = *(int *)(&DAT_00084b44 + offset);\n    if (value >> 4 == 0) {\n      action = 4;\n    }\n    else {\n      action = 5;\n    }\n    result = FUN_00080a30(address,action,*(undefined4 *)(&DAT_00084b48 + offset),\n                         *(undefined4 *)(&DAT_00084b54 + offset));\n    (&DAT_20070e1c)[operation] = (&DAT_20070e1c)[operation] & 0xf0 | 3;\n    if (*(int *)(address + 0x18) == -1) {\n      temp = *(uint *)(&DAT_00084b4c + offset);\n      if (0x2c < temp) {\n        return 1;\n      }\n      if (temp < 0x20) {\n        temp = 1 << (temp & 0xff);\n        mask = _DAT_400e0618 & temp;\n        if (mask == temp) {\n          _DAT_400e0614 = mask;\n        }\n      }\n      else {\n        temp = 1 << (temp - 0x20 & 0xff);\n        mask = _DAT_400e0708 & temp;\n        if (mask == temp) {\n          _DAT_400e0704 = mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080f0c": "handle_operation_00080f0c",
                "param_1": "operation",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "temp",
                "uVar3": "action",
                "uVar4": "mask",
                "bVar5": "lowerNibble",
                "bVar6": "value",
                "iVar7": "offset",
                "iVar8": "address"
            },
            "calling": [
                "FUN_00081014",
                "FUN_000806a0",
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080a30",
                "FUN_00080aa8",
                "FUN_00080d58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081014": {
            "entrypoint": "0x00081014",
            "current_name": "update_data_00081014",
            "code": "\nvoid updateData_00081014(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int ptr;\n  \n  if ((&DAT_00084b50)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070e1c)[index] & 0xf) == 5) {\n      FUN_00080f0c(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070e1c)[index] = (&DAT_20070e1c)[index] & 0xf | (byte)(value << 4);\n    ptr = *(int *)(&DAT_00084b44 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n    result = FUN_00080a94(ptr,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptr + 100) = data;\n        return;\n      }\n      *(undefined4 *)(ptr + 0x60) = data;\n      return;\n    }\n    FUN_00080a0a(ptr,data,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081014": "update_data_00081014",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "iVar1": "result",
                "uVar2": "data",
                "iVar3": "ptr"
            },
            "calling": [
                "FUN_00080250",
                "FUN_0008044c",
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080a0a",
                "FUN_00080f0c",
                "FUN_00080a94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810a6": {
            "entrypoint": "0x000810a6",
            "current_name": "execute_function_000810a6",
            "code": "\nvoid executeFunction_000810a6(int *functionPointer,int paramSize,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 result;\n  \n  if (paramSize != 0) {\n    result = FUN_00082688(paramSize);\n    (**(code **)(*functionPointer + 4))(functionPointer,paramSize,result,*(code **)(*functionPointer + 4),param2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810a6": "execute_function_000810a6",
                "param_1": "functionPointer",
                "param_2": "paramSize",
                "param_3": "param1",
                "param_4": "param2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000810c4",
                "FUN_000810d8",
                "FUN_000810fc",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810c4": {
            "entrypoint": "0x000810c4",
            "current_name": "initialize_application_000810c4",
            "code": "\nvoid initializeApplication_000810c4(void)\n\n{\n  FUN_000810a6();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810c4": "initialize_application_000810c4"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810cc": {
            "entrypoint": "0x000810cc",
            "current_name": "execute_code_000810cc",
            "code": "\nvoid executeCode_000810cc(undefined4 *functionPointer)\n\n{\n  (**(code **)*functionPointer)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810cc": "execute_code_000810cc",
                "param_1": "functionPointer"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810d8": {
            "entrypoint": "0x000810d8",
            "current_name": "initialize_data_000810d8",
            "code": "\nvoid initializeData_000810d8(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_000810a6(arg1,&DAT_00085635,arg3,arg4,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810d8": "initialize_data_000810d8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "calling": [
                "FUN_0008117a",
                "FUN_000810e8"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810e8": {
            "entrypoint": "0x000810e8",
            "current_name": "calculate_sum_000810e8",
            "code": "\nint calculateSum_000810e8(undefined4 input)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_000810a6();\n  result2 = FUN_000810d8(input);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_000810e8": "calculate_sum_000810e8",
                "param_1": "input",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810a6",
                "FUN_000810d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000810fc": {
            "entrypoint": "0x000810fc",
            "current_name": "convert_to_base_000810fc",
            "code": "\nvoid convertToBase_000810fc(undefined4 outputBuffer,uint value,uint base)\n\n{\n  char *currentChar;\n  uint quotient;\n  char *previousChar;\n  char convertedChar;\n  uint remainder;\n  char convertedValue [5];\n  \n  convertedValue[1] = 0;\n  if (base < 2) {\n    base = 10;\n  }\n  currentChar = convertedValue;\n  do {\n    previousChar = currentChar;\n    quotient = value / base;\n    remainder = value - base * quotient & 0xff;\n    convertedChar = (char)remainder;\n    if (remainder < 10) {\n      convertedChar = convertedChar + '0';\n    }\n    else {\n      convertedChar = convertedChar + '7';\n    }\n    *previousChar = convertedChar;\n    value = quotient;\n    currentChar = previousChar + -1;\n  } while (quotient != 0);\n  FUN_000810a6(outputBuffer,previousChar);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000810fc": "convert_to_base_000810fc",
                "param_1": "outputBuffer",
                "param_2": "value",
                "param_3": "base",
                "pcVar1": "currentChar",
                "uVar2": "quotient",
                "pcVar3": "previousChar",
                "cVar4": "convertedChar",
                "uVar5": "remainder",
                "local_15": "convertedValue"
            },
            "calling": [
                "FUN_0008113a"
            ],
            "called": [
                "FUN_000810a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008113a": {
            "entrypoint": "0x0008113a",
            "current_name": "format_output_0008113a",
            "code": "\nint formatOutput_0008113a(undefined4 *outputFunc,uint number,uint base,undefined4 otherParam)\n\n{\n  int result;\n  int negativeValue;\n  \n  if (base == 0) {\n    result = (**(code **)*outputFunc)(outputFunc,number & 0xff);\n    return result;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      result = FUN_000810cc(outputFunc,0x2d);\n      negativeValue = FUN_000810fc(outputFunc,-number,10);\n      return negativeValue + result;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  result = FUN_000810fc(outputFunc,number,base,otherParam);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008113a": "format_output_0008113a",
                "param_1": "outputFunc",
                "param_2": "number",
                "param_3": "base",
                "param_4": "otherParam",
                "iVar1": "result",
                "iVar2": "negativeValue"
            },
            "calling": [
                "thunk_FUN_0008113a",
                "FUN_0008117a"
            ],
            "called": [
                "FUN_000810cc",
                "FUN_000810fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0008113a": {
            "entrypoint": "0x00081176",
            "current_name": "format_and_print_number_thunk_0008113a",
            "code": "\nint formatAndPrintNumber_thunk_0008113a(undefined4 *formatBuffer,uint number,uint base,undefined4 size)\n\n{\n  int formattedNumber;\n  int negativeFlag;\n  \n  if (base == 0) {\n    formattedNumber = (**(code **)*formatBuffer)(formatBuffer,number & 0xff);\n    return formattedNumber;\n  }\n  if (base == 10) {\n    base = 10;\n    if ((int)number < 0) {\n      formattedNumber = FUN_000810cc(formatBuffer,0x2d);\n      negativeFlag = FUN_000810fc(formatBuffer,-number,10);\n      return negativeFlag + formattedNumber;\n    }\n  }\n  else {\n    base = base & 0xff;\n  }\n  formattedNumber = FUN_000810fc(formatBuffer,number,base,size);\n  return formattedNumber;\n}\n\n",
            "renaming": {
                "thunk_FUN_0008113a": "format_and_print_number_thunk_0008113a",
                "param_1": "formatBuffer",
                "param_2": "number",
                "param_3": "base",
                "param_4": "size",
                "iVar1": "formattedNumber",
                "iVar2": "negativeFlag"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008117a": {
            "entrypoint": "0x0008117a",
            "current_name": "calculate_sum_0008117a",
            "code": "\nint calculate_sum_0008117a(undefined4 input_value)\n\n{\n  int result1;\n  int result2;\n  \n  result1 = FUN_0008113a();\n  result2 = FUN_000810d8(input_value);\n  return result2 + result1;\n}\n\n",
            "renaming": {
                "FUN_0008117a": "calculate_sum_0008117a",
                "param_1": "input_value",
                "iVar1": "result1",
                "iVar2": "result2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_000810d8",
                "FUN_0008113a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081190": {
            "entrypoint": "0x00081190",
            "current_name": "execute_if_r_info_equals_zero_00081190",
            "code": "\nvoid execute_if_r_info_equals_zero_00081190(void)\n\n{\n  if ((resource_array[6]r_info != 0xffffffff) &&\n     (resource_array[6]r_info = resource_array[6]r_info - 1,\n     resource_array[6]r_info == 0)) {\n    (*(function_ptr *)((int)&resource_array[0]r_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081190": "execute_if_r_info_equals_zero_00081190",
                "Elf32_Rel_ARRAY_20070000": "resource_array",
                ".r_info": "r_info",
                ".r_offset": "r_offset",
                "code": "function_ptr"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b0": {
            "entrypoint": "0x000811b0",
            "current_name": "initialize_memory_000811b0",
            "code": "\nint initializeMemory_000811b0(int memoryAddress)\n\n{\n  FUN_00081f00(memoryAddress,0,0x80);\n  *(undefined4 *)(memoryAddress + 0x80) = 0;\n  *(undefined4 *)(memoryAddress + 0x84) = 0;\n  return memoryAddress;\n}\n\n",
            "renaming": {
                "FUN_000811b0": "initialize_memory_000811b0",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ca": {
            "entrypoint": "0x000811ca",
            "current_name": "update_and_store_value_000811ca",
            "code": "\nvoid updateAndStoreValue_000811ca(int baseAddress,undefined newValue)\n\n{\n  uint nextIndex;\n  \n  nextIndex = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (nextIndex != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = nextIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000811ca": "update_and_store_value_000811ca",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "nextIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811e8": {
            "entrypoint": "0x000811e8",
            "current_name": "verify_data_000811e8",
            "code": "\nint verify_data_000811e8(int *data)\n\n{\n  int result;\n  \n  result = thunk_FUN_000816d8();\n  data[3] = result;\n  do {\n    result = (**(code **)(*data + 0xc))(data);\n    if (-1 < result) {\n      return result;\n    }\n    result = thunk_FUN_000816d8();\n  } while ((uint)(result - data[3]) < (uint)data[2]);\n  return -1;\n}\n\n",
            "renaming": {
                "FUN_000811e8": "verify_data_000811e8",
                "param_1": "data",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "thunk_FUN_000816d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081214": {
            "entrypoint": "0x00081214",
            "current_name": "process_data_00081214",
            "code": "\nvoid processData_00081214(undefined4 dataPtr,undefined4 bufferPtr,uint target)\n\n{\n  uint returnValue;\n  \n  FUN_000814f6(dataPtr,&DAT_00085637);\n  while ((returnValue = FUN_000811e8(bufferPtr), -1 < (int)returnValue && (returnValue != target))) {\n    FUN_0008159e(dataPtr,returnValue & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081214": "process_data_00081214",
                "param_1": "dataPtr",
                "param_2": "bufferPtr",
                "param_3": "target",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008159e",
                "FUN_000811e8",
                "FUN_000814f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081248": {
            "entrypoint": "0x00081248",
            "current_name": "calculate_difference_00081248",
            "code": "\nuint calculateDifference_00081248(int input)\n\n{\n  return *(int *)(*(int *)(input + 0x10) + 0x80) - *(int *)(*(int *)(input + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_00081248": "calculate_difference_00081248",
                "param_1": "input"
            },
            "calling": [
                "FUN_00080250",
                "FUN_00080970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081276": {
            "entrypoint": "0x00081276",
            "current_name": "extract_byte_from_buffer_00081276",
            "code": "\nuint extract_byte_from_buffer_00081276(int buffer_address)\n\n{\n  byte extracted_byte;\n  int buffer_pointer;\n  \n  buffer_pointer = *(int *)(buffer_address + 0x10);\n  if (*(int *)(buffer_pointer + 0x80) != *(int *)(buffer_pointer + 0x84)) {\n    extracted_byte = *(byte *)(buffer_pointer + *(int *)(buffer_pointer + 0x84));\n    *(uint *)(buffer_pointer + 0x84) = *(int *)(buffer_pointer + 0x84) + 1U & 0x7f;\n    return (uint)extracted_byte;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081276": "extract_byte_from_buffer_00081276",
                "param_1": "buffer_address",
                "bVar1": "extracted_byte",
                "iVar2": "buffer_pointer"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000812b8": {
            "entrypoint": "0x000812b8",
            "current_name": "update_data_000812b8",
            "code": "\nundefined4 updateData_000812b8(int dataStruct,undefined4 newValue)\n\n{\n  int ptr1;\n  uint newIndex;\n  \n  ptr1 = *(int *)(dataStruct + 0x14);\n  if ((*(int *)(*(int *)(dataStruct + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptr1 + 0x84) == *(int *)(ptr1 + 0x80))) {\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(ptr1 + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptr1 + 0x84) == newIndex);\n    *(char *)(ptr1 + *(int *)(ptr1 + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataStruct + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000812b8": "update_data_000812b8",
                "param_1": "dataStruct",
                "param_2": "newValue",
                "iVar1": "ptr1",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081348": {
            "entrypoint": "0x00081348",
            "current_name": "initialize_function_parameters_00081348",
            "code": "\nvoid initializeFunctionParameters_00081348(undefined4 *functionParameters,undefined4 param2,undefined param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6)\n\n{\n  functionParameters[1] = 0;\n  functionParameters[2] = 1000;\n  functionParameters[6] = param2;\n  *functionParameters = &PTR_FUN_000812b8_1_00085650;\n  *(undefined *)(functionParameters + 7) = param3;\n  functionParameters[4] = param5;\n  functionParameters[8] = param4;\n  functionParameters[5] = param6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081348": "initialize_function_parameters_00081348",
                "param_1": "functionParameters",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6"
            },
            "calling": [
                "FUN_00081438",
                "FUN_0008089c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813dc": {
            "entrypoint": "0x000813dc",
            "current_name": "initialize_module_000813dc",
            "code": "\nvoid initializeModule_000813dc(int moduleAddress,uint pageSize)\n\n{\n  int moduleInfo1;\n  undefined4 *moduleInfo2;\n  \n  FUN_00080aa8(*(undefined4 *)(moduleAddress + 0x20));\n  moduleInfo2 = *(undefined4 **)(moduleAddress + 0x18);\n  moduleInfo2[0x48] = 0x202;\n  *moduleInfo2 = 0xac;\n  moduleInfo2[1] = 0x800;\n  moduleInfo2[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / pageSize >> 4;\n  moduleInfo2[3] = 0xffffffff;\n  moduleInfo2[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(moduleAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(moduleAddress + 0x1c) & 0x1f);\n  moduleInfo1 = *(int *)(moduleAddress + 0x10);\n  *(undefined4 *)(moduleInfo1 + 0x84) = 0;\n  *(undefined4 *)(moduleInfo1 + 0x80) = 0;\n  moduleInfo1 = *(int *)(moduleAddress + 0x14);\n  *(undefined4 *)(moduleInfo1 + 0x84) = 0;\n  *(undefined4 *)(moduleInfo1 + 0x80) = 0;\n  *moduleInfo2 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813dc": "initialize_module_000813dc",
                "param_1": "moduleAddress",
                "param_2": "pageSize",
                "iVar1": "moduleInfo1",
                "puVar2": "moduleInfo2"
            },
            "calling": [
                "FUN_000801e0"
            ],
            "called": [
                "FUN_00080aa8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081438": {
            "entrypoint": "0x00081438",
            "current_name": "initialize_pointer_00081438",
            "code": "\nundefined4 * initializePointer_00081438(undefined4 *pointer,undefined4 value)\n\n{\n  FUN_00081348();\n  *pointer = &PTR_FUN_000812b8_1_00085680;\n  pointer[9] = value;\n  return pointer;\n}\n\n",
            "renaming": {
                "FUN_00081438": "initialize_pointer_00081438",
                "param_1": "pointer",
                "param_2": "value"
            },
            "calling": [
                "FUN_0008089c"
            ],
            "called": [
                "FUN_00081348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008145c": {
            "entrypoint": "0x0008145c",
            "current_name": "calculate_interpolation_0008145c",
            "code": "\nint calculateInterpolation_0008145c(int initialValue,int startValue,int endValue,int startRange,int endRange)\n\n{\n  return (unsigned_int)((initialValue - startValue) * (endRange - startRange)) / (unsigned_int)(endValue - startValue) + startRange;\n}\n\n",
            "renaming": {
                "FUN_0008145c": "calculate_interpolation_0008145c",
                "param_1": "initialValue",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "startRange",
                "param_5": "endRange",
                "uint": "unsigned_int"
            },
            "calling": [
                "FUN_00080250",
                "FUN_000806f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081472": {
            "entrypoint": "0x00081472",
            "current_name": "execute_function_00081472",
            "code": "\nundefined4 * executeFunction_00081472(undefined4 *functionParam)\n\n{\n  FUN_00081800(*functionParam);\n  return functionParam;\n}\n\n",
            "renaming": {
                "FUN_00081472": "execute_function_00081472",
                "param_1": "functionParam"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081480": {
            "entrypoint": "0x00081480",
            "current_name": "reset_values_00081480",
            "code": "\nvoid resetValues_00081480(int *arrayPtr)\n\n{\n  if (*arrayPtr != 0) {\n    FUN_00081800();\n  }\n  *arrayPtr = 0;\n  arrayPtr[2] = 0;\n  arrayPtr[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081480": "reset_values_00081480",
                "param_1": "arrayPtr",
                "param_1[2]": "arrayPtr[2]",
                "param_1[1]": "arrayPtr[1]"
            },
            "calling": [
                "FUN_000814d0"
            ],
            "called": [
                "FUN_00081800"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081496": {
            "entrypoint": "0x00081496",
            "current_name": "update_array_if_true_00081496",
            "code": "\nint updateArrayIfTrue_00081496(int *array,int size,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = FUN_00081f9c(*array,size + 1,value1,value2,value2);\n  if (result != 0) {\n    *array = result;\n    array[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081496": "update_array_if_true_00081496",
                "param_1": "array",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814ae"
            ],
            "called": [
                "FUN_00081f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814ae": {
            "entrypoint": "0x000814ae",
            "current_name": "check_param_limits_000814ae",
            "code": "\nundefined4 check_param_limits_000814ae(int *param_array,uint limit)\n\n{\n  int error_code;\n  \n  if ((*param_array == 0) || ((uint)param_array[1] < limit)) {\n    error_code = FUN_00081496(param_array);\n    if (error_code == 0) {\n      return 0;\n    }\n    if (param_array[2] == 0) {\n      *(undefined *)*param_array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000814ae": "check_param_limits_000814ae",
                "param_1": "param_array",
                "param_2": "limit",
                "iVar1": "error_code"
            },
            "calling": [
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [
                "FUN_00081496"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814d0": {
            "entrypoint": "0x000814d0",
            "current_name": "validate_and_process_data_000814d0",
            "code": "\nundefined4 * validate_and_process_data_000814d0(undefined4 *input_array,undefined4 data_length,undefined4 data_value)\n\n{\n  int result;\n  \n  result = FUN_000814ae(input_array,data_value);\n  if (result == 0) {\n    FUN_00081480(input_array);\n  }\n  else {\n    input_array[2] = data_value;\n    FUN_000825cc(*input_array,data_length);\n  }\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_000814d0": "validate_and_process_data_000814d0",
                "param_1": "input_array",
                "param_2": "data_length",
                "param_3": "data_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000814f6"
            ],
            "called": [
                "FUN_00081480",
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814f6": {
            "entrypoint": "0x000814f6",
            "current_name": "initialize_param_array_000814f6",
            "code": "\nundefined4 * initializeParamArray_000814f6(undefined4 *array,int size)\n\n{\n  undefined4 returnValue;\n  \n  *array = 0;\n  array[1] = 0;\n  array[2] = 0;\n  if (size != 0) {\n    returnValue = FUN_00082688(size);\n    FUN_000814d0(array,size,returnValue);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000814f6": "initialize_param_array_000814f6",
                "param_1": "array",
                "param_2": "size",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_000814d0",
                "FUN_00082688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008151c": {
            "entrypoint": "0x0008151c",
            "current_name": "update_parameters_0008151c",
            "code": "\nvoid updateParameters_0008151c(int *oldParams,int *newParams)\n\n{\n  if (*oldParams != 0) {\n    if ((*newParams != 0) && ((uint)newParams[2] <= (uint)oldParams[1])) {\n      FUN_000825cc();\n      oldParams[2] = newParams[2];\n      goto skipPerformingOperation;\n    }\n    FUN_00081800();\n  }\n  *oldParams = *newParams;\n  oldParams[1] = newParams[1];\n  oldParams[2] = newParams[2];\n  *newParams = 0;\n  newParams[1] = 0;\nskipPerformingOperation:\n  newParams[2] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008151c": "update_parameters_0008151c",
                "param_1": "oldParams",
                "param_2": "newParams",
                "LAB_00081558": "skipPerformingOperation"
            },
            "calling": [
                "FUN_00081560"
            ],
            "called": [
                "FUN_00081800",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081560": {
            "entrypoint": "0x00081560",
            "current_name": "compare_and_execute_00081560",
            "code": "\nint compare_and_execute_00081560(int input_1,int input_2)\n\n{\n  if (input_1 != input_2) {\n    FUN_0008151c();\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081560": "compare_and_execute_00081560",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_0008151c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081570": {
            "entrypoint": "0x00081570",
            "current_name": "update_param_00081570",
            "code": "\nundefined4 updateParam_00081570(int *ptrArray,int value,int offset)\n\n{\n  int result;\n  int arrayElement;\n  \n  arrayElement = ptrArray[2];\n  if (value == 0) {\n    return 0;\n  }\n  if (offset != 0) {\n    result = FUN_000814ae(ptrArray,arrayElement + offset);\n    if (result == 0) {\n      return 0;\n    }\n    FUN_000825cc(*ptrArray + ptrArray[2],value);\n    ptrArray[2] = arrayElement + offset;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081570": "update_param_00081570",
                "param_1": "ptrArray",
                "param_2": "value",
                "param_3": "offset",
                "iVar1": "result",
                "iVar2": "arrayElement"
            },
            "calling": [
                "FUN_0008159e"
            ],
            "called": [
                "FUN_000814ae",
                "FUN_000825cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008159e": {
            "entrypoint": "0x0008159e",
            "current_name": "initialize_function_0008159e",
            "code": "\nvoid initializeFunction_0008159e(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  \n  localVariable2 = inputParam3;\n  FUN_00081570(inputParam1,&localVariable1,1,0,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008159e": "initialize_function_0008159e",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "local_c": "localVariable1",
                "uStack_8": "localVariable2"
            },
            "calling": [
                "FUN_00081214"
            ],
            "called": [
                "FUN_00081570"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815b8": {
            "entrypoint": "0x000815b8",
            "current_name": "check_value_range_000815b8",
            "code": "\nint check_value_range_000815b8(byte **data_pointer,byte *value_pointer)\n\n{\n  uint data_value;\n  int result;\n  \n  if (data_pointer[2] == (byte *)0x0) {\n    if (value_pointer == (byte *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    if (value_pointer != (byte *)0x0) {\n      data_value = FUN_00082390(*data_pointer);\n      goto LAB_000815d4;\n    }\n    value_pointer = *data_pointer;\n  }\n  data_value = (uint)*value_pointer;\nLAB_000815d4:\n  result = 1 - data_value;\n  if (1 < data_value) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000815b8": "check_value_range_000815b8",
                "param_1": "data_pointer",
                "param_2": "value_pointer",
                "uVar1": "data_value",
                "iVar2": "result"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00082390"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815de": {
            "entrypoint": "0x000815de",
            "current_name": "parse_number_000815de",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000827e8) */\n/* WARNING: Removing unreachable block (ram,0x000827a8) */\n/* WARNING: Removing unreachable block (ram,0x000827a0) */\n/* WARNING: Removing unreachable block (ram,0x000827da) */\n/* WARNING: Removing unreachable block (ram,0x000827ec) */\n/* WARNING: Removing unreachable block (ram,0x000827e4) */\n/* WARNING: Removing unreachable block (ram,0x000827a4) */\n/* WARNING: Removing unreachable block (ram,0x0008278a) */\n/* WARNING: Removing unreachable block (ram,0x000827c8) */\n/* WARNING: Removing unreachable block (ram,0x0008278c) */\n\nuint parseNumber_000815de(byte **byteArray)\n\n{\n  byte byteValue;\n  byte isNegative;\n  uint result;\n  byte *currentByte;\n  uint currentValue;\n  byte *previousByte;\n  int offset;\n  int isFirstDigit;\n  uint maxValue;\n  uint minValue;\n  \n  currentByte = *byteArray;\n  if (*byteArray == (byte *)0x0) {\n    return 0;\n  }\n  do {\n    previousByte = currentByte;\n    currentByte = previousByte + 1;\n    currentValue = (uint)*previousByte;\n    byteValue = *(byte *)(constantArray2 + currentValue + 1);\n    isNegative = byteValue & 8;\n  } while ((byteValue & 8) != 0);\n  if (currentValue == 0x2d) {\n    currentByte = previousByte + 2;\n    currentValue = (uint)previousByte[1];\n    isNegative = 1;\n  }\n  else if (currentValue == 0x2b) {\n    currentValue = (uint)previousByte[1];\n    currentByte = previousByte + 2;\n  }\n  if (isNegative == 0) {\n    minValue = 0x7fffffff;\n  }\n  else {\n    minValue = 0x80000000;\n  }\n  maxValue = minValue / 10;\n  isFirstDigit = 0;\n  result = 0;\n  do {\n    byteValue = *(byte *)(constantArray2 + currentValue + 1);\n    if ((byteValue & 4) == 0) {\n      if ((byteValue & 3) == 0) {\nLAB_0008277e:\n        if (isFirstDigit == -1) {\n          if (isNegative == 0) {\n            result = 0x7fffffff;\n          }\n          else {\n            result = 0x80000000;\n          }\n          *(undefined4 *)outputAddress = 0x22;\n        }\n        else if (isNegative != 0) {\n          result = -result;\n        }\n        return result;\n      }\n      if ((byteValue & 3) == 1) {\n        offset = 0x37;\n      }\n      else {\n        offset = 0x57;\n      }\n      offset = currentValue - offset;\n    }\n    else {\n      offset = currentValue - 0x30;\n    }\n    if (9 < offset) goto LAB_0008277e;\n    if (isFirstDigit != -1) {\n      if ((maxValue <= result && result != maxValue) || ((result == maxValue && ((int)(minValue % 10) < offset))))\n      {\n        isFirstDigit = -1;\n      }\n      else {\n        result = result * 10 + offset;\n        isFirstDigit = 1;\n      }\n    }\n    currentValue = (uint)*currentByte;\n    currentByte = currentByte + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815de": "parse_number_000815de",
                "param_1": "byteArray",
                "bVar1": "byteValue",
                "bVar2": "isNegative",
                "uVar3": "result",
                "pbVar4": "currentByte",
                "uVar5": "currentValue",
                "pbVar6": "previousByte",
                "iVar7": "offset",
                "iVar8": "isFirstDigit",
                "uVar9": "maxValue",
                "uVar10": "minValue",
                "Elf32_Rel_ARRAY_20070000[270].r_info": "constantArray2",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "outputAddress"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815e8": {
            "entrypoint": "0x000815e8",
            "current_name": "FUNC_000815e8",
            "code": "\nvoid FUNC_000815e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000815e8": "FUNC_000815e8"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000815ec": {
            "entrypoint": "0x000815ec",
            "current_name": "run_continuous_loop_000815ec",
            "code": "\nvoid runContinuousLoop_000815ec(void)\n\n{\n  FUN_00081618();\n  FUN_00080774();\n  FUNC_000815e8();\n  FUNC_00080f08(1);\n  FUN_000801e0();\n  do {\n    FUN_00080250();\n    FUN_00080970();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000815ec": "run_continuous_loop_000815ec"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080250",
                "FUN_00080970",
                "FUN_000801e0",
                "FUN_000815e8",
                "FUN_00081618",
                "FUN_00080f08",
                "FUN_00080774"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081618": {
            "entrypoint": "0x00081618",
            "current_name": "initialize_data_00081618",
            "code": "\n\n\nvoid initializeData_00081618(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081618": "initialize_data_00081618"
            },
            "calling": [
                "FUN_000815ec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081624": {
            "entrypoint": "0x00081624",
            "current_name": "calculate_new_value_00081624",
            "code": "\nint calculateNewValue_00081624(int index,int flag,int multiplier,undefined4 offset)\n\n{\n  int result;\n  undefined4 value;\n  \n  value = *(undefined4 *)(&DAT_00084b48 + index * 0x1c);\n  if (flag == 0) {\n    value = 0;\n  }\n  result = FUN_00081684(*(int *)(&DAT_00084b44 + index * 0x1c) + 0x3c,\n                       *(undefined4 *)(&DAT_00084b48 + index * 0x1c),value,\n                       ((relArray[6].r_offset / 1000000) * multiplier) / 0x12,offset);\n  if (result != 0) {\n    result = (int)((ulonglong)(result * 18000 + 16000) /\n                 ((ulonglong)relArray[6].r_offset / 1000));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081624": "calculate_new_value_00081624",
                "param_1": "index",
                "param_2": "flag",
                "param_3": "multiplier",
                "param_4": "offset",
                "iVar1": "result",
                "uVar2": "value",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_00080250"
            ],
            "called": [
                "FUN_00081684"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081684": {
            "entrypoint": "0x00081684",
            "current_name": "check_and_count_00081684",
            "code": "\nint check_and_count_00081684(uint *data,uint mask,uint value,int max_count)\n\n{\n  int count;\n  \n  do {\n    if ((*data & mask) != value) {\n      do {\n        if ((*data & mask) == value) {\n          count = 0;\n          do {\n            if ((*data & mask) != value) {\n              return count;\n            }\n            count = count + 1;\n          } while (max_count != count);\n          return 0;\n        }\n        max_count = max_count + -1;\n      } while (max_count != 0);\n      return 0;\n    }\n    max_count = max_count + -1;\n  } while (max_count != 0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081684": "check_and_count_00081684",
                "param_1": "data",
                "param_2": "mask",
                "param_3": "value",
                "param_4": "max_count",
                "iVar1": "count"
            },
            "calling": [
                "FUN_00081624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d8": {
            "entrypoint": "0x000816d8",
            "current_name": "get_data_value_000816d8",
            "code": "\nundefined4 get_data_value_000816d8(void)\n\n{\n  return DAT_2007120c;\n}\n\n",
            "renaming": {
                "FUN_000816d8": "get_data_value_000816d8"
            },
            "calling": [
                "thunk_FUN_000816d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816ec": {
            "entrypoint": "0x000816ec",
            "current_name": "update_data_000816ec",
            "code": "\nvoid updateData_000816ec(dword data1,dword data2,dword data3)\n\n{\n  dword *ptrToData;\n  uint index;\n  uint bitMask;\n  code *jumpTable;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  ptrToData = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    ptrToData = (dword *)FUN_000817f0(400);\n    if (ptrToData == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*jumpTable)(0xffffffff);\n      return;\n    }\n    *ptrToData = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    ptrToData[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)ptrToData;\n    ptrToData[0x62] = 0;\n    ptrToData[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  ptrToData[index + 0x22] = data1;\n  ptrToData[0x62] = ptrToData[0x62] | bitMask;\n  ptrToData[index + 0x42] = data3;\n  ptrToData[99] = bitMask | ptrToData[99];\n  ptrToData[1] = index + 1;\n  ptrToData[index + 2] = data2;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816ec": "update_data_000816ec",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "pdVar1": "ptrToData",
                "uVar2": "index",
                "uVar3": "bitMask",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816f8": {
            "entrypoint": "0x000816f8",
            "current_name": "print_assertion_failed_message_000816f8",
            "code": "\nvoid printAssertionFailedMessage_000816f8(undefined4 file,undefined4 line,char *assertion,undefined4 function)\n\n{\n  undefined4 assertionFile;\n  undefined4 functionVar;\n  char *extraInfo;\n  undefined8 timestamp;\n  \n  assertionFile = *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0xc);\n  if (assertion == (char *)0x0) goto LAB_0008171c;\n  functionVar = function;\n  extraInfo = \", function: \";\n  do {\n    function = file;\n    FUN_00081750(assertionFile,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",functionVar,file,line,\n                 extraInfo,assertion);\n    timestamp = FUN_000836ec();\n    line = (undefined4)((ulonglong)timestamp >> 0x20);\n    assertionFile = (undefined4)timestamp;\nLAB_0008171c:\n    assertion = \"\";\n    functionVar = function;\n    extraInfo = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816f8": "print_assertion_failed_message_000816f8",
                "param_1": "file",
                "param_2": "line",
                "param_3": "assertion",
                "param_4": "function",
                "uVar1": "assertionFile",
                "uVar2": "functionVar",
                "pcVar3": "extraInfo",
                "uVar4": "timestamp"
            },
            "calling": [
                "FUN_000803fc",
                "FUN_00080b2c"
            ],
            "called": [
                "FUN_00081750",
                "FUN_000836ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081750": {
            "entrypoint": "0x00081750",
            "current_name": "execute_relocation_00081750",
            "code": "\nvoid executeRelocation_00081750(undefined4 offset,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  \n  value1 = arg2;\n  value2 = arg3;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,offset,arg1,&value1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081750": "execute_relocation_00081750",
                "param_1": "offset",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "uStack_8": "value1",
                "uStack_4": "value2"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081778": {
            "entrypoint": "0x00081778",
            "current_name": "execute_code_blocks_00081778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081784) */\n/* WARNING: Removing unreachable block (ram,0x00081788) */\n/* WARNING: Removing unreachable block (ram,0x000817b4) */\n\nvoid executeCodeBlocks_00081778(void)\n\n{\n  int blockIndex;\n  code **codeBlocks;\n  \n  FUNC_00085844();\n  codeBlocks = (code **)0x8584c;\n  blockIndex = 0;\n  do {\n    blockIndex = blockIndex + 1;\n    codeBlocks = codeBlocks + 1;\n    (**codeBlocks)();\n  } while (blockIndex != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081778": "execute_code_blocks_00081778",
                "iVar1": "blockIndex",
                "ppcVar2": "codeBlocks"
            },
            "calling": [
                "FUN_00080774"
            ],
            "called": [
                "FUN_00080118",
                "FUN_00085844",
                "FUN_000836d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817c8": {
            "entrypoint": "0x000817c8",
            "current_name": "process_data_000817c8",
            "code": "\nvoid processData_000817c8(undefined4 data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 stackC;\n  undefined4 stack8;\n  undefined4 stack4;\n  \n  stackC = param2;\n  stack8 = param3;\n  stack4 = param4;\n  FUN_0008289c(Elf32_Rel_ARRAY_20070000[140].r_offset,\n               *(undefined4 *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 8),data,&stackC);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817c8": "process_data_000817c8",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_c": "stackC",
                "uStack_8": "stack8",
                "uStack_4": "stack4"
            },
            "calling": [
                "FUN_00080eec"
            ],
            "called": [
                "FUN_0008289c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000817f0": {
            "entrypoint": "0x000817f0",
            "current_name": "apply_relocations_000817f0",
            "code": "\nvoid applyRelocations_000817f0(undefined4 param)\n\n{\n  FUN_00081810(relocationArray[140].r_offset,param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000817f0": "apply_relocations_000817f0",
                "param_1": "param",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00081810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081800": {
            "entrypoint": "0x00081800",
            "current_name": "process_elf_relocation_00081800",
            "code": "\nvoid processElfRelocation_00081800(undefined4 arg)\n\n{\n  FUN_00083b10(relArray[140].r_offset,arg);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081800": "process_elf_relocation_00081800",
                "param_1": "arg",
                "Elf32_Rel_ARRAY_20070000": "relArray"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_00081472",
                "FUN_00081480"
            ],
            "called": [
                "FUN_00083b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081810": {
            "entrypoint": "0x00081810",
            "current_name": "allocate_memory_block_00081810",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_00081810(undefined4 *block_address,uint block_size)\n\n{\n  dword index1;\n  int index2;\n  uint temp1;\n  uint temp2;\n  int iVar1;\n  uint uVar1;\n  dword index3;\n  uint uVar2;\n  int iVar3;\n  undefined *ptr1;\n  dword temp3;\n  dword temp4;\n  int iVar4;\n  dword *ptr2;\n  uint temp5;\n  undefined *ptr3;\n  dword *ptr4;\n  uint temp6;\n  \n  if (block_size + 0xb < 0x17) {\n    temp5 = 0x10;\n    if (0x10 < block_size) goto LAB_00081876;\n  }\n  else {\n    temp5 = block_size + 0xb & 0xfffffff8;\n    if (((int)temp5 < 0) || (temp5 < block_size)) {\nLAB_00081876:\n      *block_address = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00081f94(block_address);\n  index1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (temp5 < 0x1f8) {\n    iVar4 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + temp5);\n    if ((iVar4 != temp5 + 0x20070464) ||\n       (index2 = iVar4 + 8, iVar4 = *(int *)(iVar4 + 0x14), index2 != iVar4)) {\n      iVar1 = *(int *)(iVar4 + 0xc);\n      iVar3 = (*(uint *)(iVar4 + 4) & 0xfffffffc) + iVar4;\n      temp5 = *(uint *)(iVar3 + 4);\n      index2 = *(int *)(iVar4 + 8);\n      *(int *)(index2 + 0xc) = iVar1;\n      *(int *)(iVar1 + 8) = index2;\n      *(uint *)(iVar3 + 4) = temp5 | 1;\n      FUNC_00081f98(block_address);\n      return (int *)(iVar4 + 8);\n    }\n    temp6 = (temp5 >> 3) + 2;\n  }\n  else {\n    temp6 = temp5 >> 9;\n    if (temp6 == 0) {\n      index2 = 0x7e;\n      iVar4 = 0x3f;\n    }\n    else if (temp6 < 5) {\n      iVar4 = (temp5 >> 6) + 0x38;\n      index2 = iVar4 * 2;\n    }\n    else if (temp6 < 0x15) {\n      iVar4 = temp6 + 0x5b;\n      index2 = iVar4 * 2;\n    }\n    else if (temp6 < 0x55) {\n      iVar4 = (temp5 >> 0xc) + 0x6e;\n      index2 = iVar4 * 2;\n    }\n    else if (temp6 < 0x155) {\n      iVar4 = (temp5 >> 0xf) + 0x77;\n      index2 = iVar4 * 2;\n    }\n    else if (temp6 < 0x555) {\n      iVar4 = (temp5 >> 0x12) + 0x7c;\n      index2 = iVar4 * 2;\n    }\n    else {\n      index2 = 0xfc;\n      iVar4 = 0x7e;\n    }\n    for (index3 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[index2]; index2 * 4 + 0x20070464U != index3\n        ; index3 = *(dword *)(index3 + 0xc)) {\n      temp6 = *(uint *)(index3 + 4) & 0xfffffffc;\n      iVar1 = temp6 - temp5;\n      if (0xf < iVar1) {\n        iVar4 = iVar4 + -1;\n        break;\n      }\n      if (-1 < iVar1) {\n        index2 = temp6 + index3;\n        temp5 = *(uint *)(index2 + 4);\n        iVar1 = *(int *)(index3 + 0xc);\n        iVar4 = *(int *)(index3 + 8);\n        *(int *)(iVar4 + 0xc) = iVar1;\n        *(int *)(iVar1 + 8) = iVar4;\n        *(uint *)(index2 + 4) = temp5 | 1;\n        FUNC_00081f98(block_address);\n        return (int *)(index3 + 8);\n      }\n    }\n    temp6 = iVar4 + 1;\n  }\n  index3 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp1 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp2 = temp1 & 0xfffffffc;\n    uVar1 = temp2 - temp5;\n    if (0xf < (int)uVar1) {\n      index3 = temp5 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = temp5 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = index3;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = index3;\n      *(undefined4 *)(index3 + 0xc) = 0x2007046c;\n      *(undefined4 *)(index3 + 8) = 0x2007046c;\n      *(uint *)(index3 + 4) = uVar1 | 1;\n      *(uint *)(index3 + uVar1) = uVar1;\n      FUNC_00081f98(block_address);\n      return (int *)(index1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)uVar1) {\n      *(uint *)(temp2 + index1 + 4) = *(uint *)(temp2 + index1 + 4) | 1;\n      FUNC_00081f98(block_address);\n      return (int *)(index1 + 8);\n    }\n    if (temp2 < 0x200) {\n      temp2 = temp1 & 0xfffffff8;\n      iVar4 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp2);\n      index3 = 1 << ((int)(temp1 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(index1 + 8) = iVar4;\n      *(uint *)(index1 + 0xc) = temp2 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = index3;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp2) = index1;\n      *(dword *)(iVar4 + 0xc) = index1;\n    }\n    else {\n      uVar1 = temp1 >> 9;\n      if (uVar1 < 5) {\n        index2 = (temp1 >> 6) + 0x38;\n        iVar4 = index2 * 2;\n      }\n      else if (uVar1 < 0x15) {\n        index2 = uVar1 + 0x5b;\n        iVar4 = index2 * 2;\n      }\n      else if (uVar1 < 0x55) {\n        index2 = (temp1 >> 0xc) + 0x6e;\n        iVar4 = index2 * 2;\n      }\n      else if (uVar1 < 0x155) {\n        index2 = (temp1 >> 0xf) + 0x77;\n        iVar4 = index2 * 2;\n      }\n      else if (uVar1 < 0x555) {\n        index2 = (temp1 >> 0x12) + 0x7c;\n        iVar4 = index2 * 2;\n      }\n      else {\n        iVar4 = 0xfc;\n        index2 = 0x7e;\n      }\n      index3 = iVar4 * 4 + 0x20070464;\n      temp3 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[iVar4];\n      if (temp3 == index3) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index2 >> 2 & 0xffU);\n        temp4 = temp3;\n      }\n      else {\n        do {\n          temp4 = temp3;\n          if ((*(uint *)(temp3 + 4) & 0xfffffffc) <= temp2) break;\n          temp3 = *(dword *)(temp3 + 8);\n          temp4 = temp3;\n        } while (index3 != temp3);\n        temp3 = *(dword *)(temp4 + 0xc);\n      }\n      index3 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(index1 + 0xc) = temp3;\n      *(dword *)(index1 + 8) = temp4;\n      *(dword *)(temp3 + 8) = index1;\n      *(dword *)(temp4 + 0xc) = index1;\n    }\n  }\n  index1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp1 = 1 << ((int)temp6 >> 2 & 0xffU);\n  if (temp1 <= index3) {\n    if ((index3 & temp1) == 0) {\n      temp6 = temp6 & 0xfffffffc;\n      do {\n        temp1 = temp1 << 1;\n        temp6 = temp6 + 4;\n      } while ((index3 & temp1) == 0);\n    }\n    do {\n      ptr4 = &Elf32_Rel_ARRAY_20070000[temp6 + 0x8c].r_info;\n      ptr2 = ptr4;\n      temp2 = temp6;\n      do {\n        for (ptr1 = (undefined *)ptr2[3]; ptr2 != (dword *)ptr1;\n            ptr1 = *(undefined **)(ptr1 + 0xc)) {\n          uVar1 = *(uint *)(ptr1 + 4) & 0xfffffffc;\n          uVar2 = uVar1 - temp5;\n          if (0xf < (int)uVar2) {\n            index2 = *(int *)(ptr1 + 8);\n            iVar4 = *(int *)(ptr1 + 0xc);\n            ptr3 = ptr1 + temp5;\n            *(uint *)(ptr1 + 4) = temp5 | 1;\n            *(int *)(index2 + 0xc) = iVar4;\n            *(int *)(iVar4 + 8) = index2;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)ptr3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)ptr3;\n            *(undefined4 *)(ptr3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(ptr3 + 8) = 0x2007046c;\n            *(uint *)(ptr3 + 4) = uVar2 | 1;\n            *(uint *)(ptr3 + uVar2) = uVar2;\n            FUNC_00081f98(block_address);\n            return (int *)(ptr1 + 8);\n          }\n          if (-1 < (int)uVar2) {\n            iVar4 = *(int *)(ptr1 + 8);\n            index2 = *(int *)(ptr1 + 0xc);\n            *(uint *)(ptr1 + uVar1 + 4) = *(uint *)(ptr1 + uVar1 + 4) | 1;\n            *(int *)(iVar4 + 0xc) = index2;\n            *(int *)(index2 + 8) = iVar4;\n            FUNC_00081f98(block_address);\n            return (int *)(ptr1 + 8);\n          }\n        }\n        temp2 = temp2 + 1;\n        ptr2 = ptr2 + 2;\n      } while ((temp2 & 3) != 0);\n      do {\n        uVar1 = temp6 & 3;\n        ptr1 = (undefined *)(ptr4 + -2);\n        temp6 = temp6 - 1;\n        if (uVar1 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp1;\n          break;\n        }\n        ptr4 = (dword *)*ptr4;\n      } while (ptr4 == (dword *)ptr1);\n      temp1 = temp1 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp1 &&\n           temp1 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp6 = temp2, temp1 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp1) == 0; temp1 = temp1 << 1) {\n        temp6 = temp6 + 4;\n      }\n    } while( true );\n  }\n  temp6 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((temp5 <= temp6) &&\n     (temp1 = temp6 - temp5, index3 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp1))\n  goto LAB_00081b1a;\n  temp1 = Elf32_Rel_ARRAY_20070000[141].r_info + temp6;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp2 = temp5 + DAT_20071218 + 0x10;\n  }\n  else {\n    temp2 = temp5 + DAT_20071218 + 0x100f & 0xfffff000;\n  }\n  index3 = FUN_0008236c(block_address,temp2);\n  if ((index3 == 0xffffffff) || ((index3 < temp1 && (index1 != 0x20070464)))) {\n    temp6 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    index3 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    uVar1 = DAT_2007121c + temp2;\n    DAT_2007121c = uVar1;\n    if ((temp1 == index3) && ((temp1 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp2 + temp6 | 1;\n    }\n    else {\n      temp3 = index3;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp3 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_2007121c = uVar1 + (index3 - temp1);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp3;\n      temp1 = index3 & 7;\n      if (temp1 == 0) {\n        iVar4 = 0x1000;\n      }\n      else {\n        index3 = index3 + (8 - temp1);\n        iVar4 = 0x1008 - temp1;\n      }\n      iVar4 = iVar4 - (temp2 + index3 & 0xfff);\n      index2 = FUN_0008236c(block_address,iVar4);\n      if (index2 == -1) {\n        temp1 = 1;\n        iVar4 = 0;\n      }\n      else {\n        temp1 = (index2 - index3) + iVar4 | 1;\n      }\n      uVar1 = DAT_2007121c + iVar4;\n      Elf32_Rel_ARRAY_20070000[141].r_info = index3;\n      DAT_2007121c = uVar1;\n      *(uint *)(index3 + 4) = temp1;\n      if (index1 != 0x20070464) {\n        if (temp6 < 0x10) {\n          *(undefined4 *)(index3 + 4) = 1;\n          temp6 = 0;\n          goto LAB_00081b04;\n        }\n        temp6 = temp6 - 0xc & 0xfffffff8;\n        *(uint *)(index1 + 4) = temp6 | *(uint *)(index1 + 4) & 1;\n        *(undefined4 *)(index1 + temp6 + 4) = 5;\n        *(undefined4 *)(index1 + temp6 + 8) = 5;\n        if (0xf < temp6) {\n          FUN_00083b10(block_address,index1 + 8);\n          uVar1 = DAT_2007121c;\n        }\n      }\n    }\n    if (DAT_20071214 < uVar1) {\n      DAT_20071214 = uVar1;\n    }\n    if (DAT_20071210 < uVar1) {\n      DAT_20071210 = uVar1;\n    }\n    temp6 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    index3 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00081b04:\n  temp1 = temp6 - temp5;\n  if ((temp6 < temp5) || ((int)temp1 < 0x10)) {\n    FUNC_00081f98(block_address);\n    return (int *)0x0;\n  }\nLAB_00081b1a:\n  Elf32_Rel_ARRAY_20070000[141].r_info = temp5 + index3;\n  *(uint *)(index3 + 4) = temp5 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp1 | 1;\n  FUNC_00081f98(block_address);\n  return (int *)(index3 + 8);\n}\n\n",
            "renaming": {
                "FUN_00081810": "allocate_memory_block_00081810",
                "param_1": "block_address",
                "param_2": "block_size",
                "dVar1": "index1",
                "iVar2": "index2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "iVar5": "iVar1",
                "uVar6": "uVar1",
                "dVar7": "index3",
                "uVar8": "uVar2",
                "iVar9": "iVar3",
                "puVar10": "ptr1",
                "dVar11": "temp3",
                "dVar12": "temp4",
                "iVar13": "iVar4",
                "pdVar14": "ptr2",
                "uVar15": "temp5",
                "puVar16": "ptr3",
                "pdVar17": "ptr4",
                "uVar18": "temp6"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00084018",
                "FUN_00083ca8",
                "FUN_000817f0"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d48": {
            "entrypoint": "0x00081d48",
            "current_name": "copy_memory_00081d48",
            "code": "\nundefined4 * copyMemory_00081d48(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint remaining;\n  uint copySize;\n  bool isMore;\n  \n  srcPtr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      copySize = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          tempPtr = srcPtr;\n          isMore = copySize != 0;\n          copySize = copySize - 1;\n          *(undefined *)tempPtr = *(undefined *)destPtr;\n          srcPtr = (undefined4 *)((int)tempPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (isMore);\n        *(undefined *)(undefined4 *)((int)tempPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)tempPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)tempPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto smallCopyLoop;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copySize = 4 - ((uint)destination & 3);\n      length = length - copySize;\n      destPtr = destination;\n      tempPtr = source;\n      if (((uint)destination & 1) != 0) {\n        tempPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      srcPtr = destPtr;\n      source = tempPtr;\n      if ((copySize & 2) != 0) {\n        source = (undefined4 *)((int)tempPtr + 2);\n        srcPtr = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)tempPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *srcPtr = *source;\n    srcPtr[1] = source[1];\n    srcPtr[2] = source[2];\n    srcPtr[3] = source[3];\n    srcPtr[4] = source[4];\n    srcPtr[5] = source[5];\n    srcPtr[6] = source[6];\n    srcPtr[7] = source[7];\n    srcPtr[8] = source[8];\n    srcPtr[9] = source[9];\n    srcPtr[10] = source[10];\n    srcPtr[0xb] = source[0xb];\n    srcPtr[0xc] = source[0xc];\n    srcPtr[0xd] = source[0xd];\n    srcPtr[0xe] = source[0xe];\n    srcPtr[0xf] = source[0xf];\n    srcPtr = srcPtr + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remaining = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *srcPtr = *source;\n      srcPtr[1] = source[1];\n      srcPtr[2] = source[2];\n      srcPtr[3] = source[3];\n      srcPtr = srcPtr + 4;\n      source = source + 4;\n      isMore = 0xf < remaining;\n      remaining = remaining - 0x10;\n    } while (isMore);\n  }\n  copySize = remaining + 0xc;\n  tempPtr = srcPtr;\n  destPtr = source;\n  if (0xfffffff3 < remaining) {\n    do {\n      source = destPtr + 1;\n      *tempPtr = *destPtr;\n      isMore = 3 < copySize;\n      copySize = copySize - 4;\n      srcPtr = tempPtr + 1;\n      tempPtr = tempPtr + 1;\n      destPtr = source;\n    } while (isMore);\n  }\nsmallCopyLoop:\n  if (copySize + 4 != 0) {\n    destPtr = srcPtr;\n    tempPtr = source;\n    if ((copySize & 1) != 0) {\n      tempPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)srcPtr + 1);\n      *(undefined *)srcPtr = *(undefined *)source;\n    }\n    if ((copySize + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)tempPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00081d48": "copy_memory_00081d48",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "srcPtr",
                "puVar3": "tempPtr",
                "uVar4": "remaining",
                "uVar5": "copySize",
                "bVar6": "isMore",
                "LAB_00081dcc": "smallCopyLoop"
            },
            "calling": [
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e34": {
            "entrypoint": "0x00081e34",
            "current_name": "copy_memory_00081e34",
            "code": "\nvoid copyMemory_00081e34(undefined4 *dest,undefined4 *src,uint length)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempDestPtr;\n  uint tempLength;\n  undefined *tempSrcPtr;\n  uint temp;\n  \n  if ((src < dest) && (tempDestPtr = (undefined4 *)((int)src + length), dest < tempDestPtr)) {\n    tempSrcPtr = (undefined *)((int)dest + length);\n    index = length - 1;\n    if (length != 0) {\n      do {\n        tempDestPtr = (undefined4 *)((int)tempDestPtr + -1);\n        index = index + -1;\n        tempSrcPtr = tempSrcPtr + -1;\n        *tempSrcPtr = *(undefined *)tempDestPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (length < 0x10) {\n    if (length == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    tempDestPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = tempDestPtr + 4;\n      *tempDestPtr = *srcPtr;\n      tempDestPtr[1] = srcPtr[1];\n      tempDestPtr[2] = srcPtr[2];\n      tempDestPtr[3] = srcPtr[3];\n      tempDestPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (length - 0x10 & 0xfffffff0) + 0x10));\n    index = (length - 0x10 >> 4) + 1;\n    temp = length & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    tempLength = temp;\n    tempDestPtr = dest;\n    srcPtr = src;\n    if (3 < temp) {\n      do {\n        tempLength = tempLength - 4;\n        *tempDestPtr = *srcPtr;\n        tempDestPtr = tempDestPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempLength);\n      index = (temp - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      temp = length & 3;\n    }\n    length = temp;\n    if (length == 0) {\n      return;\n    }\n  }\n  tempDestPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)tempDestPtr + 1);\n    *(undefined *)tempDestPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    tempDestPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(length + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e34": "copy_memory_00081e34",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempDestPtr",
                "puVar6": "tempSrcPtr",
                "uVar5": "tempLength",
                "uVar7": "temp"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f00": {
            "entrypoint": "0x00081f00",
            "current_name": "copy_and_fill_memory_00081f00",
            "code": "\nvoid copyAndFillMemory_00081f00(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 filled_value;\n  uint remaining_size;\n  bool is_zero_size;\n  \n  if (((uint)destination & 3) != 0) {\n    is_zero_size = size == 0;\n    dest_ptr = destination;\n    size = size - 1;\n    if (is_zero_size) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)destination & 3) == 0) break;\n      is_zero_size = size == 0;\n      dest_ptr = destination;\n      size = size - 1;\n      if (is_zero_size) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    filled_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = destination;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = filled_value;\n        dest_ptr[1] = filled_value;\n        dest_ptr[2] = filled_value;\n        dest_ptr[3] = filled_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = destination;\n      if (size < 4) goto LAB_00081f7c;\n    }\n    do {\n      size = size - 4;\n      *destination = filled_value;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nLAB_00081f7c:\n  if (size != 0) {\n    dest_ptr = destination;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f00": "copy_and_fill_memory_00081f00",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "filled_value",
                "uVar4": "remaining_size",
                "bVar5": "is_zero_size"
            },
            "calling": [
                "FUN_000811b0",
                "FUN_00083888"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081f94": {
            "entrypoint": "0x00081f94",
            "current_name": "FUNC_00081f94",
            "code": "\nvoid FUNC_00081f94(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f94": "FUNC_00081f94"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f98": {
            "entrypoint": "0x00081f98",
            "current_name": "FUNC_00081f98",
            "code": "\nvoid FUNC_00081f98(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f98": "FUNC_00081f98"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00083a74"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081f9c": {
            "entrypoint": "0x00081f9c",
            "current_name": "process_elf32_rel_entry_00081f9c",
            "code": "\nvoid process_elf32_rel_entry_00081f9c(undefined4 target_address,undefined4 param_2)\n\n{\n  FUN_00081fac(relocation_array[140].r_offset,target_address,param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081f9c": "process_elf32_rel_entry_00081f9c",
                "param_1": "target_address",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00081496"
            ],
            "called": [
                "FUN_00081fac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081fac": {
            "entrypoint": "0x00081fac",
            "current_name": "allocate_memory_00081fac",
            "code": "\nint * allocateMemory_00081fac(undefined4 *memoryPool,int *allocatedMemory,uint size)\n\n{\n  dword tempVar;\n  int *resultPointer;\n  uint tempVar2;\n  int tempVar3;\n  uint allocatedSize;\n  int tempVar4;\n  int *tempPointer;\n  uint alignedSize;\n  uint sizeToAllocate;\n  int *tempPointer2;\n  \n  if (allocatedMemory == (int *)0x0) {\n    resultPointer = (int *)FUN_00081810(memoryPool,size);\n    return resultPointer;\n  }\n  FUNC_00081f94();\n  allocatedSize = allocatedMemory[-1];\n  alignedSize = allocatedSize & 0xfffffffc;\n  resultPointer = allocatedMemory + -2;\n  if (size + 0xb < 0x17) {\n    sizeToAllocate = 0x10;\n  }\n  else {\n    sizeToAllocate = size + 0xb & 0xfffffff8;\n    if ((int)sizeToAllocate < 0) goto LAB_00082078;\n  }\n  if (sizeToAllocate < size) {\nLAB_00082078:\n    *memoryPool = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)alignedSize < (int)sizeToAllocate) {\n    tempVar = (int)resultPointer + alignedSize;\n    if (relocationArray[141].r_info == tempVar) {\n      tempVar2 = *(uint *)(relocationArray[141].r_info + 4) & 0xfffffffc;\n      tempVar = relocationArray[141].r_info;\n      if ((int)(sizeToAllocate + 0x10) <= (int)(tempVar2 + alignedSize)) {\n        relocationArray[141].r_info = (int)resultPointer + sizeToAllocate;\n        *(uint *)(relocationArray[141].r_info + 4) = (tempVar2 + alignedSize) - sizeToAllocate | 1;\n        allocatedMemory[-1] = sizeToAllocate | allocatedMemory[-1] & 1U;\n        FUNC_00081f98(memoryPool);\n        return allocatedMemory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(tempVar + 4) & 0xfffffffe) + tempVar + 4) & 1) == 0) {\n      tempVar2 = *(uint *)(tempVar + 4) & 0xfffffffc;\n      if ((int)sizeToAllocate <= (int)(tempVar2 + alignedSize)) {\n        tempVar4 = *(int *)(tempVar + 0xc);\n        tempVar3 = *(int *)(tempVar + 8);\n        *(int *)(tempVar3 + 0xc) = tempVar4;\n        *(int *)(tempVar4 + 8) = tempVar3;\n        alignedSize = tempVar2 + alignedSize;\n        goto LAB_00082088;\n      }\n    }\n    else {\n      tempVar2 = 0;\n      tempVar = 0;\n    }\n    if (-1 < (int)(allocatedSize << 0x1f)) {\n      tempPointer2 = (int *)((int)resultPointer - allocatedMemory[-2]);\n      allocatedSize = (tempPointer2[1] & 0xfffffffcU) + alignedSize;\n      if (tempVar != 0) {\n        if (tempVar == relocationArray[141].r_info) {\n          if ((int)(sizeToAllocate + 0x10) <= (int)(tempVar2 + allocatedSize)) {\n            resultPointer = tempPointer2 + 2;\n            tempVar3 = *resultPointer;\n            tempVar4 = tempPointer2[3];\n            alignedSize = alignedSize - 4;\n            *(int *)(tempVar3 + 0xc) = tempVar4;\n            *(int *)(tempVar4 + 8) = tempVar3;\n            if (alignedSize < 0x25) {\n              tempPointer = resultPointer;\n              if (0x13 < alignedSize) {\n                tempPointer2[2] = *allocatedMemory;\n                tempPointer2[3] = allocatedMemory[1];\n                if (alignedSize < 0x1c) {\n                  allocatedMemory = allocatedMemory + 2;\n                  tempPointer = tempPointer2 + 4;\n                }\n                else {\n                  tempPointer2[4] = allocatedMemory[2];\n                  tempPointer2[5] = allocatedMemory[3];\n                  if (alignedSize == 0x24) {\n                    tempPointer2[6] = allocatedMemory[4];\n                    tempPointer = allocatedMemory + 5;\n                    allocatedMemory = allocatedMemory + 6;\n                    tempPointer2[7] = *tempPointer;\n                    tempPointer = tempPointer2 + 8;\n                  }\n                  else {\n                    allocatedMemory = allocatedMemory + 4;\n                    tempPointer = tempPointer2 + 6;\n                  }\n                }\n              }\n              *tempPointer = *allocatedMemory;\n              tempPointer[1] = allocatedMemory[1];\n              tempPointer[2] = allocatedMemory[2];\n            }\n            else {\n              FUN_00081e34(resultPointer,allocatedMemory);\n            }\n            relocationArray[141].r_info = (int)tempPointer2 + sizeToAllocate;\n            *(uint *)(relocationArray[141].r_info + 4) = (tempVar2 + allocatedSize) - sizeToAllocate | 1;\n            tempPointer2[1] = sizeToAllocate | tempPointer2[1] & 1U;\n            FUNC_00081f98(memoryPool);\n            return resultPointer;\n          }\n        }\n        else {\n          tempVar2 = tempVar2 + allocatedSize;\n          if ((int)sizeToAllocate <= (int)tempVar2) {\n            tempVar4 = *(int *)(tempVar + 0xc);\n            tempVar3 = *(int *)(tempVar + 8);\n            *(int *)(tempVar3 + 0xc) = tempVar4;\n            *(int *)(tempVar4 + 8) = tempVar3;\n            tempPointer = tempPointer2 + 2;\n            tempVar3 = *tempPointer;\n            tempVar4 = tempPointer2[3];\n            allocatedSize = alignedSize - 4;\n            *(int *)(tempVar3 + 0xc) = tempVar4;\n            *(int *)(tempVar4 + 8) = tempVar3;\n            alignedSize = tempVar2;\n            if (allocatedSize < 0x25) {\n              resultPointer = tempPointer;\n              if (0x13 < allocatedSize) {\n                tempPointer2[2] = *allocatedMemory;\n                tempPointer2[3] = allocatedMemory[1];\n                if (allocatedSize < 0x1c) {\n                  allocatedMemory = allocatedMemory + 2;\n                  resultPointer = tempPointer2 + 4;\n                }\n                else {\n                  tempPointer2[4] = allocatedMemory[2];\n                  tempPointer2[5] = allocatedMemory[3];\n                  if (allocatedSize == 0x24) {\n                    tempPointer2[6] = allocatedMemory[4];\n                    resultPointer = allocatedMemory + 5;\n                    allocatedMemory = allocatedMemory + 6;\n                    tempPointer2[7] = *resultPointer;\n                    resultPointer = tempPointer2 + 8;\n                  }\n                  else {\n                    allocatedMemory = allocatedMemory + 4;\n                    resultPointer = tempPointer2 + 6;\n                  }\n                }\n              }\n              *resultPointer = *allocatedMemory;\n              resultPointer[1] = allocatedMemory[1];\n              resultPointer[2] = allocatedMemory[2];\n              allocatedSize = tempPointer2[1];\n              resultPointer = tempPointer2;\n              allocatedMemory = tempPointer;\n            }\n            else {\n              FUN_00081e34(tempPointer,allocatedMemory);\n              allocatedSize = tempPointer2[1];\n              resultPointer = tempPointer2;\n              allocatedMemory = tempPointer;\n            }\n            goto LAB_00082088;\n          }\n        }\n      }\n      if ((int)sizeToAllocate <= (int)allocatedSize) {\n        tempPointer = tempPointer2 + 2;\n        tempVar3 = *tempPointer;\n        tempVar4 = tempPointer2[3];\n        tempVar2 = alignedSize - 4;\n        *(int *)(tempVar3 + 0xc) = tempVar4;\n        *(int *)(tempVar4 + 8) = tempVar3;\n        alignedSize = allocatedSize;\n        if (tempVar2 < 0x25) {\n          resultPointer = tempPointer;\n          if (0x13 < tempVar2) {\n            tempPointer2[2] = *allocatedMemory;\n            tempPointer2[3] = allocatedMemory[1];\n            if (tempVar2 < 0x1c) {\n              allocatedMemory = allocatedMemory + 2;\n              resultPointer = tempPointer2 + 4;\n            }\n            else {\n              tempPointer2[4] = allocatedMemory[2];\n              tempPointer2[5] = allocatedMemory[3];\n              if (tempVar2 == 0x24) {\n                tempPointer2[6] = allocatedMemory[4];\n                resultPointer = allocatedMemory + 5;\n                allocatedMemory = allocatedMemory + 6;\n                tempPointer2[7] = *resultPointer;\n                resultPointer = tempPointer2 + 8;\n              }\n              else {\n                allocatedMemory = allocatedMemory + 4;\n                resultPointer = tempPointer2 + 6;\n              }\n            }\n          }\n          *resultPointer = *allocatedMemory;\n          resultPointer[1] = allocatedMemory[1];\n          resultPointer[2] = allocatedMemory[2];\n          allocatedSize = tempPointer2[1];\n          resultPointer = tempPointer2;\n          allocatedMemory = tempPointer;\n        }\n        else {\n          FUN_00081e34(tempPointer,allocatedMemory);\n          allocatedSize = tempPointer2[1];\n          resultPointer = tempPointer2;\n          allocatedMemory = tempPointer;\n        }\n        goto LAB_00082088;\n      }\n    }\n    tempPointer2 = (int *)FUN_00081810(memoryPool,size);\n    if (tempPointer2 == (int *)0x0) goto LAB_000820a0;\n    allocatedSize = allocatedMemory[-1];\n    if (tempPointer2 + -2 != (int *)((allocatedSize & 0xfffffffe) + (int)resultPointer)) {\n      alignedSize = alignedSize - 4;\n      if (alignedSize < 0x25) {\n        resultPointer = allocatedMemory;\n        tempPointer = tempPointer2;\n        if (0x13 < alignedSize) {\n          *tempPointer2 = *allocatedMemory;\n          tempPointer2[1] = allocatedMemory[1];\n          if (alignedSize < 0x1c) {\n            resultPointer = allocatedMemory + 2;\n            tempPointer = tempPointer2 + 2;\n          }\n          else {\n            tempPointer2[2] = allocatedMemory[2];\n            tempPointer2[3] = allocatedMemory[3];\n            if (alignedSize == 0x24) {\n              tempPointer2[4] = allocatedMemory[4];\n              tempPointer2[5] = allocatedMemory[5];\n              resultPointer = allocatedMemory + 6;\n              tempPointer = tempPointer2 + 6;\n            }\n            else {\n              resultPointer = allocatedMemory + 4;\n              tempPointer = tempPointer2 + 4;\n            }\n          }\n        }\n        *tempPointer = *resultPointer;\n        tempPointer[1] = resultPointer[1];\n        tempPointer[2] = resultPointer[2];\n      }\n      else {\n        FUN_00081e34(tempPointer2,allocatedMemory);\n      }\n      FUN_00083b10(memoryPool,allocatedMemory);\n      goto LAB_000820a0;\n    }\n    alignedSize = alignedSize + (tempPointer2[-1] & 0xfffffffcU);\n  }\nLAB_00082088:\n  tempVar2 = alignedSize - sizeToAllocate;\n  tempPointer2 = allocatedMemory;\n  if (tempVar2 < 0x10) {\n    resultPointer[1] = allocatedSize & 1 | alignedSize;\n    *(uint *)((int)resultPointer + alignedSize + 4) = *(uint *)((int)resultPointer + alignedSize + 4) | 1;\n  }\n  else {\n    resultPointer[1] = allocatedSize & 1 | sizeToAllocate;\n    *(uint *)((int)resultPointer + sizeToAllocate + 4) = tempVar2 | 1;\n    *(uint *)((int)resultPointer + tempVar2 + sizeToAllocate + 4) = *(uint *)((int)resultPointer + tempVar2 + sizeToAllocate + 4) | 1;\n    FUN_00083b10(memoryPool,(int)resultPointer + sizeToAllocate + 8);\n  }\nLAB_000820a0:\n  FUNC_00081f98(memoryPool);\n  return tempPointer2;\n}\n\n",
            "renaming": {
                "FUN_00081fac": "allocate_memory_00081fac",
                "param_1": "memoryPool",
                "param_2": "allocatedMemory",
                "param_3": "size",
                "dVar1": "tempVar",
                "piVar2": "resultPointer",
                "uVar3": "tempVar2",
                "iVar4": "tempVar3",
                "uVar5": "allocatedSize",
                "iVar6": "tempVar4",
                "piVar7": "tempPointer",
                "uVar8": "alignedSize",
                "uVar9": "sizeToAllocate",
                "piVar10": "tempPointer2",
                "Elf32_Rel_ARRAY_20070000": "relocationArray"
            },
            "calling": [
                "FUN_00081f9c",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00083b10",
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008236c": {
            "entrypoint": "0x0008236c",
            "current_name": "check_and_set_param_0008236c",
            "code": "\nvoid checkAndSetParam_0008236c(int *outputParam,undefined4 inputParam)\n\n{\n  int status;\n  \n  DAT_20071244 = 0;\n  status = FUN_00080e88(inputParam);\n  if ((status == -1) && (DAT_20071244 != 0)) {\n    *outputParam = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008236c": "check_and_set_param_0008236c",
                "param_1": "outputParam",
                "param_2": "inputParam",
                "iVar1": "status"
            },
            "calling": [
                "FUN_00081810",
                "FUN_00083a74"
            ],
            "called": [
                "FUN_00080e88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082390": {
            "entrypoint": "0x00082390",
            "current_name": "compare_buffers_00082390",
            "code": "\nint compare_buffers_00082390(uint *buffer1,uint *buffer2)\n\n{\n  uint *ptr1;\n  int result;\n  uint *ptr2;\n  uint *ptr3;\n  uint bytes1;\n  uint byte1;\n  uint byte2;\n  uint byte3;\n  uint byte4;\n  \n  if ((((uint)buffer1 | (uint)buffer2) & 7) != 0) {\n    ptr1 = buffer1;\n    if (((uint)buffer1 & 3) != 0) {\n      ptr1 = (uint *)((uint)buffer1 & 0xfffffffc) + 1;\n      bytes1 = *(uint *)((uint)buffer1 & 0xfffffffc);\n      ptr2 = buffer2;\n      if (((uint)buffer1 & 1) == 0) {\nLAB_00082410:\n        ptr3 = (uint *)((int)ptr2 + 1);\n        byte1 = bytes1 >> 0x10 & 0xff;\n        result = byte1 - *(byte *)ptr2;\n        if (result != 0) {\n          return result;\n        }\n        if (byte1 == 0) {\n          return 0;\n        }\n      }\n      else {\n        ptr3 = buffer2;\n        if (((uint)buffer1 & 2) == 0) {\n          ptr2 = (uint *)((int)buffer2 + 1);\n          byte1 = bytes1 >> 8 & 0xff;\n          result = byte1 - *(byte *)buffer2;\n          if (result != 0) {\n            return result;\n          }\n          if (byte1 == 0) {\n            return 0;\n          }\n          goto LAB_00082410;\n        }\n      }\n      buffer2 = (uint *)((int)ptr3 + 1);\n      result = (bytes1 >> 0x18) - (uint)*(byte *)ptr3;\n      if ((result != 0) || (bytes1 >> 0x18 == 0)) {\n        return result;\n      }\n    }\n    bytes1 = (uint)buffer2 & 3;\n    if (bytes1 != 0) {\n      buffer2 = (uint *)((uint)buffer2 & 0xfffffffc);\n      if (bytes1 == 2) {\n        bytes1 = *buffer2;\n        do {\n          buffer2 = buffer2 + 1;\n          byte2 = *ptr1;\n          bytes1 = bytes1 >> 0x10;\n          byte3 = byte2 + 0xfefefeff & ~byte2;\n          byte4 = byte3 & 0x80808080;\n          byte1 = byte2 & 0xffff;\n          if ((byte3 & 0x8080) != 0 || byte1 != bytes1) goto LAB_0008258e;\n          bytes1 = *buffer2;\n          byte1 = byte1 ^ byte2;\n          byte2 = bytes1 * 0x10000;\n          ptr1 = ptr1 + 1;\n        } while (byte4 == 0 && byte1 == byte2);\n      }\n      else if (bytes1 < 2) {\n        bytes1 = *buffer2;\n        do {\n          buffer2 = buffer2 + 1;\n          byte2 = *ptr1;\n          bytes1 = bytes1 >> 8;\n          byte3 = byte2 + 0xfefefeff & ~byte2;\n          byte4 = byte3 & 0x80808080;\n          byte1 = byte2 & 0xffffff;\n          if ((byte3 & 0x808080) != 0 || byte1 != bytes1) goto LAB_0008258e;\n          bytes1 = *buffer2;\n          byte1 = byte1 ^ byte2;\n          byte2 = bytes1 * 0x1000000;\n          ptr1 = ptr1 + 1;\n        } while (byte4 == 0 && byte1 == byte2);\n      }\n      else {\n        bytes1 = *buffer2;\n        do {\n          buffer2 = buffer2 + 1;\n          byte2 = *ptr1;\n          bytes1 = bytes1 >> 0x18;\n          byte3 = byte2 + 0xfefefeff & ~byte2;\n          byte4 = byte3 & 0x80808080;\n          byte1 = byte2 & 0xff;\n          if ((byte3 & 0x80) != 0 || byte1 != bytes1) goto LAB_0008258e;\n          bytes1 = *buffer2;\n          byte1 = byte1 ^ byte2;\n          byte2 = bytes1 * 0x100;\n          ptr1 = ptr1 + 1;\n        } while (byte4 == 0 && byte1 == byte2);\n      }\n      byte1 = byte1 << 0x18 | (byte1 >> 8 & 0xff) << 0x10 | (byte1 >> 0x10 & 0xff) << 8 |\n              byte1 >> 0x18;\n      bytes1 = (byte2 >> 8 & 0xff) << 0x10 | (byte2 >> 0x10 & 0xff) << 8 | byte2 >> 0x18;\n      goto LAB_0008259e;\n    }\n    buffer1 = ptr1;\n    ptr2 = buffer2;\n    if (((uint)ptr1 & 4) != 0) {\n      buffer1 = ptr1 + 1;\n      bytes1 = *ptr1;\n      ptr2 = buffer2 + 1;\n      byte2 = *buffer2;\n      byte4 = bytes1 + 0xfefefeff & ~bytes1 & 0x80808080;\n      if (bytes1 != byte2 || byte4 != 0) {\nLAB_0008259a:\n        byte1 = bytes1 << 0x18 | (bytes1 >> 8 & 0xff) << 0x10 | (bytes1 >> 0x10 & 0xff) << 8 |\n                bytes1 >> 0x18;\n        bytes1 = byte2 << 0x18 | (byte2 >> 8 & 0xff) << 0x10 | (byte2 >> 0x10 & 0xff) << 8 |\n                byte2 >> 0x18;\n        goto LAB_0008259e;\n      }\n    }\n    buffer2 = ptr2;\n    if (((uint)ptr2 & 4) != 0) {\n      bytes1 = *ptr2;\n      ptr1 = ptr2 + 1;\n      do {\n        byte1 = *buffer1;\n        byte2 = buffer1[1];\n        byte4 = byte1 + 0xfefefeff & ~byte1 & 0x80808080;\n        if (byte1 != bytes1 || byte4 != 0) goto LAB_0008258e;\n        byte3 = *ptr1;\n        bytes1 = ptr1[1];\n        byte4 = byte2 + 0xfefefeff & ~byte2 & 0x80808080;\n        buffer1 = buffer1 + 2;\n        ptr1 = ptr1 + 2;\n      } while (byte2 == byte3 && byte4 == 0);\n      byte1 = byte2 << 0x18 | (byte2 >> 8 & 0xff) << 0x10 | (byte2 >> 0x10 & 0xff) << 8 |\n              byte2 >> 0x18;\n      bytes1 = byte3 << 0x18 | (byte3 >> 8 & 0xff) << 0x10 | (byte3 >> 0x10 & 0xff) << 8 |\n              byte3 >> 0x18;\n      goto LAB_0008259e;\n    }\n  }\n  do {\n    bytes1 = *buffer1;\n    byte1 = buffer1[1];\n    byte2 = *buffer2;\n    byte3 = buffer2[1];\n    byte4 = bytes1 + 0xfefefeff & ~bytes1 & 0x80808080;\n    if (bytes1 != byte2 || byte4 != 0) goto LAB_0008259a;\n    byte4 = byte1 + 0xfefefeff & ~byte1 & 0x80808080;\n    buffer1 = buffer1 + 2;\n    buffer2 = buffer2 + 2;\n  } while (byte1 == byte3 && byte4 == 0);\n  byte1 = byte1 << 0x18 | (byte1 >> 8 & 0xff) << 0x10 | (byte1 >> 0x10 & 0xff) << 8 | byte1 >> 0x18;\n  bytes1 = byte3 << 0x18 | (byte3 >> 8 & 0xff) << 0x10 | (byte3 >> 0x10 & 0xff) << 8 | byte3 >> 0x18;\nLAB_0008259e:\n  byte2 = byte4 << 0x18 | (byte4 >> 8 & 0xff) << 0x10 | (byte4 >> 0x10 & 0xff) << 8 | byte4 >> 0x18;\n  if (byte2 != 0) {\n    byte2 = 0x18 - LZCOUNT(byte2);\n    byte1 = byte1 >> (byte2 & 0xff);\n    bytes1 = bytes1 >> (byte2 & 0xff);\n  }\n  result = 1;\n  if (byte1 <= bytes1) {\n    result = -(uint)(byte1 < bytes1);\n  }\n  return result;\nLAB_0008258e:\n  byte1 = byte1 << 0x18 | (byte1 >> 8 & 0xff) << 0x10 | (byte1 >> 0x10 & 0xff) << 8 | byte1 >> 0x18;\n  bytes1 = bytes1 << 0x18 | (bytes1 >> 8 & 0xff) << 0x10 | (bytes1 >> 0x10 & 0xff) << 8 | bytes1 >> 0x18;\n  goto LAB_0008259e;\n}\n\n",
            "renaming": {
                "FUN_00082390": "compare_buffers_00082390",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "puVar1": "ptr1",
                "iVar2": "result",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "uVar5": "bytes1",
                "uVar6": "byte1",
                "uVar7": "byte2",
                "uVar8": "byte3",
                "uVar9": "byte4"
            },
            "calling": [
                "FUN_000815b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825cc": {
            "entrypoint": "0x000825cc",
            "current_name": "copy_string_000825cc",
            "code": "\nvoid copy_string_000825cc(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_ushort;\n  uint *next_src;\n  uint *next_dest;\n  uint current_uint;\n  uint temp_uint;\n  uint *current_dest;\n  bool is_zero_byte;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    next_dest = src;\n    if (((uint)src & 1) != 0) {\n      next_dest = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = next_dest;\n    if (((uint)next_dest & 2) != 0) {\n      src = (uint *)((int)next_dest + 2);\n      current_ushort = *(ushort *)next_dest;\n      is_zero_byte = (current_ushort & 0xff) == 0;\n      if (is_zero_byte) {\n        *(char *)dest = (char)current_ushort;\n      }\n      else {\n        *(ushort *)dest = current_ushort;\n        is_zero_byte = (current_ushort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero_byte) {\n        return;\n      }\n    }\n  }\n  current_uint = *src;\n  next_dest = src + 1;\n  current_dest = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_00082630;\n    current_dest = dest + 1;\n    *dest = current_uint;\n    next_dest = src + 2;\n    current_uint = src[1];\n  }\n  while( true ) {\n    next_src = next_dest + 1;\n    temp_uint = *next_dest;\n    dest = current_dest;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    dest = current_dest + 1;\n    *current_dest = current_uint;\n    current_uint = temp_uint;\n    if ((temp_uint + 0xfefefeff & ~temp_uint & 0x80808080) != 0) break;\n    next_dest = next_dest + 2;\n    current_uint = *next_src;\n    current_dest = current_dest + 2;\n    *dest = temp_uint;\n  }\nLAB_00082630:\n  do {\n    *(char *)dest = (char)current_uint;\n    temp_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp_uint != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825cc": "copy_string_000825cc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_ushort",
                "puVar3": "next_src",
                "puVar4": "next_dest",
                "uVar5": "current_uint",
                "uVar6": "temp_uint",
                "puVar7": "current_dest",
                "bVar8": "is_zero_byte"
            },
            "calling": [
                "FUN_0008151c",
                "FUN_000814d0",
                "FUN_00081570"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082688": {
            "entrypoint": "0x00082688",
            "current_name": "count_leading_zeros_00082688",
            "code": "\nint countLeadingZeros_00082688(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082688": "count_leading_zeros_00082688",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000814f6",
                "FUN_000810a6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082824": {
            "entrypoint": "0x00082824",
            "current_name": "process_data_00082824",
            "code": "\nint processData_00082824(undefined4 input,int size,int **data)\n\n{\n  int *currentData;\n  int result;\n  int *remainingData;\n  uint iterationCount;\n  undefined4 *currentValue;\n  uint currentSize;\n  uint shiftedSize;\n  \n  if (-1 < *(int *)(size + 100) << 0x12) {\n    result = FUN_00083ca8();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  remainingData = data[2];\n  currentData = *data;\n  while (remainingData != (int *)0x0) {\n    currentSize = currentData[1];\n    shiftedSize = currentSize >> 2;\n    if (shiftedSize != 0) {\n      currentValue = (undefined4 *)(*currentData + -4);\n      iterationCount = 0;\n      do {\n        currentValue = currentValue + 1;\n        result = FUN_000839b4(input,*currentValue,size);\n        iterationCount = iterationCount + 1;\n        if (result == -1) goto LAB_00082864;\n      } while (shiftedSize != iterationCount);\n      remainingData = data[2];\n    }\n    remainingData = (int *)((int)remainingData - (currentSize & 0xfffffffc));\n    data[2] = remainingData;\n    currentData = currentData + 2;\n  }\n  result = 0;\nLAB_00082864:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082824": "process_data_00082824",
                "param_1": "input",
                "param_2": "size",
                "param_3": "data",
                "piVar1": "currentData",
                "iVar2": "result",
                "piVar3": "remainingData",
                "uVar4": "iterationCount",
                "puVar5": "currentValue",
                "uVar6": "currentSize",
                "uVar7": "shiftedSize"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_00083ca8",
                "FUN_000839b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008289c": {
            "entrypoint": "0x0008289c",
            "current_name": "parse_format_string_0008289c",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormatString_0008289c(int arg1,int arg2,int *******formatString,int **arguments)\n\n{\n  bool isFormatSpecifier;\n  bool isNegative;\n  bool isHash;\n  char signChar;\n  bool isZeroPadded;\n  int ********formattedArgs;\n  int *argPtr;\n  int argCount;\n  char formatSpecifierChar;\n  int *******formatPtr;\n  uint digit;\n  int **argPtrTemp;\n  uint originalFlags;\n  uint nextChar;\n  int temp;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool isNegative6;\n  longlong argValue;\n  int *******currentArgPtr;\n  int *******totalArgsFormatted;\n  int **currentArgList;\n  int formattedArgCount;\n  char *digits;\n  char alignmentChar;\n  undefined paddingChar;\n  undefined paddingChar2;\n  int ********formattedArgsPtr;\n  int numArgsUsed;\n  int *******remainingArgsPtr;\n  undefined paddingChar3;\n  char local_0x6a;\n  undefined alignmentChar2;\n  undefined formattedArgsPadding [4];\n  int *******localVarsPlaceholder [16];\n  \n  if ((arg1 != 0) && (*(int *)(arg1 + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  originalFlags = (uint)*(ushort *)(arg2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(arg2 + 0xc) << 0x12)) {\n    originalFlags = originalFlags | 0x2000;\n    *(short *)(arg2 + 0xc) = (short)originalFlags;\n    *(uint *)(arg2 + 100) = *(uint *)(arg2 + 100) & 0xffffdfff;\n  }\n  if (((int)(originalFlags << 0x1c) < 0) && (*(int *)(arg2 + 0x10) != 0)) {\n    if ((originalFlags & 0x1a) != 10) goto LAB_000828ee;\n  }\n  else {\n    argCount = FUN_0008356c(arg1,arg2);\n    if (argCount != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(arg2 + 0xc) & 0x1a) != 10) goto LAB_000828ee;\n  }\n  if (-1 < *(short *)(arg2 + 0xe)) {\n    argCount = FUN_000834f0(arg1,arg2,formatString,arguments);\n    return argCount;\n  }\nLAB_000828ee:\n  digits = (char *)0x0;\n  remainingArgsPtr = (int *******)0x0;\n  numArgsUsed = 0;\n  formattedArgCount = 0;\n  formattedArgs = (int ********)formattedArgsPadding;\n  currentArgList = arguments;\n  formattedArgsPtr = (int ********)formattedArgsPadding;\nLAB_00082902:\n  formatPtr = formatString;\n  if ((*(char *)formatString != '\\0') && (*(char *)formatString != '%')) {\n    do {\n      formatPtr = (int *******)((int)formatPtr + 1);\n      if (*(char *)formatPtr == '\\0') break;\n    } while (*(char *)formatPtr != '%');\n    pppppppiVar20 = (int *******)((int)formatPtr - (int)formatString);\n    if (pppppppiVar20 != (int *******)0x0) {\n      numArgsUsed = numArgsUsed + 1;\n      remainingArgsPtr = (int *******)((int)remainingArgsPtr + (int)pppppppiVar20);\n      *formattedArgs = formatString;\n      formattedArgs[1] = pppppppiVar20;\n      if (numArgsUsed < 8) {\n        formattedArgs = formattedArgs + 2;\n      }\n      else {\n        if (remainingArgsPtr == (int *******)0x0) {\n          formattedArgCount = formattedArgCount + (int)pppppppiVar20;\n          numArgsUsed = 0;\n          formattedArgs = (int ********)formattedArgsPadding;\n          goto LAB_00082952;\n        }\n        argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n        formattedArgs = (int ********)formattedArgsPadding;\n        if (argCount != 0) goto LAB_00083142;\n      }\n      formattedArgCount = formattedArgCount + (int)pppppppiVar20;\n    }\n  }\nLAB_00082952:\n  if (*(char *)formatPtr != '\\0') {\n    alignmentChar = '\\0';\n    nextChar = (uint)*(byte *)((int)formatPtr + 1);\n    originalFlags = 0;\n    isZeroPadded = false;\n    isNegative = false;\n    isFormatSpecifier = false;\n    isHash = false;\n    isNegative6 = false;\n    pppppppiVar20 = (int *******)0x0;\n    totalArgsFormatted = (int *******)0xffffffff;\n    formatString = (int *******)((int)formatPtr + 1);\nLAB_00082976:\n    formatString = (int *******)((int)formatString + 1);\nLAB_0008297a:\n    switch(nextChar) {\n    case 0x20:\n      goto switchD_00082984_caseD_20;\n    default:\n      if (nextChar != 0) {\n        currentArgPtr = (int *******)0x1;\n        totalArgsFormatted = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&paddingChar3;\n        paddingChar3 = (char)nextChar;\n        goto LAB_00082d76;\n      }\n      goto LAB_00083134;\n    case 0x23:\n      isHash = true;\n      nextChar = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*currentArgList;\n      currentArgList = currentArgList + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082984_caseD_2d;\n      }\n      nextChar = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2b:\n      nextChar = (uint)*(byte *)formatString;\n      alignmentChar = '+';\n      goto LAB_00082976;\n    case 0x2d:\nswitchD_00082984_caseD_2d:\n      originalFlags = originalFlags | 4;\n      nextChar = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x2e:\n      nextChar = (uint)*(byte *)formatString;\n      formatPtr = (int *******)((int)formatString + 1);\n      if (nextChar == 0x2a) {\n        nextChar = (uint)*(byte *)((int)formatString + 1);\n        totalArgsFormatted = (int *******)*currentArgList;\n        currentArgList = currentArgList + 1;\n        formatString = formatPtr;\n        if ((int)totalArgsFormatted < 0) {\n          totalArgsFormatted = (int *******)0xffffffff;\n        }\n        goto LAB_00082976;\n      }\n      digit = nextChar - 0x30;\n      if (digit < 10) {\n        uVar21 = 0;\n        do {\n          formatString = (int *******)((int)formatPtr + 1);\n          nextChar = (uint)*(byte *)formatPtr;\n          uVar21 = digit + uVar21 * 10;\n          digit = nextChar - 0x30;\n          formatPtr = formatString;\n        } while (digit < 10);\n        totalArgsFormatted = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        totalArgsFormatted = (int *******)0x0;\n        formatString = formatPtr;\n      }\n      goto LAB_0008297a;\n    case 0x30:\n      originalFlags = originalFlags | 0x80;\n      nextChar = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082984_caseD_31;\n    case 0x44:\n      isNegative = true;\n      if (isFormatSpecifier == false) goto LAB_00082d8c;\nLAB_00082bfc:\n      currentArgList = (int **)((int)currentArgList + 7U & 0xfffffff8);\n      piVar19 = *currentArgList;\n      piVar22 = currentArgList[1];\n      currentArgList = currentArgList + 2;\n      goto LAB_00082c10;\n    case 0x4f:\n      isNegative = true;\n      if (isFormatSpecifier != false) goto LAB_00082aa6;\nLAB_00082c8e:\n      argCount = (uint)isNegative << 4;\n      temp = (uint)isFormatSpecifier << 5;\n      if ((isNegative == 0) && (temp = (uint)isNegative6 << 6, isNegative6 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)currentArgList;\n        currentArgList = currentArgList + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        argCount = temp;\n        piVar19 = *currentArgList;\n        currentArgList = currentArgList + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isNegative = true;\n      if (isFormatSpecifier != false) goto LAB_00082bc6;\nLAB_00082ce0:\n      if ((isNegative) || (isNegative6 == false)) {\n        argCount = 1;\n        piVar19 = *currentArgList;\n        currentArgList = currentArgList + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)currentArgList;\n        currentArgList = currentArgList + 1;\n        argCount = 1;\n      }\n      break;\n    case 0x58:\n      digits = \"0123456789ABCDEF\";\n      if (isFormatSpecifier == false) goto LAB_00082efa;\nLAB_00082d1a:\n      argPtrTemp = (int **)((int)currentArgList + 7U & 0xfffffff8);\n      currentArgList = argPtrTemp + 2;\n      piVar19 = *argPtrTemp;\n      piVar22 = argPtrTemp[1];\n      goto LAB_00082d2e;\n    case 99:\n      piVar19 = *currentArgList;\n      currentArgList = currentArgList + 1;\n      currentArgPtr = (int *******)0x1;\n      paddingChar3 = SUB41(piVar19,0);\n      totalArgsFormatted = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&paddingChar3;\n      goto LAB_00082d76;\n    case 100:\n    case 0x69:\n      if (isFormatSpecifier != false) goto LAB_00082bfc;\nLAB_00082d8c:\n      if ((isNegative == false) && (isNegative6 != false)) {\n        piVar19 = (int *)(int)*(short *)currentArgList;\n        currentArgList = currentArgList + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *currentArgList;\n        currentArgList = currentArgList + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082c10:\n      if ((int)piVar22 < 0) {\n        isNegative6 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)isNegative6);\n        alignmentChar = '-';\n        signChar = '-';\n        argCount = 1;\n        goto LAB_00082ace;\n      }\n      if (-1 < (int)totalArgsFormatted) {\n        originalFlags = originalFlags & 0xffffff7f;\n      }\n      isZeroPadded = false;\n      nextChar = (uint)piVar19 | (uint)piVar22;\n      argCount = 1;\n      signChar = alignmentChar;\n      goto joined_r0x00082adc;\n    case 0x68:\n      isNegative6 = true;\n      nextChar = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x6c:\n      nextChar = (uint)*(byte *)formatString;\n      if (nextChar == 0x6c) {\n        isFormatSpecifier = true;\n        nextChar = (uint)*(byte *)((int)formatString + 1);\n        formatString = (int *******)((int)formatString + 1);\n      }\n      else {\n        isNegative = true;\n      }\n      goto LAB_00082976;\n    case 0x6e:\n      if (isFormatSpecifier == false) {\n        if (isNegative == false) {\n          if (isNegative6) {\n            piVar19 = *currentArgList;\n            currentArgList = currentArgList + 1;\n            *(short *)piVar19 = (short)formattedArgCount;\n          }\n          else {\n            piVar19 = *currentArgList;\n            currentArgList = currentArgList + 1;\n            *piVar19 = formattedArgCount;\n          }\n        }\n        else {\n          piVar19 = *currentArgList;\n          currentArgList = currentArgList + 1;\n          *piVar19 = formattedArgCount;\n        }\n      }\n      else {\n        piVar19 = *currentArgList;\n        currentArgList = currentArgList + 1;\n        *piVar19 = formattedArgCount;\n        piVar19[1] = formattedArgCount >> 0x1f;\n      }\n      goto LAB_00082902;\n    case 0x6f:\n      if (isFormatSpecifier == false) goto LAB_00082c8e;\nLAB_00082aa6:\n      argPtrTemp = (int **)((int)currentArgList + 7U & 0xfffffff8);\n      currentArgList = argPtrTemp + 2;\n      piVar19 = *argPtrTemp;\n      piVar22 = argPtrTemp[1];\n      argCount = 0;\n      break;\n    case 0x70:\n      piVar19 = *currentArgList;\n      currentArgList = currentArgList + 1;\n      paddingChar2 = 0x78;\n      isZeroPadded = true;\n      piVar22 = (int *)0x0;\n      paddingChar = 0x30;\n      digits = \"0123456789abcdef\";\n      argCount = 2;\n      break;\n    case 0x71:\n      isFormatSpecifier = true;\n      nextChar = (uint)*(byte *)formatString;\n      goto LAB_00082976;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*currentArgList;\n      alignmentChar = '\\0';\n      currentArgList = currentArgList + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)totalArgsFormatted < 0) {\n          totalArgsFormatted = (int *******)FUN_00082688(ppppppppiVar25);\n          formatPtr = (int *******)0x0;\n          signChar = alignmentChar;\n        }\n        else {\n          argCount = FUN_000840f8(ppppppppiVar25,0,totalArgsFormatted);\n          signChar = alignmentChar;\n          if (argCount == 0) {\n            formatPtr = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(argCount - (int)ppppppppiVar25);\n            if ((int)totalArgsFormatted <= (int)(int *******)(argCount - (int)ppppppppiVar25)) {\n              pppppppiVar18 = totalArgsFormatted;\n            }\n            formatPtr = (int *******)0x0;\n            totalArgsFormatted = pppppppiVar18;\n          }\n        }\n        goto LAB_00082b04;\n      }\n      if ((int *******)0x5 < totalArgsFormatted) {\n        totalArgsFormatted = (int *******)0x6;\n      }\n      currentArgPtr = (int *******)((uint)totalArgsFormatted & ~((int)totalArgsFormatted >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085728;\nLAB_00082d76:\n      alignmentChar = '\\0';\n      formatPtr = (int *******)0x0;\n      goto LAB_00082b1e;\n    case 0x75:\n      if (!isFormatSpecifier) goto LAB_00082ce0;\nLAB_00082bc6:\n      argPtrTemp = (int **)((int)currentArgList + 7U & 0xfffffff8);\n      currentArgList = argPtrTemp + 2;\n      piVar19 = *argPtrTemp;\n      piVar22 = argPtrTemp[1];\n      argCount = 1;\n      break;\n    case 0x78:\n      digits = \"0123456789abcdef\";\n      if (isFormatSpecifier != false) goto LAB_00082d1a;\nLAB_00082efa:\n      if ((isNegative == false) && (isNegative6 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)currentArgList;\n        currentArgList = currentArgList + 1;\n      }\n      else {\n        piVar19 = *currentArgList;\n        currentArgList = currentArgList + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082d2e:\n      if ((isHash) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        isZeroPadded = true;\n        paddingChar = 0x30;\n        argCount = 2;\n        paddingChar2 = (char)nextChar;\n      }\n      else {\n        argCount = 2;\n      }\n    }\n    alignmentChar = '\\0';\n    signChar = '\\0';\nLAB_00082ace:\n    if (-1 < (int)totalArgsFormatted) {\n      originalFlags = originalFlags & 0xffffff7f;\n    }\n    nextChar = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082adc:\n    argValue = CONCAT44(piVar22,piVar19);\n    formatPtr = totalArgsFormatted;\n    if ((nextChar == 0) && (totalArgsFormatted == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)formattedArgsPadding;\n      if ((argCount != 0) || (!isHash)) goto LAB_00082b04;\n      ppppppppiVar25 = (int ********)(&local_0x6a + 1);\n      alignmentChar2 = '0';\n      goto LAB_00082afe;\n    }\n    if (argCount == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&local_0x6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)argValue >> 0x20);\n          formatSpecifierChar = '\\n';\n          FUN_00084530((int)argValue,uVar24,10,0);\n          *(char *)ppppppppiVar25 = formatSpecifierChar + '0';\n          argValue = FUN_00084530((int)argValue,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (argValue != 0);\n        totalArgsFormatted = (int *******)((int)formattedArgsPadding - (int)ppppppppiVar25);\n        goto LAB_00082b04;\n      }\n      alignmentChar2 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&local_0x6a + 1);\n      goto LAB_00083282;\n    }\n    ppppppppiVar16 = (int ********)(&local_0x6a + 1);\n    if (argCount != 2) goto LAB_000830e2;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      nextChar = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = digits[nextChar];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    totalArgsFormatted = (int *******)((int)formattedArgsPadding - (int)ppppppppiVar25);\n    goto LAB_00082b04;\n  }\nLAB_00083134:\n  if (remainingArgsPtr != (int *******)0x0) {\n    FUN_00082824(arg1,arg2,&formattedArgsPtr);\n  }\nLAB_00083142:\n  if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return formattedArgCount;\nLAB_000830e2:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    argPtr = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    argCount = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)argCount;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = argPtr;\n  } while (((uint)argPtr | (uint)piVar22) != 0);\n  if (isHash) {\n    if (argCount == 0x30) {\nLAB_00082afe:\n      totalArgsFormatted = (int *******)((int)formattedArgsPadding - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      totalArgsFormatted = (int *******)((int)formattedArgsPadding - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_00083282:\n    totalArgsFormatted = (int *******)((int)formattedArgsPadding - (int)ppppppppiVar25);\n  }\nLAB_00082b04:\n  currentArgPtr = totalArgsFormatted;\n  if ((int)totalArgsFormatted < (int)formatPtr) {\n    currentArgPtr = formatPtr;\n  }\n  if (signChar != '\\0') {\n    currentArgPtr = (int *******)((int)currentArgPtr + 1);\n  }\nLAB_00082b1e:\n  if (isZeroPadded) {\n    currentArgPtr = (int *******)((int)currentArgPtr + 2);\n  }\n  if ((originalFlags == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)currentArgPtr), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      numArgsUsed = numArgsUsed + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        argCount = numArgsUsed + 1;\n        remainingArgsPtr = remainingArgsPtr + 4;\n        *formattedArgs = (int *******)0x856f0;\n        formattedArgs[1] = (int *******)0x10;\n        if (argCount < 8) {\n          temp = numArgsUsed + 2;\n          formattedArgs = formattedArgs + 2;\n          numArgsUsed = argCount;\n        }\n        else if (remainingArgsPtr == (int *******)0x0) {\n          temp = 1;\n          formattedArgs = (int ********)formattedArgsPadding;\n          numArgsUsed = 0;\n        }\n        else {\n          numArgsUsed = argCount;\n          argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n          if (argCount != 0) goto LAB_00083142;\n          temp = numArgsUsed + 1;\n          formattedArgs = (int ********)formattedArgsPadding;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      numArgsUsed = temp;\n    }\n    remainingArgsPtr = (int *******)((int)remainingArgsPtr + (int)pppppppiVar18);\n    *formattedArgs = (int *******)0x856f0;\n    formattedArgs[1] = pppppppiVar18;\n    if (numArgsUsed < 8) {\n      argCount = numArgsUsed + 1;\n      formattedArgs = formattedArgs + 2;\n    }\n    else if (remainingArgsPtr == (int *******)0x0) {\n      argCount = 1;\n      numArgsUsed = 0;\n      formattedArgs = (int ********)formattedArgsPadding;\n    }\n    else {\n      argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n      if (argCount != 0) goto LAB_00083142;\n      argCount = numArgsUsed + 1;\n      formattedArgs = (int ********)formattedArgsPadding;\n    }\n  }\n  else {\n    argCount = numArgsUsed + 1;\n  }\n  temp = argCount;\n  if (alignmentChar != '\\0') {\n    remainingArgsPtr = (int *******)((int)remainingArgsPtr + 1);\n    temp = 1;\n    *formattedArgs = (int *******)&alignmentChar;\n    formattedArgs[1] = (int *******)0x1;\n    numArgsUsed = argCount;\n    if (argCount < 8) {\n      temp = argCount + 1;\n      formattedArgs = formattedArgs + 2;\n    }\n    else if (remainingArgsPtr == (int *******)0x0) {\n      numArgsUsed = 0;\n      formattedArgs = (int ********)formattedArgsPadding;\n    }\n    else {\n      argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n      if (argCount != 0) goto LAB_00083142;\n      temp = numArgsUsed + 1;\n      formattedArgs = (int ********)formattedArgsPadding;\n    }\n  }\n  argCount = temp;\n  iVar17 = numArgsUsed;\n  if (isZeroPadded) {\n    remainingArgsPtr = (int *******)((int)remainingArgsPtr + 2);\n    *formattedArgs = (int *******)&paddingChar;\n    formattedArgs[1] = (int *******)0x2;\n    if (temp < 8) {\n      argCount = temp + 1;\n      iVar17 = temp;\n      formattedArgs = formattedArgs + 2;\n    }\n    else if (remainingArgsPtr == (int *******)0x0) {\n      argCount = 1;\n      iVar17 = 0;\n      formattedArgs = (int ********)formattedArgsPadding;\n    }\n    else {\n      numArgsUsed = temp;\n      argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n      if (argCount != 0) goto LAB_00083142;\n      argCount = numArgsUsed + 1;\n      iVar17 = numArgsUsed;\n      formattedArgs = (int ********)formattedArgsPadding;\n    }\n  }\n  numArgsUsed = iVar17;\n  if ((originalFlags == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)currentArgPtr), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          numArgsUsed = iVar17 + 1;\n          remainingArgsPtr = remainingArgsPtr + 4;\n          *formattedArgs = (int *******)\"0000000000000000\";\n          formattedArgs[1] = (int *******)0x10;\n          if (7 < numArgsUsed) break;\n          argCount = iVar17 + 2;\n          formattedArgs = formattedArgs + 2;\nLAB_000831f2:\n          iVar17 = numArgsUsed;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_00083218;\n        }\n        if (remainingArgsPtr != (int *******)0x0) {\n          argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n          if (argCount == 0) {\n            argCount = numArgsUsed + 1;\n            formattedArgs = (int ********)formattedArgsPadding;\n            goto LAB_000831f2;\n          }\n          goto LAB_00083142;\n        }\n        argCount = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        formattedArgs = (int ********)formattedArgsPadding;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_00083218:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    remainingArgsPtr = (int *******)((int)remainingArgsPtr + (int)pppppppiVar18);\n    *formattedArgs = (int *******)\"0000000000000000\";\n    formattedArgs[1] = pppppppiVar18;\n    numArgsUsed = argCount;\n    if (argCount < 8) {\n      argCount = argCount + 1;\n      formattedArgs = formattedArgs + 2;\n    }\n    else if (remainingArgsPtr == (int *******)0x0) {\n      argCount = 1;\n      numArgsUsed = 0;\n      formattedArgs = (int ********)formattedArgsPadding;\n    }\n    else {\n      argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n      if (argCount != 0) goto LAB_00083142;\n      argCount = numArgsUsed + 1;\n      formattedArgs = (int ********)formattedArgsPadding;\n    }\n  }\n  formatPtr = (int *******)((int)formatPtr - (int)totalArgsFormatted);\n  ppppppppiVar16 = (int ********)formattedArgsPadding;\n  if ((int)formatPtr < 1) {\nLAB_0008302a:\n    remainingArgsPtr = (int *******)((int)remainingArgsPtr + (int)totalArgsFormatted);\n    *formattedArgs = (int *******)ppppppppiVar25;\n    formattedArgs[1] = totalArgsFormatted;\n    totalArgsFormatted = remainingArgsPtr;\n    numArgsUsed = argCount;\n    if (argCount < 8) goto LAB_000831be;\n    if (remainingArgsPtr == (int *******)0x0) {\n      numArgsUsed = 0;\n    }\n    else {\n      argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n      if (argCount != 0) goto LAB_00083142;\n    }\n  }\n  else {\n    temp = numArgsUsed;\n    if (0x10 < (int)formatPtr) {\n      do {\n        while( true ) {\n          pppppppiVar18 = formatPtr;\n          numArgsUsed = temp + 1;\n          remainingArgsPtr = remainingArgsPtr + 4;\n          *formattedArgs = (int *******)\"0000000000000000\";\n          formattedArgs[1] = (int *******)0x10;\n          if (7 < numArgsUsed) break;\n          argCount = temp + 2;\n          formattedArgs = formattedArgs + 2;\nLAB_00082fe6:\n          temp = numArgsUsed;\n          formatPtr = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_0008300e;\n        }\n        if (remainingArgsPtr != (int *******)0x0) {\n          argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n          if (argCount == 0) {\n            argCount = numArgsUsed + 1;\n            formattedArgs = (int ********)formattedArgsPadding;\n            goto LAB_00082fe6;\n          }\n          goto LAB_00083142;\n        }\n        argCount = 1;\n        formattedArgs = (int ********)formattedArgsPadding;\n        temp = 0;\n        formatPtr = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_0008300e:\n      formatPtr = pppppppiVar18 + -4;\n    }\n    remainingArgsPtr = (int *******)((int)remainingArgsPtr + (int)formatPtr);\n    *formattedArgs = (int *******)\"0000000000000000\";\n    formattedArgs[1] = formatPtr;\n    if (argCount < 8) {\n      argCount = argCount + 1;\n      formattedArgs = formattedArgs + 2;\n      goto LAB_0008302a;\n    }\n    if (remainingArgsPtr != (int *******)0x0) {\n      numArgsUsed = argCount;\n      argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n      if (argCount != 0) goto LAB_00083142;\n      argCount = numArgsUsed + 1;\n      formattedArgs = (int ********)formattedArgsPadding;\n      goto LAB_0008302a;\n    }\n    localVarsPlaceholder[0] = totalArgsFormatted;\n    numArgsUsed = 1;\n    formattedArgs = (int ********)formattedArgsPadding;\n    formattedArgsPadding = (undefined  [4])ppppppppiVar25;\nLAB_000831be:\n    ppppppppiVar16 = formattedArgs + 2;\n    remainingArgsPtr = totalArgsFormatted;\n  }\n  if (((originalFlags & 4) != 0) &&\n     (formatPtr = (int *******)((int)pppppppiVar20 - (int)currentArgPtr), 0 < (int)formatPtr)) {\n    argCount = numArgsUsed;\n    if ((int)formatPtr < 0x11) {\n      temp = numArgsUsed + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          numArgsUsed = argCount + 1;\n          remainingArgsPtr = remainingArgsPtr + 4;\n          *ppppppppiVar16 = (int *******)0x856f0;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < numArgsUsed) break;\n          temp = argCount + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_0008307a:\n          formatPtr = formatPtr + -4;\n          argCount = numArgsUsed;\n          if ((int)formatPtr < 0x11) goto LAB_000830a2;\n        }\n        if (remainingArgsPtr != (int *******)0x0) {\n          argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n          if (argCount == 0) {\n            temp = numArgsUsed + 1;\n            ppppppppiVar16 = (int ********)formattedArgsPadding;\n            goto LAB_0008307a;\n          }\n          goto LAB_00083142;\n        }\n        formatPtr = formatPtr + -4;\n        temp = 1;\n        argCount = 0;\n        ppppppppiVar16 = (int ********)formattedArgsPadding;\n      } while (0x10 < (int)formatPtr);\n    }\nLAB_000830a2:\n    remainingArgsPtr = (int *******)((int)remainingArgsPtr + (int)formatPtr);\n    *ppppppppiVar16 = (int *******)0x856f0;\n    ppppppppiVar16[1] = formatPtr;\n    numArgsUsed = temp;\n    if (7 < temp) {\n      if (remainingArgsPtr == (int *******)0x0) {\n        if ((int)currentArgPtr < (int)pppppppiVar20) {\n          currentArgPtr = pppppppiVar20;\n        }\n        formattedArgCount = formattedArgCount + (int)currentArgPtr;\n        goto LAB_00083186;\n      }\n      argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr);\n      if (argCount != 0) goto LAB_00083142;\n    }\n  }\n  if ((int)currentArgPtr < (int)pppppppiVar20) {\n    currentArgPtr = pppppppiVar20;\n  }\n  formattedArgCount = formattedArgCount + (int)currentArgPtr;\n  if ((remainingArgsPtr != (int *******)0x0) &&\n     (argCount = FUN_00082824(arg1,arg2,&formattedArgsPtr), argCount != 0)) goto LAB_00083142;\nLAB_00083186:\n  numArgsUsed = 0;\n  formattedArgs = (int ********)formattedArgsPadding;\n  goto LAB_00082902;\nswitchD_00082984_caseD_31:\n  digit = nextChar - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  formatPtr = formatString;\n  do {\n    formatString = (int *******)((int)formatPtr + 1);\n    nextChar = (uint)*(byte *)formatPtr;\n    pppppppiVar20 = (int *******)(digit + (int)pppppppiVar20 * 10);\n    digit = nextChar - 0x30;\n    formatPtr = formatString;\n  } while (digit < 10);\n  goto LAB_0008297a;\nswitchD_00082984_caseD_20:\n  nextChar = (uint)*(byte *)formatString;\n  if (alignmentChar == '\\0') {\n    alignmentChar = ' ';\n  }\n  goto LAB_00082976;\n}\n\n",
            "renaming": {
                "FUN_0008289c": "parse_format_string_0008289c",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "formatString",
                "param_4": "arguments",
                "bVar1": "isFormatSpecifier",
                "bVar2": "isNegative",
                "bVar3": "isHash",
                "cVar4": "signChar",
                "bVar5": "isZeroPadded",
                "ppppppppiVar6": "formattedArgs",
                "piVar7": "argPtr",
                "iVar8": "argCount",
                "cVar9": "formatSpecifierChar",
                "pppppppiVar10": "formatPtr",
                "uVar11": "digit",
                "ppiVar12": "argPtrTemp",
                "uVar13": "originalFlags",
                "uVar14": "nextChar",
                "iVar15": "temp",
                "lVar27": "argValue",
                "local_dc": "currentArgPtr",
                "local_d4": "totalArgsFormatted",
                "local_c8": "currentArgList",
                "local_c4": "formattedArgCount",
                "local_c0": "digits",
                "local_a1": "alignmentChar",
                "local_a0": "paddingChar",
                "local_9f": "paddingChar2",
                "local_9c": "formattedArgsPtr",
                "local_98": "numArgsUsed",
                "local_94": "remainingArgsPtr",
                "local_90": "paddingChar3",
                "cStack_6a": "local_0x6a",
                "local_69": "alignmentChar2",
                "local_68": "formattedArgsPadding",
                "local_64": "localVarsPlaceholder"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00081750",
                "FUN_000817c8"
            ],
            "called": [
                "FUN_000834f0",
                "FUN_00082824",
                "FUN_0008356c",
                "FUN_000840f8",
                "FUN_00084530",
                "FUN_00082688",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000834f0": {
            "entrypoint": "0x000834f0",
            "current_name": "process_data_000834f0",
            "code": "\nint processData_000834f0(undefined4 inputValue,int dataAddress)\n\n{\n  int result;\n  int checkResult;\n  undefined *bufferArray [2];\n  undefined4 bufferSize;\n  ushort maskedValue;\n  undefined2 shortValue;\n  undefined *bufferPointer;\n  undefined4 bufferSizeCopy;\n  undefined4 zero;\n  undefined4 dataCopy;\n  undefined4 offsetValue;\n  undefined4 dataValue;\n  undefined stackArray [1024];\n  \n  dataValue = *(undefined4 *)(dataAddress + 100);\n  dataCopy = *(undefined4 *)(dataAddress + 0x1c);\n  shortValue = *(undefined2 *)(dataAddress + 0xe);\n  offsetValue = *(undefined4 *)(dataAddress + 0x24);\n  bufferArray[0] = stackArray;\n  maskedValue = *(ushort *)(dataAddress + 0xc) & 0xfffd;\n  bufferSize = 0x400;\n  bufferSizeCopy = 0x400;\n  zero = 0;\n  bufferPointer = bufferArray[0];\n  result = FUN_0008289c(inputValue,bufferArray);\n  if ((-1 < result) && (checkResult = FUN_00083850(inputValue,bufferArray), checkResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)maskedValue << 0x19) < 0) {\n    *(ushort *)(dataAddress + 0xc) = *(ushort *)(dataAddress + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000834f0": "process_data_000834f0",
                "param_1": "inputValue",
                "param_2": "dataAddress",
                "iVar1": "result",
                "iVar2": "checkResult",
                "local_488": "bufferArray",
                "local_480": "bufferSize",
                "local_47c": "maskedValue",
                "local_47a": "shortValue",
                "local_478": "bufferPointer",
                "local_474": "bufferSizeCopy",
                "local_470": "zero",
                "local_46c": "dataCopy",
                "local_464": "offsetValue",
                "local_424": "dataValue",
                "auStack_420": "stackArray"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008289c",
                "FUN_00083850"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008356c": {
            "entrypoint": "0x0008356c",
            "current_name": "handle_relocation_0008356c",
            "code": "\nundefined4 handleRelocation_0008356c(undefined4 *outStatus,int *relocationInfo)\n\n{\n  int offset;\n  int dataValue;\n  uint tempValue;\n  ushort flags;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  flags = *(ushort *)(relocationInfo + 3);\n  tempValue = (uint)flags;\n  if ((int)(tempValue << 0x1c) < 0) {\n    dataValue = relocationInfo[4];\n  }\n  else {\n    if (-1 < (int)(tempValue << 0x1b)) {\n      *outStatus = 9;\n      *(ushort *)(relocationInfo + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(tempValue << 0x1d) < 0) {\n      if ((int *)relocationInfo[0xc] != (int *)0x0) {\n        if ((int *)relocationInfo[0xc] != relocationInfo + 0x10) {\n          FUN_00083b10(outStatus);\n          flags = *(ushort *)(relocationInfo + 3);\n        }\n        relocationInfo[0xc] = 0;\n      }\n      dataValue = relocationInfo[4];\n      flags = flags & 0xffdb;\n      *relocationInfo = dataValue;\n      relocationInfo[1] = 0;\n    }\n    else {\n      dataValue = relocationInfo[4];\n    }\n    *(ushort *)(relocationInfo + 3) = flags | 8;\n    tempValue = (uint)(flags | 8);\n  }\n  if ((dataValue == 0) && ((tempValue & 0x280) != 0x200)) {\n    FUN_00084018(outStatus,relocationInfo);\n    tempValue = (uint)*(ushort *)(relocationInfo + 3);\n    dataValue = relocationInfo[4];\n  }\n  if ((tempValue & 1) == 0) {\n    offset = 0;\n    if (-1 < (int)(tempValue << 0x1e)) {\n      offset = relocationInfo[5];\n    }\n    relocationInfo[2] = offset;\n  }\n  else {\n    relocationInfo[6] = -relocationInfo[5];\n    relocationInfo[2] = 0;\n  }\n  if ((dataValue == 0) && ((int)((uint)*(ushort *)(relocationInfo + 3) << 0x18) < 0)) {\n    *(ushort *)(relocationInfo + 3) = *(ushort *)(relocationInfo + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0008356c": "handle_relocation_0008356c",
                "param_1": "outStatus",
                "param_2": "relocationInfo",
                "iVar1": "offset",
                "iVar2": "dataValue",
                "uVar3": "tempValue",
                "uVar4": "flags"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00084018",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000836d8": {
            "entrypoint": "0x000836d8",
            "current_name": "FUNC_000836d8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x00083630) */\n/* WARNING: Removing unreachable block (ram,0x000836c4) */\n/* WARNING: Removing unreachable block (ram,0x00083642) */\n/* WARNING: Removing unreachable block (ram,0x00083648) */\n/* WARNING: Removing unreachable block (ram,0x00083654) */\n/* WARNING: Removing unreachable block (ram,0x0008366e) */\n/* WARNING: Removing unreachable block (ram,0x0008364c) */\n/* WARNING: Removing unreachable block (ram,0x00083686) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n/* WARNING: Removing unreachable block (ram,0x00083688) */\n\nvoid FUNC_000836d8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836d8": "FUNC_000836d8"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000836ec": {
            "entrypoint": "0x000836ec",
            "current_name": "initialize_relocation_table_000836ec",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083698) */\n/* WARNING: Removing unreachable block (ram,0x000836b8) */\n\nvoid initializeRelocationTable_000836ec(void)\n\n{\n  dword *relTablePtr;\n  dword relOffset;\n  int relIndex;\n  code *unrecoveredJumpTable;\n  \n  FUN_000841e4(6);\n  unrecoveredJumpTable = (code *)0x836fb;\n  relOffset = FUN_00080eec(1);\n  if (relArray[48].rOffset == 0) {\n    relArray[48].rOffset = 0x20070184;\n  }\n  relIndex = *(int *)(relArray[48].rOffset + 4);\n  relTablePtr = (dword *)relArray[48].rOffset;\n  if (0x1f < relIndex) {\n    relTablePtr = (dword *)FUN_000817f0(400);\n    if (relTablePtr == (dword *)0x0) {\n                    /* WARNING: Could not recover jumptable at 0x00083652. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)(0xffffffff);\n      return;\n    }\n    *relTablePtr = relArray[48].rOffset;\n    relTablePtr[1] = 0;\n    relIndex = 0;\n    relArray[48].rOffset = (dword)relTablePtr;\n    relTablePtr[0x62] = 0;\n    relTablePtr[99] = 0;\n  }\n  relTablePtr[1] = relIndex + 1;\n  relTablePtr[relIndex + 2] = relOffset;\n                    /* WARNING: Could not recover jumptable at 0x00083696. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000836ec": "initialize_relocation_table_000836ec",
                "pdVar1": "relTablePtr",
                "dVar2": "relOffset",
                "iVar3": "relIndex",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumpTable",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_offset": "rOffset"
            },
            "calling": [
                "FUN_000816f8"
            ],
            "called": [
                "FUN_000841e4",
                "FUN_00080eec",
                "FUN_000817f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083850": {
            "entrypoint": "0x00083850",
            "current_name": "process_data_00083850",
            "code": "\nundefined4 processData_00083850(int *dataBuffer,int *infoBuffer)\n\n{\n  int *tempVar1;\n  int tempVar2;\n  ushort flags;\n  uint flags2;\n  int tempVar3;\n  code *callback;\n  undefined4 returnValue;\n  int tempVar4;\n  \n  if ((dataBuffer != (int *)0x0) && (dataBuffer[0xe] == 0)) {\n    FUN_00083888();\n  }\n  if (*(short *)(infoBuffer + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(infoBuffer + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    tempVar4 = infoBuffer[4];\n    if (tempVar4 == 0) {\n      return 0;\n    }\n    tempVar2 = *infoBuffer;\n    if ((flags & 3) == 0) {\n      tempVar3 = infoBuffer[5];\n    }\n    else {\n      tempVar3 = 0;\n    }\n    *infoBuffer = tempVar4;\n    tempVar2 = tempVar2 - tempVar4;\n    infoBuffer[2] = tempVar3;\n    do {\n      if (tempVar2 < 1) {\n        return 0;\n      }\n      tempVar3 = (*(code *)infoBuffer[9])(dataBuffer,infoBuffer[7],tempVar4,tempVar2,returnValue);\n      tempVar2 = tempVar2 - tempVar3;\n      tempVar4 = tempVar4 + tempVar3;\n    } while (0 < tempVar3);\nLAB_000837c8:\n    *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoBuffer + 3) = flags | 0x800;\n  if ((infoBuffer[1] < 1) && (infoBuffer[0xf] < 1)) {\n    return 0;\n  }\n  callback = (code *)infoBuffer[10];\n  if (callback == (code *)0x0) {\n    return 0;\n  }\n  flags2 = (uint)(flags | 0x800);\n  tempVar4 = *dataBuffer;\n  *dataBuffer = 0;\n  if ((flags & 0x1000) == 0) {\n    tempVar2 = (*callback)(dataBuffer,infoBuffer[7],flags2 & 0x1000,1);\n    if ((tempVar2 == -1) && (tempVar3 = *dataBuffer, tempVar3 != 0)) {\n      if ((tempVar3 == 0x1d) || (tempVar3 == 0x16)) {\n        *dataBuffer = tempVar4;\n        return 0;\n      }\n      goto LAB_000837c8;\n    }\n    flags2 = (uint)*(ushort *)(infoBuffer + 3);\n    callback = (code *)infoBuffer[10];\n  }\n  else {\n    tempVar2 = infoBuffer[0x14];\n  }\n  if (((int)(flags2 << 0x1d) < 0) && (tempVar2 = tempVar2 - infoBuffer[1], infoBuffer[0xc] != 0)) {\n    tempVar2 = tempVar2 - infoBuffer[0xf];\n  }\n  tempVar2 = (*callback)(dataBuffer,infoBuffer[7],tempVar2,0);\n  if (tempVar2 == -1) {\n    tempVar3 = *dataBuffer;\n    if (tempVar3 != 0) {\n      if ((tempVar3 != 0x1d) && (tempVar3 != 0x16)) {\n        *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoBuffer + 3) = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n      *infoBuffer = infoBuffer[4];\n      infoBuffer[1] = 0;\n      goto LAB_00083774;\n    }\n    flags = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n    infoBuffer[1] = 0;\n    *(ushort *)(infoBuffer + 3) = flags;\n    *infoBuffer = infoBuffer[4];\n  }\n  else {\n    flags = *(ushort *)(infoBuffer + 3) & 0xf7ff;\n    *infoBuffer = infoBuffer[4];\n    *(ushort *)(infoBuffer + 3) = flags;\n    infoBuffer[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    infoBuffer[0x14] = tempVar2;\n  }\nLAB_00083774:\n  tempVar1 = (int *)infoBuffer[0xc];\n  *dataBuffer = tempVar4;\n  if (tempVar1 == (int *)0x0) {\n    return 0;\n  }\n  if (tempVar1 != infoBuffer + 0x10) {\n    FUN_00083b10(dataBuffer);\n  }\n  infoBuffer[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083850": "process_data_00083850",
                "param_1": "dataBuffer",
                "param_2": "infoBuffer",
                "piVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "flags",
                "uVar4": "flags2",
                "iVar5": "tempVar3",
                "pcVar6": "callback",
                "unaff_r4": "returnValue",
                "iVar7": "tempVar4"
            },
            "calling": [
                "FUN_000834f0",
                "FUN_00084484",
                "FUN_000842a4",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00083b10",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083888": {
            "entrypoint": "0x00083888",
            "current_name": "initialize_data_structures_00083888",
            "code": "\nvoid initializeDataStructures_00083888(int dataStruct)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStruct + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStruct + 4);\n    *(undefined **)(dataStruct + 0x3c) = &LAB_0008387c_1;\n    *(undefined4 *)(dataStruct + 0x2e4) = 3;\n    *(int *)(dataStruct + 0x2e8) = dataStruct + 0x2ec;\n    *(undefined4 *)(dataStruct + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStruct + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00081f00(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStruct + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = 0x84221;\n    ptr2[9] = 0x84245;\n    ptr2[10] = 0x8427d;\n    ptr2[0xb] = &LAB_0008429c_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00081f00(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = 0x84221;\n    ptr1[9] = 0x84245;\n    ptr1[10] = 0x8427d;\n    ptr1[0xb] = &LAB_0008429c_1;\n    *(undefined4 *)(dataStruct + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083888": "initialize_data_structures_00083888",
                "param_1": "dataStruct",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_000842a4"
            ],
            "called": [
                "FUN_00081f00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008397c": {
            "entrypoint": "0x0008397c",
            "current_name": "FUNC_0008397c",
            "code": "\nvoid FUNC_0008397c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008397c": "FUNC_0008397c"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083980": {
            "entrypoint": "0x00083980",
            "current_name": "FUNC_00083980",
            "code": "\nvoid FUNC_00083980(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083980": "FUNC_00083980"
            },
            "calling": [
                "FUN_00084484"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000839b4": {
            "entrypoint": "0x000839b4",
            "current_name": "process_data_000839b4",
            "code": "\nuint processData_000839b4(undefined4 inputFlag,uint dataSize,byte **dataPtrPtr)\n\n{\n  int result;\n  uint isSizeValid;\n  uint byteValue;\n  byte *bytePtr;\n  uint index;\n  byte byteVal1;\n  byte byteValArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(dataPtrPtr + 3) << 0x12)) {\n    *(ushort *)(dataPtrPtr + 3) = *(ushort *)(dataPtrPtr + 3) | 0x2000;\n    dataPtrPtr[0x19] = (byte *)((uint)dataPtrPtr[0x19] | 0x2000);\n  }\n  result = FUN_0008400c();\n  if ((result == 1) && (dataSize - 1 < 0xff)) {\n    byteValue = dataSize & 0xff;\n    byteVal1 = (byte)byteValue;\n    isSizeValid = 1;\n  }\n  else {\n    isSizeValid = FUN_0008434c(inputFlag,&byteVal1,dataSize,dataPtrPtr + 0x17);\n    if (isSizeValid == 0xffffffff) {\n      *(ushort *)(dataPtrPtr + 3) = *(ushort *)(dataPtrPtr + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (isSizeValid == 0) {\n      return dataSize;\n    }\n    byteValue = (uint)byteVal1;\n  }\n  index = 0;\n  do {\n    bytePtr = dataPtrPtr[2] + -1;\n    dataPtrPtr[2] = bytePtr;\n    if ((int)bytePtr < 0) {\n      if ((int)dataPtrPtr[6] <= (int)bytePtr) {\n        **dataPtrPtr = (byte)byteValue;\n        bytePtr = *dataPtrPtr;\n        byteValue = (uint)*bytePtr;\n        if (byteValue != 10) goto LAB_00083a04;\n      }\n      result = FUN_000842a4(inputFlag,byteValue,dataPtrPtr);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **dataPtrPtr = (byte)byteValue;\n      bytePtr = *dataPtrPtr;\nLAB_00083a04:\n      *dataPtrPtr = bytePtr + 1;\n    }\n    if (isSizeValid <= index + 1) {\n      return dataSize;\n    }\n    byteValue = (uint)byteValArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000839b4": "process_data_000839b4",
                "param_1": "inputFlag",
                "param_2": "dataSize",
                "param_3": "dataPtrPtr",
                "iVar1": "result",
                "uVar2": "isSizeValid",
                "uVar3": "byteValue",
                "pbVar4": "bytePtr",
                "uVar5": "index",
                "local_1c": "byteVal1",
                "abStack_1b": "byteValArray"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_0008434c",
                "FUN_0008400c",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083a74": {
            "entrypoint": "0x00083a74",
            "current_name": "relocate_and_adjust_00083a74",
            "code": "\nundefined4 relocateAndAdjust_00083a74(undefined4 context,int offset)\n\n{\n  int result;\n  uint info;\n  int adjustedOffset;\n  \n  FUNC_00081f94();\n  info = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((info - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = FUN_0008236c(context,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + info) {\n      result = FUN_0008236c(context,-adjustedOffset);\n      if (result != -1) {\n        DAT_2007121c = DAT_2007121c - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = info - adjustedOffset | 1;\n        FUNC_00081f98(context);\n        return 1;\n      }\n      adjustedOffset = FUN_0008236c(context,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_2007121c = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_00081f98(context);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083a74": "relocate_and_adjust_00083a74",
                "param_1": "context",
                "param_2": "offset",
                "iVar1": "result",
                "uVar2": "info",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "FUN_00083b10"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_0008236c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b10": {
            "entrypoint": "0x00083b10",
            "current_name": "reverse_relocation_00083b10",
            "code": "\nvoid reverseRelocation_00083b10(undefined4 param1,int param2)\n\n{\n  int prevOffset;\n  bool isAddrAdjustment;\n  uint prevRelocationInfo;\n  dword currRelocationInfo;\n  int nextOffset;\n  uint adjustedRelocationInfo;\n  dword adjustedRelocationOffset;\n  uint nextRelocationInfo;\n  dword nextRelocationOffset;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00081f94();\n  prevRelocationInfo = *(uint *)(param2 + -4);\n  adjustedRelocationOffset = param2 - 8;\n  adjustedRelocationInfo = prevRelocationInfo & 0xfffffffe;\n  currRelocationInfo = adjustedRelocationOffset + adjustedRelocationInfo;\n  nextRelocationInfo = *(uint *)(currRelocationInfo + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currRelocationInfo) {\n    nextRelocationInfo = nextRelocationInfo + adjustedRelocationInfo;\n    if (-1 < (int)(prevRelocationInfo << 0x1f)) {\n      adjustedRelocationOffset = adjustedRelocationOffset - *(int *)(param2 + -8);\n      nextOffset = *(int *)(adjustedRelocationOffset + 0xc);\n      prevOffset = *(int *)(adjustedRelocationOffset + 8);\n      nextRelocationInfo = nextRelocationInfo + *(int *)(param2 + -8);\n      *(int *)(prevOffset + 0xc) = nextOffset;\n      *(int *)(nextOffset + 8) = prevOffset;\n    }\n    currRelocationInfo = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(adjustedRelocationOffset + 4) = nextRelocationInfo | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = adjustedRelocationOffset;\n    if (currRelocationInfo <= nextRelocationInfo) {\n      FUN_00083a74(param1,DAT_20071218);\n    }\n  }\n  else {\n    *(uint *)(currRelocationInfo + 4) = nextRelocationInfo;\n    if ((prevRelocationInfo & 1) == 0) {\n      adjustedRelocationOffset = adjustedRelocationOffset - *(int *)(param2 + -8);\n      prevOffset = *(int *)(adjustedRelocationOffset + 8);\n      adjustedRelocationInfo = adjustedRelocationInfo + *(int *)(param2 + -8);\n      if (prevOffset == 0x2007046c) {\n        isAddrAdjustment = true;\n      }\n      else {\n        nextOffset = *(int *)(adjustedRelocationOffset + 0xc);\n        *(int *)(prevOffset + 0xc) = nextOffset;\n        *(int *)(nextOffset + 8) = prevOffset;\n        isAddrAdjustment = false;\n      }\n    }\n    else {\n      isAddrAdjustment = false;\n    }\n    if (-1 < *(int *)(currRelocationInfo + nextRelocationInfo + 4) << 0x1f) {\n      adjustedRelocationInfo = adjustedRelocationInfo + nextRelocationInfo;\n      prevOffset = *(int *)(currRelocationInfo + 8);\n      if ((!isAddrAdjustment) && (prevOffset == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = adjustedRelocationOffset;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = adjustedRelocationOffset;\n        *(undefined4 *)(adjustedRelocationOffset + 0xc) = 0x2007046c;\n        *(undefined4 *)(adjustedRelocationOffset + 8) = 0x2007046c;\n        *(uint *)(adjustedRelocationOffset + 4) = adjustedRelocationInfo | 1;\n        *(uint *)(adjustedRelocationOffset + adjustedRelocationInfo) = adjustedRelocationInfo;\n        goto LAB_00083ba4;\n      }\n      nextOffset = *(int *)(currRelocationInfo + 0xc);\n      *(int *)(prevOffset + 0xc) = nextOffset;\n      *(int *)(nextOffset + 8) = prevOffset;\n    }\n    *(uint *)(adjustedRelocationOffset + 4) = adjustedRelocationInfo | 1;\n    *(uint *)(adjustedRelocationOffset + adjustedRelocationInfo) = adjustedRelocationInfo;\n    if (!isAddrAdjustment) {\n      if (adjustedRelocationInfo < 0x200) {\n        prevRelocationInfo = adjustedRelocationInfo & 0xfffffff8;\n        prevOffset = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + prevRelocationInfo);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(adjustedRelocationInfo >> 3) >> 2 & 0xffU);\n        *(int *)(adjustedRelocationOffset + 8) = prevOffset;\n        *(uint *)(adjustedRelocationOffset + 0xc) = prevRelocationInfo + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + prevRelocationInfo) = adjustedRelocationOffset;\n        *(dword *)(prevOffset + 0xc) = adjustedRelocationOffset;\n        FUNC_00081f98(param1);\n        return;\n      }\n      prevRelocationInfo = adjustedRelocationInfo >> 9;\n      if (prevRelocationInfo < 5) {\n        prevOffset = (adjustedRelocationInfo >> 6) + 0x38;\n        nextOffset = prevOffset * 2;\n      }\n      else if (prevRelocationInfo < 0x15) {\n        prevOffset = prevRelocationInfo + 0x5b;\n        nextOffset = prevOffset * 2;\n      }\n      else if (prevRelocationInfo < 0x55) {\n        prevOffset = (adjustedRelocationInfo >> 0xc) + 0x6e;\n        nextOffset = prevOffset * 2;\n      }\n      else if (prevRelocationInfo < 0x155) {\n        prevOffset = (adjustedRelocationInfo >> 0xf) + 0x77;\n        nextOffset = prevOffset * 2;\n      }\n      else if (prevRelocationInfo < 0x555) {\n        prevOffset = (adjustedRelocationInfo >> 0x12) + 0x7c;\n        nextOffset = prevOffset * 2;\n      }\n      else {\n        nextOffset = 0xfc;\n        prevOffset = 0x7e;\n      }\n      nextRelocationOffset = nextOffset * 4 + 0x20070464;\n      currRelocationInfo = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[nextOffset];\n      if (currRelocationInfo == nextRelocationOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (prevOffset >> 2 & 0xffU);\n        nextRelocationOffset = currRelocationInfo;\n      }\n      else {\n        do {\n          if ((*(uint *)(currRelocationInfo + 4) & 0xfffffffc) <= adjustedRelocationInfo) break;\n          currRelocationInfo = *(dword *)(currRelocationInfo + 8);\n        } while (nextRelocationOffset != currRelocationInfo);\n        nextRelocationOffset = *(dword *)(currRelocationInfo + 0xc);\n      }\n      *(dword *)(adjustedRelocationOffset + 0xc) = nextRelocationOffset;\n      *(dword *)(adjustedRelocationOffset + 8) = currRelocationInfo;\n      *(dword *)(nextRelocationOffset + 8) = adjustedRelocationOffset;\n      *(dword *)(currRelocationInfo + 0xc) = adjustedRelocationOffset;\n    }\n  }\nLAB_00083ba4:\n  FUNC_00081f98(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b10": "reverse_relocation_00083b10",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "prevOffset",
                "bVar2": "isAddrAdjustment",
                "uVar3": "prevRelocationInfo",
                "dVar4": "currRelocationInfo",
                "iVar5": "nextOffset",
                "uVar6": "adjustedRelocationInfo",
                "dVar7": "adjustedRelocationOffset",
                "uVar8": "nextRelocationInfo",
                "dVar9": "nextRelocationOffset"
            },
            "calling": [
                "FUN_00081fac",
                "FUN_00081800",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00084484",
                "FUN_00083ca8"
            ],
            "called": [
                "FUN_00081f98",
                "FUN_00081f94",
                "FUN_00083a74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083ca8": {
            "entrypoint": "0x00083ca8",
            "current_name": "decompress_data_00083ca8",
            "code": "\nundefined4 decompress_data_00083ca8(undefined4 *output_buffer,uint *compressed_data,uint **remaining_data)\n\n{\n  int result;\n  uint block_size;\n  uint flag;\n  ushort temp_flag;\n  uint temp_value;\n  uint *ptr1;\n  uint *ptr2;\n  uint sub_value;\n  uint temp_value_2;\n  uint temp_value_3;\n  uint temp_value_4;\n  uint local_temp;\n  \n  if (remaining_data[2] != (uint *)0x0) {\n    temp_flag = *(ushort *)(compressed_data + 3);\n    temp_value = (uint)temp_flag;\n    if (((int)(temp_value << 0x1c) < 0) && (compressed_data[4] != 0)) {\n      ptr2 = *remaining_data;\n    }\n    else {\n      result = FUN_0008356c(output_buffer,compressed_data);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      temp_flag = *(ushort *)(compressed_data + 3);\n      temp_value = (uint)temp_flag;\n      ptr2 = *remaining_data;\n    }\n    if ((temp_flag & 2) == 0) {\n      block_size = temp_value & 2;\n      temp_value_3 = block_size;\n      sub_value = block_size;\n      local_temp = block_size;\n      if ((temp_value & 1) == 0) {\n        block_size = 0;\n        temp_value_3 = 0;\n        while( true ) {\n          while (block_size == 0) {\n            temp_value_3 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            block_size = *ptr1;\n          }\n          sub_value = compressed_data[2];\n          if ((int)(temp_value << 0x16) < 0) {\n            if (block_size < sub_value) {\n              temp_value = *compressed_data;\n              sub_value = block_size;\n            }\n            else if ((temp_value & 0x480) == 0) {\n              temp_value = *compressed_data;\n            }\n            else {\n              result = *compressed_data - compressed_data[4];\n              sub_value = result + 1 + block_size;\n              temp_value_2 = (int)(compressed_data[5] * 3) / 2;\n              if (sub_value <= temp_value_2) {\n                sub_value = temp_value_2;\n              }\n              if ((int)(temp_value << 0x15) < 0) {\n                temp_value_2 = FUN_00081810(output_buffer,sub_value);\n                if (temp_value_2 == 0) {\n                  *output_buffer = 0xc;\n                  temp_flag = *(ushort *)(compressed_data + 3);\n                  goto LAB_00083da4;\n                }\n                FUN_00081d48(temp_value_2,compressed_data[4],result);\n                *(ushort *)(compressed_data + 3) = *(ushort *)(compressed_data + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp_value_2 = FUN_00081fac(output_buffer);\n                if (temp_value_2 == 0) {\n                  FUN_00083b10(output_buffer,compressed_data[4]);\n                  temp_flag = *(ushort *)(compressed_data + 3) & 0xff7f;\n                  *output_buffer = 0xc;\n                  goto LAB_00083da4;\n                }\n              }\n              temp_value = temp_value_2 + result;\n              compressed_data[4] = temp_value_2;\n              compressed_data[5] = sub_value;\n              *compressed_data = temp_value;\n              compressed_data[2] = sub_value - result;\n              sub_value = block_size;\n            }\n            FUN_00081e34(temp_value,temp_value_3,sub_value);\n            compressed_data[2] = compressed_data[2] - sub_value;\n            *compressed_data = *compressed_data + sub_value;\n            sub_value = block_size;\n          }\n          else if ((compressed_data[4] < *compressed_data) || (temp_value = compressed_data[5], block_size < temp_value)) {\n            if (block_size < sub_value) {\n              sub_value = block_size;\n            }\n            FUN_00081e34(*compressed_data,temp_value_3,sub_value);\n            temp_value = compressed_data[2];\n            compressed_data[2] = temp_value - sub_value;\n            *compressed_data = *compressed_data + sub_value;\n            if ((temp_value - sub_value == 0) && (result = FUN_00083850(output_buffer,compressed_data), result != 0))\n            goto LAB_00083da2;\n          }\n          else {\n            sub_value = 0x7fffffff;\n            if (block_size < 0x7fffffff) {\n              sub_value = block_size;\n            }\n            sub_value = (*(code *)compressed_data[9])(output_buffer,compressed_data[7],temp_value_3,(sub_value / temp_value) * temp_value);\n            if ((int)sub_value < 1) goto LAB_00083da2;\n          }\n          ptr1 = remaining_data[2];\n          temp_value_3 = temp_value_3 + sub_value;\n          block_size = block_size - sub_value;\n          remaining_data[2] = (uint *)((int)ptr1 - sub_value);\n          if ((uint *)((int)ptr1 - sub_value) == (uint *)0x0) break;\n          temp_value = (uint)*(ushort *)(compressed_data + 3);\n        }\n      }\n      else {\n        do {\n          while (block_size == 0) {\n            sub_value = *ptr2;\n            block_size = ptr2[1];\n            local_temp = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_temp == 0) {\n            result = FUN_000840f8(sub_value,10,block_size);\n            if (result == 0) {\n              temp_value_3 = block_size + 1;\n              local_temp = 1;\n            }\n            else {\n              temp_value_3 = (result + 1) - sub_value;\n              local_temp = 1;\n            }\n          }\n          temp_value_2 = *compressed_data;\n          temp_value = temp_value_3;\n          if (block_size <= temp_value_3) {\n            temp_value = block_size;\n          }\n          flag = compressed_data[5];\n          if ((compressed_data[4] < temp_value_2) && (temp_value_4 = compressed_data[2] + flag, (int)temp_value_4 < (int)temp_value)) {\n            FUN_00081e34(temp_value_2,sub_value,temp_value_4);\n            *compressed_data = *compressed_data + temp_value_4;\n            result = FUN_00083850(output_buffer,compressed_data);\n            if (result != 0) goto LAB_00083da2;\n          }\n          else if ((int)temp_value < (int)flag) {\n            FUN_00081e34(temp_value_2,sub_value,temp_value);\n            compressed_data[2] = compressed_data[2] - temp_value;\n            *compressed_data = temp_value + *compressed_data;\n            temp_value_4 = temp_value;\n          }\n          else {\n            temp_value_4 = (*(code *)compressed_data[9])(output_buffer,compressed_data[7],sub_value,flag);\n            if ((int)temp_value_4 < 1) goto LAB_00083da2;\n          }\n          temp_value_3 = temp_value_3 - temp_value_4;\n          if (temp_value_3 == 0) {\n            result = FUN_00083850(output_buffer,compressed_data);\n            if (result != 0) goto LAB_00083da2;\n            local_temp = 0;\n          }\n          ptr1 = remaining_data[2];\n          sub_value = sub_value + temp_value_4;\n          block_size = block_size - temp_value_4;\n          remaining_data[2] = (uint *)((int)ptr1 - temp_value_4);\n        } while ((uint *)((int)ptr1 - temp_value_4) != (uint *)0x0);\n      }\n    }\n    else {\n      block_size = 0;\n      temp_value = 0;\n      do {\n        while( true ) {\n          temp_value_3 = temp_value;\n          if (0x7ffffbff < temp_value) {\n            temp_value_3 = 0x7ffffc00;\n          }\n          if (temp_value != 0) break;\n          block_size = *ptr2;\n          temp_value = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)compressed_data[9])(output_buffer,compressed_data[7],block_size,temp_value_3);\n        if (result < 1) {\nLAB_00083da2:\n          temp_flag = *(ushort *)(compressed_data + 3);\nLAB_00083da4:\n          *(ushort *)(compressed_data + 3) = temp_flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = remaining_data[2];\n        block_size = block_size + result;\n        temp_value = temp_value - result;\n        remaining_data[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083ca8": "decompress_data_00083ca8",
                "param_1": "output_buffer",
                "param_2": "compressed_data",
                "param_3": "remaining_data",
                "iVar1": "result",
                "uVar2": "block_size",
                "uVar3": "flag",
                "uVar4": "temp_flag",
                "uVar5": "temp_value",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "sub_value",
                "uVar9": "temp_value_2",
                "uVar10": "temp_value_3",
                "uVar11": "temp_value_4",
                "local_2c": "local_temp"
            },
            "calling": [
                "FUN_00082824"
            ],
            "called": [
                "FUN_00081d48",
                "FUN_00081fac",
                "FUN_00083b10",
                "FUN_00081810",
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_000840f8",
                "FUN_00081e34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084004": {
            "entrypoint": "0x00084004",
            "current_name": "get_constant_value_00084004",
            "code": "\nundefined4 getConstantValue_00084004(void)\n\n{\n  return 0x20070878;\n}\n\n",
            "renaming": {
                "FUN_00084004": "get_constant_value_00084004"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008400c": {
            "entrypoint": "0x0008400c",
            "current_name": "get_relocation_offset_0008400c",
            "code": "\ndword getRelocationOffset_0008400c(void)\n\n{\n  return relocationTable[275].r_offset;\n}\n\n",
            "renaming": {
                "FUN_0008400c": "get_relocation_offset_0008400c",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084018": {
            "entrypoint": "0x00084018",
            "current_name": "verify_and_update_permissions_00084018",
            "code": "\nvoid verifyAndUpdatePermissions_00084018(int inputData,int *outputData)\n\n{\n  ushort permissionFlags;\n  int result;\n  int updatedResult;\n  uint tempVar;\n  bool isSpecial;\n  undefined tempStack [4];\n  uint localVar;\n  \n  permissionFlags = *(ushort *)(outputData + 3);\n  tempVar = (uint)permissionFlags;\n  if ((int)(tempVar << 0x1e) < 0) {\n    *outputData = (int)outputData + 0x43;\n    outputData[4] = (int)outputData + 0x43;\n    outputData[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)outputData + 0xe)) {\n    result = FUN_00084494(inputData,(int)*(short *)((int)outputData + 0xe),tempStack);\n    if (-1 < result) {\n      isSpecial = (localVar & 0xf000) == 0x2000;\n      if (((localVar & 0xf000) == 0x8000) && (outputData[10] == 0x8427d)) {\n        result = 0x400;\n        *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 0x400;\n        outputData[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 0x800;\n      }\n      goto LAB_00084074;\n    }\n    permissionFlags = *(ushort *)(outputData + 3);\n    tempVar = (uint)permissionFlags;\n  }\n  *(ushort *)(outputData + 3) = permissionFlags | 0x800;\n  if ((tempVar & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  isSpecial = false;\nLAB_00084074:\n  updatedResult = FUN_00081810(inputData,result);\n  permissionFlags = *(ushort *)(outputData + 3);\n  if (updatedResult == 0) {\n    if (-1 < (int)((uint)permissionFlags << 0x16)) {\n      *(ushort *)(outputData + 3) = permissionFlags | 2;\n      *outputData = (int)outputData + 0x43;\n      outputData[4] = (int)outputData + 0x43;\n      outputData[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(inputData + 0x3c) = &LAB_0008387c_1;\n    *(ushort *)(outputData + 3) = permissionFlags | 0x80;\n    *outputData = updatedResult;\n    outputData[4] = updatedResult;\n    outputData[5] = result;\n    if ((isSpecial) && (result = FUN_000844bc(inputData,(int)*(short *)((int)outputData + 0xe)), result != 0))\n    {\n      *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084018": "verify_and_update_permissions_00084018",
                "param_1": "inputData",
                "param_2": "outputData",
                "uVar1": "permissionFlags",
                "iVar2": "result",
                "iVar3": "updatedResult",
                "uVar4": "tempVar",
                "bVar5": "isSpecial",
                "auStack_54": "tempStack",
                "local_50": "localVar"
            },
            "calling": [
                "FUN_0008356c"
            ],
            "called": [
                "FUN_00081810",
                "FUN_00084494",
                "FUN_000844bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000840f8": {
            "entrypoint": "0x000840f8",
            "current_name": "find_value_in_array_000840f8",
            "code": "\nuint * find_value_in_array_000840f8(uint *array,char value,uint length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\nLAB_00084128:\n    if (3 < length) {\n      current_ptr = array;\n      do {\n        xor_result = *current_ptr ^ CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n        array = current_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        length = length - 4;\n        array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != value) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_00084150;\n      } while (*(char *)array != value);\n    }\n  }\n  else if (length == 0) {\nLAB_00084150:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != value) {\n    current_ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) goto LAB_00084128;\n      if (length == 0) goto LAB_00084150;\n      current_ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != value);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_000840f8": "find_value_in_array_000840f8",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "uVar1": "xor_result",
                "iVar2": "index",
                "puVar3": "current_ptr",
                "bVar4": "is_last_index"
            },
            "calling": [
                "FUN_0008289c",
                "FUN_00083ca8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000841e4": {
            "entrypoint": "0x000841e4",
            "current_name": "execute_function_000841e4",
            "code": "\nint executeFunction_000841e4(uint index)\n\n{\n  dword relOffset;\n  undefined4 thunkRetVal;\n  int funcPtr;\n  code *currentFunction;\n  undefined4 register4;\n  undefined4 register5;\n  undefined4 returnAfterFuncCall;\n  undefined4 constant;\n  \n  relOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  constant = 0x20070460;\n  if (0x1f < index) {\n    *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n    return -1;\n  }\n  funcPtr = *(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x2dc);\n  if ((funcPtr == 0) || (currentFunction = *(code **)(funcPtr + index * 4), currentFunction == (code *)0x0)) {\n    thunkRetVal = thunk_FUN_00080efe(Elf32_Rel_ARRAY_20070000[140].r_offset);\n    DAT_20071244 = 0;\n    funcPtr = FUNC_00080efc(thunkRetVal,index,index,0,constant,register4,register5,returnAfterFuncCall);\n    if ((funcPtr == -1) && (DAT_20071244 != 0)) {\n      *(int *)relOffset = DAT_20071244;\n      return -1;\n    }\n    return funcPtr;\n  }\n  if (currentFunction == (code *)0x1) {\n    return 0;\n  }\n  if (currentFunction != (code *)0xffffffff) {\n    *(undefined4 *)(funcPtr + index * 4) = 0;\n    (*currentFunction)(index);\n    return 0;\n  }\n  *(undefined4 *)Elf32_Rel_ARRAY_20070000[140].r_offset = 0x16;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000841e4": "execute_function_000841e4",
                "param_1": "index",
                "dVar1": "relOffset",
                "uVar2": "thunkRetVal",
                "iVar3": "funcPtr",
                "pcVar4": "currentFunction",
                "unaff_r4": "register4",
                "unaff_r5": "register5",
                "in_lr": "returnAfterFuncCall",
                "uVar5": "constant"
            },
            "calling": [
                "FUN_000836ec"
            ],
            "called": [
                "FUN_00080efc",
                "thunk_FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00080efe": {
            "entrypoint": "0x0008421c",
            "current_name": "get_error_code_thunk_00080efe",
            "code": "\nundefined4 get_error_code_thunk_00080efe(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "thunk_FUN_00080efe": "get_error_code_thunk_00080efe"
            },
            "calling": [
                "FUN_000841e4"
            ],
            "called": [
                "FUN_00080efe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084220": {
            "entrypoint": "0x00084220",
            "current_name": "update_sum_or_clear_bit_00084220",
            "code": "\nvoid updateSumOrClearBit_00084220(undefined4 input_value,int pointer_offset)\n\n{\n  int result;\n  \n  result = FUN_00084508(input_value,(int)*(short *)(pointer_offset + 0xe));\n  if (-1 < result) {\n    *(int *)(pointer_offset + 0x50) = *(int *)(pointer_offset + 0x50) + result;\n    return;\n  }\n  *(ushort *)(pointer_offset + 0xc) = *(ushort *)(pointer_offset + 0xc) & 0xefff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084220": "update_sum_or_clear_bit_00084220",
                "param_1": "input_value",
                "param_2": "pointer_offset",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00084508"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084244": {
            "entrypoint": "0x00084244",
            "current_name": "process_data_00084244",
            "code": "\nvoid processData_00084244(int *output,int input,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_000844e0(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_20071244 = 0;\n  result = FUN_00080ec8((int)*(short *)(input + 0xe),paramA,paramB,paramB,unused1,unused2,\n                       unused3,unused4);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *output = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084244": "process_data_00084244",
                "param_1": "output",
                "param_2": "input",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4"
            },
            "calling": [],
            "called": [
                "FUN_00080ec8",
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008427c": {
            "entrypoint": "0x0008427c",
            "current_name": "update_value_based_on_condition_0008427c",
            "code": "\nvoid updateValueBasedOnCondition_0008427c(undefined4 arg1,int arg2)\n\n{\n  int result;\n  ushort newValue;\n  \n  result = FUN_000844e0(arg1,(int)*(short *)(arg2 + 0xe));\n  if (result == -1) {\n    newValue = *(ushort *)(arg2 + 0xc) & 0xefff;\n  }\n  else {\n    newValue = *(ushort *)(arg2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(arg2 + 0x50) = result;\n  }\n  *(ushort *)(arg2 + 0xc) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008427c": "update_value_based_on_condition_0008427c",
                "param_1": "arg1",
                "param_2": "arg2",
                "iVar1": "result",
                "uVar2": "newValue"
            },
            "calling": [],
            "called": [
                "FUN_000844e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nuint processData_000842a4(int input,uint byteValue,undefined4 *dataArray,undefined4 param_4)\n\n{\n  ushort ushortValue;\n  uint tempValue;\n  undefined *ptr;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    FUN_00083888();\n  }\n  ushortValue = *(ushort *)(dataArray + 3);\n  tempValue = (uint)ushortValue;\n  dataArray[2] = dataArray[6];\n  if ((-1 < (int)(tempValue << 0x1c)) || (index = dataArray[4], index == 0)) {\n    index = FUN_0008356c(input,dataArray,ushortValue,tempValue,param_4);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushortValue = *(ushort *)(dataArray + 3);\n    index = dataArray[4];\n    tempValue = (uint)ushortValue;\n  }\n  byteValue = byteValue & 0xff;\n  if ((int)(tempValue << 0x12) < 0) {\n    ptr = (undefined *)*dataArray;\n    index = (int)ptr - index;\n    if (index < (int)dataArray[5]) {\nLAB_000842d6:\n      index = index + 1;\n      goto LAB_000842d8;\n    }\n  }\n  else {\n    dataArray[0x19] = dataArray[0x19] & 0xffffdfff;\n    ptr = (undefined *)*dataArray;\n    *(ushort *)(dataArray + 3) = ushortValue | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)dataArray[5]) goto LAB_000842d6;\n  }\n  index = FUN_00083850(input,dataArray);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*dataArray;\n  index = 1;\nLAB_000842d8:\n  dataArray[2] = dataArray[2] + -1;\n  *dataArray = ptr + 1;\n  *ptr = (char)byteValue;\n  if (((dataArray[5] == index) ||\n      (((int)((uint)*(ushort *)(dataArray + 3) << 0x1f) < 0 && (byteValue == 10)))) &&\n     (index = FUN_00083850(input,dataArray), index != 0)) {\n    return 0xffffffff;\n  }\n  return byteValue;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "input",
                "param_2": "byteValue",
                "param_3": "dataArray",
                "uVar1": "ushortValue",
                "uVar2": "tempValue",
                "puVar3": "ptr",
                "iVar4": "index"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008356c",
                "FUN_00083850",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008434c": {
            "entrypoint": "0x0008434c",
            "current_name": "execute_relocation_0008434c",
            "code": "\nvoid executeRelocation_0008434c(undefined4 *result,int size,undefined4 data,undefined4 *status)\n\n{\n  dword relocationInfo;\n  undefined4 parameter;\n  int returnValue;\n  undefined buffer [12];\n  \n  relocationInfo = Elf32_Rel_ARRAY_20070000[275].r_info;\n  if (size == 0) {\n    parameter = FUN_00084004();\n    returnValue = (*(code *)relocationInfo)(result,buffer,0,parameter,status);\n  }\n  else {\n    parameter = FUN_00084004();\n    returnValue = (*(code *)relocationInfo)(result,size,data,parameter,status);\n  }\n  if (returnValue == -1) {\n    *status = 0;\n    *result = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008434c": "execute_relocation_0008434c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "data",
                "param_4": "status",
                "dVar1": "relocationInfo",
                "uVar2": "parameter",
                "iVar3": "returnValue",
                "auStack_24": "buffer"
            },
            "calling": [
                "FUN_000839b4"
            ],
            "called": [
                "FUN_0008439c",
                "FUN_00084004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008439c": {
            "entrypoint": "0x0008439c",
            "current_name": "set_param_value_0008439c",
            "code": "\nundefined4 set_param_value_0008439c(undefined4 *output_value_ptr,undefined *buffer_ptr,uint input_value)\n\n{\n  if (buffer_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (input_value < 0x100) {\n    *buffer_ptr = (char)input_value;\n    return 1;\n  }\n  *output_value_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_0008439c": "set_param_value_0008439c",
                "param_1": "output_value_ptr",
                "param_2": "buffer_ptr",
                "param_3": "input_value"
            },
            "calling": [
                "FUN_0008434c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084484": {
            "entrypoint": "0x00084484",
            "current_name": "validate_param_00084484",
            "code": "\nundefined4 validate_param_00084484(int input_param)\n\n{\n  dword offset;\n  undefined4 result;\n  int status;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input_param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083888();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      result = FUN_00083850(offset,input_param);\n      if ((*(code **)(input_param + 0x2c) != (code *)0x0) &&\n         (status = (**(code **)(input_param + 0x2c))(offset,*(undefined4 *)(input_param + 0x1c)), status < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        FUN_00083b10(offset,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          FUN_00083b10(offset);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        FUN_00083b10(offset);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      FUNC_0008397c();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      FUNC_00083980();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00084484": "validate_param_00084484",
                "param_1": "input_param",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "status"
            },
            "calling": [],
            "called": [
                "FUN_00083b10",
                "FUN_00083850",
                "FUN_00083980",
                "FUN_0008397c",
                "FUN_00083888"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084494": {
            "entrypoint": "0x00084494",
            "current_name": "process_data_00084494",
            "code": "\nvoid processData_00084494(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080eb0(input1,input2,input2,0,input3);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084494": "process_data_00084494",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eb0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844bc": {
            "entrypoint": "0x000844bc",
            "current_name": "check_and_update_value_000844bc",
            "code": "\nvoid checkAndUpdateValue_000844bc(int *returnValue,undefined4 inputValue)\n\n{\n  int result;\n  \n  DAT_20071244 = 0;\n  result = FUN_00080eba(inputValue);\n  if ((result == -1) && (DAT_20071244 != 0)) {\n    *returnValue = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844bc": "check_and_update_value_000844bc",
                "param_1": "returnValue",
                "param_2": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00084018"
            ],
            "called": [
                "FUN_00080eba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844e0": {
            "entrypoint": "0x000844e0",
            "current_name": "perform_operation_000844e0",
            "code": "\nvoid performOperation_000844e0(int *result,undefined4 data_1,undefined4 data_2,undefined4 data_3)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080ebe(data_1,data_2,data_3);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000844e0": "perform_operation_000844e0",
                "param_1": "result",
                "param_2": "data_1",
                "param_3": "data_2",
                "param_4": "data_3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008427c",
                "FUN_00084244"
            ],
            "called": [
                "FUN_00080ebe"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084508": {
            "entrypoint": "0x00084508",
            "current_name": "check_and_assign_value_00084508",
            "code": "\nvoid checkAndAssignValue_00084508(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_20071244 = 0;\n  returnValue = FUN_00080ec2(input1,input2,input3);\n  if ((returnValue == -1) && (DAT_20071244 != 0)) {\n    *result = DAT_20071244;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084508": "check_and_assign_value_00084508",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00084220"
            ],
            "called": [
                "FUN_00080ec2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084530": {
            "entrypoint": "0x00084530",
            "current_name": "check_parameters_00084530",
            "code": "\nint checkParameters_00084530(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_0008458c();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084530": "check_parameters_00084530",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008289c"
            ],
            "called": [
                "FUN_0008458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008455c": {
            "entrypoint": "0x0008455c",
            "current_name": "subtract_values_0008455c",
            "code": "\nvoid subtractValues_0008455c(uint valueToSubtractFrom,int valueToSubtract,undefined4 lowerPart,undefined4 upperPart,int *resultArray)\n\n{\n  uint result;\n  longlong multipliedValue;\n  \n  multipliedValue = FUN_000845c0();\n  multipliedValue = multipliedValue * CONCAT44(upperPart,lowerPart);\n  result = (uint)multipliedValue;\n  *resultArray = valueToSubtractFrom - result;\n  resultArray[1] = (valueToSubtract - (int)((ulonglong)multipliedValue >> 0x20)) - (uint)(valueToSubtractFrom < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008455c": "subtract_values_0008455c",
                "param_1": "valueToSubtractFrom",
                "param_2": "valueToSubtract",
                "param_3": "lowerPart",
                "param_4": "upperPart",
                "param_5": "resultArray",
                "uVar1": "result",
                "lVar2": "multipliedValue"
            },
            "calling": [],
            "called": [
                "FUN_000845c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008458c": {
            "entrypoint": "0x0008458c",
            "current_name": "calculate_difference_0008458c",
            "code": "\nvoid calculate_difference_0008458c(uint input_value,int another_input,undefined4 param_3,undefined4 param_4,int *output_array)\n\n{\n  uint calculated_value;\n  longlong result;\n  \n  result = FUN_00084860();\n  result = result * CONCAT44(param_4,param_3);\n  calculated_value = (uint)result;\n  *output_array = input_value - calculated_value;\n  output_array[1] = (another_input - (int)((ulonglong)result >> 0x20)) - (uint)(input_value < calculated_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008458c": "calculate_difference_0008458c",
                "param_1": "input_value",
                "param_2": "another_input",
                "param_5": "output_array",
                "uVar1": "calculated_value",
                "lVar2": "result"
            },
            "calling": [
                "FUN_00084530"
            ],
            "called": [
                "FUN_00084860"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845c0": {
            "entrypoint": "0x000845c0",
            "current_name": "perform_division_000845c0",
            "code": "\nundefined8 performDivision_000845c0(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong tempLong;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint partialDividend1;\n  int shiftCount;\n  uint partialDividend2;\n  uint partialDividend3;\n  uint isNegativeDividend;\n  uint isNegativeDivisor;\n  uint isNegativeDivisorTemp;\n  uint combinedQuotient;\n  bool isCarry;\n  \n  if ((int)divisor < 0) {\n    isCarry = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)isCarry;\n    isNegativeDividend = 0xffffffff;\n  }\n  else {\n    isNegativeDividend = 0;\n  }\n  if ((int)remainder < 0) {\n    isNegativeDividend = ~isNegativeDividend;\n    isCarry = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)isCarry;\n  }\n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount != 0) {\n        quotient2 = dividend >> (0x20U - shiftCount & 0xff);\n        quotient = quotient << shiftCount;\n        dividend = dividend << shiftCount;\n        divisor = divisor << shiftCount | quotient2;\n      }\n      quotient1 = quotient >> 0x10;\n      quotient3 = divisor / quotient1;\n      partialDividend2 = (quotient & 0xffff) * quotient3;\n      isNegativeDivisor = dividend >> 0x10 | (divisor - quotient1 * quotient3) * 0x10000;\n      quotient2 = quotient3;\n      if (isNegativeDivisor <= partialDividend2 && partialDividend2 - isNegativeDivisor != 0) {\n        isCarry = CARRY4(isNegativeDivisor,quotient);\n        isNegativeDivisor = isNegativeDivisor + quotient;\n        quotient2 = quotient3 - 1;\n        if ((isCarry == false) && (isNegativeDivisor <= partialDividend2 && partialDividend2 - isNegativeDivisor != 0)) {\n          quotient2 = quotient3 - 2;\n          isNegativeDivisor = isNegativeDivisor + quotient;\n        }\n      }\n      partialDividend3 = (isNegativeDivisor - partialDividend2) / quotient1;\n      quotient3 = (quotient & 0xffff) * partialDividend3;\n      partialDividend2 = dividend & 0xffff | ((isNegativeDivisor - partialDividend2) - quotient1 * partialDividend3) * 0x10000;\n      quotient1 = partialDividend3;\n      if (partialDividend2 <= quotient3 && quotient3 - partialDividend2 != 0) {\n        quotient1 = partialDividend3 - 1;\n        if ((CARRY4(partialDividend2,quotient) == false) &&\n           (partialDividend2 + quotient <= quotient3 && quotient3 - (partialDividend2 + quotient) != 0)) {\n          quotient1 = partialDividend3 - 2;\n        }\n      }\n      quotient1 = quotient1 | quotient2 << 0x10;\n      quotient2 = 0;\n    }\n    else {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount == 0) {\n        divisor = divisor - quotient;\n        quotient3 = quotient >> 0x10;\n        combinedQuotient = quotient & 0xffff;\n        quotient2 = 1;\n      }\n      else {\n        quotient = quotient << shiftCount;\n        quotient2 = divisor >> (0x20U - shiftCount & 0xff);\n        quotient3 = quotient >> 0x10;\n        isNegativeDivisor = quotient2 / quotient3;\n        combinedQuotient = quotient & 0xffff;\n        partialDividend2 = combinedQuotient * isNegativeDivisor;\n        partialDividend3 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        quotient2 = partialDividend3 >> 0x10 | (quotient2 - quotient3 * isNegativeDivisor) * 0x10000;\n        dividend = dividend << shiftCount;\n        quotient1 = isNegativeDivisor;\n        if (quotient2 <= partialDividend2 && partialDividend2 - quotient2 != 0) {\n          isCarry = CARRY4(quotient2,quotient);\n          quotient2 = quotient2 + quotient;\n          quotient1 = isNegativeDivisor - 1;\n          if ((isCarry == false) && (quotient2 <= partialDividend2 && partialDividend2 - quotient2 != 0)) {\n            quotient1 = isNegativeDivisor - 2;\n            quotient2 = quotient2 + quotient;\n          }\n        }\n        partialDividend1 = (quotient2 - partialDividend2) / quotient3;\n        isNegativeDivisor = combinedQuotient * partialDividend1;\n        divisor = partialDividend3 & 0xffff | ((quotient2 - partialDividend2) - quotient3 * partialDividend1) * 0x10000;\n        quotient2 = partialDividend1;\n        if (divisor <= isNegativeDivisor && isNegativeDivisor - divisor != 0) {\n          isCarry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient2 = partialDividend1 - 1;\n          if ((isCarry == false) && (divisor <= isNegativeDivisor && isNegativeDivisor - divisor != 0)) {\n            quotient2 = partialDividend1 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - isNegativeDivisor;\n        quotient2 = quotient2 | quotient1 << 0x10;\n      }\n      quotient1 = divisor / quotient3;\n      isNegativeDivisor = combinedQuotient * quotient1;\n      partialDividend3 = dividend >> 0x10 | (divisor - quotient3 * quotient1) * 0x10000;\n      partialDividend2 = quotient1;\n      if (partialDividend3 <= isNegativeDivisor && isNegativeDivisor - partialDividend3 != 0) {\n        isCarry = CARRY4(partialDividend3,quotient);\n        partialDividend3 = partialDividend3 + quotient;\n        partialDividend2 = quotient1 - 1;\n        if ((isCarry == false) && (partialDividend3 <= isNegativeDivisor && isNegativeDivisor - partialDividend3 != 0)) {\n          partialDividend2 = quotient1 - 2;\n          partialDividend3 = partialDividend3 + quotient;\n        }\n      }\n      partialDividend1 = (partialDividend3 - isNegativeDivisor) / quotient3;\n      combinedQuotient = combinedQuotient * partialDividend1;\n      quotient3 = dividend & 0xffff | ((partialDividend3 - isNegativeDivisor) - quotient3 * partialDividend1) * 0x10000;\n      quotient1 = partialDividend1;\n      if (quotient3 <= combinedQuotient && combinedQuotient - quotient3 != 0) {\n        quotient1 = partialDividend1 - 1;\n        if ((CARRY4(quotient3,quotient) == false) &&\n           (quotient3 + quotient <= combinedQuotient && combinedQuotient - (quotient3 + quotient) != 0)) {\n          quotient1 = partialDividend1 - 2;\n        }\n      }\n      quotient1 = quotient1 | partialDividend2 << 0x10;\n    }\n  }\n  else if (divisor < remainder) {\n    quotient2 = 0;\n    quotient1 = 0;\n  }\n  else {\n    shiftCount = LZCOUNT(remainder);\n    if (shiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        quotient2 = 0;\n        quotient1 = 1;\n      }\n      else {\n        quotient1 = 0;\n        quotient2 = 0;\n      }\n    }\n    else {\n      quotient2 = 0x20 - shiftCount;\n      quotient3 = divisor >> (quotient2 & 0xff);\n      combinedQuotient = quotient >> (quotient2 & 0xff) | remainder << shiftCount;\n      isNegativeDivisor = combinedQuotient >> 0x10;\n      quotient1 = quotient3 / isNegativeDivisor;\n      partialDividend3 = (combinedQuotient & 0xffff) * quotient1;\n      partialDividend2 = divisor << shiftCount | dividend >> (quotient2 & 0xff);\n      quotient3 = partialDividend2 >> 0x10 | (quotient3 - isNegativeDivisor * quotient1) * 0x10000;\n      quotient2 = quotient1;\n      if (quotient3 <= partialDividend3 && partialDividend3 - quotient3 != 0) {\n        isCarry = CARRY4(quotient3,combinedQuotient);\n        quotient3 = quotient3 + combinedQuotient;\n        quotient2 = quotient1 - 1;\n        if ((isCarry == false) && (quotient3 <= partialDividend3 && partialDividend3 - quotient3 != 0)) {\n          quotient2 = quotient1 - 2;\n          quotient3 = quotient3 + combinedQuotient;\n        }\n      }\n      partialDividend1 = (quotient3 - partialDividend3) / isNegativeDivisor;\n      isNegativeDivisorTemp = (combinedQuotient & 0xffff) * partialDividend1;\n      quotient3 = partialDividend2 & 0xffff | ((quotient3 - partialDividend3) - isNegativeDivisor * partialDividend1) * 0x10000;\n      quotient1 = partialDividend1;\n      if (quotient3 <= isNegativeDivisorTemp && isNegativeDivisorTemp - quotient3 != 0) {\n        isCarry = CARRY4(quotient3,combinedQuotient);\n        quotient3 = quotient3 + combinedQuotient;\n        quotient1 = partialDividend1 - 1;\n        if ((isCarry == false) && (quotient3 <= isNegativeDivisorTemp && isNegativeDivisorTemp - quotient3 != 0)) {\n          quotient1 = partialDividend1 - 2;\n          quotient3 = quotient3 + combinedQuotient;\n        }\n      }\n      quotient1 = quotient1 | quotient2 << 0x10;\n      tempLong = (ulonglong)quotient1 * (ulonglong)(quotient << shiftCount);\n      partialDividend2 = (uint)((ulonglong)tempLong >> 0x20);\n      quotient2 = 0;\n      if ((quotient3 - isNegativeDivisorTemp < partialDividend2) ||\n         ((quotient3 - isNegativeDivisorTemp == partialDividend2 && (dividend << shiftCount < (uint)tempLong)))) {\n        quotient1 = quotient1 - 1;\n        quotient2 = 0;\n      }\n    }\n  }\n  if (isNegativeDividend != 0) {\n    isCarry = quotient1 != 0;\n    quotient1 = -quotient1;\n    quotient2 = -quotient2 - (uint)isCarry;\n  }\n  return CONCAT44(quotient2,quotient1);\n}\n\n",
            "renaming": {
                "FUN_000845c0": "perform_division_000845c0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "tempLong",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "partialDividend1",
                "iVar6": "shiftCount",
                "uVar7": "partialDividend2",
                "uVar8": "partialDividend3",
                "uVar9": "isNegativeDividend",
                "uVar10": "isNegativeDivisor",
                "uVar11": "isNegativeDivisorTemp",
                "uVar12": "combinedQuotient",
                "bVar13": "isCarry"
            },
            "calling": [
                "FUN_0008455c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084860": {
            "entrypoint": "0x00084860",
            "current_name": "calculate_division_remainder_00084860",
            "code": "\nulonglong calculateDivisionRemainder_00084860(uint dividend,uint divisor,uint dividendQuotient,uint divisorQuotient)\n\n{\n  longlong tempLongVar;\n  uint quotient;\n  uint divisorHigh;\n  uint divisorLow;\n  uint dividendLow;\n  uint tempVar1;\n  uint tempVar2;\n  uint quotient1;\n  uint quotient2;\n  int shiftCount;\n  bool carryFlag;\n  \n  if (divisorQuotient == 0) {\n    if (dividendQuotient <= divisor) {\n      if (dividendQuotient == 0) {\n        dividendQuotient = 1 / 0;\n      }\n      shiftCount = LZCOUNT(dividendQuotient);\n      if (shiftCount == 0) {\n        divisor = divisor - dividendQuotient;\n        divisorHigh = dividendQuotient >> 0x10;\n        dividendLow = dividendQuotient & 0xffff;\n        quotient = 1;\n      }\n      else {\n        dividendQuotient = dividendQuotient << shiftCount;\n        quotient1 = divisor >> (0x20U - shiftCount & 0xff);\n        divisorHigh = dividendQuotient >> 0x10;\n        quotient2 = quotient1 / divisorHigh;\n        dividendLow = dividendQuotient & 0xffff;\n        quotient = dividendLow * quotient2;\n        tempVar1 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        divisorLow = tempVar1 >> 0x10 | (quotient1 - divisorHigh * quotient2) * 0x10000;\n        dividend = dividend << shiftCount;\n        quotient1 = quotient2;\n        if (divisorLow <= quotient && quotient - divisorLow != 0) {\n          carryFlag = CARRY4(divisorLow,dividendQuotient);\n          divisorLow = divisorLow + dividendQuotient;\n          quotient1 = quotient2 - 1;\n          if ((carryFlag == false) && (divisorLow <= quotient && quotient - divisorLow != 0)) {\n            quotient1 = quotient2 - 2;\n            divisorLow = divisorLow + dividendQuotient;\n          }\n        }\n        tempVar2 = (divisorLow - quotient) / divisorHigh;\n        quotient2 = dividendLow * tempVar2;\n        divisor = tempVar1 & 0xffff | ((divisorLow - quotient) - divisorHigh * tempVar2) * 0x10000;\n        quotient = tempVar2;\n        if (divisor <= quotient2 && quotient2 - divisor != 0) {\n          carryFlag = CARRY4(divisor,dividendQuotient);\n          divisor = divisor + dividendQuotient;\n          quotient = tempVar2 - 1;\n          if ((carryFlag == false) && (divisor <= quotient2 && quotient2 - divisor != 0)) {\n            quotient = tempVar2 - 2;\n            divisor = divisor + dividendQuotient;\n          }\n        }\n        divisor = divisor - quotient2;\n        quotient = quotient | quotient1 << 0x10;\n      }\n      quotient2 = divisor / divisorHigh;\n      divisorLow = dividendLow * quotient2;\n      tempVar1 = dividend >> 0x10 | (divisor - divisorHigh * quotient2) * 0x10000;\n      quotient1 = quotient2;\n      if (tempVar1 <= divisorLow && divisorLow - tempVar1 != 0) {\n        carryFlag = CARRY4(tempVar1,dividendQuotient);\n        tempVar1 = tempVar1 + dividendQuotient;\n        quotient1 = quotient2 - 1;\n        if ((carryFlag == false) && (tempVar1 <= divisorLow && divisorLow - tempVar1 != 0)) {\n          quotient1 = quotient2 - 2;\n          tempVar1 = tempVar1 + dividendQuotient;\n        }\n      }\n      quotient2 = (tempVar1 - divisorLow) / divisorHigh;\n      dividendLow = dividendLow * quotient2;\n      tempVar1 = dividend & 0xffff | ((tempVar1 - divisorLow) - divisorHigh * quotient2) * 0x10000;\n      divisorHigh = quotient2;\n      if (tempVar1 <= dividendLow && dividendLow - tempVar1 != 0) {\n        divisorHigh = quotient2 - 1;\n        if ((CARRY4(tempVar1,dividendQuotient) == false) &&\n           (tempVar1 + dividendQuotient <= dividendLow && dividendLow - (tempVar1 + dividendQuotient) != 0)) {\n          divisorHigh = quotient2 - 2;\n        }\n      }\n      return CONCAT44(quotient,divisorHigh | quotient1 << 0x10);\n    }\n    shiftCount = LZCOUNT(dividendQuotient);\n    if (shiftCount != 0) {\n      quotient1 = dividend >> (0x20U - shiftCount & 0xff);\n      dividendQuotient = dividendQuotient << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = quotient1 | divisor << shiftCount;\n    }\n    quotient = dividendQuotient >> 0x10;\n    divisorHigh = divisor / quotient;\n    dividendLow = (dividendQuotient & 0xffff) * divisorHigh;\n    quotient2 = dividend >> 0x10 | (divisor - quotient * divisorHigh) * 0x10000;\n    quotient1 = divisorHigh;\n    if (quotient2 <= dividendLow && dividendLow - quotient2 != 0) {\n      carryFlag = CARRY4(quotient2,dividendQuotient);\n      quotient2 = quotient2 + dividendQuotient;\n      quotient1 = divisorHigh - 1;\n      if ((carryFlag == false) && (quotient2 <= dividendLow && dividendLow - quotient2 != 0)) {\n        quotient1 = divisorHigh - 2;\n        quotient2 = quotient2 + dividendQuotient;\n      }\n    }\n    tempVar1 = (quotient2 - dividendLow) / quotient;\n    divisorHigh = (dividendQuotient & 0xffff) * tempVar1;\n    dividendLow = dividend & 0xffff | ((quotient2 - dividendLow) - quotient * tempVar1) * 0x10000;\n    quotient = tempVar1;\n    if (dividendLow <= divisorHigh && divisorHigh - dividendLow != 0) {\n      quotient = tempVar1 - 1;\n      if ((CARRY4(dividendLow,dividendQuotient) == false) &&\n         (dividendLow + dividendQuotient <= divisorHigh && divisorHigh - (dividendLow + dividendQuotient) != 0)) {\n        quotient = tempVar1 - 2;\n      }\n    }\n    quotient = quotient | quotient1 << 0x10;\n  }\n  else {\n    if (divisor < divisorQuotient) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(divisorQuotient);\n    if (shiftCount == 0) {\n      if ((divisorQuotient < divisor) || (dividendQuotient <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - shiftCount;\n      quotient1 = divisor >> (quotient & 0xff);\n      divisorHigh = divisorQuotient << shiftCount | dividendQuotient >> (quotient & 0xff);\n      dividendLow = divisorHigh >> 0x10;\n      divisorLow = quotient1 / dividendLow;\n      quotient2 = (divisorHigh & 0xffff) * divisorLow;\n      tempVar1 = dividend >> (quotient & 0xff) | divisor << shiftCount;\n      quotient = tempVar1 >> 0x10 | (quotient1 - dividendLow * divisorLow) * 0x10000;\n      quotient1 = divisorLow;\n      if (quotient <= quotient2 && quotient2 - quotient != 0) {\n        carryFlag = CARRY4(quotient,divisorHigh);\n        quotient = quotient + divisorHigh;\n        quotient1 = divisorLow - 1;\n        if ((carryFlag == false) && (quotient <= quotient2 && quotient2 - quotient != 0)) {\n          quotient1 = divisorLow - 2;\n          quotient = quotient + divisorHigh;\n        }\n      }\n      divisorLow = (quotient - quotient2) / dividendLow;\n      tempVar2 = (divisorHigh & 0xffff) * divisorLow;\n      dividendLow = tempVar1 & 0xffff | ((quotient - quotient2) - dividendLow * divisorLow) * 0x10000;\n      quotient = divisorLow;\n      if (dividendLow <= tempVar2 && tempVar2 - dividendLow != 0) {\n        carryFlag = CARRY4(dividendLow,divisorHigh);\n        dividendLow = dividendLow + divisorHigh;\n        quotient = divisorLow - 1;\n        if ((carryFlag == false) && (dividendLow <= tempVar2 && tempVar2 - dividendLow != 0)) {\n          quotient = divisorLow - 2;\n          dividendLow = dividendLow + divisorHigh;\n        }\n      }\n      quotient = quotient | quotient1 << 0x10;\n      tempLongVar = (ulonglong)quotient * (ulonglong)(dividendQuotient << shiftCount);\n      quotient1 = (uint)((ulonglong)tempLongVar >> 0x20);\n      if ((dividendLow - tempVar2 < quotient1) || ((dividendLow - tempVar2 == quotient1 && (dividend << shiftCount < (uint)tempLongVar)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "renaming": {
                "FUN_00084860": "calculate_division_remainder_00084860",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "dividendQuotient",
                "param_4": "divisorQuotient",
                "lVar1": "tempLongVar",
                "uVar2": "quotient",
                "uVar3": "divisorHigh",
                "uVar4": "divisorLow",
                "uVar5": "dividendLow",
                "uVar6": "tempVar1",
                "uVar7": "tempVar2",
                "uVar8": "quotient1",
                "uVar9": "quotient2",
                "iVar10": "shiftCount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_0008458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085844": {
            "entrypoint": "0x00085844",
            "current_name": "FUNC_00085844",
            "code": "\nvoid FUNC_00085844(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085844": "FUNC_00085844"
            },
            "calling": [
                "FUN_00081778"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 116683,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801e0",
            "FUN_00080250",
            "FUN_000803fc",
            "FUN_0008044c",
            "FUN_000805a8",
            "FUN_000806a0",
            "FUN_000806f8",
            "FUN_00080774",
            "FUN_0008089c",
            "FUN_00080970",
            "FUN_000809be",
            "FUN_000809e4",
            "FUN_00080a0a",
            "FUN_00080a30",
            "FUN_00080a94",
            "FUN_00080aa8",
            "FUN_00080b2c",
            "FUN_00080b90",
            "FUN_00080b98",
            "FUN_00080c98",
            "FUN_00080d30",
            "FUN_00080d3e",
            "FUN_00080d58",
            "FUN_00080d62",
            "FUN_00080d6a",
            "FUN_00080e80",
            "FUN_00080e88",
            "FUN_00080eaa",
            "FUN_00080eb0",
            "FUN_00080eba",
            "FUN_00080ebe",
            "FUN_00080ec2",
            "FUN_00080ec8",
            "FUN_00080eec",
            "FUN_00080efe",
            "thunk_FUN_000816d8",
            "FUN_00080f0c",
            "FUN_00081014",
            "FUN_000810a6",
            "FUN_000810c4",
            "FUN_000810cc",
            "FUN_000810d8",
            "FUN_000810e8",
            "FUN_000810fc",
            "FUN_0008113a",
            "thunk_FUN_0008113a",
            "FUN_0008117a",
            "FUN_00081190",
            "FUN_000811b0",
            "FUN_000811ca",
            "FUN_000811e8",
            "FUN_00081214",
            "FUN_00081248",
            "FUN_00081276",
            "FUN_000812b8",
            "FUN_00081348",
            "FUN_000813dc",
            "FUN_00081438",
            "FUN_0008145c",
            "FUN_00081472",
            "FUN_00081480",
            "FUN_00081496",
            "FUN_000814ae",
            "FUN_000814d0",
            "FUN_000814f6",
            "FUN_0008151c",
            "FUN_00081560",
            "FUN_00081570",
            "FUN_0008159e",
            "FUN_000815b8",
            "FUN_000815de",
            "FUN_000815ec",
            "FUN_00081618",
            "FUN_00081624",
            "FUN_00081684",
            "FUN_000816d8",
            "FUN_000816ec",
            "FUN_000816f8",
            "FUN_00081750",
            "FUN_00081778",
            "FUN_000817c8",
            "FUN_000817f0",
            "FUN_00081800",
            "FUN_00081810",
            "FUN_00081d48",
            "FUN_00081e34",
            "FUN_00081f00",
            "FUN_00081f9c",
            "FUN_00081fac",
            "FUN_0008236c",
            "FUN_00082390",
            "FUN_000825cc",
            "FUN_00082688",
            "FUN_00082824",
            "FUN_0008289c",
            "FUN_000834f0",
            "FUN_0008356c",
            "FUN_000836ec",
            "FUN_00083850",
            "FUN_00083888",
            "FUN_000839b4",
            "FUN_00083a74",
            "FUN_00083b10",
            "FUN_00083ca8",
            "FUN_00084004",
            "FUN_0008400c",
            "FUN_00084018",
            "FUN_000840f8",
            "FUN_000841e4",
            "thunk_FUN_00080efe",
            "FUN_00084220",
            "FUN_00084244",
            "FUN_0008427c",
            "FUN_000842a4",
            "FUN_0008434c",
            "FUN_0008439c",
            "FUN_00084484",
            "FUN_00084494",
            "FUN_000844bc",
            "FUN_000844e0",
            "FUN_00084508",
            "FUN_00084530",
            "FUN_0008455c",
            "FUN_0008458c",
            "FUN_000845c0",
            "FUN_00084860"
        ]
    ],
    "locked_functions": []
}