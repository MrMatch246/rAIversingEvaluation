{
    "functions": {
        "FUN_0800010c": {
            "entrypoint": "0x0800010c",
            "current_name": "initialize_flag_0800010c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000118) */\n\nundefined4 initializeFlag_0800010c(undefined4 inputValue)\n\n{\n  if ((char)DAT_20000160 == '\\0') {\n    DAT_20000160._0_1_ = '\\x01';\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_0800010c": "initialize_flag_0800010c",
                "param_1": "inputValue"
            },
            "calling": [],
            "called": [
                "FUN_08007328"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000178": {
            "entrypoint": "0x08000178",
            "current_name": "find_end_of_string_08000178",
            "code": "\nchar * find_end_of_string_08000178(char *input_string)\n\n{\n  char current_character;\n  char *next_character;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_character = current_position + 1;\n    current_character = *current_position;\n    current_position = next_character;\n  } while (current_character != '\\0');\n  return next_character + (-1 - (int)input_string);\n}\n\n",
            "renaming": {
                "FUN_08000178": "find_end_of_string_08000178",
                "param_1": "input_string",
                "cVar1": "current_character",
                "pcVar2": "next_character",
                "pcVar3": "current_position"
            },
            "calling": [
                "FUN_08005c96",
                "FUN_08005ce8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000190": {
            "entrypoint": "0x08000190",
            "current_name": "calculate_result_08000190",
            "code": "\nulonglong calculateResult_08000190(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp6 = input4 ^ 0x80000000;\n  temp9 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp6) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp9 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp8 = (int)temp9 >> 0x15;\n  if (!flag2) {\n    flag2 = temp8 == -1;\n  }\n  temp1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = temp1 == -1;\n  }\n  if (flag2) {\n    if (temp8 == -1 || temp1 == -1) {\n      temp9 = temp6;\n      temp11 = input3;\n      if (temp8 == -1) {\n        temp9 = input2;\n        temp11 = input1;\n      }\n      if (temp8 != -1 || temp1 != -1) {\n        input3 = temp11;\n        temp6 = temp9;\n      }\n      flag2 = (temp11 | temp9 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp6 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp9 == temp6;\n      }\n      if (!flag2) {\n        temp9 = temp9 | 0x80000;\n      }\n      return CONCAT44(temp9,temp11);\n    }\n    if (((input2 ^ temp6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp9 | input1) == 0) {\n        input1 = input3;\n        input2 = temp6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp6) {\n      return 0;\n    }\n    if (temp9 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp6 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,input1 << 1);\n    }\n    if (temp9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp9 = temp9 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp11 = input4 - temp9;\n  flag2 = temp11 != 0;\n  if (input4 < temp9) {\n    temp11 = -temp11;\n  }\n  temp10 = input1;\n  temp7 = input2;\n  if (flag2 && temp9 <= input4) {\n    temp9 = temp9 + temp11;\n    temp10 = input3;\n    temp7 = temp6;\n    input3 = input1;\n    temp6 = input2;\n  }\n  if (0x36 < temp11) {\n    return CONCAT44(temp7,temp10);\n  }\n  temp4 = temp7 & 0xfffff | 0x100000;\n  if ((temp7 & 0x80000000) != 0) {\n    flag2 = temp10 != 0;\n    temp10 = -temp10;\n    temp4 = -temp4 - (uint)flag2;\n  }\n  temp7 = temp6 & 0xfffff | 0x100000;\n  if ((temp6 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp7 = -temp7 - (uint)flag2;\n  }\n  if (temp9 == temp11) {\n    temp7 = temp7 ^ 0x100000;\n    if (temp9 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      temp9 = 1;\n    }\n    else {\n      temp11 = temp11 - 1;\n    }\n  }\n  temp6 = -temp11 + 0x20;\n  if ((int)temp11 < 0x21) {\n    temp12 = input3 << (temp6 & 0xff);\n    input3 = input3 >> (temp11 & 0xff);\n    temp3 = temp10 + input3;\n    temp5 = temp7 << (temp6 & 0xff);\n    temp6 = temp3 + temp5;\n    temp4 = temp4 + CARRY4(temp10,input3) + ((int)temp7 >> (temp11 & 0xff)) +\n            (uint)CARRY4(temp3,temp5);\n  }\n  else {\n    temp12 = temp7 << (-temp11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp12 = temp12 | 2;\n    }\n    temp7 = (int)temp7 >> (temp11 - 0x20 & 0xff);\n    temp6 = temp10 + temp7;\n    temp4 = temp4 + ((int)temp7 >> 0x1f) + (uint)CARRY4(temp10,temp7);\n  }\n  input2 = temp4 & 0x80000000;\n  temp11 = temp4;\n  if ((int)temp4 < 0) {\n    flag2 = temp12 == 0;\n    temp12 = -temp12;\n    temp11 = -temp6;\n    temp6 = -(uint)!flag2 - temp6;\n    temp11 = -(uint)(flag2 <= temp11) - temp4;\n  }\n  if (0xfffff < temp11) {\n    temp10 = temp9 - 1;\n    if (0x1fffff < temp11) {\n      temp10 = temp11 & 1;\n      temp11 = temp11 >> 1;\n      temp2 = (byte)temp6;\n      temp6 = (uint)(temp10 != 0) << 0x1f | temp6 >> 1;\n      temp12 = (uint)(temp2 & 1) << 0x1f | temp12 >> 1;\n      temp10 = temp9;\n      if (0xffbfffff < temp9 * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    flag2 = 0x7fffffff < temp12;\n    if (temp12 == 0x80000000) {\n      flag2 = (temp6 & 1) != 0;\n    }\n    return CONCAT44(temp11 + temp10 * 0x100000 + (uint)CARRY4(temp6,(uint)flag2) | input2,\n                    temp6 + flag2);\n  }\n  flag1 = (temp12 & 0x80000000) != 0;\n  temp12 = temp12 << 1;\n  temp10 = temp6 * 2;\n  flag2 = CARRY4(temp6,temp6);\n  temp6 = temp6 * 2 + (uint)flag1;\n  temp11 = temp11 * 2 + (uint)(flag2 || CARRY4(temp10,(uint)flag1));\n  temp10 = temp9 - 2;\n  if ((temp11 & 0x100000) != 0) goto LAB_080002a0;\n  temp7 = temp6;\n  temp9 = temp11;\n  if (temp11 == 0) {\n    temp7 = 0;\n    temp9 = temp6;\n  }\n  temp8 = LZCOUNT(temp9);\n  if (temp11 == 0) {\n    temp8 = temp8 + 0x20;\n  }\n  temp11 = temp8 - 0xb;\n  flag3 = SBORROW4(temp11,0x20);\n  temp6 = temp8 - 0x2b;\n  flag2 = (int)temp6 < 0;\n  flag1 = temp6 == 0;\n  if ((int)temp11 < 0x20) {\n    flag3 = SCARRY4(temp6,0xc);\n    temp8 = temp8 + -0x1f;\n    flag2 = temp8 < 0;\n    flag1 = temp8 == 0;\n    temp6 = temp11;\n    if (!flag1 && flag2 == flag3) {\n      temp7 = temp9 << (temp11 & 0xff);\n      temp9 = temp9 >> (0xcU - temp8 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp12 = 0x20 - temp6;\n  }\n  temp9 = temp9 << (temp6 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp9 = temp9 | temp7 >> (temp12 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp7 = temp7 << (temp6 & 0xff);\n  }\nLAB_08000318:\n  if ((int)temp11 <= (int)temp10) {\n    return CONCAT44(temp9 + (temp10 - temp11) * 0x100000 | input2,temp7);\n  }\n  temp6 = ~(temp10 - temp11);\n  if ((int)temp6 < 0x1f) {\n    temp8 = temp6 - 0x13;\n    if (temp8 != 0 && temp8 < 0 == SCARRY4(temp6 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp7 >> (0x20 - (0xcU - temp8) & 0xff) | temp9 << (0xcU - temp8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp6 = temp6 + 1;\n    return CONCAT44(input2 | temp9 >> (temp6 & 0xff),\n                    temp7 >> (temp6 & 0xff) | temp9 << (0x20 - temp6 & 0xff));\n  }\n  return CONCAT44(temp4,temp9 >> (temp6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000190": "calculate_result_08000190",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "temp1",
                "bVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001a66"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000194": {
            "entrypoint": "0x08000194",
            "current_name": "perform_unsigned_arithmetic_operation_08000194",
            "code": "\nulonglong performUnsignedArithmeticOperation_08000194(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shiftRight1;\n  byte bit1;\n  uint result1;\n  uint result2;\n  uint result3;\n  int shiftRight2;\n  uint input2Shifted;\n  uint input4Shifted;\n  uint result4;\n  uint result5;\n  uint result6;\n  uint result7;\n  bool isZero1;\n  bool isZero2;\n  bool isZero3;\n  \n  input2Shifted = input2 << 1;\n  result4 = input4 << 1;\n  isZero1 = ((input2 ^ input4) & 0x7fffffff) == 0;\n  isZero2 = isZero1 && input1 == input3;\n  if (!isZero1 || input1 != input3) {\n    isZero2 = (input2Shifted | input1) == 0;\n  }\n  if (!isZero2) {\n    isZero2 = (result4 | input3) == 0;\n  }\n  shiftRight2 = (int)input2Shifted >> 0x15;\n  if (!isZero2) {\n    isZero2 = shiftRight2 == -1;\n  }\n  shiftRight1 = (int)result4 >> 0x15;\n  if (!isZero2) {\n    isZero2 = shiftRight1 == -1;\n  }\n  if (isZero2) {\n    if (shiftRight2 == -1 || shiftRight1 == -1) {\n      result4 = input4;\n      input2Shifted = input3;\n      if (shiftRight2 == -1) {\n        result4 = input2;\n        input2Shifted = input1;\n      }\n      if (shiftRight2 != -1 || shiftRight1 != -1) {\n        input3 = input2Shifted;\n        input4 = result4;\n      }\n      isZero2 = (input2Shifted | result4 << 0xc) == 0;\n      if (isZero2) {\n        isZero2 = (input3 | input4 << 0xc) == 0;\n      }\n      if (isZero2) {\n        isZero2 = result4 == input4;\n      }\n      if (!isZero2) {\n        result4 = result4 | 0x80000;\n      }\n      return CONCAT44(result4,input2Shifted);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((input2Shifted | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (input2Shifted >> 0x15 == 0) {\n      isZero2 = (input1 & 0x80000000) != 0;\n      result4 = input2 * 2 + (uint)isZero2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)isZero2)) {\n        result4 = result4 | 0x80000000;\n      }\n      return CONCAT44(result4,input1 << 1);\n    }\n    if (input2Shifted < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003d4:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  input2Shifted = input2Shifted >> 0x15;\n  result4 = result4 >> 0x15;\n  result5 = result4 - input2Shifted;\n  isZero2 = result5 != 0;\n  if (result4 < input2Shifted) {\n    result5 = -result5;\n  }\n  input4Shifted = input1;\n  result3 = input2;\n  if (isZero2 && input2Shifted <= result4) {\n    input2Shifted = input2Shifted + result5;\n    input4Shifted = input3;\n    result3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < result5) {\n    return CONCAT44(result3,input4Shifted);\n  }\n  result4 = result3 & 0xfffff | 0x100000;\n  if ((result3 & 0x80000000) != 0) {\n    isZero2 = input4Shifted != 0;\n    input4Shifted = -input4Shifted;\n    result4 = -result4 - (uint)isZero2;\n  }\n  result3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    isZero2 = input3 != 0;\n    input3 = -input3;\n    result3 = -result3 - (uint)isZero2;\n  }\n  if (input2Shifted == result5) {\n    result3 = result3 ^ 0x100000;\n    if (input2Shifted == 0) {\n      result4 = result4 ^ 0x100000;\n      input2Shifted = 1;\n    }\n    else {\n      result5 = result5 - 1;\n    }\n  }\n  result7 = -result5 + 0x20;\n  if ((int)result5 < 0x21) {\n    result6 = input3 << (result7 & 0xff);\n    input3 = input3 >> (result5 & 0xff);\n    result1 = input4Shifted + input3;\n    result2 = result3 << (result7 & 0xff);\n    result7 = result1 + result2;\n    result4 = result4 + CARRY4(input4Shifted,input3) + ((int)result3 >> (result5 & 0xff)) +\n            (uint)CARRY4(result1,result2);\n  }\n  else {\n    result6 = result3 << (-result5 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result6 = result6 | 2;\n    }\n    result3 = (int)result3 >> (result5 - 0x20 & 0xff);\n    result7 = input4Shifted + result3;\n    result4 = result4 + ((int)result3 >> 0x1f) + (uint)CARRY4(input4Shifted,result3);\n  }\n  input2 = result4 & 0x80000000;\n  result5 = result4;\n  if ((int)result4 < 0) {\n    isZero2 = result6 == 0;\n    result6 = -result6;\n    result5 = -result7;\n    result7 = -(uint)!isZero2 - result7;\n    result5 = -(uint)(isZero2 <= result5) - result4;\n  }\n  if (0xfffff < result5) {\n    input4Shifted = input2Shifted - 1;\n    if (0x1fffff < result5) {\n      result4 = result5 & 1;\n      result5 = result5 >> 1;\n      bit1 = (byte)result7;\n      result7 = (uint)(result4 != 0) << 0x1f | result7 >> 1;\n      result6 = (uint)(bit1 & 1) << 0x1f | result6 >> 1;\n      input4Shifted = input2Shifted;\n      if (0xffbfffff < input2Shifted * 0x200000) goto LAB_080003d4;\n    }\nLAB_080002a0:\n    isZero2 = 0x7fffffff < result6;\n    if (result6 == 0x80000000) {\n      isZero2 = (result7 & 1) != 0;\n    }\n    return CONCAT44(result5 + input4Shifted * 0x100000 + (uint)CARRY4(result7,(uint)isZero2) | input2,\n                    result7 + isZero2);\n  }\n  isZero1 = (result6 & 0x80000000) != 0;\n  result6 = result6 << 1;\n  input4Shifted = result7 * 2;\n  isZero2 = CARRY4(result7,result7);\n  result7 = result7 * 2 + (uint)isZero1;\n  result5 = result5 * 2 + (uint)(isZero2 || CARRY4(input4Shifted,(uint)isZero1));\n  input4Shifted = input2Shifted - 2;\n  if ((result5 & 0x100000) != 0) goto LAB_080002a0;\n  result3 = result7;\n  input2Shifted = result5;\n  if (result5 == 0) {\n    result3 = 0;\n    input2Shifted = result7;\n  }\n  shiftRight2 = LZCOUNT(input2Shifted);\n  if (result5 == 0) {\n    shiftRight2 = shiftRight2 + 0x20;\n  }\n  result7 = shiftRight2 - 0xb;\n  isZero3 = SBORROW4(result7,0x20);\n  result5 = shiftRight2 - 0x2b;\n  isZero2 = (int)result5 < 0;\n  isZero1 = result5 == 0;\n  if ((int)result7 < 0x20) {\n    isZero3 = SCARRY4(result5,0xc);\n    shiftRight2 = shiftRight2 + -0x1f;\n    isZero2 = shiftRight2 < 0;\n    isZero1 = shiftRight2 == 0;\n    result5 = result7;\n    if (!isZero1 && isZero2 == isZero3) {\n      result3 = input2Shifted << (result7 & 0xff);\n      input2Shifted = input2Shifted >> (0xcU - shiftRight2 & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZero1 || isZero2 != isZero3) {\n    result6 = 0x20 - result5;\n  }\n  input2Shifted = input2Shifted << (result5 & 0xff);\n  if (isZero1 || isZero2 != isZero3) {\n    input2Shifted = input2Shifted | result3 >> (result6 & 0xff);\n  }\n  if (isZero1 || isZero2 != isZero3) {\n    result3 = result3 << (result5 & 0xff);\n  }\nLAB_08000318:\n  if ((int)result7 <= (int)input4Shifted) {\n    return CONCAT44(input2Shifted + (input4Shifted - result7) * 0x100000 | input2,result3);\n  }\n  result5 = ~(input4Shifted - result7);\n  if ((int)result5 < 0x1f) {\n    shiftRight2 = result5 - 0x13;\n    if (shiftRight2 != 0 && shiftRight2 < 0 == SCARRY4(result5 - 0x1f,0xc)) {\n      return CONCAT44(result4,result3 >> (0x20 - (0xcU - shiftRight2) & 0xff) | input2Shifted << (0xcU - shiftRight2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result5 = result5 + 1;\n    return CONCAT44(input2 | input2Shifted >> (result5 & 0xff),\n                    result3 >> (result5 & 0xff) | input2Shifted << (0x20 - result5 & 0xff));\n  }\n  return CONCAT44(result4,input2Shifted >> (result5 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000194": "perform_unsigned_arithmetic_operation_08000194",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftRight1",
                "bVar2": "bit1",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "result3",
                "iVar6": "shiftRight2",
                "uVar7": "input2Shifted",
                "uVar8": "input4Shifted",
                "uVar9": "result4",
                "uVar10": "result5",
                "uVar11": "result6",
                "uVar12": "result7",
                "bVar13": "isZero1",
                "bVar14": "isZero2",
                "bVar15": "isZero3"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800040c": {
            "entrypoint": "0x0800040c",
            "current_name": "reverse_and_shift_bits_0800040c",
            "code": "\nulonglong reverse_and_shift_bits_0800040c(uint input)\n\n{\n  uint result1;\n  uint result2;\n  int bit_count;\n  uint shift_amount;\n  uint temp;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result1 = 0;\n  bit_count = LZCOUNT(input);\n  shift_amount = bit_count + 0x15;\n  is_overflow = SBORROW4(shift_amount,0x20);\n  result2 = bit_count - 0xb;\n  is_negative = (int)result2 < 0;\n  is_zero = result2 == 0;\n  if (shift_amount < 0x20) {\n    is_overflow = SCARRY4(result2,0xc);\n    is_negative = false;\n    is_zero = bit_count + 1 == 0;\n    result2 = shift_amount;\n    if (!is_zero && is_overflow == false) {\n      result1 = input << shift_amount;\n      input = input >> (0xcU - (bit_count + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    temp = 0x20 - result2;\n  }\n  input = input << (result2 & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | 0U >> (temp & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    result1 = 0 << (result2 & 0xff);\n  }\nLAB_08000318:\n  if (shift_amount < 0x433) {\n    return CONCAT44(input + (0x432 - shift_amount) * 0x100000,result1);\n  }\n  result2 = ~(0x432 - shift_amount);\n  if (0x1e < (int)result2) {\n    return (ulonglong)(input >> (result2 - 0x1f & 0xff));\n  }\n  bit_count = result2 - 0x13;\n  if (bit_count == 0 || bit_count < 0 != SCARRY4(result2 - 0x1f,0xc)) {\n    result2 = result2 + 1;\n    return CONCAT44(input >> (result2 & 0xff),\n                    result1 >> (result2 & 0xff) | input << (0x20 - result2 & 0xff));\n  }\n  return (ulonglong)(result1 >> (0x20 - (0xcU - bit_count) & 0xff) | input << (0xcU - bit_count & 0xff));\n}\n\n",
            "renaming": {
                "FUN_0800040c": "reverse_and_shift_bits_0800040c",
                "param_1": "input",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "bit_count",
                "uVar4": "shift_amount",
                "in_r12": "temp",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08000cd0",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800042c": {
            "entrypoint": "0x0800042c",
            "current_name": "shift_and_concatenate_0800042c",
            "code": "\nulonglong shiftAndConcatenate_0800042c(uint input)\n\n{\n  uint zeroCounter;\n  uint tempInput;\n  uint shiftAmount;\n  int leadingZeroes;\n  uint adjustedShift;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool overflowFlag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  tempInput = input;\n  if ((int)signBit < 0) {\n    tempInput = -input;\n  }\n  zeroCounter = 0;\n  leadingZeroes = LZCOUNT(tempInput);\n  adjustedShift = leadingZeroes + 0x15;\n  overflowFlag = SBORROW4(adjustedShift,0x20);\n  shiftAmount = leadingZeroes - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (adjustedShift < 0x20) {\n    overflowFlag = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeroes + 1 == 0;\n    shiftAmount = adjustedShift;\n    if (!isZero && overflowFlag == false) {\n      zeroCounter = tempInput << adjustedShift;\n      tempInput = tempInput >> (0xcU - (leadingZeroes + 1) & 0xff);\n      goto LAB_08000318;\n    }\n  }\n  if (isZero || isNegative != overflowFlag) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  tempInput = tempInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != overflowFlag) {\n    tempInput = tempInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != overflowFlag) {\n    zeroCounter = 0 << (shiftAmount & 0xff);\n  }\nLAB_08000318:\n  if (adjustedShift < 0x433) {\n    return CONCAT44(tempInput + (0x432 - adjustedShift) * 0x100000 | signBit,zeroCounter);\n  }\n  shiftAmount = ~(0x432 - adjustedShift);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,tempInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeroes = shiftAmount - 0x13;\n  if (leadingZeroes == 0 || leadingZeroes < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | tempInput >> (shiftAmount & 0xff),\n                    zeroCounter >> (shiftAmount & 0xff) | tempInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,zeroCounter >> (0x20 - (0xcU - leadingZeroes) & 0xff) | tempInput << (0xcU - leadingZeroes & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800042c": "shift_and_concatenate_0800042c",
                "param_1": "input",
                "uVar1": "zeroCounter",
                "uVar2": "tempInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeroes",
                "uVar5": "adjustedShift",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "overflowFlag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0",
                "FUN_08001918"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004f8": {
            "entrypoint": "0x080004f8",
            "current_name": "calculate_shifted_value_extended_080004f8",
            "code": "\nulonglong calculate_shifted_value_extended_080004f8(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  ulonglong result_part1;\n  longlong result_part2;\n  uint shifted_part1;\n  uint shifted_part2;\n  int sum;\n  uint difference;\n  uint unaff_r5;\n  uint temp_part1;\n  uint temp_part2;\n  bool is_zero;\n  bool is_negative;\n  bool is_overflow;\n  ulonglong combined_param;\n  \n  combined_param = CONCAT44(input_param_2,input_param_1);\n  temp_part1 = 0x7ff;\n  shifted_part2 = input_param_2 >> 0x14 & 0x7ff;\n  is_zero = shifted_part2 == 0;\n  if (!is_zero) {\n    unaff_r5 = input_param_4 >> 0x14 & 0x7ff;\n    is_zero = unaff_r5 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_part2 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = unaff_r5 == 0x7ff;\n  }\n  if (is_zero) {\n    combined_param = calculate_shifted_value_080006d4();\n  }\n  shifted_part1 = (uint)(combined_param >> 0x20);\n  sum = shifted_part2 + unaff_r5;\n  shifted_part2 = shifted_part1 ^ input_param_4;\n  shifted_part1 = shifted_part1 & ~(temp_part1 << 0x15);\n  input_param_4 = input_param_4 & ~(temp_part1 << 0x15);\n  is_zero = ((uint)combined_param | shifted_part1 << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (input_param_3 | input_param_4 << 0xc) == 0;\n  }\n  shifted_part1 = shifted_part1 | 0x100000;\n  input_param_4 = input_param_4 | 0x100000;\n  if (is_zero) {\n    input_param_3 = (uint)combined_param | input_param_3;\n    input_param_4 = (shifted_part2 & 0x80000000 | shifted_part1) ^ input_param_4;\n    shifted_part2 = temp_part1 >> 1;\n    is_overflow = SBORROW4(sum,shifted_part2);\n    difference = sum - shifted_part2;\n    is_zero = difference == 0;\n    shifted_part1 = difference;\n    if (!is_zero && (int)shifted_part2 <= sum) {\n      is_overflow = SBORROW4(temp_part1,difference);\n      shifted_part1 = temp_part1 - difference;\n      is_zero = temp_part1 == difference;\n    }\n    if (!is_zero && (int)shifted_part1 < 0 == is_overflow) {\n      input_param_4 = input_param_4 | difference * 0x100000;\n    }\n    if (!is_zero && (int)shifted_part1 < 0 == is_overflow) {\n      return CONCAT44(input_param_4,input_param_3);\n    }\n    input_param_4 = input_param_4 | 0x100000;\n    temp_part1 = 0;\n    is_overflow = SBORROW4(difference,1);\n    difference = difference - 1;\n    is_zero = difference == 0;\n    shifted_part2 = difference;\n  }\n  else {\n    result_part1 = (combined_param & 0xffffffff) * (ulonglong)input_param_3;\n    combined_param = (combined_param & 0xffffffff) * (ulonglong)input_param_4 +\n             (ulonglong)shifted_part1 * (ulonglong)input_param_3 + (result_part1 >> 0x20);\n    temp_part2 = (uint)combined_param;\n    result_part2 = (ulonglong)shifted_part1 * (ulonglong)input_param_4 + (combined_param >> 0x20);\n    temp_part1 = (uint)result_part2;\n    shifted_part1 = (uint)((ulonglong)result_part2 >> 0x20);\n    if ((int)result_part1 != 0) {\n      temp_part2 = temp_part2 | 1;\n    }\n    difference = (sum + -0x3ff) - (uint)(shifted_part1 < 0x200);\n    if (shifted_part1 < 0x200) {\n      is_zero = (temp_part2 & 0x80000000) != 0;\n      temp_part2 = temp_part2 << 1;\n      result_part2 = CONCAT44(shifted_part1 * 2 + (uint)(CARRY4(temp_part1,temp_part1) || CARRY4(temp_part1 * 2,(uint)is_zero)),\n                       temp_part1 * 2 + (uint)is_zero);\n    }\n    input_param_4 = shifted_part2 & 0x80000000 | (int)((ulonglong)result_part2 >> 0x20) << 0xb | (uint)result_part2 >> 0x15;\n    input_param_3 = (uint)result_part2 << 0xb | temp_part2 >> 0x15;\n    temp_part1 = temp_part2 * 0x800;\n    is_negative = 0xfc < difference;\n    is_overflow = SBORROW4(difference,0xfd);\n    shifted_part1 = difference - 0xfd;\n    is_zero = shifted_part1 == 0;\n    shifted_part2 = shifted_part1;\n    if (is_negative && !is_zero) {\n      is_negative = 0x6ff < shifted_part1;\n      is_overflow = SBORROW4(shifted_part1,0x700);\n      shifted_part2 = difference - 0x7fd;\n      is_zero = shifted_part1 == 0x700;\n    }\n    if (!is_negative || is_zero) {\n      is_zero = 0x7fffffff < temp_part1;\n      if (temp_part1 == 0x80000000) {\n        is_zero = (temp_part2 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param_4 + difference * 0x100000 + (uint)CARRY4(input_param_3,(uint)is_zero),input_param_3 + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)shifted_part2 < 0 == is_overflow) {\n    return (ulonglong)(input_param_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  is_negative = SCARRY4(difference,0x36);\n  is_zero = (int)(difference + 0x36) < 0;\n  is_overflow = difference == 0xffffffca;\n  if (is_overflow || is_zero != is_negative) {\n    input_param_3 = 0;\n  }\n  if (is_overflow || is_zero != is_negative) {\n    input_param_4 = input_param_4 & 0x80000000;\n  }\n  if (is_overflow || is_zero != is_negative) {\n    return CONCAT44(input_param_4,input_param_3);\n  }\n  shifted_part2 = -difference;\n  shifted_part1 = shifted_part2 - 0x20;\n  if (0x1f < (int)shifted_part2) {\n    difference = input_param_3 >> (shifted_part1 & 0xff) | input_param_4 << (0x20 - shifted_part1 & 0xff);\n    shifted_part2 = (input_param_4 >> (shifted_part1 & 0xff) & ~((input_param_4 & 0x80000000) >> (shifted_part1 & 0xff))) -\n            ((int)difference >> 0x1f);\n    if ((temp_part1 | input_param_3 << (0x20 - shifted_part1 & 0xff) | difference << 1) == 0) {\n      shifted_part2 = shifted_part2 & ~(difference >> 0x1f);\n    }\n    return CONCAT44(input_param_4,shifted_part2) & 0x80000000ffffffff;\n  }\n  sum = shifted_part2 - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(shifted_part1,0xc)) {\n    temp_part2 = input_param_3 << (difference + 0x20 & 0xff);\n    shifted_part1 = input_param_3 >> (shifted_part2 & 0xff) | input_param_4 << (difference + 0x20 & 0xff);\n    difference = shifted_part1 + -((int)temp_part2 >> 0x1f);\n    if ((temp_part1 | temp_part2 << 1) == 0) {\n      difference = difference & ~(temp_part2 >> 0x1f);\n    }\n    return CONCAT44((input_param_4 & 0x80000000) +\n                    ((input_param_4 & 0x7fffffff) >> (shifted_part2 & 0xff)) +\n                    (uint)CARRY4(shifted_part1,-((int)temp_part2 >> 0x1f)),difference);\n  }\n  shifted_part2 = 0xc - sum;\n  difference = input_param_3 << (shifted_part2 & 0xff);\n  shifted_part2 = input_param_3 >> (0x20 - shifted_part2 & 0xff) | input_param_4 << (shifted_part2 & 0xff);\n  shifted_part1 = shifted_part2 + -((int)difference >> 0x1f);\n  if ((temp_part1 | difference << 1) == 0) {\n    shifted_part1 = shifted_part1 & ~(difference >> 0x1f);\n  }\n  return CONCAT44((input_param_4 & 0x80000000) + (uint)CARRY4(shifted_part2,-((int)difference >> 0x1f)),shifted_part1);\n}\n\n",
            "renaming": {
                "FUN_080004f8": "calculate_shifted_value_extended_080004f8",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result_part1",
                "lVar2": "result_part2",
                "uVar3": "shifted_part1",
                "uVar4": "shifted_part2",
                "iVar5": "sum",
                "uVar6": "difference",
                "uVar7": "temp_part1",
                "uVar8": "temp_part2",
                "bVar9": "is_zero",
                "bVar10": "is_negative",
                "bVar11": "is_overflow",
                "uVar12": "combined_param"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080006d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006d4": {
            "entrypoint": "0x080006d4",
            "current_name": "calculate_shifted_value_080006d4",
            "code": "\nulonglong calculate_shifted_value_080006d4(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint shifted_input_1;\n  uint saved_input_2;\n  uint shifted_input_3;\n  uint shifted_input_4;\n  uint saved_input_1;\n  bool is_zero;\n  \n  shifted_input_3 = saved_input_1 & input_4 >> 0x14;\n  if (saved_input_2 != saved_input_1 && shifted_input_3 != saved_input_1) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (saved_input_2 == 0) {\n      shifted_input_4 = input_2 & 0x80000000;\n      do {\n        shifted_input_1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(shifted_input_1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | shifted_input_4;\n      if (shifted_input_3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      shifted_input_3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(shifted_input_3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  shifted_input_4 = input_2;\n  if (((!is_zero) && ((saved_input_2 != saved_input_1 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((shifted_input_3 != saved_input_1 || (input_1 = input_3, shifted_input_4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(shifted_input_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006d4": "calculate_shifted_value_080006d4",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "shifted_input_1",
                "unaff_r4": "saved_input_2",
                "uVar2": "shifted_input_3",
                "uVar3": "shifted_input_4",
                "in_r12": "saved_input_1",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800074c": {
            "entrypoint": "0x0800074c",
            "current_name": "calculate_floating_point_0800074c",
            "code": "\nulonglong calculate_floating_point_0800074c(undefined4 input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input_param_2,input_param_1);\n  temp14 = 0x7ff;\n  temp7 = input_param_2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input_param_4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = calculate_floating_point_0800074c_value_080008ba();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input_param_3 | input_param_4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input_param_4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input_param_4 << 0xc) >> 4 | 0x10000000 | input_param_3 >> 0x18;\n    temp14 = input_param_3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input_param_4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input_param_3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800086a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800086a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "renaming": {
                "FUN_0800074c": "calculate_floating_point_0800074c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "iVar8": "temp8",
                "uVar9": "temp9",
                "unaff_r5": "temp10",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "uVar17": "result"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08001814",
                "FUN_08001918",
                "FUN_080015f8"
            ],
            "called": [
                "FUN_080008ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080008ba": {
            "entrypoint": "0x080008ba",
            "current_name": "calculate_floating_point_value_080008ba",
            "code": "\nulonglong calculateFloatingPointValue_080008ba(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bitMask;\n  uint tempVar1;\n  uint tempVar2;\n  uint constant;\n  bool isZero;\n  \n  tempVar1 = constant & input4 >> 0x14;\n  tempVar2 = input2;\n  if (bitMask != constant || tempVar1 != constant) {\n    if (bitMask == constant) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, tempVar2 = input4, tempVar1 != constant)\n         ) {\nLAB_0800072c:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (tempVar1 == constant) {\n      input1 = input3;\n      tempVar2 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006f0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bitMask == 0) {\n          tempVar2 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | tempVar2;\n          if (tempVar1 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          tempVar2 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(tempVar2 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_0800072c;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006f0;\n    }\n  }\n  return CONCAT44(tempVar2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080008ba": "calculate_floating_point_value_080008ba",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bitMask",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "in_r12": "constant",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_0800074c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800092c": {
            "entrypoint": "0x0800092c",
            "current_name": "check_conditions_0800092c",
            "code": "\nuint check_conditions_0800092c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint xor_result;\n  bool all_zeros;\n  bool is_less;\n  \n  if (((int)(input_2 << 1) >> 0x15 == -1 || (int)(input_4 << 1) >> 0x15 == -1) &&\n     ((((int)(input_2 << 1) >> 0x15 == -1 && ((input_1 | input_2 << 0xc) != 0)) ||\n      (((int)(input_4 << 1) >> 0x15 == -1 && ((input_3 | input_4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  all_zeros = (input_1 | input_2 << 1) == 0;\n  if (all_zeros) {\n    all_zeros = (input_3 | input_4 << 1) == 0;\n  }\n  if (!all_zeros) {\n    all_zeros = input_2 == input_4;\n  }\n  if (all_zeros) {\n    all_zeros = input_1 == input_3;\n  }\n  if (!all_zeros) {\n    xor_result = input_2 ^ input_4;\n    all_zeros = xor_result == 0;\n    if (-1 < (int)xor_result) {\n      all_zeros = input_2 == input_4;\n    }\n    is_less = -1 < (int)xor_result && input_4 <= input_2;\n    if (all_zeros) {\n      is_less = input_3 <= input_1;\n    }\n    input_4 = (int)input_4 >> 0x1f;\n    if (!is_less) {\n      input_4 = ~input_4;\n    }\n    result input_4 | 1;\n  }\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_0800092c": "check_conditions_0800092c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "xor_result",
                "bVar2": "all_zeros",
                "bVar3": "is_less",
                "return": "result"
            },
            "calling": [
                "FUN_080009b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a8": {
            "entrypoint": "0x080009a8",
            "current_name": "execute_conditions_080009a8",
            "code": "\nvoid execute_conditions_080009a8(undefined4 condition_1,undefined4 condition_2,undefined4 data_1,undefined4 data_2)\n\n{\n  execute_conditions_080009a8_080009b8(data_1,data_2,condition_1,condition_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080009a8": "execute_conditions_080009a8",
                "param_1": "condition_1",
                "param_2": "condition_2",
                "param_3": "data_1",
                "param_4": "data_2"
            },
            "calling": [
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b8": {
            "entrypoint": "0x080009b8",
            "current_name": "execute_conditions_080009b8",
            "code": "\nundefined4 execute_conditions_080009b8(undefined4 input)\n\n{\n  verify_conditions();\n  return input;\n}\n\n",
            "renaming": {
                "FUN_080009b8": "execute_conditions_080009b8",
                "param_1": "input",
                "check_conditions_0800092c": "verify_conditions"
            },
            "calling": [
                "FUN_080009dc",
                "FUN_080009c8",
                "FUN_080009a8",
                "FUN_080009f0"
            ],
            "called": [
                "FUN_0800092c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_execute_conditions_080009c8",
            "code": "\nbool check_execute_conditions_080009c8(void)\n\n{\n  char result;\n  \n  execute_conditions_080009b8();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_execute_conditions_080009c8",
                "in_ZR": "result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009dc": {
            "entrypoint": "0x080009dc",
            "current_name": "check_conditions_080009dc",
            "code": "\nbool check_conditions_080009dc(void)\n\n{\n  char input_character;\n  \n  execute_conditions_080009b8();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009dc": "check_conditions_080009dc",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08001814",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_conditions_080009f0",
            "code": "\nbool check_conditions_080009f0(void)\n\n{\n  undefined is_zero_flag;\n  undefined carry_flag;\n  \n  execute_conditions_080009b8();\n  return !(bool)carry_flag || (bool)is_zero_flag;\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_conditions_080009f0",
                "in_ZR": "is_zero_flag",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_execute_conditions_08000a04",
            "code": "\nbool check_execute_conditions_08000a04(void)\n\n{\n  undefined zero_result;\n  undefined carry_flag;\n  \n  execute_conditions_080009a8();\n  return !(bool)carry_flag || (bool)zero_result;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_execute_conditions_08000a04",
                "in_ZR": "zero_result",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a18": {
            "entrypoint": "0x08000a18",
            "current_name": "is_execute_conditions_passed_08000a18",
            "code": "\nbool is_execute_conditions_passed_08000a18(void)\n\n{\n  char input_flag;\n  \n  execute_conditions_080009a8();\n  return input_flag == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08000a18": "is_execute_conditions_passed_08000a18",
                "in_CY": "input_flag"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08005da8",
                "FUN_080019f6",
                "FUN_08001960",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a2c": {
            "entrypoint": "0x08000a2c",
            "current_name": "check_parameters_08000a2c",
            "code": "\nundefined4 check_parameters_08000a2c(uint input_1,int input_2,uint input_3,int input_4)\n\n{\n  if ((((input_2 << 1) >> 0x15 != -1) || ((input_1 | input_2 << 0xc) == 0)) &&\n     (((input_4 << 1) >> 0x15 != -1 || ((input_3 | input_4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a2c": "check_parameters_08000a2c",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a58": {
            "entrypoint": "0x08000a58",
            "current_name": "calculate_shifted_result_08000a58",
            "code": "\nuint calculate_shifted_result_08000a58(uint input_value,uint shift_count)\n\n{\n  uint shifted_value;\n  int adjusted_shift_count;\n  uint difference;\n  \n  adjusted_shift_count = shift_count * 2 + 0x200000;\n  if (shift_count * 2 < 0xffe00000) {\n    if (-1 < adjusted_shift_count) {\n      return 0;\n    }\n    shifted_value = adjusted_shift_count >> 0x15;\n    difference = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && difference != 0) {\n      shifted_value = (shift_count << 0xb | 0x80000000 | input_value >> 0x15) >> (difference & 0xff);\n      if ((shift_count & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input_value | shift_count << 0xc) != 0) {\n    return 0;\n  }\n  shift_count = shift_count & 0x80000000;\n  if (shift_count == 0) {\n    shift_count = 0x7fffffff;\n  }\n  return shift_count;\n}\n\n",
            "renaming": {
                "FUN_08000a58": "calculate_shifted_result_08000a58",
                "param_1": "input_value",
                "param_2": "shift_count",
                "uVar1": "shifted_value",
                "iVar2": "adjusted_shift_count",
                "uVar3": "difference"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "entrypoint": "0x08000aa8",
            "current_name": "compute_value_08000aa8",
            "code": "\nuint computeValue_08000aa8(uint input1,uint input2)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  \n  if ((input2 & 0x80000000) != 0) {\n    return 0;\n  }\n  tempVar1 = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < tempVar1) {\n      return 0;\n    }\n    tempVar2 = -(tempVar1 >> 0x15) - 0x3e1;\n    if (-1 < (int)tempVar2) {\n      return (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (tempVar2 & 0xff);\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000aa8": "compute_value_08000aa8",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ae8": {
            "entrypoint": "0x08000ae8",
            "current_name": "execute_software_interrupt_08000ae8",
            "code": "\nvoid executeSoftwareInterrupt_08000ae8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ae8": "execute_software_interrupt_08000ae8"
            },
            "calling": [
                "FUN_08000aec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000aec": {
            "entrypoint": "0x08000aec",
            "current_name": "execute_software_interrupt_08000aec",
            "code": "\nundefined4 execute_software_interrupt_08000aec(undefined4 input_param,undefined4 unused_param,undefined4 unused_param_2,undefined4 output_param)\n\n{\n  undefined4 result;\n  \n  if (DAT_2000017c != 0) {\n    return 0;\n  }\n  result = execute_software_interrupt_08000aec_08000ae8(1,input_param,0,0,output_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000aec": "execute_software_interrupt_08000aec",
                "param_1": "input_param",
                "param_2": "unused_param",
                "param_3": "unused_param_2",
                "param_4": "output_param",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000ae8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000b08": {
            "entrypoint": "0x08000b08",
            "current_name": "initialize_data_processing_08000b08",
            "code": "\nvoid initialize_data_processing_08000b08(int status,int value)\n\n{\n  if ((status == 1) && (value == 0xffff)) {\n    initialize_and_return_param_08001b18(&DAT_200001c0,&DAT_20000188,&DAT_200001b8,&DAT_20000240,DAT_20000020,DAT_20000024,\n                 DAT_20000018,DAT_2000001c,DAT_20000010,DAT_20000014,0);\n    initialize_data_and_process_08001510(&DAT_20000194,DAT_2000005c,DAT_20000038,DAT_20000028,DAT_2000002c,DAT_20000030,\n                 DAT_20000034);\n    initialize_and_process_data_0800157c(&DAT_2000024c,DAT_20000074,DAT_20000070,DAT_2000006c);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000b08": "initialize_data_processing_08000b08",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_0800157c",
                "FUN_08001510",
                "FUN_08001b18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000bcc": {
            "entrypoint": "0x08000bcc",
            "current_name": "initialize_and_process_data_08000bcc",
            "code": "\nvoid initialize_and_process_data_08000bcc(void)\n\n{\n  process_parameter_08005848(DAT_20000064,0);\n  initialize_and_process_data_08000bcc_080057b4(DAT_20000064,1);\n  process_parameter_08005848(DAT_20000004,0);\n  initialize_and_process_data_08000bcc_080057b4(DAT_20000004,1);\n  process_parameter_08005848(DAT_20000060,0);\n  initialize_and_process_data_08000bcc_080057b4(DAT_20000060,1);\n  process_parameter_08005848(DAT_20000004,1);\n  process_data_080013a4(&DAT_20000194,8,2,0);\n  process_and_call_function_08001550(&DAT_20000194,0,&DAT_20000008);\n  initialize_parameters_0800135a(&DAT_20000194);\n  process_string_08005c96(&DAT_20000194,\"Reflow\");\n  process_parameters_08001366(&DAT_20000194,0,1);\n  process_string_08005c96(&DAT_20000194,\"Oven 1.2\");\n  process_parameter_08005848(DAT_20000004,0);\n  FUNC_080058e8(0x9c4);\n  initialize_parameters_0800135a(&DAT_20000194);\n  initialize_serial_08005a68(&DAT_2000036c,0xe100,6);\n  process_parameter_08005848(DAT_20000060,1);\n  DAT_20000258 = 2000;\n  DAT_200001b0 = initialize_data_080058e0();\n  DAT_200001b4 = initialize_data_080058e0();\n  execute_software_interrupt_08000aec(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000bcc": "initialize_and_process_data_08000bcc"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08000aec",
                "FUN_08005a68",
                "FUN_08001550",
                "FUN_080057b4",
                "FUN_080058e8",
                "FUN_080058e0",
                "FUN_080013a4",
                "FUN_08005c96",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cd0": {
            "entrypoint": "0x08000cd0",
            "current_name": "process_data_08000cd0",
            "code": "\nvoid processData_08000cd0(void)\n\n{\n  uint dataInitializationResult;\n  undefined4 floatingPointResult1;\n  int conditionCheckResult;\n  undefined4 floatingPointResult2;\n  undefined4 extraResult1;\n  undefined4 extraResult2;\n  undefined4 extraResult3;\n  undefined8 shiftedFloatingPointValue;\n  \n  dataInitializationResult = initialize_data_080058e0();\n  if (DAT_200001b4 < dataInitializationResult) {\n    DAT_200001b4 = DAT_200001b4 + 1000;\n    shiftedFloatingPointValue = calculate_shifted_floating_point_080015f8(&DAT_2000024c,0);\n    floatingPointResult2 = (undefined4)((ulonglong)shiftedFloatingPointValue >> 0x20);\n    floatingPointResult1 = (undefined4)shiftedFloatingPointValue;\n    DAT_20000188 = floatingPointResult1;\n    DAT_2000018c = floatingPointResult2;\n    conditionCheckResult = check_execute_conditions_080009c8(floatingPointResult1,floatingPointResult2,0,0x40c38800);\n    if (((conditionCheckResult != 0) || (conditionCheckResult = check_execute_conditions_080009c8(floatingPointResult1,floatingPointResult2,0,0x40c38880), conditionCheckResult != 0)) ||\n       (conditionCheckResult = check_execute_conditions_080009c8(floatingPointResult1,floatingPointResult2,0,0x40c38900), conditionCheckResult != 0)) {\n      DAT_20000238 = 7;\n      DAT_20000239 = '\\0';\n    }\n  }\n  dataInitializationResult = initialize_data_080058e0();\n  floatingPointResult1 = DAT_20000060;\n  if (DAT_200001b0 < dataInitializationResult) {\n    DAT_200001b0 = DAT_200001b0 + 1000;\n    if (DAT_20000239 == '\\x01') {\n      conditionCheckResult = check_and_get_bit_08005890(DAT_20000060);\n      process_parameter_08005848(floatingPointResult1,conditionCheckResult == 0);\n      DAT_20000250 = DAT_20000250 + 1;\n      execute_conversion_08005d82(&DAT_2000036c,DAT_20000250,10);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      process_and_calculate_08005f2c(&DAT_2000036c,extraResult1,DAT_20000240,DAT_20000244,2);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      process_and_calculate_08005f2c(&DAT_2000036c,extraResult2,DAT_20000188,DAT_2000018c,2);\n      process_string_08005c96(&DAT_2000036c,&DAT_08007368);\n      calculate_and_execute_08005f40(&DAT_2000036c,extraResult3,DAT_200001b8,DAT_200001bc,2);\n    }\n    else {\n      process_parameter_08005848(DAT_20000060,1);\n    }\n    initialize_parameters_0800135a(&DAT_20000194);\n    process_string_08005c96(&DAT_20000194,(&PTR_s_Ready_2000003c)[DAT_20000238]);\n    process_parameters_08001366(&DAT_20000194,0,1);\n    if (DAT_20000238 == 7) {\n      process_string_08005c96(&DAT_20000194,\"TC Error!\");\n    }\n    else {\n      process_and_calculate_08005f2c(&DAT_20000194,2,DAT_20000188,DAT_2000018c,2);\n      initialize_and_process_0800134e(&DAT_20000194,0);\n      process_string_08005c96(&DAT_20000194,&DAT_08007378);\n    }\n  }\n  floatingPointResult2 = DAT_2000018c;\n  floatingPointResult1 = DAT_20000188;\n  switch(DAT_20000238) {\n  case 0:\n    conditionCheckResult = check_execute_conditions_08000a04(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (conditionCheckResult == 0) {\n      if (DAT_20000248 == '\\x01') {\n        calculate_sum_08005cd4(&DAT_2000036c,\"Time Setpoint Input Output\");\n        DAT_20000250 = 0;\n        DAT_2000025c = initialize_data_080058e0();\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x4062c000;\n        shiftedFloatingPointValue = shift_and_concatenate_0800042c(DAT_20000258);\n        update_parameters_08001960(&DAT_200001c0,(int)((ulonglong)shiftedFloatingPointValue >> 0x20),0,0,shiftedFloatingPointValue);\n        update_floating_point_values_08001918(&DAT_200001c0,1000);\n        update_param_08001a44(&DAT_200001c0,1);\n        DAT_20000238 = 1;\n      }\n    }\n    else {\n      DAT_20000238 = 6;\n    }\n    break;\n  case 1:\n    DAT_20000239 = '\\x01';\n    conditionCheckResult = check_execute_conditions_08000a04(DAT_20000188,DAT_2000018c,0,0x4062c000);\n    if (conditionCheckResult != 0) {\n      shiftedFloatingPointValue = initialize_data_080058e0();\n      DAT_20000254 = (int)shiftedFloatingPointValue + 9000;\n      initialize_parameter_array_080018f8(&DAT_200001c0,(int)((ulonglong)shiftedFloatingPointValue >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x406f4000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40636000;\n      DAT_20000238 = 2;\n    }\n    break;\n  case 2:\n    dataInitializationResult = initialize_data_080058e0();\n    if (DAT_20000254 < dataInitializationResult) {\n      conditionCheckResult = initialize_data_080058e0();\n      DAT_20000254 = conditionCheckResult + 9000;\n      shiftedFloatingPointValue = perform_unsigned_arithmetic_operation_08000194(DAT_20000240,DAT_20000244,0,0x40140000);\n      DAT_20000244 = (undefined4)((ulonglong)shiftedFloatingPointValue >> 0x20);\n      DAT_20000240 = (undefined4)shiftedFloatingPointValue;\n      shiftedFloatingPointValue = is_execute_conditions_passed_08000a18(DAT_20000240,DAT_20000244,0,0x40690000);\n      if ((int)shiftedFloatingPointValue != 0) {\n        initialize_parameter_array_080018f8(&DAT_200001c0,(int)((ulonglong)shiftedFloatingPointValue >> 0x20),0,0x4072c000,0x9999999a,\n                     0x3fa99999,0,0x4075e000);\n        DAT_20000240 = 0;\n        DAT_20000244 = 0x406f4000;\n        DAT_20000238 = 3;\n      }\n    }\n    break;\n  case 3:\n    shiftedFloatingPointValue = check_execute_conditions_08000a04(DAT_20000188,DAT_2000018c,0,0x406ea000);\n    if ((int)shiftedFloatingPointValue != 0) {\n      initialize_parameter_array_080018f8(&DAT_200001c0,(int)((ulonglong)shiftedFloatingPointValue >> 0x20),0,0x4072c000,0x9999999a,0x3fa99999,\n                   0,0x4075e000);\n      DAT_20000240 = 0;\n      DAT_20000244 = 0x40590000;\n      DAT_20000238 = 4;\n    }\n    break;\n  case 4:\n    conditionCheckResult = check_conditions_080009f0(DAT_20000188,DAT_2000018c,0,0x40590000);\n    if (conditionCheckResult != 0) {\n      conditionCheckResult = initialize_data_080058e0();\n      DAT_20000180 = conditionCheckResult + 1000;\n      process_parameter_08005848(DAT_20000004,1);\n      DAT_20000239 = '\\0';\n      DAT_20000238 = 5;\n    }\n    break;\n  case 5:\n    dataInitializationResult = initialize_data_080058e0();\n    if (DAT_20000180 < dataInitializationResult) {\n      process_parameter_08005848(DAT_20000004,0);\n      DAT_20000238 = 0;\n    }\n    break;\n  case 6:\n    conditionCheckResult = check_conditions_080009dc(DAT_20000188,DAT_2000018c,0,0x40490000);\n    if (conditionCheckResult != 0) {\n      DAT_20000238 = 0;\n    }\n    break;\n  case 7:\n    conditionCheckResult = check_execute_conditions_080009c8(DAT_20000188,DAT_2000018c,0,0x40c38800);\n    if (((conditionCheckResult == 0) && (conditionCheckResult = check_execute_conditions_080009c8(floatingPointResult1,floatingPointResult2,0,0x40c38880), conditionCheckResult == 0)) &&\n       (conditionCheckResult = check_execute_conditions_080009c8(floatingPointResult1,floatingPointResult2,0,0x40c38900), conditionCheckResult == 0)) {\n      DAT_20000238 = 0;\n    }\n    else {\n      DAT_20000238 = 7;\n    }\n  }\n  if ((DAT_20000248 == '\\x01') && (DAT_20000239 == '\\x01')) {\n    DAT_20000239 = '\\0';\n    DAT_20000238 = 0;\n  }\n  if (DAT_20000184 == '\\x01') {\n    conditionCheckResult = get_parameter_value_08005754(DAT_20000068);\n    if (conditionCheckResult == 0) {\n      conditionCheckResult = initialize_data_080058e0();\n      if (0x32 < (uint)(conditionCheckResult - DAT_20000190)) {\n        DAT_20000184 = '\\x02';\n      }\n    }\n    else {\n      DAT_20000184 = '\\0';\n    }\n  }\n  else if (DAT_20000184 == '\\0') {\n    DAT_20000248 = '\\0';\n    conditionCheckResult = get_parameter_value_08005754(DAT_20000068);\n    if (conditionCheckResult == 0) {\n      DAT_20000190 = initialize_data_080058e0();\n      DAT_20000184 = '\\x01';\n    }\n  }\n  else if ((DAT_20000184 == '\\x02') && (conditionCheckResult = get_parameter_value_08005754(DAT_20000068), conditionCheckResult != 0)) {\n    DAT_20000248 = '\\x01';\n    DAT_20000184 = '\\0';\n  }\n  if (DAT_20000239 == '\\x01') {\n    conditionCheckResult = initialize_data_080058e0();\n    calculate_and_update_result_080016b4(&DAT_200001c0);\n    if (DAT_20000258 < (uint)(conditionCheckResult - DAT_2000025c)) {\n      DAT_2000025c = DAT_2000025c + DAT_20000258;\n    }\n    shiftedFloatingPointValue = reverse_and_shift_bits_0800040c(conditionCheckResult - DAT_2000025c);\n    conditionCheckResult = check_conditions_080009dc((int)shiftedFloatingPointValue,(int)((ulonglong)shiftedFloatingPointValue >> 0x20),DAT_200001b8,DAT_200001bc);\n    if (conditionCheckResult == 0) {\n      process_parameter_08005848(DAT_20000064,0);\n    }\n    else {\n      process_parameter_08005848(DAT_20000064,1);\n    }\n  }\n  else {\n    process_parameter_08005848(DAT_20000064,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000cd0": "process_data_08000cd0",
                "uVar1": "dataInitializationResult",
                "uVar2": "floatingPointResult1",
                "iVar3": "conditionCheckResult",
                "uVar4": "floatingPointResult2",
                "extraout_r1": "extraResult1",
                "extraout_r1_00": "extraResult2",
                "extraout_r1_01": "extraResult3",
                "uVar5": "shiftedFloatingPointValue"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800134e",
                "FUN_08005f2c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_080009c8",
                "FUN_08000a04",
                "FUN_08001918",
                "FUN_08000a18",
                "FUN_080016b4",
                "FUN_08005cd4",
                "FUN_08005848",
                "FUN_08005754",
                "FUN_080058e0",
                "FUN_0800042c",
                "FUN_08005f40",
                "FUN_08000194",
                "FUN_08005c96",
                "FUN_08005890",
                "FUN_08001366",
                "FUN_08001a44",
                "FUN_08001960",
                "FUN_080018f8",
                "FUN_080009f0",
                "FUN_080015f8",
                "FUN_0800040c",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001294": {
            "entrypoint": "0x08001294",
            "current_name": "store_params_08001294",
            "code": "\nvoid storeParams_08001294(int objAddress,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *(undefined *)(objAddress + 0x18) = value1;\n  *(undefined *)(objAddress + 0x19) = value2;\n  *(undefined *)(objAddress + 0x1a) = value3;\n  *(undefined *)(objAddress + 0x1b) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001294": "store_params_08001294",
                "param_1": "objAddress",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012a2": {
            "entrypoint": "0x080012a2",
            "current_name": "process_and_repeat_080012a2",
            "code": "\nvoid processAndRepeat_080012a2(int input)\n\n{\n  processData(*(undefined *)(input + 10),0);\n  processData(*(undefined *)(input + 10),1);\n  processData(*(undefined *)(input + 10),0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012a2": "process_and_repeat_080012a2",
                "param_1": "input",
                "process_parameter_08005848": "processData"
            },
            "calling": [
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "called": [
                "FUN_08005848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012c0": {
            "entrypoint": "0x080012c0",
            "current_name": "process_parameters_080012c0",
            "code": "\nvoid process_parameters_080012c0(int data_ptr,int input_value)\n\n{\n  uint iteration_count;\n  \n  for (iteration_count = 0; (int)iteration_count < 4; iteration_count = iteration_count + 1) {\n    process_parameter_08005848(*(undefined *)(data_ptr + iteration_count + 0xb),input_value >> (iteration_count & 0xff) & 1);\n  }\n  process_and_repeat_080012a2(data_ptr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012c0": "process_parameters_080012c0",
                "param_1": "data_ptr",
                "param_2": "input_value",
                "uVar1": "iteration_count"
            },
            "calling": [
                "FUN_08001310",
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080012e8": {
            "entrypoint": "0x080012e8",
            "current_name": "process_and_repeat_080012e8",
            "code": "\nvoid process_and_repeat_080012e8(int buffer,int value)\n\n{\n  uint i;\n  \n  for (i = 0; (int)i < 8; i = i + 1) {\n    process_parameter_08005848(*(undefined *)(buffer + i + 0xb),value >> (i & 0xff) & 1);\n  }\n  process_and_repeat_080012e8_080012a2(buffer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080012e8": "process_and_repeat_080012e8",
                "param_1": "buffer",
                "param_2": "value",
                "uVar1": "i"
            },
            "calling": [
                "FUN_08001310"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012a2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001310": {
            "entrypoint": "0x08001310",
            "current_name": "process_parameters_08001310",
            "code": "\nvoid process_parameters_08001310(int data_address,uint flags,undefined4 param_3,undefined4 param_4)\n\n{\n  process_parameter_08005848(*(undefined *)(data_address + 8),param_3,param_3,param_4,param_4);\n  if (*(char *)(data_address + 9) != -1) {\n    process_parameter_08005848(*(char *)(data_address + 9),0);\n  }\n  if ((*(byte *)(data_address + 0x13) & 0x10) == 0) {\n    process_parameters_08001310_080012c0(data_address,flags >> 4);\n    process_parameters_08001310_080012c0(data_address,flags);\n    return;\n  }\n  process_and_repeat_080012e8(data_address,flags);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001310": "process_parameters_08001310",
                "param_1": "data_address",
                "param_2": "flags"
            },
            "calling": [
                "FUN_0800134e",
                "FUN_08001550",
                "FUN_0800138e",
                "FUN_080013a4",
                "FUN_0800135a",
                "FUN_08001366"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080012c0",
                "FUN_080012e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800134e": {
            "entrypoint": "0x0800134e",
            "current_name": "initialize_and_process_0800134e",
            "code": "\nundefined4 initialize_and_process_0800134e(undefined4 input_param,undefined4 config_param,undefined4 constant_param,undefined4 output_param)\n\n{\n  process_params(input_param,config_param,1,output_param,output_param);\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800134e": "initialize_and_process_0800134e",
                "param_1": "input_param",
                "param_2": "config_param",
                "param_3": "constant_param",
                "param_4": "output_param",
                "process_parameters_08001310": "process_params"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800135a": {
            "entrypoint": "0x0800135a",
            "current_name": "initialize_parameters_0800135a",
            "code": "\nvoid initializeParameters_0800135a(undefined4 inputData,undefined4 value1,undefined4 value2,undefined4 outputData)\n\n{\n  process_parameters_08001310(inputData,1,0,outputData,outputData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800135a": "initialize_parameters_0800135a",
                "param_1": "inputData",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "outputData"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001366": {
            "entrypoint": "0x08001366",
            "current_name": "process_parameters_08001366",
            "code": "\nvoid processParameters_08001366(int inputAddress,char flag,uint limit,undefined4 paramValue)\n\n{\n  char charValue;\n  \n  if (3 < limit) {\n    limit = 3;\n  }\n  if ((int)(uint)*(byte *)(inputAddress + 0x17) <= (int)limit) {\n    limit = *(byte *)(inputAddress + 0x17) - 1 & 0xff;\n  }\n  charValue = *(char *)(limit + inputAddress + 0x18);\n  process_parameters_08001310(inputAddress,flag + charValue | 0x80,0,charValue,paramValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001366": "process_parameters_08001366",
                "param_1": "inputAddress",
                "param_2": "flag",
                "param_3": "limit",
                "param_4": "paramValue",
                "cVar1": "charValue"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800138e": {
            "entrypoint": "0x0800138e",
            "current_name": "update_parameters_0800138e",
            "code": "\nvoid updateParameters_0800138e(int objectAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte originalFlags;\n  \n  originalFlags = *(byte *)(objectAddress + 0x14);\n  *(byte *)(objectAddress + 0x14) = originalFlags | 4;\n  process_parameters_08001310(objectAddress,originalFlags | 0xc,0,param4,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800138e": "update_parameters_0800138e",
                "param_1": "objectAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "originalFlags"
            },
            "calling": [
                "FUN_080013a4"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080013a4": {
            "entrypoint": "0x080013a4",
            "current_name": "process_data_080013a4",
            "code": "\nvoid processData_080013a4(int dataPtr,int paramPtr,int param1,int param2)\n\n{\n  int loopCounter;\n  int index;\n  \n  if (1 < param1) {\n    *(byte *)(dataPtr + 0x13) = *(byte *)(dataPtr + 0x13) | 8;\n  }\n  *(char *)(dataPtr + 0x17) = (char)param1;\n  storeParams(dataPtr,0,0x40,paramPtr,paramPtr + 0x40);\n  if ((param2 != 0) && (param1 == 1)) {\n    *(byte *)(dataPtr + 0x13) = *(byte *)(dataPtr + 0x13) | 4;\n  }\n  initAndProcessData(*(undefined *)(dataPtr + 8),1);\n  if (*(char *)(dataPtr + 9) != -1) {\n    initAndProcessData(*(char *)(dataPtr + 9),1);\n  }\n  initAndProcessData(*(undefined *)(dataPtr + 10),1);\n  index = 0;\n  while( true ) {\n    if ((*(byte *)(dataPtr + 0x13) & 0x10) == 0) {\n      loopCounter = 4;\n    }\n    else {\n      loopCounter = 8;\n    }\n    if (loopCounter <= index) break;\n    initAndProcessData(*(undefined *)(dataPtr + index + 0xb),1);\n    index = index + 1;\n  }\n  processParam(*(undefined *)(dataPtr + 8),0);\n  processParam(*(undefined *)(dataPtr + 10),0);\n  if (*(char *)(dataPtr + 9) != -1) {\n    processParam(*(char *)(dataPtr + 9),0);\n  }\n  if ((*(byte *)(dataPtr + 0x13) & 0x10) == 0) {\n    processParams(dataPtr,3);\n    processParams(dataPtr,3);\n    processParams(dataPtr,3);\n    processParams(dataPtr,2);\n  }\n  else {\n    processParamsAlternative(dataPtr,*(byte *)(dataPtr + 0x13) | 0x20,0);\n    processParamsAlternative(dataPtr,*(byte *)(dataPtr + 0x13) | 0x20,0);\n    processParamsAlternative(dataPtr,*(byte *)(dataPtr + 0x13) | 0x20,0);\n  }\n  processParamsAlternative(dataPtr,*(byte *)(dataPtr + 0x13) | 0x20,0);\n  *(undefined *)(dataPtr + 0x14) = 4;\n  updateParams(dataPtr);\n  initParams(dataPtr);\n  *(undefined *)(dataPtr + 0x15) = 2;\n  processParamsAlternative(dataPtr,6,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080013a4": "process_data_080013a4",
                "param_1": "dataPtr",
                "param_2": "paramPtr",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "loopCounter",
                "iVar2": "index",
                "store_params_08001294": "storeParams",
                "initialize_and_process_data_080057b4": "initAndProcessData",
                "process_parameter_08005848": "processParam",
                "process_parameters_080012c0": "processParams",
                "process_parameters_08001310": "processParamsAlternative",
                "update_parameters_0800138e": "updateParams",
                "initialize_parameters_0800135a": "initParams"
            },
            "calling": [
                "FUN_08000bcc",
                "FUN_080014ba"
            ],
            "called": [
                "FUN_08001310",
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_080012c0",
                "FUN_0800138e",
                "FUN_08001294",
                "FUN_0800135a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014ba": {
            "entrypoint": "0x080014ba",
            "current_name": "update_data_080014ba",
            "code": "\nvoid updateData_080014ba(int dataPointer,int flag,undefined value1,undefined4 value2,undefined value3,\n                 undefined value4,undefined value5,undefined value6,undefined value7,\n                 undefined value8,undefined value9,undefined value10,undefined value11)\n\n{\n  *(undefined *)(dataPointer + 8) = value1;\n  *(char *)(dataPointer + 9) = (char)value2;\n  *(undefined *)(dataPointer + 10) = value3;\n  *(undefined *)(dataPointer + 0xb) = value4;\n  *(undefined *)(dataPointer + 0xc) = value5;\n  *(undefined *)(dataPointer + 0xd) = value6;\n  *(undefined *)(dataPointer + 0xe) = value7;\n  *(undefined *)(dataPointer + 0xf) = value8;\n  *(undefined *)(dataPointer + 0x10) = value9;\n  *(undefined *)(dataPointer + 0x11) = value10;\n  *(undefined *)(dataPointer + 0x12) = value11;\n  if (flag == 0) {\n    *(undefined *)(dataPointer + 0x13) = 0x10;\n  }\n  else {\n    *(undefined *)(dataPointer + 0x13) = 0;\n  }\n  process_data_080013a4(dataPointer,0x10,1,0,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080014ba": "update_data_080014ba",
                "param_1": "dataPointer",
                "param_2": "flag",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "value3",
                "param_6": "value4",
                "param_7": "value5",
                "param_8": "value6",
                "param_9": "value7",
                "param_10": "value8",
                "param_11": "value9",
                "param_12": "value10",
                "param_13": "value11"
            },
            "calling": [
                "FUN_08001510"
            ],
            "called": [
                "FUN_080013a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001510": {
            "entrypoint": "0x08001510",
            "current_name": "initialize_data_and_process_08001510",
            "code": "\nundefined4 *\ninitializeDataAndProcess_08001510(undefined4 *dataPointer,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined param5,undefined param6,undefined param7)\n\n{\n  dataPointer[1] = 0;\n  *dataPointer = &PTR_initialize_and_process_0800134e_1_080073f8;\n  update_data_080014ba(dataPointer,1,param2,0xff,param3,param4,param5,param6,param7,0,0,0,0);\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_08001510": "initialize_data_and_process_08001510",
                "param_1": "dataPointer",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_080014ba"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001550": {
            "entrypoint": "0x08001550",
            "current_name": "process_and_call_function_08001550",
            "code": "\nvoid process_and_call_function_08001550(undefined4 *function_array,uint params,int data_address)\n\n{\n  int i;\n  \n  process_parameters_08001310(function_array,(params & 7) << 3 | 0x40,0);\n  for (i = 0; i < 8; i = i + 1) {\n    (**(code **)*function_array)(function_array,*(undefined *)(data_address + i));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001550": "process_and_call_function_08001550",
                "param_1": "function_array",
                "param_2": "params",
                "param_3": "data_address",
                "iVar1": "i"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08001310"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800157c": {
            "entrypoint": "0x0800157c",
            "current_name": "initialize_and_process_data_0800157c",
            "code": "\nundefined * initialize_and_process_data_0800157c(undefined *data_array,undefined4 value_1,undefined value_2,undefined value_3)\n\n{\n  *data_array = (char)value_1;\n  data_array[1] = value_2;\n  data_array[2] = value_3;\n  initialize_and_process_data_0800157c_080057b4(value_1,0);\n  initialize_and_process_data_0800157c_080057b4(data_array[1],1);\n  initialize_and_process_data_0800157c_080057b4(data_array[2],1);\n  process_parameter_08005848(data_array[1],1);\n  process_parameter_08005848(data_array[2],0);\n  return data_array;\n}\n\n",
            "renaming": {
                "FUN_0800157c": "initialize_and_process_data_0800157c",
                "param_1": "data_array",
                "param_2": "value_1",
                "param_3": "value_2",
                "param_4": "value_3"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08005848",
                "FUN_080057b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015b2": {
            "entrypoint": "0x080015b2",
            "current_name": "get_bits_080015b2",
            "code": "\nuint getBits_080015b2(undefined *arguments)\n\n{\n  int bitValue;\n  uint numBits;\n  uint result;\n  \n  process_parameter_08005848(arguments[1],0);\n  result = 0;\n  for (numBits = 0x1f; -1 < (int)numBits; numBits = numBits - 1) {\n    process_parameter_08005848(arguments[2],1);\n    bitValue = check_and_get_bit_08005890(*arguments);\n    if (bitValue != 0) {\n      result = result | 1 << (numBits & 0xff);\n    }\n    process_parameter_08005848(arguments[2],0);\n  }\n  process_parameter_08005848(arguments[1],1);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015b2": "get_bits_080015b2",
                "param_1": "arguments",
                "iVar1": "bitValue",
                "uVar2": "numBits",
                "uVar3": "result"
            },
            "calling": [
                "FUN_080015f8"
            ],
            "called": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015f8": {
            "entrypoint": "0x080015f8",
            "current_name": "calculate_shifted_floating_point_080015f8",
            "code": "\nundefined8 calculate_shifted_floating_point_080015f8(undefined4 arg1,int arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  uint bitFlags;\n  undefined8 result;\n  \n  bitFlags = get_bits_080015b2();\n  if ((bitFlags & 0x10000) == 0) {\n    bitFlags = bitFlags >> 0x12;\n    result = reverse_and_shift_bits_0800040c(bitFlags & 0x1fff);\n    if ((bitFlags & 0x2000) != 0) {\n      result = reverse_and_shift_bits_0800040c(~bitFlags & 0x1fff);\n      result = perform_unsigned_arithmetic_operation_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x3ff00000,arg4);\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n    result = calculate_shifted_value_extended_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x3fd00000);\n    if (arg2 == 1) {\n      result = calculate_shifted_value_extended_080004f8((int)result,(int)((ulonglong)result >> 0x20),0,0x40220000);\n      result = calculate_floating_point_0800074c((int)result,(int)((ulonglong)result >> 0x20),0,0x40140000);\n      result = perform_unsigned_arithmetic_operation_08000194((int)result,(int)((ulonglong)result >> 0x20),0,0x40400000);\n      return result;\n    }\n  }\n  else {\n    bitFlags = bitFlags & 7;\n    if (bitFlags == 2) {\n      return 0x40c3888000000000;\n    }\n    if (bitFlags == 4) {\n      return 0x40c3890000000000;\n    }\n    if (bitFlags != 1) {\n      return 0;\n    }\n    result = 0x40c3880000000000;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080015f8": "calculate_shifted_floating_point_080015f8",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "bitFlags",
                "uVar2": "result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_08000194",
                "FUN_080015b2",
                "FUN_080004f8",
                "FUN_0800040c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016b4": {
            "entrypoint": "0x080016b4",
            "current_name": "calculate_and_update_result_080016b4",
            "code": "\nchar calculateAndUpdateResult_080016b4(int input)\n\n{\n  char result;\n  int data;\n  int conditionsPassed;\n  undefined4 shiftedValue1;\n  undefined4 value1;\n  undefined4 shiftedValue2;\n  undefined4 newValue1;\n  undefined4 value2;\n  undefined4 newValue2;\n  undefined4 conditionsValue;\n  char executeCondition;\n  undefined4 executeValue1;\n  undefined4 executeValue2;\n  undefined4 shiftedExecuteValue;\n  undefined8 calcValue1;\n  undefined8 calcValue2;\n  undefined8 finalValue;\n  undefined8 shiftedValue3;\n  undefined4 calcValue;\n  undefined4 shiftedCalcValue;\n  \n  executeCondition = *(char *)(input + 0x70);\n  if (executeCondition != '\\0') {\n    data = initialize_data_080058e0();\n    if ((uint)(data - *(int *)(input + 0x44)) < *(uint *)(input + 0x58)) {\n      executeCondition = '\\0';\n    }\n    else {\n      value1 = **(undefined4 **)(input + 0x38);\n      value2 = (*(undefined4 **)(input + 0x38))[1];\n      calcValue1 = calculate_result_08000190(**(undefined4 **)(input + 0x40),(*(undefined4 **)(input + 0x40))[1])\n      ;\n      shiftedExecuteValue = (undefined4)((ulonglong)calcValue1 >> 0x20);\n      calcValue2 = calculate_result_08000190(value1,value2,*(undefined4 *)(input + 0x50),\n                            *(undefined4 *)(input + 0x54));\n      shiftedValue1 = (undefined4)((ulonglong)calcValue2 >> 0x20);\n      finalValue = calculate_shifted_value_extended_080004f8((int)calcValue1,shiftedExecuteValue,*(undefined4 *)(input + 0x20),\n                            *(undefined4 *)(input + 0x24));\n      finalValue = perform_unsigned_arithmetic_operation_08000194((int)finalValue,(int)((ulonglong)finalValue >> 0x20),\n                            *(undefined4 *)(input + 0x48),*(undefined4 *)(input + 0x4c));\n      *(undefined8 *)(input + 0x48) = finalValue;\n      result = *(char *)(input + 0x71);\n      if (result == '\\0') {\n        shiftedValue3 = calculate_shifted_value_extended_080004f8((int)calcValue2,shiftedValue1,*(undefined4 *)(input + 0x18),\n                              *(undefined4 *)(input + 0x1c));\n        finalValue = calculate_result_08000190((int)finalValue,(int)((ulonglong)finalValue >> 0x20),(int)shiftedValue3,\n                              (int)((ulonglong)shiftedValue3 >> 0x20));\n        *(undefined8 *)(input + 0x48) = finalValue;\n      }\n      shiftedValue2 = *(undefined4 *)(input + 0x48);\n      newValue2 = *(undefined4 *)(input + 0x4c);\n      executeValue1 = *(undefined4 *)(undefined8 *)(input + 0x68);\n      executeValue2 = *(undefined4 *)(input + 0x6c);\n      finalValue = *(undefined8 *)(input + 0x68);\n      conditionsPassed = is_execute_conditions_passed_08000a18(shiftedValue2,newValue2,executeValue1,executeValue2);\n      if (conditionsPassed == 0) {\n        newValue1 = *(undefined4 *)(input + 0x60);\n        conditionsValue = *(undefined4 *)(input + 100);\n        conditionsPassed = check_conditions_080009dc(shiftedValue2,newValue2);\n        if (conditionsPassed != 0) {\n          *(undefined4 *)(input + 0x48) = newValue1;\n          *(undefined4 *)(input + 0x4c) = conditionsValue;\n        }\n      }\n      else {\n        *(undefined4 *)(input + 0x48) = executeValue1;\n        *(undefined4 *)(input + 0x4c) = executeValue2;\n      }\n      if (result == '\\0') {\n        calcValue1 = 0;\n      }\n      else {\n        calcValue1 = calculate_shifted_value_extended_080004f8((int)calcValue1,shiftedExecuteValue,*(undefined4 *)(input + 0x18),\n                              *(undefined4 *)(input + 0x1c));\n      }\n      shiftedCalcValue = (undefined4)((ulonglong)calcValue1 >> 0x20);\n      calcValue = (undefined4)calcValue1;\n      shiftedExecuteValue = *(undefined4 *)(input + 0x48);\n      shiftedValue2 = *(undefined4 *)(input + 0x4c);\n      calcValue1 = calculate_shifted_value_extended_080004f8((int)calcValue2,shiftedValue1,*(undefined4 *)(input + 0x28),\n                            *(undefined4 *)(input + 0x2c));\n      calcValue1 = calculate_result_08000190(shiftedExecuteValue,shiftedValue2,(int)calcValue1,(int)((ulonglong)calcValue1 >> 0x20));\n      calcValue1 = perform_unsigned_arithmetic_operation_08000194(calcValue,shiftedCalcValue,(int)calcValue1,(int)((ulonglong)calcValue1 >> 0x20));\n      shiftedExecuteValue = (undefined4)((ulonglong)calcValue1 >> 0x20);\n      conditionsPassed = check_conditions_080009dc(executeValue1,executeValue2,(int)calcValue1,shiftedExecuteValue);\n      if (conditionsPassed == 0) {\n        finalValue = *(undefined8 *)(input + 0x60);\n        conditionsPassed = check_conditions_080009dc((int)calcValue1,shiftedExecuteValue,*(undefined4 *)(undefined8 *)(input + 0x60),\n                             *(undefined4 *)(input + 100));\n        if (conditionsPassed == 0) {\n          finalValue = calcValue1;\n        }\n      }\n      **(undefined8 **)(input + 0x3c) = finalValue;\n      *(undefined4 *)(input + 0x50) = value1;\n      *(undefined4 *)(input + 0x54) = value2;\n      *(int *)(input + 0x44) = data;\n    }\n  }\n  return executeCondition;\n}\n\n",
            "renaming": {
                "FUN_080016b4": "calculate_and_update_result_080016b4",
                "param_1": "input",
                "cVar1": "result",
                "iVar2": "data",
                "iVar3": "conditionsPassed",
                "uVar4": "shiftedValue1",
                "uVar5": "value1",
                "uVar6": "shiftedValue2",
                "uVar7": "newValue1",
                "uVar8": "value2",
                "uVar9": "newValue2",
                "uVar10": "conditionsValue",
                "cVar11": "executeCondition",
                "uVar12": "executeValue1",
                "uVar13": "executeValue2",
                "uVar14": "shiftedExecuteValue",
                "uVar15": "calcValue1",
                "uVar16": "calcValue2",
                "uVar17": "finalValue",
                "uVar18": "shiftedValue3",
                "local_38": "calcValue",
                "uStack_34": "shiftedCalcValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000194",
                "FUN_080058e0",
                "FUN_080004f8",
                "FUN_08000a18",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001814": {
            "entrypoint": "0x08001814",
            "current_name": "update_parameter_array_08001814",
            "code": "\nvoid updateParameterArray_08001814(undefined4 *parameterArray,undefined4 param_2,undefined4 oldParameter3,undefined4 oldParameter4,\n                 undefined4 oldParameter5,undefined4 oldParameter6,undefined4 oldParameter7,undefined4 oldParameter8,\n                 int newValue)\n\n{\n  int conditionResult;\n  undefined4 shiftedValue;\n  undefined conditionValue;\n  bool conditionCheck;\n  undefined8 floatingPointValue1;\n  undefined8 extendedValue;\n  undefined8 result;\n  \n  conditionResult = checkConditions(oldParameter3,oldParameter4,0,0);\n  if (((conditionResult == 0) && (conditionResult = checkConditions(oldParameter5,oldParameter6,0,0), conditionResult == 0)) &&\n     (conditionResult = checkConditions(oldParameter7,oldParameter8,0,0), conditionResult == 0)) {\n    parameterArray[0xd] = newValue;\n    conditionCheck = newValue != 1;\n    if (conditionCheck) {\n      newValue = 0;\n    }\n    conditionValue = (undefined)newValue;\n    if (!conditionCheck) {\n      conditionValue = 1;\n    }\n    *(undefined *)((int)parameterArray + 0x71) = conditionValue;\n    *parameterArray = oldParameter3;\n    parameterArray[1] = oldParameter4;\n    parameterArray[2] = oldParameter5;\n    parameterArray[3] = oldParameter6;\n    parameterArray[4] = oldParameter7;\n    parameterArray[5] = oldParameter8;\n    floatingPointValue1 = reverseAndShiftBits(parameterArray[0x16]);\n    floatingPointValue1 = calculateFloatingPoint((int)floatingPointValue1,(int)((ulonglong)floatingPointValue1 >> 0x20),0,0x408f4000);\n    shiftedValue = (undefined4)((ulonglong)floatingPointValue1 >> 0x20);\n    parameterArray[6] = oldParameter3;\n    parameterArray[7] = oldParameter4;\n    extendedValue = calculateShiftedValueExtended(oldParameter5,oldParameter6,(int)floatingPointValue1,shiftedValue);\n    *(undefined8 *)(parameterArray + 8) = extendedValue;\n    floatingPointValue1 = calculateFloatingPoint(oldParameter7,oldParameter8,(int)floatingPointValue1,shiftedValue);\n    *(undefined8 *)(parameterArray + 10) = floatingPointValue1;\n    if (parameterArray[0xc] == 1) {\n      result = calculateResult(0,0,oldParameter3,oldParameter4);\n      *(undefined8 *)(parameterArray + 6) = result;\n      extendedValue = calculateResult(0,0,(int)extendedValue,(int)((ulonglong)extendedValue >> 0x20));\n      *(undefined8 *)(parameterArray + 8) = extendedValue;\n      floatingPointValue1 = calculateResult(0,0,(int)floatingPointValue1,(int)((ulonglong)floatingPointValue1 >> 0x20));\n      *(undefined8 *)(parameterArray + 10) = floatingPointValue1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001814": "update_parameter_array_08001814",
                "param_1": "parameterArray",
                "param_3": "oldParameter3",
                "param_4": "oldParameter4",
                "param_5": "oldParameter5",
                "param_6": "oldParameter6",
                "param_7": "oldParameter7",
                "param_8": "oldParameter8",
                "param_9": "newValue",
                "iVar1": "conditionResult",
                "uVar2": "shiftedValue",
                "uVar3": "conditionValue",
                "bVar4": "conditionCheck",
                "uVar5": "floatingPointValue1",
                "uVar6": "extendedValue",
                "uVar7": "result",
                "check_conditions_080009dc": "checkConditions",
                "reverse_and_shift_bits_0800040c": "reverseAndShiftBits",
                "calculate_floating_point_0800074c": "calculateFloatingPoint",
                "calculate_shifted_value_extended_080004f8": "calculateShiftedValueExtended",
                "calculate_result_08000190": "calculateResult"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_080018f8"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080018f8": {
            "entrypoint": "0x080018f8",
            "current_name": "initialize_parameter_array_080018f8",
            "code": "\nvoid initializeParameterArray_080018f8(void)\n\n{\n  updateParameterArray();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080018f8": "initialize_parameter_array_080018f8",
                "update_parameter_array_08001814": "updateParameterArray"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08001814"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001918": {
            "entrypoint": "0x08001918",
            "current_name": "update_floating_point_values_08001918",
            "code": "\nvoid updateFloatingPointValues_08001918(int dataAddress,int paramCount,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 shiftedValue;\n  undefined8 concatenatedValue;\n  undefined8 reversedValue;\n  \n  if (0 < paramCount) {\n    concatenatedValue = shift_and_concatenate_0800042c(paramCount);\n    reversedValue = reverse_and_shift_bits_0800040c(*(undefined4 *)(dataAddress + 0x58));\n    concatenatedValue = calculate_floating_point_0800074c((int)concatenatedValue,(int)((ulonglong)concatenatedValue >> 0x20),(int)reversedValue,\n                         (int)((ulonglong)reversedValue >> 0x20),param4);\n    shiftedValue = (undefined4)((ulonglong)concatenatedValue >> 0x20);\n    reversedValue = calculate_shifted_value_extended_080004f8((int)concatenatedValue,shiftedValue,*(undefined4 *)(dataAddress + 0x20),\n                         *(undefined4 *)(dataAddress + 0x24));\n    *(undefined8 *)(dataAddress + 0x20) = reversedValue;\n    concatenatedValue = calculate_floating_point_0800074c(*(undefined4 *)(dataAddress + 0x28),*(undefined4 *)(dataAddress + 0x2c),(int)concatenatedValue,\n                         shiftedValue);\n    *(undefined8 *)(dataAddress + 0x28) = concatenatedValue;\n    *(int *)(dataAddress + 0x58) = paramCount;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001918": "update_floating_point_values_08001918",
                "param_1": "dataAddress",
                "param_2": "paramCount",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "shiftedValue",
                "uVar2": "concatenatedValue",
                "uVar3": "reversedValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_0800074c",
                "FUN_080004f8",
                "FUN_0800040c",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001960": {
            "entrypoint": "0x08001960",
            "current_name": "update_parameters_08001960",
            "code": "\nvoid updateParameters_08001960(int objPtr,undefined4 param2,undefined4 newValue1,undefined4 newValue2,\n                 undefined4 newValue3,undefined4 newValue4)\n\n{\n  int conditionResult;\n  undefined4 *ptrToData;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  undefined4 data4;\n  \n  conditionResult = check_execute_conditions_08000a04(newValue1,newValue2,newValue3,newValue4,newValue2);\n  if (conditionResult == 0) {\n    *(undefined4 *)(objPtr + 0x60) = newValue1;\n    *(undefined4 *)(objPtr + 100) = newValue2;\n    *(undefined4 *)(objPtr + 0x68) = newValue3;\n    *(undefined4 *)(objPtr + 0x6c) = newValue4;\n    if (*(char *)(objPtr + 0x70) != '\\0') {\n      ptrToData = *(undefined4 **)(objPtr + 0x3c);\n      data1 = *ptrToData;\n      data3 = ptrToData[1];\n      conditionResult = check_conditions_080009dc(newValue3,newValue4,data1,data3);\n      if (conditionResult == 0) {\n        conditionResult = is_execute_conditions_passed_08000a18(newValue1,newValue2,data1,data3);\n        if (conditionResult != 0) {\n          *ptrToData = newValue1;\n          ptrToData[1] = newValue2;\n        }\n      }\n      else {\n        *ptrToData = newValue3;\n        ptrToData[1] = newValue4;\n      }\n      data1 = *(undefined4 *)(objPtr + 0x48);\n      data3 = *(undefined4 *)(objPtr + 0x4c);\n      data2 = *(undefined4 *)(objPtr + 0x68);\n      data4 = *(undefined4 *)(objPtr + 0x6c);\n      conditionResult = is_execute_conditions_passed_08000a18(data1,data3,data2,data4);\n      if (conditionResult != 0) {\n        *(undefined4 *)(objPtr + 0x48) = data2;\n        *(undefined4 *)(objPtr + 0x4c) = data4;\n        return;\n      }\n      data2 = *(undefined4 *)(objPtr + 0x60);\n      data4 = *(undefined4 *)(objPtr + 100);\n      conditionResult = check_conditions_080009dc(data1,data3,data2,data4);\n      if (conditionResult != 0) {\n        *(undefined4 *)(objPtr + 0x48) = data2;\n        *(undefined4 *)(objPtr + 0x4c) = data4;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001960": "update_parameters_08001960",
                "param_1": "objPtr",
                "param_2": "param2",
                "param_3": "newValue1",
                "param_4": "newValue2",
                "param_5": "newValue3",
                "param_6": "newValue4",
                "iVar1": "conditionResult",
                "puVar2": "ptrToData",
                "uVar3": "data1",
                "uVar4": "data2",
                "uVar5": "data3",
                "uVar6": "data4"
            },
            "calling": [
                "FUN_08001ab0",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a04",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080019f6": {
            "entrypoint": "0x080019f6",
            "current_name": "process_function_080019f6",
            "code": "\nvoid processFunction_080019f6(int inputData)\n\n{\n  int conditionsPassed;\n  undefined4 conditionValue1;\n  undefined4 ptr1;\n  undefined4 ptr2;\n  undefined4 value2;\n  \n  ptr1 = **(undefined4 **)(inputData + 0x3c);\n  ptr2 = (*(undefined4 **)(inputData + 0x3c))[1];\n  *(undefined4 *)(inputData + 0x48) = ptr1;\n  *(undefined4 *)(inputData + 0x4c) = ptr2;\n  conditionValue1 = (*(undefined4 **)(inputData + 0x38))[1];\n  *(undefined4 *)(inputData + 0x50) = **(undefined4 **)(inputData + 0x38);\n  *(undefined4 *)(inputData + 0x54) = conditionValue1;\n  conditionValue1 = *(undefined4 *)(inputData + 0x68);\n  value2 = *(undefined4 *)(inputData + 0x6c);\n  conditionsPassed = checkExecutionConditions(ptr1,ptr2,conditionValue1,value2);\n  if (conditionsPassed == 0) {\n    conditionValue1 = *(undefined4 *)(inputData + 0x60);\n    value2 = *(undefined4 *)(inputData + 100);\n    conditionsPassed = checkMoreConditions(ptr1,ptr2,conditionValue1,value2);\n    if (conditionsPassed != 0) {\n      *(undefined4 *)(inputData + 0x48) = conditionValue1;\n      *(undefined4 *)(inputData + 0x4c) = value2;\n    }\n    return;\n  }\n  *(undefined4 *)(inputData + 0x48) = conditionValue1;\n  *(undefined4 *)(inputData + 0x4c) = value2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080019f6": "process_function_080019f6",
                "param_1": "inputData",
                "iVar1": "conditionsPassed",
                "uVar2": "conditionValue1",
                "uVar3": "ptr1",
                "uVar4": "ptr2",
                "uVar5": "value2",
                "is_execute_conditions_passed_08000a18": "checkExecutionConditions",
                "check_conditions_080009dc": "checkMoreConditions"
            },
            "calling": [
                "FUN_08001a44"
            ],
            "called": [
                "FUN_080009dc",
                "FUN_08000a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a44": {
            "entrypoint": "0x08001a44",
            "current_name": "update_param_08001a44",
            "code": "\nvoid updateParam_08001a44(int objAddress,int flag)\n\n{\n  undefined newValue;\n  \n  if (flag == 1) {\n    newValue = 1;\n    if (*(char *)(objAddress + 0x70) == '\\0') {\n      process_function_080019f6();\n    }\n  }\n  else {\n    newValue = 0;\n  }\n  *(undefined *)(objAddress + 0x70) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a44": "update_param_08001a44",
                "param_1": "objAddress",
                "param_2": "flag",
                "uVar1": "newValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_080019f6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001a66": {
            "entrypoint": "0x08001a66",
            "current_name": "update_data_08001a66",
            "code": "\nvoid updateData_08001a66(int dataStruct,int newValue,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  undefined8 result;\n  \n  if ((*(char *)(dataStruct + 0x70) != '\\0') && (*(int *)(dataStruct + 0x30) != newValue)) {\n    result = calculateResult(0,0,*(undefined4 *)(dataStruct + 0x18),*(undefined4 *)(dataStruct + 0x1c),unusedParam2\n                        );\n    *(undefined8 *)(dataStruct + 0x18) = result;\n    result = calculateResult(0,0,*(undefined4 *)(dataStruct + 0x20),*(undefined4 *)(dataStruct + 0x24));\n    *(undefined8 *)(dataStruct + 0x20) = result;\n    result = calculateResult(0,0,*(undefined4 *)(dataStruct + 0x28),*(undefined4 *)(dataStruct + 0x2c));\n    *(undefined8 *)(dataStruct + 0x28) = result;\n  }\n  *(int *)(dataStruct + 0x30) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001a66": "update_data_08001a66",
                "param_1": "dataStruct",
                "param_2": "newValue",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "uVar1": "result",
                "calculate_result_08000190": "calculateResult"
            },
            "calling": [
                "FUN_08001ab0"
            ],
            "called": [
                "FUN_08000190"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "entrypoint": "0x08001ab0",
            "current_name": "initialize_and_update_data_08001ab0",
            "code": "\nint initialize_and_update_data_08001ab0(int data_ptr,undefined4 param_ptr_1,undefined4 param_ptr_2,undefined4 param_ptr_3,\n                undefined4 param_ptr_4,undefined4 param_ptr_5,undefined4 param_ptr_6,undefined4 param_ptr_7,\n                undefined4 param_ptr_8,undefined4 param_ptr_9,undefined4 param_ptr_10,undefined4 param_ptr_11)\n\n{\n  int updated_data_value;\n  undefined4 extra_value;\n  \n  *(undefined4 *)(data_ptr + 0x3c) = param_ptr_2;\n  *(undefined4 *)(data_ptr + 0x38) = param_ptr_1;\n  *(undefined4 *)(data_ptr + 0x40) = param_ptr_3;\n  *(undefined *)(data_ptr + 0x70) = 0;\n  update_parameters(data_ptr,param_ptr_1,0,0,0,0x406fe000);\n  *(undefined4 *)(data_ptr + 0x58) = 100;\n  update_data(data_ptr,param_ptr_11);\n  update_parameter_array(data_ptr,extra_value,param_ptr_4,param_ptr_5,param_ptr_6,param_ptr_7,param_ptr_8,param_ptr_9,param_ptr_10);\n  updated_data_value = initialize_data();\n  *(int *)(data_ptr + 0x44) = updated_data_value - *(int *)(data_ptr + 0x58);\n  return data_ptr;\n}\n\n",
            "renaming": {
                "FUN_08001ab0": "initialize_and_update_data_08001ab0",
                "param_1": "data_ptr",
                "param_2": "param_ptr_1",
                "param_3": "param_ptr_2",
                "param_4": "param_ptr_3",
                "param_5": "param_ptr_4",
                "param_6": "param_ptr_5",
                "param_7": "param_ptr_6",
                "param_8": "param_ptr_7",
                "param_9": "param_ptr_8",
                "param_10": "param_ptr_9",
                "param_11": "param_ptr_10",
                "param_12": "param_ptr_11",
                "iVar1": "updated_data_value",
                "extraout_r1": "extra_value",
                "update_parameters_08001960": "update_parameters",
                "update_data_08001a66": "update_data",
                "update_parameter_array_08001814": "update_parameter_array",
                "initialize_data_080058e0": "initialize_data"
            },
            "calling": [
                "FUN_08001b18"
            ],
            "called": [
                "FUN_08001814",
                "FUN_08001960",
                "FUN_08001a66",
                "FUN_080058e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b18": {
            "entrypoint": "0x08001b18",
            "current_name": "initialize_and_return_param_08001b18",
            "code": "\nundefined4 initialize_and_return_param_08001b18(undefined4 input_param)\n\n{\n  initialize_and_update_data_08001ab0();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08001b18": "initialize_and_return_param_08001b18",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08000b08"
            ],
            "called": [
                "FUN_08001ab0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b48": {
            "entrypoint": "0x08001b48",
            "current_name": "initialize_and_update_settings_08001b48",
            "code": "\nvoid initialize_and_update_settings_08001b48(void)\n\n{\n  int action_result;\n  uint uVar2;\n  undefined4 data_settings [2];\n  undefined4 constant_32768;\n  undefined4 data_delay;\n  undefined4 constant_2;\n  undefined4 constant_0;\n  undefined4 constant_1024;\n  undefined4 constant_0;\n  undefined4 action_params [4];\n  undefined4 constant_1;\n  undefined4 constant_16;\n  undefined4 constant_2;\n  undefined4 constant_0;\n  undefined4 constant_380000;\n  \n  action_params[0] = 2;\n  constant_1 = 1;\n  constant_16 = 0x10;\n  constant_2 = 2;\n  constant_0 = 0;\n  constant_380000 = 0x380000;\n  action_result = perform_action_on_params_08003688(action_params);\n  if (action_result != 0) {\n    run_infinite_loop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x88);\n  }\n  data_delay = 0xf;\n  constant_2 = 2;\n  constant_0 = 0;\n  constant_1024 = 0x400;\n  constant_0 = 0;\n  action_result = update_data_delay(&data_delay);\n  if (action_result != 0) {\n    run_infinite_loop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x95);\n  }\n  data_settings[0] = 2;\n  constant_32768 = 0x8000;\n  action_result = initialize_settings(data_settings);\n  if (action_result != 0) {\n    run_infinite_loop(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/variants/NUCLEO_F103RB/variant.cpp\"\n                 ,0x9c);\n  }\n  uVar2 = get_data();\n  validate_param(uVar2 / 1000);\n  set_bit(4);\n  update_data(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001b48": "initialize_and_update_settings_08001b48",
                "local_30": "action_params",
                "local_20": "constant_1",
                "local_1c": "constant_16",
                "local_14": "constant_2",
                "local_10": "constant_0",
                "local_c": "constant_380000",
                "iVar1": "action_result",
                "run_infinite_loop_08004d40": "run_infinite_loop",
                "local_44": "data_delay",
                "local_40": "constant_2",
                "local_3c": "constant_0",
                "local_38": "constant_1024",
                "local_34": "constant_0",
                "update_data_delay_08003ad4": "update_data_delay",
                "local_54": "data_settings",
                "local_4c": "constant_32768",
                "initialize_settings_08003c90": "initialize_settings",
                "get_data_08003c44": "get_data",
                "validate_param_08002514": "validate_param",
                "set_e000e010_bit_08002560": "set_bit",
                "update_data_08002494": "update_data"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08004d40",
                "FUN_08002494",
                "FUN_08003c90",
                "FUN_08003ad4",
                "FUN_08003c44",
                "FUN_08003688",
                "FUN_08002560"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08001be8",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined *)(iVar1 + 0x20000000) < &DAT_2000015c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007970);\n  }\n  for (puVar2 = &DAT_20000160; puVar2 < &DAT_200006a8; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_memory_08004d44();\n  execute_functions_08006198();\n  UNRECOVERED_JUMPTABLE = (code *)0x8001c1a;\n  run_data_processing_loop_08005f6c();\n                    /* WARNING: Could not recover jumptable at 0x08001c1a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08005f6c",
                "FUN_08004d44",
                "FUN_08006198"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c32": {
            "entrypoint": "0x08001c32",
            "current_name": "initialize_module_and_settings_08001c32",
            "code": "\nvoid initialize_module_and_settings_08001c32(void)\n\n{\n  initialize_module_and_settings_08001c32_08004c52();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c32": "initialize_module_and_settings_08001c32"
            },
            "calling": [
                "FUN_08005f5e"
            ],
            "called": [
                "FUN_08004c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3a": {
            "entrypoint": "0x08001c3a",
            "current_name": "FUNC_08001c3a",
            "code": "\nvoid FUNC_08001c3a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001c3a": "FUNC_08001c3a"
            },
            "calling": [
                "FUN_08001c88"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001c3c": {
            "entrypoint": "0x08001c3c",
            "current_name": "validate_and_update_data_08001c3c",
            "code": "\nundefined4 validateAndUpdateData_08001c3c(uint inputValue)\n\n{\n  int validationResult;\n  \n  validationResult = validate_param_08002514(DAT_20000084 / (1000 / DAT_20000078));\n  if (validationResult != 0) {\n    return 1;\n  }\n  if (0xf < inputValue) {\n    return 1;\n  }\n  update_data_08002494(0xffffffff,inputValue,0);\n  DAT_2000007c = inputValue;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c3c": "validate_and_update_data_08001c3c",
                "param_1": "inputValue",
                "iVar1": "validationResult"
            },
            "calling": [
                "FUN_08003afa",
                "FUN_08001c88"
            ],
            "called": [
                "FUN_08002514",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001c88": {
            "entrypoint": "0x08001c88",
            "current_name": "initialize_module_08001c88",
            "code": "\n\n\nundefined4 initializeModule_08001c88(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  updateValue(3);\n  validateAndUpdateData(0xf);\n  FUNC_08001c3a();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001c88": "initialize_module_08001c88",
                "update_value_08002470": "updateValue",
                "validate_and_update_data_08001c3c": "validateAndUpdateData"
            },
            "calling": [
                "FUN_08004c52"
            ],
            "called": [
                "FUN_08001c3a",
                "FUN_08002470",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cac": {
            "entrypoint": "0x08001cac",
            "current_name": "update_sum_08001cac",
            "code": "\nvoid updateSum_08001cac(void)\n\n{\n  DAT_200006a0 = (uint)DAT_20000078 + DAT_200006a0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001cac": "update_sum_08001cac"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cc4": {
            "entrypoint": "0x08001cc4",
            "current_name": "get_data_from_global_variable_08001cc4",
            "code": "\nundefined4 get_data_from_global_variable_08001cc4(void)\n\n{\n  return DAT_200006a0;\n}\n\n",
            "renaming": {
                "FUN_08001cc4": "get_data_from_global_variable_08001cc4"
            },
            "calling": [
                "FUN_080020f0",
                "FUN_08003c90",
                "FUN_08001cd0",
                "FUN_08004b94",
                "FUN_08003afa",
                "FUN_08004478",
                "FUN_08001f84",
                "FUN_08002384",
                "FUN_080043b4",
                "FUN_080053d4",
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001cd0": {
            "entrypoint": "0x08001cd0",
            "current_name": "check_validity_and_calculate_08001cd0",
            "code": "\nundefined4 checkValidityAndCalculate_08001cd0(uint **paramArray,uint inputCondition)\n\n{\n  int globalDataVar1;\n  uint calculatedValue;\n  int globalDataVar2;\n  undefined4 result;\n  uint *paramPtr;\n  uint calculatedResult;\n  uint counter;\n  \n  counter = 0;\n  globalDataVar1 = get_data_from_global_variable_08001cc4();\n  calculatedResult = DAT_20000084;\n  paramPtr = *paramArray;\n  if ((paramPtr[2] & 0x100) == 0) {\n    if (((paramPtr[1] & 0x100) == 0) && ((paramPtr[0xb] & 0xf00000) == 0)) {\n      do {\n        if ((**paramArray & 2) != 0) goto LAB_08001de2;\n      } while ((inputCondition == 0xffffffff) ||\n              ((inputCondition != 0 && (globalDataVar2 = get_data_from_global_variable_08001cc4(), (uint)(globalDataVar2 - globalDataVar1) <= inputCondition))));\n      paramArray[10] = (uint *)((uint)paramArray[10] | 4);\n      *(undefined *)(paramArray + 9) = 0;\n      result = 3;\n    }\n    else {\n      calculatedValue = calculate_value_08003da4(2);\n      paramPtr = *paramArray;\n      if (((paramPtr[4] & 0x24924924) == 0) && ((paramPtr[3] & 0x924924) == 0)) {\n        if ((paramPtr[4] & 0x12492492) == 0) {\n          if ((paramPtr[3] & 0x492492) == 0) {\n            globalDataVar2 = 0x14;\n          }\n          else {\n            globalDataVar2 = 0x29;\n          }\n        }\n        else {\n          globalDataVar2 = 0x29;\n        }\n      }\n      else if (((paramPtr[4] & 0x12492492) == 0) && ((paramPtr[3] & 0x492492) == 0)) {\n        globalDataVar2 = 0x54;\n      }\n      else if ((paramPtr[4] & 0x249249) == 0) {\n        if ((paramPtr[3] & 0x249249) == 0) {\n          globalDataVar2 = 0x54;\n        }\n        else {\n          globalDataVar2 = 0xfc;\n        }\n      }\n      else {\n        globalDataVar2 = 0xfc;\n      }\n      calculatedResult = (calculatedResult / calculatedValue) * globalDataVar2;\n      for (; counter <= calculatedResult && calculatedResult - counter != 0; counter = counter + 1) {\n        if ((inputCondition != 0xffffffff) &&\n           ((inputCondition == 0 || (globalDataVar2 = get_data_from_global_variable_08001cc4(), inputCondition < (uint)(globalDataVar2 - globalDataVar1))))) {\n          paramArray[10] = (uint *)((uint)paramArray[10] | 4);\n          *(undefined *)(paramArray + 9) = 0;\n          return 3;\n        }\n      }\nLAB_08001de2:\n      **paramArray = 0xffffffed;\n      paramArray[10] = (uint *)((uint)paramArray[10] | 0x200);\n      if (((*paramArray)[2] & 0xe0000) == 0xe0000) {\n        if (paramArray[3] == (uint *)0x0) {\n          paramArray[10] = (uint *)((uint)paramArray[10] & 0xfffffeff);\n          if (((uint)paramArray[10] & 0x1000) == 0) {\n            paramArray[10] = (uint *)((uint)paramArray[10] | 1);\n            result = 0;\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n  }\n  else {\n    paramArray[10] = (uint *)((uint)paramArray[10] | 0x20);\n    *(undefined *)(paramArray + 9) = 0;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08001cd0": "check_validity_and_calculate_08001cd0",
                "param_1": "paramArray",
                "param_2": "inputCondition",
                "iVar1": "globalDataVar1",
                "uVar2": "calculatedValue",
                "iVar3": "globalDataVar2",
                "uVar4": "result",
                "puVar5": "paramPtr",
                "uVar6": "calculatedResult",
                "local_1c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e40": {
            "entrypoint": "0x08001e40",
            "current_name": "get_offset_value_08001e40",
            "code": "\nundefined4 getOffsetValue_08001e40(int *offsetPointer)\n\n{\n  return *(undefined4 *)(*offsetPointer + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_08001e40": "get_offset_value_08001e40",
                "param_1": "offsetPointer"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001e48": {
            "entrypoint": "0x08001e48",
            "current_name": "update_configuration_08001e48",
            "code": "\nundefined4 updateConfiguration_08001e48(int *configPtr,uint *dataPtr)\n\n{\n  undefined4 status;\n  uint index;\n  int counter;\n  \n  if (*(char *)(configPtr + 9) == '\\x01') {\n    status = 2;\n  }\n  else {\n    *(undefined *)(configPtr + 9) = 1;\n    index = dataPtr[1];\n    if (index < 7) {\n      index = index * 5 - 5;\n      *(uint *)(*configPtr + 0x34) =\n           *dataPtr << (index & 0xff) | *(uint *)(*configPtr + 0x34) & ~(0x1f << (index & 0xff));\n    }\n    else if (index < 0xd) {\n      index = index * 5 - 0x23;\n      *(uint *)(*configPtr + 0x30) =\n           *dataPtr << (index & 0xff) | *(uint *)(*configPtr + 0x30) & ~(0x1f << (index & 0xff));\n    }\n    else {\n      index = index * 5 - 0x41;\n      *(uint *)(*configPtr + 0x2c) =\n           *dataPtr << (index & 0xff) | *(uint *)(*configPtr + 0x2c) & ~(0x1f << (index & 0xff));\n    }\n    index = *dataPtr;\n    if (index < 10) {\n      *(uint *)(*configPtr + 0x10) =\n           dataPtr[2] << (index * 3 & 0xff) |\n           *(uint *)(*configPtr + 0x10) & ~(7 << (index * 3 & 0xff));\n    }\n    else {\n      index = index * 3 - 0x1e;\n      *(uint *)(*configPtr + 0xc) =\n           dataPtr[2] << (index & 0xff) | *(uint *)(*configPtr + 0xc) & ~(7 << (index & 0xff));\n    }\n    if (*dataPtr - 0x10 < 2) {\n      if (*configPtr == 0x40012400) {\n        if ((uRam40012408 & 0x800000) == 0) {\n          uRam40012408 = uRam40012408 | 0x800000;\n          if (*dataPtr == 0x10) {\n            for (counter = (DAT_20000084 / 1000000) * 10; counter != 0; counter = counter + -1) {\n            }\n            status = 0;\n          }\n          else {\n            status = 0;\n          }\n        }\n        else {\n          status = 0;\n        }\n      }\n      else {\n        configPtr[10] = configPtr[10] | 0x20;\n        status = 1;\n      }\n    }\n    else {\n      status = 0;\n    }\n    *(undefined *)(configPtr + 9) = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08001e48": "update_configuration_08001e48",
                "param_1": "configPtr",
                "param_2": "dataPtr",
                "uVar1": "status",
                "uVar2": "index",
                "local_c": "counter"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f80": {
            "entrypoint": "0x08001f80",
            "current_name": "get_offset_value_08001f80",
            "code": "\nundefined4 get_offset_value_08001f80(int offset)\n\n{\n  return *(undefined4 *)(offset + 0x28);\n}\n\n",
            "renaming": {
                "FUN_08001f80": "get_offset_value_08001f80",
                "param_1": "offset"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001f84": {
            "entrypoint": "0x08001f84",
            "current_name": "initialize_data_08001f84",
            "code": "\nundefined4 initializeData_08001f84(int *dataPointer,undefined4 dataSize)\n\n{\n  int newDataValue;\n  undefined4 returnValue;\n  int dataPointerValue;\n  uint iterationCount;\n  \n  dataPointerValue = *dataPointer;\n  if ((*(uint *)(dataPointerValue + 8) & 1) == 0) {\n    *(uint *)(dataPointerValue + 8) = *(uint *)(dataPointerValue + 8) | 1;\n    for (iterationCount = DAT_20000084 / 1000000; iterationCount != 0; iterationCount = iterationCount - 1) {\n    }\n    dataPointerValue = get_data_from_global_variable_08001cc4(dataPointer,dataSize,DAT_20000084 * 0x431bde83);\n    do {\n      if ((*(uint *)(*dataPointer + 8) & 1) != 0) {\n        return 0;\n      }\n      newDataValue = get_data_from_global_variable_08001cc4();\n    } while ((uint)(newDataValue - dataPointerValue) < 3);\n    dataPointer[10] = dataPointer[10] | 0x10;\n    dataPointer[0xb] = dataPointer[0xb] | 1;\n    *(undefined *)(dataPointer + 9) = 0;\n    returnValue = 1;\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08001f84": "initialize_data_08001f84",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "iVar1": "newDataValue",
                "uVar2": "returnValue",
                "iVar3": "dataPointerValue",
                "local_14": "iterationCount"
            },
            "calling": [
                "FUN_08002004",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002004": {
            "entrypoint": "0x08002004",
            "current_name": "update_data_08002004",
            "code": "\n\n\nint updateData_08002004(int *data)\n\n{\n  int result;\n  undefined4 *ptr;\n  int value;\n  \n  if (*(char *)(data + 9) != '\\x01') {\n    *(undefined *)(data + 9) = 1;\n    result = initialize_data_08001f84();\n    if (result == 0) {\n      data[10] = data[10] & 0xfffffcfeU | 0x100;\n      ptr = (undefined4 *)*data;\n      if ((ptr == (undefined4 *)0x40012800) && ((_DAT_40012404 & 0xf0000) != 0)) {\n        data[10] = data[10] | 0x100000;\n        if ((_DAT_40012404 & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      else {\n        data[10] = data[10] & 0xffefffff;\n        if ((ptr[1] & 0x400) != 0) {\n          data[10] = data[10] & 0xffffcfffU | 0x1000;\n        }\n      }\n      if ((data[10] & 0x1000U) == 0) {\n        data[0xb] = 0;\n      }\n      else {\n        data[0xb] = data[0xb] & 0xfffffff9;\n      }\n      *(undefined *)(data + 9) = 0;\n      *ptr = 0xfffffffd;\n      value = *data;\n      if (((*(uint *)(value + 8) & 0xe0000) == 0xe0000) &&\n         ((value != 0x40012800 || ((_DAT_40012404 & 0xf0000) == 0)))) {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x500000;\n      }\n      else {\n        *(uint *)(value + 8) = *(uint *)(value + 8) | 0x100000;\n      }\n    }\n    else {\n      *(undefined *)(data + 9) = 0;\n    }\n    return result;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08002004": "update_data_08002004",
                "param_1": "data",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "value"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080020f0": {
            "entrypoint": "0x080020f0",
            "current_name": "update_flags_in_data_struct_080020f0",
            "code": "\nundefined4 updateFlagsInDataStruct_080020f0(int *dataStructPtr)\n\n{\n  int previousData;\n  int currentData;\n  \n  currentData = *dataStructPtr;\n  if ((*(uint *)(currentData + 8) & 1) == 0) {\n    return 0;\n  }\n  *(uint *)(currentData + 8) = *(uint *)(currentData + 8) & 0xfffffffe;\n  currentData = get_data_from_global_variable_08001cc4();\n  do {\n    if ((*(uint *)(*dataStructPtr + 8) & 1) == 0) {\n      return 0;\n    }\n    previousData = get_data_from_global_variable_08001cc4();\n  } while ((uint)(previousData - currentData) < 3);\n  dataStructPtr[10] = dataStructPtr[10] | 0x10;\n  dataStructPtr[0xb] = dataStructPtr[0xb] | 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080020f0": "update_flags_in_data_struct_080020f0",
                "param_1": "dataStructPtr",
                "iVar1": "previousData",
                "iVar2": "currentData"
            },
            "calling": [
                "FUN_0800213c",
                "FUN_08002348",
                "FUN_0800224c",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800213c": {
            "entrypoint": "0x0800213c",
            "current_name": "update_data_structure_0800213c",
            "code": "\nundefined4 updateDataStructure_0800213c(int *dataStruct)\n\n{\n  int flagUpdateResult;\n  uint combinedVars;\n  uint combValue;\n  \n  if (dataStruct == (int *)0x0) {\n    return 1;\n  }\n  if (dataStruct[10] == 0) {\n    dataStruct[0xb] = 0;\n    *(undefined *)(dataStruct + 9) = 0;\n    handleMemoryLocation();\n  }\n  flagUpdateResult = updateFlagsInDataStruct(dataStruct);\n  if (((dataStruct[10] & 0x10U) == 0) && (flagUpdateResult == 0)) {\n    dataStruct[10] = dataStruct[10] & 0xffffeefdU | 2;\n    combinedVars = dataStruct[1] | dataStruct[7] | dataStruct[3] << 1;\n    if (dataStruct[2] == 0x100) {\n      combValue = 0x100;\n    }\n    else {\n      combValue = 0;\n      if (dataStruct[2] == 1) {\n        combValue = 0x100;\n      }\n    }\n    if (dataStruct[5] == 1) {\n      if (dataStruct[3] == 0) {\n        combValue = combValue | (dataStruct[6] + -1) * 0x2000 | 0x800;\n      }\n      else {\n        dataStruct[10] = dataStruct[10] | 0x20;\n        dataStruct[0xb] = dataStruct[0xb] | 1;\n      }\n    }\n    *(uint *)(*dataStruct + 4) = combValue | *(uint *)(*dataStruct + 4) & 0xffff16ff;\n    *(uint *)(*dataStruct + 8) = *(uint *)(*dataStruct + 8) & 0xffe1f7fd | combinedVars;\n    if ((dataStruct[2] == 0x100) || (dataStruct[2] == 1)) {\n      combValue = (dataStruct[4] + -1) * 0x100000;\n    }\n    else {\n      combValue = 0;\n    }\n    *(uint *)(*dataStruct + 0x2c) = combValue | *(uint *)(*dataStruct + 0x2c) & 0xff0fffff;\n    if (combinedVars != (*(uint *)(*dataStruct + 8) & 0xff1f0efe)) {\n      dataStruct[10] = dataStruct[10] & 0xffffffedU | 0x10;\n      dataStruct[0xb] = dataStruct[0xb] | 1;\n      return 1;\n    }\n    dataStruct[0xb] = 0;\n    dataStruct[10] = dataStruct[10] & 0xfffffffcU | 1;\n    return 0;\n  }\n  dataStruct[10] = dataStruct[10] | 0x10;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800213c": "update_data_structure_0800213c",
                "param_1": "dataStruct",
                "iVar1": "flagUpdateResult",
                "uVar2": "combinedVars",
                "uVar3": "combValue",
                "handle_memory_location_08004974": "handleMemoryLocation",
                "update_flags_in_data_struct_080020f0": "updateFlagsInDataStruct"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_08004974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800224c": {
            "entrypoint": "0x0800224c",
            "current_name": "update_data_struct_0800224c",
            "code": "\nint updateDataStruct_0800224c(int *dataStructPtr)\n\n{\n  int result;\n  \n  if (dataStructPtr == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    dataStructPtr[10] = dataStructPtr[10] | 2;\n    result = updateFlagsInDataStruct();\n    if (result == 0) {\n      *(uint32_t *)*dataStructPtr = 0xffffffe0;\n      *(uint32_t *)(*dataStructPtr + 4) = *(uint32_t *)(*dataStructPtr + 4) & 0xff3f0000;\n      *(uint32_t *)(*dataStructPtr + 8) = *(uint32_t *)(*dataStructPtr + 8) & 0xff0106f0;\n      *(uint32_t *)(*dataStructPtr + 0xc) = *(uint32_t *)(*dataStructPtr + 0xc) & 0xff000000;\n      *(uint32_t *)(*dataStructPtr + 0x10) = *(uint32_t *)(*dataStructPtr + 0x10) & 0xc0000000;\n      *(uint32_t *)(*dataStructPtr + 0x14) = *(uint32_t *)(*dataStructPtr + 0x14) & 0xfffff000;\n      *(uint32_t *)(*dataStructPtr + 0x18) = *(uint32_t *)(*dataStructPtr + 0x18) & 0xfffff000;\n      *(uint32_t *)(*dataStructPtr + 0x1c) = *(uint32_t *)(*dataStructPtr + 0x1c) & 0xfffff000;\n      *(uint32_t *)(*dataStructPtr + 0x20) = *(uint32_t *)(*dataStructPtr + 0x20) & 0xfffff000;\n      *(uint32_t *)(*dataStructPtr + 0x24) = *(uint32_t *)(*dataStructPtr + 0x24) & 0xfffff000;\n      *(uint32_t *)(*dataStructPtr + 0x28) = *(uint32_t *)(*dataStructPtr + 0x28) & 0xfffff000;\n      *(uint32_t *)(*dataStructPtr + 0x2c) = *(uint32_t *)(*dataStructPtr + 0x2c) & 0xff000000;\n      *(uint32_t *)(*dataStructPtr + 0x2c) = *(uint32_t *)(*dataStructPtr + 0x2c) & 0xff000000;\n      *(uint32_t *)(*dataStructPtr + 0x30) = *(uint32_t *)(*dataStructPtr + 0x30) & 0xc0000000;\n      *(uint32_t *)(*dataStructPtr + 0x34) = *(uint32_t *)(*dataStructPtr + 0x34) & 0xc0000000;\n      *(uint32_t *)(*dataStructPtr + 0x38) = *(uint32_t *)(*dataStructPtr + 0x38) & 0xffc00000;\n      *(uint32_t *)(*dataStructPtr + 0x38) = *(uint32_t *)(*dataStructPtr + 0x38) & 0xffc00000;\n      updateMemoryProtection(dataStructPtr);\n      dataStructPtr[0xb] = 0;\n      dataStructPtr[10] = 0;\n    }\n    *(uint8_t *)(dataStructPtr + 9) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0800224c": "update_data_struct_0800224c",
                "param_1": "dataStructPtr",
                "iVar1": "result",
                "update_flags_in_data_struct_080020f0": "updateFlagsInDataStruct",
                "undefined4": "uint32_t",
                "uint": "uint32_t",
                "undefined": "uint8_t",
                "update_memory_protection_080049f0": "updateMemoryProtection"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0",
                "FUN_080049f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002348": {
            "entrypoint": "0x08002348",
            "current_name": "update_data_struct_flags_08002348",
            "code": "\nint updateDataStructFlags_08002348(int dataStructPtr)\n\n{\n  int returnVal;\n  \n  if (*(char *)(dataStructPtr + 0x24) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(dataStructPtr + 0x24) = 1;\n  returnVal = update_flags_in_data_struct_080020f0();\n  if (returnVal == 0) {\n    *(uint *)(dataStructPtr + 0x28) = *(uint *)(dataStructPtr + 0x28) & 0xffffeefe | 1;\n  }\n  *(undefined *)(dataStructPtr + 0x24) = 0;\n  return returnVal;\n}\n\n",
            "renaming": {
                "FUN_08002348": "update_data_struct_flags_08002348",
                "param_1": "dataStructPtr",
                "iVar1": "returnVal"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_080020f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002384": {
            "entrypoint": "0x08002384",
            "current_name": "update_data_value_08002384",
            "code": "\nint updateDataValue_08002384(int *data)\n\n{\n  uint dataLength;\n  int result;\n  uint calculatedValue;\n  int initialValue;\n  int currentValue;\n  int loopCount;\n  \n  if (*(char *)(data + 9) == '\\x01') {\n    return 2;\n  }\n  *(undefined *)(data + 9) = 1;\n  result = update_flags_in_data_struct_080020f0();\n  if (result == 0) {\n    data[10] = data[10] & 0xffffeefdU | 2;\n    dataLength = DAT_20000084;\n    calculatedValue = calculate_value_08003da4(2);\n    for (loopCount = dataLength / calculatedValue << 1; loopCount != 0; loopCount = loopCount + -1) {\n    }\n    initialize_data_08001f84(data);\n    *(uint *)(*data + 8) = *(uint *)(*data + 8) | 8;\n    initialValue = get_data_from_global_variable_08001cc4();\n    while (currentValue = *data, (*(uint *)(currentValue + 8) & 8) != 0) {\n      currentValue = get_data_from_global_variable_08001cc4();\n      if (10 < (uint)(currentValue - initialValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    *(uint *)(currentValue + 8) = *(uint *)(currentValue + 8) | 4;\n    initialValue = get_data_from_global_variable_08001cc4();\n    while ((*(uint *)(*data + 8) & 4) != 0) {\n      currentValue = get_data_from_global_variable_08001cc4();\n      if (10 < (uint)(currentValue - initialValue)) {\n        data[10] = data[10] & 0xffffffedU | 0x10;\n        *(undefined *)(data + 9) = 0;\n        return 1;\n      }\n    }\n    data[10] = data[10] & 0xfffffffcU | 1;\n  }\n  *(undefined *)(data + 9) = 0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002384": "update_data_value_08002384",
                "param_1": "data",
                "uVar1": "dataLength",
                "iVar2": "result",
                "uVar3": "calculatedValue",
                "iVar4": "initialValue",
                "iVar5": "currentValue",
                "local_14": "loopCount"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08003da4",
                "FUN_080020f0",
                "FUN_08001cc4",
                "FUN_08001f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002470": {
            "entrypoint": "0x08002470",
            "current_name": "update_value_08002470",
            "code": "\n\n\nvoid updateValue_08002470(uint input)\n\n{\n  _DAT_e000ed0c = (input & 7) << 8 | _DAT_e000ed0c & 0xf8ff | 0x5fa0000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002470": "update_value_08002470",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001c88",
                "FUN_08005f5e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002494": {
            "entrypoint": "0x08002494",
            "current_name": "update_data_08002494",
            "code": "\n\n\nvoid updateData_08002494(uint bitOffset,uint bitmask,uint data)\n\n{\n  uint shiftAmount;\n  uint remainingBits;\n  \n  shiftAmount = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  remainingBits = 7 - shiftAmount;\n  if (3 < remainingBits) {\n    remainingBits = 4;\n  }\n  if (shiftAmount + 4 < 7) {\n    shiftAmount = 0;\n  }\n  else {\n    shiftAmount = shiftAmount - 3;\n  }\n  shiftAmount = (bitmask & (1 << (remainingBits & 0xff)) - 1U) << (shiftAmount & 0xff) |\n          (1 << (shiftAmount & 0xff)) - 1U & data;\n  if ((int)bitOffset < 0) {\n    *(char *)((bitOffset & 0xf) + 0xe000ed14) = (char)(shiftAmount << 4);\n  }\n  else {\n    *(char *)(bitOffset + 0xe000e400) = (char)(shiftAmount << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002494": "update_data_08002494",
                "param_1": "bitOffset",
                "param_2": "bitmask",
                "param_3": "data",
                "uVar1": "shiftAmount",
                "uVar2": "remainingBits"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568",
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080024f8": {
            "entrypoint": "0x080024f8",
            "current_name": "set_bit_in_array_080024f8",
            "code": "\nvoid setBitInArray_080024f8(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080024f8": "set_bit_in_array_080024f8",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08005510",
                "FUN_08005568"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002514": {
            "entrypoint": "0x08002514",
            "current_name": "validate_param_08002514",
            "code": "\n\n\nundefined4 validate_param_08002514(int input_param)\n\n{\n  if (input_param - 1U < 0x1000000) {\n    _DAT_e000e014 = input_param - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002514": "validate_param_08002514",
                "param_1": "input_param"
            },
            "calling": [
                "FUN_08001b48",
                "FUN_08001c3c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002540": {
            "entrypoint": "0x08002540",
            "current_name": "set_bit_to_on_08002540",
            "code": "\nvoid setBitToOn_08002540(uint bitIndex)\n\n{\n  if (-1 < (int)bitIndex) {\n    *(int *)(((bitIndex >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002540": "set_bit_to_on_08002540",
                "param_1": "bitIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002560": {
            "entrypoint": "0x08002560",
            "current_name": "set_e000e010_bit_08002560",
            "code": "\n\n\nvoid set_e000e010_bit_08002560(int input)\n\n{\n  if (input != 4) {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n    return;\n  }\n  _DAT_e000e010 = _DAT_e000e010 | 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002560": "set_e000e010_bit_08002560",
                "param_1": "input"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002580": {
            "entrypoint": "0x08002580",
            "current_name": "FUNC_08002580",
            "code": "\nvoid FUNC_08002580(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002580": "FUNC_08002580"
            },
            "calling": [
                "FUN_08002582"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002582": {
            "entrypoint": "0x08002582",
            "current_name": "initialize_system_08002582",
            "code": "\nvoid initializeSystem_08002582(void)\n\n{\n  FUNC_08002580();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002582": "initialize_system_08002582"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [
                "FUN_08002580"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800258c": {
            "entrypoint": "0x0800258c",
            "current_name": "update_configurations_0800258c",
            "code": "\n\n\nundefined4 updateConfigurations_0800258c(uint **configurations)\n\n{\n  uint *currentConfiguration;\n  \n  if (*(char *)((int)configurations + 0x21) != '\\x02') {\n    configurations[0xe] = (uint *)0x4;\n    return 1;\n  }\n  **configurations = **configurations & 0xfffffff1;\n  **configurations = **configurations & 0xfffffffe;\n  currentConfiguration = *configurations;\n  if (currentConfiguration == (uint *)0x40020008) {\n    _DAT_40020004 = 1;\n  }\n  else if (currentConfiguration == (uint *)0x4002001c) {\n    _DAT_40020004 = 0x10;\n  }\n  else if (currentConfiguration == (uint *)0x40020030) {\n    _DAT_40020004 = 0x100;\n  }\n  else if (currentConfiguration == (uint *)0x40020044) {\n    _DAT_40020004 = 0x1000;\n  }\n  else if (currentConfiguration == (uint *)0x40020058) {\n    _DAT_40020004 = 0x10000;\n  }\n  else if (currentConfiguration == (uint *)0x4002006c) {\n    _DAT_40020004 = 0x100000;\n  }\n  else {\n    _DAT_40020004 = 0x1000000;\n  }\n  *(undefined *)((int)configurations + 0x21) = 1;\n  *(undefined *)(configurations + 8) = 0;\n  if (configurations[0xd] != (uint *)0x0) {\n    (*(code *)configurations[0xd])();\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800258c": "update_configurations_0800258c",
                "param_1": "configurations",
                "puVar1": "currentConfiguration"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002624": {
            "entrypoint": "0x08002624",
            "current_name": "process_params_08002624",
            "code": "\n\n\nvoid processParams_08002624(uint *inputData,uint *flags)\n\n{\n  uint *outputData;\n  uint bitMask;\n  uint bitCheck;\n  uint counter;\n  uint valueCheck;\n  uint updatedValue;\n  int indexOffset1;\n  int indexOffset2;\n  \n  updatedValue = 0;\n  counter = 0;\n  do {\n    if (0xf < counter) {\n      return;\n    }\n    bitMask = 1 << (counter & 0xff);\n    bitCheck = *flags & bitMask;\n    if (bitMask == bitCheck) {\n      valueCheck = flags[1];\n      if (valueCheck == 0x12) {\n        updatedValue = flags[3] + 0xc;\n      }\n      else if (valueCheck < 0x13) {\n        if (valueCheck == 2) {\n          updatedValue = flags[3] + 8;\n        }\n        else if (valueCheck < 3) {\n          if (valueCheck == 0) goto LAB_08002776;\n          if (valueCheck == 1) {\n            updatedValue = flags[3];\n          }\n        }\n        else if (valueCheck == 3) {\n          updatedValue = 0;\n        }\n        else if (valueCheck == 0x11) {\n          updatedValue = flags[3] + 4;\n        }\n      }\n      else if (valueCheck == 0x10210000) {\nLAB_08002776:\n        if (flags[2] == 0) {\n          updatedValue = 4;\n        }\n        else if (flags[2] == 1) {\n          inputData[4] = bitMask;\n          updatedValue = 8;\n        }\n        else {\n          inputData[5] = bitMask;\n          updatedValue = 8;\n        }\n      }\n      else if (valueCheck < 0x10210001) {\n        if ((valueCheck == 0x10110000) || (valueCheck == 0x10120000)) goto LAB_08002776;\n      }\n      else if ((valueCheck == 0x10310000) || ((valueCheck == 0x10320000 || (valueCheck == 0x10220000))))\n      goto LAB_08002776;\n      bitMask = counter;\n      outputData = inputData;\n      if (0xff < bitCheck) {\n        bitMask = counter - 8;\n        outputData = inputData + 1;\n      }\n      *outputData = *outputData & ~(0xf << (bitMask << 2 & 0xff)) | updatedValue << (bitMask << 2 & 0xff);\n      if ((flags[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        indexOffset1 = (counter & 3) << 2;\n        if (inputData == (uint *)0x40010800) {\n          indexOffset2 = 0;\n        }\n        else if (inputData == (uint *)0x40010c00) {\n          indexOffset2 = 1;\n        }\n        else if (inputData == (uint *)0x40011000) {\n          indexOffset2 = 2;\n        }\n        else if (inputData == (uint *)0x40011400) {\n          indexOffset2 = 3;\n        }\n        else {\n          indexOffset2 = 4;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000) =\n             *(uint *)(((counter >> 2) + 2) * 4 + 0x40010000) & ~(0xf << indexOffset1) | indexOffset2 << indexOffset1;\n        if ((flags[1] & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitCheck;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitCheck;\n        }\n        if ((flags[1] & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitCheck;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitCheck;\n        }\n        if ((flags[1] & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitCheck;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitCheck;\n        }\n        if ((flags[1] & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitCheck;\n        }\n        else {\n          _DAT_4001040c = bitCheck | _DAT_4001040c;\n        }\n      }\n    }\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08002624": "process_params_08002624",
                "param_1": "inputData",
                "param_2": "flags",
                "puVar1": "outputData",
                "uVar2": "bitMask",
                "uVar3": "bitCheck",
                "uVar4": "counter",
                "uVar5": "valueCheck",
                "uVar6": "updatedValue",
                "iVar7": "indexOffset1",
                "iVar8": "indexOffset2"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002810": {
            "entrypoint": "0x08002810",
            "current_name": "check_bit_08002810",
            "code": "\nundefined4 check_bit_08002810(int address,uint value)\n\n{\n  if ((value & *(uint *)(address + 8)) == 0) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002810": "check_bit_08002810",
                "param_1": "address",
                "param_2": "value"
            },
            "calling": [
                "FUN_08004c48"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800281e": {
            "entrypoint": "0x0800281e",
            "current_name": "set_param_0800281e",
            "code": "\nvoid setParam_0800281e(int objAddress,int newValue,int isShift)\n\n{\n  if (isShift == 0) {\n    *(int *)(objAddress + 0x10) = newValue << 0x10;\n    return;\n  }\n  *(int *)(objAddress + 0x10) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800281e": "set_param_0800281e",
                "param_1": "objAddress",
                "param_2": "newValue",
                "param_3": "isShift"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800282c": {
            "entrypoint": "0x0800282c",
            "current_name": "update_and_process_data_0800282c",
            "code": "\n\n\nvoid update_and_process_data_0800282c(uint input_data)\n\n{\n  if ((_DAT_40010414 & input_data) != 0) {\n    _DAT_40010414 = input_data;\n    process_data();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800282c": "update_and_process_data_0800282c",
                "param_1": "input_data",
                "check_and_process_data_080060e4": "process_data"
            },
            "calling": [],
            "called": [
                "FUN_080060e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002848": {
            "entrypoint": "0x08002848",
            "current_name": "process_parameter_08002848",
            "code": "\nundefined4 processParameter_08002848(int *parameter)\n\n{\n  if (*(char *)((int)parameter + 0x3e) == '@') {\n    if (value1 == 0) {\n      *(uint *)(*parameter + 0x10) = value2 & 0xfe;\n    }\n    else {\n      *(uint *)(*parameter + 0x10) = value2 & 0xffU | 1;\n    }\n  }\n  else if (parameter[4] == 0x4000) {\n    if (*(char *)((int)parameter + 0x3d) == '!') {\n      *(uint *)(*parameter + 0x10) = value2 & 0xfe;\n    }\n    else {\n      *(uint *)(*parameter + 0x10) = value2 & 0xffU | 1;\n    }\n  }\n  else if (value1 == 0) {\n    *(uint *)(*parameter + 0x10) = (uint)(value2 << 0x10) >> 0x17 & 6 | 0xf0;\n  }\n  else if (value1 == 1) {\n    *(uint *)(*parameter + 0x10) = (uint)(value2 << 0x10) >> 0x17 & 6 | 0xf1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002848": "process_parameter_08002848",
                "param_1": "parameter",
                "param_1[0x14]": "value1",
                "param_1[0x11]": "value2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028d2": {
            "entrypoint": "0x080028d2",
            "current_name": "write_byte_to_address_080028d2",
            "code": "\nundefined4 writeByteToAddress_080028d2(int *memoryPointer)\n\n{\n  *(uint *)(*memoryPointer + 0x10) = memoryPointer[0x11] & 0xff;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028d2": "write_byte_to_address_080028d2",
                "param_1": "memoryPointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080028de": {
            "entrypoint": "0x080028de",
            "current_name": "process_flags_080028de",
            "code": "\nundefined4 processFlags_080028de(uint **params)\n\n{\n  uint *value;\n  \n  value = flagValue2;\n  if ((*(char *)((int)params + 0x3d) == '\\\"') &&\n     ((flagPtr2 != (uint *)0x0 || (*(char *)((int)params + 0x3e) != '@')))) {\n    if ((flagPtr2 == (uint *)0x0) && (flagValue == (uint *)0xc000)) {\n      **params = **params | 0x100;\n      flagPtr2 = (uint *)((int)flagPtr2 + 1);\n    }\n    else {\n      if (*(short *)((int)params + 0x2a) == 0) {\n        **params = **params | 0x200;\n      }\n      else if (*(short *)((int)params + 0x2a) == 1) {\n        if (value == (uint *)0xffff0000) {\n          **params = **params & 0xfffffbff;\n          value = *params;\n          if ((value[1] & 0x800) == 0) {\n            *value = *value | 0x200;\n          }\n          else {\n            *value = *value & 0xfffffbff;\n          }\n        }\n        else if (((value == (uint *)0x4) || (value == (uint *)0x8)) ||\n                (FLAG == (uint *)0x12)) {\n          **params = **params & 0xfffffbff;\n          **params = **params | 0x200;\n        }\n        else if (flagValue2 == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params & 0xfffffbff;\n        }\n      }\n      else if (*(short *)((int)params + 0x2a) == 2) {\n        if (flagValue2 == (uint *)0x2) {\n          **params = **params | 0x400;\n        }\n        else {\n          **params = **params | 0x800;\n          **params = **params & 0xfffffbff;\n        }\n        value = *params;\n        if ((value[1] & 0x800) != 0) {\n          value[1] = value[1] | 0x1000;\n        }\n      }\n      else {\n        **params = **params | 0x400;\n        value = *params;\n        if ((value[1] & 0x800) != 0) {\n          value[1] = value[1] | 0x1000;\n        }\n      }\n      flagPtr2 = (uint *)0x0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080028de": "process_flags_080028de",
                "param_1": "params",
                "puVar1": "value",
                "param_1[0x14]": "flagPtr2",
                "param_1[4]": "flagValue",
                "param_1[0xb]": "flagValue2",
                "param_1[0xc]": "FLAG"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ab8": {
            "entrypoint": "0x08002ab8",
            "current_name": "update_pointer_08002ab8",
            "code": "\nundefined4 updatePointer_08002ab8(int *param)\n\n{\n  byte *bytePointer;\n  \n  if (*(short *)((int)param + 0x2a) != 0) {\n    bytePointer = (byte *)param[9];\n    param[9] = (int)(bytePointer + 1);\n    *(uint *)(*param + 0x10) = (uint)*bytePointer;\n    *(short *)((int)param + 0x2a) = *(short *)((int)param + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ab8": "update_pointer_08002ab8",
                "param_1": "param",
                "pbVar1": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "entrypoint": "0x08002ad8",
            "current_name": "update_pointer_and_value_08002ad8",
            "code": "\nundefined4 updatePointerAndValue_08002ad8(int *pointer)\n\n{\n  undefined *tempPointer;\n  \n  if (*(short *)((int)pointer + 0x2a) != 0) {\n    tempPointer = (undefined *)pointer[9];\n    pointer[9] = (int)(tempPointer + 1);\n    *tempPointer = (char)*(undefined4 *)(*pointer + 0x10);\n    *(short *)((int)pointer + 0x2a) = *(short *)((int)pointer + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ad8": "update_pointer_and_value_08002ad8",
                "param_1": "pointer",
                "puVar1": "tempPointer",
                "param_1[9]": "pointer[9]"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002af8": {
            "entrypoint": "0x08002af8",
            "current_name": "process_param_08002af8",
            "code": "\nundefined4 processParam_08002af8(uint **paramList,uint *paramPtr,int paramSize,uint *paramData)\n\n{\n  undefined4 result;\n  uint *ptr;\n  \n  if (*(char *)((int)paramList + 0x3d) == '(') {\n    if (paramPtr == (uint *)0x0) {\n      result = 1;\n    }\n    else if (paramSize == 0) {\n      result = 1;\n    }\n    else if (*(char *)(paramList + 0xf) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(paramList + 0xf) = 1;\n      ptr = *paramList;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **paramList = **paramList & 0xfffff7ff;\n      *(undefined *)((int)paramList + 0x3d) = 0x29;\n      *(undefined *)((int)paramList + 0x3e) = 0x20;\n      result = 0;\n      paramList[0x10] = (uint *)0x0;\n      paramList[9] = paramPtr;\n      *(short *)((int)paramList + 0x2a) = (short)paramSize;\n      paramList[0xb] = paramData;\n      *(undefined2 *)(paramList + 10) = *(undefined2 *)((int)paramList + 0x2a);\n      *(undefined *)(paramList + 0xf) = 0;\n      (*paramList)[1] = (*paramList)[1] | 0x700;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08002af8": "process_param_08002af8",
                "param_1": "paramList",
                "param_2": "paramPtr",
                "param_3": "paramSize",
                "param_4": "paramData",
                "uVar1": "result",
                "puVar2": "ptr"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b84": {
            "entrypoint": "0x08002b84",
            "current_name": "check_and_initialize_variables_08002b84",
            "code": "\nundefined4 checkAndInitializeVariables_08002b84(uint **dataPointer,uint *pointer1,int size,uint *pointer2)\n\n{\n  undefined4 status;\n  uint *ptr;\n  \n  if (*(char *)((int)dataPointer + 0x3d) == '(') {\n    if (pointer1 == (uint *)0x0) {\n      status = 1;\n    }\n    else if (size == 0) {\n      status = 1;\n    }\n    else if (*(char *)(dataPointer + 0xf) == '\\x01') {\n      status = 2;\n    }\n    else {\n      *(undefined *)(dataPointer + 0xf) = 1;\n      ptr = *dataPointer;\n      if ((*ptr & 1) == 0) {\n        *ptr = *ptr | 1;\n      }\n      **dataPointer = **dataPointer & 0xfffff7ff;\n      *(undefined *)((int)dataPointer + 0x3d) = 0x2a;\n      *(undefined *)((int)dataPointer + 0x3e) = 0x20;\n      status = 0;\n      variable1 = (uint *)0x0;\n      variable2 = pointer1;\n      *(short *)((int)dataPointer + 0x2a) = (short)size;\n      variable3 = pointer2;\n      *(undefined2 *)(dataPointer + 10) = *(undefined2 *)((int)dataPointer + 0x2a);\n      *(undefined *)(dataPointer + 0xf) = 0;\n      (*dataPointer)[1] = (*dataPointer)[1] | 0x700;\n    }\n  }\n  else {\n    status = 2;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_08002b84": "check_and_initialize_variables_08002b84",
                "param_1": "dataPointer",
                "param_2": "pointer1",
                "param_3": "size",
                "param_4": "pointer2",
                "uVar1": "status",
                "puVar2": "ptr",
                "param_1[0x10]": "variable1",
                "param_1[9]": "variable2",
                "param_1[0xb]": "variable3"
            },
            "calling": [
                "FUN_08004e74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c10": {
            "entrypoint": "0x08002c10",
            "current_name": "set_permissions_08002c10",
            "code": "\nundefined4 setPermissions_08002c10(uint **permission)\n\n{\n  uint *firstPermission;\n  \n  if (*(char *)((int)permission + 0x3d) != ' ') {\n    return 2;\n  }\n  *(undefined *)((int)permission + 0x3d) = 0x28;\n  firstPermission = *permission;\n  if ((*firstPermission & 1) == 0) {\n    *firstPermission = *firstPermission | 1;\n  }\n  **permission = **permission | 0x400;\n  (*permission)[1] = (*permission)[1] | 0x300;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c10": "set_permissions_08002c10",
                "param_1": "permission",
                "puVar1": "firstPermission"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002c4e": {
            "entrypoint": "0x08002c4e",
            "current_name": "FUNC_08002c4e",
            "code": "\nvoid FUNC_08002c4e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c4e": "FUNC_08002c4e"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c50": {
            "entrypoint": "0x08002c50",
            "current_name": "FUNC_08002c50",
            "code": "\nvoid FUNC_08002c50(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c50": "FUNC_08002c50"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c52": {
            "entrypoint": "0x08002c52",
            "current_name": "FUNC_08002c52",
            "code": "\nvoid FUNC_08002c52(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002c52": "FUNC_08002c52"
            },
            "calling": [
                "FUN_08002d1c",
                "FUN_08002c54"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002c54": {
            "entrypoint": "0x08002c54",
            "current_name": "process_data_08002c54",
            "code": "\nundefined4 processData_08002c54(int *inputData)\n\n{\n  char charValue;\n  byte *bytePointer;\n  \n  charValue = *(char *)((int)inputData + 0x3d);\n  if (*(short *)((int)inputData + 0x2a) != 0) {\n    bytePointer = (byte *)inputData[9];\n    inputData[9] = (int)(bytePointer + 1);\n    *(uint *)(*inputData + 0x10) = (uint)*bytePointer;\n    *(short *)((int)inputData + 0x2a) = *(short *)((int)inputData + 0x2a) + -1;\n    if ((*(short *)((int)inputData + 0x2a) == 0) && (charValue == ')')) {\n      *(uint *)(*inputData + 4) = *(uint *)(*inputData + 4) & 0xfffffbff;\n      inputData[0xc] = 0x21;\n      *(undefined *)((int)inputData + 0x3d) = 0x28;\n      FUNC_08002c52();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002c54": "process_data_08002c54",
                "param_1": "inputData",
                "cVar1": "charValue",
                "pbVar2": "bytePointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002c52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca4": {
            "entrypoint": "0x08002ca4",
            "current_name": "FUNC_08002ca4",
            "code": "\nvoid FUNC_08002ca4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ca4": "FUNC_08002ca4"
            },
            "calling": [
                "FUN_080032b4",
                "FUN_08002ca6"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002ca6": {
            "entrypoint": "0x08002ca6",
            "current_name": "update_parameter_08002ca6",
            "code": "\nundefined4 updateParameter_08002ca6(int *paramArray)\n\n{\n  char charValue;\n  undefined *undefinedPointer;\n  \n  charValue = *(char *)((int)paramArray + 0x3d);\n  if (*(short *)((int)paramArray + 0x2a) != 0) {\n    undefinedPointer = (undefined *)paramArray[9];\n    paramArray[9] = (int)(undefinedPointer + 1);\n    *undefinedPointer = (char)*(undefined4 *)(*paramArray + 0x10);\n    *(short *)((int)paramArray + 0x2a) = *(short *)((int)paramArray + 0x2a) + -1;\n    if ((*(short *)((int)paramArray + 0x2a) == 0) && (charValue == '*')) {\n      *(uint *)(*paramArray + 4) = *(uint *)(*paramArray + 4) & 0xfffffbff;\n      valueAtIndexC = 0x22;\n      *(undefined *)((int)paramArray + 0x3d) = 0x28;\n      FUNC_08002ca4();\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002ca6": "update_parameter_08002ca6",
                "param_1": "paramArray",
                "cVar1": "charValue",
                "puVar2": "undefinedPointer",
                "param_1[0xc]": "valueAtIndexC"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cf2": {
            "entrypoint": "0x08002cf2",
            "current_name": "process_and_return_value_08002cf2",
            "code": "\nundefined4 process_and_return_value_08002cf2(int *input_array,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  undefined2 result;\n  uint flag;\n  \n  flag = *(uint *)(*input_array + 0x18);\n  if ((flag & 0x80) == 0) {\n    result = *(undefined2 *)(input_array + 3);\n  }\n  else {\n    result = *(undefined2 *)(input_array + 6);\n  }\n  process_function_08004e74(input_array,(*(uint *)(*input_array + 0x18) & 4) == 0,result,flag,value_4);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002cf2": "process_and_return_value_08002cf2",
                "param_1": "input_array",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result",
                "uVar2": "flag"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08004e74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d1c": {
            "entrypoint": "0x08002d1c",
            "current_name": "initialize_permissions_08002d1c",
            "code": "\nundefined4 initializePermissions_08002d1c(uint **params)\n\n{\n  if (((params[11] == (uint *)0x4) || (params[11] == (uint *)0x8)) &&\n     (*(char *)((int)params + 0x3d) == '(')) {\n    params[11] = (uint *)0xffff0000;\n    (*params)[1] = (*params)[1] & 0xfffff8ff;\n    (*params)[5] = 0xfffffbff;\n    **params = **params & 0xfffffbff;\n    params[12] = (uint *)0x0;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    *(undefined *)((int)params + 0x3e) = 0;\n    execute_permissions_check_08004ec4();\n  }\n  else if (*(char *)((int)params + 0x3d) == '!') {\n    params[11] = (uint *)0xffff0000;\n    params[12] = (uint *)0x21;\n    *(undefined *)((int)params + 0x3d) = 0x20;\n    *(undefined *)((int)params + 0x3e) = 0;\n    (*params)[1] = (*params)[1] & 0xfffff8ff;\n    (*params)[5] = 0xfffffbff;\n    **params = **params & 0xfffffbff;\n    FUNC_08002c52();\n  }\n  else {\n    (*params)[5] = 0xfffffbff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002d1c": "initialize_permissions_08002d1c",
                "param_1": "params",
                "param_1[0xb]": "params[11]",
                "param_1[0xc]": "params[12]"
            },
            "calling": [
                "FUN_08003520"
            ],
            "called": [
                "FUN_08002c52",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002db0": {
            "entrypoint": "0x08002db0",
            "current_name": "FUNC_08002db0",
            "code": "\nvoid FUNC_08002db0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002db0": "FUNC_08002db0"
            },
            "calling": [
                "FUN_08002db2",
                "FUN_08002efc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002db2": {
            "entrypoint": "0x08002db2",
            "current_name": "process_input_08002db2",
            "code": "\nundefined4 processInput_08002db2(uint **input)\n\n{\n  char character;\n  uint *pointer;\n  \n  character = *(char *)((int)input + 0x3d);\n  pointer = input[0xb];\n  if ((*(short *)(input + 10) == 0) && (character == '!')) {\n    if ((pointer == (uint *)0x4) || ((pointer == (uint *)0x8 || (pointer == (uint *)0xffff0000)))) {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      **input = **input | 0x200;\n      input[0xc] = (uint *)0x0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      if (*(char *)((int)input + 0x3e) == '@') {\n        *(undefined *)((int)input + 0x3e) = 0;\n        FUNC_08002db0();\n      }\n      else {\n        *(undefined *)((int)input + 0x3e) = 0;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      (*input)[1] = (*input)[1] & 0xfffff8ff;\n      input[0xc] = (uint *)0x11;\n      *(undefined *)((int)input + 0x3e) = 0;\n      *(undefined *)((int)input + 0x3d) = 0x20;\n      FUNC_08002c4e();\n    }\n  }\n  else if ((character == '!') || ((*(char *)((int)input + 0x3e) == '@' && (character == '\\\"')))) {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      (*input)[1] = (*input)[1] & 0xfffffbff;\n    }\n    else if (*(char *)((int)input + 0x3e) == '@') {\n      if (input[0x14] == (uint *)0x0) {\n        if (input[0x13] == (uint *)0x1) {\n          (*input)[4] = (uint)input[0x12] & 0xff;\n          input[0x14] = (uint *)((int)input[0x14] + 2);\n        }\n        else {\n          (*input)[4] = (uint)((int)input[0x12] << 0x10) >> 0x18;\n          input[0x14] = (uint *)((int)input[0x14] + 1);\n        }\n      }\n      else if (input[0x14] == (uint *)0x1) {\n        (*input)[4] = (uint)input[0x12] & 0xff;\n        input[0x14] = (uint *)((int)input[0x14] + 1);\n      }\n      else if (input[0x14] == (uint *)0x2) {\n        if (*(char *)((int)input + 0x3d) == '\\\"') {\n          **input = **input | 0x100;\n        }\n        else if (*(char *)((int)input + 0x3d) == '!') {\n          pointer = input[9];\n          input[9] = (uint *)((int)pointer + 1);\n          (*input)[4] = (uint)*(byte *)pointer;\n          *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n        }\n      }\n    }\n    else {\n      pointer = input[9];\n      input[9] = (uint *)((int)pointer + 1);\n      (*input)[4] = (uint)*(byte *)pointer;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002db2": "process_input_08002db2",
                "param_1": "input",
                "cVar1": "character",
                "puVar2": "pointer"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002efc": {
            "entrypoint": "0x08002efc",
            "current_name": "process_flag_08002efc",
            "code": "\nundefined4 processFlag_08002efc(uint **input)\n\n{\n  uint *flagPtr;\n  \n  flagPtr = ptr;\n  if (*(char *)((int)input + 0x3d) == '!') {\n    if (*(short *)((int)input + 0x2a) == 0) {\n      if (((flagPtr == (uint *)0x4) || (flagPtr == (uint *)0x8)) || (flagPtr == (uint *)0xffff0000)) {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        **input = **input | 0x200;\n        input[0xc] = (uint *)0x0;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        if (*(char *)((int)input + 0x3e) == '@') {\n          *(undefined *)((int)input + 0x3e) = 0;\n          FUNC_08002db0();\n        }\n        else {\n          *(undefined *)((int)input + 0x3e) = 0;\n          FUNC_08002c4e();\n        }\n      }\n      else {\n        (*input)[1] = (*input)[1] & 0xfffff8ff;\n        input[0xc] = (uint *)0x11;\n        *(undefined *)((int)input + 0x3e) = 0;\n        *(undefined *)((int)input + 0x3d) = 0x20;\n        FUNC_08002c4e();\n      }\n    }\n    else {\n      flagPtr = ptrNine;\n      ptrNine = (uint *)((int)flagPtr + 1);\n      (*input)[4] = (uint)*(byte *)flagPtr;\n      *(short *)((int)input + 0x2a) = *(short *)((int)input + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002efc": "process_flag_08002efc",
                "param_1": "input",
                "puVar1": "flagPtr",
                "param_1[0xb]": "ptr",
                "param_1[9]": "ptrNine"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002db0",
                "FUN_08002c4e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9a": {
            "entrypoint": "0x08002f9a",
            "current_name": "FUNC_08002f9a",
            "code": "\nvoid FUNC_08002f9a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f9a": "FUNC_08002f9a"
            },
            "calling": [
                "FUN_08002f9c",
                "FUN_0800306c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08002f9c": {
            "entrypoint": "0x08002f9c",
            "current_name": "parse_input_08002f9c",
            "code": "\nundefined4 parse_input_08002f9c(uint **input_data)\n\n{\n  uint *temp_ptr;\n  \n  if (*(char *)((int)input_data + 0x3d) == '\\\"') {\n    if (*(ushort *)((int)input_data + 0x2a) < 4) {\n      if (*(ushort *)((int)input_data + 0x2a) - 2 < 2) {\n        if (input_data[0xb] == (uint *)0x2) {\n          **input_data = **input_data | 0x400;\n        }\n        else {\n          **input_data = **input_data & 0xfffffbff;\n          **input_data = **input_data | 0x800;\n        }\n        (*input_data)[1] = (*input_data)[1] & 0xfffffbff;\n      }\n      else {\n        if (input_data[0xb] == (uint *)0x2) {\n          **input_data = **input_data | 0x400;\n        }\n        else {\n          **input_data = **input_data & 0xfffffbff;\n        }\n        (*input_data)[1] = (*input_data)[1] & 0xfffff8ff;\n        temp_ptr = input_data[9];\n        input_data[9] = (uint *)((int)temp_ptr + 1);\n        *(char *)temp_ptr = (char)(*input_data)[4];\n        *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n        *(undefined *)((int)input_data + 0x3d) = 0x20;\n        input_data[0xc] = (uint *)0x0;\n        if (*(char *)((int)input_data + 0x3e) == '@') {\n          *(undefined *)((int)input_data + 0x3e) = 0;\n          FUNC_08002f9a();\n        }\n        else {\n          *(undefined *)((int)input_data + 0x3e) = 0;\n          FUNC_08002c50();\n        }\n      }\n    }\n    else {\n      temp_ptr = input_data[9];\n      input_data[9] = (uint *)((int)temp_ptr + 1);\n      *(char *)temp_ptr = (char)(*input_data)[4];\n      *(short *)((int)input_data + 0x2a) = *(short *)((int)input_data + 0x2a) + -1;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002f9c": "parse_input_08002f9c",
                "param_1": "input_data",
                "puVar1": "temp_ptr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800306c": {
            "entrypoint": "0x0800306c",
            "current_name": "process_data_0800306c",
            "code": "\nundefined4 process_data_0800306c(uint **data)\n\n{\n  uint *current_ptr;\n  \n  current_ptr = data[0xb];\n  if (*(short *)((int)data + 0x2a) == 3) {\n    if (((current_ptr == (uint *)0x4) || (current_ptr == (uint *)0x8)) || (current_ptr == (uint *)0xffff0000)) {\n      **data = **data & 0xfffffbff;\n    }\n    current_ptr = data[9];\n    data[9] = (uint *)((int)current_ptr + 1);\n    *(char *)current_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  else if (*(short *)((int)data + 0x2a) == 2) {\n    if (((current_ptr == (uint *)0x4) || (current_ptr == (uint *)0x8)) || (current_ptr == (uint *)0xffff0000)) {\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n      **data = **data | 0x200;\n    }\n    else {\n      if (current_ptr == (uint *)0x2) {\n        **data = **data | 0x400;\n      }\n      else {\n        **data = **data & 0xfffffbff;\n      }\n      (*data)[1] = (*data)[1] & 0xfffffcff;\n    }\n    current_ptr = data[9];\n    data[9] = (uint *)((int)current_ptr + 1);\n    *(char *)current_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    current_ptr = data[9];\n    data[9] = (uint *)((int)current_ptr + 1);\n    *(char *)current_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    data[0xc] = (uint *)0x0;\n    if (*(char *)((int)data + 0x3e) == '@') {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08002f9a();\n    }\n    else {\n      *(undefined *)((int)data + 0x3e) = 0;\n      FUNC_08002c50();\n    }\n  }\n  else {\n    current_ptr = data[9];\n    data[9] = (uint *)((int)current_ptr + 1);\n    *(char *)current_ptr = (char)(*data)[4];\n    *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800306c": "process_data_0800306c",
                "param_1": "data",
                "puVar1": "current_ptr"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002f9a",
                "FUN_08002c50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800316a": {
            "entrypoint": "0x0800316a",
            "current_name": "FUNC_0800316a",
            "code": "\nvoid FUNC_0800316a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316a": "FUNC_0800316a"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800316c": {
            "entrypoint": "0x0800316c",
            "current_name": "process_permissions_0800316c",
            "code": "\nvoid processPermissions_0800316c(uint **permissions)\n\n{\n  int result;\n  uint *tempVar1;\n  uint *tempVar2;\n  \n  if (*(byte *)((int)permissions + 0x3d) - 0x29 < 2) {\n    permissions[0xc] = (uint *)0x0;\n    *(undefined *)((int)permissions + 0x3d) = 0x28;\n  }\n  else {\n    if ((*(char *)((int)permissions + 0x3d) != '`') && (((*permissions)[1] & 0x800) == 0)) {\n      *(undefined *)((int)permissions + 0x3d) = 0x20;\n    }\n    permissions[0xc] = (uint *)0x0;\n    *(undefined *)((int)permissions + 0x3e) = 0;\n  }\n  **permissions = **permissions & 0xfffff7ff;\n  tempVar2 = *permissions;\n  if ((tempVar2[1] & 0x800) == 0) {\n    if (*(char *)((int)permissions + 0x3d) == '`') {\n      *(undefined *)((int)permissions + 0x3d) = 0x20;\n      permissions[0x10] = (uint *)0x0;\n      if ((tempVar2[5] & 0x40) != 0) {\n        tempVar1 = permissions[9];\n        permissions[9] = (uint *)((int)tempVar1 + 1);\n        *(char *)tempVar1 = (char)tempVar2[4];\n      }\n      **permissions = **permissions & 0xfffffffe;\n      FUNC_0800316a(permissions);\n    }\n    else {\n      if ((tempVar2[5] & 0x40) != 0) {\n        tempVar1 = permissions[9];\n        permissions[9] = (uint *)((int)tempVar1 + 1);\n        *(char *)tempVar1 = (char)tempVar2[4];\n      }\n      check_and_set_permissions_08004ef4(permissions);\n    }\n  }\n  else {\n    tempVar2[1] = tempVar2[1] & 0xfffff7ff;\n    if (*(char *)((int)permissions[0xd] + 0x21) == '\\x01') {\n      permissions[0xe][0xd] = (uint)&LAB_080035fc_1;\n      result = update_configurations_0800258c(permissions[0xe]);\n      if (result != 0) {\n        if (((*permissions)[5] & 0x40) != 0) {\n          tempVar2 = permissions[9];\n          permissions[9] = (uint *)((int)tempVar2 + 1);\n          *(char *)tempVar2 = (char)(*permissions)[4];\n        }\n        **permissions = **permissions & 0xfffffffe;\n        *(undefined *)((int)permissions + 0x3d) = 0x20;\n        (*(code *)permissions[0xe][0xd])();\n      }\n    }\n    else {\n      permissions[0xd][0xd] = (uint)&LAB_080035fc_1;\n      result = update_configurations_0800258c(permissions[0xd]);\n      if (result != 0) {\n        **permissions = **permissions & 0xfffffffe;\n        *(undefined *)((int)permissions + 0x3d) = 0x20;\n        (*(code *)permissions[0xd][0xd])();\n      }\n    }\n  }\n  if ((*(char *)((int)permissions + 0x3d) == '(') && (((uint)permissions[0x10] & 4) != 0)) {\n    permissions[0xb] = (uint *)0xffff0000;\n    permissions[0xc] = (uint *)0x0;\n    *(undefined *)((int)permissions + 0x3d) = 0x20;\n    *(undefined *)((int)permissions + 0x3e) = 0;\n    execute_permissions_check_08004ec4(permissions);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800316c": "process_permissions_0800316c",
                "param_1": "permissions",
                "iVar1": "result",
                "puVar2": "tempVar1",
                "puVar3": "tempVar2"
            },
            "calling": [
                "FUN_08003520",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004ec4",
                "FUN_08004ef4",
                "FUN_0800258c",
                "FUN_0800316a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080032b4": {
            "entrypoint": "0x080032b4",
            "current_name": "process_permissions_080032b4",
            "code": "\nundefined4 process_permissions_080032b4(uint **parameters)\n\n{\n  char character;\n  uint *pointer;\n  uint *pointer2;\n  \n  character = *(char *)((int)parameters + 0x3d);\n  (*parameters)[1] = (*parameters)[1] & 0xfffff8ff;\n  **parameters = **parameters | 1;\n  **parameters = **parameters & 0xfffffbff;\n  pointer = *parameters;\n  if ((pointer[1] & 0x800) != 0) {\n    if ((*(char *)((int)parameters + 0x3d) == '\\\"') || (*(char *)((int)parameters + 0x3d) == '*')) {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xe] + 4);\n    }\n    else {\n      *(short *)((int)parameters + 0x2a) = (short)*(undefined4 *)(*parameters[0xd] + 4);\n    }\n  }\n  if (*(short *)((int)parameters + 0x2a) != 0) {\n    if ((pointer[5] & 4) != 0) {\n      pointer2 = parameters[9];\n      parameters[9] = (uint *)((int)pointer2 + 1);\n      *(char *)pointer2 = (char)pointer[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    if (((*parameters)[5] & 0x40) != 0) {\n      pointer = parameters[9];\n      parameters[9] = (uint *)((int)pointer + 1);\n      *(char *)pointer = (char)(*parameters)[4];\n      *(short *)((int)parameters + 0x2a) = *(short *)((int)parameters + 0x2a) + -1;\n    }\n    parameters[0x10] = (uint *)((uint)parameters[0x10] | 4);\n  }\n  if (parameters[0x10] == (uint *)0x0) {\n    if (((character == '(') || (character == '*')) || (character == ')')) {\n      parameters[0xb] = (uint *)0xffff0000;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      execute_permissions_check_08004ec4();\n    }\n    else if ((parameters[0xc] == (uint *)0x22) || (character == '\\\"')) {\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      FUNC_08002ca4();\n    }\n  }\n  else {\n    process_permissions_080032b4_0800316c();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080032b4": "process_permissions_080032b4",
                "param_1": "parameters",
                "cVar1": "character",
                "puVar2": "pointer",
                "puVar3": "pointer2"
            },
            "calling": [
                "FUN_080033b8"
            ],
            "called": [
                "FUN_08002ca4",
                "FUN_0800316c",
                "FUN_08004ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080033b8": {
            "entrypoint": "0x080033b8",
            "current_name": "process_binary_data_080033b8",
            "code": "\nvoid process_binary_data_080033b8(int *binary_data)\n\n{\n  int data_address;\n  uint flag1;\n  uint flag2;\n  uint flag3;\n  \n  data_address = *binary_data;\n  flag3 = *(uint *)(data_address + 0x18);\n  flag1 = *(uint *)(data_address + 0x14);\n  flag2 = *(uint *)(data_address + 4);\n  if ((*(char *)((int)binary_data + 0x3e) == '\\x10') || (*(char *)((int)binary_data + 0x3e) == '@')) {\n    if (((flag1 & 0x10001) == 0) || ((flag2 & 0x200) == 0)) {\n      if (((flag1 & 0x10008) == 0) || ((flag2 & 0x200) == 0)) {\n        if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n          process_flags_080028de(binary_data);\n        }\n      }\n      else {\n        write_byte_to_address_080028d2(binary_data);\n      }\n    }\n    else {\n      process_parameter_08002848(binary_data);\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        parse_input_08002f9c(binary_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        process_data_0800306c(binary_data);\n        return;\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        process_input_08002db2(binary_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        process_flag_08002efc(binary_data);\n        return;\n      }\n    }\n  }\n  else {\n    if (((flag1 & 0x10002) != 0) && ((flag2 & 0x200) != 0)) {\n      process_and_return_value_08002cf2();\n      return;\n    }\n    if (((flag1 & 0x10010) != 0) && ((flag2 & 0x200) != 0)) {\n      process_permissions_080032b4(binary_data);\n      return;\n    }\n    if ((flag3 & 0x100004) == 0) {\n      if ((((flag1 & 0x10040) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        update_parameter_08002ca6(binary_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        update_pointer_and_value_08002ad8(binary_data);\n      }\n    }\n    else {\n      if ((((flag1 & 0x10080) != 0) && ((flag2 & 0x400) != 0)) && ((flag1 & 0x10004) == 0)) {\n        process_data_08002c54(binary_data);\n        return;\n      }\n      if (((flag1 & 0x10004) != 0) && ((flag2 & 0x200) != 0)) {\n        update_pointer_08002ab8(binary_data);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080033b8": "process_binary_data_080033b8",
                "param_1": "binary_data",
                "iVar1": "data_address",
                "uVar2": "flag1",
                "uVar3": "flag2",
                "uVar4": "flag3"
            },
            "calling": [],
            "called": [
                "FUN_08002db2",
                "FUN_080028de",
                "FUN_08002f9c",
                "FUN_08002c54",
                "FUN_08002cf2",
                "FUN_0800306c",
                "FUN_08002ab8",
                "FUN_08002ad8",
                "FUN_08002848",
                "FUN_08002efc",
                "FUN_080032b4",
                "FUN_080028d2",
                "FUN_08002ca6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003520": {
            "entrypoint": "0x08003520",
            "current_name": "process_permissions_08003520",
            "code": "\nvoid process_permissions_08003520(uint **permissions)\n\n{\n  char charVal;\n  uint *ptr;\n  uint flag1;\n  uint flag2;\n  \n  ptr = *permissions;\n  flag1 = ptr[5];\n  flag2 = ptr[1];\n  if (((flag1 & 0x10100) != 0) && ((flag2 & 0x100) != 0)) {\n    permissions[0x10] = (uint *)((uint)permissions[0x10] | 1);\n    ptr[5] = 0xfffffeff;\n    **permissions = **permissions | 0x8000;\n  }\n  if (((flag1 & 0x10200) != 0) && ((flag2 & 0x100) != 0)) {\n    permissions[0x10] = (uint *)((uint)permissions[0x10] | 2);\n    (*permissions)[5] = 0xfffffdff;\n  }\n  if (((flag1 & 0x10400) != 0) && ((flag2 & 0x100) != 0)) {\n    charVal = *(char *)((int)permissions + 0x3d);\n    if (((*(char *)((int)permissions + 0x3e) == ' ') && (*(short *)((int)permissions + 0x2a) == 0)) &&\n       (((charVal == '!' || (charVal == ')')) || ((charVal == '(' && (permissions[0xc] == (uint *)0x21)))))) {\n      initialize_permissions_08002d1c(permissions);\n    }\n    else {\n      permissions[0x10] = (uint *)((uint)permissions[0x10] | 4);\n      if (*(char *)((int)permissions + 0x3e) == '\\x10') {\n        **permissions = **permissions | 0x200;\n      }\n      (*permissions)[5] = 0xfffffbff;\n    }\n  }\n  if (((flag1 & 0x10800) != 0) && ((flag2 & 0x100) != 0)) {\n    permissions[0x10] = (uint *)((uint)permissions[0x10] | 8);\n    (*permissions)[5] = 0xfffff7ff;\n  }\n  if (permissions[0x10] != (uint *)0x0) {\n    process_permissions_08003520_0800316c(permissions);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003520": "process_permissions_08003520",
                "param_1": "permissions",
                "cVar1": "charVal",
                "puVar2": "ptr",
                "uVar3": "flag1",
                "uVar4": "flag2"
            },
            "calling": [],
            "called": [
                "FUN_0800316c",
                "FUN_08002d1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800365c": {
            "entrypoint": "0x0800365c",
            "current_name": "countdown_0800365c",
            "code": "\nvoid countdown_0800365c(int input)\n\n{\n  bool continue_loop;\n  int iterations;\n  \n  iterations = input * (DAT_20000084 / 8000);\n  do {\n    continue_loop = iterations != 0;\n    iterations = iterations + -1;\n  } while (continue_loop);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800365c": "countdown_0800365c",
                "param_1": "input",
                "local_4": "iterations",
                "bVar1": "continue_loop"
            },
            "calling": [
                "FUN_08003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003688": {
            "entrypoint": "0x08003688",
            "current_name": "perform_action_on_params_08003688",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nundefined4 performActionOnParams_08003688(uint *paramArray)\n\n{\n  int startValue;\n  int currentValue;\n  undefined4 result;\n  uint tempValue;\n  bool isFlagSet;\n  \n  if ((*paramArray & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) != 0)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (paramArray[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      tempValue = paramArray[1];\n      if (tempValue == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (tempValue == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (tempValue == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (paramArray[1] == 0) {\n        startValue = get_data_from_global_variable_08001cc4();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          currentValue = get_data_from_global_variable_08001cc4();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        startValue = get_data_from_global_variable_08001cc4();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          currentValue = get_data_from_global_variable_08001cc4();\n          if (100 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*paramArray & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (paramArray[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | paramArray[5] << 3;\n    }\n    else if (paramArray[4] == 0) {\n      _DAT_42420000 = 0;\n      startValue = get_data_from_global_variable_08001cc4();\n      while ((_DAT_40021000 & 2) != 0) {\n        currentValue = get_data_from_global_variable_08001cc4();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      startValue = get_data_from_global_variable_08001cc4();\n      while ((_DAT_40021000 & 2) == 0) {\n        currentValue = get_data_from_global_variable_08001cc4();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = _DAT_40021000 & 0xffffff07 | paramArray[5] << 3;\n    }\n  }\n  if ((*paramArray & 8) != 0) {\n    if (paramArray[6] == 0) {\n      _DAT_42420480 = 0;\n      startValue = get_data_from_global_variable_08001cc4();\n      while ((_DAT_40021024 & 2) != 0) {\n        currentValue = get_data_from_global_variable_08001cc4();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      startValue = get_data_from_global_variable_08001cc4();\n      while ((_DAT_40021024 & 2) == 0) {\n        currentValue = get_data_from_global_variable_08001cc4();\n        if (2 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n      countdown_0800365c(1);\n    }\n  }\n  if ((*paramArray & 4) != 0) {\n    isFlagSet = (_DAT_4002101c & 0x10000000) == 0;\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startValue = get_data_from_global_variable_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_from_global_variable_08001cc4();\n        if (100 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    tempValue = paramArray[3];\n    if (tempValue == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (tempValue == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (tempValue == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (paramArray[3] == 0) {\n      startValue = get_data_from_global_variable_08001cc4();\n      while ((_DAT_40021020 & 2) != 0) {\n        currentValue = get_data_from_global_variable_08001cc4();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      startValue = get_data_from_global_variable_08001cc4();\n      while ((_DAT_40021020 & 2) == 0) {\n        currentValue = get_data_from_global_variable_08001cc4();\n        if (5000 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    if (isFlagSet) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (paramArray[7] == 0) {\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (paramArray[7] == 2) {\n    _DAT_42420060 = 0;\n    startValue = get_data_from_global_variable_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (paramArray[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | paramArray[2];\n        }\n        _DAT_40021004 = _DAT_40021004 & 0xffc2ffff | paramArray[8] | paramArray[9];\n        _DAT_42420060 = 1;\n        startValue = get_data_from_global_variable_08001cc4();\n        do {\n          if ((_DAT_40021000 & 0x2000000) != 0) {\n            return 0;\n          }\n          currentValue = get_data_from_global_variable_08001cc4();\n        } while ((uint)(currentValue - startValue) < 3);\n        return 3;\n      }\n      currentValue = get_data_from_global_variable_08001cc4();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    startValue = get_data_from_global_variable_08001cc4();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        return 0;\n      }\n      currentValue = get_data_from_global_variable_08001cc4();\n    } while ((uint)(currentValue - startValue) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003688": "perform_action_on_params_08003688",
                "param_1": "paramArray",
                "iVar1": "startValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "uVar4": "tempValue",
                "bVar5": "isFlagSet"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_0800365c",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003a68": {
            "entrypoint": "0x08003a68",
            "current_name": "calculate_delay_08003a68",
            "code": "\n\n\nuint calculateDelay_08003a68(void)\n\n{\n  uint uVar1;\n  undefined2 someValue;\n  undefined4 offset;\n  undefined4 otherValue;\n  undefined4 anotherValue;\n  undefined4 constantValue;\n  \n  constantValue = 0x10100f0e;\n  anotherValue = 0xd0c0b0a;\n  otherValue = 0x9080706;\n  offset = 0x5040302;\n  someValue = 0x201;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    uVar1 = (uint)*(byte *)((int)&offset + ((_DAT_40021004 << 10) >> 0x1c));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      uVar1 = uVar1 * 4000000;\n    }\n    else {\n      uVar1 = (uVar1 * 8000000) /\n              (uint)*(byte *)((int)&someValue - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n    }\n  }\n  else {\n    uVar1 = 8000000;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_08003a68": "calculate_delay_08003a68",
                "local_1c": "someValue",
                "uStack_18": "offset",
                "uStack_14": "otherValue",
                "uStack_10": "anotherValue",
                "uStack_c": "constantValue"
            },
            "calling": [
                "FUN_08003afa"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ad4": {
            "entrypoint": "0x08003ad4",
            "current_name": "update_data_delay_08003ad4",
            "code": "\n\n\nundefined4 update_data_delay_08003ad4(uint *data_flags,uint data_size)\n\n{\n  int iVar1;\n  int iVar2;\n  uint temp_var;\n  \n  if ((_DAT_40022000 & 7) < data_size) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_size;\n    if (data_size != (data_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*data_flags & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data_flags[2];\n  }\n  if ((*data_flags & 1) != 0) {\n    temp_var = data_flags[1];\n    if (temp_var == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((temp_var != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = temp_var | _DAT_40021004 & 0xfffffffc;\n    iVar1 = get_current_time();\n    if (data_flags[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        iVar2 = get_current_time();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else if (data_flags[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        iVar2 = get_current_time();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        iVar2 = get_current_time();\n        if (5000 < (uint)(iVar2 - iVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (data_size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | data_size;\n    if (data_size != (data_size & 7)) {\n      return 1;\n    }\n  }\n  if ((*data_flags & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data_flags[3];\n  }\n  if ((*data_flags & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data_flags[4] << 3;\n  }\n  temp_var = calculate_data_delay();\n  DAT_20000084 = temp_var >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validate_and_update_data(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003ad4": "update_data_delay_08003ad4",
                "param_1": "data_flags",
                "param_2": "data_size",
                "uVar3": "temp_var",
                "get_data_from_global_variable_08001cc4": "get_current_time",
                "calculate_delay_08003a68": "calculate_data_delay",
                "validate_and_update_data_08001c3c": "validate_and_update_data"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08003afa"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003afa": {
            "entrypoint": "0x08003afa",
            "current_name": "update_data_08003afa",
            "code": "\n\n\nundefined4 updateData_08003afa(uint *data,uint size)\n\n{\n  int initialValue;\n  int currentValue;\n  uint result;\n  \n  if ((*data & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data[2];\n  }\n  if ((*data & 1) != 0) {\n    result = data[1];\n    if (result == 1) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        return 1;\n      }\n    }\n    else if ((result != 2) && ((_DAT_40021000 & 2) == 0)) {\n      return 1;\n    }\n    _DAT_40021004 = result | _DAT_40021004 & 0xfffffffc;\n    initialValue = getGlobalValue();\n    if (data[1] == 1) {\n      while ((_DAT_40021004 & 0xc) != 4) {\n        currentValue = getGlobalValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else if (data[1] == 2) {\n      while ((_DAT_40021004 & 0xc) != 8) {\n        currentValue = getGlobalValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      while ((_DAT_40021004 & 0xc) != 0) {\n        currentValue = getGlobalValue();\n        if (5000 < (uint)(currentValue - initialValue)) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (size < (_DAT_40022000 & 7)) {\n    _DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size;\n    if (size != (size & 7)) {\n      return 1;\n    }\n  }\n  if ((*data & 4) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data[3];\n  }\n  if ((*data & 8) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data[4] << 3;\n  }\n  result = calculateDelay();\n  DAT_20000084 = result >> (&DAT_0800772c)[(_DAT_40021004 << 0x18) >> 0x1c];\n  validateAndUpdateData(0xf);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003afa": "update_data_08003afa",
                "param_1": "data",
                "param_2": "size",
                "iVar1": "initialValue",
                "iVar2": "currentValue",
                "uVar3": "result",
                "get_data_from_global_variable_08001cc4": "getGlobalValue",
                "calculate_delay_08003a68": "calculateDelay",
                "validate_and_update_data_08001c3c": "validateAndUpdateData"
            },
            "calling": [
                "FUN_08003ad4"
            ],
            "called": [
                "FUN_08003a68",
                "FUN_08001cc4",
                "FUN_08001c3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c44": {
            "entrypoint": "0x08003c44",
            "current_name": "get_data_08003c44",
            "code": "\nundefined4 get_data_08003c44(void)\n\n{\n  return DAT_20000084;\n}\n\n",
            "renaming": {
                "FUN_08003c44": "get_data_08003c44"
            },
            "calling": [
                "FUN_08003c50",
                "FUN_08001b48",
                "FUN_08003c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c50": {
            "entrypoint": "0x08003c50",
            "current_name": "shifted_data_value_08003c50",
            "code": "\n\n\nuint shiftedDataValue_08003c50(void)\n\n{\n  uint data;\n  \n  data = get_data_08003c44();\n  return data >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x15) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c50": "shifted_data_value_08003c50",
                "uVar1": "data"
            },
            "calling": [
                "FUN_08004204"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c70": {
            "entrypoint": "0x08003c70",
            "current_name": "shifted_data_by_constant_08003c70",
            "code": "\n\n\nuint shiftedDataByConstant_08003c70(void)\n\n{\n  uint dataFromFunction;\n  \n  dataFromFunction = get_data_08003c44();\n  return dataFromFunction >> (&DAT_0800773c)[(uint)(_DAT_40021004 << 0x12) >> 0x1d];\n}\n\n",
            "renaming": {
                "FUN_08003c70": "shifted_data_by_constant_08003c70",
                "uVar1": "dataFromFunction"
            },
            "calling": [
                "FUN_08004204",
                "FUN_08003da4"
            ],
            "called": [
                "FUN_08003c44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003c90": {
            "entrypoint": "0x08003c90",
            "current_name": "initialize_settings_08003c90",
            "code": "\n\n\nundefined4 initializeSettings_08003c90(uint *settings)\n\n{\n  uint temp1;\n  uint temp2;\n  int startValue;\n  int currentValue;\n  bool flag;\n  \n  if ((*settings & 1) != 0) {\n    flag = (_DAT_4002101c & 0x10000000) == 0;\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      startValue = get_data_from_global_variable_08001cc4();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        currentValue = get_data_from_global_variable_08001cc4();\n        if (100 < (uint)(currentValue - startValue)) {\n          return 3;\n        }\n      }\n    }\n    if (((_DAT_40021020 & 0x300) != 0) && ((_DAT_40021020 & 0x300) != (settings[1] & 0x300))) {\n      temp2 = _DAT_40021020 & 0xfffffcff;\n      _DAT_42420440 = 0;\n      temp1 = _DAT_40021020 & 1;\n      _DAT_40021020 = temp2;\n      if (temp1 != 0) {\n        startValue = get_data_from_global_variable_08001cc4();\n        while ((_DAT_40021020 & 2) == 0) {\n          currentValue = get_data_from_global_variable_08001cc4();\n          if (5000 < (uint)(currentValue - startValue)) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffcff | settings[1];\n    if (flag) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if ((*settings & 2) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffff3fff | settings[2];\n  }\n  if ((*settings & 0x10) != 0) {\n    _DAT_40021004 = _DAT_40021004 & 0xffbfffff | settings[3];\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08003c90": "initialize_settings_08003c90",
                "param_1": "settings",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "iVar3": "startValue",
                "iVar4": "currentValue",
                "bVar5": "flag"
            },
            "calling": [
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003da4": {
            "entrypoint": "0x08003da4",
            "current_name": "calculate_value_08003da4",
            "code": "\n\n\nuint calculateValue_08003da4(int input)\n\n{\n  uint result;\n  undefined2 constant;\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  undefined4 data4;\n  \n  data4 = 0x10100f0e;\n  data3 = 0xd0c0b0a;\n  data2 = 0x9080706;\n  data1 = 0x5040302;\n  constant = 0x201;\n  if (input == 2) {\n    result = shifted_data_by_constant_08003c70();\n    result = result / ((((_DAT_40021004 << 0x10) >> 0x1e) + 1) * 2);\n  }\n  else if (input == 0x10) {\n    if ((_DAT_40021000 & 0x1000000) == 0) {\n      result = 0;\n    }\n    else {\n      if ((_DAT_40021004 & 0x10000) == 0) {\n        result = 4000000;\n      }\n      else {\n        result = 8000000 / *(byte *)((int)&constant - ((int)(_DAT_40021004 << 0xe) >> 0x1f));\n      }\n      result = result * *(byte *)((int)&data1 + ((_DAT_40021004 << 10) >> 0x1c));\n      if ((_DAT_40021004 & 0x400000) == 0) {\n        result = (result * 2) / 3;\n      }\n    }\n  }\n  else if (input == 1) {\n    if ((_DAT_40021020 & 0x302) == 0x102) {\n      result = 0x8000;\n    }\n    else if (((_DAT_40021020 & 0x300) == 0x200) && ((_DAT_40021024 & 2) != 0)) {\n      result = 32000;\n    }\n    else if ((_DAT_40021020 & 0x300) == 0x300) {\n      if ((_DAT_40021000 & 0x20000) == 0) {\n        result = 0;\n      }\n      else {\n        result = 0xf424;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08003da4": "calculate_value_08003da4",
                "param_1": "input",
                "uVar1": "result",
                "local_24": "constant",
                "uStack_20": "data1",
                "uStack_1c": "data2",
                "uStack_18": "data3",
                "uStack_14": "data4"
            },
            "calling": [
                "FUN_08001cd0",
                "FUN_08002384"
            ],
            "called": [
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ea0": {
            "entrypoint": "0x08003ea0",
            "current_name": "check_and_execute_callback_08003ea0",
            "code": "\n\n\nvoid checkAndExecuteCallback_08003ea0(uint **data)\n\n{\n  if (((**data & 2) != 0) && (((*data)[1] & 2) != 0)) {\n    executeCallback();\n    (*data)[1] = 0xfffffffd;\n  }\n  _DAT_40010414 = 0x20000;\n  *(undefined *)((int)data + 0x11) = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ea0": "check_and_execute_callback_08003ea0",
                "param_1": "data",
                "execute_callback_function_08004d18": "executeCallback"
            },
            "calling": [],
            "called": [
                "FUN_08004d18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ed8": {
            "entrypoint": "0x08003ed8",
            "current_name": "update_param_flags_08003ed8",
            "code": "\nvoid update_param_flags_08003ed8(uint **params)\n\n{\n  uint *param;\n  \n  *(undefined *)((int)params + 0x3d) = 2;\n  param = *params;\n  if ((param[8] & 0x1111) == 0) {\n    if ((param[8] & 0x444) == 0) {\n      *param = *param & 0xfffffffe;\n    }\n  }\n  update_flags_based_on_param_08004b34(params);\n  *(undefined *)((int)params + 0x3d) = 0;\n  *(undefined *)(params + 0xf) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ed8": "update_param_flags_08003ed8",
                "param_1": "params",
                "puVar1": "param"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f12": {
            "entrypoint": "0x08003f12",
            "current_name": "FUNC_08003f12",
            "code": "\nvoid FUNC_08003f12(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f12": "FUNC_08003f12"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f14": {
            "entrypoint": "0x08003f14",
            "current_name": "FUNC_08003f14",
            "code": "\nvoid FUNC_08003f14(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f14": "FUNC_08003f14"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f16": {
            "entrypoint": "0x08003f16",
            "current_name": "FUNC_08003f16",
            "code": "\nvoid FUNC_08003f16(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f16": "FUNC_08003f16"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08003f18": {
            "entrypoint": "0x08003f18",
            "current_name": "process_conditions_08003f18",
            "code": "\nvoid processConditions_08003f18(int *conditionData)\n\n{\n  int currentValue;\n  \n  currentValue = *conditionData;\n  if (((*(uint *)(currentValue + 0x10) & 2) != 0) && ((*(uint *)(currentValue + 0xc) & 2) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xfffffffd;\n    *(undefined *)(conditionData + 7) = 1;\n    if ((*(uint *)(*conditionData + 0x18) & 3) == 0) {\n      executeIfConditionMet();\n      FUNC_08003f14(conditionData);\n    }\n    else {\n      FUNC_08003f12();\n    }\n    *(undefined *)(conditionData + 7) = 0;\n  }\n  currentValue = *conditionData;\n  if (((*(uint *)(currentValue + 0x10) & 4) != 0) && ((*(uint *)(currentValue + 0xc) & 4) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xfffffffb;\n    *(undefined *)(conditionData + 7) = 2;\n    if ((*(uint *)(*conditionData + 0x18) & 0x300) == 0) {\n      executeIfConditionMet(conditionData);\n      FUNC_08003f14(conditionData);\n    }\n    else {\n      FUNC_08003f12(conditionData);\n    }\n    *(undefined *)(conditionData + 7) = 0;\n  }\n  currentValue = *conditionData;\n  if (((*(uint *)(currentValue + 0x10) & 8) != 0) && ((*(uint *)(currentValue + 0xc) & 8) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xfffffff7;\n    *(undefined *)(conditionData + 7) = 4;\n    if ((*(uint *)(*conditionData + 0x1c) & 3) == 0) {\n      executeIfConditionMet(conditionData);\n      FUNC_08003f14(conditionData);\n    }\n    else {\n      FUNC_08003f12(conditionData);\n    }\n    *(undefined *)(conditionData + 7) = 0;\n  }\n  currentValue = *conditionData;\n  if (((*(uint *)(currentValue + 0x10) & 0x10) != 0) && ((*(uint *)(currentValue + 0xc) & 0x10) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xffffffef;\n    *(undefined *)(conditionData + 7) = 8;\n    if ((*(uint *)(*conditionData + 0x1c) & 0x300) == 0) {\n      executeIfConditionMet(conditionData);\n      FUNC_08003f14(conditionData);\n    }\n    else {\n      FUNC_08003f12(conditionData);\n    }\n    *(undefined *)(conditionData + 7) = 0;\n  }\n  currentValue = *conditionData;\n  if (((*(uint *)(currentValue + 0x10) & 1) != 0) && ((*(uint *)(currentValue + 0xc) & 1) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xfffffffe;\n    executeSubfunction(conditionData);\n  }\n  currentValue = *conditionData;\n  if (((*(uint *)(currentValue + 0x10) & 0x80) != 0) && ((*(uint *)(currentValue + 0xc) & 0x80) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xffffff7f;\n    FUNC_0800417a(conditionData);\n  }\n  currentValue = *conditionData;\n  if (((*(uint *)(currentValue + 0x10) & 0x40) != 0) && ((*(uint *)(currentValue + 0xc) & 0x40) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xffffffbf;\n    FUNC_08003f16(conditionData);\n  }\n  currentValue = *conditionData;\n  if (((*(uint *)(currentValue + 0x10) & 0x20) != 0) && ((*(uint *)(currentValue + 0xc) & 0x20) != 0)) {\n    *(undefined4 *)(currentValue + 0x10) = 0xffffffdf;\n    FUNC_08004178(conditionData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f18": "process_conditions_08003f18",
                "param_1": "conditionData",
                "iVar1": "currentValue",
                "execute_if_condition_met_08004df8": "executeIfConditionMet",
                "execute_subfunction_08004e12": "executeSubfunction"
            },
            "calling": [
                "FUN_08004e20"
            ],
            "called": [
                "FUN_0800417a",
                "FUN_08004e12",
                "FUN_08004178",
                "FUN_08004df8",
                "FUN_08003f12",
                "FUN_08003f16",
                "FUN_08003f14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004092": {
            "entrypoint": "0x08004092",
            "current_name": "update_bitwise_value_08004092",
            "code": "\nvoid updateBitwiseValue_08004092(int baseAddress,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitPosition & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004092": "update_bitwise_value_08004092",
                "param_1": "baseAddress",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_080040b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b0": {
            "entrypoint": "0x080040b0",
            "current_name": "update_bitwise_values_080040b0",
            "code": "\nundefined4 update_bitwise_values_080040b0(uint **pointer_to_uint,undefined4 value_to_update)\n\n{\n  uint *pointer_to_uint1;\n  \n  update_bitwise_value_08004092(*pointer_to_uint,value_to_update,0);\n  if (((*pointer_to_uint == (uint *)0x40012c00) && ((memory_location2 & 0x1111) == 0)) &&\n     ((memory_location2 & 0x444) == 0)) {\n    memory_location3 = memory_location3 & 0xffff7fff;\n  }\n  pointer_to_uint1 = *pointer_to_uint;\n  if (((pointer_to_uint1[8] & 0x1111) == 0) && ((pointer_to_uint1[8] & 0x444) == 0)) {\n    *pointer_to_uint1 = *pointer_to_uint1 & 0xfffffffe;\n  }\n  *(undefined *)((int)pointer_to_uint + 0x3d) = 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080040b0": "update_bitwise_values_080040b0",
                "param_1": "pointer_to_uint",
                "param_2": "value_to_update",
                "puVar1": "pointer_to_uint1",
                "uRam40012c20": "memory_location2",
                "uRam40012c44": "memory_location3"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004092"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004110": {
            "entrypoint": "0x08004110",
            "current_name": "update_bit_value_08004110",
            "code": "\nvoid updateBitValue_08004110(int baseAddress,uint bitOffset,int bitValue)\n\n{\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & ~(4 << (bitOffset & 0xff));\n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) | bitValue << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004110": "update_bit_value_08004110",
                "param_1": "baseAddress",
                "param_2": "bitOffset",
                "param_3": "bitValue"
            },
            "calling": [
                "FUN_0800412c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800412c": {
            "entrypoint": "0x0800412c",
            "current_name": "update_bit_and_value_0800412c",
            "code": "\nundefined4 updateBitAndValue_0800412c(uint **bitArray,undefined4 bitValue)\n\n{\n  uint *arrayPtr;\n  \n  update_bit_value_08004110(*bitArray,bitValue,0);\n  arrayPtr = *bitArray;\n  if (((arrayElementPtr[8] & 0x1111) == 0) && ((arrayElementPtr[8] & 0x444) == 0)) {\n    arrayElementPtr[0x11] = arrayElementPtr[0x11] & 0xffff7fff;\n  }\n  arrayPtr = *bitArray;\n  if (((arrayElementPtr[8] & 0x1111) == 0) && ((arrayElementPtr[8] & 0x444) == 0)) {\n    *arrayPtr = *arrayPtr & 0xfffffffe;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800412c": "update_bit_and_value_0800412c",
                "param_1": "bitArray",
                "param_2": "bitValue",
                "puVar1": "arrayPtr",
                "puVar1[8]": "arrayElementPtr[8]",
                "puVar1[0x11]": "arrayElementPtr[0x11]"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004110"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004178": {
            "entrypoint": "0x08004178",
            "current_name": "FUNC_08004178",
            "code": "\nvoid FUNC_08004178(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004178": "FUNC_08004178"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417a": {
            "entrypoint": "0x0800417a",
            "current_name": "FUNC_0800417a",
            "code": "\nvoid FUNC_0800417a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417a": "FUNC_0800417a"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800417c": {
            "entrypoint": "0x0800417c",
            "current_name": "set_bit_flags_0800417c",
            "code": "\nvoid setBitFlags_0800417c(int *input)\n\n{\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xfffffedf;\n  *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) & 0xfffffffe;\n  *(undefined *)((int)input + 0x3a) = 0x20;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800417c": "set_bit_flags_0800417c",
                "param_1": "input"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004198": {
            "entrypoint": "0x08004198",
            "current_name": "extract_data_08004198",
            "code": "\nundefined4 extract_data_08004198(int *data_ptr)\n\n{\n  short remaining_count;\n  byte *byte_ptr;\n  \n  if (*(char *)((int)data_ptr + 0x39) != '!') {\n    return 2;\n  }\n  if (data_ptr[2] == 0x1000) {\n    *(uint *)(*data_ptr + 4) = *(ushort *)data_ptr[8] & 0x1ff;\n    if (data_ptr[4] == 0) {\n      data_ptr[8] = data_ptr[8] + 2;\n    }\n    else {\n      data_ptr[8] = data_ptr[8] + 1;\n    }\n  }\n  else {\n    byte_ptr = (byte *)data_ptr[8];\n    data_ptr[8] = (int)(byte_ptr + 1);\n    *(uint *)(*data_ptr + 4) = (uint)*byte_ptr;\n  }\n  remaining_count = *(short *)((int)data_ptr + 0x26) + -1;\n  *(short *)((int)data_ptr + 0x26) = remaining_count;\n  if (remaining_count == 0) {\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) & 0xffffff7f;\n    *(uint *)(*data_ptr + 0xc) = *(uint *)(*data_ptr + 0xc) | 0x40;\n    return 0;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004198": "extract_data_08004198",
                "param_1": "data_ptr",
                "sVar1": "remaining_count",
                "pbVar2": "byte_ptr"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004204": {
            "entrypoint": "0x08004204",
            "current_name": "calculate_values_08004204",
            "code": "\nvoid calculateValues_08004204(int *inputArray)\n\n{\n  int shiftedValue1;\n  int shiftedValue2;\n  int shiftedValue3;\n  int shiftedValue4;\n  int shiftedValue5;\n  int shiftedValue6;\n  int shiftedValue7;\n  int shiftedValue8;\n  int shiftedValue9;\n  int shiftedValue10;\n  \n  *(uint *)(*inputArray + 0x10) = *(uint *)(*inputArray + 0x10) & 0xffffcfff | inputArray[3];\n  *(uint *)(*inputArray + 0xc) =\n       inputArray[2] | inputArray[4] | inputArray[5] | *(uint *)(*inputArray + 0xc) & 0xffffe9f3;\n  *(uint *)(*inputArray + 0x14) = *(uint *)(*inputArray + 0x14) & 0xfffffcff | inputArray[6];\n  shiftedValue10 = *inputArray;\n  if (shiftedValue10 != 0x40013800) {\n    shiftedValue1 = shifted_data_value_08003c50();\n    shiftedValue6 = inputArray[1];\n    shiftedValue2 = shifted_data_value_08003c50();\n    shiftedValue7 = inputArray[1];\n    shiftedValue3 = shifted_data_value_08003c50();\n    shiftedValue8 = inputArray[1];\n    shiftedValue4 = shifted_data_value_08003c50();\n    shiftedValue9 = inputArray[1];\n    shiftedValue5 = shifted_data_value_08003c50();\n    *(uint *)(shiftedValue10 + 8) =\n         ((uint)((int)((ulonglong)\n                       (((uint)(shiftedValue4 * 0x19) / (uint)(shiftedValue9 << 2) +\n                        (int)(((ulonglong)(uint)(shiftedValue5 * 0x19) / (ulonglong)(uint)(inputArray[1] << 2))\n                             / 100) * -100) * 0x10 + 0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n         ((((uint)(shiftedValue2 * 0x19) / (uint)(shiftedValue7 << 2) +\n           (int)(((ulonglong)(uint)(shiftedValue3 * 0x19) / (ulonglong)(uint)(shiftedValue8 << 2)) / 100) * -100) *\n           0x10 + 0x32) / 100 & 0xf0) +\n         (int)(((ulonglong)(uint)(shiftedValue1 * 0x19) / (ulonglong)(uint)(shiftedValue6 << 2)) / 100) * 0x10;\n    return;\n  }\n  shiftedValue10 = shifted_data_by_constant_08003c70();\n  shiftedValue5 = inputArray[1];\n  shiftedValue1 = shifted_data_by_constant_08003c70();\n  shiftedValue6 = inputArray[1];\n  shiftedValue2 = shifted_data_by_constant_08003c70();\n  shiftedValue7 = inputArray[1];\n  shiftedValue3 = shifted_data_by_constant_08003c70();\n  shiftedValue8 = inputArray[1];\n  shiftedValue4 = shifted_data_by_constant_08003c70();\n  iRam40013808 = ((uint)((int)((ulonglong)\n                               (((uint)(shiftedValue3 * 0x19) / (uint)(shiftedValue8 << 2) +\n                                (int)(((ulonglong)(uint)(shiftedValue4 * 0x19) /\n                                      (ulonglong)(uint)(inputArray[1] << 2)) / 100) * -100) * 0x10 +\n                               0x32) * 0x51eb851f >> 0x20) << 0x17) >> 0x1c) +\n                 ((((uint)(shiftedValue1 * 0x19) / (uint)(shiftedValue6 << 2) +\n                   (int)(((ulonglong)(uint)(shiftedValue2 * 0x19) / (ulonglong)(uint)(shiftedValue7 << 2)) / 100) *\n                   -100) * 0x10 + 0x32) / 100 & 0xf0) +\n                 (int)(((ulonglong)(uint)(shiftedValue10 * 0x19) / (ulonglong)(uint)(shiftedValue5 << 2)) / 100) *\n                 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004204": "calculate_values_08004204",
                "param_1": "inputArray",
                "iVar1": "shiftedValue1",
                "iVar2": "shiftedValue2",
                "iVar3": "shiftedValue3",
                "iVar4": "shiftedValue4",
                "iVar5": "shiftedValue5",
                "iVar6": "shiftedValue6",
                "iVar7": "shiftedValue7",
                "iVar8": "shiftedValue8",
                "iVar9": "shiftedValue9",
                "iVar10": "shiftedValue10"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [
                "FUN_08003c50",
                "FUN_08003c70"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043b4": {
            "entrypoint": "0x080043b4",
            "current_name": "validate_conditions_080043b4",
            "code": "\nundefined4 validate_conditions_080043b4(uint **data,uint flag,uint expected_result,int threshold,uint comparison_value)\n\n{\n  int global_var_data;\n  \n  do {\n    if (((flag & ~**data) == 0) != expected_result) {\n      return 0;\n    }\n  } while ((comparison_value == 0xffffffff) ||\n          ((comparison_value != 0 && (global_var_data = get_global_var_data(), (uint)(global_var_data - threshold) <= comparison_value))));\n  (*data)[3] = (*data)[3] & 0xfffffe5f;\n  (*data)[5] = (*data)[5] & 0xfffffffe;\n  *(undefined *)((int)data + 0x39) = 0x20;\n  *(undefined *)((int)data + 0x3a) = 0x20;\n  *(undefined *)(data + 0xe) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_080043b4": "validate_conditions_080043b4",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "expected_result",
                "param_4": "threshold",
                "param_5": "comparison_value",
                "iVar1": "global_var_data",
                "get_data_from_global_variable_08001cc4": "get_global_var_data"
            },
            "calling": [
                "FUN_08004478"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004418": {
            "entrypoint": "0x08004418",
            "current_name": "FUNC_08004418",
            "code": "\nvoid FUNC_08004418(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004418": "FUNC_08004418"
            },
            "calling": [
                "FUN_0800441a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800441a": {
            "entrypoint": "0x0800441a",
            "current_name": "initialize_data_0800441a",
            "code": "\nundefined4 initializeData_0800441a(int *data)\n\n{\n  if (data != (int *)0x0) {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_08004418();\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    calculateValues(data);\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    data[0xf] = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800441a": "initialize_data_0800441a",
                "param_1": "data",
                "calculate_values_08004204": "calculateValues"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08004204",
                "FUN_08004418"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004478": {
            "entrypoint": "0x08004478",
            "current_name": "process_data_08004478",
            "code": "\nundefined4 processData_08004478(int *dataPtr,ushort *bufferPtr,int bufferSize,undefined4 param4)\n\n{\n  int validationResult;\n  undefined4 result;\n  \n  if (*(char *)((int)dataPtr + 0x39) == ' ') {\n    if (bufferPtr == (ushort *)0x0) {\n      result = 1;\n    }\n    else if (bufferSize == 0) {\n      result = 1;\n    }\n    else if (*(char *)(dataPtr + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(dataPtr + 0xe) = 1;\n      dataPtr[0xf] = 0;\n      *(undefined *)((int)dataPtr + 0x39) = 0x21;\n      result = getDataFromGlobalVariable();\n      *(short *)(dataPtr + 9) = (short)bufferSize;\n      *(short *)((int)dataPtr + 0x26) = (short)bufferSize;\n      while (*(short *)((int)dataPtr + 0x26) != 0) {\n        *(short *)((int)dataPtr + 0x26) = *(short *)((int)dataPtr + 0x26) + -1;\n        if (dataPtr[2] == 0x1000) {\n          validationResult = validateConditions(dataPtr,0x80,0,result,param4);\n          if (validationResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = *bufferPtr & 0x1ff;\n          if (dataPtr[4] == 0) {\n            bufferPtr = bufferPtr + 1;\n          }\n          else {\n            bufferPtr = (ushort *)((int)bufferPtr + 1);\n          }\n        }\n        else {\n          validationResult = validateConditions(dataPtr,0x80,0,result,param4);\n          if (validationResult != 0) {\n            return 3;\n          }\n          *(uint *)(*dataPtr + 4) = (uint)*(byte *)bufferPtr;\n          bufferPtr = (ushort *)((int)bufferPtr + 1);\n        }\n      }\n      validationResult = validateConditions(dataPtr,0x40,0,result,param4);\n      if (validationResult == 0) {\n        *(undefined *)((int)dataPtr + 0x39) = 0x20;\n        *(undefined *)(dataPtr + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004478": "process_data_08004478",
                "param_1": "dataPtr",
                "param_2": "bufferPtr",
                "param_3": "bufferSize",
                "param_4": "param4",
                "iVar1": "validationResult",
                "uVar2": "result",
                "get_data_from_global_variable_08001cc4": "getDataFromGlobalVariable",
                "validate_conditions_080043b4": "validateConditions"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08001cc4",
                "FUN_080043b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800455a": {
            "entrypoint": "0x0800455a",
            "current_name": "check_and_update_params_0800455a",
            "code": "\nundefined4 checkAndUpdateParams_0800455a(int *paramArray,int value1,int value2)\n\n{\n  if (*(char *)((int)paramArray + 0x39) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(paramArray + 0xe) != '\\x01') {\n    paramArray[8] = value1;\n    *(short *)(paramArray + 9) = (short)value2;\n    *(short *)((int)paramArray + 0x26) = (short)value2;\n    paramArray[0xf] = 0;\n    *(undefined *)((int)paramArray + 0x39) = 0x21;\n    *(undefined *)(paramArray + 0xe) = 0;\n    *(uint *)(*paramArray + 0xc) = *(uint *)(*paramArray + 0xc) | 0x80;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_0800455a": "check_and_update_params_0800455a",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08005568",
                "FUN_08005604"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045a2": {
            "entrypoint": "0x080045a2",
            "current_name": "validate_input_080045a2",
            "code": "\nundefined4 validate_input_080045a2(int *input_array,int value1,int value2)\n\n{\n  if (*(char *)((int)input_array + 0x3a) != ' ') {\n    return 2;\n  }\n  if (value1 == 0) {\n    return 1;\n  }\n  if (value2 == 0) {\n    return 1;\n  }\n  if (*(char *)(input_array + 0xe) != '\\x01') {\n    input_array[10] = value1;\n    *(short *)(input_array + 0xb) = (short)value2;\n    *(short *)((int)input_array + 0x2e) = (short)value2;\n    input_array[15] = 0;\n    *(undefined *)((int)input_array + 0x3a) = 0x22;\n    *(undefined *)(input_array + 0xe) = 0;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x100;\n    *(uint *)(*input_array + 0x14) = *(uint *)(*input_array + 0x14) | 1;\n    *(uint *)(*input_array + 0xc) = *(uint *)(*input_array + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_080045a2": "validate_input_080045a2",
                "param_1": "input_array",
                "param_2": "value1",
                "param_3": "value2",
                "param_1[10]": "input_array[10]",
                "param_1[0xf]": "input_array[15]"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080045fe": {
            "entrypoint": "0x080045fe",
            "current_name": "update_data_and_process_080045fe",
            "code": "\nundefined4 updateDataAndProcess_080045fe(int *dataPtr)\n\n{\n  *(uint *)(*dataPtr + 0xc) = *(uint *)(*dataPtr + 0xc) & 0xffffffbf;\n  *(undefined *)((int)dataPtr + 0x39) = 0x20;\n  process_data_08005604();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080045fe": "update_data_and_process_080045fe",
                "param_1": "dataPtr"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_08005604"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004618": {
            "entrypoint": "0x08004618",
            "current_name": "parse_text_08004618",
            "code": "\nundefined4 parse_text_08004618(int *input)\n\n{\n  byte *bytePtr;\n  short count;\n  undefined *undefinedPtr;\n  \n  if (*(char *)((int)input + 0x3a) != '\\\"') {\n    return 2;\n  }\n  if (input[2] == 0x1000) {\n    if (input[4] == 0) {\n      *(ushort *)input[10] = (ushort)((uint)(*(int *)(*input + 4) << 0x17) >> 0x17);\n      input[10] = input[10] + 2;\n    }\n    else {\n      *(ushort *)input[10] = (ushort)*(undefined4 *)(*input + 4) & 0xff;\n      input[10] = input[10] + 1;\n    }\n  }\n  else if (input[4] == 0) {\n    undefinedPtr = (undefined *)input[10];\n    input[10] = (int)(undefinedPtr + 1);\n    *undefinedPtr = (char)*(undefined4 *)(*input + 4);\n  }\n  else {\n    bytePtr = (byte *)input[10];\n    input[10] = (int)(bytePtr + 1);\n    *bytePtr = (byte)*(undefined4 *)(*input + 4) & 0x7f;\n  }\n  count = *(short *)((int)input + 0x2e) + -1;\n  *(short *)((int)input + 0x2e) = count;\n  if (count != 0) {\n    return 0;\n  }\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xffffffdf;\n  *(uint *)(*input + 0xc) = *(uint *)(*input + 0xc) & 0xfffffeff;\n  *(uint *)(*input + 0x14) = *(uint *)(*input + 0x14) & 0xfffffffe;\n  *(undefined *)((int)input + 0x3a) = 0x20;\n  execute_selected_function_080055e0();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004618": "parse_text_08004618",
                "param_1": "input",
                "pbVar1": "bytePtr",
                "sVar2": "count",
                "puVar3": "undefinedPtr"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [
                "FUN_080055e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080046b8": {
            "entrypoint": "0x080046b8",
            "current_name": "process_data_080046b8",
            "code": "\nvoid process_data_080046b8(uint **data)\n\n{\n  int result;\n  uint var2;\n  uint *ptr_data;\n  uint var4;\n  uint var5;\n  \n  ptr_data = *data;\n  var5 = *ptr_data;\n  var2 = ptr_data[3];\n  if ((((var5 & 0xf) == 0) && ((var5 & 0x20) != 0)) && ((var2 & 0x20) != 0)) {\n    parse_text_08004618(data);\n    return;\n  }\n  if (((var5 & 0xf) == 0) || ((var4 = ptr_data[5] & 1, var4 == 0 && ((var2 & 0x120) == 0)))) {\n    if (((var5 & 0x80) != 0) && ((var2 & 0x80) != 0)) {\n      extract_data_08004198(data);\n      return;\n    }\n    if (((var5 & 0x40) != 0) && ((var2 & 0x40) != 0)) {\n      update_data_and_process_080045fe(data);\n    }\n  }\n  else {\n    if (((var5 & 1) != 0) && ((var2 & 0x100) != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 1);\n    }\n    if (((var5 & 4) != 0) && (var4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 2);\n    }\n    if (((var5 & 2) != 0) && (var4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 4);\n    }\n    if (((var5 & 8) != 0) && (var4 != 0)) {\n      data[0xf] = (uint *)((uint)data[0xf] | 8);\n    }\n    if (data[0xf] != (uint *)0x0) {\n      if (((var5 & 0x20) != 0) && ((var2 & 0x20) != 0)) {\n        parse_text_08004618(data);\n      }\n      if ((((uint)data[0xf] & 8) == 0) && (((*data)[5] & 0x40) == 0)) {\n        FUNC_08005650(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      set_bit_flags_0800417c(data);\n      ptr_data = *data;\n      if ((ptr_data[5] & 0x40) == 0) {\n        FUNC_08005650(data);\n        return;\n      }\n      ptr_data[5] = ptr_data[5] & 0xffffffbf;\n      if (data[0xd] == (uint *)0x0) {\n        FUNC_08005650(data);\n        return;\n      }\n      data[0xd][0xd] = (uint)&LAB_080047d8_1;\n      result = update_configurations_0800258c(data[0xd]);\n      if (result != 0) {\n        (*(code *)data[0xd][0xd])();\n        return;\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080046b8": "process_data_080046b8",
                "param_1": "data",
                "puVar3": "ptr_data",
                "iVar1": "result",
                "uVar2": "var2",
                "uVar4": "var4",
                "uVar5": "var5"
            },
            "calling": [],
            "called": [
                "FUN_0800417c",
                "FUN_08005650",
                "FUN_080045fe",
                "FUN_08004618",
                "FUN_08004198",
                "FUN_0800258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047e8": {
            "entrypoint": "0x080047e8",
            "current_name": "combine_bytes_080047e8",
            "code": "\nbyte combineBytes_080047e8(int input)\n\n{\n  return *(byte *)(input + 0x3a) | *(byte *)(input + 0x39);\n}\n\n",
            "renaming": {
                "FUN_080047e8": "combine_bytes_080047e8",
                "param_1": "input"
            },
            "calling": [
                "FUN_0800548c",
                "FUN_080054b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080047f4": {
            "entrypoint": "0x080047f4",
            "current_name": "check_bit_080047f4",
            "code": "\nuint checkBit_080047f4(uint value,int address)\n\n{\n  return *(uint *)(address + ((value << 0x18) >> 0x1c) * 4) >> (value & 0xf) & 1;\n}\n\n",
            "renaming": {
                "FUN_080047f4": "check_bit_080047f4",
                "param_1": "value",
                "param_2": "address"
            },
            "calling": [
                "FUN_08005848",
                "FUN_080057b4",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800480a": {
            "entrypoint": "0x0800480a",
            "current_name": "set_bit_in_array_0800480a",
            "code": "\nvoid setBitInArray_0800480a(uint bitIndex,int array)\n\n{\n  uint index;\n  \n  index = (bitIndex << 0x18) >> 0x1c;\n  *(uint *)(array + index * 4) = *(uint *)(array + index * 4) | 1 << (bitIndex & 0xf);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800480a": "set_bit_in_array_0800480a",
                "param_1": "bitIndex",
                "param_2": "array",
                "uVar1": "index"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004828": {
            "entrypoint": "0x08004828",
            "current_name": "clear_bit_in_array_08004828",
            "code": "\nvoid clearBitInArray_08004828(uint bitPosition,int arrayAddress)\n\n{\n  uint shiftedPosition;\n  \n  shiftedPosition = (bitPosition << 0x18) >> 0x1c;\n  *(uint *)(arrayAddress + shiftedPosition * 4) = *(uint *)(arrayAddress + shiftedPosition * 4) & ~(1 << (bitPosition & 0xf));\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004828": "clear_bit_in_array_08004828",
                "param_1": "bitPosition",
                "param_2": "arrayAddress",
                "uVar1": "shiftedPosition"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004848": {
            "entrypoint": "0x08004848",
            "current_name": "get_memory_address_08004848",
            "code": "\nundefined4 getMemoryAddress_08004848(undefined4 input)\n\n{\n  switch(input) {\n  case 0:\n    return 0x40010800;\n  case 1:\n    return 0x40010c00;\n  case 2:\n    return 0x40011000;\n  case 3:\n    return 0x40011400;\n  case 4:\n    return 0x40011800;\n  default:\n    return 0;\n  }\n}\n\n",
            "renaming": {
                "FUN_08004848": "get_memory_address_08004848",
                "param_1": "input"
            },
            "calling": [
                "FUN_08005848",
                "FUN_08005890"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004884": {
            "entrypoint": "0x08004884",
            "current_name": "set_memory_location_08004884",
            "code": "\n\n\nundefined4 setMemoryLocation_08004884(undefined4 location)\n\n{\n  undefined4 newAddress;\n  \n  switch(location) {\n  case 0:\n    _DAT_40021018 = _DAT_40021018 | 4;\n    newAddress = 0x40010800;\n    break;\n  case 1:\n    _DAT_40021018 = _DAT_40021018 | 8;\n    newAddress = 0x40010c00;\n    break;\n  case 2:\n    _DAT_40021018 = _DAT_40021018 | 0x10;\n    newAddress = 0x40011000;\n    break;\n  case 3:\n    _DAT_40021018 = _DAT_40021018 | 0x20;\n    newAddress = 0x40011400;\n    break;\n  case 4:\n    _DAT_40021018 = _DAT_40021018 | 0x40;\n    newAddress = 0x40011800;\n    break;\n  default:\n    newAddress = 0;\n  }\n  return newAddress;\n}\n\n",
            "renaming": {
                "FUN_08004884": "set_memory_location_08004884",
                "param_1": "location",
                "uVar1": "newAddress"
            },
            "calling": [
                "FUN_08004f4c",
                "FUN_08004974",
                "FUN_08004bb0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800492c": {
            "entrypoint": "0x0800492c",
            "current_name": "get_shifted_value_0800492c",
            "code": "\nuint get_shifted_value_0800492c(undefined4 input_param1,undefined4 input_param2,undefined4 input_param3,undefined4 input_param4)\n\n{\n  int value;\n  uint shifted_value;\n  \n  value = get_value_from_key_08004cce(input_param1,&DAT_08007400,input_param3,input_param4,input_param4);\n  shifted_value = (uint)(value << 0xc) >> 0x1b;\n  if (0x10 < shifted_value - 1) {\n    shifted_value = 0;\n  }\n  return shifted_value;\n}\n\n",
            "renaming": {
                "FUN_0800492c": "get_shifted_value_0800492c",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "iVar1": "value",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08004a4c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004948": {
            "entrypoint": "0x08004948",
            "current_name": "get_value_shifted_08004948",
            "code": "\nundefined4 get_value_shifted_08004948(undefined4 value,undefined4 key,undefined4 param_3,undefined4 param_4)\n\n{\n  int value_from_key;\n  uint shifted_value;\n  \n  value_from_key = get_value_from_key_08004cce(value,&DAT_080074b4,param_3,param_4,param_4);\n  shifted_value = (uint)(value_from_key << 0xc) >> 0x1b;\n  if (shifted_value == 3) {\n    return 8;\n  }\n  if (shifted_value != 4) {\n    if (shifted_value != 2) {\n      return 0;\n    }\n    return 4;\n  }\n  return 0xc;\n}\n\n",
            "renaming": {
                "FUN_08004948": "get_value_shifted_08004948",
                "param_1": "value",
                "param_2": "key",
                "iVar1": "value_from_key",
                "uVar2": "shifted_value"
            },
            "calling": [
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004974": {
            "entrypoint": "0x08004974",
            "current_name": "handle_memory_location_08004974",
            "code": "\n\n\nvoid handleMemoryLocation_08004974(int *memoryLocation,undefined4 data)\n\n{\n  undefined4 result;\n  uint flag;\n  int value;\n  uint bitMask;\n  undefined4 param1;\n  undefined4 param2;\n  \n  value = *memoryLocation;\n  if (value == 0x40012400) {\n    flag = _DAT_40021018 | 0x200;\n    value = 0x200;\n    _DAT_40021018 = flag;\n  }\n  else {\n    flag = 0x40012800;\n    if (value == 0x40012800) {\n      flag = _DAT_40021018 | 0x400;\n      value = 0x400;\n      _DAT_40021018 = flag;\n    }\n  }\n  result = set_memory_location_08004884((uint)((int)(char)DAT_20000080 << 0x18) >> 0x1c,data,flag,value);\n  bitMask = 1 << (DAT_20000080 & 0xf) & 0xffff;\n  param1 = 3;\n  param2 = 0;\n  process_params_08002624(result,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004974": "handle_memory_location_08004974",
                "param_1": "memoryLocation",
                "param_2": "data",
                "uVar1": "result",
                "uVar2": "flag",
                "iVar3": "value",
                "local_18": "bitMask",
                "local_14": "param1",
                "local_10": "param2"
            },
            "calling": [
                "FUN_0800213c"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080049f0": {
            "entrypoint": "0x080049f0",
            "current_name": "update_memory_protection_080049f0",
            "code": "\n\n\nvoid updateMemoryProtection_080049f0(int *address)\n\n{\n  if (*address != 0x40012400) {\n    if (*address == 0x40012800) {\n      _DAT_4002100c = _DAT_4002100c & 0xfffffbff;\n      _DAT_40021018 = _DAT_40021018 & 0xfffffbff;\n    }\n    return;\n  }\n  _DAT_4002100c = _DAT_4002100c & 0xfffffdff;\n  _DAT_40021018 = _DAT_40021018 & 0xfffffdff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080049f0": "update_memory_protection_080049f0",
                "param_1": "address"
            },
            "calling": [
                "FUN_0800224c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a4c": {
            "entrypoint": "0x08004a4c",
            "current_name": "find_parameter_value_08004a4c",
            "code": "\nundefined2 findParameterValue_08004a4c(undefined4 param)\n\n{\n  int result;\n  uint offsetValue;\n  undefined2 result;\n  uint shiftedValue;\n  undefined4 updateConfig;\n  undefined4 dataValue;\n  int paramValue;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var9;\n  undefined4 var5;\n  undefined4 var10;\n  undefined4 var7;\n  undefined4 var8;\n  \n  fill_memory_080061e0(&paramValue,0,0x30);\n  shiftedValue = 0;\n  updateConfig = 0;\n  dataValue = 0;\n  result = 0;\n  paramValue = check_param_and_find_value_08004c78(param,&DAT_08007400);\n  if (paramValue == 0) {\n    result = 0;\n  }\n  else {\n    var1 = 0;\n    var2 = 0;\n    var3 = 0;\n    var5 = 0;\n    var7 = 0xe0000;\n    var8 = 0;\n    var9 = 1;\n    var10 = 0;\n    DAT_20000080 = (undefined)param;\n    result = update_data_structure_0800213c(&paramValue);\n    if (result == 0) {\n      shiftedValue = get_shifted_value_0800492c(param);\n      if (shiftedValue < 0x12) {\n        updateConfig = 1;\n        dataValue = 2;\n        result = update_configuration_08001e48(&paramValue,&shiftedValue);\n        if (result == 0) {\n          result = update_data_value_08002384(&paramValue);\n          if (result == 0) {\n            result = update_data_08002004(&paramValue);\n            if (result == 0) {\n              result = check_validity_and_calculate_08001cd0(&paramValue,10);\n              if (result == 0) {\n                offsetValue = get_offset_value_08001f80(&paramValue);\n                if ((offsetValue & 0x200) != 0) {\n                  result = get_offset_value_08001e40(&paramValue);\n                }\n                result = update_data_struct_flags_08002348(&paramValue);\n                if (result == 0) {\n                  result = update_data_struct_0800224c(&paramValue);\n                  if (result != 0) {\n                    result = 0;\n                  }\n                }\n                else {\n                  result = 0;\n                }\n              }\n              else {\n                result = 0;\n              }\n            }\n            else {\n              result = 0;\n            }\n          }\n          else {\n            result = 0;\n          }\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08004a4c": "find_parameter_value_08004a4c",
                "param_1": "param",
                "local_46": "result",
                "local_44": "shiftedValue",
                "local_40": "updateConfig",
                "local_3c": "dataValue",
                "local_38": "paramValue",
                "local_34": "var1",
                "local_30": "var2",
                "local_2c": "var3",
                "local_28": "var9",
                "local_24": "var5",
                "local_20": "var10",
                "local_1c": "var7",
                "local_10": "var8",
                "iVar1": "result",
                "uVar2": "offsetValue"
            },
            "calling": [
                "FUN_08005754"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08001e40",
                "FUN_08001e48",
                "FUN_0800213c",
                "FUN_080061e0",
                "FUN_08002004",
                "FUN_08002348",
                "FUN_08001cd0",
                "FUN_0800224c",
                "FUN_0800492c",
                "FUN_08002384",
                "FUN_08001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b34": {
            "entrypoint": "0x08004b34",
            "current_name": "update_flags_based_on_param_08004b34",
            "code": "\nvoid update_flags_based_on_param_08004b34(void)\n\n{\n  update_flags_based_on_param_08004b34_08004d90();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b34": "update_flags_based_on_param_08004b34"
            },
            "calling": [
                "FUN_08003ed8"
            ],
            "called": [
                "FUN_08004d90"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b3c": {
            "entrypoint": "0x08004b3c",
            "current_name": "process_param_08004b3c",
            "code": "\nvoid processParam_08004b3c(undefined4 input)\n\n{\n  int shiftedValue;\n  uint valueFromKey;\n  int valuesArray [17];\n  \n  valuesArray[0] = check_param_and_find_value_08004c78(input,&DAT_080074b4);\n  if ((valuesArray[0] != 0) &&\n     ((((shiftedValue = get_value_shifted_08004948(input), shiftedValue == 0 || (shiftedValue == 4)) || (shiftedValue == 8)) ||\n      ((shiftedValue == 0xc || (shiftedValue == 0x18)))))) {\n    valueFromKey = get_value_from_key_08004cce(input,&DAT_080074b4);\n    if ((valueFromKey & 0x100000) == 0) {\n      update_bitwise_values_080040b0(valuesArray,shiftedValue);\n    }\n    else {\n      update_bit_and_value_0800412c(valuesArray,shiftedValue);\n    }\n    update_param_flags_08003ed8(valuesArray);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b3c": "process_param_08004b3c",
                "param_1": "input",
                "iVar1": "shiftedValue",
                "uVar2": "valueFromKey",
                "local_50": "valuesArray"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08003ed8",
                "FUN_0800412c",
                "FUN_08004948",
                "FUN_080040b0",
                "FUN_08004cce"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b94": {
            "entrypoint": "0x08004b94",
            "current_name": "initialize_data_08004b94",
            "code": "\nvoid initializeData_08004b94(void)\n\n{\n  retrieveDataFromGlobalVariable();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b94": "initialize_data_08004b94",
                "get_data_from_global_variable_08001cc4": "retrieveDataFromGlobalVariable"
            },
            "calling": [
                "FUN_080058e0"
            ],
            "called": [
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9c": {
            "entrypoint": "0x08004b9c",
            "current_name": "FUNC_08004b9c",
            "code": "\nvoid FUNC_08004b9c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9c": "FUNC_08004b9c"
            },
            "calling": [
                "FUN_08004b9e"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08004b9e": {
            "entrypoint": "0x08004b9e",
            "current_name": "initialize_and_update_system_08004b9e",
            "code": "\nvoid initialize_and_update_system_08004b9e(void)\n\n{\n  update_sum();\n  initialize_system();\n  FUNC_08004b9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004b9e": "initialize_and_update_system_08004b9e",
                "update_sum_08001cac": "update_sum",
                "initialize_system_08002582": "initialize_system"
            },
            "calling": [],
            "called": [
                "FUN_08001cac",
                "FUN_08002582",
                "FUN_08004b9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004bb0": {
            "entrypoint": "0x08004bb0",
            "current_name": "initialize_memory_08004bb0",
            "code": "\n\n\nvoid initializeMemory_08004bb0(uint input,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 memoryLocation;\n  uint bitMask;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 constant;\n  \n  memoryLocation = set_memory_location_08004884((input << 0x18) >> 0x1c);\n  bitMask = 1 << (input & 0xf) & 0xffff;\n  constant = 3;\n  _DAT_40021018 = _DAT_40021018 | 1;\n  if ((input - 0xd & 0xff) < 2) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n  }\n  if (((input == 0xf) || (input == 0x13)) || (input == 0x14)) {\n    _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n  }\n  localParam2 = param2;\n  localParam3 = param3;\n  process_params_08002624(memoryLocation,&bitMask);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004bb0": "initialize_memory_08004bb0",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "memoryLocation",
                "local_20": "bitMask",
                "local_1c": "localParam2",
                "local_18": "localParam3",
                "local_14": "constant"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "set_param_or_return_default_08004c30",
            "code": "\nvoid set_param_or_return_default_08004c30(undefined4 input_1,undefined2 input_2,int flag,undefined4 default_value)\n\n{\n  if (flag == 0) {\n    set_param(input_1,input_2,0,default_value,default_value);\n    return;\n  }\n  set_param(input_1,input_2,1,default_value,default_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "set_param_or_return_default_08004c30",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "flag",
                "param_4": "default_value",
                "set_param_0800281e": "set_param"
            },
            "calling": [
                "FUN_08005848"
            ],
            "called": [
                "FUN_0800281e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c48": {
            "entrypoint": "0x08004c48",
            "current_name": "check_bit_function_08004c48",
            "code": "\nvoid check_bit_function_08004c48(undefined4 input_param,undefined2 index_param,undefined4 data_param1,undefined4 data_param2)\n\n{\n  check_bit_08002810(input_param,index_param,data_param1,data_param2,data_param2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c48": "check_bit_function_08004c48",
                "param_1": "input_param",
                "param_2": "index_param",
                "param_3": "data_param1",
                "param_4": "data_param2"
            },
            "calling": [
                "FUN_08005890"
            ],
            "called": [
                "FUN_08002810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c52": {
            "entrypoint": "0x08004c52",
            "current_name": "initialize_module_and_settings_08004c52",
            "code": "\nvoid initialize_module_and_settings_08004c52(void)\n\n{\n  initialize_module();\n  initialize_and_update_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c52": "initialize_module_and_settings_08004c52",
                "initialize_module_08001c88": "initialize_module",
                "initialize_and_update_settings_08001b48": "initialize_and_update_settings"
            },
            "calling": [
                "FUN_08001c32"
            ],
            "called": [
                "FUN_08001b48",
                "FUN_08001c88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c5e": {
            "entrypoint": "0x08004c5e",
            "current_name": "find_value_in_array_08004c5e",
            "code": "\nundefined4 find_value_in_array_08004c5e(int value,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      return 0;\n    }\n    if (*array == value) break;\n    array = array + 0xc;\n  }\n  return *(undefined4 *)(array + 4);\n}\n\n",
            "renaming": {
                "FUN_08004c5e": "find_value_in_array_08004c5e",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004c78",
                "FUN_08004c5e"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c78": {
            "entrypoint": "0x08004c78",
            "current_name": "check_param_and_find_value_08004c78",
            "code": "\nundefined4 check_param_and_find_value_08004c78(int input_param)\n\n{\n  undefined4 found_value;\n  \n  if (input_param != -1) {\n    found_value = find_value_in_array_08004c5e();\n    return found_value;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08004c78": "check_param_and_find_value_08004c78",
                "param_1": "input_param",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08004f4c",
                "FUN_080053d4",
                "FUN_08004a4c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004c5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8a": {
            "entrypoint": "0x08004c8a",
            "current_name": "find_value_in_array_08004c8a",
            "code": "\nint find_value_in_array_08004c8a(int value,char *array)\n\n{\n  while( true ) {\n    if (*(int *)(array + 4) == 0) {\n      return -1;\n    }\n    if (*(int *)(array + 4) == value) break;\n    array = array + 0xc;\n  }\n  return (int)*array;\n}\n\n",
            "renaming": {
                "FUN_08004c8a": "find_value_in_array_08004c8a",
                "param_1": "value",
                "param_2": "array"
            },
            "calling": [
                "FUN_08004ca2",
                "FUN_08004c8a"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ca2": {
            "entrypoint": "0x08004ca2",
            "current_name": "check_param_and_find_value_08004ca2",
            "code": "\nundefined4 check_param_and_find_value_08004ca2(int input_param)\n\n{\n  undefined4 found_value;\n  \n  if (input_param != 0) {\n    found_value = find_value_in_array_08004c8a();\n    return found_value;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08004ca2": "check_param_and_find_value_08004ca2",
                "param_1": "input_param",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08005384",
                "FUN_08005b54"
            ],
            "called": [
                "FUN_08004c8a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cb2": {
            "entrypoint": "0x08004cb2",
            "current_name": "find_value_by_key_08004cb2",
            "code": "\nundefined4 find_value_by_key_08004cb2(int key,char *array)\n\n{\n  while( true ) {\n    if (*array == -1) {\n      value 0xffffffff;\n    }\n    if (*array == key) break;\n    array = array + 0xc;\n  }\n  value *(undefined4 *)(array + 8);\n}\n\n",
            "renaming": {
                "FUN_08004cb2": "find_value_by_key_08004cb2",
                "param_1": "key",
                "param_2": "array",
                "return": "value"
            },
            "calling": [
                "FUN_08004cb2",
                "FUN_08004cce"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cce": {
            "entrypoint": "0x08004cce",
            "current_name": "get_value_from_key_08004cce",
            "code": "\nundefined4 get_value_from_key_08004cce(int input_value)\n\n{\n  undefined4 found_value;\n  \n  if (input_value == -1) {\n    return 0xffffffff;\n  }\n  found_value = find_value_by_key_08004cb2();\n  return found_value;\n}\n\n",
            "renaming": {
                "FUN_08004cce": "get_value_from_key_08004cce",
                "param_1": "input_value",
                "uVar1": "found_value"
            },
            "calling": [
                "FUN_08004948",
                "FUN_08004f4c",
                "FUN_0800492c",
                "FUN_08004b3c"
            ],
            "called": [
                "FUN_08004cb2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ce2": {
            "entrypoint": "0x08004ce2",
            "current_name": "find_match_08004ce2",
            "code": "\nundefined4 find_match_08004ce2(int value,char *data)\n\n{\n  if (value == -1) {\n    return 0;\n  }\n  while( true ) {\n    if (*data == -1) {\n      return 0;\n    }\n    if (value == *data) break;\n    data = data + 0xc;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08004ce2": "find_match_08004ce2",
                "param_1": "value",
                "param_2": "data"
            },
            "calling": [
                "FUN_080057b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d06": {
            "entrypoint": "0x08004d06",
            "current_name": "compare_and_return_nonzero_param_08004d06",
            "code": "\nint compare_and_return_nonzero_param_08004d06(int input_1,int input_2)\n\n{\n  if (input_1 != input_2) {\n    if (input_1 == 0) {\n      return input_2;\n    }\n    if (input_2 == 0) {\n      return input_1;\n    }\n    input_1 = 0;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_08004d06": "compare_and_return_nonzero_param_08004d06",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d18": {
            "entrypoint": "0x08004d18",
            "current_name": "execute_callback_function_08004d18",
            "code": "\nvoid executeCallbackFunction_08004d18(void)\n\n{\n  if (DAT_20000260 != (code *)0x0) {\n    (*DAT_20000260)(DAT_20000278);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d18": "execute_callback_function_08004d18"
            },
            "calling": [
                "FUN_08003ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d40": {
            "entrypoint": "0x08004d40",
            "current_name": "run_infinite_loop_08004d40",
            "code": "\nvoid runInfiniteLoop_08004d40(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004d40": "run_infinite_loop_08004d40"
            },
            "calling": [
                "FUN_08004d40",
                "FUN_08001b48"
            ],
            "called": [
                "FUN_08004d40"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d44": {
            "entrypoint": "0x08004d44",
            "current_name": "initialize_memory_08004d44",
            "code": "\n\n\nvoid initializeMemory_08004d44(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d44": "initialize_memory_08004d44"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d90": {
            "entrypoint": "0x08004d90",
            "current_name": "update_flags_based_on_param_08004d90",
            "code": "\n\n\nvoid updateFlagsBasedOnParam_08004d90(int *param_1)\n\n{\n  if (*param_1 == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 & 0xfffff7ff;\n  }\n  if (*param_1 == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffe;\n  }\n  if (*param_1 == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffd;\n  }\n  if (*param_1 == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d90": "update_flags_based_on_param_08004d90"
            },
            "calling": [
                "FUN_08004b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df4": {
            "entrypoint": "0x08004df4",
            "current_name": "decrement_by_four_08004df4",
            "code": "\nint decrementByFour_08004df4(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08004df4": "decrement_by_four_08004df4",
                "param_1": "input"
            },
            "calling": [
                "FUN_08004e12",
                "FUN_08004df8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004df8": {
            "entrypoint": "0x08004df8",
            "current_name": "execute_if_condition_met_08004df8",
            "code": "\nvoid executeIfConditionMet_08004df8(int input)\n\n{\n  int result;\n  \n  result = calculateOffset();\n  if ((*(code **)(result + 0x4c) != (code *)0x0) && (*(char *)(input + 0x1c) == '\\x01')) {\n    (**(code **)(result + 0x4c))(result,0);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004df8": "execute_if_condition_met_08004df8",
                "param_1": "input",
                "iVar1": "result",
                "decrement_by_four_08004df4": "calculateOffset"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e12": {
            "entrypoint": "0x08004e12",
            "current_name": "execute_subfunction_08004e12",
            "code": "\nvoid executeSubfunction_08004e12(void)\n\n{\n  int decrementedValue;\n  \n  decrementedValue = decrement_by_four_08004df4();\n  if (*(code **)(decrementedValue + 0x48) != (code *)0x0) {\n    (**(code **)(decrementedValue + 0x48))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e12": "execute_subfunction_08004e12",
                "iVar1": "decrementedValue"
            },
            "calling": [
                "FUN_08003f18"
            ],
            "called": [
                "FUN_08004df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e20": {
            "entrypoint": "0x08004e20",
            "current_name": "check_and_process_conditions_08004e20",
            "code": "\nvoid checkAndProcessConditions_08004e20(void)\n\n{\n  if (DAT_2000027c != 0) {\n    processConditions();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e20": "check_and_process_conditions_08004e20",
                "process_conditions_08003f18": "processConditions"
            },
            "calling": [],
            "called": [
                "FUN_08003f18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e70": {
            "entrypoint": "0x08004e70",
            "current_name": "subtract_four_08004e70",
            "code": "\nint subtract_four_08004e70(int input)\n\n{\n  return input + -4;\n}\n\n",
            "renaming": {
                "FUN_08004e70": "subtract_four_08004e70",
                "param_1": "input"
            },
            "calling": [
                "FUN_08004ec4",
                "FUN_08004e74",
                "FUN_08004ef4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e74": {
            "entrypoint": "0x08004e74",
            "current_name": "process_function_08004e74",
            "code": "\nvoid process_function_08004e74(int input_param_1,int input_param_2,int input_param_3,undefined4 input_param_4)\n\n{\n  int temp_variable;\n  \n  temp_variable = subtract_four();\n  if (input_param_3 == *(int *)(input_param_1 + 0xc)) {\n    if (input_param_2 == 0) {\n      *(undefined *)(temp_variable + 0x88) = 0;\n      *(undefined *)(temp_variable + 0x5c) = 0;\n      if (*(code **)(temp_variable + 100) != (code *)0x0) {\n        (**(code **)(temp_variable + 100))();\n      }\n      process_param_08002af8(input_param_1,temp_variable + 0x68,*(undefined *)(temp_variable + 0x88),8);\n      return;\n    }\n    *(undefined *)(temp_variable + 0x5c) = 1;\n    check_and_initialize_variables_08002b84(input_param_1,temp_variable + 0x68,0x20,8,input_param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e74": "process_function_08004e74",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "iVar1": "temp_variable",
                "subtract_four_08004e70": "subtract_four"
            },
            "calling": [
                "FUN_08002cf2"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002b84",
                "FUN_08002af8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ec4": {
            "entrypoint": "0x08004ec4",
            "current_name": "execute_permissions_check_08004ec4",
            "code": "\nvoid executePermissionsCheck_08004ec4(undefined4 param)\n\n{\n  int result;\n  \n  result = performSubtraction();\n  if (((*(functionPointer **)(result + 0x60) != (functionPointer *)0x0) && (*(char *)(result + 0x5c) == '\\x01')) &&\n     (*(char *)(result + 0x2c) != ' ')) {\n    (**(functionPointer **)(result + 0x60))(result + 0x68);\n  }\n  setPermissions(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ec4": "execute_permissions_check_08004ec4",
                "param_1": "param",
                "iVar1": "result",
                "subtract_four_08004e70": "performSubtraction",
                "code": "functionPointer",
                "set_permissions_08002c10": "setPermissions"
            },
            "calling": [
                "FUN_0800316c",
                "FUN_08002d1c",
                "FUN_080032b4"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ef4": {
            "entrypoint": "0x08004ef4",
            "current_name": "check_and_set_permissions_08004ef4",
            "code": "\nvoid checkAndSetPermissions_08004ef4(undefined4 inputParam)\n\n{\n  int result;\n  \n  result = subtractFour();\n  if (*(char *)(result + 0x5d) == '\\0') {\n    setPermissions(inputParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ef4": "check_and_set_permissions_08004ef4",
                "param_1": "inputParam",
                "iVar1": "result",
                "subtract_four_08004e70": "subtractFour",
                "set_permissions_08002c10": "setPermissions"
            },
            "calling": [
                "FUN_0800316c"
            ],
            "called": [
                "FUN_08004e70",
                "FUN_08002c10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f4c": {
            "entrypoint": "0x08004f4c",
            "current_name": "configure_uart_pins_08004f4c",
            "code": "\n\n\nvoid configureUARTPins_08004f4c(int *pinConfig)\n\n{\n  int uartPinValue1;\n  int uartPinValue2;\n  undefined4 memoryLocation1;\n  uint valueFromKey;\n  uint bitMask;\n  uint bitMaskValue;\n  uint bitMaskShift;\n  undefined4 dataSize;\n  \n  if (pinConfig != (int *)0x0) {\n    uartPinValue1 = check_param_and_find_value_08004c78((int)*(char *)(pinConfig + 0x16),&DAT_0800764c);\n    uartPinValue2 = check_param_and_find_value_08004c78((int)*(char *)((int)pinConfig + 0x59),&DAT_08007604);\n    if ((uartPinValue2 == 0) || (uartPinValue1 == 0)) {\n      processError(\"ERROR: at least one UART pin has no peripheral\\n\",uartPinValue2);\n    }\n    else {\n      uartPinValue1 = compare_and_return_nonzero_param_08004d06(uartPinValue1);\n      *pinConfig = uartPinValue1;\n      if (uartPinValue1 == 0) {\n        processError(\"ERROR: U(S)ART pins mismatch\\n\");\n      }\n      else {\n        if (uartPinValue1 == 0x40013800) {\n          _DAT_4002100c = _DAT_4002100c & 0xffffbfff;\n          _DAT_40021018 = _DAT_40021018 | 0x4000;\n          *(undefined *)(pinConfig + 0x11) = 0;\n          *(undefined *)((int)pinConfig + 0x5a) = 0x25;\n        }\n        else if (uartPinValue1 == 0x40004400) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffdffff;\n          _DAT_4002101c = _DAT_4002101c | 0x20000;\n          *(undefined *)(pinConfig + 0x11) = 1;\n          *(undefined *)((int)pinConfig + 0x5a) = 0x26;\n        }\n        else if (uartPinValue1 == 0x40004800) {\n          _DAT_40021010 = _DAT_40021010 & 0xfffbffff;\n          _DAT_4002101c = _DAT_4002101c | 0x40000;\n          *(undefined *)(pinConfig + 0x11) = 2;\n          *(undefined *)((int)pinConfig + 0x5a) = 0x27;\n        }\n        memoryLocation1 = set_memory_location_08004884((uint)((int)*(char *)((int)pinConfig + 0x59) << 0x18) >> 0x1c);\n        valueFromKey = get_value_from_key_08004cce((int)*(char *)((int)pinConfig + 0x59),&DAT_08007604);\n        bitMask = 1 << (*(byte *)((int)pinConfig + 0x59) & 0xf) & 0xffff;\n        bitMaskValue = (valueFromKey >> 3 & 1) << 4 | valueFromKey & 7;\n        bitMaskShift = (valueFromKey << 0x1a) >> 0x1e;\n        _DAT_40021018 = _DAT_40021018 | 1;\n        switch((valueFromKey << 0x11) >> 0x19) {\n        case 1:\n          _DAT_40010004 = _DAT_40010004 | 0x7000001;\n          break;\n        case 2:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffe | 0x7000000;\n          break;\n        case 3:\n          _DAT_40010004 = _DAT_40010004 | 0x7000002;\n          break;\n        case 4:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffd | 0x7000000;\n          break;\n        case 5:\n          _DAT_40010004 = _DAT_40010004 | 0x7000004;\n          break;\n        case 6:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffffb | 0x7000000;\n          break;\n        case 7:\n          _DAT_40010004 = _DAT_40010004 | 0x7000008;\n          break;\n        case 8:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffff7 | 0x7000000;\n          break;\n        case 9:\n          _DAT_40010004 = _DAT_40010004 | 0x7000030;\n          break;\n        case 10:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000010;\n          break;\n        case 0xb:\n          _DAT_40010004 = _DAT_40010004 & 0xffffffcf | 0x7000000;\n          break;\n        case 0xc:\n          _DAT_40010004 = _DAT_40010004 | 0x70000c0;\n          break;\n        case 0xd:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000040;\n          break;\n        case 0xe:\n          _DAT_40010004 = _DAT_40010004 & 0xffffff3f | 0x7000000;\n          break;\n        case 0xf:\n          _DAT_40010004 = _DAT_40010004 | 0x7000300;\n          break;\n        case 0x10:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000200;\n          break;\n        case 0x11:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000100;\n          break;\n        case 0x12:\n          _DAT_40010004 = _DAT_40010004 & 0xfffffcff | 0x7000000;\n          break;\n        case 0x13:\n          _DAT_40010004 = _DAT_40010004 | 0x7000c00;\n          break;\n        case 0x14:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000800;\n          break;\n        case 0x15:\n          _DAT_40010004 = _DAT_40010004 & 0xfffff3ff | 0x7000000;\n          break;\n        case 0x16:\n          _DAT_40010004 = _DAT_40010004 | 0x7001000;\n          break;\n        case 0x17:\n          _DAT_40010004 = _DAT_40010004 & 0xffffefff | 0x7000000;\n          break;\n        case 0x1b:\n          _DAT_40010004 = _DAT_40010004 | 0x7008000;\n          break;\n        case 0x1c:\n          _DAT_40010004 = _DAT_40010004 & 0xffff7fff | 0x7000000;\n          break;\n        case 0x21:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff;\n          break;\n        case 0x22:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x1000000;\n          break;\n        case 0x23:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x2000000;\n          break;\n        case 0x24:\n          _DAT_40010004 = _DAT_40010004 & 0xf8ffffff | 0x4000000;\n        }\n        dataSize = 3;\n        processParams(memoryLocation1,&bitMask);\n        memoryLocation1 = set_memory_location_08004884((uint)((int)*(char *)(pinConfig + 0x16) << 0x18) >> 0x1c);\n        valueFromKey = get_value_from_key_08004cce((int)*(char *)(pinConfig + 0x16),&DAT_0800764c);\n        bitMask = 1 << (*(byte *)(pinConfig + 0x16) & 0xf) & 0xffff;\n        bitMaskValue = (valueFromKey >> 3 & 1) << 4 | valueFromKey & 7;\n        bitMaskShift = (valueFromKey << 0x1a) >> 0x1e;\n        processParams(memoryLocation1,&bitMask);\n        (&DAT_2000032c)[*(byte *)(pinConfig + 0x11)] = pinConfig + 1;\n        pinConfig[1] = *pinConfig;\n        pinConfig[2] = pinConfig[0x12];\n        pinConfig[3] = pinConfig[0x13];\n        pinConfig[4] = pinConfig[0x14];\n        pinConfig[5] = pinConfig[0x15];\n        pinConfig[6] = 0xc;\n        pinConfig[7] = 0;\n        pinConfig[8] = 0;\n        initializeData(pinConfig + 1);\n      }\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f4c": "configure_uart_pins_08004f4c",
                "param_1": "pinConfig",
                "iVar1": "uartPinValue1",
                "iVar2": "uartPinValue2",
                "uVar3": "memoryLocation1",
                "uVar4": "valueFromKey",
                "local_20": "bitMask",
                "local_1c": "bitMaskValue",
                "local_18": "bitMaskShift",
                "local_14": "dataSize",
                "initialize_data_0800441a": "initializeData",
                "process_params_08002624": "processParams",
                "process_binary_080068f0": "processError"
            },
            "calling": [
                "FUN_08005a68",
                "FUN_08005384"
            ],
            "called": [
                "FUN_080068f0",
                "FUN_08004c78",
                "FUN_0800441a",
                "FUN_08004d06",
                "FUN_08004cce",
                "FUN_08002624",
                "FUN_08004884"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005384": {
            "entrypoint": "0x08005384",
            "current_name": "configure_uart_pins_08005384",
            "code": "\nvoid configure_uart_pins_08005384(void)\n\n{\n  int result;\n  undefined4 value;\n  \n  result = check_value(2,&DAT_0800764c);\n  if (result != 0) {\n    value = check_value(2,&DAT_0800764c);\n    DAT_200000e1 = get_value(value,&DAT_08007604);\n    DAT_200000e0 = 2;\n    DAT_200000d0 = 0x2580;\n    DAT_200000dc = 0;\n    DAT_200000d4 = 0;\n    DAT_200000d8 = 0;\n    configure_pins(&DAT_20000088);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005384": "configure_uart_pins_08005384",
                "iVar1": "result",
                "uVar2": "value",
                "check_param_and_find_value_08004c78": "check_value",
                "check_param_and_find_value_08004ca2": "get_value",
                "configure_uart_pins_08004f4c": "configure_pins"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08004ca2",
                "FUN_08004f4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "find_valid_data_080053d4",
            "code": "\nuint find_valid_data_080053d4(undefined4 input_data,uint value_to_check)\n\n{\n  int global_variable;\n  int param_value;\n  uint index;\n  \n  global_variable = get_data_from_global_variable_08001cc4();\n  param_value = check_param_and_find_value_08004c78(2,&DAT_0800764c);\n  if (param_value == 0) {\n    return 0;\n  }\n  for (index = 0;\n      (index < 5 &&\n      (((&DAT_2000032c)[index] == 0 ||\n       (param_value = check_param_and_find_value_08004c78(2,&DAT_0800764c), *(int *)(&DAT_2000032c)[index] != param_value))));\n      index = index + 1 & 0xff) {\n  }\n  if (4 < index) {\n    if ((4 < DAT_200000cc) && (configure_uart_pins_08005384(), 4 < DAT_200000cc)) {\n      return 0;\n    }\n    index = (uint)DAT_200000cc;\n  }\n  do {\n    param_value = process_data_08004478((&DAT_2000032c)[index],input_data,value_to_check & 0xffff,1000);\n    if (param_value == 0) {\n      return value_to_check;\n    }\n    param_value = get_data_from_global_variable_08001cc4();\n  } while ((uint)(param_value - global_variable) < 1000);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "find_valid_data_080053d4",
                "param_1": "input_data",
                "param_2": "value_to_check",
                "iVar1": "global_variable",
                "iVar2": "param_value",
                "uVar3": "index"
            },
            "calling": [
                "FUN_08005730"
            ],
            "called": [
                "FUN_08004c78",
                "FUN_08005384",
                "FUN_08004478",
                "FUN_08001cc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800548c": {
            "entrypoint": "0x0800548c",
            "current_name": "is_flag_set_0800548c",
            "code": "\nbool isFlagSet_0800548c(int flagValue)\n\n{\n  uint combinedValue;\n  \n  combinedValue = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(flagValue + 0x44)]);\n  return (combinedValue & 0x22) == 0x22;\n}\n\n",
            "renaming": {
                "FUN_0800548c": "is_flag_set_0800548c",
                "param_1": "flagValue",
                "uVar1": "combinedValue"
            },
            "calling": [
                "FUN_08005510",
                "FUN_080054d4"
            ],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054b0": {
            "entrypoint": "0x080054b0",
            "current_name": "is_combination_valid_080054b0",
            "code": "\nbool is_combination_valid_080054b0(int input_value)\n\n{\n  uint combined_bytes;\n  \n  combined_bytes = combine_bytes_080047e8((&DAT_2000032c)[*(byte *)(input_value + 0x44)]);\n  return (combined_bytes & 0x21) == 0x21;\n}\n\n",
            "renaming": {
                "FUN_080054b0": "is_combination_valid_080054b0",
                "param_1": "input_value",
                "uVar1": "combined_bytes"
            },
            "calling": [],
            "called": [
                "FUN_080047e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080054d4": {
            "entrypoint": "0x080054d4",
            "current_name": "validate_and_extract_data_080054d4",
            "code": "\nundefined4 validate_and_extract_data_080054d4(int input_data,undefined *output_data,undefined4 flag_value,undefined4 additional_info)\n\n{\n  int flag_status;\n  \n  if (input_data == 0) {\n    return 0xffffffff;\n  }\n  flag_status = is_flag_set_0800548c();\n  if (flag_status == 0) {\n    *output_data = *(undefined *)(input_data + 0x45);\n    validate_input_080045a2((&DAT_2000032c)[*(byte *)(input_data + 0x44)],input_data + 0x45,1,&DAT_2000032c,additional_info);\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080054d4": "validate_and_extract_data_080054d4",
                "param_1": "input_data",
                "param_2": "output_data",
                "param_3": "flag_value",
                "param_4": "additional_info",
                "iVar1": "flag_status"
            },
            "calling": [
                "FUN_0800598a"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005510": {
            "entrypoint": "0x08005510",
            "current_name": "update_data_08005510",
            "code": "\nvoid updateData_08005510(int inputPtr,undefined4 value,undefined4 unused1,undefined4 unused2)\n\n{\n  int isFlagSet;\n  uint byteIndex;\n  \n  if (inputPtr != 0) {\n    isFlagSet = is_flag_set_0800548c();\n    if (isFlagSet == 0) {\n      byteIndex = (uint)*(byte *)(inputPtr + 0x44);\n      *(undefined4 *)(&DAT_200002dc + byteIndex * 4) = value;\n      *(int *)(&DAT_200002f0 + byteIndex * 4) = inputPtr;\n      update_data_08002494((int)*(char *)(inputPtr + 0x5a),0,1,byteIndex,unused2);\n      set_bit_in_array_080024f8((int)*(char *)(inputPtr + 0x5a));\n      validate_input_080045a2((&DAT_2000032c)[*(byte *)(inputPtr + 0x44)],inputPtr + 0x45,1);\n    }\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005510": "update_data_08005510",
                "param_1": "inputPtr",
                "param_2": "value",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "isFlagSet",
                "uVar2": "byteIndex"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_080045a2",
                "FUN_080024f8",
                "FUN_08002494",
                "FUN_0800548c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005568": {
            "entrypoint": "0x08005568",
            "current_name": "update_data_08005568",
            "code": "\nvoid updateData_08005568(int dataPtr,undefined4 newValue)\n\n{\n  byte byteValue;\n  \n  if (dataPtr != 0) {\n    byteValue = *(byte *)(dataPtr + 0x44);\n    *(undefined4 *)(&DAT_20000304 + (uint)byteValue * 4) = newValue;\n    *(int *)(&DAT_20000318 + (uint)byteValue * 4) = dataPtr;\n    update_data_08002494((int)*(char *)(dataPtr + 0x5a),0,2);\n    set_bit_in_array_080024f8((int)*(char *)(dataPtr + 0x5a));\n    check_and_update_params_0800455a((&DAT_2000032c)[*(byte *)(dataPtr + 0x44)],\n                 *(int *)(dataPtr + 100) + (uint)*(ushort *)(dataPtr + 0x6a),1);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005568": "update_data_08005568",
                "param_1": "dataPtr",
                "param_2": "newValue",
                "bVar1": "byteValue"
            },
            "calling": [],
            "called": [
                "FUN_0800455a",
                "FUN_080024f8",
                "FUN_08002494"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055bc": {
            "entrypoint": "0x080055bc",
            "current_name": "find_value_or_default_080055bc",
            "code": "\nuint find_value_or_default_080055bc(int value_to_find)\n\n{\n  uint result;\n  \n  if (value_to_find == 0) {\n    result = 5;\n  }\n  else {\n    result = 0;\n    while( true ) {\n      if (4 < result) {\n        return result;\n      }\n      if (value_to_find == (&DAT_2000032c)[result]) break;\n      result = result + 1 & 0xff;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080055bc": "find_value_or_default_080055bc",
                "param_1": "value_to_find",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08005604",
                "FUN_080055e0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080055e0": {
            "entrypoint": "0x080055e0",
            "current_name": "execute_selected_function_080055e0",
            "code": "\nvoid executeSelectedFunction_080055e0(void)\n\n{\n  uint selectedValue;\n  \n  selectedValue = findSelectedValueOrDefault();\n  if (selectedValue < 5) {\n    (**(code **)(&DAT_200002dc + selectedValue * 4))(*(undefined4 *)(&DAT_200002f0 + selectedValue * 4));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080055e0": "execute_selected_function_080055e0",
                "uVar1": "selectedValue",
                "find_value_or_default_080055bc": "findSelectedValueOrDefault"
            },
            "calling": [
                "FUN_08004618"
            ],
            "called": [
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005604": {
            "entrypoint": "0x08005604",
            "current_name": "process_data_08005604",
            "code": "\nvoid processData_08005604(void)\n\n{\n  uint valueIndex;\n  int result;\n  int dataPtr;\n  \n  valueIndex = findValueOrDefault();\n  dataPtr = *(int *)(&DAT_20000318 + valueIndex * 4);\n  if ((valueIndex < 5) && (result = (**(code **)(&DAT_20000304 + valueIndex * 4))(dataPtr), result != -1)) {\n    checkAndUpdateParams((&DAT_2000032c)[*(byte *)(dataPtr + 0x44)],\n                 *(int *)(dataPtr + 100) + (uint)*(ushort *)(dataPtr + 0x6a),1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005604": "process_data_08005604",
                "uVar1": "valueIndex",
                "iVar2": "result",
                "iVar3": "dataPtr",
                "find_value_or_default_080055bc": "findValueOrDefault",
                "check_and_update_params_0800455a": "checkAndUpdateParams"
            },
            "calling": [
                "FUN_080045fe"
            ],
            "called": [
                "FUN_0800455a",
                "FUN_080055bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005650": {
            "entrypoint": "0x08005650",
            "current_name": "FUNC_08005650",
            "code": "\nvoid FUNC_08005650(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005650": "FUNC_08005650"
            },
            "calling": [
                "FUN_080046b8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080056d8": {
            "entrypoint": "0x080056d8",
            "current_name": "allocate_memory_080056d8",
            "code": "\nundefined * allocateMemory_080056d8(int size)\n\n{\n  undefined *allocatedMemory;\n  \n  if (DAT_20000340 == (undefined *)0x0) {\n    DAT_20000340 = &DAT_200006a8;\n  }\n  allocatedMemory = DAT_20000340;\n  if (DAT_20000340 + size <= &endOfStackMemory) {\n    DAT_20000340 = DAT_20000340 + size;\n    return allocatedMemory;\n  }\n  DAT_200006a4 = 0xc;\n  return (undefined *)0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080056d8": "allocate_memory_080056d8",
                "param_1": "size",
                "puVar1": "allocatedMemory",
                "&stack0x00000000": "&endOfStackMemory"
            },
            "calling": [
                "FUN_08006920"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "get_error_code_08005714",
            "code": "\nundefined4 get_error_code_08005714(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005714": "get_error_code_08005714"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800571a": {
            "entrypoint": "0x0800571a",
            "current_name": "set_memory_protection_0800571a",
            "code": "\nundefined4 setMemoryProtection_0800571a(undefined4 address,int memoryOffset)\n\n{\n  *(undefined4 *)(memoryOffset + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800571a": "set_memory_protection_0800571a",
                "param_1": "address",
                "param_2": "memoryOffset"
            },
            "calling": [
                "FUN_08007004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005724": {
            "entrypoint": "0x08005724",
            "current_name": "get_return_value_08005724",
            "code": "\nReturnValue getReturnValue_08005724(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005724": "get_return_value_08005724",
                "undefined4": "ReturnValue"
            },
            "calling": [
                "FUN_08007028"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005728": {
            "entrypoint": "0x08005728",
            "current_name": "initialize_system_08005728",
            "code": "\nundefined4 initializeSystem_08005728(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005728": "initialize_system_08005728"
            },
            "calling": [
                "FUN_08007048"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800572c": {
            "entrypoint": "0x0800572c",
            "current_name": "initialize_application_0800572c",
            "code": "\nvoid initializeApplication_0800572c(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800572c": "initialize_application_0800572c",
                "undefined4": "void"
            },
            "calling": [
                "FUN_0800706c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005730": {
            "entrypoint": "0x08005730",
            "current_name": "find_and_process_data_08005730",
            "code": "\nvoid find_and_process_data_08005730(undefined4 param_1,undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3)\n\n{\n  find_valid_data_080053d4(input_param_1,input_param_2,input_param_2,input_param_3,input_param_3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005730": "find_and_process_data_08005730",
                "param_2": "input_param_1",
                "param_3": "input_param_2",
                "param_4": "input_param_3"
            },
            "calling": [
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_080053d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800573c": {
            "entrypoint": "0x0800573c",
            "current_name": "infinite_loop_0800573c",
            "code": "\nvoid infiniteLoop_0800573c(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800573c": "infinite_loop_0800573c"
            },
            "calling": [
                "FUN_08006ac0",
                "FUN_0800573c"
            ],
            "called": [
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005740": {
            "entrypoint": "0x08005740",
            "current_name": "initialize_data_08005740",
            "code": "\nundefined4 initializeData_08005740(void)\n\n{\n  DAT_200006a4 = 0x16;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08005740": "initialize_data_08005740"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005750": {
            "entrypoint": "0x08005750",
            "current_name": "initialize_08005750",
            "code": "\nundefined4 initialize_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08005750": "initialize_08005750"
            },
            "calling": [
                "thunk_FUN_08005750"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005754": {
            "entrypoint": "0x08005754",
            "current_name": "get_parameter_value_08005754",
            "code": "\nuint getParameterValue_08005754(uint inputValue)\n\n{\n  bool isLessThanThreshold;\n  char characterValue;\n  uint parameterValue;\n  \n  if (inputValue < 0xe) {\n    if (inputValue + 0x2e < 0x3c) {\n      isLessThanThreshold = true;\n    }\n    else {\n      isLessThanThreshold = false;\n    }\n  }\n  else {\n    isLessThanThreshold = inputValue < 0x3c;\n  }\n  if (isLessThanThreshold) {\n    if (inputValue < 0xe) {\n      inputValue = inputValue + 0x2e;\n    }\n    characterValue = (&DAT_080076f0)[inputValue];\n  }\n  else {\n    characterValue = -1;\n  }\n  if (characterValue == -1) {\n    parameterValue = 0;\n  }\n  else {\n    parameterValue = find_parameter_value_08004a4c();\n    if (DAT_200000f4 != 0xc) {\n      if (DAT_200000f4 < 0xc) {\n        return parameterValue >> (0xc - DAT_200000f4 & 0xff);\n      }\n      return parameterValue << (DAT_200000f4 - 0xc & 0xff);\n    }\n  }\n  return parameterValue;\n}\n\n",
            "renaming": {
                "FUN_08005754": "get_parameter_value_08005754",
                "param_1": "inputValue",
                "bVar1": "isLessThanThreshold",
                "cVar2": "characterValue",
                "uVar3": "parameterValue"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08004a4c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057b4": {
            "entrypoint": "0x080057b4",
            "current_name": "initialize_and_process_data_080057b4",
            "code": "\nvoid initializeAndProcessData_080057b4(uint index,undefined4 mode,undefined4 flag,undefined *data)\n\n{\n  int result;\n  undefined *ptr;\n  int value;\n  \n  if (index < 0x3c) {\n    value = (int)(char)(&DAT_080076f0)[index];\n    ptr = &DAT_080076f0;\n  }\n  else {\n    value = -1;\n    ptr = data;\n  }\n  if (value != -1) {\n    result = checkBit(value,&DAT_20000344,flag,ptr,data);\n    if (result != 0) {\n      result = findMatch(value,&DAT_080074b4);\n      if (result != 0) {\n        processParameter(value);\n      }\n      clearBitInArray(value,&DAT_20000344);\n    }\n    switch(mode) {\n    case 0:\n      initializeMemory(value,0);\n      break;\n    case 1:\n      initializeMemory(value,1,0);\n      break;\n    case 2:\n      initializeMemory(value,0,1);\n      break;\n    case 3:\n      initializeMemory(value,0,2);\n    }\n    setBitInArray(value,&DAT_20000358);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080057b4": "initialize_and_process_data_080057b4",
                "param_1": "index",
                "param_2": "mode",
                "param_3": "flag",
                "param_4": "data",
                "iVar1": "result",
                "puVar2": "ptr",
                "iVar3": "value",
                "initialize_memory_08004bb0": "initializeMemory",
                "check_bit_080047f4": "checkBit",
                "find_match_08004ce2": "findMatch",
                "process_param_08004b3c": "processParameter",
                "clear_bit_in_array_08004828": "clearBitInArray",
                "set_bit_in_array_0800480a": "setBitInArray"
            },
            "calling": [
                "FUN_0800157c",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004828",
                "FUN_080047f4",
                "FUN_08004ce2",
                "FUN_08004bb0",
                "FUN_0800480a",
                "FUN_08004b3c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005848": {
            "entrypoint": "0x08005848",
            "current_name": "process_parameter_08005848",
            "code": "\nvoid processParameter_08005848(uint input,undefined4 value1,undefined4 value2,undefined *data)\n\n{\n  int result;\n  undefined4 address;\n  undefined *pointer;\n  uint index;\n  \n  if (input < 0x3c) {\n    index = (uint)(char)(&DAT_080076f0)[input];\n    pointer = &DAT_080076f0;\n  }\n  else {\n    index = 0xffffffff;\n    pointer = data;\n  }\n  if ((index != 0xffffffff) &&\n     (result = check_bit_080047f4(index,&DAT_20000358,value2,pointer,data), result != 0)) {\n    address = get_memory_address_08004848((index << 0x18) >> 0x1c);\n    set_param_or_return_default_08004c30(address,1 << (index & 0xf) & 0xffff,value1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005848": "process_parameter_08005848",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "data",
                "iVar1": "result",
                "uVar2": "address",
                "puVar3": "pointer",
                "uVar4": "index"
            },
            "calling": [
                "FUN_08001310",
                "FUN_0800157c",
                "FUN_080012a2",
                "FUN_080012c0",
                "FUN_08000cd0",
                "FUN_080015b2",
                "FUN_080012e8",
                "FUN_080013a4",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_080047f4",
                "FUN_08004c30",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005890": {
            "entrypoint": "0x08005890",
            "current_name": "check_and_get_bit_08005890",
            "code": "\nchar check_and_get_bit_08005890(uint input_param)\n\n{\n  char is_bit_set;\n  int bit_check_result;\n  undefined4 memory_address;\n  uint index;\n  \n  if (input_param < 0x3c) {\n    index = (uint)(char)(&DAT_080076f0)[input_param];\n  }\n  else {\n    index = 0xffffffff;\n  }\n  if (index == 0xffffffff) {\n    is_bit_set = '\\0';\n  }\n  else {\n    bit_check_result = check_bit(index,&DAT_20000358);\n    if (bit_check_result == 0) {\n      is_bit_set = '\\0';\n    }\n    else {\n      memory_address = get_memory_address((index << 0x18) >> 0x1c);\n      is_bit_set = check_bit_function(memory_address,1 << (index & 0xf) & 0xffff);\n    }\n  }\n  if (is_bit_set != '\\0') {\n    is_bit_set = '\\x01';\n  }\n  return is_bit_set;\n}\n\n",
            "renaming": {
                "FUN_08005890": "check_and_get_bit_08005890",
                "param_1": "input_param",
                "cVar1": "is_bit_set",
                "iVar2": "bit_check_result",
                "uVar3": "memory_address",
                "uVar4": "index",
                "check_bit_080047f4": "check_bit",
                "get_memory_address_08004848": "get_memory_address",
                "check_bit_function_08004c48": "check_bit_function"
            },
            "calling": [
                "FUN_08000cd0",
                "FUN_080015b2"
            ],
            "called": [
                "FUN_08004c48",
                "FUN_080047f4",
                "FUN_08004848"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e0": {
            "entrypoint": "0x080058e0",
            "current_name": "initialize_data_080058e0",
            "code": "\nvoid initializeData_080058e0(void)\n\n{\n  initializeData_080058e0Helper();\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e0": "initialize_data_080058e0",
                "initialize_data_08004b94": "initializeDataHelper"
            },
            "calling": [
                "FUN_080016b4",
                "FUN_08001ab0",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08004b94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058e8": {
            "entrypoint": "0x080058e8",
            "current_name": "FUNC_080058e8",
            "code": "\nvoid FUNC_080058e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080058e8": "FUNC_080058e8"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800591e": {
            "entrypoint": "0x0800591e",
            "current_name": "calculate_checksum_0800591e",
            "code": "\nushort calculateChecksum_0800591e(int dataAddress)\n\n{\n  return (*(short *)(dataAddress + 0x134) + 0x40) - *(short *)(dataAddress + 0x136) & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_0800591e": "calculate_checksum_0800591e",
                "param_1": "dataAddress"
            },
            "calling": [
                "FUN_08005a18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800598a": {
            "entrypoint": "0x0800598a",
            "current_name": "validate_and_extract_data_0800598a",
            "code": "\nvoid validateAndExtractData_0800598a(int inputParameter)\n\n{\n  int validationResult;\n  ushort updatedValue;\n  undefined extractedData;\n  \n  validationResult = validate_and_extract_data_080054d4(inputParameter,&extractedData);\n  if ((validationResult == 0) &&\n     (updatedValue = *(short *)(inputParameter + 0x60) + 1U & 0x3f, updatedValue != *(ushort *)(inputParameter + 0x62))) {\n    *(undefined *)(*(int *)(inputParameter + 0x5c) + (uint)*(ushort *)(inputParameter + 0x60)) = extractedData;\n    *(ushort *)(inputParameter + 0x60) = updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800598a": "validate_and_extract_data_0800598a",
                "param_1": "inputParameter",
                "iVar1": "validationResult",
                "uVar2": "updatedValue",
                "local_9": "extractedData"
            },
            "calling": [],
            "called": [
                "FUN_080054d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a18": {
            "entrypoint": "0x08005a18",
            "current_name": "FUNC_08005a18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005a1e) */\n/* WARNING: Removing unreachable block (ram,0x08005a30) */\n/* WARNING: Removing unreachable block (ram,0x08005a26) */\n/* WARNING: Removing unreachable block (ram,0x08005a38) */\n\nvoid FUNC_08005a18(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a18": "FUNC_08005a18"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [
                "FUN_0800591e"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005a44": {
            "entrypoint": "0x08005a44",
            "current_name": "initialize_data_08005a44",
            "code": "\nvoid initializeData_08005a44(int baseAddress)\n\n{\n  *(int *)(baseAddress + 0x130) = baseAddress + 0x11;\n  *(undefined2 *)(baseAddress + 0x134) = 0;\n  *(undefined2 *)(baseAddress + 0x136) = 0;\n  *(int *)(baseAddress + 0x138) = baseAddress + 0x51;\n  *(undefined2 *)(baseAddress + 0x13c) = 0;\n  *(undefined2 *)(baseAddress + 0x13e) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a44": "initialize_data_08005a44",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005a68": {
            "entrypoint": "0x08005a68",
            "current_name": "initialize_serial_08005a68",
            "code": "\nvoid initializeSerial_08005a68(int serialPort,undefined4 baudRate,byte config)\n\n{\n  uint extraOutput;\n  char *errorMessage;\n  byte configMask;\n  int configValue;\n  byte *dataPtr;\n  char unaffectedR4;\n  int unaffectedR6;\n  code *jumpTableFunc;\n  \n  *(undefined4 *)(serialPort + 0x11c) = baudRate;\n  *(byte *)(serialPort + 0x140) = config;\n  configMask = config & 7;\n  if (configMask == 4) {\n    configValue = 7;\n  }\n  else if (configMask == 6) {\n    configValue = 8;\n  }\n  else if (configMask == 2) {\n    configValue = 6;\n  }\n  else {\n    configValue = 0;\n  }\n  if ((config & 0x30) == 0x30) {\n    *(undefined4 *)(serialPort + 0x128) = 0x600;\n    configValue = configValue + 1;\n  }\n  else if ((config & 0x20) == 0) {\n    *(undefined4 *)(serialPort + 0x128) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x128) = 0x400;\n    configValue = configValue + 1;\n  }\n  if ((config & 8) == 0) {\n    *(undefined4 *)(serialPort + 0x124) = 0;\n  }\n  else {\n    *(undefined4 *)(serialPort + 0x124) = 0x2000;\n  }\n  if (configValue == 8) {\n    *(undefined4 *)(serialPort + 0x120) = 0;\n  }\n  else if (configValue == 9) {\n    *(undefined4 *)(serialPort + 0x120) = 0x1000;\n  }\n  else {\n    configValue = 0;\n  }\n  if (configValue != 0) {\n    configure_uart_pins_08004f4c(serialPort + 0xd4);\n    update_data_08005510(serialPort + 0xd4,0x800598b);\n    return;\n  }\n  errorMessage = \"void HardwareSerial::begin(long unsigned int, byte)\";\n  jumpTableFunc = (code *)0x8005b12;\n  print_assertion_failed_message_0800611c(\"/home/bo/.arduino15/packages/STM32/hardware/stm32/1.3.0/cores/arduino/HardwareSerial.cpp\"\n               ,299,\"void HardwareSerial::begin(long unsigned int, byte)\",\"databits!=0\");\n  dataPtr = *(byte **)(extraOutput + unaffectedR6);\n  errorMessage[0x1e] = unaffectedR4;\n  *(undefined *)(*dataPtr + 0x1e) = 0;\n  if (extraOutput < 0x3c) {\n    uRam0000012d = (&DAT_080076f0)[extraOutput];\n  }\n  else {\n    uRam0000012d = 0xff;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTableFunc)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005a68": "initialize_serial_08005a68",
                "param_1": "serialPort",
                "param_2": "baudRate",
                "param_3": "config",
                "extraout_r1": "extraOutput",
                "pcVar1": "errorMessage",
                "bVar2": "configMask",
                "iVar3": "configValue",
                "pbVar4": "dataPtr",
                "unaff_r4": "unaffectedR4",
                "unaff_r6": "unaffectedR6",
                "UNRECOVERED_JUMPTABLE": "jumpTableFunc"
            },
            "calling": [
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08005510",
                "FUN_08004f4c",
                "FUN_0800611c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b24": {
            "entrypoint": "0x08005b24",
            "current_name": "set_default_value_08005b24",
            "code": "\nvoid setDefaultValue_08005b24(int baseAddress,uint offset)\n\n{\n  undefined defaultValue;\n  code *functionTable;\n  \n  if (offset < 0x3c) {\n    defaultValue = (&DAT_080076f0)[offset];\n  }\n  else {\n    defaultValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 0x12d) = defaultValue;\n                    /* WARNING: Could not recover jumptable at 0x08005b30. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*functionTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b24": "set_default_value_08005b24",
                "param_1": "baseAddress",
                "param_2": "offset",
                "uVar1": "defaultValue",
                "UNRECOVERED_JUMPTABLE": "functionTable"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b3c": {
            "entrypoint": "0x08005b3c",
            "current_name": "apply_threshold_08005b3c",
            "code": "\nvoid applyThreshold_08005b3c(int baseAddress,uint threshold)\n\n{\n  undefined selectedValue;\n  \n  if (threshold < 0x3c) {\n    selectedValue = (&DAT_080076f0)[threshold];\n  }\n  else {\n    selectedValue = 0xff;\n  }\n  *(undefined *)(baseAddress + 300) = selectedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005b3c": "apply_threshold_08005b3c",
                "param_1": "baseAddress",
                "param_2": "threshold",
                "uVar1": "selectedValue"
            },
            "calling": [
                "FUN_08005b54"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005b54": {
            "entrypoint": "0x08005b54",
            "current_name": "initialize_data_and_set_thresholds_08005b54",
            "code": "\nundefined4 *\ninitializeDataAndSetThresholds_08005b54(undefined4 *outputParams,undefined4 inputParam,undefined4 initialValue,undefined4 additionalParam)\n\n{\n  undefined value;\n  \n  outputParams[1] = 0;\n  outputParams[2] = 1000;\n  *outputParams = &PTR_LAB_080059c8_1_08007804;\n  if (outputParams == (undefined4 *)&DAT_2000036c) {\n    set_default_value_08005b24(&DAT_2000036c,0,initialValue,&DAT_2000036c,additionalParam);\n    apply_threshold_08005b3c(&DAT_2000036c,1);\n  }\n  else {\n    value = check_param_and_find_value_08004ca2(inputParam,&DAT_08007604);\n    *(undefined *)((int)outputParams + 0x12d) = value;\n    value = check_param_and_find_value_08004ca2(inputParam,&DAT_0800764c);\n    *(undefined *)(outputParams + 0x4b) = value;\n  }\n  initialize_data_08005a44(outputParams);\n  return outputParams;\n}\n\n",
            "renaming": {
                "FUN_08005b54": "initialize_data_and_set_thresholds_08005b54",
                "param_1": "outputParams",
                "param_2": "inputParam",
                "param_3": "initialValue",
                "param_4": "additionalParam",
                "uVar1": "value"
            },
            "calling": [
                "FUN_08005bb0"
            ],
            "called": [
                "FUN_08005a44",
                "FUN_08004ca2",
                "FUN_08005b3c",
                "FUN_08005b24"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bb0": {
            "entrypoint": "0x08005bb0",
            "current_name": "initialize_data_if_param1_is_1_08005bb0",
            "code": "\nvoid initialize_data_if_param1_is_1_08005bb0(int is_param1,int param2_val,undefined4 param3_val,undefined4 param4_val)\n\n{\n  if (is_param1 != 1) {\n    return;\n  }\n  if (param2_val == 0xffff) {\n    initialize_data_and_thresholds(&DAT_2000036c,0x40004400,param3_val,0xffff,param4_val);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005bb0": "initialize_data_if_param1_is_1_08005bb0",
                "param_1": "is_param1",
                "param_2": "param2_val",
                "param_3": "param3_val",
                "param_4": "param4_val",
                "initialize_data_and_set_thresholds_08005b54": "initialize_data_and_thresholds"
            },
            "calling": [],
            "called": [
                "FUN_08005b54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c1c": {
            "entrypoint": "0x08005c1c",
            "current_name": "set_data_fields_08005c1c",
            "code": "\nvoid set_data_fields_08005c1c(undefined4 *data,undefined value1,undefined value2,undefined value3,\n                 undefined value4)\n\n{\n  *data = &DAT_08007858;\n  *(undefined *)(data + 1) = value1;\n  *(undefined *)((int)data + 5) = value2;\n  *(undefined *)((int)data + 6) = value3;\n  *(undefined *)((int)data + 7) = value4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c1c": "set_data_fields_08005c1c",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4"
            },
            "calling": [
                "FUN_08005c38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c38": {
            "entrypoint": "0x08005c38",
            "current_name": "initialize_data_fields_08005c38",
            "code": "\nvoid initializeDataFields_08005c38(int status,int value)\n\n{\n  if ((status == 1) && (value == 0xffff)) {\n    set_data_fields_08005c1c(&DAT_200004b0,0,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005c38": "initialize_data_fields_08005c38",
                "param_1": "status",
                "param_2": "value"
            },
            "calling": [],
            "called": [
                "FUN_08005c1c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c96": {
            "entrypoint": "0x08005c96",
            "current_name": "process_string_08005c96",
            "code": "\nundefined4 process_string_08005c96(int *input_array,int length,undefined4 temporary_var1,undefined4 temporary_var2)\n\n{\n  undefined4 end_of_string_pointer;\n  \n  if (length != 0) {\n    end_of_string_pointer = find_end_of_string_08000178(length);\n    end_of_string_pointer = (**(code **)(*input_array + 4))(input_array,length,end_of_string_pointer,*(code **)(*input_array + 4),temporary_var2);\n    return end_of_string_pointer;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005c96": "process_string_08005c96",
                "param_1": "input_array",
                "param_2": "length",
                "param_3": "temporary_var1",
                "param_4": "temporary_var2",
                "uVar1": "end_of_string_pointer"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005cd4",
                "FUN_08000cd0",
                "FUN_08000bcc"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cb6": {
            "entrypoint": "0x08005cb6",
            "current_name": "execute_function_08005cb6",
            "code": "\nvoid execute_function_08005cb6(undefined4 *function_ptr)\n\n{\n  (**(code **)*function_ptr)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cb6": "execute_function_08005cb6",
                "param_1": "function_ptr"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08005d42"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cc0": {
            "entrypoint": "0x08005cc0",
            "current_name": "execute_callback_08005cc0",
            "code": "\nvoid executeCallback_08005cc0(int *callbackPtr,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  (**(code **)(*callbackPtr + 4))(callbackPtr,&DAT_0800786c,2,*(code **)(*callbackPtr + 4),arg3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005cc0": "execute_callback_08005cc0",
                "param_1": "callbackPtr",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "calling": [
                "FUN_08005cd4",
                "FUN_08005f40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005cd4": {
            "entrypoint": "0x08005cd4",
            "current_name": "calculate_sum_08005cd4",
            "code": "\nint calculate_sum_08005cd4(undefined4 input_value)\n\n{\n  int string_processing_result;\n  int callback_execution_result;\n  \n  string_processing_result = process_string_08005c96();\n  callback_execution_result = execute_callback_08005cc0(input_value);\n  return callback_execution_result + string_processing_result;\n}\n\n",
            "renaming": {
                "FUN_08005cd4": "calculate_sum_08005cd4",
                "param_1": "input_value",
                "iVar1": "string_processing_result",
                "iVar2": "callback_execution_result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005c96"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005ce8": {
            "entrypoint": "0x08005ce8",
            "current_name": "convert_decimal_to_base_08005ce8",
            "code": "\nundefined4 convert_decimal_to_base_08005ce8(int *input_array,uint decimal_number,uint base)\n\n{\n  char converted_digit;\n  undefined4 result;\n  uint remainder;\n  uint quotient;\n  char *output_array;\n  char reverse_digit_buffer [9];\n  \n  reverse_digit_buffer[1] = 0;\n  if ((int)base < 2) {\n    base = 10;\n  }\n  output_array = reverse_digit_buffer + 1;\n  do {\n    quotient = decimal_number / base;\n    remainder = (decimal_number & 0xff) - (quotient * base & 0xff) & 0xff;\n    output_array = output_array + -1;\n    converted_digit = (char)remainder;\n    if (remainder < 10) {\n      converted_digit = converted_digit + '0';\n    }\n    else {\n      converted_digit = converted_digit + '7';\n    }\n    *output_array = converted_digit;\n    decimal_number = quotient;\n  } while (quotient != 0);\n  if (output_array == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    result = find_end_of_string_08000178(output_array);\n    result = (**(code **)(*input_array + 4))(input_array,output_array,result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005ce8": "convert_decimal_to_base_08005ce8",
                "param_1": "input_array",
                "param_2": "decimal_number",
                "param_3": "base",
                "cVar1": "converted_digit",
                "uVar2": "result",
                "uVar3": "remainder",
                "uVar4": "quotient",
                "pcVar5": "output_array",
                "local_15": "reverse_digit_buffer"
            },
            "calling": [
                "FUN_08005d8a",
                "FUN_08005d42"
            ],
            "called": [
                "FUN_08000178"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d42": {
            "entrypoint": "0x08005d42",
            "current_name": "convert_and_execute_08005d42",
            "code": "\nint convert_and_execute_08005d42(undefined4 *function_pointer,uint value,uint base)\n\n{\n  int result;\n  int negative_result;\n  \n  if (base == 0) {\n    result = (**(code **)*function_pointer)(function_pointer,value & 0xff);\n    return result;\n  }\n  if (base != 10) {\n    result = convert_decimal_to_base_08005ce8(function_pointer,value,base & 0xff);\n    return result;\n  }\n  if (-1 < (int)value) {\n    result = convert_decimal_to_base_08005ce8(function_pointer,value,10);\n    return result;\n  }\n  result = execute_function_08005cb6(function_pointer,0x2d);\n  negative_result = convert_decimal_to_base_08005ce8(function_pointer,-value,10);\n  return negative_result + result;\n}\n\n",
            "renaming": {
                "FUN_08005d42": "convert_and_execute_08005d42",
                "param_1": "function_pointer",
                "param_2": "value",
                "param_3": "base",
                "iVar1": "result",
                "iVar2": "negative_result"
            },
            "calling": [
                "FUN_08005d82"
            ],
            "called": [
                "FUN_08005cb6",
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d82": {
            "entrypoint": "0x08005d82",
            "current_name": "execute_conversion_08005d82",
            "code": "\nvoid execute_conversion_08005d82(void)\n\n{\n  convert_and_execute();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d82": "execute_conversion_08005d82",
                "convert_and_execute_08005d42": "convert_and_execute"
            },
            "calling": [
                "FUN_08005da8",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005d42"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005d8a": {
            "entrypoint": "0x08005d8a",
            "current_name": "convert_value_08005d8a",
            "code": "\nvoid convert_value_08005d8a(undefined4 *value_ptr,uint base,uint decimal_value,undefined4 extra_param)\n\n{\n  if (decimal_value != 0) {\n    convert_to_base(value_ptr,base,decimal_value & 0xff);\n    return;\n  }\n  (**(code **)*value_ptr)(value_ptr,base & 0xff,0,*(code **)*value_ptr,extra_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005d8a": "convert_value_08005d8a",
                "param_1": "value_ptr",
                "param_2": "base",
                "param_3": "decimal_value",
                "param_4": "extra_param",
                "convert_decimal_to_base_08005ce8": "convert_to_base"
            },
            "calling": [
                "FUN_08005da8"
            ],
            "called": [
                "FUN_08005ce8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005da8": {
            "entrypoint": "0x08005da8",
            "current_name": "process_and_calculate_08005da8",
            "code": "\nint processAndCalculate_08005da8(undefined4 input1,undefined4 input2,undefined4 input3,uint input4,byte input5)\n\n{\n  int result;\n  undefined4 var1;\n  int var2;\n  byte var3;\n  undefined8 var4;\n  undefined8 var5;\n  \n  result = check_parameters_08000a2c(input3,input4,input3,input4);\n  if (result == 0) {\n    result = check_parameters_08000a2c(input3,input4 & 0x7fffffff,0xffffffff,0x7fefffff);\n    if ((result == 0) &&\n       (result = check_conditions_080009f0(input3,input4 & 0x7fffffff,0xffffffff,0x7fefffff), result == 0)) {\n      result = process_string_08005c96(input1,&DAT_08007860);\n    }\n    else {\n      result = is_execute_conditions_passed_08000a18(input3,input4,0xe0000000,0x41efffff);\n      if (result == 0) {\n        result = check_conditions_080009dc(input3,input4,0xe0000000,0xc1efffff);\n        if (result == 0) {\n          result = check_conditions_080009dc(input3,input4,0,0);\n          if (result == 0) {\n            result = 0;\n          }\n          else {\n            result = execute_function_08005cb6(input1,0x2d);\n            input4 = input4 + 0x80000000;\n          }\n          var4 = 0x3fe0000000000000;\n          for (var3 = 0; var1 = (undefined4)((ulonglong)var4 >> 0x20), var3 < input5;\n              var3 = var3 + 1) {\n            var4 = calculate_floating_point_0800074c((int)var4,var1,0,0x40240000);\n          }\n          var4 = perform_unsigned_arithmetic_operation_08000194(input3,input4,(int)var4,var1);\n          var1 = compute_value_08000aa8();\n          var5 = reverse_and_shift_bits_0800040c();\n          var4 = calculate_result_08000190((int)var4,(int)((ulonglong)var4 >> 0x20),(int)var5,\n                               (int)((ulonglong)var5 >> 0x20));\n          var2 = convert_value_08005d8a(input1,var1,10);\n          result = result + var2;\n          if (input5 != 0) {\n            var2 = process_string_08005c96(input1,&DAT_08007868);\n            result = result + var2;\n          }\n          while (input5 != 0) {\n            var4 = calculate_shifted_value_extended_080004f8((int)var4,(int)((ulonglong)var4 >> 0x20),0,0x40240000);\n            var1 = calculate_shifted_result_08000a58();\n            var2 = execute_conversion_08005d82(input1,var1,10);\n            result = result + var2;\n            var5 = shift_and_concatenate_0800042c(var1);\n            var4 = calculate_result_08000190((int)var4,(int)((ulonglong)var4 >> 0x20),(int)var5,\n                                 (int)((ulonglong)var5 >> 0x20));\n            input5 = input5 - 1;\n          }\n        }\n        else {\n          result = process_string_08005c96(input1,&DAT_08007864);\n        }\n      }\n      else {\n        result = process_string_08005c96(input1,&DAT_08007864);\n      }\n    }\n  }\n  else {\n    result = process_string_08005c96(input1,&DAT_0800785c);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005da8": "process_and_calculate_08005da8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "iVar1": "result",
                "uVar2": "var1",
                "iVar3": "var2",
                "bVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5"
            },
            "calling": [
                "FUN_08005f2c"
            ],
            "called": [
                "FUN_08005d8a",
                "FUN_08005cb6",
                "FUN_0800074c",
                "FUN_080009dc",
                "FUN_08005d82",
                "FUN_08000a58",
                "FUN_08000194",
                "FUN_080004f8",
                "FUN_08005c96",
                "FUN_08000a2c",
                "FUN_08000a18",
                "FUN_0800040c",
                "FUN_080009f0",
                "FUN_08000aa8",
                "FUN_08000190",
                "FUN_0800042c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f2c": {
            "entrypoint": "0x08005f2c",
            "current_name": "process_and_calculate_08005f2c",
            "code": "\nvoid process_and_calculate_08005f2c(void)\n\n{\n  process_and_calculate_08005f2c_08005da8();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f2c": "process_and_calculate_08005f2c"
            },
            "calling": [
                "FUN_08005f40",
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005da8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f40": {
            "entrypoint": "0x08005f40",
            "current_name": "calculate_and_execute_08005f40",
            "code": "\nint calculate_and_execute_08005f40(undefined4 input_param)\n\n{\n  int calculation_result;\n  int callback_result;\n  \n  calculation_result = process_and_calculate_08005f2c();\n  callback_result = execute_callback_08005cc0(input_param);\n  return callback_result + calculation_result;\n}\n\n",
            "renaming": {
                "FUN_08005f40": "calculate_and_execute_08005f40",
                "param_1": "input_param",
                "iVar1": "calculation_result",
                "iVar2": "callback_result"
            },
            "calling": [
                "FUN_08000cd0"
            ],
            "called": [
                "FUN_08005cc0",
                "FUN_08005f2c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5c": {
            "entrypoint": "0x08005f5c",
            "current_name": "FUNC_08005f5c",
            "code": "\nvoid FUNC_08005f5c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5c": "FUNC_08005f5c"
            },
            "calling": [
                "FUN_08005f6c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005f5e": {
            "entrypoint": "0x08005f5e",
            "current_name": "initialize_module_08005f5e",
            "code": "\nvoid initialize_module_08005f5e(void)\n\n{\n  update_value(3);\n  initialize_module_08005f5e_and_settings();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005f5e": "initialize_module_08005f5e",
                "update_value_08002470": "update_value",
                "initialize_module_and_settings_08001c32": "initialize_module_and_settings"
            },
            "calling": [
                "FUN_08006198"
            ],
            "called": [
                "FUN_08001c32",
                "FUN_08002470"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f6c": {
            "entrypoint": "0x08005f6c",
            "current_name": "run_data_processing_loop_08005f6c",
            "code": "\nvoid run_data_processing_loop_08005f6c(void)\n\n{\n  FUNC_08005f5c();\n  initialize_and_process_data();\n  do {\n    process_data();\n    FUNC_08005a18();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08005f6c": "run_data_processing_loop_08005f6c",
                "initialize_and_process_data_08000bcc": "initialize_and_process_data",
                "process_data_08000cd0": "process_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08005a18",
                "FUN_08000cd0",
                "FUN_08000bcc",
                "FUN_08005f5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005f8c": {
            "entrypoint": "0x08005f8c",
            "current_name": "count_set_bits_08005f8c",
            "code": "\nchar countSetBits_08005f8c(uint num)\n\n{\n  char count;\n  \n  count = '\\0';\n  for (; num != 1; num = num >> 1) {\n    count = count + '\\x01';\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_08005f8c": "count_set_bits_08005f8c",
                "param_1": "num",
                "cVar1": "count"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005fc8": {
            "entrypoint": "0x08005fc8",
            "current_name": "initialize_parameters_08005fc8",
            "code": "\nvoid initializeParameters_08005fc8(int flag,int value,undefined4 param_3,undefined4 param_4)\n\n{\n  if (flag != 1) {\n    return;\n  }\n  if (value == 0xffff) {\n    DAT_200004b8 = 6;\n    DAT_200004c4 = 0;\n    DAT_200004cc = 7;\n    DAT_200004d8 = 0;\n    DAT_200004e0 = 8;\n    DAT_200004ec = 0;\n    DAT_200004f4 = 9;\n    DAT_20000500 = 0;\n    DAT_20000508 = 10;\n    DAT_20000514 = 0;\n    DAT_2000051c = 0x17;\n    DAT_20000528 = 0;\n    DAT_20000530 = 0x17;\n    DAT_2000053c = 0;\n    DAT_20000544 = 0x17;\n    DAT_20000550 = 0;\n    DAT_20000558 = 0x17;\n    DAT_20000564 = 0;\n    DAT_2000056c = 0x17;\n    DAT_20000578 = 0;\n    DAT_20000580 = 0x28;\n    DAT_2000058c = 0;\n    DAT_20000594 = 0x28;\n    DAT_200005a0 = 0;\n    DAT_200005a8 = 0x28;\n    DAT_200005b4 = 0;\n    DAT_200005bc = 0x28;\n    DAT_200005c8 = 0;\n    DAT_200005d0 = 0x28;\n    DAT_200005dc = 0;\n    DAT_200005e4 = 0x28;\n    DAT_200005f0 = 0;\n    shiftLeft(0,&label_08005fa0_1,&DAT_20000000,&DAT_200004b8,param_4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005fc8": "initialize_parameters_08005fc8",
                "param_1": "flag",
                "param_2": "value",
                "shift_left_08006112": "shiftLeft",
                "LAB_08005fa0_1": "label_08005fa0_1"
            },
            "calling": [],
            "called": [
                "FUN_08006112"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060d4": {
            "entrypoint": "0x080060d4",
            "current_name": "process_data_080060d4",
            "code": "\nvoid processData_080060d4(int input)\n\n{\n  int bitCount;\n  \n  if (*(int *)(input + 8) != 0) {\n    (**(code **)(input + 0xc))();\n    return;\n  }\n  process_data_08007090();\n  bitCount = countSetBits();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    processData_080060d4();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060d4": "process_data_080060d4",
                "param_1": "input",
                "iVar1": "bitCount",
                "count_set_bits_08005f8c": "countSetBits"
            },
            "calling": [
                "FUN_080060e4"
            ],
            "called": [
                "FUN_08007090"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080060e4": {
            "entrypoint": "0x080060e4",
            "current_name": "check_and_process_data_080060e4",
            "code": "\nvoid checkAndProcessData_080060e4(void)\n\n{\n  int bitCount;\n  \n  bitCount = countSetBits();\n  if ((&DAT_200004c4)[bitCount * 5] != 0) {\n    processData();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080060e4": "check_and_process_data_080060e4",
                "iVar1": "bitCount",
                "count_set_bits_08005f8c": "countSetBits",
                "process_data_080060d4": "processData"
            },
            "calling": [
                "FUN_0800282c"
            ],
            "called": [
                "FUN_08005f8c",
                "FUN_080060d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006112": {
            "entrypoint": "0x08006112",
            "current_name": "shift_left_08006112",
            "code": "\nvoid shift_left_08006112(undefined4 input_value,undefined4 shift_amount)\n\n{\n  shift_left_08006112_uint64_08006158(shift_amount,input_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006112": "shift_left_08006112",
                "param_1": "input_value",
                "param_2": "shift_amount"
            },
            "calling": [
                "FUN_08005fc8"
            ],
            "called": [
                "FUN_08006158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800611c": {
            "entrypoint": "0x0800611c",
            "current_name": "print_assertion_failed_message_0800611c",
            "code": "\nvoid printAssertionFailedMessage_0800611c(undefined4 errorMessage,undefined4 fileName,char *assertion,undefined4 extraInfo)\n\n{\n  undefined4 ptrToErrorMessage;\n  char *msgLabel;\n  undefined8 result;\n  undefined4 ptrToExtraInfo;\n  \n  ptrToErrorMessage = *(undefined4 *)(DAT_200000f8 + 0xc);\n  ptrToExtraInfo = extraInfo;\n  if (assertion == (char *)0x0) goto LAB_08006140;\n  msgLabel = \", function: \";\n  do {\n    process_binary_08006174(ptrToErrorMessage,\"assertion \\\"%s\\\" failed: file \\\"%s\\\", line %d%s%s\\n\",extraInfo,errorMessage,fileName\n                 ,msgLabel,assertion,ptrToExtraInfo);\n    result = process_data_08006ac0();\n    fileName = (undefined4)((ulonglong)result >> 0x20);\n    ptrToErrorMessage = (undefined4)result;\nLAB_08006140:\n    assertion = \"\";\n    msgLabel = assertion;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_0800611c": "print_assertion_failed_message_0800611c",
                "param_1": "errorMessage",
                "param_2": "fileName",
                "param_3": "assertion",
                "param_4": "extraInfo",
                "uVar1": "ptrToErrorMessage",
                "pcVar2": "msgLabel",
                "uVar3": "result",
                "uVar4": "ptrToExtraInfo"
            },
            "calling": [
                "FUN_08005a68"
            ],
            "called": [
                "FUN_08006174",
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006158": {
            "entrypoint": "0x08006158",
            "current_name": "shift_left_uint64_08006158",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006160) */\n\nlonglong shiftLeftUint64_08006158(undefined4 inputValue,uint shiftAmount)\n\n{\n  return (ulonglong)shiftAmount << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08006158": "shift_left_uint64_08006158",
                "param_1": "inputValue",
                "param_2": "shiftAmount"
            },
            "calling": [
                "FUN_08006112"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006174": {
            "entrypoint": "0x08006174",
            "current_name": "process_binary_08006174",
            "code": "\nvoid processBinary_08006174(undefined4 inputParam1,undefined4 inputParam2,undefined4 outputParam1,undefined4 outputParam2)\n\n{\n  undefined4 outputParam3;\n  undefined4 outputParam4;\n  \n  outputParam3 = outputParam1;\n  outputParam4 = outputParam2;\n  process_binary_08006394(DAT_200000f8,inputParam1,inputParam2,&outputParam3,inputParam1,&outputParam3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006174": "process_binary_08006174",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "outputParam1",
                "param_4": "outputParam2",
                "uStack_8": "outputParam3",
                "uStack_4": "outputParam4"
            },
            "calling": [
                "FUN_0800611c"
            ],
            "called": [
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006198": {
            "entrypoint": "0x08006198",
            "current_name": "execute_functions_08006198",
            "code": "\nvoid executeFunctions_08006198(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(functionPointerArray *)(&DAT_08007944)[index])();\n  }\n  FUNC_08007328();\n  for (index = 0; index != 10; index = index + 1) {\n    (*(functionPointerArray *)(&DAT_08007944)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006198": "execute_functions_08006198",
                "iVar1": "index",
                "code": "functionPointerArray"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_08007328",
                "FUN_08005f5e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061e0": {
            "entrypoint": "0x080061e0",
            "current_name": "fill_memory_080061e0",
            "code": "\nvoid fillMemory_080061e0(undefined *memory,undefined value,int numBytes)\n\n{\n  undefined *endAddress;\n  \n  endAddress = memory + numBytes;\n  for (; memory != endAddress; memory = memory + 1) {\n    *memory = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061e0": "fill_memory_080061e0",
                "param_1": "memory",
                "param_2": "value",
                "param_3": "numBytes",
                "puVar1": "endAddress"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006c40",
                "FUN_08006d14",
                "FUN_08004a4c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080061f0": {
            "entrypoint": "0x080061f0",
            "current_name": "update_data_structure_080061f0",
            "code": "\nvoid updateDataStructure_080061f0(undefined4 *output,int size,undefined4 value1,undefined4 value2)\n\n{\n  int **temp;\n  int **current;\n  int **next;\n  int *ptr;\n  int **prev;\n  int **newNode;\n  \n  if (size == 0) {\n    return;\n  }\n  newNode = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    newNode = (int **)((int)newNode + *(int *)(size + -4));\n  }\n  FUNC_08006eac();\n  next = (int **)&DAT_200005f8;\n  if (DAT_200005f8 == (int **)0x0) {\n    newNode[1] = (int *)0x0;\n    current = temp;\n    DAT_200005f8 = newNode;\n  }\n  else {\n    next = DAT_200005f8;\n    if (newNode < DAT_200005f8) {\n      current = (int **)*newNode;\n      next = (int **)((int)newNode + (int)current);\n      if (DAT_200005f8 == next) {\n        ptr = *DAT_200005f8;\n        DAT_200005f8 = (int **)DAT_200005f8[1];\n        next = (int **)((int)ptr + (int)current);\n        *newNode = (int *)next;\n      }\n      newNode[1] = (int *)DAT_200005f8;\n      DAT_200005f8 = newNode;\n    }\n    else {\n      do {\n        prev = next;\n        next = (int **)prev[1];\n        if (next == (int **)0x0) break;\n      } while (next <= newNode);\n      current = (int **)*prev;\n      if ((int **)((int)prev + (int)current) == newNode) {\n        current = (int **)((int)current + (int)*newNode);\n        *prev = (int *)current;\n        if (next == (int **)((int)prev + (int)current)) {\n          ptr = *next;\n          next = (int **)next[1];\n          current = (int **)((int)current + (int)ptr);\n          *prev = (int *)current;\n          prev[1] = (int *)next;\n        }\n      }\n      else if (newNode < (int **)((int)prev + (int)current)) {\n        *output = 0xc;\n      }\n      else {\n        current = (int **)((int)newNode + (int)*newNode);\n        if (next == current) {\n          ptr = *next;\n          next = (int **)next[1];\n          current = (int **)((int)ptr + (int)*newNode);\n          *newNode = (int *)current;\n        }\n        newNode[1] = (int *)next;\n        prev[1] = (int *)newNode;\n      }\n    }\n  }\n  FUNC_08006eae(output,current,next,value2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080061f0": "update_data_structure_080061f0",
                "param_1": "output",
                "param_2": "size",
                "param_3": "value1",
                "param_4": "value2",
                "extraout_r1": "temp",
                "ppiVar1": "current",
                "ppiVar2": "next",
                "piVar3": "ptr",
                "ppiVar4": "prev",
                "ppiVar5": "newNode"
            },
            "calling": [
                "FUN_080069e4",
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006288": {
            "entrypoint": "0x08006288",
            "current_name": "allocate_and_assign_memory_08006288",
            "code": "\nuint allocate_and_assign_memory_08006288(undefined4 *result,uint size)\n\n{\n  uint *current_block;\n  int block_difference;\n  uint *previous_block;\n  uint block_difference;\n  uint *previous_block;\n  uint adjusted_size;\n  \n  adjusted_size = (size + 3 & 0xfffffffc) + 8;\n  if (adjusted_size < 0xc) {\n    adjusted_size = 0xc;\n  }\n  if (((int)adjusted_size < 0) || (adjusted_size < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_08006eac();\n    current_block = DAT_200005f8;\n    previous_block = DAT_200005f8;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      block_difference = *previous_block - adjusted_size;\n      if (-1 < (int)block_difference) {\n        if (block_difference < 0xc) {\n          if (previous_block == previous_block) {\n            current_block = (uint *)previous_block[1];\n            DAT_200005f8 = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (previous_block != previous_block) {\n            previous_block[1] = (uint)current_block;\n            previous_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = block_difference;\n          *(uint *)((int)previous_block + block_difference) = adjusted_size;\n          previous_block = (uint *)((int)previous_block + block_difference);\n        }\n        goto LAB_080062ec;\n      }\n      previous_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200005fc == 0) {\n      DAT_200005fc = allocate_memory(result);\n    }\n    current_block = (uint *)allocate_memory(result,adjusted_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((previous_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == previous_block ||\n        (block_difference = allocate_memory(result,(int)previous_block - (int)current_block), block_difference != -1)))) {\n      *previous_block = adjusted_size;\nLAB_080062ec:\n      FUNC_08006eae(result);\n      adjusted_size = (int)previous_block + 0xbU & 0xfffffff8;\n      block_difference = adjusted_size - (int)(previous_block + 1);\n      if (block_difference != 0) {\n        *(int *)((int)previous_block + block_difference) = -block_difference;\n        return adjusted_size;\n      }\n      return adjusted_size;\n    }\n    *result = 0xc;\n    FUNC_08006eae(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006288": "allocate_and_assign_memory_08006288",
                "param_1": "result",
                "param_2": "size",
                "uVar6": "adjusted_size",
                "puVar1": "current_block",
                "iVar2": "block_difference",
                "puVar3": "previous_block",
                "uVar4": "block_difference",
                "puVar5": "previous_block",
                "allocate_and_assign_memory_08006920": "allocate_memory"
            },
            "calling": [
                "FUN_08006c88",
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08006eae",
                "FUN_08006eac",
                "FUN_08006920"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006344": {
            "entrypoint": "0x08006344",
            "current_name": "process_input_08006344",
            "code": "\nuint process_input_08006344(int data_structure,byte input_byte,byte **input_buffer)\n\n{\n  int temp_var1;\n  byte *temp_var2;\n  byte *temp_var3;\n  uint output_value;\n  \n  temp_var2 = input_buffer[2] + -1;\n  input_buffer[2] = temp_var2;\n  if ((-1 < (int)temp_var2) ||\n     (((int)input_buffer[6] <= (int)temp_var2 && (temp_var2 = (byte *)(uint)input_byte, temp_var2 != (byte *)0xa))))\n  {\n    temp_var2 = *input_buffer;\n    *input_buffer = temp_var2 + 1;\n    *temp_var2 = input_byte;\n    return (uint)input_byte;\n  }\n  if ((data_structure != 0) && (*(int *)(data_structure + 0x18) == 0)) {\n    initialize_memory_blocks_08006cb4();\n  }\n  if (input_buffer == (byte **)&DAT_08007904) {\n    input_buffer = *(byte ***)(data_structure + 4);\n  }\n  else if (input_buffer == (byte **)&DAT_08007924) {\n    input_buffer = *(byte ***)(data_structure + 8);\n  }\n  else if (input_buffer == (byte **)&DAT_080078e4) {\n    input_buffer = *(byte ***)(data_structure + 0xc);\n  }\n  input_buffer[2] = input_buffer[6];\n  temp_var3 = (byte *)(uint)*(ushort *)(input_buffer + 3);\n  temp_var1 = (int)temp_var3 << 0x1c;\n  if (((temp_var1 < 0) && (temp_var3 = input_buffer[4], temp_var3 != (byte *)0x0)) ||\n     (temp_var1 = update_and_allocate_memory_080069e4(data_structure,input_buffer,temp_var1,temp_var3,temp_var2), temp_var1 == 0)) {\n    output_value = (uint)input_byte;\n    temp_var1 = (int)*input_buffer - (int)input_buffer[4];\n    if ((temp_var1 < (int)input_buffer[5]) || (temp_var1 = process_data_08006be0(data_structure,input_buffer), temp_var1 == 0)) {\n      input_buffer[2] = input_buffer[2] + -1;\n      temp_var2 = *input_buffer;\n      *input_buffer = temp_var2 + 1;\n      *temp_var2 = input_byte;\n      if ((byte *)(temp_var1 + 1) != input_buffer[5]) {\n        if (-1 < (int)((uint)*(ushort *)(input_buffer + 3) << 0x1f)) {\n          return output_value;\n        }\n        if (output_value != 10) {\n          return output_value;\n        }\n      }\n      temp_var1 = process_data_08006be0(data_structure,input_buffer);\n      if (temp_var1 == 0) {\n        return output_value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_08006344": "process_input_08006344",
                "param_1": "data_structure",
                "param_2": "input_byte",
                "param_3": "input_buffer",
                "iVar1": "temp_var1",
                "pbVar2": "temp_var2",
                "pbVar3": "temp_var3",
                "uVar4": "output_value"
            },
            "calling": [
                "FUN_08006370"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006cb4",
                "FUN_08006be0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006370": {
            "entrypoint": "0x08006370",
            "current_name": "process_input_08006370",
            "code": "\nint processInput_08006370(undefined4 input1,undefined4 input2,undefined *data,int length)\n\n{\n  int result;\n  undefined *endPtr;\n  int currentPos;\n  \n  endPtr = data + length;\n  currentPos = length;\n  do {\n    if (data == endPtr) {\n      return 0;\n    }\n    result = process_input_08006344(input1,*data,input2,length,currentPos);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08006370": "process_input_08006370",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "currentPos"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006344"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006394": {
            "entrypoint": "0x08006394",
            "current_name": "process_binary_08006394",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08006568) */\n\nint processBinary_08006394(int binary_address,undefined4 *binary_data,byte *input_data,int *result)\n\n{\n  int memory_blocks_initialized;\n  int *ptr;\n  bool is_numeric;\n  byte *input_ptr;\n  byte *current_byte;\n  int reverse_result;\n  int value;\n  int *result_ptr;\n  uint flags;\n  int integer_val;\n  undefined4 unassigned;\n  int decimal_val;\n  int total_size;\n  byte current_char;\n  undefined const1;\n  undefined const2;\n  undefined const3;\n  undefined4 const4;\n  \n  result_ptr = result;\n  if ((binary_address != 0) && (*(int *)(binary_address + 0x18) == 0)) {\n    initialize_memory_blocks_08006cb4();\n  }\n  if (binary_data == &DAT_08007904) {\n    binary_data = *(undefined4 **)(binary_address + 4);\n  }\n  else if (binary_data == (undefined4 *)&DAT_08007924) {\n    binary_data = *(undefined4 **)(binary_address + 8);\n  }\n  else if (binary_data == (undefined4 *)&DAT_080078e4) {\n    binary_data = *(undefined4 **)(binary_address + 0xc);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(binary_data + 3) << 0x1c)) || (binary_data[4] == 0)) &&\n     (value = update_and_allocate_memory_080069e4(binary_address,binary_data), value != 0)) {\n    return -1;\n  }\n  total_size = 0;\n  const1 = 0x20;\n  const2 = 0x30;\n  input_ptr = input_data;\nLAB_080063d6:\n  current_byte = input_ptr;\n  if (*current_byte != 0) goto LAB_0800648c;\n  goto LAB_080063e0;\nLAB_0800648c:\n  input_ptr = current_byte + 1;\n  if (*current_byte != 0x25) goto LAB_080063d6;\nLAB_080063e0:\n  value = (int)current_byte - (int)input_data;\n  if (value != 0) {\n    memory_blocks_initialized = process_input_08006370(binary_address,binary_data,input_data,value);\n    if (memory_blocks_initialized == -1) {\nLAB_08006580:\n      if ((int)((uint)*(ushort *)(binary_data + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_size;\n    }\n    total_size = total_size + value;\n  }\n  if (*current_byte == 0) goto LAB_08006580;\n  flags = 0;\n  decimal_val = 0;\n  integer_val = -1;\n  unassigned = 0;\n  const3 = 0;\n  const4 = 0;\n  input_ptr = current_byte + 1;\n  while( true ) {\n    value = find_first_occurrence_08006e90(\"#-0+ \",*input_ptr);\n    input_data = input_ptr + 1;\n    if (value == 0) break;\n    flags = 1 << (value + 0xf7ff8750U & 0xff) | flags;\n    input_ptr = input_data;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    const3 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    const3 = 0x2b;\n  }\n  if (*input_ptr == 0x2a) {\n    ptr = result_ptr + 1;\n    value = *result_ptr;\n    result_ptr = ptr;\n    if (value < 0) {\n      decimal_val = -value;\n      flags = flags | 2;\n      goto LAB_080064be;\n    }\n  }\n  else {\n    is_numeric = false;\n    value = decimal_val;\n    input_data = input_ptr;\n    while( true ) {\n      if (9 < *input_data - 0x30) break;\n      value = value * 10 + (*input_data - 0x30);\n      is_numeric = true;\n      input_data = input_data + 1;\n    }\n    if (!is_numeric) goto LAB_080064be;\n  }\n  decimal_val = value;\nLAB_080064be:\n  if (*input_data == 0x2e) {\n    if (input_data[1] == 0x2a) {\n      input_data = input_data + 2;\n      ptr = result_ptr + 1;\n      integer_val = *result_ptr;\n      result_ptr = ptr;\n      if (integer_val < 0) {\n        integer_val = -1;\n      }\n    }\n    else {\n      is_numeric = false;\n      value = 0;\n      integer_val = 0;\n      while( true ) {\n        input_data = input_data + 1;\n        if (9 < *input_data - 0x30) break;\n        value = value * 10 + (*input_data - 0x30);\n        is_numeric = true;\n      }\n      if (is_numeric) {\n        integer_val = value;\n      }\n    }\n  }\n  value = find_first_occurrence_08006e90(&DAT_080078b6,*input_data,3);\n  if (value != 0) {\n    input_data = input_data + 1;\n    flags = flags | 0x40 << (value + 0xf7ff874aU & 0xff);\n  }\n  current_char = *input_data;\n  input_data = input_data + 1;\n  value = find_first_occurrence_08006e90(\"efgEFG\",current_char,6);\n  if (value == 0) {\n    reverse_result = reverse_and_process_data_080066b0(binary_address,&flags,binary_data,0x8006371,&result_ptr);\n    if (reverse_result == -1) goto LAB_08006580;\n  }\n  else {\n    result_ptr = (int *)(((int)result_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_size = total_size + reverse_result;\n  input_ptr = input_data;\n  goto LAB_080063d6;\n}\n\n",
            "renaming": {
                "FUN_08006394": "process_binary_08006394",
                "param_1": "binary_address",
                "param_2": "binary_data",
                "param_3": "input_data",
                "param_4": "result",
                "iVar1": "memory_blocks_initialized",
                "piVar2": "ptr",
                "bVar3": "is_numeric",
                "pbVar4": "input_ptr",
                "pbVar5": "current_byte",
                "unaff_r9": "reverse_result",
                "iVar6": "value",
                "local_8c": "result_ptr",
                "local_88": "flags",
                "local_84": "integer_val",
                "local_80": "unassigned",
                "local_7c": "decimal_val",
                "local_74": "total_size",
                "local_70": "current_char",
                "local_6f": "const1",
                "local_6e": "const2",
                "local_45": "const3",
                "local_30": "const4"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_08006174"
            ],
            "called": [
                "FUN_080069e4",
                "FUN_08006370",
                "FUN_08006e90",
                "FUN_080066b0",
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080065c0": {
            "entrypoint": "0x080065c0",
            "current_name": "process_data_080065c0",
            "code": "\nundefined4\nprocessData_080065c0(undefined4 input,uint *array,uint *result,undefined4 param,code *callback)\n\n{\n  int iterator;\n  int returnValue;\n  uint maxValue;\n  uint index;\n  bool isNonZero;\n  \n  maxValue = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxValue = array[2];\n  }\n  *result = maxValue;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *result = maxValue + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (iterator = 0; iterator < (int)(array[3] - *result); iterator = iterator + 1) {\n      returnValue = (*callback)(input,param,(int)array + 0x19,1);\n      if (returnValue == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)array + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  index = maxValue;\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxValue + 0x43) = 0x30;\n    index = maxValue + 2;\n    *(undefined *)((int)array + maxValue + 0x44) = *(undefined *)((int)array + 0x45);\n  }\n  iterator = (*callback)(input,param,(int)array + 0x43,index);\n  if (iterator != -1) {\n    maxValue = array[3];\n    isNonZero = (*array & 6) != 4;\n    if (isNonZero) {\n      maxValue = 0;\n    }\n    index = 0;\n    if (!isNonZero) {\n      maxValue = maxValue - *result;\n    }\n    if (!isNonZero) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxValue = maxValue + (array[2] - array[4]);\n    }\n    while( true ) {\n      if (maxValue == index) {\n        return 0;\n      }\n      iterator = (*callback)(input,param,(int)array + 0x1a,1);\n      if (iterator == -1) break;\n      index = index + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080065c0": "process_data_080065c0",
                "param_1": "input",
                "param_2": "array",
                "param_3": "result",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "iterator",
                "iVar2": "returnValue",
                "uVar3": "maxValue",
                "uVar4": "index",
                "bVar5": "isNonZero"
            },
            "calling": [
                "FUN_080066b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080066b0": {
            "entrypoint": "0x080066b0",
            "current_name": "reverse_and_process_data_080066b0",
            "code": "\nuint reverse_and_process_data_080066b0(undefined4 parameter_1,uint *data,undefined4 parameter_3,code *callback_function,uint **pointer_to_data)\n\n{\n  byte byte_value;\n  int index;\n  uint *pointer;\n  int temp_var;\n  char *hex_chars;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint value;\n  uint temp_value;\n  char *string;\n  char *output_string;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data + 6);\n  output_string = (char *)((int)data + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto LAB_0800686a;\n          if (byte_value != 0x58) goto LAB_080066e0;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hex_chars = \"0123456789ABCDEF\";\nLAB_080067fa:\n          base = *data;\n          pointer = *pointer_to_data;\n          *pointer_to_data = pointer + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)pointer;\n          }\n          else {\n            value = *pointer;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_08006790:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto LAB_080066e0;\n          value = *data;\n          pointer = *pointer_to_data;\n          if ((value & 0x80) == 0) {\n            *pointer_to_data = pointer + 1;\n            if ((value & 0x40) == 0) goto LAB_08006700;\n            value = (uint)(short)*(ushort *)pointer;\n          }\n          else {\n            *pointer_to_data = pointer + 1;\nLAB_08006700:\n            value = *pointer;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hex_chars = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        temp_value = data[1];\n        data[2] = temp_value;\n        string = output_string;\n        if ((int)temp_value < 0) {\n          if (value != 0) goto LAB_0800682e;\nLAB_080068dc:\n          *(char *)((int)data + 0x42) = *hex_chars;\n          string = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (temp_value != 0) goto LAB_080068dc;\n          }\n          else {\nLAB_0800682e:\n            do {\n              temp_value = value / base;\n              string = string + -1;\n              *string = hex_chars[value - base * temp_value];\n              value = temp_value;\n            } while (temp_value != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          string[-1] = '0';\n          string = string + -1;\n        }\n        data[4] = (int)output_string - (int)string;\n        output_string = string;\n        goto LAB_080067d6;\n      }\n      pointer = *pointer_to_data;\n      *pointer_to_data = pointer + 1;\n      *(char *)((int)data + 0x42) = (char)*pointer;\nLAB_08006740:\n      output_string = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nLAB_08006766:\n            value = *data;\n            pointer = *pointer_to_data;\n            if ((value & 0x80) == 0) {\n              *pointer_to_data = pointer + 1;\n              if ((value & 0x40) == 0) goto LAB_08006774;\n              value = (uint)*(ushort *)pointer;\n            }\n            else {\n              *pointer_to_data = pointer + 1;\nLAB_08006774:\n              value = *pointer;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_chars = \"0123456789ABCDEF\";\n            goto LAB_08006790;\n          }\n          if (byte_value == 0x70) {\n            *data = *data | 0x20;\nLAB_08006726:\n            hex_chars = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_080067fa;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto LAB_08006766;\n          if (byte_value == 0x78) goto LAB_08006726;\n        }\nLAB_080066e0:\n        *(byte *)((int)data + 0x42) = byte_value;\n        goto LAB_08006740;\n      }\n      ppcVar8 = (char **)*pointer_to_data;\n      *pointer_to_data = (uint *)(ppcVar8 + 1);\n      output_string = *ppcVar8;\n      index = find_first_occurrence_08006e90(output_string,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)output_string;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080067d6;\n  }\n  value = *data;\n  ppuVar7 = (uint **)*pointer_to_data;\n  base = data[5];\n  if ((value & 0x80) == 0) {\n    *pointer_to_data = (uint *)(ppuVar7 + 1);\n    pointer = *ppuVar7;\n    if ((value & 0x40) == 0) goto LAB_08006856;\n    *(short *)pointer = (short)base;\n  }\n  else {\n    *pointer_to_data = (uint *)(ppuVar7 + 1);\n    pointer = *ppuVar7;\nLAB_08006856:\n    *pointer = base;\n  }\nLAB_0800686a:\n  data[4] = 0;\nLAB_080067d6:\n  index = process_data_080065c0(parameter_1,data,local_array,parameter_3,callback_function);\n  if ((index == -1) || (index = (*callback_function)(parameter_1,parameter_3,output_string,data[4]), index == -1)) {\nLAB_080067ea:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - local_array[0]); index = index + 1) {\n        temp_var = (*callback_function)(parameter_1,parameter_3,(int)data + 0x19,1);\n        if (temp_var == -1) goto LAB_080067ea;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_080066b0": "reverse_and_process_data_080066b0",
                "param_1": "parameter_1",
                "param_2": "data",
                "param_3": "parameter_3",
                "param_4": "callback_function",
                "param_5": "pointer_to_data",
                "bVar1": "byte_value",
                "iVar2": "index",
                "puVar3": "pointer",
                "iVar4": "temp_var",
                "pcVar5": "hex_chars",
                "uVar6": "base",
                "uVar9": "value",
                "uVar10": "temp_value",
                "pcVar11": "string",
                "pcVar12": "output_string",
                "local_24": "local_array"
            },
            "calling": [
                "FUN_08006394"
            ],
            "called": [
                "FUN_08006e90",
                "FUN_080065c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080068f0": {
            "entrypoint": "0x080068f0",
            "current_name": "process_binary_080068f0",
            "code": "\nvoid process_binary_080068f0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  int var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  \n  var1 = DAT_200000f8;\n  var2 = arg1;\n  var3 = arg2;\n  var4 = arg3;\n  var5 = arg4;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_memory_blocks_08006cb4(DAT_200000f8);\n  }\n  process_binary_080068f0_08006394(var1,*(undefined4 *)(var1 + 8),arg1,&var3,var2,&var3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080068f0": "process_binary_080068f0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "var1",
                "uVar2": "var2",
                "uStack_c": "var3",
                "uStack_8": "var4",
                "uStack_4": "var5"
            },
            "calling": [
                "FUN_08004f4c"
            ],
            "called": [
                "FUN_08006cb4",
                "FUN_08006394"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006920": {
            "entrypoint": "0x08006920",
            "current_name": "allocate_and_assign_memory_08006920",
            "code": "\nvoid allocateAndAssignMemory_08006920(int *outputPointer,undefined4 size)\n\n{\n  int allocationResult;\n  \n  DAT_200006a4 = 0;\n  allocationResult = allocate_memory_080056d8(size);\n  if ((allocationResult == -1) && (DAT_200006a4 != 0)) {\n    *outputPointer = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006920": "allocate_and_assign_memory_08006920",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "allocationResult"
            },
            "calling": [
                "FUN_08006288"
            ],
            "called": [
                "FUN_080056d8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080069e4": {
            "entrypoint": "0x080069e4",
            "current_name": "update_and_allocate_memory_080069e4",
            "code": "\nuint update_and_allocate_memory_080069e4(undefined4 *out_param,undefined4 *input_param)\n\n{\n  int data_ptr;\n  uint result;\n  ushort info;\n  \n  data_ptr = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    initialize_memory_blocks_08006cb4(DAT_200000f8);\n  }\n  if (input_param == &DAT_08007904) {\n    input_param = *(undefined4 **)(data_ptr + 4);\n  }\n  else if (input_param == (undefined4 *)&DAT_08007924) {\n    input_param = *(undefined4 **)(data_ptr + 8);\n  }\n  else if (input_param == (undefined4 *)&DAT_080078e4) {\n    input_param = *(undefined4 **)(data_ptr + 0xc);\n  }\n  info = *(ushort *)(input_param + 3);\n  result = (uint)info;\n  if (-1 < (int)(result << 0x1c)) {\n    if (-1 < (int)(result << 0x1b)) {\n      *out_param = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(result << 0x1d) < 0) {\n      if ((undefined4 *)input_param[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input_param[0xd] != input_param + 0x11) {\n          update_data_structure_080061f0(out_param);\n        }\n        input_param[0xd] = 0;\n      }\n      *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) & 0xffdb;\n      input_param[1] = 0;\n      *input_param = input_param[4];\n    }\n    *(ushort *)(input_param + 3) = *(ushort *)(input_param + 3) | 8;\n  }\n  if ((input_param[4] == 0) && ((*(ushort *)(input_param + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_set_protection_08006e10(out_param,input_param);\n  }\n  info = *(ushort *)(input_param + 3);\n  result = info & 1;\n  if ((info & 1) == 0) {\n    if (-1 < (int)((uint)info << 0x1e)) {\n      result = input_param[5];\n    }\n    input_param[2] = result;\n  }\n  else {\n    input_param[2] = 0;\n    input_param[6] = -input_param[5];\n  }\n  if (input_param[4] == 0) {\n    info = *(ushort *)(input_param + 3);\n    result = (int)(short)info & 0x80;\n    if (result != 0) {\nLAB_08006a14:\n      *(ushort *)(input_param + 3) = info | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080069e4": "update_and_allocate_memory_080069e4",
                "param_1": "out_param",
                "param_2": "input_param",
                "iVar1": "data_ptr",
                "uVar2": "result",
                "uVar3": "info"
            },
            "calling": [
                "FUN_08006344",
                "FUN_08006394"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006cb4",
                "FUN_08006e10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_080069e4(undefined4 *param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  uint uVar2;\n  ushort uVar3;\n  \n  iVar1 = DAT_200000f8;\n  if ((DAT_200000f8 != 0) && (*(int *)(DAT_200000f8 + 0x18) == 0)) {\n    FUNC_08006cb4(DAT_200000f8);\n  }\n  if (param_2 == &DAT_08007904) {\n    param_2 = *(undefined4 **)(iVar1 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_08007924) {\n    param_2 = *(undefined4 **)(iVar1 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_080078e4) {\n    param_2 = *(undefined4 **)(iVar1 + 0xc);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = (uint)uVar3;\n  if (-1 < (int)(uVar2 << 0x1c)) {\n    if (-1 < (int)(uVar2 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_08006a14;\n    }\n    if ((int)(uVar2 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_data_structure_080061f0(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    allocate_memory_and_set_protection_08006e10(param_1,param_2);\n  }\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar2 = uVar3 & 1;\n  if ((uVar3 & 1) == 0) {\n    if (-1 < (int)((uint)uVar3 << 0x1e)) {\n      uVar2 = param_2[5];\n    }\n    param_2[2] = uVar2;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] == 0) {\n    uVar3 = *(ushort *)(param_2 + 3);\n    uVar2 = (int)(short)uVar3 & 0x80;\n    if (uVar2 != 0) {\nLAB_08006a14:\n      *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n      return 0xffffffff;\n    }\n  }\n  else {\n    uVar2 = 0;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_08006ac0": {
            "entrypoint": "0x08006ac0",
            "current_name": "process_data_08006ac0",
            "code": "\nvoid processData_08006ac0(void)\n\n{\n  uint *dataPointer;\n  int offset;\n  int *dataArray;\n  int *updateArray;\n  uint dataValue;\n  ushort flag;\n  int tempVar1;\n  code *functionPointer;\n  int tempVar2;\n  uint tempVar3;\n  code *unrecoveredJumpTable;\n  bool conditionFlag;\n  undefined8 loopResult;\n  \n  initialize_data_08006f00(6);\n  unrecoveredJumpTable = (code *)0x8006acf;\n  loopResult = infinite_loop_0800573c(1);\n  dataArray = (int *)((ulonglong)loopResult >> 0x20);\n  dataPointer = (uint *)loopResult;\n  flag = *(ushort *)(dataArray + 3);\n  dataValue = (uint)flag;\n  if ((int)(dataValue << 0x1c) < 0) {\n    offset = dataArray[4];\n    if (offset != 0) {\n      tempVar1 = dataValue << 0x1e;\n      conditionFlag = tempVar1 != 0;\n      if (conditionFlag) {\n        tempVar1 = 0;\n      }\n      tempVar2 = *dataArray;\n      if (!conditionFlag) {\n        tempVar1 = dataArray[5];\n      }\n      *dataArray = offset;\n      dataArray[2] = tempVar1;\n      for (tempVar2 = tempVar2 - offset; 0 < tempVar2; tempVar2 = tempVar2 - tempVar1) {\n        tempVar1 = (*(code *)dataArray[10])(dataPointer,dataArray[8],offset,tempVar2);\n        if (tempVar1 < 1) {\n          flag = *(ushort *)(dataArray + 3);\n          goto LAB_08006bc6;\n        }\n        offset = offset + tempVar1;\n      }\n    }\n  }\n  else if (((0 < dataArray[1]) || (0 < dataArray[0x10])) &&\n          (functionPointer = (code *)dataArray[0xb], functionPointer != (code *)0x0)) {\n    tempVar3 = *dataPointer;\n    *dataPointer = 0;\n    if ((flag & 0x1000) == 0) {\n      offset = (*functionPointer)(dataPointer,dataArray[8],dataValue & 0x1000,1);\n      if ((offset == -1) && (dataValue = *dataPointer, dataValue != 0)) {\n        if ((dataValue != 0x1d) && (dataValue != 0x16)) {\n          *(ushort *)(dataArray + 3) = *(ushort *)(dataArray + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          (*unrecoveredJumpTable)();\n          return;\n        }\n        *dataPointer = tempVar3;\n        goto LAB_08006aea;\n      }\n    }\n    else {\n      offset = dataArray[0x15];\n    }\n    if (((int)((uint)*(ushort *)(dataArray + 3) << 0x1d) < 0) &&\n       (offset = offset - dataArray[1], dataArray[0xd] != 0)) {\n      offset = offset - dataArray[0x10];\n    }\n    offset = (*(code *)dataArray[0xb])(dataPointer,dataArray[8],offset,0);\n    flag = *(ushort *)(dataArray + 3);\n    if ((offset == -1) &&\n       ((0x1d < *dataPointer || (-1 < (int)((0x20400001U >> (*dataPointer & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n      *(ushort *)(dataArray + 3) = flag | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)(0xffffffff);\n      return;\n    }\n    dataArray[1] = 0;\n    *dataArray = dataArray[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((offset != -1 || (*dataPointer == 0)))) {\n      dataArray[0x15] = offset;\n    }\n    updateArray = (int *)dataArray[0xd];\n    *dataPointer = tempVar3;\n    if (updateArray != (int *)0x0) {\n      if (updateArray != dataArray + 0x11) {\n        update_data_structure_080061f0(dataPointer);\n      }\n      dataArray[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      (*unrecoveredJumpTable)();\n      return;\n    }\n  }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*unrecoveredJumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006ac0": "process_data_08006ac0",
                "puVar1": "dataPointer",
                "iVar2": "offset",
                "piVar3": "dataArray",
                "piVar4": "updateArray",
                "uVar5": "dataValue",
                "uVar6": "flag",
                "iVar7": "tempVar1",
                "pcVar8": "functionPointer",
                "iVar9": "tempVar2",
                "uVar10": "tempVar3",
                "UNRECOVERED_JUMPTABLE_00": "unrecoveredJumpTable",
                "bVar11": "conditionFlag",
                "uVar12": "loopResult"
            },
            "calling": [
                "FUN_08007090",
                "FUN_0800611c"
            ],
            "called": [
                "FUN_080061f0",
                "FUN_08006f00",
                "FUN_0800573c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006be0": {
            "entrypoint": "0x08006be0",
            "current_name": "process_data_08006be0",
            "code": "\nundefined4 processData_08006be0(uint *inputData,int *outputData)\n\n{\n  undefined4 returnValue;\n  int count;\n  int *tempPtr;\n  uint value;\n  ushort flags;\n  int step;\n  undefined4 param4;\n  undefined4 param5;\n  code *callback;\n  int loopCount;\n  uint originalValue;\n  code *jumpTable;\n  bool checkResult;\n  \n  if (outputData[4] != 0) {\n    if ((inputData != (uint *)0x0) && (inputData[6] == 0)) {\n      initialize_memory_blocks_08006cb4();\n    }\n    if (outputData == &DAT_08007904) {\n      outputData = (int *)inputData[1];\n    }\n    else if (outputData == (int *)&DAT_08007924) {\n      outputData = (int *)inputData[2];\n    }\n    else if (outputData == (int *)&DAT_080078e4) {\n      outputData = (int *)inputData[3];\n    }\n    if (*(short *)(outputData + 3) != 0) {\n      flags = *(ushort *)(outputData + 3);\n      value = (uint)flags;\n      if ((int)(value << 0x1c) < 0) {\n        count = outputData[4];\n        if (count != 0) {\n          step = value << 0x1e;\n          checkResult = step != 0;\n          if (checkResult) {\n            step = 0;\n          }\n          loopCount = *outputData;\n          if (!checkResult) {\n            step = outputData[5];\n          }\n          *outputData = count;\n          outputData[2] = step;\n          for (loopCount = loopCount - count; 0 < loopCount; loopCount = loopCount - step) {\n            step = (*(code *)outputData[10])(inputData,outputData[8],count,loopCount,param4,param5);\n            if (step < 1) {\n              flags = *(ushort *)(outputData + 3);\n              goto LAB_08006bc6;\n            }\n            count = count + step;\n          }\n        }\n      }\n      else if (((0 < outputData[1]) || (0 < outputData[0x10])) &&\n              (callback = (code *)outputData[0xb], callback != (code *)0x0)) {\n        originalValue = *inputData;\n        *inputData = 0;\n        if ((flags & 0x1000) == 0) {\n          count = (*callback)(inputData,outputData[8],value & 0x1000,1);\n          if ((count == -1) && (value = *inputData, value != 0)) {\n            if ((value != 0x1d) && (value != 0x16)) {\n              *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              returnValue = (*jumpTable)();\n              return returnValue;\n            }\n            *inputData = originalValue;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          count = outputData[0x15];\n        }\n        if (((int)((uint)*(ushort *)(outputData + 3) << 0x1d) < 0) &&\n           (count = count - outputData[1], outputData[0xd] != 0)) {\n          count = count - outputData[0x10];\n        }\n        count = (*(code *)outputData[0xb])(inputData,outputData[8],count,0);\n        flags = *(ushort *)(outputData + 3);\n        if ((count == -1) &&\n           ((0x1d < *inputData || (-1 < (int)((0x20400001U >> (*inputData & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(outputData + 3) = flags | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)(0xffffffff);\n          return returnValue;\n        }\n        outputData[1] = 0;\n        *outputData = outputData[4];\n        if (((int)((uint)flags << 0x13) < 0) && ((count != -1 || (*inputData == 0)))) {\n          outputData[0x15] = count;\n        }\n        tempPtr = (int *)outputData[0xd];\n        *inputData = originalValue;\n        if (tempPtr != (int *)0x0) {\n          if (tempPtr != outputData + 0x11) {\n            update_data_structure_080061f0(inputData);\n          }\n          outputData[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          returnValue = (*jumpTable)();\n          return returnValue;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      returnValue = (*jumpTable)(0);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006be0": "process_data_08006be0",
                "param_1": "inputData",
                "param_2": "outputData",
                "uVar1": "returnValue",
                "iVar2": "count",
                "piVar3": "tempPtr",
                "uVar4": "value",
                "uVar5": "flags",
                "iVar6": "step",
                "unaff_r4": "param4",
                "unaff_r5": "param5",
                "pcVar7": "callback",
                "iVar8": "loopCount",
                "uVar9": "originalValue",
                "UNRECOVERED_JUMPTABLE_00": "jumpTable",
                "bVar10": "checkResult"
            },
            "calling": [
                "FUN_08006344"
            ],
            "called": [
                "FUN_08006cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_08006be0(uint *param_1,int *param_2)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int *piVar3;\n  uint uVar4;\n  ushort uVar5;\n  int iVar6;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  code *pcVar7;\n  int iVar8;\n  uint uVar9;\n  code *UNRECOVERED_JUMPTABLE_00;\n  bool bVar10;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != (uint *)0x0) && (param_1[6] == 0)) {\n      FUNC_08006cb4();\n    }\n    if (param_2 == &DAT_08007904) {\n      param_2 = (int *)param_1[1];\n    }\n    else if (param_2 == (int *)&DAT_08007924) {\n      param_2 = (int *)param_1[2];\n    }\n    else if (param_2 == (int *)&DAT_080078e4) {\n      param_2 = (int *)param_1[3];\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      uVar5 = *(ushort *)(param_2 + 3);\n      uVar4 = (uint)uVar5;\n      if ((int)(uVar4 << 0x1c) < 0) {\n        iVar2 = param_2[4];\n        if (iVar2 != 0) {\n          iVar6 = uVar4 << 0x1e;\n          bVar10 = iVar6 != 0;\n          if (bVar10) {\n            iVar6 = 0;\n          }\n          iVar8 = *param_2;\n          if (!bVar10) {\n            iVar6 = param_2[5];\n          }\n          *param_2 = iVar2;\n          param_2[2] = iVar6;\n          for (iVar8 = iVar8 - iVar2; 0 < iVar8; iVar8 = iVar8 - iVar6) {\n            iVar6 = (*(code *)param_2[10])(param_1,param_2[8],iVar2,iVar8,unaff_r4,unaff_r5);\n            if (iVar6 < 1) {\n              uVar5 = *(ushort *)(param_2 + 3);\n              goto LAB_08006bc6;\n            }\n            iVar2 = iVar2 + iVar6;\n          }\n        }\n      }\n      else if (((0 < param_2[1]) || (0 < param_2[0x10])) &&\n              (pcVar7 = (code *)param_2[0xb], pcVar7 != (code *)0x0)) {\n        uVar9 = *param_1;\n        *param_1 = 0;\n        if ((uVar5 & 0x1000) == 0) {\n          iVar2 = (*pcVar7)(param_1,param_2[8],uVar4 & 0x1000,1);\n          if ((iVar2 == -1) && (uVar4 = *param_1, uVar4 != 0)) {\n            if ((uVar4 != 0x1d) && (uVar4 != 0x16)) {\n              *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006b90. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n              return uVar1;\n            }\n            *param_1 = uVar9;\n            goto LAB_08006aea;\n          }\n        }\n        else {\n          iVar2 = param_2[0x15];\n        }\n        if (((int)((uint)*(ushort *)(param_2 + 3) << 0x1d) < 0) &&\n           (iVar2 = iVar2 - param_2[1], param_2[0xd] != 0)) {\n          iVar2 = iVar2 - param_2[0x10];\n        }\n        iVar2 = (*(code *)param_2[0xb])(param_1,param_2[8],iVar2,0);\n        uVar5 = *(ushort *)(param_2 + 3);\n        if ((iVar2 == -1) &&\n           ((0x1d < *param_1 || (-1 < (int)((0x20400001U >> (*param_1 & 0xff)) << 0x1f))))) {\nLAB_08006bc6:\n          *(ushort *)(param_2 + 3) = uVar5 | 0x40;\n                    /* WARNING: Could not recover jumptable at 0x08006bd0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0xffffffff);\n          return uVar1;\n        }\n        param_2[1] = 0;\n        *param_2 = param_2[4];\n        if (((int)((uint)uVar5 << 0x13) < 0) && ((iVar2 != -1 || (*param_1 == 0)))) {\n          param_2[0x15] = iVar2;\n        }\n        piVar3 = (int *)param_2[0xd];\n        *param_1 = uVar9;\n        if (piVar3 != (int *)0x0) {\n          if (piVar3 != param_2 + 0x11) {\n            update_data_structure_080061f0(param_1);\n          }\n          param_2[0xd] = 0;\n                    /* WARNING: Could not recover jumptable at 0x08006b66. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n          uVar1 = (*UNRECOVERED_JUMPTABLE_00)();\n          return uVar1;\n        }\n      }\nLAB_08006aea:\n                    /* WARNING: Could not recover jumptable at 0x08006aec. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n      uVar1 = (*UNRECOVERED_JUMPTABLE_00)(0);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_08006c40": {
            "entrypoint": "0x08006c40",
            "current_name": "initialize_memory_block_08006c40",
            "code": "\nvoid initializeMemoryBlock_08006c40(undefined4 *memoryBlock,undefined2 value1,undefined2 value2)\n\n{\n  *memoryBlock = 0;\n  memoryBlock[1] = 0;\n  memoryBlock[2] = 0;\n  *(undefined2 *)(memoryBlock + 3) = value1;\n  memoryBlock[0x19] = 0;\n  *(undefined2 *)((int)memoryBlock + 0xe) = value2;\n  memoryBlock[4] = 0;\n  memoryBlock[5] = 0;\n  memoryBlock[6] = 0;\n  fill_memory_080061e0(memoryBlock + 0x17,0,8);\n  memoryBlock[8] = memoryBlock;\n  memoryBlock[9] = 0x8006f39;\n  memoryBlock[10] = 0x8006f5b;\n  memoryBlock[0xb] = 0x8006f93;\n  memoryBlock[0xc] = &LAB_08006fb6_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006c40": "initialize_memory_block_08006c40",
                "param_1": "memoryBlock",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c88": {
            "entrypoint": "0x08006c88",
            "current_name": "allocate_and_initialize_memory_08006c88",
            "code": "\nundefined4 * allocate_and_initialize_memory_08006c88(undefined4 memory,int size)\n\n{\n  undefined4 *allocated_memory;\n  int offset;\n  \n  offset = (size + -1) * 0x68;\n  allocated_memory = (undefined4 *)allocate_and_assign_memory_08006288(memory,offset + 0x74);\n  if (allocated_memory != (undefined4 *)0x0) {\n    *allocated_memory = 0;\n    allocated_memory[1] = size;\n    allocated_memory[2] = allocated_memory + 3;\n    fill_memory_080061e0(allocated_memory + 3,0,offset + 0x68);\n  }\n  return allocated_memory;\n}\n\n",
            "renaming": {
                "FUN_08006c88": "allocate_and_initialize_memory_08006c88",
                "param_1": "memory",
                "param_2": "size",
                "puVar1": "allocated_memory",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006288",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006cb4": {
            "entrypoint": "0x08006cb4",
            "current_name": "initialize_memory_blocks_08006cb4",
            "code": "\nvoid initializeMemoryBlocks_08006cb4(undefined4 *ptr)\n\n{\n  undefined4 result;\n  undefined4 *tempPtr;\n  \n  if (ptr[6] == 0) {\n    ptr[0x12] = 0;\n    ptr[0x13] = 0;\n    ptr[0x14] = 0;\n    tempPtr = &DAT_200000fc;\n    ptr[10] = &LAB_08006c34_1;\n    if (ptr == &DAT_200000fc) {\n      tempPtr = (undefined4 *)0x1;\n    }\n    if (ptr == &DAT_200000fc) {\n      ptr[6] = tempPtr;\n    }\n    result = find_initialized_pointer_08006d14();\n    ptr[1] = result;\n    result = find_initialized_pointer_08006d14(ptr);\n    ptr[2] = result;\n    result = find_initialized_pointer_08006d14(ptr);\n    ptr[3] = result;\n    initialize_memory_block_08006c40(ptr[1],4,0);\n    initialize_memory_block_08006c40(ptr[2],9,1);\n    initialize_memory_block_08006c40(ptr[3],0x12,2);\n    ptr[6] = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006cb4": "initialize_memory_blocks_08006cb4",
                "param_1": "ptr",
                "uVar1": "result",
                "puVar2": "tempPtr"
            },
            "calling": [
                "FUN_080068f0",
                "FUN_080069e4",
                "FUN_08006be0",
                "FUN_08006344",
                "FUN_08006394",
                "FUN_08006d14"
            ],
            "called": [
                "FUN_08006c40",
                "FUN_08006d14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d14": {
            "entrypoint": "0x08006d14",
            "current_name": "find_initialized_pointer_08006d14",
            "code": "\nint * findInitializedPointer_08006d14(undefined4 *output,undefined4 size,undefined4 res,undefined4 value)\n\n{\n  int *currentPointer;\n  int *innerPointer;\n  int **pointerArray;\n  \n  if (DAT_20000114 == 0) {\n    initialize_memory_blocks_08006cb4(&DAT_200000fc);\n  }\n  pointerArray = (int **)&DAT_20000144;\n  do {\n    innerPointer = pointerArray[2];\n    currentPointer = pointerArray[1];\n    while (currentPointer = (int *)((int)currentPointer + -1), -1 < (int)currentPointer) {\n      if (*(short *)(innerPointer + 3) == 0) {\n        *(undefined2 *)((int)innerPointer + 0xe) = 0xffff;\n        innerPointer[0x19] = 0;\n        *(undefined2 *)(innerPointer + 3) = 1;\n        *innerPointer = 0;\n        innerPointer[2] = 0;\n        innerPointer[1] = 0;\n        innerPointer[4] = 0;\n        innerPointer[5] = 0;\n        innerPointer[6] = 0;\n        fill_memory_080061e0(innerPointer + 0x17,0,8,1,value);\n        innerPointer[0xd] = 0;\n        innerPointer[0xe] = 0;\n        innerPointer[0x12] = 0;\n        innerPointer[0x13] = 0;\n        return innerPointer;\n      }\n      innerPointer = innerPointer + 0x1a;\n    }\n    if (*pointerArray == (int *)0x0) {\n      currentPointer = (int *)allocate_and_initialize_memory_08006c88(output,4);\n      *pointerArray = currentPointer;\n      if (currentPointer == (int *)0x0) {\n        *output = 0xc;\n        return (int *)0x0;\n      }\n    }\n    pointerArray = (int **)*pointerArray;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08006d14": "find_initialized_pointer_08006d14",
                "param_1": "output",
                "param_2": "size",
                "param_3": "res",
                "param_4": "value",
                "piVar1": "currentPointer",
                "piVar2": "innerPointer",
                "ppiVar3": "pointerArray"
            },
            "calling": [
                "FUN_08006cb4"
            ],
            "called": [
                "FUN_08006c88",
                "FUN_08006cb4",
                "FUN_080061e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint * FUN_08006d14(undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  int *piVar1;\n  int *piVar2;\n  int **ppiVar3;\n  \n  if (DAT_20000114 == 0) {\n    FUNC_08006cb4(&DAT_200000fc);\n  }\n  ppiVar3 = (int **)&DAT_20000144;\n  do {\n    piVar2 = ppiVar3[2];\n    piVar1 = ppiVar3[1];\n    while (piVar1 = (int *)((int)piVar1 + -1), -1 < (int)piVar1) {\n      if (*(short *)(piVar2 + 3) == 0) {\n        *(undefined2 *)((int)piVar2 + 0xe) = 0xffff;\n        piVar2[0x19] = 0;\n        *(undefined2 *)(piVar2 + 3) = 1;\n        *piVar2 = 0;\n        piVar2[2] = 0;\n        piVar2[1] = 0;\n        piVar2[4] = 0;\n        piVar2[5] = 0;\n        piVar2[6] = 0;\n        fill_memory_080061e0(piVar2 + 0x17,0,8,1,param_4);\n        piVar2[0xd] = 0;\n        piVar2[0xe] = 0;\n        piVar2[0x12] = 0;\n        piVar2[0x13] = 0;\n        return piVar2;\n      }\n      piVar2 = piVar2 + 0x1a;\n    }\n    if (*ppiVar3 == (int *)0x0) {\n      piVar1 = (int *)allocate_and_initialize_memory_08006c88(param_1,4);\n      *ppiVar3 = piVar1;\n      if (piVar1 == (int *)0x0) {\n        *param_1 = 0xc;\n        return (int *)0x0;\n      }\n    }\n    ppiVar3 = (int **)*ppiVar3;\n  } while( true );\n}\n\n"
        },
        "FUN_08006dc8": {
            "entrypoint": "0x08006dc8",
            "current_name": "check_and_set_memory_protection_08006dc8",
            "code": "\nundefined4 check_and_set_memory_protection_08006dc8(undefined4 param1,int param2,undefined4 *result,uint *is_executable)\n\n{\n  int result_code;\n  undefined4 protection_flag;\n  undefined temp_buffer [4];\n  uint memory_permissions;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (result_code = set_memory_protection_08007004(param1,(int)*(short *)(param2 + 0xe),temp_buffer), result_code < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      protection_flag = 0x40;\n      goto LAB_08006e08;\n    }\n  }\n  else {\n    *is_executable = (uint)((memory_permissions & 0xf000) == 0x2000);\n  }\n  protection_flag = 0x400;\nLAB_08006e08:\n  *result = protection_flag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08006dc8": "check_and_set_memory_protection_08006dc8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "result",
                "param_4": "is_executable",
                "iVar1": "result_code",
                "uVar2": "protection_flag",
                "auStack_4c": "temp_buffer",
                "local_48": "memory_permissions"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08007004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e10": {
            "entrypoint": "0x08006e10",
            "current_name": "allocate_memory_and_set_protection_08006e10",
            "code": "\nvoid allocateMemoryAndSetProtection_08006e10(int memoryPointer,int *parameters)\n\n{\n  ushort status;\n  int allocationStatus;\n  int size;\n  int *tempPointer;\n  \n  if (-1 < (int)((uint)*(ushort *)(parameters + 3) << 0x1e)) {\n    size = memoryPointer;\n    tempPointer = parameters;\n    status = check_and_set_memory_protection_08006dc8(memoryPointer,parameters,&size,&tempPointer);\n    allocationStatus = allocate_and_assign_memory_08006288(memoryPointer,size);\n    if (allocationStatus != 0) {\n      *(undefined **)(memoryPointer + 0x28) = &LAB_08006c34_1;\n      *parameters = allocationStatus;\n      *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) | 0x80;\n      parameters[4] = allocationStatus;\n      parameters[5] = size;\n      if ((tempPointer != (int *)0x0) &&\n         (allocationStatus = update_return_value_08007028(memoryPointer,(int)*(short *)((int)parameters + 0xe)), allocationStatus != 0)) {\n        *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(parameters + 3) = status | *(ushort *)(parameters + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(parameters + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(parameters + 3) = *(ushort *)(parameters + 3) & 0xfffc | 2;\n  }\n  *parameters = (int)parameters + 0x47;\n  parameters[4] = (int)parameters + 0x47;\n  parameters[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006e10": "allocate_memory_and_set_protection_08006e10",
                "param_1": "memoryPointer",
                "param_2": "parameters",
                "uVar1": "status",
                "iVar2": "allocationStatus",
                "local_18": "size",
                "local_14": "tempPointer"
            },
            "calling": [
                "FUN_080069e4"
            ],
            "called": [
                "FUN_08006288",
                "FUN_08006dc8",
                "FUN_08007028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006e90": {
            "entrypoint": "0x08006e90",
            "current_name": "find_first_occurrence_08006e90",
            "code": "\nchar * findFirstOccurrence_08006e90(char *str,char target,int length)\n\n{\n  char *currentChar;\n  char *nextChar;\n  \n  currentChar = str;\n  do {\n    nextChar = currentChar;\n    if (nextChar == str + length) {\n      return (char *)0x0;\n    }\n    currentChar = nextChar + 1;\n  } while (*nextChar != target);\n  return nextChar;\n}\n\n",
            "renaming": {
                "FUN_08006e90": "find_first_occurrence_08006e90",
                "param_1": "str",
                "param_2": "target",
                "param_3": "length",
                "pcVar1": "currentChar",
                "pcVar2": "nextChar"
            },
            "calling": [
                "FUN_080066b0",
                "FUN_08006394"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006eac": {
            "entrypoint": "0x08006eac",
            "current_name": "FUNC_08006eac",
            "code": "\nvoid FUNC_08006eac(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eac": "FUNC_08006eac"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006eae": {
            "entrypoint": "0x08006eae",
            "current_name": "FUNC_08006eae",
            "code": "\nvoid FUNC_08006eae(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006eae": "FUNC_08006eae"
            },
            "calling": [
                "FUN_08006288",
                "FUN_080061f0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08006f00": {
            "entrypoint": "0x08006f00",
            "current_name": "initialize_data_08006f00",
            "code": "\nint initializeData_08006f00(uint inputParam)\n\n{\n  int *dataPointer;\n  undefined4 thunkResult;\n  int returnValue;\n  code *codePointer;\n  undefined4 unaff_r4;\n  undefined4 unaff_r5;\n  undefined4 in_lr;\n  undefined4 *dataPointerPointer;\n  \n  dataPointer = DAT_200000f8;\n  dataPointerPointer = &DAT_200000f8;\n  if (0x1f < inputParam) {\n    *DAT_200000f8 = 0x16;\n    return -1;\n  }\n  returnValue = DAT_200000f8[0x11];\n  if ((returnValue != 0) && (codePointer = *(code **)(returnValue + inputParam * 4), codePointer != (code *)0x0)) {\n    if (codePointer != (code *)0x1) {\n      if (codePointer == (code *)0xffffffff) {\n        *DAT_200000f8 = 0x16;\n        return 1;\n      }\n      *(undefined4 *)(returnValue + inputParam * 4) = 0;\n      (*codePointer)(inputParam);\n    }\n    return 0;\n  }\n  thunkResult = thunk_initialize_08005750(DAT_200000f8);\n  DAT_200006a4 = 0;\n  returnValue = initialize_data_08005740(thunkResult,inputParam,inputParam,0,dataPointerPointer,unaff_r4,unaff_r5,in_lr);\n  if ((returnValue == -1) && (DAT_200006a4 != 0)) {\n    *dataPointer = DAT_200006a4;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08006f00": "initialize_data_08006f00",
                "param_1": "inputParam",
                "piVar1": "dataPointer",
                "uVar2": "thunkResult",
                "iVar3": "returnValue",
                "pcVar4": "codePointer",
                "puVar5": "dataPointerPointer"
            },
            "calling": [
                "FUN_08006ac0"
            ],
            "called": [
                "FUN_08005740",
                "thunk_FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08005750": {
            "entrypoint": "0x08006f34",
            "current_name": "get_return_value_thunk_08005750",
            "code": "\nundefined4 getReturnValue_thunk_08005750(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "thunk_FUN_08005750": "get_return_value_thunk_08005750"
            },
            "calling": [
                "FUN_08006f00"
            ],
            "called": [
                "FUN_08005750"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f38": {
            "entrypoint": "0x08006f38",
            "current_name": "update_data_08006f38",
            "code": "\nvoid updateData_08006f38(undefined4 param,int data)\n\n{\n  int result;\n  uint updatedValue;\n  bool isSuccessful;\n  \n  result = initialize_application_0800706c(param,(int)*(short *)(data + 0xe));\n  isSuccessful = -1 < result;\n  if (isSuccessful) {\n    updatedValue = *(int *)(data + 0x54) + result;\n  }\n  else {\n    updatedValue = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (isSuccessful) {\n    *(uint *)(data + 0x54) = updatedValue;\n  }\n  if (!isSuccessful) {\n    *(short *)(data + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f38": "update_data_08006f38",
                "param_1": "param",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isSuccessful"
            },
            "calling": [],
            "called": [
                "FUN_0800706c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f5a": {
            "entrypoint": "0x08006f5a",
            "current_name": "initialize_and_process_data_08006f5a",
            "code": "\nvoid initialize_and_process_data_08006f5a(int *output,int data,undefined4 param1,undefined4 param2)\n\n{\n  int result;\n  undefined4 unused_param1;\n  undefined4 unused_param2;\n  undefined4 unused_param3;\n  \n  if ((int)((uint)*(ushort *)(data + 0xc) << 0x17) < 0) {\n    initialize_and_check_system_08007048(output,(int)*(short *)(data + 0xe),0,2);\n  }\n  *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) & 0xefff;\n  DAT_200006a4 = 0;\n  result = find_and_process_data_08005730((int)*(short *)(data + 0xe),param1,param2,param2,param2,unused_param1,\n                       unused_param2,unused_param3);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f5a": "initialize_and_process_data_08006f5a",
                "param_1": "output",
                "param_2": "data",
                "param_3": "param1",
                "param_4": "param2",
                "iVar1": "result",
                "unaff_r4": "unused_param1",
                "unaff_r5": "unused_param2",
                "in_lr": "unused_param3"
            },
            "calling": [],
            "called": [
                "FUN_08007048",
                "FUN_08005730"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006f92": {
            "entrypoint": "0x08006f92",
            "current_name": "initialize_and_update_system_08006f92",
            "code": "\nvoid initialize_and_update_system_08006f92(undefined4 system_context,int data_buffer)\n\n{\n  int system_status;\n  ushort updated_flags;\n  bool is_error;\n  \n  system_status = initialize_and_check_system_08007048(system_context,(int)*(short *)(data_buffer + 0xe));\n  is_error = system_status == -1;\n  if (is_error) {\n    updated_flags = *(ushort *)(data_buffer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data_buffer + 0x54) = system_status;\n    updated_flags = *(ushort *)(data_buffer + 0xc) | 0x1000;\n  }\n  if (is_error) {\n    *(ushort *)(data_buffer + 0xc) = updated_flags;\n  }\n  if (!is_error) {\n    *(ushort *)(data_buffer + 0xc) = updated_flags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08006f92": "initialize_and_update_system_08006f92",
                "param_1": "system_context",
                "param_2": "data_buffer",
                "iVar1": "system_status",
                "uVar2": "updated_flags",
                "bVar3": "is_error"
            },
            "calling": [],
            "called": [
                "FUN_08007048"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007004": {
            "entrypoint": "0x08007004",
            "current_name": "set_memory_protection_08007004",
            "code": "\nvoid setMemoryProtection_08007004(int *output,undefined4 startAddress,undefined4 endAddress,undefined4 permissions)\n\n{\n  int result;\n  \n  DAT_200006a4 = 0;\n  result = set_memory_protection_0800571a(startAddress,endAddress,endAddress,0,permissions);\n  if ((result == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007004": "set_memory_protection_08007004",
                "param_1": "output",
                "param_2": "startAddress",
                "param_3": "endAddress",
                "param_4": "permissions",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08006dc8"
            ],
            "called": [
                "FUN_0800571a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007028": {
            "entrypoint": "0x08007028",
            "current_name": "update_return_value_08007028",
            "code": "\nvoid updateReturnValue_08007028(int *output,undefined4 input)\n\n{\n  int returnValue;\n  \n  DAT_200006a4 = 0;\n  returnValue = get_return_value_08005724(input);\n  if ((returnValue == -1) && (DAT_200006a4 != 0)) {\n    *output = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007028": "update_return_value_08007028",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_08006e10"
            ],
            "called": [
                "FUN_08005724"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007048": {
            "entrypoint": "0x08007048",
            "current_name": "initialize_and_check_system_08007048",
            "code": "\nvoid initialize_and_check_system_08007048(int *output_variable,undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  int system_init_result;\n  \n  DAT_200006a4 = 0;\n  system_init_result = initialize_system_08005728(input_1,input_2,input_3,input_3,input_3);\n  if ((system_init_result == -1) && (DAT_200006a4 != 0)) {\n    *output_variable = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007048": "initialize_and_check_system_08007048",
                "param_1": "output_variable",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "iVar1": "system_init_result"
            },
            "calling": [
                "FUN_08006f92",
                "FUN_08006f5a"
            ],
            "called": [
                "FUN_08005728"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800706c": {
            "entrypoint": "0x0800706c",
            "current_name": "initialize_application_0800706c",
            "code": "\nvoid initializeApplication_0800706c(int *result,undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  int initResult;\n  \n  DAT_200006a4 = 0;\n  initResult = initialize_application_0800572c(param1,param2,param3,param3,param3);\n  if ((initResult == -1) && (DAT_200006a4 != 0)) {\n    *result = DAT_200006a4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800706c": "initialize_application_0800706c",
                "param_1": "result",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_08006f38"
            ],
            "called": [
                "FUN_0800572c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007090": {
            "entrypoint": "0x08007090",
            "current_name": "process_data_08007090",
            "code": "\nvoid process_data_08007090(void)\n\n{\n  code *jump_table;\n  \n  jump_table = process_data_08007090;\n  process_data_08007090_08006ac0();\n  if (-1 < DAT_2000062c << 0x1f) {\n    DAT_2000062c = 1;\n  }\n  if (-1 < DAT_20000628 << 0x1f) {\n    DAT_20000628 = 1;\n  }\n  if (-1 < DAT_20000624 << 0x1f) {\n    DAT_20000624 = 1;\n  }\n  if (-1 < DAT_20000620 << 0x1f) {\n    DAT_20000620 = 1;\n  }\n  if (-1 < DAT_2000061c << 0x1f) {\n    DAT_2000061c = 1;\n  }\n  if (-1 < DAT_20000618 << 0x1f) {\n    DAT_20000618 = 1;\n  }\n  if (-1 < DAT_20000614 << 0x1f) {\n    DAT_20000614 = 1;\n  }\n  if (-1 < DAT_20000610 << 0x1f) {\n    DAT_20000610 = 1;\n  }\n  if (-1 < DAT_2000060c << 0x1f) {\n    DAT_2000060c = 1;\n  }\n  if (-1 < DAT_20000608 << 0x1f) {\n    DAT_20000608 = 1;\n  }\n  if (-1 < DAT_20000604 << 0x1f) {\n    DAT_20000604 = 1;\n  }\n  if (-1 < DAT_20000600 << 0x1f) {\n    DAT_20000600 = 1;\n  }\n                    /* WARNING: Could not recover jumptable at 0x08007128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007090": "process_data_08007090",
                "UNRECOVERED_JUMPTABLE": "jump_table"
            },
            "calling": [
                "FUN_080060d4"
            ],
            "called": [
                "FUN_08006ac0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08007328": {
            "entrypoint": "0x08007328",
            "current_name": "FUNC_08007328",
            "code": "\nvoid FUNC_08007328(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007328": "FUNC_08007328"
            },
            "calling": [
                "FUN_0800010c",
                "FUN_08006198"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007334": {
            "entrypoint": "0x08007334",
            "current_name": "FUNC_08007334",
            "code": "\nvoid FUNC_08007334(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08007334": "FUNC_08007334"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 177047,
    "layers": [
        [
            "FUN_0800010c",
            "FUN_08000178",
            "FUN_08000190",
            "FUN_08000194",
            "FUN_0800040c",
            "FUN_0800042c",
            "FUN_080006d4",
            "FUN_080008ba",
            "FUN_0800092c",
            "FUN_08000a2c",
            "FUN_08000a58",
            "FUN_08000aa8",
            "FUN_08000ae8",
            "FUN_08001294",
            "FUN_08001cac",
            "FUN_08001cc4",
            "FUN_08001e40",
            "FUN_08001e48",
            "FUN_08001f80",
            "FUN_08002470",
            "FUN_08002494",
            "FUN_080024f8",
            "FUN_08002514",
            "FUN_08002540",
            "FUN_08002560",
            "FUN_08002582",
            "FUN_0800258c",
            "FUN_08002624",
            "FUN_08002810",
            "FUN_0800281e",
            "FUN_08002848",
            "FUN_080028d2",
            "FUN_080028de",
            "FUN_08002ab8",
            "FUN_08002ad8",
            "FUN_08002af8",
            "FUN_08002b84",
            "FUN_08002c10",
            "FUN_08002c54",
            "FUN_08002ca6",
            "FUN_08002db2",
            "FUN_08002efc",
            "FUN_08002f9c",
            "FUN_0800306c",
            "FUN_0800365c",
            "FUN_08003a68",
            "FUN_08003c44",
            "FUN_08004092",
            "FUN_08004110",
            "FUN_0800417c",
            "FUN_08004198",
            "FUN_0800455a",
            "FUN_080045a2",
            "FUN_080047e8",
            "FUN_080047f4",
            "FUN_0800480a",
            "FUN_08004828",
            "FUN_08004848",
            "FUN_08004884",
            "FUN_080049f0",
            "FUN_08004c5e",
            "FUN_08004c8a",
            "FUN_08004cb2",
            "FUN_08004ce2",
            "FUN_08004d06",
            "FUN_08004d18",
            "FUN_08004d40",
            "FUN_08004d44",
            "FUN_08004d90",
            "FUN_08004df4",
            "FUN_08004e70",
            "FUN_080055bc",
            "FUN_080056d8",
            "FUN_08005714",
            "FUN_0800571a",
            "FUN_08005724",
            "FUN_08005728",
            "FUN_0800572c",
            "FUN_0800573c",
            "FUN_08005740",
            "FUN_08005750",
            "FUN_0800591e",
            "FUN_08005a44",
            "FUN_08005b24",
            "FUN_08005b3c",
            "FUN_08005c1c",
            "FUN_08005cb6",
            "FUN_08005cc0",
            "FUN_08005f8c",
            "FUN_08006158",
            "FUN_08006198",
            "FUN_080061e0",
            "FUN_080061f0",
            "FUN_080065c0",
            "FUN_08006e90",
            "thunk_FUN_08005750"
        ],
        [
            "FUN_080004f8",
            "FUN_0800074c",
            "FUN_080009b8",
            "FUN_08000aec",
            "FUN_08001a66",
            "FUN_08001c3c",
            "FUN_08001f84",
            "FUN_080020f0",
            "FUN_08003688",
            "FUN_08003c50",
            "FUN_08003c70",
            "FUN_08003c90",
            "FUN_08003ea0",
            "FUN_080040b0",
            "FUN_0800412c",
            "FUN_080043b4",
            "FUN_08004974",
            "FUN_08004b34",
            "FUN_08004b94",
            "FUN_08004b9e",
            "FUN_08004bb0",
            "FUN_08004c30",
            "FUN_08004c48",
            "FUN_08004c78",
            "FUN_08004ca2",
            "FUN_08004cce",
            "FUN_08004df8",
            "FUN_08004e12",
            "FUN_08004e74",
            "FUN_08004ec4",
            "FUN_08004ef4",
            "FUN_0800548c",
            "FUN_080054b0",
            "FUN_08005568",
            "FUN_080055e0",
            "FUN_08005604",
            "FUN_08005c38",
            "FUN_08005c96",
            "FUN_08005ce8",
            "FUN_08006112",
            "FUN_080066b0",
            "FUN_08006920",
            "FUN_08006c40",
            "FUN_08006f00",
            "FUN_08007004",
            "FUN_08007028",
            "FUN_08007048",
            "FUN_0800706c"
        ],
        [
            "FUN_080009a8",
            "FUN_080009c8",
            "FUN_080009dc",
            "FUN_080009f0",
            "FUN_08001918",
            "FUN_08001c88",
            "FUN_08002004",
            "FUN_0800213c",
            "FUN_0800224c",
            "FUN_08002348",
            "FUN_08002cf2",
            "FUN_08002d1c",
            "FUN_0800316c",
            "FUN_08003ad4",
            "FUN_08003afa",
            "FUN_08003da4",
            "FUN_08003ed8",
            "FUN_08003f18",
            "FUN_08004204",
            "FUN_08004478",
            "FUN_080045fe",
            "FUN_08004618",
            "FUN_0800492c",
            "FUN_08004948",
            "FUN_080054d4",
            "FUN_08005510",
            "FUN_08005848",
            "FUN_08005890",
            "FUN_080058e0",
            "FUN_08005b54",
            "FUN_08005cd4",
            "FUN_08005d42",
            "FUN_08005d8a",
            "FUN_08005fc8",
            "FUN_08006288",
            "FUN_08006ac0",
            "FUN_08006dc8",
            "FUN_08006f38",
            "FUN_08006f92"
        ],
        [
            "FUN_08000a04",
            "FUN_08000a18",
            "FUN_080012a2",
            "FUN_080015b2",
            "FUN_08001814",
            "FUN_08001b48",
            "FUN_08001cd0",
            "FUN_08002384",
            "FUN_080032b4",
            "FUN_08003520",
            "FUN_0800441a",
            "FUN_080046b8",
            "FUN_08004b3c",
            "FUN_08004e20",
            "FUN_0800598a",
            "FUN_08005bb0",
            "FUN_08005d82",
            "FUN_08006c88",
            "FUN_08006e10"
        ],
        [
            "FUN_080012c0",
            "FUN_080012e8",
            "FUN_080015f8",
            "FUN_080016b4",
            "FUN_080018f8",
            "FUN_08001960",
            "FUN_080019f6",
            "FUN_080033b8",
            "FUN_08004a4c",
            "FUN_08004c52",
            "FUN_080057b4",
            "FUN_08005da8"
        ],
        [
            "FUN_08001310",
            "FUN_0800157c",
            "FUN_08001a44",
            "FUN_08001ab0",
            "FUN_08001c32",
            "FUN_08005754",
            "FUN_08005f2c"
        ],
        [
            "FUN_0800134e",
            "FUN_0800135a",
            "FUN_08001366",
            "FUN_0800138e",
            "FUN_08001550",
            "FUN_08001b18",
            "FUN_08005f40",
            "FUN_08005f5e"
        ],
        [
            "FUN_08000cd0",
            "FUN_080013a4"
        ],
        [
            "FUN_080014ba"
        ],
        [
            "FUN_08001510"
        ],
        [
            "FUN_08000b08"
        ],
        [
            "FUN_08007090"
        ],
        [
            "FUN_080060d4"
        ],
        [
            "FUN_080060e4"
        ],
        [
            "FUN_0800282c"
        ],
        [
            "FUN_080069e4",
            "FUN_08006be0",
            "FUN_08006d14"
        ],
        [
            "FUN_08006cb4"
        ],
        [
            "FUN_08006344"
        ],
        [
            "FUN_08006370"
        ],
        [
            "FUN_08006394"
        ],
        [
            "FUN_08006174",
            "FUN_080068f0"
        ],
        [
            "FUN_08004f4c",
            "FUN_0800611c"
        ],
        [
            "FUN_08005384",
            "FUN_08005a68"
        ],
        [
            "FUN_08000bcc",
            "FUN_080053d4"
        ],
        [
            "FUN_08005730",
            "FUN_08005f6c"
        ],
        [
            "FUN_08006f5a"
        ]
    ],
    "locked_functions": []
}