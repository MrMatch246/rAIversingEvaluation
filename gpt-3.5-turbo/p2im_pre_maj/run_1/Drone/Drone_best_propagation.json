{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_integers_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateIntegers_08000134(undefined4 source,undefined4 destination)\n\n{\n  return CONCAT44(destination,source);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_integers_08000134",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *str)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_ptr;\n  \n  current_ptr = str;\n  do {\n    next_char = current_ptr + 1;\n    current_char = *current_ptr;\n    current_ptr = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "str",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_ptr"
            },
            "calling": [
                "serialPrint"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_unsigned_floating_point_addition_08000168",
            "code": "\nulonglong calculateUnsignedFloatingPointAddition_08000168(uint float1,uint float2,uint float3,uint float4)\n\n{\n  int bitShiftAmount1;\n  byte carryFlag;\n  uint sum1;\n  uint float1Fraction;\n  uint float2Fraction;\n  uint float1Exponent;\n  uint float2Exponent;\n  int bitShiftAmount2;\n  uint sum2;\n  uint float3Fraction;\n  uint float4Fraction;\n  uint float3Exponent;\n  bool isCarry;\n  bool isIntermediateResultZero;\n  bool isSubtraction;\n  \n  float1Exponent = float4 ^ 0x80000000;\n  sum2 = float2 << 1;\n  float4 = float4 << 1;\n  isCarry = ((float2 ^ float1Exponent) & 0x7fffffff) == 0;\n  isIntermediateResultZero = isCarry && float1 == float3;\n  if (!isCarry || float1 != float3) {\n    isIntermediateResultZero = (sum2 | float1) == 0;\n  }\n  if (!isIntermediateResultZero) {\n    isIntermediateResultZero = (float4 | float3) == 0;\n  }\n  bitShiftAmount2 = (int)sum2 >> 0x15;\n  if (!isIntermediateResultZero) {\n    isIntermediateResultZero = bitShiftAmount2 == -1;\n  }\n  bitShiftAmount1 = (int)float4 >> 0x15;\n  if (!isIntermediateResultZero) {\n    isIntermediateResultZero = bitShiftAmount1 == -1;\n  }\n  if (isIntermediateResultZero) {\n    if (bitShiftAmount2 == -1 || bitShiftAmount1 == -1) {\n      sum2 = float1Exponent;\n      float4Fraction = float3;\n      if (bitShiftAmount2 == -1) {\n        sum2 = float2;\n        float4Fraction = float1;\n      }\n      if (bitShiftAmount2 != -1 || bitShiftAmount1 != -1) {\n        float3 = float4Fraction;\n        float1Exponent = sum2;\n      }\n      isIntermediateResultZero = (float4Fraction | sum2 << 0xc) == 0;\n      if (isIntermediateResultZero) {\n        isIntermediateResultZero = (float3 | float1Exponent << 0xc) == 0;\n      }\n      if (isIntermediateResultZero) {\n        isIntermediateResultZero = sum2 == float1Exponent;\n      }\n      if (!isIntermediateResultZero) {\n        sum2 = sum2 | 0x80000;\n      }\n      return CONCAT44(sum2,float4Fraction);\n    }\n    if (((float2 ^ float1Exponent) & 0x7fffffff) != 0 || float1 != float3) {\n      if ((sum2 | float1) == 0) {\n        float1 = float3;\n        float2 = float1Exponent;\n      }\n      return CONCAT44(float2,float1);\n    }\n    if (float2 != float1Exponent) {\n      return 0;\n    }\n    if (sum2 >> 0x15 == 0) {\n      isIntermediateResultZero = (float1 & 0x80000000) != 0;\n      float1Exponent = float2 * 2 + (uint)isIntermediateResultZero;\n      if (CARRY4(float2,float2) || CARRY4(float2 * 2,(uint)isIntermediateResultZero)) {\n        float1Exponent = float1Exponent | 0x80000000;\n      }\n      return CONCAT44(float1Exponent,float1 << 1);\n    }\n    if (sum2 < 0xffc00000) {\n      return CONCAT44(float2 + 0x100000,float1);\n    }\n    float2 = float2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(float2 | 0x7ff00000) << 0x20;\n  }\n  sum2 = sum2 >> 0x15;\n  float4 = float4 >> 0x15;\n  float4Fraction = float4 - sum2;\n  isIntermediateResultZero = float4Fraction != 0;\n  if (float4 < sum2) {\n    float4Fraction = -float4Fraction;\n  }\n  float3Fraction = float1;\n  float2Exponent = float2;\n  if (isIntermediateResultZero && sum2 <= float4) {\n    sum2 = sum2 + float4Fraction;\n    float3Fraction = float3;\n    float2Exponent = float1Exponent;\n    float3 = float1;\n    float1Exponent = float2;\n  }\n  if (0x36 < float4Fraction) {\n    return CONCAT44(float2Exponent,float3Fraction);\n  }\n  float1Fraction = float2Exponent & 0xfffff | 0x100000;\n  if ((float2Exponent & 0x80000000) != 0) {\n    isIntermediateResultZero = float3Fraction != 0;\n    float3Fraction = -float3Fraction;\n    float1Fraction = -float1Fraction - (uint)isIntermediateResultZero;\n  }\n  float2Exponent = float1Exponent & 0xfffff | 0x100000;\n  if ((float1Exponent & 0x80000000) != 0) {\n    isIntermediateResultZero = float3 != 0;\n    float3 = -float3;\n    float2Exponent = -float2Exponent - (uint)isIntermediateResultZero;\n  }\n  if (sum2 == float4Fraction) {\n    float2Exponent = float2Exponent ^ 0x100000;\n    if (sum2 == 0) {\n      float1Fraction = float1Fraction ^ 0x100000;\n      sum2 = 1;\n    }\n    else {\n      float4Fraction = float4Fraction - 1;\n    }\n  }\n  float1Exponent = -float4Fraction + 0x20;\n  if ((int)float4Fraction < 0x21) {\n    float3Exponent = float3 << (float1Exponent & 0xff);\n    float3 = float3 >> (float4Fraction & 0xff);\n    sum1 = float3Fraction + float3;\n    float2Fraction = float2Exponent << (float1Exponent & 0xff);\n    float1Exponent = sum1 + float2Fraction;\n    float1Fraction = float1Fraction + CARRY4(float3Fraction,float3) + ((int)float2Exponent >> (float4Fraction & 0xff)) +\n            (uint)CARRY4(sum1,float2Fraction);\n  }\n  else {\n    float3Exponent = float2Exponent << (-float4Fraction + 0x40 & 0xff);\n    if (float3 != 0) {\n      float3Exponent = float3Exponent | 2;\n    }\n    float2Exponent = (int)float2Exponent >> (float4Fraction - 0x20 & 0xff);\n    float1Exponent = float3Fraction + float2Exponent;\n    float1Fraction = float1Fraction + ((int)float2Exponent >> 0x1f) + (uint)CARRY4(float3Fraction,float2Exponent);\n  }\n  float2 = float1Fraction & 0x80000000;\n  float4Fraction = float1Fraction;\n  if ((int)float1Fraction < 0) {\n    isIntermediateResultZero = float3Exponent == 0;\n    float3Exponent = -float3Exponent;\n    float4Fraction = -float1Exponent;\n    float1Exponent = -(uint)!isIntermediateResultZero - float1Exponent;\n    float4Fraction = -(uint)(isIntermediateResultZero <= float4Fraction) - float1Fraction;\n  }\n  if (0xfffff < float4Fraction) {\n    float3Fraction = sum2 - 1;\n    if (0x1fffff < float4Fraction) {\n      float3Fraction = float4Fraction & 1;\n      float4Fraction = float4Fraction >> 1;\n      carryFlag = (byte)float1Exponent;\n      float1Exponent = (uint)(float3Fraction != 0) << 0x1f | float1Exponent >> 1;\n      float3Exponent = (uint)(carryFlag & 1) << 0x1f | float3Exponent >> 1;\n      float3Fraction = sum2;\n      if (0xffbfffff < sum2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    isIntermediateResultZero = 0x7fffffff < float3Exponent;\n    if (float3Exponent == 0x80000000) {\n      isIntermediateResultZero = (float1Exponent & 1) != 0;\n    }\n    return CONCAT44(float4Fraction + float3Fraction * 0x100000 + (uint)CARRY4(float1Exponent,(uint)isIntermediateResultZero) | float2,\n                    float1Exponent + isIntermediateResultZero);\n  }\n  isCarry = (float3Exponent & 0x80000000) != 0;\n  float3Exponent = float3Exponent << 1;\n  float3Fraction = float1Exponent * 2;\n  isIntermediateResultZero = CARRY4(float1Exponent,float1Exponent);\n  float1Exponent = float1Exponent * 2 + (uint)isCarry;\n  float4Fraction = float4Fraction * 2 + (uint)(isIntermediateResultZero || CARRY4(float3Fraction,(uint)isCarry));\n  float3Fraction = sum2 - 2;\n  if ((float4Fraction & 0x100000) != 0) goto LAB_08000278;\n  float2Exponent = float1Exponent;\n  sum2 = float4Fraction;\n  if (float4Fraction == 0) {\n    float2Exponent = 0;\n    sum2 = float1Exponent;\n  }\n  bitShiftAmount2 = LZCOUNT(sum2);\n  if (float4Fraction == 0) {\n    bitShiftAmount2 = bitShiftAmount2 + 0x20;\n  }\n  float4Fraction = bitShiftAmount2 - 0xb;\n  isSubtraction = SBORROW4(float4Fraction,0x20);\n  float1Exponent = bitShiftAmount2 - 0x2b;\n  isIntermediateResultZero = (int)float1Exponent < 0;\n  isCarry = float1Exponent == 0;\n  if ((int)float4Fraction < 0x20) {\n    isSubtraction = SCARRY4(float1Exponent,0xc);\n    bitShiftAmount2 = bitShiftAmount2 + -0x1f;\n    isIntermediateResultZero = bitShiftAmount2 < 0;\n    isCarry = bitShiftAmount2 == 0;\n    float1Exponent = float4Fraction;\n    if (!isCarry && isIntermediateResultZero == isSubtraction) {\n      float2Exponent = sum2 << (float4Fraction & 0xff);\n      sum2 = sum2 >> (0xcU - bitShiftAmount2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isCarry || isIntermediateResultZero != isSubtraction) {\n    float3Exponent = 0x20 - float1Exponent;\n  }\n  sum2 = sum2 << (float1Exponent & 0xff);\n  if (isCarry || isIntermediateResultZero != isSubtraction) {\n    sum2 = sum2 | float2Exponent >> (float3Exponent & 0xff);\n  }\n  if (isCarry || isIntermediateResultZero != isSubtraction) {\n    float2Exponent = float2Exponent << (float1Exponent & 0xff);\n  }\nLAB_080002f0:\n  if ((int)float4Fraction <= (int)float3Fraction) {\n    return CONCAT44(sum2 + (float3Fraction - float4Fraction) * 0x100000 | float2,float2Exponent);\n  }\n  float1Exponent = ~(float3Fraction - float4Fraction);\n  if ((int)float1Exponent < 0x1f) {\n    bitShiftAmount2 = float1Exponent - 0x13;\n    if (bitShiftAmount2 != 0 && bitShiftAmount2 < 0 == SCARRY4(float1Exponent - 0x1f,0xc)) {\n      return CONCAT44(float1Fraction,float2Exponent >> (0x20 - (0xcU - bitShiftAmount2) & 0xff) | sum2 << (0xcU - bitShiftAmount2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    float1Exponent = float1Exponent + 1;\n    return CONCAT44(float2 | sum2 >> (float1Exponent & 0xff),\n                    float2Exponent >> (float1Exponent & 0xff) | sum2 << (0x20 - float1Exponent & 0xff));\n  }\n  return CONCAT44(float1Fraction,sum2 >> (float1Exponent - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_unsigned_floating_point_addition_08000168",
                "param_1": "float1",
                "param_2": "float2",
                "param_3": "float3",
                "param_4": "float4",
                "iVar1": "bitShiftAmount1",
                "bVar2": "carryFlag",
                "uVar3": "sum1",
                "uVar4": "float1Fraction",
                "uVar5": "float2Fraction",
                "uVar6": "float1Exponent",
                "uVar7": "float2Exponent",
                "iVar8": "bitShiftAmount2",
                "uVar9": "sum2",
                "uVar10": "float3Fraction",
                "uVar11": "float4Fraction",
                "uVar12": "float3Exponent",
                "bVar13": "isCarry",
                "bVar14": "isIntermediateResultZero",
                "bVar15": "isSubtraction"
            },
            "calling": [
                "taskScheduler",
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_product_0800016c",
            "code": "\nulonglong calculate_product_0800016c(uint num1,uint num2,uint num3,uint num4)\n\n{\n  int bit_shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int bit_shift2;\n  uint temp4;\n  uint temp5;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool is_equal;\n  bool check_condition1;\n  bool check_condition2;\n  \n  temp4 = num2 << 1;\n  result1 = num4 << 1;\n  is_equal = ((num2 ^ num4) & 0x7fffffff) == 0;\n  check_condition1 = is_equal && num1 == num3;\n  if (!is_equal || num1 != num3) {\n    check_condition1 = (temp4 | num1) == 0;\n  }\n  if (!check_condition1) {\n    check_condition1 = (result1 | num3) == 0;\n  }\n  bit_shift2 = (int)temp4 >> 0x15;\n  if (!check_condition1) {\n    check_condition1 = bit_shift2 == -1;\n  }\n  bit_shift1 = (int)result1 >> 0x15;\n  if (!check_condition1) {\n    check_condition1 = bit_shift1 == -1;\n  }\n  if (check_condition1) {\n    if (bit_shift2 == -1 || bit_shift1 == -1) {\n      result1 = num4;\n      temp4 = num3;\n      if (bit_shift2 == -1) {\n        result1 = num2;\n        temp4 = num1;\n      }\n      if (bit_shift2 != -1 || bit_shift1 != -1) {\n        num3 = temp4;\n        num4 = result1;\n      }\n      check_condition1 = (temp4 | result1 << 0xc) == 0;\n      if (check_condition1) {\n        check_condition1 = (num3 | num4 << 0xc) == 0;\n      }\n      if (check_condition1) {\n        check_condition1 = result1 == num4;\n      }\n      if (!check_condition1) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,temp4);\n    }\n    if (((num2 ^ num4) & 0x7fffffff) != 0 || num1 != num3) {\n      if ((temp4 | num1) == 0) {\n        num1 = num3;\n        num2 = num4;\n      }\n      return CONCAT44(num2,num1);\n    }\n    if (num2 != num4) {\n      return 0;\n    }\n    if (temp4 >> 0x15 == 0) {\n      check_condition1 = (num1 & 0x80000000) != 0;\n      result1 = num2 * 2 + (uint)check_condition1;\n      if (CARRY4(num2,num2) || CARRY4(num2 * 2,(uint)check_condition1)) {\n        result1 = result1 | 0x80000000;\n      }\n      return CONCAT44(result1,num1 << 1);\n    }\n    if (temp4 < 0xffc00000) {\n      return CONCAT44(num2 + 0x100000,num1);\n    }\n    num2 = num2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(num2 | 0x7ff00000) << 0x20;\n  }\n  temp4 = temp4 >> 0x15;\n  result1 = result1 >> 0x15;\n  result2 = result1 - temp4;\n  check_condition1 = result2 != 0;\n  if (result1 < temp4) {\n    result2 = -result2;\n  }\n  temp5 = num1;\n  temp3 = num2;\n  if (check_condition1 && temp4 <= result1) {\n    temp4 = temp4 + result2;\n    temp5 = num3;\n    temp3 = num4;\n    num3 = num1;\n    num4 = num2;\n  }\n  if (0x36 < result2) {\n    return CONCAT44(temp3,temp5);\n  }\n  result1 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    check_condition1 = temp5 != 0;\n    temp5 = -temp5;\n    result1 = -result1 - (uint)check_condition1;\n  }\n  temp3 = num4 & 0xfffff | 0x100000;\n  if ((num4 & 0x80000000) != 0) {\n    check_condition1 = num3 != 0;\n    num3 = -num3;\n    temp3 = -temp3 - (uint)check_condition1;\n  }\n  if (temp4 == result2) {\n    temp3 = temp3 ^ 0x100000;\n    if (temp4 == 0) {\n      result1 = result1 ^ 0x100000;\n      temp4 = 1;\n    }\n    else {\n      result2 = result2 - 1;\n    }\n  }\n  result4 = -result2 + 0x20;\n  if ((int)result2 < 0x21) {\n    result3 = num3 << (result4 & 0xff);\n    num3 = num3 >> (result2 & 0xff);\n    temp1 = temp5 + num3;\n    temp2 = temp3 << (result4 & 0xff);\n    result4 = temp1 + temp2;\n    result1 = result1 + CARRY4(temp5,num3) + ((int)temp3 >> (result2 & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    result3 = temp3 << (-result2 + 0x40 & 0xff);\n    if (num3 != 0) {\n      result3 = result3 | 2;\n    }\n    temp3 = (int)temp3 >> (result2 - 0x20 & 0xff);\n    result4 = temp5 + temp3;\n    result1 = result1 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp5,temp3);\n  }\n  num2 = result1 & 0x80000000;\n  result2 = result1;\n  if ((int)result1 < 0) {\n    check_condition1 = result3 == 0;\n    result3 = -result3;\n    result2 = -result4;\n    result4 = -(uint)!check_condition1 - result4;\n    result2 = -(uint)(check_condition1 <= result2) - result1;\n  }\n  if (0xfffff < result2) {\n    temp5 = temp4 - 1;\n    if (0x1fffff < result2) {\n      result1 = result2 & 1;\n      result2 = result2 >> 1;\n      carry = (byte)result4;\n      result4 = (uint)(result1 != 0) << 0x1f | result4 >> 1;\n      result3 = (uint)(carry & 1) << 0x1f | result3 >> 1;\n      temp5 = temp4;\n      if (0xffbfffff < temp4 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    check_condition1 = 0x7fffffff < result3;\n    if (result3 == 0x80000000) {\n      check_condition1 = (result4 & 1) != 0;\n    }\n    return CONCAT44(result2 + temp5 * 0x100000 + (uint)CARRY4(result4,(uint)check_condition1) | num2,\n                    result4 + check_condition1);\n  }\n  is_equal = (result3 & 0x80000000) != 0;\n  result3 = result3 << 1;\n  temp5 = result4 * 2;\n  check_condition1 = CARRY4(result4,result4);\n  result4 = result4 * 2 + (uint)is_equal;\n  result2 = result2 * 2 + (uint)(check_condition1 || CARRY4(temp5,(uint)is_equal));\n  temp5 = temp4 - 2;\n  if ((result2 & 0x100000) != 0) goto LAB_08000278;\n  temp3 = result4;\n  temp4 = result2;\n  if (result2 == 0) {\n    temp3 = 0;\n    temp4 = result4;\n  }\n  bit_shift2 = LZCOUNT(temp4);\n  if (result2 == 0) {\n    bit_shift2 = bit_shift2 + 0x20;\n  }\n  result4 = bit_shift2 - 0xb;\n  check_condition2 = SBORROW4(result4,0x20);\n  result2 = bit_shift2 - 0x2b;\n  check_condition1 = (int)result2 < 0;\n  is_equal = result2 == 0;\n  if ((int)result4 < 0x20) {\n    check_condition2 = SCARRY4(result2,0xc);\n    bit_shift2 = bit_shift2 + -0x1f;\n    check_condition1 = bit_shift2 < 0;\n    is_equal = bit_shift2 == 0;\n    result2 = result4;\n    if (!is_equal && check_condition1 == check_condition2) {\n      temp3 = temp4 << (result4 & 0xff);\n      temp4 = temp4 >> (0xcU - bit_shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || check_condition1 != check_condition2) {\n    result3 = 0x20 - result2;\n  }\n  temp4 = temp4 << (result2 & 0xff);\n  if (is_equal || check_condition1 != check_condition2) {\n    temp4 = temp4 | temp3 >> (result3 & 0xff);\n  }\n  if (is_equal || check_condition1 != check_condition2) {\n    temp3 = temp3 << (result2 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)result4 <= (int)temp5) {\n    return CONCAT44(temp4 + (temp5 - result4) * 0x100000 | num2,temp3);\n  }\n  result2 = ~(temp5 - result4);\n  if ((int)result2 < 0x1f) {\n    bit_shift2 = result2 - 0x13;\n    if (bit_shift2 != 0 && bit_shift2 < 0 == SCARRY4(result2 - 0x1f,0xc)) {\n      return CONCAT44(result1,temp3 >> (0x20 - (0xcU - bit_shift2) & 0xff) | temp4 << (0xcU - bit_shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    result2 = result2 + 1;\n    return CONCAT44(num2 | temp4 >> (result2 & 0xff),\n                    temp3 >> (result2 & 0xff) | temp4 << (0x20 - result2 & 0xff));\n  }\n  return CONCAT44(result1,temp4 >> (result2 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_product_0800016c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "num3",
                "param_4": "num4",
                "iVar1": "bit_shift1",
                "bVar2": "carry",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "iVar6": "bit_shift2",
                "uVar7": "temp4",
                "uVar8": "temp5",
                "uVar9": "result1",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "bVar13": "is_equal",
                "bVar14": "check_condition1",
                "bVar15": "check_condition2"
            },
            "calling": [
                "__ieee754_atan2",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "__ieee754_sqrt",
                "rint",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "shift_and_concat_08000404",
            "code": "\nulonglong shiftAndConcat_08000404(uint input)\n\n{\n  uint result;\n  uint absoluteInput;\n  uint shiftAmount;\n  int leadingZeros;\n  uint shiftedValue;\n  uint signBit;\n  uint remainingBits;\n  bool isNegative;\n  bool isZero;\n  bool carryOverflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  signBit = input & 0x80000000;\n  absoluteInput = input;\n  if ((int)signBit < 0) {\n    absoluteInput = -input;\n  }\n  result = 0;\n  leadingZeros = LZCOUNT(absoluteInput);\n  shiftedValue = leadingZeros + 0x15;\n  carryOverflow = SBORROW4(shiftedValue,0x20);\n  shiftAmount = leadingZeros - 0xb;\n  isNegative = (int)shiftAmount < 0;\n  isZero = shiftAmount == 0;\n  if (shiftedValue < 0x20) {\n    carryOverflow = SCARRY4(shiftAmount,0xc);\n    isNegative = false;\n    isZero = leadingZeros + 1 == 0;\n    shiftAmount = shiftedValue;\n    if (!isZero && carryOverflow == false) {\n      result = absoluteInput << shiftedValue;\n      absoluteInput = absoluteInput >> (0xcU - (leadingZeros + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != carryOverflow) {\n    remainingBits = 0x20 - shiftAmount;\n  }\n  absoluteInput = absoluteInput << (shiftAmount & 0xff);\n  if (isZero || isNegative != carryOverflow) {\n    absoluteInput = absoluteInput | 0U >> (remainingBits & 0xff);\n  }\n  if (isZero || isNegative != carryOverflow) {\n    result = 0 << (shiftAmount & 0xff);\n  }\nLAB_080002f0:\n  if (shiftedValue < 0x433) {\n    return CONCAT44(absoluteInput + (0x432 - shiftedValue) * 0x100000 | signBit,result);\n  }\n  shiftAmount = ~(0x432 - shiftedValue);\n  if (0x1e < (int)shiftAmount) {\n    return CONCAT44(input,absoluteInput >> (shiftAmount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeros = shiftAmount - 0x13;\n  if (leadingZeros == 0 || leadingZeros < 0 != SCARRY4(shiftAmount - 0x1f,0xc)) {\n    shiftAmount = shiftAmount + 1;\n    return CONCAT44(signBit | absoluteInput >> (shiftAmount & 0xff),\n                    result >> (shiftAmount & 0xff) | absoluteInput << (0x20 - shiftAmount & 0xff));\n  }\n  return CONCAT44(input,result >> (0x20 - (0xcU - leadingZeros) & 0xff) | absoluteInput << (0xcU - leadingZeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "shift_and_concat_08000404",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "absoluteInput",
                "uVar3": "shiftAmount",
                "iVar4": "leadingZeros",
                "uVar5": "shiftedValue",
                "uVar6": "signBit",
                "in_r12": "remainingBits",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "carryOverflow"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "bitwise_transform_08000428",
            "code": "\nulonglong bitwiseTransform_08000428(uint input_value,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint leftShiftedFlag;\n  uint tempValue;\n  uint resultPart1;\n  uint shiftedResult;\n  uint shiftedInput;\n  int shiftAmount;\n  uint shiftedResult2;\n  uint constantValue;\n  bool isLessThan;\n  bool isZero;\n  bool isNegative;\n  \n  shiftedInput = input_value << 1;\n  isZero = shiftedInput == 0;\n  leftShiftedFlag = (uint)((input_value & 0x80000000) != 0) << 0x1f;\n  shiftedResult = (uint)((int)shiftedInput >> 3) >> 1;\n  resultPart1 = leftShiftedFlag | shiftedResult;\n  input_value = input_value << 0x1d;\n  if (!isZero) {\n    param4 = shiftedInput & 0xff000000;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff000000;\n  }\n  if (!isZero) {\n    return CONCAT44(resultPart1,input_value) ^ 0x3800000000000000;\n  }\n  if (shiftedInput == 0 || param4 == 0xff000000) {\n    return CONCAT44(resultPart1,input_value);\n  }\n  tempValue = input_value;\n  shiftedInput = shiftedResult;\n  if (shiftedResult == 0) {\n    tempValue = 0;\n    shiftedInput = input_value;\n  }\n  shiftAmount = LZCOUNT(shiftedInput);\n  if (shiftedResult == 0) {\n    shiftAmount = shiftAmount + 0x20;\n  }\n  shiftedResult2 = shiftAmount - 0xb;\n  isNegative = SBORROW4(shiftedResult2,0x20);\n  shiftedResult = shiftAmount - 0x2b;\n  isZero = (int)shiftedResult < 0;\n  isLessThan = shiftedResult == 0;\n  if ((int)shiftedResult2 < 0x20) {\n    isNegative = SCARRY4(shiftedResult,0xc);\n    shiftAmount = shiftAmount + -0x1f;\n    isZero = shiftAmount < 0;\n    isLessThan = shiftAmount == 0;\n    shiftedResult = shiftedResult2;\n    if (!isLessThan && isZero == isNegative) {\n      tempValue = shiftedInput << (shiftedResult2 & 0xff);\n      shiftedInput = shiftedInput >> (0xcU - shiftAmount & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isLessThan || isZero != isNegative) {\n    constantValue = 0x20 - shiftedResult;\n  }\n  shiftedInput = shiftedInput << (shiftedResult & 0xff);\n  if (isLessThan || isZero != isNegative) {\n    shiftedInput = shiftedInput | tempValue >> (constantValue & 0xff);\n  }\n  if (isLessThan || isZero != isNegative) {\n    tempValue = tempValue << (shiftedResult & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shiftedResult2 < 0x381) {\n    return CONCAT44(shiftedInput + (0x380 - shiftedResult2) * 0x100000 | leftShiftedFlag,tempValue);\n  }\n  shiftedResult = ~(0x380 - shiftedResult2);\n  if ((int)shiftedResult < 0x1f) {\n    shiftAmount = shiftedResult - 0x13;\n    if (shiftAmount != 0 && shiftAmount < 0 == SCARRY4(shiftedResult - 0x1f,0xc)) {\n      return CONCAT44(resultPart1,tempValue >> (0x20 - (0xcU - shiftAmount) & 0xff) | shiftedInput << (0xcU - shiftAmount & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shiftedResult = shiftedResult + 1;\n    return CONCAT44(leftShiftedFlag | shiftedInput >> (shiftedResult & 0xff),\n                    tempValue >> (shiftedResult & 0xff) | shiftedInput << (0x20 - shiftedResult & 0xff));\n  }\n  return CONCAT44(resultPart1,shiftedInput >> (shiftedResult - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "bitwise_transform_08000428",
                "param_1": "input_value",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "leftShiftedFlag",
                "uVar2": "tempValue",
                "uVar3": "resultPart1",
                "uVar4": "shiftedResult",
                "uVar5": "shiftedInput",
                "iVar6": "shiftAmount",
                "uVar7": "shiftedResult2",
                "in_r12": "constantValue",
                "bVar8": "isLessThan",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_bitwise_result_080004d0",
            "code": "\nulonglong calculate_bitwise_result_080004d0(undefined4 input_param1,uint input_param2,uint input_param3,uint input_param4)\n\n{\n  ulonglong temp1;\n  longlong temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  bool temp10;\n  bool temp11;\n  bool temp12;\n  ulonglong result;\n  \n  result = CONCAT44(input_param2,input_param1);\n  temp8 = 0x7ff;\n  temp4 = input_param2 >> 0x14 & 0x7ff;\n  temp10 = temp4 == 0;\n  if (!temp10) {\n    temp7 = input_param4 >> 0x14 & 0x7ff;\n    temp10 = temp7 == 0;\n  }\n  if (!temp10) {\n    temp10 = temp4 == 0x7ff;\n  }\n  if (!temp10) {\n    temp10 = temp7 == 0x7ff;\n  }\n  if (temp10) {\n    result = calculate_bitwise_result_080004d0_080006ac();\n  }\n  temp3 = (uint)(result >> 0x20);\n  temp5 = temp4 + temp7;\n  temp4 = temp3 ^ input_param4;\n  temp3 = temp3 & ~(temp8 << 0x15);\n  input_param4 = input_param4 & ~(temp8 << 0x15);\n  temp10 = ((uint)result | temp3 << 0xc) == 0;\n  if (!temp10) {\n    temp10 = (input_param3 | input_param4 << 0xc) == 0;\n  }\n  temp3 = temp3 | 0x100000;\n  input_param4 = input_param4 | 0x100000;\n  if (temp10) {\n    input_param3 = (uint)result | input_param3;\n    input_param4 = (temp4 & 0x80000000 | temp3) ^ input_param4;\n    temp4 = temp8 >> 1;\n    temp12 = SBORROW4(temp5,temp4);\n    temp6 = temp5 - temp4;\n    temp10 = temp6 == 0;\n    temp3 = temp6;\n    if (!temp10 && (int)temp4 <= temp5) {\n      temp12 = SBORROW4(temp8,temp6);\n      temp3 = temp8 - temp6;\n      temp10 = temp8 == temp6;\n    }\n    if (!temp10 && (int)temp3 < 0 == temp12) {\n      input_param4 = input_param4 | temp6 * 0x100000;\n    }\n    if (!temp10 && (int)temp3 < 0 == temp12) {\n      return CONCAT44(input_param4,input_param3);\n    }\n    input_param4 = input_param4 | 0x100000;\n    temp8 = 0;\n    temp12 = SBORROW4(temp6,1);\n    temp6 = temp6 - 1;\n    temp10 = temp6 == 0;\n    temp4 = temp6;\n  }\n  else {\n    temp1 = (result & 0xffffffff) * (ulonglong)input_param3;\n    result = (result & 0xffffffff) * (ulonglong)input_param4 +\n             (ulonglong)temp3 * (ulonglong)input_param3 + (temp1 >> 0x20);\n    temp9 = (uint)result;\n    temp2 = (ulonglong)temp3 * (ulonglong)input_param4 + (result >> 0x20);\n    temp8 = (uint)temp2;\n    temp3 = (uint)((ulonglong)temp2 >> 0x20);\n    if ((int)temp1 != 0) {\n      temp9 = temp9 | 1;\n    }\n    temp6 = (temp5 + -0x3ff) - (uint)(temp3 < 0x200);\n    if (temp3 < 0x200) {\n      temp10 = (temp9 & 0x80000000) != 0;\n      temp9 = temp9 << 1;\n      temp2 = CONCAT44(temp3 * 2 + (uint)(CARRY4(temp8,temp8) || CARRY4(temp8 * 2,(uint)temp10)),\n                       temp8 * 2 + (uint)temp10);\n    }\n    input_param4 = temp4 & 0x80000000 | (int)((ulonglong)temp2 >> 0x20) << 0xb | (uint)temp2 >> 0x15;\n    input_param3 = (uint)temp2 << 0xb | temp9 >> 0x15;\n    temp8 = temp9 * 0x800;\n    temp11 = 0xfc < temp6;\n    temp12 = SBORROW4(temp6,0xfd);\n    temp3 = temp6 - 0xfd;\n    temp10 = temp3 == 0;\n    temp4 = temp3;\n    if (temp11 && !temp10) {\n      temp11 = 0x6ff < temp3;\n      temp12 = SBORROW4(temp3,0x700);\n      temp4 = temp6 - 0x7fd;\n      temp10 = temp3 == 0x700;\n    }\n    if (!temp11 || temp10) {\n      temp10 = 0x7fffffff < temp8;\n      if (temp8 == 0x80000000) {\n        temp10 = (temp9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_param4 + temp6 * 0x100000 + (uint)CARRY4(input_param3,(uint)temp10),input_param3 + temp10\n                     );\n    }\n  }\n  if (!temp10 && (int)temp4 < 0 == temp12) {\n    return (ulonglong)(input_param4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  temp11 = SCARRY4(temp6,0x36);\n  temp10 = (int)(temp6 + 0x36) < 0;\n  temp12 = temp6 == 0xffffffca;\n  if (temp12 || temp10 != temp11) {\n    input_param3 = 0;\n  }\n  if (temp12 || temp10 != temp11) {\n    input_param4 = input_param4 & 0x80000000;\n  }\n  if (temp12 || temp10 != temp11) {\n    return CONCAT44(input_param4,input_param3);\n  }\n  temp4 = -temp6;\n  temp3 = temp4 - 0x20;\n  if (0x1f < (int)temp4) {\n    temp6 = input_param3 >> (temp3 & 0xff) | input_param4 << (0x20 - temp3 & 0xff);\n    temp4 = (input_param4 >> (temp3 & 0xff) & ~((input_param4 & 0x80000000) >> (temp3 & 0xff))) -\n            ((int)temp6 >> 0x1f);\n    if ((temp8 | input_param3 << (0x20 - temp3 & 0xff) | temp6 << 1) == 0) {\n      temp4 = temp4 & ~(temp6 >> 0x1f);\n    }\n    return CONCAT44(input_param4,temp4) & 0x80000000ffffffff;\n  }\n  temp5 = temp4 - 0x14;\n  if (temp5 == 0 || temp5 < 0 != SCARRY4(temp3,0xc)) {\n    temp9 = input_param3 << (temp6 + 0x20 & 0xff);\n    temp3 = input_param3 >> (temp4 & 0xff) | input_param4 << (temp6 + 0x20 & 0xff);\n    temp6 = temp3 + -((int)temp9 >> 0x1f);\n    if ((temp8 | temp9 << 1) == 0) {\n      temp6 = temp6 & ~(temp9 >> 0x1f);\n    }\n    return CONCAT44((input_param4 & 0x80000000) +\n                    ((input_param4 & 0x7fffffff) >> (temp4 & 0xff)) +\n                    (uint)CARRY4(temp3,-((int)temp9 >> 0x1f)),temp6);\n  }\n  temp4 = 0xc - temp5;\n  temp6 = input_param3 << (temp4 & 0xff);\n  temp4 = input_param3 >> (0x20 - temp4 & 0xff) | input_param4 << (temp4 & 0xff);\n  temp3 = temp4 + -((int)temp6 >> 0x1f);\n  if ((temp8 | temp6 << 1) == 0) {\n    temp3 = temp3 & ~(temp6 >> 0x1f);\n  }\n  return CONCAT44((input_param4 & 0x80000000) + (uint)CARRY4(temp4,-((int)temp6 >> 0x1f)),temp3);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_bitwise_result_080004d0",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "uVar1": "temp1",
                "lVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "iVar5": "temp5",
                "uVar6": "temp6",
                "unaff_r5": "temp7",
                "uVar7": "temp8",
                "uVar8": "temp9",
                "bVar9": "temp10",
                "bVar10": "temp11",
                "bVar11": "temp12",
                "uVar12": "result"
            },
            "calling": [
                "taskScheduler",
                "scalbn",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "calculate_bitwise_result_080006ac",
            "code": "\nulonglong calculate_bitwise_result_080006ac(uint input_param_1,uint input_param_2,uint input_param_3,uint input_param_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint bit_5;\n  bool is_zero;\n  \n  bit_3 = bit_5 & input_param_4 >> 0x14;\n  if (bit_2 != bit_5 && bit_3 != bit_5) {\n    is_zero = (input_param_1 | input_param_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_param_3 | input_param_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_param_2 ^ input_param_4) & 0x80000000) << 0x20;\n    }\n    if (bit_2 == 0) {\n      bit_4 = input_param_2 & 0x80000000;\n      do {\n        bit_1 = input_param_1 & 0x80000000;\n        input_param_1 = input_param_1 << 1;\n        input_param_2 = input_param_2 * 2 + (uint)(bit_1 != 0);\n      } while ((input_param_2 & 0x100000) == 0);\n      input_param_2 = input_param_2 | bit_4;\n      if (bit_3 != 0) {\n        return concatenate_64bits(input_param_2,input_param_1);\n      }\n    }\n    do {\n      bit_3 = input_param_3 & 0x80000000;\n      input_param_3 = input_param_3 << 1;\n      input_param_4 = input_param_4 * 2 + (uint)(bit_3 != 0);\n    } while ((input_param_4 & 0x100000) == 0);\n    return concatenate_64bits(input_param_2,input_param_1);\n  }\n  is_zero = (input_param_1 | input_param_2 << 1) == 0;\n  if (is_zero) {\n    input_param_2 = input_param_4;\n    input_param_1 = input_param_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_param_3 | input_param_4 << 1) == 0;\n  }\n  bit_4 = input_param_2;\n  if (((!is_zero) && ((bit_2 != bit_5 || ((input_param_1 | input_param_2 << 0xc) == 0)))) &&\n     ((bit_3 != bit_5 || (input_param_1 = input_param_3, bit_4 = input_param_4, (input_param_3 | input_param_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_param_2 ^ input_param_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return concatenate_64bits(bit_4,input_param_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "calculate_bitwise_result_080006ac",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "bit_5",
                "bVar4": "is_zero",
                "CONCAT44": "concatenate_64bits"
            },
            "calling": [
                "__muldf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "decode_float_08000724",
            "code": "\nulonglong decode_float_08000724(undefined4 exponent,uint significand_high,uint significand_low,uint sign_and_exponent)\n\n{\n  uint normalized_exponent;\n  uint is_exponent_zero;\n  uint unaff_r5;\n  uint is_unaff_r5_zero;\n  uint is_exponent_max;\n  uint is_unaff_r5_max;\n  uint normalized_significand_high;\n  int exponent_difference;\n  uint integer_result;\n  uint unaff_r5;\n  uint temp_variable_1;\n  uint temp_variable_2;\n  uint temp_variable_3;\n  uint temp_variable_4;\n  bool is_same_exponent;\n  bool is_same_value;\n  bool carry_flag;\n  undefined8 combined_values;\n  \n  combined_values = CONCAT44(significand_high,exponent);\n  temp_variable_4 = 0x7ff;\n  normalized_significand_high = significand_high >> 0x14 & 0x7ff;\n  is_same_exponent = normalized_significand_high == 0;\n  if (!is_same_exponent) {\n    unaff_r5 = sign_and_exponent >> 0x14 & 0x7ff;\n    is_same_exponent = unaff_r5 == 0;\n  }\n  if (!is_same_exponent) {\n    is_same_exponent = normalized_significand_high == 0x7ff;\n  }\n  if (!is_same_exponent) {\n    is_same_exponent = unaff_r5 == 0x7ff;\n  }\n  if (is_same_exponent) {\n    combined_values = decode_uint_08000892();\n  }\n  integer_result = (uint)((ulonglong)combined_values >> 0x20);\n  temp_variable_2 = (uint)combined_values;\n  exponent_difference = normalized_significand_high - unaff_r5;\n  if ((significand_low | sign_and_exponent << 0xc) == 0) {\n    normalized_significand_high = (integer_result ^ sign_and_exponent) & 0x80000000 | integer_result & 0xfffff;\n    carry_flag = SCARRY4(exponent_difference,temp_variable_4 >> 1);\n    integer_result = exponent_difference + (temp_variable_4 >> 1);\n    is_same_exponent = (int)integer_result < 0;\n    is_same_value = integer_result == 0;\n    if (!is_same_value && is_same_exponent == carry_flag) {\n      carry_flag = SBORROW4(temp_variable_4,integer_result);\n      is_same_exponent = (int)(temp_variable_4 - integer_result) < 0;\n      is_same_value = temp_variable_4 == integer_result;\n    }\n    if (!is_same_value && is_same_exponent == carry_flag) {\n      normalized_significand_high = normalized_significand_high | integer_result * 0x100000;\n    }\n    if (!is_same_value && is_same_exponent == carry_flag) {\n      return CONCAT44(normalized_significand_high,temp_variable_2);\n    }\n    normalized_significand_high = normalized_significand_high | 0x100000;\n    temp_variable_4 = 0;\n    is_same_value = SBORROW4(integer_result,1);\n    integer_result = integer_result - 1;\n    is_same_exponent = integer_result == 0;\n    unaff_r5 = integer_result;\n  }\n  else {\n    unaff_r5 = (sign_and_exponent << 0xc) >> 4 | 0x10000000 | significand_low >> 0x18;\n    temp_variable_4 = significand_low << 8;\n    temp_variable_1 = (integer_result << 0xc) >> 4 | 0x10000000 | temp_variable_2 >> 0x18;\n    temp_variable_2 = temp_variable_2 * 0x100;\n    normalized_significand_high = (integer_result ^ sign_and_exponent) & 0x80000000;\n    is_same_exponent = unaff_r5 <= temp_variable_1;\n    if (temp_variable_1 == unaff_r5) {\n      is_same_exponent = temp_variable_4 <= temp_variable_2;\n    }\n    exponent_difference = exponent_difference + (uint)is_same_exponent;\n    integer_result = exponent_difference + 0x3fd;\n    if (is_same_exponent == false) {\n      unaff_r5 = unaff_r5 >> 1;\n      temp_variable_4 = (uint)((significand_low >> 0x18 & 1) != 0) << 0x1f | temp_variable_4 >> 1;\n    }\n    temp_variable_3 = temp_variable_2 - temp_variable_4;\n    temp_variable_1 = (temp_variable_1 - unaff_r5) - (uint)(temp_variable_2 < temp_variable_4);\n    is_unaff_r5_zero = unaff_r5 >> 1;\n    normalized_exponent = (uint)((unaff_r5 & 1) != 0) << 0x1f | temp_variable_4 >> 1;\n    temp_variable_2 = 0x100000;\n    unaff_r5 = 0x80000;\n    while( true ) {\n      is_same_exponent = normalized_exponent <= temp_variable_3;\n      if (is_unaff_r5_zero < temp_variable_1 || temp_variable_1 - is_unaff_r5_zero < (uint)is_same_exponent) {\n        temp_variable_3 = temp_variable_3 - normalized_exponent;\n        temp_variable_2 = temp_variable_2 | unaff_r5;\n        temp_variable_1 = (temp_variable_1 - is_unaff_r5_zero) - (uint)!is_same_exponent;\n      }\n      is_exponent_max = is_unaff_r5_zero >> 1;\n      normalized_exponent = (uint)((is_unaff_r5_zero & 1) != 0) << 0x1f | normalized_exponent >> 1;\n      is_same_value = normalized_exponent <= temp_variable_3;\n      is_same_exponent = temp_variable_1 - is_exponent_max < (uint)is_same_value;\n      temp_variable_4 = temp_variable_1;\n      if (is_exponent_max < temp_variable_1 || is_same_exponent) {\n        temp_variable_3 = temp_variable_3 - normalized_exponent;\n        temp_variable_4 = (temp_variable_1 - is_exponent_max) - (uint)!is_same_value;\n      }\n      if (is_exponent_max < temp_variable_1 || is_same_exponent) {\n        temp_variable_2 = temp_variable_2 | unaff_r5 >> 1;\n      }\n      temp_variable_1 = is_unaff_r5_zero >> 2;\n      is_exponent_zero = (uint)((is_exponent_max & 1) != 0) << 0x1f | normalized_exponent >> 1;\n      is_same_value = is_exponent_zero <= temp_variable_3;\n      is_same_exponent = temp_variable_4 - temp_variable_1 < (uint)is_same_value;\n      is_exponent_max = temp_variable_4;\n      if (temp_variable_1 < temp_variable_4 || is_same_exponent) {\n        temp_variable_3 = temp_variable_3 - is_exponent_zero;\n        is_exponent_max = (temp_variable_4 - temp_variable_1) - (uint)!is_same_value;\n      }\n      if (temp_variable_1 < temp_variable_4 || is_same_exponent) {\n        temp_variable_2 = temp_variable_2 | unaff_r5 >> 2;\n      }\n      is_unaff_r5_max = is_unaff_r5_zero >> 3;\n      normalized_exponent = (uint)((temp_variable_1 & 1) != 0) << 0x1f | is_exponent_zero >> 1;\n      is_same_value = normalized_exponent <= temp_variable_3;\n      is_same_exponent = is_exponent_max - is_unaff_r5_max < (uint)is_same_value;\n      temp_variable_1 = is_exponent_max;\n      if (is_unaff_r5_max < is_exponent_max || is_same_exponent) {\n        temp_variable_3 = temp_variable_3 - normalized_exponent;\n        temp_variable_1 = (is_exponent_max - is_unaff_r5_max) - (uint)!is_same_value;\n      }\n      if (is_unaff_r5_max < is_exponent_max || is_same_exponent) {\n        temp_variable_2 = temp_variable_2 | unaff_r5 >> 3;\n      }\n      temp_variable_4 = temp_variable_1 | temp_variable_3;\n      if (temp_variable_4 == 0) break;\n      temp_variable_1 = temp_variable_1 << 4 | temp_variable_3 >> 0x1c;\n      temp_variable_3 = temp_variable_3 << 4;\n      is_unaff_r5_zero = is_unaff_r5_zero & 0xfffffff8 | normalized_exponent >> 0x1d;\n      normalized_exponent = (is_exponent_zero >> 1) << 3;\n      unaff_r5 = unaff_r5 >> 4;\n      if (unaff_r5 == 0) {\n        is_unaff_r5_max = is_unaff_r5_zero;\n        if ((normalized_significand_high & 0x100000) != 0) goto LAB_08000842;\n        normalized_significand_high = normalized_significand_high | temp_variable_2;\n        temp_variable_2 = 0;\n        unaff_r5 = 0x80000000;\n      }\n    }\n    if ((normalized_significand_high & 0x100000) == 0) {\n      normalized_significand_high = normalized_significand_high | temp_variable_2;\n      temp_variable_2 = 0;\n    }\nLAB_08000842:\n    carry_flag = 0xfc < integer_result;\n    is_same_value = SBORROW4(integer_result,0xfd);\n    is_unaff_r5_zero = exponent_difference + 0x300;\n    is_same_exponent = is_unaff_r5_zero == 0;\n    unaff_r5 = is_unaff_r5_zero;\n    if (carry_flag && !is_same_exponent) {\n      carry_flag = 0x6ff < is_unaff_r5_zero;\n      is_same_value = SBORROW4(is_unaff_r5_zero,0x700);\n      unaff_r5 = exponent_difference - 0x400;\n      is_same_exponent = is_unaff_r5_zero == 0x700;\n    }\n    if (!carry_flag || is_same_exponent) {\n      is_same_exponent = is_unaff_r5_max <= temp_variable_1;\n      if (temp_variable_1 == is_unaff_r5_max) {\n        is_same_exponent = normalized_exponent <= temp_variable_3;\n      }\n      if (temp_variable_1 == is_unaff_r5_max && temp_variable_3 == normalized_exponent) {\n        is_same_exponent = (temp_variable_2 & 1) != 0;\n      }\n      return CONCAT44(normalized_significand_high + integer_result * 0x100000 + (uint)CARRY4(temp_variable_2,(uint)is_same_exponent),temp_variable_2 + is_same_exponent);\n    }\n  }\n  if (!is_same_exponent && (int)unaff_r5 < 0 == is_same_value) {\n    return (ulonglong)(normalized_significand_high & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  carry_flag = SCARRY4(integer_result,0x36);\n  is_same_exponent = (int)(integer_result + 0x36) < 0;\n  is_same_value = integer_result == 0xffffffca;\n  if (is_same_value || is_same_exponent != carry_flag) {\n    temp_variable_2 = 0;\n  }\n  if (is_same_value || is_same_exponent != carry_flag) {\n    normalized_significand_high = normalized_significand_high & 0x80000000;\n  }\n  if (is_same_value || is_same_exponent != carry_flag) {\n    return CONCAT44(normalized_significand_high,temp_variable_2);\n  }\n  unaff_r5 = -integer_result;\n  temp_variable_1 = unaff_r5 - 0x20;\n  if (0x1f < (int)unaff_r5) {\n    unaff_r5 = temp_variable_2 >> (temp_variable_1 & 0xff) | normalized_significand_high << (0x20 - temp_variable_1 & 0xff);\n    integer_result = (normalized_significand_high >> (temp_variable_1 & 0xff) & ~((normalized_significand_high & 0x80000000) >> (temp_variable_1 & 0xff))) -\n            ((int)unaff_r5 >> 0x1f);\n    if ((temp_variable_4 | temp_variable_2 << (0x20 - temp_variable_1 & 0xff) | unaff_r5 << 1) == 0) {\n      integer_result = integer_result & ~(unaff_r5 >> 0x1f);\n    }\n    return CONCAT44(normalized_significand_high,integer_result) & 0x80000000ffffffff;\n  }\n  exponent_difference = unaff_r5 - 0x14;\n  if (exponent_difference != 0 && exponent_difference < 0 == SCARRY4(temp_variable_1,0xc)) {\n    integer_result = 0xc - exponent_difference;\n    unaff_r5 = temp_variable_2 << (integer_result & 0xff);\n    temp_variable_2 = temp_variable_2 >> (0x20 - integer_result & 0xff) | normalized_significand_high << (integer_result & 0xff);\n    integer_result = temp_variable_2 + -((int)unaff_r5 >> 0x1f);\n    if ((temp_variable_4 | unaff_r5 << 1) == 0) {\n      integer_result = integer_result & ~(unaff_r5 >> 0x1f);\n    }\n    return CONCAT44((normalized_significand_high & 0x80000000) + (uint)CARRY4(temp_variable_2,-((int)unaff_r5 >> 0x1f)),integer_result);\n  }\n  temp_variable_1 = temp_variable_2 << (integer_result + 0x20 & 0xff);\n  temp_variable_2 = temp_variable_2 >> (unaff_r5 & 0xff) | normalized_significand_high << (integer_result + 0x20 & 0xff);\n  integer_result = temp_variable_2 + -((int)temp_variable_1 >> 0x1f);\n  if ((temp_variable_4 | temp_variable_1 << 1) == 0) {\n    integer_result = integer_result & ~(temp_variable_1 >> 0x1f);\n  }\n  return CONCAT44((normalized_significand_high & 0x80000000) +\n                  ((normalized_significand_high & 0x7fffffff) >> (unaff_r5 & 0xff)) +\n                  (uint)CARRY4(temp_variable_2,-((int)temp_variable_1 >> 0x1f)),integer_result);\n}\n\n",
            "renaming": {
                "FUN_08000724": "decode_float_08000724",
                "param_1": "exponent",
                "param_2": "significand_high",
                "param_3": "significand_low",
                "param_4": "sign_and_exponent",
                "uVar1": "normalized_exponent",
                "uVar2": "is_exponent_zero",
                "uVar3": "unaff_r5",
                "uVar4": "is_unaff_r5_zero",
                "uVar5": "is_exponent_max",
                "uVar6": "is_unaff_r5_max",
                "uVar7": "normalized_significand_high",
                "iVar8": "exponent_difference",
                "uVar9": "integer_result",
                "uVar10": "temp_variable_1",
                "uVar11": "temp_variable_2",
                "uVar12": "temp_variable_3",
                "uVar13": "temp_variable_4",
                "bVar14": "is_same_exponent",
                "bVar15": "is_same_value",
                "bVar16": "carry_flag",
                "uVar17": "combined_values"
            },
            "calling": [
                "__ieee754_atan2",
                "sqrt",
                "atan",
                "__ieee754_pow",
                "MadgwickQuaternionUpdate",
                "pow",
                "__ieee754_sqrt",
                "__ieee754_asin"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "decode_uint_08000892",
            "code": "\nulonglong decode_uint_08000892(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit_1;\n  uint bit_2;\n  uint bit_3;\n  uint bit_4;\n  uint mask;\n  bool is_zero;\n  \n  bit_3 = mask & input_4 >> 0x14;\n  bit_4 = input_2;\n  if (bit_2 != mask || bit_3 != mask) {\n    if (bit_2 == mask) {\n      if (((input_1 | input_2 << 0xc) == 0) && (input_1 = input_3, bit_4 = input_4, bit_3 != mask)\n         ) {\nhandle_zero_case:\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit_3 == mask) {\n      input_1 = input_3;\n      bit_4 = input_4;\n      if ((input_3 | input_4 << 0xc) == 0) {\nhandle_zero_case_2:\n        return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input_1 | input_2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input_3 | input_4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit_2 == 0) {\n          bit_4 = input_2 & 0x80000000;\n          do {\n            bit_1 = input_1 & 0x80000000;\n            input_1 = input_1 << 1;\n            input_2 = input_2 * 2 + (uint)(bit_1 != 0);\n          } while ((input_2 & 0x100000) == 0);\n          input_2 = input_2 | bit_4;\n          if (bit_3 != 0) {\n            return CONCAT44(input_2,input_1);\n          }\n        }\n        do {\n          bit_4 = input_3 & 0x80000000;\n          input_3 = input_3 << 1;\n          input_4 = input_4 * 2 + (uint)(bit_4 != 0);\n        } while ((input_4 & 0x100000) == 0);\n        return CONCAT44(input_2,input_1);\n      }\n      if ((input_1 | input_2 << 1) != 0) goto handle_zero_case;\n      if ((input_3 | input_4 << 1) != 0) goto handle_zero_case_2;\n    }\n  }\n  return CONCAT44(bit_4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "decode_uint_08000892",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit_1",
                "unaff_r4": "bit_2",
                "uVar2": "bit_3",
                "uVar3": "bit_4",
                "in_r12": "mask",
                "bVar4": "is_zero",
                "LAB_08000704": "handle_zero_case",
                "LAB_080006c8": "handle_zero_case_2"
            },
            "calling": [
                "__divdf3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "compare_parameters_08000904",
            "code": "\nuint compareParameters_08000904(uint firstParam,uint secondParam,uint thirdParam,uint fourthParam)\n\n{\n  uint paramDifference;\n  bool isZero;\n  bool isGreaterOrEqual;\n  \n  if (((int)(secondParam << 1) >> 0x15 == -1 || (int)(fourthParam << 1) >> 0x15 == -1) &&\n     ((((int)(secondParam << 1) >> 0x15 == -1 && ((firstParam | secondParam << 0xc) != 0)) ||\n      (((int)(fourthParam << 1) >> 0x15 == -1 && ((thirdParam | fourthParam << 0xc) != 0)))))) {\n    result 1;\n  }\n  isZero = (firstParam | secondParam << 1) == 0;\n  if (isZero) {\n    isZero = (thirdParam | fourthParam << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = secondParam == fourthParam;\n  }\n  if (isZero) {\n    isZero = firstParam == thirdParam;\n  }\n  if (!isZero) {\n    paramDifference = secondParam ^ fourthParam;\n    isZero = paramDifference == 0;\n    if (-1 < (int)paramDifference) {\n      isZero = secondParam == fourthParam;\n    }\n    isGreaterOrEqual = -1 < (int)paramDifference && fourthParam <= secondParam;\n    if (isZero) {\n      isGreaterOrEqual = thirdParam <= firstParam;\n    }\n    fourthParam = (int)fourthParam >> 0x1f;\n    if (!isGreaterOrEqual) {\n      fourthParam = ~fourthParam;\n    }\n    result fourthParam | 1;\n  }\n  result 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "compare_parameters_08000904",
                "param_1": "firstParam",
                "param_2": "secondParam",
                "param_3": "thirdParam",
                "param_4": "fourthParam",
                "uVar1": "paramDifference",
                "bVar2": "isZero",
                "bVar3": "isGreaterOrEqual",
                "return": "result"
            },
            "calling": [
                "__aeabi_cdcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "compare_floats_08000980",
            "code": "\nvoid compareFloats_08000980(undefined4 result,undefined4 status,undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cdcmpeq(value1,value2,result,status);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "compare_floats_08000980",
                "param_1": "result",
                "param_2": "status",
                "param_3": "value1",
                "param_4": "value2"
            },
            "calling": [
                "__aeabi_dcmpgt"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "compute_param_08000990",
            "code": "\nundefined4 compute_param_08000990(undefined4 input_param)\n\n{\n  perform_computation();\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08000990": "compute_param_08000990",
                "param_1": "input_param",
                "__nedf2": "perform_computation"
            },
            "calling": [
                "__aeabi_cdrcmple",
                "__aeabi_dcmplt",
                "__aeabi_dcmple",
                "__aeabi_dcmpeq"
            ],
            "called": [
                "__nedf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "is_not_zero_080009a0",
            "code": "\nbool is_not_zero_080009a0(void)\n\n{\n  char result;\n  \n  __aeabi_cdcmpeq();\n  return result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "is_not_zero_080009a0",
                "in_ZR": "result"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_cy_second_argument_null_080009b4",
            "code": "\nbool is_CY_second_argument_null_080009b4(void)\n\n{\n  char CY;\n  \n  compare_double_equality();\n  return CY == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_cy_second_argument_null_080009b4",
                "in_CY": "CY",
                "__aeabi_cdcmpeq": "compare_double_equality"
            },
            "calling": [
                "sqrt",
                "pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "is_comparison_equal_080009c8",
            "code": "\nbool is_comparison_equal_080009c8(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "is_comparison_equal_080009c8",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "__aeabi_cdcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_if_null_character_080009f0",
            "code": "\nbool check_if_null_character_080009f0(void)\n\n{\n  char input_character;\n  \n  __aeabi_cdrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_if_null_character_080009f0",
                "in_CY": "input_character"
            },
            "calling": [
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [
                "__aeabi_cdrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_08000a04",
            "code": "\nundefined4 checkParameters_08000a04(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_exponent_08000a30",
            "code": "\nuint calculate_exponent_08000a30(uint value,uint exponent)\n\n{\n  uint result;\n  uint exponent_times_2;\n  uint modified_exponent;\n  uint temp;\n  bool is_zero;\n  bool is_less_than;\n  \n  exponent_times_2 = exponent * 2;\n  is_less_than = exponent_times_2 < 0x70000000;\n  modified_exponent = exponent_times_2 + 0x90000000;\n  result = modified_exponent;\n  if (!is_less_than) {\n    temp = exponent_times_2 + 0x8fe00000;\n    result = temp;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && modified_exponent >= 0x200000) {\n    is_zero = temp == 0x1fc00000;\n  }\n  if (((is_less_than || modified_exponent < 0x200000) || 0x1fc00000 < temp) || is_zero) {\n    if ((exponent & 0x40000000) != 0) {\n      if (((int)exponent_times_2 >> 0x15 == -1) && ((value | exponent << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return exponent & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(exponent_times_2 + 0x92e00000) < 0 != signed_carry(modified_exponent,0x2e00000)) {\n      return exponent & 0x80000000;\n    }\n    exponent_times_2 = 0x18 - (exponent_times_2 + 0x92e00000 >> 0x15);\n    result = value >> (exponent_times_2 & 0xff);\n    if (value << (0x20 - exponent_times_2 & 0xff) != 0) {\n      result = result | 1;\n    }\n    modified_exponent = exponent & 0x1fffff | 0x100000;\n    value = result | modified_exponent << (0x20 - exponent_times_2 & 0xff);\n    modified_exponent = (modified_exponent >> (exponent_times_2 & 0xff)) << 1;\n  }\n  result = (exponent & 0x80000000 | value >> 0x1d) + modified_exponent * 4 + (uint)(0x7fffffff < value * 8);\n  if (value * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_exponent_08000a30",
                "param_1": "value",
                "param_2": "exponent",
                "uVar1": "result",
                "uVar2": "exponent_times_2",
                "uVar3": "modified_exponent",
                "in_r12": "temp",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "SCARRY4": "signed_carry"
            },
            "calling": [
                "taskScheduler",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "calculate_result_08000ad8",
            "code": "\nuint calculate_result_08000ad8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint result1;\n  uint result2;\n  uint result_diff;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  is_equal = result1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result1 == input4;\n  }\n  shifted_input1 = (int)result1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result1 = temp1;\n      if (shifted_input1 == -1) {\n        result1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = result1;\n      }\n      is_equal = (result1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result1 == temp1;\n      }\n      if (!is_equal) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  result_diff = input4 - result1;\n  is_equal = result_diff != 0;\n  result2 = result1;\n  if (is_equal && result1 <= input4) {\n    result2 = result1 + result_diff;\n  }\n  if (is_equal && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && result1 <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < result1) {\n    result_diff = -result_diff;\n  }\n  if (0x19 < result_diff) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (result2 == result_diff) {\n    temp2 = temp2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      result_diff = result_diff - 1;\n    }\n  }\n  result1 = result1 + ((int)temp2 >> (result_diff & 0xff));\n  temp2 = temp2 << (0x20 - result_diff & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    result1 = -result1 - (uint)is_equal;\n  }\n  if (result1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result1 = result1 * 2 + (uint)(temp1 != 0);\n    temp1 = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      result_diff = LZCOUNT(result1) - 8;\n      result1 = result1 << (result_diff & 0xff);\n      if ((int)temp1 < (int)result_diff) {\n        result1 = result1 >> (-(temp1 - result_diff) & 0xff);\n      }\n      else {\n        result1 = result1 + (temp1 - result_diff) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    temp1 = result2 - 1;\n    if (0xffffff < result1) {\n      temp1 = result1 & 1;\n      result1 = result1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = result2;\n      if (0xfd < result2) goto LAB_08000c12;\n    }\n  }\n  result1 = result1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "calculate_result_08000ad8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "result_diff",
                "bVar8": "is_equal"
            },
            "calling": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_floating_point_08000adc",
            "code": "\nuint calculateFloatingPoint_08000adc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint temp2;\n  bool isEqual;\n  \n  result2 = input1 << 1;\n  isEqual = result2 == 0;\n  if (!isEqual) {\n    input4 = input2 << 1;\n    isEqual = input4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = result2 == input4;\n  }\n  shiftedInput1 = (int)result2 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      result2 = input2;\n      if (shiftedInput1 == -1) {\n        result2 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = result2;\n      }\n      isEqual = (result2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = result2 == input2;\n      }\n      if (!isEqual) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  temp2 = input4 - result2;\n  isEqual = temp2 != 0;\n  temp1 = result2;\n  if (isEqual && result2 <= input4) {\n    temp1 = result2 + temp2;\n  }\n  if (isEqual && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    temp2 = -temp2;\n  }\n  if (0x19 < temp2) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == temp2) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      temp2 = temp2 - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (temp2 & 0xff));\n  result1 = result1 << (0x20 - temp2 & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    isEqual = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)isEqual;\n  }\n  if (result2 < 0x800000) {\n    temp2 = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(temp2 != 0);\n    temp2 = temp1 - 2;\n    if ((result2 & 0x800000) == 0) {\n      temp1 = LZCOUNT(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)temp2 < (int)temp1) {\n        result2 = result2 >> (-(temp2 - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (temp2 - temp1) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    temp2 = temp1 - 1;\n    if (0xffffff < result2) {\n      temp2 = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(temp2 != 0) << 0x1f | result1 >> 1;\n      temp2 = temp1;\n      if (0xfd < temp1) goto LAB_08000c12;\n    }\n  }\n  result2 = result2 + temp2 * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_08000adc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "bVar7": "isEqual"
            },
            "calling": [
                "taskScheduler",
                "AHRS_GetPitch",
                "AK8963_Init",
                "Motor_DistributeSpeed",
                "PID_Compute",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "decode_uint_08000c3c",
            "code": "\nuint decode_uint_08000c3c(uint input_num)\n\n{\n  uint final_result;\n  uint temp_shift;\n  int offset_value;\n  uint bit_check;\n  \n  if (input_num == 0) {\n    return 0;\n  }\n  final_result = LZCOUNT(input_num);\n  temp_shift = final_result - 8;\n  offset_value = temp_shift * -0x800000 + 0x4a800000;\n  if (7 < final_result) {\n    bit_check = 0 << (temp_shift & 0xff);\n    final_result = offset_value + (input_num << (temp_shift & 0xff)) +\n            (0U >> (0x20 - temp_shift & 0xff)) + (uint)(0x7fffffff < bit_check);\n    if (bit_check == 0x80000000) {\n      final_result = final_result & 0xfffffffe;\n    }\n    return final_result;\n  }\n  temp_shift = input_num << final_result + 0x18;\n  final_result = offset_value + ((input_num >> (0x20 - (final_result + 0x18) & 0xff)) - ((int)temp_shift >> 0x1f));\n  if ((temp_shift & 0x7fffffff) == 0) {\n    final_result = final_result & ~(temp_shift >> 0x1f);\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "decode_uint_08000c3c",
                "param_1": "input_num",
                "uVar1": "final_result",
                "uVar2": "temp_shift",
                "iVar3": "offset_value",
                "uVar4": "bit_check"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "decode_unsigned_integer_08000c44",
            "code": "\nuint decode_unsigned_integer_08000c44(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint negative_flag;\n  int result;\n  \n  negative_flag = input & 0x80000000;\n  if ((int)negative_flag < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input);\n  shift_amount = leading_zeros - 8;\n  result = ((negative_flag | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    negative_flag = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      negative_flag = negative_flag & 0xfffffffe;\n    }\n    return negative_flag;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  negative_flag = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    negative_flag = negative_flag & ~(shift_amount >> 0x1f);\n  }\n  return negative_flag;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "decode_unsigned_integer_08000c44",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "negative_flag",
                "iVar4": "result",
                "LZCOUNT": "count_leading_zeros"
            },
            "calling": [
                "taskScheduler",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint input_1,uint input_2,undefined4 variable_1,uint variable_2)\n\n{\n  longlong result_1;\n  uint result_2;\n  uint temp_1;\n  int temp_2;\n  int temp_3;\n  uint temp_4;\n  int temp_5;\n  uint temp_6;\n  bool flag_1;\n  bool flag_2;\n  \n  temp_1 = input_1 >> 0x17 & 0xff;\n  flag_1 = temp_1 == 0;\n  if (!flag_1) {\n    variable_2 = input_2 >> 0x17 & 0xff;\n    flag_1 = variable_2 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_1 == 0xff;\n  }\n  if (!flag_1) {\n    flag_1 = variable_2 == 0xff;\n  }\n  if (flag_1) {\n    variable_2 = input_2 >> 0x17 & 0xff;\n    if (temp_1 == 0xff || variable_2 == 0xff) {\n      flag_1 = input_1 == 0 || input_1 == 0x80000000;\n      result_2 = input_2;\n      if (input_1 != 0 && input_1 != 0x80000000) {\n        flag_1 = input_2 == 0;\n        result_2 = input_1;\n      }\n      if (!flag_1) {\n        flag_1 = input_2 == 0x80000000;\n      }\n      temp_6 = result_2;\n      if (((flag_1) || ((temp_1 == 0xff && ((result_2 & 0x7fffff) != 0)))) ||\n         ((variable_2 == 0xff && (temp_6 = input_2, (input_2 & 0x7fffff) != 0)))) {\n        return temp_6 | 0x7fc00000;\n      }\n      result_2 = result_2 ^ input_2;\n      goto LAB_08000e3c;\n    }\n    flag_1 = (input_1 & 0x7fffffff) == 0;\n    if (!flag_1) {\n      flag_1 = (input_2 & 0x7fffffff) == 0;\n    }\n    if (flag_1) {\n      return (input_1 ^ input_2) & 0x80000000;\n    }\n    flag_1 = temp_1 == 0;\n    result_2 = input_1 & 0x80000000;\n    while( true ) {\n      if (flag_1) {\n        input_1 = input_1 << 1;\n        flag_1 = (input_1 & 0x800000) == 0;\n      }\n      if (!flag_1) break;\n      temp_1 = temp_1 - 1;\n    }\n    input_1 = input_1 | result_2;\n    flag_1 = variable_2 == 0;\n    result_2 = input_2 & 0x80000000;\n    while( true ) {\n      if (flag_1) {\n        input_2 = input_2 << 1;\n        flag_1 = (input_2 & 0x800000) == 0;\n      }\n      if (!flag_1) break;\n      variable_2 = variable_2 - 1;\n    }\n    input_2 = input_2 | result_2;\n  }\n  temp_2 = temp_1 + variable_2;\n  temp_6 = input_1 ^ input_2;\n  temp_1 = input_1 << 9;\n  flag_1 = temp_1 == 0;\n  if (!flag_1) {\n    input_2 = input_2 << 9;\n    flag_1 = input_2 == 0;\n  }\n  if (flag_1) {\n    if (temp_1 == 0) {\n      input_2 = input_2 << 9;\n    }\n    result_2 = temp_6 & 0x80000000 | input_1 & 0x7fffff | input_2 >> 9;\n    flag_2 = SBORROW4(temp_2,0x7f);\n    temp_3 = temp_2 + -0x7f;\n    flag_1 = temp_3 == 0;\n    temp_5 = temp_3;\n    if (!flag_1 && 0x7e < temp_2) {\n      flag_2 = SBORROW4(0xff,temp_3);\n      temp_5 = 0xff - temp_3;\n      flag_1 = temp_3 == 0xff;\n    }\n    if (!flag_1 && temp_5 < 0 == flag_2) {\n      result_2 = result_2 | temp_3 * 0x800000;\n    }\n    if (!flag_1 && temp_5 < 0 == flag_2) {\n      return result_2;\n    }\n    result_2 = result_2 | 0x800000;\n    temp_4 = 0;\n    flag_2 = SBORROW4(temp_3,1);\n    temp_6 = temp_2 - 0x80;\n    flag_1 = temp_6 == 0;\n    temp_1 = temp_6;\n  }\n  else {\n    result_1 = (ulonglong)(temp_1 >> 5 | 0x8000000) * (ulonglong)(input_2 >> 5 | 0x8000000);\n    temp_4 = (uint)result_1;\n    result_2 = (uint)((ulonglong)result_1 >> 0x20);\n    flag_1 = result_2 < 0x800000;\n    if (flag_1) {\n      result_2 = result_2 << 1;\n    }\n    if (flag_1) {\n      result_2 = result_2 | temp_4 >> 0x1f;\n      temp_4 = temp_4 << 1;\n    }\n    result_2 = temp_6 & 0x80000000 | result_2;\n    temp_6 = (temp_2 + -0x7f) - (uint)flag_1;\n    flag_2 = SBORROW4(temp_6,0xfd);\n    flag_1 = temp_6 == 0xfd;\n    temp_1 = temp_6 - 0xfd;\n    if (temp_6 < 0xfe) {\n      result_2 = result_2 + temp_6 * 0x800000 + (uint)(0x7fffffff < temp_4);\n      if (temp_4 == 0x80000000) {\n        result_2 = result_2 & 0xfffffffe;\n      }\n      return result_2;\n    }\n  }\n  if (flag_1 || (int)temp_1 < 0 != flag_2) {\n    flag_1 = (int)(temp_6 + 0x19) < 0;\n    if (temp_6 == 0xffffffe7 || flag_1 != SCARRY4(temp_6,0x19)) {\n      result_2 = result_2 & 0x80000000;\n    }\n    if (temp_6 != 0xffffffe7 && flag_1 == SCARRY4(temp_6,0x19)) {\n      temp_1 = (result_2 << 1) >> (-temp_6 & 0xff);\n      temp_6 = result_2 << (temp_6 + 0x20 & 0xff);\n      temp_1 = ((uint)((result_2 & 0x80000000) != 0) << 0x1f | temp_1 >> 1) + (uint)((byte)temp_1 & 1);\n      if ((temp_4 | temp_6 << 1) == 0) {\n        temp_1 = temp_1 & ~(temp_6 >> 0x1f);\n      }\n      return temp_1;\n    }\n    return result_2;\n  }\nLAB_08000e3c:\n  return result_2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "variable_1",
                "param_4": "variable_2",
                "lVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "temp_1",
                "iVar4": "temp_2",
                "iVar5": "temp_3",
                "uVar6": "temp_4",
                "iVar7": "temp_5",
                "uVar8": "temp_6",
                "bVar9": "flag_1",
                "bVar10": "flag_2"
            },
            "calling": [
                "AHRS_GetPitch",
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "PID_Compute",
                "PID_UpdateAltitude",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate",
                "PID_Update",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "decode_and_normalize_08000e54",
            "code": "\nuint decode_and_normalize_08000e54(uint input1,uint input2,undefined4 param3,uint input3)\n\n{\n  uint quotient;\n  uint remainder1;\n  int difference;\n  uint remainder2;\n  int sum;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  remainder1 = input1 >> 0x17 & 0xff;\n  condition1 = remainder1 == 0;\n  if (!condition1) {\n    input3 = input2 >> 0x17 & 0xff;\n    condition1 = input3 == 0;\n  }\n  if (!condition1) {\n    condition1 = remainder1 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = input3 == 0xff;\n  }\n  if (condition1) {\n    input3 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (remainder1 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input3 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input3 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = remainder1 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          remainder1 = remainder1 - 1;\n        }\n        input1 = input1 | result;\n        condition1 = input3 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          input3 = input3 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    difference = remainder1 - input3;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = SCARRY4(difference,0x7f);\n      sum = difference + 0x7f;\n      condition1 = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = SBORROW4(0xff,sum);\n        condition1 = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      remainder1 = 0;\n      condition2 = SBORROW4(sum,1);\n      remainder2 = difference + 0x7e;\n      condition1 = remainder2 == 0;\n      result = remainder2;\n    }\n    else {\n      quotient = (input2 << 9) >> 4 | 0x10000000;\n      remainder1 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = quotient <= remainder1;\n      if (!condition1) {\n        remainder1 = remainder1 << 1;\n      }\n      remainder2 = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (quotient <= remainder1) {\n          remainder1 = remainder1 - quotient;\n          input1 = input1 | result;\n        }\n        condition1 = quotient >> 1 <= remainder1;\n        if (condition1) {\n          remainder1 = remainder1 - (quotient >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 1;\n        }\n        condition1 = quotient >> 2 <= remainder1;\n        if (condition1) {\n          remainder1 = remainder1 - (quotient >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 2;\n        }\n        condition1 = quotient >> 3 <= remainder1;\n        if (condition1) {\n          remainder1 = remainder1 - (quotient >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 3;\n        }\n        remainder1 = remainder1 * 0x10;\n        condition1 = remainder1 == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = SBORROW4(remainder2,0xfd);\n      condition1 = remainder2 == 0xfd;\n      result = remainder2 - 0xfd;\n      if (remainder2 < 0xfe) {\n        input1 = input1 + remainder2 * 0x800000 + (uint)(quotient <= remainder1);\n        if (remainder1 - quotient == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(remainder2 + 0x19) < 0;\n      if (remainder2 == 0xffffffe7 || condition1 != SCARRY4(remainder2,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (remainder2 == 0xffffffe7 || condition1 != SCARRY4(remainder2,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-remainder2 & 0xff);\n      remainder2 = input1 << (remainder2 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((remainder1 | remainder2 << 1) == 0) {\n        result = result & ~(remainder2 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "decode_and_normalize_08000e54",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "input3",
                "uVar1": "quotient",
                "uVar2": "remainder1",
                "iVar3": "difference",
                "uVar4": "remainder2",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3"
            },
            "calling": [
                "taskScheduler",
                "PID_Compute",
                "AHRS_ComputeAngles",
                "MadgwickQuaternionUpdate"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "multiply_and_check_08000f9c",
            "code": "\nuint multiplyAndCheck_08000f9c(uint input1,uint input2)\n\n{\n  bool isNegative;\n  uint doubleInput1;\n  uint doubleinput2;\n  uint modifiedInput;\n  bool isZero;\n  \n  doubleInput1 = input1 * 2;\n  doubleinput2 = input2 * 2;\n  if (((int)doubleInput1 >> 0x18 == -1 || (int)doubleinput2 >> 0x18 == -1) &&\n     ((((int)doubleInput1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)doubleinput2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  modifiedInput = doubleInput1 | input2 & 0x7fffffff;\n  isZero = modifiedInput == 0;\n  if (!isZero) {\n    modifiedInput = input1 ^ input2;\n    isZero = modifiedInput == 0;\n  }\n  isNegative = -1 < (int)modifiedInput;\n  if (isNegative) {\n    input1 = doubleInput1 + input2 * -2;\n    isZero = input1 == 0;\n  }\n  if ((isNegative && doubleinput2 <= doubleInput1) && !isZero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!isNegative || doubleinput2 > doubleInput1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!isZero) {\n    input1 = input1 | 1;\n  }\n  return input1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "multiply_and_check_08000f9c",
                "param_1": "input1",
                "param_2": "input2",
                "bVar1": "isNegative",
                "uVar2": "doubleInput1",
                "uVar3": "doubleinput2",
                "uVar4": "modifiedInput",
                "bVar5": "isZero"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "compare_floats_08000ffc",
            "code": "\nvoid compareFloats_08000ffc(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "compare_floats_08000ffc",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpgt",
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_params_08001004",
            "code": "\nundefined8 concatenateParams_08001004(undefined4 firstParam,undefined4 secondParam)\n\n{\n  __cmpsf2();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_params_08001004",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "__aeabi_fcmpeq",
                "__aeabi_cfrcmple",
                "__aeabi_fcmplt"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "is_not_zero_08001014",
            "code": "\nbool is_not_zero_08001014(void)\n\n{\n  char input_char;\n  \n  __aeabi_cfcmpeq();\n  return input_char != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "is_not_zero_08001014",
                "in_ZR": "input_char"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_null_08001028",
            "code": "\nbool check_if_null_08001028(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfcmpeq();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_null_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "PID_Compute",
                "AHRS_GetYaw",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "is_greater_than_or_equal_to_zero_08001050",
            "code": "\nbool isGreaterThanOrEqualToZero_08001050(void)\n\n{\n  undefined isZero;\n  undefined carryFlag;\n  \n  __aeabi_cfrcmple();\n  return !(bool)carryFlag || (bool)isZero;\n}\n\n",
            "renaming": {
                "FUN_08001050": "is_greater_than_or_equal_to_zero_08001050",
                "in_ZR": "isZero",
                "in_CY": "carryFlag"
            },
            "calling": [
                "AHRS_GetYaw"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "check_if_null_character_08001064",
            "code": "\nbool check_if_null_character_08001064(void)\n\n{\n  char input_character;\n  \n  __aeabi_cfrcmple();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "check_if_null_character_08001064",
                "in_CY": "input_character"
            },
            "calling": [
                "PID_Compute",
                "PID_Update"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "extract_number_from_binary_08001078",
            "code": "\nuint extract_number_from_binary_08001078(uint input_value)\n\n{\n  uint shifted_value;\n  uint result;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  result = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && result != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (result & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((result == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08001078": "extract_number_from_binary_08001078",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "result"
            },
            "calling": [
                "taskScheduler",
                "Motor_DistributeSpeed",
                "AHRS_ComputeAngles"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "validate_param_080010c4",
            "code": "\nuint validate_param_080010c4(uint input)\n\n{\n  uint shift_amount;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "validate_param_080010c4",
                "param_1": "input",
                "uVar1": "shift_amount"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_system_08001104",
            "code": "\nundefined4 initializeSystem_08001104(undefined4 priority)\n\n{\n  uint hclkFreq;\n  \n  hclkFreq = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFreq / 1000);\n  HAL_NVIC_SetPriority(0xffffffff,priority,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_system_08001104",
                "param_1": "priority",
                "uVar1": "hclkFreq"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_GetHCLKFreq",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_hardware_08001128",
            "code": "\n\n\nundefined4 initializeHardware_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  HAL_NVIC_SetPriorityGrouping(3);\n  HAL_InitTick(0);\n  HAL_MspInit();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_hardware_08001128"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_NVIC_SetPriorityGrouping",
                "HAL_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_data_counter_0800114c",
            "code": "\nvoid incrementDataCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_data_counter_0800114c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_0800115c",
            "code": "\nundefined4 get_data_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_0800115c"
            },
            "calling": [
                "HAL_RCC_ClockConfig",
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "micros",
                "HAL_I2C_Mem_Read",
                "serialWrite",
                "HAL_RCC_OscConfig",
                "millis",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "HAL_RCC_OscConfig",
                "delay_ms"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "configure_memory_protection_08001170",
            "code": "\n\n\nvoid configureMemoryProtection_08001170(uint inputValue)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (inputValue & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "configure_memory_protection_08001170",
                "param_1": "inputValue"
            },
            "calling": [
                "HAL_MspInit",
                "HAL_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "set_memory_value_08001194",
            "code": "\n\n\nvoid setMemoryValue_08001194(uint address,uint value1,uint value2)\n\n{\n  undefined memoryByte;\n  uint mask;\n  uint shift;\n  uint shiftedValue;\n  \n  shift = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  mask = 7 - shift;\n  shiftedValue = shift + 4;\n  if (3 < mask) {\n    mask = 4;\n  }\n  if (shiftedValue < 7) {\n    shift = 0;\n  }\n  mask = (1 << (mask & 0xff)) - 1;\n  if (6 < shiftedValue) {\n    shift = shift - 3;\n  }\n  memoryByte = (undefined)\n          ((value2 & (1 << (shift & 0xff)) - 1U | (value1 & mask) << (shift & 0xff)) << 4);\n  if (-1 < (int)address) {\n    shift = address + 0xe000e100;\n  }\n  else {\n    mask = 0xe000ed14;\n    shift = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(shift + 0x300) = memoryByte;\n  }\n  else {\n    *(undefined *)(mask + shift) = memoryByte;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "set_memory_value_08001194",
                "param_1": "address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "memoryByte",
                "uVar2": "mask",
                "uVar3": "shift",
                "uVar4": "shiftedValue"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config",
                "HAL_UART_MspInit",
                "HAL_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid setBitInArray_080011fc(uint bitPosition)\n\n{\n  *(int *)((bitPosition >> 5) * 4 + -0x1fff1f00) = 1 << (bitPosition & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bitPosition"
            },
            "calling": [
                "HAL_UART_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "validate_param_08001214",
            "code": "\n\n\nundefined4 validate_param_08001214(int input)\n\n{\n  if (input - 1U < 0x1000000) {\n    _DAT_e000e014 = input - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "validate_param_08001214",
                "param_1": "input"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_in_register_08001240",
            "code": "\n\n\nvoid setFlagInRegister_08001240(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_in_register_08001240",
                "param_1": "value"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_flags_08001264",
            "code": "\n\n\nvoid updateFlags_08001264(uint *flags,uint *data)\n\n{\n  uint flagIndex;\n  uint bitMask;\n  uint dataType;\n  int deviceIndex;\n  uint i;\n  uint bitShift;\n  uint uVar7;\n  uint *ptr;\n  int iVar8;\n  \n  flagIndex = 0;\n  i = 0;\n  do {\n    bitShift = 1 << (i & 0xff);\n    bitMask = bitShift & *data;\n    if (bitShift == bitMask) {\n      dataType = data[1];\n      if (dataType == 0x12) {\n        flagIndex = data[3] + 0xc;\n      }\n      else if (dataType < 0x13) {\n        if (dataType == 2) {\n          flagIndex = data[3] + 8;\n        }\n        else if (dataType < 3) {\n          if (dataType == 0) goto LAB_080013be;\n          if (dataType == 1) {\n            flagIndex = data[3];\n          }\n        }\n        else if (dataType == 3) {\n          flagIndex = 0;\n        }\n        else if (dataType == 0x11) {\n          flagIndex = data[3] + 4;\n        }\n      }\n      else {\n        if (dataType != 0x10210000) {\n          if (dataType < 0x10210001) {\n            if (dataType != 0x10110000) {\n              uVar7 = 0x10120000;\nLAB_080013b8:\n              if (dataType != uVar7) goto LAB_080012a8;\n            }\n          }\n          else if ((dataType != 0x10310000) && (dataType != 0x10320000)) {\n            uVar7 = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        flagIndex = data[2];\n        if (flagIndex == 0) {\n          flagIndex = 4;\n        }\n        else {\n          if (flagIndex == 1) {\n            flags[4] = bitShift;\n          }\n          if (flagIndex != 1) {\n            flags[5] = bitShift;\n          }\n          flagIndex = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        bitShift = *flags;\n        dataType = i << 2;\n        ptr = flags;\n      }\n      else {\n        bitShift = flags[1];\n        dataType = (i + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        ptr = flags + 1;\n      }\n      *ptr = bitShift & ~(0xf << (dataType & 0xff)) | flagIndex << (dataType & 0xff);\n      ptr = (uint *)data[1];\n      if (((uint)ptr & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        iVar8 = (i & 3) << 2;\n        if (flags == (uint *)0x40010800) {\n          deviceIndex = 0;\n        }\n        else if (flags == (uint *)0x40010c00) {\n          deviceIndex = 1;\n        }\n        else if (flags == (uint *)0x40011000) {\n          deviceIndex = 2;\n        }\n        else if (flags == (uint *)0x40011400) {\n          deviceIndex = 3;\n        }\n        else {\n          deviceIndex = 4;\n        }\n        *(uint *)((i & 0xfffffffc) + 0x40010008) =\n             deviceIndex << iVar8 | *(uint *)((i & 0xfffffffc) + 0x40010008) & ~(0xf << iVar8);\n        if (((uint)ptr & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitMask;\n        }\n        if (((uint)ptr & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitMask;\n        }\n        if (((uint)ptr & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitMask;\n        }\n        if (((uint)ptr & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitMask;\n        }\n        else {\n          _DAT_4001040c = bitMask | _DAT_4001040c;\n        }\n      }\n    }\n    i = i + 1;\n    if (i == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_flags_08001264",
                "param_1": "flags",
                "param_2": "data",
                "uVar1": "flagIndex",
                "uVar2": "bitMask",
                "uVar3": "dataType",
                "iVar4": "deviceIndex",
                "uVar5": "i",
                "uVar6": "bitShift",
                "unaff_r10": "ptr"
            },
            "calling": [
                "Peripherals_Init",
                "HAL_UART_MspInit",
                "HAL_TIM_MspPostInit",
                "HAL_I2C_MspInit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "store_param_in_memory_08001424",
            "code": "\nvoid storeParamInMemory_08001424(int memoryAddress,int value,int conditionFlag)\n\n{\n  if (conditionFlag == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(memoryAddress + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "store_param_in_memory_08001424",
                "param_1": "memoryAddress",
                "param_2": "value",
                "param_3": "conditionFlag"
            },
            "calling": [
                "Peripherals_Init",
                "toggleLED",
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "xor_parameter_and_pointer_0800142e",
            "code": "\nvoid xorParameterAndPointer_0800142e(int pointer,uint value)\n\n{\n  *(uint *)(pointer + 0xc) = value ^ *(uint *)(pointer + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "xor_parameter_and_pointer_0800142e",
                "param_1": "pointer",
                "param_2": "value"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_and_modify_flags_08001436",
            "code": "\nundefined4 checkAndModifyFlags_08001436(int *inputArray)\n\n{\n  int firstElement;\n  \n  firstElement = *inputArray;\n  if ((*(uint *)(firstElement + 0x14) & 0x400) != 0) {\n    *(uint *)(firstElement + 0x14) = *(uint *)(firstElement + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)inputArray + 0x35) = 0x20;\n    *(undefined *)(inputArray + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_and_modify_flags_08001436",
                "param_1": "inputArray",
                "iVar1": "firstElement",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "I2C_WaitOnTXEFlagUntilTimeout"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_compatibility_08001460",
            "code": "\nundefined4 checkCompatibility_08001460(uint **data,uint flag,uint timeout)\n\n{\n  int startTick;\n  int currentTick;\n  uint value;\n  uint *ptr;\n  \n  startTick = HAL_GetTick();\n  do {\n    ptr = *data;\n    if ((flag << 8) >> 0x18 == 1) {\n      value = ptr[5];\n    }\n    else {\n      value = ptr[6];\n    }\n    if ((flag & 0xffff & ~value) == 0) {\n      return 0;\n    }\n    if ((int)(ptr[5] << 0x15) < 0) {\n      *ptr = *ptr | 0x200;\n      ptr[5] = ptr[5] & 0xfffffbff;\n      data[0xe] = (uint *)0x4;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (currentTick = HAL_GetTick(), (uint)(currentTick - startTick) <= timeout))));\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_compatibility_08001460",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "timeout",
                "iVar1": "startTick",
                "iVar2": "currentTick",
                "uVar3": "value",
                "puVar4": "ptr"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_i2_c_080014e2",
            "code": "\nundefined4 checkI2C_080014e2(int *i2cData,uint timeout)\n\n{\n  int startTime;\n  int acknowledgeFailed;\n  \n  startTime = HAL_GetTick();\n  while( true ) {\n    if (*(int *)(*i2cData + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    acknowledgeFailed = I2C_IsAcknowledgeFailed(i2cData);\n    if (acknowledgeFailed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (acknowledgeFailed = HAL_GetTick(), timeout < (uint)(acknowledgeFailed - startTime))))) {\n      i2cData[0xe] = i2cData[0xe] | 0x20;\n      *(undefined *)((int)i2cData + 0x35) = 0x20;\n      *(undefined *)(i2cData + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_i2_c_080014e2",
                "param_1": "i2cData",
                "param_2": "timeout",
                "iVar1": "startTime",
                "iVar2": "acknowledgeFailed"
            },
            "calling": [
                "I2C_RequestMemoryWrite",
                "HAL_I2C_Mem_Write",
                "I2C_RequestMemoryRead"
            ],
            "called": [
                "I2C_IsAcknowledgeFailed",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "perform_i2_c_read_or_write_08001530",
            "code": "\nundefined4 performI2CReadOrWrite_08001530(uint **i2cDevicePtr,uint data,uint size,int isWrite,uint timeout)\n\n{\n  int startTime;\n  int endTime;\n  uint *i2cRegPtr;\n  uint **i2cDevicePtrPtr;\n  uint dataCopy;\n  uint sizeCopy;\n  \n  **i2cDevicePtr = **i2cDevicePtr | 0x100;\n  i2cDevicePtrPtr = i2cDevicePtr;\n  dataCopy = data;\n  sizeCopy = size;\n  startTime = HAL_GetTick();\n  do {\n    i2cRegPtr = *i2cDevicePtr;\n    do {\n      if ((int)(i2cRegPtr[5] << 0x1f) < 0) {\n        i2cRegPtr[4] = data & 0xfe;\n        startTime = I2C_WaitOnMasterAddressFlagUntilTimeout\n                          (i2cDevicePtr,0x10002,timeout,i2cRegPtr,i2cDevicePtrPtr,dataCopy,sizeCopy);\n        if (startTime == 0) {\n          startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cDevicePtr,timeout,(*i2cDevicePtr)[5],(*i2cDevicePtr)[6]);\n          if (startTime == 0) {\n            i2cRegPtr = *i2cDevicePtr;\n            if (isWrite == 1) {\nLAB_080015ca:\n              i2cRegPtr[4] = size & 0xff;\n              return 0;\n            }\n            i2cRegPtr[4] = size >> 8;\n            startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cDevicePtr,timeout);\n            if (startTime == 0) {\n              i2cRegPtr = *i2cDevicePtr;\n              goto LAB_080015ca;\n            }\n          }\n          if (i2cDevicePtr[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **i2cDevicePtr = **i2cDevicePtr | 0x200;\n        }\n        else if (i2cDevicePtr[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (timeout == 0xffffffff);\n    if ((timeout == 0) || (endTime = HAL_GetTick(), timeout < (uint)(endTime - startTime))) {\n      *(undefined *)((int)i2cDevicePtr + 0x35) = 0x20;\n      *(undefined *)(i2cDevicePtr + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "perform_i2_c_read_or_write_08001530",
                "param_1": "i2cDevicePtr",
                "param_2": "data",
                "param_3": "size",
                "param_4": "isWrite",
                "param_5": "timeout",
                "iVar1": "startTime",
                "iVar2": "endTime",
                "puVar3": "i2cRegPtr",
                "ppuVar4": "i2cDevicePtrPtr",
                "uVar5": "dataCopy",
                "uVar6": "sizeCopy"
            },
            "calling": [
                "HAL_I2C_Mem_Write"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "configure_i2_c_080015e8",
            "code": "\nundefined4 configureI2C_080015e8(uint **i2cRegisters,uint address,uint data,int isData16Bit,uint timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint *currentRegister;\n  uint **ptrToI2CRegisters;\n  uint tempAddress;\n  uint tempData;\n  \n  currentRegister = *i2cRegisters;\n  *currentRegister = *currentRegister | 0x400;\n  *currentRegister = *currentRegister | 0x100;\n  ptrToI2CRegisters = i2cRegisters;\n  tempAddress = address;\n  tempData = data;\n  startTime = HAL_GetTick();\nLAB_0800160e:\n  currentRegister = *i2cRegisters;\n  while (-1 < (int)(currentRegister[5] << 0x1f)) {\n    if (timeout != 0xffffffff) goto code_r0x08001658;\n  }\n  currentRegister[4] = address & 0xfe;\n  startTime = I2C_WaitOnMasterAddressFlagUntilTimeout\n                    (i2cRegisters,0x10002,timeout,currentRegister,ptrToI2CRegisters,tempAddress,tempData);\n  if (startTime != 0) goto LAB_080016ba;\n  startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cRegisters,timeout,(*i2cRegisters)[5],(*i2cRegisters)[6]);\n  if (startTime == 0) {\n    currentRegister = *i2cRegisters;\n    if (isData16Bit != 1) {\n      currentRegister[4] = data >> 8;\n      startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cRegisters,timeout);\n      if (startTime != 0) goto LAB_08001642;\n      currentRegister = *i2cRegisters;\n    }\n    currentRegister[4] = data & 0xff;\n    startTime = I2C_WaitOnTXEFlagUntilTimeout(i2cRegisters,timeout);\n    if (startTime == 0) {\n      **i2cRegisters = **i2cRegisters | 0x100;\n      startTime = HAL_GetTick();\n      do {\n        do {\n          if ((int)((*i2cRegisters)[5] << 0x1f) < 0) {\n            (*i2cRegisters)[4] = address & 0xff | 1;\n            startTime = I2C_WaitOnMasterAddressFlagUntilTimeout(i2cRegisters,0x10002,timeout);\n            if (startTime == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (i2cRegisters[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (currentTime = HAL_GetTick(), (uint)(currentTime - startTime) <= timeout));\nLAB_0800165a:\n      *(undefined *)((int)i2cRegisters + 0x35) = 0x20;\n      *(undefined *)(i2cRegisters + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (i2cRegisters[0xe] == (uint *)0x4) {\n    **i2cRegisters = **i2cRegisters | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((timeout == 0) || (currentTime = HAL_GetTick(), timeout < (uint)(currentTime - startTime))) goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "configure_i2_c_080015e8",
                "param_1": "i2cRegisters",
                "param_2": "address",
                "param_3": "data",
                "param_4": "isData16Bit",
                "param_5": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "puVar3": "currentRegister",
                "ppuVar4": "ptrToI2CRegisters",
                "uVar5": "tempAddress",
                "uVar6": "tempData"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "I2C_WaitOnMasterAddressFlagUntilTimeout",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_timeout_and_set_flags_080016f4",
            "code": "\nundefined4 checkTimeoutAndSetFlags_080016f4(int *array,uint timeout)\n\n{\n  int startTick;\n  int currentValue;\n  \n  startTick = HAL_GetTick();\n  while( true ) {\n    currentValue = *array;\n    if ((*(uint *)(currentValue + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(currentValue + 0x14) << 0x1b < 0) break;\n    if ((timeout == 0) || (currentValue = HAL_GetTick(), timeout < (uint)(currentValue - startTick))) {\n      flag1 = flag1 | 0x20;\n      *(undefined *)((int)array + 0x35) = 0x20;\n      *(undefined *)(array + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(currentValue + 0x14) = *(uint *)(currentValue + 0x14) & 0xffffffef;\n  flag1 = 0;\n  *(undefined *)(array + 0xd) = 0;\n  *(undefined *)((int)array + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_timeout_and_set_flags_080016f4",
                "param_1": "array",
                "param_2": "timeout",
                "iVar1": "startTick",
                "iVar2": "currentValue",
                "param_1[0xe]": "flag1"
            },
            "calling": [
                "HAL_I2C_Mem_Read"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "initialize_i2_c_08001754",
            "code": "\nundefined4 initializeI2C_08001754(uint **i2cParams)\n\n{\n  uint frequency;\n  uint frequencyUpperCase;\n  uint *i2cParamsPtr;\n  uint *param1Ptr;\n  uint *param2Ptr;\n  uint frequencyInMHz;\n  undefined8 pclkFrequency;\n  \n  if (i2cParams != (uint **)0x0) {\n    if (*(char *)((int)i2cParams + 0x35) == '\\0') {\n      *(undefined *)(i2cParams + 0xd) = 0;\n      initializeI2C_08001754Hardware();\n    }\n    *(undefined *)((int)i2cParams + 0x35) = 0x24;\n    **i2cParams = **i2cParams & 0xfffffffe;\n    pclkFrequency = HAL_RCC_GetPCLK1Freq();\n    frequencyUpperCase = (uint)((ulonglong)pclkFrequency >> 0x20);\n    frequency = (uint)pclkFrequency;\n    param1Ptr = i2cParams[1];\n    frequencyInMHz = frequency / 1000000;\n    if ((uint *)0x186a0 < param1Ptr) {\n      frequencyUpperCase = 300;\n    }\n    i2cParamsPtr = *i2cParams;\n    if ((uint *)0x186a0 < param1Ptr) {\n      frequencyUpperCase = frequencyInMHz * frequencyUpperCase;\n    }\n    i2cParamsPtr[1] = frequencyInMHz;\n    if ((uint *)0x186a0 < param1Ptr) {\n      frequencyInMHz = frequencyUpperCase / 1000;\n    }\n    i2cParamsPtr[8] = frequencyInMHz + 1;\n    if (param1Ptr < (uint *)0x186a1) {\n      frequency = frequency / (uint)((int)param1Ptr << 1);\n      if ((frequency & 0xfff) < 4) {\n        frequency = 4;\n      }\n    }\n    else {\n      if (i2cParams[2] == (uint *)0x0) {\n        frequency = frequency / (uint)((int)param1Ptr * 3) | 0x8000;\n      }\n      else {\n        frequency = frequency / (uint)((int)param1Ptr * 0x19) | 0xc000;\n      }\n      if ((frequency & 0xfff) == 0) {\n        frequency = 1;\n      }\n    }\n    param1Ptr = i2cParams[8];\n    param2Ptr = i2cParams[7];\n    i2cParamsPtr[7] = frequency;\n    *i2cParamsPtr = (uint)param2Ptr | (uint)param1Ptr;\n    i2cParamsPtr[2] = (uint)i2cParams[4] | (uint)i2cParams[3];\n    i2cParamsPtr[3] = (uint)i2cParams[5] | (uint)i2cParams[6];\n    *i2cParamsPtr = *i2cParamsPtr | 1;\n    i2cParams[0xe] = (uint *)0x0;\n    *(undefined *)((int)i2cParams + 0x35) = 0x20;\n    *(undefined *)((int)i2cParams + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "initialize_i2_c_08001754",
                "param_1": "i2cParams",
                "uVar1": "frequency",
                "uVar2": "frequencyUpperCase",
                "puVar3": "i2cParamsPtr",
                "puVar4": "param1Ptr",
                "puVar5": "param2Ptr",
                "uVar6": "frequencyInMHz",
                "uVar7": "pclkFrequency",
                "HAL_I2C_MspInit": "initializeI2CHardware"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK1Freq",
                "HAL_I2C_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "perform_i2_c_transfer_08001828",
            "code": "\nundefined4\nperformI2CTransfer_08001828(uint **ptrData,undefined4 value1,undefined4 value2,undefined4 value3,byte *dataBuffer,\n            short bufferSize,undefined4 timeout)\n\n{\n  int startTime;\n  int currentTime;\n  uint *pData;\n  uint tempValue;\n  \n  if (*(char *)((int)ptrData + 0x35) == ' ') {\n    if (dataBuffer == (byte *)0x0) {\n      return 1;\n    }\n    if (bufferSize == 0) {\n      return 1;\n    }\n    startTime = HAL_GetTick();\n    do {\n      pData = *ptrData;\n      if ((~pData[6] & 2) != 0) {\n        if (*(char *)(ptrData + 0xd) == '\\x01') {\n          return 2;\n        }\n        tempValue = *pData;\n        *(undefined *)(ptrData + 0xd) = 1;\n        *pData = tempValue & 0xfffff7ff;\n        *(undefined *)((int)ptrData + 0x35) = 0x21;\n        *(undefined *)((int)ptrData + 0x36) = 0x40;\n        ptrData[0xe] = (uint *)0x0;\n        startTime = I2C_RequestMemoryWrite(ptrData,value1,value2,value3,timeout);\n        if (startTime != 0) {\n          *(undefined *)(ptrData + 0xd) = 0;\n          if (ptrData[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      currentTime = HAL_GetTick();\n    } while ((uint)(currentTime - startTime) < 0x2711);\n    *(undefined *)(ptrData + 0xd) = 0;\n    *(undefined *)((int)ptrData + 0x35) = 0x20;\n  }\n  return 2;\n  while (bufferSize != 0) {\nLAB_080018e2:\n    startTime = I2C_WaitOnTXEFlagUntilTimeout(ptrData,timeout);\n    if (startTime != 0) goto LAB_080018ee;\n    pData = *ptrData;\n    pData[4] = (uint)*dataBuffer;\n    if ((int)(pData[5] << 0x1d) < 0) {\n      if ((short)(bufferSize + -1) == 0) break;\n      bufferSize = bufferSize + -2;\n      pData[4] = (uint)dataBuffer[1];\n      dataBuffer = dataBuffer + 2;\n    }\n    else {\n      dataBuffer = dataBuffer + 1;\n      bufferSize = bufferSize + -1;\n    }\n  }\n  startTime = I2C_WaitOnTXEFlagUntilTimeout(ptrData,timeout);\n  if (startTime == 0) {\n    **ptrData = **ptrData | 0x200;\n    *(undefined *)(ptrData + 0xd) = 0;\n    *(undefined *)((int)ptrData + 0x35) = 0x20;\n    *(undefined *)((int)ptrData + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (ptrData[0xe] == (uint *)0x4) {\n    **ptrData = **ptrData | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "perform_i2_c_transfer_08001828",
                "param_1": "ptrData",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "dataBuffer",
                "param_6": "bufferSize",
                "param_7": "timeout",
                "iVar1": "startTime",
                "iVar2": "currentTime",
                "puVar3": "pData",
                "uVar4": "tempValue"
            },
            "calling": [
                "I2C_WriteByte"
            ],
            "called": [
                "I2C_RequestMemoryWrite",
                "I2C_WaitOnTXEFlagUntilTimeout",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "read_i2_c_data_08001938",
            "code": "\nundefined4\nreadI2CData_08001938(uint **i2cData,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *dataBuffer,ushort bufferSize,uint timeout)\n\n{\n  undefined *ptr1;\n  int tickStart;\n  int tickCurrent;\n  uint *i2cPtr;\n  uint value;\n  undefined *ptr2;\n  bool boolFlag;\n  \n  if (*(char *)((int)i2cData + 0x35) != ' ') {\n    return 2;\n  }\n  if (dataBuffer == (undefined *)0x0) {\n    return 1;\n  }\n  if (bufferSize == 0) {\n    return 1;\n  }\n  tickStart = HAL_GetTick();\n  while (i2cPtr = *i2cData, (~i2cPtr[6] & 2) == 0) {\n    tickCurrent = HAL_GetTick();\n    if (10000 < (uint)(tickCurrent - tickStart)) {\n      *(undefined *)(i2cData + 0xd) = 0;\n      *(undefined *)((int)i2cData + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(i2cData + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *i2cPtr;\n  *(undefined *)(i2cData + 0xd) = 1;\n  *i2cPtr = value & 0xfffff7ff;\n  *(undefined *)((int)i2cData + 0x35) = 0x22;\n  *(undefined *)((int)i2cData + 0x36) = 0x40;\n  i2cData[0xe] = (uint *)0x0;\n  tickStart = I2C_RequestMemoryRead(i2cData,param2,param3,param4,timeout);\n  if (tickStart != 0) {\n    *(undefined *)(i2cData + 0xd) = 0;\n    if (i2cData[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  i2cPtr = *i2cData;\n  value = *i2cPtr;\n  if (bufferSize == 1) {\n    *i2cPtr = value & 0xfffffbff;\n    disableIRQinterrupts();\n    **i2cData = **i2cData | 0x200;\n    enableIRQinterrupts();\n    tickStart = I2C_WaitOnRXNEFlagUntilTimeout(i2cData,timeout);\n    if (tickStart == 0) {\n      *dataBuffer = (char)(*i2cData)[4];\nLAB_08001ab8:\n      *(undefined *)((int)i2cData + 0x35) = 0x20;\n      *(undefined *)((int)i2cData + 0x36) = 0;\n      *(undefined *)(i2cData + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (i2cData[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (bufferSize == 2) {\n    *i2cPtr = value | 0x800;\n    disableIRQinterrupts();\n    **i2cData = **i2cData & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *i2cPtr = value | 0x400;\n    while (3 < bufferSize) {\n      tickStart = I2C_WaitOnRXNEFlagUntilTimeout(i2cData,timeout);\n      if (tickStart != 0) goto LAB_08001a18;\n      *dataBuffer = (char)(*i2cData)[4];\n      i2cPtr = *i2cData;\n      boolFlag = (int)(i2cPtr[5] << 0x1d) < 0;\n      if (boolFlag) {\n        i2cPtr = (uint *)i2cPtr[4];\n        ptr2 = dataBuffer + 2;\n        bufferSize = bufferSize - 2;\n      }\n      else {\n        ptr2 = dataBuffer + 1;\n        bufferSize = bufferSize - 1;\n      }\n      ptr1 = dataBuffer + 1;\n      dataBuffer = ptr2;\n      if (boolFlag) {\n        *ptr1 = (char)i2cPtr;\n      }\n    }\n    if (bufferSize != 2) {\n      tickStart = HAL_GetTick();\n      do {\n        i2cPtr = *i2cData;\n        do {\n          if ((int)(i2cPtr[5] << 0x1d) < 0) {\n            *i2cPtr = *i2cPtr & 0xfffffbff;\n            disableIRQinterrupts();\n            *dataBuffer = (char)(*i2cData)[4];\n            tickStart = HAL_GetTick();\n            goto LAB_08001b3a;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (tickCurrent = HAL_GetTick(), (uint)(tickCurrent - tickStart) <= timeout));\n      goto LAB_08001afa;\n    }\n  }\n  tickStart = HAL_GetTick();\n  do {\n    do {\n      if ((int)((*i2cData)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        i2cPtr = *i2cData;\n        *i2cPtr = *i2cPtr | 0x200;\n        *dataBuffer = (char)i2cPtr[4];\n        enableIRQinterrupts();\n        dataBuffer[1] = (char)(*i2cData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (tickCurrent = HAL_GetTick(), (uint)(tickCurrent - tickStart) <= timeout));\nLAB_08001afa:\n  *(undefined *)((int)i2cData + 0x35) = 0x20;\n  *(undefined *)(i2cData + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    i2cPtr = *i2cData;\n    do {\n      if ((int)(i2cPtr[5] << 0x1d) < 0) {\n        *i2cPtr = *i2cPtr | 0x200;\n        dataBuffer[1] = (char)i2cPtr[4];\n        enableIRQinterrupts();\n        dataBuffer[2] = (char)(*i2cData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (tickCurrent = HAL_GetTick(), (uint)(tickCurrent - tickStart) <= timeout));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "read_i2_c_data_08001938",
                "param_1": "i2cData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "dataBuffer",
                "param_6": "bufferSize",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "iVar2": "tickStart",
                "iVar3": "tickCurrent",
                "puVar4": "i2cPtr",
                "uVar5": "value",
                "puVar6": "ptr2",
                "bVar7": "boolFlag"
            },
            "calling": [
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "HAL_GetTick",
                "I2C_RequestMemoryRead",
                "I2C_WaitOnRXNEFlagUntilTimeout"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_status_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 checkStatus_08001b58(int *status)\n\n{\n  int tempVar1;\n  int tempVar2;\n  \n  if (*status << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (status[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      tempVar1 = status[1];\n      if (tempVar1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (tempVar1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          tempVar1 = HAL_GetTick();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            tempVar2 = HAL_GetTick();\n            if (100 < (uint)(tempVar2 - tempVar1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (tempVar1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      tempVar1 = HAL_GetTick();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        tempVar2 = HAL_GetTick();\n        if (100 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*status << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (status[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = status[4];\n      if (iRam42420000 == 0) {\n        tempVar1 = HAL_GetTick();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          tempVar2 = HAL_GetTick();\n          if (2 < (uint)(tempVar2 - tempVar1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      tempVar1 = HAL_GetTick();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        tempVar2 = HAL_GetTick();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = status[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*status << 0x1c < 0) {\n    iRam42420480 = status[6];\n    if (iRam42420480 == 0) {\n      tempVar1 = HAL_GetTick();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        tempVar2 = HAL_GetTick();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      tempVar1 = HAL_GetTick();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        tempVar2 = HAL_GetTick();\n        if (2 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n      HAL_Delay(1);\n    }\n  }\n  if (-1 < *status << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  tempVar1 = HAL_GetTick();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    tempVar2 = HAL_GetTick();\n    if (100 < (uint)(tempVar2 - tempVar1)) {\n      return 3;\n    }\n  }\n  tempVar1 = status[3];\n  if (tempVar1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (tempVar1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      tempVar1 = HAL_GetTick();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        tempVar2 = HAL_GetTick();\n        if (5000 < (uint)(tempVar2 - tempVar1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (tempVar1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  tempVar1 = HAL_GetTick();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    tempVar2 = HAL_GetTick();\n    if (5000 < (uint)(tempVar2 - tempVar1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (status[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (status[7] != 2) {\n      uRam42420060 = 0;\n      tempVar1 = HAL_GetTick();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        tempVar2 = HAL_GetTick();\n      } while ((uint)(tempVar2 - tempVar1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    tempVar1 = HAL_GetTick();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (status[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | status[2];\n        }\n        _DAT_40021004 = status[8] | status[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        tempVar1 = HAL_GetTick();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          tempVar2 = HAL_GetTick();\n        } while ((uint)(tempVar2 - tempVar1) < 3);\n        return 3;\n      }\n      tempVar2 = HAL_GetTick();\n    } while ((uint)(tempVar2 - tempVar1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_status_08001b58",
                "param_1": "status",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_GetTick",
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_sampling_rate_08002008",
            "code": "\n\n\nint calculateSamplingRate_08002008(void)\n\n{\n  undefined4 temp1;\n  int samplingRate;\n  undefined4 temp2;\n  undefined4 *dataPointer;\n  uint frequency;\n  undefined4 *bufferPointer;\n  byte config [4];\n  undefined4 buffer [5];\n  \n  dataPointer = &DAT_080072f0;\n  bufferPointer = buffer;\n  do {\n    temp1 = *dataPointer;\n    temp2 = dataPointer[1];\n    dataPointer = dataPointer + 2;\n    *bufferPointer = temp1;\n    bufferPointer[1] = temp2;\n    bufferPointer = bufferPointer + 2;\n  } while (dataPointer != (undefined4 *)\"../Src/MPU9250.c\");\n  config[0] = 1;\n  config[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      frequency = 8000000 / config[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      frequency = 4000000;\n    }\n    samplingRate = frequency * *(byte *)((int)buffer + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    samplingRate = 8000000;\n  }\n  return samplingRate;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_sampling_rate_08002008",
                "uVar1": "temp1",
                "iVar2": "samplingRate",
                "uVar3": "temp2",
                "puVar4": "dataPointer",
                "uVar5": "frequency",
                "puVar6": "bufferPointer",
                "local_24": "config",
                "local_20": "buffer"
            },
            "calling": [
                "HAL_RCC_ClockConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "initialize_system_clock_0800209c",
            "code": "\n\n\nundefined4 initializeSystemClock_0800209c(uint *clockConfig,uint sourceSelect)\n\n{\n  char isSource1;\n  char isSource2;\n  int bitShiftedValue;\n  uint clockType;\n  int currentTick;\n  uint shiftedBits;\n  \n  if ((sourceSelect <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | sourceSelect, sourceSelect == (sourceSelect & 7))) {\n    if ((int)(*clockConfig << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | clockConfig[2];\n    }\n    bitShiftedValue = *clockConfig << 0x1f;\n    if (-1 < bitShiftedValue) {\nLAB_080020ba:\n      if ((sourceSelect < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | sourceSelect, sourceSelect != (sourceSelect & 7))) {\n        return 1;\n      }\n      if ((*clockConfig & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | clockConfig[3];\n      }\n      if ((int)(*clockConfig << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | clockConfig[4] << 3;\n      }\n      clockType = HAL_RCC_GetSysClockFreq();\n      DAT_200001bc = clockType >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      HAL_InitTick(0);\n      return 0;\n    }\n    clockType = clockConfig[1];\n    if (clockType == 1) {\n      isSource2 = '\\x01';\n      isSource1 = '\\0';\n    }\n    else {\n      shiftedBits = _DAT_40021000;\n      if (clockType == 2) goto LAB_08002176;\n      isSource2 = '\\0';\n      isSource1 = '\\x01';\n    }\n    shiftedBits = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(isSource1 << 6) << 0x18 | (uint)(byte)(isSource2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shiftedBits < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | clockType;\n      bitShiftedValue = HAL_GetTick(bitShiftedValue,shiftedBits);\n      if (clockConfig[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - bitShiftedValue) < 0x1389);\n      }\n      else if (clockConfig[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - bitShiftedValue) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          currentTick = HAL_GetTick();\n        } while ((uint)(currentTick - bitShiftedValue) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "initialize_system_clock_0800209c",
                "param_1": "clockConfig",
                "param_2": "sourceSelect",
                "cVar1": "isSource1",
                "cVar2": "isSource2",
                "iVar3": "bitShiftedValue",
                "uVar4": "clockType",
                "iVar5": "currentTick",
                "uVar6": "shiftedBits"
            },
            "calling": [
                "SystemClock_Config"
            ],
            "called": [
                "HAL_InitTick",
                "HAL_RCC_GetSysClockFreq",
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_value_08002214",
            "code": "\nundefined4 get_data_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_value_08002214"
            },
            "calling": [
                "HAL_InitTick",
                "SystemClock_Config"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "HAL_I2C_Init",
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "get_selected_bit_08002250",
            "code": "\n\n\nuint get_selected_bit_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "get_selected_bit_08002250"
            },
            "calling": [
                "UART_SetConfig"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "initialize_flags_08002280",
            "code": "\nvoid initializeFlags_08002280(int address,uint *values)\n\n{\n  uint maskedFlags;\n  uint ptr1Value;\n  uint param2Value;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xfffffffe;\n  ptr1Value = *(uint *)(address + 4);\n  param2Value = *values;\n  maskedFlags = *(uint *)(address + 0x20) & 0xfffffffd | values[2];\n  if (address == 0x40012c00) {\n    maskedFlags = (maskedFlags & 0xfffffff7 | values[3]) & 0xfffffffb;\n    ptr1Value = ptr1Value & 0xfffffcff | values[5] | values[6];\n  }\n  *(uint *)(address + 4) = ptr1Value;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffffff8c | param2Value;\n  *(uint *)(address + 0x34) = values[1];\n  *(uint *)(address + 0x20) = maskedFlags;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "initialize_flags_08002280",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "maskedFlags",
                "uVar2": "ptr1Value",
                "uVar3": "param2Value"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_params_080022d0",
            "code": "\nvoid updateParams_080022d0(int baseAddr,uint *paramArray)\n\n{\n  uint updatedVar1;\n  uint updatedVar2;\n  uint updatedVar3;\n  \n  *(uint *)(baseAddr + 0x20) = *(uint *)(baseAddr + 0x20) & 0xfffffeff;\n  updatedVar2 = *(uint *)(baseAddr + 4);\n  updatedVar3 = *paramArray;\n  updatedVar1 = *(uint *)(baseAddr + 0x20) & 0xfffffdff | paramArray[2] << 8;\n  if (baseAddr == 0x40012c00) {\n    updatedVar1 = (updatedVar1 & 0xfffff7ff | paramArray[3] << 8) & 0xfffffbff;\n    updatedVar2 = updatedVar2 & 0xffffcfff | (paramArray[5] | paramArray[6]) << 4;\n  }\n  *(uint *)(baseAddr + 4) = updatedVar2;\n  *(uint *)(baseAddr + 0x1c) = *(uint *)(baseAddr + 0x1c) & 0xffffff8c | updatedVar3;\n  *(uint *)(baseAddr + 0x3c) = paramArray[1];\n  *(uint *)(baseAddr + 0x20) = updatedVar1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_params_080022d0",
                "param_1": "baseAddr",
                "param_2": "paramArray",
                "uVar1": "updatedVar1",
                "uVar2": "updatedVar2",
                "uVar3": "updatedVar3"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_data_08002324",
            "code": "\nvoid updateData_08002324(int dataAddress,int *paramArray)\n\n{\n  uint tempValue;\n  int value1;\n  int value2;\n  int constant;\n  \n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffefff;\n  tempValue = *(uint *)(dataAddress + 4);\n  value1 = *paramArray;\n  value2 = paramArray[2];\n  constant = 0x40012c00;\n  if (dataAddress == 0x40012c00) {\n    constant = paramArray[5];\n    tempValue = tempValue & 0xffffbfff;\n  }\n  if (dataAddress == 0x40012c00) {\n    tempValue = tempValue | constant << 6;\n  }\n  *(uint *)(dataAddress + 4) = tempValue;\n  *(uint *)(dataAddress + 0x1c) = *(uint *)(dataAddress + 0x1c) & 0xffff8cff | value1 << 8;\n  *(int *)(dataAddress + 0x40) = paramArray[1];\n  *(uint *)(dataAddress + 0x20) = *(uint *)(dataAddress + 0x20) & 0xffffdfff | value2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_data_08002324",
                "param_1": "dataAddress",
                "param_2": "paramArray",
                "uVar1": "tempValue",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "constant"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_data_08002368",
            "code": "\nvoid updateData_08002368(uint *dataPtr1,uint *dataPtr2)\n\n{\n  uint result;\n  \n  result = *dataPtr1;\n  if (((((dataPtr1 == (uint *)0x40012c00) || (dataPtr1 == (uint *)0x40000000)) ||\n       (dataPtr1 == (uint *)0x40000400)) || (dataPtr1 == (uint *)0x40000800)) &&\n     (((result = result & 0xffffff8f | dataPtr2[1], dataPtr1 == (uint *)0x40012c00 ||\n       (dataPtr1 == (uint *)0x40000000)) ||\n      ((dataPtr1 == (uint *)0x40000400 || (dataPtr1 == (uint *)0x40000800)))))) {\n    result = result & 0xfffffcff | dataPtr2[3];\n  }\n  *dataPtr1 = result;\n  dataPtr1[0xb] = dataPtr2[2];\n  dataPtr1[10] = *dataPtr2;\n  result = 0x40012c00;\n  if (dataPtr1 == (uint *)0x40012c00) {\n    result = dataPtr2[4];\n  }\n  if (dataPtr1 == (uint *)0x40012c00) {\n    dataPtr1[0xc] = result;\n  }\n  dataPtr1[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_data_08002368",
                "param_1": "dataPtr1",
                "param_2": "dataPtr2",
                "uVar1": "result"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_pwm_timers_080023d0",
            "code": "\nundefined4 initialize_PWM_timers_080023d0(undefined4 *timer_config)\n\n{\n  if (timer_config != (undefined4 *)0x0) {\n    if (*(char *)((int)timer_config + 0x39) == '\\0') {\n      *(undefined *)(timer_config + 0xe) = 0;\n      initialize_timer_peripherals();\n    }\n    *(undefined *)((int)timer_config + 0x39) = 2;\n    configure_timer(*timer_config,timer_config + 1);\n    *(undefined *)((int)timer_config + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_pwm_timers_080023d0",
                "param_1": "timer_config",
                "HAL_TIM_PWM_MspInit": "initialize_timer_peripherals",
                "TIM_Base_SetConfig": "configure_timer"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_Base_SetConfig",
                "HAL_TIM_PWM_MspInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_settings_08002404",
            "code": "\nvoid updateSettings_08002404(int settingsPtr,int *inputArray)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int inputValue;\n  \n  *(uint *)(settingsPtr + 0x20) = *(uint *)(settingsPtr + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(settingsPtr + 4);\n  inputValue = *inputArray;\n  updatedValue1 = *(uint *)(settingsPtr + 0x20) & 0xffffffdf | inputArray[2] << 4;\n  if (settingsPtr == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | inputArray[3] << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | (inputArray[5] | inputArray[6]) << 2;\n  }\n  *(uint *)(settingsPtr + 4) = updatedValue2;\n  *(uint *)(settingsPtr + 0x18) = *(uint *)(settingsPtr + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(settingsPtr + 0x38) = inputArray[1];\n  *(uint *)(settingsPtr + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_settings_08002404",
                "param_1": "settingsPtr",
                "param_2": "inputArray",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "inputValue"
            },
            "calling": [
                "HAL_TIM_PWM_ConfigChannel"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "configure_tim_output_channel_0800245c",
            "code": "\nvoid configure_TIM_output_channel_0800245c(int *timer,undefined4 param1,undefined4 param2)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int temp5;\n  uint config;\n  int timer_config;\n  \n  if (*(char *)(timer + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)timer + 0x39) = 2;\n  *(undefined *)(timer + 0xe) = 1;\n  switch(param2) {\n  case 0:\n    TIM_OC1_SetConfig(*timer);\n    timer_config = *timer;\n    config = *(uint *)(temp1 + 0x10);\n    *(uint *)(timer_config + 0x18) = *(uint *)(timer_config + 0x18) | 8;\n    *(uint *)(timer_config + 0x18) = *(uint *)(timer_config + 0x18) & 0xfffffffb;\n    config = *(uint *)(timer_config + 0x18) | config;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    TIM_OC2_SetConfig(*timer);\n    timer_config = *timer;\n    temp5 = *(int *)(temp2 + 0x10);\n    *(uint *)(timer_config + 0x18) = *(uint *)(timer_config + 0x18) | 0x800;\n    *(uint *)(timer_config + 0x18) = *(uint *)(timer_config + 0x18) & 0xfffffbff;\n    config = *(uint *)(timer_config + 0x18) | temp5 << 8;\n    break;\n  case 8:\n    TIM_OC3_SetConfig(*timer);\n    timer_config = *timer;\n    config = *(uint *)(temp3 + 0x10);\n    *(uint *)(timer_config + 0x1c) = *(uint *)(timer_config + 0x1c) | 8;\n    *(uint *)(timer_config + 0x1c) = *(uint *)(timer_config + 0x1c) & 0xfffffffb;\n    config = *(uint *)(timer_config + 0x1c) | config;\n    goto LAB_080024fa;\n  case 0xc:\n    TIM_OC4_SetConfig(*timer);\n    timer_config = *timer;\n    temp5 = *(int *)(temp4 + 0x10);\n    *(uint *)(timer_config + 0x1c) = *(uint *)(timer_config + 0x1c) | 0x800;\n    *(uint *)(timer_config + 0x1c) = *(uint *)(timer_config + 0x1c) & 0xfffffbff;\n    config = *(uint *)(timer_config + 0x1c) | temp5 << 8;\nLAB_080024fa:\n    *(uint *)(timer_config + 0x1c) = config;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(timer_config + 0x18) = config;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)timer + 0x39) = 1;\n  *(undefined *)(timer + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "configure_tim_output_channel_0800245c",
                "param_1": "timer",
                "param_2": "param1",
                "param_3": "param2",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "extraout_r1_02": "temp4",
                "iVar1": "temp5",
                "uVar2": "config",
                "iVar3": "timer_config"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "TIM_OC2_SetConfig",
                "TIM_OC3_SetConfig",
                "TIM_OC1_SetConfig",
                "TIM_OC4_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bit_value_08002520",
            "code": "\nvoid updateBitValue_08002520(int dataPointer,uint bitPosition,int bitValue)\n\n{\n  *(uint *)(dataPointer + 0x20) = *(uint *)(dataPointer + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(dataPointer + 0x20) = bitValue << (bitPosition & 0xff) | *(uint *)(dataPointer + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bit_value_08002520",
                "param_1": "dataPointer",
                "param_2": "bitPosition",
                "param_3": "bitValue"
            },
            "calling": [
                "HAL_TIM_PWM_Start"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "initialize_timers_08002538",
            "code": "\nundefined4 initializeTimers_08002538(uint **timerPtr,undefined4 channel)\n\n{\n  uint channelConfig;\n  uint *timerPtr;\n  \n  TIM_CCxChannelCmd(*timerPtr,channel,1);\n  timerPtr = *timerPtr;\n  channelConfig = 0x40012c00;\n  if (timerPtr == (uint *)0x40012c00) {\n    channelConfig = timerData | 0x8000;\n  }\n  if (timerPtr == (uint *)0x40012c00) {\n    timerPtr[0x11] = channelConfig;\n  }\n  *timerPtr = *timerPtr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "initialize_timers_08002538",
                "param_1": "timerPtr",
                "param_2": "channel",
                "uVar1": "channelConfig",
                "puVar2": "timerPtr",
                "uRam40012c44": "timerData"
            },
            "calling": [
                "PWM_Init"
            ],
            "called": [
                "TIM_CCxChannelCmd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "update_parameter_08002564",
            "code": "\nundefined4 updateParameter_08002564(int *paramArray,uint *paramArray2)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(paramArray + 0xe) != '\\x01') {\n    *(undefined *)((int)paramArray + 0x39) = 2;\n    *(uint *)(*paramArray + 0x44) =\n         *paramArray2 | paramArray2[1] | paramArray2[2] | paramArray2[3] | paramArray2[4] | paramArray2[5] | paramArray2[6];\n    *(undefined *)((int)paramArray + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(paramArray + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "update_parameter_08002564",
                "param_1": "paramArray",
                "param_2": "paramArray2",
                "uVar1": "returnValue"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "initialize_memory_080025a4",
            "code": "\nundefined4 initializeMemory_080025a4(int *memoryStructure,uint *dataPointer)\n\n{\n  uint tempVar1;\n  undefined4 status;\n  int offset;\n  uint mask1;\n  \n  status = 2;\n  if (*(char *)(memoryStructure + 0xe) != '\\x01') {\n    *(undefined *)((int)memoryStructure + 0x39) = 2;\n    offset = *memoryStructure;\n    mask1 = *dataPointer;\n    tempVar1 = dataPointer[1];\n    *(uint *)(offset + 4) = *(uint *)(offset + 4) & 0xffffff8f;\n    *(uint *)(offset + 4) = *(uint *)(offset + 4) | mask1;\n    *(uint *)(offset + 8) = *(uint *)(offset + 8) & 0xffffff7f;\n    *(uint *)(offset + 8) = *(uint *)(offset + 8) | tempVar1;\n    *(undefined *)((int)memoryStructure + 0x39) = 1;\n    status = 0;\n    *(undefined *)(memoryStructure + 0xe) = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "initialize_memory_080025a4",
                "param_1": "memoryStructure",
                "param_2": "dataPointer",
                "uVar1": "tempVar1",
                "uVar2": "status",
                "iVar3": "offset",
                "uVar4": "mask1"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_clock_configuration_080025e8",
            "code": "\nvoid updateClockConfiguration_080025e8(int *configParams)\n\n{\n  int pclkFreq;\n  int adjustedPclkFreq;\n  uint calculation;\n  int adjustedDivisor;\n  int divisor;\n  int baseAddress;\n  \n  baseAddress = *configParams;\n  calculation = configParams[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | configParams[3];\n  *(uint *)(baseAddress + 0xc) = configParams[2] | calculation | configParams[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | configParams[6];\n  if (baseAddress == 0x40013800) {\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    adjustedDivisor = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(configParams[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    divisor = configParams[1];\n    adjustedPclkFreq = HAL_RCC_GetPCLK2Freq();\n    adjustedPclkFreq = (uint)(pclkFreq * 0x19) / (uint)(divisor << 2) +\n            (int)(((ulonglong)(uint)(adjustedPclkFreq * 0x19) / (ulonglong)(uint)(configParams[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n    calculation = (uint)(pclkFreq * 0x19) / (uint)(configParams[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK2Freq();\n  }\n  else {\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    adjustedDivisor = (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(configParams[1] << 2)) / 100);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    divisor = configParams[1];\n    adjustedPclkFreq = HAL_RCC_GetPCLK1Freq();\n    adjustedPclkFreq = (uint)(pclkFreq * 0x19) / (uint)(divisor << 2) +\n            (int)(((ulonglong)(uint)(adjustedPclkFreq * 0x19) / (ulonglong)(uint)(configParams[1] << 2)) / 100) *\n            -100;\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n    calculation = (uint)(pclkFreq * 0x19) / (uint)(configParams[1] << 2);\n    pclkFreq = HAL_RCC_GetPCLK1Freq();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((calculation + (int)(((ulonglong)(uint)(pclkFreq * 0x19) / (ulonglong)(uint)(configParams[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (adjustedPclkFreq * 0x10 + 0x32U) / 100 & 0xf0) +\n       adjustedDivisor * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_clock_configuration_080025e8",
                "param_1": "configParams",
                "iVar1": "pclkFreq",
                "iVar2": "adjustedPclkFreq",
                "uVar3": "calculation",
                "iVar4": "adjustedDivisor",
                "iVar5": "divisor",
                "iVar6": "baseAddress"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_RCC_GetPCLK2Freq",
                "HAL_RCC_GetPCLK1Freq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "initialize_uart_08002724",
            "code": "\nundefined4 initializeUART_08002724(int *uartConfig)\n\n{\n  int uartHandle;\n  \n  if (uartConfig != (int *)0x0) {\n    if (*(char *)((int)uartConfig + 0x39) == '\\0') {\n      *(undefined *)(uartConfig + 0xe) = 0;\n      HAL_UART_MspInit();\n    }\n    *(undefined *)((int)uartConfig + 0x39) = 2;\n    *(uint *)(*uartConfig + 0xc) = *(uint *)(*uartConfig + 0xc) & 0xffffdfff;\n    UART_SetConfig(uartConfig);\n    uartHandle = *uartConfig;\n    *(uint *)(uartHandle + 0x10) = *(uint *)(uartHandle + 0x10) & 0xffffb7ff;\n    *(uint *)(uartHandle + 0x14) = *(uint *)(uartHandle + 0x14) & 0xffffffd5;\n    *(uint *)(uartHandle + 0xc) = *(uint *)(uartHandle + 0xc) | 0x2000;\n    uartConfig[0xf] = 0;\n    *(undefined *)((int)uartConfig + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "initialize_uart_08002724",
                "param_1": "uartConfig",
                "iVar1": "uartHandle"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_UART_MspInit",
                "UART_SetConfig"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 processData_0800290c(int *data)\n\n{\n  byte tempByte;\n  int offset;\n  uint tempUint;\n  undefined4 tempUint4;\n  short tempShort;\n  ushort *ptr1;\n  ushort *ptr2;\n  bool condition;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  offset = *data;\n  ptr1 = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      ptr2 = ptr1 + 1;\n      *ptr1 = (ushort)((uint)(*(int *)(offset + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ptr2 = (ushort *)((int)ptr1 + 1);\n      *ptr1 = (ushort)*(int *)(offset + 4) & 0xff;\n    }\n    data[10] = (int)ptr2;\n  }\n  else {\n    if (data[4] == 0) {\n      tempByte = (byte)*(undefined4 *)(offset + 4);\n      data[10] = (int)ptr1 + 1;\n    }\n    else {\n      tempUint4 = *(undefined4 *)(offset + 4);\n      data[10] = (int)ptr1 + 1;\n      tempByte = (byte)tempUint4 & 0x7f;\n    }\n    *(byte *)ptr1 = tempByte;\n  }\n  tempShort = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = tempShort;\n  if (tempShort == 0) {\n    offset = *data;\n    *(uint *)(offset + 0xc) = *(uint *)(offset + 0xc) & 0xffffffdf;\n    condition = *(char *)((int)data + 0x39) != '2';\n    if (condition) {\n      tempUint = *(uint *)(offset + 0xc) & 0xfffffeff;\n    }\n    else {\n      offset = 0x12;\n      tempUint = 0x32;\n    }\n    if (condition) {\n      *(uint *)(offset + 0xc) = tempUint;\n      tempUint = *(uint *)(offset + 0x14) & 0xfffffffe;\n    }\n    if (condition) {\n      *(uint *)(offset + 0x14) = tempUint;\n      offset = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)offset;\n    HAL_UART_RxCpltCallback();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "tempByte",
                "iVar2": "offset",
                "uVar3": "tempUint",
                "uVar4": "tempUint4",
                "sVar5": "tempShort",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "bVar8": "condition"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [
                "HAL_UART_RxCpltCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "HAL_UART_IRQHandler"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid processData_0800299a(uint **inputData)\n\n{\n  uint firstValue;\n  short counter;\n  uint secondValue;\n  uint *ptrVar;\n  undefined newValue;\n  uint *dataPointer;\n  uint flag;\n  bool isTrue;\n  \n  dataPointer = *inputData;\n  secondValue = *dataPointer;\n  firstValue = dataPointer[3];\n  if ((secondValue & 0xf) == 0) {\n    if (((int)(secondValue << 0x1a) < 0) && ((int)(firstValue << 0x1a) < 0)) {\n      UART_Receive_IT();\n      return;\n    }\n  }\n  else {\n    flag = dataPointer[5] & 1;\n    if ((flag != 0) || ((firstValue & 0x120) != 0)) {\n      dataPointer = (uint *)(secondValue << 0x1f);\n      if ((int)dataPointer < 0) {\n        isTrue = (int)(firstValue << 0x17) < 0;\n        if (isTrue) {\n          dataPointer = (uint *)((uint)inputData[0xf] | 1);\n        }\n        if (isTrue) {\n          inputData[0xf] = dataPointer;\n        }\n      }\n      if (((int)(secondValue << 0x1d) < 0) && (flag != 0)) {\n        inputData[0xf] = (uint *)((uint)inputData[0xf] | 2);\n      }\n      if (((int)(secondValue << 0x1e) < 0) && (flag != 0)) {\n        inputData[0xf] = (uint *)((uint)inputData[0xf] | 4);\n      }\n      if (((int)(secondValue << 0x1c) < 0) && (flag != 0)) {\n        inputData[0xf] = (uint *)((uint)inputData[0xf] | 8);\n      }\n      if (inputData[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(secondValue << 0x1a) < 0) && ((int)(firstValue << 0x1a) < 0)) {\n        UART_Receive_IT(inputData);\n      }\n      dataPointer = *inputData;\n      if ((-1 < (int)inputData[0xf] << 0x1c) && ((dataPointer[5] & 0x40) == 0)) {\n        HAL_UART_ErrorCallback(inputData);\n        inputData[0xf] = (uint *)0x0;\n        return;\n      }\n      dataPointer[3] = dataPointer[3] & 0xfffffedf;\n      dataPointer[5] = dataPointer[5] & 0xfffffffe;\n      *(undefined *)((int)inputData + 0x39) = 1;\n      HAL_UART_ErrorCallback(inputData);\n      return;\n    }\n  }\n  if (((int)(secondValue << 0x18) < 0) && ((int)(firstValue << 0x18) < 0)) {\n    if ((*(byte *)((int)inputData + 0x39) & 0xdf) == 0x12) {\n      ptrVar = inputData[8];\n      if (inputData[2] == (uint *)0x1000) {\n        dataPointer[1] = *(ushort *)ptrVar & 0x1ff;\n        if (inputData[4] == (uint *)0x0) {\n          ptrVar = (uint *)((int)ptrVar + 2);\n        }\n        else {\n          ptrVar = (uint *)((int)ptrVar + 1);\n        }\n        inputData[8] = ptrVar;\n      }\n      else {\n        inputData[8] = (uint *)((int)ptrVar + 1);\n        dataPointer[1] = (uint)*(byte *)ptrVar;\n      }\n      counter = *(short *)((int)inputData + 0x26) + -1;\n      *(short *)((int)inputData + 0x26) = counter;\n      if (counter == 0) {\n        dataPointer[3] = dataPointer[3] & 0xffffff7f;\n        dataPointer[3] = dataPointer[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(secondValue << 0x19) < 0) && ((int)(firstValue << 0x19) < 0)) {\n    dataPointer[3] = dataPointer[3] & 0xffffffbf;\n    if (*(char *)((int)inputData + 0x39) == '2') {\n      newValue = 0x22;\n    }\n    else {\n      newValue = 1;\n    }\n    *(undefined *)((int)inputData + 0x39) = newValue;\n    HAL_UART_TxCpltCallback(inputData);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "inputData",
                "uVar1": "firstValue",
                "sVar2": "counter",
                "uVar3": "secondValue",
                "puVar4": "ptrVar",
                "uVar5": "newValue",
                "puVar6": "dataPointer",
                "uVar7": "flag",
                "bVar8": "isTrue"
            },
            "calling": [],
            "called": [
                "UART_Receive_IT",
                "HAL_UART_TxCpltCallback",
                "HAL_UART_ErrorCallback"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initialize_MPU9250_08002ad0(void)\n\n{\n  read_byte_from_I2C(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  write_byte_to_I2C(0xd0,0x6b,0x80,1);\n  write_byte_to_I2C(0xd0,0x6b,1);\n  write_byte_to_I2C(0xd0,0x6c,0,1);\n  write_byte_to_I2C(0xd0,0x19,0,1);\n  write_byte_to_I2C(0xd0,0x1d,3,1);\n  write_byte_to_I2C(0xd0,0x1a,3,1);\n  write_byte_to_I2C(0xd0,0x1b,0x10,1);\n  write_byte_to_I2C(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "I2C_ReadByte": "read_byte_from_I2C",
                "I2C_WriteByte": "write_byte_to_I2C"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "I2C_WriteByte",
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "read_and_process_sensor_data_08002b48",
            "code": "\nvoid readAndProcessSensorData_08002b48(void)\n\n{\n  undefined4 floatingPointValue;\n  uint sensorData;\n  int convertedSensorDataByte2;\n  int convertedSensorDataByte1;\n  undefined4 sensorDataByte1;\n  undefined4 sensorDataByte2;\n  \n  sensorDataByte1 = 0;\n  sensorDataByte2 = sensorData & 0xffff0000;\n  I2C_ReadByteArray(0xd0,0x3b,&sensorDataByte1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(sensorDataByte1._2_1_,sensorDataByte1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)sensorDataByte1,sensorDataByte1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)sensorDataByte2,sensorDataByte2._1_1_);\n  convertedSensorDataByte1 = (int)DAT_200002f6;\n  convertedSensorDataByte2 = (int)DAT_200002f8;\n  floatingPointValue = __floatsisf();\n  floatingPointValue = __aeabi_fmul(floatingPointValue,0x40800000);\n  DAT_200002d0 = __aeabi_fmul(floatingPointValue,0x38000000);\n  floatingPointValue = __floatsisf(convertedSensorDataByte1);\n  floatingPointValue = __aeabi_fmul(floatingPointValue,0x40800000);\n  DAT_200002d4 = __aeabi_fmul(floatingPointValue,0x38000000);\n  floatingPointValue = __floatsisf(convertedSensorDataByte2);\n  floatingPointValue = __aeabi_fmul(floatingPointValue,0x40800000);\n  DAT_200002d8 = __aeabi_fmul(floatingPointValue,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "read_and_process_sensor_data_08002b48",
                "in_r3": "sensorData",
                "local_18": "sensorDataByte1",
                "local_14": "sensorDataByte2",
                "iVar2": "convertedSensorDataByte2",
                "iVar3": "convertedSensorDataByte1",
                "uVar1": "floatingPointValue"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "read_and_calculate_sensor_data_08002bf0",
            "code": "\nvoid readAndCalculateSensorData_08002bf0(void)\n\n{\n  undefined4 uVar1;\n  int iVar2;\n  int iVar3;\n  undefined4 temperatureAndHumidityData;\n  undefined2 pressureData;\n  \n  temperatureAndHumidityData = 0;\n  pressureData = 0;\n  readSensorData(0xd0,0x43,&temperatureAndHumidityData,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(temperatureAndHumidityData._2_1_,temperatureAndHumidityData._3_1_);\n  DAT_200002be = CONCAT11((undefined)temperatureAndHumidityData,temperatureAndHumidityData._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)pressureData,pressureData._1_1_);\n  iVar3 = (int)DAT_200002c0;\n  iVar2 = (int)DAT_200002c2;\n  uVar1 = __floatsisf();\n  uVar1 = __aeabi_fmul(uVar1,0x447a0000);\n  uVar1 = __aeabi_fmul(uVar1,0x38000000);\n  DAT_200002c4 = __aeabi_fsub(uVar1,DAT_20000000);\n  uVar1 = __floatsisf(iVar3);\n  uVar1 = __aeabi_fmul(uVar1,0x447a0000);\n  uVar1 = __aeabi_fmul(uVar1,0x38000000);\n  DAT_200002c8 = __aeabi_fsub(uVar1,DAT_20000004);\n  uVar1 = __floatsisf(iVar2);\n  uVar1 = __aeabi_fmul(uVar1,0x447a0000);\n  uVar1 = __aeabi_fmul(uVar1,0x38000000);\n  DAT_200002cc = __aeabi_fsub(uVar1,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "read_and_calculate_sensor_data_08002bf0",
                "local_20": "temperatureAndHumidityData",
                "local_1c": "pressureData",
                "I2C_ReadByteArray": "readSensorData"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "update_mpu9250_data_08002cb0",
            "code": "\nvoid updateMPU9250Data_08002cb0(undefined4 param1,undefined4 param2,undefined4 param3,uint data)\n\n{\n  undefined4 convertedValue;\n  uint byteValue;\n  \n  byteValue = data;\n  I2C_WriteByte(0xd0,0x37,0x22,1,param1,param2,param3);\n  I2C_WriteByte(0xd0,0x6a,1);\n  I2C_ReadByte(0x18,0,\"../Src/MPU9250.c\",0xad);\n  I2C_WriteByte(0x18,0xb,1);\n  I2C_WriteByte(0x18,10,0,1);\n  I2C_WriteByte(0x18,10,0xf,1);\n  I2C_ReadByteArray(0x18,0x10,&byteValue,3,\"../Src/MPU9250.c\",0xb6);\n  convertedValue = __floatsisf((byteValue & 0xff) - 0x80);\n  convertedValue = __aeabi_fmul(convertedValue,0x3b800000);\n  DAT_200002e8 = __addsf3(convertedValue,0x3f800000);\n  convertedValue = __floatsisf((byteValue >> 8 & 0xff) - 0x80);\n  convertedValue = __aeabi_fmul(convertedValue,0x3b800000);\n  DAT_200002ec = __addsf3(convertedValue,0x3f800000);\n  convertedValue = __floatsisf((byteValue >> 0x10 & 0xff) - 0x80);\n  convertedValue = __aeabi_fmul(convertedValue,0x3b800000);\n  DAT_200002f0 = __addsf3(convertedValue,0x3f800000);\n  I2C_WriteByte(0x18,10,0,1);\n  I2C_WriteByte(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "update_mpu9250_data_08002cb0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "data",
                "uVar1": "convertedValue",
                "local_c": "byteValue"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [
                "__floatsisf",
                "I2C_WriteByte",
                "I2C_ReadByte",
                "__addsf3",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_sensor_data_08002d88",
            "code": "\nvoid processSensorData_08002d88(undefined4 deviceAddress,undefined4 registerAddress,undefined4 param_3,undefined4 param_4)\n\n{\n  int readResult;\n  undefined4 tempFloat1;\n  undefined4 tempFloat2;\n  int iVar4;\n  undefined2 sensorData;\n  undefined unusedVar1;\n  undefined unusedVar2;\n  undefined unusedVar3;\n  undefined unusedVar4;\n  byte byteValue;\n  undefined unusedVar5;\n  \n  unusedVar5 = (undefined)((uint)param_4 >> 0x18);\n  sensorData = 0;\n  unusedVar1 = 0;\n  unusedVar2 = 0;\n  unusedVar3 = 0;\n  unusedVar4 = 0;\n  byteValue = 0;\n  readResult = I2C_ReadByte(0x18,2,\"../Src/MPU9250.c\",0xd7,deviceAddress,registerAddress);\n  if (readResult << 0x1f < 0) {\n    I2C_ReadByteArray(0x18,3,&sensorData,7,\"../Src/MPU9250.c\",0xda);\n    tempFloat2 = DAT_2000001c;\n    if ((int)((uint)byteValue << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(unusedVar2,unusedVar1);\n      DAT_200002bc = CONCAT11(unusedVar4,unusedVar3);\n      iVar4 = (int)DAT_200002ba;\n      readResult = (int)DAT_200002bc;\n      DAT_200002b8 = sensorData;\n      tempFloat1 = __floatsisf();\n      tempFloat1 = __aeabi_fmul(tempFloat1,tempFloat2);\n      tempFloat1 = __aeabi_fmul(tempFloat1,DAT_200002e8);\n      tempFloat1 = __aeabi_fsub(tempFloat1,DAT_20000020);\n      DAT_200002dc = __aeabi_fmul(tempFloat1,DAT_2000002c);\n      tempFloat1 = __floatsisf(iVar4);\n      tempFloat1 = __aeabi_fmul(tempFloat1,tempFloat2);\n      tempFloat1 = __aeabi_fmul(tempFloat1,DAT_200002ec);\n      tempFloat1 = __aeabi_fsub(tempFloat1,DAT_20000024);\n      DAT_200002e0 = __aeabi_fmul(tempFloat1,DAT_20000030);\n      tempFloat1 = __floatsisf(readResult);\n      tempFloat2 = __aeabi_fmul(tempFloat1,tempFloat2);\n      tempFloat2 = __aeabi_fmul(tempFloat2,DAT_200002f0);\n      tempFloat2 = __aeabi_fsub(tempFloat2,DAT_20000028);\n      DAT_200002e4 = __aeabi_fmul(tempFloat2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_sensor_data_08002d88",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "iVar1": "readResult",
                "uVar2": "tempFloat1",
                "uVar3": "tempFloat2",
                "local_28": "sensorData",
                "uStack_26": "unusedVar1",
                "uStack_25": "unusedVar2",
                "local_24": "unusedVar3",
                "local_23": "unusedVar4",
                "local_22": "byteValue",
                "uStack_21": "unusedVar5"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "__floatsisf",
                "I2C_ReadByte",
                "__aeabi_fsub",
                "I2C_ReadByteArray",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_sensors_08002ea0",
            "code": "\nvoid initializeSensors_08002ea0(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 output1;\n  \n  MPU9250_Init();\n  AK8963_Init();\n  MadgwickSetBeta(0x3f19999a);\n  MadgwickSetDelta(0,output1,arg3,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_sensors_08002ea0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "output1"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "MPU9250_Init",
                "MadgwickSetBeta",
                "MadgwickSetDelta",
                "AK8963_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "calculate_sum_08002ec0",
            "code": "\nvoid calculateSum_08002ec0(void)\n\n{\n  undefined4 subtractedValue;\n  undefined4 multipliedValue1;\n  undefined4 multipliedValue2;\n  \n  multipliedValue1 = DAT_2000024c;\n  multipliedValue2 = DAT_20000010;\n  subtractedValue = __aeabi_fsub(0x3f800000,DAT_20000010);\n  multipliedValue1 = __aeabi_fmul(subtractedValue,multipliedValue1);\n  multipliedValue2 = __aeabi_fmul(multipliedValue2,DAT_2000000c);\n  DAT_2000000c = __addsf3(multipliedValue2,multipliedValue1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "calculate_sum_08002ec0",
                "uVar1": "subtractedValue",
                "uVar2": "multipliedValue1",
                "uVar3": "multipliedValue2"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_new_value_08002ed4",
            "code": "\nvoid calculate_new_value_08002ed4(void)\n\n{\n  undefined4 difference_from_1;\n  undefined4 constant_var;\n  undefined4 multiplied_variable;\n  \n  constant_var = DAT_20000248;\n  multiplied_variable = input_value_1;\n  difference_from_1 = __aeabi_fsub(0x3f800000,input_value_1);\n  constant_var = __aeabi_fmul(difference_from_1,constant_var);\n  multiplied_variable = __aeabi_fmul(multiplied_variable,input_value_2);\n  input_value_2 = __addsf3(multiplied_variable,constant_var);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_new_value_08002ed4",
                "uVar1": "difference_from_1",
                "uVar2": "constant_var",
                "uVar3": "multiplied_variable",
                "uRam20000018": "input_value_1",
                "uRam20000014": "input_value_2"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "adjust_float_value_08002ee8",
            "code": "\nvoid adjustFloatValue_08002ee8(void)\n\n{\n  undefined4 originalValue;\n  int comparisonResult;\n  \n  originalValue = DAT_20000250;\n  comparisonResult = __aeabi_fcmpge(DAT_20000250,0xc3340000);\n  if ((comparisonResult != 0) && (comparisonResult = __aeabi_fcmplt(originalValue,0x42b40000), comparisonResult != 0)) {\n    __addsf3(originalValue,0x42b40000);\n    return;\n  }\n  __aeabi_fsub(originalValue,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "adjust_float_value_08002ee8",
                "uVar1": "originalValue",
                "iVar2": "comparisonResult"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fcmplt",
                "__aeabi_fcmpge"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "update_sensor_data_08002f28",
            "code": "\n\n\nvoid updateSensorData_08002f28(void)\n\n{\n  undefined4 timeDelta;\n  \n  readAccelerometerData();\n  readGyroscopeData();\n  readMagnetometerData();\n  DAT_20000258 = getCurrentTime();\n  timeDelta = convertToFloat(DAT_20000258 - DAT_20000254);\n  divideFloats(timeDelta,0x447a0000);\n  setQuaternionDelta();\n  DAT_20000254 = DAT_20000258;\n  updateQuaternion\n            (DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n             DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n             &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  timeDelta = getRoll();\n  multiplyFloats(timeDelta,0x41200000);\n  DAT_20001395._0_2_ = __aeabi_f2iz();\n  timeDelta = getPitch();\n  multiplyFloats(timeDelta,0x41200000);\n  DAT_20001395._2_2_ = __aeabi_f2iz();\n  getYaw();\n  DAT_20001399 = __aeabi_f2iz();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "update_sensor_data_08002f28",
                "uVar1": "timeDelta",
                "MPU9250_ReadAccelData": "readAccelerometerData",
                "MPU9250_ReadGyroData": "readGyroscopeData",
                "AK8963_ReadData": "readMagnetometerData",
                "micros": "getCurrentTime",
                "__floatunsisf": "convertToFloat",
                "__aeabi_fdiv": "divideFloats",
                "MadgwickSetDelta": "setQuaternionDelta",
                "MadgwickQuaternionUpdate": "updateQuaternion",
                "AHRS_GetRoll": "getRoll",
                "__aeabi_fmul": "multiplyFloats",
                "AHRS_GetPitch": "getPitch",
                "AHRS_GetYaw": "getYaw"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MadgwickSetDelta",
                "AHRS_GetPitch",
                "MPU9250_ReadGyroData",
                "__aeabi_f2iz",
                "__floatunsisf",
                "MPU9250_ReadAccelData",
                "__aeabi_fmul",
                "AK8963_ReadData",
                "micros",
                "MadgwickQuaternionUpdate",
                "AHRS_GetYaw",
                "__aeabi_fdiv",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "read_i2_c_bytes_08003034",
            "code": "\nuint readI2CBytes_08003034(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  undefined4 result;\n  \n  result = arg4;\n  readI2CBytes_08003034(0xee,0,&result,3,\"../Src/MS5611.c\",0x8c,arg3);\n  return (uint)CONCAT12((undefined)result,CONCAT11(result._1_1_,result._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "read_i2_c_bytes_08003034",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "local_c": "result",
                "I2C_ReadBytes": "readI2CBytes"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "I2C_ReadBytes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_value_08003068",
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "calling": [
                "PID_UpdateAltitude"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "read_and_store_sensor_data_08003298",
            "code": "\nvoid readAndStoreSensorData_08003298(void)\n\n{\n  int counter;\n  undefined byte1;\n  undefined byte2;\n  \n  counter = 0;\n  writeByteToI2C(0xee,0x1e,1);\n  delayMillis(10);\n  DAT_20000038 = 8;\n  do {\n    byte1 = 0;\n    byte2 = 0;\n    readByteArrayFromI2C(0xee,counter + offset & 0xffff,&byte1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + counter) = CONCAT11(byte1,byte2);\n    counter = counter + 2;\n  } while (counter != 0x10);\n  counter = 0;\n  do {\n    (&DAT_20000300)[counter] = 0;\n    counter = counter + 1;\n  } while (counter != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "read_and_store_sensor_data_08003298",
                "local_1c": "byte1",
                "local_1b": "byte2",
                "iVar1": "counter",
                "I2C_WriteByte": "writeByteToI2C",
                "delay_ms": "delayMillis",
                "I2C_ReadByteArray": "readByteArrayFromI2C",
                "0xa0U": "offset"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "I2C_WriteByte",
                "delay_ms",
                "I2C_ReadByteArray"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_global_variable_08003314",
            "code": "\nvoid set_global_variable_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_global_variable_08003314",
                "param_1": "value"
            },
            "calling": [
                "IMU_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_data_pointer_08003320",
            "code": "\nvoid set_data_pointer_08003320(undefined4 new_data)\n\n{\n  DAT_20000360 = new_data;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_data_pointer_08003320",
                "param_1": "new_data"
            },
            "calling": [
                "AHRS_ComputeAngles",
                "IMU_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_angles_08003330",
            "code": "\nvoid calculateAngles_08003330(undefined4 side1,undefined4 side2,undefined4 side3,undefined4 angle1,\n                 undefined4 angle2,undefined4 angle3,undefined4 x,undefined4 y,\n                 undefined4 z,undefined4 *results)\n\n{\n  undefined4 sideSquaredSum;\n  undefined4 temp1;\n  int side1ZeroCheck;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  int doubleSide2;\n  undefined4 doubleSide3;\n  undefined4 side1TimesX;\n  undefined4 side1TimesZ;\n  undefined4 side1TimesY;\n  undefined4 side2TimesY;\n  undefined4 side2Squared;\n  undefined4 side3Squared;\n  undefined4 side1Squared;\n  undefined4 temp6;\n  undefined4 temp7;\n  int temp8;\n  undefined4 temp9;\n  undefined4 temp10;\n  undefined4 temp11;\n  undefined4 temp12;\n  undefined4 temp13;\n  undefined4 temp14;\n  int temp15;\n  undefined4 angle1ZeroCheck;\n  undefined4 angle2ZeroCheck;\n  undefined4 angle3ZeroCheck;\n  int side1ZeroCheck0;\n  undefined8 temp16;\n  undefined8 temp17;\n  \n  angle3ZeroCheck = DAT_20000048;\n  angle2ZeroCheck = DAT_20000044;\n  side1ZeroCheck0 = DAT_20000040;\n  angle1ZeroCheck = DAT_2000003c;\n  sideSquaredSum = __aeabi_fmul(side1,side1);\n  temp1 = __aeabi_fmul(side2);\n  sideSquaredSum = __addsf3(sideSquaredSum,temp1);\n  temp1 = __aeabi_fmul(side3);\n  __addsf3(sideSquaredSum,temp1);\n  __aeabi_f2d();\n  sqrt();\n  sideSquaredSum = __truncdfsf2();\n  side1ZeroCheck = __aeabi_fcmpeq(sideSquaredSum,0);\n  if (side1ZeroCheck == 0) {\n    temp1 = __aeabi_fmul(x);\n    temp2 = __aeabi_fmul(y);\n    temp1 = __addsf3(temp1,temp2);\n    temp2 = __aeabi_fmul(z);\n    __addsf3(temp1,temp2);\n    __aeabi_f2d();\n    sqrt();\n    temp1 = __truncdfsf2();\n    side1ZeroCheck = __aeabi_fcmpeq(temp1,0);\n    if (side1ZeroCheck == 0) {\n      temp16 = __aeabi_f2d(angle1);\n      __muldf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),0xa2529d39,0x3f91df46);\n      temp2 = __truncdfsf2();\n      temp16 = __aeabi_f2d(angle2);\n      __muldf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),0xa2529d39,0x3f91df46);\n      temp3 = __truncdfsf2();\n      temp16 = __aeabi_f2d(angle3);\n      __muldf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),0xa2529d39,0x3f91df46);\n      temp4 = __truncdfsf2();\n      side1ZeroCheck = __addsf3(angle1ZeroCheck);\n      temp5 = __addsf3(side1ZeroCheck0);\n      doubleSide2 = __addsf3(angle2ZeroCheck,angle2ZeroCheck);\n      doubleSide3 = __addsf3(angle3ZeroCheck,angle3ZeroCheck);\n      side1TimesX = __aeabi_fmul(angle1ZeroCheck);\n      side1TimesZ = __aeabi_fmul(angle1ZeroCheck,side1ZeroCheck0);\n      side1TimesY = __aeabi_fmul(angle1ZeroCheck,angle2ZeroCheck);\n      side2TimesY = __aeabi_fmul(side1ZeroCheck0);\n      side2Squared = __aeabi_fmul(side1ZeroCheck0,angle3ZeroCheck);\n      side3Squared = __aeabi_fmul(angle2ZeroCheck,angle2ZeroCheck);\n      side1Squared = __aeabi_fmul(angle3ZeroCheck,angle3ZeroCheck);\n      sideSquaredSum = __aeabi_fdiv(0x3f800000,sideSquaredSum);\n      temp1 = __aeabi_fdiv(0x3f800000,temp1);\n      temp6 = __aeabi_fmul(x,temp1);\n      temp7 = __aeabi_fmul(y,temp1);\n      temp1 = __aeabi_fmul(z,temp1);\n      temp8 = __aeabi_fmul(side1ZeroCheck,temp6);\n      temp9 = __aeabi_fmul(side1ZeroCheck,temp7);\n      temp10 = __aeabi_fmul(side1ZeroCheck,temp1);\n      temp11 = __aeabi_fmul(temp5,temp6);\n      temp12 = __aeabi_fmul(side1TimesX,temp6);\n      temp13 = __aeabi_fmul(angle3ZeroCheck,temp9);\n      temp12 = __aeabi_fsub(temp12,temp13);\n      temp13 = __aeabi_fmul(angle2ZeroCheck,temp10);\n      temp12 = __addsf3(temp12,temp13);\n      temp13 = __aeabi_fmul(side2TimesY,temp6);\n      temp12 = __addsf3(temp12,temp13);\n      temp13 = __aeabi_fmul(temp5,temp7);\n      temp13 = __aeabi_fmul(temp13,angle2ZeroCheck);\n      temp12 = __addsf3(temp12,temp13);\n      temp13 = __aeabi_fmul(temp5,temp1);\n      temp13 = __aeabi_fmul(temp13,angle3ZeroCheck);\n      temp12 = __addsf3(temp12,temp13);\n      temp13 = __aeabi_fmul(side3Squared,temp6);\n      temp12 = __aeabi_fsub(temp12,temp13);\n      temp13 = __aeabi_fmul(side1Squared,temp6);\n      temp12 = __aeabi_fsub(temp12,temp13);\n      temp13 = __aeabi_fmul(angle3ZeroCheck,temp8);\n      temp14 = __aeabi_fmul(side1TimesX,temp7);\n      temp13 = __addsf3(temp13,temp14);\n      temp10 = __aeabi_fmul(side1ZeroCheck0,temp10);\n      temp10 = __aeabi_fsub(temp13,temp10);\n      temp13 = __aeabi_fmul(angle2ZeroCheck,temp11);\n      temp10 = __addsf3(temp10,temp13);\n      temp13 = __aeabi_fmul(side2TimesY,temp7);\n      temp10 = __aeabi_fsub(temp10,temp13);\n      temp13 = __aeabi_fmul(side3Squared,temp7);\n      temp10 = __addsf3(temp10,temp13);\n      temp13 = __aeabi_fmul(doubleSide2,temp1);\n      temp13 = __aeabi_fmul(temp13,angle3ZeroCheck);\n      temp10 = __addsf3(temp10,temp13);\n      temp13 = __aeabi_fmul(side1Squared,temp7);\n      temp10 = __aeabi_fsub(temp10,temp13);\n      temp12 = __aeabi_fmul(temp12,temp12);\n      temp10 = __aeabi_fmul(temp10,temp10);\n      __addsf3(temp12,temp10);\n      __aeabi_f2d();\n      sqrt();\n      temp15 = __truncdfsf2();\n      temp10 = __aeabi_fmul(temp8 + -0x80000000,angle2ZeroCheck);\n      temp9 = __aeabi_fmul(side1ZeroCheck0,temp9);\n      temp9 = __addsf3(temp10,temp9);\n      side1TimesX = __aeabi_fmul(side1TimesX,temp1);\n      side1TimesX = __addsf3(temp9,side1TimesX);\n      temp9 = __aeabi_fmul(angle3ZeroCheck,temp11);\n      side1TimesX = __addsf3(side1TimesX,temp9);\n      temp9 = __aeabi_fmul(side2TimesY,temp1);\n      side1TimesX = __aeabi_fsub(side1TimesX,temp9);\n      temp9 = __aeabi_fmul(doubleSide2,temp7);\n      temp9 = __aeabi_fmul(temp9,angle3ZeroCheck);\n      side1TimesX = __addsf3(side1TimesX,temp9);\n      temp9 = __aeabi_fmul(side3Squared,temp1);\n      side1TimesX = __aeabi_fsub(side1TimesX,temp9);\n      temp9 = __aeabi_fmul(side1Squared,temp1);\n      side1TimesX = __addsf3(side1TimesX,temp9);\n      temp9 = __addsf3(side1TimesX,side1TimesX);\n      temp10 = __addsf3(side2Squared);\n      temp11 = __aeabi_fmul(angle2ZeroCheck,side1ZeroCheck);\n      temp10 = __aeabi_fsub(temp10,temp11);\n      temp11 = __aeabi_fmul(side1,sideSquaredSum);\n      temp10 = __aeabi_fsub(temp10,temp11);\n      temp11 = __aeabi_fmul(angle3ZeroCheck,doubleSide2);\n      temp12 = __addsf3(side1TimesZ);\n      temp11 = __addsf3(temp11,temp12);\n      temp12 = __aeabi_fmul(side2,sideSquaredSum);\n      temp11 = __aeabi_fsub(temp11,temp12);\n      temp12 = __aeabi_fmul(angle2ZeroCheck,side1TimesX);\n      temp13 = __aeabi_fsub(0x3f000000,side3Squared);\n      side1Squared = __aeabi_fsub(temp13,side1Squared);\n      side1Squared = __aeabi_fmul(side1Squared,temp15);\n      temp13 = __aeabi_fsub(side2Squared,side1TimesY);\n      temp13 = __aeabi_fmul(temp13,side1TimesX);\n      side1Squared = __addsf3(side1Squared,temp13);\n      side1Squared = __aeabi_fsub(side1Squared,temp6);\n      temp6 = __aeabi_fmul(side1ZeroCheck0,side1TimesX);\n      temp13 = __aeabi_fmul(side1ZeroCheck0,angle2ZeroCheck);\n      temp14 = __aeabi_fmul(angle1ZeroCheck,angle3ZeroCheck);\n      temp13 = __aeabi_fsub(temp13,temp14);\n      temp13 = __aeabi_fmul(temp13,temp15);\n      temp14 = __aeabi_fmul(angle2ZeroCheck,angle3ZeroCheck);\n      side1TimesZ = __addsf3(temp14,side1TimesZ);\n      side1TimesZ = __aeabi_fmul(side1TimesZ,side1TimesX);\n      side1TimesZ = __addsf3(temp13,side1TimesZ);\n      side1TimesZ = __aeabi_fsub(side1TimesZ,temp7);\n      temp7 = __aeabi_fmul(angle2ZeroCheck,temp15);\n      temp13 = __aeabi_fsub(0x3f000000,side2TimesY);\n      temp13 = __aeabi_fsub(temp13,side3Squared);\n      temp13 = __aeabi_fmul(temp13,side1TimesX);\n      side1TimesY = __addsf3(side1TimesY,side2Squared);\n      side1TimesY = __aeabi_fmul(side1TimesY,temp15);\n      side1TimesY = __addsf3(temp13,side1TimesY);\n      temp1 = __aeabi_fsub(side1TimesY,temp1);\n      side1TimesY = __aeabi_fmul(doubleSide2 + -0x80000000,temp10);\n      side2Squared = __aeabi_fmul(temp5,temp11);\n      side1TimesY = __addsf3(side1TimesY,side2Squared);\n      side2Squared = __aeabi_fmul(temp12,side1Squared);\n      side1TimesY = __aeabi_fsub(side1TimesY,side2Squared);\n      side2Squared = __aeabi_fmul(angle3ZeroCheck,temp15 + -0x80000000);\n      side2Squared = __addsf3(side2Squared,temp6);\n      side2Squared = __aeabi_fmul(side2Squared,side1TimesZ);\n      side1TimesY = __addsf3(side1TimesY,side2Squared);\n      side2Squared = __aeabi_fmul(temp7,temp1);\n      side1TimesY = __addsf3(side1TimesY,side2Squared);\n      side2TimesY = __addsf3(side2TimesY);\n      side2TimesY = __aeabi_fsub(0x3f800000,side2TimesY);\n      side2Squared = __addsf3(side3Squared);\n      side2TimesY = __aeabi_fsub(side2TimesY,side2Squared);\n      sideSquaredSum = __aeabi_fmul(side3,sideSquaredSum);\n      sideSquaredSum = __aeabi_fsub(side2TimesY,sideSquaredSum);\n      side2TimesY = __aeabi_fmul(angle3ZeroCheck,side1TimesX);\n      side1TimesX = __aeabi_fmul(angle1ZeroCheck,side1TimesX);\n      side2Squared = __aeabi_fmul(doubleSide3,temp10);\n      side3Squared = __aeabi_fmul(side1ZeroCheck,temp11);\n      side2Squared = __addsf3(side2Squared,side3Squared);\n      side3Squared = __aeabi_fmul(side1ZeroCheck0,0x40800000);\n      side3Squared = __aeabi_fmul(side3Squared,sideSquaredSum);\n      side2Squared = __aeabi_fsub(side2Squared,side3Squared);\n      side3Squared = __aeabi_fmul(side1Squared,side2TimesY);\n      side2Squared = __addsf3(side2Squared,side3Squared);\n      side3Squared = __addsf3(temp7,side1TimesX);\n      side3Squared = __aeabi_fmul(side3Squared,side1TimesZ);\n      side2Squared = __addsf3(side2Squared,side3Squared);\n      side3Squared = __aeabi_fmul(angle3ZeroCheck,temp15);\n      temp7 = __aeabi_fmul(side1ZeroCheck0,temp9);\n      side3Squared = __aeabi_fsub(side3Squared,temp7);\n      side3Squared = __aeabi_fmul(side3Squared,temp1);\n      side2Squared = __addsf3(side2Squared,side3Squared);\n      temp8 = __addsf3(temp15,temp15);\n      side3Squared = __aeabi_fmul(side1ZeroCheck0,temp15);\n      temp7 = __aeabi_fmul(side1ZeroCheck + -0x80000000,temp10);\n      doubleSide3 = __aeabi_fmul(doubleSide3,temp11);\n      doubleSide3 = __addsf3(temp7,doubleSide3);\n      temp7 = __aeabi_fmul(angle2ZeroCheck,0x40800000);\n      sideSquaredSum = __aeabi_fmul(temp7,sideSquaredSum);\n      sideSquaredSum = __aeabi_fsub(doubleSide3,sideSquaredSum);\n      doubleSide3 = __aeabi_fmul(angle2ZeroCheck,temp8 + -0x80000000);\n      doubleSide3 = __aeabi_fsub(doubleSide3,side1TimesX);\n      doubleSide3 = __aeabi_fmul(doubleSide3,side1Squared);\n      sideSquaredSum = __addsf3(sideSquaredSum,doubleSide3);\n      doubleSide3 = __addsf3(side2TimesY,side3Squared);\n      doubleSide3 = __aeabi_fmul(doubleSide3,side1TimesZ);\n      sideSquaredSum = __addsf3(sideSquaredSum,doubleSide3);\n      doubleSide3 = __aeabi_fmul(angle1ZeroCheck,temp15);\n      side1TimesX = __aeabi_fmul(angle2ZeroCheck,temp9);\n      doubleSide3 = __aeabi_fsub(doubleSide3,side1TimesX);\n      doubleSide3 = __aeabi_fmul(doubleSide3,temp1);\n      doubleSide3 = __addsf3(sideSquaredSum,doubleSide3);\n      sideSquaredSum = __aeabi_fmul(temp5,temp10);\n      temp5 = __aeabi_fmul(doubleSide2,temp11);\n      sideSquaredSum = __addsf3(sideSquaredSum,temp5);\n      temp5 = __aeabi_fmul(angle3ZeroCheck,temp8 + -0x80000000);\n      temp5 = __addsf3(temp5,temp6);\n      temp5 = __aeabi_fmul(temp5,side1Squared);\n      sideSquaredSum = __addsf3(sideSquaredSum,temp5);\n      temp5 = __aeabi_fmul(angle1ZeroCheck,temp15 + -0x80000000);\n      temp5 = __addsf3(temp5,temp12);\n      temp5 = __aeabi_fmul(temp5,side1TimesZ);\n      sideSquaredSum = __addsf3(sideSquaredSum,temp5);\n      temp1 = __aeabi_fmul(temp1,side3Squared);\n      temp5 = __addsf3(sideSquaredSum,temp1);\n      sideSquaredSum = __aeabi_fmul(side1TimesY);\n      temp1 = __aeabi_fmul(side2Squared);\n      sideSquaredSum = __addsf3(sideSquaredSum,temp1);\n      temp1 = __aeabi_fmul(doubleSide3,doubleSide3);\n      sideSquaredSum = __addsf3(sideSquaredSum,temp1);\n      temp1 = __aeabi_fmul(temp5,temp5);\n      __addsf3(sideSquaredSum,temp1);\n      __aeabi_f2d();\n      sqrt();\n      sideSquaredSum = __truncdfsf2();\n      side1TimesX = __aeabi_fdiv(0x3f800000,sideSquaredSum);\n      sideSquaredSum = DAT_2000035c;\n      temp1 = __aeabi_fmul(side1ZeroCheck0 + -0x80000000,temp2);\n      side1TimesZ = __aeabi_fmul(angle2ZeroCheck,temp3);\n      temp1 = __aeabi_fsub(temp1,side1TimesZ);\n      side1TimesZ = __aeabi_fmul(angle3ZeroCheck,temp4);\n      temp1 = __aeabi_fsub(temp1,side1TimesZ);\n      side1TimesZ = __aeabi_fmul(temp1,0x3f000000);\n      side1TimesY = __aeabi_fmul(side1TimesY,side1TimesX);\n      temp1 = DAT_20000360;\n      side1TimesY = __aeabi_fmul(side1TimesY,sideSquaredSum);\n      side1TimesZ = __aeabi_fsub(side1TimesZ,side1TimesY);\n      temp1 = __aeabi_fmul(side1TimesZ,temp1);\n      side1TimesZ = __addsf3(temp1,angle1ZeroCheck);\n      side1TimesY = __aeabi_fmul(angle1ZeroCheck,temp2);\n      side2TimesY = __aeabi_fmul(angle2ZeroCheck,temp4);\n      temp1 = DAT_20000360;\n      side1TimesY = __addsf3(side1TimesY,side2TimesY);\n      side2TimesY = __aeabi_fmul(angle3ZeroCheck,temp3);\n      side1TimesY = __aeabi_fsub(side1TimesY,side2TimesY);\n      side1TimesY = __aeabi_fmul(side1TimesY,0x3f000000);\n      side2TimesY = __aeabi_fmul(side2Squared,side1TimesX);\n      side2TimesY = __aeabi_fmul(side2TimesY,sideSquaredSum);\n      side1TimesY = __aeabi_fsub(side1TimesY,side2TimesY);\n      temp1 = __aeabi_fmul(side1TimesY,temp1);\n      side1TimesY = __addsf3(temp1,side1ZeroCheck0);\n      temp1 = DAT_20000360;\n      side2TimesY = __aeabi_fmul(angle1ZeroCheck,temp3);\n      side2Squared = __aeabi_fmul(side1ZeroCheck0,temp4);\n      side2TimesY = __aeabi_fsub(side2TimesY,side2Squared);\n      side2Squared = __aeabi_fmul(angle3ZeroCheck,temp2);\n      side2TimesY = __addsf3(side2TimesY,side2Squared);\n      side2TimesY = __aeabi_fmul(side2TimesY,0x3f000000);\n      doubleSide3 = __aeabi_fmul(doubleSide3,side1TimesX);\n      doubleSide3 = __aeabi_fmul(doubleSide3,sideSquaredSum);\n      doubleSide3 = __aeabi_fsub(side2TimesY,doubleSide3);\n      temp1 = __aeabi_fmul(doubleSide3,temp1);\n      temp1 = __addsf3(temp1,angle2ZeroCheck);\n      angle1ZeroCheck = __aeabi_fmul(angle1ZeroCheck,temp4);\n      temp3 = __aeabi_fmul(side1ZeroCheck0,temp3);\n      angle1ZeroCheck = __addsf3(angle1ZeroCheck,temp3);\n      angle2ZeroCheck = __aeabi_fmul(angle2ZeroCheck,temp2);\n      angle1ZeroCheck = __aeabi_fsub(angle1ZeroCheck,angle2ZeroCheck);\n      angle2ZeroCheck = __aeabi_fmul(angle1ZeroCheck,0x3f000000);\n      angle1ZeroCheck = __aeabi_fmul(temp5,side1TimesX);\n      sideSquaredSum = __aeabi_fmul(angle1ZeroCheck,sideSquaredSum);\n      angle1ZeroCheck = DAT_20000360;\n      angle2ZeroCheck = __aeabi_fsub(angle2ZeroCheck,sideSquaredSum);\n      angle1ZeroCheck = __aeabi_fmul(angle2ZeroCheck,angle1ZeroCheck);\n      angle1ZeroCheck = __addsf3(angle1ZeroCheck,angle3ZeroCheck);\n      angle2ZeroCheck = __aeabi_fmul(side1TimesZ,side1TimesZ);\n      angle3ZeroCheck = __aeabi_fmul(side1TimesY,side1TimesY);\n      angle2ZeroCheck = __addsf3(angle2ZeroCheck,angle3ZeroCheck);\n      angle3ZeroCheck = __aeabi_fmul(temp1,temp1);\n      angle2ZeroCheck = __addsf3(angle2ZeroCheck,angle3ZeroCheck);\n      angle3ZeroCheck = __aeabi_fmul(angle1ZeroCheck,angle1ZeroCheck);\n      __addsf3(angle2ZeroCheck,angle3ZeroCheck);\n      __aeabi_f2d();\n      sqrt();\n      angle2ZeroCheck = __truncdfsf2();\n      angle2ZeroCheck = __aeabi_fdiv(0x3f800000,angle2ZeroCheck);\n      angle3ZeroCheck = __aeabi_fmul(side1TimesZ,angle2ZeroCheck);\n      DAT_2000003c = angle3ZeroCheck;\n      side1ZeroCheck0 = __aeabi_fmul(side1TimesY,angle2ZeroCheck);\n      DAT_20000040 = side1ZeroCheck0;\n      sideSquaredSum = __aeabi_fmul(temp1,angle2ZeroCheck);\n      DAT_20000044 = sideSquaredSum;\n      DAT_20000048 = __aeabi_fmul(angle1ZeroCheck,angle2ZeroCheck);\n      angle1ZeroCheck = __aeabi_fmul(side1ZeroCheck0,DAT_20000048);\n      angle2ZeroCheck = __aeabi_fmul(angle3ZeroCheck,sideSquaredSum);\n      angle1ZeroCheck = __aeabi_fsub(angle1ZeroCheck,angle2ZeroCheck);\n      __addsf3(angle1ZeroCheck,angle1ZeroCheck);\n      __aeabi_f2d();\n      temp16 = asin();\n      temp16 = __muldf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),0,0x40668000);\n      __divdf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),0x54442d18,0x400921fb);\n      angle1ZeroCheck = __truncdfsf2();\n      *results = angle1ZeroCheck;\n      side1ZeroCheck0 = DAT_20000040;\n      angle1ZeroCheck = DAT_2000003c;\n      angle2ZeroCheck = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      angle3ZeroCheck = __aeabi_fmul(side1ZeroCheck0,side1ZeroCheck0);\n      angle3ZeroCheck = __aeabi_fsub(angle2ZeroCheck,angle3ZeroCheck);\n      angle2ZeroCheck = DAT_20000044;\n      sideSquaredSum = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      sideSquaredSum = __aeabi_fsub(angle3ZeroCheck,sideSquaredSum);\n      angle3ZeroCheck = DAT_20000048;\n      temp1 = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __addsf3(sideSquaredSum,temp1);\n      temp16 = __aeabi_f2d();\n      angle1ZeroCheck = __aeabi_fmul(angle1ZeroCheck,side1ZeroCheck0);\n      angle2ZeroCheck = __aeabi_fmul(angle2ZeroCheck,angle3ZeroCheck);\n      angle1ZeroCheck = __addsf3(angle1ZeroCheck,angle2ZeroCheck);\n      __addsf3(angle1ZeroCheck,angle1ZeroCheck);\n      temp17 = __aeabi_f2d();\n      temp16 = atan2((int)temp17,(int)((ulonglong)temp17 >> 0x20),(int)temp16,\n                     (int)((ulonglong)temp16 >> 0x20));\n      temp16 = __muldf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),0,0x40668000);\n      __divdf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),0x54442d18,0x400921fb);\n      angle1ZeroCheck = __truncdfsf2();\n      results[1] = angle1ZeroCheck;\n      side1ZeroCheck0 = DAT_20000040;\n      angle1ZeroCheck = DAT_2000003c;\n      angle2ZeroCheck = __aeabi_fmul(DAT_2000003c,DAT_2000003c);\n      angle3ZeroCheck = __aeabi_fmul(side1ZeroCheck0,side1ZeroCheck0);\n      angle3ZeroCheck = __addsf3(angle2ZeroCheck,angle3ZeroCheck);\n      angle2ZeroCheck = DAT_20000044;\n      sideSquaredSum = __aeabi_fmul(DAT_20000044,DAT_20000044);\n      sideSquaredSum = __aeabi_fsub(angle3ZeroCheck,sideSquaredSum);\n      angle3ZeroCheck = DAT_20000048;\n      temp1 = __aeabi_fmul(DAT_20000048,DAT_20000048);\n      __aeabi_fsub(sideSquaredSum,temp1);\n      temp16 = __aeabi_f2d();\n      angle2ZeroCheck = __aeabi_fmul(side1ZeroCheck0,angle2ZeroCheck);\n      angle1ZeroCheck = __aeabi_fmul(angle1ZeroCheck,angle3ZeroCheck);\n      angle1ZeroCheck = __addsf3(angle2ZeroCheck,angle1ZeroCheck);\n      __addsf3(angle1ZeroCheck,angle1ZeroCheck);\n      temp17 = __aeabi_f2d();\n      temp16 = atan2((int)temp17,(int)((ulonglong)temp17 >> 0x20),(int)temp16,\n                     (int)((ulonglong)temp16 >> 0x20));\n      temp16 = __muldf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),0,0x40668000);\n      __divdf3((int)temp16,(int)((ulonglong)temp16 >> 0x20),0x54442d18,0x400921fb);\n      angle1ZeroCheck = __truncdfsf2();\n      results[2] = angle1ZeroCheck;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_angles_08003330",
                "param_1": "side1",
                "param_2": "side2",
                "param_3": "side3",
                "param_4": "angle1",
                "param_5": "angle2",
                "param_6": "angle3",
                "param_7": "x",
                "param_8": "y",
                "param_9": "z",
                "param_10": "results",
                "uVar1": "sideSquaredSum",
                "uVar2": "temp1",
                "iVar3": "side1ZeroCheck",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "doubleSide2",
                "uVar9": "doubleSide3",
                "uVar10": "side1TimesX",
                "uVar11": "side1TimesZ",
                "uVar12": "side1TimesY",
                "uVar13": "side2TimesY",
                "uVar14": "side2Squared",
                "uVar15": "side3Squared",
                "uVar16": "side1Squared",
                "uVar17": "temp6",
                "uVar18": "temp7",
                "iVar19": "temp8",
                "uVar20": "temp9",
                "uVar21": "temp10",
                "uVar22": "temp11",
                "uVar23": "temp12",
                "uVar24": "temp13",
                "uVar25": "temp14",
                "iVar26": "temp15",
                "uVar27": "angle1ZeroCheck",
                "uVar28": "angle2ZeroCheck",
                "uVar29": "angle3ZeroCheck",
                "uVar31": "temp16",
                "uVar32": "temp17"
            },
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "atan2",
                "sqrt",
                "__aeabi_fcmpeq",
                "__aeabi_fsub",
                "__aeabi_f2d",
                "__addsf3",
                "__muldf3",
                "__aeabi_fdiv",
                "__truncdfsf2",
                "__aeabi_fmul",
                "asin",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "convert_to64_bit_08003eb0",
            "code": "\nlonglong convertTo64Bit_08003eb0(uint inputValue)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combineValues(inputValue,1);\n  }\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "convert_to64_bit_08003eb0",
                "param_1": "inputValue",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_value_08003ec8",
            "code": "\nundefined4 incrementAndStoreValue_08003ec8(int baseAddress,undefined data)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = data;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_value_08003ec8",
                "param_1": "baseAddress",
                "param_2": "data"
            },
            "calling": [
                "HAL_UART_RxCpltCallback"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "write_pin_set_flag_if_zero_08003f3c",
            "code": "\nvoid writePinSetFlagIfZero_08003f3c(int flag1,int flag2,int flag3)\n\n{\n  HAL_GPIO_WritePin(0x40011000,0x8000,flag1 == 0);\n  HAL_GPIO_WritePin(0x40011000,0x4000,flag2 == 0);\n  HAL_GPIO_WritePin(0x40011000,0x2000,flag3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "write_pin_set_flag_if_zero_08003f3c",
                "param_1": "flag1",
                "param_2": "flag2",
                "param_3": "flag3"
            },
            "calling": [
                "PID_Update",
                "Devices_Init"
            ],
            "called": [
                "HAL_GPIO_WritePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "set_param_08003fc4",
            "code": "\nvoid setParam_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "set_param_08003fc4",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_parameter_value_08003fd0",
            "code": "\nvoid set_parameter_value_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_parameter_value_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_08003fdc",
            "code": "\nvoid setParam_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_08003fdc",
                "param_1": "value"
            },
            "calling": [
                "Motor_StopAll",
                "Motor_DistributeSpeed"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_global_value_08003fe8",
            "code": "\nvoid setGlobalValue_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_global_value_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "Motor_DistributeSpeed",
                "Motor_StopAll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "initialize_pwm_08003ff4",
            "code": "\nvoid initialize_PWM_08003ff4(void)\n\n{\n  HAL_TIM_PWM_Start(&DAT_200015f8,4);\n  HAL_TIM_PWM_Start(&DAT_20001540,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,8);\n  HAL_TIM_PWM_Start(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "initialize_pwm_08003ff4"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_TIM_PWM_Start"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "perform_led_animation_08004028",
            "code": "\nvoid performLEDAnimation_08004028(void)\n\n{\n  int loopCounter;\n  \n  Peripherals_Init();\n  PWM_Init();\n  loopCounter = 3;\n  do {\n    toggleLED(1,0);\n    delay_ms(100);\n    toggleLED(0,1);\n    delay_ms(100);\n    toggleLED(0,0,1);\n    delay_ms(100);\n    loopCounter = loopCounter + -1;\n  } while (loopCounter != 0);\n  toggleLED(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "perform_led_animation_08004028",
                "iVar1": "loopCounter"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "Peripherals_Init",
                "PWM_Init",
                "delay_ms",
                "toggleLED"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "write_data_to_i2_c_device_0800403c",
            "code": "\nvoid writeDataToI2CDevice_0800403c(undefined4 deviceAddress,undefined4 memAddress,undefined data,int delayFlag)\n\n{\n  int result;\n  undefined dataBuffer [8];\n  \n  dataBuffer[0] = data;\n  result = HAL_I2C_Mem_Write(&DAT_20001504,deviceAddress,memAddress,1,dataBuffer,1,200);\n  if (result != 0) {\n    _Error_Handler(\"../Src/i2c.c\",0x1b);\n  }\n  if (delayFlag != 0) {\n    delay_ms(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "write_data_to_i2_c_device_0800403c",
                "param_1": "deviceAddress",
                "param_2": "memAddress",
                "param_3": "data",
                "param_4": "delayFlag",
                "iVar1": "result",
                "local_14": "dataBuffer"
            },
            "calling": [
                "taskScheduler",
                "MPU9250_Init",
                "AK8963_Init",
                "MS5611_Init"
            ],
            "called": [
                "HAL_I2C_Mem_Write",
                "delay_ms",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "read_i2_c_byte_0800407c",
            "code": "\nundefined readI2CByte_0800407c(undefined4 deviceAddress,undefined4 registerAddress,undefined4 errorHandlerParam1,undefined4 errorHandlerParam2)\n\n{\n  int iVar1;\n  undefined dataByte [8];\n  \n  dataByte[0] = 0;\n  iVar1 = HAL_I2C_Mem_Read(&DAT_20001504,deviceAddress,registerAddress,1,dataByte,1,200);\n  if (iVar1 != 0) {\n    _Error_Handler(errorHandlerParam1,errorHandlerParam2);\n  }\n  return dataByte[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "read_i2_c_byte_0800407c",
                "param_1": "deviceAddress",
                "param_2": "registerAddress",
                "param_3": "errorHandlerParam1",
                "param_4": "errorHandlerParam2",
                "local_14": "dataByte"
            },
            "calling": [
                "MPU9250_Init",
                "AK8963_Init",
                "I2C_ReadByteArray",
                "AK8963_ReadData"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "read_mem_from_i2_c_080040b8",
            "code": "\nvoid readMemFromI2C_080040b8(undefined4 deviceAddress,undefined4 memAddress,undefined4 memAddressSize,undefined4 data,\n                 undefined4 errorHandlerParam1,undefined4 errorHandlerParam2)\n\n{\n  int readResult;\n  \n  readResult = HAL_I2C_Mem_Read(&DAT_20001504,deviceAddress,memAddress,1,memAddressSize,data,200,data);\n  if (readResult != 0) {\n    _Error_Handler(errorHandlerParam1,errorHandlerParam2);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "read_mem_from_i2_c_080040b8",
                "param_1": "deviceAddress",
                "param_2": "memAddress",
                "param_3": "memAddressSize",
                "param_4": "data",
                "param_5": "errorHandlerParam1",
                "param_6": "errorHandlerParam2",
                "iVar1": "readResult"
            },
            "calling": [
                "MS5611_ReadADC"
            ],
            "called": [
                "HAL_I2C_Mem_Read",
                "_Error_Handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "read_and_save_i2_c_data_080040e8",
            "code": "\nvoid readAndSaveI2CData_080040e8(undefined4 deviceAddress,int baseAddress,int bufferAddress,int bufferLength)\n\n{\n  undefined byteRead;\n  int index;\n  undefined *bufferPointer;\n  int lineNumber;\n  \n  bufferPointer = (undefined *)(bufferAddress + -1);\n  lineNumber = bufferLength;\n  for (index = 0; index < bufferLength; index = index + 1) {\n    byteRead = I2C_ReadByte(deviceAddress,baseAddress + index & 0xffff,\"../Src/i2c.c\",0x4c,lineNumber);\n    bufferPointer = bufferPointer + 1;\n    *bufferPointer = byteRead;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "read_and_save_i2_c_data_080040e8",
                "param_1": "deviceAddress",
                "param_2": "baseAddress",
                "param_3": "bufferAddress",
                "param_4": "bufferLength",
                "uVar1": "byteRead",
                "iVar2": "index",
                "puVar3": "bufferPointer",
                "iVar4": "lineNumber"
            },
            "calling": [
                "AK8963_Init",
                "MPU9250_ReadGyroData",
                "MS5611_Init",
                "MPU9250_ReadAccelData",
                "AK8963_ReadData"
            ],
            "called": [
                "I2C_ReadByte"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "update_flight_controller_0800411c",
            "code": "\nvoid updateFlightController_0800411c(void)\n\n{\n  undefined4 *pointer1;\n  longlong longVar2;\n  uint variable3;\n  uint variable4;\n  uint variable5;\n  undefined4 variable6;\n  undefined4 variable7;\n  int millisCounter;\n  uint variable9;\n  uint variable10;\n  uint variable11;\n  uint variable12;\n  undefined4 *pointer2;\n  undefined4 unaffectedVariable4;\n  int variable14;\n  int variable15;\n  bool booleanVariable16;\n  undefined8 variable17;\n  \n  millisCounter = millis();\n  if (1 < (uint)(millisCounter - DAT_2000028c)) {\n    DAT_2000028c = millis();\n    AHRS_ComputeAngles();\n  }\n  millisCounter = millis();\n  if (2 < (uint)(millisCounter - DAT_20000294)) {\n    DAT_20000294 = millis();\n    PID_Update();\n  }\n  millisCounter = millis();\n  if (3 < (uint)(millisCounter - DAT_20000290)) {\n    DAT_20000290 = millis();\n    MSP_SendIdent();\n    MSP_SendStatus();\n    MSP_SendMotor();\n    MSP_SendAttitude();\n    MSP_SendAltitude();\n    MSP_SendRawIMU();\n    MSP_SendPID();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    variable15 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    variable9 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)variable15) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)variable15) >> 0x20) << 9;\n    variable10 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)variable15 >> 7);\n    variable11 = variable10 + (uint)DAT_20000260 * 0x10000;\n    variable4 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)variable15) >> 8);\n    millisCounter = variable9 + 2000;\n    variable5 = variable4 + (uint)DAT_2000025e * 0x8000;\n    booleanVariable16 = (int)variable9 < 0;\n    if (1999 < millisCounter) {\n      variable9 = 0;\n    }\n    variable3 = variable9;\n    if (booleanVariable16 != SBORROW4(millisCounter,2000)) {\n      variable14 = variable9 * variable9 * 5;\n      variable9 = variable14 >> 2;\n      variable3 = variable14 >> 1;\n    }\n    variable12 = variable11 - variable3;\n    longVar2 = (ulonglong)(variable5 - variable9) * (ulonglong)DAT_2000026c;\n    variable14 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)variable15 >> 0x28) +\n               (uint)CARRY4(variable4,(uint)DAT_2000025e * 0x8000)) - ((int)variable9 >> 0x1f)) -\n             (uint)(variable5 < variable9)) + (int)((ulonglong)longVar2 >> 0x20);\n    variable4 = (uint)longVar2 >> 0x15 | variable14 * 0x800;\n    variable6 = __floatsisf(variable4 - variable12 >> 0xf |\n                        (((variable14 >> 0x15) -\n                         ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)variable15 >> 0x27) +\n                           (uint)CARRY4(variable10,(uint)DAT_20000260 * 0x10000)) - ((int)variable3 >> 0x1f)\n                          ) - (uint)(variable11 < variable3))) - (uint)(variable4 < variable12)) * 0x20000);\n    variable6 = __aeabi_fdiv(variable6,0x42c80000);\n    DAT_20000354 = variable6;\n    variable7 = __floatsisf(millisCounter);\n    DAT_20000358 = __aeabi_fdiv(variable7,0x42c80000);\n    __aeabi_fdiv(variable6,0x447d5000);\n    variable17 = __aeabi_f2d();\n    variable17 = pow((int)variable17,(int)((ulonglong)variable17 >> 0x20),0x60000000,0x3fc85b95);\n    variable17 = __subdf3(0,0x3ff00000,(int)variable17,(int)((ulonglong)variable17 >> 0x20));\n    __muldf3((int)variable17,(int)((ulonglong)variable17 >> 0x20),0,0x40e5a540);\n    variable6 = __truncdfsf2();\n    variable7 = 0;\n    pointer2 = &DAT_20000300;\n    DAT_20000350 = variable6;\n    do {\n      pointer1 = pointer2 + 1;\n      *pointer2 = *pointer1;\n      variable7 = __addsf3(variable7);\n      pointer2 = pointer1;\n    } while (pointer1 != &DAT_2000034c);\n    DAT_2000034c = variable6;\n    variable6 = __addsf3(variable7,variable6);\n    DAT_200002fc = __aeabi_fdiv(variable6,0x41a00000);\n    millisCounter = __aeabi_f2iz();\n    DAT_200014ab = millisCounter * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = millis();\n  }\n  millisCounter = millis();\n  if (((10 < (uint)(millisCounter - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = MS5611_ReadADC();\n    DAT_20000275 = '\\x01';\n    I2C_WriteByte(0xee,DAT_20000038 + 0x40,1,0,unaffectedVariable4);\n    DAT_20000278 = millis();\n  }\n  millisCounter = millis();\n  if (((10 < (uint)(millisCounter - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = MS5611_ReadADC();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "update_flight_controller_0800411c",
                "puVar1": "pointer1",
                "lVar2": "longVar2",
                "uVar3": "variable3",
                "uVar4": "variable4",
                "uVar5": "variable5",
                "uVar6": "variable6",
                "uVar7": "variable7",
                "iVar8": "millisCounter",
                "uVar9": "variable9",
                "uVar10": "variable10",
                "uVar11": "variable11",
                "uVar12": "variable12",
                "puVar13": "pointer2",
                "unaff_r4": "unaffectedVariable4",
                "iVar14": "variable14",
                "iVar15": "variable15",
                "bVar16": "booleanVariable16",
                "uVar17": "variable17"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MSP_SendPID",
                "I2C_WriteByte",
                "MSP_SendMotor",
                "millis",
                "MSP_SendAltitude",
                "__subdf3",
                "__addsf3",
                "AHRS_ComputeAngles",
                "__aeabi_f2iz",
                "__muldf3",
                "pow",
                "MSP_SendIdent",
                "__truncdfsf2",
                "__floatsisf",
                "MSP_SendRawIMU",
                "__aeabi_f2d",
                "MSP_SendAttitude",
                "MS5611_ReadADC",
                "PID_Update",
                "__aeabi_fdiv",
                "MSP_SendStatus"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_system_08004194",
            "code": "\nvoid initializeSystem_08004194(void)\n\n{\n  initializeDevices();\n  initializeSerial();\n  initializeIMU();\n  initializeMS5611();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_system_08004194",
                "Devices_Init": "initializeDevices",
                "serialBegin": "initializeSerial",
                "IMU_Init": "initializeIMU",
                "MS5611_Init": "initializeMS5611"
            },
            "calling": [
                "main"
            ],
            "called": [
                "MS5611_Init",
                "serialBegin",
                "IMU_Init",
                "Devices_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "continuous_execution_080041ae",
            "code": "\nvoid continuousExecution_080041ae(void)\n\n{\n  initializeForkServer(0);\n  initialize();\n  do {\n    incrementTick();\n    executeTask();\n  } while( forever );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "continuous_execution_080041ae",
                "startForkserver": "initializeForkServer",
                "setup": "initialize",
                "HAL_IncTick": "incrementTick",
                "taskScheduler": "executeTask",
                "true": "forever"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "taskScheduler",
                "startForkserver",
                "HAL_IncTick",
                "setup"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "disable_motors_080041c4",
            "code": "\nvoid disableMotors_080041c4(undefined4 unusedParam1,undefined4 unusedParam2,undefined4 unusedParam3,undefined4 unusedParam4)\n\n{\n  undefined4 unusedVar1;\n  \n  Motor1_SetPWM(0);\n  Motor2_SetPWM(0);\n  Motor3_SetPWM(0);\n  Motor4_SetPWM(0,unusedVar1,unusedParam3,unusedParam4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "disable_motors_080041c4",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "param_3": "unusedParam3",
                "param_4": "unusedParam4",
                "extraout_r1": "unusedVar1"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "adjust_motor_pwm_0800426c",
            "code": "\n\n\nvoid adjustMotorPWM_0800426c(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  uint result4;\n  uint result5;\n  uint result6;\n  uint result7;\n  \n  result1 = __aeabi_fsub();\n  result2 = __addsf3(inputParam1,inputParam2);\n  result3 = __aeabi_fsub(result1,inputParam3);\n  result3 = __addsf3(result3,inputParam4);\n  __aeabi_fsub(result3,0x447a0000);\n  result4 = __aeabi_f2iz();\n  result3 = __aeabi_fsub(result2,inputParam3);\n  result3 = __aeabi_fsub(result3,inputParam4);\n  __aeabi_fsub(result3,0x447a0000);\n  result5 = __aeabi_f2iz();\n  result1 = __addsf3(result1,inputParam3);\n  result1 = __aeabi_fsub(result1,inputParam4);\n  __aeabi_fsub(result1,0x447a0000);\n  result6 = __aeabi_f2iz();\n  result1 = __addsf3(inputParam3,result2);\n  result1 = __addsf3(result1,inputParam4);\n  __aeabi_fsub(result1,0x447a0000);\n  result7 = __aeabi_f2iz();\n  if (999 < (int)result7) {\n    result7 = 1000;\n  }\n  if (999 < (int)result6) {\n    result6 = 1000;\n  }\n  if (999 < (int)result5) {\n    result5 = 1000;\n  }\n  if (999 < (int)result4) {\n    result4 = 1000;\n  }\n  DAT_200002a0 = result5 & ~((int)result5 >> 0x1f);\n  DAT_200002a4 = result4 & ~((int)result4 >> 0x1f);\n  DAT_2000029c = result6 & ~((int)result6 >> 0x1f);\n  DAT_20000298 = result7 & ~((int)result7 >> 0x1f);\n  Motor1_SetPWM();\n  Motor2_SetPWM(DAT_2000029c);\n  Motor3_SetPWM(DAT_200002a0);\n  Motor4_SetPWM(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "adjust_motor_pwm_0800426c",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__aeabi_fsub",
                "Motor1_SetPWM",
                "Motor4_SetPWM",
                "__addsf3",
                "__aeabi_f2iz",
                "Motor3_SetPWM",
                "Motor2_SetPWM"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "print_and_xor_bytes_08004300",
            "code": "\nvoid printAndXORBytes_08004300(uint key,byte *data,uint length)\n\n{\n  uint xoredValue;\n  byte *bytePtr;\n  \n  serialPrint(&DAT_0800732e);\n  serialWrite(length & 0xff);\n  xoredValue = length & 0xff ^ key;\n  serialWrite(key);\n  for (bytePtr = data; (int)bytePtr - (int)data < (int)length; bytePtr = bytePtr + 1) {\n    serialWrite(*bytePtr);\n    xoredValue = xoredValue ^ *bytePtr;\n  }\n  serialWrite(xoredValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "print_and_xor_bytes_08004300",
                "param_1": "key",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "xoredValue",
                "pbVar2": "bytePtr"
            },
            "calling": [
                "MSP_SendPID",
                "MSP_SendMotor",
                "MSP_SendAltitude",
                "MSP_SendRawIMU",
                "MSP_SendAttitude",
                "MSP_SendIdent",
                "MSP_SendStatus"
            ],
            "called": [
                "serialWrite",
                "serialPrint"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "send_frame_with_config_08004348",
            "code": "\n\n\nvoid sendFrameWithConfig_08004348(undefined4 config,uint flags,undefined4 value)\n\n{\n  undefined4 frameData;\n  uint maskedFlags;\n  undefined4 configAddress;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  frameData = 0x40003e9;\n  maskedFlags = flags & 0xff000000;\n  configAddress = value;\n  MSP_SendFrame(100,&frameData,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "send_frame_with_config_08004348",
                "param_1": "config",
                "param_2": "flags",
                "param_3": "value",
                "local_10": "frameData",
                "local_c": "maskedFlags",
                "uStack_8": "configAddress"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "send_frame_to_msp_08004384",
            "code": "\n\n\nvoid sendFrameToMSP_08004384(undefined4 frameData,undefined4 param2,undefined4 param3,uint flags)\n\n{\n  undefined4 constant1;\n  undefined4 constant2;\n  uint maskedFlags;\n  \n  _DAT_200013bd = 0x2a0007;\n  constant1 = _DAT_200013b9;\n  constant2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  maskedFlags = flags & 0xff000000;\n  MSP_SendFrame(0x65,&constant1,0xb,0,frameData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "send_frame_to_msp_08004384",
                "param_1": "frameData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "flags",
                "local_14": "constant1",
                "uStack_10": "constant2",
                "local_c": "maskedFlags"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "send_frame_data_080043bc",
            "code": "\nvoid sendFrameData_080043bc(void)\n\n{\n  undefined4 dataElement1;\n  undefined4 dataElement2;\n  undefined4 *frameDataPtr;\n  undefined4 *dataPtr;\n  undefined4 frameData [2];\n  undefined2 frameMetadata [6];\n  \n  dataPtr = (undefined4 *)&DAT_2000142a;\n  frameDataPtr = frameData;\n  do {\n    dataElement1 = *dataPtr;\n    dataElement2 = dataPtr[1];\n    dataPtr = dataPtr + 2;\n    *frameDataPtr = dataElement1;\n    frameDataPtr[1] = dataElement2;\n    frameDataPtr = frameDataPtr + 2;\n  } while (dataPtr != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)frameDataPtr = DAT_2000143a;\n  MSP_SendFrame(0x66,frameData,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "send_frame_data_080043bc",
                "local_24": "frameData",
                "local_1c": "frameMetadata",
                "uVar1": "dataElement1",
                "uVar2": "dataElement2",
                "puVar3": "frameDataPtr",
                "puVar4": "dataPtr"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "send_frame_data_080043f0",
            "code": "\n\n\nvoid sendFrameData_080043f0(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 dataArray [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  dataArray[0] = arg3;\n  MSP_SendFrame(0x68,&data1,8,dataArray);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "send_frame_data_080043f0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "dataArray"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "send_frame_to_msp_08004410",
            "code": "\nvoid sendFrameToMSP_08004410(undefined4 data1,undefined4 data2,undefined4 data3)\n\n{\n  undefined4 constant;\n  undefined4 combinedValue;\n  undefined4 frameData;\n  \n  constant = DAT_20001395;\n  combinedValue = CONCAT22((short)((uint)data2 >> 0x10),DAT_20001399);\n  frameData = data3;\n  MSP_SendFrame(0x6c,&constant,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "send_frame_to_msp_08004410",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "local_10": "constant",
                "local_c": "combinedValue",
                "uStack_8": "frameData"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "send_frame_to_msp_08004434",
            "code": "\nvoid sendFrameToMSP_08004434(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  \n  data1 = DAT_200014ab;\n  data2 = CONCAT22((short)((uint)param2 >> 0x10),DAT_200014af);\n  data3 = param3;\n  MSP_SendFrame(0x6d,&data1,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "send_frame_to_msp_08004434",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "local_10": "data1",
                "local_c": "data2",
                "uStack_8": "data3"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "send_frame_data_08004458",
            "code": "\nvoid sendFrameData_08004458(void)\n\n{\n  undefined4 *tempDestination;\n  undefined4 *source;\n  undefined4 tempValue;\n  undefined4 *tempPointer1;\n  undefined4 *tempPointer2;\n  undefined4 frameData [3];\n  undefined2 dataBuffer [10];\n  \n  tempDestination = frameData;\n  source = &DAT_2000139b;\n  do {\n    tempPointer2 = source;\n    tempPointer1 = tempDestination;\n    tempValue = tempPointer2[1];\n    *tempPointer1 = *tempPointer2;\n    tempPointer1[1] = tempValue;\n    tempDestination = tempPointer1 + 2;\n    source = tempPointer2 + 2;\n  } while (tempPointer2 + 2 != (undefined4 *)0x200013b3);\n  tempPointer1[2] = uRam200013b3;\n  *(undefined2 *)(tempPointer1 + 3) = *(undefined2 *)(tempPointer2 + 3);\n  MSP_SendFrame(0x70,frameData,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "send_frame_data_08004458",
                "puVar1": "tempDestination",
                "puVar2": "source",
                "uVar3": "tempValue",
                "puVar4": "tempPointer1",
                "puVar5": "tempPointer2",
                "local_30": "frameData",
                "local_24": "dataBuffer"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "MSP_SendFrame"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "error_handling_08004490",
            "code": "\nvoid errorHandling_08004490(undefined4 errorType,undefined4 lineNumber)\n\n{\n  HAL_GPIO_WritePin(0x40011000,0x4000,1);\n  HAL_GPIO_WritePin(0x40011000,0x8000,0);\n  HAL_GPIO_WritePin(0x40011000,0x2000,0);\n  do {\n    HAL_GPIO_TogglePin(0x40011000,0x4000);\n    HAL_GPIO_TogglePin(0x40011000,0x8000);\n    HAL_GPIO_TogglePin(0x40011000,0x2000);\n    serialPrint(\"Error with \");\n    serialPrint(errorType);\n    serialPrint(\" at line: \");\n    serialInt(lineNumber);\n    serialWrite(10);\n    delay_ms(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "error_handling_08004490",
                "param_1": "errorType",
                "param_2": "lineNumber"
            },
            "calling": [
                "Peripherals_Init",
                "I2C_WriteByte",
                "SystemClock_Config",
                "I2C_ReadByte",
                "I2C_ReadBytes"
            ],
            "called": [
                "serialInt",
                "serialWrite",
                "delay_ms",
                "serialPrint",
                "HAL_GPIO_WritePin",
                "HAL_GPIO_TogglePin"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_system_08004514",
            "code": "\nvoid initializeSystem_08004514(void)\n\n{\n  int result;\n  uint hclkFrequency;\n  undefined4 lineNumber;\n  int clockConfig;\n  undefined4 rccOscConfig;\n  int clockConfigArg1;\n  int rccOscConfigResult;\n  undefined4 rccClockConfigArg1;\n  int rccClockConfigResult;\n  undefined4 rccClockConfigArg2 [4];\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  \n  localVar1 = 1;\n  localVar2 = 0x10;\n  clockConfig = 2;\n  localVar4 = 0;\n  rccClockConfigArg2[0] = 2;\n  localVar3 = 2;\n  localVar5 = 0x380000;\n  result = HAL_RCC_OscConfig(rccClockConfigArg2);\n  if (result == 0) goto LAB_08004540;\n  lineNumber = 0x3c;\n  while( true ) {\n    result = _Error_Handler(\"../Src/peripherals.c\",lineNumber);\nLAB_08004540:\n    rccOscConfig = 0xf;\n    rccClockConfigArg1 = 0x400;\n    clockConfigArg1 = clockConfig;\n    rccOscConfigResult = result;\n    rccClockConfigResult = result;\n    clockConfig = HAL_RCC_ClockConfig(&rccOscConfig,clockConfig);\n    if (clockConfig == 0) break;\n    lineNumber = 0x49;\n  }\n  hclkFrequency = HAL_RCC_GetHCLKFreq();\n  HAL_SYSTICK_Config(hclkFrequency / 1000);\n  HAL_SYSTICK_CLKSourceConfig(4);\n  HAL_NVIC_SetPriority(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_system_08004514",
                "iVar1": "result",
                "uVar2": "hclkFrequency",
                "uVar3": "lineNumber",
                "iVar4": "clockConfig",
                "local_44": "rccOscConfig",
                "local_40": "clockConfigArg1",
                "local_3c": "rccOscConfigResult",
                "local_38": "rccClockConfigArg1",
                "local_34": "rccClockConfigResult",
                "local_30": "rccClockConfigArg2",
                "local_20": "localVar1",
                "local_1c": "localVar2",
                "local_14": "localVar3",
                "local_10": "localVar4",
                "local_c": "localVar5"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_RCC_ClockConfig",
                "HAL_RCC_GetHCLKFreq",
                "HAL_RCC_OscConfig",
                "HAL_SYSTICK_CLKSourceConfig",
                "_Error_Handler",
                "HAL_SYSTICK_Config"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_peripherals_0800458c",
            "code": "\n\n\nvoid initializePeripherals_0800458c(void)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  int iVar3;\n  int timPwmConfig1;\n  int timPwmConfig2;\n  int channelConfig1;\n  int channelConfig2;\n  int channelConfig3;\n  int channelConfig4;\n  int channelConfig5;\n  int channelConfig6;\n  int timBreakDeadTimeConfig;\n  int timBreakDeadTimeConfig2;\n  int timBreakDeadTimeConfig3;\n  int timBreakDeadTimeConfig4;\n  int timBreakDeadTimeConfig5;\n  undefined4 config1;\n  int config2;\n  \n  HAL_Init();\n  SystemClock_Config();\n  iVar3 = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  HAL_GPIO_WritePin(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  HAL_GPIO_WritePin(0x40010800,0x20,0);\n  timBreakDeadTimeConfig = 0xe000;\n  timBreakDeadTimeConfig2 = 1;\n  timBreakDeadTimeConfig4 = 2;\n  HAL_GPIO_Init(0x40011000,&timBreakDeadTimeConfig);\n  timBreakDeadTimeConfig = 0x20;\n  timBreakDeadTimeConfig2 = 1;\n  timBreakDeadTimeConfig4 = 2;\n  HAL_GPIO_Init(0x40010800,&timBreakDeadTimeConfig);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  iVar1 = HAL_I2C_Init();\n  if (iVar1 == 0) goto LAB_0800463a;\n  uVar2 = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  iVar1 = _Error_Handler(\"../Src/peripherals.c\",uVar2);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = iVar1;\n                                  DAT_20001588 = iVar1;\n                                  DAT_2000158c = iVar1;\n                                  DAT_20001594 = iVar1;\n                                  DAT_20001598 = iVar1;\n                                  iVar1 = HAL_UART_Init(&DAT_2000157c);\n                                  if (iVar1 == 0) break;\n                                  uVar2 = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = iVar3;\n                                DAT_200015c4 = iVar1;\n                                DAT_200015cc = iVar1;\n                                DAT_200015d0 = iVar1;\n                                iVar1 = HAL_TIM_PWM_Init(&DAT_200015bc);\n                                if (iVar1 == 0) break;\n                                uVar2 = 0x88;\n                              }\n                              timPwmConfig1 = iVar1;\n                              timPwmConfig2 = iVar1;\n                              iVar1 = HAL_TIMEx_MasterConfigSynchronization(&DAT_200015bc,&timPwmConfig1)\n                              ;\n                              if (iVar1 == 0) break;\n                              uVar2 = 0x8f;\n                            }\n                            channelConfig1 = 0x60;\n                            channelConfig2 = iVar1;\n                            channelConfig3 = iVar1;\n                            channelConfig4 = iVar1;\n                            channelConfig5 = iVar1;\n                            channelConfig6 = iVar1;\n                            iVar1 = HAL_TIM_PWM_ConfigChannel(&DAT_200015bc,&channelConfig1,0xc);\n                            if (iVar1 == 0) break;\n                            uVar2 = 0x9a;\n                          }\n                          config1 = 0x2000;\n                          timBreakDeadTimeConfig = iVar1;\n                          timBreakDeadTimeConfig2 = iVar1;\n                          timBreakDeadTimeConfig3 = iVar1;\n                          timBreakDeadTimeConfig4 = iVar1;\n                          timBreakDeadTimeConfig5 = iVar1;\n                          config2 = iVar1;\n                          iVar1 = HAL_TIMEx_ConfigBreakDeadTime(&DAT_200015bc,&timBreakDeadTimeConfig);\n                          if (iVar1 == 0) break;\n                          uVar2 = 0xa6;\n                        }\n                        HAL_TIM_MspPostInit(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = iVar3;\n                        DAT_20001600 = iVar1;\n                        DAT_20001608 = iVar1;\n                        iVar1 = HAL_TIM_PWM_Init(&DAT_200015f8);\n                        if (iVar1 == 0) break;\n                        uVar2 = 0xc3;\n                      }\n                      channelConfig1 = iVar1;\n                      channelConfig2 = iVar1;\n                      iVar1 = HAL_TIMEx_MasterConfigSynchronization(&DAT_200015f8,&channelConfig1);\n                      if (iVar1 == 0) break;\n                      uVar2 = 0xca;\n                    }\n                    timBreakDeadTimeConfig = 0x60;\n                    timBreakDeadTimeConfig2 = iVar1;\n                    timBreakDeadTimeConfig3 = iVar1;\n                    timBreakDeadTimeConfig5 = iVar1;\n                    iVar1 = HAL_TIM_PWM_ConfigChannel(&DAT_200015f8,&timBreakDeadTimeConfig,4);\n                    if (iVar1 == 0) break;\n                    uVar2 = 0xd3;\n                  }\n                  HAL_TIM_MspPostInit(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = iVar3;\n                  DAT_20001548 = iVar1;\n                  DAT_20001550 = iVar1;\n                  iVar1 = HAL_TIM_PWM_Init();\n                  if (iVar1 == 0) break;\n                  uVar2 = 0xf0;\n                }\n                channelConfig1 = 0;\n                channelConfig2 = 0;\n                iVar1 = HAL_TIMEx_MasterConfigSynchronization(&DAT_20001540,&channelConfig1);\n                if (iVar1 == 0) break;\n                uVar2 = 0xf7;\n              }\n              timBreakDeadTimeConfig = 0x60;\n              timBreakDeadTimeConfig2 = iVar1;\n              timBreakDeadTimeConfig3 = iVar1;\n              timBreakDeadTimeConfig5 = iVar1;\n              iVar1 = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&timBreakDeadTimeConfig,8);\n              if (iVar1 == 0) break;\n              uVar2 = 0x100;\n            }\n            iVar3 = HAL_TIM_PWM_ConfigChannel(&DAT_20001540,&timBreakDeadTimeConfig,0xc);\n            if (iVar3 == 0) break;\n            uVar2 = 0x105;\n          }\n          HAL_TIM_MspPostInit(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = iVar3;\n          DAT_200014d8 = iVar3;\n          iVar1 = HAL_TIM_PWM_Init(&DAT_200014c8);\n          if (iVar1 == 0) break;\n          uVar2 = 0x122;\n        }\n        channelConfig1 = iVar1;\n        channelConfig2 = iVar1;\n        iVar1 = HAL_TIMEx_MasterConfigSynchronization(&DAT_200014c8,&channelConfig1);\n        if (iVar1 == 0) break;\n        uVar2 = 0x129;\n      }\n      timBreakDeadTimeConfig = 0x60;\n      timBreakDeadTimeConfig2 = iVar1;\n      timBreakDeadTimeConfig3 = iVar1;\n      timBreakDeadTimeConfig5 = iVar1;\n      iVar1 = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&timBreakDeadTimeConfig,8);\n      if (iVar1 == 0) break;\n      uVar2 = 0x132;\n    }\n    iVar1 = HAL_TIM_PWM_ConfigChannel(&DAT_200014c8,&timBreakDeadTimeConfig,0xc);\n    if (iVar1 == 0) break;\n    uVar2 = 0x137;\n  }\n  HAL_TIM_MspPostInit(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_peripherals_0800458c",
                "local_58": "timPwmConfig1",
                "local_54": "timPwmConfig2",
                "local_50": "channelConfig1",
                "local_4c": "channelConfig2",
                "local_48": "channelConfig3",
                "local_40": "channelConfig4",
                "local_3c": "channelConfig5",
                "local_38": "channelConfig6",
                "local_34": "timBreakDeadTimeConfig",
                "local_30": "timBreakDeadTimeConfig2",
                "local_2c": "timBreakDeadTimeConfig3",
                "local_28": "timBreakDeadTimeConfig4",
                "local_24": "timBreakDeadTimeConfig5",
                "local_20": "config1",
                "local_1c": "config2"
            },
            "calling": [
                "Devices_Init"
            ],
            "called": [
                "HAL_I2C_Init",
                "HAL_TIM_PWM_Init",
                "HAL_UART_Init",
                "SystemClock_Config",
                "HAL_TIM_MspPostInit",
                "HAL_TIMEx_ConfigBreakDeadTime",
                "_Error_Handler",
                "HAL_TIM_PWM_ConfigChannel",
                "HAL_GPIO_WritePin",
                "HAL_Init",
                "HAL_GPIO_Init",
                "HAL_TIMEx_MasterConfigSynchronization"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_values_0800483c",
            "code": "\nvoid calculateValues_0800483c(int *inputs)\n\n{\n  undefined4 value2;\n  undefined4 uVar2;\n  int value3;\n  int value1;\n  int value4;\n  \n  value1 = inputs[0xc];\n  value2 = __addsf3(inputs[7],inputs[9]);\n  value1 = __aeabi_fsub(value2,value1);\n  inputs[10] = value1;\n  if (*inputs == 3) {\n    value1 = __aeabi_fcmpgt(inputs[10],0);\n    if (value1 == 0) {\n      value1 = __aeabi_fcmplt(inputs[10],0xc3340000);\n    }\n    else {\n      value1 = __aeabi_fcmpgt(inputs[10],0x43340000);\n    }\n    if (value1 != 0) {\n      value4 = inputs[10];\n      value2 = __aeabi_fmul(inputs[10],0x43b40000);\n      value1 = __aeabi_fcmpgt(inputs[10],0);\n      value3 = inputs[10];\n      if (value1 == 0) {\n        value3 = value3 + -0x80000000;\n      }\n      value2 = __aeabi_fdiv(value2,value3);\n      value1 = __aeabi_fsub(value4,value2);\n      inputs[10] = value1;\n    }\n  }\n  value4 = inputs[2];\n  value3 = inputs[3];\n  value1 = __aeabi_fmul(inputs[1],inputs[10]);\n  inputs[0xe] = value1;\n  value1 = __addsf3(inputs[10],inputs[0xf]);\n  inputs[0xf] = value1;\n  value1 = __aeabi_fcmplt(inputs[0xf],0xc3fa0000);\n  if (value1 == 0) {\n    value1 = __aeabi_fcmpgt(inputs[0xf],0x43fa0000);\n    if (value1 == 0) {\n      value1 = inputs[0xf];\n    }\n    else {\n      value1 = 0x43fa0000;\n    }\n  }\n  else {\n    value1 = -0x3c060000;\n  }\n  inputs[0xf] = value1;\n  value1 = __aeabi_fsub(inputs[0xc],inputs[0xd]);\n  inputs[0x10] = value1;\n  value1 = inputs[0xe];\n  value2 = __aeabi_fmul(value4,inputs[0xf]);\n  value2 = __addsf3(value2,value1);\n  uVar2 = __aeabi_fmul(value3,inputs[0x10]);\n  value1 = __aeabi_fsub(value2,uVar2);\n  inputs[0x12] = value1;\n  value2 = __floatsisf(inputs[0x13]);\n  value1 = __aeabi_fcmplt(inputs[0x12],0xc3fa0000);\n  if (value1 == 0) {\n    value1 = __aeabi_fcmpgt(inputs[0x12],0x43fa0000);\n    if (value1 == 0) {\n      value1 = inputs[0x12];\n    }\n    else {\n      value1 = 0x43fa0000;\n    }\n  }\n  else {\n    value1 = -0x3c060000;\n  }\n  value1 = __aeabi_fmul(value1,value2);\n  inputs[0x12] = value1;\n  inputs[0xd] = inputs[0xc];\n  inputs[0xb] = inputs[10];\n  inputs[0x15] = inputs[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_values_0800483c",
                "param_1": "inputs",
                "iVar4": "value1",
                "uVar1": "value2",
                "iVar3": "value3",
                "iVar5": "value4"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "__floatsisf",
                "__aeabi_fsub",
                "__addsf3",
                "__aeabi_fdiv",
                "__aeabi_fcmplt",
                "__aeabi_fcmpgt",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "update_filtered_altitude_08004a30",
            "code": "\nvoid updateFilteredAltitude_08004a30(void)\n\n{\n  undefined4 filteredAltitude;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      filteredAltitude = getFilteredAltitude();\n      DAT_20000068 = multiply(filteredAltitude,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      filteredAltitude = getFilteredAltitude();\n      DAT_2000007c = multiply(filteredAltitude,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "update_filtered_altitude_08004a30",
                "uVar1": "filteredAltitude",
                "MS5611_GetFilteredAltitude": "getFilteredAltitude",
                "__aeabi_fmul": "multiply"
            },
            "calling": [
                "PID_Update"
            ],
            "called": [
                "MS5611_GetFilteredAltitude",
                "__aeabi_fmul"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "calculate_pitch_roll_yaw_08004a84",
            "code": "\nvoid calculatePitchRollYaw_08004a84(void)\n\n{\n  int comparisonResult;\n  \n  DAT_200000d8 = AHRS_GetPitch();\n  DAT_20000134 = AHRS_GetRoll();\n  DAT_20000190 = AHRS_GetYaw();\n  updateAltitude();\n  comparisonResult = isGreater(DAT_200000d8,0);\n  if (comparisonResult == 0) {\n    comparisonResult = isLess(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    comparisonResult = isGreater(DAT_200000d8,0x42a00000);\n  }\n  if (comparisonResult == 0) {\n    comparisonResult = isGreater(DAT_20000134,0);\n    if (comparisonResult == 0) {\n      comparisonResult = isLess(DAT_20000134,0xc2a00000);\n    }\n    else {\n      comparisonResult = isGreater(DAT_20000134,0x42a00000);\n    }\n    if (comparisonResult == 0) {\n      toggleLED(1,1);\n      computePID(&DAT_200000a8);\n      computePID(&DAT_20000104);\n      computePID(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        computePID(&DAT_2000004c);\n        addFloat(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        stopAllMotors();\n      }\n      else {\n        distributeSpeed(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      multiplyFloat(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = __fixunssfsi();\n      multiplyFloat(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = __fixunssfsi();\n      multiplyFloat(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = __fixunssfsi();\n      multiplyFloat(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = __fixunssfsi();\n      multiplyFloat(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = __fixunssfsi();\n      multiplyFloat(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = __fixunssfsi();\n      multiplyFloat(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = __fixunssfsi();\n      multiplyFloat(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = __fixunssfsi();\n      multiplyFloat(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = __fixunssfsi();\n      multiplyFloat(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = __fixunssfsi();\n      multiplyFloat(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = __fixunssfsi();\n      return;\n    }\n  }\n  stopAllMotors();\n  toggleLED(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "calculate_pitch_roll_yaw_08004a84",
                "PID_UpdateAltitude": "updateAltitude",
                "iVar1": "comparisonResult",
                "__aeabi_fcmpgt": "isGreater",
                "__aeabi_fcmplt": "isLess",
                "PID_Compute": "computePID",
                "__addsf3": "addFloat",
                "Motor_StopAll": "stopAllMotors",
                "Motor_DistributeSpeed": "distributeSpeed",
                "__aeabi_fmul": "multiplyFloat"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "AHRS_GetPitch",
                "Motor_DistributeSpeed",
                "Motor_StopAll",
                "PID_Compute",
                "__addsf3",
                "toggleLED",
                "__aeabi_fcmpgt",
                "__aeabi_fmul",
                "__fixunssfsi",
                "PID_UpdateAltitude",
                "AHRS_GetYaw",
                "__aeabi_fcmplt",
                "AHRS_GetRoll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "decode_and_process_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 decodeAndProcessData_08004c18(undefined inputData)\n\n{\n  int *ptrVar1;\n  int var1;\n  int var2;\n  ushort *ptrVar2;\n  \n  DAT_20001636._0_1_ = inputData;\n  ptrVar2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      var1 = HAL_GetTick();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        var2 = HAL_GetTick();\n      } while ((uint)(var2 - var1) < 6);\nLAB_0800281c:\n      ptrVar1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptrVar1[3] = ptrVar1[3] & 0xffffffdf;\n      ptrVar1[3] = ptrVar1[3] & 0xfffffeff;\n      ptrVar1[5] = ptrVar1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      var1 = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = HAL_GetTick();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptrVar2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptrVar2 = ptrVar2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      var1 = HAL_GetTick();\n      while (-1 < *DAT_2000157c << 0x18) {\n        var2 = HAL_GetTick();\n        if (5 < (uint)(var2 - var1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptrVar2;\n    }\n    ptrVar2 = (ushort *)((int)ptrVar2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "decode_and_process_data_08004c18",
                "param_1": "inputData",
                "piVar1": "ptrVar1",
                "iVar2": "var1",
                "iVar3": "var2",
                "puVar4": "ptrVar2"
            },
            "calling": [
                "MSP_SendFrame",
                "serialPrint",
                "_Error_Handler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "process_data_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * processData_08004c30(int *inputData)\n\n{\n  int tempVar1;\n  \n  if (*inputData != 0x40013800) {\n    return inputData;\n  }\n  CB_Write(&DAT_20000364,DAT_20001634);\n  tempVar1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(tempVar1 + 0x14) = *(uint *)(tempVar1 + 0x14) | 1;\n    *(uint *)(tempVar1 + 0xc) = *(uint *)(tempVar1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "process_data_08004c30",
                "param_1": "inputData",
                "iVar1": "tempVar1"
            },
            "calling": [
                "UART_Receive_IT"
            ],
            "called": [
                "CB_Write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "serialBegin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_serial_communication_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initializeSerialCommunication_08004c70(void)\n\n{\n  int dataOffset;\n  \n  serialFlush();\n  dataOffset = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(dataOffset + 0x14) = *(uint *)(dataOffset + 0x14) | 1;\n    *(uint *)(dataOffset + 0xc) = *(uint *)(dataOffset + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_serial_communication_08004c70",
                "iVar1": "dataOffset"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "serialFlush"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "write_string_to_serial_08004c8c",
            "code": "\nvoid writeStringToSerial_08004c8c(undefined *string)\n\n{\n  uint stringLength;\n  undefined *currentCharacter;\n  \n  currentCharacter = string;\n  while( true ) {\n    stringLength = strlen(string);\n    if (stringLength <= (uint)((int)currentCharacter - (int)string)) break;\n    serialWrite(*currentCharacter);\n    currentCharacter = currentCharacter + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "write_string_to_serial_08004c8c",
                "param_1": "string",
                "uVar1": "stringLength",
                "puVar2": "currentCharacter"
            },
            "calling": [
                "serialInt",
                "MSP_SendFrame",
                "_Error_Handler"
            ],
            "called": [
                "serialWrite",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "print_formatted_value_08004cac",
            "code": "\nvoid printFormattedValue_08004cac(undefined4 value)\n\n{\n  siprintf(&DAT_20001636,&DAT_0800735e,value);\n  printToSerial(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "print_formatted_value_08004cac",
                "param_1": "value",
                "serialPrint": "printToSerial"
            },
            "calling": [
                "_Error_Handler"
            ],
            "called": [
                "siprintf",
                "serialPrint"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "initialize_interrupt_priorities_08004ccc",
            "code": "\n\n\nvoid initializeInterruptPriorities_08004ccc(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  HAL_NVIC_SetPriorityGrouping(3,input2,_DAT_40021018,1,input1,1,input3);\n  HAL_NVIC_SetPriority(0xfffffff4,0);\n  HAL_NVIC_SetPriority(0xfffffff5,0);\n  HAL_NVIC_SetPriority(0xfffffff6,0);\n  HAL_NVIC_SetPriority(0xfffffffb,0);\n  HAL_NVIC_SetPriority(0xfffffffc,0);\n  HAL_NVIC_SetPriority(0xfffffffe,0);\n  HAL_NVIC_SetPriority(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "initialize_interrupt_priorities_08004ccc",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3"
            },
            "calling": [
                "HAL_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_SetPriorityGrouping"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "initialize_gpio_08004d48",
            "code": "\n\n\nvoid initializeGPIO_08004d48(int *gpioAddress,undefined4 param)\n\n{\n  undefined4 gpioConfig1;\n  undefined4 gpioConfig2;\n  \n  if (*gpioAddress == 0x40005400) {\n    gpioConfig1 = 0xc0;\n    gpioConfig2 = 0x12;\n    HAL_GPIO_Init(0x40010c00,&gpioConfig1,0x40005400,3,gpioAddress,param);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "initialize_gpio_08004d48",
                "param_1": "gpioAddress",
                "param_2": "param",
                "local_18": "gpioConfig1",
                "local_14": "gpioConfig2"
            },
            "calling": [
                "HAL_I2C_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataFlags_08004d8c(int *dataPointer)\n\n{\n  int value;\n  \n  value = *dataPointer;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "param_1": "dataPointer",
                "iVar1": "value"
            },
            "calling": [
                "HAL_TIM_PWM_Init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "initialize_gpio_08004e14",
            "code": "\nvoid initializeGPIO_08004e14(int *gpioConfig,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 gpioBase;\n  int configValue;\n  undefined4 pinConfig;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  \n  configValue = *gpioConfig;\n  if (configValue == 0x40012c00) {\n    pinConfig = 0x800;\n  }\n  else {\n    if (configValue != 0x40000000) {\n      if (configValue == 0x40000400) {\n        pinConfig = 3;\n      }\n      else {\n        if (configValue != 0x40000800) {\n          return;\n        }\n        pinConfig = 0x300;\n      }\n      gpioBase = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    pinConfig = 2;\n  }\n  gpioBase = 0x40010800;\nLAB_08004e2e:\n  localVar3 = 2;\n  localVar1 = 2;\n  localVar2 = param2;\n  HAL_GPIO_Init(gpioBase,&pinConfig);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "initialize_gpio_08004e14",
                "param_1": "gpioConfig",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "gpioBase",
                "iVar2": "configValue",
                "local_18": "pinConfig",
                "local_14": "localVar1",
                "uStack_10": "localVar2",
                "local_c": "localVar3"
            },
            "calling": [
                "Peripherals_Init"
            ],
            "called": [
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "initialize_gpi_os_08004e7c",
            "code": "\n\n\nvoid initializeGPIOs_08004e7c(int *gpioConfigPtr)\n\n{\n  undefined4 pinConfig;\n  undefined4 pinMode;\n  undefined4 alternateMode;\n  undefined4 pull;\n  \n  if (*gpioConfigPtr == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    pinConfig = 0x200;\n    pinMode = 2;\n    pull = 3;\n    configureGPIO(0x40010800,&pinConfig);\n    pinConfig = 0x400;\n    pinMode = 0;\n    alternateMode = 0;\n    configureGPIO(0x40010800,&pinConfig);\n    setInterruptPriority(0x25,0,0);\n    enableInterrupt(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "initialize_gpi_os_08004e7c",
                "param_1": "gpioConfigPtr",
                "local_18": "pinConfig",
                "local_14": "pinMode",
                "local_10": "alternateMode",
                "local_c": "pull",
                "HAL_GPIO_Init": "configureGPIO",
                "HAL_NVIC_SetPriority": "setInterruptPriority",
                "HAL_NVIC_EnableIRQ": "enableInterrupt"
            },
            "calling": [
                "HAL_UART_Init"
            ],
            "called": [
                "HAL_NVIC_SetPriority",
                "HAL_NVIC_EnableIRQ",
                "HAL_GPIO_Init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "initialize_registers_08004f10",
            "code": "\n\n\nvoid initializeRegisters_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "initialize_registers_08004f10"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f5c": {
            "entrypoint": "0x08004f5c",
            "current_name": "FUN_08004f5c",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f60": {
            "entrypoint": "0x08004f60",
            "current_name": "FUN_08004f60",
            "code": "\nundefined4 HAL_GetTick(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {},
            "calling": [
                "AHRS_ComputeAngles"
            ],
            "called": [
                "HAL_GetTick"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f64": {
            "entrypoint": "0x08004f64",
            "current_name": "FUN_08004f64",
            "code": "\nvoid HAL_Delay(void)\n\n{\n  return;\n}\n\n",
            "renaming": {},
            "calling": [
                "I2C_WriteByte",
                "MS5611_Init",
                "_Error_Handler",
                "Devices_Init"
            ],
            "called": [
                "HAL_Delay"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f68": {
            "entrypoint": "0x08004f68",
            "current_name": "initialize_system_08004f68",
            "code": "\nvoid initializeSystem_08004f68(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jumpTable;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_20000228; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x8007448);\n  }\n  for (ptr = &DAT_20000228; ptr < &DAT_200016a0; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jumpTable = (code *)0x8004f9a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f68": "initialize_system_08004f68",
                "iVar1": "index",
                "puVar2": "ptr",
                "UNRECOVERED_JUMPTABLE": "jumpTable"
            },
            "calling": [],
            "called": [
                "main",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  _init();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "index"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "_init",
                "frame_dummy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "print_formatted_string_08004ffc",
            "code": "\nvoid printFormattedString_08004ffc(undefined *inputString,undefined4 formatSpecifier,undefined4 unusedParam1,undefined4 unusedParam2)\n\n{\n  undefined *outputBuffer [2];\n  undefined4 bufferSize;\n  undefined2 bufferLength;\n  undefined2 unknownValue;\n  undefined *currentChar;\n  undefined4 tempBufferSize;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  \n  bufferLength = 0x208;\n  bufferSize = 0x7fffffff;\n  tempBufferSize = 0x7fffffff;\n  unknownValue = 0xffff;\n  outputBuffer[0] = inputString;\n  currentChar = inputString;\n  unusedVar1 = formatSpecifier;\n  unusedVar2 = unusedParam1;\n  unusedVar3 = unusedParam2;\n  _svfiprintf_r(DAT_200001c0,outputBuffer,formatSpecifier);\n  *outputBuffer[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "print_formatted_string_08004ffc",
                "param_1": "inputString",
                "param_2": "formatSpecifier",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2",
                "local_78": "outputBuffer",
                "local_70": "bufferSize",
                "local_6c": "bufferLength",
                "local_6a": "unknownValue",
                "local_68": "currentChar",
                "local_64": "tempBufferSize",
                "uStack_c": "unusedVar1",
                "uStack_8": "unusedVar2",
                "uStack_4": "unusedVar3"
            },
            "calling": [
                "serialInt"
            ],
            "called": [
                "_svfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "resize_and_copy_08005044",
            "code": "\nundefined4 resizeAndCopy_08005044(undefined4 *result,int *array,undefined4 source,uint length)\n\n{\n  int newSize;\n  uint updatedSize;\n  uint currentSize;\n  int offset;\n  \n  currentSize = array[2];\n  if ((currentSize <= length) && ((*(ushort *)(array + 3) & 0x480) != 0)) {\n    offset = *array - array[4];\n    currentSize = (uint)(array[5] * 3) / 2;\n    updatedSize = length + 1 + offset;\n    if (currentSize < updatedSize) {\n      currentSize = updatedSize;\n    }\n    if ((int)((uint)*(ushort *)(array + 3) << 0x15) < 0) {\n      newSize = _malloc_r(result,currentSize);\n      if (newSize == 0) {\nLAB_0800508a:\n        *result = 0xc;\n        *(ushort *)(array + 3) = *(ushort *)(array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      memcpy(newSize,array[4],offset);\n      *(ushort *)(array + 3) = *(ushort *)(array + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      newSize = _realloc_r(result,array[4],currentSize);\n      if (newSize == 0) {\n        _free_r(result,array[4]);\n        goto LAB_0800508a;\n      }\n    }\n    array[4] = newSize;\n    *array = newSize + offset;\n    array[5] = currentSize;\n    array[2] = currentSize - offset;\n    currentSize = length;\n  }\n  if (length <= currentSize) {\n    currentSize = length;\n  }\n  memmove(*array,source,currentSize);\n  array[2] = array[2] - currentSize;\n  *array = currentSize + *array;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "resize_and_copy_08005044",
                "param_1": "result",
                "param_2": "array",
                "param_3": "source",
                "param_4": "length",
                "iVar1": "newSize",
                "uVar2": "updatedSize",
                "uVar3": "currentSize",
                "iVar4": "offset"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "memmove",
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "parse_and_print_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint parseAndPrint_080050fc(undefined4 *status,int *buffer,byte *input,int *alloc_buffer)\n\n{\n  int count;\n  int result;\n  int *int_ptr;\n  bool found_number;\n  byte *curr_char;\n  byte *next_char;\n  int format_str;\n  int *alloc_buffer_ptr;\n  uint modifiers;\n  int precision;\n  undefined4 flags;\n  int width;\n  int total_chars;\n  byte conv_specifier;\n  undefined flag_space;\n  undefined flag_plus;\n  undefined flag_zero;\n  undefined4 int_zero;\n  \n  alloc_buffer_ptr = alloc_buffer;\n  if (((int)((uint)*(ushort *)(buffer + 3) << 0x18) < 0) && (buffer[4] == 0)) {\n    count = _malloc_r(status,0x40);\n    *buffer = count;\n    buffer[4] = count;\n    if (count == 0) {\n      *status = 0xc;\n      return -1;\n    }\n    buffer[5] = 0x40;\n  }\n  total_chars = 0;\n  flag_space = 0x20;\n  flag_plus = 0x30;\n  curr_char = input;\nLAB_08005146:\n  next_char = curr_char;\n  if (*next_char != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  curr_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08005146;\nLAB_08005150:\n  count = (int)next_char - (int)input;\n  if (count != 0) {\n    result = __ssputs_r(status,buffer,input,count);\n    if (result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(buffer + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_chars;\n    }\n    total_chars = total_chars + count;\n  }\n  if (*next_char == 0) goto LAB_080052ac;\n  modifiers = 0;\n  width = 0;\n  precision = -1;\n  flags = 0;\n  flag_zero = 0;\n  int_zero = 0;\n  curr_char = next_char + 1;\n  while( true ) {\n    count = memchr(&DAT_08007379,*curr_char);\n    input = curr_char + 1;\n    if (count == 0) break;\n    modifiers = 1 << (count + 0xf7ff8c87U & 0xff) | modifiers;\n    curr_char = input;\n  }\n  if ((int)(modifiers << 0x1b) < 0) {\n    flag_zero = 0x20;\n  }\n  if ((int)(modifiers << 0x1c) < 0) {\n    flag_zero = 0x2b;\n  }\n  if (*curr_char == 0x2a) {\n    int_ptr = alloc_buffer_ptr + 1;\n    count = *alloc_buffer_ptr;\n    alloc_buffer_ptr = int_ptr;\n    if (count < 0) {\n      width = -count;\n      modifiers = modifiers | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    found_number = false;\n    count = width;\n    input = curr_char;\n    while( true ) {\n      if (9 < *input - 0x30) break;\n      count = count * 10 + (*input - 0x30);\n      found_number = true;\n      input = input + 1;\n    }\n    if (!found_number) goto LAB_080051fc;\n  }\n  width = count;\nLAB_080051fc:\n  if (*input == 0x2e) {\n    if (input[1] == 0x2a) {\n      input = input + 2;\n      int_ptr = alloc_buffer_ptr + 1;\n      precision = *alloc_buffer_ptr;\n      alloc_buffer_ptr = int_ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      found_number = false;\n      count = 0;\n      precision = 0;\n      while( true ) {\n        input = input + 1;\n        if (9 < *input - 0x30) break;\n        count = count * 10 + (*input - 0x30);\n        found_number = true;\n      }\n      if (found_number) {\n        precision = count;\n      }\n    }\n  }\n  count = memchr(&DAT_0800737f,*input,3);\n  if (count != 0) {\n    input = input + 1;\n    modifiers = modifiers | 0x40 << (count + 0xf7ff8c81U & 0xff);\n  }\n  conv_specifier = *input;\n  input = input + 1;\n  count = memchr(\"efgEFG\",conv_specifier,6);\n  if (count == 0) {\n    format_str = _printf_i(status,&modifiers,buffer,0x8005045,&alloc_buffer_ptr);\n    if (format_str == -1) goto LAB_080052ac;\n  }\n  else {\n    alloc_buffer_ptr = (int *)(((int)alloc_buffer_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_chars = total_chars + format_str;\n  curr_char = input;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "parse_and_print_080050fc",
                "param_1": "status",
                "param_2": "buffer",
                "param_3": "input",
                "param_4": "alloc_buffer",
                "iVar1": "count",
                "iVar2": "result",
                "piVar3": "int_ptr",
                "bVar4": "found_number",
                "pbVar5": "curr_char",
                "pbVar6": "next_char",
                "unaff_r9": "format_str",
                "local_8c": "alloc_buffer_ptr",
                "local_88": "modifiers",
                "local_84": "precision",
                "local_80": "flags",
                "local_7c": "width",
                "local_74": "total_chars",
                "local_70": "conv_specifier",
                "local_6f": "flag_space",
                "local_6e": "flag_plus",
                "local_45": "flag_zero",
                "local_30": "int_zero"
            },
            "calling": [
                "siprintf"
            ],
            "called": [
                "memchr",
                "_malloc_r",
                "__ssputs_r",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocessData_080052e4(undefined4 data,uint *array,uint *result,undefined4 param,code *callback)\n\n{\n  int index1;\n  int index2;\n  uint maxValue;\n  uint newValue;\n  bool isTrue;\n  \n  maxValue = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxValue = array[2];\n  }\n  *result = maxValue;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *result = maxValue + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (index1 = 0; index1 < (int)(array[3] - *result); index1 = index1 + 1) {\n      index2 = (*callback)(data,param,(int)array + 0x19,1);\n      if (index2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  maxValue = (uint)*(byte *)((int)array + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  newValue = maxValue;\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxValue + 0x43) = 0x30;\n    newValue = maxValue + 2;\n    *(undefined *)((int)array + maxValue + 0x44) = *(undefined *)((int)array + 0x45);\n  }\n  index1 = (*callback)(data,param,(int)array + 0x43,newValue);\n  if (index1 != -1) {\n    maxValue = array[3];\n    isTrue = (*array & 6) != 4;\n    if (isTrue) {\n      maxValue = 0;\n    }\n    newValue = 0;\n    if (!isTrue) {\n      maxValue = maxValue - *result;\n    }\n    if (!isTrue) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxValue = maxValue + (array[2] - array[4]);\n    }\n    while( true ) {\n      if (maxValue == newValue) {\n        return 0;\n      }\n      index1 = (*callback)(data,param,(int)array + 0x1a,1);\n      if (index1 == -1) break;\n      newValue = newValue + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "data",
                "param_2": "array",
                "param_3": "result",
                "param_4": "param",
                "param_5": "callback",
                "iVar1": "index1",
                "iVar2": "index2",
                "uVar3": "maxValue",
                "uVar4": "newValue",
                "bVar5": "isTrue"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "format_and_print_data_080053d4",
            "code": "\nuint formatAndPrintData_080053d4(undefined4 formatSpecifier,uint *data,undefined4 width,code *printFunction,uint **argListPtr)\n\n{\n  byte dataType;\n  int result;\n  uint *ptr;\n  int printResult;\n  char *hexChars;\n  uint base;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint inputNum;\n  uint copyWidth;\n  char *outputStr;\n  char *outputStart;\n  uint outputBuffer [2];\n  \n  dataType = *(byte *)(data + 6);\n  outputStart = (char *)((int)data + 0x43);\n  if (dataType != 0x6e) {\n    if (dataType < 0x6f) {\n      if (dataType != 99) {\n        if (dataType < 100) {\n          if (dataType == 0) goto LAB_0800558e;\n          if (dataType != 0x58) goto LAB_08005404;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hexChars = \"0123456789ABCDEF\";\nLAB_0800551e:\n          base = *data;\n          ptr = *argListPtr;\n          *argListPtr = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            inputNum = (uint)*(ushort *)ptr;\n          }\n          else {\n            inputNum = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (inputNum == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((dataType != 100) && (dataType != 0x69)) goto LAB_08005404;\n          inputNum = *data;\n          ptr = *argListPtr;\n          if ((inputNum & 0x80) == 0) {\n            *argListPtr = ptr + 1;\n            if ((inputNum & 0x40) == 0) goto LAB_08005424;\n            inputNum = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *argListPtr = ptr + 1;\nLAB_08005424:\n            inputNum = *ptr;\n          }\n          if ((int)inputNum < 0) {\n            inputNum = -inputNum;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hexChars = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        copyWidth = data[1];\n        data[2] = copyWidth;\n        outputStr = outputStart;\n        if ((int)copyWidth < 0) {\n          if (inputNum != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)data + 0x42) = *hexChars;\n          outputStr = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (inputNum == 0) {\n            if (copyWidth != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              copyWidth = inputNum / base;\n              outputStr = outputStr + -1;\n              *outputStr = hexChars[inputNum - base * copyWidth];\n              inputNum = copyWidth;\n            } while (copyWidth != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          outputStr[-1] = '0';\n          outputStr = outputStr + -1;\n        }\n        data[4] = (int)outputStart - (int)outputStr;\n        outputStart = outputStr;\n        goto LAB_080054fa;\n      }\n      ptr = *argListPtr;\n      *argListPtr = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nLAB_08005464:\n      outputStart = (char *)((int)data + 0x42);\n      inputNum = 1;\n    }\n    else {\n      if (dataType != 0x73) {\n        if (dataType < 0x74) {\n          if (dataType == 0x6f) {\nLAB_0800548a:\n            inputNum = *data;\n            ptr = *argListPtr;\n            if ((inputNum & 0x80) == 0) {\n              *argListPtr = ptr + 1;\n              if ((inputNum & 0x40) == 0) goto LAB_08005498;\n              inputNum = (uint)*(ushort *)ptr;\n            }\n            else {\n              *argListPtr = ptr + 1;\nLAB_08005498:\n              inputNum = *ptr;\n            }\n            if (dataType == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hexChars = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (dataType == 0x70) {\n            *data = *data | 0x20;\nLAB_0800544a:\n            hexChars = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (dataType == 0x75) goto LAB_0800548a;\n          if (dataType == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)data + 0x42) = dataType;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*argListPtr;\n      *argListPtr = (uint *)(ppcVar8 + 1);\n      outputStart = *ppcVar8;\n      result = memchr(outputStart,0,data[1]);\n      if (result != 0) {\n        data[1] = result - (int)outputStart;\n      }\n      inputNum = data[1];\n    }\n    data[4] = inputNum;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  inputNum = *data;\n  ppuVar7 = (uint **)*argListPtr;\n  base = data[5];\n  if ((inputNum & 0x80) == 0) {\n    *argListPtr = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\n    if ((inputNum & 0x40) == 0) goto LAB_0800557a;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *argListPtr = (uint *)(ppuVar7 + 1);\n    ptr = *ppuVar7;\nLAB_0800557a:\n    *ptr = base;\n  }\nLAB_0800558e:\n  data[4] = 0;\nLAB_080054fa:\n  result = _printf_common(formatSpecifier,data,outputBuffer,width,printFunction);\n  if ((result == -1) || (result = (*printFunction)(formatSpecifier,width,outputStart,data[4]), result == -1)) {\nLAB_0800550e:\n    inputNum = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (result = 0; result < (int)(data[3] - outputBuffer[0]); result = result + 1) {\n        printResult = (*printFunction)(formatSpecifier,width,(int)data + 0x19,1);\n        if (printResult == -1) goto LAB_0800550e;\n      }\n    }\n    inputNum = data[3];\n    if ((int)data[3] < (int)outputBuffer[0]) {\n      inputNum = outputBuffer[0];\n    }\n  }\n  return inputNum;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "format_and_print_data_080053d4",
                "param_1": "formatSpecifier",
                "param_2": "data",
                "param_3": "width",
                "param_4": "printFunction",
                "param_5": "argListPtr",
                "bVar1": "dataType",
                "iVar2": "result",
                "puVar3": "ptr",
                "iVar4": "printResult",
                "pcVar5": "hexChars",
                "uVar6": "base",
                "uVar9": "inputNum",
                "uVar10": "copyWidth",
                "pcVar11": "outputStr",
                "pcVar12": "outputStart",
                "local_24": "outputBuffer"
            },
            "calling": [
                "_svfiprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_in_string_08005614",
            "code": "\nchar * find_character_in_string_08005614(char *string,char target_character,int length)\n\n{\n  char *current_char_ptr;\n  char *next_char_ptr;\n  \n  current_char_ptr = string;\n  do {\n    next_char_ptr = current_char_ptr;\n    if (next_char_ptr == string + length) {\n      return (char *)0x0;\n    }\n    current_char_ptr = next_char_ptr + 1;\n  } while (*next_char_ptr != target_character);\n  return next_char_ptr;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_in_string_08005614",
                "param_1": "string",
                "param_2": "target_character",
                "param_3": "length",
                "pcVar1": "current_char_ptr",
                "pcVar2": "next_char_ptr"
            },
            "calling": [
                "_svfiprintf_r",
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_to_offset_decreasing_08005630",
            "code": "\nvoid copyToOffsetDecreasing_08005630(int startOffset,undefined *sourceArray,int length)\n\n{\n  undefined *destPtr;\n  undefined *currentPtr;\n  \n  currentPtr = (undefined *)(startOffset + -1);\n  destPtr = sourceArray + length;\n  for (; sourceArray != destPtr; sourceArray = sourceArray + 1) {\n    currentPtr = currentPtr + 1;\n    *currentPtr = *sourceArray;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_to_offset_decreasing_08005630",
                "param_1": "startOffset",
                "param_2": "sourceArray",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "currentPtr"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "reverse_copy_08005646",
            "code": "\nvoid reverseCopy_08005646(undefined *source,undefined *destination,int length)\n\n{\n  undefined *destEnd;\n  \n  destEnd = destination + length;\n  if ((destination < source) && (source < destEnd)) {\n    source = source + length;\n    length = length - (int)destEnd;\n    while (destEnd + length != (undefined *)0x0) {\n      destEnd = destEnd + -1;\n      source = source + -1;\n      *source = *destEnd;\n    }\n    return;\n  }\n  source = source + -1;\n  for (; destination != destEnd; destination = destination + 1) {\n    source = source + 1;\n    *source = *destination;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "reverse_copy_08005646",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "destEnd"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "allocate_memory_0800567c",
            "code": "\nvoid allocate_memory_0800567c(undefined4 *result,int size,undefined4 arg3,undefined4 arg4)\n\n{\n  int **extra_result;\n  int **current_node;\n  int **next_node;\n  int *temp_pointer;\n  int **previous_node;\n  int **new_node;\n  \n  if (size == 0) {\n    return;\n  }\n  new_node = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    new_node = (int **)((int)new_node + *(int *)(size + -4));\n  }\n  __malloc_lock();\n  next_node = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    new_node[1] = (int *)0x0;\n    current_node = extra_result;\n    DAT_200002ac = new_node;\n  }\n  else {\n    next_node = DAT_200002ac;\n    if (new_node < DAT_200002ac) {\n      current_node = (int **)*new_node;\n      next_node = (int **)((int)new_node + (int)current_node);\n      if (DAT_200002ac == next_node) {\n        temp_pointer = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        next_node = (int **)((int)temp_pointer + (int)current_node);\n        *new_node = (int *)next_node;\n      }\n      new_node[1] = (int *)DAT_200002ac;\n      DAT_200002ac = new_node;\n    }\n    else {\n      do {\n        previous_node = next_node;\n        next_node = (int **)previous_node[1];\n        if (next_node == (int **)0x0) break;\n      } while (next_node <= new_node);\n      current_node = (int **)*previous_node;\n      if ((int **)((int)previous_node + (int)current_node) == new_node) {\n        current_node = (int **)((int)current_node + (int)*new_node);\n        *previous_node = (int *)current_node;\n        if (next_node == (int **)((int)previous_node + (int)current_node)) {\n          temp_pointer = *next_node;\n          next_node = (int **)next_node[1];\n          current_node = (int **)((int)current_node + (int)temp_pointer);\n          *previous_node = (int *)current_node;\n          previous_node[1] = (int *)next_node;\n        }\n      }\n      else if (new_node < (int **)((int)previous_node + (int)current_node)) {\n        *result = 0xc;\n      }\n      else {\n        current_node = (int **)((int)new_node + (int)*new_node);\n        if (next_node == current_node) {\n          temp_pointer = *next_node;\n          next_node = (int **)next_node[1];\n          current_node = (int **)((int)temp_pointer + (int)*new_node);\n          *new_node = (int *)current_node;\n        }\n        new_node[1] = (int *)next_node;\n        previous_node[1] = (int *)new_node;\n      }\n    }\n  }\n  __malloc_unlock(result,current_node,next_node,arg4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "allocate_memory_0800567c",
                "param_1": "result",
                "param_2": "size",
                "param_3": "arg3",
                "param_4": "arg4",
                "extraout_r1": "extra_result",
                "ppiVar1": "current_node",
                "ppiVar2": "next_node",
                "piVar3": "temp_pointer",
                "ppiVar4": "previous_node",
                "ppiVar5": "new_node"
            },
            "calling": [
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "allocate_memory_08005714",
            "code": "\nuint allocateMemory_08005714(undefined4 *bufferSize,uint requestedSize)\n\n{\n  uint *currentBlock;\n  int remainingSpace;\n  uint *previousBlock;\n  uint difference;\n  uint *newBlock;\n  uint allocatedSize;\n  \n  allocatedSize = (requestedSize + 3 & 0xfffffffc) + 8;\n  if (allocatedSize < 0xc) {\n    allocatedSize = 0xc;\n  }\n  if (((int)allocatedSize < 0) || (allocatedSize < requestedSize)) {\n    *bufferSize = 0xc;\n  }\n  else {\n    __malloc_lock();\n    currentBlock = DAT_200002ac;\n    newBlock = DAT_200002ac;\n    while (previousBlock = currentBlock, previousBlock != (uint *)0x0) {\n      difference = *previousBlock - allocatedSize;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (newBlock == previousBlock) {\n            currentBlock = (uint *)newBlock[1];\n            DAT_200002ac = currentBlock;\n          }\n          else {\n            currentBlock = (uint *)previousBlock[1];\n          }\n          if (newBlock != previousBlock) {\n            newBlock[1] = (uint)currentBlock;\n            newBlock = previousBlock;\n          }\n        }\n        else {\n          *previousBlock = difference;\n          *(uint *)((int)previousBlock + difference) = allocatedSize;\n          newBlock = (uint *)((int)previousBlock + difference);\n        }\n        goto LAB_08005778;\n      }\n      newBlock = previousBlock;\n      currentBlock = (uint *)previousBlock[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = _sbrk_r(bufferSize);\n    }\n    currentBlock = (uint *)_sbrk_r(bufferSize,allocatedSize);\n    if ((currentBlock != (uint *)0xffffffff) &&\n       ((newBlock = (uint *)((int)currentBlock + 3U & 0xfffffffc), currentBlock == newBlock ||\n        (remainingSpace = _sbrk_r(bufferSize,(int)newBlock - (int)currentBlock), remainingSpace != -1)))) {\n      *newBlock = allocatedSize;\nLAB_08005778:\n      __malloc_unlock(bufferSize);\n      allocatedSize = (int)newBlock + 0xbU & 0xfffffff8;\n      remainingSpace = allocatedSize - (int)(newBlock + 1);\n      if (remainingSpace != 0) {\n        *(int *)((int)newBlock + remainingSpace) = -remainingSpace;\n        return allocatedSize;\n      }\n      return allocatedSize;\n    }\n    *bufferSize = 0xc;\n    __malloc_unlock(bufferSize);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "allocate_memory_08005714",
                "param_1": "bufferSize",
                "param_2": "requestedSize",
                "puVar1": "currentBlock",
                "iVar2": "remainingSpace",
                "puVar3": "previousBlock",
                "uVar4": "difference",
                "puVar5": "newBlock",
                "uVar6": "allocatedSize"
            },
            "calling": [
                "_svfiprintf_r",
                "__ssputs_r",
                "_realloc_r"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "memory_management_function_080057d0",
            "code": "\nint memoryManagementFunction_080057d0(undefined4 arg1,int arg2,uint arg3,undefined4 arg4)\n\n{\n  int result;\n  uint usableSize;\n  \n  if (arg2 != 0) {\n    if (arg3 == 0) {\n      _free_r();\n      result = 0;\n    }\n    else {\n      usableSize = _malloc_usable_size_r();\n      result = arg2;\n      if ((usableSize < arg3) && (result = _malloc_r(arg1,arg3), result != 0)) {\n        memcpy(result,arg2,arg3);\n        _free_r(arg1,arg2);\n      }\n    }\n    return result;\n  }\n  result = _malloc_r(arg1,arg3,arg3,arg4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "memory_management_function_080057d0",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "uVar2": "usableSize"
            },
            "calling": [
                "__ssputs_r"
            ],
            "called": [
                "memcpy",
                "_malloc_r",
                "_free_r",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "allocate_memory_0800581c",
            "code": "\nvoid allocateMemory_0800581c(int *outputPointer,undefined4 size)\n\n{\n  int allocatedAddress;\n  \n  DAT_2000169c = 0;\n  allocatedAddress = _sbrk(size);\n  if ((allocatedAddress == -1) && (DAT_2000169c != 0)) {\n    *outputPointer = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "allocate_memory_0800581c",
                "param_1": "outputPointer",
                "param_2": "size",
                "iVar1": "allocatedAddress"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_sum_08005840",
            "code": "\nint calculateSum_08005840(undefined4 result,int arrayAddress)\n\n{\n  int currentIndex;\n  \n  currentIndex = *(int *)(arrayAddress + -4) + -4;\n  if (*(int *)(arrayAddress + -4) < 0) {\n    currentIndex = currentIndex + *(int *)(arrayAddress + currentIndex);\n  }\n  return currentIndex;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_sum_08005840",
                "param_1": "result",
                "param_2": "arrayAddress",
                "iVar1": "currentIndex"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "calculate_asin_08005854",
            "code": "\nundefined8 calculate_asin_08005854(undefined4 input_value_1,undefined4 input_value_2)\n\n{\n  int comparison_result;\n  undefined4 *errno_pointer;\n  int *error_code_pointer;\n  undefined8 asin_result;\n  undefined8 absolute_value_result;\n  undefined4 boolean_flag;\n  undefined *constant_pointer;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_1_copy_2;\n  undefined4 param_2_copy_2;\n  undefined8 result;\n  int comparison_result_2;\n  \n  asin_result = __ieee754_asin();\n  if (DAT_20000224 == -1) {\n    return asin_result;\n  }\n  comparison_result_2 = __unorddf2(input_value_1,input_value_2,input_value_1,input_value_2);\n  if (comparison_result_2 != 0) {\n    return asin_result;\n  }\n  absolute_value_result = fabs(input_value_1,input_value_2);\n  comparison_result = __aeabi_dcmpgt((int)absolute_value_result,(int)((ulonglong)absolute_value_result >> 0x20),0,0x3ff00000);\n  if (comparison_result == 0) {\n    return asin_result;\n  }\n  boolean_flag = 1;\n  constant_pointer = &DAT_080073ac;\n  param_1_copy = input_value_1;\n  param_2_copy = input_value_2;\n  param_1_copy_2 = input_value_1;\n  param_2_copy_2 = input_value_2;\n  result = nan(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    comparison_result = matherr(&boolean_flag);\n    if (comparison_result != 0) goto LAB_080058d0;\n  }\n  errno_pointer = (undefined4 *)__errno();\n  *errno_pointer = 0x21;\nLAB_080058d0:\n  if (comparison_result_2 != 0) {\n    error_code_pointer = (int *)__errno();\n    *error_code_pointer = comparison_result_2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005854": "calculate_asin_08005854",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "iVar1": "comparison_result",
                "puVar2": "errno_pointer",
                "piVar3": "error_code_pointer",
                "uVar4": "asin_result",
                "uVar5": "absolute_value_result",
                "local_48": "boolean_flag",
                "local_44": "constant_pointer",
                "local_40": "param_1_copy",
                "uStack_3c": "param_2_copy",
                "local_38": "param_1_copy_2",
                "uStack_34": "param_2_copy_2",
                "local_30": "result",
                "local_28": "comparison_result_2"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "fabs",
                "nan",
                "__unorddf2",
                "__errno",
                "__ieee754_asin",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080058fc": {
            "entrypoint": "0x080058fc",
            "current_name": "FUN_080058fc",
            "code": "\nundefined8 __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  undefined4 uVar1;\n  uint uVar2;\n  uint uVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  \n  uVar5 = param_4 & 0x7fffffff;\n  if ((0x7ff00000 < (uVar5 | (-param_3 | param_3) >> 0x1f)) ||\n     (uVar3 = param_2 & 0x7fffffff, 0x7ff00000 < (uVar3 | (-param_1 | param_1) >> 0x1f))) {\n    uVar6 = __aeabi_dadd(param_1,param_2,param_3,param_4,param_4);\n    return uVar6;\n  }\n  if ((param_4 + 0xc0100000 | param_3) == 0) {\n    uVar6 = atan();\n    return uVar6;\n  }\n  uVar2 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n  if ((param_1 | uVar3) == 0) {\n    if (uVar2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (uVar2 != 3) {\n      return CONCAT44(param_2,param_1);\n    }\nLAB_0800613e:\n    uVar6 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((param_3 | uVar5) != 0) {\n      if (uVar5 == 0x7ff00000) {\n        if (uVar3 == 0x7ff00000) {\n          if (uVar2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (uVar2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (uVar2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (uVar2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (uVar2 != 3) {\n          if (uVar2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (uVar3 != 0x7ff00000) {\n        iVar4 = (int)(uVar3 - uVar5) >> 0x14;\n        if (iVar4 < 0x3d) {\n          if (((int)param_4 < 0) && (iVar4 + 0x3c < 0 != SCARRY4(iVar4,0x3c))) {\n            uVar6 = 0;\n          }\n          else {\n            __divdf3(param_1,param_2);\n            fabs();\n            uVar6 = atan();\n          }\n        }\n        else {\n          uVar6 = 0x3ff921fb54442d18;\n        }\n        iVar4 = (int)((ulonglong)uVar6 >> 0x20);\n        uVar1 = (undefined4)uVar6;\n        if (uVar2 == 1) {\n          return CONCAT44(iVar4 + -0x80000000,uVar1);\n        }\n        if (uVar2 == 2) {\n          uVar7 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar6 = 0x400921fb54442d18;\n        }\n        else {\n          if (uVar2 == 0) {\n            return uVar6;\n          }\n          uVar6 = __subdf3(uVar1,iVar4,0x33145c07,0x3ca1a626);\n          uVar7 = 0x400921fb54442d18;\n        }\n        uVar6 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),(int)uVar7,\n                         (int)((ulonglong)uVar7 >> 0x20));\n        return uVar6;\n      }\n    }\n    if ((int)param_2 < 0) {\n      uVar6 = 0xbff921fb54442d18;\n    }\n    else {\n      uVar6 = 0x3ff921fb54442d18;\n    }\n  }\n  return uVar6;\n}\n\n",
            "renaming": {},
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "__ieee754_atan2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "calculate_pow_08005900",
            "code": "\nundefined8 calculatePow_08005900(undefined4 base1,undefined4 base2,undefined4 exp1,undefined4 exp2)\n\n{\n  char constant;\n  int result;\n  int *errPtr;\n  undefined4 *errnoPtr;\n  int finiteResult;\n  undefined4 powResultH;\n  undefined4 powResultL;\n  undefined8 powResult;\n  undefined8 rintResult;\n  undefined4 errorCode;\n  undefined *errorMsg;\n  undefined4 base1Copy;\n  undefined4 base2Copy;\n  undefined4 exp1Copy;\n  undefined4 exp2Copy;\n  undefined8 finalResult;\n  int matherrResult;\n  \n  powResult = __ieee754_pow();\n  constant = DAT_20000224;\n  powResultH = (undefined4)((ulonglong)powResult >> 0x20);\n  powResultL = (undefined4)powResult;\n  if (DAT_20000224 == -1) {\n    return powResult;\n  }\n  result = __unorddf2(exp1,exp2,exp1,exp2);\n  if (result != 0) {\n    return powResult;\n  }\n  result = __unorddf2(base1,base2,base1,base2);\n  base1Copy = base1;\n  base2Copy = base2;\n  exp1Copy = exp1;\n  exp2Copy = exp2;\n  if (result == 0) {\n    result = __aeabi_dcmpeq(base1,base2,0,0);\n    if (result != 0) {\n      result = __aeabi_dcmpeq(exp1,exp2,0,0);\n      if (result != 0) {\n        errorCode = 1;\n        errorMsg = &DAT_080073b1;\n        finalResult = 0;\n        matherrResult = 0;\n        if (constant != '\\0') {\n          finalResult = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = finite(exp1,exp2);\n      if (result == 0) {\n        return powResult;\n      }\n      result = __aeabi_dcmplt(exp1,exp2,0,0);\n      if (result == 0) {\n        return powResult;\n      }\n      errorCode = 1;\n      errorMsg = &DAT_080073b1;\n      matherrResult = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      finalResult = 0xfff0000000000000;\n      matherrResult = 0;\n      constant = DAT_20000224;\nLAB_08005a32:\n      if (constant != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = finite(powResultL,powResultH);\n    if (((result != 0) || (finiteResult = finite(base1,base2), finiteResult == 0)) ||\n       (finiteResult = finite(exp1,exp2), finiteResult == 0)) {\n      result = __aeabi_dcmpeq(powResultL,powResultH,0,0);\n      if (result == 0) {\n        return powResult;\n      }\n      result = finite(base1,base2);\n      if (result == 0) {\n        return powResult;\n      }\n      result = finite(exp1,exp2);\n      if (result == 0) {\n        return powResult;\n      }\n      errorCode = 4;\n      errorMsg = &DAT_080073b1;\n      matherrResult = 0;\n      finalResult._0_4_ = 0;\n      finalResult._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    matherrResult = __unorddf2(powResultL,powResultH);\n    constant = DAT_20000224;\n    if (matherrResult != 0) {\n      errorMsg = &DAT_080073b1;\n      errorCode = 1;\n      matherrResult = result;\n      if (DAT_20000224 != '\\0') {\n        finalResult = __divdf3(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      errorMsg = &DAT_080073b1;\n      errorCode = 1;\n      finalResult = 0;\n      goto LAB_08005978;\n    }\n    errorMsg = &DAT_080073b1;\n    errorCode = 3;\n    if (DAT_20000224 == '\\0') {\n      finalResult._0_4_ = 0xe0000000;\n      finalResult._4_4_ = 0x47efffff;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        powResult = __muldf3(exp1,exp2,0,0x3fe00000);\n        rintResult = rint();\n        result = __aeabi_dcmpeq((int)powResult,(int)((ulonglong)powResult >> 0x20),(int)rintResult,\n                               (int)((ulonglong)rintResult >> 0x20));\n        if (result == 0) {\n          finalResult._0_4_ = 0xe0000000;\n          finalResult._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = matherr(&errorCode);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      finalResult._0_4_ = 0;\n      finalResult._4_4_ = 0x7ff00000;\n      result = __aeabi_dcmplt(base1,base2,0,0);\n      if (result != 0) {\n        powResult = __muldf3(exp1,exp2,0,0x3fe00000);\n        rintResult = rint();\n        result = __aeabi_dcmpeq((int)powResult,(int)((ulonglong)powResult >> 0x20),(int)rintResult,\n                               (int)((ulonglong)rintResult >> 0x20));\n        if (result == 0) {\n          finalResult._0_4_ = 0;\n          finalResult._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    errnoPtr = (undefined4 *)__errno();\n    powResultL = 0x22;\n  }\n  else {\n    result = __aeabi_dcmpeq(exp1,exp2,0,0);\n    if (result == 0) {\n      return powResult;\n    }\n    errorCode = 1;\n    errorMsg = &DAT_080073b1;\n    finalResult = 0x3ff0000000000000;\n    matherrResult = 0;\n    if (constant == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = matherr(&errorCode);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    errnoPtr = (undefined4 *)__errno();\n    powResultL = 0x21;\n  }\n  *errnoPtr = powResultL;\nLAB_080059d0:\n  if (matherrResult != 0) {\n    errPtr = (int *)__errno();\n    *errPtr = matherrResult;\n  }\n  return finalResult;\n}\n\n",
            "renaming": {
                "FUN_08005900": "calculate_pow_08005900",
                "param_1": "base1",
                "param_2": "base2",
                "param_3": "exp1",
                "param_4": "exp2",
                "cVar1": "constant",
                "iVar2": "result",
                "piVar3": "errPtr",
                "puVar4": "errnoPtr",
                "iVar5": "finiteResult",
                "uVar6": "powResultH",
                "uVar7": "powResultL",
                "uVar8": "powResult",
                "uVar9": "rintResult",
                "local_50": "errorCode",
                "local_4c": "errorMsg",
                "local_48": "base1Copy",
                "uStack_44": "base2Copy",
                "local_40": "exp1Copy",
                "uStack_3c": "exp2Copy",
                "local_38": "finalResult",
                "local_30": "matherrResult"
            },
            "calling": [
                "taskScheduler"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__ieee754_pow",
                "__unorddf2",
                "finite",
                "__muldf3",
                "__errno",
                "__aeabi_dcmpeq",
                "rint",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "calculate_square_root_08005bc8",
            "code": "\nundefined8 calculateSquareRoot_08005bc8(undefined4 num1,undefined4 num2)\n\n{\n  char flag;\n  int comparisonResult;\n  int *errorPtr;\n  undefined4 *errnoPtr;\n  undefined8 result;\n  undefined4 value1;\n  undefined *value2;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined8 returnValue;\n  int tempResult;\n  \n  result = __ieee754_sqrt();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  tempResult = __unorddf2(num1,num2,num1,num2);\n  if (tempResult != 0) {\n    return result;\n  }\n  comparisonResult = __aeabi_dcmplt(num1,num2,0,0);\n  if (comparisonResult == 0) {\n    return result;\n  }\n  value1 = 1;\n  value2 = &DAT_080073b5;\n  temp1 = num1;\n  temp2 = num2;\n  temp3 = num1;\n  temp4 = num2;\n  if (flag == '\\0') {\n    returnValue = 0;\nLAB_08005c26:\n    comparisonResult = matherr(&value1);\n    if (comparisonResult != 0) goto LAB_08005c2e;\n  }\n  else {\n    returnValue = __divdf3(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  errnoPtr = (undefined4 *)__errno();\n  *errnoPtr = 0x21;\nLAB_08005c2e:\n  if (tempResult != 0) {\n    errorPtr = (int *)__errno();\n    *errorPtr = tempResult;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "calculate_square_root_08005bc8",
                "param_1": "num1",
                "param_2": "num2",
                "cVar1": "flag",
                "iVar2": "comparisonResult",
                "piVar3": "errorPtr",
                "puVar4": "errnoPtr",
                "uVar5": "result",
                "local_50": "value1",
                "local_4c": "value2",
                "local_48": "temp1",
                "uStack_44": "temp2",
                "local_40": "temp3",
                "uStack_3c": "temp4",
                "local_38": "returnValue",
                "local_30": "tempResult"
            },
            "calling": [
                "MadgwickQuaternionUpdate"
            ],
            "called": [
                "matherr",
                "__aeabi_dcmplt",
                "__unorddf2",
                "__ieee754_sqrt",
                "__errno",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_sqrt_inverse_08005c70",
            "code": "\nundefined8 calculate_sqrt_inverse_08005c70(uint input_1,uint input_2)\n\n{\n  int comparison_result;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  undefined4 result_7;\n  uint trimmed_input_2;\n  undefined8 temp_result_1;\n  undefined8 temp_result_2;\n  undefined8 temp_result_3;\n  \n  temp_result_1 = CONCAT44(input_2,input_1);\n  trimmed_input_2 = input_2 & 0x7fffffff;\n  if (trimmed_input_2 < 0x3ff00000) {\n    if (trimmed_input_2 < 0x3fe00000) {\n      if (0x3e3fffff < trimmed_input_2) {\n        temp_result_2 = __muldf3(input_1,input_2,input_1,input_2);\n        result_7 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n        result_6 = (undefined4)temp_result_2;\n        temp_result_2 = __muldf3(result_6,result_7,0xdfdf709,0x3f023de1);\n        temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x7501b288,0x3f49efe0);\n        temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_6,result_7);\n        temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_6,result_7);\n        temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0xe884455,0x3fc9c155);\n        temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_6,result_7);\n        temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_6,result_7);\n        temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x55555555,0x3fc55555);\n        temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_6,result_7);\n        temp_result_3 = __muldf3(result_6,result_7,0xb12e9282,0x3fb3b8c5);\n        temp_result_3 = __subdf3((int)temp_result_3,(int)((ulonglong)temp_result_3 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_result_3 = __muldf3((int)temp_result_3,(int)((ulonglong)temp_result_3 >> 0x20),result_6,result_7);\n        temp_result_3 = __aeabi_dadd((int)temp_result_3,(int)((ulonglong)temp_result_3 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_result_3 = __muldf3((int)temp_result_3,(int)((ulonglong)temp_result_3 >> 0x20),result_6,result_7);\n        temp_result_3 = __subdf3((int)temp_result_3,(int)((ulonglong)temp_result_3 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_result_3 = __muldf3((int)temp_result_3,(int)((ulonglong)temp_result_3 >> 0x20),result_6,result_7);\n        temp_result_3 = __aeabi_dadd((int)temp_result_3,(int)((ulonglong)temp_result_3 >> 0x20),0,0x3ff00000);\n        temp_result_2 = __divdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),(int)temp_result_3,\n                          (int)((ulonglong)temp_result_3 >> 0x20));\n        temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      temp_result_2 = __aeabi_dadd(input_1,input_2,0x8800759c,0x7e37e43c);\n      comparison_result = __aeabi_dcmpgt((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0,0x3ff00000);\n      if (comparison_result != 0) {\n        return temp_result_1;\n      }\n    }\n    temp_result_1 = fabs(input_1,input_2);\n    temp_result_1 = __subdf3(0,0x3ff00000,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n    temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0,0x3fe00000);\n    result_2 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    result_6 = (undefined4)temp_result_1;\n    temp_result_1 = __muldf3(result_6,result_2,0xdfdf709,0x3f023de1);\n    temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x7501b288,0x3f49efe0);\n    temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result_6,result_2);\n    temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xb5688f3b,0x3fa48228);\n    temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result_6,result_2);\n    temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0xe884455,0x3fc9c155);\n    temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result_6,result_2);\n    temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n    temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result_6,result_2);\n    temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x55555555,0x3fc55555);\n    temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result_6,result_2);\n    result_3 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n    temp_result_2 = __muldf3(result_6,result_2,0xb12e9282,0x3fb3b8c5);\n    temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_6,result_2);\n    temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_6,result_2);\n    temp_result_2 = __subdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp_result_2 = __muldf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),result_6,result_2);\n    temp_result_2 = __aeabi_dadd((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),0,0x3ff00000);\n    result_4 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n    temp_result_3 = __ieee754_sqrt(result_6,result_2);\n    result_5 = (undefined4)((ulonglong)temp_result_3 >> 0x20);\n    result_7 = (undefined4)temp_result_3;\n    if (trimmed_input_2 < 0x3fef3333) {\n      temp_result_1 = __divdf3((int)temp_result_1,result_3,(int)temp_result_2,result_4);\n      temp_result_2 = __aeabi_dadd(result_7,result_5,result_7,result_5);\n      temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                       (int)((ulonglong)temp_result_2 >> 0x20));\n      temp_result_2 = __muldf3(0,result_5,0,result_5);\n      temp_result_2 = __subdf3(result_6,result_2,(int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20));\n      temp_result_3 = __aeabi_dadd(result_7,result_5,0,result_5);\n      temp_result_2 = __divdf3((int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20),(int)temp_result_3,\n                        (int)((ulonglong)temp_result_3 >> 0x20));\n      result_6 = (undefined4)((ulonglong)temp_result_2 >> 0x20);\n      temp_result_2 = __aeabi_dadd((int)temp_result_2,result_6,(int)temp_result_2,result_6);\n      temp_result_2 = __subdf3(0x33145c07,0x3c91a626,(int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20));\n      temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                       (int)((ulonglong)temp_result_2 >> 0x20));\n      temp_result_2 = __aeabi_dadd(0,result_5,0,result_5);\n      temp_result_2 = __subdf3(0x54442d18,0x3fe921fb,(int)temp_result_2,(int)((ulonglong)temp_result_2 >> 0x20));\n      temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                       (int)((ulonglong)temp_result_2 >> 0x20));\n      result_6 = 0x3fe921fb;\n    }\n    else {\n      temp_result_1 = __divdf3((int)temp_result_1,result_3,(int)temp_result_2,result_4);\n      temp_result_1 = __muldf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result_7,result_5);\n      temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),result_7,result_5);\n      result_6 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n      temp_result_1 = __aeabi_dadd((int)temp_result_1,result_6,(int)temp_result_1,result_6);\n      temp_result_1 = __subdf3((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),0x33145c07,0x3c91a626);\n      result_6 = 0x3ff921fb;\n    }\n    temp_result_1 = __subdf3(0x54442d18,result_6,(int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20));\n    if ((int)input_2 < 1) {\n      temp_result_1 = CONCAT44((int)((ulonglong)temp_result_1 >> 0x20) + -0x80000000,(int)temp_result_1);\n    }\n  }\n  else {\n    if ((trimmed_input_2 + 0xc0100000 | input_1) != 0) {\n      temp_result_1 = __subdf3(input_1,input_2,input_1,input_2);\n      result_6 = (undefined4)((ulonglong)temp_result_1 >> 0x20);\n      temp_result_1 = __divdf3((int)temp_result_1,result_6,(int)temp_result_1,result_6);\n      return temp_result_1;\n    }\n    temp_result_1 = __muldf3(input_1,input_2,0x54442d18,0x3ff921fb);\n    temp_result_2 = __muldf3(input_1,input_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    temp_result_1 = __aeabi_dadd((int)temp_result_1,(int)((ulonglong)temp_result_1 >> 0x20),(int)temp_result_2,\n                         (int)((ulonglong)temp_result_2 >> 0x20));\n  }\n  return temp_result_1;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_sqrt_inverse_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar4": "result_4",
                "uVar5": "result_5",
                "uVar6": "result_6",
                "uVar7": "result_7",
                "uVar8": "trimmed_input_2",
                "uVar9": "temp_result_1",
                "uVar10": "temp_result_2",
                "uVar11": "temp_result_3",
                "iVar1": "comparison_result"
            },
            "calling": [
                "asin"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculateResult_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint condition1;\n  uint condition2;\n  int tempVar;\n  uint condition3;\n  undefined8 finalResult1;\n  undefined8 finalResult2;\n  \n  condition3 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (condition3 | (-input3 | input3) >> 0x1f)) ||\n     (condition2 = input2 & 0x7fffffff, 0x7ff00000 < (condition2 | (-input1 | input1) >> 0x1f))) {\n    finalResult1 = __aeabi_dadd(input1,input2,input3,input4,input4);\n    return finalResult1;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    finalResult1 = atan();\n    return finalResult1;\n  }\n  condition1 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | condition2) == 0) {\n    if (condition1 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (condition1 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    finalResult1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | condition3) != 0) {\n      if (condition3 == 0x7ff00000) {\n        if (condition2 == 0x7ff00000) {\n          if (condition1 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (condition1 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (condition1 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (condition1 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (condition1 != 3) {\n          if (condition1 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (condition2 != 0x7ff00000) {\n        tempVar = (int)(condition2 - condition3) >> 0x14;\n        if (tempVar < 0x3d) {\n          if (((int)input4 < 0) && (tempVar + 0x3c < 0 != SCARRY4(tempVar,0x3c))) {\n            finalResult1 = 0;\n          }\n          else {\n            __divdf3(input1,input2);\n            fabs();\n            finalResult1 = atan();\n          }\n        }\n        else {\n          finalResult1 = 0x3ff921fb54442d18;\n        }\n        tempVar = (int)((ulonglong)finalResult1 >> 0x20);\n        result1 = (undefined4)finalResult1;\n        if (condition1 == 1) {\n          return CONCAT44(tempVar + -0x80000000,result1);\n        }\n        if (condition1 == 2) {\n          finalResult2 = __subdf3(result1,tempVar,0x33145c07,0x3ca1a626);\n          finalResult1 = 0x400921fb54442d18;\n        }\n        else {\n          if (condition1 == 0) {\n            return finalResult1;\n          }\n          finalResult1 = __subdf3(result1,tempVar,0x33145c07,0x3ca1a626);\n          finalResult2 = 0x400921fb54442d18;\n        }\n        finalResult1 = __subdf3((int)finalResult1,(int)((ulonglong)finalResult1 >> 0x20),(int)finalResult2,\n                         (int)((ulonglong)finalResult2 >> 0x20));\n        return finalResult1;\n      }\n    }\n    if ((int)input2 < 0) {\n      finalResult1 = 0xbff921fb54442d18;\n    }\n    else {\n      finalResult1 = 0x3ff921fb54442d18;\n    }\n  }\n  return finalResult1;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "condition1",
                "uVar3": "condition2",
                "iVar4": "tempVar",
                "uVar5": "condition3",
                "uVar6": "finalResult1",
                "uVar7": "finalResult2"
            },
            "calling": [
                "atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "atan",
                "__aeabi_dadd",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculateFloatingPoint_08006228(uint value1,uint value2,uint value3,uint value4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint result8;\n  undefined4 result9;\n  int temp1;\n  int temp2;\n  undefined4 result10;\n  uint result11;\n  undefined4 result12;\n  int temp3;\n  uint result13;\n  undefined4 result14;\n  undefined4 result15;\n  undefined8 result16;\n  undefined8 result17;\n  undefined8 result18;\n  undefined8 result19;\n  longlong result20;\n  ulonglong result21;\n  undefined8 result22;\n  uint flag1;\n  undefined4 temp4;\n  undefined4 temp5;\n  int temp6;\n  \n  result17 = CONCAT44(value2,value1);\n  result13 = value4 & 0x7fffffff;\n  if ((result13 | value3) == 0) {\n    return 0;\n  }\n  result11 = value2 & 0x7fffffff;\n  if (result11 < 0x7ff00001) {\n    if (result11 == 0x7ff00000) {\n      if (value1 == 0) {\n        if (0x7ff00000 < result13) goto LAB_08006278;\nLAB_08006262:\n        if ((result13 != 0x7ff00000) || (value3 == 0)) {\n          if (-1 < (int)value2) goto LAB_0800632a;\n          if (result13 < 0x43400000) {\n            if (result13 < 0x3ff00000) {\nLAB_0800632a:\n              flag1 = 0;\n              goto LAB_080062ba;\n            }\n            temp1 = ((int)result13 >> 0x14) + -0x3ff;\n            if (0x14 < temp1) {\n              result2 = value3 >> (0x34U - temp1 & 0xff);\n              if (value3 == result2 << (0x34U - temp1 & 0xff)) {\n                flag1 = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (value3 == 0) {\n              result2 = (int)result13 >> (0x14U - temp1 & 0xff);\n              if (result13 == result2 << (0x14U - temp1 & 0xff)) {\n                flag1 = 2 - (result2 & 1);\n              }\n              else {\n                flag1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            flag1 = 0;\n          }\n          else {\n            flag1 = 2;\nLAB_080062ba:\n            if (value3 == 0) {\n              if (result13 == 0x7ff00000) {\n                if ((result11 + 0xc0100000 | value1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < result11) {\n                  if ((int)value4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)value4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (result13 == 0x3ff00000) {\n                if (-1 < (int)value4) {\n                  return value1;\n                }\n                result16 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (value4 == 0x40000000) goto LAB_0800634a;\n              if ((value4 == 0x3fe00000) && (-1 < (int)value2)) {\n                result13 = __ieee754_sqrt(value1,value2);\n                return result13;\n              }\n            }\n          }\n          result16 = fabs(value1,value2);\n          result14 = (undefined4)((ulonglong)result16 >> 0x20);\n          result1 = (undefined4)result16;\n          result21 = CONCAT44(value2,result1) & 0x7fffffffffffffff;\n          if ((value1 == 0) && ((result11 == 0 || ((value2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)value4 < 0) {\n              result16 = __divdf3(0,0x3ff00000,result1,result14);\n            }\n            if (-1 < (int)value2) {\n              return (uint)result16;\n            }\n            if ((flag1 | result11 + 0xc0100000) != 0) {\n              return (uint)result16;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)value2 >> 0x1f);\n            result16 = result17;\n            if ((flag1 | result2) != 0) {\n              if (result13 < 0x41e00001) {\n                temp6 = 0;\n                if (result11 < 0x100000) {\n                  result21 = __muldf3();\n                  temp6 = -0x35;\n                }\n                result13 = (uint)(result21 >> 0x20);\n                result1 = (undefined4)result21;\n                temp6 = ((int)result13 >> 0x14) + -0x3ff + temp6;\n                result13 = result13 & 0xfffff;\n                result11 = result13 | 0x3ff00000;\n                if (result13 < 0x3988f) {\nLAB_08006628:\n                  temp1 = 0;\n                }\n                else {\n                  if (0xbb679 < result13) {\n                    result11 = result11 - 0x100000;\n                    temp6 = temp6 + 1;\n                    goto LAB_08006628;\n                  }\n                  temp1 = 1;\n                }\n                temp2 = temp1 * 8;\n                result10 = (&DAT_080073c0)[temp1 * 2];\n                result12 = (&DAT_080073c4)[temp1 * 2];\n                result17 = __subdf3(result1,result11,result10,result12);\n                result15 = (undefined4)((ulonglong)result17 >> 0x20);\n                result16 = __aeabi_dadd(result1,result11,result10,result12);\n                result16 = __divdf3(0,0x3ff00000,(int)result16,(int)((ulonglong)result16 >> 0x20));\n                result4 = (undefined4)((ulonglong)result16 >> 0x20);\n                result18 = __muldf3((int)result17,result15,(int)result16,result4);\n                result5 = (undefined4)((ulonglong)result18 >> 0x20);\n                result14 = (undefined4)result18;\n                result18 = __muldf3(0,result5);\n                result17 = __subdf3((int)result17,result15,(int)result18,(int)((ulonglong)result18 >> 0x20));\n                result18 = __subdf3(0,((int)result11 >> 1 | 0x20000000U) + 0x80000 + temp1 * 0x40000,\n                                  result10,result12);\n                result18 = __subdf3(result1,result11,(int)result18,(int)((ulonglong)result18 >> 0x20));\n                result18 = __muldf3((int)result18,(int)((ulonglong)result18 >> 0x20),0,result5);\n                result17 = __subdf3((int)result17,(int)((ulonglong)result17 >> 0x20),(int)result18,\n                                  (int)((ulonglong)result18 >> 0x20));\n                result17 = __muldf3((int)result17,(int)((ulonglong)result17 >> 0x20),(int)result16,result4);\n                result15 = (undefined4)((ulonglong)result17 >> 0x20);\n                result16 = __muldf3(result14,result5);\n                result4 = (undefined4)((ulonglong)result16 >> 0x20);\n                result1 = (undefined4)result16;\n                result16 = __muldf3(result1,result4,0x4a454eef,0x3fca7e28);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),result1,result4);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),result1,result4);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),result1,result4);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),result1,result4);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                result18 = __muldf3(result1,result4,result1,result4);\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result18,\n                                  (int)((ulonglong)result18 >> 0x20));\n                result18 = __aeabi_dadd(result14,result5,0,result5);\n                result18 = __muldf3((int)result18,(int)((ulonglong)result18 >> 0x20),(int)result17,result15);\n                result16 = __aeabi_dadd((int)result18,(int)((ulonglong)result18 >> 0x20),(int)result16,\n                                      (int)((ulonglong)result16 >> 0x20));\n                result1 = (undefined4)((ulonglong)result16 >> 0x20);\n                result18 = __muldf3(0,result5,0,result5);\n                result4 = (undefined4)((ulonglong)result18 >> 0x20);\n                result19 = __aeabi_dadd((int)result18,result4,0,0x40080000);\n                __aeabi_dadd((int)result19,(int)((ulonglong)result19 >> 0x20),(int)result16,result1);\n                result19 = __muldf3(0,result5,0,result6);\n                result10 = (undefined4)((ulonglong)result19 >> 0x20);\n                result22 = __subdf3(0,result6,0,0x40080000);\n                result18 = __subdf3((int)result22,(int)((ulonglong)result22 >> 0x20),(int)result18,result4);\n                result16 = __subdf3((int)result16,result1,(int)result18,(int)((ulonglong)result18 >> 0x20));\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),result14,result5);\n                result17 = __muldf3((int)result17,result15,0,result6);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result17,\n                                      (int)((ulonglong)result17 >> 0x20));\n                result1 = (undefined4)((ulonglong)result16 >> 0x20);\n                __aeabi_dadd((int)result19,result10,(int)result16,result1);\n                result17 = __muldf3(0,result7,0xe0000000,0x3feec709);\n                result18 = __subdf3(0,result7,(int)result19,result10);\n                result16 = __subdf3((int)result16,result1,(int)result18,(int)((ulonglong)result18 >> 0x20));\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),0xdc3a03fd,0x3feec709\n                                 );\n                result18 = __muldf3(0,result7,0x145b01f5,0xbe3e2fe0);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result18,\n                                      (int)((ulonglong)result18 >> 0x20));\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + temp2),\n                                      *(undefined4 *)(&DAT_080073e4 + temp2));\n                result18 = __aeabi_i2d(temp6);\n                result1 = (undefined4)((ulonglong)result18 >> 0x20);\n                result14 = *(undefined4 *)(&DAT_080073d0 + temp2);\n                result15 = *(undefined4 *)(&DAT_080073d4 + temp2);\n                result19 = __aeabi_dadd((int)result17,(int)((ulonglong)result17 >> 0x20),(int)result16,\n                                      (int)((ulonglong)result16 >> 0x20));\n                result19 = __aeabi_dadd((int)result19,(int)((ulonglong)result19 >> 0x20),result14,result15);\n                __aeabi_dadd((int)result19,(int)((ulonglong)result19 >> 0x20),(int)result18,result1);\n                result18 = __subdf3(0,result8,(int)result18,result1);\n                result20 = __subdf3((int)result18,(int)((ulonglong)result18 >> 0x20),result14,result15);\n                result13 = result8;\n              }\n              else {\n                if (0x43f00000 < result13) {\n                  if (result11 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)value4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  value1 = 0x8800759c;\n                  value2 = 0x7e37e43c;\n                  result17 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (result11 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)value4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < result11) goto LAB_08006418;\n                result17 = __subdf3(result1,result14,0,0x3ff00000);\n                result14 = (undefined4)((ulonglong)result17 >> 0x20);\n                result1 = (undefined4)result17;\n                result17 = __muldf3(result1,result14,0x60000000,0x3ff71547);\n                result16 = __muldf3(result1,result14,0xf85ddf44,0x3e54ae0b);\n                result18 = __muldf3(result1,result14,0,0x3fd00000);\n                result18 = __subdf3(0x55555555,0x3fd55555,(int)result18,(int)((ulonglong)result18 >> 0x20)\n                                 );\n                result18 = __muldf3((int)result18,(int)((ulonglong)result18 >> 0x20),result1,result14);\n                result18 = __subdf3(0,0x3fe00000,(int)result18,(int)((ulonglong)result18 >> 0x20));\n                result19 = __muldf3(result1,result14,result1,result14);\n                result18 = __muldf3((int)result18,(int)((ulonglong)result18 >> 0x20),(int)result19,\n                                  (int)((ulonglong)result19 >> 0x20));\n                result18 = __muldf3((int)result18,(int)((ulonglong)result18 >> 0x20),0x652b82fe,0x3ff71547\n                                 );\n                result16 = __subdf3((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result18,\n                                  (int)((ulonglong)result18 >> 0x20));\n                __aeabi_dadd((int)result17,(int)((ulonglong)result17 >> 0x20),(int)result16,\n                             (int)((ulonglong)result16 >> 0x20));\n                result20 = (ulonglong)result3 << 0x20;\n                result13 = result3;\n              }\n              result17 = __subdf3((int)result20,(int)((ulonglong)result20 >> 0x20),(int)result17,\n                                (int)((ulonglong)result17 >> 0x20));\n              result17 = __subdf3((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result17,\n                                (int)((ulonglong)result17 >> 0x20));\n              if ((flag1 - 1 | result2) == 0) {\n                value2 = 0xbff00000;\n              }\n              else {\n                value2 = 0x3ff00000;\n              }\n              flag1 = 0;\n              result16 = __subdf3(value3,value4,0,value4);\n              result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),0,result13);\n              result17 = __muldf3((int)result17,(int)((ulonglong)result17 >> 0x20),value3,value4);\n              result17 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result17,\n                                    (int)((ulonglong)result17 >> 0x20));\n              result15 = (undefined4)((ulonglong)result17 >> 0x20);\n              result1 = (undefined4)result17;\n              result17 = __muldf3(0,result13,0,value4);\n              result4 = (undefined4)((ulonglong)result17 >> 0x20);\n              result14 = (undefined4)result17;\n              result20 = __aeabi_dadd(result1,result15,result14,result4);\n              result11 = (uint)((ulonglong)result20 >> 0x20);\n              result13 = (uint)result20;\n              if (0x408fffffffffffff < result20) {\n                if ((result11 + 0xbf700000 | result13) == 0) {\n                  result16 = __aeabi_dadd(result1,result15,0x652b82fe,0x3c971547);\n                  result18 = __subdf3(result13,result11,result14,result4);\n                  temp1 = __aeabi_dcmpgt((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result18,\n                                         (int)((ulonglong)result18 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                result17 = __muldf3(0,value2,0x8800759c,0x7e37e43c);\n                value1 = 0x8800759c;\n                value2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((result11 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((result11 & 0x7fffffff) < 0x3fe00001) {\n                  temp1 = 0;\n                }\n                else {\n                  result11 = (0x100000 >> (((int)(result11 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          result11;\n                  result13 = (result11 * 2 >> 0x15) - 0x3ff;\n                  temp1 = (int)(result11 & 0xfffff | 0x100000) >> (0x14 - result13 & 0xff);\n                  if (result20 < 0) {\n                    temp1 = -temp1;\n                  }\n                  result17 = __subdf3(result14,result4,0,result11 & ~(0xfffff >> (result13 & 0xff)));\n                }\n                temp5 = (undefined4)((ulonglong)result17 >> 0x20);\n                temp4 = (undefined4)result17;\n                __aeabi_dadd(temp4,temp5,result1,result15);\n                result17 = __muldf3(0,result9,0,0x3fe62e43);\n                result14 = (undefined4)((ulonglong)result17 >> 0x20);\n                result16 = __subdf3(0,result9,temp4,temp5);\n                result16 = __subdf3(result1,result15,(int)result16,(int)((ulonglong)result16 >> 0x20));\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),0xfefa39ef,0x3fe62e42\n                                 );\n                result18 = __muldf3(0,result9,0xca86c39,0xbe205c61);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result18,\n                                      (int)((ulonglong)result18 >> 0x20));\n                result15 = (undefined4)((ulonglong)result16 >> 0x20);\n                result18 = __aeabi_dadd((int)result17,result14,(int)result16,result15);\n                result4 = (undefined4)((ulonglong)result18 >> 0x20);\n                result1 = (undefined4)result18;\n                result17 = __subdf3(result1,result4,(int)result17,result14);\n                result17 = __subdf3((int)result16,result15,(int)result17,(int)((ulonglong)result17 >> 0x20));\n                result15 = (undefined4)((ulonglong)result17 >> 0x20);\n                result16 = __muldf3(result1,result4,result1,result4);\n                result5 = (undefined4)((ulonglong)result16 >> 0x20);\n                result14 = (undefined4)result16;\n                result16 = __muldf3(result14,result5,0x72bea4d0,0x3e663769);\n                result16 = __subdf3((int)result16,(int)((ulonglong)result16 >> 0x20),0xc5d26bf1,0x3ebbbd41\n                                 );\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),result14,result5);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),result14,result5);\n                result16 = __subdf3((int)result16,(int)((ulonglong)result16 >> 0x20),0x16bebd93,0x3f66c16c\n                                 );\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),result14,result5);\n                result16 = __aeabi_dadd((int)result16,(int)((ulonglong)result16 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                result16 = __muldf3((int)result16,(int)((ulonglong)result16 >> 0x20),result14,result5);\n                result16 = __subdf3(result1,result4,(int)result16,(int)((ulonglong)result16 >> 0x20));\n                result14 = (undefined4)((ulonglong)result16 >> 0x20);\n                result18 = __muldf3(result1,result4,(int)result16,result14);\n                result16 = __subdf3((int)result16,result14,0,0x40000000);\n                result16 = __divdf3((int)result18,(int)((ulonglong)result18 >> 0x20),(int)result16,\n                                  (int)((ulonglong)result16 >> 0x20));\n                result18 = __muldf3(result1,result4,(int)result17,result15);\n                result17 = __aeabi_dadd((int)result18,(int)((ulonglong)result18 >> 0x20),(int)result17,\n                                      result15);\n                result17 = __subdf3((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result17,\n                                  (int)((ulonglong)result17 >> 0x20));\n                result17 = __subdf3((int)result17,(int)((ulonglong)result17 >> 0x20),result1,result4);\n                result16 = __subdf3(0,0x3ff00000,(int)result17,(int)((ulonglong)result17 >> 0x20));\n                temp2 = (int)((ulonglong)result16 >> 0x20);\n                temp3 = temp2 + temp1 * 0x100000;\n                result17 = CONCAT44(temp3,(int)result16);\n                value1 = flag1;\n                if (temp3 < 0x100000) {\n                  result17 = scalbn((int)result16,temp2,temp1);\n                }\n              }\n              else {\n                if ((result11 + 0x3f6f3400 | result13) == 0) {\n                  result16 = __subdf3(result13,result11,result14,result4);\n                  temp1 = __aeabi_dcmple(result1,result15,(int)result16,(int)((ulonglong)result16 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                result17 = __muldf3(0,value2,0xc2f8f359,0x1a56e1f);\n                value1 = 0xc2f8f359;\n                value2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              result13 = __muldf3((int)result17,(int)((ulonglong)result17 >> 0x20),value1,value2);\n              return result13;\n            }\n          }\n          result1 = (undefined4)((ulonglong)result16 >> 0x20);\n          result16 = __subdf3((int)result16,result1,(int)result16,result1);\n          result17 = result16;\nLAB_08006320:\n          result13 = __divdf3((int)result16,(int)((ulonglong)result16 >> 0x20),(int)result17,\n                            (int)((ulonglong)result17 >> 0x20));\n          return result13;\n        }\n      }\n    }\n    else if (result13 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((result11 + 0xc0100000 | value1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  result13 = nan(&DAT_0800737e);\n  return result13;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result1",
                "uVar2": "result2",
                "extraout_r1": "result3",
                "uVar3": "result4",
                "uVar4": "result5",
                "extraout_r1_00": "result6",
                "extraout_r1_01": "result7",
                "extraout_r1_02": "result8",
                "extraout_r1_03": "result9",
                "iVar5": "temp1",
                "iVar6": "temp2",
                "uVar7": "result10",
                "uVar8": "result11",
                "uVar9": "result12",
                "iVar10": "temp3",
                "uVar11": "result13",
                "uVar12": "result14",
                "uVar13": "result15",
                "uVar14": "result16",
                "uVar15": "result17",
                "uVar16": "result18",
                "uVar17": "result19",
                "lVar18": "result20",
                "uVar19": "result21",
                "uVar20": "result22",
                "local_70": "flag1",
                "local_68": "temp4",
                "local_64": "temp5",
                "local_54": "temp6"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__aeabi_i2d",
                "nan",
                "scalbn",
                "__aeabi_dadd",
                "__muldf3",
                "__aeabi_dcmple",
                "__ieee754_sqrt",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_floating_point_08006c0c",
            "code": "\nundefined8 calculateFloatingPoint_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 result1;\n  uint result2;\n  int exponent1;\n  int exponent2;\n  uint mantissa1;\n  uint mantissa2;\n  int sum;\n  uint partialSum;\n  uint mask;\n  int count;\n  uint temp;\n  undefined8 finalResult;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    finalResult = __muldf3(input1,input2,input1,input2);\n    finalResult = __aeabi_dadd(input1,input2,(int)finalResult,(int)((ulonglong)finalResult >> 0x20));\n    return finalResult;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != 0) {\n      finalResult = __subdf3(input1,input2,input1,input2);\n      result1 = (undefined4)((ulonglong)finalResult >> 0x20);\n      finalResult = __divdf3((int)finalResult,result1,(int)finalResult,result1);\n      return finalResult;\n    }\n  }\n  exponent1 = (int)input2 >> 0x14;\n  if (exponent1 == 0) {\n    while (input2 == 0) {\n      exponent1 = exponent1 + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    result2 = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      result2 = result2 + 1;\n    }\n    exponent1 = exponent1 - (result2 - 1);\n    input2 = input2 | input1 >> (0x20 - result2 & 0xff);\n    input1 = input1 << (result2 & 0xff);\n  }\n  sum = 0;\n  result2 = input2 & 0xfffff | 0x100000;\n  if ((exponent1 + -0x3ff) * -0x80000000 < 0) {\n    result2 = result2 * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  result2 = result2 * 2 - ((int)input1 >> 0x1f);\n  exponent2 = 0x16;\n  mantissa1 = 0;\n  partialSum = 0x200000;\n  input1 = input1 << 1;\n  do {\n    count = mantissa1 + partialSum;\n    if (count <= (int)result2) {\n      result2 = result2 - count;\n      mantissa1 = count + partialSum;\n      sum = sum + partialSum;\n    }\n    exponent2 = exponent2 + -1;\n    result2 = result2 * 2 - ((int)input1 >> 0x1f);\n    partialSum = partialSum >> 1;\n    input1 = input1 << 1;\n  } while (exponent2 != 0);\n  count = 0x20;\n  mask = 0x80000000;\n  partialSum = 0;\n  exponent2 = 0;\n  do {\n    temp = mask + exponent2;\n    mantissa2 = mantissa1;\n    if (((int)mantissa1 < (int)result2) || ((result2 == mantissa1 && (temp <= input1)))) {\n      exponent2 = temp + mask;\n      if (((int)temp < 0) && (-1 < exponent2)) {\n        mantissa2 = mantissa1 + 1;\n      }\n      result2 = result2 - mantissa1;\n      if (input1 < temp) {\n        result2 = result2 - 1;\n      }\n      input1 = input1 - temp;\n      partialSum = partialSum + mask;\n    }\n    result2 = result2 * 2 - ((int)input1 >> 0x1f);\n    count = count + -1;\n    input1 = input1 << 1;\n    mask = mask >> 1;\n    mantissa1 = mantissa2;\n  } while (count != 0);\n  if ((input1 | result2) != 0) {\n    if (partialSum == 0xffffffff) {\n      sum = sum + 1;\n      partialSum = 0;\n    }\n    else {\n      partialSum = partialSum + 1 & 0xfffffffe;\n    }\n  }\n  partialSum = partialSum >> 1;\n  if (sum << 0x1f < 0) {\n    partialSum = partialSum | 0x80000000;\n  }\n  return CONCAT44((sum >> 1) + 0x3fe00000 + (exponent1 + -0x3ff >> 1) * 0x100000,partialSum);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_floating_point_08006c0c",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "iVar3": "exponent1",
                "iVar4": "exponent2",
                "uVar5": "mantissa1",
                "uVar6": "mantissa2",
                "iVar7": "sum",
                "uVar8": "partialSum",
                "uVar9": "mask",
                "iVar10": "count",
                "uVar11": "temp",
                "uVar12": "finalResult"
            },
            "calling": [
                "sqrt",
                "__ieee754_pow",
                "__ieee754_asin"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd",
                "__muldf3",
                "__divdf3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_square_root_08006d68",
            "code": "\nundefined8 calculateSquareRoot_08006d68(int inputParam1,uint inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  int comparisonResult;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  undefined4 tempVar5;\n  undefined4 tempVar6;\n  uint unsignedParam2;\n  undefined8 resultVar1;\n  undefined8 resultVar2;\n  \n  resultVar1 = CONCAT44(inputParam2,inputParam1);\n  unsignedParam2 = inputParam2 & 0x7fffffff;\n  if (unsignedParam2 < 0x44100000) {\n    if (unsignedParam2 < 0x3fdc0000) {\n      if (unsignedParam2 < 0x3e200000) {\n        resultVar2 = __aeabi_dadd(inputParam1,inputParam2,0x8800759c,0x7e37e43c,inputParam4);\n        comparisonResult = __aeabi_dcmpgt((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0,0x3ff00000);\n        if (comparisonResult != 0) {\n          return resultVar1;\n        }\n      }\n      comparisonResult = -1;\n    }\n    else {\n      resultVar1 = fabs();\n      tempVar2 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n      tempVar1 = (undefined4)resultVar1;\n      if (unsignedParam2 < 0x3ff30000) {\n        if (unsignedParam2 < 0x3fe60000) {\n          resultVar1 = __aeabi_dadd(tempVar1,tempVar2,tempVar1,tempVar2);\n          resultVar1 = __subdf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0,0x3ff00000);\n          resultVar2 = __aeabi_dadd(tempVar1,tempVar2,0,0x40000000);\n          resultVar1 = __divdf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),(int)resultVar2,\n                           (int)((ulonglong)resultVar2 >> 0x20));\n          comparisonResult = 0;\n        }\n        else {\n          resultVar1 = __subdf3(tempVar1,tempVar2,0,0x3ff00000);\n          resultVar2 = __aeabi_dadd(tempVar1,tempVar2,0,0x3ff00000);\n          resultVar1 = __divdf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),(int)resultVar2,\n                           (int)((ulonglong)resultVar2 >> 0x20));\n          comparisonResult = 1;\n        }\n      }\n      else if (unsignedParam2 < 0x40038000) {\n        resultVar1 = __subdf3(tempVar1,tempVar2,0,0x3ff80000);\n        resultVar2 = __muldf3(tempVar1,tempVar2,0,0x3ff80000);\n        resultVar2 = __aeabi_dadd((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0,0x3ff00000);\n        resultVar1 = __divdf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),(int)resultVar2,\n                         (int)((ulonglong)resultVar2 >> 0x20));\n        comparisonResult = 2;\n      }\n      else {\n        resultVar1 = __divdf3(0,0xbff00000,tempVar1,tempVar2);\n        comparisonResult = 3;\n      }\n    }\n    tempVar6 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n    tempVar5 = (undefined4)resultVar1;\n    resultVar1 = __muldf3(tempVar5,tempVar6,tempVar5,tempVar6);\n    tempVar3 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n    tempVar1 = (undefined4)resultVar1;\n    resultVar1 = __muldf3(tempVar1,tempVar3,tempVar1,tempVar3);\n    tempVar4 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n    tempVar2 = (undefined4)resultVar1;\n    resultVar1 = __muldf3(tempVar2,tempVar4,0xe322da11,0x3f90ad3a);\n    resultVar1 = __aeabi_dadd((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0x24760deb,0x3fa97b4b);\n    resultVar1 = __muldf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),tempVar2,tempVar4);\n    resultVar1 = __aeabi_dadd((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    resultVar1 = __muldf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),tempVar2,tempVar4);\n    resultVar1 = __aeabi_dadd((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0xc54c206e,0x3fb745cd);\n    resultVar1 = __muldf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),tempVar2,tempVar4);\n    resultVar1 = __aeabi_dadd((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0x920083ff,0x3fc24924);\n    resultVar1 = __muldf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),tempVar2,tempVar4);\n    resultVar1 = __aeabi_dadd((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),0x5555550d,0x3fd55555);\n    resultVar1 = __muldf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),tempVar1,tempVar3);\n    tempVar1 = (undefined4)((ulonglong)resultVar1 >> 0x20);\n    resultVar2 = __muldf3(tempVar2,tempVar4,0x2c6a6c2f,0xbfa2b444);\n    resultVar2 = __subdf3((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0x52defd9a,0x3fadde2d);\n    resultVar2 = __muldf3((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),tempVar2,tempVar4);\n    resultVar2 = __subdf3((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    resultVar2 = __muldf3((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),tempVar2,tempVar4);\n    resultVar2 = __subdf3((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0xfe231671,0x3fbc71c6);\n    resultVar2 = __muldf3((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),tempVar2,tempVar4);\n    resultVar2 = __subdf3((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),0x9998ebc4,0x3fc99999);\n    resultVar2 = __muldf3((int)resultVar2,(int)((ulonglong)resultVar2 >> 0x20),tempVar2,tempVar4);\n    tempVar2 = (undefined4)((ulonglong)resultVar2 >> 0x20);\n    if (comparisonResult == -1) {\n      resultVar1 = __aeabi_dadd((int)resultVar1,tempVar1,(int)resultVar2,tempVar2);\n      resultVar1 = __muldf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),tempVar5,tempVar6);\n      resultVar1 = __subdf3(tempVar5,tempVar6,(int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20));\n    }\n    else {\n      resultVar1 = __aeabi_dadd((int)resultVar1,tempVar1,(int)resultVar2,tempVar2);\n      resultVar1 = __muldf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),tempVar5,tempVar6);\n      comparisonResult = comparisonResult * 8;\n      resultVar1 = __subdf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),\n                       *(undefined4 *)(&UNK_08007410 + comparisonResult),*(undefined4 *)(&UNK_08007414 + comparisonResult)\n                      );\n      resultVar1 = __subdf3((int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20),tempVar5,tempVar6);\n      resultVar1 = __subdf3(*(undefined4 *)(&UNK_080073f0 + comparisonResult),*(undefined4 *)(&UNK_080073f4 + comparisonResult)\n                       ,(int)resultVar1,(int)((ulonglong)resultVar1 >> 0x20));\n      if ((int)inputParam2 < 0) {\n        resultVar1 = CONCAT44((int)((ulonglong)resultVar1 >> 0x20) + -0x80000000,(int)resultVar1);\n      }\n    }\n  }\n  else if ((unsignedParam2 < 0x7ff00001) && ((unsignedParam2 != 0x7ff00000 || (inputParam1 == 0)))) {\n    if ((int)inputParam2 < 1) {\n      resultVar1 = 0xbff921fb54442d18;\n    }\n    else {\n      resultVar1 = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    resultVar1 = __aeabi_dadd(inputParam1,inputParam2,inputParam1,inputParam2,inputParam4);\n  }\n  return resultVar1;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_square_root_08006d68",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "iVar1": "comparisonResult",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "uVar6": "tempVar5",
                "uVar7": "tempVar6",
                "uVar8": "unsignedParam2",
                "uVar9": "resultVar1",
                "uVar10": "resultVar2"
            },
            "calling": [
                "__ieee754_atan2"
            ],
            "called": [
                "fabs",
                "__subdf3",
                "__muldf3",
                "__aeabi_dadd",
                "__divdf3",
                "__aeabi_dcmpgt"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "__ieee754_atan2",
                "atan",
                "__ieee754_pow",
                "asin",
                "__ieee754_asin"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "calculate_shifted_value_08007092",
            "code": "\nuint calculateShiftedValue_08007092(undefined4 inputValue,uint bitmask)\n\n{\n  return (bitmask | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "calculate_shifted_value_08007092",
                "param_1": "inputValue",
                "param_2": "bitmask"
            },
            "calling": [
                "pow"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_0800709e",
            "code": "\nundefined4 initialize_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_0800709e"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_positive_infinity_080070a4",
            "code": "\ndouble getPositiveInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_positive_infinity_080070a4",
                "undefined8": "double"
            },
            "calling": [
                "__ieee754_pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "calculate_floating_point_080070b0",
            "code": "\nundefined8 calculateFloatingPoint_080070b0(uint mantissa,uint exponent,undefined4 param_3)\n\n{\n  int shift_count;\n  undefined4 mantissa_low_bits;\n  uint exponent_temp;\n  undefined4 mantissa_high_bits;\n  uint uVar5;\n  uint diff_from_max_exponent;\n  uint exponent_shifted;\n  undefined8 result;\n  \n  exponent_shifted = (exponent << 1) >> 0x15;\n  diff_from_max_exponent = exponent_shifted - 0x3ff;\n  exponent_temp = exponent;\n  if ((int)diff_from_max_exponent < 0x14) {\n    if ((int)diff_from_max_exponent < 0) {\n      if ((exponent & 0x7fffffff | mantissa) == 0) {\n        return CONCAT44(exponent,mantissa);\n      }\n      exponent_temp = exponent & 0xfffff | mantissa;\n      shift_count = ((int)exponent >> 0x1f) * -8;\n      mantissa_low_bits = *(undefined4 *)(&DAT_08007430 + shift_count);\n      mantissa_high_bits = *(undefined4 *)(&DAT_08007434 + shift_count);\n      result = __aeabi_dadd(mantissa,(-exponent_temp | exponent_temp) >> 0xc & 0x80000 | exponent & 0xfffe0000,mantissa_low_bits,\n                           mantissa_high_bits,mantissa,exponent,param_3);\n      result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),mantissa_low_bits,mantissa_high_bits);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | exponent & 0x80000000,\n                      (int)result);\n    }\n    exponent_shifted = 0xfffff >> (diff_from_max_exponent & 0xff);\n    if ((exponent & exponent_shifted | mantissa) == 0) {\n      return CONCAT44(exponent,mantissa);\n    }\n    exponent_shifted = exponent_shifted >> 1;\n    uVar5 = exponent & exponent_shifted | mantissa;\n    if (uVar5 != 0) {\n      if (diff_from_max_exponent == 0x13) {\n        uVar5 = 0x80000000;\n      }\n      else {\n        uVar5 = 0;\n      }\n      exponent_temp = 0x40000 >> (diff_from_max_exponent & 0xff) | exponent & ~exponent_shifted;\n    }\n  }\n  else {\n    if (0x33 < (int)diff_from_max_exponent) {\n      if (diff_from_max_exponent != 0x400) {\n        return CONCAT44(exponent,mantissa);\n      }\n      result = __aeabi_dadd();\n      return result;\n    }\n    exponent_shifted = exponent_shifted - 0x413;\n    diff_from_max_exponent = 0xffffffff >> (exponent_shifted & 0xff);\n    if ((mantissa & diff_from_max_exponent) == 0) {\n      return CONCAT44(exponent,mantissa);\n    }\n    diff_from_max_exponent = diff_from_max_exponent >> 1;\n    uVar5 = mantissa;\n    if ((mantissa & diff_from_max_exponent) != 0) {\n      uVar5 = 0x40000000 >> (exponent_shifted & 0xff) | mantissa & ~diff_from_max_exponent;\n    }\n  }\n  shift_count = ((int)exponent >> 0x1f) * -8;\n  mantissa_low_bits = *(undefined4 *)(&DAT_08007430 + shift_count);\n  mantissa_high_bits = *(undefined4 *)(&DAT_08007434 + shift_count);\n  result = __aeabi_dadd(uVar5,exponent_temp,mantissa_low_bits,mantissa_high_bits,mantissa,exponent,param_3);\n  result = __subdf3((int)result,(int)((ulonglong)result >> 0x20),mantissa_low_bits,mantissa_high_bits);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "calculate_floating_point_080070b0",
                "param_1": "mantissa",
                "param_2": "exponent",
                "uVar2": "mantissa_low_bits",
                "uVar3": "exponent_temp",
                "uVar4": "mantissa_high_bits",
                "uVar6": "diff_from_max_exponent",
                "uVar7": "exponent_shifted",
                "uVar8": "result",
                "iVar1": "shift_count"
            },
            "calling": [
                "pow"
            ],
            "called": [
                "__subdf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_exponent_080071c0",
            "code": "\nundefined8 calculate_exponent_080071c0(uint base,uint exponent,int additional,undefined4 temp)\n\n{\n  uint shifted_exponent;\n  undefined4 result_lower;\n  int combined_exponent;\n  undefined4 result_upper;\n  uint upper_part;\n  undefined8 result;\n  \n  result = CONCAT44(exponent,base);\n  shifted_exponent = (exponent << 1) >> 0x15;\n  if (shifted_exponent == 0) {\n    if ((exponent & 0x7fffffff | base) == 0) {\n      return result;\n    }\n    result = __muldf3(base,exponent,0,0x43500000);\n    if (-0xc351 < additional) {\n      shifted_exponent = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    result_lower = 0xc2f8f359;\n    result_upper = 0x1a56e1f;\n  }\n  else {\n    if (shifted_exponent == 0x7ff) {\n      result = __aeabi_dadd(base,exponent,base,exponent,temp);\n      return result;\n    }\nLAB_08007210:\n    upper_part = (uint)((ulonglong)result >> 0x20);\n    result_lower = (undefined4)result;\n    combined_exponent = shifted_exponent + additional;\n    if (combined_exponent < 0x7ff) {\n      if (0 < combined_exponent) {\n        return CONCAT44(upper_part & 0x800fffff | combined_exponent * 0x100000,result_lower);\n      }\n      if (combined_exponent + 0x35 < 0 == SCARRY4(combined_exponent,0x35)) {\n        result = CONCAT44(upper_part & 0x800fffff | (combined_exponent + 0x36) * 0x100000,result_lower);\n        result_lower = 0;\n        result_upper = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (additional < 0xc351) {\n        result = copysign(0xc2f8f359,0x1a56e1f,result_lower,upper_part);\n        goto LAB_080071ec;\n      }\n    }\n    result = copysign(0x8800759c,0x7e37e43c,result_lower,upper_part);\n    result_lower = 0x8800759c;\n    result_upper = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = __muldf3((int)result,(int)((ulonglong)result >> 0x20),result_lower,result_upper);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_exponent_080071c0",
                "param_1": "base",
                "param_2": "exponent",
                "param_3": "additional",
                "param_4": "temp",
                "uVar1": "shifted_exponent",
                "uVar2": "result_lower",
                "iVar3": "combined_exponent",
                "uVar4": "result_upper",
                "uVar5": "upper_part",
                "uVar6": "result"
            },
            "calling": [
                "__ieee754_pow"
            ],
            "called": [
                "copysign",
                "__muldf3",
                "__aeabi_dadd"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "scalbn"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_constant_080072ac",
            "code": "\nundefined4 get_data_constant_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_constant_080072ac"
            },
            "calling": [
                "sqrt",
                "pow",
                "asin"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "update_variable_080072b8",
            "code": "\nvoid updateVariable_080072b8(int incrementAmount)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + incrementAmount;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "update_variable_080072b8",
                "param_1": "incrementAmount"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "__do_global_dtors_aux",
                "__libc_init_array",
                "frame_dummy"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 151320,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000980",
            "FUN_08000990",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_080009f0",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08000ffc",
            "FUN_08001004",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_08001104",
            "FUN_08001128",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_080016f4",
            "FUN_08001754",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_08001b58",
            "FUN_08002008",
            "FUN_0800209c",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_080023d0",
            "FUN_08002404",
            "FUN_0800245c",
            "FUN_08002520",
            "FUN_08002538",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_080025e8",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_0800299a",
            "FUN_08002ad0",
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08002ea0",
            "FUN_08002ec0",
            "FUN_08002ed4",
            "FUN_08002ee8",
            "FUN_08002f28",
            "FUN_08003034",
            "FUN_08003068",
            "FUN_08003298",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003330",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003f3c",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08003ff4",
            "FUN_08004028",
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_080040e8",
            "FUN_0800411c",
            "FUN_08004194",
            "FUN_080041ae",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004300",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_08004490",
            "FUN_08004514",
            "FUN_0800458c",
            "FUN_0800483c",
            "FUN_08004a30",
            "FUN_08004a84",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c64",
            "FUN_08004c70",
            "FUN_08004c8c",
            "FUN_08004cac",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004d8c",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_08004f10",
            "FUN_08004f68",
            "FUN_08004fb4",
            "FUN_08004ffc",
            "FUN_08005044",
            "FUN_080050fc",
            "FUN_080052e4",
            "FUN_080053d4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005714",
            "FUN_080057d0",
            "FUN_0800581c",
            "FUN_08005840",
            "FUN_08005854",
            "FUN_08005900",
            "FUN_08005bc8",
            "FUN_08005c70",
            "FUN_08006070",
            "FUN_08006228",
            "FUN_08006c0c",
            "FUN_08006d68",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080070b0",
            "FUN_080071c0",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724"
        ]
    ],
    "locked_functions": []
}