{
    "functions": {
        "FUN_08000110": {
            "entrypoint": "0x08000110",
            "current_name": "initialize_flag_08000110",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initializeFlag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "calling": [],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000134": {
            "entrypoint": "0x08000134",
            "current_name": "concatenate_params_08000134",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenateParams_08000134(undefined4 firstParameter,undefined4 secondParameter)\n\n{\n  return CONCAT44(secondParameter,firstParameter);\n}\n\n",
            "renaming": {
                "FUN_08000134": "concatenate_params_08000134",
                "param_1": "firstParameter",
                "param_2": "secondParameter"
            },
            "calling": [
                "FUN_08004fb4"
            ],
            "called": [
                "FUN_080072d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000150": {
            "entrypoint": "0x08000150",
            "current_name": "find_end_of_string_08000150",
            "code": "\nchar * find_end_of_string_08000150(char *str)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_pos;\n  \n  current_pos = str;\n  do {\n    next_char = current_pos + 1;\n    current_char = *current_pos;\n    current_pos = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "param_1": "str",
                "cVar1": "current_char",
                "pcVar2": "next_char",
                "pcVar3": "current_pos"
            },
            "calling": [
                "FUN_08004c8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000168": {
            "entrypoint": "0x08000168",
            "current_name": "calculate_result_08000168",
            "code": "\nulonglong calculate_result_08000168(uint input_a,uint input_b,uint input_c,uint input_d)\n\n{\n  int counter_1;\n  byte carry_bit;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int counter_2;\n  uint result_part1;\n  uint result_part2;\n  uint diff;\n  uint shifted_diff;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  temp4 = input_d ^ 0x80000000;\n  result_part1 = input_b << 1;\n  input_d = input_d << 1;\n  is_equal = ((input_b ^ temp4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input_a == input_c;\n  if (!is_equal || input_a != input_c) {\n    is_zero = (result_part1 | input_a) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (input_d | input_c) == 0;\n  }\n  counter_2 = (int)result_part1 >> 0x15;\n  if (!is_zero) {\n    is_zero = counter_2 == -1;\n  }\n  counter_1 = (int)input_d >> 0x15;\n  if (!is_zero) {\n    is_zero = counter_1 == -1;\n  }\n  if (is_zero) {\n    if (counter_2 == -1 || counter_1 == -1) {\n      result_part1 = temp4;\n      diff = input_c;\n      if (counter_2 == -1) {\n        result_part1 = input_b;\n        diff = input_a;\n      }\n      if (counter_2 != -1 || counter_1 != -1) {\n        input_c = diff;\n        temp4 = result_part1;\n      }\n      is_zero = (diff | result_part1 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input_c | temp4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = result_part1 == temp4;\n      }\n      if (!is_zero) {\n        result_part1 = result_part1 | 0x80000;\n      }\n      return CONCAT44(result_part1,diff);\n    }\n    if (((input_b ^ temp4) & 0x7fffffff) != 0 || input_a != input_c) {\n      if ((result_part1 | input_a) == 0) {\n        input_a = input_c;\n        input_b = temp4;\n      }\n      return CONCAT44(input_b,input_a);\n    }\n    if (input_b != temp4) {\n      return 0;\n    }\n    if (result_part1 >> 0x15 == 0) {\n      is_zero = (input_a & 0x80000000) != 0;\n      temp4 = input_b * 2 + (uint)is_zero;\n      if (CARRY4(input_b,input_b) || CARRY4(input_b * 2,(uint)is_zero)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input_a << 1);\n    }\n    if (result_part1 < 0xffc00000) {\n      return CONCAT44(input_b + 0x100000,input_a);\n    }\n    input_b = input_b & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input_b | 0x7ff00000) << 0x20;\n  }\n  result_part1 = result_part1 >> 0x15;\n  input_d = input_d >> 0x15;\n  diff = input_d - result_part1;\n  is_zero = diff != 0;\n  if (input_d < result_part1) {\n    diff = -diff;\n  }\n  result_part2 = input_a;\n  temp5 = input_b;\n  if (is_zero && result_part1 <= input_d) {\n    result_part1 = result_part1 + diff;\n    result_part2 = input_c;\n    temp5 = temp4;\n    input_c = input_a;\n    temp4 = input_b;\n  }\n  if (0x36 < diff) {\n    return CONCAT44(temp5,result_part2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    is_zero = result_part2 != 0;\n    result_part2 = -result_part2;\n    temp2 = -temp2 - (uint)is_zero;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    is_zero = input_c != 0;\n    input_c = -input_c;\n    temp5 = -temp5 - (uint)is_zero;\n  }\n  if (result_part1 == diff) {\n    temp5 = temp5 ^ 0x100000;\n    if (result_part1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result_part1 = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  temp4 = -diff + 0x20;\n  if ((int)diff < 0x21) {\n    shifted_diff = input_c << (temp4 & 0xff);\n    input_c = input_c >> (diff & 0xff);\n    temp1 = result_part2 + input_c;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result_part2,input_c) + ((int)temp5 >> (diff & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    shifted_diff = temp5 << (-diff + 0x40 & 0xff);\n    if (input_c != 0) {\n      shifted_diff = shifted_diff | 2;\n    }\n    temp5 = (int)temp5 >> (diff - 0x20 & 0xff);\n    temp4 = result_part2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result_part2,temp5);\n  }\n  input_b = temp2 & 0x80000000;\n  diff = temp2;\n  if ((int)temp2 < 0) {\n    is_zero = shifted_diff == 0;\n    shifted_diff = -shifted_diff;\n    diff = -temp4;\n    temp4 = -(uint)!is_zero - temp4;\n    diff = -(uint)(is_zero <= diff) - temp2;\n  }\n  if (0xfffff < diff) {\n    result_part2 = result_part1 - 1;\n    if (0x1fffff < diff) {\n      result_part2 = diff & 1;\n      diff = diff >> 1;\n      carry_bit = (byte)temp4;\n      temp4 = (uint)(result_part2 != 0) << 0x1f | temp4 >> 1;\n      shifted_diff = (uint)(carry_bit & 1) << 0x1f | shifted_diff >> 1;\n      result_part2 = result_part1;\n      if (0xffbfffff < result_part1 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_zero = 0x7fffffff < shifted_diff;\n    if (shifted_diff == 0x80000000) {\n      is_zero = (temp4 & 1) != 0;\n    }\n    return CONCAT44(diff + result_part2 * 0x100000 + (uint)CARRY4(temp4,(uint)is_zero) | input_b,\n                    temp4 + is_zero);\n  }\n  is_equal = (shifted_diff & 0x80000000) != 0;\n  shifted_diff = shifted_diff << 1;\n  result_part2 = temp4 * 2;\n  is_zero = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)is_equal;\n  diff = diff * 2 + (uint)(is_zero || CARRY4(result_part2,(uint)is_equal));\n  result_part2 = result_part1 - 2;\n  if ((diff & 0x100000) != 0) goto LAB_08000278;\n  temp5 = temp4;\n  result_part1 = diff;\n  if (diff == 0) {\n    temp5 = 0;\n    result_part1 = temp4;\n  }\n  counter_2 = LZCOUNT(result_part1);\n  if (diff == 0) {\n    counter_2 = counter_2 + 0x20;\n  }\n  diff = counter_2 - 0xb;\n  is_negative = SBORROW4(diff,0x20);\n  temp4 = counter_2 - 0x2b;\n  is_zero = (int)temp4 < 0;\n  is_equal = temp4 == 0;\n  if ((int)diff < 0x20) {\n    is_negative = SCARRY4(temp4,0xc);\n    counter_2 = counter_2 + -0x1f;\n    is_zero = counter_2 < 0;\n    is_equal = counter_2 == 0;\n    temp4 = diff;\n    if (!is_equal && is_zero == is_negative) {\n      temp5 = result_part1 << (diff & 0xff);\n      result_part1 = result_part1 >> (0xcU - counter_2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    shifted_diff = 0x20 - temp4;\n  }\n  result_part1 = result_part1 << (temp4 & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    result_part1 = result_part1 | temp5 >> (shifted_diff & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)diff <= (int)result_part2) {\n    return CONCAT44(result_part1 + (result_part2 - diff) * 0x100000 | input_b,temp5);\n  }\n  temp4 = ~(result_part2 - diff);\n  if ((int)temp4 < 0x1f) {\n    counter_2 = temp4 - 0x13;\n    if (counter_2 != 0 && counter_2 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - counter_2) & 0xff) | result_part1 << (0xcU - counter_2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input_b | result_part1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result_part1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result_part1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000168": "calculate_result_08000168",
                "param_1": "input_a",
                "param_2": "input_b",
                "param_3": "input_c",
                "param_4": "input_d",
                "iVar1": "counter_1",
                "bVar2": "carry_bit",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "iVar8": "counter_2",
                "uVar9": "result_part1",
                "uVar10": "result_part2",
                "uVar11": "diff",
                "uVar12": "shifted_diff",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800016c": {
            "entrypoint": "0x0800016c",
            "current_name": "calculate_concatenation_0800016c",
            "code": "\nulonglong calculate_concatenation_0800016c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int rightShiftedInput2;\n  byte carryFlag;\n  uint tempResult1;\n  uint tempResult2;\n  uint normalizedInput2;\n  int rightShiftedInput4;\n  uint normalizedInput2Shifted;\n  uint concatenatedResult;\n  uint normalizedInput4Shifted;\n  uint diff;\n  uint temp1;\n  uint temp2;\n  bool isZero;\n  bool isNegative;\n  bool isCarry;\n  \n  normalizedInput2Shifted = input2 << 1;\n  normalizedInput4Shifted = input4 << 1;\n  isZero = ((input2 ^ input4) & 0x7fffffff) == 0;\n  isNegative = isZero && input1 == input3;\n  if (!isZero || input1 != input3) {\n    isNegative = (normalizedInput2Shifted | input1) == 0;\n  }\n  if (!isNegative) {\n    isNegative = (normalizedInput4Shifted | input3) == 0;\n  }\n  rightShiftedInput4 = (int)normalizedInput2Shifted >> 0x15;\n  if (!isNegative) {\n    isNegative = rightShiftedInput4 == -1;\n  }\n  rightShiftedInput2 = (int)normalizedInput4Shifted >> 0x15;\n  if (!isNegative) {\n    isNegative = rightShiftedInput2 == -1;\n  }\n  if (isNegative) {\n    if (rightShiftedInput4 == -1 || rightShiftedInput2 == -1) {\n      normalizedInput4Shifted = input4;\n      normalizedInput2Shifted = input3;\n      if (rightShiftedInput4 == -1) {\n        normalizedInput4Shifted = input2;\n        normalizedInput2Shifted = input1;\n      }\n      if (rightShiftedInput4 != -1 || rightShiftedInput2 != -1) {\n        input3 = normalizedInput2Shifted;\n        input4 = normalizedInput4Shifted;\n      }\n      isNegative = (normalizedInput2Shifted | normalizedInput4Shifted << 0xc) == 0;\n      if (isNegative) {\n        isNegative = (input3 | input4 << 0xc) == 0;\n      }\n      if (isNegative) {\n        isNegative = normalizedInput4Shifted == input4;\n      }\n      if (!isNegative) {\n        normalizedInput4Shifted = normalizedInput4Shifted | 0x80000;\n      }\n      return CONCAT44(normalizedInput4Shifted,normalizedInput2Shifted);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((normalizedInput2Shifted | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (normalizedInput2Shifted >> 0x15 == 0) {\n      isNegative = (input1 & 0x80000000) != 0;\n      normalizedInput4Shifted = input2 * 2 + (uint)isNegative;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)isNegative)) {\n        normalizedInput4Shifted = normalizedInput4Shifted | 0x80000000;\n      }\n      return CONCAT44(normalizedInput4Shifted,input1 << 1);\n    }\n    if (normalizedInput2Shifted < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  normalizedInput2Shifted = normalizedInput2Shifted >> 0x15;\n  normalizedInput4Shifted = normalizedInput4Shifted >> 0x15;\n  diff = normalizedInput4Shifted - normalizedInput2Shifted;\n  isNegative = diff != 0;\n  if (normalizedInput4Shifted < normalizedInput2Shifted) {\n    diff = -diff;\n  }\n  concatenatedResult = input1;\n  normalizedInput2 = input2;\n  if (isNegative && normalizedInput2Shifted <= normalizedInput4Shifted) {\n    normalizedInput2Shifted = normalizedInput2Shifted + diff;\n    concatenatedResult = input3;\n    normalizedInput2 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < diff) {\n    return CONCAT44(normalizedInput2,concatenatedResult);\n  }\n  normalizedInput4Shifted = normalizedInput2 & 0xfffff | 0x100000;\n  if ((normalizedInput2 & 0x80000000) != 0) {\n    isNegative = concatenatedResult != 0;\n    concatenatedResult = -concatenatedResult;\n    normalizedInput4Shifted = -normalizedInput4Shifted - (uint)isNegative;\n  }\n  normalizedInput2 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    isNegative = input3 != 0;\n    input3 = -input3;\n    normalizedInput2 = -normalizedInput2 - (uint)isNegative;\n  }\n  if (normalizedInput2Shifted == diff) {\n    normalizedInput2 = normalizedInput2 ^ 0x100000;\n    if (normalizedInput2Shifted == 0) {\n      normalizedInput4Shifted = normalizedInput4Shifted ^ 0x100000;\n      normalizedInput2Shifted = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  temp2 = -diff + 0x20;\n  if ((int)diff < 0x21) {\n    temp1 = input3 << (temp2 & 0xff);\n    input3 = input3 >> (diff & 0xff);\n    tempResult1 = concatenatedResult + input3;\n    tempResult2 = normalizedInput2 << (temp2 & 0xff);\n    temp2 = tempResult1 + tempResult2;\n    normalizedInput4Shifted = normalizedInput4Shifted + CARRY4(concatenatedResult,input3) + ((int)normalizedInput2 >> (diff & 0xff)) +\n            (uint)CARRY4(tempResult1,tempResult2);\n  }\n  else {\n    temp1 = normalizedInput2 << (-diff + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp1 = temp1 | 2;\n    }\n    normalizedInput2 = (int)normalizedInput2 >> (diff - 0x20 & 0xff);\n    temp2 = concatenatedResult + normalizedInput2;\n    normalizedInput4Shifted = normalizedInput4Shifted + ((int)normalizedInput2 >> 0x1f) + (uint)CARRY4(concatenatedResult,normalizedInput2);\n  }\n  input2 = normalizedInput4Shifted & 0x80000000;\n  diff = normalizedInput4Shifted;\n  if ((int)normalizedInput4Shifted < 0) {\n    isNegative = temp1 == 0;\n    temp1 = -temp1;\n    diff = -temp2;\n    temp2 = -(uint)!isNegative - temp2;\n    diff = -(uint)(isNegative <= diff) - normalizedInput4Shifted;\n  }\n  if (0xfffff < diff) {\n    concatenatedResult = normalizedInput2Shifted - 1;\n    if (0x1fffff < diff) {\n      normalizedInput4Shifted = diff & 1;\n      diff = diff >> 1;\n      carryFlag = (byte)temp2;\n      temp2 = (uint)(normalizedInput4Shifted != 0) << 0x1f | temp2 >> 1;\n      temp1 = (uint)(carryFlag & 1) << 0x1f | temp1 >> 1;\n      concatenatedResult = normalizedInput2Shifted;\n      if (0xffbfffff < normalizedInput2Shifted * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    isNegative = 0x7fffffff < temp1;\n    if (temp1 == 0x80000000) {\n      isNegative = (temp2 & 1) != 0;\n    }\n    return CONCAT44(diff + concatenatedResult * 0x100000 + (uint)CARRY4(temp2,(uint)isNegative) | input2,\n                    temp2 + isNegative);\n  }\n  isZero = (temp1 & 0x80000000) != 0;\n  temp1 = temp1 << 1;\n  concatenatedResult = temp2 * 2;\n  isNegative = CARRY4(temp2,temp2);\n  temp2 = temp2 * 2 + (uint)isZero;\n  diff = diff * 2 + (uint)(isNegative || CARRY4(concatenatedResult,(uint)isZero));\n  concatenatedResult = normalizedInput2Shifted - 2;\n  if ((diff & 0x100000) != 0) goto LAB_08000278;\n  normalizedInput2 = temp2;\n  normalizedInput2Shifted = diff;\n  if (diff == 0) {\n    normalizedInput2 = 0;\n    normalizedInput2Shifted = temp2;\n  }\n  rightShiftedInput4 = LZCOUNT(normalizedInput2Shifted);\n  if (diff == 0) {\n    rightShiftedInput4 = rightShiftedInput4 + 0x20;\n  }\n  temp2 = rightShiftedInput4 - 0xb;\n  isCarry = SBORROW4(temp2,0x20);\n  diff = rightShiftedInput4 - 0x2b;\n  isNegative = (int)diff < 0;\n  isZero = diff == 0;\n  if ((int)temp2 < 0x20) {\n    isCarry = SCARRY4(diff,0xc);\n    rightShiftedInput4 = rightShiftedInput4 + -0x1f;\n    isNegative = rightShiftedInput4 < 0;\n    isZero = rightShiftedInput4 == 0;\n    diff = temp2;\n    if (!isZero && isNegative == isCarry) {\n      normalizedInput2 = normalizedInput2Shifted << (temp2 & 0xff);\n      normalizedInput2Shifted = normalizedInput2Shifted >> (0xcU - rightShiftedInput4 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != isCarry) {\n    temp1 = 0x20 - diff;\n  }\n  normalizedInput2Shifted = normalizedInput2Shifted << (diff & 0xff);\n  if (isZero || isNegative != isCarry) {\n    normalizedInput2Shifted = normalizedInput2Shifted | normalizedInput2 >> (temp1 & 0xff);\n  }\n  if (isZero || isNegative != isCarry) {\n    normalizedInput2 = normalizedInput2 << (diff & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp2 <= (int)concatenatedResult) {\n    return CONCAT44(normalizedInput2Shifted + (concatenatedResult - temp2) * 0x100000 | input2,normalizedInput2);\n  }\n  diff = ~(concatenatedResult - temp2);\n  if ((int)diff < 0x1f) {\n    rightShiftedInput4 = diff - 0x13;\n    if (rightShiftedInput4 != 0 && rightShiftedInput4 < 0 == SCARRY4(diff - 0x1f,0xc)) {\n      return CONCAT44(normalizedInput4Shifted,normalizedInput2 >> (0x20 - (0xcU - rightShiftedInput4) & 0xff) | normalizedInput2Shifted << (0xcU - rightShiftedInput4 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    diff = diff + 1;\n    return CONCAT44(input2 | normalizedInput2Shifted >> (diff & 0xff),\n                    normalizedInput2 >> (diff & 0xff) | normalizedInput2Shifted << (0x20 - diff & 0xff));\n  }\n  return CONCAT44(normalizedInput4Shifted,normalizedInput2Shifted >> (diff - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_0800016c": "calculate_concatenation_0800016c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "rightShiftedInput2",
                "bVar2": "carryFlag",
                "uVar3": "tempResult1",
                "uVar4": "tempResult2",
                "uVar5": "normalizedInput2",
                "iVar6": "rightShiftedInput4",
                "uVar7": "normalizedInput2Shifted",
                "uVar8": "concatenatedResult",
                "uVar9": "normalizedInput4Shifted",
                "uVar10": "diff",
                "uVar11": "temp1",
                "uVar12": "temp2",
                "bVar13": "isZero",
                "bVar14": "isNegative",
                "bVar15": "isCarry"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_080070b0",
                "FUN_08006c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000404": {
            "entrypoint": "0x08000404",
            "current_name": "bitwise_shift_08000404",
            "code": "\nulonglong bitwiseShift_08000404(uint num)\n\n{\n  uint shiftAmount;\n  uint absNum;\n  uint shiftedNum;\n  int leadingZeroes;\n  uint adjustedShiftAmount;\n  uint signBit;\n  uint remainder;\n  bool isNegative;\n  bool isZero;\n  bool isNegativeOverflow;\n  \n  if (num == 0) {\n    return 0;\n  }\n  signBit = num & 0x80000000;\n  absNum = num;\n  if ((int)signBit < 0) {\n    absNum = -num;\n  }\n  shiftAmount = 0;\n  leadingZeroes = LZCOUNT(absNum);\n  adjustedShiftAmount = leadingZeroes + 0x15;\n  isNegativeOverflow = SBORROW4(adjustedShiftAmount,0x20);\n  shiftedNum = leadingZeroes - 0xb;\n  isNegative = (int)shiftedNum < 0;\n  isZero = shiftedNum == 0;\n  if (adjustedShiftAmount < 0x20) {\n    isNegativeOverflow = SCARRY4(shiftedNum,0xc);\n    isNegative = false;\n    isZero = leadingZeroes + 1 == 0;\n    shiftedNum = adjustedShiftAmount;\n    if (!isZero && isNegativeOverflow == false) {\n      shiftAmount = absNum << adjustedShiftAmount;\n      absNum = absNum >> (0xcU - (leadingZeroes + 1) & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || isNegative != isNegativeOverflow) {\n    remainder = 0x20 - shiftedNum;\n  }\n  absNum = absNum << (shiftedNum & 0xff);\n  if (isZero || isNegative != isNegativeOverflow) {\n    absNum = absNum | 0U >> (remainder & 0xff);\n  }\n  if (isZero || isNegative != isNegativeOverflow) {\n    shiftAmount = 0 << (shiftedNum & 0xff);\n  }\nLAB_080002f0:\n  if (adjustedShiftAmount < 0x433) {\n    return CONCAT44(absNum + (0x432 - adjustedShiftAmount) * 0x100000 | signBit,shiftAmount);\n  }\n  shiftedNum = ~(0x432 - adjustedShiftAmount);\n  if (0x1e < (int)shiftedNum) {\n    return CONCAT44(num,absNum >> (shiftedNum - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leadingZeroes = shiftedNum - 0x13;\n  if (leadingZeroes == 0 || leadingZeroes < 0 != SCARRY4(shiftedNum - 0x1f,0xc)) {\n    shiftedNum = shiftedNum + 1;\n    return CONCAT44(signBit | absNum >> (shiftedNum & 0xff),\n                    shiftAmount >> (shiftedNum & 0xff) | absNum << (0x20 - shiftedNum & 0xff));\n  }\n  return CONCAT44(num,shiftAmount >> (0x20 - (0xcU - leadingZeroes) & 0xff) | absNum << (0xcU - leadingZeroes & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000404": "bitwise_shift_08000404",
                "param_1": "num",
                "uVar1": "shiftAmount",
                "uVar2": "absNum",
                "uVar3": "shiftedNum",
                "iVar4": "leadingZeroes",
                "uVar5": "adjustedShiftAmount",
                "uVar6": "signBit",
                "in_r12": "remainder",
                "bVar7": "isNegative",
                "bVar8": "isZero",
                "bVar9": "isNegativeOverflow"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000428": {
            "entrypoint": "0x08000428",
            "current_name": "reverse_bits_08000428",
            "code": "\nulonglong reverseBits_08000428(uint input,undefined4 unused1,undefined4 unused2,uint unused3)\n\n{\n  uint highBit;\n  uint temp;\n  uint result;\n  uint shifted;\n  uint inputShifted;\n  int leadingZeros;\n  uint shiftAmount;\n  uint constant;\n  bool isZero;\n  bool checkCondition1;\n  bool checkCondition2;\n  \n  inputShifted = input << 1;\n  checkCondition1 = inputShifted == 0;\n  highBit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted = (uint)((int)inputShifted >> 3) >> 1;\n  result = highBit | shifted;\n  input = input << 0x1d;\n  if (!checkCondition1) {\n    unused3 = inputShifted & 0xff000000;\n    checkCondition1 = unused3 == 0;\n  }\n  if (!checkCondition1) {\n    checkCondition1 = unused3 == 0xff000000;\n  }\n  if (!checkCondition1) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if (inputShifted == 0 || unused3 == 0xff000000) {\n    return CONCAT44(result,input);\n  }\n  temp = input;\n  inputShifted = shifted;\n  if (shifted == 0) {\n    temp = 0;\n    inputShifted = input;\n  }\n  leadingZeros = LZCOUNT(inputShifted);\n  if (shifted == 0) {\n    leadingZeros = leadingZeros + 0x20;\n  }\n  shiftAmount = leadingZeros - 0xb;\n  checkCondition2 = SBORROW4(shiftAmount,0x20);\n  shifted = leadingZeros - 0x2b;\n  checkCondition1 = (int)shifted < 0;\n  isZero = shifted == 0;\n  if ((int)shiftAmount < 0x20) {\n    checkCondition2 = SCARRY4(shifted,0xc);\n    leadingZeros = leadingZeros + -0x1f;\n    checkCondition1 = leadingZeros < 0;\n    isZero = leadingZeros == 0;\n    shifted = shiftAmount;\n    if (!isZero && checkCondition1 == checkCondition2) {\n      temp = inputShifted << (shiftAmount & 0xff);\n      inputShifted = inputShifted >> (0xcU - leadingZeros & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (isZero || checkCondition1 != checkCondition2) {\n    constant = 0x20 - shifted;\n  }\n  inputShifted = inputShifted << (shifted & 0xff);\n  if (isZero || checkCondition1 != checkCondition2) {\n    inputShifted = inputShifted | temp >> (constant & 0xff);\n  }\n  if (isZero || checkCondition1 != checkCondition2) {\n    temp = temp << (shifted & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shiftAmount < 0x381) {\n    return CONCAT44(inputShifted + (0x380 - shiftAmount) * 0x100000 | highBit,temp);\n  }\n  shifted = ~(0x380 - shiftAmount);\n  if ((int)shifted < 0x1f) {\n    leadingZeros = shifted - 0x13;\n    if (leadingZeros != 0 && leadingZeros < 0 == SCARRY4(shifted - 0x1f,0xc)) {\n      return CONCAT44(result,temp >> (0x20 - (0xcU - leadingZeros) & 0xff) | inputShifted << (0xcU - leadingZeros & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted = shifted + 1;\n    return CONCAT44(highBit | inputShifted >> (shifted & 0xff),\n                    temp >> (shifted & 0xff) | inputShifted << (0x20 - shifted & 0xff));\n  }\n  return CONCAT44(result,inputShifted >> (shifted - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "renaming": {
                "FUN_08000428": "reverse_bits_08000428",
                "param_1": "input",
                "param_2": "unused1",
                "param_3": "unused2",
                "param_4": "unused3",
                "uVar1": "highBit",
                "uVar2": "temp",
                "uVar3": "result",
                "uVar4": "shifted",
                "uVar5": "inputShifted",
                "uVar7": "shiftAmount",
                "iVar6": "leadingZeros",
                "bVar8": "isZero",
                "bVar9": "checkCondition1",
                "bVar10": "checkCondition2",
                "in_r12": "constant"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080004d0": {
            "entrypoint": "0x080004d0",
            "current_name": "calculate_floating_point_080004d0",
            "code": "\nulonglong calculateFloatingPoint_080004d0(undefined4 sign,uint exponent,uint mantissa_1,uint mantissa_2)\n\n{\n  ulonglong temp_1;\n  longlong temp_2;\n  uint temp_3;\n  uint temp_4;\n  int temp_5;\n  uint temp_6;\n  uint temp_7;\n  uint temp_8;\n  uint temp_9;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  ulonglong result;\n  \n  result = CONCAT44(exponent,sign);\n  temp_8 = 0x7ff;\n  temp_4 = exponent >> 0x14 & 0x7ff;\n  flag_1 = temp_4 == 0;\n  if (!flag_1) {\n    temp_7 = mantissa_2 >> 0x14 & 0x7ff;\n    flag_1 = temp_7 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_4 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = temp_7 == 0x7ff;\n  }\n  if (flag_1) {\n    result = extract_bits_080006ac();\n  }\n  temp_3 = (uint)(result >> 0x20);\n  temp_5 = temp_4 + temp_7;\n  temp_4 = temp_3 ^ mantissa_2;\n  temp_3 = temp_3 & ~(temp_8 << 0x15);\n  mantissa_2 = mantissa_2 & ~(temp_8 << 0x15);\n  flag_1 = ((uint)result | temp_3 << 0xc) == 0;\n  if (!flag_1) {\n    flag_1 = (mantissa_1 | mantissa_2 << 0xc) == 0;\n  }\n  temp_3 = temp_3 | 0x100000;\n  mantissa_2 = mantissa_2 | 0x100000;\n  if (flag_1) {\n    mantissa_1 = (uint)result | mantissa_1;\n    mantissa_2 = (temp_4 & 0x80000000 | temp_3) ^ mantissa_2;\n    temp_4 = temp_8 >> 1;\n    flag_3 = SBORROW4(temp_5,temp_4);\n    temp_6 = temp_5 - temp_4;\n    flag_1 = temp_6 == 0;\n    temp_3 = temp_6;\n    if (!flag_1 && (int)temp_4 <= temp_5) {\n      flag_3 = SBORROW4(temp_8,temp_6);\n      temp_3 = temp_8 - temp_6;\n      flag_1 = temp_8 == temp_6;\n    }\n    if (!flag_1 && (int)temp_3 < 0 == flag_3) {\n      mantissa_2 = mantissa_2 | temp_6 * 0x100000;\n    }\n    if (!flag_1 && (int)temp_3 < 0 == flag_3) {\n      return CONCAT44(mantissa_2,mantissa_1);\n    }\n    mantissa_2 = mantissa_2 | 0x100000;\n    temp_8 = 0;\n    flag_3 = SBORROW4(temp_6,1);\n    temp_6 = temp_6 - 1;\n    flag_1 = temp_6 == 0;\n    temp_4 = temp_6;\n  }\n  else {\n    temp_1 = (result & 0xffffffff) * (ulonglong)mantissa_1;\n    result = (result & 0xffffffff) * (ulonglong)mantissa_2 +\n             (ulonglong)temp_3 * (ulonglong)mantissa_1 + (temp_1 >> 0x20);\n    temp_9 = (uint)result;\n    temp_2 = (ulonglong)temp_3 * (ulonglong)mantissa_2 + (result >> 0x20);\n    temp_8 = (uint)temp_2;\n    temp_3 = (uint)((ulonglong)temp_2 >> 0x20);\n    if ((int)temp_1 != 0) {\n      temp_9 = temp_9 | 1;\n    }\n    temp_6 = (temp_5 + -0x3ff) - (uint)(temp_3 < 0x200);\n    if (temp_3 < 0x200) {\n      flag_1 = (temp_9 & 0x80000000) != 0;\n      temp_9 = temp_9 << 1;\n      temp_2 = CONCAT44(temp_3 * 2 + (uint)(CARRY4(temp_8,temp_8) || CARRY4(temp_8 * 2,(uint)flag_1)),\n                       temp_8 * 2 + (uint)flag_1);\n    }\n    mantissa_2 = temp_4 & 0x80000000 | (int)((ulonglong)temp_2 >> 0x20) << 0xb | (uint)temp_2 >> 0x15;\n    mantissa_1 = (uint)temp_2 << 0xb | temp_9 >> 0x15;\n    temp_8 = temp_9 * 0x800;\n    flag_2 = 0xfc < temp_6;\n    flag_3 = SBORROW4(temp_6,0xfd);\n    temp_3 = temp_6 - 0xfd;\n    flag_1 = temp_3 == 0;\n    temp_4 = temp_3;\n    if (flag_2 && !flag_1) {\n      flag_2 = 0x6ff < temp_3;\n      flag_3 = SBORROW4(temp_3,0x700);\n      temp_4 = temp_6 - 0x7fd;\n      flag_1 = temp_3 == 0x700;\n    }\n    if (!flag_2 || flag_1) {\n      flag_1 = 0x7fffffff < temp_8;\n      if (temp_8 == 0x80000000) {\n        flag_1 = (temp_9 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(mantissa_2 + temp_6 * 0x100000 + (uint)CARRY4(mantissa_1,(uint)flag_1),mantissa_1 + flag_1\n                     );\n    }\n  }\n  if (!flag_1 && (int)temp_4 < 0 == flag_3) {\n    return (ulonglong)(mantissa_2 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_2 = SCARRY4(temp_6,0x36);\n  flag_1 = (int)(temp_6 + 0x36) < 0;\n  flag_3 = temp_6 == 0xffffffca;\n  if (flag_3 || flag_1 != flag_2) {\n    mantissa_1 = 0;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    mantissa_2 = mantissa_2 & 0x80000000;\n  }\n  if (flag_3 || flag_1 != flag_2) {\n    return CONCAT44(mantissa_2,mantissa_1);\n  }\n  temp_4 = -temp_6;\n  temp_3 = temp_4 - 0x20;\n  if (0x1f < (int)temp_4) {\n    temp_6 = mantissa_1 >> (temp_3 & 0xff) | mantissa_2 << (0x20 - temp_3 & 0xff);\n    temp_4 = (mantissa_2 >> (temp_3 & 0xff) & ~((mantissa_2 & 0x80000000) >> (temp_3 & 0xff))) -\n            ((int)temp_6 >> 0x1f);\n    if ((temp_8 | mantissa_1 << (0x20 - temp_3 & 0xff) | temp_6 << 1) == 0) {\n      temp_4 = temp_4 & ~(temp_6 >> 0x1f);\n    }\n    return CONCAT44(mantissa_2,temp_4) & 0x80000000ffffffff;\n  }\n  temp_5 = temp_4 - 0x14;\n  if (temp_5 == 0 || temp_5 < 0 != SCARRY4(temp_3,0xc)) {\n    temp_9 = mantissa_1 << (temp_6 + 0x20 & 0xff);\n    temp_3 = mantissa_1 >> (temp_4 & 0xff) | mantissa_2 << (temp_6 + 0x20 & 0xff);\n    temp_6 = temp_3 + -((int)temp_9 >> 0x1f);\n    if ((temp_8 | temp_9 << 1) == 0) {\n      temp_6 = temp_6 & ~(temp_9 >> 0x1f);\n    }\n    return CONCAT44((mantissa_2 & 0x80000000) +\n                    ((mantissa_2 & 0x7fffffff) >> (temp_4 & 0xff)) +\n                    (uint)CARRY4(temp_3,-((int)temp_9 >> 0x1f)),temp_6);\n  }\n  temp_4 = 0xc - temp_5;\n  temp_6 = mantissa_1 << (temp_4 & 0xff);\n  temp_4 = mantissa_1 >> (0x20 - temp_4 & 0xff) | mantissa_2 << (temp_4 & 0xff);\n  temp_3 = temp_4 + -((int)temp_6 >> 0x1f);\n  if ((temp_8 | temp_6 << 1) == 0) {\n    temp_3 = temp_3 & ~(temp_6 >> 0x1f);\n  }\n  return CONCAT44((mantissa_2 & 0x80000000) + (uint)CARRY4(temp_4,-((int)temp_6 >> 0x1f)),temp_3);\n}\n\n",
            "renaming": {
                "FUN_080004d0": "calculate_floating_point_080004d0",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "mantissa_1",
                "param_4": "mantissa_2",
                "uVar1": "temp_1",
                "lVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "iVar5": "temp_5",
                "uVar6": "temp_6",
                "unaff_r5": "temp_7",
                "uVar7": "temp_8",
                "uVar8": "temp_9",
                "bVar9": "flag_1",
                "bVar10": "flag_2",
                "bVar11": "flag_3",
                "uVar12": "result"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006d68",
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_080006ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080006ac": {
            "entrypoint": "0x080006ac",
            "current_name": "extract_bits_080006ac",
            "code": "\nulonglong extract_bits_080006ac(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool is_zero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  if (bit2 != bit5 && bit3 != bit5) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (bit2 == 0) {\n      bit4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit4 = input2;\n  if (((!is_zero) && ((bit2 != bit5 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit3 != bit5 || (input1 = input3, bit4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080006ac": "extract_bits_080006ac",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "in_r12": "bit5",
                "bVar4": "is_zero"
            },
            "calling": [
                "FUN_080004d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000724": {
            "entrypoint": "0x08000724",
            "current_name": "compute_double_08000724",
            "code": "\nulonglong compute_double_08000724(undefined4 input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint temp_1;\n  uint temp_2;\n  uint temp_3;\n  uint temp_4;\n  uint temp_5;\n  uint temp_6;\n  uint temp_7;\n  int temp_8;\n  uint temp_9;\n  uint temp_10;\n  uint temp_11;\n  uint temp_12;\n  uint temp_13;\n  uint temp_14;\n  bool flag_1;\n  bool flag_2;\n  bool flag_3;\n  undefined8 converted_value;\n  \n  converted_value = CONCAT44(input_2,input_1);\n  temp_14 = 0x7ff;\n  temp_7 = input_2 >> 0x14 & 0x7ff;\n  flag_1 = temp_7 == 0;\n  if (!flag_1) {\n    temp_10 = input_4 >> 0x14 & 0x7ff;\n    flag_1 = temp_10 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_7 == 0x7ff;\n  }\n  if (!flag_1) {\n    flag_1 = temp_10 == 0x7ff;\n  }\n  if (flag_1) {\n    converted_value = convert_to_double_08000892();\n  }\n  temp_9 = (uint)((ulonglong)converted_value >> 0x20);\n  temp_12 = (uint)converted_value;\n  temp_8 = temp_7 - temp_10;\n  if ((input_3 | input_4 << 0xc) == 0) {\n    temp_7 = (temp_9 ^ input_4) & 0x80000000 | temp_9 & 0xfffff;\n    flag_3 = SCARRY4(temp_8,temp_14 >> 1);\n    temp_9 = temp_8 + (temp_14 >> 1);\n    flag_1 = (int)temp_9 < 0;\n    flag_2 = temp_9 == 0;\n    if (!flag_2 && flag_1 == flag_3) {\n      flag_3 = SBORROW4(temp_14,temp_9);\n      flag_1 = (int)(temp_14 - temp_9) < 0;\n      flag_2 = temp_14 == temp_9;\n    }\n    if (!flag_2 && flag_1 == flag_3) {\n      temp_7 = temp_7 | temp_9 * 0x100000;\n    }\n    if (!flag_2 && flag_1 == flag_3) {\n      return CONCAT44(temp_7,temp_12);\n    }\n    temp_7 = temp_7 | 0x100000;\n    temp_14 = 0;\n    flag_2 = SBORROW4(temp_9,1);\n    temp_9 = temp_9 - 1;\n    flag_1 = temp_9 == 0;\n    temp_3 = temp_9;\n  }\n  else {\n    temp_3 = (input_4 << 0xc) >> 4 | 0x10000000 | input_3 >> 0x18;\n    temp_14 = input_3 << 8;\n    temp_11 = (temp_9 << 0xc) >> 4 | 0x10000000 | temp_12 >> 0x18;\n    temp_12 = temp_12 * 0x100;\n    temp_7 = (temp_9 ^ input_4) & 0x80000000;\n    flag_1 = temp_3 <= temp_11;\n    if (temp_11 == temp_3) {\n      flag_1 = temp_14 <= temp_12;\n    }\n    temp_8 = temp_8 + (uint)flag_1;\n    temp_9 = temp_8 + 0x3fd;\n    if (flag_1 == false) {\n      temp_3 = temp_3 >> 1;\n      temp_14 = (uint)((input_3 >> 0x18 & 1) != 0) << 0x1f | temp_14 >> 1;\n    }\n    temp_13 = temp_12 - temp_14;\n    temp_11 = (temp_11 - temp_3) - (uint)(temp_12 < temp_14);\n    temp_4 = temp_3 >> 1;\n    temp_1 = (uint)((temp_3 & 1) != 0) << 0x1f | temp_14 >> 1;\n    temp_12 = 0x100000;\n    temp_3 = 0x80000;\n    while( true ) {\n      flag_1 = temp_1 <= temp_13;\n      if (temp_4 < temp_11 || temp_11 - temp_4 < (uint)flag_1) {\n        temp_13 = temp_13 - temp_1;\n        temp_12 = temp_12 | temp_3;\n        temp_11 = (temp_11 - temp_4) - (uint)!flag_1;\n      }\n      temp_5 = temp_4 >> 1;\n      temp_1 = (uint)((temp_4 & 1) != 0) << 0x1f | temp_1 >> 1;\n      flag_2 = temp_1 <= temp_13;\n      flag_1 = temp_11 - temp_5 < (uint)flag_2;\n      temp_14 = temp_11;\n      if (temp_5 < temp_11 || flag_1) {\n        temp_13 = temp_13 - temp_1;\n        temp_14 = (temp_11 - temp_5) - (uint)!flag_2;\n      }\n      if (temp_5 < temp_11 || flag_1) {\n        temp_12 = temp_12 | temp_3 >> 1;\n      }\n      temp_11 = temp_4 >> 2;\n      temp_2 = (uint)((temp_5 & 1) != 0) << 0x1f | temp_1 >> 1;\n      flag_2 = temp_2 <= temp_13;\n      flag_1 = temp_14 - temp_11 < (uint)flag_2;\n      temp_5 = temp_14;\n      if (temp_11 < temp_14 || flag_1) {\n        temp_13 = temp_13 - temp_2;\n        temp_5 = (temp_14 - temp_11) - (uint)!flag_2;\n      }\n      if (temp_11 < temp_14 || flag_1) {\n        temp_12 = temp_12 | temp_3 >> 2;\n      }\n      temp_6 = temp_4 >> 3;\n      temp_1 = (uint)((temp_11 & 1) != 0) << 0x1f | temp_2 >> 1;\n      flag_2 = temp_1 <= temp_13;\n      flag_1 = temp_5 - temp_6 < (uint)flag_2;\n      temp_11 = temp_5;\n      if (temp_6 < temp_5 || flag_1) {\n        temp_13 = temp_13 - temp_1;\n        temp_11 = (temp_5 - temp_6) - (uint)!flag_2;\n      }\n      if (temp_6 < temp_5 || flag_1) {\n        temp_12 = temp_12 | temp_3 >> 3;\n      }\n      temp_14 = temp_11 | temp_13;\n      if (temp_14 == 0) break;\n      temp_11 = temp_11 << 4 | temp_13 >> 0x1c;\n      temp_13 = temp_13 << 4;\n      temp_4 = temp_4 & 0xfffffff8 | temp_1 >> 0x1d;\n      temp_1 = (temp_2 >> 1) << 3;\n      temp_3 = temp_3 >> 4;\n      if (temp_3 == 0) {\n        temp_6 = temp_4;\n        if ((temp_7 & 0x100000) != 0) goto LAB_08000842;\n        temp_7 = temp_7 | temp_12;\n        temp_12 = 0;\n        temp_3 = 0x80000000;\n      }\n    }\n    if ((temp_7 & 0x100000) == 0) {\n      temp_7 = temp_7 | temp_12;\n      temp_12 = 0;\n    }\nLAB_08000842:\n    flag_3 = 0xfc < temp_9;\n    flag_2 = SBORROW4(temp_9,0xfd);\n    temp_4 = temp_8 + 0x300;\n    flag_1 = temp_4 == 0;\n    temp_3 = temp_4;\n    if (flag_3 && !flag_1) {\n      flag_3 = 0x6ff < temp_4;\n      flag_2 = SBORROW4(temp_4,0x700);\n      temp_3 = temp_8 - 0x400;\n      flag_1 = temp_4 == 0x700;\n    }\n    if (!flag_3 || flag_1) {\n      flag_1 = temp_6 <= temp_11;\n      if (temp_11 == temp_6) {\n        flag_1 = temp_1 <= temp_13;\n      }\n      if (temp_11 == temp_6 && temp_13 == temp_1) {\n        flag_1 = (temp_12 & 1) != 0;\n      }\n      return CONCAT44(temp_7 + temp_9 * 0x100000 + (uint)CARRY4(temp_12,(uint)flag_1),temp_12 + flag_1);\n    }\n  }\n  if (!flag_1 && (int)temp_3 < 0 == flag_2) {\n    return (ulonglong)(temp_7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag_3 = SCARRY4(temp_9,0x36);\n  flag_1 = (int)(temp_9 + 0x36) < 0;\n  flag_2 = temp_9 == 0xffffffca;\n  if (flag_2 || flag_1 != flag_3) {\n    temp_12 = 0;\n  }\n  if (flag_2 || flag_1 != flag_3) {\n    temp_7 = temp_7 & 0x80000000;\n  }\n  if (flag_2 || flag_1 != flag_3) {\n    return CONCAT44(temp_7,temp_12);\n  }\n  temp_3 = -temp_9;\n  temp_11 = temp_3 - 0x20;\n  if (0x1f < (int)temp_3) {\n    temp_3 = temp_12 >> (temp_11 & 0xff) | temp_7 << (0x20 - temp_11 & 0xff);\n    temp_9 = (temp_7 >> (temp_11 & 0xff) & ~((temp_7 & 0x80000000) >> (temp_11 & 0xff))) -\n            ((int)temp_3 >> 0x1f);\n    if ((temp_14 | temp_12 << (0x20 - temp_11 & 0xff) | temp_3 << 1) == 0) {\n      temp_9 = temp_9 & ~(temp_3 >> 0x1f);\n    }\n    return CONCAT44(temp_7,temp_9) & 0x80000000ffffffff;\n  }\n  temp_8 = temp_3 - 0x14;\n  if (temp_8 != 0 && temp_8 < 0 == SCARRY4(temp_11,0xc)) {\n    temp_9 = 0xc - temp_8;\n    temp_3 = temp_12 << (temp_9 & 0xff);\n    temp_12 = temp_12 >> (0x20 - temp_9 & 0xff) | temp_7 << (temp_9 & 0xff);\n    temp_9 = temp_12 + -((int)temp_3 >> 0x1f);\n    if ((temp_14 | temp_3 << 1) == 0) {\n      temp_9 = temp_9 & ~(temp_3 >> 0x1f);\n    }\n    return CONCAT44((temp_7 & 0x80000000) + (uint)CARRY4(temp_12,-((int)temp_3 >> 0x1f)),temp_9);\n  }\n  temp_11 = temp_12 << (temp_9 + 0x20 & 0xff);\n  temp_12 = temp_12 >> (temp_3 & 0xff) | temp_7 << (temp_9 + 0x20 & 0xff);\n  temp_9 = temp_12 + -((int)temp_11 >> 0x1f);\n  if ((temp_14 | temp_11 << 1) == 0) {\n    temp_9 = temp_9 & ~(temp_11 >> 0x1f);\n  }\n  return CONCAT44((temp_7 & 0x80000000) +\n                  ((temp_7 & 0x7fffffff) >> (temp_3 & 0xff)) +\n                  (uint)CARRY4(temp_12,-((int)temp_11 >> 0x1f)),temp_9);\n}\n\n",
            "renaming": {
                "FUN_08000724": "compute_double_08000724",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "uVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "iVar8": "temp_8",
                "uVar9": "temp_9",
                "unaff_r5": "temp_10",
                "uVar10": "temp_11",
                "uVar11": "temp_12",
                "uVar12": "temp_13",
                "uVar13": "temp_14",
                "bVar14": "flag_1",
                "bVar15": "flag_2",
                "bVar16": "flag_3",
                "uVar17": "converted_value"
            },
            "calling": [
                "FUN_08003330",
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000892"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000892": {
            "entrypoint": "0x08000892",
            "current_name": "convert_to_double_08000892",
            "code": "\nulonglong convertToDouble_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint temp1;\n  uint temp2;\n  uint mask;\n  bool isZero;\n  \n  temp1 = mask & input4 >> 0x14;\n  temp2 = input2;\n  if (bit2 != mask || temp1 != mask) {\n    if (bit2 == mask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp2 = input4, temp1 != mask)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp1 == mask) {\n      input1 = input3;\n      temp2 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      isZero = (input1 | input2 << 1) == 0;\n      if (!isZero) {\n        isZero = (input3 | input4 << 1) == 0;\n      }\n      if (!isZero) {\n        if (bit2 == 0) {\n          temp2 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp2;\n          if (temp1 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp2 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp2 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(temp2,input1) | 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_08000892": "convert_to_double_08000892",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "unaff_r4": "bit2",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "mask",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_08000724"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000904": {
            "entrypoint": "0x08000904",
            "current_name": "check_equality_08000904",
            "code": "\nuint checkEquality_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool isZero;\n  bool isNegative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return 1;\n  }\n  isZero = (value1 | value2 << 1) == 0;\n  if (isZero) {\n    isZero = (value3 | value4 << 1) == 0;\n  }\n  if (!isZero) {\n    isZero = value2 == value4;\n  }\n  if (isZero) {\n    isZero = value1 == value3;\n  }\n  if (!isZero) {\n    result = value2 ^ value4;\n    isZero = result == 0;\n    if (-1 < (int)result) {\n      isZero = value2 == value4;\n    }\n    isNegative = -1 < (int)result && value4 <= value2;\n    if (isZero) {\n      isNegative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!isNegative) {\n      value4 = ~value4;\n    }\n    return value4 | 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08000904": "check_equality_08000904",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "uVar1": "result",
                "bVar2": "isZero",
                "bVar3": "isNegative"
            },
            "calling": [
                "FUN_08000990"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000980": {
            "entrypoint": "0x08000980",
            "current_name": "verify_and_return_value_08000980",
            "code": "\nvoid verify_and_return_value_08000980(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  verify_and_return_value_08000980_08000990(input_param_3,input_param_4,input_param_1,input_param_2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000980": "verify_and_return_value_08000980",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4"
            },
            "calling": [
                "FUN_080009f0"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000990": {
            "entrypoint": "0x08000990",
            "current_name": "verify_and_return_value_08000990",
            "code": "\nundefined4 verify_and_return_value_08000990(undefined4 input_value)\n\n{\n  check_equality_08000904();\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_08000990": "verify_and_return_value_08000990",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08000980",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_080009c8"
            ],
            "called": [
                "FUN_08000904"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009a0": {
            "entrypoint": "0x080009a0",
            "current_name": "check_verification_status_080009a0",
            "code": "\nbool check_verification_status_080009a0(void)\n\n{\n  char check_result;\n  \n  verify_and_return_value_08000990();\n  return check_result != '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009a0": "check_verification_status_080009a0",
                "in_ZR": "check_result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009b4": {
            "entrypoint": "0x080009b4",
            "current_name": "is_input_null_080009b4_080009b4",
            "code": "\nbool is_input_null_080009b4_080009b4(void)\n\n{\n  char input_char;\n  \n  verify_input_and_return_value();\n  return input_char == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009b4": "is_input_null_080009b4_080009b4",
                "in_CY": "input_char",
                "verify_and_return_value_08000990": "verify_input_and_return_value"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009c8": {
            "entrypoint": "0x080009c8",
            "current_name": "check_return_value_080009c8",
            "code": "\nbool check_return_value_080009c8(void)\n\n{\n  undefined is_zero;\n  undefined carry_flag;\n  \n  verify_and_return_value_08000990();\n  return !(bool)carry_flag || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_080009c8": "check_return_value_080009c8",
                "in_ZR": "is_zero",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000990"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080009f0": {
            "entrypoint": "0x080009f0",
            "current_name": "check_if_cy_is_null_080009f0",
            "code": "\nbool check_if_cy_is_null_080009f0(void)\n\n{\n  char cy_character;\n  \n  verify_and_return_previous_value();\n  return cy_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_080009f0": "check_if_cy_is_null_080009f0",
                "in_CY": "cy_character",
                "verify_and_return_value_08000980": "verify_and_return_previous_value"
            },
            "calling": [
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000980"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a04": {
            "entrypoint": "0x08000a04",
            "current_name": "check_parameters_validity_08000a04",
            "code": "\nundefined4 check_parameters_validity_08000a04(uint first_parameter,int second_parameter,uint third_parameter,int fourth_parameter)\n\n{\n  if ((((second_parameter << 1) >> 0x15 != -1) || ((first_parameter | second_parameter << 0xc) == 0)) &&\n     (((fourth_parameter << 1) >> 0x15 != -1 || ((third_parameter | fourth_parameter << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08000a04": "check_parameters_validity_08000a04",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "param_3": "third_parameter",
                "param_4": "fourth_parameter"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000a30": {
            "entrypoint": "0x08000a30",
            "current_name": "calculate_floating_point_08000a30",
            "code": "\nuint calculateFloatingPoint_08000a30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool isZero;\n  bool isLessThan;\n  \n  temp1 = input2 * 2;\n  isLessThan = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!isLessThan) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  isZero = result == 0;\n  if (!isLessThan && temp2 >= 0x200000) {\n    isZero = temp3 == 0x1fc00000;\n  }\n  if (((isLessThan || temp2 < 0x200000) || 0x1fc00000 < temp3) || isZero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != isSignedCarry4(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_08000a30",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "in_r12": "temp3",
                "bVar4": "isZero",
                "bVar5": "isLessThan",
                "SCARRY4": "isSignedCarry4"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "entrypoint": "0x08000ad8",
            "current_name": "perform_arithmetic_operation_08000ad8",
            "code": "\nuint performArithmeticOperation_08000ad8(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint result1;\n  uint result2;\n  uint maskedInput1;\n  uint adjustedShift;\n  uint difference;\n  bool isEqual;\n  \n  result1 = input2 ^ 0x80000000;\n  maskedInput1 = input1 << 1;\n  isEqual = maskedInput1 == 0;\n  if (!isEqual) {\n    param4 = input2 << 1;\n    isEqual = param4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = maskedInput1 == param4;\n  }\n  shiftedInput1 = (int)maskedInput1 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)param4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      maskedInput1 = result1;\n      if (shiftedInput1 == -1) {\n        maskedInput1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        result1 = maskedInput1;\n      }\n      isEqual = (maskedInput1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (result1 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = maskedInput1 == result1;\n      }\n      if (!isEqual) {\n        maskedInput1 = maskedInput1 | 0x400000;\n      }\n      return maskedInput1;\n    }\n    if (((input1 ^ result1) & 0x7fffffff) != 0) {\n      if (maskedInput1 == 0) {\n        input1 = result1;\n      }\n      return input1;\n    }\n    if (input1 != result1) {\n      return 0;\n    }\n    if ((maskedInput1 & 0xff000000) == 0) {\n      result1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result1 = result1 | 0x80000000;\n      }\n      return result1;\n    }\n    if (maskedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  maskedInput1 = maskedInput1 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - maskedInput1;\n  isEqual = difference != 0;\n  adjustedShift = maskedInput1;\n  if (isEqual && maskedInput1 <= param4) {\n    adjustedShift = maskedInput1 + difference;\n  }\n  if (isEqual && maskedInput1 <= param4) {\n    result1 = result1 ^ input1;\n  }\n  if (isEqual && maskedInput1 <= param4) {\n    input1 = input1 ^ result1;\n  }\n  if (isEqual && maskedInput1 <= param4) {\n    result1 = result1 ^ input1;\n  }\n  if (param4 < maskedInput1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  maskedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    maskedInput1 = -maskedInput1;\n  }\n  result2 = result1 & 0xffffff | 0x800000;\n  if ((result1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  if (adjustedShift == difference) {\n    result2 = result2 ^ 0x800000;\n    if (adjustedShift == 0) {\n      maskedInput1 = maskedInput1 ^ 0x800000;\n      adjustedShift = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  maskedInput1 = maskedInput1 + ((int)result2 >> (difference & 0xff));\n  result2 = result2 << (0x20 - difference & 0xff);\n  input1 = maskedInput1 & 0x80000000;\n  if ((int)maskedInput1 < 0) {\n    isEqual = result2 != 0;\n    result2 = -result2;\n    maskedInput1 = -maskedInput1 - (uint)isEqual;\n  }\n  if (maskedInput1 < 0x800000) {\n    result1 = result2 & 0x80000000;\n    result2 = result2 << 1;\n    maskedInput1 = maskedInput1 * 2 + (uint)(result1 != 0);\n    result1 = adjustedShift - 2;\n    if ((maskedInput1 & 0x800000) == 0) {\n      difference = LZCOUNT(maskedInput1) - 8;\n      maskedInput1 = maskedInput1 << (difference & 0xff);\n      if ((int)result1 < (int)difference) {\n        maskedInput1 = maskedInput1 >> (-(result1 - difference) & 0xff);\n      }\n      else {\n        maskedInput1 = maskedInput1 + (result1 - difference) * 0x800000;\n      }\n      return maskedInput1 | input1;\n    }\n  }\n  else {\n    result1 = adjustedShift - 1;\n    if (0xffffff < maskedInput1) {\n      result1 = maskedInput1 & 1;\n      maskedInput1 = maskedInput1 >> 1;\n      result2 = (uint)(result1 != 0) << 0x1f | result2 >> 1;\n      result1 = adjustedShift;\n      if (0xfd < adjustedShift) goto LAB_08000c12;\n    }\n  }\n  maskedInput1 = maskedInput1 + result1 * 0x800000 + (uint)(0x7fffffff < result2);\n  if (result2 == 0x80000000) {\n    maskedInput1 = maskedInput1 & 0xfffffffe;\n  }\n  return maskedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_08000ad8": "perform_arithmetic_operation_08000ad8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "maskedInput1",
                "uVar6": "adjustedShift",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002ee8",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000adc": {
            "entrypoint": "0x08000adc",
            "current_name": "calculate_floating_point_08000adc",
            "code": "\nuint calculateFloatingPoint_08000adc(uint float1,uint float2,undefined4 unknown,uint float3)\n\n{\n  int shiftAmount;\n  int shiftedFloat;\n  uint significand1;\n  uint significand2;\n  uint uSignificand;\n  uint difference;\n  bool isZero;\n  \n  significand2 = float1 << 1;\n  isZero = significand2 == 0;\n  if (!isZero) {\n    float3 = float2 << 1;\n    isZero = float3 == 0;\n  }\n  if (!isZero) {\n    isZero = significand2 == float3;\n  }\n  shiftAmount = (int)significand2 >> 0x18;\n  if (!isZero) {\n    isZero = shiftAmount == -1;\n  }\n  if (!isZero) {\n    isZero = (int)float3 >> 0x18 == -1;\n  }\n  if (isZero) {\n    shiftedFloat = (int)(float2 << 1) >> 0x18;\n    if (shiftAmount == -1 || shiftedFloat == -1) {\n      significand2 = float2;\n      if (shiftAmount == -1) {\n        significand2 = float1;\n      }\n      if (shiftAmount != -1 || shiftedFloat != -1) {\n        float2 = significand2;\n      }\n      isZero = (significand2 & 0x7fffff) == 0;\n      if (isZero) {\n        isZero = (float2 & 0x7fffff) == 0;\n      }\n      if (isZero) {\n        isZero = significand2 == float2;\n      }\n      if (!isZero) {\n        significand2 = significand2 | 0x400000;\n      }\n      return significand2;\n    }\n    if (((float1 ^ float2) & 0x7fffffff) != 0) {\n      if (significand2 == 0) {\n        float1 = float2;\n      }\n      return float1;\n    }\n    if (float1 != float2) {\n      return 0;\n    }\n    if ((significand2 & 0xff000000) == 0) {\n      significand2 = float1 << 1;\n      if ((float1 & 0x80000000) != 0) {\n        significand2 = significand2 | 0x80000000;\n      }\n      return significand2;\n    }\n    if (significand2 < 0xfe000000) {\n      return float1 + 0x800000;\n    }\n    float1 = float1 & 0x80000000;\nLAB_08000c12:\n    return float1 | 0x7f800000;\n  }\n  significand2 = significand2 >> 0x18;\n  float3 = float3 >> 0x18;\n  difference = float3 - significand2;\n  isZero = difference != 0;\n  uSignificand = significand2;\n  if (isZero && significand2 <= float3) {\n    uSignificand = significand2 + difference;\n  }\n  if (isZero && significand2 <= float3) {\n    float2 = float2 ^ float1;\n  }\n  if (isZero && significand2 <= float3) {\n    float1 = float1 ^ float2;\n  }\n  if (isZero && significand2 <= float3) {\n    float2 = float2 ^ float1;\n  }\n  if (float3 < significand2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return float1;\n  }\n  significand2 = float1 & 0xffffff | 0x800000;\n  if ((float1 & 0x80000000) != 0) {\n    significand2 = -significand2;\n  }\n  significand1 = float2 & 0xffffff | 0x800000;\n  if ((float2 & 0x80000000) != 0) {\n    significand1 = -significand1;\n  }\n  if (uSignificand == difference) {\n    significand1 = significand1 ^ 0x800000;\n    if (uSignificand == 0) {\n      significand2 = significand2 ^ 0x800000;\n      uSignificand = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  significand2 = significand2 + ((int)significand1 >> (difference & 0xff));\n  significand1 = significand1 << (0x20 - difference & 0xff);\n  float1 = significand2 & 0x80000000;\n  if ((int)significand2 < 0) {\n    isZero = significand1 != 0;\n    significand1 = -significand1;\n    significand2 = -significand2 - (uint)isZero;\n  }\n  if (significand2 < 0x800000) {\n    difference = significand1 & 0x80000000;\n    significand1 = significand1 << 1;\n    significand2 = significand2 * 2 + (uint)(difference != 0);\n    difference = uSignificand - 2;\n    if ((significand2 & 0x800000) == 0) {\n      uSignificand = leadingZeroCount(significand2) - 8;\n      significand2 = significand2 << (uSignificand & 0xff);\n      if ((int)difference < (int)uSignificand) {\n        significand2 = significand2 >> (-(difference - uSignificand) & 0xff);\n      }\n      else {\n        significand2 = significand2 + (difference - uSignificand) * 0x800000;\n      }\n      return significand2 | float1;\n    }\n  }\n  else {\n    difference = uSignificand - 1;\n    if (0xffffff < significand2) {\n      difference = significand2 & 1;\n      significand2 = significand2 >> 1;\n      significand1 = (uint)(difference != 0) << 0x1f | significand1 >> 1;\n      difference = uSignificand;\n      if (0xfd < uSignificand) goto LAB_08000c12;\n    }\n  }\n  significand2 = significand2 + difference * 0x800000 + (uint)(0x7fffffff < significand1);\n  if (significand1 == 0x80000000) {\n    significand2 = significand2 & 0xfffffffe;\n  }\n  return significand2 | float1;\n}\n\n",
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_08000adc",
                "param_1": "float1",
                "param_2": "float2",
                "param_3": "unknown",
                "param_4": "float3",
                "iVar1": "shiftAmount",
                "iVar2": "shiftedFloat",
                "uVar3": "significand1",
                "uVar4": "significand2",
                "uVar5": "uSignificand",
                "uVar6": "difference",
                "bVar7": "isZero",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_0800411c",
                "FUN_08002ee8",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "entrypoint": "0x08000c3c",
            "current_name": "calculate_hash_08000c3c",
            "code": "\nuint calculateHash_08000c3c(uint input_value)\n\n{\n  uint leadingZeroes;\n  uint shiftAmount;\n  int tempValue;\n  uint overflowValue;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(input_value);\n  shiftAmount = leadingZeroes - 8;\n  tempValue = shiftAmount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroes) {\n    overflowValue = 0 << (shiftAmount & 0xff);\n    leadingZeroes = tempValue + (input_value << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < overflowValue);\n    if (overflowValue == 0x80000000) {\n      leadingZeroes = leadingZeroes & 0xfffffffe;\n    }\n    return leadingZeroes;\n  }\n  shiftAmount = input_value << leadingZeroes + 0x18;\n  leadingZeroes = tempValue + ((input_value >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    leadingZeroes = leadingZeroes & ~(shiftAmount >> 0x1f);\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_08000c3c": "calculate_hash_08000c3c",
                "param_1": "input_value",
                "uVar1": "leadingZeroes",
                "uVar2": "shiftAmount",
                "iVar3": "tempValue",
                "uVar4": "overflowValue"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000c44": {
            "entrypoint": "0x08000c44",
            "current_name": "calculate_u_var3_08000c44",
            "code": "\nuint calculate_uVar3_08000c44(uint input_number)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint result;\n  int intermediate_result;\n  \n  result = input_number & 0x80000000;\n  if ((int)result < 0) {\n    input_number = -input_number;\n  }\n  if (input_number == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_number);\n  shift_amount = leading_zeros - 8;\n  intermediate_result = ((result | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    result = intermediate_result + (input_number << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      result = result & 0xfffffffe;\n    }\n    return result;\n  }\n  shift_amount = input_number << leading_zeros + 0x18;\n  result = intermediate_result + ((input_number >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    result = result & ~(shift_amount >> 0x1f);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08000c44": "calculate_u_var3_08000c44",
                "param_1": "input_number",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "iVar4": "intermediate_result"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_0800483c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000cec": {
            "entrypoint": "0x08000cec",
            "current_name": "calculate_floating_point_08000cec",
            "code": "\nuint calculateFloatingPoint_08000cec(uint value1,uint value2,undefined4 param3,uint param4)\n\n{\n  longlong temp1;\n  uint result;\n  uint sign1;\n  int sum1;\n  int sum2;\n  uint temp2;\n  int sum3;\n  uint sign2;\n  bool flag1;\n  bool flag2;\n  \n  sign1 = value1 >> 0x17 & 0xff;\n  flag1 = sign1 == 0;\n  if (!flag1) {\n    param4 = value2 >> 0x17 & 0xff;\n    flag1 = param4 == 0;\n  }\n  if (!flag1) {\n    flag1 = sign1 == 0xff;\n  }\n  if (!flag1) {\n    flag1 = param4 == 0xff;\n  }\n  if (flag1) {\n    param4 = value2 >> 0x17 & 0xff;\n    if (sign1 == 0xff || param4 == 0xff) {\n      flag1 = value1 == 0 || value1 == 0x80000000;\n      result = value2;\n      if (value1 != 0 && value1 != 0x80000000) {\n        flag1 = value2 == 0;\n        result = value1;\n      }\n      if (!flag1) {\n        flag1 = value2 == 0x80000000;\n      }\n      sign2 = result;\n      if (((flag1) || ((sign1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (sign2 = value2, (value2 & 0x7fffff) != 0)))) {\n        return sign2 | 0x7fc00000;\n      }\n      result = result ^ value2;\n      goto LAB_08000e3c;\n    }\n    flag1 = (value1 & 0x7fffffff) == 0;\n    if (!flag1) {\n      flag1 = (value2 & 0x7fffffff) == 0;\n    }\n    if (flag1) {\n      return (value1 ^ value2) & 0x80000000;\n    }\n    flag1 = sign1 == 0;\n    result = value1 & 0x80000000;\n    while( true ) {\n      if (flag1) {\n        value1 = value1 << 1;\n        flag1 = (value1 & 0x800000) == 0;\n      }\n      if (!flag1) break;\n      sign1 = sign1 - 1;\n    }\n    value1 = value1 | result;\n    flag1 = param4 == 0;\n    result = value2 & 0x80000000;\n    while( true ) {\n      if (flag1) {\n        value2 = value2 << 1;\n        flag1 = (value2 & 0x800000) == 0;\n      }\n      if (!flag1) break;\n      param4 = param4 - 1;\n    }\n    value2 = value2 | result;\n  }\n  sum1 = sign1 + param4;\n  sign2 = value1 ^ value2;\n  sign1 = value1 << 9;\n  flag1 = sign1 == 0;\n  if (!flag1) {\n    value2 = value2 << 9;\n    flag1 = value2 == 0;\n  }\n  if (flag1) {\n    if (sign1 == 0) {\n      value2 = value2 << 9;\n    }\n    result = sign2 & 0x80000000 | value1 & 0x7fffff | value2 >> 9;\n    flag2 = SBORROW4(sum1,0x7f);\n    sum2 = sum1 + -0x7f;\n    flag1 = sum2 == 0;\n    sum3 = sum2;\n    if (!flag1 && 0x7e < sum1) {\n      flag2 = SBORROW4(0xff,sum2);\n      sum3 = 0xff - sum2;\n      flag1 = sum2 == 0xff;\n    }\n    if (!flag1 && sum3 < 0 == flag2) {\n      result = result | sum2 * 0x800000;\n    }\n    if (!flag1 && sum3 < 0 == flag2) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp2 = 0;\n    flag2 = SBORROW4(sum2,1);\n    sign2 = sum1 - 0x80;\n    flag1 = sign2 == 0;\n    sign1 = sign2;\n  }\n  else {\n    temp1 = (ulonglong)(sign1 >> 5 | 0x8000000) * (ulonglong)(value2 >> 5 | 0x8000000);\n    temp2 = (uint)temp1;\n    result = (uint)((ulonglong)temp1 >> 0x20);\n    flag1 = result < 0x800000;\n    if (flag1) {\n      result = result << 1;\n    }\n    if (flag1) {\n      result = result | temp2 >> 0x1f;\n      temp2 = temp2 << 1;\n    }\n    result = sign2 & 0x80000000 | result;\n    sign2 = (sum1 + -0x7f) - (uint)flag1;\n    flag2 = SBORROW4(sign2,0xfd);\n    flag1 = sign2 == 0xfd;\n    sign1 = sign2 - 0xfd;\n    if (sign2 < 0xfe) {\n      result = result + sign2 * 0x800000 + (uint)(0x7fffffff < temp2);\n      if (temp2 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (flag1 || (int)sign1 < 0 != flag2) {\n    flag1 = (int)(sign2 + 0x19) < 0;\n    if (sign2 == 0xffffffe7 || flag1 != SCARRY4(sign2,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (sign2 != 0xffffffe7 && flag1 == SCARRY4(sign2,0x19)) {\n      sign1 = (result << 1) >> (-sign2 & 0xff);\n      sign2 = result << (sign2 + 0x20 & 0xff);\n      sign1 = ((uint)((result & 0x80000000) != 0) << 0x1f | sign1 >> 1) + (uint)((byte)sign1 & 1);\n      if ((temp2 | sign2 << 1) == 0) {\n        sign1 = sign1 & ~(sign2 >> 0x1f);\n      }\n      return sign1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_08000cec",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "temp1",
                "uVar2": "result",
                "uVar3": "sign1",
                "iVar4": "sum1",
                "iVar5": "sum2",
                "uVar6": "temp2",
                "iVar7": "sum3",
                "uVar8": "sign2",
                "bVar9": "flag1",
                "bVar10": "flag2"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08003330",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08004a30",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_08002ec0",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000e54": {
            "entrypoint": "0x08000e54",
            "current_name": "calculate_floating_point_08000e54",
            "code": "\nuint calculateFloatingPoint_08000e54(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint quotient;\n  uint divisor;\n  int difference;\n  uint shift;\n  int sum;\n  uint result;\n  bool isZero;\n  bool isNegative;\n  bool carry;\n  \n  divisor = input1 >> 0x17 & 0xff;\n  isZero = divisor == 0;\n  if (!isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    isZero = input4 == 0;\n  }\n  if (!isZero) {\n    isZero = divisor == 0xff;\n  }\n  if (!isZero) {\n    isZero = input4 == 0xff;\n  }\n  if (isZero) {\n    input4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (divisor == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input4 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      isZero = (input1 & 0x7fffffff) == 0;\n      if (!isZero) {\n        isZero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!isZero) {\n        isZero = divisor == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input1 = input1 << 1;\n            isZero = (input1 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          divisor = divisor - 1;\n        }\n        input1 = input1 | result;\n        isZero = input4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (isZero) {\n            input2 = input2 << 1;\n            isZero = (input2 & 0x800000) == 0;\n          }\n          if (!isZero) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    difference = divisor - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      carry = signedCarry(difference,0x7f);\n      sum = difference + 0x7f;\n      isZero = sum < 0;\n      isNegative = sum == 0;\n      if (!isNegative && isZero == carry) {\n        carry = signedBorrow(0xff,sum);\n        isZero = 0xff - sum < 0;\n        isNegative = sum == 0xff;\n      }\n      if (!isNegative && isZero == carry) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!isNegative && isZero == carry) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      divisor = 0;\n      isNegative = signedBorrow(sum,1);\n      shift = difference + 0x7e;\n      isZero = shift == 0;\n      result = shift;\n    }\n    else {\n      quotient = (input2 << 9) >> 4 | 0x10000000;\n      divisor = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      isZero = quotient <= divisor;\n      if (!isZero) {\n        divisor = divisor << 1;\n      }\n      shift = difference + 0x7d + (uint)isZero;\n      result = 0x800000;\n      do {\n        if (quotient <= divisor) {\n          divisor = divisor - quotient;\n          input1 = input1 | result;\n        }\n        isZero = quotient >> 1 <= divisor;\n        if (isZero) {\n          divisor = divisor - (quotient >> 1);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 1;\n        }\n        isZero = quotient >> 2 <= divisor;\n        if (isZero) {\n          divisor = divisor - (quotient >> 2);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 2;\n        }\n        isZero = quotient >> 3 <= divisor;\n        if (isZero) {\n          divisor = divisor - (quotient >> 3);\n        }\n        if (isZero) {\n          input1 = input1 | result >> 3;\n        }\n        divisor = divisor * 0x10;\n        isZero = divisor == 0;\n        if (!isZero) {\n          result = result >> 4;\n          isZero = result == 0;\n        }\n      } while (!isZero);\n      isNegative = signedBorrow(shift,0xfd);\n      isZero = shift == 0xfd;\n      result = shift - 0xfd;\n      if (shift < 0xfe) {\n        input1 = input1 + shift * 0x800000 + (uint)(quotient <= divisor);\n        if (divisor - quotient == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (isZero || (int)result < 0 != isNegative) {\n      isZero = (int)(shift + 0x19) < 0;\n      if (shift == 0xffffffe7 || isZero != signedCarry(shift,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (shift == 0xffffffe7 || isZero != signedCarry(shift,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-shift & 0xff);\n      shift = input1 << (shift + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((divisor | shift << 1) == 0) {\n        result = result & ~(shift >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_08000e54": "calculate_floating_point_08000e54",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "quotient",
                "uVar2": "divisor",
                "iVar3": "difference",
                "uVar4": "shift",
                "iVar5": "sum",
                "uVar6": "result",
                "bVar7": "isZero",
                "bVar8": "isNegative",
                "bVar9": "carry",
                "SCARRY4": "signedCarry",
                "SBORROW4": "signedBorrow"
            },
            "calling": [
                "FUN_08003330",
                "FUN_0800411c",
                "FUN_0800483c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "entrypoint": "0x08000f9c",
            "current_name": "calculate_result_08000f9c",
            "code": "\nuint calculate_result_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint bitwise_combined;\n  bool is_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  bitwise_combined = double_input_1 | input_2 & 0x7fffffff;\n  is_zero = bitwise_combined == 0;\n  if (!is_zero) {\n    bitwise_combined = input_1 ^ input_2;\n    is_zero = bitwise_combined == 0;\n  }\n  is_negative = -1 < (int)bitwise_combined;\n  if (is_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "renaming": {
                "FUN_08000f9c": "calculate_result_08000f9c",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "bitwise_combined",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "return": "result"
            },
            "calling": [
                "FUN_08001004"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "entrypoint": "0x08000ffc",
            "current_name": "concatenate_and_return_values_08000ffc",
            "code": "\nvoid concatenate_and_return_values_08000ffc(undefined4 input_value_1,undefined4 input_value_2)\n\n{\n  concatenate_and_return_values_08000ffc_08001004(input_value_2,input_value_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08000ffc": "concatenate_and_return_values_08000ffc",
                "param_1": "input_value_1",
                "param_2": "input_value_2"
            },
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001004": {
            "entrypoint": "0x08001004",
            "current_name": "concatenate_and_return_values_08001004",
            "code": "\nundefined8 concatenate_and_return_values_08001004(undefined4 input_value_1,undefined4 input_value_2)\n\n{\n  calculate_result_08000f9c();\n  return CONCAT44(input_value_2,input_value_1);\n}\n\n",
            "renaming": {
                "FUN_08001004": "concatenate_and_return_values_08001004",
                "param_1": "input_value_1",
                "param_2": "input_value_2"
            },
            "calling": [
                "FUN_08000ffc",
                "FUN_08001014",
                "FUN_08001028"
            ],
            "called": [
                "FUN_08000f9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001014": {
            "entrypoint": "0x08001014",
            "current_name": "check_if_concatenated_values_exist_08001014",
            "code": "\nbool check_if_concatenated_values_exist_08001014(void)\n\n{\n  char is_not_null;\n  \n  join_and_return_values();\n  return is_not_null != '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001014": "check_if_concatenated_values_exist_08001014",
                "in_ZR": "is_not_null",
                "concatenate_and_return_values_08001004": "join_and_return_values"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001028": {
            "entrypoint": "0x08001028",
            "current_name": "check_if_concatenation_empty_08001028",
            "code": "\nbool check_if_concatenation_empty_08001028(void)\n\n{\n  char input_character;\n  \n  concatenate_and_return_values_08001004();\n  return input_character == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001028": "check_if_concatenation_empty_08001028",
                "in_CY": "input_character"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002ee8",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08001004"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001050": {
            "entrypoint": "0x08001050",
            "current_name": "check_for_zero_concatenation_result_08001050",
            "code": "\nbool check_for_zero_concatenation_result_08001050(void)\n\n{\n  undefined zero_result;\n  undefined carry;\n  \n  concatenate_and_return_values();\n  return !(bool)carry || (bool)zero_result;\n}\n\n",
            "renaming": {
                "FUN_08001050": "check_for_zero_concatenation_result_08001050",
                "in_ZR": "zero_result",
                "in_CY": "carry",
                "concatenate_and_return_values_08000ffc": "concatenate_and_return_values"
            },
            "calling": [
                "FUN_08002ee8"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001064": {
            "entrypoint": "0x08001064",
            "current_name": "is_string_empty_08001064",
            "code": "\nbool isStringEmpty_08001064(void)\n\n{\n  char inputChar;\n  \n  concatenate_and_return_values_08000ffc();\n  return inputChar == '\\0';\n}\n\n",
            "renaming": {
                "FUN_08001064": "is_string_empty_08001064",
                "in_CY": "inputChar"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "called": [
                "FUN_08000ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001078": {
            "entrypoint": "0x08001078",
            "current_name": "extract_value_from_param_08001078",
            "code": "\nuint extract_value_from_param_08001078(uint input_param)\n\n{\n  uint shifted_param;\n  uint difference;\n  \n  if (input_param << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_param = (input_param << 1) >> 0x18;\n  difference = 0x9e - shifted_param;\n  if (shifted_param < 0x9f && difference != 0) {\n    shifted_param = (input_param << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_param & 0x80000000) != 0) {\n      shifted_param = -shifted_param;\n    }\n    return shifted_param;\n  }\n  if ((difference == 0xffffff9f) && ((input_param & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_param = input_param & 0x80000000;\n  if (input_param == 0) {\n    input_param = 0x7fffffff;\n  }\n  return input_param;\n}\n\n",
            "renaming": {
                "FUN_08001078": "extract_value_from_param_08001078",
                "param_1": "input_param",
                "uVar1": "shifted_param",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_0800411c",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080010c4": {
            "entrypoint": "0x080010c4",
            "current_name": "decode_unsigned_integer_080010c4",
            "code": "\nuint decodeUnsignedInteger_080010c4(uint inputValue)\n\n{\n  uint shiftAmount;\n  \n  if (((inputValue & 0x80000000) != 0) || (inputValue << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shiftAmount = 0x9e - ((inputValue << 1) >> 0x18);\n  if (-1 < (int)shiftAmount) {\n    return (inputValue << 8 | 0x80000000) >> (shiftAmount & 0xff);\n  }\n  if ((shiftAmount == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080010c4": "decode_unsigned_integer_080010c4",
                "param_1": "inputValue",
                "uVar1": "shiftAmount"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001104": {
            "entrypoint": "0x08001104",
            "current_name": "initialize_and_apply_bit_manipulation_08001104",
            "code": "\nundefined4 initializeAndApplyBitManipulation_08001104(undefined4 inputValue)\n\n{\n  uint dataValue;\n  \n  dataValue = getDataValue();\n  initializeValues(dataValue / 1000);\n  applyBitManipulation(0xffffffff,inputValue,0);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001104": "initialize_and_apply_bit_manipulation_08001104",
                "param_1": "inputValue",
                "uVar1": "dataValue",
                "get_data_value_08002214": "getDataValue",
                "set_initial_values_08001214": "initializeValues",
                "apply_bit_manipulation_08001194": "applyBitManipulation"
            },
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001128": {
            "entrypoint": "0x08001128",
            "current_name": "initialize_memory_08001128",
            "code": "\n\n\nundefined4 initializeMemory_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  setMemoryConfiguration(3);\n  applyBitManipulation(0);\n  configureMemory();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001128": "initialize_memory_08001128",
                "set_memory_configuration_08001170": "setMemoryConfiguration",
                "initialize_and_apply_bit_manipulation_08001104": "applyBitManipulation",
                "configure_memory_08004ccc": "configureMemory"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001104",
                "FUN_08001170",
                "FUN_08004ccc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800114c": {
            "entrypoint": "0x0800114c",
            "current_name": "increment_counter_0800114c",
            "code": "\nvoid incrementCounter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800114c": "increment_counter_0800114c"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800115c": {
            "entrypoint": "0x0800115c",
            "current_name": "get_data_value_0800115c",
            "code": "\nundefined4 get_data_value_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "FUN_0800115c": "get_data_value_0800115c"
            },
            "calling": [
                "FUN_080016f4",
                "thunk_FUN_0800115c",
                "FUN_08001b58",
                "FUN_08001938",
                "FUN_0800209c",
                "FUN_08001460",
                "FUN_080015e8",
                "FUN_08001530",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "FUN_080014e2",
                "FUN_08004c18"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001168": {
            "entrypoint": "0x08001168",
            "current_name": "FUNC_08001168",
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001170": {
            "entrypoint": "0x08001170",
            "current_name": "set_memory_configuration_08001170",
            "code": "\n\n\nvoid setMemoryConfiguration_08001170(uint value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (value & 7) << 8;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001170": "set_memory_configuration_08001170",
                "param_1": "value"
            },
            "calling": [
                "FUN_08001128",
                "FUN_08004ccc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001194": {
            "entrypoint": "0x08001194",
            "current_name": "apply_bit_manipulation_08001194",
            "code": "\n\n\nvoid applyBitManipulation_08001194(uint input1,uint input2,uint input3)\n\n{\n  undefined shiftedValue;\n  uint shiftAmount;\n  uint mask;\n  uint maskThreshold;\n  \n  mask = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shiftAmount = 7 - mask;\n  maskThreshold = mask + 4;\n  if (3 < shiftAmount) {\n    shiftAmount = 4;\n  }\n  if (maskThreshold < 7) {\n    mask = 0;\n  }\n  shiftAmount = (1 << (shiftAmount & 0xff)) - 1;\n  if (6 < maskThreshold) {\n    mask = mask - 3;\n  }\n  shiftedValue = (undefined)\n          ((input3 & (1 << (mask & 0xff)) - 1U | (input2 & shiftAmount) << (mask & 0xff)) << 4);\n  if (-1 < (int)input1) {\n    mask = input1 + 0xe000e100;\n  }\n  else {\n    shiftAmount = 0xe000ed14;\n    mask = input1 & 0xf;\n  }\n  if (-1 < (int)input1) {\n    *(undefined *)(mask + 0x300) = shiftedValue;\n  }\n  else {\n    *(undefined *)(shiftAmount + mask) = shiftedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001194": "apply_bit_manipulation_08001194",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount",
                "uVar3": "mask",
                "uVar4": "maskThreshold"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004e7c",
                "FUN_08004ccc",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080011fc": {
            "entrypoint": "0x080011fc",
            "current_name": "set_bit_in_array_080011fc",
            "code": "\nvoid setBitInArray_080011fc(uint bitIndex)\n\n{\n  *(int *)((bitIndex >> 5) * 4 + -0x1fff1f00) = 1 << (bitIndex & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bitIndex"
            },
            "calling": [
                "FUN_08004e7c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001214": {
            "entrypoint": "0x08001214",
            "current_name": "set_initial_values_08001214",
            "code": "\n\n\nundefined4 set_initial_values_08001214(int input_value)\n\n{\n  if (input_value - 1U < 0x1000000) {\n    _DAT_e000e014 = input_value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001214": "set_initial_values_08001214",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001240": {
            "entrypoint": "0x08001240",
            "current_name": "set_flag_value_08001240",
            "code": "\n\n\nvoid setFlagValue_08001240(int flagValue)\n\n{\n  if (flagValue == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001240": "set_flag_value_08001240",
                "param_1": "flagValue"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001258": {
            "entrypoint": "0x08001258",
            "current_name": "FUNC_08001258",
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08001264": {
            "entrypoint": "0x08001264",
            "current_name": "update_bits_08001264",
            "code": "\n\n\nvoid updateBits_08001264(uint *bitsToBeUpdated,uint *bitsToUpdate)\n\n{\n  uint updatedBit;\n  uint bitMask;\n  uint bitAction;\n  int index;\n  uint bitIndex;\n  uint bitFlag;\n  uint specialBit;\n  uint *registerPointer;\n  int shiftAmount;\n  \n  updatedBit = 0;\n  bitIndex = 0;\n  do {\n    bitFlag = 1 << (bitIndex & 0xff);\n    bitMask = bitFlag & *bitsToUpdate;\n    if (bitFlag == bitMask) {\n      bitAction = bitsToUpdate[1];\n      if (bitAction == 0x12) {\n        updatedBit = bitsToUpdate[3] + 0xc;\n      }\n      else if (bitAction < 0x13) {\n        if (bitAction == 2) {\n          updatedBit = bitsToUpdate[3] + 8;\n        }\n        else if (bitAction < 3) {\n          if (bitAction == 0) goto LAB_080013be;\n          if (bitAction == 1) {\n            updatedBit = bitsToUpdate[3];\n          }\n        }\n        else if (bitAction == 3) {\n          updatedBit = 0;\n        }\n        else if (bitAction == 0x11) {\n          updatedBit = bitsToUpdate[3] + 4;\n        }\n      }\n      else {\n        if (bitAction != 0x10210000) {\n          if (bitAction < 0x10210001) {\n            if (bitAction != 0x10110000) {\n              specialBit = 0x10120000;\nLAB_080013b8:\n              if (bitAction != specialBit) goto LAB_080012a8;\n            }\n          }\n          else if ((bitAction != 0x10310000) && (bitAction != 0x10320000)) {\n            specialBit = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        updatedBit = bitsToUpdate[2];\n        if (updatedBit == 0) {\n          updatedBit = 4;\n        }\n        else {\n          if (updatedBit == 1) {\n            bitsToBeUpdated[4] = bitFlag;\n          }\n          if (updatedBit != 1) {\n            bitsToBeUpdated[5] = bitFlag;\n          }\n          updatedBit = 8;\n        }\n      }\nLAB_080012a8:\n      if (bitMask < 0x100) {\n        bitFlag = *bitsToBeUpdated;\n        bitAction = bitIndex << 2;\n        registerPointer = bitsToBeUpdated;\n      }\n      else {\n        bitFlag = bitsToBeUpdated[1];\n        bitAction = (bitIndex + 0x3ffffff8) * 4;\n      }\n      if (0xff < bitMask) {\n        registerPointer = bitsToBeUpdated + 1;\n      }\n      *registerPointer = bitFlag & ~(0xf << (bitAction & 0xff)) | updatedBit << (bitAction & 0xff);\n      registerPointer = (uint *)bitsToUpdate[1];\n      if (((uint)registerPointer & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shiftAmount = (bitIndex & 3) << 2;\n        if (bitsToBeUpdated == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (bitsToBeUpdated == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (bitsToBeUpdated == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (bitsToBeUpdated == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) =\n             index << shiftAmount | *(uint *)((bitIndex & 0xfffffffc) + 0x40010008) & ~(0xf << shiftAmount);\n        if (((uint)registerPointer & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bitMask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bitMask;\n        }\n        if (((uint)registerPointer & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bitMask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bitMask;\n        }\n        if (((uint)registerPointer & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bitMask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bitMask;\n        }\n        if (((uint)registerPointer & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bitMask;\n        }\n        else {\n          _DAT_4001040c = bitMask | _DAT_4001040c;\n        }\n      }\n    }\n    bitIndex = bitIndex + 1;\n    if (bitIndex == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001264": "update_bits_08001264",
                "param_1": "bitsToBeUpdated",
                "param_2": "bitsToUpdate",
                "uVar1": "updatedBit",
                "uVar2": "bitMask",
                "uVar3": "bitAction",
                "iVar4": "index",
                "uVar5": "bitIndex",
                "uVar6": "bitFlag",
                "uVar7": "specialBit",
                "unaff_r10": "registerPointer",
                "iVar8": "shiftAmount"
            },
            "calling": [
                "FUN_08004e7c",
                "FUN_08004d48",
                "FUN_08004e14",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001424": {
            "entrypoint": "0x08001424",
            "current_name": "set_param_value_08001424",
            "code": "\nvoid setParamValue_08001424(int objectAddress,int value,int isShifted)\n\n{\n  if (isShifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(objectAddress + 0x10) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "objectAddress",
                "param_2": "value",
                "param_3": "isShifted"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003f3c",
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800142e": {
            "entrypoint": "0x0800142e",
            "current_name": "apply_xor_0800142e",
            "code": "\nvoid applyXOR_0800142e(int destination,uint valueToXOR)\n\n{\n  *(uint *)(destination + 0xc) = valueToXOR ^ *(uint *)(destination + 0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800142e": "apply_xor_0800142e",
                "param_1": "destination",
                "param_2": "valueToXOR"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001436": {
            "entrypoint": "0x08001436",
            "current_name": "check_flag_status_08001436",
            "code": "\nundefined4 checkFlagStatus_08001436(int *flagPointer)\n\n{\n  int flagValue;\n  \n  flagValue = *flagPointer;\n  if ((*(uint *)(flagValue + 0x14) & 0x400) != 0) {\n    *(uint *)(flagValue + 0x14) = *(uint *)(flagValue + 0x14) & 0xfffffbff;\n    errorCode = 4;\n    *(undefined *)((int)flagPointer + 0x35) = 0x20;\n    *(undefined *)(flagPointer + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08001436": "check_flag_status_08001436",
                "param_1": "flagPointer",
                "iVar1": "flagValue",
                "param_1[0xe]": "errorCode"
            },
            "calling": [
                "FUN_080014e2"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001460": {
            "entrypoint": "0x08001460",
            "current_name": "check_data_validity_08001460",
            "code": "\nundefined4 check_data_validity_08001460(uint **data_array_ptr,uint flag,uint time_limit)\n\n{\n  int initial_data_value;\n  int current_data_value;\n  uint data_value;\n  uint *current_data_ptr;\n  \n  initial_data_value = get_data_value_0800115c();\n  do {\n    current_data_ptr = *data_array_ptr;\n    if ((flag << 8) >> 0x18 == 1) {\n      data_value = current_data_ptr[5];\n    }\n    else {\n      data_value = current_data_ptr[6];\n    }\n    if ((flag & 0xffff & ~data_value) == 0) {\n      return 0;\n    }\n    if ((int)(current_data_ptr[5] << 0x15) < 0) {\n      *current_data_ptr = *current_data_ptr | 0x200;\n      current_data_ptr[5] = current_data_ptr[5] & 0xfffffbff;\n      data_array_ptr[0xe] = (uint *)0x4;\n      *(undefined *)((int)data_array_ptr + 0x35) = 0x20;\n      *(undefined *)(data_array_ptr + 0xd) = 0;\n      return 1;\n    }\n  } while ((time_limit == 0xffffffff) ||\n          ((time_limit != 0 && (current_data_value = get_data_value_0800115c(), (uint)(current_data_value - initial_data_value) <= time_limit))));\n  *(undefined *)((int)data_array_ptr + 0x35) = 0x20;\n  *(undefined *)(data_array_ptr + 0xd) = 0;\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001460": "check_data_validity_08001460",
                "param_1": "data_array_ptr",
                "param_2": "flag",
                "param_3": "time_limit",
                "iVar1": "initial_data_value",
                "iVar2": "current_data_value",
                "uVar3": "data_value",
                "puVar4": "current_data_ptr"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080014e2": {
            "entrypoint": "0x080014e2",
            "current_name": "check_flag_and_update_080014e2",
            "code": "\nundefined4 check_flag_and_update_080014e2(int *data_array,uint flag_value)\n\n{\n  int data_value_1;\n  int flag_status;\n  \n  data_value_1 = get_data_value_0800115c();\n  while( true ) {\n    if (*(int *)(*data_array + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    flag_status = check_flag_status_08001436(data_array);\n    if (flag_status != 0) break;\n    if ((flag_value != 0xffffffff) &&\n       ((flag_value == 0 || (flag_status = get_data_value_0800115c(), flag_value < (uint)(flag_status - data_value_1))))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080014e2": "check_flag_and_update_080014e2",
                "param_1": "data_array",
                "param_2": "flag_value",
                "iVar1": "data_value_1",
                "iVar2": "flag_status"
            },
            "calling": [
                "FUN_080015e8",
                "FUN_08001530",
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001436"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001530": {
            "entrypoint": "0x08001530",
            "current_name": "process_data_08001530",
            "code": "\nundefined4 processData_08001530(uint **inputArray,uint value1,uint value2,int flag,uint dataSize)\n\n{\n  int dataStart;\n  int dataEnd;\n  uint *currentElement;\n  uint **inputArrayPtr;\n  uint value1Copy;\n  uint value2Copy;\n  \n  **inputArray = **inputArray | 0x100;\n  inputArrayPtr = inputArray;\n  value1Copy = value1;\n  value2Copy = value2;\n  dataStart = get_data_value_0800115c();\n  do {\n    currentElement = *inputArray;\n    do {\n      if ((int)(currentElement[5] << 0x1f) < 0) {\n        currentElement[4] = value1 & 0xfe;\n        dataStart = check_data_validity_08001460(inputArray,0x10002,dataSize,currentElement,inputArrayPtr,value1Copy,value2Copy);\n        if (dataStart == 0) {\n          dataStart = check_flag_and_update_080014e2(inputArray,dataSize,(*inputArray)[5],(*inputArray)[6]);\n          if (dataStart == 0) {\n            currentElement = *inputArray;\n            if (flag == 1) {\nLAB_080015ca:\n              currentElement[4] = value2 & 0xff;\n              return 0;\n            }\n            currentElement[4] = value2 >> 8;\n            dataStart = check_flag_and_update_080014e2(inputArray,dataSize);\n            if (dataStart == 0) {\n              currentElement = *inputArray;\n              goto LAB_080015ca;\n            }\n          }\n          if (inputArray[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **inputArray = **inputArray | 0x200;\n        }\n        else if (inputArray[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (dataSize == 0xffffffff);\n    if ((dataSize == 0) || (dataEnd = get_data_value_0800115c(), dataSize < (uint)(dataEnd - dataStart))) {\n      *(undefined *)((int)inputArray + 0x35) = 0x20;\n      *(undefined *)(inputArray + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08001530": "process_data_08001530",
                "param_1": "inputArray",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "dataSize",
                "iVar1": "dataStart",
                "iVar2": "dataEnd",
                "puVar3": "currentElement",
                "ppuVar4": "inputArrayPtr",
                "uVar5": "value1Copy",
                "uVar6": "value2Copy"
            },
            "calling": [
                "FUN_08001828"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080015e8": {
            "entrypoint": "0x080015e8",
            "current_name": "process_data_080015e8",
            "code": "\nundefined4 processData_080015e8(uint **data,uint value1,uint value2,int flag,uint threshold)\n\n{\n  int result;\n  int comparisonResult;\n  uint *ptrData;\n  uint **ptrPtrData;\n  uint val1;\n  uint val2;\n  \n  ptrData = *data;\n  *ptrData = *ptrData | 0x400;\n  *ptrData = *ptrData | 0x100;\n  ptrPtrData = data;\n  val1 = value1;\n  val2 = value2;\n  result = get_data_value_0800115c();\nLAB_0800160e:\n  ptrData = *data;\n  while (-1 < (int)(ptrData[5] << 0x1f)) {\n    if (threshold != 0xffffffff) goto code_r0x08001658;\n  }\n  ptrData[4] = value1 & 0xfe;\n  result = check_data_validity_08001460(data,0x10002,threshold,ptrData,ptrPtrData,val1,val2);\n  if (result != 0) goto LAB_080016ba;\n  result = check_flag_and_update_080014e2(data,threshold,(*data)[5],(*data)[6]);\n  if (result == 0) {\n    ptrData = *data;\n    if (flag != 1) {\n      ptrData[4] = value2 >> 8;\n      result = check_flag_and_update_080014e2(data,threshold);\n      if (result != 0) goto LAB_08001642;\n      ptrData = *data;\n    }\n    ptrData[4] = value2 & 0xff;\n    result = check_flag_and_update_080014e2(data,threshold);\n    if (result == 0) {\n      **data = **data | 0x100;\n      result = get_data_value_0800115c();\n      do {\n        do {\n          if ((int)((*data)[5] << 0x1f) < 0) {\n            (*data)[4] = value1 & 0xff | 1;\n            result = check_data_validity_08001460(data,0x10002,threshold);\n            if (result == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (data[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (threshold == 0xffffffff);\n      } while ((threshold != 0) && (comparisonResult = get_data_value_0800115c(), (uint)(comparisonResult - result) <= threshold));\nLAB_0800165a:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((threshold == 0) || (comparisonResult = get_data_value_0800115c(), threshold < (uint)(comparisonResult - result)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "renaming": {
                "FUN_080015e8": "process_data_080015e8",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "threshold",
                "iVar1": "result",
                "iVar2": "comparisonResult",
                "puVar3": "ptrData",
                "ppuVar4": "ptrPtrData",
                "uVar5": "val1",
                "uVar6": "val2"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001460",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080016f4": {
            "entrypoint": "0x080016f4",
            "current_name": "check_data_validity_080016f4",
            "code": "\nundefined4 check_data_validity_080016f4(int *data_array,uint data_length)\n\n{\n  int initial_data_value;\n  int current_data_value;\n  \n  initial_data_value = get_data_value_0800115c();\n  while( true ) {\n    current_data_value = *data_array;\n    if ((*(uint *)(current_data_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_data_value + 0x14) << 0x1b < 0) break;\n    if ((data_length == 0) || (current_data_value = get_data_value_0800115c(), data_length < (uint)(current_data_value - initial_data_value))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_data_value + 0x14) = *(uint *)(current_data_value + 0x14) & 0xffffffef;\n  data_array[0xe] = 0;\n  *(undefined *)(data_array + 0xd) = 0;\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080016f4": "check_data_validity_080016f4",
                "param_1": "data_array",
                "param_2": "data_length",
                "iVar1": "initial_data_value",
                "iVar2": "current_data_value"
            },
            "calling": [
                "FUN_08001938"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001754": {
            "entrypoint": "0x08001754",
            "current_name": "update_data_08001754",
            "code": "\nundefined4 updateData_08001754(uint **data)\n\n{\n  uint var1;\n  uint var2;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr5;\n  uint var6;\n  undefined8 shiftedValue;\n  \n  if (data != (uint **)0x0) {\n    if (*(char *)((int)data + 0x35) == '\\0') {\n      *(undefined *)(data + 0xd) = 0;\n      update_bits_if_needed_08004d48();\n    }\n    *(undefined *)((int)data + 0x35) = 0x24;\n    **data = **data & 0xfffffffe;\n    shiftedValue = get_shifted_value_08002220();\n    var2 = (uint)((ulonglong)shiftedValue >> 0x20);\n    var1 = (uint)shiftedValue;\n    ptr4 = data[1];\n    var6 = var1 / 1000000;\n    if ((uint *)0x186a0 < ptr4) {\n      var2 = 300;\n    }\n    ptr3 = *data;\n    if ((uint *)0x186a0 < ptr4) {\n      var2 = var6 * var2;\n    }\n    ptr3[1] = var6;\n    if ((uint *)0x186a0 < ptr4) {\n      var6 = var2 / 1000;\n    }\n    ptr3[8] = var6 + 1;\n    if (ptr4 < (uint *)0x186a1) {\n      var1 = var1 / (uint)((int)ptr4 << 1);\n      if ((var1 & 0xfff) < 4) {\n        var1 = 4;\n      }\n    }\n    else {\n      if (data[2] == (uint *)0x0) {\n        var1 = var1 / (uint)((int)ptr4 * 3) | 0x8000;\n      }\n      else {\n        var1 = var1 / (uint)((int)ptr4 * 0x19) | 0xc000;\n      }\n      if ((var1 & 0xfff) == 0) {\n        var1 = 1;\n      }\n    }\n    ptr4 = data[8];\n    ptr5 = data[7];\n    ptr3[7] = var1;\n    *ptr3 = (uint)ptr5 | (uint)ptr4;\n    ptr3[2] = (uint)data[4] | (uint)data[3];\n    ptr3[3] = (uint)data[5] | (uint)data[6];\n    *ptr3 = *ptr3 | 1;\n    data[0xe] = (uint *)0x0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001754": "update_data_08001754",
                "param_1": "data",
                "uVar1": "var1",
                "uVar2": "var2",
                "puVar3": "ptr3",
                "puVar4": "ptr4",
                "puVar5": "ptr5",
                "uVar6": "var6",
                "uVar7": "shiftedValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d48",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001828": {
            "entrypoint": "0x08001828",
            "current_name": "process_data_08001828",
            "code": "\nundefined4\nprocessData_08001828(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,byte *byteArr,\n            short byteArrLen,undefined4 param7)\n\n{\n  int value1;\n  int value2;\n  uint *ptr;\n  uint var4;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (byteArr == (byte *)0x0) {\n      return 1;\n    }\n    if (byteArrLen == 0) {\n      return 1;\n    }\n    value1 = get_data_value_0800115c();\n    do {\n      ptr = *data;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        var4 = *ptr;\n        *(undefined *)(data + 0xd) = 1;\n        *ptr = var4 & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        value1 = process_data_08001530(data,param2,param3,param4,param7);\n        if (value1 != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      value2 = get_data_value_0800115c();\n    } while ((uint)(value2 - value1) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (byteArrLen != 0) {\nLAB_080018e2:\n    value1 = check_flag_and_update_080014e2(data,param7);\n    if (value1 != 0) goto LAB_080018ee;\n    ptr = *data;\n    ptr[4] = (uint)*byteArr;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(byteArrLen + -1) == 0) break;\n      byteArrLen = byteArrLen + -2;\n      ptr[4] = (uint)byteArr[1];\n      byteArr = byteArr + 2;\n    }\n    else {\n      byteArr = byteArr + 1;\n      byteArrLen = byteArrLen + -1;\n    }\n  }\n  value1 = check_flag_and_update_080014e2(data,param7);\n  if (value1 == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "byteArr",
                "param_6": "byteArrLen",
                "param_7": "param7",
                "iVar1": "value1",
                "iVar2": "value2",
                "puVar3": "ptr",
                "uVar4": "var4"
            },
            "calling": [
                "FUN_0800403c"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001530",
                "FUN_080014e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001938": {
            "entrypoint": "0x08001938",
            "current_name": "process_data_08001938",
            "code": "\nundefined4\nprocessData_08001938(uint **inputData,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *outputData,ushort dataSize,uint timeLimit)\n\n{\n  undefined *ptr1;\n  int dataValue1;\n  int dataValue2;\n  uint *ptr2;\n  uint var1;\n  undefined *ptr3;\n  bool isValid;\n  \n  if (*(char *)((int)inputData + 0x35) != ' ') {\n    return 2;\n  }\n  if (outputData == (undefined *)0x0) {\n    return 1;\n  }\n  if (dataSize == 0) {\n    return 1;\n  }\n  dataValue1 = get_data_value_0800115c();\n  while (ptr2 = *inputData, (~ptr2[6] & 2) == 0) {\n    dataValue2 = get_data_value_0800115c();\n    if (10000 < (uint)(dataValue2 - dataValue1)) {\n      *(undefined *)(inputData + 0xd) = 0;\n      *(undefined *)((int)inputData + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(inputData + 0xd) == '\\x01') {\n    return 2;\n  }\n  var1 = *ptr2;\n  *(undefined *)(inputData + 0xd) = 1;\n  *ptr2 = var1 & 0xfffff7ff;\n  *(undefined *)((int)inputData + 0x35) = 0x22;\n  *(undefined *)((int)inputData + 0x36) = 0x40;\n  inputData[0xe] = (uint *)0x0;\n  dataValue1 = process_data_080015e8(inputData,param2,param3,param4,timeLimit);\n  if (dataValue1 != 0) {\n    *(undefined *)(inputData + 0xd) = 0;\n    if (inputData[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *inputData;\n  var1 = *ptr2;\n  if (dataSize == 1) {\n    *ptr2 = var1 & 0xfffffbff;\n    disableIRQinterrupts();\n    **inputData = **inputData | 0x200;\n    enableIRQinterrupts();\n    dataValue1 = check_data_validity_080016f4(inputData,timeLimit);\n    if (dataValue1 == 0) {\n      *outputData = (char)(*inputData)[4];\nLAB_08001ab8:\n      *(undefined *)((int)inputData + 0x35) = 0x20;\n      *(undefined *)((int)inputData + 0x36) = 0;\n      *(undefined *)(inputData + 0xd) = 0;\n      return 0;\n    }\nLAB_08001a18:\n    if (inputData[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (dataSize == 2) {\n    *ptr2 = var1 | 0x800;\n    disableIRQinterrupts();\n    **inputData = **inputData & 0xfffffbff;\n    enableIRQinterrupts();\n  }\n  else {\n    *ptr2 = var1 | 0x400;\n    while (3 < dataSize) {\n      dataValue1 = check_data_validity_080016f4(inputData,timeLimit);\n      if (dataValue1 != 0) goto LAB_08001a18;\n      *outputData = (char)(*inputData)[4];\n      ptr2 = *inputData;\n      isValid = (int)(ptr2[5] << 0x1d) < 0;\n      if (isValid) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = outputData + 2;\n        dataSize = dataSize - 2;\n      }\n      else {\n        ptr3 = outputData + 1;\n        dataSize = dataSize - 1;\n      }\n      ptr1 = outputData + 1;\n      outputData = ptr3;\n      if (isValid) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (dataSize != 2) {\n      dataValue1 = get_data_value_0800115c();\n      do {\n        ptr2 = *inputData;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disableIRQinterrupts();\n            *outputData = (char)(*inputData)[4];\n            dataValue1 = get_data_value_0800115c();\n            goto LAB_08001b3a;\n          }\n        } while (timeLimit == 0xffffffff);\n      } while ((timeLimit != 0) && (dataValue2 = get_data_value_0800115c(), (uint)(dataValue2 - dataValue1) <= timeLimit));\n      goto LAB_08001afa;\n    }\n  }\n  dataValue1 = get_data_value_0800115c();\n  do {\n    do {\n      if ((int)((*inputData)[5] << 0x1d) < 0) {\n        disableIRQinterrupts();\n        ptr2 = *inputData;\n        *ptr2 = *ptr2 | 0x200;\n        *outputData = (char)ptr2[4];\n        enableIRQinterrupts();\n        outputData[1] = (char)(*inputData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeLimit == 0xffffffff);\n  } while ((timeLimit != 0) && (dataValue2 = get_data_value_0800115c(), (uint)(dataValue2 - dataValue1) <= timeLimit));\nLAB_08001afa:\n  *(undefined *)((int)inputData + 0x35) = 0x20;\n  *(undefined *)(inputData + 0xd) = 0;\n  return 3;\nLAB_08001b3a:\n  do {\n    ptr2 = *inputData;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        outputData[1] = (char)ptr2[4];\n        enableIRQinterrupts();\n        outputData[2] = (char)(*inputData)[4];\n        goto LAB_08001ab8;\n      }\n    } while (timeLimit == 0xffffffff);\n  } while ((timeLimit != 0) && (dataValue2 = get_data_value_0800115c(), (uint)(dataValue2 - dataValue1) <= timeLimit));\n  goto LAB_08001afa;\n}\n\n",
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "outputData",
                "param_6": "dataSize",
                "param_7": "timeLimit",
                "puVar1": "ptr1",
                "iVar2": "dataValue1",
                "iVar3": "dataValue2",
                "puVar4": "ptr2",
                "uVar5": "var1",
                "puVar6": "ptr3",
                "bVar7": "isValid"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c"
            ],
            "called": [
                "FUN_080016f4",
                "FUN_0800115c",
                "FUN_080015e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08001b58": {
            "entrypoint": "0x08001b58",
            "current_name": "check_and_update_configuration_08001b58",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_and_update_configuration_08001b58(int *config_parameters)\n\n{\n  int temp_var1;\n  int temp_var2;\n  \n  if (*config_parameters << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (config_parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      temp_var1 = config_parameters[1];\n      if (temp_var1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (temp_var1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          temp_var1 = get_data_value_0800115c();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            temp_var2 = get_data_value_0800115c();\n            if (100 < (uint)(temp_var2 - temp_var1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (temp_var1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      temp_var1 = get_data_value_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        temp_var2 = get_data_value_0800115c();\n        if (100 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*config_parameters << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (config_parameters[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      iRam42420000 = config_parameters[4];\n      if (iRam42420000 == 0) {\n        temp_var1 = get_data_value_0800115c();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          temp_var2 = get_data_value_0800115c();\n          if (2 < (uint)(temp_var2 - temp_var1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      iRam42420000 = 1;\n      temp_var1 = get_data_value_0800115c();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        temp_var2 = get_data_value_0800115c();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = config_parameters[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*config_parameters << 0x1c < 0) {\n    iRam42420480 = config_parameters[6];\n    if (iRam42420480 == 0) {\n      temp_var1 = get_data_value_0800115c();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        temp_var2 = get_data_value_0800115c();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      iRam42420480 = 1;\n      temp_var1 = get_data_value_0800115c();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        temp_var2 = get_data_value_0800115c();\n        if (2 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *config_parameters << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  temp_var1 = get_data_value_0800115c();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    temp_var2 = get_data_value_0800115c();\n    if (100 < (uint)(temp_var2 - temp_var1)) {\n      return 3;\n    }\n  }\n  temp_var1 = config_parameters[3];\n  if (temp_var1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (temp_var1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      temp_var1 = get_data_value_0800115c();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        temp_var2 = get_data_value_0800115c();\n        if (5000 < (uint)(temp_var2 - temp_var1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (temp_var1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  temp_var1 = get_data_value_0800115c();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    temp_var2 = get_data_value_0800115c();\n    if (5000 < (uint)(temp_var2 - temp_var1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (config_parameters[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (config_parameters[7] != 2) {\n      uRam42420060 = 0;\n      temp_var1 = get_data_value_0800115c();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        temp_var2 = get_data_value_0800115c();\n      } while ((uint)(temp_var2 - temp_var1) < 3);\n      return 3;\n    }\n    uRam42420060 = 0;\n    temp_var1 = get_data_value_0800115c();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (config_parameters[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | config_parameters[2];\n        }\n        _DAT_40021004 = config_parameters[8] | config_parameters[9] | _DAT_40021004 & 0xffc2ffff;\n        uRam42420060 = 1;\n        temp_var1 = get_data_value_0800115c();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          temp_var2 = get_data_value_0800115c();\n        } while ((uint)(temp_var2 - temp_var1) < 3);\n        return 3;\n      }\n      temp_var2 = get_data_value_0800115c();\n    } while ((uint)(temp_var2 - temp_var1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08001b58": "check_and_update_configuration_08001b58",
                "param_1": "config_parameters",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_0800115c",
                "FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002008": {
            "entrypoint": "0x08002008",
            "current_name": "calculate_mpu9250_clock_rate_08002008",
            "code": "\n\n\nint calculateMPU9250ClockRate_08002008(void)\n\n{\n  undefined4 value1;\n  int clockRate;\n  undefined4 value2;\n  undefined4 *dataPointer;\n  uint clockDivider;\n  undefined4 *destinationPointer;\n  byte initialValues [4];\n  undefined4 source [5];\n  \n  dataPointer = &DAT_080072f0;\n  destinationPointer = source;\n  do {\n    value1 = *dataPointer;\n    value2 = dataPointer[1];\n    dataPointer = dataPointer + 2;\n    *destinationPointer = value1;\n    destinationPointer[1] = value2;\n    destinationPointer = destinationPointer + 2;\n  } while (dataPointer != (undefined4 *)\"../Src/MPU9250.c\");\n  initialValues[0] = 1;\n  initialValues[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clockDivider = 8000000 / initialValues[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clockDivider = 4000000;\n    }\n    clockRate = clockDivider * *(byte *)((int)source + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clockRate = 8000000;\n  }\n  return clockRate;\n}\n\n",
            "renaming": {
                "FUN_08002008": "calculate_mpu9250_clock_rate_08002008",
                "uVar1": "value1",
                "iVar2": "clockRate",
                "uVar3": "value2",
                "puVar4": "dataPointer",
                "uVar5": "clockDivider",
                "puVar6": "destinationPointer",
                "local_24": "initialValues",
                "local_20": "source"
            },
            "calling": [
                "FUN_0800209c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800209c": {
            "entrypoint": "0x0800209c",
            "current_name": "check_and_initialize_mpu9250_0800209c",
            "code": "\n\n\nundefined4 check_and_initialize_mpu9250_0800209c(uint *parameters,uint num_bits)\n\n{\n  char flag1;\n  char flag2;\n  int tempVar1;\n  uint tempVar2;\n  int tempVar3;\n  uint tempVar4;\n  \n  if ((num_bits <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | num_bits, num_bits == (num_bits & 7))) {\n    if ((int)(*parameters << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | parameters[2];\n    }\n    tempVar1 = *parameters << 0x1f;\n    if (-1 < tempVar1) {\nLAB_080020ba:\n      if ((num_bits < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | num_bits, num_bits != (num_bits & 7))) {\n        return 1;\n      }\n      if ((*parameters & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | parameters[3];\n      }\n      if ((int)(*parameters << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | parameters[4] << 3;\n      }\n      tempVar2 = calculate_mpu9250_clock_rate_08002008();\n      DAT_200001bc = tempVar2 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_and_apply_bit_manipulation_08001104(0);\n      return 0;\n    }\n    tempVar2 = parameters[1];\n    if (tempVar2 == 1) {\n      flag2 = '\\x01';\n      flag1 = '\\0';\n    }\n    else {\n      tempVar4 = _DAT_40021000;\n      if (tempVar2 == 2) goto LAB_08002176;\n      flag2 = '\\0';\n      flag1 = '\\x01';\n    }\n    tempVar4 = (_DAT_40021000 >>\n            (LZCOUNT((uint)(byte)(flag1 << 6) << 0x18 | (uint)(byte)(flag2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)tempVar4 < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | tempVar2;\n      tempVar1 = get_data_value_0800115c(tempVar1,tempVar4);\n      if (parameters[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          tempVar3 = get_data_value_0800115c();\n        } while ((uint)(tempVar3 - tempVar1) < 0x1389);\n      }\n      else if (parameters[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          tempVar3 = get_data_value_0800115c();\n        } while ((uint)(tempVar3 - tempVar1) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          tempVar3 = get_data_value_0800115c();\n        } while ((uint)(tempVar3 - tempVar1) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0800209c": "check_and_initialize_mpu9250_0800209c",
                "param_1": "parameters",
                "param_2": "num_bits",
                "cVar1": "flag1",
                "cVar2": "flag2",
                "iVar3": "tempVar1",
                "uVar4": "tempVar2",
                "iVar5": "tempVar3",
                "uVar6": "tempVar4"
            },
            "calling": [
                "FUN_08004514"
            ],
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002214": {
            "entrypoint": "0x08002214",
            "current_name": "get_data_value_08002214",
            "code": "\nundefined4 get_data_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "renaming": {
                "FUN_08002214": "get_data_value_08002214"
            },
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002220": {
            "entrypoint": "0x08002220",
            "current_name": "get_shifted_value_08002220",
            "code": "\n\n\nuint getShiftedValue_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "calling": [
                "FUN_080025e8",
                "FUN_08001754"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002250": {
            "entrypoint": "0x08002250",
            "current_name": "extracted_data_08002250",
            "code": "\n\n\nuint extractedData_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "renaming": {
                "FUN_08002250": "extracted_data_08002250"
            },
            "calling": [
                "FUN_080025e8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002280": {
            "entrypoint": "0x08002280",
            "current_name": "update_configuration_08002280",
            "code": "\nvoid updateConfiguration_08002280(int configAddress,uint *configData)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  uint updatedValue3;\n  \n  *(uint *)(configAddress + 0x20) = *(uint *)(configAddress + 0x20) & 0xfffffffe;\n  updatedValue2 = *(uint *)(configAddress + 4);\n  updatedValue3 = *configData;\n  updatedValue1 = *(uint *)(configAddress + 0x20) & 0xfffffffd | configData[2];\n  if (configAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffffff7 | configData[3]) & 0xfffffffb;\n    updatedValue2 = updatedValue2 & 0xfffffcff | configData[5] | configData[6];\n  }\n  *(uint *)(configAddress + 4) = updatedValue2;\n  *(uint *)(configAddress + 0x18) = *(uint *)(configAddress + 0x18) & 0xffffff8c | updatedValue3;\n  *(uint *)(configAddress + 0x34) = configData[1];\n  *(uint *)(configAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002280": "update_configuration_08002280",
                "param_1": "configAddress",
                "param_2": "configData",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "uVar3": "updatedValue3"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080022d0": {
            "entrypoint": "0x080022d0",
            "current_name": "update_memory_data_080022d0",
            "code": "\nvoid updateMemoryData_080022d0(int baseAddress,uint *dataBuffer)\n\n{\n  uint updatedValue1;\n  uint originalValue2;\n  uint dataValue;\n  \n  *(uint *)(baseAddress + 0x20) = *(uint *)(baseAddress + 0x20) & 0xfffffeff;\n  originalValue2 = *(uint *)(baseAddress + 4);\n  dataValue = *dataBuffer;\n  updatedValue1 = *(uint *)(baseAddress + 0x20) & 0xfffffdff | dataBuffer[2] << 8;\n  if (baseAddress == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xfffff7ff | dataBuffer[3] << 8) & 0xfffffbff;\n    originalValue2 = originalValue2 & 0xffffcfff | (dataBuffer[5] | dataBuffer[6]) << 4;\n  }\n  *(uint *)(baseAddress + 4) = originalValue2;\n  *(uint *)(baseAddress + 0x1c) = *(uint *)(baseAddress + 0x1c) & 0xffffff8c | dataValue;\n  *(uint *)(baseAddress + 0x3c) = dataBuffer[1];\n  *(uint *)(baseAddress + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080022d0": "update_memory_data_080022d0",
                "param_1": "baseAddress",
                "param_2": "dataBuffer",
                "uVar1": "updatedValue1",
                "uVar2": "originalValue2",
                "uVar3": "dataValue"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002324": {
            "entrypoint": "0x08002324",
            "current_name": "update_parameters_08002324",
            "code": "\nvoid updateParameters_08002324(int functionAddress,int *parameters)\n\n{\n  uint modifiedValue;\n  int param2Value;\n  int param2ValueIndex2;\n  int constantValue;\n  \n  *(uint *)(functionAddress + 0x20) = *(uint *)(functionAddress + 0x20) & 0xffffefff;\n  modifiedValue = *(uint *)(functionAddress + 4);\n  param2Value = *parameters;\n  param2ValueIndex2 = param2ValueAtIndex2;\n  constantValue = 0x40012c00;\n  if (functionAddress == 0x40012c00) {\n    constantValue = param2ValueAtIndex5;\n    modifiedValue = modifiedValue & 0xffffbfff;\n  }\n  if (functionAddress == 0x40012c00) {\n    modifiedValue = modifiedValue | constantValue << 6;\n  }\n  *(uint *)(functionAddress + 4) = modifiedValue;\n  *(uint *)(functionAddress + 0x1c) = *(uint *)(functionAddress + 0x1c) & 0xffff8cff | param2Value << 8;\n  *(int *)(functionAddress + 0x40) = parameters[1];\n  *(uint *)(functionAddress + 0x20) = *(uint *)(functionAddress + 0x20) & 0xffffdfff | param2ValueIndex2 << 0xc;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002324": "update_parameters_08002324",
                "param_1": "functionAddress",
                "param_2": "parameters",
                "uVar1": "modifiedValue",
                "iVar2": "param2Value",
                "iVar3": "param2ValueIndex2",
                "iVar4": "constantValue",
                "param_2[2]": "param2ValueAtIndex2",
                "param_2[5]": "param2ValueAtIndex5"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002368": {
            "entrypoint": "0x08002368",
            "current_name": "update_parameters_08002368",
            "code": "\nvoid updateParameters_08002368(uint *inputParams,uint *outputParams)\n\n{\n  uint updatedValue;\n  \n  updatedValue = *inputParams;\n  if (((((inputParams == (uint *)0x40012c00) || (inputParams == (uint *)0x40000000)) ||\n       (inputParams == (uint *)0x40000400)) || (inputParams == (uint *)0x40000800)) &&\n     (((updatedValue = updatedValue & 0xffffff8f | outputParams[1], inputParams == (uint *)0x40012c00 ||\n       (inputParams == (uint *)0x40000000)) ||\n      ((inputParams == (uint *)0x40000400 || (inputParams == (uint *)0x40000800)))))) {\n    updatedValue = updatedValue & 0xfffffcff | outputParams[3];\n  }\n  *inputParams = updatedValue;\n  inputParams[0xb] = outputParams[2];\n  inputParams[10] = *outputParams;\n  updatedValue = 0x40012c00;\n  if (inputParams == (uint *)0x40012c00) {\n    updatedValue = outputParams[4];\n  }\n  if (inputParams == (uint *)0x40012c00) {\n    inputParams[0xc] = updatedValue;\n  }\n  inputParams[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002368": "update_parameters_08002368",
                "param_1": "inputParams",
                "param_2": "outputParams",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080023d0": {
            "entrypoint": "0x080023d0",
            "current_name": "initialize_data_080023d0",
            "code": "\nundefined4 initializeData_080023d0(undefined4 *dataPointer)\n\n{\n  if (dataPointer != (undefined4 *)0x0) {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      updateDataFlags();\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 2;\n    updateParameters(*dataPointer,dataPointer + 1);\n    *(undefined *)((int)dataPointer + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_080023d0": "initialize_data_080023d0",
                "param_1": "dataPointer",
                "update_data_flags_08004d8c": "updateDataFlags",
                "update_parameters_08002368": "updateParameters"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004d8c",
                "FUN_08002368"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002404": {
            "entrypoint": "0x08002404",
            "current_name": "update_flags_and_values_08002404",
            "code": "\nvoid updateFlagsAndValues_08002404(int address,int *values)\n\n{\n  uint updatedValue1;\n  uint updatedValue2;\n  int inputValue;\n  \n  *(uint *)(address + 0x20) = *(uint *)(address + 0x20) & 0xffffffef;\n  updatedValue2 = *(uint *)(address + 4);\n  inputValue = *values;\n  updatedValue1 = *(uint *)(address + 0x20) & 0xffffffdf | value3 << 4;\n  if (address == 0x40012c00) {\n    updatedValue1 = (updatedValue1 & 0xffffff7f | value4 << 4) & 0xffffffbf;\n    updatedValue2 = updatedValue2 & 0xfffff3ff | (value5 | value6) << 2;\n  }\n  *(uint *)(address + 4) = updatedValue2;\n  *(uint *)(address + 0x18) = *(uint *)(address + 0x18) & 0xffff8cff | inputValue << 8;\n  *(int *)(address + 0x38) = value7;\n  *(uint *)(address + 0x20) = updatedValue1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002404": "update_flags_and_values_08002404",
                "param_1": "address",
                "param_2": "values",
                "uVar1": "updatedValue1",
                "uVar2": "updatedValue2",
                "iVar3": "inputValue",
                "param_2[2]": "value3",
                "param_2[3]": "value4",
                "param_2[5]": "value5",
                "param_2[6]": "value6",
                "param_2[1]": "value7"
            },
            "calling": [
                "FUN_0800245c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800245c": {
            "entrypoint": "0x0800245c",
            "current_name": "update_configuration_flags_0800245c",
            "code": "\nvoid update_configuration_flags_0800245c(int *config_data,undefined4 param_2,undefined4 action_type)\n\n{\n  int temp_1;\n  int temp_2;\n  int temp_3;\n  int temp_4;\n  int update_value;\n  uint updated_flags;\n  int current_data;\n  \n  if (*(char *)(config_data + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)config_data + 0x39) = 2;\n  *(undefined *)(config_data + 0xe) = 1;\n  switch(action_type) {\n  case 0:\n    update_configuration_08002280(*config_data);\n    current_data = *config_data;\n    updated_flags = *(uint *)(temp_1 + 0x10);\n    *(uint *)(current_data + 0x18) = *(uint *)(current_data + 0x18) | 8;\n    *(uint *)(current_data + 0x18) = *(uint *)(current_data + 0x18) & 0xfffffffb;\n    updated_flags = *(uint *)(current_data + 0x18) | updated_flags;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_flags_and_values_08002404(*config_data);\n    current_data = *config_data;\n    update_value = *(int *)(temp_2 + 0x10);\n    *(uint *)(current_data + 0x18) = *(uint *)(current_data + 0x18) | 0x800;\n    *(uint *)(current_data + 0x18) = *(uint *)(current_data + 0x18) & 0xfffffbff;\n    updated_flags = *(uint *)(current_data + 0x18) | update_value << 8;\n    break;\n  case 8:\n    update_memory_data_080022d0(*config_data);\n    current_data = *config_data;\n    updated_flags = *(uint *)(temp_3 + 0x10);\n    *(uint *)(current_data + 0x1c) = *(uint *)(current_data + 0x1c) | 8;\n    *(uint *)(current_data + 0x1c) = *(uint *)(current_data + 0x1c) & 0xfffffffb;\n    updated_flags = *(uint *)(current_data + 0x1c) | updated_flags;\n    goto LAB_080024fa;\n  case 0xc:\n    update_parameters_08002324(*config_data);\n    current_data = *config_data;\n    update_value = *(int *)(temp_4 + 0x10);\n    *(uint *)(current_data + 0x1c) = *(uint *)(current_data + 0x1c) | 0x800;\n    *(uint *)(current_data + 0x1c) = *(uint *)(current_data + 0x1c) & 0xfffffbff;\n    updated_flags = *(uint *)(current_data + 0x1c) | update_value << 8;\nLAB_080024fa:\n    *(uint *)(current_data + 0x1c) = updated_flags;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(current_data + 0x18) = updated_flags;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)config_data + 0x39) = 1;\n  *(undefined *)(config_data + 0xe) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800245c": "update_configuration_flags_0800245c",
                "param_1": "config_data",
                "param_3": "action_type",
                "extraout_r1": "temp_1",
                "extraout_r1_00": "temp_2",
                "extraout_r1_01": "temp_3",
                "extraout_r1_02": "temp_4",
                "iVar1": "update_value",
                "uVar2": "updated_flags",
                "iVar3": "current_data"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_080022d0",
                "FUN_08002280",
                "FUN_08002404",
                "FUN_08002324"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002520": {
            "entrypoint": "0x08002520",
            "current_name": "update_bitwise_value_08002520",
            "code": "\nvoid updateBitwiseValue_08002520(int dataPointer,uint bitPosition,int newValue)\n\n{\n  *(uint *)(dataPointer + 0x20) = *(uint *)(dataPointer + 0x20) & ~(1 << (bitPosition & 0xff));\n  *(uint *)(dataPointer + 0x20) = newValue << (bitPosition & 0xff) | *(uint *)(dataPointer + 0x20);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002520": "update_bitwise_value_08002520",
                "param_1": "dataPointer",
                "param_2": "bitPosition",
                "param_3": "newValue"
            },
            "calling": [
                "FUN_08002538"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002538": {
            "entrypoint": "0x08002538",
            "current_name": "update_bitwise_value_08002538",
            "code": "\nundefined4 update_bitwise_value_08002538(uint **bitwise_value,undefined4 value)\n\n{\n  uint updated_value;\n  uint *bitwise_ptr;\n  \n  update_bitwise_value_08002538_08002520(*bitwise_value,value,1);\n  bitwise_ptr = *bitwise_value;\n  updated_value = 0x40012c00;\n  if (bitwise_ptr == (uint *)0x40012c00) {\n    updated_value = uRam40012c44 | 0x8000;\n  }\n  if (bitwise_ptr == (uint *)0x40012c00) {\n    bitwise_ptr[0x11] = updated_value;\n  }\n  *bitwise_ptr = *bitwise_ptr | 1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08002538": "update_bitwise_value_08002538",
                "param_1": "bitwise_value",
                "param_2": "value",
                "uVar1": "updated_value",
                "puVar2": "bitwise_ptr"
            },
            "calling": [
                "FUN_08003ff4"
            ],
            "called": [
                "FUN_08002520"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002564": {
            "entrypoint": "0x08002564",
            "current_name": "initialize_data_08002564",
            "code": "\nundefined4 initializeData_08002564(int *dataPointer,uint *dataArray)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = 2;\n  if (*(char *)(dataPointer + 0xe) != '\\x01') {\n    *(undefined *)((int)dataPointer + 0x39) = 2;\n    *(uint *)(*dataPointer + 0x44) =\n         *dataArray | dataArray[1] | dataArray[2] | dataArray[3] | dataArray[4] | dataArray[5] | dataArray[6];\n    *(undefined *)((int)dataPointer + 0x39) = 1;\n    returnValue = 0;\n    *(undefined *)(dataPointer + 0xe) = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08002564": "initialize_data_08002564",
                "param_1": "dataPointer",
                "param_2": "dataArray",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025a4": {
            "entrypoint": "0x080025a4",
            "current_name": "update_data_080025a4",
            "code": "\nundefined4 updateData_080025a4(int *data,uint *values)\n\n{\n  uint value1;\n  undefined4 result;\n  int ptr;\n  uint value2;\n  \n  result = 2;\n  if (*(char *)(data + 0xe) != '\\x01') {\n    *(undefined *)((int)data + 0x39) = 2;\n    ptr = *data;\n    value2 = *values;\n    value1 = values[1];\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) & 0xffffff8f;\n    *(uint *)(ptr + 4) = *(uint *)(ptr + 4) | value2;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) & 0xffffff7f;\n    *(uint *)(ptr + 8) = *(uint *)(ptr + 8) | value1;\n    *(undefined *)((int)data + 0x39) = 1;\n    result = 0;\n    *(undefined *)(data + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080025a4": "update_data_080025a4",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "value1",
                "uVar2": "result",
                "iVar3": "ptr",
                "uVar4": "value2"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080025e8": {
            "entrypoint": "0x080025e8",
            "current_name": "update_data_080025e8",
            "code": "\nvoid updateData_080025e8(int *data)\n\n{\n  int extractedValue1;\n  int extractedValue2;\n  uint extractedValue3;\n  int calculatedValue1;\n  int inputValue1;\n  int baseAddress;\n  \n  baseAddress = *data;\n  extractedValue3 = data[4];\n  *(uint *)(baseAddress + 0x10) = *(uint *)(baseAddress + 0x10) & 0xffffcfff | data[3];\n  *(uint *)(baseAddress + 0xc) = data[2] | extractedValue3 | data[5] | *(uint *)(baseAddress + 0xc) & 0xffffe9f3;\n  *(uint *)(baseAddress + 0x14) = *(uint *)(baseAddress + 0x14) & 0xfffffcff | data[6];\n  if (baseAddress == 0x40013800) {\n    extractedValue1 = extracted_data_08002250();\n    calculatedValue1 = (int)(((ulonglong)(uint)(extractedValue1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100);\n    extractedValue1 = extracted_data_08002250();\n    inputValue1 = data[1];\n    extractedValue2 = extracted_data_08002250();\n    extractedValue2 = (uint)(extractedValue1 * 0x19) / (uint)(inputValue1 << 2) +\n            (int)(((ulonglong)(uint)(extractedValue2 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) *\n            -100;\n    extractedValue1 = extracted_data_08002250();\n    extractedValue3 = (uint)(extractedValue1 * 0x19) / (uint)(data[1] << 2);\n    extractedValue1 = extracted_data_08002250();\n  }\n  else {\n    extractedValue1 = get_shifted_value_08002220();\n    calculatedValue1 = (int)(((ulonglong)(uint)(extractedValue1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100);\n    extractedValue1 = get_shifted_value_08002220();\n    inputValue1 = data[1];\n    extractedValue2 = get_shifted_value_08002220();\n    extractedValue2 = (uint)(extractedValue1 * 0x19) / (uint)(inputValue1 << 2) +\n            (int)(((ulonglong)(uint)(extractedValue2 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100) *\n            -100;\n    extractedValue1 = get_shifted_value_08002220();\n    extractedValue3 = (uint)(extractedValue1 * 0x19) / (uint)(data[1] << 2);\n    extractedValue1 = get_shifted_value_08002220();\n  }\n  *(uint *)(baseAddress + 8) =\n       (((extractedValue3 + (int)(((ulonglong)(uint)(extractedValue1 * 0x19) / (ulonglong)(uint)(data[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (extractedValue2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       calculatedValue1 * 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080025e8": "update_data_080025e8",
                "param_1": "data",
                "iVar1": "extractedValue1",
                "iVar2": "extractedValue2",
                "uVar3": "extractedValue3",
                "iVar4": "calculatedValue1",
                "iVar5": "inputValue1",
                "iVar6": "baseAddress"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08002250",
                "FUN_08002220"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002724": {
            "entrypoint": "0x08002724",
            "current_name": "update_data_08002724",
            "code": "\nundefined4 updateData_08002724(int *dataPointer)\n\n{\n  int dataValue;\n  \n  if (dataPointer != (int *)0x0) {\n    if (*(char *)((int)dataPointer + 0x39) == '\\0') {\n      *(undefined *)(dataPointer + 0xe) = 0;\n      update_bits_if_value_is_correct_08004e7c();\n    }\n    *(undefined *)((int)dataPointer + 0x39) = 2;\n    *(uint *)(*dataPointer + 0xc) = *(uint *)(*dataPointer + 0xc) & 0xffffdfff;\n    update_data_080025e8(dataPointer);\n    dataValue = *dataPointer;\n    *(uint *)(dataValue + 0x10) = *(uint *)(dataValue + 0x10) & 0xffffb7ff;\n    *(uint *)(dataValue + 0x14) = *(uint *)(dataValue + 0x14) & 0xffffffd5;\n    *(uint *)(dataValue + 0xc) = *(uint *)(dataValue + 0xc) | 0x2000;\n    dataPointer[0xf] = 0;\n    *(undefined *)((int)dataPointer + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08002724": "update_data_08002724",
                "param_1": "dataPointer",
                "iVar1": "dataValue"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800290a": {
            "entrypoint": "0x0800290a",
            "current_name": "FUNC_0800290a",
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800290c": {
            "entrypoint": "0x0800290c",
            "current_name": "process_data_0800290c",
            "code": "\nundefined4 process_data_0800290c(int *data)\n\n{\n  byte byteValue;\n  int pointerValue;\n  uint uintValue;\n  undefined4 undefinedValue;\n  short shortValue;\n  ushort *ushortPointer1;\n  ushort *ushortPointer2;\n  bool boolValue;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  pointerValue = *data;\n  ushortPointer1 = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      ushortPointer2 = ushortPointer1 + 1;\n      *ushortPointer1 = (ushort)((uint)(*(int *)(pointerValue + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ushortPointer2 = (ushort *)((int)ushortPointer1 + 1);\n      *ushortPointer1 = (ushort)*(int *)(pointerValue + 4) & 0xff;\n    }\n    data[10] = (int)ushortPointer2;\n  }\n  else {\n    if (data[4] == 0) {\n      byteValue = (byte)*(undefined4 *)(pointerValue + 4);\n      data[10] = (int)ushortPointer1 + 1;\n    }\n    else {\n      undefinedValue = *(undefined4 *)(pointerValue + 4);\n      data[10] = (int)ushortPointer1 + 1;\n      byteValue = (byte)undefinedValue & 0x7f;\n    }\n    *(byte *)ushortPointer1 = byteValue;\n  }\n  shortValue = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = shortValue;\n  if (shortValue == 0) {\n    pointerValue = *data;\n    *(uint *)(pointerValue + 0xc) = *(uint *)(pointerValue + 0xc) & 0xffffffdf;\n    boolValue = *(char *)((int)data + 0x39) != '2';\n    if (boolValue) {\n      uintValue = *(uint *)(pointerValue + 0xc) & 0xfffffeff;\n    }\n    else {\n      pointerValue = 0x12;\n      uintValue = 0x32;\n    }\n    if (boolValue) {\n      *(uint *)(pointerValue + 0xc) = uintValue;\n      uintValue = *(uint *)(pointerValue + 0x14) & 0xfffffffe;\n    }\n    if (boolValue) {\n      *(uint *)(pointerValue + 0x14) = uintValue;\n      pointerValue = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)pointerValue;\n    process_data_0800290c_08004c30();\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "param_1": "data",
                "bVar1": "byteValue",
                "iVar2": "pointerValue",
                "uVar3": "uintValue",
                "uVar4": "undefinedValue",
                "sVar5": "shortValue",
                "puVar6": "ushortPointer1",
                "puVar7": "ushortPointer2",
                "bVar8": "boolValue"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [
                "FUN_08004c30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002998": {
            "entrypoint": "0x08002998",
            "current_name": "FUNC_08002998",
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "calling": [
                "FUN_0800299a"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800299a": {
            "entrypoint": "0x0800299a",
            "current_name": "process_data_0800299a",
            "code": "\nvoid process_data_0800299a(uint **input_data)\n\n{\n  uint first_value;\n  short counter;\n  uint second_value;\n  uint *pointer_1;\n  undefined temp_value;\n  uint *pointer_2;\n  uint flag;\n  bool is_true;\n  \n  pointer_2 = *input_data;\n  second_value = *pointer_2;\n  first_value = pointer_2[3];\n  if ((second_value & 0xf) == 0) {\n    if (((int)(second_value << 0x1a) < 0) && ((int)(first_value << 0x1a) < 0)) {\n      process_data_0800299a_0800290c();\n      return;\n    }\n  }\n  else {\n    flag = pointer_2[5] & 1;\n    if ((flag != 0) || ((first_value & 0x120) != 0)) {\n      pointer_2 = (uint *)(second_value << 0x1f);\n      if ((int)pointer_2 < 0) {\n        is_true = (int)(first_value << 0x17) < 0;\n        if (is_true) {\n          pointer_2 = (uint *)((uint)input_data[0xf] | 1);\n        }\n        if (is_true) {\n          input_data[0xf] = pointer_2;\n        }\n      }\n      if (((int)(second_value << 0x1d) < 0) && (flag != 0)) {\n        input_data[0xf] = (uint *)((uint)input_data[0xf] | 2);\n      }\n      if (((int)(second_value << 0x1e) < 0) && (flag != 0)) {\n        input_data[0xf] = (uint *)((uint)input_data[0xf] | 4);\n      }\n      if (((int)(second_value << 0x1c) < 0) && (flag != 0)) {\n        input_data[0xf] = (uint *)((uint)input_data[0xf] | 8);\n      }\n      if (input_data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(second_value << 0x1a) < 0) && ((int)(first_value << 0x1a) < 0)) {\n        process_data_0800299a_0800290c(input_data);\n      }\n      pointer_2 = *input_data;\n      if ((-1 < (int)input_data[0xf] << 0x1c) && ((pointer_2[5] & 0x40) == 0)) {\n        FUNC_08002998(input_data);\n        input_data[0xf] = (uint *)0x0;\n        return;\n      }\n      pointer_2[3] = pointer_2[3] & 0xfffffedf;\n      pointer_2[5] = pointer_2[5] & 0xfffffffe;\n      *(undefined *)((int)input_data + 0x39) = 1;\n      FUNC_08002998(input_data);\n      return;\n    }\n  }\n  if (((int)(second_value << 0x18) < 0) && ((int)(first_value << 0x18) < 0)) {\n    if ((*(byte *)((int)input_data + 0x39) & 0xdf) == 0x12) {\n      pointer_1 = input_data[8];\n      if (input_data[2] == (uint *)0x1000) {\n        pointer_2[1] = *(ushort *)pointer_1 & 0x1ff;\n        if (input_data[4] == (uint *)0x0) {\n          pointer_1 = (uint *)((int)pointer_1 + 2);\n        }\n        else {\n          pointer_1 = (uint *)((int)pointer_1 + 1);\n        }\n        input_data[8] = pointer_1;\n      }\n      else {\n        input_data[8] = (uint *)((int)pointer_1 + 1);\n        pointer_2[1] = (uint)*(byte *)pointer_1;\n      }\n      counter = *(short *)((int)input_data + 0x26) + -1;\n      *(short *)((int)input_data + 0x26) = counter;\n      if (counter == 0) {\n        pointer_2[3] = pointer_2[3] & 0xffffff7f;\n        pointer_2[3] = pointer_2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(second_value << 0x19) < 0) && ((int)(first_value << 0x19) < 0)) {\n    pointer_2[3] = pointer_2[3] & 0xffffffbf;\n    if (*(char *)((int)input_data + 0x39) == '2') {\n      temp_value = 0x22;\n    }\n    else {\n      temp_value = 1;\n    }\n    *(undefined *)((int)input_data + 0x39) = temp_value;\n    FUNC_0800290a(input_data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800299a": "process_data_0800299a",
                "param_1": "input_data",
                "uVar1": "first_value",
                "sVar2": "counter",
                "uVar3": "second_value",
                "puVar4": "pointer_1",
                "uVar5": "temp_value",
                "puVar6": "pointer_2",
                "uVar7": "flag",
                "bVar8": "is_true"
            },
            "calling": [],
            "called": [
                "FUN_0800290c",
                "FUN_0800290a",
                "FUN_08002998"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "entrypoint": "0x08002ad0",
            "current_name": "initialize_mpu9250_08002ad0",
            "code": "\nvoid initialize_MPU9250_08002ad0(void)\n\n{\n  check_and_process_data(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  process_i2c_data(0xd0,0x6b,0x80,1);\n  process_i2c_data(0xd0,0x6b,1);\n  process_i2c_data(0xd0,0x6c,0,1);\n  process_i2c_data(0xd0,0x19,0,1);\n  process_i2c_data(0xd0,0x1d,3,1);\n  process_i2c_data(0xd0,0x1a,3,1);\n  process_i2c_data(0xd0,0x1b,0x10,1);\n  process_i2c_data(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_08002ad0",
                "check_and_process_data_0800407c": "check_and_process_data",
                "process_i2_c_data_0800403c": "process_i2c_data"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_0800407c",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002b48": {
            "entrypoint": "0x08002b48",
            "current_name": "initialize_mpu9250_08002b48",
            "code": "\nvoid initializeMPU9250_08002b48(void)\n\n{\n  undefined4 uVar1;\n  uint inputValue;\n  int convertedValue1;\n  int convertedValue2;\n  undefined4 result1;\n  undefined4 result2;\n  \n  result1 = 0;\n  result2 = inputValue & 0xffff0000;\n  process_and_store_data_080040e8(0xd0,0x3b,&result1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(result1._2_1_,result1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)result1,result1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)result2,result2._1_1_);\n  convertedValue2 = (int)DAT_200002f6;\n  convertedValue1 = (int)DAT_200002f8;\n  uVar1 = calculateUValue();\n  uVar1 = calculateFloatingPoint(uVar1,0x40800000);\n  DAT_200002d0 = calculateFloatingPoint(uVar1,0x38000000);\n  uVar1 = calculateUValue(convertedValue2);\n  uVar1 = calculateFloatingPoint(uVar1,0x40800000);\n  DAT_200002d4 = calculateFloatingPoint(uVar1,0x38000000);\n  uVar1 = calculateUValue(convertedValue1);\n  uVar1 = calculateFloatingPoint(uVar1,0x40800000);\n  DAT_200002d8 = calculateFloatingPoint(uVar1,0x38000000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "in_r3": "inputValue",
                "iVar2": "convertedValue1",
                "iVar3": "convertedValue2",
                "local_18": "result1",
                "local_14": "result2",
                "calculate_u_var3_08000c44": "calculateUValue",
                "calculate_floating_point_08000cec": "calculateFloatingPoint"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "entrypoint": "0x08002bf0",
            "current_name": "calculate_sensor_data_08002bf0",
            "code": "\nvoid calculateSensorData_08002bf0(void)\n\n{\n  undefined4 result;\n  int data2;\n  int data1;\n  undefined4 sensorData1;\n  undefined2 sensorData2;\n  \n  sensorData1 = 0;\n  sensorData2 = 0;\n  process_and_store_data_080040e8(0xd0,0x43,&sensorData1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(sensorData1._2_1_,sensorData1._3_1_);\n  DAT_200002be = CONCAT11((undefined)sensorData1,sensorData1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)sensorData2,sensorData2._1_1_);\n  data1 = (int)DAT_200002c0;\n  data2 = (int)DAT_200002c2;\n  result = calculate_u_var3_08000c44();\n  result = calculate_floating_point_08000cec(result,0x447a0000);\n  result = calculate_floating_point_08000cec(result,0x38000000);\n  DAT_200002c4 = perform_arithmetic_operation_08000ad8(result,DAT_20000000);\n  result = calculate_u_var3_08000c44(data1);\n  result = calculate_floating_point_08000cec(result,0x447a0000);\n  result = calculate_floating_point_08000cec(result,0x38000000);\n  DAT_200002c8 = perform_arithmetic_operation_08000ad8(result,DAT_20000004);\n  result = calculate_u_var3_08000c44(data2);\n  result = calculate_floating_point_08000cec(result,0x447a0000);\n  result = calculate_floating_point_08000cec(result,0x38000000);\n  DAT_200002cc = perform_arithmetic_operation_08000ad8(result,DAT_20000008);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002bf0": "calculate_sensor_data_08002bf0",
                "local_20": "sensorData1",
                "local_1c": "sensorData2",
                "iVar3": "data1",
                "iVar2": "data2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000ad8",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "entrypoint": "0x08002cb0",
            "current_name": "process_imu_data_08002cb0",
            "code": "\nvoid process_IMU_data_08002cb0(undefined4 input_1,undefined4 input_2,undefined4 input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  uint temporary_1;\n  \n  temporary_1 = input_4;\n  process_i2_c_data_0800403c(0xd0,0x37,0x22,1,input_1,input_2,input_3);\n  process_i2_c_data_0800403c(0xd0,0x6a,1);\n  check_and_process_data_0800407c(0x18,0,\"../Src/MPU9250.c\",0xad);\n  process_i2_c_data_0800403c(0x18,0xb,1);\n  process_i2_c_data_0800403c(0x18,10,0,1);\n  process_i2_c_data_0800403c(0x18,10,0xf,1);\n  process_and_store_data_080040e8(0x18,0x10,&temporary_1,3,\"../Src/MPU9250.c\",0xb6);\n  result_1 = calculate_u_var3_08000c44((temporary_1 & 0xff) - 0x80);\n  result_1 = calculate_floating_point_08000cec(result_1,0x3b800000);\n  DAT_200002e8 = calculate_floating_point_08000adc(result_1,0x3f800000);\n  result_1 = calculate_u_var3_08000c44((temporary_1 >> 8 & 0xff) - 0x80);\n  result_1 = calculate_floating_point_08000cec(result_1,0x3b800000);\n  DAT_200002ec = calculate_floating_point_08000adc(result_1,0x3f800000);\n  result_1 = calculate_u_var3_08000c44((temporary_1 >> 0x10 & 0xff) - 0x80);\n  result_1 = calculate_floating_point_08000cec(result_1,0x3b800000);\n  DAT_200002f0 = calculate_floating_point_08000adc(result_1,0x3f800000);\n  process_i2_c_data_0800403c(0x18,10,0,1);\n  process_i2_c_data_0800403c(0x18,10,0x16,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002cb0": "process_imu_data_08002cb0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "local_c": "temporary_1"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000cec",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002d88": {
            "entrypoint": "0x08002d88",
            "current_name": "process_mpu9250_data_08002d88",
            "code": "\nvoid process_MPU9250_data_08002d88(undefined4 data_ptr,undefined4 length,undefined4 file_path,undefined4 line_number)\n\n{\n  int result;\n  undefined4 u_var2;\n  undefined4 u_var3;\n  int temp_var;\n  undefined2 flag;\n  undefined stack_var1;\n  undefined stack_var2;\n  undefined local_var1;\n  undefined local_var2;\n  byte local_byte;\n  undefined stack_var3;\n  \n  stack_var3 = (undefined)((uint)line_number >> 0x18);\n  flag = 0;\n  stack_var1 = 0;\n  stack_var2 = 0;\n  local_var1 = 0;\n  local_var2 = 0;\n  local_byte = 0;\n  result = check_and_process_data_0800407c(0x18,2,\"../Src/MPU9250.c\",0xd7,data_ptr,length);\n  if (result << 0x1f < 0) {\n    process_and_store_data_080040e8(0x18,3,&flag,7,\"../Src/MPU9250.c\",0xda);\n    u_var3 = DAT_2000001c;\n    if ((int)((uint)local_byte << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(stack_var2,stack_var1);\n      DAT_200002bc = CONCAT11(local_var2,local_var1);\n      temp_var = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = flag;\n      u_var2 = calculate_u_var3_08000c44();\n      u_var2 = calculate_floating_point_08000cec(u_var2,u_var3);\n      u_var2 = calculate_floating_point_08000cec(u_var2,DAT_200002e8);\n      u_var2 = perform_arithmetic_operation_08000ad8(u_var2,DAT_20000020);\n      DAT_200002dc = calculate_floating_point_08000cec(u_var2,DAT_2000002c);\n      u_var2 = calculate_u_var3_08000c44(temp_var);\n      u_var2 = calculate_floating_point_08000cec(u_var2,u_var3);\n      u_var2 = calculate_floating_point_08000cec(u_var2,DAT_200002ec);\n      u_var2 = perform_arithmetic_operation_08000ad8(u_var2,DAT_20000024);\n      DAT_200002e0 = calculate_floating_point_08000cec(u_var2,DAT_20000030);\n      u_var2 = calculate_u_var3_08000c44(result);\n      u_var3 = calculate_floating_point_08000cec(u_var2,u_var3);\n      u_var3 = calculate_floating_point_08000cec(u_var3,DAT_200002f0);\n      u_var3 = perform_arithmetic_operation_08000ad8(u_var3,DAT_20000028);\n      DAT_200002e4 = calculate_floating_point_08000cec(u_var3,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002d88": "process_mpu9250_data_08002d88",
                "param_1": "data_ptr",
                "param_2": "length",
                "param_3": "file_path",
                "param_4": "line_number",
                "iVar1": "result",
                "uVar2": "u_var2",
                "uVar3": "u_var3",
                "iVar4": "temp_var",
                "local_28": "flag",
                "uStack_26": "stack_var1",
                "uStack_25": "stack_var2",
                "local_24": "local_var1",
                "local_23": "local_var2",
                "local_22": "local_byte",
                "uStack_21": "stack_var3"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_0800407c",
                "FUN_080040e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "entrypoint": "0x08002ea0",
            "current_name": "initialize_process_set_08002ea0",
            "code": "\nvoid initialize_process_set_08002ea0(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined4 extra_output;\n  \n  initialize_mpu9250();\n  process_imu_data();\n  set_global_parameter(0x3f19999a);\n  set_global_variable(0,extra_output,param_3,param_4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ea0": "initialize_process_set_08002ea0",
                "extraout_r1": "extra_output",
                "initialize_mpu9250_08002ad0": "initialize_mpu9250",
                "process_imu_data_08002cb0": "process_imu_data",
                "set_global_parameter_08003314": "set_global_parameter",
                "set_global_variable_08003320": "set_global_variable"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003314",
                "FUN_08002cb0",
                "FUN_08003320",
                "FUN_08002ad0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "entrypoint": "0x08002ec0",
            "current_name": "perform_floating_point_calculation_08002ec0",
            "code": "\nvoid performFloatingPointCalculation_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_2000024c;\n  constant2 = DAT_20000010;\n  result1 = perform_arithmetic_operation_08000ad8(0x3f800000,DAT_20000010);\n  constant1 = calculate_floating_point_08000cec(result1,constant1);\n  constant2 = calculate_floating_point_08000cec(constant2,DAT_2000000c);\n  DAT_2000000c = calculate_floating_point_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ec0": "perform_floating_point_calculation_08002ec0",
                "uVar1": "result1",
                "uVar2": "constant1",
                "uVar3": "constant2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "entrypoint": "0x08002ed4",
            "current_name": "calculate_result_08002ed4",
            "code": "\nvoid calculateResult_08002ed4(void)\n\n{\n  undefined4 temporaryVariable1;\n  undefined4 constant1;\n  undefined4 constant2;\n  \n  constant1 = DAT_20000248;\n  constant2 = parameter1;\n  temporaryVariable1 = FUN_08000ad8(0x3f800000,parameter1);\n  constant1 = FUN_08000cec(temporaryVariable1,constant1);\n  constant2 = FUN_08000cec(constant2,parameter2);\n  parameter2 = FUN_08000adc(constant2,constant1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ed4": "calculate_result_08002ed4",
                "uVar1": "temporaryVariable1",
                "uVar2": "constant1",
                "uVar3": "constant2",
                "uRam20000018": "parameter1",
                "uRam20000014": "parameter2"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "entrypoint": "0x08002ee8",
            "current_name": "process_concatenation_08002ee8",
            "code": "\nvoid processConcatenation_08002ee8(void)\n\n{\n  undefined4 concatenationResult;\n  int isNotEmpty;\n  \n  concatenationResult = DAT_20000250;\n  isNotEmpty = hasZeroConcatResult(DAT_20000250,0xc3340000);\n  if ((isNotEmpty != 0) && (isNotEmpty = isEmptyConcatenation(concatenationResult,0x42b40000), isNotEmpty != 0)) {\n    calculateFloatingPointValue(concatenationResult,0x42b40000);\n    return;\n  }\n  performArithmeticOperation(concatenationResult,0x43870000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002ee8": "process_concatenation_08002ee8",
                "uVar1": "concatenationResult",
                "iVar2": "isNotEmpty",
                "check_for_zero_concatenation_result_08001050": "hasZeroConcatResult",
                "check_if_concatenation_empty_08001028": "isEmptyConcatenation",
                "calculate_floating_point_08000adc": "calculateFloatingPointValue",
                "perform_arithmetic_operation_08000ad8": "performArithmeticOperation"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08001050",
                "FUN_08000ad8",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08002f28": {
            "entrypoint": "0x08002f28",
            "current_name": "process_sensor_data_08002f28",
            "code": "\n\n\nvoid process_sensor_data_08002f28(void)\n\n{\n  undefined4 uVar1;\n  \n  initialize_mpu9250();\n  calculate_sensor_data();\n  process_mpu9250_data();\n  DAT_20000258 = get_data_value();\n  uVar1 = calculate_hash(DAT_20000258 - DAT_20000254);\n  calculate_floating_point(uVar1,0x447a0000);\n  set_global_variable();\n  DAT_20000254 = DAT_20000258;\n  calculate_result(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  uVar1 = calculate_result_2();\n  calculate_floating_point_2(uVar1,0x41200000);\n  DAT_20001395._0_2_ = extract_value_from_param();\n  uVar1 = perform_floating_point_calculation();\n  calculate_floating_point_2(uVar1,0x41200000);\n  DAT_20001395._2_2_ = extract_value_from_param();\n  process_concatenation();\n  DAT_20001399 = extract_value_from_param();\n  return;\n}\n\n",
            "renaming": {
                "FUN_08002f28": "process_sensor_data_08002f28",
                "initialize_mpu9250_08002b48": "initialize_mpu9250",
                "calculate_sensor_data_08002bf0": "calculate_sensor_data",
                "process_mpu9250_data_08002d88": "process_mpu9250_data",
                "thunk_get_data_value_0800115c": "get_data_value",
                "calculate_hash_08000c3c": "calculate_hash",
                "calculate_floating_point_08000e54": "calculate_floating_point",
                "set_global_variable_08003320": "set_global_variable",
                "calculate_result_08003330": "calculate_result",
                "calculate_result_08002ed4": "calculate_result_2",
                "calculate_floating_point_08000cec": "calculate_floating_point_2",
                "extract_value_from_param_08001078": "extract_value_from_param",
                "perform_floating_point_calculation_08002ec0": "perform_floating_point_calculation",
                "process_concatenation_08002ee8": "process_concatenation"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "thunk_FUN_0800115c",
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08000c3c",
                "FUN_08002bf0",
                "FUN_08001078",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002ec0",
                "FUN_08003330",
                "FUN_08000e54",
                "FUN_08002ed4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003034": {
            "entrypoint": "0x08003034",
            "current_name": "decode_and_combine_values_08003034",
            "code": "\nuint decode_and_combine_values_08003034(undefined4 param_start,undefined4 param_end,undefined4 param_buffer,undefined4 param_data)\n\n{\n  undefined4 combined_value;\n  \n  combined_value = param_data;\n  process_and_check_data_080040b8(0xee,0,&combined_value,3,\"../Src/MS5611.c\",0x8c,param_buffer);\n  return (uint)CONCAT12((undefined)combined_value,CONCAT11(combined_value._1_1_,combined_value._2_1_));\n}\n\n",
            "renaming": {
                "FUN_08003034": "decode_and_combine_values_08003034",
                "param_1": "param_start",
                "param_2": "param_end",
                "param_3": "param_buffer",
                "param_4": "param_data",
                "local_c": "combined_value"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_080040b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003068": {
            "entrypoint": "0x08003068",
            "current_name": "get_data_from_global_variable_08003068",
            "code": "\nundefined4 get_data_from_global_variable_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "renaming": {
                "FUN_08003068": "get_data_from_global_variable_08003068"
            },
            "calling": [
                "FUN_08004a30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003298": {
            "entrypoint": "0x08003298",
            "current_name": "process_and_store_data_08003298",
            "code": "\nvoid processAndStoreData_08003298(void)\n\n{\n  int index;\n  undefined dataPart1;\n  undefined dataPart2;\n  \n  index = 0;\n  process_i2_c_data_0800403c(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    dataPart1 = 0;\n    dataPart2 = 0;\n    process_and_store_data_080040e8(0xee,index + 0xa0U & 0xffff,&dataPart1,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = CONCAT11(dataPart1,dataPart2);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003298": "process_and_store_data_08003298",
                "iVar1": "index",
                "local_1c": "dataPart1",
                "local_1b": "dataPart2"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_080040e8",
                "thunk_FUN_08001168",
                "FUN_0800403c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003314": {
            "entrypoint": "0x08003314",
            "current_name": "set_global_parameter_08003314",
            "code": "\nvoid set_global_parameter_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003314": "set_global_parameter_08003314",
                "param_1": "value"
            },
            "calling": [
                "FUN_08002ea0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003320": {
            "entrypoint": "0x08003320",
            "current_name": "set_global_variable_08003320",
            "code": "\nvoid setGlobalVariable_08003320(undefined4 newValue)\n\n{\n  DAT_20000360 = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003320": "set_global_variable_08003320",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_08002ea0",
                "FUN_08002f28"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003330": {
            "entrypoint": "0x08003330",
            "current_name": "calculate_result_08003330",
            "code": "\nvoid calculateResult_08003330(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined4 input_9,undefined4 *output)\n\n{\n  undefined4 temp_1;\n  undefined4 temp_2;\n  int temp_3;\n  undefined4 temp_4;\n  undefined4 temp_5;\n  undefined4 temp_6;\n  undefined4 temp_7;\n  int temp_8;\n  undefined4 temp_9;\n  undefined4 temp_10;\n  undefined4 temp_11;\n  undefined4 temp_12;\n  undefined4 temp_13;\n  undefined4 temp_14;\n  undefined4 temp_15;\n  undefined4 temp_16;\n  undefined4 temp_17;\n  undefined4 temp_18;\n  int temp_19;\n  undefined4 temp_20;\n  undefined4 temp_21;\n  undefined4 temp_22;\n  undefined4 temp_23;\n  undefined4 temp_24;\n  undefined4 temp_25;\n  int temp_26;\n  undefined4 temp_27;\n  undefined4 temp_28;\n  undefined4 temp_29;\n  int temp_30;\n  undefined8 result_1;\n  undefined8 result_2;\n  \n  temp_29 = DAT_20000048;\n  temp_28 = DAT_20000044;\n  temp_30 = DAT_20000040;\n  temp_27 = DAT_2000003c;\n  temp_1 = calculate_floating_point_08000cec(input_1,input_1);\n  temp_2 = calculate_floating_point_08000cec(input_2);\n  temp_1 = calculate_floating_point_08000adc(temp_1,temp_2);\n  temp_2 = calculate_floating_point_08000cec(input_3);\n  calculate_floating_point_08000adc(temp_1,temp_2);\n  reverse_bits_08000428();\n  calculate_and_initialize_08005bc8();\n  temp_1 = calculate_floating_point_08000a30();\n  temp_3 = check_if_concatenated_values_exist_08001014(temp_1,0);\n  if (temp_3 == 0) {\n    temp_2 = calculate_floating_point_08000cec(input_7);\n    temp_4 = calculate_floating_point_08000cec(input_8);\n    temp_2 = calculate_floating_point_08000adc(temp_2,temp_4);\n    temp_4 = calculate_floating_point_08000cec(input_9);\n    calculate_floating_point_08000adc(temp_2,temp_4);\n    reverse_bits_08000428();\n    calculate_and_initialize_08005bc8();\n    temp_2 = calculate_floating_point_08000a30();\n    temp_3 = check_if_concatenated_values_exist_08001014(temp_2,0);\n    if (temp_3 == 0) {\n      result_1 = reverse_bits_08000428(input_4);\n      calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0xa2529d39,0x3f91df46);\n      temp_4 = calculate_floating_point_08000a30();\n      result_1 = reverse_bits_08000428(input_5);\n      calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0xa2529d39,0x3f91df46);\n      temp_5 = calculate_floating_point_08000a30();\n      result_1 = reverse_bits_08000428(input_6);\n      calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0xa2529d39,0x3f91df46);\n      temp_6 = calculate_floating_point_08000a30();\n      temp_3 = calculate_floating_point_08000adc(temp_27);\n      temp_7 = calculate_floating_point_08000adc(temp_30);\n      temp_8 = calculate_floating_point_08000adc(temp_28,temp_28);\n      temp_9 = calculate_floating_point_08000adc(temp_29,temp_29);\n      temp_10 = calculate_floating_point_08000cec(temp_27);\n      temp_11 = calculate_floating_point_08000cec(temp_27,temp_30);\n      temp_12 = calculate_floating_point_08000cec(temp_27,temp_28);\n      temp_13 = calculate_floating_point_08000cec(temp_30);\n      temp_14 = calculate_floating_point_08000cec(temp_30,temp_29);\n      temp_15 = calculate_floating_point_08000cec(temp_28,temp_28);\n      temp_16 = calculate_floating_point_08000cec(temp_29,temp_29);\n      temp_1 = calculate_floating_point_08000e54(0x3f800000,temp_1);\n      temp_2 = calculate_floating_point_08000e54(0x3f800000,temp_2);\n      temp_17 = calculate_floating_point_08000cec(input_7,temp_2);\n      temp_18 = calculate_floating_point_08000cec(input_8,temp_2);\n      temp_2 = calculate_floating_point_08000cec(input_9,temp_2);\n      temp_19 = calculate_floating_point_08000cec(temp_3,temp_17);\n      temp_20 = calculate_floating_point_08000cec(temp_3,temp_18);\n      temp_21 = calculate_floating_point_08000cec(temp_3,temp_2);\n      temp_22 = calculate_floating_point_08000cec(temp_7,temp_17);\n      temp_23 = calculate_floating_point_08000cec(temp_10,temp_17);\n      temp_24 = calculate_floating_point_08000cec(temp_29,temp_20);\n      temp_23 = perform_arithmetic_operation_08000ad8(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_28,temp_21);\n      temp_23 = calculate_floating_point_08000adc(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_13,temp_17);\n      temp_23 = calculate_floating_point_08000adc(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_7,temp_18);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_28);\n      temp_23 = calculate_floating_point_08000adc(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_7,temp_2);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_29);\n      temp_23 = calculate_floating_point_08000adc(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_15,temp_17);\n      temp_23 = perform_arithmetic_operation_08000ad8(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_16,temp_17);\n      temp_23 = perform_arithmetic_operation_08000ad8(temp_23,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_29,temp_19);\n      temp_25 = calculate_floating_point_08000cec(temp_10,temp_18);\n      temp_24 = calculate_floating_point_08000adc(temp_24,temp_25);\n      temp_21 = calculate_floating_point_08000cec(temp_30,temp_21);\n      temp_21 = perform_arithmetic_operation_08000ad8(temp_24,temp_21);\n      temp_24 = calculate_floating_point_08000cec(temp_28,temp_22);\n      temp_21 = calculate_floating_point_08000adc(temp_21,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_13,temp_18);\n      temp_21 = perform_arithmetic_operation_08000ad8(temp_21,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_15,temp_18);\n      temp_21 = calculate_floating_point_08000adc(temp_21,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_8,temp_2);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_29);\n      temp_21 = calculate_floating_point_08000adc(temp_21,temp_24);\n      temp_24 = calculate_floating_point_08000cec(temp_16,temp_18);\n      temp_21 = perform_arithmetic_operation_08000ad8(temp_21,temp_24);\n      temp_23 = calculate_floating_point_08000cec(temp_23,temp_23);\n      temp_21 = calculate_floating_point_08000cec(temp_21,temp_21);\n      calculate_floating_point_08000adc(temp_23,temp_21);\n      reverse_bits_08000428();\n      calculate_and_initialize_08005bc8();\n      temp_26 = calculate_floating_point_08000a30();\n      temp_21 = calculate_floating_point_08000cec(temp_19 + -0x80000000,temp_28);\n      temp_20 = calculate_floating_point_08000cec(temp_30,temp_20);\n      temp_20 = calculate_floating_point_08000adc(temp_21,temp_20);\n      temp_10 = calculate_floating_point_08000cec(temp_10,temp_2);\n      temp_10 = calculate_floating_point_08000adc(temp_20,temp_10);\n      temp_20 = calculate_floating_point_08000cec(temp_29,temp_22);\n      temp_10 = calculate_floating_point_08000adc(temp_10,temp_20);\n      temp_20 = calculate_floating_point_08000cec(temp_13,temp_2);\n      temp_10 = perform_arithmetic_operation_08000ad8(temp_10,temp_20);\n      temp_20 = calculate_floating_point_08000cec(temp_8,temp_18);\n      temp_20 = calculate_floating_point_08000cec(temp_20,temp_29);\n      temp_10 = calculate_floating_point_08000adc(temp_10,temp_20);\n      temp_20 = calculate_floating_point_08000cec(temp_15,temp_2);\n      temp_10 = perform_arithmetic_operation_08000ad8(temp_10,temp_20);\n      temp_20 = calculate_floating_point_08000cec(temp_16,temp_2);\n      temp_10 = calculate_floating_point_08000adc(temp_10,temp_20);\n      temp_20 = calculate_floating_point_08000adc(temp_10,temp_10);\n      temp_21 = calculate_floating_point_08000adc(temp_14);\n      temp_22 = calculate_floating_point_08000cec(temp_28,temp_3);\n      temp_21 = perform_arithmetic_operation_08000ad8(temp_21,temp_22);\n      temp_22 = calculate_floating_point_08000cec(input_1,temp_1);\n      temp_21 = perform_arithmetic_operation_08000ad8(temp_21,temp_22);\n      temp_22 = calculate_floating_point_08000cec(temp_29,temp_8);\n      temp_23 = calculate_floating_point_08000adc(temp_11);\n      temp_22 = calculate_floating_point_08000adc(temp_22,temp_23);\n      temp_23 = calculate_floating_point_08000cec(input_2,temp_1);\n      temp_22 = perform_arithmetic_operation_08000ad8(temp_22,temp_23);\n      temp_23 = calculate_floating_point_08000cec(temp_28,temp_10);\n      temp_24 = perform_arithmetic_operation_08000ad8(0x3f000000,temp_15);\n      temp_16 = perform_arithmetic_operation_08000ad8(temp_24,temp_16);\n      temp_16 = calculate_floating_point_08000cec(temp_16,temp_26);\n      temp_24 = perform_arithmetic_operation_08000ad8(temp_14,temp_12);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_10);\n      temp_16 = calculate_floating_point_08000adc(temp_16,temp_24);\n      temp_16 = perform_arithmetic_operation_08000ad8(temp_16,temp_17);\n      temp_17 = calculate_floating_point_08000cec(temp_30,temp_10);\n      temp_24 = calculate_floating_point_08000cec(temp_30,temp_28);\n      temp_25 = calculate_floating_point_08000cec(temp_27,temp_29);\n      temp_24 = perform_arithmetic_operation_08000ad8(temp_24,temp_25);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_26);\n      temp_25 = calculate_floating_point_08000cec(temp_28,temp_29);\n      temp_11 = calculate_floating_point_08000adc(temp_25,temp_11);\n      temp_11 = calculate_floating_point_08000cec(temp_11,temp_10);\n      temp_11 = calculate_floating_point_08000adc(temp_24,temp_11);\n      temp_11 = perform_arithmetic_operation_08000ad8(temp_11,temp_18);\n      temp_18 = calculate_floating_point_08000cec(temp_28,temp_26);\n      temp_24 = perform_arithmetic_operation_08000ad8(0x3f000000,temp_13);\n      temp_24 = perform_arithmetic_operation_08000ad8(temp_24,temp_15);\n      temp_24 = calculate_floating_point_08000cec(temp_24,temp_10);\n      temp_12 = calculate_floating_point_08000adc(temp_12,temp_14);\n      temp_12 = calculate_floating_point_08000cec(temp_12,temp_26);\n      temp_12 = calculate_floating_point_08000adc(temp_24,temp_12);\n      temp_2 = perform_arithmetic_operation_08000ad8(temp_12,temp_2);\n      temp_12 = calculate_floating_point_08000cec(temp_8 + -0x80000000,temp_21);\n      temp_14 = calculate_floating_point_08000cec(temp_7,temp_22);\n      temp_12 = calculate_floating_point_08000adc(temp_12,temp_14);\n      temp_14 = calculate_floating_point_08000cec(temp_23,temp_16);\n      temp_12 = perform_arithmetic_operation_08000ad8(temp_12,temp_14);\n      temp_14 = calculate_floating_point_08000cec(temp_29,temp_26 + -0x80000000);\n      temp_14 = calculate_floating_point_08000adc(temp_14,temp_17);\n      temp_14 = calculate_floating_point_08000cec(temp_14,temp_11);\n      temp_12 = calculate_floating_point_08000adc(temp_12,temp_14);\n      temp_14 = calculate_floating_point_08000cec(temp_18,temp_2);\n      temp_12 = calculate_floating_point_08000adc(temp_12,temp_14);\n      temp_13 = calculate_floating_point_08000adc(temp_13);\n      temp_13 = perform_arithmetic_operation_08000ad8(0x3f800000,temp_13);\n      temp_14 = calculate_floating_point_08000adc(temp_15);\n      temp_13 = perform_arithmetic_operation_08000ad8(temp_13,temp_14);\n      temp_1 = calculate_floating_point_08000cec(input_3,temp_1);\n      temp_1 = perform_arithmetic_operation_08000ad8(temp_13,temp_1);\n      temp_13 = calculate_floating_point_08000cec(temp_29,temp_10);\n      temp_10 = calculate_floating_point_08000cec(temp_27,temp_10);\n      temp_14 = calculate_floating_point_08000cec(temp_9,temp_21);\n      temp_15 = calculate_floating_point_08000cec(temp_3,temp_22);\n      temp_14 = calculate_floating_point_08000adc(temp_14,temp_15);\n      temp_15 = calculate_floating_point_08000cec(temp_30,0x40800000);\n      temp_15 = calculate_floating_point_08000cec(temp_15,temp_1);\n      temp_14 = perform_arithmetic_operation_08000ad8(temp_14,temp_15);\n      temp_15 = calculate_floating_point_08000cec(temp_16,temp_13);\n      temp_14 = calculate_floating_point_08000adc(temp_14,temp_15);\n      temp_15 = calculate_floating_point_08000adc(temp_18,temp_10);\n      temp_15 = calculate_floating_point_08000cec(temp_15,temp_11);\n      temp_14 = calculate_floating_point_08000adc(temp_14,temp_15);\n      temp_15 = calculate_floating_point_08000cec(temp_29,temp_26);\n      temp_18 = calculate_floating_point_08000cec(temp_30,temp_20);\n      temp_15 = perform_arithmetic_operation_08000ad8(temp_15,temp_18);\n      temp_15 = calculate_floating_point_08000cec(temp_15,temp_2);\n      temp_14 = calculate_floating_point_08000adc(temp_14,temp_15);\n      temp_19 = calculate_floating_point_08000adc(temp_26,temp_26);\n      temp_15 = calculate_floating_point_08000cec(temp_30,temp_26);\n      temp_18 = calculate_floating_point_08000cec(temp_3 + -0x80000000,temp_21);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_22);\n      temp_9 = calculate_floating_point_08000adc(temp_18,temp_9);\n      temp_18 = calculate_floating_point_08000cec(temp_28,0x40800000);\n      temp_1 = calculate_floating_point_08000cec(temp_18,temp_1);\n      temp_1 = perform_arithmetic_operation_08000ad8(temp_9,temp_1);\n      temp_9 = calculate_floating_point_08000cec(temp_28,temp_19 + -0x80000000);\n      temp_9 = perform_arithmetic_operation_08000ad8(temp_9,temp_10);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_16);\n      temp_1 = calculate_floating_point_08000adc(temp_1,temp_9);\n      temp_9 = calculate_floating_point_08000adc(temp_13,temp_15);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_11);\n      temp_1 = calculate_floating_point_08000adc(temp_1,temp_9);\n      temp_9 = calculate_floating_point_08000cec(temp_27,temp_26);\n      temp_10 = calculate_floating_point_08000cec(temp_28,temp_20);\n      temp_9 = perform_arithmetic_operation_08000ad8(temp_9,temp_10);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_2);\n      temp_9 = calculate_floating_point_08000adc(temp_1,temp_9);\n      temp_1 = calculate_floating_point_08000cec(temp_7,temp_21);\n      temp_7 = calculate_floating_point_08000cec(temp_8,temp_22);\n      temp_1 = calculate_floating_point_08000adc(temp_1,temp_7);\n      temp_7 = calculate_floating_point_08000cec(temp_29,temp_19 + -0x80000000);\n      temp_7 = calculate_floating_point_08000adc(temp_7,temp_17);\n      temp_7 = calculate_floating_point_08000cec(temp_7,temp_16);\n      temp_1 = calculate_floating_point_08000adc(temp_1,temp_7);\n      temp_7 = calculate_floating_point_08000cec(temp_27,temp_26 + -0x80000000);\n      temp_7 = calculate_floating_point_08000adc(temp_7,temp_23);\n      temp_7 = calculate_floating_point_08000cec(temp_7,temp_11);\n      temp_1 = calculate_floating_point_08000adc(temp_1,temp_7);\n      temp_2 = calculate_floating_point_08000cec(temp_2,temp_15);\n      temp_7 = calculate_floating_point_08000adc(temp_1,temp_2);\n      temp_1 = calculate_floating_point_08000cec(temp_12);\n      temp_2 = calculate_floating_point_08000cec(temp_14);\n      temp_1 = calculate_floating_point_08000adc(temp_1,temp_2);\n      temp_2 = calculate_floating_point_08000cec(temp_9,temp_9);\n      temp_1 = calculate_floating_point_08000adc(temp_1,temp_2);\n      temp_2 = calculate_floating_point_08000cec(temp_7,temp_7);\n      calculate_floating_point_08000adc(temp_1,temp_2);\n      reverse_bits_08000428();\n      calculate_and_initialize_08005bc8();\n      temp_1 = calculate_floating_point_08000a30();\n      temp_10 = calculate_floating_point_08000e54(0x3f800000,temp_1);\n      temp_1 = DAT_2000035c;\n      temp_2 = calculate_floating_point_08000cec(temp_30 + -0x80000000,temp_4);\n      temp_11 = calculate_floating_point_08000cec(temp_28,temp_5);\n      temp_2 = perform_arithmetic_operation_08000ad8(temp_2,temp_11);\n      temp_11 = calculate_floating_point_08000cec(temp_29,temp_6);\n      temp_2 = perform_arithmetic_operation_08000ad8(temp_2,temp_11);\n      temp_11 = calculate_floating_point_08000cec(temp_2,0x3f000000);\n      temp_12 = calculate_floating_point_08000cec(temp_12,temp_10);\n      temp_2 = DAT_20000360;\n      temp_12 = calculate_floating_point_08000cec(temp_12,temp_1);\n      temp_11 = perform_arithmetic_operation_08000ad8(temp_11,temp_12);\n      temp_2 = calculate_floating_point_08000cec(temp_11,temp_2);\n      temp_11 = calculate_floating_point_08000adc(temp_2,temp_27);\n      temp_12 = calculate_floating_point_08000cec(temp_27,temp_4);\n      temp_13 = calculate_floating_point_08000cec(temp_28,temp_6);\n      temp_2 = DAT_20000360;\n      temp_12 = calculate_floating_point_08000adc(temp_12,temp_13);\n      temp_13 = calculate_floating_point_08000cec(temp_29,temp_5);\n      temp_12 = perform_arithmetic_operation_08000ad8(temp_12,temp_13);\n      temp_12 = calculate_floating_point_08000cec(temp_12,0x3f000000);\n      temp_13 = calculate_floating_point_08000cec(temp_14,temp_10);\n      temp_13 = calculate_floating_point_08000cec(temp_13,temp_1);\n      temp_12 = perform_arithmetic_operation_08000ad8(temp_12,temp_13);\n      temp_2 = calculate_floating_point_08000cec(temp_12,temp_2);\n      temp_12 = calculate_floating_point_08000adc(temp_2,temp_30);\n      temp_2 = DAT_20000360;\n      temp_13 = calculate_floating_point_08000cec(temp_27,temp_5);\n      temp_14 = calculate_floating_point_08000cec(temp_30,temp_6);\n      temp_13 = perform_arithmetic_operation_08000ad8(temp_13,temp_14);\n      temp_14 = calculate_floating_point_08000cec(temp_29,temp_4);\n      temp_13 = calculate_floating_point_08000adc(temp_13,temp_14);\n      temp_13 = calculate_floating_point_08000cec(temp_13,0x3f000000);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_10);\n      temp_9 = calculate_floating_point_08000cec(temp_9,temp_1);\n      temp_9 = perform_arithmetic_operation_08000ad8(temp_13,temp_9);\n      temp_2 = calculate_floating_point_08000cec(temp_9,temp_2);\n      temp_2 = calculate_floating_point_08000adc(temp_2,temp_28);\n      temp_27 = calculate_floating_point_08000cec(temp_27,temp_6);\n      temp_5 = calculate_floating_point_08000cec(temp_30,temp_5);\n      temp_27 = calculate_floating_point_08000adc(temp_27,temp_5);\n      temp_28 = calculate_floating_point_08000cec(temp_28,temp_4);\n      temp_27 = perform_arithmetic_operation_08000ad8(temp_27,temp_28);\n      temp_28 = calculate_floating_point_08000cec(temp_27,0x3f000000);\n      temp_27 = calculate_floating_point_08000cec(temp_7,temp_10);\n      temp_1 = calculate_floating_point_08000cec(temp_27,temp_1);\n      temp_27 = DAT_20000360;\n      temp_28 = perform_arithmetic_operation_08000ad8(temp_28,temp_1);\n      temp_27 = calculate_floating_point_08000cec(temp_28,temp_27);\n      temp_27 = calculate_floating_point_08000adc(temp_27,temp_29);\n      temp_28 = calculate_floating_point_08000cec(temp_11,temp_11);\n      temp_29 = calculate_floating_point_08000cec(temp_12,temp_12);\n      temp_28 = calculate_floating_point_08000adc(temp_28,temp_29);\n      temp_29 = calculate_floating_point_08000cec(temp_2,temp_2);\n      temp_28 = calculate_floating_point_08000adc(temp_28,temp_29);\n      temp_29 = calculate_floating_point_08000cec(temp_27,temp_27);\n      calculate_floating_point_08000adc(temp_28,temp_29);\n      reverse_bits_08000428();\n      calculate_and_initialize_08005bc8();\n      temp_28 = calculate_floating_point_08000a30();\n      temp_28 = calculate_floating_point_08000e54(0x3f800000,temp_28);\n      temp_29 = calculate_floating_point_08000cec(temp_11,temp_28);\n      DAT_2000003c = temp_29;\n      temp_30 = calculate_floating_point_08000cec(temp_12,temp_28);\n      DAT_20000040 = temp_30;\n      temp_1 = calculate_floating_point_08000cec(temp_2,temp_28);\n      DAT_20000044 = temp_1;\n      DAT_20000048 = calculate_floating_point_08000cec(temp_27,temp_28);\n      temp_27 = calculate_floating_point_08000cec(temp_30,DAT_20000048);\n      temp_28 = calculate_floating_point_08000cec(temp_29,temp_1);\n      temp_27 = perform_arithmetic_operation_08000ad8(temp_27,temp_28);\n      calculate_floating_point_08000adc(temp_27,temp_27);\n      reverse_bits_08000428();\n      result_1 = validate_and_process_data_08005854();\n      result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x40668000);\n      compute_double_08000724((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x54442d18,0x400921fb);\n      temp_27 = calculate_floating_point_08000a30();\n      *output = temp_27;\n      temp_30 = DAT_20000040;\n      temp_27 = DAT_2000003c;\n      temp_28 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      temp_29 = calculate_floating_point_08000cec(temp_30,temp_30);\n      temp_29 = perform_arithmetic_operation_08000ad8(temp_28,temp_29);\n      temp_28 = DAT_20000044;\n      temp_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      temp_1 = perform_arithmetic_operation_08000ad8(temp_29,temp_1);\n      temp_29 = DAT_20000048;\n      temp_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_08000adc(temp_1,temp_2);\n      result_1 = reverse_bits_08000428();\n      temp_27 = calculate_floating_point_08000cec(temp_27,temp_30);\n      temp_28 = calculate_floating_point_08000cec(temp_28,temp_29);\n      temp_27 = calculate_floating_point_08000adc(temp_27,temp_28);\n      calculate_floating_point_08000adc(temp_27,temp_27);\n      result_2 = reverse_bits_08000428();\n      result_1 = thunk_calculate_result_08006070((int)result_2,(int)((ulonglong)result_2 >> 0x20),(int)result_1,\n                                  (int)((ulonglong)result_1 >> 0x20));\n      result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x40668000);\n      compute_double_08000724((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x54442d18,0x400921fb);\n      temp_27 = calculate_floating_point_08000a30();\n      output[1] = temp_27;\n      temp_30 = DAT_20000040;\n      temp_27 = DAT_2000003c;\n      temp_28 = calculate_floating_point_08000cec(DAT_2000003c,DAT_2000003c);\n      temp_29 = calculate_floating_point_08000cec(temp_30,temp_30);\n      temp_29 = calculate_floating_point_08000adc(temp_28,temp_29);\n      temp_28 = DAT_20000044;\n      temp_1 = calculate_floating_point_08000cec(DAT_20000044,DAT_20000044);\n      temp_1 = perform_arithmetic_operation_08000ad8(temp_29,temp_1);\n      temp_29 = DAT_20000048;\n      temp_2 = calculate_floating_point_08000cec(DAT_20000048,DAT_20000048);\n      perform_arithmetic_operation_08000ad8(temp_1,temp_2);\n      result_1 = reverse_bits_08000428();\n      temp_28 = calculate_floating_point_08000cec(temp_30,temp_28);\n      temp_27 = calculate_floating_point_08000cec(temp_27,temp_29);\n      temp_27 = calculate_floating_point_08000adc(temp_28,temp_27);\n      calculate_floating_point_08000adc(temp_27,temp_27);\n      result_2 = reverse_bits_08000428();\n      result_1 = thunk_calculate_result_08006070((int)result_2,(int)((ulonglong)result_2 >> 0x20),(int)result_1,\n                                  (int)((ulonglong)result_1 >> 0x20));\n      result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x40668000);\n      compute_double_08000724((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x54442d18,0x400921fb);\n      temp_27 = calculate_floating_point_08000a30();\n      output[2] = temp_27;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003330": "calculate_result_08003330",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_9": "input_9",
                "param_10": "output",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "iVar3": "temp_3",
                "uVar4": "temp_4",
                "uVar5": "temp_5",
                "uVar6": "temp_6",
                "uVar7": "temp_7",
                "iVar8": "temp_8",
                "uVar9": "temp_9",
                "uVar10": "temp_10",
                "uVar11": "temp_11",
                "uVar12": "temp_12",
                "uVar13": "temp_13",
                "uVar14": "temp_14",
                "uVar15": "temp_15",
                "uVar16": "temp_16",
                "uVar17": "temp_17",
                "uVar18": "temp_18",
                "iVar19": "temp_19",
                "uVar20": "temp_20",
                "uVar21": "temp_21",
                "uVar22": "temp_22",
                "uVar23": "temp_23",
                "uVar24": "temp_24",
                "uVar25": "temp_25",
                "iVar26": "temp_26",
                "uVar27": "temp_27",
                "uVar28": "temp_28",
                "uVar29": "temp_29",
                "iVar30": "temp_30",
                "uVar31": "result_1",
                "uVar32": "result_2"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08000724",
                "thunk_FUN_08006070",
                "FUN_08000adc",
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08000e54",
                "FUN_08000cec",
                "FUN_08000ad8",
                "FUN_08001014",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "entrypoint": "0x08003eb0",
            "current_name": "convert_to64_bits_08003eb0",
            "code": "\nlonglong convertTo64Bits_08003eb0(uint inputValue)\n\n{\n  if (DAT_20000280 == 0) {\n    triggerInterrupt(0x3f);\n    return combineValues(inputValue,1);\n  }\n  return (ulonglong)inputValue << 0x20;\n}\n\n",
            "renaming": {
                "FUN_08003eb0": "convert_to64_bits_08003eb0",
                "param_1": "inputValue",
                "software_interrupt": "triggerInterrupt",
                "CONCAT44": "combineValues"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "entrypoint": "0x08003ec8",
            "current_name": "increment_and_store_value_08003ec8",
            "code": "\nundefined4 incrementAndStoreValue_08003ec8(int baseAddress,undefined valueToStore)\n\n{\n  *(short *)(baseAddress + 0x804) = *(short *)(baseAddress + 0x804) + 1;\n  *(undefined *)(baseAddress + (uint)*(ushort *)(baseAddress + 0x802)) = valueToStore;\n  *(ushort *)(baseAddress + 0x802) = *(short *)(baseAddress + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_08003ec8": "increment_and_store_value_08003ec8",
                "param_1": "baseAddress",
                "param_2": "valueToStore"
            },
            "calling": [
                "FUN_08004c30"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "entrypoint": "0x08003f3c",
            "current_name": "set_param_values_08003f3c",
            "code": "\nvoid setParamValues_08003f3c(int value1,int value2,int value3)\n\n{\n  setParamValue(0x40011000,0x8000,value1 == 0);\n  setParamValue(0x40011000,0x4000,value2 == 0);\n  setParamValue(0x40011000,0x2000,value3 == 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "set_param_value_08001424": "setParamValue"
            },
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "called": [
                "FUN_08001424"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "entrypoint": "0x08003fc4",
            "current_name": "store_param_in_memory_08003fc4",
            "code": "\nvoid storeParamInMemory_08003fc4(undefined4 inputParameter)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = inputParameter;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fc4": "store_param_in_memory_08003fc4",
                "param_1": "inputParameter"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "entrypoint": "0x08003fd0",
            "current_name": "set_param_08003fd0",
            "code": "\nvoid set_param_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fd0": "set_param_08003fd0",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "entrypoint": "0x08003fdc",
            "current_name": "set_param_08003fdc",
            "code": "\nvoid setParam_08003fdc(undefined4 newValue)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fdc": "set_param_08003fdc",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "entrypoint": "0x08003fe8",
            "current_name": "set_param_value_08003fe8",
            "code": "\nvoid setParamValue_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003fe8": "set_param_value_08003fe8",
                "param_1": "value"
            },
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "entrypoint": "0x08003ff4",
            "current_name": "update_bitwise_values_08003ff4",
            "code": "\nvoid updateBitwiseValues_08003ff4(void)\n\n{\n  update_bitwise_value_08002538(&DAT_200015f8,4);\n  update_bitwise_value_08002538(&DAT_20001540,8);\n  update_bitwise_value_08002538(&DAT_200014c8,8);\n  update_bitwise_value_08002538(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08003ff4": "update_bitwise_values_08003ff4"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004028": {
            "entrypoint": "0x08004028",
            "current_name": "initialize_and_update_peripherals_08004028",
            "code": "\nvoid initialize_and_update_peripherals_08004028(void)\n\n{\n  int counter;\n  \n  initial_setup();\n  update_values();\n  counter = 3;\n  do {\n    set_parameter_values(1,0);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,1);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,0,1);\n    thunk_FUNC_08001168(100);\n    counter = counter + -1;\n  } while (counter != 0);\n  set_parameter_values(1,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004028": "initialize_and_update_peripherals_08004028",
                "iVar1": "counter",
                "initialize_and_update_peripherals_0800458c": "initial_setup",
                "update_bitwise_values_08003ff4": "update_values",
                "set_param_values_08003f3c": "set_parameter_values"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08003f3c",
                "FUN_08003ff4",
                "thunk_FUN_08001168",
                "FUN_0800458c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800403c": {
            "entrypoint": "0x0800403c",
            "current_name": "process_i2_c_data_0800403c",
            "code": "\nvoid processI2CData_0800403c(undefined4 param1,undefined4 param2,undefined param3,int param4)\n\n{\n  int status;\n  undefined buffer [8];\n  \n  buffer[0] = param3;\n  status = process_data_08001828(&DAT_20001504,param1,param2,1,buffer,1,200);\n  if (status != 0) {\n    process_data_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (param4 != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800403c": "process_i2_c_data_0800403c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "status",
                "local_14": "buffer"
            },
            "calling": [
                "FUN_0800411c",
                "FUN_08002cb0",
                "FUN_08003298",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001828",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800407c": {
            "entrypoint": "0x0800407c",
            "current_name": "check_and_process_data_0800407c",
            "code": "\nundefined checkAndProcessData_0800407c(undefined4 input1,undefined4 input2,undefined4 output1,undefined4 output2)\n\n{\n  int iVar1;\n  undefined result [8];\n  \n  result[0] = 0;\n  iVar1 = process_data_08001938(&DAT_20001504,input1,input2,1,result,1,200);\n  if (iVar1 != 0) {\n    process_data_08004490(output1,output2);\n  }\n  return result[0];\n}\n\n",
            "renaming": {
                "FUN_0800407c": "check_and_process_data_0800407c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output1",
                "param_4": "output2",
                "local_14": "result"
            },
            "calling": [
                "FUN_08002d88",
                "FUN_08002cb0",
                "FUN_080040e8",
                "FUN_08002ad0"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040b8": {
            "entrypoint": "0x080040b8",
            "current_name": "process_and_check_data_080040b8",
            "code": "\nvoid processAndCheckData_080040b8(undefined4 data1,undefined4 data2,undefined4 data3,undefined4 data4,\n                 undefined4 param5,undefined4 param6)\n\n{\n  int result;\n  \n  result = process_data_08001938(&DAT_20001504,data1,data2,1,data3,data4,200,data4);\n  if (result != 0) {\n    process_data_08004490(param5,param6);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040b8": "process_and_check_data_080040b8",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "data4",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "result"
            },
            "calling": [
                "FUN_08003034"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001938"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080040e8": {
            "entrypoint": "0x080040e8",
            "current_name": "process_and_store_data_080040e8",
            "code": "\nvoid processAndStoreData_080040e8(undefined4 dataPointer,int offset,int bufferStart,int bufferSize)\n\n{\n  undefined processedData;\n  int index;\n  undefined *bufferPointer;\n  int fileOffset;\n  \n  bufferPointer = (undefined *)(bufferStart + -1);\n  fileOffset = bufferSize;\n  for (index = 0; index < bufferSize; index = index + 1) {\n    processedData = check_and_process_data_0800407c(dataPointer,offset + index & 0xffff,\"../Src/i2c.c\",0x4c,fileOffset);\n    bufferPointer = bufferPointer + 1;\n    *bufferPointer = processedData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_080040e8": "process_and_store_data_080040e8",
                "param_1": "dataPointer",
                "param_2": "offset",
                "param_3": "bufferStart",
                "param_4": "bufferSize",
                "uVar1": "processedData",
                "iVar2": "index",
                "puVar3": "bufferPointer",
                "iVar4": "fileOffset"
            },
            "calling": [
                "FUN_08002b48",
                "FUN_08002d88",
                "FUN_08002bf0",
                "FUN_08002cb0",
                "FUN_08003298"
            ],
            "called": [
                "FUN_0800407c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800411c": {
            "entrypoint": "0x0800411c",
            "current_name": "process_sensor_data_0800411c",
            "code": "\nvoid process_sensor_data_0800411c(void)\n\n{\n  undefined4 *ptr1;\n  longlong result;\n  uint value1;\n  uint value2;\n  uint value3;\n  undefined4 var1;\n  undefined4 var2;\n  int dataValue;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  undefined4 *ptr2;\n  undefined4 param1;\n  int tempVar1;\n  int tempVar2;\n  bool isNegative;\n  undefined8 floatingResult;\n  \n  dataValue = thunk_get_data_value_0800115c();\n  if (1 < (uint)(dataValue - DAT_2000028c)) {\n    DAT_2000028c = thunk_get_data_value_0800115c();\n    process_sensor_data_0800411c_08002f28();\n  }\n  dataValue = thunk_get_data_value_0800115c();\n  if (2 < (uint)(dataValue - DAT_20000294)) {\n    DAT_20000294 = thunk_get_data_value_0800115c();\n    perform_data_processing_08004a84();\n  }\n  dataValue = thunk_get_data_value_0800115c();\n  if (3 < (uint)(dataValue - DAT_20000290)) {\n    DAT_20000290 = thunk_get_data_value_0800115c();\n    initialize_data_processing_08004348();\n    process_data_08004384();\n    decode_and_process_data_080043f0();\n    process_data_08004410();\n    decode_and_process_data_08004434();\n    copy_and_process_data_080043bc();\n    copy_and_process_data_08004458();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    tempVar2 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    temp1 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)tempVar2) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)tempVar2) >> 0x20) << 9;\n    temp2 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)tempVar2 >> 7);\n    temp3 = temp2 + (uint)DAT_20000260 * 0x10000;\n    value2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)tempVar2) >> 8);\n    dataValue = temp1 + 2000;\n    value3 = value2 + (uint)DAT_2000025e * 0x8000;\n    isNegative = (int)temp1 < 0;\n    if (1999 < dataValue) {\n      temp1 = 0;\n    }\n    value1 = temp1;\n    if (isNegative != SBORROW4(dataValue,2000)) {\n      tempVar1 = temp1 * temp1 * 5;\n      temp1 = tempVar1 >> 2;\n      value1 = tempVar1 >> 1;\n    }\n    temp4 = temp3 - value1;\n    result = (ulonglong)(value3 - temp1) * (ulonglong)DAT_2000026c;\n    tempVar1 = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)tempVar2 >> 0x28) +\n               (uint)CARRY4(value2,(uint)DAT_2000025e * 0x8000)) - ((int)temp1 >> 0x1f)) -\n             (uint)(value3 < temp1)) + (int)((ulonglong)result >> 0x20);\n    value2 = (uint)result >> 0x15 | tempVar1 * 0x800;\n    var1 = calculate_u_var3_08000c44(value2 - temp4 >> 0xf |\n                         (((tempVar1 >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)tempVar2 >> 0x27) +\n                            (uint)CARRY4(temp2,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)value1 >> 0x1f)) - (uint)(temp3 < value1))) - (uint)(value2 < temp4)\n                         ) * 0x20000);\n    var1 = calculate_floating_point_08000e54(var1,0x42c80000);\n    DAT_20000354 = var1;\n    var2 = calculate_u_var3_08000c44(dataValue);\n    DAT_20000358 = calculate_floating_point_08000e54(var2,0x42c80000);\n    calculate_floating_point_08000e54(var1,0x447d5000);\n    floatingResult = reverse_bits_08000428();\n    floatingResult = perform_floating_point_check_08005900((int)floatingResult,(int)((ulonglong)floatingResult >> 0x20),0x60000000,0x3fc85b95);\n    floatingResult = calculate_result_08000168(0,0x3ff00000,(int)floatingResult,(int)((ulonglong)floatingResult >> 0x20));\n    calculate_floating_point_080004d0((int)floatingResult,(int)((ulonglong)floatingResult >> 0x20),0,0x40e5a540);\n    var1 = calculate_floating_point_08000a30();\n    var2 = 0;\n    ptr2 = &DAT_20000300;\n    DAT_20000350 = var1;\n    do {\n      ptr1 = ptr2 + 1;\n      *ptr2 = *ptr1;\n      var2 = calculate_floating_point_08000adc(var2);\n      ptr2 = ptr1;\n    } while (ptr1 != &DAT_2000034c);\n    DAT_2000034c = var1;\n    var1 = calculate_floating_point_08000adc(var2,var1);\n    DAT_200002fc = calculate_floating_point_08000e54(var1,0x41a00000);\n    dataValue = extract_value_from_param_08001078();\n    DAT_200014ab = dataValue * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_i2_c_data_0800403c(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = thunk_get_data_value_0800115c();\n  }\n  dataValue = thunk_get_data_value_0800115c();\n  if (((10 < (uint)(dataValue - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = decode_and_combine_values_08003034();\n    DAT_20000275 = '\\x01';\n    process_i2_c_data_0800403c(0xee,DAT_20000038 + 0x40,1,0,param1);\n    DAT_20000278 = thunk_get_data_value_0800115c();\n  }\n  dataValue = thunk_get_data_value_0800115c();\n  if (((10 < (uint)(dataValue - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = decode_and_combine_values_08003034();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800411c": "process_sensor_data_0800411c",
                "puVar1": "ptr1",
                "lVar2": "result",
                "uVar3": "value1",
                "uVar4": "value2",
                "uVar5": "value3",
                "uVar6": "var1",
                "uVar7": "var2",
                "iVar8": "dataValue",
                "uVar9": "temp1",
                "uVar10": "temp2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "puVar13": "ptr2",
                "unaff_r4": "param1",
                "iVar14": "tempVar1",
                "iVar15": "tempVar2",
                "bVar16": "isNegative",
                "uVar17": "floatingResult"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08000428",
                "FUN_08001078",
                "FUN_08004348",
                "FUN_08000c44",
                "FUN_080043f0",
                "FUN_08000168",
                "thunk_FUN_0800115c",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08005900",
                "FUN_08002f28",
                "FUN_08000adc",
                "FUN_08004a84",
                "FUN_08003034",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08000e54",
                "FUN_0800403c",
                "FUN_08004458",
                "FUN_08000a30",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004194": {
            "entrypoint": "0x08004194",
            "current_name": "initialize_all_components_08004194",
            "code": "\nvoid initialize_all_components_08004194(void)\n\n{\n  initialize_and_update_peripherals_08004028();\n  initialize_and_check_status_08004c70();\n  initialize_process_set_08002ea0();\n  process_and_store_data_08003298();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004194": "initialize_all_components_08004194"
            },
            "calling": [
                "FUN_080041ae"
            ],
            "called": [
                "FUN_08004c70",
                "FUN_08002ea0",
                "FUN_08003298",
                "FUN_08004028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041ae": {
            "entrypoint": "0x080041ae",
            "current_name": "continuous_sensor_data_processing_080041ae",
            "code": "\nvoid continuous_sensor_data_processing_080041ae(void)\n\n{\n  convert_to_64_bits(0);\n  initialize_components();\n  do {\n    increment_counter();\n    process_sensor_data();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_080041ae": "continuous_sensor_data_processing_080041ae",
                "convert_to64_bits_08003eb0": "convert_to_64_bits",
                "initialize_all_components_08004194": "initialize_components",
                "increment_counter_0800114c": "increment_counter",
                "process_sensor_data_0800411c": "process_sensor_data"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_0800114c",
                "FUN_08003eb0",
                "FUN_0800411c",
                "FUN_08004194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080041c4": {
            "entrypoint": "0x080041c4",
            "current_name": "initialize_parameters_080041c4",
            "code": "\nvoid initializeParameters_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extraValue;\n  \n  storeParameterInMemory(0);\n  setParam(0);\n  setParamValue(0);\n  setParamValueWithExtra(0,extraValue,param3,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080041c4": "initialize_parameters_080041c4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "extraout_r1": "extraValue",
                "store_param_in_memory_08003fc4": "storeParameterInMemory",
                "set_param_08003fd0": "setParam",
                "set_param_08003fdc": "setParamValue",
                "set_param_value_08003fe8": "setParamValueWithExtra"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08003fe8",
                "FUN_08003fd0",
                "FUN_08003fdc",
                "FUN_08003fc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800426c": {
            "entrypoint": "0x0800426c",
            "current_name": "calculate_and_store_values_0800426c",
            "code": "\n\n\nvoid calculate_and_store_values_0800426c(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 result_var_1;\n  undefined4 result_var_2;\n  undefined4 result_var_3;\n  uint result_var_4;\n  uint result_var_5;\n  uint result_var_6;\n  uint result_var_7;\n  \n  result_var_1 = perform_arithmetic_operation_08000ad8();\n  result_var_2 = calculate_floating_point_08000adc(input_param_1,input_param_2);\n  result_var_3 = perform_arithmetic_operation_08000ad8(result_var_1,input_param_3);\n  result_var_3 = calculate_floating_point_08000adc(result_var_3,input_param_4);\n  perform_arithmetic_operation_08000ad8(result_var_3,0x447a0000);\n  result_var_4 = extract_value_from_param_08001078();\n  result_var_3 = perform_arithmetic_operation_08000ad8(result_var_2,input_param_3);\n  result_var_3 = perform_arithmetic_operation_08000ad8(result_var_3,input_param_4);\n  perform_arithmetic_operation_08000ad8(result_var_3,0x447a0000);\n  result_var_5 = extract_value_from_param_08001078();\n  result_var_1 = calculate_floating_point_08000adc(result_var_1,input_param_3);\n  result_var_1 = perform_arithmetic_operation_08000ad8(result_var_1,input_param_4);\n  perform_arithmetic_operation_08000ad8(result_var_1,0x447a0000);\n  result_var_6 = extract_value_from_param_08001078();\n  result_var_1 = calculate_floating_point_08000adc(input_param_3,result_var_2);\n  result_var_1 = calculate_floating_point_08000adc(result_var_1,input_param_4);\n  perform_arithmetic_operation_08000ad8(result_var_1,0x447a0000);\n  result_var_7 = extract_value_from_param_08001078();\n  if (999 < (int)result_var_7) {\n    result_var_7 = 1000;\n  }\n  if (999 < (int)result_var_6) {\n    result_var_6 = 1000;\n  }\n  if (999 < (int)result_var_5) {\n    result_var_5 = 1000;\n  }\n  if (999 < (int)result_var_4) {\n    result_var_4 = 1000;\n  }\n  DAT_200002a0 = result_var_5 & ~((int)result_var_5 >> 0x1f);\n  DAT_200002a4 = result_var_4 & ~((int)result_var_4 >> 0x1f);\n  DAT_2000029c = result_var_6 & ~((int)result_var_6 >> 0x1f);\n  DAT_20000298 = result_var_7 & ~((int)result_var_7 >> 0x1f);\n  store_param_in_memory_08003fc4();\n  set_param_08003fd0(DAT_2000029c);\n  set_param_08003fdc(DAT_200002a0);\n  set_param_value_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800426c": "calculate_and_store_values_0800426c",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "result_var_1",
                "uVar2": "result_var_2",
                "uVar3": "result_var_3",
                "uVar4": "result_var_4",
                "uVar5": "result_var_5",
                "uVar6": "result_var_6",
                "uVar7": "result_var_7"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08001078",
                "FUN_08003fdc",
                "FUN_08003fd0",
                "FUN_08003fc4",
                "FUN_08000ad8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004300": {
            "entrypoint": "0x08004300",
            "current_name": "decode_and_process_data_08004300",
            "code": "\nvoid decodeAndProcessData_08004300(uint inputKey,byte *inputData,uint dataLength)\n\n{\n  uint processedData;\n  byte *currentByte;\n  \n  decode_and_process_data_08004c8c(&DAT_0800732e);\n  decode_binary_data_08004c18(dataLength & 0xff);\n  processedData = dataLength & 0xff ^ inputKey;\n  decode_binary_data_08004c18(inputKey);\n  for (currentByte = inputData; (int)currentByte - (int)inputData < (int)dataLength; currentByte = currentByte + 1) {\n    decode_binary_data_08004c18(*currentByte);\n    processedData = processedData ^ *currentByte;\n  }\n  decode_binary_data_08004c18(processedData);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004300": "decode_and_process_data_08004300",
                "param_1": "inputKey",
                "param_2": "inputData",
                "param_3": "dataLength",
                "uVar1": "processedData",
                "pbVar2": "currentByte"
            },
            "calling": [
                "FUN_08004348",
                "FUN_08004384",
                "FUN_08004410",
                "FUN_080043f0",
                "FUN_080043bc",
                "FUN_08004434",
                "FUN_08004458"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004348": {
            "entrypoint": "0x08004348",
            "current_name": "initialize_data_processing_08004348",
            "code": "\n\n\nvoid initializeDataProcessing_08004348(undefined4 arg1,uint data,undefined4 arg2)\n\n{\n  undefined4 dataAddress;\n  uint maskedData;\n  undefined4 arg3;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  dataAddress = 0x40003e9;\n  maskedData = data & 0xff000000;\n  arg3 = arg2;\n  decode_and_process_data_08004300(100,&dataAddress,7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004348": "initialize_data_processing_08004348",
                "param_1": "arg1",
                "param_2": "data",
                "param_3": "arg2",
                "local_10": "dataAddress",
                "local_c": "maskedData",
                "uStack_8": "arg3"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004384": {
            "entrypoint": "0x08004384",
            "current_name": "process_data_08004384",
            "code": "\n\n\nvoid process_data_08004384(undefined4 param1,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  undefined4 decoded_data_ptr;\n  undefined4 stack_ptr;\n  uint masked_param4;\n  \n  _DAT_200013bd = 0x2a0007;\n  decoded_data_ptr = _DAT_200013b9;\n  stack_ptr = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  masked_param4 = param4 & 0xff000000;\n  decode_and_process_data_08004384_08004300(0x65,&decoded_data_ptr,0xb,0,param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004384": "process_data_08004384",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "local_14": "decoded_data_ptr",
                "uStack_10": "stack_ptr",
                "local_c": "masked_param4"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043bc": {
            "entrypoint": "0x080043bc",
            "current_name": "copy_and_process_data_080043bc",
            "code": "\nvoid copyAndProcessData_080043bc(void)\n\n{\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 *destinationPointer;\n  undefined4 *sourcePointer;\n  undefined4 dataBuffer [2];\n  undefined2 indexBuffer [6];\n  \n  sourcePointer = (undefined4 *)&DAT_2000142a;\n  destinationPointer = dataBuffer;\n  do {\n    tempVar1 = *sourcePointer;\n    tempVar2 = sourcePointer[1];\n    sourcePointer = sourcePointer + 2;\n    *destinationPointer = tempVar1;\n    destinationPointer[1] = tempVar2;\n    destinationPointer = destinationPointer + 2;\n  } while (sourcePointer != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destinationPointer = DAT_2000143a;\n  decode_and_process_data_08004300(0x66,dataBuffer,0x12);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043bc": "copy_and_process_data_080043bc",
                "puVar4": "sourcePointer",
                "puVar3": "destinationPointer",
                "local_24": "dataBuffer",
                "local_1c": "indexBuffer",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080043f0": {
            "entrypoint": "0x080043f0",
            "current_name": "decode_and_process_data_080043f0",
            "code": "\n\n\nvoid decodeAndProcessData_080043f0(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 dataArr [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  dataArr[0] = input3;\n  decode_and_process_data_08004300(0x68,&data1,8,dataArr);\n  return;\n}\n\n",
            "renaming": {
                "FUN_080043f0": "decode_and_process_data_080043f0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "data1",
                "uStack_c": "data2",
                "auStack_8": "dataArr"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004410": {
            "entrypoint": "0x08004410",
            "current_name": "process_data_08004410",
            "code": "\nvoid processData_08004410(undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 constantValue;\n  undefined4 combinedValue;\n  undefined4 stackValue;\n  \n  constantValue = DAT_20001395;\n  combinedValue = CONCAT22((short)((uint)input2 >> 0x10),DAT_20001399);\n  stackValue = input3;\n  decode_and_process_data_08004300(0x6c,&constantValue,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004410": "process_data_08004410",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "local_10": "constantValue",
                "local_c": "combinedValue",
                "uStack_8": "stackValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004434": {
            "entrypoint": "0x08004434",
            "current_name": "decode_and_process_data_08004434",
            "code": "\nvoid decodeAndProcessData_08004434(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3)\n\n{\n  undefined4 decodedValue;\n  undefined4 concatenatedValue;\n  undefined4 stackValue;\n  \n  decodedValue = DAT_200014ab;\n  concatenatedValue = CONCAT22((short)((uint)inputParam2 >> 0x10),DAT_200014af);\n  stackValue = inputParam3;\n  decode_and_process_data_08004300(0x6d,&decodedValue,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004434": "decode_and_process_data_08004434",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "local_10": "decodedValue",
                "local_c": "concatenatedValue",
                "uStack_8": "stackValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004458": {
            "entrypoint": "0x08004458",
            "current_name": "copy_and_process_data_08004458",
            "code": "\nvoid copyAndProcessData_08004458(void)\n\n{\n  undefined4 *destinationPointer;\n  undefined4 *sourcePointer;\n  undefined4 temp;\n  undefined4 *currentDestination;\n  undefined4 *currentSource;\n  undefined4 decodedData [3];\n  undefined2 encodedData [10];\n  \n  destinationPointer = decodedData;\n  sourcePointer = &DAT_2000139b;\n  do {\n    currentSource = sourcePointer;\n    currentDestination = destinationPointer;\n    temp = currentSource[1];\n    *currentDestination = *currentSource;\n    currentDestination[1] = temp;\n    destinationPointer = currentDestination + 2;\n    sourcePointer = currentSource + 2;\n  } while (currentSource + 2 != (undefined4 *)0x200013b3);\n  currentDestination[2] = uRam200013b3;\n  *(undefined2 *)(currentDestination + 3) = *(undefined2 *)(currentSource + 3);\n  decode_and_process_data_08004300(0x70,decodedData,0x1e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004458": "copy_and_process_data_08004458",
                "puVar1": "destinationPointer",
                "puVar2": "sourcePointer",
                "uVar3": "temp",
                "puVar4": "currentDestination",
                "puVar5": "currentSource",
                "local_30": "decodedData",
                "local_24": "encodedData"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004300"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004490": {
            "entrypoint": "0x08004490",
            "current_name": "process_data_08004490",
            "code": "\nvoid processData_08004490(undefined4 errorString,undefined4 lineNumber)\n\n{\n  setParameterValue(0x40011000,0x4000,1);\n  setParameterValue(0x40011000,0x8000,0);\n  setParameterValue(0x40011000,0x2000,0);\n  do {\n    applyXOR(0x40011000,0x4000);\n    applyXOR(0x40011000,0x8000);\n    applyXOR(0x40011000,0x2000);\n    decodeAndProcessData(\"Error with \");\n    decodeAndProcessData(errorString);\n    decodeAndProcessData(\" at line: \");\n    initializeAndProcessData(lineNumber);\n    decodeBinaryData(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004490": "process_data_08004490",
                "param_1": "errorString",
                "param_2": "lineNumber",
                "set_param_value_08001424": "setParameterValue",
                "apply_xor_0800142e": "applyXOR",
                "decode_and_process_data_08004c8c": "decodeAndProcessData",
                "decode_binary_data_08004c18": "decodeBinaryData",
                "initialize_and_process_data_08004cac": "initializeAndProcessData"
            },
            "calling": [
                "FUN_080040b8",
                "FUN_0800407c",
                "FUN_08004514",
                "FUN_0800403c",
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_0800142e",
                "FUN_08004cac",
                "FUN_08001424",
                "FUN_08004c18",
                "thunk_FUN_08001168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004514": {
            "entrypoint": "0x08004514",
            "current_name": "initialize_peripherals_08004514",
            "code": "\nvoid initialize_peripherals_08004514(void)\n\n{\n  int configuration_result;\n  uint data_value;\n  undefined4 file_index;\n  int mpu9250_result;\n  undefined4 bit_manipulation_mask;\n  int mpu9250_value;\n  int peripherals_value;\n  undefined4 bit_manipulation_shift;\n  int initialize_value;\n  undefined4 local_values [4];\n  undefined4 constant_1;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  undefined4 constant_4;\n  undefined4 constant_5;\n  \n  constant_1 = 1;\n  constant_2 = 0x10;\n  mpu9250_result = 2;\n  constant_4 = 0;\n  local_values[0] = 2;\n  constant_3 = 2;\n  constant_5 = 0x380000;\n  configuration_result = check_and_update_configuration_08001b58(local_values);\n  if (configuration_result == 0) goto LAB_08004540;\n  file_index = 0x3c;\n  while( true ) {\n    configuration_result = process_data_08004490(\"../Src/peripherals.c\",file_index);\nLAB_08004540:\n    bit_manipulation_mask = 0xf;\n    bit_manipulation_shift = 0x400;\n    mpu9250_value = mpu9250_result;\n    peripherals_value = configuration_result;\n    initialize_value = configuration_result;\n    mpu9250_result = check_and_initialize_mpu9250_0800209c(&bit_manipulation_mask,mpu9250_result);\n    if (mpu9250_result == 0) break;\n    file_index = 0x49;\n  }\n  data_value = get_data_value_08002214();\n  set_initial_values_08001214(data_value / 1000);\n  set_flag_value_08001240(4);\n  apply_bit_manipulation_08001194(0xffffffff,0,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004514": "initialize_peripherals_08004514",
                "iVar1": "configuration_result",
                "uVar2": "data_value",
                "uVar3": "file_index",
                "iVar4": "mpu9250_result",
                "local_44": "bit_manipulation_mask",
                "local_40": "mpu9250_value",
                "local_3c": "peripherals_value",
                "local_38": "bit_manipulation_shift",
                "local_34": "initialize_value",
                "local_30": "local_values",
                "local_20": "constant_1",
                "local_1c": "constant_2",
                "local_14": "constant_3",
                "local_10": "constant_4",
                "local_c": "constant_5"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08004490",
                "FUN_08001b58",
                "FUN_08001194",
                "FUN_0800209c",
                "FUN_08002214",
                "FUN_08001240",
                "FUN_08001214"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800458c": {
            "entrypoint": "0x0800458c",
            "current_name": "initialize_and_update_peripherals_0800458c",
            "code": "\n\n\nvoid initialize_and_update_peripherals_0800458c(void)\n\n{\n  int status;\n  undefined4 value;\n  int count;\n  int data1;\n  int data2;\n  int data3;\n  int data4;\n  int data5;\n  int data6;\n  int data7;\n  int data8;\n  int data9;\n  int data10;\n  int data11;\n  int data12;\n  int data13;\n  undefined4 data14;\n  int data15;\n  \n  initialize_memory_08001128();\n  initialize_peripherals_08004514();\n  count = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_param_value_08001424(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_param_value_08001424(0x40010800,0x20,0);\n  data9 = 0xe000;\n  data10 = 1;\n  data12 = 2;\n  update_bits_08001264(0x40011000,&data9);\n  data9 = 0x20;\n  data10 = 1;\n  data12 = 2;\n  update_bits_08001264(0x40010800,&data9);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  status = update_data_08001754();\n  if (status == 0) goto LAB_0800463a;\n  value = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  status = process_data_08004490(\"../Src/peripherals.c\",value);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = status;\n                                  DAT_20001588 = status;\n                                  DAT_2000158c = status;\n                                  DAT_20001594 = status;\n                                  DAT_20001598 = status;\n                                  status = update_data_08002724(&DAT_2000157c);\n                                  if (status == 0) break;\n                                  value = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = count;\n                                DAT_200015c4 = status;\n                                DAT_200015cc = status;\n                                DAT_200015d0 = status;\n                                status = initialize_data_080023d0(&DAT_200015bc);\n                                if (status == 0) break;\n                                value = 0x88;\n                              }\n                              data1 = status;\n                              data2 = status;\n                              status = update_data_080025a4(&DAT_200015bc,&data1);\n                              if (status == 0) break;\n                              value = 0x8f;\n                            }\n                            data3 = 0x60;\n                            data4 = status;\n                            data5 = status;\n                            data6 = status;\n                            data7 = status;\n                            data8 = status;\n                            status = update_configuration_flags_0800245c(&DAT_200015bc,&data3,0xc);\n                            if (status == 0) break;\n                            value = 0x9a;\n                          }\n                          data14 = 0x2000;\n                          data9 = status;\n                          data10 = status;\n                          data11 = status;\n                          data12 = status;\n                          data13 = status;\n                          data15 = status;\n                          status = initialize_data_08002564(&DAT_200015bc,&data9);\n                          if (status == 0) break;\n                          value = 0xa6;\n                        }\n                        update_bits_based_on_value_08004e14(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = count;\n                        DAT_20001600 = status;\n                        DAT_20001608 = status;\n                        status = initialize_data_080023d0(&DAT_200015f8);\n                        if (status == 0) break;\n                        value = 0xc3;\n                      }\n                      data3 = status;\n                      data4 = status;\n                      status = update_data_080025a4(&DAT_200015f8,&data3);\n                      if (status == 0) break;\n                      value = 0xca;\n                    }\n                    data9 = 0x60;\n                    data10 = status;\n                    data11 = status;\n                    data13 = status;\n                    status = update_configuration_flags_0800245c(&DAT_200015f8,&data9,4);\n                    if (status == 0) break;\n                    value = 0xd3;\n                  }\n                  update_bits_based_on_value_08004e14(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = count;\n                  DAT_20001548 = status;\n                  DAT_20001550 = status;\n                  status = initialize_data_080023d0();\n                  if (status == 0) break;\n                  value = 0xf0;\n                }\n                data3 = 0;\n                data4 = 0;\n                status = update_data_080025a4(&DAT_20001540,&data3);\n                if (status == 0) break;\n                value = 0xf7;\n              }\n              data9 = 0x60;\n              data10 = status;\n              data11 = status;\n              data13 = status;\n              status = update_configuration_flags_0800245c(&DAT_20001540,&data9,8);\n              if (status == 0) break;\n              value = 0x100;\n            }\n            count = update_configuration_flags_0800245c(&DAT_20001540,&data9,0xc);\n            if (count == 0) break;\n            value = 0x105;\n          }\n          update_bits_based_on_value_08004e14(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = count;\n          DAT_200014d8 = count;\n          status = initialize_data_080023d0(&DAT_200014c8);\n          if (status == 0) break;\n          value = 0x122;\n        }\n        data3 = status;\n        data4 = status;\n        status = update_data_080025a4(&DAT_200014c8,&data3);\n        if (status == 0) break;\n        value = 0x129;\n      }\n      data9 = 0x60;\n      data10 = status;\n      data11 = status;\n      data13 = status;\n      status = update_configuration_flags_0800245c(&DAT_200014c8,&data9,8);\n      if (status == 0) break;\n      value = 0x132;\n    }\n    status = update_configuration_flags_0800245c(&DAT_200014c8,&data9,0xc);\n    if (status == 0) break;\n    value = 0x137;\n  }\n  update_bits_based_on_value_08004e14(&DAT_200014c8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800458c": "initialize_and_update_peripherals_0800458c",
                "iVar1": "status",
                "uVar2": "value",
                "iVar3": "count",
                "local_58": "data1",
                "local_54": "data2",
                "local_50": "data3",
                "local_4c": "data4",
                "local_48": "data5",
                "local_40": "data6",
                "local_3c": "data7",
                "local_38": "data8",
                "local_34": "data9",
                "local_30": "data10",
                "local_2c": "data11",
                "local_28": "data12",
                "local_24": "data13",
                "local_20": "data14",
                "local_1c": "data15"
            },
            "calling": [
                "FUN_08004028"
            ],
            "called": [
                "FUN_08004490",
                "FUN_080023d0",
                "FUN_08002564",
                "FUN_08001264",
                "FUN_08002724",
                "FUN_08001128",
                "FUN_080025a4",
                "FUN_0800245c",
                "FUN_08001424",
                "FUN_08004e14",
                "FUN_08001754",
                "FUN_08004514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800483c": {
            "entrypoint": "0x0800483c",
            "current_name": "calculate_result_0800483c",
            "code": "\nvoid calculate_result_0800483c(int *input_array)\n\n{\n  undefined4 float_result_1;\n  undefined4 float_result_2;\n  int temp_var_1;\n  int temp_var_2;\n  int temp_var_3;\n  \n  temp_var_2 = input_array[0xc];\n  float_result_1 = calculate_floating_point_08000adc(input_array[7],input_array[9]);\n  temp_var_2 = perform_arithmetic_operation_08000ad8(float_result_1,temp_var_2);\n  input_array[10] = temp_var_2;\n  if (*input_array == 3) {\n    temp_var_2 = is_string_empty_08001064(input_array[10],0);\n    if (temp_var_2 == 0) {\n      temp_var_2 = check_if_concatenation_empty_08001028(input_array[10],0xc3340000);\n    }\n    else {\n      temp_var_2 = is_string_empty_08001064(input_array[10],0x43340000);\n    }\n    if (temp_var_2 != 0) {\n      temp_var_3 = input_array[10];\n      float_result_1 = calculate_floating_point_08000cec(input_array[10],0x43b40000);\n      temp_var_2 = is_string_empty_08001064(input_array[10],0);\n      temp_var_1 = input_array[10];\n      if (temp_var_2 == 0) {\n        temp_var_1 = temp_var_1 + -0x80000000;\n      }\n      float_result_1 = calculate_floating_point_08000e54(float_result_1,temp_var_1);\n      temp_var_2 = perform_arithmetic_operation_08000ad8(temp_var_3,float_result_1);\n      input_array[10] = temp_var_2;\n    }\n  }\n  temp_var_3 = input_array[2];\n  temp_var_1 = input_array[3];\n  temp_var_2 = calculate_floating_point_08000cec(input_array[1],input_array[10]);\n  input_array[0xe] = temp_var_2;\n  temp_var_2 = calculate_floating_point_08000adc(input_array[10],input_array[0xf]);\n  input_array[0xf] = temp_var_2;\n  temp_var_2 = check_if_concatenation_empty_08001028(input_array[0xf],0xc3fa0000);\n  if (temp_var_2 == 0) {\n    temp_var_2 = is_string_empty_08001064(input_array[0xf],0x43fa0000);\n    if (temp_var_2 == 0) {\n      temp_var_2 = input_array[0xf];\n    }\n    else {\n      temp_var_2 = 0x43fa0000;\n    }\n  }\n  else {\n    temp_var_2 = -0x3c060000;\n  }\n  input_array[0xf] = temp_var_2;\n  temp_var_2 = perform_arithmetic_operation_08000ad8(input_array[0xc],input_array[0xd]);\n  input_array[0x10] = temp_var_2;\n  temp_var_2 = input_array[0xe];\n  float_result_1 = calculate_floating_point_08000cec(temp_var_3,input_array[0xf]);\n  float_result_1 = calculate_floating_point_08000adc(float_result_1,temp_var_2);\n  float_result_2 = calculate_floating_point_08000cec(temp_var_1,input_array[0x10]);\n  temp_var_2 = perform_arithmetic_operation_08000ad8(float_result_1,float_result_2);\n  input_array[0x12] = temp_var_2;\n  float_result_1 = calculate_u_var3_08000c44(input_array[0x13]);\n  temp_var_2 = check_if_concatenation_empty_08001028(input_array[0x12],0xc3fa0000);\n  if (temp_var_2 == 0) {\n    temp_var_2 = is_string_empty_08001064(input_array[0x12],0x43fa0000);\n    if (temp_var_2 == 0) {\n      temp_var_2 = input_array[0x12];\n    }\n    else {\n      temp_var_2 = 0x43fa0000;\n    }\n  }\n  else {\n    temp_var_2 = -0x3c060000;\n  }\n  temp_var_2 = calculate_floating_point_08000cec(temp_var_2,float_result_1);\n  input_array[0x12] = temp_var_2;\n  input_array[0xd] = input_array[0xc];\n  input_array[0xb] = input_array[10];\n  input_array[0x15] = input_array[0x14];\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800483c": "calculate_result_0800483c",
                "param_1": "input_array",
                "uVar1": "float_result_1",
                "uVar2": "float_result_2",
                "iVar3": "temp_var_1",
                "iVar4": "temp_var_2",
                "iVar5": "temp_var_3"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000adc",
                "FUN_08000e54",
                "FUN_08000ad8",
                "FUN_08000c44",
                "FUN_08000cec",
                "FUN_08001064",
                "FUN_08001028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a30": {
            "entrypoint": "0x08004a30",
            "current_name": "calculate_data_08004a30",
            "code": "\nvoid calculateData_08004a30(void)\n\n{\n  undefined4 data;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      data = get_data_from_global_variable_08003068();\n      DAT_20000068 = calculate_floating_point_08000cec(data,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      data = get_data_from_global_variable_08003068();\n      DAT_2000007c = calculate_floating_point_08000cec(data,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a30": "calculate_data_08004a30",
                "uVar1": "data"
            },
            "calling": [
                "FUN_08004a84"
            ],
            "called": [
                "FUN_08000cec",
                "FUN_08003068"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004a84": {
            "entrypoint": "0x08004a84",
            "current_name": "perform_data_processing_08004a84",
            "code": "\nvoid perform_data_processing_08004a84(void)\n\n{\n  int iVar1;\n  \n  DAT_200000d8 = calculate_floating_point_3();\n  DAT_20000134 = calculate_result_2();\n  DAT_20000190 = process_concatenation();\n  calculate_data();\n  iVar1 = is_string_empty(DAT_200000d8,0);\n  if (iVar1 == 0) {\n    iVar1 = check_concatenation_empty(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    iVar1 = is_string_empty(DAT_200000d8,0x42a00000);\n  }\n  if (iVar1 == 0) {\n    iVar1 = is_string_empty(DAT_20000134,0);\n    if (iVar1 == 0) {\n      iVar1 = check_concatenation_empty(DAT_20000134,0xc2a00000);\n    }\n    else {\n      iVar1 = is_string_empty(DAT_20000134,0x42a00000);\n    }\n    if (iVar1 == 0) {\n      set_parameter_values(1,1);\n      calculate_result(&DAT_200000a8);\n      calculate_result(&DAT_20000104);\n      calculate_result(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculate_result(&DAT_2000004c);\n        calculate_floating_point_1(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initialize_parameters();\n      }\n      else {\n        calculate_and_store_values_0800426c(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculate_floating_point_2(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = decode_unsigned_integer();\n      calculate_floating_point_2(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = decode_unsigned_integer();\n      return;\n    }\n  }\n  initialize_parameters();\n  set_parameter_values(0,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004a84": "perform_data_processing_08004a84",
                "initialize_parameters_080041c4": "initialize_parameters",
                "set_param_values_08003f3c": "set_parameter_values",
                "calculate_result_0800483c": "calculate_result",
                "calculate_floating_point_08000adc": "calculate_floating_point_1",
                "calculate_floating_point_08000cec": "calculate_floating_point_2",
                "is_string_empty_08001064": "is_string_empty",
                "check_if_concatenation_empty_08001028": "check_concatenation_empty",
                "decode_unsigned_integer_080010c4": "decode_unsigned_integer",
                "perform_floating_point_calculation_08002ec0": "calculate_floating_point_3",
                "calculate_result_08002ed4": "calculate_result_2",
                "process_concatenation_08002ee8": "process_concatenation",
                "calculate_data_08004a30": "calculate_data"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_08004a30",
                "FUN_08002ee8",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_080041c4",
                "FUN_080010c4",
                "FUN_08002ed4",
                "FUN_08001064",
                "FUN_0800483c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c18": {
            "entrypoint": "0x08004c18",
            "current_name": "decode_binary_data_08004c18",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 decode_binary_data_08004c18(undefined input_data)\n\n{\n  int *ptr1;\n  int value1;\n  int value2;\n  ushort *ptr2;\n  \n  DAT_20001636._0_1_ = input_data;\n  ptr2 = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      value1 = get_data_value_0800115c();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        value2 = get_data_value_0800115c();\n      } while ((uint)(value2 - value1) < 6);\nLAB_0800281c:\n      ptr1 = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      ptr1[3] = ptr1[3] & 0xffffffdf;\n      ptr1[3] = ptr1[3] & 0xfffffeff;\n      ptr1[5] = ptr1[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      value1 = get_data_value_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        value2 = get_data_value_0800115c();\n        if (5 < (uint)(value2 - value1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *ptr2 & 0x1ff;\n      if (DAT_2000158c == 0) {\n        ptr2 = ptr2 + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      value1 = get_data_value_0800115c();\n      while (-1 < *DAT_2000157c << 0x18) {\n        value2 = get_data_value_0800115c();\n        if (5 < (uint)(value2 - value1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)ptr2;\n    }\n    ptr2 = (ushort *)((int)ptr2 + 1);\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_08004c18": "decode_binary_data_08004c18",
                "param_1": "input_data",
                "piVar1": "ptr1",
                "iVar2": "value1",
                "iVar3": "value2",
                "puVar4": "ptr2"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004c8c"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c30": {
            "entrypoint": "0x08004c30",
            "current_name": "process_data_08004c30",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * process_data_08004c30(int *input_data)\n\n{\n  int temp_var1;\n  \n  if (*input_data != 0x40013800) {\n    return input_data;\n  }\n  increment_and_store_value_08003ec8(&DAT_20000364,DAT_20001634);\n  temp_var1 = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(temp_var1 + 0x14) = *(uint *)(temp_var1 + 0x14) | 1;\n    *(uint *)(temp_var1 + 0xc) = *(uint *)(temp_var1 + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "renaming": {
                "FUN_08004c30": "process_data_08004c30",
                "param_1": "input_data",
                "iVar1": "temp_var1"
            },
            "calling": [
                "FUN_0800290c"
            ],
            "called": [
                "FUN_08003ec8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c64": {
            "entrypoint": "0x08004c64",
            "current_name": "initialize_data_08004c64",
            "code": "\nvoid initializeData_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "calling": [
                "FUN_08004c70"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c70": {
            "entrypoint": "0x08004c70",
            "current_name": "initialize_and_check_status_08004c70",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_and_check_status_08004c70(void)\n\n{\n  int pointer_to_data;\n  \n  initialize_data();\n  pointer_to_data = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(pointer_to_data + 0x14) = *(uint *)(pointer_to_data + 0x14) | 1;\n    *(uint *)(pointer_to_data + 0xc) = *(uint *)(pointer_to_data + 0xc) | 0x20;\n    return 0;\n  }\n  return 2;\n}\n\n",
            "renaming": {
                "FUN_08004c70": "initialize_and_check_status_08004c70",
                "iVar1": "pointer_to_data",
                "initialize_data_08004c64": "initialize_data"
            },
            "calling": [
                "FUN_08004194"
            ],
            "called": [
                "FUN_08004c64"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "entrypoint": "0x08004c8c",
            "current_name": "decode_and_process_data_08004c8c",
            "code": "\nvoid decode_and_process_data_08004c8c(undefined *data_buffer)\n\n{\n  uint end_position;\n  undefined *current_position;\n  \n  current_position = data_buffer;\n  while( true ) {\n    end_position = find_end_of_string_08000150(data_buffer);\n    if (end_position <= (uint)((int)current_position - (int)data_buffer)) break;\n    decode_binary_data_08004c18(*current_position);\n    current_position = current_position + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004c8c": "decode_and_process_data_08004c8c",
                "param_1": "data_buffer",
                "uVar1": "end_position",
                "puVar2": "current_position"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08004300",
                "FUN_08004cac"
            ],
            "called": [
                "FUN_08000150",
                "FUN_08004c18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004cac": {
            "entrypoint": "0x08004cac",
            "current_name": "initialize_and_process_data_08004cac",
            "code": "\nvoid initialize_and_process_data_08004cac(undefined4 input_param)\n\n{\n  initialize_data_08004ffc(&DAT_20001636,&DAT_0800735e,input_param);\n  decode_and_process_data(&DAT_20001636);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004cac": "initialize_and_process_data_08004cac",
                "param_1": "input_param",
                "decode_and_process_data_08004c8c": "decode_and_process_data"
            },
            "calling": [
                "FUN_08004490"
            ],
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "entrypoint": "0x08004ccc",
            "current_name": "configure_memory_08004ccc",
            "code": "\n\n\nvoid configureMemory_08004ccc(undefined4 configParam1,undefined4 configParam2,undefined4 configParam3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  setMemoryConfiguration(3,configParam2,_DAT_40021018,1,configParam1,1,configParam3);\n  applyBitManipulation(0xfffffff4,0);\n  applyBitManipulation(0xfffffff5,0);\n  applyBitManipulation(0xfffffff6,0);\n  applyBitManipulation(0xfffffffb,0);\n  applyBitManipulation(0xfffffffc,0);\n  applyBitManipulation(0xfffffffe,0);\n  applyBitManipulation(0xffffffff,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ccc": "configure_memory_08004ccc",
                "param_1": "configParam1",
                "param_2": "configParam2",
                "param_3": "configParam3",
                "set_memory_configuration_08001170": "setMemoryConfiguration",
                "apply_bit_manipulation_08001194": "applyBitManipulation"
            },
            "calling": [
                "FUN_08001128"
            ],
            "called": [
                "FUN_08001194",
                "FUN_08001170"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d48": {
            "entrypoint": "0x08004d48",
            "current_name": "update_bits_if_needed_08004d48",
            "code": "\n\n\nvoid updateBitsIfNeeded_08004d48(int *ptrValue,undefined4 value)\n\n{\n  undefined4 var1;\n  undefined4 var2;\n  \n  if (*ptrValue == 0x40005400) {\n    var1 = 0xc0;\n    var2 = 0x12;\n    updateBits(0x40010c00,&var1,0x40005400,3,ptrValue,value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d48": "update_bits_if_needed_08004d48",
                "param_1": "ptrValue",
                "param_2": "value",
                "local_18": "var1",
                "local_14": "var2",
                "update_bits_08001264": "updateBits"
            },
            "calling": [
                "FUN_08001754"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "entrypoint": "0x08004d8c",
            "current_name": "update_data_flags_08004d8c",
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid updateDataFlags_08004d8c(int *param_1)\n\n{\n  int value;\n  \n  value = *param_1;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "iVar1": "value"
            },
            "calling": [
                "FUN_080023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e14": {
            "entrypoint": "0x08004e14",
            "current_name": "update_bits_based_on_value_08004e14",
            "code": "\nvoid updateBitsBasedOnValue_08004e14(int *inputValue,undefined4 unusedParam,undefined4 bitmask)\n\n{\n  undefined4 newBitmask;\n  int value;\n  undefined4 updatedBits;\n  undefined4 unusedVar1;\n  undefined4 unusedVar2;\n  undefined4 unusedVar3;\n  \n  value = *inputValue;\n  if (value == 0x40012c00) {\n    updatedBits = 0x800;\n  }\n  else {\n    if (value != 0x40000000) {\n      if (value == 0x40000400) {\n        updatedBits = 3;\n      }\n      else {\n        if (value != 0x40000800) {\n          return;\n        }\n        updatedBits = 0x300;\n      }\n      newBitmask = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    updatedBits = 2;\n  }\n  newBitmask = 0x40010800;\nLAB_08004e2e:\n  unusedVar3 = 2;\n  unusedVar1 = 2;\n  unusedVar2 = bitmask;\n  update_bits_08001264(newBitmask,&updatedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e14": "update_bits_based_on_value_08004e14",
                "param_1": "inputValue",
                "param_2": "unusedParam",
                "param_3": "bitmask",
                "uVar1": "newBitmask",
                "iVar2": "value",
                "local_18": "updatedBits",
                "local_14": "unusedVar1",
                "uStack_10": "unusedVar2",
                "local_c": "unusedVar3"
            },
            "calling": [
                "FUN_0800458c"
            ],
            "called": [
                "FUN_08001264"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "entrypoint": "0x08004e7c",
            "current_name": "update_bits_if_value_is_correct_08004e7c",
            "code": "\n\n\nvoid updateBitsIfValueIsCorrect_08004e7c(int *input)\n\n{\n  undefined4 firstValueBits;\n  undefined4 secondValueBits;\n  undefined4 thirdValueBits;\n  undefined4 fourthValue;\n  \n  if (*input == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    firstValueBits = 0x200;\n    secondValueBits = 2;\n    fourthValue = 3;\n    updateBits(0x40010800,&firstValueBits);\n    firstValueBits = 0x400;\n    secondValueBits = 0;\n    thirdValueBits = 0;\n    updateBits(0x40010800,&firstValueBits);\n    performBitManipulation(0x25,0,0);\n    setBitInArray(0x25);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004e7c": "update_bits_if_value_is_correct_08004e7c",
                "param_1": "input",
                "local_18": "firstValueBits",
                "local_14": "secondValueBits",
                "local_10": "thirdValueBits",
                "local_c": "fourthValue",
                "update_bits_08001264": "updateBits",
                "apply_bit_manipulation_08001194": "performBitManipulation",
                "set_bit_in_array_080011fc": "setBitInArray"
            },
            "calling": [
                "FUN_08002724"
            ],
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004f10": {
            "entrypoint": "0x08004f10",
            "current_name": "set_memory_configuration_08004f10",
            "code": "\n\n\nvoid setMemoryConfiguration_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004f10": "set_memory_configuration_08004f10"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "entrypoint": "0x08004f60",
            "current_name": "get_data_from_memory_thunk_0800115c",
            "code": "\nundefined4 get_data_from_memory_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "renaming": {
                "thunk_FUN_0800115c": "get_data_from_memory_thunk_0800115c"
            },
            "calling": [
                "FUN_08002f28"
            ],
            "called": [
                "FUN_0800115c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "entrypoint": "0x08004f64",
            "current_name": "thunk_FUNC_08001168",
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "calling": [
                "FUN_08004490",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_0800403c"
            ],
            "called": [
                "FUN_08001168"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x08004f68",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  set_memory_configuration_08004f10();\n  execute_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  continuous_sensor_data_processing_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_08004fb4",
                "FUN_080041ae",
                "FUN_08004f10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "entrypoint": "0x08004fb4",
            "current_name": "execute_functions_08004fb4",
            "code": "\nvoid executeFunctions_08004fb4(void)\n\n{\n  int counter;\n  \n  for (counter = 0; counter != 0; counter = counter + 1) {\n    (*(code *)(&DAT_08007440)[counter])();\n  }\n  FUNC_080072d4();\n  for (counter = 0; counter != 1; counter = counter + 1) {\n    (*(code *)(&DAT_08007440)[counter])();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004fb4": "execute_functions_08004fb4",
                "iVar1": "counter"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "entrypoint": "0x08004ffc",
            "current_name": "initialize_data_08004ffc",
            "code": "\nvoid initializeData_08004ffc(undefined *dataPointer,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined *localDataArray [2];\n  undefined4 maximumValue;\n  undefined2 arraySize;\n  undefined2 defaultValue;\n  undefined *currentDataPointer;\n  undefined4 maximumValue2;\n  undefined4 stackValue1;\n  undefined4 stackValue2;\n  undefined4 stackValue3;\n  \n  arraySize = 0x208;\n  maximumValue = 0x7fffffff;\n  maximumValue2 = 0x7fffffff;\n  defaultValue = 0xffff;\n  localDataArray[0] = dataPointer;\n  currentDataPointer = dataPointer;\n  stackValue1 = value1;\n  stackValue2 = value2;\n  stackValue3 = value3;\n  extract_and_convert_data_080050fc(DAT_200001c0,localDataArray,value1);\n  *localDataArray[0] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_08004ffc": "initialize_data_08004ffc",
                "param_1": "dataPointer",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "local_78": "localDataArray",
                "local_70": "maximumValue",
                "local_6c": "arraySize",
                "local_6a": "defaultValue",
                "local_68": "currentDataPointer",
                "local_64": "maximumValue2",
                "uStack_c": "stackValue1",
                "uStack_8": "stackValue2",
                "uStack_4": "stackValue3"
            },
            "calling": [
                "FUN_08004cac"
            ],
            "called": [
                "FUN_080050fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005044": {
            "entrypoint": "0x08005044",
            "current_name": "resize_and_copy_data_08005044",
            "code": "\nundefined4 resizeAndCopyData_08005044(undefined4 *outputBuffer,int *inputBuffer,undefined4 inputSize,uint copySize)\n\n{\n  int newBuffer;\n  uint newBufferSize;\n  uint currentBufferSize;\n  int offset;\n  \n  currentBufferSize = inputBuffer[2];\n  if ((currentBufferSize <= copySize) && ((*(ushort *)(inputBuffer + 3) & 0x480) != 0)) {\n    offset = *inputBuffer - inputBuffer[4];\n    currentBufferSize = (uint)(inputBuffer[5] * 3) / 2;\n    newBufferSize = copySize + 1 + offset;\n    if (currentBufferSize < newBufferSize) {\n      currentBufferSize = newBufferSize;\n    }\n    if ((int)((uint)*(ushort *)(inputBuffer + 3) << 0x15) < 0) {\n      newBuffer = resizeMemoryBlock(outputBuffer,currentBufferSize);\n      if (newBuffer == 0) {\nLAB_0800508a:\n        *outputBuffer = 0xc;\n        *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copyData(newBuffer,inputBuffer[4],offset);\n      *(ushort *)(inputBuffer + 3) = *(ushort *)(inputBuffer + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      newBuffer = processData(outputBuffer,inputBuffer[4],currentBufferSize);\n      if (newBuffer == 0) {\n        reverseLinkedList(outputBuffer,inputBuffer[4]);\n        goto LAB_0800508a;\n      }\n    }\n    inputBuffer[4] = newBuffer;\n    *inputBuffer = newBuffer + offset;\n    inputBuffer[5] = currentBufferSize;\n    inputBuffer[2] = currentBufferSize - offset;\n    currentBufferSize = copySize;\n  }\n  if (copySize <= currentBufferSize) {\n    currentBufferSize = copySize;\n  }\n  copyAndReverse(*inputBuffer,inputSize,currentBufferSize);\n  inputBuffer[2] = inputBuffer[2] - currentBufferSize;\n  *inputBuffer = currentBufferSize + *inputBuffer;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005044": "resize_and_copy_data_08005044",
                "param_1": "outputBuffer",
                "param_2": "inputBuffer",
                "param_3": "inputSize",
                "param_4": "copySize",
                "iVar1": "newBuffer",
                "uVar2": "newBufferSize",
                "uVar3": "currentBufferSize",
                "iVar4": "offset",
                "resize_memory_block_08005714": "resizeMemoryBlock",
                "copy_data_08005630": "copyData",
                "reverse_linked_list_0800567c": "reverseLinkedList",
                "process_data_080057d0": "processData",
                "copy_and_reverse_08005646": "copyAndReverse"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005646",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080050fc": {
            "entrypoint": "0x080050fc",
            "current_name": "extract_and_convert_data_080050fc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint extract_and_convert_data_080050fc(undefined4 *data_output,int *memory_block,byte *data_input,int *additional_memory)\n\n{\n  int result;\n  int resize_result;\n  int *local_counter;\n  bool is_numeric;\n  byte *current_byte;\n  byte *next_byte;\n  int conversion_result;\n  int *additional_memory_counter;\n  uint flags;\n  int decimal_counter;\n  undefined4 reserved;\n  int additional_value;\n  int total_processed;\n  byte conversion_type;\n  undefined default_flag_1;\n  undefined default_flag_2;\n  undefined default_flag_3;\n  undefined4 default_reserved;\n  \n  additional_memory_counter = additional_memory;\n  if (((int)((uint)*(ushort *)(memory_block + 3) << 0x18) < 0) && (memory_block[4] == 0)) {\n    result = resize_memory_block_08005714(data_output,0x40);\n    *memory_block = result;\n    memory_block[4] = result;\n    if (result == 0) {\n      *data_output = 0xc;\n      return -1;\n    }\n    memory_block[5] = 0x40;\n  }\n  total_processed = 0;\n  default_flag_1 = 0x20;\n  default_flag_2 = 0x30;\n  current_byte = data_input;\nLAB_08005146:\n  next_byte = current_byte;\n  if (*next_byte != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_byte = next_byte + 1;\n  if (*next_byte != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)next_byte - (int)data_input;\n  if (result != 0) {\n    resize_result = resize_and_copy_data_08005044(data_output,memory_block,data_input,result);\n    if (resize_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(memory_block + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_processed;\n    }\n    total_processed = total_processed + result;\n  }\n  if (*next_byte == 0) goto LAB_080052ac;\n  flags = 0;\n  additional_value = 0;\n  decimal_counter = -1;\n  reserved = 0;\n  default_flag_3 = 0;\n  default_reserved = 0;\n  current_byte = next_byte + 1;\n  while( true ) {\n    result = find_character_08005614(&DAT_08007379,*current_byte);\n    data_input = current_byte + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    current_byte = data_input;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    default_flag_3 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    default_flag_3 = 0x2b;\n  }\n  if (*current_byte == 0x2a) {\n    local_counter = additional_memory_counter + 1;\n    result = *additional_memory_counter;\n    additional_memory_counter = local_counter;\n    if (result < 0) {\n      additional_value = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_numeric = false;\n    result = additional_value;\n    data_input = current_byte;\n    while( true ) {\n      if (9 < *data_input - 0x30) break;\n      result = result * 10 + (*data_input - 0x30);\n      is_numeric = true;\n      data_input = data_input + 1;\n    }\n    if (!is_numeric) goto LAB_080051fc;\n  }\n  additional_value = result;\nLAB_080051fc:\n  if (*data_input == 0x2e) {\n    if (data_input[1] == 0x2a) {\n      data_input = data_input + 2;\n      local_counter = additional_memory_counter + 1;\n      decimal_counter = *additional_memory_counter;\n      additional_memory_counter = local_counter;\n      if (decimal_counter < 0) {\n        decimal_counter = -1;\n      }\n    }\n    else {\n      is_numeric = false;\n      result = 0;\n      decimal_counter = 0;\n      while( true ) {\n        data_input = data_input + 1;\n        if (9 < *data_input - 0x30) break;\n        result = result * 10 + (*data_input - 0x30);\n        is_numeric = true;\n      }\n      if (is_numeric) {\n        decimal_counter = result;\n      }\n    }\n  }\n  result = find_character_08005614(&DAT_0800737f,*data_input,3);\n  if (result != 0) {\n    data_input = data_input + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  conversion_type = *data_input;\n  data_input = data_input + 1;\n  result = find_character_08005614(\"efgEFG\",conversion_type,6);\n  if (result == 0) {\n    conversion_result = process_and_convert_080053d4(data_output,&flags,memory_block,0x8005045,&additional_memory_counter);\n    if (conversion_result == -1) goto LAB_080052ac;\n  }\n  else {\n    additional_memory_counter = (int *)(((int)additional_memory_counter + 7U & 0xfffffff8) + 8);\n  }\n  total_processed = total_processed + conversion_result;\n  current_byte = data_input;\n  goto LAB_08005146;\n}\n\n",
            "renaming": {
                "FUN_080050fc": "extract_and_convert_data_080050fc",
                "param_1": "data_output",
                "param_2": "memory_block",
                "param_3": "data_input",
                "param_4": "additional_memory",
                "iVar1": "result",
                "iVar2": "resize_result",
                "piVar3": "local_counter",
                "bVar4": "is_numeric",
                "pbVar5": "current_byte",
                "pbVar6": "next_byte",
                "unaff_r9": "conversion_result",
                "local_8c": "additional_memory_counter",
                "local_88": "flags",
                "local_84": "decimal_counter",
                "local_80": "reserved",
                "local_7c": "additional_value",
                "local_74": "total_processed",
                "local_70": "conversion_type",
                "local_6f": "default_flag_1",
                "local_6e": "default_flag_2",
                "local_45": "default_flag_3",
                "local_30": "default_reserved"
            },
            "calling": [
                "FUN_08004ffc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_08005714",
                "FUN_080053d4",
                "FUN_08005044"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080052e4": {
            "entrypoint": "0x080052e4",
            "current_name": "process_data_080052e4",
            "code": "\nundefined4\nprocess_data_080052e4(undefined4 input_value,uint *data_array,uint *result,undefined4 param,code *callback_func)\n\n{\n  int index_1;\n  int index_2;\n  uint size;\n  uint offset;\n  bool check_flag;\n  \n  size = data_array[4];\n  if ((int)data_array[4] < (int)data_array[2]) {\n    size = data_array[2];\n  }\n  *result = size;\n  if (*(char *)((int)data_array + 0x43) != '\\0') {\n    *result = size + 1;\n  }\n  if ((int)(*data_array << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*data_array & 6) == 0) {\n    for (index_1 = 0; index_1 < (int)(data_array[3] - *result); index_1 = index_1 + 1) {\n      index_2 = (*callback_func)(input_value,param,(int)data_array + 0x19,1);\n      if (index_2 == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  size = (uint)*(byte *)((int)data_array + 0x43);\n  if (size != 0) {\n    size = 1;\n  }\n  offset = size;\n  if ((int)(*data_array << 0x1a) < 0) {\n    *(undefined *)((int)data_array + size + 0x43) = 0x30;\n    offset = size + 2;\n    *(undefined *)((int)data_array + size + 0x44) = *(undefined *)((int)data_array + 0x45);\n  }\n  index_1 = (*callback_func)(input_value,param,(int)data_array + 0x43,offset);\n  if (index_1 != -1) {\n    size = data_array[3];\n    check_flag = (*data_array & 6) != 4;\n    if (check_flag) {\n      size = 0;\n    }\n    offset = 0;\n    if (!check_flag) {\n      size = size - *result;\n    }\n    if (!check_flag) {\n      size = size & ~((int)size >> 0x1f);\n    }\n    if ((int)data_array[4] < (int)data_array[2]) {\n      size = size + (data_array[2] - data_array[4]);\n    }\n    while( true ) {\n      if (size == offset) {\n        return 0;\n      }\n      index_1 = (*callback_func)(input_value,param,(int)data_array + 0x1a,1);\n      if (index_1 == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_080052e4": "process_data_080052e4",
                "param_1": "input_value",
                "param_2": "data_array",
                "param_3": "result",
                "param_4": "param",
                "param_5": "callback_func",
                "iVar1": "index_1",
                "iVar2": "index_2",
                "uVar3": "size",
                "uVar4": "offset",
                "bVar5": "check_flag"
            },
            "calling": [
                "FUN_080053d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080053d4": {
            "entrypoint": "0x080053d4",
            "current_name": "process_and_convert_080053d4",
            "code": "\nuint process_and_convert_080053d4(undefined4 param1,uint *param2,undefined4 param3,code *param4,uint **param5)\n\n{\n  byte byteVar;\n  int intVar1;\n  uint *pointerVar;\n  int intVar2;\n  char *charVar1;\n  uint uintVar1;\n  uint **ppuVar7;\n  char **ppcVar8;\n  uint uintVar2;\n  uint uintVar3;\n  char *charVar2;\n  char *charVar3;\n  uint localArray [2];\n  \n  byteVar = *(byte *)(param2 + 6);\n  charVar3 = (char *)((int)param2 + 0x43);\n  if (byteVar != 0x6e) {\n    if (byteVar < 0x6f) {\n      if (byteVar != 99) {\n        if (byteVar < 100) {\n          if (byteVar == 0) goto LAB_0800558e;\n          if (byteVar != 0x58) goto LAB_08005404;\n          *(undefined *)((int)param2 + 0x45) = 0x58;\n          charVar1 = \"0123456789ABCDEF\";\nLAB_0800551e:\n          uintVar1 = *param2;\n          pointerVar = *param5;\n          *param5 = pointerVar + 1;\n          if (((uintVar1 & 0x80) == 0) && ((int)(uintVar1 << 0x19) < 0)) {\n            uintVar2 = (uint)*(ushort *)pointerVar;\n          }\n          else {\n            uintVar2 = *pointerVar;\n          }\n          if ((int)(uintVar1 << 0x1f) < 0) {\n            *param2 = uintVar1 | 0x20;\n          }\n          if (uintVar2 == 0) {\n            *param2 = *param2 & 0xffffffdf;\n          }\n          uintVar1 = 0x10;\nLAB_080054b4:\n          *(undefined *)((int)param2 + 0x43) = 0;\n        }\n        else {\n          if ((byteVar != 100) && (byteVar != 0x69)) goto LAB_08005404;\n          uintVar2 = *param2;\n          pointerVar = *param5;\n          if ((uintVar2 & 0x80) == 0) {\n            *param5 = pointerVar + 1;\n            if ((uintVar2 & 0x40) == 0) goto LAB_08005424;\n            uintVar2 = (uint)(short)*(ushort *)pointerVar;\n          }\n          else {\n            *param5 = pointerVar + 1;\nLAB_08005424:\n            uintVar2 = *pointerVar;\n          }\n          if ((int)uintVar2 < 0) {\n            uintVar2 = -uintVar2;\n            *(undefined *)((int)param2 + 0x43) = 0x2d;\n          }\n          charVar1 = \"0123456789ABCDEF\";\n          uintVar1 = 10;\n        }\n        uintVar3 = param2[1];\n        param2[2] = uintVar3;\n        charVar2 = charVar3;\n        if ((int)uintVar3 < 0) {\n          if (uintVar2 != 0) goto LAB_08005552;\nLAB_08005600:\n          *(char *)((int)param2 + 0x42) = *charVar1;\n          charVar2 = (char *)((int)param2 + 0x42);\n        }\n        else {\n          *param2 = *param2 & 0xfffffffb;\n          if (uintVar2 == 0) {\n            if (uintVar3 != 0) goto LAB_08005600;\n          }\n          else {\nLAB_08005552:\n            do {\n              uintVar3 = uintVar2 / uintVar1;\n              charVar2 = charVar2 + -1;\n              *charVar2 = charVar1[uintVar2 - uintVar1 * uintVar3];\n              uintVar2 = uintVar3;\n            } while (uintVar3 != 0);\n          }\n        }\n        if (((uintVar1 == 8) && ((int)(*param2 << 0x1f) < 0)) && ((int)param2[1] <= (int)param2[4]))\n        {\n          charVar2[-1] = '0';\n          charVar2 = charVar2 + -1;\n        }\n        param2[4] = (int)charVar3 - (int)charVar2;\n        charVar3 = charVar2;\n        goto LAB_080054fa;\n      }\n      pointerVar = *param5;\n      *param5 = pointerVar + 1;\n      *(char *)((int)param2 + 0x42) = (char)*pointerVar;\nLAB_08005464:\n      charVar3 = (char *)((int)param2 + 0x42);\n      uintVar2 = 1;\n    }\n    else {\n      if (byteVar != 0x73) {\n        if (byteVar < 0x74) {\n          if (byteVar == 0x6f) {\nLAB_0800548a:\n            uintVar2 = *param2;\n            pointerVar = *param5;\n            if ((uintVar2 & 0x80) == 0) {\n              *param5 = pointerVar + 1;\n              if ((uintVar2 & 0x40) == 0) goto LAB_08005498;\n              uintVar2 = (uint)*(ushort *)pointerVar;\n            }\n            else {\n              *param5 = pointerVar + 1;\nLAB_08005498:\n              uintVar2 = *pointerVar;\n            }\n            if (byteVar == 0x6f) {\n              uintVar1 = 8;\n            }\n            else {\n              uintVar1 = 10;\n            }\n            charVar1 = \"0123456789ABCDEF\";\n            goto LAB_080054b4;\n          }\n          if (byteVar == 0x70) {\n            *param2 = *param2 | 0x20;\nLAB_0800544a:\n            charVar1 = \"0123456789abcdef\";\n            *(undefined *)((int)param2 + 0x45) = 0x78;\n            goto LAB_0800551e;\n          }\n        }\n        else {\n          if (byteVar == 0x75) goto LAB_0800548a;\n          if (byteVar == 0x78) goto LAB_0800544a;\n        }\nLAB_08005404:\n        *(byte *)((int)param2 + 0x42) = byteVar;\n        goto LAB_08005464;\n      }\n      ppcVar8 = (char **)*param5;\n      *param5 = (uint *)(ppcVar8 + 1);\n      charVar3 = *ppcVar8;\n      intVar1 = find_character_08005614(charVar3,0,param2[1]);\n      if (intVar1 != 0) {\n        param2[1] = intVar1 - (int)charVar3;\n      }\n      uintVar2 = param2[1];\n    }\n    param2[4] = uintVar2;\n    *(undefined *)((int)param2 + 0x43) = 0;\n    goto LAB_080054fa;\n  }\n  uintVar2 = *param2;\n  ppuVar7 = (uint **)*param5;\n  uintVar1 = param2[5];\n  if ((uintVar2 & 0x80) == 0) {\n    *param5 = (uint *)(ppuVar7 + 1);\n    pointerVar = *ppuVar7;\n    if ((uintVar2 & 0x40) == 0) goto LAB_0800557a;\n    *(short *)pointerVar = (short)uintVar1;\n  }\n  else {\n    *param5 = (uint *)(ppuVar7 + 1);\n    pointerVar = *ppuVar7;\nLAB_0800557a:\n    *pointerVar = uintVar1;\n  }\nLAB_0800558e:\n  param2[4] = 0;\nLAB_080054fa:\n  intVar1 = process_data_080052e4(param1,param2,localArray,param3,param4);\n  if ((intVar1 == -1) || (intVar1 = (*param4)(param1,param3,charVar3,param2[4]), intVar1 == -1)) {\nLAB_0800550e:\n    uintVar2 = 0xffffffff;\n  }\n  else {\n    if ((int)(*param2 << 0x1e) < 0) {\n      for (intVar1 = 0; intVar1 < (int)(param2[3] - localArray[0]); intVar1 = intVar1 + 1) {\n        intVar2 = (*param4)(param1,param3,(int)param2 + 0x19,1);\n        if (intVar2 == -1) goto LAB_0800550e;\n      }\n    }\n    uintVar2 = param2[3];\n    if ((int)param2[3] < (int)localArray[0]) {\n      uintVar2 = localArray[0];\n    }\n  }\n  return uintVar2;\n}\n\n",
            "renaming": {
                "FUN_080053d4": "process_and_convert_080053d4",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "bVar1": "byteVar",
                "iVar2": "intVar1",
                "puVar3": "pointerVar",
                "iVar4": "intVar2",
                "pcVar5": "charVar1",
                "uVar6": "uintVar1",
                "uVar9": "uintVar2",
                "uVar10": "uintVar3",
                "pcVar11": "charVar2",
                "pcVar12": "charVar3",
                "local_24": "localArray"
            },
            "calling": [
                "FUN_080050fc"
            ],
            "called": [
                "FUN_08005614",
                "FUN_080052e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005614": {
            "entrypoint": "0x08005614",
            "current_name": "find_character_08005614",
            "code": "\nchar * find_character_08005614(char *string,char character,int length)\n\n{\n  char *current_position;\n  char *next_position;\n  \n  current_position = string;\n  do {\n    next_position = current_position;\n    if (next_position == string + length) {\n      return (char *)0x0;\n    }\n    current_position = next_position + 1;\n  } while (*next_position != character);\n  return next_position;\n}\n\n",
            "renaming": {
                "FUN_08005614": "find_character_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_position",
                "pcVar2": "next_position"
            },
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005630": {
            "entrypoint": "0x08005630",
            "current_name": "copy_data_08005630",
            "code": "\nvoid copyData_08005630(int destIndex,undefined *sourceData,int length)\n\n{\n  undefined *sourcePtr;\n  undefined *destPtr;\n  \n  destPtr = (undefined *)(destIndex + -1);\n  sourcePtr = sourceData + length;\n  for (; sourceData != sourcePtr; sourceData = sourceData + 1) {\n    destPtr = destPtr + 1;\n    *destPtr = *sourceData;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005630": "copy_data_08005630",
                "param_1": "destIndex",
                "param_2": "sourceData",
                "param_3": "length",
                "puVar2": "destPtr",
                "puVar1": "sourcePtr"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005646": {
            "entrypoint": "0x08005646",
            "current_name": "copy_and_reverse_08005646",
            "code": "\nvoid copyAndReverse_08005646(undefined *destination,undefined *source,int length)\n\n{\n  undefined *endPtr;\n  \n  endPtr = source + length;\n  if ((source < destination) && (destination < endPtr)) {\n    destination = destination + length;\n    length = length - (int)endPtr;\n    while (endPtr + length != (undefined *)0x0) {\n      endPtr = endPtr + -1;\n      destination = destination + -1;\n      *destination = *endPtr;\n    }\n    return;\n  }\n  destination = destination + -1;\n  for (; source != endPtr; source = source + 1) {\n    destination = destination + 1;\n    *destination = *source;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_08005646": "copy_and_reverse_08005646",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "endPtr"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800567c": {
            "entrypoint": "0x0800567c",
            "current_name": "reverse_linked_list_0800567c",
            "code": "\nvoid reverseLinkedList_0800567c(undefined4 *result,int start,undefined4 var1,undefined4 var2)\n\n{\n  int **nextNode;\n  int **currentNode;\n  int **previousNode;\n  int *temp;\n  int **currentNodeNext;\n  int **currentNodeAddress;\n  \n  if (start == 0) {\n    return;\n  }\n  currentNodeAddress = (int **)(start + -4);\n  if (*(int *)(start + -4) < 0) {\n    currentNodeAddress = (int **)((int)currentNodeAddress + *(int *)(start + -4));\n  }\n  FUNC_0800583c();\n  previousNode = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    currentNodeAddress[1] = (int *)0x0;\n    currentNode = nextNode;\n    DAT_200002ac = currentNodeAddress;\n  }\n  else {\n    previousNode = DAT_200002ac;\n    if (currentNodeAddress < DAT_200002ac) {\n      currentNode = (int **)*currentNodeAddress;\n      previousNode = (int **)((int)currentNodeAddress + (int)currentNode);\n      if (DAT_200002ac == previousNode) {\n        temp = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        previousNode = (int **)((int)temp + (int)currentNode);\n        *currentNodeAddress = (int *)previousNode;\n      }\n      currentNodeAddress[1] = (int *)DAT_200002ac;\n      DAT_200002ac = currentNodeAddress;\n    }\n    else {\n      do {\n        currentNodeNext = previousNode;\n        previousNode = (int **)currentNodeNext[1];\n        if (previousNode == (int **)0x0) break;\n      } while (previousNode <= currentNodeAddress);\n      currentNode = (int **)*currentNodeNext;\n      if ((int **)((int)currentNodeNext + (int)currentNode) == currentNodeAddress) {\n        currentNode = (int **)((int)currentNode + (int)*currentNodeAddress);\n        *currentNodeNext = (int *)currentNode;\n        if (previousNode == (int **)((int)currentNodeNext + (int)currentNode)) {\n          temp = *previousNode;\n          previousNode = (int **)previousNode[1];\n          currentNode = (int **)((int)currentNode + (int)temp);\n          *currentNodeNext = (int *)currentNode;\n          currentNodeNext[1] = (int *)previousNode;\n        }\n      }\n      else if (currentNodeAddress < (int **)((int)currentNodeNext + (int)currentNode)) {\n        *result = 0xc;\n      }\n      else {\n        currentNode = (int **)((int)currentNodeAddress + (int)*currentNodeAddress);\n        if (previousNode == currentNode) {\n          temp = *previousNode;\n          previousNode = (int **)previousNode[1];\n          currentNode = (int **)((int)temp + (int)*currentNodeAddress);\n          *currentNodeAddress = (int *)currentNode;\n        }\n        currentNodeAddress[1] = (int *)previousNode;\n        currentNodeNext[1] = (int *)currentNodeAddress;\n      }\n    }\n  }\n  FUNC_0800583e(result,currentNode,previousNode,var2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800567c": "reverse_linked_list_0800567c",
                "param_1": "result",
                "param_2": "start",
                "param_3": "var1",
                "param_4": "var2",
                "extraout_r1": "nextNode",
                "ppiVar1": "currentNode",
                "ppiVar2": "previousNode",
                "piVar3": "temp",
                "ppiVar4": "currentNodeNext",
                "ppiVar5": "currentNodeAddress"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005714": {
            "entrypoint": "0x08005714",
            "current_name": "resize_memory_block_08005714",
            "code": "\nuint resizeMemoryBlock_08005714(undefined4 *result,uint size)\n\n{\n  uint *block;\n  int difference;\n  uint *current;\n  uint offset;\n  uint *previous;\n  uint newSize;\n  \n  newSize = (size + 3 & 0xfffffffc) + 8;\n  if (newSize < 0xc) {\n    newSize = 0xc;\n  }\n  if (((int)newSize < 0) || (newSize < size)) {\n    *result = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    block = DAT_200002ac;\n    previous = DAT_200002ac;\n    while (current = block, current != (uint *)0x0) {\n      offset = *current - newSize;\n      if (-1 < (int)offset) {\n        if (offset < 0xc) {\n          if (previous == current) {\n            block = (uint *)previous[1];\n            DAT_200002ac = block;\n          }\n          else {\n            block = (uint *)current[1];\n          }\n          if (previous != current) {\n            previous[1] = (uint)block;\n            previous = current;\n          }\n        }\n        else {\n          *current = offset;\n          *(uint *)((int)current + offset) = newSize;\n          previous = (uint *)((int)current + offset);\n        }\n        goto LAB_08005778;\n      }\n      previous = current;\n      block = (uint *)current[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_global_pointer_0800581c(result);\n    }\n    block = (uint *)update_global_pointer_0800581c(result,newSize);\n    if ((block != (uint *)0xffffffff) &&\n       ((previous = (uint *)((int)block + 3U & 0xfffffffc), block == previous ||\n        (difference = update_global_pointer_0800581c(result,(int)previous - (int)block), difference != -1)))) {\n      *previous = newSize;\nLAB_08005778:\n      FUNC_0800583e(result);\n      newSize = (int)previous + 0xbU & 0xfffffff8;\n      difference = newSize - (int)(previous + 1);\n      if (difference != 0) {\n        *(int *)((int)previous + difference) = -difference;\n        return newSize;\n      }\n      return newSize;\n    }\n    *result = 0xc;\n    FUNC_0800583e(result);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_08005714": "resize_memory_block_08005714",
                "param_1": "result",
                "param_2": "size",
                "puVar1": "block",
                "iVar2": "difference",
                "puVar3": "current",
                "uVar4": "offset",
                "puVar5": "previous",
                "uVar6": "newSize"
            },
            "calling": [
                "FUN_080057d0",
                "FUN_080050fc",
                "FUN_08005044"
            ],
            "called": [
                "FUN_0800581c",
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080057d0": {
            "entrypoint": "0x080057d0",
            "current_name": "process_data_080057d0",
            "code": "\nint processData_080057d0(undefined4 data,int size,uint limit,undefined4 extra)\n\n{\n  int result;\n  uint calcResult;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      reverse_linked_list_0800567c();\n      result = 0;\n    }\n    else {\n      calcResult = calculate_result_08005840();\n      result = size;\n      if ((calcResult < limit) && (result = resize_memory_block_08005714(data,limit), result != 0)) {\n        copy_data_08005630(result,size,limit);\n        reverse_linked_list_0800567c(data,size);\n      }\n    }\n    return result;\n  }\n  result = resize_memory_block_08005714(data,limit,limit,extra);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080057d0": "process_data_080057d0",
                "param_1": "data",
                "param_2": "size",
                "param_3": "limit",
                "param_4": "extra",
                "iVar1": "result",
                "uVar2": "calcResult"
            },
            "calling": [
                "FUN_08005044"
            ],
            "called": [
                "FUN_08005714",
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800581c": {
            "entrypoint": "0x0800581c",
            "current_name": "update_global_pointer_0800581c",
            "code": "\nvoid updateGlobalPointer_0800581c(int *result,undefined4 input)\n\n{\n  int offset;\n  \n  DAT_2000169c = 0;\n  offset = add_offset_to_global_pointer_080072b8(input);\n  if ((offset == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800581c": "update_global_pointer_0800581c",
                "param_1": "result",
                "param_2": "input",
                "iVar1": "offset"
            },
            "calling": [
                "FUN_08005714"
            ],
            "called": [
                "FUN_080072b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800583c": {
            "entrypoint": "0x0800583c",
            "current_name": "FUNC_0800583c",
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0800583e": {
            "entrypoint": "0x0800583e",
            "current_name": "FUNC_0800583e",
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "calling": [
                "FUN_08005714",
                "FUN_0800567c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08005840": {
            "entrypoint": "0x08005840",
            "current_name": "calculate_result_08005840",
            "code": "\nint calculateResult_08005840(undefined4 param1,int param2)\n\n{\n  int result;\n  \n  result = *(int *)(param2 + -4) + -4;\n  if (*(int *)(param2 + -4) < 0) {\n    result = result + *(int *)(param2 + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_08005840": "calculate_result_08005840",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_080057d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005854": {
            "entrypoint": "0x08005854",
            "current_name": "validate_and_process_data_08005854",
            "code": "\nundefined8 validate_and_process_data_08005854(undefined4 input_1,undefined4 input_2)\n\n{\n  int result;\n  undefined4 *ptrData;\n  int *ptrInfo;\n  undefined8 calculatedResult;\n  undefined8 funcResult;\n  undefined4 isValid;\n  undefined *dataPointer;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined8 infinityValue;\n  int checkResult;\n  \n  calculatedResult = calculate_result_08005c70();\n  if (DAT_20000224 == -1) {\n    return calculatedResult;\n  }\n  checkResult = check_parameters_validity_08000a04(input_1,input_2,input_1,input_2);\n  if (checkResult != 0) {\n    return calculatedResult;\n  }\n  funcResult = FUNC_0800708c(input_1,input_2);\n  result = check_if_cy_is_null_080009f0((int)funcResult,(int)((ulonglong)funcResult >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return calculatedResult;\n  }\n  isValid = 1;\n  dataPointer = &DAT_080073ac;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  input_1_copy = input_1;\n  input_2_copy = input_2;\n  infinityValue = get_infinity_080070a4(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = initialize_app_0800709e(&isValid);\n    if (result != 0) goto LAB_080058d0;\n  }\n  ptrData = (undefined4 *)get_data_value_080072ac();\n  *ptrData = 0x21;\nLAB_080058d0:\n  if (checkResult != 0) {\n    ptrInfo = (int *)get_data_value_080072ac();\n    *ptrInfo = checkResult;\n  }\n  return infinityValue;\n}\n\n",
            "renaming": {
                "FUN_08005854": "validate_and_process_data_08005854",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "result",
                "puVar2": "ptrData",
                "piVar3": "ptrInfo",
                "uVar4": "calculatedResult",
                "uVar5": "funcResult",
                "local_48": "isValid",
                "local_44": "dataPointer",
                "local_40": "input_1_copy",
                "uStack_3c": "input_2_copy",
                "local_38": "input_1_copy",
                "uStack_34": "input_2_copy",
                "local_30": "infinityValue",
                "local_28": "checkResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_08005c70",
                "FUN_080070a4",
                "FUN_08000a04",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "entrypoint": "0x080058fc",
            "current_name": "calculate_value_thunk_08006070",
            "code": "\nundefined8 calculate_value_thunk_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  uint flag_1;\n  uint result_2;\n  int difference;\n  uint modified_input_4;\n  undefined8 final_result;\n  undefined8 temp_result;\n  \n  modified_input_4 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (modified_input_4 | (-input_3 | input_3) >> 0x1f)) ||\n     (result_2 = input_2 & 0x7fffffff, 0x7ff00000 < (result_2 | (-input_1 | input_1) >> 0x1f))) {\n    final_result = calculate_concatenation_0800016c(input_1,input_2,input_3,input_4,input_4);\n    return final_result;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    final_result = calculate_result_08006d68();\n    return final_result;\n  }\n  flag_1 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | result_2) == 0) {\n    if (flag_1 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (flag_1 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\nLAB_0800613e:\n    final_result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | modified_input_4) != 0) {\n      if (modified_input_4 == 0x7ff00000) {\n        if (result_2 == 0x7ff00000) {\n          if (flag_1 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (flag_1 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (flag_1 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (flag_1 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (flag_1 != 3) {\n          if (flag_1 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result_2 != 0x7ff00000) {\n        difference = (int)(result_2 - modified_input_4) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input_4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            final_result = 0;\n          }\n          else {\n            compute_double_08000724(input_1,input_2);\n            FUNC_0800708c();\n            final_result = calculate_result_08006d68();\n          }\n        }\n        else {\n          final_result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)final_result >> 0x20);\n        result_1 = (undefined4)final_result;\n        if (flag_1 == 1) {\n          return CONCAT44(difference + -0x80000000,result_1);\n        }\n        if (flag_1 == 2) {\n          temp_result = calculate_result_08000168(result_1,difference,0x33145c07,0x3ca1a626);\n          final_result = 0x400921fb54442d18;\n        }\n        else {\n          if (flag_1 == 0) {\n            return final_result;\n          }\n          final_result = calculate_result_08000168(result_1,difference,0x33145c07,0x3ca1a626);\n          temp_result = 0x400921fb54442d18;\n        }\n        final_result = calculate_result_08000168((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        return final_result;\n      }\n    }\n    if ((int)input_2 < 0) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result;\n}\n\n",
            "renaming": {
                "thunk_FUN_08006070": "calculate_value_thunk_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "flag_1",
                "uVar3": "result_2",
                "iVar4": "difference",
                "uVar5": "modified_input_4",
                "uVar6": "final_result",
                "uVar7": "temp_result"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08006070"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005900": {
            "entrypoint": "0x08005900",
            "current_name": "perform_floating_point_check_08005900",
            "code": "\nundefined8 performFloatingPointCheck_08005900(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  char statusFlag;\n  int result;\n  int *dataValuePointer;\n  undefined4 *dataValuePointer;\n  int bitFlag;\n  undefined4 upperBits;\n  undefined4 lowerBits;\n  undefined8 resultValue;\n  undefined8 concatenatedValue;\n  undefined4 verificationFlag;\n  undefined *messagePointer;\n  undefined4 inputParam1;\n  undefined4 inputParam2;\n  undefined4 inputParam3;\n  undefined4 inputParam4;\n  undefined8 returnValue;\n  int returnValue;\n  \n  resultValue = calculate_floating_point_08006228();\n  statusFlag = DAT_20000224;\n  upperBits = (undefined4)((ulonglong)resultValue >> 0x20);\n  lowerBits = (undefined4)resultValue;\n  if (DAT_20000224 == -1) {\n    return resultValue;\n  }\n  result = check_parameters_validity_08000a04(inputParam3,inputParam4,inputParam3,inputParam4);\n  if (result != 0) {\n    return resultValue;\n  }\n  result = check_parameters_validity_08000a04(inputParam1,inputParam2,inputParam1,inputParam2);\n  inputParam1 = inputParam1;\n  inputParam2 = inputParam2;\n  inputParam3 = inputParam3;\n  inputParam4 = inputParam4;\n  if (result == 0) {\n    result = check_verification_status_080009a0(inputParam1,inputParam2,0,0);\n    if (result != 0) {\n      result = check_verification_status_080009a0(inputParam3,inputParam4,0,0);\n      if (result != 0) {\n        verificationFlag = 1;\n        messagePointer = &DAT_080073b1;\n        returnValue = 0;\n        returnValue = 0;\n        if (statusFlag != '\\0') {\n          returnValue = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = get_most_significant_bit_08007092(inputParam3,inputParam4);\n      if (result == 0) {\n        return resultValue;\n      }\n      result = is_input_null_080009b4_080009b4(inputParam3,inputParam4,0,0);\n      if (result == 0) {\n        return resultValue;\n      }\n      verificationFlag = 1;\n      messagePointer = &DAT_080073b1;\n      returnValue = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      returnValue = 0xfff0000000000000;\n      returnValue = 0;\n      statusFlag = DAT_20000224;\nLAB_08005a32:\n      if (statusFlag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = get_most_significant_bit_08007092(lowerBits,upperBits);\n    if (((result != 0) || (bitFlag = get_most_significant_bit_08007092(inputParam1,inputParam2), bitFlag == 0)) ||\n       (bitFlag = get_most_significant_bit_08007092(inputParam3,inputParam4), bitFlag == 0)) {\n      result = check_verification_status_080009a0(lowerBits,upperBits,0,0);\n      if (result == 0) {\n        return resultValue;\n      }\n      result = get_most_significant_bit_08007092(inputParam1,inputParam2);\n      if (result == 0) {\n        return resultValue;\n      }\n      result = get_most_significant_bit_08007092(inputParam3,inputParam4);\n      if (result == 0) {\n        return resultValue;\n      }\n      verificationFlag = 4;\n      messagePointer = &DAT_080073b1;\n      returnValue = 0;\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    returnValue = check_parameters_validity_08000a04(lowerBits,upperBits);\n    statusFlag = DAT_20000224;\n    if (returnValue != 0) {\n      messagePointer = &DAT_080073b1;\n      verificationFlag = 1;\n      returnValue = result;\n      if (DAT_20000224 != '\\0') {\n        returnValue = compute_double_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      messagePointer = &DAT_080073b1;\n      verificationFlag = 1;\n      returnValue = 0;\n      goto LAB_08005978;\n    }\n    messagePointer = &DAT_080073b1;\n    verificationFlag = 3;\n    if (DAT_20000224 == '\\0') {\n      returnValue._0_4_ = 0xe0000000;\n      returnValue._4_4_ = 0x47efffff;\n      result = is_input_null_080009b4_080009b4(inputParam1,inputParam2,0,0);\n      if (result != 0) {\n        resultValue = calculate_floating_point_080004d0(inputParam3,inputParam4,0,0x3fe00000);\n        concatenatedValue = concatenate_and_calculate_080070b0();\n        result = check_verification_status_080009a0((int)resultValue,(int)((ulonglong)resultValue >> 0x20),(int)concatenatedValue,\n                             (int)((ulonglong)concatenatedValue >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0xe0000000;\n          returnValue._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_app_0800709e(&verificationFlag);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      returnValue._0_4_ = 0;\n      returnValue._4_4_ = 0x7ff00000;\n      result = is_input_null_080009b4_080009b4(inputParam1,inputParam2,0,0);\n      if (result != 0) {\n        resultValue = calculate_floating_point_080004d0(inputParam3,inputParam4,0,0x3fe00000);\n        concatenatedValue = concatenate_and_calculate_080070b0();\n        result = check_verification_status_080009a0((int)resultValue,(int)((ulonglong)resultValue >> 0x20),(int)concatenatedValue,\n                             (int)((ulonglong)concatenatedValue >> 0x20));\n        if (result == 0) {\n          returnValue._0_4_ = 0;\n          returnValue._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    dataValuePointer = (undefined4 *)get_data_value_080072ac();\n    lowerBits = 0x22;\n  }\n  else {\n    result = check_verification_status_080009a0(inputParam3,inputParam4,0,0);\n    if (result == 0) {\n      return resultValue;\n    }\n    verificationFlag = 1;\n    messagePointer = &DAT_080073b1;\n    returnValue = 0x3ff0000000000000;\n    returnValue = 0;\n    if (statusFlag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_app_0800709e(&verificationFlag);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    dataValuePointer = (undefined4 *)get_data_value_080072ac();\n    lowerBits = 0x21;\n  }\n  *dataValuePointer = lowerBits;\nLAB_080059d0:\n  if (returnValue != 0) {\n    dataValuePointer = (int *)get_data_value_080072ac();\n    *dataValuePointer = returnValue;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_08005900": "perform_floating_point_check_08005900",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "cVar1": "statusFlag",
                "iVar2": "result",
                "piVar3": "dataValuePointer",
                "puVar4": "dataValuePointer",
                "iVar5": "bitFlag",
                "uVar6": "upperBits",
                "uVar7": "lowerBits",
                "uVar8": "resultValue",
                "uVar9": "concatenatedValue",
                "local_50": "verificationFlag",
                "local_4c": "messagePointer",
                "local_48": "inputParam1",
                "uStack_44": "inputParam2",
                "local_40": "inputParam3",
                "uStack_3c": "inputParam4",
                "local_38": "returnValue",
                "local_30": "returnValue"
            },
            "calling": [
                "FUN_0800411c"
            ],
            "called": [
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080072ac",
                "FUN_080009a0",
                "FUN_080009b4",
                "FUN_08006228",
                "FUN_08000a04",
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "entrypoint": "0x08005bc8",
            "current_name": "calculate_and_initialize_08005bc8",
            "code": "\nundefined8 calculateAndInitialize_08005bc8(undefined4 inputParameter1,undefined4 inputParameter2)\n\n{\n  char flag;\n  int result;\n  int *dataPointer;\n  undefined4 *dataValuePointer;\n  undefined8 returnValue;\n  undefined4 localVariable1;\n  undefined *localVariable2;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  undefined4 localVariable5;\n  undefined4 localVariable6;\n  undefined8 localVariable7;\n  int parameterValidityCheckResult;\n  \n  returnValue = calculate_fp_division_08006c0c();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return returnValue;\n  }\n  parameterValidityCheckResult = check_parameters_validity_08000a04(inputParameter1,inputParameter2,inputParameter1,inputParameter2);\n  if (parameterValidityCheckResult != 0) {\n    return returnValue;\n  }\n  result = is_input_null_080009b4_080009b4(inputParameter1,inputParameter2,0,0);\n  if (result == 0) {\n    return returnValue;\n  }\n  localVariable1 = 1;\n  localVariable2 = &DAT_080073b5;\n  localVariable3 = inputParameter1;\n  localVariable4 = inputParameter2;\n  localVariable5 = inputParameter1;\n  localVariable6 = inputParameter2;\n  if (flag == '\\0') {\n    localVariable7 = 0;\nLAB_08005c26:\n    result = initialize_app_0800709e(&localVariable1);\n    if (result != 0) goto LAB_08005c2e;\n  }\n  else {\n    localVariable7 = compute_double_08000724(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  dataValuePointer = (undefined4 *)get_data_value_080072ac();\n  *dataValuePointer = 0x21;\nLAB_08005c2e:\n  if (parameterValidityCheckResult != 0) {\n    dataPointer = (int *)get_data_value_080072ac();\n    *dataPointer = parameterValidityCheckResult;\n  }\n  return localVariable7;\n}\n\n",
            "renaming": {
                "FUN_08005bc8": "calculate_and_initialize_08005bc8",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2",
                "cVar1": "flag",
                "iVar2": "result",
                "piVar3": "dataPointer",
                "puVar4": "dataValuePointer",
                "uVar5": "returnValue",
                "local_50": "localVariable1",
                "local_4c": "localVariable2",
                "local_48": "localVariable3",
                "uStack_44": "localVariable4",
                "local_40": "localVariable5",
                "uStack_3c": "localVariable6",
                "local_38": "localVariable7",
                "local_30": "parameterValidityCheckResult"
            },
            "calling": [
                "FUN_08003330"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_080009b4",
                "FUN_08000a04",
                "FUN_08006c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08005c70": {
            "entrypoint": "0x08005c70",
            "current_name": "calculate_result_08005c70",
            "code": "\nundefined8 calculate_result_08005c70(uint input_1,uint input_2)\n\n{\n  int is_valid;\n  undefined4 result_high_1;\n  undefined4 result_high_2;\n  undefined4 result_high_3;\n  undefined4 result_high_4;\n  undefined4 result_low_1;\n  undefined4 result_low_2;\n  uint positive_input_2;\n  undefined8 result_1;\n  undefined8 result_2;\n  undefined8 result_3;\n  \n  result_1 = CONCAT44(input_2,input_1);\n  positive_input_2 = input_2 & 0x7fffffff;\n  if (positive_input_2 < 0x3ff00000) {\n    if (positive_input_2 < 0x3fe00000) {\n      if (0x3e3fffff < positive_input_2) {\n        result_2 = calculate_floating_point_080004d0(input_1,input_2,input_1,input_2);\n        result_low_2 = (undefined4)((ulonglong)result_2 >> 0x20);\n        result_low_1 = (undefined4)result_2;\n        result_2 = calculate_floating_point_080004d0(result_low_1,result_low_2,0xdfdf709,0x3f023de1);\n        result_2 = calculate_concatenation_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x7501b288,0x3f49efe0);\n        result_2 = calculate_floating_point_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_2 = calculate_result_08005c70_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0xb5688f3b,0x3fa48228);\n        result_2 = calculate_floating_point_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_2 = calculate_concatenation_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0xe884455,0x3fc9c155);\n        result_2 = calculate_floating_point_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_2 = calculate_result_08005c70_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        result_2 = calculate_floating_point_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_2 = calculate_concatenation_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x55555555,0x3fc55555);\n        result_2 = calculate_floating_point_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_low_2);\n        result_3 = calculate_floating_point_080004d0(result_low_1,result_low_2,0xb12e9282,0x3fb3b8c5);\n        result_3 = calculate_result_08005c70_08000168((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x1b8d0159,0x3fe6066c);\n        result_3 = calculate_floating_point_080004d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),result_low_1,result_low_2);\n        result_3 = calculate_concatenation_0800016c((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x9c598ac8,0x40002ae5);\n        result_3 = calculate_floating_point_080004d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),result_low_1,result_low_2);\n        result_3 = calculate_result_08005c70_08000168((int)result_3,(int)((ulonglong)result_3 >> 0x20),0x1c8a2d4b,0x40033a27);\n        result_3 = calculate_floating_point_080004d0((int)result_3,(int)((ulonglong)result_3 >> 0x20),result_low_1,result_low_2);\n        result_3 = calculate_concatenation_0800016c((int)result_3,(int)((ulonglong)result_3 >> 0x20),0,0x3ff00000);\n        result_2 = compute_double_08000724((int)result_2,(int)((ulonglong)result_2 >> 0x20),(int)result_3,\n                              (int)((ulonglong)result_3 >> 0x20));\n        result_2 = calculate_floating_point_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),input_1,input_2);\n        goto LAB_08005cba;\n      }\n      result_2 = calculate_concatenation_0800016c(input_1,input_2,0x8800759c,0x7e37e43c);\n      is_valid = check_if_cy_is_null_080009f0((int)result_2,(int)((ulonglong)result_2 >> 0x20),0,0x3ff00000);\n      if (is_valid != 0) {\n        return result_1;\n      }\n    }\n    result_1 = FUNC_0800708c(input_1,input_2);\n    result_1 = calculate_result_08005c70_08000168(0,0x3ff00000,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n    result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),0,0x3fe00000);\n    result_high_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n    result_low_1 = (undefined4)result_1;\n    result_1 = calculate_floating_point_080004d0(result_low_1,result_high_1,0xdfdf709,0x3f023de1);\n    result_1 = calculate_concatenation_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x7501b288,0x3f49efe0);\n    result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_1 = calculate_result_08005c70_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),0xb5688f3b,0x3fa48228);\n    result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_1 = calculate_concatenation_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0xe884455,0x3fc9c155);\n    result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_1 = calculate_result_08005c70_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_1 = calculate_concatenation_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x55555555,0x3fc55555);\n    result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_1,result_high_1);\n    result_high_2 = (undefined4)((ulonglong)result_1 >> 0x20);\n    result_2 = calculate_floating_point_080004d0(result_low_1,result_high_1,0xb12e9282,0x3fb3b8c5);\n    result_2 = calculate_result_08005c70_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x1b8d0159,0x3fe6066c);\n    result_2 = calculate_floating_point_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_high_1);\n    result_2 = calculate_concatenation_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x9c598ac8,0x40002ae5);\n    result_2 = calculate_floating_point_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_high_1);\n    result_2 = calculate_result_08005c70_08000168((int)result_2,(int)((ulonglong)result_2 >> 0x20),0x1c8a2d4b,0x40033a27);\n    result_2 = calculate_floating_point_080004d0((int)result_2,(int)((ulonglong)result_2 >> 0x20),result_low_1,result_high_1);\n    result_2 = calculate_concatenation_0800016c((int)result_2,(int)((ulonglong)result_2 >> 0x20),0,0x3ff00000);\n    result_high_3 = (undefined4)((ulonglong)result_2 >> 0x20);\n    result_3 = calculate_fp_division_08006c0c(result_low_1,result_high_1);\n    result_high_4 = (undefined4)((ulonglong)result_3 >> 0x20);\n    result_low_2 = (undefined4)result_3;\n    if (positive_input_2 < 0x3fef3333) {\n      result_1 = compute_double_08000724((int)result_1,result_high_2,(int)result_2,result_high_3);\n      result_2 = calculate_concatenation_0800016c(result_low_2,result_high_4,result_low_2,result_high_4);\n      result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                           (int)((ulonglong)result_2 >> 0x20));\n      result_2 = calculate_floating_point_080004d0(0,result_high_4,0,result_high_4);\n      result_2 = calculate_result_08005c70_08000168(result_low_1,result_high_1,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n      result_3 = calculate_concatenation_0800016c(result_low_2,result_high_4,0,result_high_4);\n      result_2 = compute_double_08000724((int)result_2,(int)((ulonglong)result_2 >> 0x20),(int)result_3,\n                            (int)((ulonglong)result_3 >> 0x20));\n      result_low_1 = (undefined4)((ulonglong)result_2 >> 0x20);\n      result_2 = calculate_concatenation_0800016c((int)result_2,result_low_1,(int)result_2,result_low_1);\n      result_2 = calculate_result_08005c70_08000168(0x33145c07,0x3c91a626,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n      result_1 = calculate_result_08005c70_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                           (int)((ulonglong)result_2 >> 0x20));\n      result_2 = calculate_concatenation_0800016c(0,result_high_4,0,result_high_4);\n      result_2 = calculate_result_08005c70_08000168(0x54442d18,0x3fe921fb,(int)result_2,(int)((ulonglong)result_2 >> 0x20));\n      result_1 = calculate_result_08005c70_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                           (int)((ulonglong)result_2 >> 0x20));\n      result_low_1 = 0x3fe921fb;\n    }\n    else {\n      result_1 = compute_double_08000724((int)result_1,result_high_2,(int)result_2,result_high_3);\n      result_1 = calculate_floating_point_080004d0((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_2,result_high_4);\n      result_1 = calculate_concatenation_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),result_low_2,result_high_4);\n      result_low_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n      result_1 = calculate_concatenation_0800016c((int)result_1,result_low_1,(int)result_1,result_low_1);\n      result_1 = calculate_result_08005c70_08000168((int)result_1,(int)((ulonglong)result_1 >> 0x20),0x33145c07,0x3c91a626);\n      result_low_1 = 0x3ff921fb;\n    }\n    result_1 = calculate_result_08005c70_08000168(0x54442d18,result_low_1,(int)result_1,(int)((ulonglong)result_1 >> 0x20));\n    if ((int)input_2 < 1) {\n      result_1 = CONCAT44((int)((ulonglong)result_1 >> 0x20) + -0x80000000,(int)result_1);\n    }\n  }\n  else {\n    if ((positive_input_2 + 0xc0100000 | input_1) != 0) {\n      result_1 = calculate_result_08005c70_08000168(input_1,input_2,input_1,input_2);\n      result_low_1 = (undefined4)((ulonglong)result_1 >> 0x20);\n      result_1 = compute_double_08000724((int)result_1,result_low_1,(int)result_1,result_low_1);\n      return result_1;\n    }\n    result_1 = calculate_floating_point_080004d0(input_1,input_2,0x54442d18,0x3ff921fb);\n    result_2 = calculate_floating_point_080004d0(input_1,input_2,0x33145c07,0x3c91a626);\nLAB_08005cba:\n    result_1 = calculate_concatenation_0800016c((int)result_1,(int)((ulonglong)result_1 >> 0x20),(int)result_2,\n                         (int)((ulonglong)result_2 >> 0x20));\n  }\n  return result_1;\n}\n\n",
            "renaming": {
                "FUN_08005c70": "calculate_result_08005c70",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "is_valid",
                "uVar2": "result_high_1",
                "uVar3": "result_high_2",
                "uVar4": "result_high_3",
                "uVar5": "result_high_4",
                "uVar6": "result_low_1",
                "uVar7": "result_low_2",
                "uVar8": "positive_input_2",
                "uVar9": "result_1",
                "uVar10": "result_2",
                "uVar11": "result_3"
            },
            "calling": [
                "FUN_08005854"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006070": {
            "entrypoint": "0x08006070",
            "current_name": "calculate_result_08006070",
            "code": "\nundefined8 calculate_result_08006070(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  uint result_2;\n  uint result_3;\n  int result_4;\n  uint result_5;\n  undefined8 final_result_1;\n  undefined8 final_result_2;\n  \n  result_5 = input_4 & 0x7fffffff;\n  if ((0x7ff00000 < (result_5 | (-input_3 | input_3) >> 0x1f)) ||\n     (result_3 = input_2 & 0x7fffffff, 0x7ff00000 < (result_3 | (-input_1 | input_1) >> 0x1f))) {\n    final_result_1 = calculate_concatenation_0800016c(input_1,input_2,input_3,input_4,input_4);\n    return final_result_1;\n  }\n  if ((input_4 + 0xc0100000 | input_3) == 0) {\n    final_result_1 = calculate_result_08006070_08006d68();\n    return final_result_1;\n  }\n  result_2 = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n  if ((input_1 | result_3) == 0) {\n    if (result_2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result_2 != 3) {\n      return CONCAT44(input_2,input_1);\n    }\nLAB_0800613e:\n    final_result_1 = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input_3 | result_5) != 0) {\n      if (result_5 == 0x7ff00000) {\n        if (result_3 == 0x7ff00000) {\n          if (result_2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result_2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result_2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result_2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result_2 != 3) {\n          if (result_2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result_3 != 0x7ff00000) {\n        result_4 = (int)(result_3 - result_5) >> 0x14;\n        if (result_4 < 0x3d) {\n          if (((int)input_4 < 0) && (result_4 + 0x3c < 0 != SCARRY4(result_4,0x3c))) {\n            final_result_1 = 0;\n          }\n          else {\n            compute_double_08000724(input_1,input_2);\n            FUNC_0800708c();\n            final_result_1 = calculate_result_08006070_08006d68();\n          }\n        }\n        else {\n          final_result_1 = 0x3ff921fb54442d18;\n        }\n        result_4 = (int)((ulonglong)final_result_1 >> 0x20);\n        result_1 = (undefined4)final_result_1;\n        if (result_2 == 1) {\n          return CONCAT44(result_4 + -0x80000000,result_1);\n        }\n        if (result_2 == 2) {\n          final_result_2 = calculate_result_08006070_08000168(result_1,result_4,0x33145c07,0x3ca1a626);\n          final_result_1 = 0x400921fb54442d18;\n        }\n        else {\n          if (result_2 == 0) {\n            return final_result_1;\n          }\n          final_result_1 = calculate_result_08006070_08000168(result_1,result_4,0x33145c07,0x3ca1a626);\n          final_result_2 = 0x400921fb54442d18;\n        }\n        final_result_1 = calculate_result_08006070_08000168((int)final_result_1,(int)((ulonglong)final_result_1 >> 0x20),(int)final_result_2,\n                             (int)((ulonglong)final_result_2 >> 0x20));\n        return final_result_1;\n      }\n    }\n    if ((int)input_2 < 0) {\n      final_result_1 = 0xbff921fb54442d18;\n    }\n    else {\n      final_result_1 = 0x3ff921fb54442d18;\n    }\n  }\n  return final_result_1;\n}\n\n",
            "renaming": {
                "FUN_08006070": "calculate_result_08006070",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "iVar4": "result_4",
                "uVar5": "result_5",
                "uVar6": "final_result_1",
                "uVar7": "final_result_2"
            },
            "calling": [
                "thunk_FUN_08006070"
            ],
            "called": [
                "FUN_0800708c",
                "FUN_08000724",
                "FUN_08006d68",
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006228": {
            "entrypoint": "0x08006228",
            "current_name": "calculate_floating_point_08006228",
            "code": "\nuint calculate_floating_point_08006228(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result_1;\n  uint result_2;\n  uint result_3;\n  undefined4 result_4;\n  undefined4 result_5;\n  undefined4 result_6;\n  undefined4 result_7;\n  uint result_8;\n  undefined4 result_9;\n  int temp_1;\n  int temp_2;\n  undefined4 temp_3;\n  uint temp_4;\n  undefined4 temp_5;\n  int temp_6;\n  uint temp_7;\n  undefined4 temp_8;\n  undefined4 temp_9;\n  undefined8 temp_10;\n  undefined8 temp_11;\n  undefined8 temp_12;\n  undefined8 temp_13;\n  longlong temp_14;\n  ulonglong temp_15;\n  undefined8 temp_16;\n  uint local_result_1;\n  undefined4 local_result_2;\n  undefined4 local_result_3;\n  int local_temp;\n  \n  temp_11 = CONCAT44(input_2,input_1);\n  temp_7 = input_4 & 0x7fffffff;\n  if ((temp_7 | input_3) == 0) {\n    return 0;\n  }\n  temp_4 = input_2 & 0x7fffffff;\n  if (temp_4 < 0x7ff00001) {\n    if (temp_4 == 0x7ff00000) {\n      if (input_1 == 0) {\n        if (0x7ff00000 < temp_7) goto LAB_08006278;\nLAB_08006262:\n        if ((temp_7 != 0x7ff00000) || (input_3 == 0)) {\n          if (-1 < (int)input_2) goto LAB_0800632a;\n          if (temp_7 < 0x43400000) {\n            if (temp_7 < 0x3ff00000) {\nLAB_0800632a:\n              local_result_1 = 0;\n              goto LAB_080062ba;\n            }\n            temp_1 = ((int)temp_7 >> 0x14) + -0x3ff;\n            if (0x14 < temp_1) {\n              result_2 = input_3 >> (0x34U - temp_1 & 0xff);\n              if (input_3 == result_2 << (0x34U - temp_1 & 0xff)) {\n                local_result_1 = 2 - (result_2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input_3 == 0) {\n              result_2 = (int)temp_7 >> (0x14U - temp_1 & 0xff);\n              if (temp_7 == result_2 << (0x14U - temp_1 & 0xff)) {\n                local_result_1 = 2 - (result_2 & 1);\n              }\n              else {\n                local_result_1 = 0;\n              }\n              goto LAB_0800630c;\n            }\n            local_result_1 = 0;\n          }\n          else {\n            local_result_1 = 2;\nLAB_080062ba:\n            if (input_3 == 0) {\n              if (temp_7 == 0x7ff00000) {\n                if ((temp_4 + 0xc0100000 | input_1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp_4) {\n                  if ((int)input_4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input_4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (temp_7 == 0x3ff00000) {\n                if (-1 < (int)input_4) {\n                  return input_1;\n                }\n                temp_10 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input_4 == 0x40000000) goto LAB_0800634a;\n              if ((input_4 == 0x3fe00000) && (-1 < (int)input_2)) {\n                temp_7 = calculate_fp_division_08006c0c(input_1,input_2);\n                return temp_7;\n              }\n            }\n          }\n          temp_10 = FUNC_0800708c(input_1,input_2);\n          temp_8 = (undefined4)((ulonglong)temp_10 >> 0x20);\n          result_1 = (undefined4)temp_10;\n          temp_15 = CONCAT44(input_2,result_1) & 0x7fffffffffffffff;\n          if ((input_1 == 0) && ((temp_4 == 0 || ((input_2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input_4 < 0) {\n              temp_10 = compute_double_08000724(0,0x3ff00000,result_1,temp_8);\n            }\n            if (-1 < (int)input_2) {\n              return (uint)temp_10;\n            }\n            if ((local_result_1 | temp_4 + 0xc0100000) != 0) {\n              return (uint)temp_10;\n            }\n          }\n          else {\n            result_2 = 0xffffffff - ((int)input_2 >> 0x1f);\n            temp_10 = temp_11;\n            if ((local_result_1 | result_2) != 0) {\n              if (temp_7 < 0x41e00001) {\n                local_temp = 0;\n                if (temp_4 < 0x100000) {\n                  temp_15 = calculate_floating_point_08006228_080004d0();\n                  local_temp = -0x35;\n                }\n                temp_7 = (uint)(temp_15 >> 0x20);\n                result_1 = (undefined4)temp_15;\n                local_temp = ((int)temp_7 >> 0x14) + -0x3ff + local_temp;\n                temp_7 = temp_7 & 0xfffff;\n                temp_4 = temp_7 | 0x3ff00000;\n                if (temp_7 < 0x3988f) {\nLAB_08006628:\n                  temp_1 = 0;\n                }\n                else {\n                  if (0xbb679 < temp_7) {\n                    temp_4 = temp_4 - 0x100000;\n                    local_temp = local_temp + 1;\n                    goto LAB_08006628;\n                  }\n                  temp_1 = 1;\n                }\n                temp_2 = temp_1 * 8;\n                temp_3 = (&DAT_080073c0)[temp_1 * 2];\n                temp_5 = (&DAT_080073c4)[temp_1 * 2];\n                temp_11 = calculate_result_08000168(result_1,temp_4,temp_3,temp_5);\n                temp_9 = (undefined4)((ulonglong)temp_11 >> 0x20);\n                temp_10 = calculate_concatenation_0800016c(result_1,temp_4,temp_3,temp_5);\n                temp_10 = compute_double_08000724(0,0x3ff00000,(int)temp_10,(int)((ulonglong)temp_10 >> 0x20));\n                result_4 = (undefined4)((ulonglong)temp_10 >> 0x20);\n                temp_12 = calculate_floating_point_08006228_080004d0((int)temp_11,temp_9,(int)temp_10,result_4);\n                result_5 = (undefined4)((ulonglong)temp_12 >> 0x20);\n                temp_8 = (undefined4)temp_12;\n                temp_12 = calculate_floating_point_08006228_080004d0(0,result_5);\n                temp_11 = calculate_result_08000168((int)temp_11,temp_9,(int)temp_12,\n                                      (int)((ulonglong)temp_12 >> 0x20));\n                temp_12 = calculate_result_08000168(0,((int)temp_4 >> 1 | 0x20000000U) + 0x80000 + temp_1 * 0x40000,\n                                      temp_3,temp_5);\n                temp_12 = calculate_result_08000168(result_1,temp_4,(int)temp_12,(int)((ulonglong)temp_12 >> 0x20));\n                temp_12 = calculate_floating_point_08006228_080004d0((int)temp_12,(int)((ulonglong)temp_12 >> 0x20),0,result_5);\n                temp_11 = calculate_result_08000168((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_12,\n                                      (int)((ulonglong)temp_12 >> 0x20));\n                temp_11 = calculate_floating_point_08006228_080004d0((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,result_4\n                                     );\n                temp_9 = (undefined4)((ulonglong)temp_11 >> 0x20);\n                temp_10 = calculate_floating_point_08006228_080004d0(temp_8,result_5);\n                result_4 = (undefined4)((ulonglong)temp_10 >> 0x20);\n                result_1 = (undefined4)temp_10;\n                temp_10 = calculate_floating_point_08006228_080004d0(result_1,result_4,0x4a454eef,0x3fca7e28);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),result_1,result_4);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),result_1,result_4);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),result_1,result_4);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),result_1,result_4);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp_12 = calculate_floating_point_08006228_080004d0(result_1,result_4,result_1,result_4);\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_12,\n                                      (int)((ulonglong)temp_12 >> 0x20));\n                temp_12 = calculate_concatenation_0800016c(temp_8,result_5,0,result_5);\n                temp_12 = calculate_floating_point_08006228_080004d0((int)temp_12,(int)((ulonglong)temp_12 >> 0x20),(int)temp_11,\n                                      temp_9);\n                temp_10 = calculate_concatenation_0800016c((int)temp_12,(int)((ulonglong)temp_12 >> 0x20),(int)temp_10,\n                                      (int)((ulonglong)temp_10 >> 0x20));\n                result_1 = (undefined4)((ulonglong)temp_10 >> 0x20);\n                temp_12 = calculate_floating_point_08006228_080004d0(0,result_5,0,result_5);\n                result_4 = (undefined4)((ulonglong)temp_12 >> 0x20);\n                temp_13 = calculate_concatenation_0800016c((int)temp_12,result_4,0,0x40080000);\n                calculate_concatenation_0800016c((int)temp_13,(int)((ulonglong)temp_13 >> 0x20),(int)temp_10,result_1);\n                temp_13 = calculate_floating_point_08006228_080004d0(0,result_5,0,result_6);\n                temp_3 = (undefined4)((ulonglong)temp_13 >> 0x20);\n                temp_16 = calculate_result_08000168(0,result_6,0,0x40080000);\n                temp_12 = calculate_result_08000168((int)temp_16,(int)((ulonglong)temp_16 >> 0x20),(int)temp_12,result_4\n                                     );\n                temp_10 = calculate_result_08000168((int)temp_10,result_1,(int)temp_12,(int)((ulonglong)temp_12 >> 0x20)\n                                     );\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),temp_8,result_5);\n                temp_11 = calculate_floating_point_08006228_080004d0((int)temp_11,temp_9,0,result_6);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_11,\n                                      (int)((ulonglong)temp_11 >> 0x20));\n                result_1 = (undefined4)((ulonglong)temp_10 >> 0x20);\n                calculate_concatenation_0800016c((int)temp_13,temp_3,(int)temp_10,result_1);\n                temp_11 = calculate_floating_point_08006228_080004d0(0,result_7,0xe0000000,0x3feec709);\n                temp_12 = calculate_result_08000168(0,result_7,(int)temp_13,temp_3);\n                temp_10 = calculate_result_08000168((int)temp_10,result_1,(int)temp_12,(int)((ulonglong)temp_12 >> 0x20)\n                                     );\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temp_12 = calculate_floating_point_08006228_080004d0(0,result_7,0x145b01f5,0xbe3e2fe0);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_12,\n                                      (int)((ulonglong)temp_12 >> 0x20));\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + temp_2),\n                                      *(undefined4 *)(&DAT_080073e4 + temp_2));\n                temp_12 = bitwise_shift_08000404(local_temp);\n                result_1 = (undefined4)((ulonglong)temp_12 >> 0x20);\n                temp_8 = *(undefined4 *)(&DAT_080073d0 + temp_2);\n                temp_9 = *(undefined4 *)(&DAT_080073d4 + temp_2);\n                temp_13 = calculate_concatenation_0800016c((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,\n                                      (int)((ulonglong)temp_10 >> 0x20));\n                temp_13 = calculate_concatenation_0800016c((int)temp_13,(int)((ulonglong)temp_13 >> 0x20),temp_8,temp_9);\n                calculate_concatenation_0800016c((int)temp_13,(int)((ulonglong)temp_13 >> 0x20),(int)temp_12,result_1);\n                temp_12 = calculate_result_08000168(0,result_8,(int)temp_12,result_1);\n                temp_14 = calculate_result_08000168((int)temp_12,(int)((ulonglong)temp_12 >> 0x20),temp_8,temp_9);\n                temp_7 = result_8;\n              }\n              else {\n                if (0x43f00000 < temp_7) {\n                  if (temp_4 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input_4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input_1 = 0x8800759c;\n                  input_2 = 0x7e37e43c;\n                  temp_11 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp_4 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input_4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp_4) goto LAB_08006418;\n                temp_11 = calculate_result_08000168(result_1,temp_8,0,0x3ff00000);\n                temp_8 = (undefined4)((ulonglong)temp_11 >> 0x20);\n                result_1 = (undefined4)temp_11;\n                temp_11 = calculate_floating_point_08006228_080004d0(result_1,temp_8,0x60000000,0x3ff71547);\n                temp_10 = calculate_floating_point_08006228_080004d0(result_1,temp_8,0xf85ddf44,0x3e54ae0b);\n                temp_12 = calculate_floating_point_08006228_080004d0(result_1,temp_8,0,0x3fd00000);\n                temp_12 = calculate_result_08000168(0x55555555,0x3fd55555,(int)temp_12,\n                                      (int)((ulonglong)temp_12 >> 0x20));\n                temp_12 = calculate_floating_point_08006228_080004d0((int)temp_12,(int)((ulonglong)temp_12 >> 0x20),result_1,temp_8);\n                temp_12 = calculate_result_08000168(0,0x3fe00000,(int)temp_12,(int)((ulonglong)temp_12 >> 0x20));\n                temp_13 = calculate_floating_point_08006228_080004d0(result_1,temp_8,result_1,temp_8);\n                temp_12 = calculate_floating_point_08006228_080004d0((int)temp_12,(int)((ulonglong)temp_12 >> 0x20),(int)temp_13,\n                                      (int)((ulonglong)temp_13 >> 0x20));\n                temp_12 = calculate_floating_point_08006228_080004d0((int)temp_12,(int)((ulonglong)temp_12 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temp_10 = calculate_result_08000168((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_12,\n                                      (int)((ulonglong)temp_12 >> 0x20));\n                calculate_concatenation_0800016c((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),(int)temp_10,\n                             (int)((ulonglong)temp_10 >> 0x20));\n                temp_14 = (ulonglong)result_3 << 0x20;\n                temp_7 = result_3;\n              }\n              temp_11 = calculate_result_08000168((int)temp_14,(int)((ulonglong)temp_14 >> 0x20),(int)temp_11,\n                                    (int)((ulonglong)temp_11 >> 0x20));\n              temp_11 = calculate_result_08000168((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_11,\n                                    (int)((ulonglong)temp_11 >> 0x20));\n              if ((local_result_1 - 1 | result_2) == 0) {\n                input_2 = 0xbff00000;\n              }\n              else {\n                input_2 = 0x3ff00000;\n              }\n              local_result_1 = 0;\n              temp_10 = calculate_result_08000168(input_3,input_4,0,input_4);\n              temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0,temp_7);\n              temp_11 = calculate_floating_point_08006228_080004d0((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),input_3,input_4);\n              temp_11 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_11,\n                                    (int)((ulonglong)temp_11 >> 0x20));\n              temp_9 = (undefined4)((ulonglong)temp_11 >> 0x20);\n              result_1 = (undefined4)temp_11;\n              temp_11 = calculate_floating_point_08006228_080004d0(0,temp_7,0,input_4);\n              result_4 = (undefined4)((ulonglong)temp_11 >> 0x20);\n              temp_8 = (undefined4)temp_11;\n              temp_14 = calculate_concatenation_0800016c(result_1,temp_9,temp_8,result_4);\n              temp_4 = (uint)((ulonglong)temp_14 >> 0x20);\n              temp_7 = (uint)temp_14;\n              if (0x408fffffffffffff < temp_14) {\n                if ((temp_4 + 0xbf700000 | temp_7) == 0) {\n                  temp_10 = calculate_concatenation_0800016c(result_1,temp_9,0x652b82fe,0x3c971547);\n                  temp_12 = calculate_result_08000168(temp_7,temp_4,temp_8,result_4);\n                  temp_1 = check_if_cy_is_null_080009f0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_12,\n                                       (int)((ulonglong)temp_12 >> 0x20));\n                  if (temp_1 == 0) goto LAB_08006968;\n                }\n                temp_11 = calculate_floating_point_08006228_080004d0(0,input_2,0x8800759c,0x7e37e43c);\n                input_1 = 0x8800759c;\n                input_2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp_4 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp_4 & 0x7fffffff) < 0x3fe00001) {\n                  temp_1 = 0;\n                }\n                else {\n                  temp_4 = (0x100000 >> (((int)(temp_4 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp_4;\n                  temp_7 = (temp_4 * 2 >> 0x15) - 0x3ff;\n                  temp_1 = (int)(temp_4 & 0xfffff | 0x100000) >> (0x14 - temp_7 & 0xff);\n                  if (temp_14 < 0) {\n                    temp_1 = -temp_1;\n                  }\n                  temp_11 = calculate_result_08000168(temp_8,result_4,0,temp_4 & ~(0xfffff >> (temp_7 & 0xff)));\n                }\n                local_result_3 = (undefined4)((ulonglong)temp_11 >> 0x20);\n                local_result_2 = (undefined4)temp_11;\n                calculate_concatenation_0800016c(local_result_2,local_result_3,result_1,temp_9);\n                temp_11 = calculate_floating_point_08006228_080004d0(0,result_9,0,0x3fe62e43);\n                temp_8 = (undefined4)((ulonglong)temp_11 >> 0x20);\n                temp_10 = calculate_result_08000168(0,result_9,local_result_2,local_result_3);\n                temp_10 = calculate_result_08000168(result_1,temp_9,(int)temp_10,(int)((ulonglong)temp_10 >> 0x20));\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temp_12 = calculate_floating_point_08006228_080004d0(0,result_9,0xca86c39,0xbe205c61);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_12,\n                                      (int)((ulonglong)temp_12 >> 0x20));\n                temp_9 = (undefined4)((ulonglong)temp_10 >> 0x20);\n                temp_12 = calculate_concatenation_0800016c((int)temp_11,temp_8,(int)temp_10,temp_9);\n                result_4 = (undefined4)((ulonglong)temp_12 >> 0x20);\n                result_1 = (undefined4)temp_12;\n                temp_11 = calculate_result_08000168(result_1,result_4,(int)temp_11,temp_8);\n                temp_11 = calculate_result_08000168((int)temp_10,temp_9,(int)temp_11,\n                                      (int)((ulonglong)temp_11 >> 0x20));\n                temp_9 = (undefined4)((ulonglong)temp_11 >> 0x20);\n                temp_10 = calculate_floating_point_08006228_080004d0(result_1,result_4,result_1,result_4);\n                result_5 = (undefined4)((ulonglong)temp_10 >> 0x20);\n                temp_8 = (undefined4)temp_10;\n                temp_10 = calculate_floating_point_08006228_080004d0(temp_8,result_5,0x72bea4d0,0x3e663769);\n                temp_10 = calculate_result_08000168((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),temp_8,result_5);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),temp_8,result_5);\n                temp_10 = calculate_result_08000168((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),temp_8,result_5);\n                temp_10 = calculate_concatenation_0800016c((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp_10 = calculate_floating_point_08006228_080004d0((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),temp_8,result_5);\n                temp_10 = calculate_result_08000168(result_1,result_4,(int)temp_10,(int)((ulonglong)temp_10 >> 0x20));\n                temp_8 = (undefined4)((ulonglong)temp_10 >> 0x20);\n                temp_12 = calculate_floating_point_08006228_080004d0(result_1,result_4,(int)temp_10,temp_8);\n                temp_10 = calculate_result_08000168((int)temp_10,temp_8,0,0x40000000);\n                temp_10 = compute_double_08000724((int)temp_12,(int)((ulonglong)temp_12 >> 0x20),(int)temp_10,\n                                      (int)((ulonglong)temp_10 >> 0x20));\n                temp_12 = calculate_floating_point_08006228_080004d0(result_1,result_4,(int)temp_11,temp_9);\n                temp_11 = calculate_concatenation_0800016c((int)temp_12,(int)((ulonglong)temp_12 >> 0x20),(int)temp_11,\n                                      temp_9);\n                temp_11 = calculate_result_08000168((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_11,\n                                      (int)((ulonglong)temp_11 >> 0x20));\n                temp_11 = calculate_result_08000168((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),result_1,result_4);\n                temp_10 = calculate_result_08000168(0,0x3ff00000,(int)temp_11,(int)((ulonglong)temp_11 >> 0x20));\n                temp_2 = (int)((ulonglong)temp_10 >> 0x20);\n                temp_6 = temp_2 + temp_1 * 0x100000;\n                temp_11 = CONCAT44(temp_6,(int)temp_10);\n                input_1 = local_result_1;\n                if (temp_6 < 0x100000) {\n                  temp_11 = calculate_updated_floating_point_080071c0((int)temp_10,temp_2,temp_1);\n                }\n              }\n              else {\n                if ((temp_4 + 0x3f6f3400 | temp_7) == 0) {\n                  temp_10 = calculate_result_08000168(temp_7,temp_4,temp_8,result_4);\n                  temp_1 = check_return_value_080009c8(result_1,temp_9,(int)temp_10,(int)((ulonglong)temp_10 >> 0x20));\n                  if (temp_1 == 0) goto LAB_08006968;\n                }\n                temp_11 = calculate_floating_point_08006228_080004d0(0,input_2,0xc2f8f359,0x1a56e1f);\n                input_1 = 0xc2f8f359;\n                input_2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              temp_7 = calculate_floating_point_08006228_080004d0((int)temp_11,(int)((ulonglong)temp_11 >> 0x20),input_1,input_2);\n              return temp_7;\n            }\n          }\n          result_1 = (undefined4)((ulonglong)temp_10 >> 0x20);\n          temp_10 = calculate_result_08000168((int)temp_10,result_1,(int)temp_10,result_1);\n          temp_11 = temp_10;\nLAB_08006320:\n          temp_7 = compute_double_08000724((int)temp_10,(int)((ulonglong)temp_10 >> 0x20),(int)temp_11,\n                                (int)((ulonglong)temp_11 >> 0x20));\n          return temp_7;\n        }\n      }\n    }\n    else if (temp_7 < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp_4 + 0xc0100000 | input_1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  temp_7 = get_infinity_080070a4(&DAT_0800737e);\n  return temp_7;\n}\n\n",
            "renaming": {
                "FUN_08006228": "calculate_floating_point_08006228",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "extraout_r1": "result_3",
                "uVar3": "result_4",
                "uVar4": "result_5",
                "extraout_r1_00": "result_6",
                "extraout_r1_01": "result_7",
                "extraout_r1_02": "result_8",
                "extraout_r1_03": "result_9",
                "iVar5": "temp_1",
                "iVar6": "temp_2",
                "uVar7": "temp_3",
                "uVar8": "temp_4",
                "uVar9": "temp_5",
                "iVar10": "temp_6",
                "uVar11": "temp_7",
                "uVar12": "temp_8",
                "uVar13": "temp_9",
                "uVar14": "temp_10",
                "uVar15": "temp_11",
                "uVar16": "temp_12",
                "uVar17": "temp_13",
                "lVar18": "temp_14",
                "uVar19": "temp_15",
                "uVar20": "temp_16",
                "local_70": "local_result_1",
                "local_68": "local_result_2",
                "local_64": "local_result_3",
                "local_54": "local_temp"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_080071c0",
                "FUN_0800016c",
                "FUN_080070a4",
                "FUN_080009c8",
                "FUN_08006c0c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "entrypoint": "0x08006c0c",
            "current_name": "calculate_fp_division_08006c0c",
            "code": "\nundefined8 calculate_fp_division_08006c0c(uint dividend,uint divisor)\n\n{\n  undefined4 result1;\n  uint quotient;\n  int exp;\n  int i;\n  uint quotient_shift;\n  uint temp_shifted;\n  int integral_part;\n  uint fractional_part;\n  uint mask;\n  int j;\n  uint temp_sum;\n  undefined8 final_result;\n  \n  if ((~divisor & 0x7ff00000) == 0) {\n    final_result = calculate_floating_point_080004d0(dividend,divisor,dividend,divisor);\n    final_result = calculate_concatenation_0800016c(dividend,divisor,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    return final_result;\n  }\n  if ((int)divisor < 1) {\n    if ((divisor & 0x7fffffff | dividend) == 0) {\n      return CONCAT44(divisor,dividend);\n    }\n    if (divisor != 0) {\n      final_result = calculate_result_08000168(dividend,divisor,dividend,divisor);\n      result1 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = compute_double_08000724((int)final_result,result1,(int)final_result,result1);\n      return final_result;\n    }\n  }\n  exp = (int)divisor >> 0x14;\n  if (exp == 0) {\n    while (divisor == 0) {\n      exp = exp + -0x15;\n      divisor = dividend >> 0xb;\n      dividend = dividend << 0x15;\n    }\n    quotient = 0;\n    for (; -1 < (int)(divisor << 0xb); divisor = divisor << 1) {\n      quotient = quotient + 1;\n    }\n    exp = exp - (quotient - 1);\n    divisor = divisor | dividend >> (0x20 - quotient & 0xff);\n    dividend = dividend << (quotient & 0xff);\n  }\n  integral_part = 0;\n  quotient = divisor & 0xfffff | 0x100000;\n  if ((exp + -0x3ff) * -0x80000000 < 0) {\n    quotient = quotient * 2 - ((int)dividend >> 0x1f);\n    dividend = dividend << 1;\n  }\n  quotient = quotient * 2 - ((int)dividend >> 0x1f);\n  i = 0x16;\n  quotient_shift = 0;\n  fractional_part = 0x200000;\n  dividend = dividend << 1;\n  do {\n    j = quotient_shift + fractional_part;\n    if (j <= (int)quotient) {\n      quotient = quotient - j;\n      quotient_shift = j + fractional_part;\n      integral_part = integral_part + fractional_part;\n    }\n    i = i + -1;\n    quotient = quotient * 2 - ((int)dividend >> 0x1f);\n    fractional_part = fractional_part >> 1;\n    dividend = dividend << 1;\n  } while (i != 0);\n  j = 0x20;\n  mask = 0x80000000;\n  fractional_part = 0;\n  i = 0;\n  do {\n    temp_sum = mask + i;\n    temp_shifted = quotient_shift;\n    if (((int)quotient_shift < (int)quotient) || ((quotient == quotient_shift && (temp_sum <= dividend)))) {\n      i = temp_sum + mask;\n      if (((int)temp_sum < 0) && (-1 < i)) {\n        temp_shifted = quotient_shift + 1;\n      }\n      quotient = quotient - quotient_shift;\n      if (dividend < temp_sum) {\n        quotient = quotient - 1;\n      }\n      dividend = dividend - temp_sum;\n      fractional_part = fractional_part + mask;\n    }\n    quotient = quotient * 2 - ((int)dividend >> 0x1f);\n    j = j + -1;\n    dividend = dividend << 1;\n    mask = mask >> 1;\n    quotient_shift = temp_shifted;\n  } while (j != 0);\n  if ((dividend | quotient) != 0) {\n    if (fractional_part == 0xffffffff) {\n      integral_part = integral_part + 1;\n      fractional_part = 0;\n    }\n    else {\n      fractional_part = fractional_part + 1 & 0xfffffffe;\n    }\n  }\n  fractional_part = fractional_part >> 1;\n  if (integral_part << 0x1f < 0) {\n    fractional_part = fractional_part | 0x80000000;\n  }\n  return CONCAT44((integral_part >> 1) + 0x3fe00000 + (exp + -0x3ff >> 1) * 0x100000,fractional_part);\n}\n\n",
            "renaming": {
                "FUN_08006c0c": "calculate_fp_division_08006c0c",
                "param_1": "dividend",
                "param_2": "divisor",
                "uVar1": "result1",
                "uVar2": "quotient",
                "iVar3": "exp",
                "iVar4": "i",
                "uVar5": "quotient_shift",
                "uVar6": "temp_shifted",
                "iVar7": "integral_part",
                "uVar8": "fractional_part",
                "uVar9": "mask",
                "iVar10": "j",
                "uVar11": "temp_sum",
                "uVar12": "final_result"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005c70",
                "FUN_08006228"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_08006d68": {
            "entrypoint": "0x08006d68",
            "current_name": "calculate_result_08006d68",
            "code": "\nundefined8 calculate_result_08006d68(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint temp7;\n  undefined8 output1;\n  undefined8 output2;\n  \n  output1 = CONCAT44(input2,input1);\n  temp7 = input2 & 0x7fffffff;\n  if (temp7 < 0x44100000) {\n    if (temp7 < 0x3fdc0000) {\n      if (temp7 < 0x3e200000) {\n        output2 = calculate_concatenation_0800016c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        result = check_if_cy_is_null_080009f0((int)output2,(int)((ulonglong)output2 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return output1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      output1 = FUNC_0800708c();\n      temp2 = (undefined4)((ulonglong)output1 >> 0x20);\n      temp1 = (undefined4)output1;\n      if (temp7 < 0x3ff30000) {\n        if (temp7 < 0x3fe60000) {\n          output1 = calculate_concatenation_0800016c(temp1,temp2,temp1,temp2);\n          output1 = calculate_result_08006d68_08000168((int)output1,(int)((ulonglong)output1 >> 0x20),0,0x3ff00000);\n          output2 = calculate_concatenation_0800016c(temp1,temp2,0,0x40000000);\n          output1 = compute_double_08000724((int)output1,(int)((ulonglong)output1 >> 0x20),(int)output2,\n                               (int)((ulonglong)output2 >> 0x20));\n          result = 0;\n        }\n        else {\n          output1 = calculate_result_08006d68_08000168(temp1,temp2,0,0x3ff00000);\n          output2 = calculate_concatenation_0800016c(temp1,temp2,0,0x3ff00000);\n          output1 = compute_double_08000724((int)output1,(int)((ulonglong)output1 >> 0x20),(int)output2,\n                               (int)((ulonglong)output2 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (temp7 < 0x40038000) {\n        output1 = calculate_result_08006d68_08000168(temp1,temp2,0,0x3ff80000);\n        output2 = calculate_floating_point_080004d0(temp1,temp2,0,0x3ff80000);\n        output2 = calculate_concatenation_0800016c((int)output2,(int)((ulonglong)output2 >> 0x20),0,0x3ff00000);\n        output1 = compute_double_08000724((int)output1,(int)((ulonglong)output1 >> 0x20),(int)output2,\n                             (int)((ulonglong)output2 >> 0x20));\n        result = 2;\n      }\n      else {\n        output1 = compute_double_08000724(0,0xbff00000,temp1,temp2);\n        result = 3;\n      }\n    }\n    temp6 = (undefined4)((ulonglong)output1 >> 0x20);\n    temp5 = (undefined4)output1;\n    output1 = calculate_floating_point_080004d0(temp5,temp6,temp5,temp6);\n    temp3 = (undefined4)((ulonglong)output1 >> 0x20);\n    temp1 = (undefined4)output1;\n    output1 = calculate_floating_point_080004d0(temp1,temp3,temp1,temp3);\n    temp4 = (undefined4)((ulonglong)output1 >> 0x20);\n    temp2 = (undefined4)output1;\n    output1 = calculate_floating_point_080004d0(temp2,temp4,0xe322da11,0x3f90ad3a);\n    output1 = calculate_concatenation_0800016c((int)output1,(int)((ulonglong)output1 >> 0x20),0x24760deb,0x3fa97b4b);\n    output1 = calculate_floating_point_080004d0((int)output1,(int)((ulonglong)output1 >> 0x20),temp2,temp4);\n    output1 = calculate_concatenation_0800016c((int)output1,(int)((ulonglong)output1 >> 0x20),0xa0d03d51,0x3fb10d66);\n    output1 = calculate_floating_point_080004d0((int)output1,(int)((ulonglong)output1 >> 0x20),temp2,temp4);\n    output1 = calculate_concatenation_0800016c((int)output1,(int)((ulonglong)output1 >> 0x20),0xc54c206e,0x3fb745cd);\n    output1 = calculate_floating_point_080004d0((int)output1,(int)((ulonglong)output1 >> 0x20),temp2,temp4);\n    output1 = calculate_concatenation_0800016c((int)output1,(int)((ulonglong)output1 >> 0x20),0x920083ff,0x3fc24924);\n    output1 = calculate_floating_point_080004d0((int)output1,(int)((ulonglong)output1 >> 0x20),temp2,temp4);\n    output1 = calculate_concatenation_0800016c((int)output1,(int)((ulonglong)output1 >> 0x20),0x5555550d,0x3fd55555);\n    output1 = calculate_floating_point_080004d0((int)output1,(int)((ulonglong)output1 >> 0x20),temp1,temp3);\n    temp1 = (undefined4)((ulonglong)output1 >> 0x20);\n    output2 = calculate_floating_point_080004d0(temp2,temp4,0x2c6a6c2f,0xbfa2b444);\n    output2 = calculate_result_08006d68_08000168((int)output2,(int)((ulonglong)output2 >> 0x20),0x52defd9a,0x3fadde2d);\n    output2 = calculate_floating_point_080004d0((int)output2,(int)((ulonglong)output2 >> 0x20),temp2,temp4);\n    output2 = calculate_result_08006d68_08000168((int)output2,(int)((ulonglong)output2 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    output2 = calculate_floating_point_080004d0((int)output2,(int)((ulonglong)output2 >> 0x20),temp2,temp4);\n    output2 = calculate_result_08006d68_08000168((int)output2,(int)((ulonglong)output2 >> 0x20),0xfe231671,0x3fbc71c6);\n    output2 = calculate_floating_point_080004d0((int)output2,(int)((ulonglong)output2 >> 0x20),temp2,temp4);\n    output2 = calculate_result_08006d68_08000168((int)output2,(int)((ulonglong)output2 >> 0x20),0x9998ebc4,0x3fc99999);\n    output2 = calculate_floating_point_080004d0((int)output2,(int)((ulonglong)output2 >> 0x20),temp2,temp4);\n    temp2 = (undefined4)((ulonglong)output2 >> 0x20);\n    if (result == -1) {\n      output1 = calculate_concatenation_0800016c((int)output1,temp1,(int)output2,temp2);\n      output1 = calculate_floating_point_080004d0((int)output1,(int)((ulonglong)output1 >> 0x20),temp5,temp6);\n      output1 = calculate_result_08006d68_08000168(temp5,temp6,(int)output1,(int)((ulonglong)output1 >> 0x20));\n    }\n    else {\n      output1 = calculate_concatenation_0800016c((int)output1,temp1,(int)output2,temp2);\n      output1 = calculate_floating_point_080004d0((int)output1,(int)((ulonglong)output1 >> 0x20),temp5,temp6);\n      result = result * 8;\n      output1 = calculate_result_08006d68_08000168((int)output1,(int)((ulonglong)output1 >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      output1 = calculate_result_08006d68_08000168((int)output1,(int)((ulonglong)output1 >> 0x20),temp5,temp6);\n      output1 = calculate_result_08006d68_08000168(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)output1,\n                           (int)((ulonglong)output1 >> 0x20));\n      if ((int)input2 < 0) {\n        output1 = CONCAT44((int)((ulonglong)output1 >> 0x20) + -0x80000000,(int)output1);\n      }\n    }\n  }\n  else if ((temp7 < 0x7ff00001) && ((temp7 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      output1 = 0xbff921fb54442d18;\n    }\n    else {\n      output1 = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    output1 = calculate_concatenation_0800016c(input1,input2,input1,input2,input4);\n  }\n  return output1;\n}\n\n",
            "renaming": {
                "FUN_08006d68": "calculate_result_08006d68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "output1",
                "uVar10": "output2"
            },
            "calling": [
                "FUN_08006070"
            ],
            "called": [
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_0800016c",
                "FUN_08000168",
                "FUN_080004d0",
                "FUN_080009f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800708c": {
            "entrypoint": "0x0800708c",
            "current_name": "FUNC_0800708c",
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "calling": [
                "FUN_08006070",
                "FUN_08006d68",
                "FUN_08005c70",
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_08007092": {
            "entrypoint": "0x08007092",
            "current_name": "get_most_significant_bit_08007092",
            "code": "\nuint getMostSignificantBit_08007092(undefined4 inputValue,uint bitPattern)\n\n{\n  return (bitPattern | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "renaming": {
                "FUN_08007092": "get_most_significant_bit_08007092",
                "param_1": "inputValue",
                "param_2": "bitPattern"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800709e": {
            "entrypoint": "0x0800709e",
            "current_name": "initialize_app_0800709e",
            "code": "\nundefined4 initializeApp_0800709e(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0800709e": "initialize_app_0800709e"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070a4": {
            "entrypoint": "0x080070a4",
            "current_name": "get_infinity_080070a4",
            "code": "\nundefined8 getInfinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "renaming": {
                "FUN_080070a4": "get_infinity_080070a4"
            },
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080070b0": {
            "entrypoint": "0x080070b0",
            "current_name": "concatenate_and_calculate_080070b0",
            "code": "\nundefined8 concatenate_and_calculate_080070b0(uint input_1,uint input_2,undefined4 input_3)\n\n{\n  int offset;\n  undefined4 val1;\n  uint masked_input_2;\n  undefined4 val2;\n  uint result_1;\n  uint shift_amount;\n  uint shifted_input_2;\n  undefined8 result;\n  \n  shifted_input_2 = (input_2 << 1) >> 0x15;\n  shift_amount = shifted_input_2 - 0x3ff;\n  masked_input_2 = input_2;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      if ((input_2 & 0x7fffffff | input_1) == 0) {\n        return CONCAT44(input_2,input_1);\n      }\n      masked_input_2 = input_2 & 0xfffff | input_1;\n      offset = ((int)input_2 >> 0x1f) * -8;\n      val1 = *(undefined4 *)(&DAT_08007430 + offset);\n      val2 = *(undefined4 *)(&DAT_08007434 + offset);\n      result = calculate_concatenation(input_1,(-masked_input_2 | masked_input_2) >> 0xc & 0x80000 | input_2 & 0xfffe0000,val1,\n                           val2,input_1,input_2,input_3);\n      result = calculate_result((int)result,(int)((ulonglong)result >> 0x20),val1,val2);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input_2 & 0x80000000,\n                      (int)result);\n    }\n    shifted_input_2 = 0xfffff >> (shift_amount & 0xff);\n    if ((input_2 & shifted_input_2 | input_1) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    shifted_input_2 = shifted_input_2 >> 1;\n    result_1 = input_2 & shifted_input_2 | input_1;\n    if (result_1 != 0) {\n      if (shift_amount == 0x13) {\n        result_1 = 0x80000000;\n      }\n      else {\n        result_1 = 0;\n      }\n      masked_input_2 = 0x40000 >> (shift_amount & 0xff) | input_2 & ~shifted_input_2;\n    }\n  }\n  else {\n    if (0x33 < (int)shift_amount) {\n      if (shift_amount != 0x400) {\n        return CONCAT44(input_2,input_1);\n      }\n      result = calculate_concatenation();\n      return result;\n    }\n    shifted_input_2 = shifted_input_2 - 0x413;\n    shift_amount = 0xffffffff >> (shifted_input_2 & 0xff);\n    if ((input_1 & shift_amount) == 0) {\n      return CONCAT44(input_2,input_1);\n    }\n    shift_amount = shift_amount >> 1;\n    result_1 = input_1;\n    if ((input_1 & shift_amount) != 0) {\n      result_1 = 0x40000000 >> (shifted_input_2 & 0xff) | input_1 & ~shift_amount;\n    }\n  }\n  offset = ((int)input_2 >> 0x1f) * -8;\n  val1 = *(undefined4 *)(&DAT_08007430 + offset);\n  val2 = *(undefined4 *)(&DAT_08007434 + offset);\n  result = calculate_concatenation(result_1,masked_input_2,val1,val2,input_1,input_2,input_3);\n  result = calculate_result((int)result,(int)((ulonglong)result >> 0x20),val1,val2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080070b0": "concatenate_and_calculate_080070b0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "iVar1": "offset",
                "uVar2": "val1",
                "uVar3": "masked_input_2",
                "uVar4": "val2",
                "uVar5": "result_1",
                "uVar6": "shift_amount",
                "uVar7": "shifted_input_2",
                "uVar8": "result",
                "calculate_concatenation_0800016c": "calculate_concatenation",
                "calculate_result_08000168": "calculate_result"
            },
            "calling": [
                "FUN_08005900"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_08000168"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080071c0": {
            "entrypoint": "0x080071c0",
            "current_name": "calculate_updated_floating_point_080071c0",
            "code": "\nundefined8 calculate_updated_floating_point_080071c0(uint input_param_1,uint input_param_2,int input_param_3,undefined4 input_param_4)\n\n{\n  uint shifted_param_2;\n  undefined4 new_var_1;\n  int updated_param_3;\n  undefined4 new_var_2;\n  uint upper_bits_param_1;\n  undefined8 result;\n  \n  result = CONCAT44(input_param_2,input_param_1);\n  shifted_param_2 = (input_param_2 << 1) >> 0x15;\n  if (shifted_param_2 == 0) {\n    if ((input_param_2 & 0x7fffffff | input_param_1) == 0) {\n      return result;\n    }\n    result = calculate_floating_point(input_param_1,input_param_2,0,0x43500000);\n    if (-0xc351 < input_param_3) {\n      shifted_param_2 = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto LAB_08007210;\n    }\nLAB_080071ec:\n    new_var_1 = 0xc2f8f359;\n    new_var_2 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_param_2 == 0x7ff) {\n      result = calculate_concatenation(input_param_1,input_param_2,input_param_1,input_param_2,input_param_4);\n      return result;\n    }\nLAB_08007210:\n    upper_bits_param_1 = (uint)((ulonglong)result >> 0x20);\n    new_var_1 = (undefined4)result;\n    updated_param_3 = shifted_param_2 + input_param_3;\n    if (updated_param_3 < 0x7ff) {\n      if (0 < updated_param_3) {\n        return CONCAT44(upper_bits_param_1 & 0x800fffff | updated_param_3 * 0x100000,new_var_1);\n      }\n      if (updated_param_3 + 0x35 < 0 == is_overflow(updated_param_3,0x35)) {\n        result = CONCAT44(upper_bits_param_1 & 0x800fffff | (updated_param_3 + 0x36) * 0x100000,new_var_1);\n        new_var_1 = 0;\n        new_var_2 = 0x3c900000;\n        goto LAB_0800722e;\n      }\n      if (input_param_3 < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,new_var_1,upper_bits_param_1);\n        goto LAB_080071ec;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,new_var_1,upper_bits_param_1);\n    new_var_1 = 0x8800759c;\n    new_var_2 = 0x7e37e43c;\n  }\nLAB_0800722e:\n  result = calculate_floating_point((int)result,(int)((ulonglong)result >> 0x20),new_var_1,new_var_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_080071c0": "calculate_updated_floating_point_080071c0",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "uVar1": "shifted_param_2",
                "uVar2": "new_var_1",
                "iVar3": "updated_param_3",
                "uVar4": "new_var_2",
                "uVar5": "upper_bits_param_1",
                "uVar6": "result",
                "calculate_floating_point_080004d0": "calculate_floating_point",
                "calculate_concatenation_0800016c": "calculate_concatenation",
                "SCARRY4": "is_overflow"
            },
            "calling": [
                "FUN_08006228"
            ],
            "called": [
                "FUN_0800016c",
                "FUN_0800729c",
                "FUN_080004d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0800729c": {
            "entrypoint": "0x0800729c",
            "current_name": "FUNC_0800729c",
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "calling": [
                "FUN_080071c0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072ac": {
            "entrypoint": "0x080072ac",
            "current_name": "get_data_value_080072ac",
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "calling": [
                "FUN_08005bc8",
                "FUN_08005854",
                "FUN_08005900"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072b8": {
            "entrypoint": "0x080072b8",
            "current_name": "add_offset_to_global_pointer_080072b8",
            "code": "\nvoid addOffsetToGlobalPointer_080072b8(int offset)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + offset;\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072b8": "add_offset_to_global_pointer_080072b8",
                "param_1": "offset"
            },
            "calling": [
                "FUN_0800581c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_080072d4": {
            "entrypoint": "0x080072d4",
            "current_name": "FUNC_080072d4",
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "calling": [
                "FUN_08004fb4",
                "FUN_08000110",
                "FUN_08000134"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_080072e0": {
            "entrypoint": "0x080072e0",
            "current_name": "FUNC_080072e0",
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "calling": [],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 156841,
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": []
}