{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "set_flag_if_unset_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 setFlagIfUnset_000800f4(undefined4 inputParam)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "set_flag_if_unset_000800f4",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_parameters_00080164",
            "code": "\nvoid initializeParameters_00080164(int **parameterArray)\n\n{\n  int iterationResult;\n  \n  *parameterArray = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)parameterArray + 6)) {\n    process_parameter_00081210(*(byte *)((int)parameterArray + 6),1);\n    update_parameters_00081318(*(undefined *)((int)parameterArray + 6),0);\n  }\n  do {\n    iterationResult = (**(code **)(**parameterArray + 0xc))();\n  } while (-1 < iterationResult);\n  *(undefined *)((int)parameterArray + 0x49) = 0;\n  *(undefined *)((int)parameterArray + 0x4a) = 0;\n  *(undefined2 *)(parameterArray + 0x15) = 0;\n  *(undefined2 *)((int)parameterArray + 0x52) = 0;\n  *(undefined2 *)(parameterArray + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_parameters_00080164",
                "param_1": "parameterArray",
                "iVar1": "iterationResult"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **inputData)\n\n{\n  bool isOverflow;\n  undefined newValue;\n  char outputValue;\n  int result;\n  byte counter;\n  \n  if (1 < *(byte *)((int)inputData + 6)) {\n    update_parameters_00081318(*(byte *)((int)inputData + 6),0);\n  }\n  isOverflow = false;\n  *(undefined *)((int)inputData + 0x49) = 0;\n  if (*(byte *)((int)inputData + 5) < 4) {\n    while (result = (**(code **)(**inputData + 8))(), result != 0) {\n      counter = *(byte *)((int)inputData + 0x49);\n      newValue = (**(code **)(**inputData + 0xc))();\n      outputValue = *(char *)((int)inputData + 0x49);\n      *(undefined *)((int)inputData + counter + 9) = newValue;\n      counter = outputValue + 1;\n      *(byte *)((int)inputData + 0x49) = counter;\n      if (0x3f < counter) {\n        isOverflow = true;\n      }\n    }\n  }\n  *(short *)(inputData + 0x14) = *(short *)(inputData + 0x14) + 1;\n  if (isOverflow) {\n    outputValue = -3;\n    *(short *)(inputData + 0x15) = *(short *)(inputData + 0x15) + 1;\n  }\n  else {\n    outputValue = *(char *)((int)inputData + 0x49);\n  }\n  return (int)outputValue;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "inputData",
                "bVar1": "isOverflow",
                "uVar2": "newValue",
                "cVar3": "outputValue",
                "iVar4": "result",
                "bVar5": "counter"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int dataAddress,uint dataSize)\n\n{\n  int currentAddress;\n  uint checksum;\n  char bitIndex;\n  uint bitValue;\n  \n  checksum = 0xffff;\n  for (currentAddress = dataAddress; (currentAddress - dataAddress & 0xffU) < dataSize; currentAddress = currentAddress + 1) {\n    checksum = checksum ^ *(byte *)(currentAddress + 9);\n    bitIndex = '\\b';\n    do {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitIndex = bitIndex + -1;\n    } while (bitIndex != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "iVar1": "currentAddress",
                "uVar2": "checksum",
                "cVar3": "bitIndex",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_checksum_and_parameters_00080258",
            "code": "\nvoid updateChecksumAndParameters_00080258(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte checksumByte;\n  undefined2 checksum;\n  int result;\n  uint checksumValue;\n  \n  checksumByte = *(byte *)((int)data + 0x49);\n  checksumValue = (uint)checksumByte;\n  checksum = calculate_checksum_0008021c(data,checksumValue,param3,param4,param4);\n  *(char *)((int)data + checksumValue + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)data + (checksumValue + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)data + 0x49) = checksumByte + 2;\n  if (1 < *(byte *)((int)data + 6)) {\n    update_parameters_00081318(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    update_parameters_00081318(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result = get_data_thunk_00081714();\n  data[0x17] = (int *)(result + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_checksum_and_parameters_00080258",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "checksumByte",
                "uVar2": "checksum",
                "iVar3": "result",
                "uVar4": "checksumValue"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_0008021c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_parameters_000802da",
            "code": "\nint validateParameters_000802da(int dataAddress,uint flags,uint value,ushort *array)\n\n{\n  char errorCode;\n  byte byteVar;\n  undefined undefinedVar;\n  ushort ushortVar;\n  uint uintVar;\n  ushort *arrayPtr;\n  undefined param2Byte1;\n  undefined param2Byte2;\n  ushort param3Short;\n  \n  param2Byte1 = (undefined)flags;\n  param2Byte2 = (undefined)(flags >> 8);\n  param3Short = (ushort)value;\n  uintVar = value & 0xffff;\n  if (*(char *)(dataAddress + 4) != '\\0') {\n    errorCode = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(dataAddress + 7) != '\\0') {\n    errorCode = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flags & 0xff) - 1 & 0xff)) {\n    errorCode = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(dataAddress + 9) = param2Byte1;\n  *(undefined *)(dataAddress + 10) = param2Byte2;\n  *(ushort **)(dataAddress + 0x4c) = array;\n  *(char *)(dataAddress + 0xb) = (char)(flags >> 0x18);\n  *(char *)(dataAddress + 0xc) = (char)(flags >> 0x10);\n  undefinedVar = (undefined)(value >> 8);\n  switch(param2Byte2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(dataAddress + 0xd) = undefinedVar;\n    break;\n  case 5:\n    ushortVar = *array;\n    if (ushortVar != 0) {\n      ushortVar = 1;\n    }\n    *(char *)(dataAddress + 0xd) = -(char)ushortVar;\n    uintVar = 0;\n    break;\n  case 6:\n    *(char *)(dataAddress + 0xd) = (char)(*array >> 8);\n    uintVar = (uint)*array;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteVar = (byte)(param3Short >> 3) & 0xfe;\n    if ((value & 0xf) != 0) {\n      byteVar = byteVar + 1;\n    }\n    *(char *)(dataAddress + 0xe) = (char)value;\n    *(undefined *)(dataAddress + 0xd) = undefinedVar;\n    *(byte *)(dataAddress + 0xf) = byteVar;\n    undefinedVar = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(dataAddress + 0xd) = undefinedVar;\n    *(char *)(dataAddress + 0xe) = (char)value;\n    array = array + -1;\n    *(char *)(dataAddress + 0xf) = (char)uintVar * '\\x02';\n    *(undefined *)(dataAddress + 0x49) = 7;\n    arrayPtr = array + uintVar;\n    while (array != arrayPtr) {\n      byteVar = *(byte *)(dataAddress + 0x49);\n      *(char *)(dataAddress + (uint)byteVar + 9) = (char)(array[1] >> 8);\n      uintVar = byteVar + 1 & 0xff;\n      *(char *)(dataAddress + 0x49) = (char)uintVar;\n      array = array + 1;\n      *(char *)(uintVar + dataAddress + 9) = (char)*array;\n      *(byte *)(dataAddress + 0x49) = byteVar + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(dataAddress + 0xe) = (char)uintVar;\n  undefinedVar = 6;\nLAB_0008034a:\n  *(undefined *)(dataAddress + 0x49) = undefinedVar;\nswitchD_0008031e_caseD_7:\n  update_checksum_and_parameters_00080258(dataAddress);\n  *(undefined *)(dataAddress + 7) = 1;\n  errorCode = '\\0';\nLAB_000803cc:\n  return (int)errorCode;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_parameters_000802da",
                "param_1": "dataAddress",
                "param_2": "flags",
                "param_3": "value",
                "param_4": "array",
                "cVar1": "errorCode",
                "bVar2": "byteVar",
                "uVar3": "undefinedVar",
                "uVar4": "ushortVar",
                "uVar5": "uintVar",
                "puVar6": "arrayPtr",
                "local_1c": "param2Byte1",
                "local_1b": "param2Byte2",
                "local_18": "param3Short"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_update_value_000803d4",
            "code": "\nundefined4 checkAndUpdateValue_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "extract_values_and_combine_00080410",
            "code": "\nvoid extractValuesAndCombine_00080410(int inputData,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 combinedValue;\n  int adjustedIndex;\n  byte counter;\n  uint convertedCounter;\n  int arrayBaseIndex;\n  \n  counter = 0;\n  while( true ) {\n    convertedCounter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(inputData + 0xb) >> 1 <= convertedCounter) break;\n    adjustedIndex = (convertedCounter * 2 + 3 & 0xff) + inputData;\n    arrayBaseIndex = *(int *)(inputData + 0x4c);\n    combinedValue = combine_values_000815f8(*(undefined *)(adjustedIndex + 9),*(undefined *)(adjustedIndex + 10),adjustedIndex,\n                         *(byte *)(inputData + 0xb),param4);\n    *(undefined2 *)(arrayBaseIndex + convertedCounter * 2) = combinedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "extract_values_and_combine_00080410",
                "param_1": "inputData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combinedValue",
                "iVar2": "adjustedIndex",
                "bVar3": "counter",
                "uVar4": "convertedCounter",
                "iVar5": "arrayBaseIndex"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_data_0008043e",
            "code": "\nint check_data_0008043e(int **data_array)\n\n{\n  char result;\n  uint function_result;\n  int *thunk_data;\n  int value_check_result;\n  uint param_value;\n  \n  if (*(byte *)((int)data_array + 5) < 4) {\n    function_result = (**(code **)(**data_array + 8))();\n    param_value = function_result & 0xff;\n  }\n  thunk_data = (int *)get_data_thunk_00081714();\n  if (data_array[0x17] < thunk_data) {\n    *(undefined *)(data_array + 2) = 0xff;\n    *(undefined *)((int)data_array + 7) = 0;\n    *(short *)(data_array + 0x15) = *(short *)(data_array + 0x15) + 1;\n  }\n  else if (7 < param_value) {\n    process_data_000801b0(data_array);\n    value_check_result = check_and_update_value_000803d4(data_array);\n    if (value_check_result == 0) {\n      if (*(byte *)((int)data_array + 10) - 3 < 2) {\n        extract_values_and_combine_00080410(data_array);\n      }\n      *(undefined *)((int)data_array + 7) = 0;\n      result = *(char *)((int)data_array + 0x49);\n    }\n    else {\n      *(undefined *)((int)data_array + 7) = 0;\n      result = (char)value_check_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_data_0008043e",
                "param_1": "data_array",
                "cVar1": "result",
                "uVar2": "function_result",
                "piVar3": "thunk_data",
                "iVar4": "value_check_result",
                "unaff_r6": "param_value",
                "param_1[0x17]": "data_array[0x17]"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_system_000804a8",
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int iVar1;\n  \n  set_parameter(1,0);\n  set_parameter(6,1);\n  set_parameter(0,1);\n  set_parameter(1,1);\n  update_parameters(0,0);\n  update_parameters(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_parameters(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_data();\n  iVar1 = get_data();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = get_data();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = get_data();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = get_data();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "process_parameter_00081210": "set_parameter",
                "update_parameters_00081318": "update_parameters",
                "initialize_parameters_00080164": "initialize_parameters",
                "get_data_thunk_00081714": "get_data",
                "software_interrupt": "interrupt"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint dataValue;\n  undefined4 hashValue;\n  undefined4 floatingPointValue;\n  undefined4 newFloatingPointValue;\n  undefined4 combinedFloatValue;\n  int tempVar;\n  uint *ptrVar;\n  undefined4 *ptrValueArray;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    dataValue = get_data_thunk_00081714();\n    if (DAT_200708c8 < dataValue) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    check_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_data_thunk_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = calculate_value_00081894(DAT_200708d8);\n      DAT_2007094c = calculate_hash_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = calculate_value_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    check_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_data_thunk_00081714();\n    }\n    break;\n  case '\\x03':\n    check_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_data_thunk_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    check_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptrValueArray = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      validate_parameters_000802da(&DAT_200709e4,*ptrValueArray,ptrValueArray[1],ptrValueArray[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    check_data_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptrValueArray = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    check_data_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_parameters_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_data_thunk_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptrVar = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptrVar = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (dataValue = get_data_thunk_00081714(), DAT_200708c0 < dataValue))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      tempVar = get_data_thunk_00081714();\n      DAT_200708c0 = tempVar + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      dataValue = get_data_thunk_00081714();\n      if (DAT_200708c0 < dataValue) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar = get_data_thunk_00081714();\n        DAT_200708c0 = tempVar + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptrVar = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      dataValue = get_data_thunk_00081714();\n      if (DAT_200708c0 < dataValue) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar = get_data_thunk_00081714();\n        DAT_200708c0 = tempVar + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  dataValue = get_data_thunk_00081714();\n  if (DAT_200709e0 < dataValue) {\n    hashValue = calculate_hash_0008189c(DAT_20070940);\n    floatingPointValue = calculate_floating_point_00081730(hashValue,DAT_200709c8);\n    hashValue = DAT_200708c4;\n    DAT_20070930 = floatingPointValue;\n    newFloatingPointValue = calculate_new_float_00081734(floatingPointValue,DAT_200708c4);\n    newFloatingPointValue = calculate_floating_point_value_00081944(newFloatingPointValue,DAT_2007094c);\n    newFloatingPointValue = calculate_new_float_00081734(newFloatingPointValue,DAT_20070914);\n    DAT_2007094c = newFloatingPointValue;\n    hashValue = calculate_floating_point_00081730(floatingPointValue,hashValue);\n    hashValue = calculate_floating_point_value_00081944(hashValue,DAT_200709c4);\n    hashValue = calculate_floating_point_00081730(hashValue,DAT_2007096c);\n    DAT_200709c4 = hashValue;\n    combinedFloatValue = calculate_floating_point_value_00081944(floatingPointValue,DAT_20070a4c);\n    combinedFloatValue = calculate_new_float_00081734(combinedFloatValue,newFloatingPointValue);\n    calculate_new_float_00081734(combinedFloatValue,hashValue);\n    DAT_20070910 = truncate_and_negate_00081cd0();\n    DAT_2007091c = calculate_hash_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = floatingPointValue;\n    DAT_20070914 = newFloatingPointValue;\n    DAT_2007096c = hashValue;\n    tempVar = get_data_thunk_00081714();\n    DAT_200709e0 = tempVar + DAT_20070970;\n  }\n  hashValue = calculate_hash_0008189c(DAT_20070970);\n  tempVar = check_combination_validity_00081ca8(DAT_2007091c,hashValue);\n  if (tempVar != 0) {\n    DAT_2007091c = hashValue;\n  }\n  tempVar = check_combination_result_00081c94(DAT_2007091c,0);\n  if (tempVar != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = check_parameter_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "dataValue",
                "uVar2": "hashValue",
                "uVar3": "floatingPointValue",
                "uVar4": "newFloatingPointValue",
                "uVar5": "combinedFloatValue",
                "iVar6": "tempVar",
                "puVar7": "ptrVar",
                "puVar8": "ptrValueArray"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081944",
                "FUN_00081d1c",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_0008189c",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_0008043e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_00080a68",
            "code": "\nvoid initialize_00080a68(void)\n\n{\n  initialize_00080a68_data(&DAT_20070954,\"\");\n  initialize_00080a68_relocation_entry(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_00080a68",
                "initialize_data_00081682": "initialize_data",
                "initialize_relocation_entry_00081d5c": "initialize_relocation_entry"
            },
            "calling": [],
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_program_00080ae4",
            "code": "\n\n\nvoid initializeProgram_00080ae4(void)\n\n{\n  int currentIndex;\n  int nextIndex;\n  \n  initialize_memory_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_function_set_00081d7c();\n  currentIndex = 0;\n  do {\n    nextIndex = currentIndex + 1;\n    update_parameters_00081318(currentIndex,0);\n    currentIndex = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter_00080da0(0x400e0e00,1,0x300,0);\n  update_parameters_00081318(0,1);\n  update_parameter_00080da0(0x400e0e00,1,0xc00,0);\n  update_parameter_00080da0(0x400e0e00,1,0x3000,0);\n  update_parameter_00080da0(0x400e1400,2,0x30,0);\n  update_parameter_00080da0(0x400e1000,1,0xc00,0);\n  update_parameter_00080da0(0x400e0e00,1,3,0);\n  update_parameter_00080da0(0x400e1000,1,0xc000,0);\n  check_and_set_bit_00080e18(0x25);\n  calculate_threshold_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  combine_parameters_00081042(0x400c0000,0,0x300000,1);\n  update_flags_00081034(0x400c0000,0,0);\n  update_parameter_value_0008106e(0x400c0000,0xffffffff);\n  initialize_memory_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_program_00080ae4",
                "iVar1": "currentIndex",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00080f9c",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_and_set_memories_00080c0c",
            "code": "\nvoid initialize_and_set_memories_00080c0c(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  initialize_memory_000813a8(&DAT_20070b84);\n  initialize_memory_000813a8(&DAT_20070ad8);\n  initialize_parameters_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param_3);\n  initialize_memory_000813a8(&DAT_20070de4);\n  initialize_memory_000813a8(&DAT_20070e6c);\n  initialize_memory_000813a8(&DAT_20070ef4);\n  initialize_memory_000813a8(&DAT_20070a50);\n  initialize_memory_000813a8(&DAT_20070c84);\n  initialize_memory_000813a8(&DAT_20070d0c);\n  initialize_and_set_parameters_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_and_set_parameters_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_and_set_parameters_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_and_set_memories_00080c0c"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_functions_00080ce0",
            "code": "\nvoid checkAndExecuteFunctions_00080ce0(void)\n\n{\n  int result;\n  \n  result = calculateDifference(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = calculateDifference(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = calculateDifference(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = calculateDifference(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_functions_00080ce0",
                "iVar1": "result",
                "calculate_difference_000813e4": "calculateDifference"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_00080aa8",
                "FUN_000813e4",
                "FUN_00080abc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_parameter_00080d2e",
            "code": "\nvoid updateParameter_00080d2e(int baseAddress,undefined4 option,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(baseAddress + 0x44) = value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(baseAddress + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_parameter_00080d2e",
                "param_1": "baseAddress",
                "param_2": "option",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_params_00080d54",
            "code": "\nvoid updateParams_00080d54(undefined4 *paramsArray,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  paramsArray[0x11] = newValue;\n  if (isNegative) {\n    paramsArray[0x19] = newValue;\n  }\n  if (!isNegative) {\n    paramsArray[0x18] = newValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    paramsArray[8] = newValue;\n  }\n  if (!isNegative) {\n    paramsArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    paramsArray[0x20] = newValue;\n  }\n  paramsArray[5] = newValue;\n  *paramsArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_params_00080d54",
                "param_1": "paramsArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "set_values_00080d7a",
            "code": "\nvoid setValues_00080d7a(undefined4 *ptrArray,undefined4 value,int flag1,int flag2,int flag3)\n\n{\n  ptrArray[0x11] = value;\n  if (flag3 == 0) {\n    ptrArray[0x18] = value;\n  }\n  else {\n    ptrArray[0x19] = value;\n  }\n  if (flag2 == 0) {\n    ptrArray[0x15] = value;\n  }\n  else {\n    ptrArray[0x14] = value;\n  }\n  if (flag1 == 0) {\n    ptrArray[0xd] = value;\n  }\n  else {\n    ptrArray[0xc] = value;\n  }\n  ptrArray[4] = value;\n  *ptrArray = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "set_values_00080d7a",
                "param_1": "ptrArray",
                "param_2": "value",
                "param_3": "flag1",
                "param_4": "flag2",
                "param_5": "flag3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_parameter_00080da0",
            "code": "\nundefined4 updateParameter_00080da0(int device,int type,undefined4 value,uint flag)\n\n{\n  bool isNegative;\n  \n  switch(type) {\n  case 1:\n  case 2:\n    updateParameter_00080da0Helper(device,type,value);\n    isNegative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = value;\n    if (isNegative) {\n      *(undefined4 *)(device + 100) = value;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(device + 0x60) = value;\n    }\n    break;\n  case 3:\n    updateParams(device,value,flag,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    setValues(device,value,type == 5,(flag << 0x1d) >> 0x1f,flag & 1,type,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_parameter_00080da0",
                "param_1": "device",
                "param_2": "type",
                "param_3": "value",
                "param_4": "flag",
                "bVar1": "isNegative",
                "update_parameter_00080d2e": "updateParameterHelper",
                "update_params_00080d54": "updateParams",
                "set_values_00080d7a": "setValues"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d7a",
                "FUN_00080d2e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_intersection_00080e04",
            "code": "\nuint check_bitwise_intersection_00080e04(int input_pointer,uint bit_mask)\n\n{\n  uint intersection;\n  \n  intersection = *(uint *)(input_pointer + 8) & bit_mask;\n  if (intersection != 0) {\n    if ((bit_mask & *(uint *)(input_pointer + 0x18)) == 0) {\n      intersection = 0;\n    }\n    else {\n      intersection = 1;\n    }\n  }\n  return intersection;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "input_pointer",
                "param_2": "bit_mask",
                "uVar1": "intersection"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_set_bit_00080e18",
            "code": "\n\n\nundefined4 check_and_set_bit_00080e18(uint bit_position)\n\n{\n  uint bit_value;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_value = 1 << (bit_position & 0xff);\n      if ((bit_value & _DAT_400e0618) != bit_value) {\n        _DAT_400e0610 = bit_value;\n      }\n    }\n    else {\n      bit_value = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_value & _DAT_400e0708) != bit_value) {\n        _DAT_400e0700 = bit_value;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_value"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00081508",
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  ptr_relArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "ptr_relArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_continuous_process_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *result,uint data_size,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[72] = 0x202;\n  result[65] = 0;\n  result[69] = 0;\n  quotient = data_size / (uint)(divisor * 2);\n  if (data_size == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)data_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      result[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "result",
                "param_2": "data_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "local_58": "thresholds",
                "param_1[1]": "result[1]",
                "param_1[0x48]": "result[72]",
                "param_1[0x41]": "result[65]",
                "param_1[0x45]": "result[69]",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_flags_00081034",
            "code": "\nvoid updateFlags_00081034(int ptr,uint value1,uint value2)\n\n{\n  *(uint *)(ptr + 4) = value1 | *(uint *)(ptr + 4) | (value2 & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_flags_00081034",
                "param_1": "ptr",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "combine_parameters_00081042",
            "code": "\nvoid combineParameters_00081042(int baseAddress,uint inputValue1,uint inputValue2,uint inputValue3)\n\n{\n  *(uint *)(baseAddress + 4) =\n       inputValue2 | *(uint *)(baseAddress + 4) | (inputValue1 & 0xf) << 0x18 | (inputValue3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "combine_parameters_00081042",
                "param_1": "baseAddress",
                "param_2": "inputValue1",
                "param_3": "inputValue2",
                "param_4": "inputValue3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_at_0008105c",
            "code": "\nvoid setBitAt_0008105c(int baseAddress,uint bitIndex)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_at_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitIndex"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_memory_00081066",
            "code": "\nvoid initializeMemory_00081066(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_memory_00081066",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "update_parameter_value_0008106e",
            "code": "\nvoid updateParameterValue_0008106e(int baseAddress,undefined4 newValue)\n\n{\n  *(undefined4 *)(baseAddress + 0x28) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "update_parameter_value_0008106e",
                "param_1": "baseAddress",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_program_00081184",
            "code": "\nvoid initializeProgram_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_program_00081184",
                "undefined4": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_new_pointer_0008118c",
            "code": "\nint calculateNewPointer_0008118c(int inputValue)\n\n{\n  int oldPointer;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  oldPointer = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return oldPointer;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_new_pointer_0008118c",
                "param_1": "inputValue",
                "iVar1": "oldPointer"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "initialize_return_value_000811ae",
            "code": "\nint initializeReturnValue_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "initialize_return_value_000811ae",
                "undefined4": "int"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 param_1,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_2": "address"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "check_flag_000811be",
            "code": "\nint check_flag_000811be(void)\n\n{\n  result 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "check_flag_000811be",
                "undefined4": "int",
                "return": "result"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_zero_000811c2",
            "code": "\nundefined4 getZero_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_zero_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "get_zero_000811c6",
            "code": "\nundefined4 getZero_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "get_zero_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "process_data_000811cc",
            "code": "\n\n\nuint process_data_000811cc(undefined4 input_param,int data_address,uint data_length)\n\n{\n  int iteration;\n  \n  for (iteration = 0; iteration < (int)data_length; iteration = iteration + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(data_address + iteration);\n  }\n  return data_length & ~((int)data_length >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "process_data_000811cc",
                "param_1": "input_param",
                "param_2": "data_address",
                "param_3": "data_length",
                "iVar1": "iteration"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_data_thunk_00081714",
            "code": "\nundefined4 get_data_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_data_thunk_00081714"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_000805d0",
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "process_parameter_00081210",
            "code": "\n\n\nint processParameter_00081210(int parameterIndex,int parameterValue)\n\n{\n  int result;\n  uint tempVar1;\n  undefined4 tempVar2;\n  uint tempVar3;\n  byte lowerNibble;\n  byte byteVar;\n  int tempVar4;\n  int parameterAddress;\n  \n  result = parameterIndex;\n  if ((&DAT_00084d24)[parameterIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[parameterIndex] & 0xf) == 4) {\n      result = set_bit_at_0008105c(0x400c0000,(&DAT_00084d31)[parameterIndex * 0x1c]);\n    }\n    byteVar = (&DAT_20070d94)[parameterIndex];\n    lowerNibble = byteVar & 0xf;\n    if ((lowerNibble < 3) && (byteVar != 0)) {\n      if (lowerNibble == 2) {\n        if (parameterValue == 0) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (parameterValue == 2) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (parameterValue == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (parameterValue != 1) {\nLAB_0008126c:\n      if (parameterValue == 0) {\n        result = parameterIndex * 0x1c;\n        check_and_set_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_parameter_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        byteVar = (&DAT_20070d94)[parameterIndex] & 0xf0 | 2;\n      }\n      else {\n        if (parameterValue != 2) {\n          return result;\n        }\n        result = parameterIndex * 0x1c;\n        check_and_set_bit_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_parameter_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        byteVar = (&DAT_20070d94)[parameterIndex] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[parameterIndex] = byteVar;\n      return result;\n    }\n    tempVar4 = parameterIndex * 0x1c;\n    parameterAddress = *(int *)(&DAT_00084d18 + tempVar4);\n    if (byteVar >> 4 == 0) {\n      tempVar2 = 4;\n    }\n    else {\n      tempVar2 = 5;\n    }\n    result = update_parameter_00080da0(parameterAddress,tempVar2,*(undefined4 *)(&DAT_00084d1c + tempVar4),\n                         *(undefined4 *)(&DAT_00084d28 + tempVar4));\n    (&DAT_20070d94)[parameterIndex] = (&DAT_20070d94)[parameterIndex] & 0xf0 | 3;\n    if (*(int *)(parameterAddress + 0x18) == -1) {\n      tempVar1 = *(uint *)(&DAT_00084d20 + tempVar4);\n      if (0x2c < tempVar1) {\n        return 1;\n      }\n      if (tempVar1 < 0x20) {\n        tempVar1 = 1 << (tempVar1 & 0xff);\n        tempVar3 = _DAT_400e0618 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0614 = tempVar3;\n        }\n      }\n      else {\n        tempVar1 = 1 << (tempVar1 - 0x20 & 0xff);\n        tempVar3 = _DAT_400e0708 & tempVar1;\n        if (tempVar3 == tempVar1) {\n          _DAT_400e0704 = tempVar3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "process_parameter_00081210",
                "param_1": "parameterIndex",
                "param_2": "parameterValue",
                "iVar1": "result",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "bVar5": "lowerNibble",
                "bVar6": "byteVar",
                "iVar7": "tempVar4",
                "iVar8": "parameterAddress"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080164",
                "FUN_000804a8"
            ],
            "called": [
                "FUN_0008105c",
                "FUN_00080e18",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_parameters_00081318",
            "code": "\nvoid updateParameters_00081318(int index,int value,undefined4 data)\n\n{\n  int intersectionResult;\n  undefined4 paramToSet;\n  int paramToCheck;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      processParameter(index,1,data,5,index,value,data);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    paramToCheck = *(int *)(&DAT_00084d18 + index * 0x1c);\n    paramToSet = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    intersectionResult = checkIntersection(paramToCheck,paramToSet);\n    if (intersectionResult == 0) {\n      if (value != 0) {\n        *(undefined4 *)(paramToCheck + 100) = paramToSet;\n        return;\n      }\n      *(undefined4 *)(paramToCheck + 0x60) = paramToSet;\n      return;\n    }\n    setValues(paramToCheck,paramToSet,value,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_parameters_00081318",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data",
                "iVar1": "intersectionResult",
                "uVar2": "paramToSet",
                "iVar3": "paramToCheck",
                "set_values_00080d7a": "setValues",
                "check_bitwise_intersection_00080e04": "checkIntersection",
                "process_parameter_00081210": "processParameter"
            },
            "calling": [
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_conditional_function_00081388",
            "code": "\nvoid executeConditionalFunction_00081388(void)\n\n{\n  if ((relArray[6].info != 0xffffffff) &&\n     (relArray[6].info = relArray[6].info - 1,\n     relArray[6].info == 0)) {\n    (*(code *)((int)&relArray[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_conditional_function_00081388",
                "Elf32_Rel_ARRAY_20070000": "relArray",
                "r_info": "info",
                "r_offset": "offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initialize_memory_000813a8(int mem_address)\n\n{\n  set_memory(mem_address,0,0x80);\n  *(undefined4 *)(mem_address + 0x80) = 0;\n  *(undefined4 *)(mem_address + 0x84) = 0;\n  return mem_address;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "mem_address",
                "initialize_memory_00082504": "set_memory"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_value_000813c2",
            "code": "\nvoid updateValue_000813c2(int dataPointer,undefined newValue)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(dataPointer + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(dataPointer + 0x84)) {\n    *(undefined *)(dataPointer + *(int *)(dataPointer + 0x80)) = newValue;\n    *(uint *)(dataPointer + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_value_000813c2",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataStruct,undefined4 newValue)\n\n{\n  int ptrData;\n  uint updatedValue;\n  \n  ptrData = *(int *)(dataStruct + 0x14);\n  if ((*(int *)(*(int *)(dataStruct + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(ptrData + 0x84) == *(int *)(ptrData + 0x80))) {\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    updatedValue = *(int *)(ptrData + 0x80) + 1U & 0x8000007f;\n    if ((int)updatedValue < 0) {\n      updatedValue = (updatedValue - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(ptrData + 0x84) == updatedValue);\n    *(char *)(ptrData + *(int *)(ptrData + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataStruct + 0x14) + 0x80) = updatedValue;\n    *(undefined4 *)(*(int *)(dataStruct + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataStruct",
                "param_2": "newValue",
                "iVar1": "ptrData",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_parameters_000814e4",
            "code": "\nvoid initializeParameters_000814e4(undefined4 *params,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  params[1] = 0;\n  params[2] = 1000;\n  params[6] = value1;\n  *params = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(params + 7) = value2;\n  params[4] = value4;\n  params[8] = value3;\n  params[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "params",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_data_structures_00081508",
            "code": "\nvoid initializeDataStructures_00081508(int dataStructOffset,uint divisor,undefined4 initialValue)\n\n{\n  int variable1;\n  undefined4 *pointer2;\n  \n  check_and_set_bit_00080e18(*(undefined4 *)(dataStructOffset + 0x20));\n  pointer2 = *(undefined4 **)(dataStructOffset + 0x18);\n  pointer2[0x48] = 0x202;\n  *pointer2 = 0xac;\n  pointer2[1] = initialValue;\n  pointer2[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / divisor >> 4;\n  pointer2[3] = 0xffffffff;\n  pointer2[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(dataStructOffset + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(dataStructOffset + 0x1c) & 0x1f);\n  variable1 = *(int *)(dataStructOffset + 0x10);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  variable1 = *(int *)(dataStructOffset + 0x14);\n  *(undefined4 *)(variable1 + 0x84) = 0;\n  *(undefined4 *)(variable1 + 0x80) = 0;\n  *pointer2 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_data_structures_00081508",
                "param_1": "dataStructOffset",
                "param_2": "divisor",
                "param_3": "initialValue",
                "iVar1": "variable1",
                "puVar2": "pointer2"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_and_set_parameters_000815d4",
            "code": "\nundefined4 * initializeAndSetParameters_000815d4(undefined4 *output,undefined4 input)\n\n{\n  initializeParameters();\n  *output = &PTR_update_data_00081454_1_000857d8;\n  output[9] = input;\n  return output;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_and_set_parameters_000815d4",
                "param_1": "output",
                "param_2": "input",
                "initialize_parameters_000814e4": "initializeParameters"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "relocate_function_000815fe",
            "code": "\nundefined4 * relocate_function_000815fe(undefined4 *data_ptr)\n\n{\n  relocate_00081e04(*data_ptr);\n  return data_ptr;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "relocate_function_000815fe",
                "param_1": "data_ptr"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_parameter_0008160c",
            "code": "\nvoid resetParameter_0008160c(int *parameter)\n\n{\n  if (*parameter != 0) {\n    relocateFunction();\n  }\n  *parameter = 0;\n  parameter2Value = 0;\n  parameter1Value = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_parameter_0008160c",
                "param_1": "parameter",
                "relocate_00081e04": "relocateFunction",
                "param_1[2]": "parameter2Value",
                "param_1[1]": "parameter1Value"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "relocate_and_copy_00081622",
            "code": "\nint relocate_and_copy_00081622(int *source_ptr,int num_elements,undefined4 param_3,undefined4 param_4)\n\n{\n  int result;\n  \n  result = relocate_and_copy_00081622_function_000825a0(*source_ptr,num_elements + 1,param_3,param_4,param_4);\n  if (result != 0) {\n    *source_ptr = result;\n    source_ptr[1] = num_elements;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081622": "relocate_and_copy_00081622",
                "param_1": "source_ptr",
                "param_2": "num_elements",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_copy_data_0008163a",
            "code": "\nundefined4 check_and_copy_data_0008163a(int *data_array,uint min_value)\n\n{\n  int result;\n  \n  if ((*data_array == 0) || ((uint)data_array[1] < min_value)) {\n    result = relocate_and_copy_00081622(data_array);\n    if (result == 0) {\n      return 0;\n    }\n    if (data_array[2] == 0) {\n      *(undefined *)*data_array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_copy_data_0008163a",
                "param_1": "data_array",
                "param_2": "min_value",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_and_copy_data_0008165c",
            "code": "\nundefined4 * updateAndCopyData_0008165c(undefined4 *dataPointer,undefined4 sourcePointer,undefined4 newData)\n\n{\n  int result;\n  \n  result = check_and_copy_data_0008163a(dataPointer,newData);\n  if (result == 0) {\n    reset_parameter_0008160c(dataPointer);\n  }\n  else {\n    dataPointer[2] = newData;\n    copy_string_with_alignment_00082994(*dataPointer,sourcePointer);\n  }\n  return dataPointer;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_and_copy_data_0008165c",
                "param_1": "dataPointer",
                "param_2": "sourcePointer",
                "param_3": "newData",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_data_00081682",
            "code": "\nundefined4 * initializeData_00081682(undefined4 *outputArray,int inputValue)\n\n{\n  undefined4 leadingZerosCount;\n  \n  *outputArray = 0;\n  outputArray[1] = 0;\n  outputArray[2] = 0;\n  if (inputValue != 0) {\n    leadingZerosCount = count_leading_zeros_00082a50(inputValue);\n    update_and_copy_data_0008165c(outputArray,inputValue,leadingZerosCount);\n  }\n  return outputArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_data_00081682",
                "param_1": "outputArray",
                "param_2": "inputValue",
                "uVar1": "leadingZerosCount"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_continuous_process_000816a8",
            "code": "\nvoid runContinuousProcess_000816a8(void)\n\n{\n  initializeData();\n  initializeProgram();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initializeSystem();\n  do {\n    processData();\n    checkAndExecuteFunctions();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_continuous_process_000816a8",
                "initialize_data_000816d4": "initializeData",
                "initialize_program_00080ae4": "initializeProgram",
                "initialize_system_000804a8": "initializeSystem",
                "process_data_000805d0": "processData",
                "check_and_execute_functions_00080ce0": "checkAndExecuteFunctions"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00080ae4",
                "FUN_000816d4",
                "FUN_000816a6",
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_000805d0",
                "FUN_0008120c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_data_000816d4",
            "code": "\n\n\nvoid initializeData_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_data_00081714",
            "code": "\nundefined4 getGlobalData_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_data_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_00081730",
            "code": "\nuint calculateFloatingPoint_00081730(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint xorResult;\n  uint shiftedXorResult;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool isTrue;\n  \n  xorResult = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  isTrue = result1 == 0;\n  if (!isTrue) {\n    param4 = input2 << 1;\n    isTrue = param4 == 0;\n  }\n  if (!isTrue) {\n    isTrue = result1 == param4;\n  }\n  shiftedInput1 = (int)result1 >> 0x18;\n  if (!isTrue) {\n    isTrue = shiftedInput1 == -1;\n  }\n  if (!isTrue) {\n    isTrue = (int)param4 >> 0x18 == -1;\n  }\n  if (isTrue) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      result1 = xorResult;\n      if (shiftedInput1 == -1) {\n        result1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        xorResult = result1;\n      }\n      isTrue = (result1 & 0x7fffff) == 0;\n      if (isTrue) {\n        isTrue = (xorResult & 0x7fffff) == 0;\n      }\n      if (isTrue) {\n        isTrue = result1 == xorResult;\n      }\n      if (!isTrue) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ xorResult) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = xorResult;\n      }\n      return input1;\n    }\n    if (input1 != xorResult) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      xorResult = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        xorResult = xorResult | 0x80000000;\n      }\n      return xorResult;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - result1;\n  isTrue = difference != 0;\n  result2 = result1;\n  if (isTrue && result1 <= param4) {\n    result2 = result1 + difference;\n  }\n  if (isTrue && result1 <= param4) {\n    xorResult = xorResult ^ input1;\n  }\n  if (isTrue && result1 <= param4) {\n    input1 = input1 ^ xorResult;\n  }\n  if (isTrue && result1 <= param4) {\n    xorResult = xorResult ^ input1;\n  }\n  if (param4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  shiftedXorResult = xorResult & 0xffffff | 0x800000;\n  if ((xorResult & 0x80000000) != 0) {\n    shiftedXorResult = -shiftedXorResult;\n  }\n  if (result2 == difference) {\n    shiftedXorResult = shiftedXorResult ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)shiftedXorResult >> (difference & 0xff));\n  shiftedXorResult = shiftedXorResult << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    isTrue = shiftedXorResult != 0;\n    shiftedXorResult = -shiftedXorResult;\n    result1 = -result1 - (uint)isTrue;\n  }\n  if (result1 < 0x800000) {\n    xorResult = shiftedXorResult & 0x80000000;\n    shiftedXorResult = shiftedXorResult << 1;\n    result1 = result1 * 2 + (uint)(xorResult != 0);\n    xorResult = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = LZCOUNT(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)xorResult < (int)difference) {\n        result1 = result1 >> (-(xorResult - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (xorResult - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    xorResult = result2 - 1;\n    if (0xffffff < result1) {\n      xorResult = result1 & 1;\n      result1 = result1 >> 1;\n      shiftedXorResult = (uint)(xorResult != 0) << 0x1f | shiftedXorResult >> 1;\n      xorResult = result2;\n      if (0xfd < result2) goto LAB_0008186a;\n    }\n  }\n  result1 = result1 + xorResult * 0x800000 + (uint)(0x7fffffff < shiftedXorResult);\n  if (shiftedXorResult == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "xorResult",
                "uVar4": "shiftedXorResult",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference",
                "bVar8": "isTrue"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_new_float_00081734",
            "code": "\nuint calculateNewFloat_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shiftedInput1;\n  int shiftedInput2;\n  uint shiftedValue;\n  uint modifiedInput1;\n  uint loopCounter;\n  uint difference;\n  bool isEqual;\n  \n  modifiedInput1 = input1 << 1;\n  isEqual = modifiedInput1 == 0;\n  if (!isEqual) {\n    input4 = input2 << 1;\n    isEqual = input4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = modifiedInput1 == input4;\n  }\n  shiftedInput1 = (int)modifiedInput1 >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)input4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2 = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1 == -1 || shiftedInput2 == -1) {\n      modifiedInput1 = input2;\n      if (shiftedInput1 == -1) {\n        modifiedInput1 = input1;\n      }\n      if (shiftedInput1 != -1 || shiftedInput2 != -1) {\n        input2 = modifiedInput1;\n      }\n      isEqual = (modifiedInput1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = modifiedInput1 == input2;\n      }\n      if (!isEqual) {\n        modifiedInput1 = modifiedInput1 | 0x400000;\n      }\n      return modifiedInput1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (modifiedInput1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((modifiedInput1 & 0xff000000) == 0) {\n      modifiedInput1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        modifiedInput1 = modifiedInput1 | 0x80000000;\n      }\n      return modifiedInput1;\n    }\n    if (modifiedInput1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  modifiedInput1 = modifiedInput1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - modifiedInput1;\n  isEqual = difference != 0;\n  loopCounter = modifiedInput1;\n  if (isEqual && modifiedInput1 <= input4) {\n    loopCounter = modifiedInput1 + difference;\n  }\n  if (isEqual && modifiedInput1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && modifiedInput1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && modifiedInput1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < modifiedInput1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  modifiedInput1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    modifiedInput1 = -modifiedInput1;\n  }\n  shiftedValue = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    shiftedValue = -shiftedValue;\n  }\n  if (loopCounter == difference) {\n    shiftedValue = shiftedValue ^ 0x800000;\n    if (loopCounter == 0) {\n      modifiedInput1 = modifiedInput1 ^ 0x800000;\n      loopCounter = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  modifiedInput1 = modifiedInput1 + ((int)shiftedValue >> (difference & 0xff));\n  shiftedValue = shiftedValue << (0x20 - difference & 0xff);\n  input1 = modifiedInput1 & 0x80000000;\n  if ((int)modifiedInput1 < 0) {\n    isEqual = shiftedValue != 0;\n    shiftedValue = -shiftedValue;\n    modifiedInput1 = -modifiedInput1 - (uint)isEqual;\n  }\n  if (modifiedInput1 < 0x800000) {\n    difference = shiftedValue & 0x80000000;\n    shiftedValue = shiftedValue << 1;\n    modifiedInput1 = modifiedInput1 * 2 + (uint)(difference != 0);\n    difference = loopCounter - 2;\n    if ((modifiedInput1 & 0x800000) == 0) {\n      loopCounter = leadingZeroCount(modifiedInput1) - 8;\n      modifiedInput1 = modifiedInput1 << (loopCounter & 0xff);\n      if ((int)difference < (int)loopCounter) {\n        modifiedInput1 = modifiedInput1 >> (-(difference - loopCounter) & 0xff);\n      }\n      else {\n        modifiedInput1 = modifiedInput1 + (difference - loopCounter) * 0x800000;\n      }\n      return modifiedInput1 | input1;\n    }\n  }\n  else {\n    difference = loopCounter - 1;\n    if (0xffffff < modifiedInput1) {\n      difference = modifiedInput1 & 1;\n      modifiedInput1 = modifiedInput1 >> 1;\n      shiftedValue = (uint)(difference != 0) << 0x1f | shiftedValue >> 1;\n      difference = loopCounter;\n      if (0xfd < loopCounter) goto LAB_0008186a;\n    }\n  }\n  modifiedInput1 = modifiedInput1 + difference * 0x800000 + (uint)(0x7fffffff < shiftedValue);\n  if (shiftedValue == 0x80000000) {\n    modifiedInput1 = modifiedInput1 & 0xfffffffe;\n  }\n  return modifiedInput1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_new_float_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar4": "modifiedInput1",
                "uVar5": "loopCounter",
                "uVar6": "difference",
                "bVar7": "isEqual",
                "iVar1": "shiftedInput1",
                "iVar2": "shiftedInput2",
                "uVar3": "shiftedValue",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_value_00081894",
            "code": "\nuint calculateValue_00081894(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftCount;\n  int constant;\n  uint mask;\n  \n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftCount = leadingZeros - 8;\n  constant = shiftCount * -0x800000 + 0x4a800000;\n  if (7 < leadingZeros) {\n    mask = 0 << (shiftCount & 0xff);\n    leadingZeros = constant + (inputValue << (shiftCount & 0xff)) +\n            (0U >> (0x20 - shiftCount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeros = leadingZeros & 0xfffffffe;\n    }\n    return leadingZeros;\n  }\n  shiftCount = inputValue << leadingZeros + 0x18;\n  leadingZeros = constant + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftCount >> 0x1f));\n  if ((shiftCount & 0x7fffffff) == 0) {\n    leadingZeros = leadingZeros & ~(shiftCount >> 0x1f);\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_value_00081894",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftCount",
                "iVar3": "constant",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_hash_0008189c",
            "code": "\nuint calculateHash_0008189c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftDistance;\n  uint isNegative;\n  int result;\n  \n  isNegative = input & 0x80000000;\n  if ((int)isNegative < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(input);\n  shiftDistance = leadingZeros - 8;\n  result = ((isNegative | 0x4b000000) - 0x800000) + shiftDistance * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftDistance & 0xff);\n    isNegative = result + (input << (shiftDistance & 0xff)) +\n            (0U >> (0x20 - shiftDistance & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      isNegative = isNegative & 0xfffffffe;\n    }\n    return isNegative;\n  }\n  shiftDistance = input << leadingZeros + 0x18;\n  isNegative = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftDistance >> 0x1f));\n  if ((shiftDistance & 0x7fffffff) == 0) {\n    isNegative = isNegative & ~(shiftDistance >> 0x1f);\n  }\n  return isNegative;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_hash_0008189c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftDistance",
                "uVar3": "isNegative",
                "iVar4": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_value_00081944",
            "code": "\nuint calculateFloatingPointValue_00081944(uint exponent1,uint exponent2,undefined4 mantissa1,uint mantissa2)\n\n{\n  longlong result;\n  uint bits;\n  uint exp1Bit;\n  int sumExpBits;\n  int numBits;\n  uint mant1Bits;\n  int exp2Bit;\n  uint mant2Bits;\n  bool isZero;\n  bool isNegative;\n  \n  exp1Bit = exponent1 >> 0x17 & 0xff;\n  isZero = exp1Bit == 0;\n  if (!isZero) {\n    mantissa2 = exponent2 >> 0x17 & 0xff;\n    isZero = mantissa2 == 0;\n  }\n  if (!isZero) {\n    isZero = exp1Bit == 0xff;\n  }\n  if (!isZero) {\n    isZero = mantissa2 == 0xff;\n  }\n  if (isZero) {\n    mantissa2 = exponent2 >> 0x17 & 0xff;\n    if (exp1Bit == 0xff || mantissa2 == 0xff) {\n      isZero = exponent1 == 0 || exponent1 == 0x80000000;\n      bits = exponent2;\n      if (exponent1 != 0 && exponent1 != 0x80000000) {\n        isZero = exponent2 == 0;\n        bits = exponent1;\n      }\n      if (!isZero) {\n        isZero = exponent2 == 0x80000000;\n      }\n      mant2Bits = bits;\n      if (((isZero) || ((exp1Bit == 0xff && ((bits & 0x7fffff) != 0)))) ||\n         ((mantissa2 == 0xff && (mant2Bits = exponent2, (exponent2 & 0x7fffff) != 0)))) {\n        return mant2Bits | 0x7fc00000;\n      }\n      bits = bits ^ exponent2;\n      goto LAB_00081a94;\n    }\n    isZero = (exponent1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (exponent2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (exponent1 ^ exponent2) & 0x80000000;\n    }\n    isZero = exp1Bit == 0;\n    bits = exponent1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        exponent1 = exponent1 << 1;\n        isZero = (exponent1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      exp1Bit = exp1Bit - 1;\n    }\n    exponent1 = exponent1 | bits;\n    isZero = mantissa2 == 0;\n    bits = exponent2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        exponent2 = exponent2 << 1;\n        isZero = (exponent2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      mantissa2 = mantissa2 - 1;\n    }\n    exponent2 = exponent2 | bits;\n  }\n  sumExpBits = exp1Bit + mantissa2;\n  mant2Bits = exponent1 ^ exponent2;\n  exp1Bit = exponent1 << 9;\n  isZero = exp1Bit == 0;\n  if (!isZero) {\n    exponent2 = exponent2 << 9;\n    isZero = exponent2 == 0;\n  }\n  if (isZero) {\n    if (exp1Bit == 0) {\n      exponent2 = exponent2 << 9;\n    }\n    bits = mant2Bits & 0x80000000 | exponent1 & 0x7fffff | exponent2 >> 9;\n    isNegative = SBORROW4(sumExpBits,0x7f);\n    numBits = sumExpBits + -0x7f;\n    isZero = numBits == 0;\n    exp2Bit = numBits;\n    if (!isZero && 0x7e < sumExpBits) {\n      isNegative = SBORROW4(0xff,numBits);\n      exp2Bit = 0xff - numBits;\n      isZero = numBits == 0xff;\n    }\n    if (!isZero && exp2Bit < 0 == isNegative) {\n      bits = bits | numBits * 0x800000;\n    }\n    if (!isZero && exp2Bit < 0 == isNegative) {\n      return bits;\n    }\n    bits = bits | 0x800000;\n    mant1Bits = 0;\n    isNegative = SBORROW4(numBits,1);\n    mant2Bits = sumExpBits - 0x80;\n    isZero = mant2Bits == 0;\n    exp1Bit = mant2Bits;\n  }\n  else {\n    result = (ulonglong)(exp1Bit >> 5 | 0x8000000) * (ulonglong)(exponent2 >> 5 | 0x8000000);\n    mant1Bits = (uint)result;\n    bits = (uint)((ulonglong)result >> 0x20);\n    isZero = bits < 0x800000;\n    if (isZero) {\n      bits = bits << 1;\n    }\n    if (isZero) {\n      bits = bits | mant1Bits >> 0x1f;\n      mant1Bits = mant1Bits << 1;\n    }\n    bits = mant2Bits & 0x80000000 | bits;\n    mant2Bits = (sumExpBits + -0x7f) - (uint)isZero;\n    isNegative = SBORROW4(mant2Bits,0xfd);\n    isZero = mant2Bits == 0xfd;\n    exp1Bit = mant2Bits - 0xfd;\n    if (mant2Bits < 0xfe) {\n      bits = bits + mant2Bits * 0x800000 + (uint)(0x7fffffff < mant1Bits);\n      if (mant1Bits == 0x80000000) {\n        bits = bits & 0xfffffffe;\n      }\n      return bits;\n    }\n  }\n  if (isZero || (int)exp1Bit < 0 != isNegative) {\n    isZero = (int)(mant2Bits + 0x19) < 0;\n    if (mant2Bits == 0xffffffe7 || isZero != SCARRY4(mant2Bits,0x19)) {\n      bits = bits & 0x80000000;\n    }\n    if (mant2Bits != 0xffffffe7 && isZero == SCARRY4(mant2Bits,0x19)) {\n      exp1Bit = (bits << 1) >> (-mant2Bits & 0xff);\n      mant2Bits = bits << (mant2Bits + 0x20 & 0xff);\n      exp1Bit = ((uint)((bits & 0x80000000) != 0) << 0x1f | exp1Bit >> 1) + (uint)((byte)exp1Bit & 1);\n      if ((mant1Bits | mant2Bits << 1) == 0) {\n        exp1Bit = exp1Bit & ~(mant2Bits >> 0x1f);\n      }\n      return exp1Bit;\n    }\n    return bits;\n  }\nLAB_00081a94:\n  return bits & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_value_00081944",
                "param_1": "exponent1",
                "param_2": "exponent2",
                "param_3": "mantissa1",
                "param_4": "mantissa2",
                "lVar1": "result",
                "uVar2": "bits",
                "uVar3": "exp1Bit",
                "iVar4": "sumExpBits",
                "iVar5": "numBits",
                "uVar6": "mant1Bits",
                "iVar7": "exp2Bit",
                "uVar8": "mant2Bits",
                "bVar9": "isZero",
                "bVar10": "isNegative"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_parameters_00081bf4",
            "code": "\nuint check_parameters_00081bf4(uint value1,uint value2)\n\n{\n  bool is_negative_result;\n  uint double_value1;\n  uint double_value2;\n  uint combined_value;\n  bool is_result_zero;\n  \n  double_value1 = value1 * 2;\n  double_value2 = value2 * 2;\n  if (((int)double_value1 >> 0x18 == -1 || (int)double_value2 >> 0x18 == -1) &&\n     ((((int)double_value1 >> 0x18 == -1 && ((value1 & 0x7fffff) != 0)) ||\n      (((int)double_value2 >> 0x18 == -1 && ((value2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_value = double_value1 | value2 & 0x7fffffff;\n  is_result_zero = combined_value == 0;\n  if (!is_result_zero) {\n    combined_value = value1 ^ value2;\n    is_result_zero = combined_value == 0;\n  }\n  is_negative_result = -1 < (int)combined_value;\n  if (is_negative_result) {\n    value1 = double_value1 + value2 * -2;\n    is_result_zero = value1 == 0;\n  }\n  if ((is_negative_result && double_value2 <= double_value1) && !is_result_zero) {\n    value1 = (int)value2 >> 0x1f;\n  }\n  if (!is_negative_result || double_value2 > double_value1) {\n    value1 = ~((int)value2 >> 0x1f);\n  }\n  if (!is_result_zero) {\n    value1 = value1 | 1;\n  }\n  result value1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_parameters_00081bf4",
                "param_1": "value1",
                "param_2": "value2",
                "uVar2": "double_value1",
                "uVar3": "double_value2",
                "uVar4": "combined_value",
                "bVar1": "is_negative_result",
                "bVar5": "is_result_zero",
                "return": "result"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "combine_parameters_00081c54",
            "code": "\nvoid combineParameters_00081c54(undefined4 dstParam,undefined4 srcParam)\n\n{\n  combine_parameters_00081c5c(srcParam,dstParam);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "combine_parameters_00081c54",
                "param_1": "dstParam",
                "param_2": "srcParam"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "combine_parameters_00081c5c",
            "code": "\nundefined8 combineParameters_00081c5c(undefined4 firstParam,undefined4 secondParam)\n\n{\n  check_parameters_00081bf4();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "combine_parameters_00081c5c",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_combination_result_00081c94",
            "code": "\nbool check_combination_result_00081c94(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  combine_parameters_00081c5c();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_combination_result_00081c94",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_combination_validity_00081ca8",
            "code": "\nbool check_combination_validity_00081ca8(void)\n\n{\n  undefined zero_result;\n  undefined carry_flag;\n  \n  combine_parameters_00081c54();\n  return !(bool)carry_flag || (bool)zero_result;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_combination_validity_00081ca8",
                "in_ZR": "zero_result",
                "in_CY": "carry_flag"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "truncate_and_negate_00081cd0",
            "code": "\nuint truncateAndNegate_00081cd0(uint positiveValue)\n\n{\n  uint shiftedValue;\n  uint shiftAmount;\n  \n  if (positiveValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  shiftedValue = (positiveValue << 1) >> 0x18;\n  shiftAmount = 0x9e - shiftedValue;\n  if (shiftedValue < 0x9f && shiftAmount != 0) {\n    shiftedValue = (positiveValue << 8 | 0x80000000) >> (shiftAmount & 0xff);\n    if ((positiveValue & 0x80000000) != 0) {\n      shiftedValue = -shiftedValue;\n    }\n    return shiftedValue;\n  }\n  if ((shiftAmount == 0xffffff9f) && ((positiveValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  positiveValue = positiveValue & 0x80000000;\n  if (positiveValue == 0) {\n    positiveValue = 0x7fffffff;\n  }\n  return positiveValue;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "truncate_and_negate_00081cd0",
                "param_1": "positiveValue",
                "uVar1": "shiftedValue",
                "uVar2": "shiftAmount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_parameter_00081d1c",
            "code": "\nuint checkParameter_00081d1c(uint input)\n\n{\n  uint result;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (input << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_parameter_00081d1c",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "initialize_relocation_entry_00081d5c",
            "code": "\nundefined4 initializeRelocationEntry_00081d5c(dword symbolAddress,dword dataAddress,dword symbolIndex)\n\n{\n  dword *relocationEntry;\n  uint entryIndex;\n  uint bitmask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  entryIndex = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationEntry = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)entryIndex) {\n    relocationEntry = (dword *)relocate_pointers_00081df4(400);\n    if (relocationEntry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationEntry = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationEntry[1] = 0;\n    entryIndex = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationEntry;\n    relocationEntry[0x62] = 0;\n    relocationEntry[99] = 0;\n  }\n  bitmask = 1 << (entryIndex & 0xff);\n  relocationEntry[entryIndex + 0x22] = symbolAddress;\n  relocationEntry[0x62] = relocationEntry[0x62] | bitmask;\n  relocationEntry[entryIndex + 0x42] = symbolIndex;\n  relocationEntry[99] = bitmask | relocationEntry[99];\n  relocationEntry[1] = entryIndex + 1;\n  relocationEntry[entryIndex + 2] = dataAddress;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "initialize_relocation_entry_00081d5c",
                "param_1": "symbolAddress",
                "param_2": "dataAddress",
                "param_3": "symbolIndex",
                "pdVar1": "relocationEntry",
                "uVar2": "entryIndex",
                "uVar3": "bitmask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_function_set_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeFunctionSet_00081d7c(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  FUNC_00085858();\n  functionPointerArray = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointerArray = functionPointerArray + 1;\n    (**functionPointerArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_function_set_00081d7c",
                "iVar1": "iterationCount",
                "ppcVar2": "functionPointerArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00085858",
                "FUN_00080118",
                "FUN_00083974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "relocate_pointers_00081df4",
            "code": "\nvoid relocate_pointers_00081df4(undefined4 input_param)\n\n{\n  relocate_pointers_00081df4_00081e14(relocation_array[140].r_offset,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "relocate_pointers_00081df4",
                "param_1": "input_param",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "relocate_00081e04",
            "code": "\nvoid relocate_00081e04(undefined4 new_location)\n\n{\n  relocate_00081e04_function_00083d9c(relocation_table[140].r_offset,new_location);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "relocate_00081e04",
                "param_1": "new_location",
                "Elf32_Rel_ARRAY_20070000": "relocation_table"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "relocate_pointers_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * relocatePointers_00081e14(undefined4 *pointerList,uint pointerCount)\n\n{\n  dword relInfo;\n  int iVar1;\n  uint totalSize;\n  uint adjustedSize;\n  int tempVar1;\n  uint tempVar2;\n  dword currentRelInfo;\n  uint tempVar3;\n  int tempVar4;\n  undefined *tempPtr1;\n  dword tempVar5;\n  dword tempVar6;\n  int tempVar7;\n  dword *relArray;\n  uint adjustedSize2;\n  undefined *tempPtr2;\n  dword *tempPtr3;\n  uint tempVar8;\n  \n  if (pointerCount + 0xb < 0x17) {\n    adjustedSize2 = 0x10;\n    if (0x10 < pointerCount) goto LAB_00081e7a;\n  }\n  else {\n    adjustedSize2 = pointerCount + 0xb & 0xfffffff8;\n    if (((int)adjustedSize2 < 0) || (adjustedSize2 < pointerCount)) {\nLAB_00081e7a:\n      *pointerList = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(pointerList);\n  relInfo = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (adjustedSize2 < 0x1f8) {\n    tempVar7 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + adjustedSize2);\n    if ((tempVar7 != adjustedSize2 + 0x20070464) ||\n       (iVar1 = tempVar7 + 8, tempVar7 = *(int *)(tempVar7 + 0x14), iVar1 != tempVar7)) {\n      tempVar1 = *(int *)(tempVar7 + 0xc);\n      tempVar4 = (*(uint *)(tempVar7 + 4) & 0xfffffffc) + tempVar7;\n      adjustedSize2 = *(uint *)(tempVar4 + 4);\n      iVar1 = *(int *)(tempVar7 + 8);\n      *(int *)(iVar1 + 0xc) = tempVar1;\n      *(int *)(tempVar1 + 8) = iVar1;\n      *(uint *)(tempVar4 + 4) = adjustedSize2 | 1;\n      FUNC_0008259c(pointerList);\n      return (int *)(tempVar7 + 8);\n    }\n    tempVar8 = (adjustedSize2 >> 3) + 2;\n  }\n  else {\n    tempVar8 = adjustedSize2 >> 9;\n    if (tempVar8 == 0) {\n      iVar1 = 0x7e;\n      tempVar7 = 0x3f;\n    }\n    else if (tempVar8 < 5) {\n      tempVar7 = (adjustedSize2 >> 6) + 0x38;\n      iVar1 = tempVar7 * 2;\n    }\n    else if (tempVar8 < 0x15) {\n      tempVar7 = tempVar8 + 0x5b;\n      iVar1 = tempVar7 * 2;\n    }\n    else if (tempVar8 < 0x55) {\n      tempVar7 = (adjustedSize2 >> 0xc) + 0x6e;\n      iVar1 = tempVar7 * 2;\n    }\n    else if (tempVar8 < 0x155) {\n      tempVar7 = (adjustedSize2 >> 0xf) + 0x77;\n      iVar1 = tempVar7 * 2;\n    }\n    else if (tempVar8 < 0x555) {\n      tempVar7 = (adjustedSize2 >> 0x12) + 0x7c;\n      iVar1 = tempVar7 * 2;\n    }\n    else {\n      iVar1 = 0xfc;\n      tempVar7 = 0x7e;\n    }\n    for (currentRelInfo = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[iVar1]; iVar1 * 4 + 0x20070464U != currentRelInfo\n        ; currentRelInfo = *(dword *)(currentRelInfo + 0xc)) {\n      tempVar8 = *(uint *)(currentRelInfo + 4) & 0xfffffffc;\n      tempVar1 = tempVar8 - adjustedSize2;\n      if (0xf < tempVar1) {\n        tempVar7 = tempVar7 + -1;\n        break;\n      }\n      if (-1 < tempVar1) {\n        iVar1 = tempVar8 + currentRelInfo;\n        adjustedSize2 = *(uint *)(iVar1 + 4);\n        tempVar1 = *(int *)(currentRelInfo + 0xc);\n        tempVar7 = *(int *)(currentRelInfo + 8);\n        *(int *)(tempVar7 + 0xc) = tempVar1;\n        *(int *)(tempVar1 + 8) = tempVar7;\n        *(uint *)(iVar1 + 4) = adjustedSize2 | 1;\n        FUNC_0008259c(pointerList);\n        return (int *)(currentRelInfo + 8);\n      }\n    }\n    tempVar8 = tempVar7 + 1;\n  }\n  currentRelInfo = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    totalSize = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    adjustedSize = totalSize & 0xfffffffc;\n    tempVar2 = adjustedSize - adjustedSize2;\n    if (0xf < (int)tempVar2) {\n      currentRelInfo = adjustedSize2 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = adjustedSize2 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = currentRelInfo;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = currentRelInfo;\n      *(undefined4 *)(currentRelInfo + 0xc) = 0x2007046c;\n      *(undefined4 *)(currentRelInfo + 8) = 0x2007046c;\n      *(uint *)(currentRelInfo + 4) = tempVar2 | 1;\n      *(uint *)(currentRelInfo + tempVar2) = tempVar2;\n      FUNC_0008259c(pointerList);\n      return (int *)(relInfo + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)tempVar2) {\n      *(uint *)(adjustedSize + relInfo + 4) = *(uint *)(adjustedSize + relInfo + 4) | 1;\n      FUNC_0008259c(pointerList);\n      return (int *)(relInfo + 8);\n    }\n    if (adjustedSize < 0x200) {\n      adjustedSize = totalSize & 0xfffffff8;\n      tempVar7 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjustedSize);\n      currentRelInfo = 1 << ((int)(totalSize >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(relInfo + 8) = tempVar7;\n      *(uint *)(relInfo + 0xc) = adjustedSize + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = currentRelInfo;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjustedSize) = relInfo;\n      *(dword *)(tempVar7 + 0xc) = relInfo;\n    }\n    else {\n      tempVar2 = totalSize >> 9;\n      if (tempVar2 < 5) {\n        iVar1 = (totalSize >> 6) + 0x38;\n        tempVar7 = iVar1 * 2;\n      }\n      else if (tempVar2 < 0x15) {\n        iVar1 = tempVar2 + 0x5b;\n        tempVar7 = iVar1 * 2;\n      }\n      else if (tempVar2 < 0x55) {\n        iVar1 = (totalSize >> 0xc) + 0x6e;\n        tempVar7 = iVar1 * 2;\n      }\n      else if (tempVar2 < 0x155) {\n        iVar1 = (totalSize >> 0xf) + 0x77;\n        tempVar7 = iVar1 * 2;\n      }\n      else if (tempVar2 < 0x555) {\n        iVar1 = (totalSize >> 0x12) + 0x7c;\n        tempVar7 = iVar1 * 2;\n      }\n      else {\n        tempVar7 = 0xfc;\n        iVar1 = 0x7e;\n      }\n      currentRelInfo = tempVar7 * 4 + 0x20070464;\n      tempVar5 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[tempVar7];\n      if (tempVar5 == currentRelInfo) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (iVar1 >> 2 & 0xffU);\n        tempVar6 = tempVar5;\n      }\n      else {\n        do {\n          tempVar6 = tempVar5;\n          if ((*(uint *)(tempVar5 + 4) & 0xfffffffc) <= adjustedSize) break;\n          tempVar5 = *(dword *)(tempVar5 + 8);\n          tempVar6 = tempVar5;\n        } while (currentRelInfo != tempVar5);\n        tempVar5 = *(dword *)(tempVar6 + 0xc);\n      }\n      currentRelInfo = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(relInfo + 0xc) = tempVar5;\n      *(dword *)(relInfo + 8) = tempVar6;\n      *(dword *)(tempVar5 + 8) = relInfo;\n      *(dword *)(tempVar6 + 0xc) = relInfo;\n    }\n  }\n  relInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  totalSize = 1 << ((int)tempVar8 >> 2 & 0xffU);\n  if (totalSize <= currentRelInfo) {\n    if ((currentRelInfo & totalSize) == 0) {\n      tempVar8 = tempVar8 & 0xfffffffc;\n      do {\n        totalSize = totalSize << 1;\n        tempVar8 = tempVar8 + 4;\n      } while ((currentRelInfo & totalSize) == 0);\n    }\n    do {\n      tempPtr3 = &Elf32_Rel_ARRAY_20070000[tempVar8 + 0x8c].r_info;\n      relArray = tempPtr3;\n      adjustedSize = tempVar8;\n      do {\n        for (tempPtr1 = (undefined *)relArray[3]; relArray != (dword *)tempPtr1;\n            tempPtr1 = *(undefined **)(tempPtr1 + 0xc)) {\n          tempVar2 = *(uint *)(tempPtr1 + 4) & 0xfffffffc;\n          tempVar3 = tempVar2 - adjustedSize2;\n          if (0xf < (int)tempVar3) {\n            iVar1 = *(int *)(tempPtr1 + 8);\n            tempVar7 = *(int *)(tempPtr1 + 0xc);\n            tempPtr2 = tempPtr1 + adjustedSize2;\n            *(uint *)(tempPtr1 + 4) = adjustedSize2 | 1;\n            *(int *)(iVar1 + 0xc) = tempVar7;\n            *(int *)(tempVar7 + 8) = iVar1;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)tempPtr2;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)tempPtr2;\n            *(undefined4 *)(tempPtr2 + 0xc) = 0x2007046c;\n            *(undefined4 *)(tempPtr2 + 8) = 0x2007046c;\n            *(uint *)(tempPtr2 + 4) = tempVar3 | 1;\n            *(uint *)(tempPtr2 + tempVar3) = tempVar3;\n            FUNC_0008259c(pointerList);\n            return (int *)(tempPtr1 + 8);\n          }\n          if (-1 < (int)tempVar3) {\n            tempVar7 = *(int *)(tempPtr1 + 8);\n            iVar1 = *(int *)(tempPtr1 + 0xc);\n            *(uint *)(tempPtr1 + tempVar2 + 4) = *(uint *)(tempPtr1 + tempVar2 + 4) | 1;\n            *(int *)(tempVar7 + 0xc) = iVar1;\n            *(int *)(iVar1 + 8) = tempVar7;\n            FUNC_0008259c(pointerList);\n            return (int *)(tempPtr1 + 8);\n          }\n        }\n        adjustedSize = adjustedSize + 1;\n        relArray = relArray + 2;\n      } while ((adjustedSize & 3) != 0);\n      do {\n        tempVar2 = tempVar8 & 3;\n        tempPtr1 = (undefined *)(tempPtr3 + -2);\n        tempVar8 = tempVar8 - 1;\n        if (tempVar2 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~totalSize;\n          break;\n        }\n        tempPtr3 = (dword *)*tempPtr3;\n      } while (tempPtr3 == (dword *)tempPtr1);\n      totalSize = totalSize * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= totalSize &&\n           totalSize - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (tempVar8 = adjustedSize, totalSize == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & totalSize) == 0; totalSize = totalSize << 1) {\n        tempVar8 = tempVar8 + 4;\n      }\n    } while( true );\n  }\n  tempVar8 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((adjustedSize2 <= tempVar8) &&\n     (totalSize = tempVar8 - adjustedSize2, currentRelInfo = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)totalSize))\n  goto LAB_0008211e;\n  totalSize = Elf32_Rel_ARRAY_20070000[141].r_info + tempVar8;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    adjustedSize = adjustedSize2 + DAT_20071190 + 0x10;\n  }\n  else {\n    adjustedSize = adjustedSize2 + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  currentRelInfo = find_pointer_from_value_00082970(pointerList,adjustedSize);\n  if ((currentRelInfo == 0xffffffff) || ((currentRelInfo < totalSize && (relInfo != 0x20070464)))) {\n    tempVar8 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentRelInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    tempVar2 = DAT_20071194 + adjustedSize;\n    DAT_20071194 = tempVar2;\n    if ((totalSize == currentRelInfo) && ((totalSize & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = adjustedSize + tempVar8 | 1;\n    }\n    else {\n      tempVar5 = currentRelInfo;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        tempVar5 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = tempVar2 + (currentRelInfo - totalSize);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = tempVar5;\n      totalSize = currentRelInfo & 7;\n      if (totalSize == 0) {\n        tempVar7 = 0x1000;\n      }\n      else {\n        currentRelInfo = currentRelInfo + (8 - totalSize);\n        tempVar7 = 0x1008 - totalSize;\n      }\n      tempVar7 = tempVar7 - (adjustedSize + currentRelInfo & 0xfff);\n      iVar1 = find_pointer_from_value_00082970(pointerList,tempVar7);\n      if (iVar1 == -1) {\n        totalSize = 1;\n        tempVar7 = 0;\n      }\n      else {\n        totalSize = (iVar1 - currentRelInfo) + tempVar7 | 1;\n      }\n      tempVar2 = DAT_20071194 + tempVar7;\n      Elf32_Rel_ARRAY_20070000[141].r_info = currentRelInfo;\n      DAT_20071194 = tempVar2;\n      *(uint *)(currentRelInfo + 4) = totalSize;\n      if (relInfo != 0x20070464) {\n        if (tempVar8 < 0x10) {\n          *(undefined4 *)(currentRelInfo + 4) = 1;\n          tempVar8 = 0;\n          goto LAB_00082108;\n        }\n        tempVar8 = tempVar8 - 0xc & 0xfffffff8;\n        *(uint *)(relInfo + 4) = tempVar8 | *(uint *)(relInfo + 4) & 1;\n        *(undefined4 *)(relInfo + tempVar8 + 4) = 5;\n        *(undefined4 *)(relInfo + tempVar8 + 8) = 5;\n        if (0xf < tempVar8) {\n          relocate_function_00083d9c(pointerList,relInfo + 8);\n          tempVar2 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < tempVar2) {\n      DAT_2007118c = tempVar2;\n    }\n    if (DAT_20071188 < tempVar2) {\n      DAT_20071188 = tempVar2;\n    }\n    tempVar8 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentRelInfo = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  totalSize = tempVar8 - adjustedSize2;\n  if ((tempVar8 < adjustedSize2) || ((int)totalSize < 0x10)) {\n    FUNC_0008259c(pointerList);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = adjustedSize2 + currentRelInfo;\n  *(uint *)(currentRelInfo + 4) = adjustedSize2 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = totalSize | 1;\n  FUNC_0008259c(pointerList);\n  return (int *)(currentRelInfo + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "relocate_pointers_00081e14",
                "param_1": "pointerList",
                "param_2": "pointerCount",
                "dVar1": "relInfo",
                "iVar2": "iVar1",
                "uVar3": "totalSize",
                "uVar4": "adjustedSize",
                "iVar5": "tempVar1",
                "uVar6": "tempVar2",
                "dVar7": "currentRelInfo",
                "uVar8": "tempVar3",
                "iVar9": "tempVar4",
                "puVar10": "tempPtr1",
                "dVar11": "tempVar5",
                "dVar12": "tempVar6",
                "iVar13": "tempVar7",
                "pdVar14": "relArray",
                "uVar15": "adjustedSize2",
                "puVar16": "tempPtr2",
                "pdVar17": "tempPtr3",
                "uVar18": "tempVar8"
            },
            "calling": [
                "FUN_000842a4",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081df4"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_data_0008234c",
            "code": "\nundefined4 * copyData_0008234c(undefined4 *destination,undefined4 *source,uint length)\n\n{\n  undefined4 *destPtr;\n  undefined4 *destPtrAligned;\n  undefined4 *srcPtr;\n  uint remainingLength;\n  uint lengthMinusFour;\n  bool loopCondition;\n  \n  destPtrAligned = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (length < 8) {\n      lengthMinusFour = length - 4;\n      if (3 < length) {\n        do {\n          destPtr = source;\n          srcPtr = destPtrAligned;\n          loopCondition = lengthMinusFour != 0;\n          lengthMinusFour = lengthMinusFour - 1;\n          *(undefined *)srcPtr = *(undefined *)destPtr;\n          destPtrAligned = (undefined4 *)((int)srcPtr + 1);\n          source = (undefined4 *)((int)destPtr + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)srcPtr + 1) =\n             *(undefined *)(undefined4 *)((int)destPtr + 1);\n        *(undefined *)((int)srcPtr + 2) = *(undefined *)((int)destPtr + 2);\n        *(undefined *)((int)srcPtr + 3) = *(undefined *)((int)destPtr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      lengthMinusFour = 4 - ((uint)destination & 3);\n      length = length - lengthMinusFour;\n      destPtr = destination;\n      srcPtr = source;\n      if (((uint)destination & 1) != 0) {\n        srcPtr = (undefined4 *)((int)source + 1);\n        destPtr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      destPtrAligned = destPtr;\n      source = srcPtr;\n      if ((lengthMinusFour & 2) != 0) {\n        source = (undefined4 *)((int)srcPtr + 2);\n        destPtrAligned = (undefined4 *)((int)destPtr + 2);\n        *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n      }\n    }\n  }\n  while (0x3f < length) {\n    *destPtrAligned = *source;\n    destPtrAligned[1] = source[1];\n    destPtrAligned[2] = source[2];\n    destPtrAligned[3] = source[3];\n    destPtrAligned[4] = source[4];\n    destPtrAligned[5] = source[5];\n    destPtrAligned[6] = source[6];\n    destPtrAligned[7] = source[7];\n    destPtrAligned[8] = source[8];\n    destPtrAligned[9] = source[9];\n    destPtrAligned[10] = source[10];\n    destPtrAligned[0xb] = source[0xb];\n    destPtrAligned[0xc] = source[0xc];\n    destPtrAligned[0xd] = source[0xd];\n    destPtrAligned[0xe] = source[0xe];\n    destPtrAligned[0xf] = source[0xf];\n    destPtrAligned = destPtrAligned + 0x10;\n    source = source + 0x10;\n    length = length - 0x40;\n  }\n  remainingLength = length - 0x10;\n  if (0xffffffcf < length - 0x40) {\n    do {\n      *destPtrAligned = *source;\n      destPtrAligned[1] = source[1];\n      destPtrAligned[2] = source[2];\n      destPtrAligned[3] = source[3];\n      destPtrAligned = destPtrAligned + 4;\n      source = source + 4;\n      loopCondition = 0xf < remainingLength;\n      remainingLength = remainingLength - 0x10;\n    } while (loopCondition);\n  }\n  lengthMinusFour = remainingLength + 0xc;\n  srcPtr = destPtrAligned;\n  destPtr = source;\n  if (0xfffffff3 < remainingLength) {\n    do {\n      source = destPtr + 1;\n      *srcPtr = *destPtr;\n      loopCondition = 3 < lengthMinusFour;\n      lengthMinusFour = lengthMinusFour - 4;\n      destPtrAligned = srcPtr + 1;\n      srcPtr = srcPtr + 1;\n      destPtr = source;\n    } while (loopCondition);\n  }\nLAB_000823d0:\n  if (lengthMinusFour + 4 != 0) {\n    destPtr = destPtrAligned;\n    srcPtr = source;\n    if ((lengthMinusFour & 1) != 0) {\n      srcPtr = (undefined4 *)((int)source + 1);\n      destPtr = (undefined4 *)((int)destPtrAligned + 1);\n      *(undefined *)destPtrAligned = *(undefined *)source;\n    }\n    if ((lengthMinusFour + 4 & 2) != 0) {\n      *(undefined2 *)destPtr = *(undefined2 *)srcPtr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_data_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "destPtrAligned",
                "puVar3": "srcPtr",
                "uVar4": "remainingLength",
                "uVar5": "lengthMinusFour",
                "bVar6": "loopCondition"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_and_reverse_00082438",
            "code": "\nvoid copyAndReverse_00082438(undefined4 *sourceArray,undefined4 *destinationArray,uint size)\n\n{\n  int index;\n  undefined4 *sourcePointer;\n  undefined4 *destinationPointer;\n  undefined4 *tempPointer;\n  uint tempSize;\n  undefined *tempArray;\n  uint remainderSize;\n  \n  if ((destinationArray < sourceArray) && (tempPointer = (undefined4 *)((int)destinationArray + size), sourceArray < tempPointer)) {\n    tempArray = (undefined *)((int)sourceArray + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        tempPointer = (undefined4 *)((int)tempPointer + -1);\n        index = index + -1;\n        tempArray = tempArray + -1;\n        *tempArray = *(undefined *)tempPointer;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)sourceArray | (uint)destinationArray) & 3) == 0) {\n    tempPointer = sourceArray;\n    destinationPointer = destinationArray;\n    do {\n      sourcePointer = tempPointer + 4;\n      *tempPointer = *destinationPointer;\n      tempPointer[1] = destinationPointer[1];\n      tempPointer[2] = destinationPointer[2];\n      tempPointer[3] = destinationPointer[3];\n      tempPointer = sourcePointer;\n      destinationPointer = destinationPointer + 4;\n    } while (sourcePointer != (undefined4 *)((int)sourceArray + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainderSize = size & 0xf;\n    destinationArray = destinationArray + index * 4;\n    sourceArray = sourceArray + index * 4;\n    tempSize = remainderSize;\n    tempPointer = sourceArray;\n    destinationPointer = destinationArray;\n    if (3 < remainderSize) {\n      do {\n        tempSize = tempSize - 4;\n        *tempPointer = *destinationPointer;\n        tempPointer = tempPointer + 1;\n        destinationPointer = destinationPointer + 1;\n      } while (3 < tempSize);\n      index = (remainderSize - 4 & 0xfffffffc) + 4;\n      sourceArray = (undefined4 *)((int)sourceArray + index);\n      destinationArray = (undefined4 *)((int)destinationArray + index);\n      remainderSize = size & 3;\n    }\n    size = remainderSize;\n    if (size == 0) {\n      return;\n    }\n  }\n  tempPointer = sourceArray;\n  do {\n    destinationPointer = (undefined4 *)((int)tempPointer + 1);\n    *(undefined *)tempPointer = *(undefined *)destinationArray;\n    destinationArray = (undefined4 *)((int)destinationArray + 1);\n    tempPointer = destinationPointer;\n  } while (destinationPointer != (undefined4 *)(size + (int)sourceArray));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_and_reverse_00082438",
                "param_1": "sourceArray",
                "param_2": "destinationArray",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "sourcePointer",
                "puVar3": "destinationPointer",
                "puVar4": "tempPointer",
                "uVar5": "tempSize",
                "puVar6": "tempArray",
                "uVar7": "remainderSize"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "initialize_memory_00082504",
            "code": "\nvoid initializeMemory_00082504(undefined4 *memoryPtr,undefined value,uint numBytes)\n\n{\n  undefined4 *currentPtr;\n  undefined4 *nextPtr;\n  undefined4 value32;\n  uint remainingBytes;\n  bool isZero;\n  \n  if (((uint)memoryPtr & 3) != 0) {\n    isZero = numBytes == 0;\n    currentPtr = memoryPtr;\n    numBytes = numBytes - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      memoryPtr = (undefined4 *)((int)currentPtr + 1);\n      *(undefined *)currentPtr = value;\n      if (((uint)memoryPtr & 3) == 0) break;\n      isZero = numBytes == 0;\n      currentPtr = memoryPtr;\n      numBytes = numBytes - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < numBytes) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remainingBytes = numBytes;\n    currentPtr = memoryPtr;\n    if (0xf < numBytes) {\n      remainingBytes = numBytes - 0x10;\n      do {\n        *currentPtr = value32;\n        currentPtr[1] = value32;\n        currentPtr[2] = value32;\n        currentPtr[3] = value32;\n        currentPtr = currentPtr + 4;\n      } while (currentPtr != (undefined4 *)((int)memoryPtr + (remainingBytes & 0xfffffff0) + 0x10));\n      numBytes = numBytes & 0xf;\n      memoryPtr = memoryPtr + ((remainingBytes >> 4) + 1) * 4;\n      remainingBytes = numBytes;\n      currentPtr = memoryPtr;\n      if (numBytes < 4) goto LAB_00082580;\n    }\n    do {\n      numBytes = numBytes - 4;\n      *memoryPtr = value32;\n      memoryPtr = memoryPtr + 1;\n    } while (3 < numBytes);\n    memoryPtr = (undefined4 *)((int)currentPtr + (remainingBytes - 4 & 0xfffffffc) + 4);\n    numBytes = remainingBytes & 3;\n  }\nLAB_00082580:\n  if (numBytes != 0) {\n    currentPtr = memoryPtr;\n    do {\n      nextPtr = (undefined4 *)((int)currentPtr + 1);\n      *(undefined *)currentPtr = value;\n      currentPtr = nextPtr;\n    } while (nextPtr != (undefined4 *)(numBytes + (int)memoryPtr));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "initialize_memory_00082504",
                "param_1": "memoryPtr",
                "param_2": "value",
                "param_3": "numBytes",
                "puVar1": "currentPtr",
                "puVar2": "nextPtr",
                "uVar3": "value32",
                "uVar4": "remainingBytes",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d9c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "relocate_and_copy_function_000825a0",
            "code": "\nvoid relocateAndCopyFunction_000825a0(undefined4 sourceAddress,undefined4 destinationAddress)\n\n{\n  relocate_and_copy_function_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,sourceAddress,destinationAddress);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "relocate_and_copy_function_000825a0",
                "param_1": "sourceAddress",
                "param_2": "destinationAddress"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "relocate_and_copy_function_000825b0",
            "code": "\nint * relocate_and_copy_function_000825b0(undefined4 *function_ptr,int *buffer,uint size)\n\n{\n  dword temp_1;\n  int *new_buffer;\n  uint temp_2;\n  int temp_3;\n  uint temp_4;\n  int temp_5;\n  int *new_temp_1;\n  uint temp_6;\n  uint temp_7;\n  int *new_temp_2;\n  \n  if (buffer == (int *)0x0) {\n    new_buffer = (int *)relocate_pointers_00081e14(function_ptr,size);\n    return new_buffer;\n  }\n  FUNC_00082598();\n  temp_4 = buffer[-1];\n  temp_6 = temp_4 & 0xfffffffc;\n  new_buffer = buffer + -2;\n  if (size + 0xb < 0x17) {\n    temp_7 = 0x10;\n  }\n  else {\n    temp_7 = size + 0xb & 0xfffffff8;\n    if ((int)temp_7 < 0) goto LAB_0008267c;\n  }\n  if (temp_7 < size) {\nLAB_0008267c:\n    *function_ptr = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_6 < (int)temp_7) {\n    temp_1 = (int)new_buffer + temp_6;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp_1) {\n      temp_2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp_1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(temp_7 + 0x10) <= (int)(temp_2 + temp_6)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_buffer + temp_7;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_2 + temp_6) - temp_7 | 1;\n        buffer[-1] = temp_7 | buffer[-1] & 1U;\n        FUNC_0008259c(function_ptr);\n        return buffer;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp_1 + 4) & 0xfffffffe) + temp_1 + 4) & 1) == 0) {\n      temp_2 = *(uint *)(temp_1 + 4) & 0xfffffffc;\n      if ((int)temp_7 <= (int)(temp_2 + temp_6)) {\n        temp_5 = *(int *)(temp_1 + 0xc);\n        temp_3 = *(int *)(temp_1 + 8);\n        *(int *)(temp_3 + 0xc) = temp_5;\n        *(int *)(temp_5 + 8) = temp_3;\n        temp_6 = temp_2 + temp_6;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_2 = 0;\n      temp_1 = 0;\n    }\n    if (-1 < (int)(temp_4 << 0x1f)) {\n      new_temp_2 = (int *)((int)new_buffer - buffer[-2]);\n      temp_4 = (new_temp_2[1] & 0xfffffffcU) + temp_6;\n      if (temp_1 != 0) {\n        if (temp_1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(temp_7 + 0x10) <= (int)(temp_2 + temp_4)) {\n            new_buffer = new_temp_2 + 2;\n            temp_3 = *new_buffer;\n            temp_5 = new_temp_2[3];\n            temp_6 = temp_6 - 4;\n            *(int *)(temp_3 + 0xc) = temp_5;\n            *(int *)(temp_5 + 8) = temp_3;\n            if (temp_6 < 0x25) {\n              new_temp_1 = new_buffer;\n              if (0x13 < temp_6) {\n                new_temp_2[2] = *buffer;\n                new_temp_2[3] = buffer[1];\n                if (temp_6 < 0x1c) {\n                  buffer = buffer + 2;\n                  new_temp_1 = new_temp_2 + 4;\n                }\n                else {\n                  new_temp_2[4] = buffer[2];\n                  new_temp_2[5] = buffer[3];\n                  if (temp_6 == 0x24) {\n                    new_temp_2[6] = buffer[4];\n                    new_temp_1 = buffer + 5;\n                    buffer = buffer + 6;\n                    new_temp_2[7] = *new_temp_1;\n                    new_temp_1 = new_temp_2 + 8;\n                  }\n                  else {\n                    buffer = buffer + 4;\n                    new_temp_1 = new_temp_2 + 6;\n                  }\n                }\n              }\n              *new_temp_1 = *buffer;\n              new_temp_1[1] = buffer[1];\n              new_temp_1[2] = buffer[2];\n            }\n            else {\n              copy_and_reverse_00082438(new_buffer,buffer);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)new_temp_2 + temp_7;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp_2 + temp_4) - temp_7 | 1;\n            new_temp_2[1] = temp_7 | new_temp_2[1] & 1U;\n            FUNC_0008259c(function_ptr);\n            return new_buffer;\n          }\n        }\n        else {\n          temp_2 = temp_2 + temp_4;\n          if ((int)temp_7 <= (int)temp_2) {\n            temp_5 = *(int *)(temp_1 + 0xc);\n            temp_3 = *(int *)(temp_1 + 8);\n            *(int *)(temp_3 + 0xc) = temp_5;\n            *(int *)(temp_5 + 8) = temp_3;\n            new_temp_1 = new_temp_2 + 2;\n            temp_3 = *new_temp_1;\n            temp_5 = new_temp_2[3];\n            temp_4 = temp_6 - 4;\n            *(int *)(temp_3 + 0xc) = temp_5;\n            *(int *)(temp_5 + 8) = temp_3;\n            temp_6 = temp_2;\n            if (temp_4 < 0x25) {\n              new_buffer = new_temp_1;\n              if (0x13 < temp_4) {\n                new_temp_2[2] = *buffer;\n                new_temp_2[3] = buffer[1];\n                if (temp_4 < 0x1c) {\n                  buffer = buffer + 2;\n                  new_buffer = new_temp_2 + 4;\n                }\n                else {\n                  new_temp_2[4] = buffer[2];\n                  new_temp_2[5] = buffer[3];\n                  if (temp_4 == 0x24) {\n                    new_temp_2[6] = buffer[4];\n                    new_buffer = buffer + 5;\n                    buffer = buffer + 6;\n                    new_temp_2[7] = *new_buffer;\n                    new_buffer = new_temp_2 + 8;\n                  }\n                  else {\n                    buffer = buffer + 4;\n                    new_buffer = new_temp_2 + 6;\n                  }\n                }\n              }\n              *new_buffer = *buffer;\n              new_buffer[1] = buffer[1];\n              new_buffer[2] = buffer[2];\n              temp_4 = new_temp_2[1];\n              new_buffer = new_temp_2;\n              buffer = new_temp_1;\n            }\n            else {\n              copy_and_reverse_00082438(new_temp_1,buffer);\n              temp_4 = new_temp_2[1];\n              new_buffer = new_temp_2;\n              buffer = new_temp_1;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)temp_7 <= (int)temp_4) {\n        new_temp_1 = new_temp_2 + 2;\n        temp_3 = *new_temp_1;\n        temp_5 = new_temp_2[3];\n        temp_2 = temp_6 - 4;\n        *(int *)(temp_3 + 0xc) = temp_5;\n        *(int *)(temp_5 + 8) = temp_3;\n        temp_6 = temp_4;\n        if (temp_2 < 0x25) {\n          new_buffer = new_temp_1;\n          if (0x13 < temp_2) {\n            new_temp_2[2] = *buffer;\n            new_temp_2[3] = buffer[1];\n            if (temp_2 < 0x1c) {\n              buffer = buffer + 2;\n              new_buffer = new_temp_2 + 4;\n            }\n            else {\n              new_temp_2[4] = buffer[2];\n              new_temp_2[5] = buffer[3];\n              if (temp_2 == 0x24) {\n                new_temp_2[6] = buffer[4];\n                new_buffer = buffer + 5;\n                buffer = buffer + 6;\n                new_temp_2[7] = *new_buffer;\n                new_buffer = new_temp_2 + 8;\n              }\n              else {\n                buffer = buffer + 4;\n                new_buffer = new_temp_2 + 6;\n              }\n            }\n          }\n          *new_buffer = *buffer;\n          new_buffer[1] = buffer[1];\n          new_buffer[2] = buffer[2];\n          temp_4 = new_temp_2[1];\n          new_buffer = new_temp_2;\n          buffer = new_temp_1;\n        }\n        else {\n          copy_and_reverse_00082438(new_temp_1,buffer);\n          temp_4 = new_temp_2[1];\n          new_buffer = new_temp_2;\n          buffer = new_temp_1;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    new_temp_2 = (int *)relocate_pointers_00081e14(function_ptr,size);\n    if (new_temp_2 == (int *)0x0) goto LAB_000826a4;\n    temp_4 = buffer[-1];\n    if (new_temp_2 + -2 != (int *)((temp_4 & 0xfffffffe) + (int)new_buffer)) {\n      temp_6 = temp_6 - 4;\n      if (temp_6 < 0x25) {\n        new_buffer = buffer;\n        new_temp_1 = new_temp_2;\n        if (0x13 < temp_6) {\n          *new_temp_2 = *buffer;\n          new_temp_2[1] = buffer[1];\n          if (temp_6 < 0x1c) {\n            new_buffer = buffer + 2;\n            new_temp_1 = new_temp_2 + 2;\n          }\n          else {\n            new_temp_2[2] = buffer[2];\n            new_temp_2[3] = buffer[3];\n            if (temp_6 == 0x24) {\n              new_temp_2[4] = buffer[4];\n              new_temp_2[5] = buffer[5];\n              new_buffer = buffer + 6;\n              new_temp_1 = new_temp_2 + 6;\n            }\n            else {\n              new_buffer = buffer + 4;\n              new_temp_1 = new_temp_2 + 4;\n            }\n          }\n        }\n        *new_temp_1 = *new_buffer;\n        new_temp_1[1] = new_buffer[1];\n        new_temp_1[2] = new_buffer[2];\n      }\n      else {\n        copy_and_reverse_00082438(new_temp_2,buffer);\n      }\n      relocate_function_00083d9c(function_ptr,buffer);\n      goto LAB_000826a4;\n    }\n    temp_6 = temp_6 + (new_temp_2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_2 = temp_6 - temp_7;\n  new_temp_2 = buffer;\n  if (temp_2 < 0x10) {\n    new_buffer[1] = temp_4 & 1 | temp_6;\n    *(uint *)((int)new_buffer + temp_6 + 4) = *(uint *)((int)new_buffer + temp_6 + 4) | 1;\n  }\n  else {\n    new_buffer[1] = temp_4 & 1 | temp_7;\n    *(uint *)((int)new_buffer + temp_7 + 4) = temp_2 | 1;\n    *(uint *)((int)new_buffer + temp_2 + temp_7 + 4) = *(uint *)((int)new_buffer + temp_2 + temp_7 + 4) | 1;\n    relocate_function_00083d9c(function_ptr,(int)new_buffer + temp_7 + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(function_ptr);\n  return new_temp_2;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "relocate_and_copy_function_000825b0",
                "param_1": "function_ptr",
                "param_2": "buffer",
                "param_3": "size",
                "dVar1": "temp_1",
                "piVar2": "new_buffer",
                "uVar3": "temp_2",
                "iVar4": "temp_3",
                "uVar5": "temp_4",
                "iVar6": "temp_5",
                "piVar7": "new_temp_1",
                "uVar8": "temp_6",
                "uVar9": "temp_7",
                "piVar10": "new_temp_2"
            },
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "called": [
                "FUN_00081e14",
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "find_pointer_from_value_00082970",
            "code": "\nvoid findPointerFromValue_00082970(int *result,undefined4 value)\n\n{\n  int pointer;\n  \n  DAT_200711bc = 0;\n  pointer = calculate_new_pointer_0008118c(value);\n  if ((pointer == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "find_pointer_from_value_00082970",
                "param_1": "result",
                "param_2": "value",
                "iVar1": "pointer"
            },
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_with_alignment_00082994",
            "code": "\nvoid copyStringWithAlignment_00082994(uint *destination,uint *source)\n\n{\n  char currentChar;\n  ushort currentChar2Bytes;\n  uint *nextSource;\n  uint *nextSourceAligned;\n  uint currentDword;\n  uint currentByte;\n  uint *nextDestination;\n  bool isByteZero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextSourceAligned = source;\n    if (((uint)source & 1) != 0) {\n      nextSourceAligned = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)destination = currentChar;\n      destination = (uint *)((int)destination + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextSourceAligned;\n    if (((uint)nextSourceAligned & 2) != 0) {\n      source = (uint *)((int)nextSourceAligned + 2);\n      currentChar2Bytes = *(ushort *)nextSourceAligned;\n      isByteZero = (currentChar2Bytes & 0xff) == 0;\n      if (isByteZero) {\n        *(char *)destination = (char)currentChar2Bytes;\n      }\n      else {\n        *(ushort *)destination = currentChar2Bytes;\n        isByteZero = (currentChar2Bytes & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (isByteZero) {\n        return;\n      }\n    }\n  }\n  currentDword = *source;\n  nextSourceAligned = source + 1;\n  nextDestination = destination;\n  if (((uint)source & 4) != 0) {\n    if ((currentDword + 0xfefefeff & ~currentDword & 0x80808080) != 0) goto LAB_000829f8;\n    nextDestination = destination + 1;\n    *destination = currentDword;\n    nextSourceAligned = source + 2;\n    currentDword = source[1];\n  }\n  while( true ) {\n    nextSource = nextSourceAligned + 1;\n    currentByte = *nextSourceAligned;\n    destination = nextDestination;\n    if ((currentDword + 0xfefefeff & ~currentDword & 0x80808080) != 0) break;\n    destination = nextDestination + 1;\n    *nextDestination = currentDword;\n    currentDword = currentByte;\n    if ((currentByte + 0xfefefeff & ~currentByte & 0x80808080) != 0) break;\n    nextSourceAligned = nextSourceAligned + 2;\n    currentDword = *nextSource;\n    nextDestination = nextDestination + 2;\n    *destination = currentByte;\n  }\nLAB_000829f8:\n  do {\n    *(char *)destination = (char)currentDword;\n    currentByte = currentDword & 0xff;\n    currentDword = currentDword >> 8 | currentDword << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (currentByte != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_00082994",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentChar2Bytes",
                "puVar3": "nextSource",
                "puVar4": "nextSourceAligned",
                "uVar5": "currentDword",
                "uVar6": "currentByte",
                "puVar7": "nextDestination",
                "bVar8": "isByteZero"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZerosCount;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZerosCount = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZerosCount + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZerosCount = leadingZerosCount + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZerosCount = leadingZerosCount + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZerosCount = leadingZerosCount + 1;\n  }\n  return leadingZerosCount;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZerosCount",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 param1,int param2,int **param3)\n\n{\n  int *currentPtr;\n  int result;\n  int *remainingPtr;\n  uint counter;\n  undefined4 *dataPtr;\n  uint p;\n  uint n;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = process_data_00083f34();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  remainingPtr = param3[2];\n  currentPtr = *param3;\n  while (remainingPtr != (int *)0x0) {\n    p = currentPtr[1];\n    n = p >> 2;\n    if (n != 0) {\n      dataPtr = (undefined4 *)(*currentPtr + -4);\n      counter = 0;\n      do {\n        dataPtr = dataPtr + 1;\n        result = process_data_00083c40(param1,*dataPtr,param2);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (n != counter);\n      remainingPtr = param3[2];\n    }\n    remainingPtr = (int *)((int)remainingPtr - (p & 0xfffffffc));\n    param3[2] = remainingPtr;\n    currentPtr = currentPtr + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "currentPtr",
                "iVar2": "result",
                "piVar3": "remainingPtr",
                "uVar4": "counter",
                "puVar5": "dataPtr",
                "uVar6": "p",
                "uVar7": "n"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "FUNC_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = process_data_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = process_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeros_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_first_occurrence_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          calculate_remainder_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = calculate_remainder_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00084750",
                "FUN_0008378c",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "process_data_0008378c",
            "code": "\nint processData_0008378c(undefined4 input,int binaryData)\n\n{\n  int result;\n  int decodedResult;\n  undefined *bufferArray [2];\n  undefined4 bufferSize1;\n  ushort bufferSize2;\n  undefined2 bufferSize3;\n  undefined *bufferPointer;\n  undefined4 bufferSize4;\n  undefined4 bufferSize5;\n  undefined4 bufferSize6;\n  undefined4 bufferSize7;\n  undefined4 bufferSize8;\n  undefined dataBuffer [1024];\n  \n  bufferSize8 = *(undefined4 *)(binaryData + 100);\n  bufferSize6 = *(undefined4 *)(binaryData + 0x1c);\n  bufferSize3 = *(undefined2 *)(binaryData + 0xe);\n  bufferSize7 = *(undefined4 *)(binaryData + 0x24);\n  bufferArray[0] = dataBuffer;\n  bufferSize2 = *(ushort *)(binaryData + 0xc) & 0xfffd;\n  bufferSize1 = 0x400;\n  bufferSize4 = 0x400;\n  bufferSize5 = 0;\n  bufferPointer = bufferArray[0];\n  result = FUNC_00082b38(input,bufferArray);\n  if ((-1 < result) && (decodedResult = decode_and_process_data_00083adc(input,bufferArray), decodedResult != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)bufferSize2 << 0x19) < 0) {\n    *(ushort *)(binaryData + 0xc) = *(ushort *)(binaryData + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "param_1": "input",
                "param_2": "binaryData",
                "iVar1": "result",
                "iVar2": "decodedResult",
                "local_488": "bufferArray",
                "local_480": "bufferSize1",
                "local_47c": "bufferSize2",
                "local_47a": "bufferSize3",
                "local_478": "bufferPointer",
                "local_474": "bufferSize4",
                "local_470": "bufferSize5",
                "local_46c": "bufferSize6",
                "local_464": "bufferSize7",
                "local_424": "bufferSize8",
                "auStack_420": "dataBuffer"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = decode_and_process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n"
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "process_data_00083808",
            "code": "\nundefined4 process_data_00083808(undefined4 *output_status,int *input_data)\n\n{\n  int condition_1;\n  int condition_2;\n  uint temp_var1;\n  ushort temp_var2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  temp_var2 = *(ushort *)(input_data + 3);\n  temp_var1 = (uint)temp_var2;\n  if ((int)(temp_var1 << 0x1c) < 0) {\n    condition_2 = input_data[4];\n  }\n  else {\n    if (-1 < (int)(temp_var1 << 0x1b)) {\n      *output_status = 9;\n      *(ushort *)(input_data + 3) = temp_var2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var1 << 0x1d) < 0) {\n      if ((int *)input_data[0xc] != (int *)0x0) {\n        if ((int *)input_data[0xc] != input_data + 0x10) {\n          relocate_function_00083d9c(output_status);\n          temp_var2 = *(ushort *)(input_data + 3);\n        }\n        input_data[0xc] = 0;\n      }\n      condition_2 = input_data[4];\n      temp_var2 = temp_var2 & 0xffdb;\n      *input_data = condition_2;\n      input_data[1] = 0;\n    }\n    else {\n      condition_2 = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = temp_var2 | 8;\n    temp_var1 = (uint)(temp_var2 | 8);\n  }\n  if ((condition_2 == 0) && ((temp_var1 & 0x280) != 0x200)) {\n    initialize_memory_and_flags_000842a4(output_status,input_data);\n    temp_var1 = (uint)*(ushort *)(input_data + 3);\n    condition_2 = input_data[4];\n  }\n  if ((temp_var1 & 1) == 0) {\n    condition_1 = 0;\n    if (-1 < (int)(temp_var1 << 0x1e)) {\n      condition_1 = input_data[5];\n    }\n    input_data[2] = condition_1;\n  }\n  else {\n    input_data[6] = -input_data[5];\n    input_data[2] = 0;\n  }\n  if ((condition_2 == 0) && ((int)((uint)*(ushort *)(input_data + 3) << 0x18) < 0)) {\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "process_data_00083808",
                "param_1": "output_status",
                "param_2": "input_data",
                "iVar1": "condition_1",
                "iVar2": "condition_2",
                "uVar3": "temp_var1",
                "uVar4": "temp_var2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_000842a4",
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "decode_and_process_data_00083adc",
            "code": "\nundefined4 decodeAndProcessData_00083adc(int *dataBuffer,int *metadata)\n\n{\n  int *tmpPtr1;\n  int tmpVar1;\n  ushort tmpVar2;\n  uint tmpVar3;\n  int tmpVar4;\n  code *callbackFunc;\n  undefined4 result;\n  int tmpVar5;\n  \n  if ((dataBuffer != (int *)0x0) && (dataBuffer[0xe] == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  if (*(short *)(metadata + 3) == 0) {\n    return 0;\n  }\n  tmpVar2 = *(ushort *)(metadata + 3);\n  if ((int)((uint)tmpVar2 << 0x1c) < 0) {\n    tmpVar5 = metadata[4];\n    if (tmpVar5 == 0) {\n      return 0;\n    }\n    tmpVar1 = *metadata;\n    if ((tmpVar2 & 3) == 0) {\n      tmpVar4 = metadata[5];\n    }\n    else {\n      tmpVar4 = 0;\n    }\n    *metadata = tmpVar5;\n    tmpVar1 = tmpVar1 - tmpVar5;\n    metadata[2] = tmpVar4;\n    do {\n      if (tmpVar1 < 1) {\n        return 0;\n      }\n      tmpVar4 = (*(code *)metadata[9])(dataBuffer,metadata[7],tmpVar5,tmpVar1,result);\n      tmpVar1 = tmpVar1 - tmpVar4;\n      tmpVar5 = tmpVar5 + tmpVar4;\n    } while (0 < tmpVar4);\nLAB_00083a54:\n    *(ushort *)(metadata + 3) = *(ushort *)(metadata + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(metadata + 3) = tmpVar2 | 0x800;\n  if ((metadata[1] < 1) && (metadata[0xf] < 1)) {\n    return 0;\n  }\n  callbackFunc = (code *)metadata[10];\n  if (callbackFunc == (code *)0x0) {\n    return 0;\n  }\n  tmpVar3 = (uint)(tmpVar2 | 0x800);\n  tmpVar5 = *dataBuffer;\n  *dataBuffer = 0;\n  if ((tmpVar2 & 0x1000) == 0) {\n    tmpVar1 = (*callbackFunc)(dataBuffer,metadata[7],tmpVar3 & 0x1000,1);\n    if ((tmpVar1 == -1) && (tmpVar4 = *dataBuffer, tmpVar4 != 0)) {\n      if ((tmpVar4 == 0x1d) || (tmpVar4 == 0x16)) {\n        *dataBuffer = tmpVar5;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    tmpVar3 = (uint)*(ushort *)(metadata + 3);\n    callbackFunc = (code *)metadata[10];\n  }\n  else {\n    tmpVar1 = metadata[0x14];\n  }\n  if (((int)(tmpVar3 << 0x1d) < 0) && (tmpVar1 = tmpVar1 - metadata[1], metadata[0xc] != 0)) {\n    tmpVar1 = tmpVar1 - metadata[0xf];\n  }\n  tmpVar1 = (*callbackFunc)(dataBuffer,metadata[7],tmpVar1,0);\n  if (tmpVar1 == -1) {\n    tmpVar4 = *dataBuffer;\n    if (tmpVar4 != 0) {\n      if ((tmpVar4 != 0x1d) && (tmpVar4 != 0x16)) {\n        *(ushort *)(metadata + 3) = *(ushort *)(metadata + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(metadata + 3) = *(ushort *)(metadata + 3) & 0xf7ff;\n      *metadata = metadata[4];\n      metadata[1] = 0;\n      goto LAB_00083a00;\n    }\n    tmpVar2 = *(ushort *)(metadata + 3) & 0xf7ff;\n    metadata[1] = 0;\n    *(ushort *)(metadata + 3) = tmpVar2;\n    *metadata = metadata[4];\n  }\n  else {\n    tmpVar2 = *(ushort *)(metadata + 3) & 0xf7ff;\n    *metadata = metadata[4];\n    *(ushort *)(metadata + 3) = tmpVar2;\n    metadata[1] = 0;\n  }\n  if ((int)((uint)tmpVar2 << 0x13) < 0) {\n    metadata[0x14] = tmpVar1;\n  }\nLAB_00083a00:\n  tmpPtr1 = (int *)metadata[0xc];\n  *dataBuffer = tmpVar5;\n  if (tmpPtr1 == (int *)0x0) {\n    return 0;\n  }\n  if (tmpPtr1 != metadata + 0x10) {\n    relocate_function_00083d9c(dataBuffer);\n  }\n  metadata[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "decode_and_process_data_00083adc",
                "param_1": "dataBuffer",
                "param_2": "metadata",
                "piVar1": "tmpPtr1",
                "iVar2": "tmpVar1",
                "uVar3": "tmpVar2",
                "uVar4": "tmpVar3",
                "iVar5": "tmpVar4",
                "pcVar6": "callbackFunc",
                "unaff_r4": "result",
                "iVar7": "tmpVar5"
            },
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructPtr)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStructPtr + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStructPtr + 4);\n    *(undefined **)(dataStructPtr + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructPtr + 0x2e4) = 3;\n    *(int *)(dataStructPtr + 0x2e8) = dataStructPtr + 0x2ec;\n    *(undefined4 *)(dataStructPtr + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    initialize_memory_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStructPtr + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    initialize_memory_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStructPtr + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &LAB_00084440_1;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    initialize_memory_00082504(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructPtr + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructPtr",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int relocationInfo;\n  uint result;\n  uint localValue;\n  byte *bytePointer;\n  uint counter;\n  byte byteValue;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  relocationInfo = get_relocation_info_00084298();\n  if ((relocationInfo == 1) && (param2 - 1 < 0xff)) {\n    localValue = param2 & 0xff;\n    byteValue = (byte)localValue;\n    result = 1;\n  }\n  else {\n    result = process_data_0008456c(param1,&byteValue,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    localValue = (uint)byteValue;\n  }\n  counter = 0;\n  do {\n    bytePointer = param3[2] + -1;\n    param3[2] = bytePointer;\n    if ((int)bytePointer < 0) {\n      if ((int)param3[6] <= (int)bytePointer) {\n        **param3 = (byte)localValue;\n        bytePointer = *param3;\n        localValue = (uint)*bytePointer;\n        if (localValue != 10) goto LAB_00083c90;\n      }\n      relocationInfo = process_and_decode_data_000844c4(param1,localValue,param3);\n      if (relocationInfo == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)localValue;\n      bytePointer = *param3;\nLAB_00083c90:\n      *param3 = bytePointer + 1;\n    }\n    if (result <= counter + 1) {\n      return param2;\n    }\n    localValue = (uint)byteArray[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "relocationInfo",
                "uVar2": "result",
                "uVar3": "localValue",
                "pbVar4": "bytePointer",
                "uVar5": "counter",
                "local_1c": "byteValue",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "relocate_function_00083d00",
            "code": "\nundefined4 relocateFunction_00083d00(undefined4 param1,int param2)\n\n{\n  int foundIndex;\n  uint valueMasked;\n  int newLocation;\n  \n  FUNC_00082598();\n  valueMasked = *(uint *)(array[141].r_info + 4) & 0xfffffffc;\n  newLocation = ((valueMasked - param2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < newLocation) {\n    foundIndex = findIndexByValue(param1,0);\n    if (foundIndex == array[141].r_info + valueMasked) {\n      foundIndex = findIndexByValue(param1,-newLocation);\n      if (foundIndex != -1) {\n        DAT_20071194 = DAT_20071194 - newLocation;\n        *(uint *)(array[141].r_info + 4) = valueMasked - newLocation | 1;\n        FUNC_0008259c(param1);\n        return 1;\n      }\n      newLocation = findIndexByValue(param1,0);\n      if (0xf < (int)(newLocation - array[141].r_info)) {\n        DAT_20071194 = newLocation - array[270].r_offset;\n        *(dword *)(array[141].r_info + 4) =\n             newLocation - array[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "relocate_function_00083d00",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "foundIndex",
                "uVar2": "valueMasked",
                "iVar3": "newLocation",
                "Elf32_Rel_ARRAY_20070000": "array",
                "find_pointer_from_value_00082970": "findIndexByValue"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "relocate_function_00083d9c",
            "code": "\nvoid relocateFunction_00083d9c(undefined4 param1,int param2)\n\n{\n  int index1;\n  bool isConditionMet;\n  uint flag;\n  dword offset1;\n  int index2;\n  uint maskedFlag;\n  dword offset2;\n  uint flag2;\n  dword offset3;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  flag = *(uint *)(param2 + -4);\n  offset2 = param2 - 8;\n  maskedFlag = flag & 0xfffffffe;\n  offset1 = offset2 + maskedFlag;\n  flag2 = *(uint *)(offset1 + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == offset1) {\n    flag2 = flag2 + maskedFlag;\n    if (-1 < (int)(flag << 0x1f)) {\n      offset2 = offset2 - *(int *)(param2 + -8);\n      index2 = *(int *)(offset2 + 0xc);\n      index1 = *(int *)(offset2 + 8);\n      flag2 = flag2 + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    offset1 = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(offset2 + 4) = flag2 | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = offset2;\n    if (offset1 <= flag2) {\n      relocate_function_00083d00(param1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(offset1 + 4) = flag2;\n    if ((flag & 1) == 0) {\n      offset2 = offset2 - *(int *)(param2 + -8);\n      index1 = *(int *)(offset2 + 8);\n      maskedFlag = maskedFlag + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        isConditionMet = true;\n      }\n      else {\n        index2 = *(int *)(offset2 + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        isConditionMet = false;\n      }\n    }\n    else {\n      isConditionMet = false;\n    }\n    if (-1 < *(int *)(offset1 + flag2 + 4) << 0x1f) {\n      maskedFlag = maskedFlag + flag2;\n      index1 = *(int *)(offset1 + 8);\n      if ((!isConditionMet) && (index1 == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = offset2;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = offset2;\n        *(undefined4 *)(offset2 + 0xc) = 0x2007046c;\n        *(undefined4 *)(offset2 + 8) = 0x2007046c;\n        *(uint *)(offset2 + 4) = maskedFlag | 1;\n        *(uint *)(offset2 + maskedFlag) = maskedFlag;\n        goto LAB_00083e30;\n      }\n      index2 = *(int *)(offset1 + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(offset2 + 4) = maskedFlag | 1;\n    *(uint *)(offset2 + maskedFlag) = maskedFlag;\n    if (!isConditionMet) {\n      if (maskedFlag < 0x200) {\n        flag = maskedFlag & 0xfffffff8;\n        index1 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flag);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(maskedFlag >> 3) >> 2 & 0xffU);\n        *(int *)(offset2 + 8) = index1;\n        *(uint *)(offset2 + 0xc) = flag + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + flag) = offset2;\n        *(dword *)(index1 + 0xc) = offset2;\n        FUNC_0008259c(param1);\n        return;\n      }\n      flag = maskedFlag >> 9;\n      if (flag < 5) {\n        index1 = (maskedFlag >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x15) {\n        index1 = flag + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x55) {\n        index1 = (maskedFlag >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x155) {\n        index1 = (maskedFlag >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (flag < 0x555) {\n        index1 = (maskedFlag >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      offset3 = index2 * 4 + 0x20070464;\n      offset1 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index2];\n      if (offset1 == offset3) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        offset3 = offset1;\n      }\n      else {\n        do {\n          if ((*(uint *)(offset1 + 4) & 0xfffffffc) <= maskedFlag) break;\n          offset1 = *(dword *)(offset1 + 8);\n        } while (offset3 != offset1);\n        offset3 = *(dword *)(offset1 + 0xc);\n      }\n      *(dword *)(offset2 + 0xc) = offset3;\n      *(dword *)(offset2 + 8) = offset1;\n      *(dword *)(offset3 + 8) = offset2;\n      *(dword *)(offset1 + 0xc) = offset2;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "relocate_function_00083d9c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "index1",
                "bVar2": "isConditionMet",
                "uVar3": "flag",
                "dVar4": "offset1",
                "iVar5": "index2",
                "uVar6": "maskedFlag",
                "dVar7": "offset2",
                "uVar8": "flag2",
                "dVar9": "offset3"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083f34",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *output,uint *input,uint **pointers)\n\n{\n  int returnValue;\n  uint data1;\n  uint data2;\n  ushort flag;\n  uint value1;\n  uint *tempPointer1;\n  uint *tempPointer2;\n  uint value2;\n  uint tempValue1;\n  uint tempValue2;\n  uint tempValue3;\n  uint localValue;\n  \n  if (pointers[2] != (uint *)0x0) {\n    flag = *(ushort *)(input + 3);\n    value1 = (uint)flag;\n    if (((int)(value1 << 0x1c) < 0) && (input[4] != 0)) {\n      tempPointer2 = *pointers;\n    }\n    else {\n      returnValue = process_data_00083808(output,input);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input + 3);\n      value1 = (uint)flag;\n      tempPointer2 = *pointers;\n    }\n    if ((flag & 2) == 0) {\n      data1 = value1 & 2;\n      tempValue2 = data1;\n      value2 = data1;\n      localValue = data1;\n      if ((value1 & 1) == 0) {\n        data1 = 0;\n        tempValue2 = 0;\n        while( true ) {\n          while (data1 == 0) {\n            tempValue2 = *tempPointer2;\n            tempPointer1 = tempPointer2 + 1;\n            tempPointer2 = tempPointer2 + 2;\n            data1 = *tempPointer1;\n          }\n          value2 = input[2];\n          if ((int)(value1 << 0x16) < 0) {\n            if (data1 < value2) {\n              value1 = *input;\n              value2 = data1;\n            }\n            else if ((value1 & 0x480) == 0) {\n              value1 = *input;\n            }\n            else {\n              returnValue = *input - input[4];\n              value2 = returnValue + 1 + data1;\n              tempValue1 = (int)(input[5] * 3) / 2;\n              if (value2 <= tempValue1) {\n                value2 = tempValue1;\n              }\n              if ((int)(value1 << 0x15) < 0) {\n                tempValue1 = relocate_pointers_00081e14(output,value2);\n                if (tempValue1 == 0) {\n                  *output = 0xc;\n                  flag = *(ushort *)(input + 3);\n                  goto LAB_00084030;\n                }\n                copy_data_0008234c(tempValue1,input[4],returnValue);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                tempValue1 = relocate_and_copy_function_000825b0(output);\n                if (tempValue1 == 0) {\n                  relocate_function_00083d9c(output,input[4]);\n                  flag = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              value1 = tempValue1 + returnValue;\n              input[4] = tempValue1;\n              input[5] = value2;\n              *input = value1;\n              input[2] = value2 - returnValue;\n              value2 = data1;\n            }\n            copy_and_reverse_00082438(value1,tempValue2,value2);\n            input[2] = input[2] - value2;\n            *input = *input + value2;\n            value2 = data1;\n          }\n          else if ((input[4] < *input) || (value1 = input[5], data1 < value1)) {\n            if (data1 < value2) {\n              value2 = data1;\n            }\n            copy_and_reverse_00082438(*input,tempValue2,value2);\n            value1 = input[2];\n            input[2] = value1 - value2;\n            *input = *input + value2;\n            if ((value1 - value2 == 0) && (returnValue = decode_and_process_data_00083adc(output,input), returnValue != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            value2 = 0x7fffffff;\n            if (data1 < 0x7fffffff) {\n              value2 = data1;\n            }\n            value2 = (*(code *)input[9])(output,input[7],tempValue2,(value2 / value1) * value1);\n            if ((int)value2 < 1) goto LAB_0008402e;\n          }\n          tempPointer1 = pointers[2];\n          tempValue2 = tempValue2 + value2;\n          data1 = data1 - value2;\n          pointers[2] = (uint *)((int)tempPointer1 - value2);\n          if ((uint *)((int)tempPointer1 - value2) == (uint *)0x0) break;\n          value1 = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (data1 == 0) {\n            value2 = *tempPointer2;\n            data1 = tempPointer2[1];\n            localValue = 0;\n            tempPointer2 = tempPointer2 + 2;\n          }\n          if (localValue == 0) {\n            returnValue = find_first_occurrence_00084384(value2,10,data1);\n            if (returnValue == 0) {\n              tempValue2 = data1 + 1;\n              localValue = 1;\n            }\n            else {\n              tempValue2 = (returnValue + 1) - value2;\n              localValue = 1;\n            }\n          }\n          tempValue1 = *input;\n          value1 = tempValue2;\n          if (data1 <= tempValue2) {\n            value1 = data1;\n          }\n          data2 = input[5];\n          if ((input[4] < tempValue1) && (tempValue3 = input[2] + data2, (int)tempValue3 < (int)value1)) {\n            copy_and_reverse_00082438(tempValue1,value2,tempValue3);\n            *input = *input + tempValue3;\n            returnValue = decode_and_process_data_00083adc(output,input);\n            if (returnValue != 0) goto LAB_0008402e;\n          }\n          else if ((int)value1 < (int)data2) {\n            copy_and_reverse_00082438(tempValue1,value2,value1);\n            input[2] = input[2] - value1;\n            *input = value1 + *input;\n            tempValue3 = value1;\n          }\n          else {\n            tempValue3 = (*(code *)input[9])(output,input[7],value2,data2);\n            if ((int)tempValue3 < 1) goto LAB_0008402e;\n          }\n          tempValue2 = tempValue2 - tempValue3;\n          if (tempValue2 == 0) {\n            returnValue = decode_and_process_data_00083adc(output,input);\n            if (returnValue != 0) goto LAB_0008402e;\n            localValue = 0;\n          }\n          tempPointer1 = pointers[2];\n          value2 = value2 + tempValue3;\n          data1 = data1 - tempValue3;\n          pointers[2] = (uint *)((int)tempPointer1 - tempValue3);\n        } while ((uint *)((int)tempPointer1 - tempValue3) != (uint *)0x0);\n      }\n    }\n    else {\n      data1 = 0;\n      value1 = 0;\n      do {\n        while( true ) {\n          tempValue2 = value1;\n          if (0x7ffffbff < value1) {\n            tempValue2 = 0x7ffffc00;\n          }\n          if (value1 != 0) break;\n          data1 = *tempPointer2;\n          value1 = tempPointer2[1];\n          tempPointer2 = tempPointer2 + 2;\n        }\n        returnValue = (*(code *)input[9])(output,input[7],data1,tempValue2);\n        if (returnValue < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(input + 3);\nLAB_00084030:\n          *(ushort *)(input + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        tempPointer1 = pointers[2];\n        data1 = data1 + returnValue;\n        value1 = value1 - returnValue;\n        pointers[2] = (uint *)((int)tempPointer1 - returnValue);\n      } while ((uint *)((int)tempPointer1 - returnValue) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output",
                "param_2": "input",
                "param_3": "pointers",
                "iVar1": "returnValue",
                "uVar2": "data1",
                "uVar3": "data2",
                "uVar4": "flag",
                "uVar5": "value1",
                "puVar6": "tempPointer1",
                "puVar7": "tempPointer2",
                "uVar8": "value2",
                "uVar9": "tempValue1",
                "uVar10": "tempValue2",
                "uVar11": "tempValue3",
                "local_2c": "localValue"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00082438"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_memory_address_00084290",
            "code": "\nundefined4 getMemoryAddress_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relocationArrayindex.relocationInfo;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "[274]": "index",
                "r_info": "relocationInfo"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "initialize_memory_and_flags_000842a4",
            "code": "\nvoid initializeMemoryAndFlags_000842a4(int input1,int *input2)\n\n{\n  ushort ushort_value;\n  int result1;\n  int result2;\n  uint uint_value;\n  bool flag_value;\n  undefined temporary_stack_var [4];\n  uint local_var;\n  \n  ushort_value = *(ushort *)(input2 + 3);\n  uint_value = (uint)ushort_value;\n  if ((int)(uint_value << 0x1e) < 0) {\n    *input2 = (int)input2 + 0x43;\n    input2[4] = (int)input2 + 0x43;\n    input2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)input2 + 0xe)) {\n    result1 = initialize_and_check_memory_000846b4(input1,(int)*(short *)((int)input2 + 0xe),temporary_stack_var);\n    if (-1 < result1) {\n      flag_value = (local_var & 0xf000) == 0x2000;\n      if (((local_var & 0xf000) == 0x8000) && (input2[10] == 0x8449d)) {\n        result1 = 0x400;\n        *(ushort *)(input2 + 3) = *(ushort *)(input2 + 3) | 0x400;\n        input2[0x13] = 0x400;\n      }\n      else {\n        result1 = 0x400;\n        *(ushort *)(input2 + 3) = *(ushort *)(input2 + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    ushort_value = *(ushort *)(input2 + 3);\n    uint_value = (uint)ushort_value;\n  }\n  *(ushort *)(input2 + 3) = ushort_value | 0x800;\n  if ((uint_value & 0x80) == 0) {\n    result1 = 0x400;\n  }\n  else {\n    result1 = 0x40;\n  }\n  flag_value = false;\nLAB_00084300:\n  result2 = relocate_pointers_00081e14(input1,result1);\n  ushort_value = *(ushort *)(input2 + 3);\n  if (result2 == 0) {\n    if (-1 < (int)((uint)ushort_value << 0x16)) {\n      *(ushort *)(input2 + 3) = ushort_value | 2;\n      *input2 = (int)input2 + 0x43;\n      input2[4] = (int)input2 + 0x43;\n      input2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input1 + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(input2 + 3) = ushort_value | 0x80;\n    *input2 = result2;\n    input2[4] = result2;\n    input2[5] = result1;\n    if ((flag_value) && (result1 = check_and_set_flag_value_000846dc(input1,(int)*(short *)((int)input2 + 0xe)), result1 != 0))\n    {\n      *(ushort *)(input2 + 3) = *(ushort *)(input2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "initialize_memory_and_flags_000842a4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "ushort_value",
                "iVar2": "result1",
                "iVar3": "result2",
                "uVar4": "uint_value",
                "bVar5": "flag_value",
                "auStack_54": "temporary_stack_var",
                "local_50": "local_var"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846b4",
                "FUN_00081e14",
                "FUN_000846dc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nuint * find_first_occurrence_00084384(uint *data,char target,uint size)\n\n{\n  uint temp;\n  int index;\n  uint *ptr;\n  bool flag;\n  \n  if (((uint)data & 3) == 0) {\nLAB_000843b4:\n    if (3 < size) {\n      ptr = data;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        data = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        size = size - 4;\n        data = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < size);\n    }\n    if (size == 0) {\n      data = (uint *)0x0;\n    }\n    else if (*(char *)data != target) {\n      index = 0;\n      do {\n        data = (uint *)((int)data + 1);\n        flag = index == size - 1;\n        index = index + 1;\n        if (flag) goto LAB_000843dc;\n      } while (*(char *)data != target);\n    }\n  }\n  else if (size == 0) {\nLAB_000843dc:\n    data = (uint *)0x0;\n  }\n  else if (*(char *)data != target) {\n    ptr = (uint *)((int)data + 1);\n    size = size - 1;\n    do {\n      data = ptr;\n      if (((uint)data & 3) == 0) goto LAB_000843b4;\n      if (size == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)data + 1);\n      size = size - 1;\n    } while (*(char *)data != target);\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "param_1": "data",
                "param_2": "target",
                "param_3": "size",
                "uVar1": "temp",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "flag"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "process_data_00084464",
            "code": "\nvoid processData_00084464(int *output,int input,undefined4 paramA,undefined4 paramB)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    find_valid_value_00084700(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  result = process_data_000811cc((int)*(short *)(input + 0xe),paramA,paramB,paramB,unused1,unused2,\n                       unused3,unused4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "process_data_00084464",
                "param_1": "output",
                "param_2": "input",
                "param_3": "paramA",
                "param_4": "paramB",
                "iVar1": "result",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3",
                "in_lr": "unused4"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_value_0008449c",
            "code": "\nvoid updateValue_0008449c(undefined4 data,int ptr)\n\n{\n  int validIndex;\n  ushort updatedValue;\n  \n  validIndex = find_valid_value_00084700(data,(int)*(short *)(ptr + 0xe));\n  if (validIndex == -1) {\n    updatedValue = *(ushort *)(ptr + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(ptr + 0xc) | 0x1000;\n  }\n  if (validIndex != -1) {\n    *(int *)(ptr + 0x50) = validIndex;\n  }\n  *(ushort *)(ptr + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_value_0008449c",
                "param_1": "data",
                "param_2": "ptr",
                "iVar1": "validIndex",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_and_decode_data_000844c4",
            "code": "\nuint process_and_decode_data_000844c4(int input_data,uint selected_byte,undefined4 *data_structures,undefined4 constant_value)\n\n{\n  ushort third_short;\n  uint third_uint;\n  undefined *ptr_to_char;\n  int index;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  third_short = *(ushort *)(data_structures + 3);\n  third_uint = (uint)third_short;\n  data_structures[2] = data_structures[6];\n  if ((-1 < (int)(third_uint << 0x1c)) || (index = data_structures[4], index == 0)) {\n    index = process_data(input_data,data_structures,third_short,third_uint,constant_value);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    third_short = *(ushort *)(data_structures + 3);\n    index = data_structures[4];\n    third_uint = (uint)third_short;\n  }\n  selected_byte = selected_byte & 0xff;\n  if ((int)(third_uint << 0x12) < 0) {\n    ptr_to_char = (undefined *)*data_structures;\n    index = (int)ptr_to_char - index;\n    if (index < (int)data_structures[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_structures[0x19] = data_structures[0x19] & 0xffffdfff;\n    ptr_to_char = (undefined *)*data_structures;\n    *(ushort *)(data_structures + 3) = third_short | 0x2000;\n    index = (int)ptr_to_char - index;\n    if (index < (int)data_structures[5]) goto LAB_000844f6;\n  }\n  index = decode_and_process_data(input_data,data_structures);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr_to_char = (undefined *)*data_structures;\n  index = 1;\nLAB_000844f8:\n  data_structures[2] = data_structures[2] + -1;\n  *data_structures = ptr_to_char + 1;\n  *ptr_to_char = (char)selected_byte;\n  if (((data_structures[5] == index) ||\n      (((int)((uint)*(ushort *)(data_structures + 3) << 0x1f) < 0 && (selected_byte == 10)))) &&\n     (index = decode_and_process_data(input_data,data_structures), index != 0)) {\n    return 0xffffffff;\n  }\n  return selected_byte;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_and_decode_data_000844c4",
                "param_1": "input_data",
                "param_2": "selected_byte",
                "param_3": "data_structures",
                "param_4": "constant_value",
                "uVar1": "third_short",
                "uVar2": "third_uint",
                "puVar3": "ptr_to_char",
                "iVar4": "index",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "process_data_00083808": "process_data",
                "decode_and_process_data_00083adc": "decode_and_process_data"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083808"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "process_data_0008456c",
            "code": "\nvoid processData_0008456c(undefined4 *outputPointer,int inputSize,undefined4 inputValue,undefined4 *statusPointer)\n\n{\n  code *functionPointer;\n  undefined4 memoryAddress;\n  int result;\n  undefined temporaryBuffer [12];\n  \n  functionPointer = DAT_20070898;\n  if (inputSize == 0) {\n    memoryAddress = get_memory_address_00084290();\n    result = (*functionPointer)(outputPointer,temporaryBuffer,0,memoryAddress,statusPointer);\n  }\n  else {\n    memoryAddress = get_memory_address_00084290();\n    result = (*functionPointer)(outputPointer,inputSize,inputValue,memoryAddress,statusPointer);\n  }\n  if (result == -1) {\n    *statusPointer = 0;\n    *outputPointer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "param_1": "outputPointer",
                "param_2": "inputSize",
                "param_3": "inputValue",
                "param_4": "statusPointer",
                "pcVar1": "functionPointer",
                "uVar2": "memoryAddress",
                "iVar3": "result",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "set_buffer_value_000845bc",
            "code": "\nundefined4 set_buffer_value_000845bc(undefined4 *buffer,undefined *value,uint length)\n\n{\n  if (value == (undefined *)0x0) {\n    return 0;\n  }\n  if (length < 0x100) {\n    *value = (char)length;\n    return 1;\n  }\n  *buffer = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "set_buffer_value_000845bc",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "length"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_data_and_relocate_000846a4",
            "code": "\nundefined4 processDataAndRelocate_000846a4(int inputParam)\n\n{\n  dword rOffset;\n  undefined4 returnValue;\n  int errorValue;\n  \n  rOffset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (inputParam != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures_00083b14();\n    }\n    if (*(short *)(inputParam + 0xc) != 0) {\n      returnValue = decode_and_process_data_00083adc(rOffset,inputParam);\n      if ((*(code **)(inputParam + 0x2c) != (code *)0x0) &&\n         (errorValue = (**(code **)(inputParam + 0x2c))(rOffset,*(undefined4 *)(inputParam + 0x1c)), errorValue < 0))\n      {\n        returnValue = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(inputParam + 0xc) << 0x18) < 0) {\n        relocate_function_00083d9c(rOffset,*(undefined4 *)(inputParam + 0x10));\n      }\n      if (*(int *)(inputParam + 0x30) != 0) {\n        if (*(int *)(inputParam + 0x30) != inputParam + 0x40) {\n          relocate_function_00083d9c(rOffset);\n        }\n        *(undefined4 *)(inputParam + 0x30) = 0;\n      }\n      if (*(int *)(inputParam + 0x44) != 0) {\n        relocate_function_00083d9c(rOffset);\n        *(undefined4 *)(inputParam + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(inputParam + 0xc) = 0;\n      FUNC_00083c0c();\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_data_and_relocate_000846a4",
                "param_1": "inputParam",
                "dVar1": "rOffset",
                "uVar2": "returnValue",
                "iVar3": "errorValue"
            },
            "calling": [],
            "called": [
                "FUN_00083c0c",
                "FUN_00083b14",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "initialize_and_check_memory_000846b4",
            "code": "\nvoid initializeAndCheckMemory_000846b4(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int initResult;\n  \n  DAT_200711bc = 0;\n  initResult = initialize_memory_000811b4(arg1,arg2,arg2,0,arg3);\n  if ((initResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "initialize_and_check_memory_000846b4",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "initResult"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_and_set_flag_value_000846dc",
            "code": "\nvoid checkAndSetFlagValue_000846dc(int *result,undefined4 inputParam)\n\n{\n  int flagCheckResult;\n  \n  DAT_200711bc = 0;\n  flagCheckResult = check_flag_000811be(inputParam);\n  if ((flagCheckResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_and_set_flag_value_000846dc",
                "param_1": "result",
                "param_2": "inputParam",
                "iVar1": "flagCheckResult"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "find_valid_value_00084700",
            "code": "\nvoid findValidValue_00084700(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = get_zero_000811c2(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "find_valid_value_00084700",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "result"
            },
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "check_and_get_zero_00084728",
            "code": "\nvoid checkAndGetZero_00084728(int *result,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  int iVar1;\n  \n  DAT_200711bc = 0;\n  iVar1 = get_zero_000811c6(value1,value2,value3);\n  if ((iVar1 == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "check_and_get_zero_00084728",
                "param_1": "result",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_remainder_00084750",
            "code": "\nint calculate_remainder_00084750(int input1,int input2,int input3,int input4)\n\n{\n  int remainder;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  remainder = calculate_remainder_00084750_and_update_000847ac();\n  return remainder;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_remainder_00084750",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "iVar1": "remainder"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculateDifference_0008477c(uint num1,int num2,undefined4 value1,undefined4 value2,int *result)\n\n{\n  uint convertedValue;\n  longlong multipliedValue;\n  \n  multipliedValue = divide_unsigned_000847e0();\n  multipliedValue = multipliedValue * CONCAT44(value2,value1);\n  convertedValue = (uint)multipliedValue;\n  *result = num1 - convertedValue;\n  result[1] = (num2 - (int)((ulonglong)multipliedValue >> 0x20)) - (uint)(num1 < convertedValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "value1",
                "param_4": "value2",
                "param_5": "result",
                "uVar1": "convertedValue",
                "lVar2": "multipliedValue"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_remainder_and_update_000847ac",
            "code": "\nvoid calculate_remainder_and_update_000847ac(uint dividend,int divisor,undefined4 lower_bits_of_multiplier,undefined4 upper_bits_of_multiplier,int *result_array)\n\n{\n  uint quotient;\n  longlong multiplied_result;\n  \n  multiplied_result = calculate_quotient_remainder_00084a80();\n  multiplied_result = multiplied_result * CONCAT44(upper_bits_of_multiplier,lower_bits_of_multiplier);\n  quotient = (uint)multiplied_result;\n  *result_array = dividend - quotient;\n  result_array[1] = (divisor - (int)((ulonglong)multiplied_result >> 0x20)) - (uint)(dividend < quotient);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_remainder_and_update_000847ac",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "lower_bits_of_multiplier",
                "param_4": "upper_bits_of_multiplier",
                "param_5": "result_array",
                "uVar1": "quotient",
                "lVar2": "multiplied_result"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_unsigned_000847e0",
            "code": "\nundefined8 divideUnsigned_000847e0(uint dividend,uint dividendUpper,uint divisor,uint divisorUpper)\n\n{\n  longlong tempResult;\n  uint quotientLower;\n  uint quotientUpper;\n  uint tempDivisor;\n  uint tempDividend;\n  int shiftAmount;\n  uint remainderLower;\n  uint remainderUpper;\n  uint isDividendNegative;\n  uint tempResultLower;\n  uint tempResultUpper;\n  uint tempDividendUpper;\n  bool isDivisorNegative;\n  \n  if ((int)dividendUpper < 0) {\n    isDivisorNegative = dividend != 0;\n    dividend = -dividend;\n    dividendUpper = -dividendUpper - (uint)isDivisorNegative;\n    isDividendNegative = 0xffffffff;\n  }\n  else {\n    isDividendNegative = 0;\n  }\n  if ((int)divisorUpper < 0) {\n    isDividendNegative = ~isDividendNegative;\n    isDivisorNegative = divisor != 0;\n    divisor = -divisor;\n    divisorUpper = -divisorUpper - (uint)isDivisorNegative;\n  }\n  if (divisorUpper == 0) {\n    if (dividendUpper < divisor) {\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount != 0) {\n        quotientUpper = dividend >> (0x20U - shiftAmount & 0xff);\n        divisor = divisor << shiftAmount;\n        dividend = dividend << shiftAmount;\n        dividendUpper = dividendUpper << shiftAmount | quotientUpper;\n      }\n      quotientLower = divisor >> 0x10;\n      tempDivisor = dividendUpper / quotientLower;\n      remainderLower = (divisor & 0xffff) * tempDivisor;\n      tempResultLower = dividend >> 0x10 | (dividendUpper - quotientLower * tempDivisor) * 0x10000;\n      quotientUpper = tempDivisor;\n      if (tempResultLower <= remainderLower && remainderLower - tempResultLower != 0) {\n        isDivisorNegative = CARRY4(tempResultLower,divisor);\n        tempResultLower = tempResultLower + divisor;\n        quotientUpper = tempDivisor - 1;\n        if ((isDivisorNegative == false) && (tempResultLower <= remainderLower && remainderLower - tempResultLower != 0)) {\n          quotientUpper = tempDivisor - 2;\n          tempResultLower = tempResultLower + divisor;\n        }\n      }\n      remainderUpper = (tempResultLower - remainderLower) / quotientLower;\n      tempDivisor = (divisor & 0xffff) * remainderUpper;\n      remainderLower = dividend & 0xffff | ((tempResultLower - remainderLower) - quotientLower * remainderUpper) * 0x10000;\n      quotientLower = remainderUpper;\n      if (remainderLower <= tempDivisor && tempDivisor - remainderLower != 0) {\n        quotientLower = remainderUpper - 1;\n        if ((CARRY4(remainderLower,divisor) == false) &&\n           (remainderLower + divisor <= tempDivisor && tempDivisor - (remainderLower + divisor) != 0)) {\n          quotientLower = remainderUpper - 2;\n        }\n      }\n      quotientLower = quotientLower | quotientUpper << 0x10;\n      quotientUpper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(divisor);\n      if (shiftAmount == 0) {\n        dividendUpper = dividendUpper - divisor;\n        tempDivisor = divisor >> 0x10;\n        tempDividendUpper = divisor & 0xffff;\n        quotientUpper = 1;\n      }\n      else {\n        divisor = divisor << shiftAmount;\n        quotientUpper = dividendUpper >> (0x20U - shiftAmount & 0xff);\n        tempDivisor = divisor >> 0x10;\n        tempResultLower = quotientUpper / tempDivisor;\n        tempDividendUpper = divisor & 0xffff;\n        remainderLower = tempDividendUpper * tempResultLower;\n        remainderUpper = dividend >> (0x20U - shiftAmount & 0xff) | dividendUpper << shiftAmount;\n        quotientUpper = remainderUpper >> 0x10 | (quotientUpper - tempDivisor * tempResultLower) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotientLower = tempResultLower;\n        if (quotientUpper <= remainderLower && remainderLower - quotientUpper != 0) {\n          isDivisorNegative = CARRY4(quotientUpper,divisor);\n          quotientUpper = quotientUpper + divisor;\n          quotientLower = tempResultLower - 1;\n          if ((isDivisorNegative == false) && (quotientUpper <= remainderLower && remainderLower - quotientUpper != 0)) {\n            quotientLower = tempResultLower - 2;\n            quotientUpper = quotientUpper + divisor;\n          }\n        }\n        tempDividend = (quotientUpper - remainderLower) / tempDivisor;\n        tempResultLower = tempDividendUpper * tempDividend;\n        dividendUpper = remainderUpper & 0xffff | ((quotientUpper - remainderLower) - tempDivisor * tempDividend) * 0x10000;\n        quotientUpper = tempDividend;\n        if (dividendUpper <= tempResultLower && tempResultLower - dividendUpper != 0) {\n          isDivisorNegative = CARRY4(dividendUpper,divisor);\n          dividendUpper = dividendUpper + divisor;\n          quotientUpper = tempDividend - 1;\n          if ((isDivisorNegative == false) && (dividendUpper <= tempResultLower && tempResultLower - dividendUpper != 0)) {\n            quotientUpper = tempDividend - 2;\n            dividendUpper = dividendUpper + divisor;\n          }\n        }\n        dividendUpper = dividendUpper - tempResultLower;\n        quotientUpper = quotientUpper | quotientLower << 0x10;\n      }\n      quotientLower = dividendUpper / tempDivisor;\n      tempResultLower = tempDividendUpper * quotientLower;\n      remainderUpper = dividend >> 0x10 | (dividendUpper - tempDivisor * quotientLower) * 0x10000;\n      remainderLower = quotientLower;\n      if (remainderUpper <= tempResultLower && tempResultLower - remainderUpper != 0) {\n        isDivisorNegative = CARRY4(remainderUpper,divisor);\n        remainderUpper = remainderUpper + divisor;\n        remainderLower = quotientLower - 1;\n        if ((isDivisorNegative == false) && (remainderUpper <= tempResultLower && tempResultLower - remainderUpper != 0)) {\n          remainderLower = quotientLower - 2;\n          remainderUpper = remainderUpper + divisor;\n        }\n      }\n      tempDividend = (remainderUpper - tempResultLower) / tempDivisor;\n      tempDividendUpper = tempDividendUpper * tempDividend;\n      tempDivisor = dividend & 0xffff | ((remainderUpper - tempResultLower) - tempDivisor * tempDividend) * 0x10000;\n      quotientLower = tempDividend;\n      if (tempDivisor <= tempDividendUpper && tempDividendUpper - tempDivisor != 0) {\n        quotientLower = tempDividend - 1;\n        if ((CARRY4(tempDivisor,divisor) == false) &&\n           (tempDivisor + divisor <= tempDividendUpper && tempDividendUpper - (tempDivisor + divisor) != 0)) {\n          quotientLower = tempDividend - 2;\n        }\n      }\n      quotientLower = quotientLower | remainderLower << 0x10;\n    }\n  }\n  else if (dividendUpper < divisorUpper) {\n    quotientUpper = 0;\n    quotientLower = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(divisorUpper);\n    if (shiftAmount == 0) {\n      if ((divisorUpper < dividendUpper) || (divisor <= dividend)) {\n        quotientUpper = 0;\n        quotientLower = 1;\n      }\n      else {\n        quotientLower = 0;\n        quotientUpper = 0;\n      }\n    }\n    else {\n      quotientUpper = 0x20 - shiftAmount;\n      tempDivisor = dividendUpper >> (quotientUpper & 0xff);\n      tempDividendUpper = divisor >> (quotientUpper & 0xff) | divisorUpper << shiftAmount;\n      tempResultLower = tempDividendUpper >> 0x10;\n      quotientLower = tempDivisor / tempResultLower;\n      remainderUpper = (tempDividendUpper & 0xffff) * quotientLower;\n      remainderLower = dividendUpper << shiftAmount | dividend >> (quotientUpper & 0xff);\n      tempDivisor = remainderLower >> 0x10 | (tempDivisor - tempResultLower * quotientLower) * 0x10000;\n      quotientUpper = quotientLower;\n      if (tempDivisor <= remainderUpper && remainderUpper - tempDivisor != 0) {\n        isDivisorNegative = CARRY4(tempDivisor,tempDividendUpper);\n        tempDivisor = tempDivisor + tempDividendUpper;\n        quotientUpper = quotientLower - 1;\n        if ((isDivisorNegative == false) && (tempDivisor <= remainderUpper && remainderUpper - tempDivisor != 0)) {\n          quotientUpper = quotientLower - 2;\n          tempDivisor = tempDivisor + tempDividendUpper;\n        }\n      }\n      tempDividend = (tempDivisor - remainderUpper) / tempResultLower;\n      tempResultUpper = (tempDividendUpper & 0xffff) * tempDividend;\n      tempDivisor = remainderLower & 0xffff | ((tempDivisor - remainderUpper) - tempResultLower * tempDividend) * 0x10000;\n      quotientLower = tempDividend;\n      if (tempDivisor <= tempResultUpper && tempResultUpper - tempDivisor != 0) {\n        isDivisorNegative = CARRY4(tempDivisor,tempDividendUpper);\n        tempDivisor = tempDivisor + tempDividendUpper;\n        quotientLower = tempDividend - 1;\n        if ((isDivisorNegative == false) && (tempDivisor <= tempResultUpper && tempResultUpper - tempDivisor != 0)) {\n          quotientLower = tempDividend - 2;\n          tempDivisor = tempDivisor + tempDividendUpper;\n        }\n      }\n      quotientLower = quotientLower | quotientUpper << 0x10;\n      tempResult = (ulonglong)quotientLower * (ulonglong)(divisor << shiftAmount);\n      remainderLower = (uint)((ulonglong)tempResult >> 0x20);\n      quotientUpper = 0;\n      if ((tempDivisor - tempResultUpper < remainderLower) ||\n         ((tempDivisor - tempResultUpper == remainderLower && (dividend << shiftAmount < (uint)tempResult)))) {\n        quotientLower = quotientLower - 1;\n        quotientUpper = 0;\n      }\n    }\n  }\n  if (isDividendNegative != 0) {\n    isDivisorNegative = quotientLower != 0;\n    quotientLower = -quotientLower;\n    quotientUpper = -quotientUpper - (uint)isDivisorNegative;\n  }\n  return CONCAT44(quotientUpper,quotientLower);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_unsigned_000847e0",
                "param_1": "dividend",
                "param_2": "dividendUpper",
                "param_3": "divisor",
                "param_4": "divisorUpper",
                "lVar1": "tempResult",
                "uVar2": "quotientLower",
                "uVar3": "quotientUpper",
                "uVar4": "tempDivisor",
                "uVar5": "tempDividend",
                "iVar6": "shiftAmount",
                "uVar7": "remainderLower",
                "uVar8": "remainderUpper",
                "uVar9": "isDividendNegative",
                "uVar10": "tempResultLower",
                "uVar11": "tempResultUpper",
                "uVar12": "tempDividendUpper",
                "bVar13": "isDivisorNegative"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_quotient_remainder_00084a80",
            "code": "\nulonglong calculateQuotientRemainder_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temp;\n  uint divisorQuotient;\n  uint quotientHigh;\n  uint quotientLow;\n  uint temp1;\n  uint dividendHigh;\n  uint divisorHigh;\n  uint quotientCurrent;\n  uint temp2;\n  int shiftCount;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount == 0) {\n        divisor = divisor - quotient;\n        quotientHigh = quotient >> 0x10;\n        temp1 = quotient & 0xffff;\n        divisorQuotient = 1;\n      }\n      else {\n        quotient = quotient << shiftCount;\n        quotientCurrent = divisor >> (0x20U - shiftCount & 0xff);\n        quotientHigh = quotient >> 0x10;\n        temp2 = quotientCurrent / quotientHigh;\n        temp1 = quotient & 0xffff;\n        divisorQuotient = temp1 * temp2;\n        dividendHigh = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        quotientLow = dividendHigh >> 0x10 | (quotientCurrent - quotientHigh * temp2) * 0x10000;\n        dividend = dividend << shiftCount;\n        quotientCurrent = temp2;\n        if (quotientLow <= divisorQuotient && divisorQuotient - quotientLow != 0) {\n          carryFlag = CARRY4(quotientLow,quotient);\n          quotientLow = quotientLow + quotient;\n          quotientCurrent = temp2 - 1;\n          if ((carryFlag == false) && (quotientLow <= divisorQuotient && divisorQuotient - quotientLow != 0)) {\n            quotientCurrent = temp2 - 2;\n            quotientLow = quotientLow + quotient;\n          }\n        }\n        divisorHigh = (quotientLow - divisorQuotient) / quotientHigh;\n        temp2 = temp1 * divisorHigh;\n        divisor = dividendHigh & 0xffff | ((quotientLow - divisorQuotient) - quotientHigh * divisorHigh) * 0x10000;\n        divisorQuotient = divisorHigh;\n        if (divisor <= temp2 && temp2 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          divisorQuotient = divisorHigh - 1;\n          if ((carryFlag == false) && (divisor <= temp2 && temp2 - divisor != 0)) {\n            divisorQuotient = divisorHigh - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp2;\n        divisorQuotient = divisorQuotient | quotientCurrent << 0x10;\n      }\n      temp2 = divisor / quotientHigh;\n      quotientLow = temp1 * temp2;\n      dividendHigh = dividend >> 0x10 | (divisor - quotientHigh * temp2) * 0x10000;\n      quotientCurrent = temp2;\n      if (dividendHigh <= quotientLow && quotientLow - dividendHigh != 0) {\n        carryFlag = CARRY4(dividendHigh,quotient);\n        dividendHigh = dividendHigh + quotient;\n        quotientCurrent = temp2 - 1;\n        if ((carryFlag == false) && (dividendHigh <= quotientLow && quotientLow - dividendHigh != 0)) {\n          quotientCurrent = temp2 - 2;\n          dividendHigh = dividendHigh + quotient;\n        }\n      }\n      temp2 = (dividendHigh - quotientLow) / quotientHigh;\n      temp1 = temp1 * temp2;\n      dividendHigh = dividend & 0xffff | ((dividendHigh - quotientLow) - quotientHigh * temp2) * 0x10000;\n      quotientHigh = temp2;\n      if (dividendHigh <= temp1 && temp1 - dividendHigh != 0) {\n        quotientHigh = temp2 - 1;\n        if ((CARRY4(dividendHigh,quotient) == false) &&\n           (dividendHigh + quotient <= temp1 && temp1 - (dividendHigh + quotient) != 0)) {\n          quotientHigh = temp2 - 2;\n        }\n      }\n      return CONCAT44(divisorQuotient,quotientHigh | quotientCurrent << 0x10);\n    }\n    shiftCount = LZCOUNT(quotient);\n    if (shiftCount != 0) {\n      quotientCurrent = dividend >> (0x20U - shiftCount & 0xff);\n      quotient = quotient << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = quotientCurrent | divisor << shiftCount;\n    }\n    divisorQuotient = quotient >> 0x10;\n    quotientHigh = divisor / divisorQuotient;\n    temp1 = (quotient & 0xffff) * quotientHigh;\n    temp2 = dividend >> 0x10 | (divisor - divisorQuotient * quotientHigh) * 0x10000;\n    quotientCurrent = quotientHigh;\n    if (temp2 <= temp1 && temp1 - temp2 != 0) {\n      carryFlag = CARRY4(temp2,quotient);\n      temp2 = temp2 + quotient;\n      quotientCurrent = quotientHigh - 1;\n      if ((carryFlag == false) && (temp2 <= temp1 && temp1 - temp2 != 0)) {\n        quotientCurrent = quotientHigh - 2;\n        temp2 = temp2 + quotient;\n      }\n    }\n    dividendHigh = (temp2 - temp1) / divisorQuotient;\n    quotientHigh = (quotient & 0xffff) * dividendHigh;\n    temp1 = dividend & 0xffff | ((temp2 - temp1) - divisorQuotient * dividendHigh) * 0x10000;\n    divisorQuotient = dividendHigh;\n    if (temp1 <= quotientHigh && quotientHigh - temp1 != 0) {\n      divisorQuotient = dividendHigh - 1;\n      if ((CARRY4(temp1,quotient) == false) &&\n         (temp1 + quotient <= quotientHigh && quotientHigh - (temp1 + quotient) != 0)) {\n        divisorQuotient = dividendHigh - 2;\n      }\n    }\n    divisorQuotient = divisorQuotient | quotientCurrent << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(remainder);\n    if (shiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      divisorQuotient = 0;\n    }\n    else {\n      divisorQuotient = 0x20 - shiftCount;\n      quotientCurrent = divisor >> (divisorQuotient & 0xff);\n      quotientHigh = remainder << shiftCount | quotient >> (divisorQuotient & 0xff);\n      temp1 = quotientHigh >> 0x10;\n      quotientLow = quotientCurrent / temp1;\n      temp2 = (quotientHigh & 0xffff) * quotientLow;\n      dividendHigh = dividend >> (divisorQuotient & 0xff) | divisor << shiftCount;\n      divisorQuotient = dividendHigh >> 0x10 | (quotientCurrent - temp1 * quotientLow) * 0x10000;\n      quotientCurrent = quotientLow;\n      if (divisorQuotient <= temp2 && temp2 - divisorQuotient != 0) {\n        carryFlag = CARRY4(divisorQuotient,quotientHigh);\n        divisorQuotient = divisorQuotient + quotientHigh;\n        quotientCurrent = quotientLow - 1;\n        if ((carryFlag == false) && (divisorQuotient <= temp2 && temp2 - divisorQuotient != 0)) {\n          quotientCurrent = quotientLow - 2;\n          divisorQuotient = divisorQuotient + quotientHigh;\n        }\n      }\n      quotientLow = (divisorQuotient - temp2) / temp1;\n      divisorHigh = (quotientHigh & 0xffff) * quotientLow;\n      temp1 = dividendHigh & 0xffff | ((divisorQuotient - temp2) - temp1 * quotientLow) * 0x10000;\n      divisorQuotient = quotientLow;\n      if (temp1 <= divisorHigh && divisorHigh - temp1 != 0) {\n        carryFlag = CARRY4(temp1,quotientHigh);\n        temp1 = temp1 + quotientHigh;\n        divisorQuotient = quotientLow - 1;\n        if ((carryFlag == false) && (temp1 <= divisorHigh && divisorHigh - temp1 != 0)) {\n          divisorQuotient = quotientLow - 2;\n          temp1 = temp1 + quotientHigh;\n        }\n      }\n      divisorQuotient = divisorQuotient | quotientCurrent << 0x10;\n      temp = (ulonglong)divisorQuotient * (ulonglong)(quotient << shiftCount);\n      quotientCurrent = (uint)((ulonglong)temp >> 0x20);\n      if ((temp1 - divisorHigh < quotientCurrent) || ((temp1 - divisorHigh == quotientCurrent && (dividend << shiftCount < (uint)temp)))\n         ) {\n        divisorQuotient = divisorQuotient - 1;\n      }\n    }\n  }\n  return (ulonglong)divisorQuotient;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_quotient_remainder_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temp",
                "uVar2": "divisorQuotient",
                "uVar3": "quotientHigh",
                "uVar4": "quotientLow",
                "uVar5": "temp1",
                "uVar6": "dividendHigh",
                "uVar7": "divisorHigh",
                "uVar8": "quotientCurrent",
                "uVar9": "temp2",
                "iVar10": "shiftCount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 89503,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ]
}