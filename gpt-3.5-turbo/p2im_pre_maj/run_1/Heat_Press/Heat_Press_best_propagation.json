{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_device_00080164",
            "code": "\nvoid initializeDevice_00080164(int **device)\n\n{\n  int result;\n  \n  *device = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)device + 6)) {\n    pinMode(*(byte *)((int)device + 6),1);\n    digitalWrite(*(undefined *)((int)device + 6),0);\n  }\n  do {\n    result = (**(code **)(**device + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)device + 0x49) = 0;\n  *(undefined *)((int)device + 0x4a) = 0;\n  *(undefined2 *)(device + 0x15) = 0;\n  *(undefined2 *)((int)device + 0x52) = 0;\n  *(undefined2 *)(device + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_device_00080164",
                "param_1": "device",
                "iVar1": "result"
            },
            "calling": [
                "setup"
            ],
            "called": [
                "pinMode",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **dataPtr)\n\n{\n  bool exceededLimit;\n  undefined result;\n  char counter;\n  int returnCode;\n  byte temp;\n  \n  if (1 < *(byte *)((int)dataPtr + 6)) {\n    turnOffDigitalOutput(*(byte *)((int)dataPtr + 6),0);\n  }\n  exceededLimit = false;\n  *(undefined *)((int)dataPtr + 0x49) = 0;\n  if (*(byte *)((int)dataPtr + 5) < 4) {\n    while (returnCode = (**(code **)(**dataPtr + 8))(), returnCode != 0) {\n      temp = *(byte *)((int)dataPtr + 0x49);\n      result = (**(code **)(**dataPtr + 0xc))();\n      counter = *(char *)((int)dataPtr + 0x49);\n      *(undefined *)((int)dataPtr + temp + 9) = result;\n      temp = counter + 1;\n      *(byte *)((int)dataPtr + 0x49) = temp;\n      if (0x3f < temp) {\n        exceededLimit = true;\n      }\n    }\n  }\n  *(short *)(dataPtr + 0x14) = *(short *)(dataPtr + 0x14) + 1;\n  if (exceededLimit) {\n    counter = -3;\n    *(short *)(dataPtr + 0x15) = *(short *)(dataPtr + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)dataPtr + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "dataPtr",
                "bVar1": "exceededLimit",
                "uVar2": "result",
                "cVar3": "counter",
                "iVar4": "returnCode",
                "bVar5": "temp",
                "digitalWrite": "turnOffDigitalOutput"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int dataPointer,uint dataLength)\n\n{\n  int currentIndex;\n  uint checksum;\n  char bitCounter;\n  uint bitValue;\n  \n  checksum = 0xffff;\n  for (currentIndex = dataPointer; (currentIndex - dataPointer & 0xffU) < dataLength; currentIndex = currentIndex + 1) {\n    checksum = checksum ^ *(byte *)(currentIndex + 9);\n    bitCounter = '\\b';\n    do {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCounter = bitCounter + -1;\n    } while (bitCounter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "dataPointer",
                "param_2": "dataLength",
                "iVar1": "currentIndex",
                "uVar2": "checksum",
                "cVar3": "bitCounter",
                "uVar4": "bitValue"
            },
            "calling": [
                "sendTxBuffer"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "calculate_and_set_crc_00080258",
            "code": "\nvoid calculateAndSetCRC_00080258(int **paramList,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  byte byteVar;\n  undefined2 calculatedCRC;\n  int loopVar;\n  uint byteValue;\n  \n  byteVar = *(byte *)((int)paramList + 0x49);\n  byteValue = (uint)byteVar;\n  calculatedCRC = calcCRC(paramList,byteValue,param_3,param_4,param_4);\n  *(char *)((int)paramList + byteValue + 9) = (char)((ushort)calculatedCRC >> 8);\n  *(char *)((int)paramList + (byteValue + 1 & 0xff) + 9) = (char)calculatedCRC;\n  *(byte *)((int)paramList + 0x49) = byteVar + 2;\n  if (1 < *(byte *)((int)paramList + 6)) {\n    digitalWrite(*(byte *)((int)paramList + 6),1);\n  }\n  if (*(byte *)((int)paramList + 5) < 4) {\n    (**(code **)(**paramList + 4))(*paramList,(int)paramList + 9,*(undefined *)((int)paramList + 0x49));\n  }\n  if (1 < *(byte *)((int)paramList + 6)) {\n    digitalWrite(*(byte *)((int)paramList + 6),0);\n  }\n  if (*(byte *)((int)paramList + 5) < 4) {\n    do {\n      loopVar = (**(code **)(**paramList + 0xc))();\n    } while (-1 < loopVar);\n  }\n  *(undefined *)((int)paramList + 0x49) = 0;\n  loopVar = millis();\n  paramList[0x17] = (int *)(loopVar + (uint)*(ushort *)((int)paramList + 0x56));\n  *(short *)((int)paramList + 0x52) = *(short *)((int)paramList + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "calculate_and_set_crc_00080258",
                "param_1": "paramList",
                "bVar1": "byteVar",
                "uVar2": "calculatedCRC",
                "iVar3": "loopVar",
                "uVar4": "byteValue"
            },
            "calling": [
                "query"
            ],
            "called": [
                "millis",
                "calcCRC",
                "digitalWrite"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "process_data_000802da",
            "code": "\nint processData_000802da(int inputBuffer,uint data1,uint data2,ushort *dataArray)\n\n{\n  char result;\n  byte byteValue;\n  undefined temp1;\n  ushort temp2;\n  uint temp3;\n  ushort *tempArrayPtr;\n  undefined lowerByteData1;\n  undefined upperByteData1;\n  ushort data2Extracted;\n  \n  lowerByteData1 = (undefined)data1;\n  upperByteData1 = (undefined)(data1 >> 8);\n  data2Extracted = (ushort)data2;\n  temp3 = data2 & 0xffff;\n  if (*(char *)(inputBuffer + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(inputBuffer + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((data1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(inputBuffer + 9) = lowerByteData1;\n  *(undefined *)(inputBuffer + 10) = upperByteData1;\n  *(ushort **)(inputBuffer + 0x4c) = dataArray;\n  *(char *)(inputBuffer + 0xb) = (char)(data1 >> 0x18);\n  *(char *)(inputBuffer + 0xc) = (char)(data1 >> 0x10);\n  temp1 = (undefined)(data2 >> 8);\n  switch(upperByteData1) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(inputBuffer + 0xd) = temp1;\n    break;\n  case 5:\n    temp2 = *dataArray;\n    if (temp2 != 0) {\n      temp2 = 1;\n    }\n    *(char *)(inputBuffer + 0xd) = -(char)temp2;\n    temp3 = 0;\n    break;\n  case 6:\n    *(char *)(inputBuffer + 0xd) = (char)(*dataArray >> 8);\n    temp3 = (uint)*dataArray;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byteValue = (byte)(data2Extracted >> 3) & 0xfe;\n    if ((data2 & 0xf) != 0) {\n      byteValue = byteValue + 1;\n    }\n    *(char *)(inputBuffer + 0xe) = (char)data2;\n    *(undefined *)(inputBuffer + 0xd) = temp1;\n    *(byte *)(inputBuffer + 0xf) = byteValue;\n    temp1 = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(inputBuffer + 0xd) = temp1;\n    *(char *)(inputBuffer + 0xe) = (char)data2;\n    dataArray = dataArray + -1;\n    *(char *)(inputBuffer + 0xf) = (char)temp3 * '\\x02';\n    *(undefined *)(inputBuffer + 0x49) = 7;\n    tempArrayPtr = dataArray + temp3;\n    while (dataArray != tempArrayPtr) {\n      byteValue = *(byte *)(inputBuffer + 0x49);\n      *(char *)(inputBuffer + (uint)byteValue + 9) = (char)(dataArray[1] >> 8);\n      temp3 = byteValue + 1 & 0xff;\n      *(char *)(inputBuffer + 0x49) = (char)temp3;\n      dataArray = dataArray + 1;\n      *(char *)(temp3 + inputBuffer + 9) = (char)*dataArray;\n      *(byte *)(inputBuffer + 0x49) = byteValue + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(inputBuffer + 0xe) = (char)temp3;\n  temp1 = 6;\nLAB_0008034a:\n  *(undefined *)(inputBuffer + 0x49) = temp1;\nswitchD_0008031e_caseD_7:\n  sendTxBuffer(inputBuffer);\n  *(undefined *)(inputBuffer + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_000802da": "process_data_000802da",
                "param_1": "inputBuffer",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "dataArray",
                "cVar1": "result",
                "bVar2": "byteValue",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "puVar6": "tempArrayPtr",
                "local_1c": "lowerByteData1",
                "local_1b": "upperByteData1",
                "local_18": "data2Extracted"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "sendTxBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_and_update_value_000803d4",
            "code": "\nundefined4 checkAndUpdateValue_000803d4(int inputValue)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(inputValue + 10) << 0x18) < 0) {\n    *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(inputValue + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(inputValue + 0x54) = *(short *)(inputValue + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_and_update_value_000803d4",
                "param_1": "inputValue",
                "iVar1": "index"
            },
            "calling": [
                "poll"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "convert_to_word_array_00080410",
            "code": "\nvoid convertToWordArray_00080410(int input_array,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 word;\n  int index;\n  byte counter;\n  uint converted_index;\n  int array_index;\n  \n  counter = 0;\n  while( true ) {\n    converted_index = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(input_array + 0xb) >> 1 <= converted_index) break;\n    index = (converted_index * 2 + 3 & 0xff) + input_array;\n    array_index = *(int *)(input_array + 0x4c);\n    word = combineBytes(*(undefined *)(index + 9),*(undefined *)(index + 10),index,\n                     *(byte *)(input_array + 0xb),param_4);\n    *(undefined2 *)(array_index + converted_index * 2) = word;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "convert_to_word_array_00080410",
                "param_1": "input_array",
                "uVar1": "word",
                "iVar2": "index",
                "bVar3": "counter",
                "uVar4": "converted_index",
                "iVar5": "array_index",
                "makeWord": "combineBytes"
            },
            "calling": [
                "poll"
            ],
            "called": [
                "makeWord"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "process_data_0008043e",
            "code": "\nint process_data_0008043e(int **data)\n\n{\n  char result;\n  uint function_result;\n  int *current_time;\n  int validation_result;\n  uint argument;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    function_result = (**(code **)(**data + 8))();\n    argument = function_result & 0xff;\n  }\n  current_time = (int *)millis();\n  if (data[0x17] < current_time) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < argument) {\n    receive_data(data);\n    validation_result = validate_response(data);\n    if (validation_result == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        fetch_FC3(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)validation_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "process_data_0008043e",
                "param_1": "data",
                "cVar1": "result",
                "uVar2": "function_result",
                "piVar3": "current_time",
                "iVar4": "validation_result",
                "unaff_r6": "argument",
                "getRxBuffer": "receive_data",
                "validateAnswer": "validate_response",
                "get_FC3": "fetch_FC3"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "millis",
                "getRxBuffer",
                "get_FC3",
                "validateAnswer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "initialize_000804a8",
            "code": "\nundefined8 initialize_000804a8(void)\n\n{\n  int iVar1;\n  \n  setPinMode(1,0);\n  setPinMode(6,1);\n  setPinMode(0,1);\n  setPinMode(1,1);\n  writeDigital(0,0);\n  writeDigital(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_000804a8Device(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = getCurrentTime();\n  iVar1 = getCurrentTime();\n  DAT_200709e0 = iVar1 + 1000;\n  iVar1 = getCurrentTime();\n  DAT_20070a48 = iVar1 + 1000;\n  iVar1 = getCurrentTime();\n  DAT_20070934 = iVar1 + 1000;\n  iVar1 = getCurrentTime();\n  DAT_200708c0 = iVar1 + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    handleInterrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "initialize_000804a8",
                "pinMode": "setPinMode",
                "digitalWrite": "writeDigital",
                "initialize_device_00080164": "initializeDevice",
                "millis": "getCurrentTime",
                "software_interrupt": "handleInterrupt"
            },
            "calling": [
                "main"
            ],
            "called": [
                "millis",
                "pinMode",
                "digitalWrite",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "poll_and_query_000805d0",
            "code": "\n\n\nvoid pollAndQuery_000805d0(void)\n\n{\n  uint currentTime;\n  undefined4 tempVar1;\n  undefined4 tempVar2;\n  undefined4 tempVar3;\n  undefined4 tempVar4;\n  int tempVar5;\n  uint *ptrQueryResult;\n  undefined4 *ptrQueryCommand;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    currentTime = millis();\n    if (DAT_200708c8 < currentTime) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = __floatunsisf(DAT_200708d8);\n      DAT_2007094c = __floatsisf(DAT_200708da / 10);\n      DAT_200709c4 = __floatunsisf(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n    }\n    break;\n  case '\\x03':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptrQueryCommand = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      query(&DAT_200709e4,*ptrQueryCommand,ptrQueryCommand[1],ptrQueryCommand[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    poll(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptrQueryCommand = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = millis();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptrQueryResult = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptrQueryResult = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (currentTime = millis(), DAT_200708c0 < currentTime)) {\n      DAT_20070960 = DAT_20070960 + 1;\n      tempVar5 = millis();\n      DAT_200708c0 = tempVar5 + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      currentTime = millis();\n      if (DAT_200708c0 < currentTime) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar5 = millis();\n        DAT_200708c0 = tempVar5 + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptrQueryResult = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      currentTime = millis();\n      if (DAT_200708c0 < currentTime) {\n        DAT_2007090c = DAT_2007090c + 1;\n        tempVar5 = millis();\n        DAT_200708c0 = tempVar5 + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  currentTime = millis();\n  if (DAT_200709e0 < currentTime) {\n    tempVar1 = __floatsisf(DAT_20070940);\n    tempVar2 = __aeabi_fsub(tempVar1,DAT_200709c8);\n    tempVar1 = DAT_200708c4;\n    DAT_20070930 = tempVar2;\n    tempVar3 = __addsf3(tempVar2,DAT_200708c4);\n    tempVar3 = __aeabi_fmul(tempVar3,DAT_2007094c);\n    tempVar3 = __addsf3(tempVar3,DAT_20070914);\n    DAT_2007094c = tempVar3;\n    tempVar1 = __aeabi_fsub(tempVar2,tempVar1);\n    tempVar1 = __aeabi_fmul(tempVar1,DAT_200709c4);\n    tempVar1 = __aeabi_fsub(tempVar1,DAT_2007096c);\n    DAT_200709c4 = tempVar1;\n    tempVar4 = __aeabi_fmul(tempVar2,DAT_20070a4c);\n    tempVar4 = __addsf3(tempVar4,tempVar3);\n    __addsf3(tempVar4,tempVar1);\n    DAT_20070910 = __aeabi_f2iz();\n    DAT_2007091c = __floatsisf();\n    DAT_2007092c = 0;\n    DAT_200708c4 = tempVar2;\n    DAT_20070914 = tempVar3;\n    DAT_2007096c = tempVar1;\n    tempVar5 = millis();\n    DAT_200709e0 = tempVar5 + DAT_20070970;\n  }\n  tempVar1 = __floatsisf(DAT_20070970);\n  tempVar5 = __aeabi_fcmpge(DAT_2007091c,tempVar1);\n  if (tempVar5 != 0) {\n    DAT_2007091c = tempVar1;\n  }\n  tempVar5 = __aeabi_fcmple(DAT_2007091c,0);\n  if (tempVar5 != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = __fixunssfsi(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "poll_and_query_000805d0",
                "uVar1": "currentTime",
                "uVar2": "tempVar1",
                "uVar3": "tempVar2",
                "uVar4": "tempVar3",
                "uVar5": "tempVar4",
                "iVar6": "tempVar5",
                "puVar7": "ptrQueryResult",
                "puVar8": "ptrQueryCommand"
            },
            "calling": [
                "main"
            ],
            "called": [
                "millis",
                "query",
                "__aeabi_f2iz",
                "__floatunsisf",
                "__addsf3",
                "__aeabi_fcmple",
                "__aeabi_fsub",
                "__aeabi_fmul",
                "poll",
                "__floatsisf",
                "__fixunssfsi",
                "__aeabi_fcmpge"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  String(&DAT_20070954,\"\");\n  __aeabi_atexit(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "__aeabi_atexit",
                "String"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int counter;\n  int nextCounter;\n  \n  SystemInit();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  __libc_init_array();\n  counter = 0;\n  do {\n    nextCounter = counter + 1;\n    digitalWrite(counter,0);\n    counter = nextCounter;\n  } while (nextCounter != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  PIO_Configure(0x400e0e00,1,0x300,0);\n  digitalWrite(0,1);\n  PIO_Configure(0x400e0e00,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,0x3000,0);\n  PIO_Configure(0x400e1400,2,0x30,0);\n  PIO_Configure(0x400e1000,1,0xc00,0);\n  PIO_Configure(0x400e0e00,1,3,0);\n  PIO_Configure(0x400e1000,1,0xc000,0);\n  pmc_enable_periph_clk(0x25);\n  adc_init(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  adc_configure_timing(0x400c0000,0,0x300000,1);\n  adc_configure_trigger(0x400c0000,0,0);\n  adc_disable_interrupt(0x400c0000,0xffffffff);\n  adc_disable_all_channel(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "counter",
                "iVar2": "nextCounter"
            },
            "calling": [
                "main"
            ],
            "called": [
                "adc_init",
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_all_channel",
                "adc_configure_timing",
                "digitalWrite",
                "adc_disable_interrupt",
                "adc_configure_trigger",
                "__libc_init_array",
                "SystemInit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_communication_00080c0c",
            "code": "\nvoid initializeCommunication_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  createRingBuffer(&DAT_20070b84);\n  createRingBuffer(&DAT_20070ad8);\n  initializeUART(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  createRingBuffer(&DAT_20070de4);\n  createRingBuffer(&DAT_20070e6c);\n  createRingBuffer(&DAT_20070ef4);\n  createRingBuffer(&DAT_20070a50);\n  createRingBuffer(&DAT_20070c84);\n  createRingBuffer(&DAT_20070d0c);\n  initializeUSART(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initializeUSART(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initializeUSART(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_communication_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "RingBuffer": "createRingBuffer",
                "UARTClass": "initializeUART",
                "USARTClass": "initializeUSART"
            },
            "calling": [],
            "called": [
                "RingBuffer",
                "UARTClass",
                "USARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "process_serial_events_00080ce0",
            "code": "\nvoid processSerialEvents_00080ce0(void)\n\n{\n  int result;\n  \n  result = available(&DAT_20070b60);\n  if (result != 0) {\n    serialEvent();\n  }\n  result = available(&DAT_20070c0c);\n  if (result != 0) {\n    serialEvent1();\n  }\n  result = available(&DAT_20070c34);\n  if (result != 0) {\n    serialEvent2();\n  }\n  result = available(&DAT_20070c5c);\n  if (result != 0) {\n    serialEvent3();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "process_serial_events_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "serialEvent2",
                "serialEvent1",
                "available",
                "serialEvent3",
                "serialEvent"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_param_value_00080d2e",
            "code": "\nvoid updateParamValue_00080d2e(int baseAddress,undefined4 functionType,uint updatedValue)\n\n{\n  uint newParamValue;\n  \n  *(uint *)(baseAddress + 0x44) = updatedValue;\n  switch(functionType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    newParamValue = *(uint *)(baseAddress + 0x70) & *(uint *)(baseAddress + 0x70) & ~updatedValue;\n    break;\n  case 2:\n    newParamValue = *(uint *)(baseAddress + 0x70) | updatedValue;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(baseAddress + 0x70) = newParamValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(baseAddress + 4) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_param_value_00080d2e",
                "param_1": "baseAddress",
                "param_2": "functionType",
                "param_3": "updatedValue",
                "uVar1": "newParamValue"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_params_00080d54",
            "code": "\nvoid updateParams_00080d54(undefined4 *outputArray,undefined4 newValue,uint flags)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(flags << 0x1f) < 0;\n  outputArray[0x11] = newValue;\n  if (isNegative) {\n    outputArray[0x19] = newValue;\n  }\n  if (!isNegative) {\n    outputArray[0x18] = newValue;\n  }\n  isNegative = (flags & 10) != 0;\n  if (isNegative) {\n    outputArray[8] = newValue;\n  }\n  if (!isNegative) {\n    outputArray[9] = newValue;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    outputArray[0x20] = newValue;\n  }\n  outputArray[5] = newValue;\n  *outputArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_params_00080d54",
                "param_1": "outputArray",
                "param_2": "newValue",
                "param_3": "flags",
                "bVar1": "isNegative"
            },
            "calling": [
                "PIO_Configure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "assign_values_to_indices_00080d7a",
            "code": "\nvoid assignValuesToIndices_00080d7a(undefined4 *array,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  array[0x11] = value;\n  if (condition3 == 0) {\n    array[0x18] = value;\n  }\n  else {\n    array[0x19] = value;\n  }\n  if (condition2 == 0) {\n    array[0x15] = value;\n  }\n  else {\n    array[0x14] = value;\n  }\n  if (condition1 == 0) {\n    array[0xd] = value;\n  }\n  else {\n    array[0xc] = value;\n  }\n  array[4] = value;\n  *array = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "assign_values_to_indices_00080d7a",
                "param_1": "array",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "PIO_Configure",
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "configure_peripheral_00080da0",
            "code": "\nundefined4 configurePeripheral_00080da0(int deviceAddress,int peripheralType,undefined4 peripheralConfiguration,uint flags)\n\n{\n  bool isNegative;\n  \n  switch(peripheralType) {\n  case 1:\n  case 2:\n    setPeripheral(deviceAddress,peripheralType,peripheralConfiguration);\n    isNegative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(deviceAddress + 0x44) = peripheralConfiguration;\n    if (isNegative) {\n      *(undefined4 *)(deviceAddress + 100) = peripheralConfiguration;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(deviceAddress + 0x60) = peripheralConfiguration;\n    }\n    break;\n  case 3:\n    setInput(deviceAddress,peripheralConfiguration,flags,0x80d55,deviceAddress);\n    break;\n  case 4:\n  case 5:\n    setOutput(deviceAddress,peripheralConfiguration,peripheralType == 5,(flags << 0x1d) >> 0x1f,flags & 1,peripheralType,peripheralConfiguration\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "configure_peripheral_00080da0",
                "param_1": "deviceAddress",
                "param_2": "peripheralType",
                "param_3": "peripheralConfiguration",
                "param_4": "flags",
                "bVar1": "isNegative",
                "PIO_SetPeripheral": "setPeripheral",
                "PIO_SetInput": "setInput",
                "PIO_SetOutput": "setOutput"
            },
            "calling": [
                "pinMode",
                "FUN_00080ae4"
            ],
            "called": [
                "PIO_SetPeripheral",
                "PIO_SetOutput",
                "PIO_SetInput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_bitwise_intersection_00080e04",
            "code": "\nuint checkBitwiseIntersection_00080e04(int inputPtr,uint bitMask)\n\n{\n  uint result;\n  \n  result = *(uint *)(inputPtr + 8) & bitMask;\n  if (result != 0) {\n    if ((bitMask & *(uint *)(inputPtr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "inputPtr",
                "param_2": "bitMask",
                "uVar1": "result"
            },
            "calling": [
                "digitalWrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_update_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndUpdateBit_00080e18(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_update_bit_00080e18",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "init",
                "pinMode",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_memory_00080e9c",
            "code": "\n\n\nvoid initializeMemory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocationEntriesArray[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_memory_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "relocationEntriesArray"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f24": {
            "entrypoint": "0x00080f24",
            "current_name": "initialize_relocation_table_00080f24",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid initializeRelocationTable_00080f24(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  \n  for (index = 0; (undefined4 *)((int)&relocationTable[0].r_offset + index) < &DAT_2007089c\n      ; index = index + 4) {\n    *(undefined4 *)((int)&relocationTable[0].r_offset + index) =\n         *(undefined4 *)(&DAT_0008588c + index);\n  }\n  for (ptr = &DAT_2007089c; ptr < (undefined4 *)0x200711c0; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  main();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00080f24": "initialize_relocation_table_00080f24",
                "iVar1": "index",
                "puVar2": "ptr",
                "Elf32_Rel_ARRAY_20070000": "relocationTable"
            },
            "calling": [],
            "called": [
                "main"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_offset_value_00080f9c",
            "code": "\nundefined4 calculate_offset_value_00080f9c(undefined4 *output_data,uint input_value,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint offset_values [16];\n  \n  offset_values[0] = 0;\n  offset_values[1] = 8;\n  offset_values[2] = 0x10;\n  offset_values[3] = 0x18;\n  offset_values[4] = 0x40;\n  offset_values[5] = 0x50;\n  offset_values[6] = 0x60;\n  offset_values[7] = 0x70;\n  offset_values[8] = 0x200;\n  offset_values[9] = 0x240;\n  offset_values[10] = 0x280;\n  offset_values[11] = 0x2c0;\n  offset_values[12] = 0x300;\n  offset_values[13] = 0x340;\n  offset_values[14] = 0x380;\n  offset_values[15] = 0x3c0;\n  *output_data = 1;\n  output_data[1] = 0;\n  output_data[0x48] = 0x202;\n  output_data[0x41] = 0;\n  output_data[0x45] = 0;\n  quotient = input_value / (uint)(divisor * 2);\n  if (input_value == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_value / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        offset_values[index]) {\n      output_data[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_data[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_offset_value_00080f9c",
                "param_1": "output_data",
                "param_2": "input_value",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index",
                "local_58": "offset_values"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "set_flag_00081034",
            "code": "\nvoid setFlag_00081034(int baseAddress,uint value,uint flag)\n\n{\n  *(uint *)(baseAddress + 4) = value | *(uint *)(baseAddress + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "set_flag_00081034",
                "param_1": "baseAddress",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_flags_00081042",
            "code": "\nvoid updateFlags_00081042(int dataAddress,uint flag1,uint flag2,uint flag3)\n\n{\n  *(uint *)(dataAddress + 4) =\n       flag2 | *(uint *)(dataAddress + 4) | (flag1 & 0xf) << 0x18 | (flag3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_flags_00081042",
                "param_1": "dataAddress",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "flag3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_at_index_0008105c",
            "code": "\nvoid setBitAtIndex_0008105c(int arrayBaseAddr,uint bitIndex)\n\n{\n  *(int *)(arrayBaseAddr + 0x14) = 1 << (bitIndex & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_at_index_0008105c",
                "param_1": "arrayBaseAddr",
                "param_2": "bitIndex"
            },
            "calling": [
                "pinMode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_memory_00081066",
            "code": "\nvoid initializeMemory_00081066(int memoryAddress)\n\n{\n  *(undefined4 *)(memoryAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_memory_00081066",
                "param_1": "memoryAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objBaseAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(objBaseAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objBaseAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "get_initial_value_00081184",
            "code": "\nundefined4 get_initial_value_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "get_initial_value_00081184"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int inputValue)\n\n{\n  int previousValue;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousValue = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousValue;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousValue"
            },
            "calling": [
                "_sbrk_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_default_error_code_000811ae",
            "code": "\nErrorCode getDefaultErrorCode_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_default_error_code_000811ae",
                "undefined4": "ErrorCode"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "initialize_memory_000811b4",
            "code": "\nundefined4 initializeMemory_000811b4(undefined4 result,int address)\n\n{\n  *(undefined4 *)(address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "result",
                "param_2": "address"
            },
            "calling": [
                "_fstat_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "check_if_fun_enabled_000811be",
            "code": "\nundefined4 check_if_fun_enabled_000811be(void)\n\n{\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "check_if_fun_enabled_000811be"
            },
            "calling": [
                "_isatty_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "initialize_000811c2",
            "code": "\nvoid initialize_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "initialize_000811c2",
                "undefined4": "void"
            },
            "calling": [
                "_lseek_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_000811c6",
            "code": "\nundefined4 initialize_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_000811c6"
            },
            "calling": [
                "_read_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "copy_bytes_000811cc",
            "code": "\n\n\nuint copyBytes_000811cc(undefined4 param1,int source,uint numBytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)numBytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + i);\n  }\n  return numBytes & ~((int)numBytes >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "copy_bytes_000811cc",
                "param_1": "param1",
                "param_2": "source",
                "param_3": "numBytes",
                "iVar1": "i"
            },
            "calling": [
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081208": {
            "entrypoint": "0x00081208",
            "current_name": "FUN_00081208",
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {},
            "calling": [
                "loop",
                "setup",
                "sendTxBuffer",
                "poll"
            ],
            "called": [
                "GetTickCount"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "initialize_peripheral_00081210",
            "code": "\n\n\nint initializePeripheral_00081210(int channel,int mode)\n\n{\n  int result;\n  uint pinNumber;\n  undefined4 pinMode;\n  uint bitMask;\n  byte channelMode;\n  byte oldChannelMode;\n  int configOffset;\n  int pinConfiguration;\n  \n  result = channel;\n  if ((&DAT_00084d24)[channel * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[channel] & 0xf) == 4) {\n      result = adc_disable_channel(0x400c0000,(&DAT_00084d31)[channel * 0x1c]);\n    }\n    oldChannelMode = (&DAT_20070d94)[channel];\n    channelMode = oldChannelMode & 0xf;\n    if ((channelMode < 3) && (oldChannelMode != 0)) {\n      if (channelMode == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (channelMode == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (channelMode == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        result = channel * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(&DAT_00084d20 + result));\n        result = PIO_Configure(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),0);\n        oldChannelMode = (&DAT_20070d94)[channel] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = channel * 0x1c;\n        pmc_enable_periph_clk(*(undefined4 *)(&DAT_00084d20 + result));\n        result = PIO_Configure(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),1);\n        oldChannelMode = (&DAT_20070d94)[channel] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[channel] = oldChannelMode;\n      return result;\n    }\n    configOffset = channel * 0x1c;\n    pinConfiguration = *(int *)(&DAT_00084d18 + configOffset);\n    if (oldChannelMode >> 4 == 0) {\n      pinMode = 4;\n    }\n    else {\n      pinMode = 5;\n    }\n    result = PIO_Configure(pinConfiguration,pinMode,*(undefined4 *)(&DAT_00084d1c + configOffset),\n                          *(undefined4 *)(&DAT_00084d28 + configOffset));\n    (&DAT_20070d94)[channel] = (&DAT_20070d94)[channel] & 0xf0 | 3;\n    if (*(int *)(pinConfiguration + 0x18) == -1) {\n      pinNumber = *(uint *)(&DAT_00084d20 + configOffset);\n      if (0x2c < pinNumber) {\n        return 1;\n      }\n      if (pinNumber < 0x20) {\n        pinNumber = 1 << (pinNumber & 0xff);\n        bitMask = _DAT_400e0618 & pinNumber;\n        if (bitMask == pinNumber) {\n          _DAT_400e0614 = bitMask;\n        }\n      }\n      else {\n        pinNumber = 1 << (pinNumber - 0x20 & 0xff);\n        bitMask = _DAT_400e0708 & pinNumber;\n        if (bitMask == pinNumber) {\n          _DAT_400e0704 = bitMask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "initialize_peripheral_00081210",
                "param_1": "channel",
                "param_2": "mode",
                "iVar1": "result",
                "uVar2": "pinNumber",
                "uVar3": "pinMode",
                "uVar4": "bitMask",
                "bVar5": "channelMode",
                "bVar6": "oldChannelMode",
                "iVar7": "configOffset",
                "iVar8": "pinConfiguration"
            },
            "calling": [
                "setup",
                "digitalWrite",
                "FUN_00080164"
            ],
            "called": [
                "pmc_enable_periph_clk",
                "PIO_Configure",
                "adc_disable_channel"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "set_pin_mode_00081318",
            "code": "\nvoid setPinMode_00081318(int pinIndex,int mode,undefined4 param)\n\n{\n  int outputDataStatus;\n  undefined4 pinConfig;\n  int pinAddress;\n  \n  if ((&DAT_00084d24)[pinIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[pinIndex] & 0xf) == 5) {\n      pinMode(pinIndex,1,param,5,pinIndex,mode,param);\n    }\n    (&DAT_20070d94)[pinIndex] = (&DAT_20070d94)[pinIndex] & 0xf | (byte)(mode << 4);\n    pinAddress = *(int *)(&DAT_00084d18 + pinIndex * 0x1c);\n    pinConfig = *(undefined4 *)(&DAT_00084d1c + pinIndex * 0x1c);\n    outputDataStatus = PIO_GetOutputDataStatus(pinAddress,pinConfig);\n    if (outputDataStatus == 0) {\n      if (mode != 0) {\n        *(undefined4 *)(pinAddress + 100) = pinConfig;\n        return;\n      }\n      *(undefined4 *)(pinAddress + 0x60) = pinConfig;\n      return;\n    }\n    PIO_SetOutput(pinAddress,pinConfig,mode,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "set_pin_mode_00081318",
                "param_1": "pinIndex",
                "param_2": "mode",
                "param_3": "param",
                "iVar1": "outputDataStatus",
                "uVar2": "pinConfig",
                "iVar3": "pinAddress"
            },
            "calling": [
                "getRxBuffer",
                "setup",
                "FUN_00080ae4",
                "sendTxBuffer",
                "FUN_00080164"
            ],
            "called": [
                "pinMode",
                "PIO_GetOutputDataStatus",
                "PIO_SetOutput"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_r_info_is_zero_00081388",
            "code": "\nvoid execute_if_r_info_is_zero_00081388(void)\n\n{\n  if ((rel_array[6].relocation_info != 0xffffffff) &&\n     (rel_array[6].relocation_info = rel_array[6].relocation_info - 1,\n     rel_array[6].relocation_info == 0)) {\n    (*(code *)((int)&rel_array[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_r_info_is_zero_00081388",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_memory_000813a8",
            "code": "\nint initializeMemory_000813a8(int memoryBlock)\n\n{\n  clearMemory(memoryBlock,0,0x80);\n  *(fourBytes *)(memoryBlock + 0x80) = 0;\n  *(fourBytes *)(memoryBlock + 0x84) = 0;\n  return memoryBlock;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "param_1": "memoryBlock",
                "memset": "clearMemory",
                "undefined4": "fourBytes"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_param_and_check_000813c2",
            "code": "\nvoid updateParamAndCheck_000813c2(int baseAddress,undefined newValue)\n\n{\n  uint updatedIndex;\n  \n  updatedIndex = *(int *)(baseAddress + 0x80) + 1U & 0x7f;\n  if (updatedIndex != *(uint *)(baseAddress + 0x84)) {\n    *(undefined *)(baseAddress + *(int *)(baseAddress + 0x80)) = newValue;\n    *(uint *)(baseAddress + 0x80) = updatedIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_param_and_check_000813c2",
                "param_1": "baseAddress",
                "param_2": "newValue",
                "uVar1": "updatedIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "serialEventRun"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataAddress,undefined4 newValue)\n\n{\n  int dataPointer;\n  uint newValueIndex;\n  \n  dataPointer = *(int *)(dataAddress + 0x14);\n  if ((*(int *)(*(int *)(dataAddress + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(dataPointer + 0x84) == *(int *)(dataPointer + 0x80))) {\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newValueIndex = *(int *)(dataPointer + 0x80) + 1U & 0x8000007f;\n    if ((int)newValueIndex < 0) {\n      newValueIndex = (newValueIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(dataPointer + 0x84) == newValueIndex);\n    *(char *)(dataPointer + *(int *)(dataPointer + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataAddress + 0x14) + 0x80) = newValueIndex;\n    *(undefined4 *)(*(int *)(dataAddress + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataAddress",
                "param_2": "newValue",
                "iVar1": "dataPointer",
                "uVar2": "newValueIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_parameters_000814e4",
            "code": "\nvoid initializeParameters_000814e4(undefined4 *parameterList,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  parameterList[1] = 0;\n  parameterList[2] = 1000;\n  parameterList[6] = value1;\n  *parameterList = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameterList + 7) = value2;\n  parameterList[4] = value4;\n  parameterList[8] = value3;\n  parameterList[5] = value5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameterList",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "calling": [
                "USARTClass",
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_peripheral_00081508",
            "code": "\nvoid initializePeripheral_00081508(int peripheralAddress,uint parameter,undefined4 paramValue)\n\n{\n  int tempVariable1;\n  undefined4 *pointer1;\n  \n  pmc_enable_periph_clk(*(undefined4 *)(peripheralAddress + 0x20));\n  pointer1 = *(undefined4 **)(peripheralAddress + 0x18);\n  pointer1[0x48] = 0x202;\n  *pointer1 = 0xac;\n  pointer1[1] = paramValue;\n  pointer1[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / parameter >> 4;\n  pointer1[3] = 0xffffffff;\n  pointer1[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(peripheralAddress + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(peripheralAddress + 0x1c) & 0x1f);\n  tempVariable1 = *(int *)(peripheralAddress + 0x10);\n  *(undefined4 *)(tempVariable1 + 0x84) = 0;\n  *(undefined4 *)(tempVariable1 + 0x80) = 0;\n  tempVariable1 = *(int *)(peripheralAddress + 0x14);\n  *(undefined4 *)(tempVariable1 + 0x84) = 0;\n  *(undefined4 *)(tempVariable1 + 0x80) = 0;\n  *pointer1 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_peripheral_00081508",
                "param_1": "peripheralAddress",
                "param_2": "parameter",
                "param_3": "paramValue",
                "iVar1": "tempVariable1",
                "puVar2": "pointer1"
            },
            "calling": [],
            "called": [
                "pmc_enable_periph_clk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_uart_000815d4",
            "code": "\nundefined4 * initialize_UART_000815d4(undefined4 *uart_instance,undefined4 param_value)\n\n{\n  UARTClass_constructor();\n  *uart_instance = &PTR_FUN_00081454_1_000857d8;\n  uart_instance[9] = param_value;\n  return uart_instance;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_uart_000815d4",
                "param_1": "uart_instance",
                "param_2": "param_value",
                "UARTClass": "UARTClass_constructor"
            },
            "calling": [
                "_GLOBAL__sub_I_g_APinDescription"
            ],
            "called": [
                "UARTClass"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_values_000815f8",
            "code": "\nuint combineValues_000815f8(int inputValue1,uint inputValue2)\n\n{\n  return inputValue2 | inputValue1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "inputValue1",
                "param_2": "inputValue2"
            },
            "calling": [
                "get_FC3"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "free_memory_000815fe",
            "code": "\nundefined4 * freeMemory_000815fe(undefined4 *memoryPointer)\n\n{\n  free(*memoryPointer);\n  return memoryPointer;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "free_memory_000815fe",
                "param_1": "memoryPointer"
            },
            "calling": [],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_param_0008160c",
            "code": "\nvoid resetParam_0008160c(int *param)\n\n{\n  if (*param != 0) {\n    clearMemory;\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_param_0008160c",
                "param_1": "param",
                "free()": "clearMemory",
                "param_1[1]": "param[1]",
                "param_1[2]": "param[2]"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "free"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "resize_array_and_assign_00081622",
            "code": "\nint resizeArrayAndAssign_00081622(int *arrayPtr,int arrayLength,undefined4 elementSize,undefined4 previousElementSize)\n\n{\n  int newArrayPtr;\n  \n  newArrayPtr = realloc(*arrayPtr,arrayLength + 1,elementSize,previousElementSize,previousElementSize);\n  if (newArrayPtr != 0) {\n    *arrayPtr = newArrayPtr;\n    arrayPtr[1] = arrayLength;\n    newArrayPtr = 1;\n  }\n  return newArrayPtr;\n}\n\n",
            "renaming": {
                "FUN_00081622": "resize_array_and_assign_00081622",
                "param_1": "arrayPtr",
                "param_2": "arrayLength",
                "param_3": "elementSize",
                "param_4": "previousElementSize",
                "iVar1": "newArrayPtr"
            },
            "calling": [
                "reserve"
            ],
            "called": [
                "realloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_update_buffer_0008163a",
            "code": "\nundefined4 checkAndUpdateBuffer_0008163a(int *buffer,uint threshold)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < threshold)) {\n    result = changeBuffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_update_buffer_0008163a",
                "param_1": "buffer",
                "param_2": "threshold",
                "iVar1": "result"
            },
            "calling": [
                "copy"
            ],
            "called": [
                "changeBuffer"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "update_buffer_0008165c",
            "code": "\nundefined4 * updateBuffer_0008165c(undefined4 *buffer,undefined4 source,undefined4 size)\n\n{\n  int reservedSpace;\n  \n  reservedSpace = reserve(buffer,size);\n  if (reservedSpace == 0) {\n    invalidate(buffer);\n  }\n  else {\n    buffer[2] = size;\n    strcpy(*buffer,source);\n  }\n  return buffer;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "update_buffer_0008165c",
                "param_1": "buffer",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "reservedSpace"
            },
            "calling": [
                "String"
            ],
            "called": [
                "invalidate",
                "reserve",
                "strcpy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_array_00081682",
            "code": "\nundefined4 * initializeArray_00081682(undefined4 *array,int string)\n\n{\n  undefined4 stringLength;\n  \n  *array = 0;\n  array[1] = 0;\n  array[2] = 0;\n  if (string != 0) {\n    stringLength = strlen(string);\n    copy(array,string,stringLength);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_array_00081682",
                "param_1": "array",
                "param_2": "string",
                "uVar1": "stringLength"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [
                "strlen",
                "copy"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "initialize_and_run_system_000816a8",
            "code": "\nvoid initialize_and_run_system_000816a8(void)\n\n{\n  set_default_watchdog();\n  initialize_system();\n  initialize_variant();\n  short_delay(1);\n  setup_system();\n  do {\n    run_loop();\n    process_serial_events();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "initialize_and_run_system_000816a8",
                "_watchdogDefaultSetup": "set_default_watchdog",
                "initialize_system_00080ae4": "initialize_system",
                "initVariant": "initialize_variant",
                "delay": "short_delay",
                "setup": "setup_system",
                "loop": "run_loop",
                "serialEventRun": "process_serial_events"
            },
            "calling": [
                "Reset_Handler"
            ],
            "called": [
                "loop",
                "delay",
                "FUN_00080ae4",
                "setup",
                "initVariant",
                "_watchdogDefaultSetup",
                "serialEventRun"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_memory_000816d4",
            "code": "\n\n\nvoid initializeMemory_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_memory_000816d4"
            },
            "calling": [
                "main"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_global_variable_value_00081714",
            "code": "\nundefined4 getGlobalVariableValue_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_global_variable_value_00081714"
            },
            "calling": [
                "millis"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_00081730",
            "code": "\nuint calculateFloatingPoint_00081730(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shiftedInput1MSB;\n  int shiftedInput2MSB;\n  uint xorResult;\n  uint shiftedInput1;\n  uint leftShiftResult;\n  uint uVar6;\n  uint uVar7;\n  bool isEqual;\n  \n  xorResult = input2 ^ 0x80000000;\n  leftShiftResult = input1 << 1;\n  isEqual = leftShiftResult == 0;\n  if (!isEqual) {\n    param4 = input2 << 1;\n    isEqual = param4 == 0;\n  }\n  if (!isEqual) {\n    isEqual = leftShiftResult == param4;\n  }\n  shiftedInput1MSB = (int)leftShiftResult >> 0x18;\n  if (!isEqual) {\n    isEqual = shiftedInput1MSB == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)param4 >> 0x18 == -1;\n  }\n  if (isEqual) {\n    shiftedInput2MSB = (int)(input2 << 1) >> 0x18;\n    if (shiftedInput1MSB == -1 || shiftedInput2MSB == -1) {\n      leftShiftResult = xorResult;\n      if (shiftedInput1MSB == -1) {\n        leftShiftResult = input1;\n      }\n      if (shiftedInput1MSB != -1 || shiftedInput2MSB != -1) {\n        xorResult = leftShiftResult;\n      }\n      isEqual = (leftShiftResult & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (xorResult & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = leftShiftResult == xorResult;\n      }\n      if (!isEqual) {\n        leftShiftResult = leftShiftResult | 0x400000;\n      }\n      return leftShiftResult;\n    }\n    if (((input1 ^ xorResult) & 0x7fffffff) != 0) {\n      if (leftShiftResult == 0) {\n        input1 = xorResult;\n      }\n      return input1;\n    }\n    if (input1 != xorResult) {\n      return 0;\n    }\n    if ((leftShiftResult & 0xff000000) == 0) {\n      xorResult = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        xorResult = xorResult | 0x80000000;\n      }\n      return xorResult;\n    }\n    if (leftShiftResult < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  leftShiftResult = leftShiftResult >> 0x18;\n  param4 = param4 >> 0x18;\n  uVar7 = param4 - leftShiftResult;\n  isEqual = uVar7 != 0;\n  uVar6 = leftShiftResult;\n  if (isEqual && leftShiftResult <= param4) {\n    uVar6 = leftShiftResult + uVar7;\n  }\n  if (isEqual && leftShiftResult <= param4) {\n    xorResult = xorResult ^ input1;\n  }\n  if (isEqual && leftShiftResult <= param4) {\n    input1 = input1 ^ xorResult;\n  }\n  if (isEqual && leftShiftResult <= param4) {\n    xorResult = xorResult ^ input1;\n  }\n  if (param4 < leftShiftResult) {\n    uVar7 = -uVar7;\n  }\n  if (0x19 < uVar7) {\n    return input1;\n  }\n  leftShiftResult = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    leftShiftResult = -leftShiftResult;\n  }\n  shiftedInput1 = xorResult & 0xffffff | 0x800000;\n  if ((xorResult & 0x80000000) != 0) {\n    shiftedInput1 = -shiftedInput1;\n  }\n  if (uVar6 == uVar7) {\n    shiftedInput1 = shiftedInput1 ^ 0x800000;\n    if (uVar6 == 0) {\n      leftShiftResult = leftShiftResult ^ 0x800000;\n      uVar6 = 1;\n    }\n    else {\n      uVar7 = uVar7 - 1;\n    }\n  }\n  leftShiftResult = leftShiftResult + ((int)shiftedInput1 >> (uVar7 & 0xff));\n  shiftedInput1 = shiftedInput1 << (0x20 - uVar7 & 0xff);\n  input1 = leftShiftResult & 0x80000000;\n  if ((int)leftShiftResult < 0) {\n    isEqual = shiftedInput1 != 0;\n    shiftedInput1 = -shiftedInput1;\n    leftShiftResult = -leftShiftResult - (uint)isEqual;\n  }\n  if (leftShiftResult < 0x800000) {\n    xorResult = shiftedInput1 & 0x80000000;\n    shiftedInput1 = shiftedInput1 << 1;\n    leftShiftResult = leftShiftResult * 2 + (uint)(xorResult != 0);\n    xorResult = uVar6 - 2;\n    if ((leftShiftResult & 0x800000) == 0) {\n      uVar7 = LZCOUNT(leftShiftResult) - 8;\n      leftShiftResult = leftShiftResult << (uVar7 & 0xff);\n      if ((int)xorResult < (int)uVar7) {\n        leftShiftResult = leftShiftResult >> (-(xorResult - uVar7) & 0xff);\n      }\n      else {\n        leftShiftResult = leftShiftResult + (xorResult - uVar7) * 0x800000;\n      }\n      return leftShiftResult | input1;\n    }\n  }\n  else {\n    xorResult = uVar6 - 1;\n    if (0xffffff < leftShiftResult) {\n      xorResult = leftShiftResult & 1;\n      leftShiftResult = leftShiftResult >> 1;\n      shiftedInput1 = (uint)(xorResult != 0) << 0x1f | shiftedInput1 >> 1;\n      xorResult = uVar6;\n      if (0xfd < uVar6) goto LAB_0008186a;\n    }\n  }\n  leftShiftResult = leftShiftResult + xorResult * 0x800000 + (uint)(0x7fffffff < shiftedInput1);\n  if (shiftedInput1 == 0x80000000) {\n    leftShiftResult = leftShiftResult & 0xfffffffe;\n  }\n  return leftShiftResult | input1;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "xorResult",
                "uVar4": "shiftedInput1",
                "uVar5": "leftShiftResult",
                "bVar8": "isEqual",
                "iVar1": "shiftedInput1MSB",
                "iVar2": "shiftedInput2MSB"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_00081734",
            "code": "\nuint calculateFloatingPoint_00081734(uint input1,uint input2,undefined4 roundingMode,uint exceptionFlags)\n\n{\n  int bitShift1;\n  int bitShift2;\n  uint result1;\n  uint temp1;\n  uint temp2;\n  uint difference;\n  bool isEqual;\n  \n  temp1 = input1 << 1;\n  isEqual = temp1 == 0;\n  if (!isEqual) {\n    exceptionFlags = input2 << 1;\n    isEqual = exceptionFlags == 0;\n  }\n  if (!isEqual) {\n    isEqual = temp1 == exceptionFlags;\n  }\n  bitShift1 = (int)temp1 >> 0x18;\n  if (!isEqual) {\n    isEqual = bitShift1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)exceptionFlags >> 0x18 == -1;\n  }\n  if (isEqual) {\n    bitShift2 = (int)(input2 << 1) >> 0x18;\n    if (bitShift1 == -1 || bitShift2 == -1) {\n      temp1 = input2;\n      if (bitShift1 == -1) {\n        temp1 = input1;\n      }\n      if (bitShift1 != -1 || bitShift2 != -1) {\n        input2 = temp1;\n      }\n      isEqual = (temp1 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (input2 & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = temp1 == input2;\n      }\n      if (!isEqual) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  exceptionFlags = exceptionFlags >> 0x18;\n  difference = exceptionFlags - temp1;\n  isEqual = difference != 0;\n  temp2 = temp1;\n  if (isEqual && temp1 <= exceptionFlags) {\n    temp2 = temp1 + difference;\n  }\n  if (isEqual && temp1 <= exceptionFlags) {\n    input2 = input2 ^ input1;\n  }\n  if (isEqual && temp1 <= exceptionFlags) {\n    input1 = input1 ^ input2;\n  }\n  if (isEqual && temp1 <= exceptionFlags) {\n    input2 = input2 ^ input1;\n  }\n  if (exceptionFlags < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp2 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    isEqual = result1 != 0;\n    result1 = -result1;\n    temp1 = -temp1 - (uint)isEqual;\n  }\n  if (temp1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    temp1 = temp1 * 2 + (uint)(difference != 0);\n    difference = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp2 = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)difference < (int)temp2) {\n        temp1 = temp1 >> (-(difference - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (difference - temp2) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    difference = temp2 - 1;\n    if (0xffffff < temp1) {\n      difference = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  temp1 = temp1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_00081734",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "roundingMode",
                "param_4": "exceptionFlags",
                "iVar1": "bitShift1",
                "iVar2": "bitShift2",
                "uVar3": "result1",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "difference",
                "bVar7": "isEqual"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_checksum_00081894",
            "code": "\nuint calculateChecksum_00081894(uint input)\n\n{\n  uint count;\n  uint shift;\n  int offset;\n  uint result;\n  \n  if (input == 0) {\n    return 0;\n  }\n  count = LZCOUNT(input);\n  shift = count - 8;\n  offset = shift * -0x800000 + 0x4a800000;\n  if (7 < count) {\n    result = 0 << (shift & 0xff);\n    count = offset + (input << (shift & 0xff)) +\n            (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < result);\n    if (result == 0x80000000) {\n      count = count & 0xfffffffe;\n    }\n    return count;\n  }\n  shift = input << count + 0x18;\n  count = offset + ((input >> (0x20 - (count + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n  if ((shift & 0x7fffffff) == 0) {\n    count = count & ~(shift >> 0x1f);\n  }\n  return count;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_checksum_00081894",
                "param_1": "input",
                "uVar1": "count",
                "uVar2": "shift",
                "iVar3": "offset",
                "uVar4": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_unsigned_0008189c",
            "code": "\nuint calculateUnsigned_0008189c(uint input)\n\n{\n  uint leadingZeros;\n  uint shiftAmount;\n  uint signBit;\n  int result;\n  \n  signBit = input & 0x80000000;\n  if ((int)signBit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leadingZeros = countLeadingZeros(input);\n  shiftAmount = leadingZeros - 8;\n  result = ((signBit | 0x4b000000) - 0x800000) + shiftAmount * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftAmount & 0xff);\n    signBit = result + (input << (shiftAmount & 0xff)) +\n            (0U >> (0x20 - shiftAmount & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftAmount = input << leadingZeros + 0x18;\n  signBit = result + ((input >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftAmount >> 0x1f));\n  if ((shiftAmount & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftAmount >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_unsigned_0008189c",
                "param_1": "input",
                "uVar1": "leadingZeros",
                "uVar2": "shiftAmount",
                "uVar3": "signBit",
                "iVar4": "result",
                "LZCOUNT(param_1)": "countLeadingZeros(input)"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "calculate_floating_point_sum_00081944",
            "code": "\nuint calculateFloatingPointSum_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong result1;\n  uint result2;\n  uint bitShift1;\n  int sum1;\n  int sum2;\n  uint mulResult;\n  int difference;\n  uint result3;\n  bool isZero;\n  bool isCarry;\n  \n  bitShift1 = input1 >> 0x17 & 0xff;\n  isZero = bitShift1 == 0;\n  if (!isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    isZero = param4 == 0;\n  }\n  if (!isZero) {\n    isZero = bitShift1 == 0xff;\n  }\n  if (!isZero) {\n    isZero = param4 == 0xff;\n  }\n  if (isZero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (bitShift1 == 0xff || param4 == 0xff) {\n      isZero = input1 == 0 || input1 == 0x80000000;\n      result2 = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        isZero = input2 == 0;\n        result2 = input1;\n      }\n      if (!isZero) {\n        isZero = input2 == 0x80000000;\n      }\n      result3 = result2;\n      if (((isZero) || ((bitShift1 == 0xff && ((result2 & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (result3 = input2, (input2 & 0x7fffff) != 0)))) {\n        return result3 | 0x7fc00000;\n      }\n      result2 = result2 ^ input2;\n      goto LAB_00081a94;\n    }\n    isZero = (input1 & 0x7fffffff) == 0;\n    if (!isZero) {\n      isZero = (input2 & 0x7fffffff) == 0;\n    }\n    if (isZero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    isZero = bitShift1 == 0;\n    result2 = input1 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input1 = input1 << 1;\n        isZero = (input1 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      bitShift1 = bitShift1 - 1;\n    }\n    input1 = input1 | result2;\n    isZero = param4 == 0;\n    result2 = input2 & 0x80000000;\n    while( true ) {\n      if (isZero) {\n        input2 = input2 << 1;\n        isZero = (input2 & 0x800000) == 0;\n      }\n      if (!isZero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result2;\n  }\n  sum1 = bitShift1 + param4;\n  result3 = input1 ^ input2;\n  bitShift1 = input1 << 9;\n  isZero = bitShift1 == 0;\n  if (!isZero) {\n    input2 = input2 << 9;\n    isZero = input2 == 0;\n  }\n  if (isZero) {\n    if (bitShift1 == 0) {\n      input2 = input2 << 9;\n    }\n    result2 = result3 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    isCarry = SBORROW4(sum1,0x7f);\n    sum2 = sum1 + -0x7f;\n    isZero = sum2 == 0;\n    difference = sum2;\n    if (!isZero && 0x7e < sum1) {\n      isCarry = SBORROW4(0xff,sum2);\n      difference = 0xff - sum2;\n      isZero = sum2 == 0xff;\n    }\n    if (!isZero && difference < 0 == isCarry) {\n      result2 = result2 | sum2 * 0x800000;\n    }\n    if (!isZero && difference < 0 == isCarry) {\n      return result2;\n    }\n    result2 = result2 | 0x800000;\n    mulResult = 0;\n    isCarry = SBORROW4(sum2,1);\n    result3 = sum1 - 0x80;\n    isZero = result3 == 0;\n    bitShift1 = result3;\n  }\n  else {\n    result1 = (ulonglong)(bitShift1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    mulResult = (uint)result1;\n    result2 = (uint)((ulonglong)result1 >> 0x20);\n    isZero = result2 < 0x800000;\n    if (isZero) {\n      result2 = result2 << 1;\n    }\n    if (isZero) {\n      result2 = result2 | mulResult >> 0x1f;\n      mulResult = mulResult << 1;\n    }\n    result2 = result3 & 0x80000000 | result2;\n    result3 = (sum1 + -0x7f) - (uint)isZero;\n    isCarry = SBORROW4(result3,0xfd);\n    isZero = result3 == 0xfd;\n    bitShift1 = result3 - 0xfd;\n    if (result3 < 0xfe) {\n      result2 = result2 + result3 * 0x800000 + (uint)(0x7fffffff < mulResult);\n      if (mulResult == 0x80000000) {\n        result2 = result2 & 0xfffffffe;\n      }\n      return result2;\n    }\n  }\n  if (isZero || (int)bitShift1 < 0 != isCarry) {\n    isZero = (int)(result3 + 0x19) < 0;\n    if (result3 == 0xffffffe7 || isZero != SCARRY4(result3,0x19)) {\n      result2 = result2 & 0x80000000;\n    }\n    if (result3 != 0xffffffe7 && isZero == SCARRY4(result3,0x19)) {\n      bitShift1 = (result2 << 1) >> (-result3 & 0xff);\n      result3 = result2 << (result3 + 0x20 & 0xff);\n      bitShift1 = ((uint)((result2 & 0x80000000) != 0) << 0x1f | bitShift1 >> 1) + (uint)((byte)bitShift1 & 1);\n      if ((mulResult | result3 << 1) == 0) {\n        bitShift1 = bitShift1 & ~(result3 >> 0x1f);\n      }\n      return bitShift1;\n    }\n    return result2;\n  }\nLAB_00081a94:\n  return result2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "calculate_floating_point_sum_00081944",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "result1",
                "uVar2": "result2",
                "uVar3": "bitShift1",
                "iVar4": "sum1",
                "iVar5": "sum2",
                "uVar6": "mulResult",
                "iVar7": "difference",
                "uVar8": "result3",
                "bVar9": "isZero",
                "bVar10": "isCarry"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "verify_input_00081bf4",
            "code": "\nuint verify_input_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative_result;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_inputs;\n  bool is_zero_result;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero_result = combined_inputs == 0;\n  if (!is_zero_result) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero_result = combined_inputs == 0;\n  }\n  is_negative_result = -1 < (int)combined_inputs;\n  if (is_negative_result) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero_result = input_1 == 0;\n  }\n  if ((is_negative_result && input_2_times_2 <= input_1_times_2) && !is_zero_result) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative_result || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero_result) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "verify_input_00081bf4",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative_result",
                "bVar5": "is_zero_result"
            },
            "calling": [
                "__aeabi_cfcmpeq"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "compare_floats_00081c54",
            "code": "\nvoid compareFloats_00081c54(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "compare_floats_00081c54",
                "param_1": "float1",
                "param_2": "float2"
            },
            "calling": [
                "__aeabi_fcmpge"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_and_convert_parameters_00081c5c",
            "code": "\nundefined8 concatenateAndConvertParameters_00081c5c(undefined4 value1,undefined4 value2)\n\n{\n  __cmpsf2();\n  return CONCAT44(value2,value1);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_and_convert_parameters_00081c5c",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "__aeabi_cfrcmple",
                "__aeabi_fcmple"
            ],
            "called": [
                "__cmpsf2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_equality_or_zero_00081c94",
            "code": "\nbool check_equality_or_zero_00081c94(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_equality_or_zero_00081c94",
                "in_ZR": "is_zero_result",
                "in_CY": "is_carry_set"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfcmpeq"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_comparison_result_00081ca8",
            "code": "\nbool checkComparisonResult_00081ca8(void)\n\n{\n  undefined isZeroResult;\n  undefined isCarryFlagSet;\n  \n  __aeabi_cfrcmple();\n  return !(bool)isCarryFlagSet || (bool)isZeroResult;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_comparison_result_00081ca8",
                "in_ZR": "isZeroResult",
                "in_CY": "isCarryFlagSet"
            },
            "calling": [
                "loop"
            ],
            "called": [
                "__aeabi_cfrcmple"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "extracted_value_00081cd0",
            "code": "\nuint extractedValue_00081cd0(uint inputValue)\n\n{\n  uint computedValue;\n  uint constant;\n  \n  if (inputValue << 1 < 0x7f000000) {\n    return 0;\n  }\n  computedValue = (inputValue << 1) >> 0x18;\n  constant = 0x9e - computedValue;\n  if (computedValue < 0x9f && constant != 0) {\n    computedValue = (inputValue << 8 | 0x80000000) >> (constant & 0xff);\n    if ((inputValue & 0x80000000) != 0) {\n      computedValue = -computedValue;\n    }\n    return computedValue;\n  }\n  if ((constant == 0xffffff9f) && ((inputValue & 0x7fffff) != 0)) {\n    return 0;\n  }\n  inputValue = inputValue & 0x80000000;\n  if (inputValue == 0) {\n    inputValue = 0x7fffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "extracted_value_00081cd0",
                "param_1": "inputValue",
                "uVar1": "computedValue",
                "uVar2": "constant"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "validate_and_shift_param_00081d1c",
            "code": "\nuint validateAndShiftParam_00081d1c(uint inputParam)\n\n{\n  uint result;\n  \n  if (((inputParam & 0x80000000) != 0) || (inputParam << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((inputParam << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (inputParam << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((inputParam & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "validate_and_shift_param_00081d1c",
                "param_1": "inputParam",
                "uVar1": "result"
            },
            "calling": [
                "loop"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "initialize_memory_mapping_00081d5c",
            "code": "\nundefined4 initializeMemoryMapping_00081d5c(dword dataAddress,dword memoryAddress,dword value)\n\n{\n  dword *memoryMapping;\n  uint index;\n  uint bitMask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  memoryMapping = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    memoryMapping = (dword *)malloc(400);\n    if (memoryMapping == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *memoryMapping = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    memoryMapping[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)memoryMapping;\n    memoryMapping[0x62] = 0;\n    memoryMapping[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  memoryMapping[index + 0x22] = dataAddress;\n  memoryMapping[0x62] = memoryMapping[0x62] | bitMask;\n  memoryMapping[index + 0x42] = value;\n  memoryMapping[99] = bitMask | memoryMapping[99];\n  memoryMapping[1] = index + 1;\n  memoryMapping[index + 2] = memoryAddress;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "initialize_memory_mapping_00081d5c",
                "param_1": "dataAddress",
                "param_2": "memoryAddress",
                "param_3": "value",
                "pdVar1": "memoryMapping",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "_GLOBAL__sub_I__ZN6ModbusC2Ev"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_initialization_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeInitialization_00081d7c(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  _init();\n  functionPointerArray = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointerArray = functionPointerArray + 1;\n    (**functionPointerArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_initialization_00081d7c",
                "ppcVar2": "functionPointerArray",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "register_fini",
                "frame_dummy",
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "allocate_memory_00081df4",
            "code": "\nvoid allocateMemory_00081df4(undefined4 size)\n\n{\n  _malloc_r(memoryOffset,size);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "allocate_memory_00081df4",
                "param_1": "size",
                "Elf32_Rel_ARRAY_20070000[140].r_offset": "memoryOffset"
            },
            "calling": [
                "register_fini"
            ],
            "called": [
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "free_rel_offset_00081e04",
            "code": "\nvoid free_rel_offset_00081e04(undefined4 offset)\n\n{\n  _free_r(rel_array[140].r_offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "free_rel_offset_00081e04",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_20070000": "rel_array"
            },
            "calling": [
                "invalidate",
                "~String"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_block_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_00081e14(undefined4 *param,uint size)\n\n{\n  dword index;\n  int prevBlockIndex;\n  uint blockSize;\n  uint adjustedSize;\n  int blockIndex;\n  uint remainingSize;\n  dword currentBlockIndex;\n  uint newBlockSize;\n  int nextBlockIndex;\n  undefined *iterator;\n  dword foundBlockIndex;\n  dword previousBlockIndex;\n  int bucketIndex;\n  dword *currentBucket;\n  uint bucketSize;\n  undefined *newBlock;\n  dword *nextBucket;\n  uint adjustedBucketSize;\n  \n  if (size + 0xb < 0x17) {\n    bucketSize = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    bucketSize = size + 0xb & 0xfffffff8;\n    if (((int)bucketSize < 0) || (bucketSize < size)) {\nLAB_00081e7a:\n      *param = 0xc;\n      return (int *)0x0;\n    }\n  }\n  __malloc_lock(param);\n  index = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (bucketSize < 0x1f8) {\n    bucketIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + bucketSize);\n    if ((bucketIndex != bucketSize + 0x20070464) ||\n       (prevBlockIndex = bucketIndex + 8, bucketIndex = *(int *)(bucketIndex + 0x14), prevBlockIndex != bucketIndex)) {\n      blockIndex = *(int *)(bucketIndex + 0xc);\n      nextBlockIndex = (*(uint *)(bucketIndex + 4) & 0xfffffffc) + bucketIndex;\n      bucketSize = *(uint *)(nextBlockIndex + 4);\n      prevBlockIndex = *(int *)(bucketIndex + 8);\n      *(int *)(prevBlockIndex + 0xc) = blockIndex;\n      *(int *)(blockIndex + 8) = prevBlockIndex;\n      *(uint *)(nextBlockIndex + 4) = bucketSize | 1;\n      __malloc_unlock(param);\n      return (int *)(bucketIndex + 8);\n    }\n    adjustedBucketSize = (bucketSize >> 3) + 2;\n  }\n  else {\n    adjustedBucketSize = bucketSize >> 9;\n    if (adjustedBucketSize == 0) {\n      prevBlockIndex = 0x7e;\n      bucketIndex = 0x3f;\n    }\n    else if (adjustedBucketSize < 5) {\n      bucketIndex = (bucketSize >> 6) + 0x38;\n      prevBlockIndex = bucketIndex * 2;\n    }\n    else if (adjustedBucketSize < 0x15) {\n      bucketIndex = adjustedBucketSize + 0x5b;\n      prevBlockIndex = bucketIndex * 2;\n    }\n    else if (adjustedBucketSize < 0x55) {\n      bucketIndex = (bucketSize >> 0xc) + 0x6e;\n      prevBlockIndex = bucketIndex * 2;\n    }\n    else if (adjustedBucketSize < 0x155) {\n      bucketIndex = (bucketSize >> 0xf) + 0x77;\n      prevBlockIndex = bucketIndex * 2;\n    }\n    else if (adjustedBucketSize < 0x555) {\n      bucketIndex = (bucketSize >> 0x12) + 0x7c;\n      prevBlockIndex = bucketIndex * 2;\n    }\n    else {\n      prevBlockIndex = 0xfc;\n      bucketIndex = 0x7e;\n    }\n    for (currentBlockIndex = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[prevBlockIndex]; prevBlockIndex * 4 + 0x20070464U != currentBlockIndex\n        ; currentBlockIndex = *(dword *)(currentBlockIndex + 0xc)) {\n      adjustedBucketSize = *(uint *)(currentBlockIndex + 4) & 0xfffffffc;\n      blockIndex = adjustedBucketSize - bucketSize;\n      if (0xf < blockIndex) {\n        bucketIndex = bucketIndex + -1;\n        break;\n      }\n      if (-1 < blockIndex) {\n        prevBlockIndex = adjustedBucketSize + currentBlockIndex;\n        bucketSize = *(uint *)(prevBlockIndex + 4);\n        blockIndex = *(int *)(currentBlockIndex + 0xc);\n        bucketIndex = *(int *)(currentBlockIndex + 8);\n        *(int *)(bucketIndex + 0xc) = blockIndex;\n        *(int *)(blockIndex + 8) = bucketIndex;\n        *(uint *)(prevBlockIndex + 4) = bucketSize | 1;\n        __malloc_unlock(param);\n        return (int *)(currentBlockIndex + 8);\n      }\n    }\n    adjustedBucketSize = bucketIndex + 1;\n  }\n  currentBlockIndex = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    blockSize = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    adjustedSize = blockSize & 0xfffffffc;\n    remainingSize = adjustedSize - bucketSize;\n    if (0xf < (int)remainingSize) {\n      currentBlockIndex = bucketSize + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = bucketSize | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = currentBlockIndex;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = currentBlockIndex;\n      *(undefined4 *)(currentBlockIndex + 0xc) = 0x2007046c;\n      *(undefined4 *)(currentBlockIndex + 8) = 0x2007046c;\n      *(uint *)(currentBlockIndex + 4) = remainingSize | 1;\n      *(uint *)(currentBlockIndex + remainingSize) = remainingSize;\n      __malloc_unlock(param);\n      return (int *)(index + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)remainingSize) {\n      *(uint *)(adjustedSize + index + 4) = *(uint *)(adjustedSize + index + 4) | 1;\n      __malloc_unlock(param);\n      return (int *)(index + 8);\n    }\n    if (adjustedSize < 0x200) {\n      adjustedSize = blockSize & 0xfffffff8;\n      bucketIndex = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjustedSize);\n      currentBlockIndex = 1 << ((int)(blockSize >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(index + 8) = bucketIndex;\n      *(uint *)(index + 0xc) = adjustedSize + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = currentBlockIndex;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + adjustedSize) = index;\n      *(dword *)(bucketIndex + 0xc) = index;\n    }\n    else {\n      remainingSize = blockSize >> 9;\n      if (remainingSize < 5) {\n        prevBlockIndex = (blockSize >> 6) + 0x38;\n        bucketIndex = prevBlockIndex * 2;\n      }\n      else if (remainingSize < 0x15) {\n        prevBlockIndex = remainingSize + 0x5b;\n        bucketIndex = prevBlockIndex * 2;\n      }\n      else if (remainingSize < 0x55) {\n        prevBlockIndex = (blockSize >> 0xc) + 0x6e;\n        bucketIndex = prevBlockIndex * 2;\n      }\n      else if (remainingSize < 0x155) {\n        prevBlockIndex = (blockSize >> 0xf) + 0x77;\n        bucketIndex = prevBlockIndex * 2;\n      }\n      else if (remainingSize < 0x555) {\n        prevBlockIndex = (blockSize >> 0x12) + 0x7c;\n        bucketIndex = prevBlockIndex * 2;\n      }\n      else {\n        bucketIndex = 0xfc;\n        prevBlockIndex = 0x7e;\n      }\n      currentBlockIndex = bucketIndex * 4 + 0x20070464;\n      foundBlockIndex = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[bucketIndex];\n      if (foundBlockIndex == currentBlockIndex) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (prevBlockIndex >> 2 & 0xffU);\n        previousBlockIndex = foundBlockIndex;\n      }\n      else {\n        do {\n          previousBlockIndex = foundBlockIndex;\n          if ((*(uint *)(foundBlockIndex + 4) & 0xfffffffc) <= adjustedSize) break;\n          foundBlockIndex = *(dword *)(foundBlockIndex + 8);\n          previousBlockIndex = foundBlockIndex;\n        } while (currentBlockIndex != foundBlockIndex);\n        foundBlockIndex = *(dword *)(previousBlockIndex + 0xc);\n      }\n      currentBlockIndex = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(index + 0xc) = foundBlockIndex;\n      *(dword *)(index + 8) = previousBlockIndex;\n      *(dword *)(foundBlockIndex + 8) = index;\n      *(dword *)(previousBlockIndex + 0xc) = index;\n    }\n  }\n  index = Elf32_Rel_ARRAY_20070000[141].r_info;\n  blockSize = 1 << ((int)adjustedBucketSize >> 2 & 0xffU);\n  if (blockSize <= currentBlockIndex) {\n    if ((currentBlockIndex & blockSize) == 0) {\n      adjustedBucketSize = adjustedBucketSize & 0xfffffffc;\n      do {\n        blockSize = blockSize << 1;\n        adjustedBucketSize = adjustedBucketSize + 4;\n      } while ((currentBlockIndex & blockSize) == 0);\n    }\n    do {\n      nextBucket = &Elf32_Rel_ARRAY_20070000[adjustedBucketSize + 0x8c].r_info;\n      currentBucket = nextBucket;\n      adjustedSize = adjustedBucketSize;\n      do {\n        for (iterator = (undefined *)currentBucket[3]; currentBucket != (dword *)iterator;\n            iterator = *(undefined **)(iterator + 0xc)) {\n          remainingSize = *(uint *)(iterator + 4) & 0xfffffffc;\n          newBlockSize = remainingSize - bucketSize;\n          if (0xf < (int)newBlockSize) {\n            prevBlockIndex = *(int *)(iterator + 8);\n            bucketIndex = *(int *)(iterator + 0xc);\n            newBlock = iterator + bucketSize;\n            *(uint *)(iterator + 4) = bucketSize | 1;\n            *(int *)(prevBlockIndex + 0xc) = bucketIndex;\n            *(int *)(bucketIndex + 8) = prevBlockIndex;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)newBlock;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)newBlock;\n            *(undefined4 *)(newBlock + 0xc) = 0x2007046c;\n            *(undefined4 *)(newBlock + 8) = 0x2007046c;\n            *(uint *)(newBlock + 4) = newBlockSize | 1;\n            *(uint *)(newBlock + newBlockSize) = newBlockSize;\n            __malloc_unlock(param);\n            return (int *)(iterator + 8);\n          }\n          if (-1 < (int)newBlockSize) {\n            bucketIndex = *(int *)(iterator + 8);\n            prevBlockIndex = *(int *)(iterator + 0xc);\n            *(uint *)(iterator + remainingSize + 4) = *(uint *)(iterator + remainingSize + 4) | 1;\n            *(int *)(bucketIndex + 0xc) = prevBlockIndex;\n            *(int *)(prevBlockIndex + 8) = bucketIndex;\n            __malloc_unlock(param);\n            return (int *)(iterator + 8);\n          }\n        }\n        adjustedSize = adjustedSize + 1;\n        currentBucket = currentBucket + 2;\n      } while ((adjustedSize & 3) != 0);\n      do {\n        remainingSize = adjustedBucketSize & 3;\n        iterator = (undefined *)(nextBucket + -2);\n        adjustedBucketSize = adjustedBucketSize - 1;\n        if (remainingSize == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~blockSize;\n          break;\n        }\n        nextBucket = (dword *)*nextBucket;\n      } while (nextBucket == (dword *)iterator);\n      blockSize = blockSize * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= blockSize &&\n           blockSize - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (adjustedBucketSize = adjustedSize, blockSize == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & blockSize) == 0; blockSize = blockSize << 1) {\n        adjustedBucketSize = adjustedBucketSize + 4;\n      }\n    } while( true );\n  }\n  adjustedBucketSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((bucketSize <= adjustedBucketSize) &&\n     (blockSize = adjustedBucketSize - bucketSize, currentBlockIndex = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)blockSize))\n  goto LAB_0008211e;\n  blockSize = Elf32_Rel_ARRAY_20070000[141].r_info + adjustedBucketSize;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    adjustedSize = bucketSize + DAT_20071190 + 0x10;\n  }\n  else {\n    adjustedSize = bucketSize + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  currentBlockIndex = _sbrk_r(param,adjustedSize);\n  if ((currentBlockIndex == 0xffffffff) || ((currentBlockIndex < blockSize && (index != 0x20070464)))) {\n    adjustedBucketSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentBlockIndex = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    remainingSize = DAT_20071194 + adjustedSize;\n    DAT_20071194 = remainingSize;\n    if ((blockSize == currentBlockIndex) && ((blockSize & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = adjustedSize + adjustedBucketSize | 1;\n    }\n    else {\n      foundBlockIndex = currentBlockIndex;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        foundBlockIndex = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = remainingSize + (currentBlockIndex - blockSize);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = foundBlockIndex;\n      blockSize = currentBlockIndex & 7;\n      if (blockSize == 0) {\n        bucketIndex = 0x1000;\n      }\n      else {\n        currentBlockIndex = currentBlockIndex + (8 - blockSize);\n        bucketIndex = 0x1008 - blockSize;\n      }\n      bucketIndex = bucketIndex - (adjustedSize + currentBlockIndex & 0xfff);\n      prevBlockIndex = _sbrk_r(param,bucketIndex);\n      if (prevBlockIndex == -1) {\n        blockSize = 1;\n        bucketIndex = 0;\n      }\n      else {\n        blockSize = (prevBlockIndex - currentBlockIndex) + bucketIndex | 1;\n      }\n      remainingSize = DAT_20071194 + bucketIndex;\n      Elf32_Rel_ARRAY_20070000[141].r_info = currentBlockIndex;\n      DAT_20071194 = remainingSize;\n      *(uint *)(currentBlockIndex + 4) = blockSize;\n      if (index != 0x20070464) {\n        if (adjustedBucketSize < 0x10) {\n          *(undefined4 *)(currentBlockIndex + 4) = 1;\n          adjustedBucketSize = 0;\n          goto LAB_00082108;\n        }\n        adjustedBucketSize = adjustedBucketSize - 0xc & 0xfffffff8;\n        *(uint *)(index + 4) = adjustedBucketSize | *(uint *)(index + 4) & 1;\n        *(undefined4 *)(index + adjustedBucketSize + 4) = 5;\n        *(undefined4 *)(index + adjustedBucketSize + 8) = 5;\n        if (0xf < adjustedBucketSize) {\n          _free_r(param,index + 8);\n          remainingSize = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < remainingSize) {\n      DAT_2007118c = remainingSize;\n    }\n    if (DAT_20071188 < remainingSize) {\n      DAT_20071188 = remainingSize;\n    }\n    adjustedBucketSize = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    currentBlockIndex = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  blockSize = adjustedBucketSize - bucketSize;\n  if ((adjustedBucketSize < bucketSize) || ((int)blockSize < 0x10)) {\n    __malloc_unlock(param);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = bucketSize + currentBlockIndex;\n  *(uint *)(currentBlockIndex + 4) = bucketSize | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = blockSize | 1;\n  __malloc_unlock(param);\n  return (int *)(currentBlockIndex + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_block_00081e14",
                "param_1": "param",
                "param_2": "size",
                "dVar1": "index",
                "iVar2": "prevBlockIndex",
                "uVar3": "blockSize",
                "uVar4": "adjustedSize",
                "iVar5": "blockIndex",
                "uVar6": "remainingSize",
                "dVar7": "currentBlockIndex",
                "uVar8": "newBlockSize",
                "iVar9": "nextBlockIndex",
                "puVar10": "iterator",
                "dVar11": "foundBlockIndex",
                "dVar12": "previousBlockIndex",
                "iVar13": "bucketIndex",
                "pdVar14": "currentBucket",
                "uVar15": "bucketSize",
                "puVar16": "newBlock",
                "pdVar17": "nextBucket",
                "uVar18": "adjustedBucketSize"
            },
            "calling": [
                "__smakebuf_r",
                "__sfvwrite_r",
                "_realloc_r",
                "malloc"
            ],
            "called": [
                "__malloc_lock",
                "_sbrk_r",
                "__malloc_unlock",
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint numBytes)\n\n{\n  undefined4 *destPointer;\n  undefined4 *dst;\n  undefined4 *src;\n  uint remainingBytes;\n  uint innerLoopCounter;\n  bool loopCondition;\n  \n  dst = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (numBytes < 8) {\n      innerLoopCounter = numBytes - 4;\n      if (3 < numBytes) {\n        do {\n          destPointer = source;\n          src = dst;\n          loopCondition = innerLoopCounter != 0;\n          innerLoopCounter = innerLoopCounter - 1;\n          *(undefined *)src = *(undefined *)destPointer;\n          dst = (undefined4 *)((int)src + 1);\n          source = (undefined4 *)((int)destPointer + 1);\n        } while (loopCondition);\n        *(undefined *)(undefined4 *)((int)src + 1) =\n             *(undefined *)(undefined4 *)((int)destPointer + 1);\n        *(undefined *)((int)src + 2) = *(undefined *)((int)destPointer + 2);\n        *(undefined *)((int)src + 3) = *(undefined *)((int)destPointer + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      innerLoopCounter = 4 - ((uint)destination & 3);\n      numBytes = numBytes - innerLoopCounter;\n      destPointer = destination;\n      src = source;\n      if (((uint)destination & 1) != 0) {\n        src = (undefined4 *)((int)source + 1);\n        destPointer = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dst = destPointer;\n      source = src;\n      if ((innerLoopCounter & 2) != 0) {\n        source = (undefined4 *)((int)src + 2);\n        dst = (undefined4 *)((int)destPointer + 2);\n        *(undefined2 *)destPointer = *(undefined2 *)src;\n      }\n    }\n  }\n  while (0x3f < numBytes) {\n    *dst = *source;\n    dst[1] = source[1];\n    dst[2] = source[2];\n    dst[3] = source[3];\n    dst[4] = source[4];\n    dst[5] = source[5];\n    dst[6] = source[6];\n    dst[7] = source[7];\n    dst[8] = source[8];\n    dst[9] = source[9];\n    dst[10] = source[10];\n    dst[0xb] = source[0xb];\n    dst[0xc] = source[0xc];\n    dst[0xd] = source[0xd];\n    dst[0xe] = source[0xe];\n    dst[0xf] = source[0xf];\n    dst = dst + 0x10;\n    source = source + 0x10;\n    numBytes = numBytes - 0x40;\n  }\n  remainingBytes = numBytes - 0x10;\n  if (0xffffffcf < numBytes - 0x40) {\n    do {\n      *dst = *source;\n      dst[1] = source[1];\n      dst[2] = source[2];\n      dst[3] = source[3];\n      dst = dst + 4;\n      source = source + 4;\n      loopCondition = 0xf < remainingBytes;\n      remainingBytes = remainingBytes - 0x10;\n    } while (loopCondition);\n  }\n  innerLoopCounter = remainingBytes + 0xc;\n  src = dst;\n  destPointer = source;\n  if (0xfffffff3 < remainingBytes) {\n    do {\n      source = destPointer + 1;\n      *src = *destPointer;\n      loopCondition = 3 < innerLoopCounter;\n      innerLoopCounter = innerLoopCounter - 4;\n      dst = src + 1;\n      src = src + 1;\n      destPointer = source;\n    } while (loopCondition);\n  }\nLAB_000823d0:\n  if (innerLoopCounter + 4 != 0) {\n    destPointer = dst;\n    src = source;\n    if ((innerLoopCounter & 1) != 0) {\n      src = (undefined4 *)((int)source + 1);\n      destPointer = (undefined4 *)((int)dst + 1);\n      *(undefined *)dst = *(undefined *)source;\n    }\n    if ((innerLoopCounter + 4 & 2) != 0) {\n      *(undefined2 *)destPointer = *(undefined2 *)src;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "numBytes",
                "puVar1": "destPointer",
                "puVar2": "dst",
                "puVar3": "src",
                "uVar4": "remainingBytes",
                "uVar5": "innerLoopCounter",
                "bVar6": "loopCondition"
            },
            "calling": [
                "__sfvwrite_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_00082438",
            "code": "\nvoid copyMemory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *destEndPtr;\n  uint remainingSize;\n  undefined *endPtr;\n  uint remainder;\n  \n  if ((src < dest) && (destEndPtr = (undefined4 *)((int)src + size), dest < destEndPtr)) {\n    endPtr = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        destEndPtr = (undefined4 *)((int)destEndPtr + -1);\n        index = index + -1;\n        endPtr = endPtr + -1;\n        *endPtr = *(undefined *)destEndPtr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    destEndPtr = dest;\n    srcPtr = src;\n    do {\n      destPtr = destEndPtr + 4;\n      *destEndPtr = *srcPtr;\n      destEndPtr[1] = srcPtr[1];\n      destEndPtr[2] = srcPtr[2];\n      destEndPtr[3] = srcPtr[3];\n      destEndPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    remainingSize = remainder;\n    destEndPtr = dest;\n    srcPtr = src;\n    if (3 < remainder) {\n      do {\n        remainingSize = remainingSize - 4;\n        *destEndPtr = *srcPtr;\n        destEndPtr = destEndPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < remainingSize);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  destEndPtr = dest;\n  do {\n    srcPtr = (undefined4 *)((int)destEndPtr + 1);\n    *(undefined *)destEndPtr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    destEndPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "iVar1": "index",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "destEndPtr",
                "uVar5": "remainingSize",
                "puVar6": "endPtr",
                "uVar7": "remainder"
            },
            "calling": [
                "__sfvwrite_r",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "fill_memory_00082504",
            "code": "\nvoid fillMemory_00082504(undefined4 *memory,undefined byte,uint size)\n\n{\n  undefined4 *tempPtr1;\n  undefined4 *tempPtr2;\n  undefined4 pattern;\n  uint remainingSize;\n  bool isZeroSize;\n  \n  if (((uint)memory & 3) != 0) {\n    isZeroSize = size == 0;\n    tempPtr1 = memory;\n    size = size - 1;\n    if (isZeroSize) {\n      return;\n    }\n    while( true ) {\n      memory = (undefined4 *)((int)tempPtr1 + 1);\n      *(undefined *)tempPtr1 = byte;\n      if (((uint)memory & 3) == 0) break;\n      isZeroSize = size == 0;\n      tempPtr1 = memory;\n      size = size - 1;\n      if (isZeroSize) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(byte,byte),CONCAT11(byte,byte));\n    remainingSize = size;\n    tempPtr1 = memory;\n    if (0xf < size) {\n      remainingSize = size - 0x10;\n      do {\n        *tempPtr1 = pattern;\n        tempPtr1[1] = pattern;\n        tempPtr1[2] = pattern;\n        tempPtr1[3] = pattern;\n        tempPtr1 = tempPtr1 + 4;\n      } while (tempPtr1 != (undefined4 *)((int)memory + (remainingSize & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      memory = memory + ((remainingSize >> 4) + 1) * 4;\n      remainingSize = size;\n      tempPtr1 = memory;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *memory = pattern;\n      memory = memory + 1;\n    } while (3 < size);\n    memory = (undefined4 *)((int)tempPtr1 + (remainingSize - 4 & 0xfffffffc) + 4);\n    size = remainingSize & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    tempPtr1 = memory;\n    do {\n      tempPtr2 = (undefined4 *)((int)tempPtr1 + 1);\n      *(undefined *)tempPtr1 = byte;\n      tempPtr1 = tempPtr2;\n    } while (tempPtr2 != (undefined4 *)(size + (int)memory));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "fill_memory_00082504",
                "param_1": "memory",
                "param_2": "byte",
                "param_3": "size",
                "puVar1": "tempPtr1",
                "puVar2": "tempPtr2",
                "uVar3": "pattern",
                "uVar4": "remainingSize",
                "bVar5": "isZeroSize"
            },
            "calling": [
                "RingBuffer",
                "__sinit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "_realloc_r",
                "_free_r",
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "reallocate_memory_000825a0",
            "code": "\nvoid reallocateMemory_000825a0(undefined4 size,undefined4 count)\n\n{\n  _realloc_r(Elf32_Rel_ARRAY_20070000[140].r_offset,size,count);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "reallocate_memory_000825a0",
                "param_1": "size",
                "param_2": "count"
            },
            "calling": [
                "changeBuffer"
            ],
            "called": [
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_memory_000825b0",
            "code": "\nint * allocateMemory_000825b0(undefined4 *context,int *existingMemory,uint size)\n\n{\n  dword temp1;\n  int *newMemory;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  int *temp6;\n  uint originalSize;\n  uint alignedSize;\n  int *temp7;\n  \n  if (existingMemory == (int *)0x0) {\n    newMemory = (int *)_malloc_r(context,size);\n    return newMemory;\n  }\n  __malloc_lock();\n  temp4 = existingMemory[-1];\n  originalSize = temp4 & 0xfffffffc;\n  newMemory = existingMemory + -2;\n  if (size + 0xb < 0x17) {\n    alignedSize = 0x10;\n  }\n  else {\n    alignedSize = size + 0xb & 0xfffffff8;\n    if ((int)alignedSize < 0) goto LAB_0008267c;\n  }\n  if (alignedSize < size) {\nLAB_0008267c:\n    *context = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)originalSize < (int)alignedSize) {\n    temp1 = (int)newMemory + originalSize;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp1) {\n      temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(alignedSize + 0x10) <= (int)(temp2 + originalSize)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)newMemory + alignedSize;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + originalSize) - alignedSize | 1;\n        existingMemory[-1] = alignedSize | existingMemory[-1] & 1U;\n        __malloc_unlock(context);\n        return existingMemory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)alignedSize <= (int)(temp2 + originalSize)) {\n        temp5 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        originalSize = temp2 + originalSize;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp4 << 0x1f)) {\n      temp7 = (int *)((int)newMemory - existingMemory[-2]);\n      temp4 = (temp7[1] & 0xfffffffcU) + originalSize;\n      if (temp1 != 0) {\n        if (temp1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(alignedSize + 0x10) <= (int)(temp2 + temp4)) {\n            newMemory = temp7 + 2;\n            temp3 = *newMemory;\n            temp5 = temp7[3];\n            originalSize = originalSize - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            if (originalSize < 0x25) {\n              temp6 = newMemory;\n              if (0x13 < originalSize) {\n                temp7[2] = *existingMemory;\n                temp7[3] = existingMemory[1];\n                if (originalSize < 0x1c) {\n                  existingMemory = existingMemory + 2;\n                  temp6 = temp7 + 4;\n                }\n                else {\n                  temp7[4] = existingMemory[2];\n                  temp7[5] = existingMemory[3];\n                  if (originalSize == 0x24) {\n                    temp7[6] = existingMemory[4];\n                    temp6 = existingMemory + 5;\n                    existingMemory = existingMemory + 6;\n                    temp7[7] = *temp6;\n                    temp6 = temp7 + 8;\n                  }\n                  else {\n                    existingMemory = existingMemory + 4;\n                    temp6 = temp7 + 6;\n                  }\n                }\n              }\n              *temp6 = *existingMemory;\n              temp6[1] = existingMemory[1];\n              temp6[2] = existingMemory[2];\n            }\n            else {\n              memmove(newMemory,existingMemory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp7 + alignedSize;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + temp4) - alignedSize | 1;\n            temp7[1] = alignedSize | temp7[1] & 1U;\n            __malloc_unlock(context);\n            return newMemory;\n          }\n        }\n        else {\n          temp2 = temp2 + temp4;\n          if ((int)alignedSize <= (int)temp2) {\n            temp5 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            temp6 = temp7 + 2;\n            temp3 = *temp6;\n            temp5 = temp7[3];\n            temp4 = originalSize - 4;\n            *(int *)(temp3 + 0xc) = temp5;\n            *(int *)(temp5 + 8) = temp3;\n            originalSize = temp2;\n            if (temp4 < 0x25) {\n              newMemory = temp6;\n              if (0x13 < temp4) {\n                temp7[2] = *existingMemory;\n                temp7[3] = existingMemory[1];\n                if (temp4 < 0x1c) {\n                  existingMemory = existingMemory + 2;\n                  newMemory = temp7 + 4;\n                }\n                else {\n                  temp7[4] = existingMemory[2];\n                  temp7[5] = existingMemory[3];\n                  if (temp4 == 0x24) {\n                    temp7[6] = existingMemory[4];\n                    newMemory = existingMemory + 5;\n                    existingMemory = existingMemory + 6;\n                    temp7[7] = *newMemory;\n                    newMemory = temp7 + 8;\n                  }\n                  else {\n                    existingMemory = existingMemory + 4;\n                    newMemory = temp7 + 6;\n                  }\n                }\n              }\n              *newMemory = *existingMemory;\n              newMemory[1] = existingMemory[1];\n              newMemory[2] = existingMemory[2];\n              temp4 = temp7[1];\n              newMemory = temp7;\n              existingMemory = temp6;\n            }\n            else {\n              memmove(temp6,existingMemory);\n              temp4 = temp7[1];\n              newMemory = temp7;\n              existingMemory = temp6;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)alignedSize <= (int)temp4) {\n        temp6 = temp7 + 2;\n        temp3 = *temp6;\n        temp5 = temp7[3];\n        temp2 = originalSize - 4;\n        *(int *)(temp3 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp3;\n        originalSize = temp4;\n        if (temp2 < 0x25) {\n          newMemory = temp6;\n          if (0x13 < temp2) {\n            temp7[2] = *existingMemory;\n            temp7[3] = existingMemory[1];\n            if (temp2 < 0x1c) {\n              existingMemory = existingMemory + 2;\n              newMemory = temp7 + 4;\n            }\n            else {\n              temp7[4] = existingMemory[2];\n              temp7[5] = existingMemory[3];\n              if (temp2 == 0x24) {\n                temp7[6] = existingMemory[4];\n                newMemory = existingMemory + 5;\n                existingMemory = existingMemory + 6;\n                temp7[7] = *newMemory;\n                newMemory = temp7 + 8;\n              }\n              else {\n                existingMemory = existingMemory + 4;\n                newMemory = temp7 + 6;\n              }\n            }\n          }\n          *newMemory = *existingMemory;\n          newMemory[1] = existingMemory[1];\n          newMemory[2] = existingMemory[2];\n          temp4 = temp7[1];\n          newMemory = temp7;\n          existingMemory = temp6;\n        }\n        else {\n          memmove(temp6,existingMemory);\n          temp4 = temp7[1];\n          newMemory = temp7;\n          existingMemory = temp6;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp7 = (int *)_malloc_r(context,size);\n    if (temp7 == (int *)0x0) goto LAB_000826a4;\n    temp4 = existingMemory[-1];\n    if (temp7 + -2 != (int *)((temp4 & 0xfffffffe) + (int)newMemory)) {\n      originalSize = originalSize - 4;\n      if (originalSize < 0x25) {\n        newMemory = existingMemory;\n        temp6 = temp7;\n        if (0x13 < originalSize) {\n          *temp7 = *existingMemory;\n          temp7[1] = existingMemory[1];\n          if (originalSize < 0x1c) {\n            newMemory = existingMemory + 2;\n            temp6 = temp7 + 2;\n          }\n          else {\n            temp7[2] = existingMemory[2];\n            temp7[3] = existingMemory[3];\n            if (originalSize == 0x24) {\n              temp7[4] = existingMemory[4];\n              temp7[5] = existingMemory[5];\n              newMemory = existingMemory + 6;\n              temp6 = temp7 + 6;\n            }\n            else {\n              newMemory = existingMemory + 4;\n              temp6 = temp7 + 4;\n            }\n          }\n        }\n        *temp6 = *newMemory;\n        temp6[1] = newMemory[1];\n        temp6[2] = newMemory[2];\n      }\n      else {\n        memmove(temp7,existingMemory);\n      }\n      _free_r(context,existingMemory);\n      goto LAB_000826a4;\n    }\n    originalSize = originalSize + (temp7[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp2 = originalSize - alignedSize;\n  temp7 = existingMemory;\n  if (temp2 < 0x10) {\n    newMemory[1] = temp4 & 1 | originalSize;\n    *(uint *)((int)newMemory + originalSize + 4) = *(uint *)((int)newMemory + originalSize + 4) | 1;\n  }\n  else {\n    newMemory[1] = temp4 & 1 | alignedSize;\n    *(uint *)((int)newMemory + alignedSize + 4) = temp2 | 1;\n    *(uint *)((int)newMemory + temp2 + alignedSize + 4) = *(uint *)((int)newMemory + temp2 + alignedSize + 4) | 1;\n    _free_r(context,(int)newMemory + alignedSize + 8);\n  }\nLAB_000826a4:\n  __malloc_unlock(context);\n  return temp7;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_memory_000825b0",
                "param_1": "context",
                "param_2": "existingMemory",
                "param_3": "size",
                "dVar1": "temp1",
                "piVar2": "newMemory",
                "uVar3": "temp2",
                "iVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "temp5",
                "piVar7": "temp6",
                "uVar8": "originalSize",
                "uVar9": "alignedSize",
                "piVar10": "temp7"
            },
            "calling": [
                "__sfvwrite_r",
                "realloc"
            ],
            "called": [
                "memmove",
                "__malloc_lock",
                "__malloc_unlock",
                "_free_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "allocate_memory_00082970",
            "code": "\nvoid allocate_memory_00082970(int *result,undefined4 num_bytes)\n\n{\n  int allocation_result;\n  \n  DAT_200711bc = 0;\n  allocation_result = _sbrk(num_bytes);\n  if ((allocation_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "param_1": "result",
                "param_2": "num_bytes",
                "iVar1": "allocation_result"
            },
            "calling": [
                "_malloc_trim_r",
                "_malloc_r"
            ],
            "called": [
                "_sbrk"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copyString_00082994(uint *dest,uint *source)\n\n{\n  char currentChar;\n  ushort currentShort;\n  uint *nextUint;\n  uint *nextUint2;\n  uint currentUint;\n  uint nextUint;\n  uint *destPtr;\n  bool isZeroByte;\n  \n  if ((((uint)dest ^ (uint)source) & 3) != 0) {\n    do {\n      currentChar = *(char *)source;\n      *(char *)dest = currentChar;\n      source = (uint *)((int)source + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (currentChar != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    nextUint2 = source;\n    if (((uint)source & 1) != 0) {\n      nextUint2 = (uint *)((int)source + 1);\n      currentChar = *(char *)source;\n      *(char *)dest = currentChar;\n      dest = (uint *)((int)dest + 1);\n      if (currentChar == '\\0') {\n        return;\n      }\n    }\n    source = nextUint2;\n    if (((uint)nextUint2 & 2) != 0) {\n      source = (uint *)((int)nextUint2 + 2);\n      currentShort = *(ushort *)nextUint2;\n      isZeroByte = (currentShort & 0xff) == 0;\n      if (isZeroByte) {\n        *(char *)dest = (char)currentShort;\n      }\n      else {\n        *(ushort *)dest = currentShort;\n        isZeroByte = (currentShort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (isZeroByte) {\n        return;\n      }\n    }\n  }\n  currentUint = *source;\n  nextUint2 = source + 1;\n  destPtr = dest;\n  if (((uint)source & 4) != 0) {\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) goto LAB_000829f8;\n    destPtr = dest + 1;\n    *dest = currentUint;\n    nextUint2 = source + 2;\n    currentUint = source[1];\n  }\n  while( true ) {\n    nextUint = nextUint2 + 1;\n    nextUint = *nextUint2;\n    dest = destPtr;\n    if ((currentUint + 0xfefefeff & ~currentUint & 0x80808080) != 0) break;\n    dest = destPtr + 1;\n    *destPtr = currentUint;\n    currentUint = nextUint;\n    if ((nextUint + 0xfefefeff & ~nextUint & 0x80808080) != 0) break;\n    nextUint2 = nextUint2 + 2;\n    currentUint = *nextUint;\n    destPtr = destPtr + 2;\n    *dest = nextUint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)dest = (char)currentUint;\n    nextUint = currentUint & 0xff;\n    currentUint = currentUint >> 8 | currentUint << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (nextUint != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "source",
                "cVar1": "currentChar",
                "uVar2": "currentShort",
                "puVar3": "nextUint",
                "puVar4": "nextUint2",
                "uVar5": "currentUint",
                "uVar6": "nextUint",
                "puVar7": "destPtr",
                "bVar8": "isZeroByte"
            },
            "calling": [
                "copy"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_leading_zeros_00082a50",
            "code": "\nint countLeadingZeros_00082a50(uint input)\n\n{\n  int leadingZeros;\n  uint *ptr;\n  uint value;\n  bool isZero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leadingZeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leadingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leadingZeros = leadingZeros + 4;\n    value = *ptr;\n  }\n  isZero = (value & 0xff) == 0;\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff00) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n    isZero = (value & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    leadingZeros = leadingZeros + 1;\n  }\n  return leadingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "param_1": "input",
                "iVar1": "leadingZeros",
                "puVar2": "ptr",
                "uVar3": "value",
                "bVar4": "isZero"
            },
            "calling": [
                "String",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "write_to_file_00082ac0",
            "code": "\nint writeToFile_00082ac0(undefined4 fileDescriptor,int bufferSize,int **buffer)\n\n{\n  int *currentBuffer;\n  int result;\n  int *remainingBuffer;\n  uint counter;\n  undefined4 *currentItem;\n  uint itemSize;\n  uint numItems;\n  \n  if (-1 < *(int *)(bufferSize + 100) << 0x12) {\n    result = __sfvwrite_r();\n    buffer[2] = (int *)0x0;\n    buffer[1] = (int *)0x0;\n    return result;\n  }\n  remainingBuffer = buffer[2];\n  currentBuffer = *buffer;\n  while (remainingBuffer != (int *)0x0) {\n    itemSize = currentBuffer[1];\n    numItems = itemSize >> 2;\n    if (numItems != 0) {\n      currentItem = (undefined4 *)(*currentBuffer + -4);\n      counter = 0;\n      do {\n        currentItem = currentItem + 1;\n        result = _fputwc_r(fileDescriptor,*currentItem,bufferSize);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (numItems != counter);\n      remainingBuffer = buffer[2];\n    }\n    remainingBuffer = (int *)((int)remainingBuffer - (itemSize & 0xfffffffc));\n    buffer[2] = remainingBuffer;\n    currentBuffer = currentBuffer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  buffer[2] = (int *)0x0;\n  buffer[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "write_to_file_00082ac0",
                "param_1": "fileDescriptor",
                "param_2": "bufferSize",
                "param_3": "buffer",
                "piVar1": "currentBuffer",
                "iVar2": "result",
                "piVar3": "remainingBuffer",
                "uVar4": "counter",
                "puVar5": "currentItem",
                "uVar6": "itemSize",
                "uVar7": "numItems"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__sfvwrite_r",
                "_fputwc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "formatted_print_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint formattedPrint_00082b38(int buffer,int formatString,int *******argsList,int **argsPtr)\n\n{\n  bool isLeadingZero;\n  bool hasFlagPlus;\n  bool hasFlagHash;\n  char signChar;\n  bool hasFlagZero;\n  int ********formattedArgs;\n  int *intPtr;\n  int result;\n  char formatChar;\n  int *******currentCharPtr;\n  uint digit;\n  int **argPtr;\n  uint formatFlags;\n  uint currentChar;\n  int index;\n  int ********ppppppppiVar16;\n  int argIndex;\n  int *******remainingChars;\n  int *intVar1;\n  int *******arg;\n  uint tempVar;\n  int *intVar2;\n  int *******remainingArgsList;\n  undefined4 tempVar2;\n  int ********formattedArgsPtr;\n  bool shouldNegate;\n  longlong longVar;\n  int *******totalPrintedCharsPtr;\n  int *******remainingCharsPtr;\n  int **argsPtrPtr;\n  int totalPrintedChars;\n  char *hexadecimalDigits;\n  char signChar;\n  undefined leadingZeroChar;\n  undefined fillChar;\n  int ********formattedArgsPtr;\n  int argIndex;\n  int *******formattedArgsPtr;\n  undefined hexadecimalChar;\n  char buffer;\n  undefined currentChar;\n  undefined formattedArgsPtr [4];\n  int *******bufferPtrArray [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  formatFlags = (uint)*(ushort *)(formatString + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(formatString + 0xc) << 0x12)) {\n    formatFlags = formatFlags | 0x2000;\n    *(short *)(formatString + 0xc) = (short)formatFlags;\n    *(uint *)(formatString + 100) = *(uint *)(formatString + 100) & 0xffffdfff;\n  }\n  if (((int)(formatFlags << 0x1c) < 0) && (*(int *)(formatString + 0x10) != 0)) {\n    if ((formatFlags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = __swsetup_r(buffer,formatString);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(formatString + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(formatString + 0xe)) {\n    result = __sbprintf(buffer,formatString,argsList,argsPtr);\n    return result;\n  }\nLAB_00082b8a:\n  hexadecimalDigits = (char *)0x0;\n  formattedArgsPtr = (int *******)0x0;\n  argIndex = 0;\n  totalPrintedChars = 0;\n  formattedArgs = (int ********)formattedArgsPtr;\n  argsPtrPtr = argsPtr;\n  formattedArgsPtr = (int ********)formattedArgsPtr;\nLAB_00082b9e:\n  currentCharPtr = argsList;\n  if ((*(char *)argsList != '\\0') && (*(char *)argsList != '%')) {\n    do {\n      currentCharPtr = (int *******)((int)currentCharPtr + 1);\n      if (*(char *)currentCharPtr == '\\0') break;\n    } while (*(char *)currentCharPtr != '%');\n    arg = (int *******)((int)currentCharPtr - (int)argsList);\n    if (arg != (int *******)0x0) {\n      argIndex = argIndex + 1;\n      formattedArgsPtr = (int *******)((int)formattedArgsPtr + (int)arg);\n      *formattedArgs = argsList;\n      formattedArgs[1] = arg;\n      if (argIndex < 8) {\n        formattedArgs = formattedArgs + 2;\n      }\n      else {\n        if (formattedArgsPtr == (int *******)0x0) {\n          totalPrintedChars = totalPrintedChars + (int)arg;\n          argIndex = 0;\n          formattedArgs = (int ********)formattedArgsPtr;\n          goto LAB_00082bee;\n        }\n        result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n        formattedArgs = (int ********)formattedArgsPtr;\n        if (result != 0) goto LAB_000833de;\n      }\n      totalPrintedChars = totalPrintedChars + (int)arg;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)currentCharPtr != '\\0') {\n    signChar = '\\0';\n    currentChar = (uint)*(byte *)((int)currentCharPtr + 1);\n    formatFlags = 0;\n    hasFlagZero = false;\n    hasFlagPlus = false;\n    isLeadingZero = false;\n    hasFlagHash = false;\n    shouldNegate = false;\n    arg = (int *******)0x0;\n    remainingCharsPtr = (int *******)0xffffffff;\n    argsList = (int *******)((int)currentCharPtr + 1);\nLAB_00082c12:\n    argsList = (int *******)((int)argsList + 1);\nLAB_00082c16:\n    switch(currentChar) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (currentChar != 0) {\n        totalPrintedCharsPtr = (int *******)0x1;\n        remainingCharsPtr = (int *******)0x1;\n        formattedArgsPtr = (int ********)&hexadecimalChar;\n        hexadecimalChar = (char)currentChar;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      hasFlagHash = true;\n      currentChar = (uint)*(byte *)argsList;\n      goto LAB_00082c12;\n    case 0x2a:\n      arg = (int *******)*argsPtrPtr;\n      argsPtrPtr = argsPtrPtr + 1;\n      if ((int)arg < 0) {\n        arg = (int *******)-(int)arg;\n        goto switchD_00082c20_caseD_2d;\n      }\n      currentChar = (uint)*(byte *)argsList;\n      goto LAB_00082c12;\n    case 0x2b:\n      currentChar = (uint)*(byte *)argsList;\n      signChar = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      formatFlags = formatFlags | 4;\n      currentChar = (uint)*(byte *)argsList;\n      goto LAB_00082c12;\n    case 0x2e:\n      currentChar = (uint)*(byte *)argsList;\n      currentCharPtr = (int *******)((int)argsList + 1);\n      if (currentChar == 0x2a) {\n        currentChar = (uint)*(byte *)((int)argsList + 1);\n        remainingCharsPtr = (int *******)*argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n        argsList = currentCharPtr;\n        if ((int)remainingCharsPtr < 0) {\n          remainingCharsPtr = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = currentChar - 0x30;\n      if (digit < 10) {\n        tempVar = 0;\n        do {\n          argsList = (int *******)((int)currentCharPtr + 1);\n          currentChar = (uint)*(byte *)currentCharPtr;\n          tempVar = digit + tempVar * 10;\n          digit = currentChar - 0x30;\n          currentCharPtr = argsList;\n        } while (digit < 10);\n        remainingCharsPtr = (int *******)(tempVar | (int)tempVar >> 0x1f);\n      }\n      else {\n        remainingCharsPtr = (int *******)0x0;\n        argsList = currentCharPtr;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      formatFlags = formatFlags | 0x80;\n      currentChar = (uint)*(byte *)argsList;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      hasFlagPlus = true;\n      if (isLeadingZero == false) goto LAB_00083028;\nLAB_00082e98:\n      argsPtrPtr = (int **)((int)argsPtrPtr + 7U & 0xfffffff8);\n      intVar1 = *argsPtrPtr;\n      intVar2 = argsPtrPtr[1];\n      argsPtrPtr = argsPtrPtr + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      hasFlagPlus = true;\n      if (isLeadingZero != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)hasFlagPlus << 4;\n      index = (uint)isLeadingZero << 5;\n      if ((hasFlagPlus == 0) && (index = (uint)shouldNegate << 6, shouldNegate != 0)) {\n        intVar1 = (int *)(uint)*(ushort *)argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n        intVar2 = (int *)0x0;\n      }\n      else {\n        result = index;\n        intVar1 = *argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n        intVar2 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      hasFlagPlus = true;\n      if (isLeadingZero != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((hasFlagPlus) || (shouldNegate == false)) {\n        result = 1;\n        intVar1 = *argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n        intVar2 = (int *)0x0;\n      }\n      else {\n        intVar2 = (int *)0x0;\n        intVar1 = (int *)(uint)*(ushort *)argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hexadecimalDigits = \"0123456789ABCDEF\";\n      if (isLeadingZero == false) goto LAB_00083196;\nLAB_00082fb6:\n      argPtr = (int **)((int)argsPtrPtr + 7U & 0xfffffff8);\n      argsPtrPtr = argPtr + 2;\n      intVar1 = *argPtr;\n      intVar2 = argPtr[1];\n      goto LAB_00082fca;\n    case 99:\n      intVar1 = *argsPtrPtr;\n      argsPtrPtr = argsPtrPtr + 1;\n      totalPrintedCharsPtr = (int *******)0x1;\n      hexadecimalChar = SUB41(intVar1,0);\n      remainingCharsPtr = (int *******)0x1;\n      formattedArgsPtr = (int ********)&hexadecimalChar;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isLeadingZero != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((hasFlagPlus == false) && (shouldNegate != false)) {\n        intVar1 = (int *)(int)*(short *)argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n        intVar2 = (int *)((int)intVar1 >> 0x1f);\n      }\n      else {\n        intVar1 = *argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n        intVar2 = (int *)((int)intVar1 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)intVar2 < 0) {\n        shouldNegate = intVar1 != (int *)0x0;\n        intVar1 = (int *)-(int)intVar1;\n        intVar2 = (int *)(-(int)intVar2 - (uint)shouldNegate);\n        signChar = '-';\n        signChar = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)remainingCharsPtr) {\n        formatFlags = formatFlags & 0xffffff7f;\n      }\n      hasFlagZero = false;\n      currentChar = (uint)intVar1 | (uint)intVar2;\n      result = 1;\n      signChar = signChar;\n      goto joined_r0x00082d78;\n    case 0x68:\n      shouldNegate = true;\n      currentChar = (uint)*(byte *)argsList;\n      goto LAB_00082c12;\n    case 0x6c:\n      currentChar = (uint)*(byte *)argsList;\n      if (currentChar == 0x6c) {\n        isLeadingZero = true;\n        currentChar = (uint)*(byte *)((int)argsList + 1);\n        argsList = (int *******)((int)argsList + 1);\n      }\n      else {\n        hasFlagPlus = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isLeadingZero == false) {\n        if (hasFlagPlus == false) {\n          if (shouldNegate) {\n            intVar1 = *argsPtrPtr;\n            argsPtrPtr = argsPtrPtr + 1;\n            *(short *)intVar1 = (short)totalPrintedChars;\n          }\n          else {\n            intVar1 = *argsPtrPtr;\n            argsPtrPtr = argsPtrPtr + 1;\n            *intVar1 = totalPrintedChars;\n          }\n        }\n        else {\n          intVar1 = *argsPtrPtr;\n          argsPtrPtr = argsPtrPtr + 1;\n          *intVar1 = totalPrintedChars;\n        }\n      }\n      else {\n        intVar1 = *argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n        *intVar1 = totalPrintedChars;\n        intVar1[1] = totalPrintedChars >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isLeadingZero == false) goto LAB_00082f2a;\nLAB_00082d42:\n      argPtr = (int **)((int)argsPtrPtr + 7U & 0xfffffff8);\n      argsPtrPtr = argPtr + 2;\n      intVar1 = *argPtr;\n      intVar2 = argPtr[1];\n      result = 0;\n      break;\n    case 0x70:\n      intVar1 = *argsPtrPtr;\n      argsPtrPtr = argsPtrPtr + 1;\n      fillChar = 0x78;\n      hasFlagZero = true;\n      intVar2 = (int *)0x0;\n      leadingZeroChar = 0x30;\n      hexadecimalDigits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isLeadingZero = true;\n      currentChar = (uint)*(byte *)argsList;\n      goto LAB_00082c12;\n    case 0x73:\n      formattedArgsPtr = (int ********)*argsPtrPtr;\n      signChar = '\\0';\n      argsPtrPtr = argsPtrPtr + 1;\n      if (formattedArgsPtr != (int ********)0x0) {\n        if ((int)remainingCharsPtr < 0) {\n          remainingCharsPtr = (int *******)strlen(formattedArgsPtr);\n          currentCharPtr = (int *******)0x0;\n          signChar = signChar;\n        }\n        else {\n          result = memchr(formattedArgsPtr,0,remainingCharsPtr);\n          signChar = signChar;\n          if (result == 0) {\n            currentCharPtr = (int *******)0x0;\n          }\n          else {\n            remainingChars = (int *******)(result - (int)formattedArgsPtr);\n            if ((int)remainingCharsPtr <= (int)(int *******)(result - (int)formattedArgsPtr)) {\n              remainingChars = remainingCharsPtr;\n            }\n            currentCharPtr = (int *******)0x0;\n            remainingCharsPtr = remainingChars;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < remainingCharsPtr) {\n        remainingCharsPtr = (int *******)0x6;\n      }\n      totalPrintedCharsPtr = (int *******)((uint)remainingCharsPtr & ~((int)remainingCharsPtr >> 0x1f));\n      formattedArgsPtr = (int ********)&UNK_00085840;\nLAB_00083012:\n      signChar = '\\0';\n      currentCharPtr = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isLeadingZero) goto LAB_00082f7c;\nLAB_00082e62:\n      argPtr = (int **)((int)argsPtrPtr + 7U & 0xfffffff8);\n      argsPtrPtr = argPtr + 2;\n      intVar1 = *argPtr;\n      intVar2 = argPtr[1];\n      result = 1;\n      break;\n    case 0x78:\n      hexadecimalDigits = \"0123456789abcdef\";\n      if (isLeadingZero != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((hasFlagPlus == false) && (shouldNegate != false)) {\n        intVar2 = (int *)0x0;\n        intVar1 = (int *)(uint)*(ushort *)argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n      }\n      else {\n        intVar1 = *argsPtrPtr;\n        argsPtrPtr = argsPtrPtr + 1;\n        intVar2 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((hasFlagHash) && (((uint)intVar1 | (uint)intVar2) != 0)) {\n        hasFlagZero = true;\n        leadingZeroChar = 0x30;\n        result = 2;\n        fillChar = (char)currentChar;\n      }\n      else {\n        result = 2;\n      }\n    }\n    signChar = '\\0';\n    signChar = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)remainingCharsPtr) {\n      formatFlags = formatFlags & 0xffffff7f;\n    }\n    currentChar = (uint)intVar1 | (uint)intVar2;\njoined_r0x00082d78:\n    longVar = CONCAT44(intVar2,intVar1);\n    currentCharPtr = remainingCharsPtr;\n    if ((currentChar == 0) && (remainingCharsPtr == (int *******)0x0)) {\n      formattedArgsPtr = (int ********)formattedArgsPtr;\n      if ((result != 0) || (!hasFlagHash)) goto LAB_00082da0;\n      formattedArgsPtr = (int ********)(&buffer + 1);\n      currentChar = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (intVar2 != (int *)0x0 || (int *)0x9 < intVar1) {\n        ppppppppiVar16 = (int ********)(&buffer + 1);\n        do {\n          formattedArgsPtr = ppppppppiVar16;\n          tempVar2 = (undefined4)((ulonglong)longVar >> 0x20);\n          formatChar = '\\n';\n          __aeabi_uldivmod((int)longVar,tempVar2,10,0);\n          *(char *)formattedArgsPtr = formatChar + '0';\n          longVar = __aeabi_uldivmod((int)longVar,tempVar2,10,0);\n          ppppppppiVar16 = (int ********)((int)formattedArgsPtr + -1);\n        } while (longVar != 0);\n        remainingCharsPtr = (int *******)((int)formattedArgsPtr - (int)formattedArgsPtr);\n        goto LAB_00082da0;\n      }\n      currentChar = (char)intVar1 + '0';\n      formattedArgsPtr = (int ********)(&buffer + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&buffer + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      formattedArgsPtr = ppppppppiVar16;\n      currentChar = (uint)intVar1 & 0xf;\n      intVar1 = (int *)((uint)intVar1 >> 4 | (int)intVar2 << 0x1c);\n      intVar2 = (int *)((uint)intVar2 >> 4);\n      *(char *)formattedArgsPtr = hexadecimalDigits[currentChar];\n      ppppppppiVar16 = (int ********)((int)formattedArgsPtr + -1);\n    } while (((uint)intVar1 | (uint)intVar2) != 0);\n    remainingCharsPtr = (int *******)((int)formattedArgsPtr - (int)formattedArgsPtr);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (formattedArgsPtr != (int *******)0x0) {\n    __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(formatString + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return totalPrintedChars;\nLAB_0008337e:\n  do {\n    formattedArgsPtr = ppppppppiVar16;\n    intPtr = (int *)((uint)intVar1 >> 3 | (int)intVar2 << 0x1d);\n    intVar2 = (int *)((uint)intVar2 >> 3);\n    result = ((uint)intVar1 & 7) + 0x30;\n    *(char *)formattedArgsPtr = (char)result;\n    ppppppppiVar16 = (int ********)((int)formattedArgsPtr + -1);\n    intVar1 = intPtr;\n  } while (((uint)intPtr | (uint)intVar2) != 0);\n  if (hasFlagHash) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      remainingCharsPtr = (int *******)((int)formattedArgsPtr - (int)formattedArgsPtr);\n    }\n    else {\n      *(undefined *)((int)formattedArgsPtr + -1) = 0x30;\n      formattedArgsPtr = ppppppppiVar16;\n      remainingCharsPtr = (int *******)((int)formattedArgsPtr - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    remainingCharsPtr = (int *******)((int)formattedArgsPtr - (int)formattedArgsPtr);\n  }\nLAB_00082da0:\n  totalPrintedCharsPtr = remainingCharsPtr;\n  if ((int)remainingCharsPtr < (int)currentCharPtr) {\n    totalPrintedCharsPtr = currentCharPtr;\n  }\n  if (signChar != '\\0') {\n    totalPrintedCharsPtr = (int *******)((int)totalPrintedCharsPtr + 1);\n  }\nLAB_00082dba:\n  if (hasFlagZero) {\n    totalPrintedCharsPtr = (int *******)((int)totalPrintedCharsPtr + 2);\n  }\n  if ((formatFlags == 0) &&\n     (remainingChars = (int *******)((int)arg - (int)totalPrintedCharsPtr), 0 < (int)remainingChars)) {\n    if ((int)remainingChars < 0x11) {\n      argIndex = argIndex + 1;\n    }\n    else {\n      do {\n        remainingArgsList = remainingChars;\n        result = argIndex + 1;\n        formattedArgsPtr = formattedArgsPtr + 4;\n        *formattedArgs = (int *******)0x85808;\n        formattedArgs[1] = (int *******)0x10;\n        if (result < 8) {\n          index = argIndex + 2;\n          formattedArgs = formattedArgs + 2;\n          argIndex = result;\n        }\n        else if (formattedArgsPtr == (int *******)0x0) {\n          index = 1;\n          formattedArgs = (int ********)formattedArgsPtr;\n          argIndex = 0;\n        }\n        else {\n          argIndex = result;\n          result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n          if (result != 0) goto LAB_000833de;\n          index = argIndex + 1;\n          formattedArgs = (int ********)formattedArgsPtr;\n        }\n        remainingChars = remainingArgsList + -4;\n      } while (0x10 < (int)remainingChars);\n      remainingChars = remainingArgsList + -4;\n      argIndex = index;\n    }\n    formattedArgsPtr = (int *******)((int)formattedArgsPtr + (int)remainingChars);\n    *formattedArgs = (int *******)0x85808;\n    formattedArgs[1] = remainingChars;\n    if (argIndex < 8) {\n      result = argIndex + 1;\n      formattedArgs = formattedArgs + 2;\n    }\n    else if (formattedArgsPtr == (int *******)0x0) {\n      result = 1;\n      argIndex = 0;\n      formattedArgs = (int ********)formattedArgsPtr;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n      if (result != 0) goto LAB_000833de;\n      result = argIndex + 1;\n      formattedArgs = (int ********)formattedArgsPtr;\n    }\n  }\n  else {\n    result = argIndex + 1;\n  }\n  index = result;\n  if (signChar != '\\0') {\n    formattedArgsPtr = (int *******)((int)formattedArgsPtr + 1);\n    index = 1;\n    *formattedArgs = (int *******)&signChar;\n    formattedArgs[1] = (int *******)0x1;\n    argIndex = result;\n    if (result < 8) {\n      index = result + 1;\n      formattedArgs = formattedArgs + 2;\n    }\n    else if (formattedArgsPtr == (int *******)0x0) {\n      argIndex = 0;\n      formattedArgs = (int ********)formattedArgsPtr;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n      if (result != 0) goto LAB_000833de;\n      index = argIndex + 1;\n      formattedArgs = (int ********)formattedArgsPtr;\n    }\n  }\n  result = index;\n  argIndex = argIndex;\n  if (hasFlagZero) {\n    formattedArgsPtr = (int *******)((int)formattedArgsPtr + 2);\n    *formattedArgs = (int *******)&leadingZeroChar;\n    formattedArgs[1] = (int *******)0x2;\n    if (index < 8) {\n      result = index + 1;\n      argIndex = index;\n      formattedArgs = formattedArgs + 2;\n    }\n    else if (formattedArgsPtr == (int *******)0x0) {\n      result = 1;\n      argIndex = 0;\n      formattedArgs = (int ********)formattedArgsPtr;\n    }\n    else {\n      argIndex = index;\n      result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n      if (result != 0) goto LAB_000833de;\n      result = argIndex + 1;\n      argIndex = argIndex;\n      formattedArgs = (int ********)formattedArgsPtr;\n    }\n  }\n  argIndex = argIndex;\n  if ((formatFlags == 0x80) &&\n     (remainingChars = (int *******)((int)arg - (int)totalPrintedCharsPtr), 0 < (int)remainingChars)) {\n    if (0x10 < (int)remainingChars) {\n      do {\n        while( true ) {\n          remainingArgsList = remainingChars;\n          argIndex = argIndex + 1;\n          formattedArgsPtr = formattedArgsPtr + 4;\n          *formattedArgs = (int *******)&DAT_00085848;\n          formattedArgs[1] = (int *******)0x10;\n          if (7 < argIndex) break;\n          result = argIndex + 2;\n          formattedArgs = formattedArgs + 2;\nLAB_0008348e:\n          argIndex = argIndex;\n          remainingChars = remainingArgsList + -4;\n          if ((int)(remainingArgsList + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (formattedArgsPtr != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n          if (result == 0) {\n            result = argIndex + 1;\n            formattedArgs = (int ********)formattedArgsPtr;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        argIndex = 0;\n        remainingChars = remainingArgsList + -4;\n        formattedArgs = (int ********)formattedArgsPtr;\n      } while (0x10 < (int)(remainingArgsList + -4));\nLAB_000834b4:\n      remainingChars = remainingArgsList + -4;\n    }\n    formattedArgsPtr = (int *******)((int)formattedArgsPtr + (int)remainingChars);\n    *formattedArgs = (int *******)&DAT_00085848;\n    formattedArgs[1] = remainingChars;\n    argIndex = result;\n    if (result < 8) {\n      result = result + 1;\n      formattedArgs = formattedArgs + 2;\n    }\n    else if (formattedArgsPtr == (int *******)0x0) {\n      result = 1;\n      argIndex = 0;\n      formattedArgs = (int ********)formattedArgsPtr;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n      if (result != 0) goto LAB_000833de;\n      result = argIndex + 1;\n      formattedArgs = (int ********)formattedArgsPtr;\n    }\n  }\n  currentCharPtr = (int *******)((int)currentCharPtr - (int)remainingCharsPtr);\n  ppppppppiVar16 = (int ********)formattedArgsPtr;\n  if ((int)currentCharPtr < 1) {\nLAB_000832c6:\n    formattedArgsPtr = (int *******)((int)formattedArgsPtr + (int)remainingCharsPtr);\n    *formattedArgs = (int *******)formattedArgsPtr;\n    formattedArgs[1] = remainingCharsPtr;\n    remainingCharsPtr = formattedArgsPtr;\n    argIndex = result;\n    if (result < 8) goto LAB_0008345a;\n    if (formattedArgsPtr == (int *******)0x0) {\n      argIndex = 0;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    index = argIndex;\n    if (0x10 < (int)currentCharPtr) {\n      do {\n        while( true ) {\n          remainingChars = currentCharPtr;\n          argIndex = index + 1;\n          formattedArgsPtr = formattedArgsPtr + 4;\n          *formattedArgs = (int *******)&DAT_00085848;\n          formattedArgs[1] = (int *******)0x10;\n          if (7 < argIndex) break;\n          result = index + 2;\n          formattedArgs = formattedArgs + 2;\nLAB_00083282:\n          index = argIndex;\n          currentCharPtr = remainingChars + -4;\n          if ((int)(remainingChars + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (formattedArgsPtr != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n          if (result == 0) {\n            result = argIndex + 1;\n            formattedArgs = (int ********)formattedArgsPtr;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        formattedArgs = (int ********)formattedArgsPtr;\n        index = 0;\n        currentCharPtr = remainingChars + -4;\n      } while (0x10 < (int)(remainingChars + -4));\nLAB_000832aa:\n      currentCharPtr = remainingChars + -4;\n    }\n    formattedArgsPtr = (int *******)((int)formattedArgsPtr + (int)currentCharPtr);\n    *formattedArgs = (int *******)&DAT_00085848;\n    formattedArgs[1] = currentCharPtr;\n    if (result < 8) {\n      result = result + 1;\n      formattedArgs = formattedArgs + 2;\n      goto LAB_000832c6;\n    }\n    if (formattedArgsPtr != (int *******)0x0) {\n      argIndex = result;\n      result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n      if (result != 0) goto LAB_000833de;\n      result = argIndex + 1;\n      formattedArgs = (int ********)formattedArgsPtr;\n      goto LAB_000832c6;\n    }\n    bufferPtrArray[0] = remainingCharsPtr;\n    argIndex = 1;\n    formattedArgs = (int ********)formattedArgsPtr;\n    formattedArgsPtr = (undefined  [4])formattedArgsPtr;\nLAB_0008345a:\n    ppppppppiVar16 = formattedArgs + 2;\n    formattedArgsPtr = remainingCharsPtr;\n  }\n  if (((formatFlags & 4) != 0) &&\n     (currentCharPtr = (int *******)((int)arg - (int)totalPrintedCharsPtr), 0 < (int)currentCharPtr)) {\n    result = argIndex;\n    if ((int)currentCharPtr < 0x11) {\n      index = argIndex + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argIndex = result + 1;\n          formattedArgsPtr = formattedArgsPtr + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < argIndex) break;\n          index = result + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          currentCharPtr = currentCharPtr + -4;\n          result = argIndex;\n          if ((int)currentCharPtr < 0x11) goto LAB_0008333e;\n        }\n        if (formattedArgsPtr != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n          if (result == 0) {\n            index = argIndex + 1;\n            ppppppppiVar16 = (int ********)formattedArgsPtr;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        currentCharPtr = currentCharPtr + -4;\n        index = 1;\n        result = 0;\n        ppppppppiVar16 = (int ********)formattedArgsPtr;\n      } while (0x10 < (int)currentCharPtr);\n    }\nLAB_0008333e:\n    formattedArgsPtr = (int *******)((int)formattedArgsPtr + (int)currentCharPtr);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = currentCharPtr;\n    argIndex = index;\n    if (7 < index) {\n      if (formattedArgsPtr == (int *******)0x0) {\n        if ((int)totalPrintedCharsPtr < (int)arg) {\n          totalPrintedCharsPtr = arg;\n        }\n        totalPrintedChars = totalPrintedChars + (int)totalPrintedCharsPtr;\n        goto LAB_00083422;\n      }\n      result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)totalPrintedCharsPtr < (int)arg) {\n    totalPrintedCharsPtr = arg;\n  }\n  totalPrintedChars = totalPrintedChars + (int)totalPrintedCharsPtr;\n  if ((formattedArgsPtr != (int *******)0x0) &&\n     (result = __sprint_r_part_0(buffer,formatString,&formattedArgsPtr), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  argIndex = 0;\n  formattedArgs = (int ********)formattedArgsPtr;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = currentChar - 0x30;\n  arg = (int *******)0x0;\n  currentCharPtr = argsList;\n  do {\n    argsList = (int *******)((int)currentCharPtr + 1);\n    currentChar = (uint)*(byte *)currentCharPtr;\n    arg = (int *******)(digit + (int)arg * 10);\n    digit = currentChar - 0x30;\n    currentCharPtr = argsList;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  currentChar = (uint)*(byte *)argsList;\n  if (signChar == '\\0') {\n    signChar = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "formatted_print_00082b38",
                "param_1": "buffer",
                "param_2": "formatString",
                "param_3": "argsList",
                "param_4": "argsPtr",
                "bVar1": "isLeadingZero",
                "bVar2": "hasFlagPlus",
                "bVar3": "hasFlagHash",
                "cVar4": "signChar",
                "bVar5": "hasFlagZero",
                "ppppppppiVar6": "formattedArgs",
                "piVar7": "intPtr",
                "iVar8": "result",
                "cVar9": "formatChar",
                "pppppppiVar10": "currentCharPtr",
                "uVar11": "digit",
                "ppiVar12": "argPtr",
                "uVar13": "formatFlags",
                "uVar14": "currentChar",
                "iVar15": "index",
                "iVar17": "argIndex",
                "pppppppiVar18": "remainingChars",
                "piVar19": "intVar1",
                "pppppppiVar20": "arg",
                "uVar21": "tempVar",
                "piVar22": "intVar2",
                "pppppppiVar23": "remainingArgsList",
                "uVar24": "tempVar2",
                "ppppppppiVar25": "formattedArgsPtr",
                "bVar26": "shouldNegate",
                "lVar27": "longVar",
                "local_dc": "totalPrintedCharsPtr",
                "local_d4": "remainingCharsPtr",
                "local_c8": "argsPtrPtr",
                "local_c4": "totalPrintedChars",
                "local_c0": "hexadecimalDigits",
                "local_a1": "signChar",
                "local_a0": "leadingZeroChar",
                "local_9f": "fillChar",
                "local_9c": "formattedArgsPtr",
                "local_98": "argIndex",
                "local_94": "formattedArgsPtr",
                "local_90": "hexadecimalChar",
                "cStack_6a": "buffer",
                "local_69": "currentChar",
                "local_68": "formattedArgsPtr",
                "local_64": "bufferPtrArray"
            },
            "calling": [
                "__sbprintf"
            ],
            "called": [
                "__sprint_r.part.0",
                "strlen",
                "__sbprintf",
                "memchr",
                "__aeabi_uldivmod",
                "__sinit",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "print_and_flush_0008378c",
            "code": "\nint print_and_flush_0008378c(undefined4 output_stream,int data_address)\n\n{\n  int printf_retval;\n  int fflush_retval;\n  undefined *buffer_array [2];\n  undefined4 buffer_size_1;\n  ushort modified_short;\n  undefined2 short_value;\n  undefined *buffer;\n  undefined4 buffer_size_2;\n  undefined4 zero;\n  undefined4 val_1;\n  undefined4 val_2;\n  undefined4 val_3;\n  undefined temp_buffer [1024];\n  \n  val_3 = *(undefined4 *)(data_address + 100);\n  val_1 = *(undefined4 *)(data_address + 0x1c);\n  short_value = *(undefined2 *)(data_address + 0xe);\n  val_2 = *(undefined4 *)(data_address + 0x24);\n  buffer_array[0] = temp_buffer;\n  modified_short = *(ushort *)(data_address + 0xc) & 0xfffd;\n  buffer_size_1 = 0x400;\n  buffer_size_2 = 0x400;\n  zero = 0;\n  buffer = buffer_array[0];\n  printf_retval = _vfiprintf_r(output_stream,buffer_array);\n  if ((-1 < printf_retval) && (fflush_retval = _fflush_r(output_stream,buffer_array), fflush_retval != 0)) {\n    printf_retval = -1;\n  }\n  if ((int)((uint)modified_short << 0x19) < 0) {\n    *(ushort *)(data_address + 0xc) = *(ushort *)(data_address + 0xc) | 0x40;\n  }\n  return printf_retval;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "print_and_flush_0008378c",
                "param_1": "output_stream",
                "param_2": "data_address",
                "iVar1": "printf_retval",
                "iVar2": "fflush_retval",
                "local_488": "buffer_array",
                "local_480": "buffer_size_1",
                "local_47c": "modified_short",
                "local_47a": "short_value",
                "local_478": "buffer",
                "local_474": "buffer_size_2",
                "local_470": "zero",
                "local_46c": "val_1",
                "local_464": "val_2",
                "local_424": "val_3",
                "auStack_420": "temp_buffer"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "_fflush_r",
                "_vfiprintf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "handle_data_processing_00083808",
            "code": "\nundefined4 handleDataProcessing_00083808(undefined4 *result,int *data)\n\n{\n  int tempVar1;\n  int tempVar2;\n  uint unsignedVar3;\n  ushort unsignedVar4;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    __sinit();\n  }\n  unsignedVar4 = *(ushort *)(data + 3);\n  unsignedVar3 = (uint)unsignedVar4;\n  if ((int)(unsignedVar3 << 0x1c) < 0) {\n    tempVar2 = data[4];\n  }\n  else {\n    if (-1 < (int)(unsignedVar3 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = unsignedVar4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(unsignedVar3 << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          _free_r(result);\n          unsignedVar4 = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      tempVar2 = data[4];\n      unsignedVar4 = unsignedVar4 & 0xffdb;\n      *data = tempVar2;\n      data[1] = 0;\n    }\n    else {\n      tempVar2 = data[4];\n    }\n    *(ushort *)(data + 3) = unsignedVar4 | 8;\n    unsignedVar3 = (uint)(unsignedVar4 | 8);\n  }\n  if ((tempVar2 == 0) && ((unsignedVar3 & 0x280) != 0x200)) {\n    __smakebuf_r(result,data);\n    unsignedVar3 = (uint)*(ushort *)(data + 3);\n    tempVar2 = data[4];\n  }\n  if ((unsignedVar3 & 1) == 0) {\n    tempVar1 = 0;\n    if (-1 < (int)(unsignedVar3 << 0x1e)) {\n      tempVar1 = data[5];\n    }\n    data[2] = tempVar1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((tempVar2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "handle_data_processing_00083808",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "unsignedVar3",
                "uVar4": "unsignedVar4"
            },
            "calling": [
                "__sfvwrite_r",
                "__swbuf_r",
                "_vfiprintf_r"
            ],
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "identity_function_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "malloc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "decompress_data_00083adc",
            "code": "\nundefined4 decompress_data_00083adc(int *data,int *compressed_data)\n\n{\n  int *ptr_var1;\n  int var2;\n  ushort flag;\n  uint flag2;\n  int var5;\n  code *function_ptr;\n  undefined4 unaff_var4;\n  int var7;\n  \n  if ((data != (int *)0x0) && (data[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(compressed_data + 3) == 0) {\n    return 0;\n  }\n  flag = *(ushort *)(compressed_data + 3);\n  if ((int)((uint)flag << 0x1c) < 0) {\n    var7 = compressed_data[4];\n    if (var7 == 0) {\n      return 0;\n    }\n    var2 = *compressed_data;\n    if ((flag & 3) == 0) {\n      var5 = compressed_data[5];\n    }\n    else {\n      var5 = 0;\n    }\n    *compressed_data = var7;\n    var2 = var2 - var7;\n    compressed_data[2] = var5;\n    do {\n      if (var2 < 1) {\n        return 0;\n      }\n      var5 = (*(code *)compressed_data[9])(data,compressed_data[7],var7,var2,unaff_var4);\n      var2 = var2 - var5;\n      var7 = var7 + var5;\n    } while (0 < var5);\nLAB_00083a54:\n    *(ushort *)(compressed_data + 3) = *(ushort *)(compressed_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(compressed_data + 3) = flag | 0x800;\n  if ((compressed_data[1] < 1) && (compressed_data[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)compressed_data[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  flag2 = (uint)(flag | 0x800);\n  var7 = *data;\n  *data = 0;\n  if ((flag & 0x1000) == 0) {\n    var2 = (*function_ptr)(data,compressed_data[7],flag2 & 0x1000,1);\n    if ((var2 == -1) && (var5 = *data, var5 != 0)) {\n      if ((var5 == 0x1d) || (var5 == 0x16)) {\n        *data = var7;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    flag2 = (uint)*(ushort *)(compressed_data + 3);\n    function_ptr = (code *)compressed_data[10];\n  }\n  else {\n    var2 = compressed_data[0x14];\n  }\n  if (((int)(flag2 << 0x1d) < 0) && (var2 = var2 - compressed_data[1], compressed_data[0xc] != 0)) {\n    var2 = var2 - compressed_data[0xf];\n  }\n  var2 = (*function_ptr)(data,compressed_data[7],var2,0);\n  if (var2 == -1) {\n    var5 = *data;\n    if (var5 != 0) {\n      if ((var5 != 0x1d) && (var5 != 0x16)) {\n        *(ushort *)(compressed_data + 3) = *(ushort *)(compressed_data + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(compressed_data + 3) = *(ushort *)(compressed_data + 3) & 0xf7ff;\n      *compressed_data = compressed_data[4];\n      compressed_data[1] = 0;\n      goto LAB_00083a00;\n    }\n    flag = *(ushort *)(compressed_data + 3) & 0xf7ff;\n    compressed_data[1] = 0;\n    *(ushort *)(compressed_data + 3) = flag;\n    *compressed_data = compressed_data[4];\n  }\n  else {\n    flag = *(ushort *)(compressed_data + 3) & 0xf7ff;\n    *compressed_data = compressed_data[4];\n    *(ushort *)(compressed_data + 3) = flag;\n    compressed_data[1] = 0;\n  }\n  if ((int)((uint)flag << 0x13) < 0) {\n    compressed_data[0x14] = var2;\n  }\nLAB_00083a00:\n  ptr_var1 = (int *)compressed_data[0xc];\n  *data = var7;\n  if (ptr_var1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr_var1 != compressed_data + 0x10) {\n    _free_r(data);\n  }\n  compressed_data[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "decompress_data_00083adc",
                "param_1": "data",
                "param_2": "compressed_data",
                "piVar1": "ptr_var1",
                "iVar2": "var2",
                "uVar3": "flag",
                "uVar4": "flag2",
                "iVar5": "var5",
                "pcVar6": "function_ptr",
                "unaff_r4": "unaff_var4",
                "iVar7": "var7"
            },
            "calling": [
                "__sfvwrite_r",
                "__sbprintf",
                "fclose",
                "__swbuf_r"
            ],
            "called": [
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructures)\n\n{\n  undefined4 *ptrArray1;\n  undefined4 *ptrArray2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    ptrArray1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(ptrArray1 + 3) = 4;\n    *ptrArray1 = 0;\n    ptrArray1[1] = 0;\n    ptrArray1[2] = 0;\n    ptrArray1[0x19] = 0;\n    *(undefined2 *)((int)ptrArray1 + 0xe) = 0;\n    ptrArray1[4] = 0;\n    ptrArray1[5] = 0;\n    ptrArray1[6] = 0;\n    memset(ptrArray1 + 0x17,0,8);\n    ptrArray2 = *(undefined4 **)(dataStructures + 8);\n    ptrArray1[7] = ptrArray1;\n    ptrArray1[8] = &LAB_00084440_1;\n    ptrArray1[9] = 0x84465;\n    ptrArray1[10] = 0x8449d;\n    ptrArray1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptrArray2 + 0xe) = 1;\n    *(undefined2 *)(ptrArray2 + 3) = 9;\n    *ptrArray2 = 0;\n    ptrArray2[1] = 0;\n    ptrArray2[2] = 0;\n    ptrArray2[0x19] = 0;\n    ptrArray2[4] = 0;\n    ptrArray2[5] = 0;\n    ptrArray2[6] = 0;\n    memset(ptrArray2 + 0x17,0,8);\n    ptrArray1 = *(undefined4 **)(dataStructures + 0xc);\n    ptrArray2[7] = ptrArray2;\n    ptrArray2[8] = &LAB_00084440_1;\n    ptrArray2[9] = 0x84465;\n    ptrArray2[10] = 0x8449d;\n    ptrArray2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptrArray1 + 3) = 0x12;\n    *(undefined2 *)((int)ptrArray1 + 0xe) = 2;\n    *ptrArray1 = 0;\n    ptrArray1[1] = 0;\n    ptrArray1[2] = 0;\n    ptrArray1[0x19] = 0;\n    ptrArray1[4] = 0;\n    ptrArray1[5] = 0;\n    ptrArray1[6] = 0;\n    memset(ptrArray1 + 0x17,0,8);\n    ptrArray1[7] = ptrArray1;\n    ptrArray1[8] = &LAB_00084440_1;\n    ptrArray1[9] = 0x84465;\n    ptrArray1[10] = 0x8449d;\n    ptrArray1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructures",
                "puVar1": "ptrArray1",
                "puVar2": "ptrArray2"
            },
            "calling": [
                "fclose",
                "_fflush_r",
                "__swbuf_r",
                "_vfiprintf_r",
                "__swsetup_r"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "fclose"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "convert_and_write_to_stream_00083c40",
            "code": "\nuint convertAndWriteToStream_00083c40(undefined4 stream,uint value,byte **output)\n\n{\n  int maxBytes;\n  uint result;\n  uint convertedValue;\n  byte *streamEnd;\n  uint index;\n  byte tempValue;\n  byte tempArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(output + 3) << 0x12)) {\n    *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x2000;\n    output[0x19] = (byte *)((uint)output[0x19] | 0x2000);\n  }\n  maxBytes = __locale_mb_cur_max();\n  if ((maxBytes == 1) && (value - 1 < 0xff)) {\n    convertedValue = value & 0xff;\n    tempValue = (byte)convertedValue;\n    result = 1;\n  }\n  else {\n    result = _wcrtomb_r(stream,&tempValue,value,output + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return value;\n    }\n    convertedValue = (uint)tempValue;\n  }\n  index = 0;\n  do {\n    streamEnd = output[2] + -1;\n    output[2] = streamEnd;\n    if ((int)streamEnd < 0) {\n      if ((int)output[6] <= (int)streamEnd) {\n        **output = (byte)convertedValue;\n        streamEnd = *output;\n        convertedValue = (uint)*streamEnd;\n        if (convertedValue != 10) goto LAB_00083c90;\n      }\n      maxBytes = __swbuf_r(stream,convertedValue,output);\n      if (maxBytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **output = (byte)convertedValue;\n      streamEnd = *output;\nLAB_00083c90:\n      *output = streamEnd + 1;\n    }\n    if (result <= index + 1) {\n      return value;\n    }\n    convertedValue = (uint)tempArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "convert_and_write_to_stream_00083c40",
                "param_1": "stream",
                "param_2": "value",
                "param_3": "output",
                "iVar1": "maxBytes",
                "uVar2": "result",
                "uVar3": "convertedValue",
                "pbVar4": "streamEnd",
                "uVar5": "index",
                "local_1c": "tempValue",
                "abStack_1b": "tempArray"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "_wcrtomb_r",
                "__swbuf_r",
                "__locale_mb_cur_max"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "allocate_memory_00083d00",
            "code": "\nundefined4 allocate_memory_00083d00(undefined4 size,int alignment_offset)\n\n{\n  int allocated_memory;\n  uint rel_info;\n  int adjusted_memory;\n  \n  acquire_lock();\n  rel_info = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n  adjusted_memory = ((rel_info - alignment_offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_memory) {\n    allocated_memory = increment_heap(size,0);\n    if (allocated_memory == rel_array[141].r_info + rel_info) {\n      allocated_memory = increment_heap(size,-adjusted_memory);\n      if (allocated_memory != -1) {\n        DAT_20071194 = DAT_20071194 - adjusted_memory;\n        *(uint *)(rel_array[141].r_info + 4) = rel_info - adjusted_memory | 1;\n        release_lock(size);\n        return 1;\n      }\n      adjusted_memory = increment_heap(size,0);\n      if (0xf < (int)(adjusted_memory - rel_array[141].r_info)) {\n        DAT_20071194 = adjusted_memory - rel_array[270].r_offset;\n        *(uint *)(rel_array[141].r_info + 4) =\n             adjusted_memory - rel_array[141].r_info | 1;\n      }\n    }\n  }\n  release_lock(size);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "allocate_memory_00083d00",
                "param_1": "size",
                "param_2": "alignment_offset",
                "iVar1": "allocated_memory",
                "uVar2": "rel_info",
                "iVar3": "adjusted_memory",
                "__malloc_lock": "acquire_lock",
                "__malloc_unlock": "release_lock",
                "_sbrk_r": "increment_heap",
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "dword": "uint"
            },
            "calling": [
                "_free_r"
            ],
            "called": [
                "_sbrk_r",
                "__malloc_lock",
                "__malloc_unlock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "process_relocation_entries_00083d9c",
            "code": "\nvoid processRelocationEntries_00083d9c(undefined4 lock,int entryCount)\n\n{\n  int nextEntry;\n  bool isLastEntry;\n  uint entryFlags;\n  dword currentEntry;\n  int nextRelocation;\n  uint entrySize;\n  dword previousEntry;\n  uint totalSize;\n  dword nextRel;\n  \n  if (entryCount == 0) {\n    return;\n  }\n  __malloc_lock();\n  entryFlags = *(uint *)(entryCount + -4);\n  previousEntry = entryCount - 8;\n  entrySize = entryFlags & 0xfffffffe;\n  currentEntry = previousEntry + entrySize;\n  totalSize = *(uint *)(currentEntry + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentEntry) {\n    totalSize = totalSize + entrySize;\n    if (-1 < (int)(entryFlags << 0x1f)) {\n      previousEntry = previousEntry - *(int *)(entryCount + -8);\n      nextRelocation = *(int *)(previousEntry + 0xc);\n      nextEntry = *(int *)(previousEntry + 8);\n      totalSize = totalSize + *(int *)(entryCount + -8);\n      *(int *)(nextEntry + 0xc) = nextRelocation;\n      *(int *)(nextRelocation + 8) = nextEntry;\n    }\n    currentEntry = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(previousEntry + 4) = totalSize | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = previousEntry;\n    if (currentEntry <= totalSize) {\n      _malloc_trim_r(lock,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(currentEntry + 4) = totalSize;\n    if ((entryFlags & 1) == 0) {\n      previousEntry = previousEntry - *(int *)(entryCount + -8);\n      nextEntry = *(int *)(previousEntry + 8);\n      entrySize = entrySize + *(int *)(entryCount + -8);\n      if (nextEntry == 0x2007046c) {\n        isLastEntry = true;\n      }\n      else {\n        nextRelocation = *(int *)(previousEntry + 0xc);\n        *(int *)(nextEntry + 0xc) = nextRelocation;\n        *(int *)(nextRelocation + 8) = nextEntry;\n        isLastEntry = false;\n      }\n    }\n    else {\n      isLastEntry = false;\n    }\n    if (-1 < *(int *)(currentEntry + totalSize + 4) << 0x1f) {\n      entrySize = entrySize + totalSize;\n      nextEntry = *(int *)(currentEntry + 8);\n      if ((!isLastEntry) && (nextEntry == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = previousEntry;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = previousEntry;\n        *(undefined4 *)(previousEntry + 0xc) = 0x2007046c;\n        *(undefined4 *)(previousEntry + 8) = 0x2007046c;\n        *(uint *)(previousEntry + 4) = entrySize | 1;\n        *(uint *)(previousEntry + entrySize) = entrySize;\n        goto LAB_00083e30;\n      }\n      nextRelocation = *(int *)(currentEntry + 0xc);\n      *(int *)(nextEntry + 0xc) = nextRelocation;\n      *(int *)(nextRelocation + 8) = nextEntry;\n    }\n    *(uint *)(previousEntry + 4) = entrySize | 1;\n    *(uint *)(previousEntry + entrySize) = entrySize;\n    if (!isLastEntry) {\n      if (entrySize < 0x200) {\n        entryFlags = entrySize & 0xfffffff8;\n        nextEntry = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryFlags);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(entrySize >> 3) >> 2 & 0xffU);\n        *(int *)(previousEntry + 8) = nextEntry;\n        *(uint *)(previousEntry + 0xc) = entryFlags + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryFlags) = previousEntry;\n        *(dword *)(nextEntry + 0xc) = previousEntry;\n        __malloc_unlock(lock);\n        return;\n      }\n      entryFlags = entrySize >> 9;\n      if (entryFlags < 5) {\n        nextEntry = (entrySize >> 6) + 0x38;\n        nextRelocation = nextEntry * 2;\n      }\n      else if (entryFlags < 0x15) {\n        nextEntry = entryFlags + 0x5b;\n        nextRelocation = nextEntry * 2;\n      }\n      else if (entryFlags < 0x55) {\n        nextEntry = (entrySize >> 0xc) + 0x6e;\n        nextRelocation = nextEntry * 2;\n      }\n      else if (entryFlags < 0x155) {\n        nextEntry = (entrySize >> 0xf) + 0x77;\n        nextRelocation = nextEntry * 2;\n      }\n      else if (entryFlags < 0x555) {\n        nextEntry = (entrySize >> 0x12) + 0x7c;\n        nextRelocation = nextEntry * 2;\n      }\n      else {\n        nextRelocation = 0xfc;\n        nextEntry = 0x7e;\n      }\n      nextRel = nextRelocation * 4 + 0x20070464;\n      currentEntry = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[nextRelocation];\n      if (currentEntry == nextRel) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (nextEntry >> 2 & 0xffU);\n        nextRel = currentEntry;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentEntry + 4) & 0xfffffffc) <= entrySize) break;\n          currentEntry = *(dword *)(currentEntry + 8);\n        } while (nextRel != currentEntry);\n        nextRel = *(dword *)(currentEntry + 0xc);\n      }\n      *(dword *)(previousEntry + 0xc) = nextRel;\n      *(dword *)(previousEntry + 8) = currentEntry;\n      *(dword *)(nextRel + 8) = previousEntry;\n      *(dword *)(currentEntry + 0xc) = previousEntry;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(lock);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "process_relocation_entries_00083d9c",
                "param_1": "lock",
                "param_2": "entryCount",
                "iVar1": "nextEntry",
                "bVar2": "isLastEntry",
                "uVar3": "entryFlags",
                "dVar4": "currentEntry",
                "iVar5": "nextRelocation",
                "uVar6": "entrySize",
                "dVar7": "previousEntry",
                "uVar8": "totalSize",
                "dVar9": "nextRel"
            },
            "calling": [
                "free",
                "__sfvwrite_r",
                "_realloc_r",
                "fclose",
                "_fflush_r",
                "__swsetup_r",
                "_malloc_r"
            ],
            "called": [
                "__malloc_lock",
                "__malloc_unlock",
                "_malloc_trim_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *result,uint *input,uint **buffer)\n\n{\n  int returnValue;\n  uint count;\n  uint temp;\n  ushort flag;\n  uint value;\n  uint *ptr1;\n  uint *ptr2;\n  uint length;\n  uint size;\n  uint var1;\n  uint var2;\n  uint localVar;\n  \n  if (buffer[2] != (uint *)0x0) {\n    flag = *(ushort *)(input + 3);\n    value = (uint)flag;\n    if (((int)(value << 0x1c) < 0) && (input[4] != 0)) {\n      ptr2 = *buffer;\n    }\n    else {\n      returnValue = helperFunction1(result,input);\n      if (returnValue != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input + 3);\n      value = (uint)flag;\n      ptr2 = *buffer;\n    }\n    if ((flag & 2) == 0) {\n      count = value & 2;\n      var1 = count;\n      length = count;\n      localVar = count;\n      if ((value & 1) == 0) {\n        count = 0;\n        var1 = 0;\n        while( true ) {\n          while (count == 0) {\n            var1 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            count = *ptr1;\n          }\n          length = input[2];\n          if ((int)(value << 0x16) < 0) {\n            if (count < length) {\n              value = *input;\n              length = count;\n            }\n            else if ((value & 0x480) == 0) {\n              value = *input;\n            }\n            else {\n              returnValue = *input - input[4];\n              length = returnValue + 1 + count;\n              size = (int)(input[5] * 3) / 2;\n              if (length <= size) {\n                length = size;\n              }\n              if ((int)(value << 0x15) < 0) {\n                size = helperFunction2(result,length);\n                if (size == 0) {\n                  *result = 0xc;\n                  flag = *(ushort *)(input + 3);\n                  goto LAB_00084030;\n                }\n                helperFunction3(size,input[4],returnValue);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size = helperFunction4(result);\n                if (size == 0) {\n                  helperFunction5(result,input[4]);\n                  flag = *(ushort *)(input + 3) & 0xff7f;\n                  *result = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              value = size + returnValue;\n              input[4] = size;\n              input[5] = length;\n              *input = value;\n              input[2] = length - returnValue;\n              length = count;\n            }\n            helperFunction6(value,var1,length);\n            input[2] = input[2] - length;\n            *input = *input + length;\n            length = count;\n          }\n          else if ((input[4] < *input) || (value = input[5], count < value)) {\n            if (count < length) {\n              length = count;\n            }\n            helperFunction6(*input,var1,length);\n            value = input[2];\n            input[2] = value - length;\n            *input = *input + length;\n            if ((value - length == 0) && (returnValue = helperFunction7(result,input), returnValue != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            length = 0x7fffffff;\n            if (count < 0x7fffffff) {\n              length = count;\n            }\n            length = (*(code *)input[9])(result,input[7],var1,(length / value) * value);\n            if ((int)length < 1) goto LAB_0008402e;\n          }\n          ptr1 = buffer[2];\n          var1 = var1 + length;\n          count = count - length;\n          buffer[2] = (uint *)((int)ptr1 - length);\n          if ((uint *)((int)ptr1 - length) == (uint *)0x0) break;\n          value = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (count == 0) {\n            length = *ptr2;\n            count = ptr2[1];\n            localVar = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (localVar == 0) {\n            returnValue = memchr(length,10,count);\n            if (returnValue == 0) {\n              var1 = count + 1;\n              localVar = 1;\n            }\n            else {\n              var1 = (returnValue + 1) - length;\n              localVar = 1;\n            }\n          }\n          size = *input;\n          value = var1;\n          if (count <= var1) {\n            value = count;\n          }\n          temp = input[5];\n          if ((input[4] < size) && (var2 = input[2] + temp, (int)var2 < (int)value)) {\n            helperFunction6(size,length,var2);\n            *input = *input + var2;\n            returnValue = helperFunction7(result,input);\n            if (returnValue != 0) goto LAB_0008402e;\n          }\n          else if ((int)value < (int)temp) {\n            helperFunction6(size,length,value);\n            input[2] = input[2] - value;\n            *input = value + *input;\n            var2 = value;\n          }\n          else {\n            var2 = (*(code *)input[9])(result,input[7],length,temp);\n            if ((int)var2 < 1) goto LAB_0008402e;\n          }\n          var1 = var1 - var2;\n          if (var1 == 0) {\n            returnValue = helperFunction7(result,input);\n            if (returnValue != 0) goto LAB_0008402e;\n            localVar = 0;\n          }\n          ptr1 = buffer[2];\n          length = length + var2;\n          count = count - var2;\n          buffer[2] = (uint *)((int)ptr1 - var2);\n        } while ((uint *)((int)ptr1 - var2) != (uint *)0x0);\n      }\n    }\n    else {\n      count = 0;\n      value = 0;\n      do {\n        while( true ) {\n          var1 = value;\n          if (0x7ffffbff < value) {\n            var1 = 0x7ffffc00;\n          }\n          if (value != 0) break;\n          count = *ptr2;\n          value = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        returnValue = (*(code *)input[9])(result,input[7],count,var1);\n        if (returnValue < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(input + 3);\nLAB_00084030:\n          *(ushort *)(input + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = buffer[2];\n        count = count + returnValue;\n        value = value - returnValue;\n        buffer[2] = (uint *)((int)ptr1 - returnValue);\n      } while ((uint *)((int)ptr1 - returnValue) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "result",
                "param_2": "input",
                "param_3": "buffer",
                "iVar1": "returnValue",
                "uVar2": "count",
                "uVar3": "temp",
                "uVar4": "flag",
                "uVar5": "value",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "length",
                "uVar9": "size",
                "uVar10": "var1",
                "uVar11": "var2",
                "local_2c": "localVar",
                "__swsetup_r": "helperFunction1",
                "_malloc_r": "helperFunction2",
                "memcpy": "helperFunction3",
                "_realloc_r": "helperFunction4",
                "_free_r": "helperFunction5",
                "memmove": "helperFunction6",
                "_fflush_r": "helperFunction7"
            },
            "calling": [
                "__sprint_r.part.0"
            ],
            "called": [
                "memmove",
                "_realloc_r",
                "memchr",
                "_free_r",
                "memcpy",
                "_fflush_r",
                "__swsetup_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_constant_value_00084290",
            "code": "\nuint32_t getConstantValue_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_constant_value_00084290",
                "undefined4": "uint32_t"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return Elf32_Rel_ARRAY_20070000[274].relocation_info;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "r_info": "relocation_info"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "initialize_file_000842a4",
            "code": "\nvoid initializeFile_000842a4(int fileDescriptor,int *fileInfo)\n\n{\n  ushort filePermission;\n  int statResult;\n  int allocationResult;\n  uint filePermission2;\n  bool isExecutable;\n  undefined statBuffer [4];\n  uint fileMode;\n  \n  filePermission = *(ushort *)(fileInfo + 3);\n  filePermission2 = (uint)filePermission;\n  if ((int)(filePermission2 << 0x1e) < 0) {\n    *fileInfo = (int)fileInfo + 0x43;\n    fileInfo[4] = (int)fileInfo + 0x43;\n    fileInfo[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)fileInfo + 0xe)) {\n    statResult = _fstat_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe),statBuffer);\n    if (-1 < statResult) {\n      isExecutable = (fileMode & 0xf000) == 0x2000;\n      if (((fileMode & 0xf000) == 0x8000) && (fileInfo[10] == 0x8449d)) {\n        statResult = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x400;\n        fileInfo[0x13] = 0x400;\n      }\n      else {\n        statResult = 0x400;\n        *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    filePermission = *(ushort *)(fileInfo + 3);\n    filePermission2 = (uint)filePermission;\n  }\n  *(ushort *)(fileInfo + 3) = filePermission | 0x800;\n  if ((filePermission2 & 0x80) == 0) {\n    statResult = 0x400;\n  }\n  else {\n    statResult = 0x40;\n  }\n  isExecutable = false;\nLAB_00084300:\n  allocationResult = _malloc_r(fileDescriptor,statResult);\n  filePermission = *(ushort *)(fileInfo + 3);\n  if (allocationResult == 0) {\n    if (-1 < (int)((uint)filePermission << 0x16)) {\n      *(ushort *)(fileInfo + 3) = filePermission | 2;\n      *fileInfo = (int)fileInfo + 0x43;\n      fileInfo[4] = (int)fileInfo + 0x43;\n      fileInfo[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(fileDescriptor + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(fileInfo + 3) = filePermission | 0x80;\n    *fileInfo = allocationResult;\n    fileInfo[4] = allocationResult;\n    fileInfo[5] = statResult;\n    if ((isExecutable) && (statResult = _isatty_r(fileDescriptor,(int)*(short *)((int)fileInfo + 0xe)), statResult != 0)) {\n      *(ushort *)(fileInfo + 3) = *(ushort *)(fileInfo + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "initialize_file_000842a4",
                "param_1": "fileDescriptor",
                "param_2": "fileInfo",
                "uVar1": "filePermission",
                "iVar2": "statResult",
                "iVar3": "allocationResult",
                "uVar4": "filePermission2",
                "bVar5": "isExecutable",
                "auStack_54": "statBuffer",
                "local_50": "fileMode"
            },
            "calling": [
                "__swsetup_r"
            ],
            "called": [
                "_isatty_r",
                "_fstat_r",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_param_00084384",
            "code": "\nuint * find_param_00084384(uint *array,char target,uint length)\n\n{\n  uint temp;\n  int i;\n  uint *ptr;\n  bool found;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      ptr = array;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      i = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        found = i == length - 1;\n        i = i + 1;\n        if (found) goto LAB_000843dc;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_param_00084384",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "temp",
                "iVar2": "i",
                "puVar3": "ptr",
                "bVar4": "found"
            },
            "calling": [
                "__sfvwrite_r",
                "_vfiprintf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "write_to_file_00084464",
            "code": "\nvoid writeToFile_00084464(int *fileDescriptor,int buffer,undefined4 data,undefined4 size)\n\n{\n  int writeResult;\n  ushort flag;\n  undefined4 unaff;\n  undefined4 unaff2;\n  undefined4 unaff3;\n  undefined4 in_lr;\n  \n  flag = *(ushort *)(buffer + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    _lseek_r(fileDescriptor,(int)*(short *)(buffer + 0xe),0,2);\n    flag = *(ushort *)(buffer + 0xc);\n  }\n  *(ushort *)(buffer + 0xc) = flag & 0xefff;\n  DAT_200711bc = 0;\n  writeResult = _write((int)*(short *)(buffer + 0xe),data,size,size,unaff,unaff2,unaff3,\n                 in_lr);\n  if ((writeResult == -1) && (DAT_200711bc != 0)) {\n    *fileDescriptor = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "write_to_file_00084464",
                "param_1": "fileDescriptor",
                "param_2": "buffer",
                "param_3": "data",
                "param_4": "size",
                "iVar1": "writeResult",
                "uVar2": "flag",
                "unaff_r4": "unaff",
                "unaff_r5": "unaff2",
                "unaff_r6": "unaff3"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_file_offset_0008449c",
            "code": "\nvoid updateFileOffset_0008449c(undefined4 fileDescriptor,int dataPointer)\n\n{\n  int seekResult;\n  ushort updatedMask;\n  \n  seekResult = _lseek_r(fileDescriptor,(int)*(short *)(dataPointer + 0xe));\n  if (seekResult == -1) {\n    updatedMask = *(ushort *)(dataPointer + 0xc) & 0xefff;\n  }\n  else {\n    updatedMask = *(ushort *)(dataPointer + 0xc) | 0x1000;\n  }\n  if (seekResult != -1) {\n    *(int *)(dataPointer + 0x50) = seekResult;\n  }\n  *(ushort *)(dataPointer + 0xc) = updatedMask;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_file_offset_0008449c",
                "param_1": "fileDescriptor",
                "param_2": "dataPointer",
                "iVar1": "seekResult",
                "uVar2": "updatedMask"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int inputPointer,uint inputValue,undefined4 *buffer,undefined4 length)\n\n{\n  ushort ushortValue;\n  uint intValue;\n  undefined *bytePointer;\n  int tempValue;\n  \n  if ((inputPointer != 0) && (*(int *)(inputPointer + 0x38) == 0)) {\n    __sinit();\n  }\n  ushortValue = *(ushort *)(buffer + 3);\n  intValue = (uint)ushortValue;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(intValue << 0x1c)) || (tempValue = buffer[4], tempValue == 0)) {\n    tempValue = __swsetup_r(inputPointer,buffer,ushortValue,intValue,length);\n    if (tempValue != 0) {\n      return 0xffffffff;\n    }\n    ushortValue = *(ushort *)(buffer + 3);\n    tempValue = buffer[4];\n    intValue = (uint)ushortValue;\n  }\n  inputValue = inputValue & 0xff;\n  if ((int)(intValue << 0x12) < 0) {\n    bytePointer = (undefined *)*buffer;\n    tempValue = (int)bytePointer - tempValue;\n    if (tempValue < (int)buffer[5]) {\nLAB_000844f6:\n      tempValue = tempValue + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    bytePointer = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = ushortValue | 0x2000;\n    tempValue = (int)bytePointer - tempValue;\n    if (tempValue < (int)buffer[5]) goto LAB_000844f6;\n  }\n  tempValue = _fflush_r(inputPointer,buffer);\n  if (tempValue != 0) {\n    return 0xffffffff;\n  }\n  bytePointer = (undefined *)*buffer;\n  tempValue = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = bytePointer + 1;\n  *bytePointer = (char)inputValue;\n  if (((buffer[5] == tempValue) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (inputValue == 10)))) &&\n     (tempValue = _fflush_r(inputPointer,buffer), tempValue != 0)) {\n    return 0xffffffff;\n  }\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "inputPointer",
                "param_2": "inputValue",
                "param_3": "buffer",
                "param_4": "length",
                "uVar1": "ushortValue",
                "uVar2": "intValue",
                "puVar3": "bytePointer",
                "iVar4": "tempValue"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "_fflush_r",
                "__sinit",
                "__swsetup_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "execute_translation_0008456c",
            "code": "\nvoid executeTranslation_0008456c(undefined4 *outputData,int inputSize,undefined4 additionalData,undefined4 *status)\n\n{\n  code *functionPointer;\n  undefined4 localeCharset;\n  int result;\n  undefined tempBuffer [12];\n  \n  functionPointer = DAT_20070898;\n  if (inputSize == 0) {\n    localeCharset = __locale_charset();\n    result = (*functionPointer)(outputData,tempBuffer,0,localeCharset,status);\n  }\n  else {\n    localeCharset = __locale_charset();\n    result = (*functionPointer)(outputData,inputSize,additionalData,localeCharset,status);\n  }\n  if (result == -1) {\n    *status = 0;\n    *outputData = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "execute_translation_0008456c",
                "param_1": "outputData",
                "param_2": "inputSize",
                "param_3": "additionalData",
                "param_4": "status",
                "pcVar1": "functionPointer",
                "uVar2": "localeCharset",
                "iVar3": "result",
                "auStack_24": "tempBuffer"
            },
            "calling": [
                "_fputwc_r"
            ],
            "called": [
                "__ascii_wctomb",
                "__locale_charset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "check_and_assign_value_000845bc",
            "code": "\nundefined4 check_and_assign_value_000845bc(undefined4 *output_ptr,undefined *data_ptr,uint value)\n\n{\n  if (data_ptr == (undefined *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *data_ptr = (char)value;\n    return 1;\n  }\n  *output_ptr = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "check_and_assign_value_000845bc",
                "param_1": "output_ptr",
                "param_2": "data_ptr",
                "param_3": "value"
            },
            "calling": [
                "_wcrtomb_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "flush_and_release_resources_000846a4",
            "code": "\nundefined4 flush_and_release_resources_000846a4(int input_param)\n\n{\n  dword rel_offset;\n  undefined4 result;\n  int status;\n  \n  rel_offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input_param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      __sinit();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      result = _fflush_r(rel_offset,input_param);\n      if ((*(code **)(input_param + 0x2c) != (code *)0x0) &&\n         (status = (**(code **)(input_param + 0x2c))(rel_offset,*(undefined4 *)(input_param + 0x1c)), status < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        _free_r(rel_offset,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          _free_r(rel_offset);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        _free_r(rel_offset);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      __sfp_lock_acquire();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      __sfp_lock_release();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "flush_and_release_resources_000846a4",
                "param_1": "input_param",
                "dVar1": "rel_offset",
                "uVar2": "result",
                "iVar3": "status"
            },
            "calling": [],
            "called": [
                "__sfp_lock_acquire",
                "__sfp_lock_release",
                "_free_r",
                "_fflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "get_file_size_000846b4",
            "code": "\nvoid getFileSize_000846b4(int *fileSize,undefined4 filePath,undefined4 statBuffer,undefined4 bufferSize)\n\n{\n  int fileStatus;\n  \n  DAT_200711bc = 0;\n  fileStatus = _fstat(filePath,statBuffer,statBuffer,0,bufferSize);\n  if ((fileStatus == -1) && (DAT_200711bc != 0)) {\n    *fileSize = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "get_file_size_000846b4",
                "param_1": "fileSize",
                "param_2": "filePath",
                "param_3": "statBuffer",
                "param_4": "bufferSize",
                "iVar1": "fileStatus"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "check_terminal_type_000846dc",
            "code": "\nvoid checkTerminalType_000846dc(int *result,undefined4 fileDescriptor)\n\n{\n  int isTerminal;\n  \n  DAT_200711bc = 0;\n  isTerminal = _isatty(fileDescriptor);\n  if ((isTerminal == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "check_terminal_type_000846dc",
                "param_1": "result",
                "param_2": "fileDescriptor",
                "iVar1": "isTerminal"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_isatty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "reposition_file_pointer_00084700",
            "code": "\nvoid repositionFilePointer_00084700(int *outputResult,undefined4 fileDescriptor,undefined4 offset,undefined4 origin)\n\n{\n  int seekResult;\n  \n  DAT_200711bc = 0;\n  seekResult = _lseek(fileDescriptor,offset,origin);\n  if ((seekResult == -1) && (DAT_200711bc != 0)) {\n    *outputResult = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "reposition_file_pointer_00084700",
                "param_1": "outputResult",
                "param_2": "fileDescriptor",
                "param_3": "offset",
                "param_4": "origin",
                "iVar1": "seekResult"
            },
            "calling": [
                "__swrite",
                "__sseek"
            ],
            "called": [
                "_lseek"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "read_and_check_error_00084728",
            "code": "\nvoid readAndCheckError_00084728(int *output,undefined4 fileDescriptor,undefined4 buffer,undefined4 count)\n\n{\n  int readResult;\n  \n  DAT_200711bc = 0;\n  readResult = _read(fileDescriptor,buffer,count);\n  if ((readResult == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "read_and_check_error_00084728",
                "param_1": "output",
                "param_2": "fileDescriptor",
                "param_3": "buffer",
                "param_4": "count",
                "iVar1": "readResult"
            },
            "calling": [],
            "called": [
                "_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "calculate_result_00084750",
            "code": "\nint calculate_result_00084750(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "result"
            },
            "calling": [
                "_vfiprintf_r"
            ],
            "called": [
                "__gnu_uldivmod_helper"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "subtract_and_update_0008477c",
            "code": "\nvoid subtract_and_update_0008477c(uint value_1,int value_2,undefined4 lower_bits,undefined4 upper_bits,int *result)\n\n{\n  uint result_1;\n  longlong product;\n  \n  product = __divdi3();\n  product = product * CONCAT44(upper_bits,lower_bits);\n  result_1 = (uint)product;\n  *result = value_1 - result_1;\n  result[1] = (value_2 - (int)((ulonglong)product >> 0x20)) - (uint)(value_1 < result_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "subtract_and_update_0008477c",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "lower_bits",
                "param_4": "upper_bits",
                "param_5": "result",
                "uVar1": "result_1",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "__divdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "calculate_difference_000847ac",
            "code": "\nvoid calculateDifference_000847ac(uint inputValue,int paramSize,undefined4 lower32Bits,undefined4 upper32Bits,int *resultArray)\n\n{\n  uint resultValue;\n  longlong product;\n  \n  product = __udivdi3();\n  product = product * CONCAT44(upper32Bits,lower32Bits);\n  resultValue = (uint)product;\n  *resultArray = inputValue - resultValue;\n  resultArray[1] = (paramSize - (int)((ulonglong)product >> 0x20)) - (uint)(inputValue < resultValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "calculate_difference_000847ac",
                "param_1": "inputValue",
                "param_2": "paramSize",
                "param_3": "lower32Bits",
                "param_4": "upper32Bits",
                "param_5": "resultArray",
                "uVar1": "resultValue",
                "lVar2": "product"
            },
            "calling": [
                "__aeabi_uldivmod"
            ],
            "called": [
                "__udivdi3"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "divide_with_remainder_000847e0",
            "code": "\nundefined8 divideWithRemainder_000847e0(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong quotientAndRemainder;\n  uint quotientResult;\n  uint remainderResult;\n  uint shiftedDivisor;\n  uint temp;\n  int shiftAmount;\n  uint dividendHigh;\n  uint partialQuotient;\n  uint remainderSign;\n  uint temp;\n  uint temp;\n  uint temp;\n  bool isCarry;\n  \n  if ((int)divisor < 0) {\n    isCarry = dividend != 0;\n    dividend = -dividend;\n    divisor = -divisor - (uint)isCarry;\n    remainderSign = 0xffffffff;\n  }\n  else {\n    remainderSign = 0;\n  }\n  if ((int)remainder < 0) {\n    remainderSign = ~remainderSign;\n    isCarry = quotient != 0;\n    quotient = -quotient;\n    remainder = -remainder - (uint)isCarry;\n  }\n  if (remainder == 0) {\n    if (divisor < quotient) {\n      shiftAmount = LZCOUNT(quotient);\n      if (shiftAmount != 0) {\n        remainderResult = dividend >> (0x20U - shiftAmount & 0xff);\n        quotient = quotient << shiftAmount;\n        dividend = dividend << shiftAmount;\n        divisor = divisor << shiftAmount | remainderResult;\n      }\n      quotientResult = quotient >> 0x10;\n      shiftedDivisor = divisor / quotientResult;\n      dividendHigh = (quotient & 0xffff) * shiftedDivisor;\n      temp = dividend >> 0x10 | (divisor - quotientResult * shiftedDivisor) * 0x10000;\n      remainderResult = shiftedDivisor;\n      if (temp <= dividendHigh && dividendHigh - temp != 0) {\n        isCarry = CARRY4(temp,quotient);\n        temp = temp + quotient;\n        remainderResult = shiftedDivisor - 1;\n        if ((isCarry == false) && (temp <= dividendHigh && dividendHigh - temp != 0)) {\n          remainderResult = shiftedDivisor - 2;\n          temp = temp + quotient;\n        }\n      }\n      partialQuotient = (temp - dividendHigh) / quotientResult;\n      shiftedDivisor = (quotient & 0xffff) * partialQuotient;\n      dividendHigh = dividend & 0xffff | ((temp - dividendHigh) - quotientResult * partialQuotient) * 0x10000;\n      quotientResult = partialQuotient;\n      if (dividendHigh <= shiftedDivisor && shiftedDivisor - dividendHigh != 0) {\n        quotientResult = partialQuotient - 1;\n        if ((CARRY4(dividendHigh,quotient) == false) &&\n           (dividendHigh + quotient <= shiftedDivisor && shiftedDivisor - (dividendHigh + quotient) != 0)) {\n          quotientResult = partialQuotient - 2;\n        }\n      }\n      quotientResult = quotientResult | remainderResult << 0x10;\n      remainderResult = 0;\n    }\n    else {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftAmount = LZCOUNT(quotient);\n      if (shiftAmount == 0) {\n        divisor = divisor - quotient;\n        shiftedDivisor = quotient >> 0x10;\n        temp = quotient & 0xffff;\n        remainderResult = 1;\n      }\n      else {\n        quotient = quotient << shiftAmount;\n        remainderResult = divisor >> (0x20U - shiftAmount & 0xff);\n        shiftedDivisor = quotient >> 0x10;\n        temp = remainderResult / shiftedDivisor;\n        temp = quotient & 0xffff;\n        dividendHigh = temp * temp;\n        partialQuotient = dividend >> (0x20U - shiftAmount & 0xff) | divisor << shiftAmount;\n        remainderResult = partialQuotient >> 0x10 | (remainderResult - shiftedDivisor * temp) * 0x10000;\n        dividend = dividend << shiftAmount;\n        quotientResult = temp;\n        if (remainderResult <= dividendHigh && dividendHigh - remainderResult != 0) {\n          isCarry = CARRY4(remainderResult,quotient);\n          remainderResult = remainderResult + quotient;\n          quotientResult = temp - 1;\n          if ((isCarry == false) && (remainderResult <= dividendHigh && dividendHigh - remainderResult != 0)) {\n            quotientResult = temp - 2;\n            remainderResult = remainderResult + quotient;\n          }\n        }\n        temp = (remainderResult - dividendHigh) / shiftedDivisor;\n        temp = temp * temp;\n        divisor = partialQuotient & 0xffff | ((remainderResult - dividendHigh) - shiftedDivisor * temp) * 0x10000;\n        remainderResult = temp;\n        if (divisor <= temp && temp - divisor != 0) {\n          isCarry = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          remainderResult = temp - 1;\n          if ((isCarry == false) && (divisor <= temp && temp - divisor != 0)) {\n            remainderResult = temp - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp;\n        remainderResult = remainderResult | quotientResult << 0x10;\n      }\n      quotientResult = divisor / shiftedDivisor;\n      temp = temp * quotientResult;\n      partialQuotient = dividend >> 0x10 | (divisor - shiftedDivisor * quotientResult) * 0x10000;\n      dividendHigh = quotientResult;\n      if (partialQuotient <= temp && temp - partialQuotient != 0) {\n        isCarry = CARRY4(partialQuotient,quotient);\n        partialQuotient = partialQuotient + quotient;\n        dividendHigh = quotientResult - 1;\n        if ((isCarry == false) && (partialQuotient <= temp && temp - partialQuotient != 0)) {\n          dividendHigh = quotientResult - 2;\n          partialQuotient = partialQuotient + quotient;\n        }\n      }\n      temp = (partialQuotient - temp) / shiftedDivisor;\n      temp = temp * temp;\n      shiftedDivisor = dividend & 0xffff | ((partialQuotient - temp) - shiftedDivisor * temp) * 0x10000;\n      quotientResult = temp;\n      if (shiftedDivisor <= temp && temp - shiftedDivisor != 0) {\n        quotientResult = temp - 1;\n        if ((CARRY4(shiftedDivisor,quotient) == false) &&\n           (shiftedDivisor + quotient <= temp && temp - (shiftedDivisor + quotient) != 0)) {\n          quotientResult = temp - 2;\n        }\n      }\n      quotientResult = quotientResult | dividendHigh << 0x10;\n    }\n  }\n  else if (divisor < remainder) {\n    remainderResult = 0;\n    quotientResult = 0;\n  }\n  else {\n    shiftAmount = LZCOUNT(remainder);\n    if (shiftAmount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        remainderResult = 0;\n        quotientResult = 1;\n      }\n      else {\n        quotientResult = 0;\n        remainderResult = 0;\n      }\n    }\n    else {\n      remainderResult = 0x20 - shiftAmount;\n      shiftedDivisor = divisor >> (remainderResult & 0xff);\n      temp = quotient >> (remainderResult & 0xff) | remainder << shiftAmount;\n      temp = temp >> 0x10;\n      quotientResult = shiftedDivisor / temp;\n      partialQuotient = (temp & 0xffff) * quotientResult;\n      dividendHigh = divisor << shiftAmount | dividend >> (remainderResult & 0xff);\n      shiftedDivisor = dividendHigh >> 0x10 | (shiftedDivisor - temp * quotientResult) * 0x10000;\n      remainderResult = quotientResult;\n      if (shiftedDivisor <= partialQuotient && partialQuotient - shiftedDivisor != 0) {\n        isCarry = CARRY4(shiftedDivisor,temp);\n        shiftedDivisor = shiftedDivisor + temp;\n        remainderResult = quotientResult - 1;\n        if ((isCarry == false) && (shiftedDivisor <= partialQuotient && partialQuotient - shiftedDivisor != 0)) {\n          remainderResult = quotientResult - 2;\n          shiftedDivisor = shiftedDivisor + temp;\n        }\n      }\n      temp = (shiftedDivisor - partialQuotient) / temp;\n      temp = (temp & 0xffff) * temp;\n      shiftedDivisor = dividendHigh & 0xffff | ((shiftedDivisor - partialQuotient) - temp * temp) * 0x10000;\n      quotientResult = temp;\n      if (shiftedDivisor <= temp && temp - shiftedDivisor != 0) {\n        isCarry = CARRY4(shiftedDivisor,temp);\n        shiftedDivisor = shiftedDivisor + temp;\n        quotientResult = temp - 1;\n        if ((isCarry == false) && (shiftedDivisor <= temp && temp - shiftedDivisor != 0)) {\n          quotientResult = temp - 2;\n          shiftedDivisor = shiftedDivisor + temp;\n        }\n      }\n      quotientResult = quotientResult | remainderResult << 0x10;\n      quotientAndRemainder = (ulonglong)quotientResult * (ulonglong)(quotient << shiftAmount);\n      dividendHigh = (uint)((ulonglong)quotientAndRemainder >> 0x20);\n      remainderResult = 0;\n      if ((shiftedDivisor - temp < dividendHigh) ||\n         ((shiftedDivisor - temp == dividendHigh && (dividend << shiftAmount < (uint)quotientAndRemainder)))) {\n        quotientResult = quotientResult - 1;\n        remainderResult = 0;\n      }\n    }\n  }\n  if (remainderSign != 0) {\n    isCarry = quotientResult != 0;\n    quotientResult = -quotientResult;\n    remainderResult = -remainderResult - (uint)isCarry;\n  }\n  return CONCAT44(remainderResult,quotientResult);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "divide_with_remainder_000847e0",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "quotientAndRemainder",
                "uVar2": "quotientResult",
                "uVar3": "remainderResult",
                "uVar4": "shiftedDivisor",
                "uVar5": "temp",
                "iVar6": "shiftAmount",
                "uVar7": "dividendHigh",
                "uVar8": "partialQuotient",
                "uVar9": "remainderSign",
                "uVar10": "temp",
                "uVar11": "temp",
                "uVar12": "temp",
                "bVar13": "isCarry"
            },
            "calling": [
                "__gnu_ldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "calculate_quotient_00084a80",
            "code": "\nulonglong calculateQuotient_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  int shiftCount;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shiftCount = LZCOUNT(quotient);\n      if (shiftCount == 0) {\n        divisor = divisor - quotient;\n        temp2 = quotient >> 0x10;\n        temp4 = quotient & 0xffff;\n        temp1 = 1;\n      }\n      else {\n        quotient = quotient << shiftCount;\n        temp7 = divisor >> (0x20U - shiftCount & 0xff);\n        temp2 = quotient >> 0x10;\n        temp8 = temp7 / temp2;\n        temp4 = quotient & 0xffff;\n        temp1 = temp4 * temp8;\n        temp5 = dividend >> (0x20U - shiftCount & 0xff) | divisor << shiftCount;\n        temp3 = temp5 >> 0x10 | (temp7 - temp2 * temp8) * 0x10000;\n        dividend = dividend << shiftCount;\n        temp7 = temp8;\n        if (temp3 <= temp1 && temp1 - temp3 != 0) {\n          carryFlag = CARRY4(temp3,quotient);\n          temp3 = temp3 + quotient;\n          temp7 = temp8 - 1;\n          if ((carryFlag == false) && (temp3 <= temp1 && temp1 - temp3 != 0)) {\n            temp7 = temp8 - 2;\n            temp3 = temp3 + quotient;\n          }\n        }\n        temp6 = (temp3 - temp1) / temp2;\n        temp8 = temp4 * temp6;\n        divisor = temp5 & 0xffff | ((temp3 - temp1) - temp2 * temp6) * 0x10000;\n        temp1 = temp6;\n        if (divisor <= temp8 && temp8 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          temp1 = temp6 - 1;\n          if ((carryFlag == false) && (divisor <= temp8 && temp8 - divisor != 0)) {\n            temp1 = temp6 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp8;\n        temp1 = temp1 | temp7 << 0x10;\n      }\n      temp8 = divisor / temp2;\n      temp3 = temp4 * temp8;\n      temp5 = dividend >> 0x10 | (divisor - temp2 * temp8) * 0x10000;\n      temp7 = temp8;\n      if (temp5 <= temp3 && temp3 - temp5 != 0) {\n        carryFlag = CARRY4(temp5,quotient);\n        temp5 = temp5 + quotient;\n        temp7 = temp8 - 1;\n        if ((carryFlag == false) && (temp5 <= temp3 && temp3 - temp5 != 0)) {\n          temp7 = temp8 - 2;\n          temp5 = temp5 + quotient;\n        }\n      }\n      temp8 = (temp5 - temp3) / temp2;\n      temp4 = temp4 * temp8;\n      temp5 = dividend & 0xffff | ((temp5 - temp3) - temp2 * temp8) * 0x10000;\n      temp2 = temp8;\n      if (temp5 <= temp4 && temp4 - temp5 != 0) {\n        temp2 = temp8 - 1;\n        if ((CARRY4(temp5,quotient) == false) &&\n           (temp5 + quotient <= temp4 && temp4 - (temp5 + quotient) != 0)) {\n          temp2 = temp8 - 2;\n        }\n      }\n      return CONCAT44(temp1,temp2 | temp7 << 0x10);\n    }\n    shiftCount = LZCOUNT(quotient);\n    if (shiftCount != 0) {\n      temp7 = dividend >> (0x20U - shiftCount & 0xff);\n      quotient = quotient << shiftCount;\n      dividend = dividend << shiftCount;\n      divisor = temp7 | divisor << shiftCount;\n    }\n    temp1 = quotient >> 0x10;\n    temp2 = divisor / temp1;\n    temp4 = (quotient & 0xffff) * temp2;\n    temp8 = dividend >> 0x10 | (divisor - temp1 * temp2) * 0x10000;\n    temp7 = temp2;\n    if (temp8 <= temp4 && temp4 - temp8 != 0) {\n      carryFlag = CARRY4(temp8,quotient);\n      temp8 = temp8 + quotient;\n      temp7 = temp2 - 1;\n      if ((carryFlag == false) && (temp8 <= temp4 && temp4 - temp8 != 0)) {\n        temp7 = temp2 - 2;\n        temp8 = temp8 + quotient;\n      }\n    }\n    temp5 = (temp8 - temp4) / temp1;\n    temp2 = (quotient & 0xffff) * temp5;\n    temp4 = dividend & 0xffff | ((temp8 - temp4) - temp1 * temp5) * 0x10000;\n    temp1 = temp5;\n    if (temp4 <= temp2 && temp2 - temp4 != 0) {\n      temp1 = temp5 - 1;\n      if ((CARRY4(temp4,quotient) == false) &&\n         (temp4 + quotient <= temp2 && temp2 - (temp4 + quotient) != 0)) {\n        temp1 = temp5 - 2;\n      }\n    }\n    temp1 = temp1 | temp7 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shiftCount = LZCOUNT(remainder);\n    if (shiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      temp1 = 0;\n    }\n    else {\n      temp1 = 0x20 - shiftCount;\n      temp7 = divisor >> (temp1 & 0xff);\n      temp2 = remainder << shiftCount | quotient >> (temp1 & 0xff);\n      temp4 = temp2 >> 0x10;\n      temp3 = temp7 / temp4;\n      temp8 = (temp2 & 0xffff) * temp3;\n      temp5 = dividend >> (temp1 & 0xff) | divisor << shiftCount;\n      temp1 = temp5 >> 0x10 | (temp7 - temp4 * temp3) * 0x10000;\n      temp7 = temp3;\n      if (temp1 <= temp8 && temp8 - temp1 != 0) {\n        carryFlag = CARRY4(temp1,temp2);\n        temp1 = temp1 + temp2;\n        temp7 = temp3 - 1;\n        if ((carryFlag == false) && (temp1 <= temp8 && temp8 - temp1 != 0)) {\n          temp7 = temp3 - 2;\n          temp1 = temp1 + temp2;\n        }\n      }\n      temp3 = (temp1 - temp8) / temp4;\n      temp6 = (temp2 & 0xffff) * temp3;\n      temp4 = temp5 & 0xffff | ((temp1 - temp8) - temp4 * temp3) * 0x10000;\n      temp1 = temp3;\n      if (temp4 <= temp6 && temp6 - temp4 != 0) {\n        carryFlag = CARRY4(temp4,temp2);\n        temp4 = temp4 + temp2;\n        temp1 = temp3 - 1;\n        if ((carryFlag == false) && (temp4 <= temp6 && temp6 - temp4 != 0)) {\n          temp1 = temp3 - 2;\n          temp4 = temp4 + temp2;\n        }\n      }\n      temp1 = temp1 | temp7 << 0x10;\n      result = (ulonglong)temp1 * (ulonglong)(quotient << shiftCount);\n      temp7 = (uint)((ulonglong)result >> 0x20);\n      if ((temp4 - temp6 < temp7) || ((temp4 - temp6 == temp7 && (dividend << shiftCount < (uint)result)))\n         ) {\n        temp1 = temp1 - 1;\n      }\n    }\n  }\n  return (ulonglong)temp1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "calculate_quotient_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "iVar10": "shiftCount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "__gnu_uldivmod_helper"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 106655,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f24",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_000804a8",
            "FUN_000816a8"
        ]
    ],
    "locked_functions": []
}