{
    "functions": {
        "FUN_000800f4": {
            "entrypoint": "0x000800f4",
            "current_name": "initialize_flag_000800f4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initializeFlag_000800f4(undefined4 inputParam)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return inputParam;\n}\n\n",
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "inputParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080118": {
            "entrypoint": "0x00080118",
            "current_name": "FUNC_00080118",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080164": {
            "entrypoint": "0x00080164",
            "current_name": "initialize_data_00080164",
            "code": "\nvoid initializeData_00080164(int **dataPointer)\n\n{\n  int returnValue;\n  \n  *dataPointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)dataPointer + 6)) {\n    FUN_00081210(*(byte *)((int)dataPointer + 6),1);\n    FUN_00081318(*(undefined *)((int)dataPointer + 6),0);\n  }\n  do {\n    returnValue = (**(code **)(**dataPointer + 0xc))();\n  } while (-1 < returnValue);\n  *(undefined *)((int)dataPointer + 0x49) = 0;\n  *(undefined *)((int)dataPointer + 0x4a) = 0;\n  *(undefined2 *)(dataPointer + 0x15) = 0;\n  *(undefined2 *)((int)dataPointer + 0x52) = 0;\n  *(undefined2 *)(dataPointer + 0x14) = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080164": "initialize_data_00080164",
                "param_1": "dataPointer",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000804a8"
            ],
            "called": [
                "FUN_00081318",
                "FUN_00081210"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000801b0": {
            "entrypoint": "0x000801b0",
            "current_name": "process_data_000801b0",
            "code": "\nint processData_000801b0(int **inputData)\n\n{\n  bool isFull;\n  undefined value;\n  char count;\n  int result;\n  byte currentIndex;\n  \n  if (1 < *(byte *)((int)inputData + 6)) {\n    FUN_00081318(*(byte *)((int)inputData + 6),0);\n  }\n  isFull = false;\n  *(undefined *)((int)inputData + 0x49) = 0;\n  if (*(byte *)((int)inputData + 5) < 4) {\n    while (result = (**(code **)(**inputData + 8))(), result != 0) {\n      currentIndex = *(byte *)((int)inputData + 0x49);\n      value = (**(code **)(**inputData + 0xc))();\n      count = *(char *)((int)inputData + 0x49);\n      *(undefined *)((int)inputData + currentIndex + 9) = value;\n      currentIndex = count + 1;\n      *(byte *)((int)inputData + 0x49) = currentIndex;\n      if (0x3f < currentIndex) {\n        isFull = true;\n      }\n    }\n  }\n  *(short *)(inputData + 0x14) = *(short *)(inputData + 0x14) + 1;\n  if (isFull) {\n    count = -3;\n    *(short *)(inputData + 0x15) = *(short *)(inputData + 0x15) + 1;\n  }\n  else {\n    count = *(char *)((int)inputData + 0x49);\n  }\n  return (int)count;\n}\n\n",
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "param_1": "inputData",
                "bVar1": "isFull",
                "uVar2": "value",
                "cVar3": "count",
                "iVar4": "result",
                "bVar5": "currentIndex"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_00081318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008021c": {
            "entrypoint": "0x0008021c",
            "current_name": "calculate_checksum_0008021c",
            "code": "\nuint calculateChecksum_0008021c(int dataPointer,uint dataLength)\n\n{\n  int currentIndex;\n  uint checksum;\n  char bitCount;\n  uint bitValue;\n  \n  checksum = 0xffff;\n  for (currentIndex = dataPointer; (currentIndex - dataPointer & 0xffU) < dataLength; currentIndex = currentIndex + 1) {\n    checksum = checksum ^ *(byte *)(currentIndex + 9);\n    bitCount = '\\b';\n    do {\n      bitValue = checksum & 1;\n      checksum = checksum >> 1;\n      if (bitValue != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bitCount = bitCount + -1;\n    } while (bitCount != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "param_1": "dataPointer",
                "param_2": "dataLength",
                "iVar1": "currentIndex",
                "uVar2": "checksum",
                "cVar3": "bitCount",
                "uVar4": "bitValue"
            },
            "calling": [
                "FUN_00080258"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080258": {
            "entrypoint": "0x00080258",
            "current_name": "update_param_value_00080258",
            "code": "\nvoid updateParamValue_00080258(int **paramArray,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte currentValue;\n  undefined2 updatedValue;\n  int result;\n  uint value;\n  \n  currentValue = *(byte *)((int)paramArray + 0x49);\n  value = (uint)currentValue;\n  updatedValue = FUN_0008021c(paramArray,value,param3,param4,param4);\n  *(char *)((int)paramArray + value + 9) = (char)((ushort)updatedValue >> 8);\n  *(char *)((int)paramArray + (value + 1 & 0xff) + 9) = (char)updatedValue;\n  *(byte *)((int)paramArray + 0x49) = currentValue + 2;\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_00081318(*(byte *)((int)paramArray + 6),1);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    (**(code **)(**paramArray + 4))(*paramArray,(int)paramArray + 9,*(undefined *)((int)paramArray + 0x49));\n  }\n  if (1 < *(byte *)((int)paramArray + 6)) {\n    FUN_00081318(*(byte *)((int)paramArray + 6),0);\n  }\n  if (*(byte *)((int)paramArray + 5) < 4) {\n    do {\n      result = (**(code **)(**paramArray + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)paramArray + 0x49) = 0;\n  result = thunk_FUN_00081714();\n  paramArray[0x17] = (int *)(result + (uint)*(ushort *)((int)paramArray + 0x56));\n  *(short *)((int)paramArray + 0x52) = *(short *)((int)paramArray + 0x52) + 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080258": "update_param_value_00080258",
                "param_1": "paramArray",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "bVar1": "currentValue",
                "uVar2": "updatedValue",
                "iVar3": "result",
                "uVar4": "value"
            },
            "calling": [
                "FUN_000802da"
            ],
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000802da": {
            "entrypoint": "0x000802da",
            "current_name": "validate_parameters_000802da",
            "code": "\nint validateParameters_000802da(int inputAddress,uint flags,uint size,ushort *data)\n\n{\n  char error;\n  byte tempByte;\n  undefined tempU;\n  ushort tempUShort;\n  uint tempUInt;\n  ushort *tempUShortPtr;\n  undefined flagsByte0;\n  undefined flagsByte1;\n  ushort sizeUShort;\n  \n  flagsByte0 = (undefined)flags;\n  flagsByte1 = (undefined)(flags >> 8);\n  sizeUShort = (ushort)size;\n  tempUInt = size & 0xffff;\n  if (*(char *)(inputAddress + 4) != '\\0') {\n    error = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(inputAddress + 7) != '\\0') {\n    error = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flags & 0xff) - 1 & 0xff)) {\n    error = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(inputAddress + 9) = flagsByte0;\n  *(undefined *)(inputAddress + 10) = flagsByte1;\n  *(ushort **)(inputAddress + 0x4c) = data;\n  *(char *)(inputAddress + 0xb) = (char)(flags >> 0x18);\n  *(char *)(inputAddress + 0xc) = (char)(flags >> 0x10);\n  tempU = (undefined)(size >> 8);\n  switch(flagsByte1) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(inputAddress + 0xd) = tempU;\n    break;\n  case 5:\n    tempUShort = *data;\n    if (tempUShort != 0) {\n      tempUShort = 1;\n    }\n    *(char *)(inputAddress + 0xd) = -(char)tempUShort;\n    tempUInt = 0;\n    break;\n  case 6:\n    *(char *)(inputAddress + 0xd) = (char)(*data >> 8);\n    tempUInt = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    tempByte = (byte)(sizeUShort >> 3) & 0xfe;\n    if ((size & 0xf) != 0) {\n      tempByte = tempByte + 1;\n    }\n    *(char *)(inputAddress + 0xe) = (char)size;\n    *(undefined *)(inputAddress + 0xd) = tempU;\n    *(byte *)(inputAddress + 0xf) = tempByte;\n    tempU = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(inputAddress + 0xd) = tempU;\n    *(char *)(inputAddress + 0xe) = (char)size;\n    data = data + -1;\n    *(char *)(inputAddress + 0xf) = (char)tempUInt * '\\x02';\n    *(undefined *)(inputAddress + 0x49) = 7;\n    tempUShortPtr = data + tempUInt;\n    while (data != tempUShortPtr) {\n      tempByte = *(byte *)(inputAddress + 0x49);\n      *(char *)(inputAddress + (uint)tempByte + 9) = (char)(data[1] >> 8);\n      tempUInt = tempByte + 1 & 0xff;\n      *(char *)(inputAddress + 0x49) = (char)tempUInt;\n      data = data + 1;\n      *(char *)(tempUInt + inputAddress + 9) = (char)*data;\n      *(byte *)(inputAddress + 0x49) = tempByte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(inputAddress + 0xe) = (char)tempUInt;\n  tempU = 6;\nLAB_0008034a:\n  *(undefined *)(inputAddress + 0x49) = tempU;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(inputAddress);\n  *(undefined *)(inputAddress + 7) = 1;\n  error = '\\0';\nLAB_000803cc:\n  return (int)error;\n}\n\n",
            "renaming": {
                "FUN_000802da": "validate_parameters_000802da",
                "param_1": "inputAddress",
                "param_2": "flags",
                "param_3": "size",
                "param_4": "data",
                "cVar1": "error",
                "bVar2": "tempByte",
                "uVar3": "tempU",
                "uVar4": "tempUShort",
                "uVar5": "tempUInt",
                "puVar6": "tempUShortPtr",
                "local_1c": "flagsByte0",
                "local_1b": "flagsByte1",
                "local_18": "sizeUShort"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00080258"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000803d4": {
            "entrypoint": "0x000803d4",
            "current_name": "check_value_and_increment_counter_000803d4",
            "code": "\nundefined4 check_value_and_increment_counter_000803d4(int input_value)\n\n{\n  int counter;\n  \n  if ((int)((uint)*(byte *)(input_value + 10) << 0x18) < 0) {\n    *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n    return 0xfb;\n  }\n  counter = 0;\n  do {\n    if ((&DAT_00084d10)[counter] == *(byte *)(input_value + 10)) {\n      return 0;\n    }\n    counter = counter + 1;\n  } while (counter != 8);\n  *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_000803d4": "check_value_and_increment_counter_000803d4",
                "param_1": "input_value",
                "iVar1": "counter"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080410": {
            "entrypoint": "0x00080410",
            "current_name": "process_data_00080410",
            "code": "\nvoid processData_00080410(int dataAddress,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int currentAddress;\n  byte counter;\n  uint index;\n  int destination;\n  \n  counter = 0;\n  while( true ) {\n    index = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(dataAddress + 0xb) >> 1 <= index) break;\n    currentAddress = (index * 2 + 3 & 0xff) + dataAddress;\n    destination = *(int *)(dataAddress + 0x4c);\n    result = FUN_000815f8(*(undefined *)(currentAddress + 9),*(undefined *)(currentAddress + 10),currentAddress,\n                         *(byte *)(dataAddress + 0xb),param4);\n    *(undefined2 *)(destination + index * 2) = result;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "param_1": "dataAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "iVar2": "currentAddress",
                "bVar3": "counter",
                "uVar4": "index",
                "iVar5": "destination"
            },
            "calling": [
                "FUN_0008043e"
            ],
            "called": [
                "FUN_000815f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008043e": {
            "entrypoint": "0x0008043e",
            "current_name": "check_and_update_value_0008043e",
            "code": "\nint checkAndUpdateValue_0008043e(int **inputArray)\n\n{\n  char result;\n  uint functionResult;\n  int *thunkReturnValue;\n  int checkResult;\n  uint index;\n  \n  if (*(byte *)((int)inputArray + 5) < 4) {\n    functionResult = (**(code **)(**inputArray + 8))();\n    index = functionResult & 0xff;\n  }\n  thunkReturnValue = (int *)thunk_FUN_00081714();\n  if (inputArray[0x17] < thunkReturnValue) {\n    *(undefined *)(inputArray + 2) = 0xff;\n    *(undefined *)((int)inputArray + 7) = 0;\n    *(short *)(inputArray + 0x15) = *(short *)(inputArray + 0x15) + 1;\n  }\n  else if (7 < index) {\n    FUN_000801b0(inputArray);\n    checkResult = FUN_000803d4(inputArray);\n    if (checkResult == 0) {\n      if (*(byte *)((int)inputArray + 10) - 3 < 2) {\n        FUN_00080410(inputArray);\n      }\n      *(undefined *)((int)inputArray + 7) = 0;\n      result = *(char *)((int)inputArray + 0x49);\n    }\n    else {\n      *(undefined *)((int)inputArray + 7) = 0;\n      result = (char)checkResult;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "renaming": {
                "FUN_0008043e": "check_and_update_value_0008043e",
                "param_1": "inputArray",
                "cVar1": "result",
                "uVar2": "functionResult",
                "piVar3": "thunkReturnValue",
                "iVar4": "checkResult",
                "unaff_r6": "index"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000803d4",
                "FUN_000801b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000804a8": {
            "entrypoint": "0x000804a8",
            "current_name": "configure_device_000804a8",
            "code": "\nundefined8 configure_device_000804a8(void)\n\n{\n  int result;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  result = thunk_FUN_00081714();\n  DAT_200709e0 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070a48 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_20070934 = result + 1000;\n  result = thunk_FUN_00081714();\n  DAT_200708c0 = result + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000804a8": "configure_device_000804a8",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081318",
                "thunk_FUN_00081714",
                "FUN_00081210",
                "FUN_00080164"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000805d0": {
            "entrypoint": "0x000805d0",
            "current_name": "process_data_000805d0",
            "code": "\n\n\nvoid processData_000805d0(void)\n\n{\n  uint result;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  int index;\n  uint *ptr1;\n  undefined4 *ptr2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    result = thunk_FUN_00081714();\n    if (DAT_200708c8 < result) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*ptr2,ptr2[1],ptr2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (result = thunk_FUN_00081714(), DAT_200708c0 < result))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      index = thunk_FUN_00081714();\n      DAT_200708c0 = index + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        index = thunk_FUN_00081714();\n        DAT_200708c0 = index + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        index = thunk_FUN_00081714();\n        DAT_200708c0 = index + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  result = thunk_FUN_00081714();\n  if (DAT_200709e0 < result) {\n    temp1 = FUN_0008189c(DAT_20070940);\n    temp2 = FUN_00081730(temp1,DAT_200709c8);\n    temp1 = DAT_200708c4;\n    DAT_20070930 = temp2;\n    temp3 = FUN_00081734(temp2,DAT_200708c4);\n    temp3 = FUN_00081944(temp3,DAT_2007094c);\n    temp3 = FUN_00081734(temp3,DAT_20070914);\n    DAT_2007094c = temp3;\n    temp1 = FUN_00081730(temp2,temp1);\n    temp1 = FUN_00081944(temp1,DAT_200709c4);\n    temp1 = FUN_00081730(temp1,DAT_2007096c);\n    DAT_200709c4 = temp1;\n    temp4 = FUN_00081944(temp2,DAT_20070a4c);\n    temp4 = FUN_00081734(temp4,temp3);\n    FUN_00081734(temp4,temp1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = temp2;\n    DAT_20070914 = temp3;\n    DAT_2007096c = temp1;\n    index = thunk_FUN_00081714();\n    DAT_200709e0 = index + DAT_20070970;\n  }\n  temp1 = FUN_0008189c(DAT_20070970);\n  index = FUN_00081ca8(DAT_2007091c,temp1);\n  if (index != 0) {\n    DAT_2007091c = temp1;\n  }\n  index = FUN_00081c94(DAT_2007091c,0);\n  if (index != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "iVar6": "index",
                "puVar7": "ptr1",
                "puVar8": "ptr2"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00081734",
                "FUN_00081d1c",
                "FUN_00081944",
                "thunk_FUN_00081714",
                "FUN_000802da",
                "FUN_00081c94",
                "FUN_0008043e",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081ca8",
                "FUN_0008189c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080a68": {
            "entrypoint": "0x00080a68",
            "current_name": "initialize_data_00080a68",
            "code": "\nvoid initializeData_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "calling": [],
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "entrypoint": "0x00080aa8",
            "current_name": "FUNC_00080aa8",
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ab8": {
            "entrypoint": "0x00080ab8",
            "current_name": "FUNC_00080ab8",
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080aba": {
            "entrypoint": "0x00080aba",
            "current_name": "FUNC_00080aba",
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080abc": {
            "entrypoint": "0x00080abc",
            "current_name": "FUNC_00080abc",
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00080ae4": {
            "entrypoint": "0x00080ae4",
            "current_name": "initialize_system_00080ae4",
            "code": "\n\n\nvoid initializeSystem_00080ae4(void)\n\n{\n  int index;\n  int nextIndex;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = Elf32_Rel_ARRAY_20070000[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  index = 0;\n  do {\n    nextIndex = index + 1;\n    FUN_00081318(index,0);\n    index = nextIndex;\n  } while (nextIndex != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,Elf32_Rel_ARRAY_20070000[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "index",
                "iVar2": "nextIndex"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_00081066",
                "FUN_00081034",
                "FUN_00081318",
                "FUN_00080e9c",
                "FUN_00080da0",
                "FUN_00081d7c",
                "FUN_0008106e",
                "FUN_00080f9c",
                "FUN_00081042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "entrypoint": "0x00080c0c",
            "current_name": "initialize_components_00080c0c",
            "code": "\nvoid initializeComponents_00080c0c(undefined4 deviceParam,undefined4 configParam,undefined4 initParam)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,initParam);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080c0c": "initialize_components_00080c0c",
                "param_1": "deviceParam",
                "param_2": "configParam",
                "param_3": "initParam"
            },
            "calling": [],
            "called": [
                "FUN_000815d4",
                "FUN_000813a8",
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "entrypoint": "0x00080ce0",
            "current_name": "check_and_execute_functions_00080ce0",
            "code": "\nvoid checkAndExecuteFunctions_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080ce0": "check_and_execute_functions_00080ce0",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_000813e4",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "entrypoint": "0x00080d2e",
            "current_name": "update_registry_entry_00080d2e",
            "code": "\nvoid updateRegistryEntry_00080d2e(int registryEntryAddress,undefined4 operationType,uint value)\n\n{\n  uint updatedValue;\n  \n  *(uint *)(registryEntryAddress + 0x44) = value;\n  switch(operationType) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updatedValue = *(uint *)(registryEntryAddress + 0x70) & *(uint *)(registryEntryAddress + 0x70) & ~value;\n    break;\n  case 2:\n    updatedValue = *(uint *)(registryEntryAddress + 0x70) | value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(registryEntryAddress + 0x70) = updatedValue;\nswitchD_00080d34_caseD_6:\n  *(uint *)(registryEntryAddress + 4) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d2e": "update_registry_entry_00080d2e",
                "param_1": "registryEntryAddress",
                "param_2": "operationType",
                "param_3": "value",
                "uVar1": "updatedValue"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d54": {
            "entrypoint": "0x00080d54",
            "current_name": "update_parameter_values_00080d54",
            "code": "\nvoid updateParameterValues_00080d54(undefined4 *outputArray,undefined4 newValue,uint bitMask)\n\n{\n  bool isNegative;\n  \n  isNegative = (int)(bitMask << 0x1f) < 0;\n  value1 = newValue;\n  if (isNegative) {\n    outputArray[0x19] = newValue;\n  }\n  if (!isNegative) {\n    outputArray[0x18] = newValue;\n  }\n  isNegative = (bitMask & 10) != 0;\n  if (isNegative) {\n    outputArray[8] = newValue;\n  }\n  if (!isNegative) {\n    outputArray[9] = newValue;\n  }\n  if (((int)(bitMask << 0x1e) < 0) || ((int)(bitMask << 0x1c) < 0)) {\n    outputArray[0x20] = newValue;\n  }\n  value5 = newValue;\n  *outputArray = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d54": "update_parameter_values_00080d54",
                "param_1": "outputArray",
                "param_2": "newValue",
                "param_3": "bitMask",
                "bVar1": "isNegative",
                "param_1[0x11]": "value1",
                "param_1[5]": "value5"
            },
            "calling": [
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "entrypoint": "0x00080d7a",
            "current_name": "update_params_00080d7a",
            "code": "\nvoid updateParams_00080d7a(undefined4 *paramsArr,undefined4 newValue,int condition1,int condition2,int condition3)\n\n{\n  paramsArr[0x11] = newValue;\n  if (condition3 == 0) {\n    paramsArr[0x18] = newValue;\n  }\n  else {\n    paramsArr[0x19] = newValue;\n  }\n  if (condition2 == 0) {\n    paramsArr[0x15] = newValue;\n  }\n  else {\n    paramsArr[0x14] = newValue;\n  }\n  if (condition1 == 0) {\n    paramsArr[0xd] = newValue;\n  }\n  else {\n    paramsArr[0xc] = newValue;\n  }\n  paramsArr[4] = newValue;\n  *paramsArr = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080d7a": "update_params_00080d7a",
                "param_1": "paramsArr",
                "param_2": "newValue",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_00080da0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080da0": {
            "entrypoint": "0x00080da0",
            "current_name": "update_values_00080da0",
            "code": "\nundefined4 updateValues_00080da0(int memoryAddress,int valueType,undefined4 newValue,uint bitMask)\n\n{\n  bool isNegative;\n  \n  switch(valueType) {\n  case 1:\n  case 2:\n    FUN_00080d2e(memoryAddress,valueType,newValue);\n    isNegative = (int)(bitMask << 0x1f) < 0;\n    *(undefined4 *)(memoryAddress + 0x44) = newValue;\n    if (isNegative) {\n      *(undefined4 *)(memoryAddress + 100) = newValue;\n    }\n    if (!isNegative) {\n      *(undefined4 *)(memoryAddress + 0x60) = newValue;\n    }\n    break;\n  case 3:\n    FUN_00080d54(memoryAddress,newValue,bitMask,0x80d55,memoryAddress);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(memoryAddress,newValue,valueType == 5,(bitMask << 0x1d) >> 0x1f,bitMask & 1,valueType,newValue)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080da0": "update_values_00080da0",
                "param_1": "memoryAddress",
                "param_2": "valueType",
                "param_3": "newValue",
                "param_4": "bitMask",
                "bVar1": "isNegative"
            },
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e04": {
            "entrypoint": "0x00080e04",
            "current_name": "check_flags_00080e04",
            "code": "\nuint check_flags_00080e04(int data_ptr,uint flags)\n\n{\n  uint result;\n  \n  result = *(uint *)(data_ptr + 8) & flags;\n  if (result != 0) {\n    if ((flags & *(uint *)(data_ptr + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00080e04": "check_flags_00080e04",
                "param_1": "data_ptr",
                "param_2": "flags",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00081318"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e18": {
            "entrypoint": "0x00080e18",
            "current_name": "check_and_update_bit_00080e18",
            "code": "\n\n\nundefined4 checkAndUpdateBit_00080e18(uint value)\n\n{\n  uint bitMask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bitMask = 1 << (value & 0xff);\n      if ((bitMask & _DAT_400e0618) != bitMask) {\n        _DAT_400e0610 = bitMask;\n      }\n    }\n    else {\n      bitMask = 1 << (value - 0x20 & 0xff);\n      if ((bitMask & _DAT_400e0708) != bitMask) {\n        _DAT_400e0700 = bitMask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00080e18": "check_and_update_bit_00080e18",
                "param_1": "value",
                "uVar1": "bitMask"
            },
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "entrypoint": "0x00080e9c",
            "current_name": "initialize_registers_00080e9c",
            "code": "\n\n\nvoid initialize_registers_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocation_array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00080e9c": "initialize_registers_00080e9c",
                "Elf32_Rel_ARRAY_20070000": "relocation_array"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x00080f24",
            "current_name": "entry",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_000816a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "entrypoint": "0x00080f9c",
            "current_name": "calculate_threshold_00080f9c",
            "code": "\nundefined4 calculateThreshold_00080f9c(undefined4 *output_array,uint input_value,int multiplier,int divider)\n\n{\n  uint quotient;\n  uint index;\n  uint threshold_array [16];\n  \n  threshold_array[0] = 0;\n  threshold_array[1] = 8;\n  threshold_array[2] = 0x10;\n  threshold_array[3] = 0x18;\n  threshold_array[4] = 0x40;\n  threshold_array[5] = 0x50;\n  threshold_array[6] = 0x60;\n  threshold_array[7] = 0x70;\n  threshold_array[8] = 0x200;\n  threshold_array[9] = 0x240;\n  threshold_array[10] = 0x280;\n  threshold_array[11] = 0x2c0;\n  threshold_array[12] = 0x300;\n  threshold_array[13] = 0x340;\n  threshold_array[14] = 0x380;\n  threshold_array[15] = 0x3c0;\n  *output_array = 1;\n  output_array[1] = 0;\n  output_array[0x48] = 0x202;\n  output_array[0x41] = 0;\n  output_array[0x45] = 0;\n  quotient = input_value / (uint)(multiplier * 2);\n  if (input_value == multiplier * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(divider * (int)(((ulonglong)input_value / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        threshold_array[index]) {\n      output_array[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "param_1": "output_array",
                "param_2": "input_value",
                "param_3": "multiplier",
                "param_4": "divider",
                "local_58": "threshold_array",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081034": {
            "entrypoint": "0x00081034",
            "current_name": "update_param_00081034",
            "code": "\nvoid updateParam_00081034(int paramPtr,uint value,uint flag)\n\n{\n  *(uint *)(paramPtr + 4) = value | *(uint *)(paramPtr + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081034": "update_param_00081034",
                "param_1": "paramPtr",
                "param_2": "value",
                "param_3": "flag"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081042": {
            "entrypoint": "0x00081042",
            "current_name": "update_flags_00081042",
            "code": "\nvoid updateFlags_00081042(int flags,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(flags + 4) =\n       value2 | *(uint *)(flags + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081042": "update_flags_00081042",
                "param_1": "flags",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008105c": {
            "entrypoint": "0x0008105c",
            "current_name": "set_bit_at_offset_0008105c",
            "code": "\nvoid setBitAtOffset_0008105c(int baseAddress,uint bitOffset)\n\n{\n  *(int *)(baseAddress + 0x14) = 1 << (bitOffset & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008105c": "set_bit_at_offset_0008105c",
                "param_1": "baseAddress",
                "param_2": "bitOffset"
            },
            "calling": [
                "FUN_00081210"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081066": {
            "entrypoint": "0x00081066",
            "current_name": "initialize_var_to_ffff_00081066",
            "code": "\nvoid initializeVarToFFFF_00081066(int baseAddress)\n\n{\n  *(undefined4 *)(baseAddress + 0x14) = 0xffff;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081066": "initialize_var_to_ffff_00081066",
                "param_1": "baseAddress"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008106e": {
            "entrypoint": "0x0008106e",
            "current_name": "set_param_value_0008106e",
            "code": "\nvoid setParamValue_0008106e(int objAddress,undefined4 paramValue)\n\n{\n  *(undefined4 *)(objAddress + 0x28) = paramValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "objAddress",
                "param_2": "paramValue"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081184": {
            "entrypoint": "0x00081184",
            "current_name": "initialize_program_00081184",
            "code": "\nvoid initializeProgram_00081184(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081184": "initialize_program_00081184",
                "undefined4": "void"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008118c": {
            "entrypoint": "0x0008118c",
            "current_name": "calculate_sum_0008118c",
            "code": "\nint calculateSum_0008118c(int inputValue)\n\n{\n  int previousSum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previousSum = DAT_20071180;\n  DAT_20071180 = inputValue + DAT_20071180;\n  return previousSum;\n}\n\n",
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "param_1": "inputValue",
                "iVar1": "previousSum"
            },
            "calling": [
                "FUN_00082970"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811ae": {
            "entrypoint": "0x000811ae",
            "current_name": "get_negative_one_000811ae",
            "code": "\nint getNegativeOne_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000811ae": "get_negative_one_000811ae",
                "undefined4": "int"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811b4": {
            "entrypoint": "0x000811b4",
            "current_name": "set_memory_parameter_value_000811b4",
            "code": "\nundefined4 setMemoryParameterValue_000811b4(undefined4 param_value,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811b4": "set_memory_parameter_value_000811b4",
                "param_1": "param_value",
                "param_2": "memory_address"
            },
            "calling": [
                "FUN_000846b4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811be": {
            "entrypoint": "0x000811be",
            "current_name": "initialize_application_000811be",
            "code": "\nundefined4 initializeApplication_000811be(void)\n\n{\n  status 1;\n}\n\n",
            "renaming": {
                "FUN_000811be": "initialize_application_000811be",
                "return": "status"
            },
            "calling": [
                "FUN_000846dc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c2": {
            "entrypoint": "0x000811c2",
            "current_name": "get_default_value_000811c2",
            "code": "\nundefined4 get_default_value_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c2": "get_default_value_000811c2"
            },
            "calling": [
                "FUN_00084700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811c6": {
            "entrypoint": "0x000811c6",
            "current_name": "initialize_program_000811c6",
            "code": "\nundefined4 initializeProgram_000811c6(void)\n\n{\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000811c6": "initialize_program_000811c6"
            },
            "calling": [
                "FUN_00084728"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000811cc": {
            "entrypoint": "0x000811cc",
            "current_name": "process_data_000811cc",
            "code": "\n\n\nuint processData_000811cc(undefined4 param,int data,uint size)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)size; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(data + index);\n  }\n  return size & ~((int)size >> 0x1f);\n}\n\n",
            "renaming": {
                "FUN_000811cc": "process_data_000811cc",
                "param_1": "param",
                "param_2": "data",
                "param_3": "size",
                "iVar1": "index"
            },
            "calling": [
                "FUN_00084464"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "entrypoint": "0x00081208",
            "current_name": "get_data_from_memory_thunk_00081714",
            "code": "\nundefined4 get_data_from_memory_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "thunk_FUN_00081714": "get_data_from_memory_thunk_00081714"
            },
            "calling": [
                "FUN_0008043e",
                "FUN_000804a8",
                "FUN_000805d0",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00081714"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008120c": {
            "entrypoint": "0x0008120c",
            "current_name": "FUNC_0008120c",
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00081210": {
            "entrypoint": "0x00081210",
            "current_name": "process_data_00081210",
            "code": "\n\n\nint processData_00081210(int inputValue,int option)\n\n{\n  int result;\n  uint value1;\n  undefined4 value2;\n  uint value3;\n  byte lowerNibble;\n  byte updatedByte;\n  int temp3;\n  int temp4;\n  \n  result = inputValue;\n  if ((&DAT_00084d24)[inputValue * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[inputValue] & 0xf) == 4) {\n      result = FUN_0008105c(0x400c0000,(&DAT_00084d31)[inputValue * 0x1c]);\n    }\n    updatedByte = (&DAT_20070d94)[inputValue];\n    lowerNibble = updatedByte & 0xf;\n    if ((lowerNibble < 3) && (updatedByte != 0)) {\n      if (lowerNibble == 2) {\n        if (option == 0) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 1) {\n        if (option == 2) {\n          return result;\n        }\n      }\n      else if (lowerNibble == 3) {\n        if (option == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (option != 1) {\nLAB_0008126c:\n      if (option == 0) {\n        result = inputValue * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        updatedByte = (&DAT_20070d94)[inputValue] & 0xf0 | 2;\n      }\n      else {\n        if (option != 2) {\n          return result;\n        }\n        result = inputValue * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        updatedByte = (&DAT_20070d94)[inputValue] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[inputValue] = updatedByte;\n      return result;\n    }\n    temp3 = inputValue * 0x1c;\n    temp4 = *(int *)(&DAT_00084d18 + temp3);\n    if (updatedByte >> 4 == 0) {\n      value2 = 4;\n    }\n    else {\n      value2 = 5;\n    }\n    result = FUN_00080da0(temp4,value2,*(undefined4 *)(&DAT_00084d1c + temp3),\n                         *(undefined4 *)(&DAT_00084d28 + temp3));\n    (&DAT_20070d94)[inputValue] = (&DAT_20070d94)[inputValue] & 0xf0 | 3;\n    if (*(int *)(temp4 + 0x18) == -1) {\n      value1 = *(uint *)(&DAT_00084d20 + temp3);\n      if (0x2c < value1) {\n        return 1;\n      }\n      if (value1 < 0x20) {\n        value1 = 1 << (value1 & 0xff);\n        value3 = _DAT_400e0618 & value1;\n        if (value3 == value1) {\n          _DAT_400e0614 = value3;\n        }\n      }\n      else {\n        value1 = 1 << (value1 - 0x20 & 0xff);\n        value3 = _DAT_400e0708 & value1;\n        if (value3 == value1) {\n          _DAT_400e0704 = value3;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "param_1": "inputValue",
                "param_2": "option",
                "iVar1": "result",
                "iVar7": "temp3",
                "iVar8": "temp4",
                "bVar5": "lowerNibble",
                "bVar6": "updatedByte",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "value3"
            },
            "calling": [
                "FUN_00081318",
                "FUN_000804a8",
                "FUN_00080164"
            ],
            "called": [
                "FUN_00080e18",
                "FUN_0008105c",
                "FUN_00080da0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081318": {
            "entrypoint": "0x00081318",
            "current_name": "update_data_00081318",
            "code": "\nvoid updateData_00081318(int inputIndex,int newValue,undefined4 additionalData)\n\n{\n  int result;\n  undefined4 dataValue;\n  int dataIndex;\n  \n  if ((&DAT_00084d24)[inputIndex * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[inputIndex] & 0xf) == 5) {\n      FUN_00081210(inputIndex,1,additionalData,5,inputIndex,newValue,additionalData);\n    }\n    (&DAT_20070d94)[inputIndex] = (&DAT_20070d94)[inputIndex] & 0xf | (byte)(newValue << 4);\n    dataIndex = *(int *)(&DAT_00084d18 + inputIndex * 0x1c);\n    dataValue = *(undefined4 *)(&DAT_00084d1c + inputIndex * 0x1c);\n    result = FUN_00080e04(dataIndex,dataValue);\n    if (result == 0) {\n      if (newValue != 0) {\n        *(undefined4 *)(dataIndex + 100) = dataValue;\n        return;\n      }\n      *(undefined4 *)(dataIndex + 0x60) = dataValue;\n      return;\n    }\n    FUN_00080d7a(dataIndex,dataValue,newValue,0,1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081318": "update_data_00081318",
                "param_1": "inputIndex",
                "param_2": "newValue",
                "param_3": "additionalData",
                "iVar1": "result",
                "uVar2": "dataValue",
                "iVar3": "dataIndex"
            },
            "calling": [
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4",
                "FUN_00080164",
                "FUN_00080258"
            ],
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081388": {
            "entrypoint": "0x00081388",
            "current_name": "execute_if_last_relocation_00081388",
            "code": "\nvoid executeIfLastRelocation_00081388(void)\n\n{\n  if ((relTable[6].r_info != 0xffffffff) &&\n     (relTable[6].r_info = relTable[6].r_info - 1,\n     relTable[6].r_info == 0)) {\n    (*(codeBlock *)((int)&relTable[0].r_offset + 1))();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081388": "execute_if_last_relocation_00081388",
                "Elf32_Rel_ARRAY_20070000": "relTable",
                "code": "codeBlock"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813a8": {
            "entrypoint": "0x000813a8",
            "current_name": "initialize_param_000813a8",
            "code": "\nint initializeParam_000813a8(int param)\n\n{\n  FUN_00082504(param,0,0x80);\n  *(undefined4 *)(param + 0x80) = 0;\n  *(undefined4 *)(param + 0x84) = 0;\n  return param;\n}\n\n",
            "renaming": {
                "FUN_000813a8": "initialize_param_000813a8",
                "param_1": "param"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813c2": {
            "entrypoint": "0x000813c2",
            "current_name": "update_parameter_000813c2",
            "code": "\nvoid updateParameter_000813c2(int data,undefined value)\n\n{\n  uint nextIndex;\n  \n  nextIndex = *(int *)(data + 0x80) + 1U & 0x7f;\n  if (nextIndex != *(uint *)(data + 0x84)) {\n    *(undefined *)(data + *(int *)(data + 0x80)) = value;\n    *(uint *)(data + 0x80) = nextIndex;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000813c2": "update_parameter_000813c2",
                "param_1": "data",
                "param_2": "value",
                "uVar1": "nextIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000813e4": {
            "entrypoint": "0x000813e4",
            "current_name": "calculate_difference_000813e4",
            "code": "\nuint calculateDifference_000813e4(int inputValue)\n\n{\n  return *(int *)(*(int *)(inputValue + 0x10) + 0x80) - *(int *)(*(int *)(inputValue + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00080ce0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081454": {
            "entrypoint": "0x00081454",
            "current_name": "update_data_00081454",
            "code": "\nundefined4 updateData_00081454(int dataPointer,undefined4 newValue)\n\n{\n  int dataOffset;\n  uint newIndex;\n  \n  dataOffset = *(int *)(dataPointer + 0x14);\n  if ((*(int *)(*(int *)(dataPointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(dataOffset + 0x84) == *(int *)(dataOffset + 0x80))) {\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 0x1c) = newValue;\n  }\n  else {\n    newIndex = *(int *)(dataOffset + 0x80) + 1U & 0x8000007f;\n    if ((int)newIndex < 0) {\n      newIndex = (newIndex - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(dataOffset + 0x84) == newIndex);\n    *(char *)(dataOffset + *(int *)(dataOffset + 0x80)) = (char)newValue;\n    *(uint *)(*(int *)(dataPointer + 0x14) + 0x80) = newIndex;\n    *(undefined4 *)(*(int *)(dataPointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "param_1": "dataPointer",
                "param_2": "newValue",
                "iVar1": "dataOffset",
                "uVar2": "newIndex"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000814e4": {
            "entrypoint": "0x000814e4",
            "current_name": "initialize_function_000814e4",
            "code": "\nvoid initializeFunction_000814e4(undefined4 *outputArray,undefined4 inputParameter1,undefined inputParameter2,undefined4 inputParameter3,\n                 undefined4 inputParameter4,undefined4 inputParameter5)\n\n{\n  outputArray[1] = 0;\n  outputArray[2] = 1000;\n  outputArray[6] = inputParameter1;\n  *outputArray = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(outputArray + 7) = inputParameter2;\n  outputArray[4] = inputParameter4;\n  outputArray[8] = inputParameter3;\n  outputArray[5] = inputParameter5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000814e4": "initialize_function_000814e4",
                "param_1": "outputArray",
                "param_2": "inputParameter1",
                "param_3": "inputParameter2",
                "param_4": "inputParameter3",
                "param_5": "inputParameter4",
                "param_6": "inputParameter5"
            },
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081508": {
            "entrypoint": "0x00081508",
            "current_name": "initialize_memory_00081508",
            "code": "\nvoid initializeMemory_00081508(int memoryBlock,uint blockSize,undefined4 value)\n\n{\n  int offset1;\n  undefined4 *pointer1;\n  \n  FUN_00080e18(*(undefined4 *)(memoryBlock + 0x20));\n  pointer1 = *(undefined4 **)(memoryBlock + 0x18);\n  pointer1[0x48] = 0x202;\n  *pointer1 = 0xac;\n  pointer1[1] = value;\n  pointer1[8] = Elf32_Rel_ARRAY_20070000[6].r_offset / blockSize >> 4;\n  pointer1[3] = 0xffffffff;\n  pointer1[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(memoryBlock + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(memoryBlock + 0x1c) & 0x1f);\n  offset1 = *(int *)(memoryBlock + 0x10);\n  *(undefined4 *)(offset1 + 0x84) = 0;\n  *(undefined4 *)(offset1 + 0x80) = 0;\n  offset1 = *(int *)(memoryBlock + 0x14);\n  *(undefined4 *)(offset1 + 0x84) = 0;\n  *(undefined4 *)(offset1 + 0x80) = 0;\n  *pointer1 = 0x50;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081508": "initialize_memory_00081508",
                "param_1": "memoryBlock",
                "param_2": "blockSize",
                "param_3": "value",
                "iVar1": "offset1",
                "puVar2": "pointer1"
            },
            "calling": [],
            "called": [
                "FUN_00080e18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815d4": {
            "entrypoint": "0x000815d4",
            "current_name": "initialize_function_000815d4",
            "code": "\nundefined4 * initializeFunction_000815d4(undefined4 *resultArray,undefined4 inputValue)\n\n{\n  FUN_000814e4();\n  *resultArray = &PTR_FUN_00081454_1_000857d8;\n  resultArray[9] = inputValue;\n  return resultArray;\n}\n\n",
            "renaming": {
                "FUN_000815d4": "initialize_function_000815d4",
                "param_1": "resultArray",
                "param_2": "inputValue"
            },
            "calling": [
                "FUN_00080c0c"
            ],
            "called": [
                "FUN_000814e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815f8": {
            "entrypoint": "0x000815f8",
            "current_name": "combine_params_000815f8",
            "code": "\nuint combineParams_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "renaming": {
                "FUN_000815f8": "combine_params_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "calling": [
                "FUN_00080410"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000815fe": {
            "entrypoint": "0x000815fe",
            "current_name": "process_parameter_value_000815fe",
            "code": "\nundefined4 * process_parameter_value_000815fe(undefined4 *input_array)\n\n{\n  FUN_00081e04(*input_array);\n  return input_array;\n}\n\n",
            "renaming": {
                "FUN_000815fe": "process_parameter_value_000815fe",
                "param_1": "input_array"
            },
            "calling": [],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008160c": {
            "entrypoint": "0x0008160c",
            "current_name": "reset_param_0008160c",
            "code": "\nvoid resetParam_0008160c(int *param)\n\n{\n  if (*param != 0) {\n    FUN_00081e04();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008160c": "reset_param_0008160c",
                "param_1": "param",
                "param_1[2]": "param[2]",
                "param_1[1]": "param[1]"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081e04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081622": {
            "entrypoint": "0x00081622",
            "current_name": "update_param_and_return_00081622",
            "code": "\nint updateParamAndReturn_00081622(int *paramArray,int size,undefined4 arg1,undefined4 arg2)\n\n{\n  int returnValue;\n  \n  returnValue = FUN_000825a0(*paramArray,size + 1,arg1,arg2,arg2);\n  if (returnValue != 0) {\n    *paramArray = returnValue;\n    paramArray[1] = size;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00081622": "update_param_and_return_00081622",
                "param_1": "paramArray",
                "param_2": "size",
                "param_3": "arg1",
                "param_4": "arg2",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_0008163a"
            ],
            "called": [
                "FUN_000825a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008163a": {
            "entrypoint": "0x0008163a",
            "current_name": "check_and_update_parameter_0008163a",
            "code": "\nundefined4 check_and_update_parameter_0008163a(int *parameter_array,uint threshold)\n\n{\n  int result;\n  \n  if ((*parameter_array == 0) || (value_at_param_1_index_1 < threshold)) {\n    result = FUN_00081622(parameter_array);\n    if (result == 0) {\n      return 0;\n    }\n    if (value_at_param_1_index_2 == 0) {\n      *(undefined *)*parameter_array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_0008163a": "check_and_update_parameter_0008163a",
                "param_1": "parameter_array",
                "param_2": "threshold",
                "iVar1": "result",
                "(uint)param_1[1]": "value_at_param_1_index_1",
                "param_1[2]": "value_at_param_1_index_2"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [
                "FUN_00081622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008165c": {
            "entrypoint": "0x0008165c",
            "current_name": "validate_and_process_data_0008165c",
            "code": "\nundefined4 * validate_and_process_data_0008165c(undefined4 *data_array,undefined4 param_value,undefined4 input_data)\n\n{\n  int result;\n  \n  result = FUN_0008163a(data_array,input_data);\n  if (result == 0) {\n    FUN_0008160c(data_array);\n  }\n  else {\n    data_array[2] = input_data;\n    FUN_00082994(*data_array,param_value);\n  }\n  return data_array;\n}\n\n",
            "renaming": {
                "FUN_0008165c": "validate_and_process_data_0008165c",
                "param_1": "data_array",
                "param_2": "param_value",
                "param_3": "input_data",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00081682"
            ],
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081682": {
            "entrypoint": "0x00081682",
            "current_name": "initialize_params_00081682",
            "code": "\nundefined4 * initializeParams_00081682(undefined4 *paramArray,int paramValue)\n\n{\n  undefined4 result;\n  \n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[2] = 0;\n  if (paramValue != 0) {\n    result = FUN_00082a50(paramValue);\n    FUN_0008165c(paramArray,paramValue,result);\n  }\n  return paramArray;\n}\n\n",
            "renaming": {
                "FUN_00081682": "initialize_params_00081682",
                "param_1": "paramArray",
                "param_2": "paramValue",
                "uVar1": "result",
                "param_1[1]": "paramArray[1]",
                "param_1[2]": "paramArray[2]"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816a6": {
            "entrypoint": "0x000816a6",
            "current_name": "FUNC_000816a6",
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000816a8": {
            "entrypoint": "0x000816a8",
            "current_name": "run_main_loop_000816a8",
            "code": "\nvoid runMainLoop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000816a8": "run_main_loop_000816a8"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_000804a8",
                "FUN_00080ce0",
                "FUN_00080ae4",
                "FUN_000805d0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_000816a6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000816d4": {
            "entrypoint": "0x000816d4",
            "current_name": "initialize_memory_000816d4",
            "code": "\n\n\nvoid initializeMemory_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000816d4": "initialize_memory_000816d4"
            },
            "calling": [
                "FUN_000816a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081714": {
            "entrypoint": "0x00081714",
            "current_name": "get_data_00081714",
            "code": "\nundefined4 get_data_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "renaming": {
                "FUN_00081714": "get_data_00081714"
            },
            "calling": [
                "thunk_FUN_00081714"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081730": {
            "entrypoint": "0x00081730",
            "current_name": "calculate_floating_point_00081730",
            "code": "\nuint calculateFloatingPoint_00081730(uint integerPart,uint fractionalPart,undefined4 sign,uint exponent)\n\n{\n  int iVar1;\n  int iVar2;\n  uint fractionalPartComplement;\n  uint tempVariable1;\n  uint tempVariable2;\n  uint tempVariable3;\n  uint difference;\n  bool isEqual;\n  \n  fractionalPartComplement = fractionalPart ^ 0x80000000;\n  tempVariable2 = integerPart << 1;\n  isEqual = tempVariable2 == 0;\n  if (!isEqual) {\n    exponent = fractionalPart << 1;\n    isEqual = exponent == 0;\n  }\n  if (!isEqual) {\n    isEqual = tempVariable2 == exponent;\n  }\n  iVar1 = (int)tempVariable2 >> 0x18;\n  if (!isEqual) {\n    isEqual = iVar1 == -1;\n  }\n  if (!isEqual) {\n    isEqual = (int)exponent >> 0x18 == -1;\n  }\n  if (isEqual) {\n    iVar2 = (int)(fractionalPart << 1) >> 0x18;\n    if (iVar1 == -1 || iVar2 == -1) {\n      tempVariable2 = fractionalPartComplement;\n      if (iVar1 == -1) {\n        tempVariable2 = integerPart;\n      }\n      if (iVar1 != -1 || iVar2 != -1) {\n        fractionalPartComplement = tempVariable2;\n      }\n      isEqual = (tempVariable2 & 0x7fffff) == 0;\n      if (isEqual) {\n        isEqual = (fractionalPartComplement & 0x7fffff) == 0;\n      }\n      if (isEqual) {\n        isEqual = tempVariable2 == fractionalPartComplement;\n      }\n      if (!isEqual) {\n        tempVariable2 = tempVariable2 | 0x400000;\n      }\n      return tempVariable2;\n    }\n    if (((integerPart ^ fractionalPartComplement) & 0x7fffffff) != 0) {\n      if (tempVariable2 == 0) {\n        integerPart = fractionalPartComplement;\n      }\n      return integerPart;\n    }\n    if (integerPart != fractionalPartComplement) {\n      return 0;\n    }\n    if ((tempVariable2 & 0xff000000) == 0) {\n      fractionalPartComplement = integerPart << 1;\n      if ((integerPart & 0x80000000) != 0) {\n        fractionalPartComplement = fractionalPartComplement | 0x80000000;\n      }\n      return fractionalPartComplement;\n    }\n    if (tempVariable2 < 0xfe000000) {\n      return integerPart + 0x800000;\n    }\n    integerPart = integerPart & 0x80000000;\nLAB_0008186a:\n    return integerPart | 0x7f800000;\n  }\n  tempVariable2 = tempVariable2 >> 0x18;\n  exponent = exponent >> 0x18;\n  difference = exponent - tempVariable2;\n  isEqual = difference != 0;\n  tempVariable3 = tempVariable2;\n  if (isEqual && tempVariable2 <= exponent) {\n    tempVariable3 = tempVariable2 + difference;\n  }\n  if (isEqual && tempVariable2 <= exponent) {\n    fractionalPartComplement = fractionalPartComplement ^ integerPart;\n  }\n  if (isEqual && tempVariable2 <= exponent) {\n    integerPart = integerPart ^ fractionalPartComplement;\n  }\n  if (isEqual && tempVariable2 <= exponent) {\n    fractionalPartComplement = fractionalPartComplement ^ integerPart;\n  }\n  if (exponent < tempVariable2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return integerPart;\n  }\n  tempVariable2 = integerPart & 0xffffff | 0x800000;\n  if ((integerPart & 0x80000000) != 0) {\n    tempVariable2 = -tempVariable2;\n  }\n  tempVariable1 = fractionalPartComplement & 0xffffff | 0x800000;\n  if ((fractionalPartComplement & 0x80000000) != 0) {\n    tempVariable1 = -tempVariable1;\n  }\n  if (tempVariable3 == difference) {\n    tempVariable1 = tempVariable1 ^ 0x800000;\n    if (tempVariable3 == 0) {\n      tempVariable2 = tempVariable2 ^ 0x800000;\n      tempVariable3 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  tempVariable2 = tempVariable2 + ((int)tempVariable1 >> (difference & 0xff));\n  tempVariable1 = tempVariable1 << (0x20 - difference & 0xff);\n  integerPart = tempVariable2 & 0x80000000;\n  if ((int)tempVariable2 < 0) {\n    isEqual = tempVariable1 != 0;\n    tempVariable1 = -tempVariable1;\n    tempVariable2 = -tempVariable2 - (uint)isEqual;\n  }\n  if (tempVariable2 < 0x800000) {\n    fractionalPartComplement = tempVariable1 & 0x80000000;\n    tempVariable1 = tempVariable1 << 1;\n    tempVariable2 = tempVariable2 * 2 + (uint)(fractionalPartComplement != 0);\n    fractionalPartComplement = tempVariable3 - 2;\n    if ((tempVariable2 & 0x800000) == 0) {\n      difference = LZCOUNT(tempVariable2) - 8;\n      tempVariable2 = tempVariable2 << (difference & 0xff);\n      if ((int)fractionalPartComplement < (int)difference) {\n        tempVariable2 = tempVariable2 >> (-(fractionalPartComplement - difference) & 0xff);\n      }\n      else {\n        tempVariable2 = tempVariable2 + (fractionalPartComplement - difference) * 0x800000;\n      }\n      return tempVariable2 | integerPart;\n    }\n  }\n  else {\n    fractionalPartComplement = tempVariable3 - 1;\n    if (0xffffff < tempVariable2) {\n      fractionalPartComplement = tempVariable2 & 1;\n      tempVariable2 = tempVariable2 >> 1;\n      tempVariable1 = (uint)(fractionalPartComplement != 0) << 0x1f | tempVariable1 >> 1;\n      fractionalPartComplement = tempVariable3;\n      if (0xfd < tempVariable3) goto LAB_0008186a;\n    }\n  }\n  tempVariable2 = tempVariable2 + fractionalPartComplement * 0x800000 + (uint)(0x7fffffff < tempVariable1);\n  if (tempVariable1 == 0x80000000) {\n    tempVariable2 = tempVariable2 & 0xfffffffe;\n  }\n  return tempVariable2 | integerPart;\n}\n\n",
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "param_1": "integerPart",
                "param_2": "fractionalPart",
                "param_3": "sign",
                "param_4": "exponent",
                "uVar3": "fractionalPartComplement",
                "uVar4": "tempVariable1",
                "uVar5": "tempVariable2",
                "uVar6": "tempVariable3",
                "uVar7": "difference",
                "bVar8": "isEqual"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081734": {
            "entrypoint": "0x00081734",
            "current_name": "calculate_floating_point_00081734",
            "code": "\nuint calculateFloatingPoint_00081734(uint number1,uint number2,undefined4 constant1,uint constant2)\n\n{\n  int shiftedBit1;\n  int shiftedBit2;\n  uint shiftedNum2;\n  uint shiftedNum1;\n  uint shiftedNum1Temp;\n  uint diff;\n  bool isZeroShiftedNum;\n  \n  shiftedNum1 = number1 << 1;\n  isZeroShiftedNum = shiftedNum1 == 0;\n  if (!isZeroShiftedNum) {\n    constant2 = number2 << 1;\n    isZeroShiftedNum = constant2 == 0;\n  }\n  if (!isZeroShiftedNum) {\n    isZeroShiftedNum = shiftedNum1 == constant2;\n  }\n  shiftedBit1 = (int)shiftedNum1 >> 0x18;\n  if (!isZeroShiftedNum) {\n    isZeroShiftedNum = shiftedBit1 == -1;\n  }\n  if (!isZeroShiftedNum) {\n    isZeroShiftedNum = (int)constant2 >> 0x18 == -1;\n  }\n  if (isZeroShiftedNum) {\n    shiftedBit2 = (int)(number2 << 1) >> 0x18;\n    if (shiftedBit1 == -1 || shiftedBit2 == -1) {\n      shiftedNum1 = number2;\n      if (shiftedBit1 == -1) {\n        shiftedNum1 = number1;\n      }\n      if (shiftedBit1 != -1 || shiftedBit2 != -1) {\n        number2 = shiftedNum1;\n      }\n      isZeroShiftedNum = (shiftedNum1 & 0x7fffff) == 0;\n      if (isZeroShiftedNum) {\n        isZeroShiftedNum = (number2 & 0x7fffff) == 0;\n      }\n      if (isZeroShiftedNum) {\n        isZeroShiftedNum = shiftedNum1 == number2;\n      }\n      if (!isZeroShiftedNum) {\n        shiftedNum1 = shiftedNum1 | 0x400000;\n      }\n      return shiftedNum1;\n    }\n    if (((number1 ^ number2) & 0x7fffffff) != 0) {\n      if (shiftedNum1 == 0) {\n        number1 = number2;\n      }\n      return number1;\n    }\n    if (number1 != number2) {\n      return 0;\n    }\n    if ((shiftedNum1 & 0xff000000) == 0) {\n      shiftedNum1 = number1 << 1;\n      if ((number1 & 0x80000000) != 0) {\n        shiftedNum1 = shiftedNum1 | 0x80000000;\n      }\n      return shiftedNum1;\n    }\n    if (shiftedNum1 < 0xfe000000) {\n      return number1 + 0x800000;\n    }\n    number1 = number1 & 0x80000000;\nLAB_0008186a:\n    return number1 | 0x7f800000;\n  }\n  shiftedNum1 = shiftedNum1 >> 0x18;\n  constant2 = constant2 >> 0x18;\n  diff = constant2 - shiftedNum1;\n  isZeroShiftedNum = diff != 0;\n  shiftedNum1Temp = shiftedNum1;\n  if (isZeroShiftedNum && shiftedNum1 <= constant2) {\n    shiftedNum1Temp = shiftedNum1 + diff;\n  }\n  if (isZeroShiftedNum && shiftedNum1 <= constant2) {\n    number2 = number2 ^ number1;\n  }\n  if (isZeroShiftedNum && shiftedNum1 <= constant2) {\n    number1 = number1 ^ number2;\n  }\n  if (isZeroShiftedNum && shiftedNum1 <= constant2) {\n    number2 = number2 ^ number1;\n  }\n  if (constant2 < shiftedNum1) {\n    diff = -diff;\n  }\n  if (0x19 < diff) {\n    return number1;\n  }\n  shiftedNum1 = number1 & 0xffffff | 0x800000;\n  if ((number1 & 0x80000000) != 0) {\n    shiftedNum1 = -shiftedNum1;\n  }\n  shiftedNum2 = number2 & 0xffffff | 0x800000;\n  if ((number2 & 0x80000000) != 0) {\n    shiftedNum2 = -shiftedNum2;\n  }\n  if (shiftedNum1Temp == diff) {\n    shiftedNum2 = shiftedNum2 ^ 0x800000;\n    if (shiftedNum1Temp == 0) {\n      shiftedNum1 = shiftedNum1 ^ 0x800000;\n      shiftedNum1Temp = 1;\n    }\n    else {\n      diff = diff - 1;\n    }\n  }\n  shiftedNum1 = shiftedNum1 + ((int)shiftedNum2 >> (diff & 0xff));\n  shiftedNum2 = shiftedNum2 << (0x20 - diff & 0xff);\n  number1 = shiftedNum1 & 0x80000000;\n  if ((int)shiftedNum1 < 0) {\n    isZeroShiftedNum = shiftedNum2 != 0;\n    shiftedNum2 = -shiftedNum2;\n    shiftedNum1 = -shiftedNum1 - (uint)isZeroShiftedNum;\n  }\n  if (shiftedNum1 < 0x800000) {\n    diff = shiftedNum2 & 0x80000000;\n    shiftedNum2 = shiftedNum2 << 1;\n    shiftedNum1 = shiftedNum1 * 2 + (uint)(diff != 0);\n    diff = shiftedNum1Temp - 2;\n    if ((shiftedNum1 & 0x800000) == 0) {\n      shiftedNum1Temp = leadingZeroCount(shiftedNum1) - 8;\n      shiftedNum1 = shiftedNum1 << (shiftedNum1Temp & 0xff);\n      if ((int)diff < (int)shiftedNum1Temp) {\n        shiftedNum1 = shiftedNum1 >> (-(diff - shiftedNum1Temp) & 0xff);\n      }\n      else {\n        shiftedNum1 = shiftedNum1 + (diff - shiftedNum1Temp) * 0x800000;\n      }\n      return shiftedNum1 | number1;\n    }\n  }\n  else {\n    diff = shiftedNum1Temp - 1;\n    if (0xffffff < shiftedNum1) {\n      diff = shiftedNum1 & 1;\n      shiftedNum1 = shiftedNum1 >> 1;\n      shiftedNum2 = (uint)(diff != 0) << 0x1f | shiftedNum2 >> 1;\n      diff = shiftedNum1Temp;\n      if (0xfd < shiftedNum1Temp) goto LAB_0008186a;\n    }\n  }\n  shiftedNum1 = shiftedNum1 + diff * 0x800000 + (uint)(0x7fffffff < shiftedNum2);\n  if (shiftedNum2 == 0x80000000) {\n    shiftedNum1 = shiftedNum1 & 0xfffffffe;\n  }\n  return shiftedNum1 | number1;\n}\n\n",
            "renaming": {
                "FUN_00081734": "calculate_floating_point_00081734",
                "param_1": "number1",
                "param_2": "number2",
                "param_3": "constant1",
                "param_4": "constant2",
                "uVar4": "shiftedNum1",
                "uVar3": "shiftedNum2",
                "uVar6": "diff",
                "uVar5": "shiftedNum1Temp",
                "iVar1": "shiftedBit1",
                "iVar2": "shiftedBit2",
                "bVar7": "isZeroShiftedNum",
                "LZCOUNT": "leadingZeroCount"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081894": {
            "entrypoint": "0x00081894",
            "current_name": "calculate_hash_00081894",
            "code": "\nuint calculateHash_00081894(uint input)\n\n{\n  uint leadingZeroes;\n  uint shift;\n  int offset;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leadingZeroes = LZCOUNT(input);\n  shift = leadingZeroes - 8;\n  offset = shift * -0x800000 + 0x4a800000;\n  if (7 < leadingZeroes) {\n    mask = 0 << (shift & 0xff);\n    leadingZeroes = offset + (input << (shift & 0xff)) +\n            (0U >> (0x20 - shift & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leadingZeroes = leadingZeroes & 0xfffffffe;\n    }\n    return leadingZeroes;\n  }\n  shift = input << leadingZeroes + 0x18;\n  leadingZeroes = offset + ((input >> (0x20 - (leadingZeroes + 0x18) & 0xff)) - ((int)shift >> 0x1f));\n  if ((shift & 0x7fffffff) == 0) {\n    leadingZeroes = leadingZeroes & ~(shift >> 0x1f);\n  }\n  return leadingZeroes;\n}\n\n",
            "renaming": {
                "FUN_00081894": "calculate_hash_00081894",
                "param_1": "input",
                "uVar1": "leadingZeroes",
                "uVar2": "shift",
                "iVar3": "offset",
                "uVar4": "mask"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008189c": {
            "entrypoint": "0x0008189c",
            "current_name": "calculate_checksum_0008189c",
            "code": "\nuint calculateChecksum_0008189c(uint inputValue)\n\n{\n  uint leadingZeros;\n  uint shiftValue;\n  uint signBit;\n  int offset;\n  \n  signBit = inputValue & 0x80000000;\n  if ((int)signBit < 0) {\n    inputValue = -inputValue;\n  }\n  if (inputValue == 0) {\n    return 0;\n  }\n  leadingZeros = LZCOUNT(inputValue);\n  shiftValue = leadingZeros - 8;\n  offset = ((signBit | 0x4b000000) - 0x800000) + shiftValue * -0x800000;\n  if (7 < leadingZeros) {\n    leadingZeros = 0 << (shiftValue & 0xff);\n    signBit = offset + (inputValue << (shiftValue & 0xff)) +\n            (0U >> (0x20 - shiftValue & 0xff)) + (uint)(0x7fffffff < leadingZeros);\n    if (leadingZeros == 0x80000000) {\n      signBit = signBit & 0xfffffffe;\n    }\n    return signBit;\n  }\n  shiftValue = inputValue << leadingZeros + 0x18;\n  signBit = offset + ((inputValue >> (0x20 - (leadingZeros + 0x18) & 0xff)) - ((int)shiftValue >> 0x1f));\n  if ((shiftValue & 0x7fffffff) == 0) {\n    signBit = signBit & ~(shiftValue >> 0x1f);\n  }\n  return signBit;\n}\n\n",
            "renaming": {
                "FUN_0008189c": "calculate_checksum_0008189c",
                "param_1": "inputValue",
                "uVar1": "leadingZeros",
                "uVar2": "shiftValue",
                "uVar3": "signBit",
                "iVar4": "offset"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081944": {
            "entrypoint": "0x00081944",
            "current_name": "perform_floating_point_operation_00081944",
            "code": "\nuint performFloatingPointOperation_00081944(uint input_1,uint input_2,undefined4 constant_1,uint constant_2)\n\n{\n  longlong result_1;\n  uint result_2;\n  uint temp_1;\n  int temp_2;\n  int temp_3;\n  uint temp_4;\n  int temp_5;\n  uint temp_6;\n  bool flag_1;\n  bool flag_2;\n  \n  temp_1 = input_1 >> 0x17 & 0xff;\n  flag_1 = temp_1 == 0;\n  if (!flag_1) {\n    constant_2 = input_2 >> 0x17 & 0xff;\n    flag_1 = constant_2 == 0;\n  }\n  if (!flag_1) {\n    flag_1 = temp_1 == 0xff;\n  }\n  if (!flag_1) {\n    flag_1 = constant_2 == 0xff;\n  }\n  if (flag_1) {\n    constant_2 = input_2 >> 0x17 & 0xff;\n    if (temp_1 == 0xff || constant_2 == 0xff) {\n      flag_1 = input_1 == 0 || input_1 == 0x80000000;\n      result_2 = input_2;\n      if (input_1 != 0 && input_1 != 0x80000000) {\n        flag_1 = input_2 == 0;\n        result_2 = input_1;\n      }\n      if (!flag_1) {\n        flag_1 = input_2 == 0x80000000;\n      }\n      temp_6 = result_2;\n      if (((flag_1) || ((temp_1 == 0xff && ((result_2 & 0x7fffff) != 0)))) ||\n         ((constant_2 == 0xff && (temp_6 = input_2, (input_2 & 0x7fffff) != 0)))) {\n        return temp_6 | 0x7fc00000;\n      }\n      result_2 = result_2 ^ input_2;\n      goto LAB_00081a94;\n    }\n    flag_1 = (input_1 & 0x7fffffff) == 0;\n    if (!flag_1) {\n      flag_1 = (input_2 & 0x7fffffff) == 0;\n    }\n    if (flag_1) {\n      return (input_1 ^ input_2) & 0x80000000;\n    }\n    flag_1 = temp_1 == 0;\n    result_2 = input_1 & 0x80000000;\n    while( true ) {\n      if (flag_1) {\n        input_1 = input_1 << 1;\n        flag_1 = (input_1 & 0x800000) == 0;\n      }\n      if (!flag_1) break;\n      temp_1 = temp_1 - 1;\n    }\n    input_1 = input_1 | result_2;\n    flag_1 = constant_2 == 0;\n    result_2 = input_2 & 0x80000000;\n    while( true ) {\n      if (flag_1) {\n        input_2 = input_2 << 1;\n        flag_1 = (input_2 & 0x800000) == 0;\n      }\n      if (!flag_1) break;\n      constant_2 = constant_2 - 1;\n    }\n    input_2 = input_2 | result_2;\n  }\n  temp_2 = temp_1 + constant_2;\n  temp_6 = input_1 ^ input_2;\n  temp_1 = input_1 << 9;\n  flag_1 = temp_1 == 0;\n  if (!flag_1) {\n    input_2 = input_2 << 9;\n    flag_1 = input_2 == 0;\n  }\n  if (flag_1) {\n    if (temp_1 == 0) {\n      input_2 = input_2 << 9;\n    }\n    result_2 = temp_6 & 0x80000000 | input_1 & 0x7fffff | input_2 >> 9;\n    flag_2 = SBORROW4(temp_2,0x7f);\n    temp_3 = temp_2 + -0x7f;\n    flag_1 = temp_3 == 0;\n    temp_5 = temp_3;\n    if (!flag_1 && 0x7e < temp_2) {\n      flag_2 = SBORROW4(0xff,temp_3);\n      temp_5 = 0xff - temp_3;\n      flag_1 = temp_3 == 0xff;\n    }\n    if (!flag_1 && temp_5 < 0 == flag_2) {\n      result_2 = result_2 | temp_3 * 0x800000;\n    }\n    if (!flag_1 && temp_5 < 0 == flag_2) {\n      return result_2;\n    }\n    result_2 = result_2 | 0x800000;\n    temp_4 = 0;\n    flag_2 = SBORROW4(temp_3,1);\n    temp_6 = temp_2 - 0x80;\n    flag_1 = temp_6 == 0;\n    temp_1 = temp_6;\n  }\n  else {\n    result_1 = (ulonglong)(temp_1 >> 5 | 0x8000000) * (ulonglong)(input_2 >> 5 | 0x8000000);\n    temp_4 = (uint)result_1;\n    result_2 = (uint)((ulonglong)result_1 >> 0x20);\n    flag_1 = result_2 < 0x800000;\n    if (flag_1) {\n      result_2 = result_2 << 1;\n    }\n    if (flag_1) {\n      result_2 = result_2 | temp_4 >> 0x1f;\n      temp_4 = temp_4 << 1;\n    }\n    result_2 = temp_6 & 0x80000000 | result_2;\n    temp_6 = (temp_2 + -0x7f) - (uint)flag_1;\n    flag_2 = SBORROW4(temp_6,0xfd);\n    flag_1 = temp_6 == 0xfd;\n    temp_1 = temp_6 - 0xfd;\n    if (temp_6 < 0xfe) {\n      result_2 = result_2 + temp_6 * 0x800000 + (uint)(0x7fffffff < temp_4);\n      if (temp_4 == 0x80000000) {\n        result_2 = result_2 & 0xfffffffe;\n      }\n      return result_2;\n    }\n  }\n  if (flag_1 || (int)temp_1 < 0 != flag_2) {\n    flag_1 = (int)(temp_6 + 0x19) < 0;\n    if (temp_6 == 0xffffffe7 || flag_1 != SCARRY4(temp_6,0x19)) {\n      result_2 = result_2 & 0x80000000;\n    }\n    if (temp_6 != 0xffffffe7 && flag_1 == SCARRY4(temp_6,0x19)) {\n      temp_1 = (result_2 << 1) >> (-temp_6 & 0xff);\n      temp_6 = result_2 << (temp_6 + 0x20 & 0xff);\n      temp_1 = ((uint)((result_2 & 0x80000000) != 0) << 0x1f | temp_1 >> 1) + (uint)((byte)temp_1 & 1);\n      if ((temp_4 | temp_6 << 1) == 0) {\n        temp_1 = temp_1 & ~(temp_6 >> 0x1f);\n      }\n      return temp_1;\n    }\n    return result_2;\n  }\nLAB_00081a94:\n  return result_2 & 0x80000000 | 0x7f800000;\n}\n\n",
            "renaming": {
                "FUN_00081944": "perform_floating_point_operation_00081944",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "constant_1",
                "param_4": "constant_2",
                "lVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "temp_1",
                "iVar4": "temp_2",
                "iVar5": "temp_3",
                "uVar6": "temp_4",
                "iVar7": "temp_5",
                "uVar8": "temp_6",
                "bVar9": "flag_1",
                "bVar10": "flag_2"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "entrypoint": "0x00081bf4",
            "current_name": "check_overflow_condition_00081bf4",
            "code": "\nuint check_overflow_condition_00081bf4(uint result,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = result * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((result & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = result ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    result = doubled_input_1 + input_2 * -2;\n    is_zero = result == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    result = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    result = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    result = result | 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00081bf4": "check_overflow_condition_00081bf4",
                "param_1": "result",
                "param_2": "input_2",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs",
                "bVar1": "is_negative",
                "bVar5": "is_zero"
            },
            "calling": [
                "FUN_00081c5c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c54": {
            "entrypoint": "0x00081c54",
            "current_name": "execute_parameter1_before_parameter2_00081c54",
            "code": "\nvoid executeParameter1BeforeParameter2_00081c54(undefined4 parameter1,undefined4 parameter2)\n\n{\n  FUN_00081c5c(parameter2,parameter1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081c54": "execute_parameter1_before_parameter2_00081c54",
                "param_1": "parameter1",
                "param_2": "parameter2"
            },
            "calling": [
                "FUN_00081ca8"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "entrypoint": "0x00081c5c",
            "current_name": "concatenate_params_00081c5c",
            "code": "\nundefined8 concatenateParams_00081c5c(undefined4 firstParam,undefined4 secondParam)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(secondParam,firstParam);\n}\n\n",
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "firstParam",
                "param_2": "secondParam"
            },
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "called": [
                "FUN_00081bf4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081c94": {
            "entrypoint": "0x00081c94",
            "current_name": "check_cy_and_zr_00081c94",
            "code": "\nboolean check_CY_and_ZR_00081c94(void)\n\n{\n  undefined isZero;\n  undefined isCY;\n  \n  FUN_00081c5c();\n  return !(boolean)isCY || (boolean)isZero;\n}\n\n",
            "renaming": {
                "FUN_00081c94": "check_cy_and_zr_00081c94",
                "in_ZR": "isZero",
                "in_CY": "isCY",
                "bool": "boolean"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c5c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "entrypoint": "0x00081ca8",
            "current_name": "check_conditions_00081ca8",
            "code": "\nbool check_conditions_00081ca8(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  FUN_00081c54();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "renaming": {
                "FUN_00081ca8": "check_conditions_00081ca8",
                "in_ZR": "is_zero",
                "in_CY": "is_carry"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [
                "FUN_00081c54"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "entrypoint": "0x00081cd0",
            "current_name": "extract_integer_00081cd0",
            "code": "\nuint extract_integer_00081cd0(uint number)\n\n{\n  uint converted_number;\n  uint difference;\n  \n  if (number << 1 < 0x7f000000) {\n    return 0;\n  }\n  converted_number = (number << 1) >> 0x18;\n  difference = 0x9e - converted_number;\n  if (converted_number < 0x9f && difference != 0) {\n    converted_number = (number << 8 | 0x80000000) >> (difference & 0xff);\n    if ((number & 0x80000000) != 0) {\n      converted_number = -converted_number;\n    }\n    return converted_number;\n  }\n  if ((difference == 0xffffff9f) && ((number & 0x7fffff) != 0)) {\n    return 0;\n  }\n  number = number & 0x80000000;\n  if (number == 0) {\n    number = 0x7fffffff;\n  }\n  return number;\n}\n\n",
            "renaming": {
                "FUN_00081cd0": "extract_integer_00081cd0",
                "param_1": "number",
                "uVar1": "converted_number",
                "uVar2": "difference"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "entrypoint": "0x00081d1c",
            "current_name": "check_number_validity_00081d1c",
            "code": "\nuint checkNumberValidity_00081d1c(uint number)\n\n{\n  uint result;\n  \n  if (((number & 0x80000000) != 0) || (number << 1 < 0x7f000000)) {\n    return 0;\n  }\n  result = 0x9e - ((number << 1) >> 0x18);\n  if (-1 < (int)result) {\n    return (number << 8 | 0x80000000) >> (result & 0xff);\n  }\n  if ((result == 0xffffff9f) && ((number & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00081d1c": "check_number_validity_00081d1c",
                "param_1": "number",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000805d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "entrypoint": "0x00081d5c",
            "current_name": "set_relocation_entry_00081d5c",
            "code": "\nundefined4 setRelocationEntry_00081d5c(dword entry,dword offset,dword value)\n\n{\n  dword *relocationArray;\n  uint index;\n  uint bitMask;\n  \n  if (Elf32_Rel_ARRAY_20070000[48].r_offset == 0) {\n    Elf32_Rel_ARRAY_20070000[48].r_offset = 0x20070184;\n  }\n  index = *(uint *)(Elf32_Rel_ARRAY_20070000[48].r_offset + 4);\n  relocationArray = (dword *)Elf32_Rel_ARRAY_20070000[48].r_offset;\n  if (0x1f < (int)index) {\n    relocationArray = (dword *)FUN_00081df4(400);\n    if (relocationArray == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocationArray = Elf32_Rel_ARRAY_20070000[48].r_offset;\n    relocationArray[1] = 0;\n    index = 0;\n    Elf32_Rel_ARRAY_20070000[48].r_offset = (dword)relocationArray;\n    relocationArray[0x62] = 0;\n    relocationArray[99] = 0;\n  }\n  bitMask = 1 << (index & 0xff);\n  relocationArray[index + 0x22] = entry;\n  relocationArray[0x62] = relocationArray[0x62] | bitMask;\n  relocationArray[index + 0x42] = value;\n  relocationArray[99] = bitMask | relocationArray[99];\n  relocationArray[1] = index + 1;\n  relocationArray[index + 2] = offset;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00081d5c": "set_relocation_entry_00081d5c",
                "param_1": "entry",
                "param_2": "offset",
                "param_3": "value",
                "pdVar1": "relocationArray",
                "uVar2": "index",
                "uVar3": "bitMask"
            },
            "calling": [
                "FUN_00080a68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "entrypoint": "0x00081d7c",
            "current_name": "execute_and_increment_00081d7c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid executeAndIncrement_00081d7c(void)\n\n{\n  int iterationCount;\n  code **functionPointerArray;\n  \n  FUNC_00085858();\n  functionPointerArray = (code **)0x85860;\n  iterationCount = 0;\n  do {\n    iterationCount = iterationCount + 1;\n    functionPointerArray = functionPointerArray + 1;\n    (**functionPointerArray)();\n  } while (iterationCount != 4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081d7c": "execute_and_increment_00081d7c",
                "ppcVar2": "functionPointerArray",
                "iVar1": "iterationCount"
            },
            "calling": [
                "FUN_00080ae4"
            ],
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081df4": {
            "entrypoint": "0x00081df4",
            "current_name": "execute_relocation_00081df4",
            "code": "\nvoid executeRelocation_00081df4(undefined4 address)\n\n{\n  FUN_00081e14(relocationTable[140].offset,address);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081df4": "execute_relocation_00081df4",
                "param_1": "address",
                "Elf32_Rel_ARRAY_20070000": "relocationTable",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00083974"
            ],
            "called": [
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e04": {
            "entrypoint": "0x00081e04",
            "current_name": "process_elf32_rel_00081e04",
            "code": "\nvoid process_elf32_rel_00081e04(undefined4 offset)\n\n{\n  FUN_00083d9c(elf_relocations_array[140].relocation_offset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00081e04": "process_elf32_rel_00081e04",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_20070000": "elf_relocations_array",
                "r_offset": "relocation_offset"
            },
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "called": [
                "FUN_00083d9c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00081e14": {
            "entrypoint": "0x00081e14",
            "current_name": "allocate_memory_00081e14",
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_00081e14(undefined4 *output_ptr,uint size)\n\n{\n  dword rel_info;\n  int start_offset;\n  uint mask;\n  uint aligned_size;\n  int end_offset;\n  uint difference;\n  dword rel_offset;\n  uint new_size;\n  int next_offset;\n  undefined *current_ptr;\n  dword prev_ptr_offset;\n  dword prev_ptr;\n  int index;\n  dword *rel_array;\n  uint alignment;\n  undefined *new_ptr;\n  dword *rel_entry;\n  uint remaining_size;\n  \n  if (size + 0xb < 0x17) {\n    alignment = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    alignment = size + 0xb & 0xfffffff8;\n    if (((int)alignment < 0) || (alignment < size)) {\nLAB_00081e7a:\n      *output_ptr = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(output_ptr);\n  rel_info = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (alignment < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + alignment);\n    if ((index != alignment + 0x20070464) ||\n       (start_offset = index + 8, index = *(int *)(index + 0x14), start_offset != index)) {\n      end_offset = *(int *)(index + 0xc);\n      next_offset = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      alignment = *(uint *)(next_offset + 4);\n      start_offset = *(int *)(index + 8);\n      *(int *)(start_offset + 0xc) = end_offset;\n      *(int *)(end_offset + 8) = start_offset;\n      *(uint *)(next_offset + 4) = alignment | 1;\n      FUNC_0008259c(output_ptr);\n      return (int *)(index + 8);\n    }\n    remaining_size = (alignment >> 3) + 2;\n  }\n  else {\n    remaining_size = alignment >> 9;\n    if (remaining_size == 0) {\n      start_offset = 0x7e;\n      index = 0x3f;\n    }\n    else if (remaining_size < 5) {\n      index = (alignment >> 6) + 0x38;\n      start_offset = index * 2;\n    }\n    else if (remaining_size < 0x15) {\n      index = remaining_size + 0x5b;\n      start_offset = index * 2;\n    }\n    else if (remaining_size < 0x55) {\n      index = (alignment >> 0xc) + 0x6e;\n      start_offset = index * 2;\n    }\n    else if (remaining_size < 0x155) {\n      index = (alignment >> 0xf) + 0x77;\n      start_offset = index * 2;\n    }\n    else if (remaining_size < 0x555) {\n      index = (alignment >> 0x12) + 0x7c;\n      start_offset = index * 2;\n    }\n    else {\n      start_offset = 0xfc;\n      index = 0x7e;\n    }\n    for (rel_offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[start_offset]; start_offset * 4 + 0x20070464U != rel_offset\n        ; rel_offset = *(dword *)(rel_offset + 0xc)) {\n      remaining_size = *(uint *)(rel_offset + 4) & 0xfffffffc;\n      end_offset = remaining_size - alignment;\n      if (0xf < end_offset) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < end_offset) {\n        start_offset = remaining_size + rel_offset;\n        alignment = *(uint *)(start_offset + 4);\n        end_offset = *(int *)(rel_offset + 0xc);\n        index = *(int *)(rel_offset + 8);\n        *(int *)(index + 0xc) = end_offset;\n        *(int *)(end_offset + 8) = index;\n        *(uint *)(start_offset + 4) = alignment | 1;\n        FUNC_0008259c(output_ptr);\n        return (int *)(rel_offset + 8);\n      }\n    }\n    remaining_size = index + 1;\n  }\n  rel_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    mask = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    aligned_size = mask & 0xfffffffc;\n    difference = aligned_size - alignment;\n    if (0xf < (int)difference) {\n      rel_offset = alignment + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = alignment | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = rel_offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = rel_offset;\n      *(undefined4 *)(rel_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(rel_offset + 8) = 0x2007046c;\n      *(uint *)(rel_offset + 4) = difference | 1;\n      *(uint *)(rel_offset + difference) = difference;\n      FUNC_0008259c(output_ptr);\n      return (int *)(rel_info + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)difference) {\n      *(uint *)(aligned_size + rel_info + 4) = *(uint *)(aligned_size + rel_info + 4) | 1;\n      FUNC_0008259c(output_ptr);\n      return (int *)(rel_info + 8);\n    }\n    if (aligned_size < 0x200) {\n      aligned_size = mask & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + aligned_size);\n      rel_offset = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(rel_info + 8) = index;\n      *(uint *)(rel_info + 0xc) = aligned_size + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = rel_offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + aligned_size) = rel_info;\n      *(dword *)(index + 0xc) = rel_info;\n    }\n    else {\n      difference = mask >> 9;\n      if (difference < 5) {\n        start_offset = (mask >> 6) + 0x38;\n        index = start_offset * 2;\n      }\n      else if (difference < 0x15) {\n        start_offset = difference + 0x5b;\n        index = start_offset * 2;\n      }\n      else if (difference < 0x55) {\n        start_offset = (mask >> 0xc) + 0x6e;\n        index = start_offset * 2;\n      }\n      else if (difference < 0x155) {\n        start_offset = (mask >> 0xf) + 0x77;\n        index = start_offset * 2;\n      }\n      else if (difference < 0x555) {\n        start_offset = (mask >> 0x12) + 0x7c;\n        index = start_offset * 2;\n      }\n      else {\n        index = 0xfc;\n        start_offset = 0x7e;\n      }\n      rel_offset = index * 4 + 0x20070464;\n      prev_ptr_offset = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (prev_ptr_offset == rel_offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (start_offset >> 2 & 0xffU);\n        prev_ptr = prev_ptr_offset;\n      }\n      else {\n        do {\n          prev_ptr = prev_ptr_offset;\n          if ((*(uint *)(prev_ptr_offset + 4) & 0xfffffffc) <= aligned_size) break;\n          prev_ptr_offset = *(dword *)(prev_ptr_offset + 8);\n          prev_ptr = prev_ptr_offset;\n        } while (rel_offset != prev_ptr_offset);\n        prev_ptr_offset = *(dword *)(prev_ptr + 0xc);\n      }\n      rel_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(rel_info + 0xc) = prev_ptr_offset;\n      *(dword *)(rel_info + 8) = prev_ptr;\n      *(dword *)(prev_ptr_offset + 8) = rel_info;\n      *(dword *)(prev_ptr + 0xc) = rel_info;\n    }\n  }\n  rel_info = Elf32_Rel_ARRAY_20070000[141].r_info;\n  mask = 1 << ((int)remaining_size >> 2 & 0xffU);\n  if (mask <= rel_offset) {\n    if ((rel_offset & mask) == 0) {\n      remaining_size = remaining_size & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        remaining_size = remaining_size + 4;\n      } while ((rel_offset & mask) == 0);\n    }\n    do {\n      rel_entry = &Elf32_Rel_ARRAY_20070000[remaining_size + 0x8c].r_info;\n      rel_array = rel_entry;\n      aligned_size = remaining_size;\n      do {\n        for (current_ptr = (undefined *)rel_array[3]; rel_array != (dword *)current_ptr;\n            current_ptr = *(undefined **)(current_ptr + 0xc)) {\n          difference = *(uint *)(current_ptr + 4) & 0xfffffffc;\n          new_size = difference - alignment;\n          if (0xf < (int)new_size) {\n            start_offset = *(int *)(current_ptr + 8);\n            index = *(int *)(current_ptr + 0xc);\n            new_ptr = current_ptr + alignment;\n            *(uint *)(current_ptr + 4) = alignment | 1;\n            *(int *)(start_offset + 0xc) = index;\n            *(int *)(index + 8) = start_offset;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)new_ptr;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)new_ptr;\n            *(undefined4 *)(new_ptr + 0xc) = 0x2007046c;\n            *(undefined4 *)(new_ptr + 8) = 0x2007046c;\n            *(uint *)(new_ptr + 4) = new_size | 1;\n            *(uint *)(new_ptr + new_size) = new_size;\n            FUNC_0008259c(output_ptr);\n            return (int *)(current_ptr + 8);\n          }\n          if (-1 < (int)new_size) {\n            index = *(int *)(current_ptr + 8);\n            start_offset = *(int *)(current_ptr + 0xc);\n            *(uint *)(current_ptr + difference + 4) = *(uint *)(current_ptr + difference + 4) | 1;\n            *(int *)(index + 0xc) = start_offset;\n            *(int *)(start_offset + 8) = index;\n            FUNC_0008259c(output_ptr);\n            return (int *)(current_ptr + 8);\n          }\n        }\n        aligned_size = aligned_size + 1;\n        rel_array = rel_array + 2;\n      } while ((aligned_size & 3) != 0);\n      do {\n        difference = remaining_size & 3;\n        current_ptr = (undefined *)(rel_entry + -2);\n        remaining_size = remaining_size - 1;\n        if (difference == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~mask;\n          break;\n        }\n        rel_entry = (dword *)*rel_entry;\n      } while (rel_entry == (dword *)current_ptr);\n      mask = mask * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= mask &&\n           mask - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (remaining_size = aligned_size, mask == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & mask) == 0; mask = mask << 1) {\n        remaining_size = remaining_size + 4;\n      }\n    } while( true );\n  }\n  remaining_size = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((alignment <= remaining_size) &&\n     (mask = remaining_size - alignment, rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)mask))\n  goto LAB_0008211e;\n  mask = Elf32_Rel_ARRAY_20070000[141].r_info + remaining_size;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    aligned_size = alignment + DAT_20071190 + 0x10;\n  }\n  else {\n    aligned_size = alignment + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  rel_offset = FUN_00082970(output_ptr,aligned_size);\n  if ((rel_offset == 0xffffffff) || ((rel_offset < mask && (rel_info != 0x20070464)))) {\n    remaining_size = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    difference = DAT_20071194 + aligned_size;\n    DAT_20071194 = difference;\n    if ((mask == rel_offset) && ((mask & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = aligned_size + remaining_size | 1;\n    }\n    else {\n      prev_ptr_offset = rel_offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        prev_ptr_offset = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = difference + (rel_offset - mask);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = prev_ptr_offset;\n      mask = rel_offset & 7;\n      if (mask == 0) {\n        index = 0x1000;\n      }\n      else {\n        rel_offset = rel_offset + (8 - mask);\n        index = 0x1008 - mask;\n      }\n      index = index - (aligned_size + rel_offset & 0xfff);\n      start_offset = FUN_00082970(output_ptr,index);\n      if (start_offset == -1) {\n        mask = 1;\n        index = 0;\n      }\n      else {\n        mask = (start_offset - rel_offset) + index | 1;\n      }\n      difference = DAT_20071194 + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = rel_offset;\n      DAT_20071194 = difference;\n      *(uint *)(rel_offset + 4) = mask;\n      if (rel_info != 0x20070464) {\n        if (remaining_size < 0x10) {\n          *(undefined4 *)(rel_offset + 4) = 1;\n          remaining_size = 0;\n          goto LAB_00082108;\n        }\n        remaining_size = remaining_size - 0xc & 0xfffffff8;\n        *(uint *)(rel_info + 4) = remaining_size | *(uint *)(rel_info + 4) & 1;\n        *(undefined4 *)(rel_info + remaining_size + 4) = 5;\n        *(undefined4 *)(rel_info + remaining_size + 8) = 5;\n        if (0xf < remaining_size) {\n          FUN_00083d9c(output_ptr,rel_info + 8);\n          difference = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < difference) {\n      DAT_2007118c = difference;\n    }\n    if (DAT_20071188 < difference) {\n      DAT_20071188 = difference;\n    }\n    remaining_size = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    rel_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  mask = remaining_size - alignment;\n  if ((remaining_size < alignment) || ((int)mask < 0x10)) {\n    FUNC_0008259c(output_ptr);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = alignment + rel_offset;\n  *(uint *)(rel_offset + 4) = alignment | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask | 1;\n  FUNC_0008259c(output_ptr);\n  return (int *)(rel_offset + 8);\n}\n\n",
            "renaming": {
                "FUN_00081e14": "allocate_memory_00081e14",
                "param_1": "output_ptr",
                "param_2": "size",
                "dVar1": "rel_info",
                "iVar2": "start_offset",
                "uVar3": "mask",
                "uVar4": "aligned_size",
                "iVar5": "end_offset",
                "uVar6": "difference",
                "dVar7": "rel_offset",
                "uVar8": "new_size",
                "iVar9": "next_offset",
                "puVar10": "current_ptr",
                "dVar11": "prev_ptr_offset",
                "dVar12": "prev_ptr",
                "iVar13": "index",
                "pdVar14": "rel_array",
                "uVar15": "alignment",
                "puVar16": "new_ptr",
                "pdVar17": "rel_entry",
                "uVar18": "remaining_size"
            },
            "calling": [
                "FUN_00081df4",
                "FUN_000825b0",
                "FUN_000842a4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008234c": {
            "entrypoint": "0x0008234c",
            "current_name": "copy_memory_0008234c",
            "code": "\nundefined4 * copyMemory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_size;\n  uint loop_counter;\n  bool is_loop_remaining;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      loop_counter = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          temp_ptr = src_ptr;\n          is_loop_remaining = loop_counter != 0;\n          loop_counter = loop_counter - 1;\n          *(undefined *)temp_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)temp_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (is_loop_remaining);\n        *(undefined *)(undefined4 *)((int)temp_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)temp_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)temp_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto LAB_000823d0;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      loop_counter = 4 - ((uint)destination & 3);\n      size = size - loop_counter;\n      dest_ptr = destination;\n      temp_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        temp_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = temp_ptr;\n      if ((loop_counter & 2) != 0) {\n        source = (undefined4 *)((int)temp_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)temp_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      is_loop_remaining = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (is_loop_remaining);\n  }\n  loop_counter = remaining_size + 0xc;\n  temp_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *temp_ptr = *dest_ptr;\n      is_loop_remaining = 3 < loop_counter;\n      loop_counter = loop_counter - 4;\n      src_ptr = temp_ptr + 1;\n      temp_ptr = temp_ptr + 1;\n      dest_ptr = source;\n    } while (is_loop_remaining);\n  }\nLAB_000823d0:\n  if (loop_counter + 4 != 0) {\n    dest_ptr = src_ptr;\n    temp_ptr = source;\n    if ((loop_counter & 1) != 0) {\n      temp_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((loop_counter + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)temp_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "temp_ptr",
                "uVar4": "remaining_size",
                "uVar5": "loop_counter",
                "bVar6": "is_loop_remaining"
            },
            "calling": [
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082438": {
            "entrypoint": "0x00082438",
            "current_name": "copy_memory_00082438",
            "code": "\nvoid copyMemory_00082438(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  int i;\n  undefined4 *destPtr;\n  undefined4 *srcPtr;\n  undefined4 *tempPtr;\n  uint tempVar1;\n  undefined *tempVar2;\n  uint tempVar3;\n  \n  if ((source < destination) && (tempPtr = (undefined4 *)((int)source + size), destination < tempPtr)) {\n    tempVar2 = (undefined *)((int)destination + size);\n    i = size - 1;\n    if (size != 0) {\n      do {\n        tempPtr = (undefined4 *)((int)tempPtr + -1);\n        i = i + -1;\n        tempVar2 = tempVar2 + -1;\n        *tempVar2 = *(undefined *)tempPtr;\n      } while (i != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    tempPtr = destination;\n    srcPtr = source;\n    do {\n      destPtr = tempPtr + 4;\n      *tempPtr = *srcPtr;\n      tempPtr[1] = srcPtr[1];\n      tempPtr[2] = srcPtr[2];\n      tempPtr[3] = srcPtr[3];\n      tempPtr = destPtr;\n      srcPtr = srcPtr + 4;\n    } while (destPtr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10));\n    i = (size - 0x10 >> 4) + 1;\n    tempVar3 = size & 0xf;\n    source = source + i * 4;\n    destination = destination + i * 4;\n    tempVar1 = tempVar3;\n    tempPtr = destination;\n    srcPtr = source;\n    if (3 < tempVar3) {\n      do {\n        tempVar1 = tempVar1 - 4;\n        *tempPtr = *srcPtr;\n        tempPtr = tempPtr + 1;\n        srcPtr = srcPtr + 1;\n      } while (3 < tempVar1);\n      i = (tempVar3 - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + i);\n      source = (undefined4 *)((int)source + i);\n      tempVar3 = size & 3;\n    }\n    size = tempVar3;\n    if (size == 0) {\n      return;\n    }\n  }\n  tempPtr = destination;\n  do {\n    srcPtr = (undefined4 *)((int)tempPtr + 1);\n    *(undefined *)tempPtr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    tempPtr = srcPtr;\n  } while (srcPtr != (undefined4 *)(size + (int)destination));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082438": "copy_memory_00082438",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "iVar1": "i",
                "puVar2": "destPtr",
                "puVar3": "srcPtr",
                "puVar4": "tempPtr",
                "uVar5": "tempVar1",
                "puVar6": "tempVar2",
                "uVar7": "tempVar3"
            },
            "calling": [
                "FUN_000825b0",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082504": {
            "entrypoint": "0x00082504",
            "current_name": "copy_to_buffer_00082504",
            "code": "\nvoid copyToBuffer_00082504(undefined4 *buffer,undefined value,uint size)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  undefined4 constant;\n  uint remaining;\n  bool isZero;\n  \n  if (((uint)buffer & 3) != 0) {\n    isZero = size == 0;\n    ptr1 = buffer;\n    size = size - 1;\n    if (isZero) {\n      return;\n    }\n    while( true ) {\n      buffer = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = value;\n      if (((uint)buffer & 3) == 0) break;\n      isZero = size == 0;\n      ptr1 = buffer;\n      size = size - 1;\n      if (isZero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    constant = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining = size;\n    ptr1 = buffer;\n    if (0xf < size) {\n      remaining = size - 0x10;\n      do {\n        *ptr1 = constant;\n        ptr1[1] = constant;\n        ptr1[2] = constant;\n        ptr1[3] = constant;\n        ptr1 = ptr1 + 4;\n      } while (ptr1 != (undefined4 *)((int)buffer + (remaining & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      buffer = buffer + ((remaining >> 4) + 1) * 4;\n      remaining = size;\n      ptr1 = buffer;\n      if (size < 4) goto LAB_00082580;\n    }\n    do {\n      size = size - 4;\n      *buffer = constant;\n      buffer = buffer + 1;\n    } while (3 < size);\n    buffer = (undefined4 *)((int)ptr1 + (remaining - 4 & 0xfffffffc) + 4);\n    size = remaining & 3;\n  }\nLAB_00082580:\n  if (size != 0) {\n    ptr1 = buffer;\n    do {\n      ptr2 = (undefined4 *)((int)ptr1 + 1);\n      *(undefined *)ptr1 = value;\n      ptr1 = ptr2;\n    } while (ptr2 != (undefined4 *)(size + (int)buffer));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082504": "copy_to_buffer_00082504",
                "param_1": "buffer",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "uVar3": "constant",
                "uVar4": "remaining",
                "bVar5": "isZero"
            },
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082598": {
            "entrypoint": "0x00082598",
            "current_name": "FUNC_00082598",
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0008259c": {
            "entrypoint": "0x0008259c",
            "current_name": "FUNC_0008259c",
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "calling": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083d00"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000825a0": {
            "entrypoint": "0x000825a0",
            "current_name": "execute_relocation_function_000825a0",
            "code": "\nvoid executeRelocationFunction_000825a0(undefined4 inputParam1,undefined4 inputParam2)\n\n{\n  FUN_000825b0(Elf32_Rel_ARRAY_20070000[140].r_offset,inputParam1,inputParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000825a0": "execute_relocation_function_000825a0",
                "param_1": "inputParam1",
                "param_2": "inputParam2"
            },
            "calling": [
                "FUN_00081622"
            ],
            "called": [
                "FUN_000825b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000825b0": {
            "entrypoint": "0x000825b0",
            "current_name": "allocate_and_copy_memory_000825b0",
            "code": "\nint * allocate_and_copy_memory_000825b0(undefined4 *base_address,int *source_memory,uint size)\n\n{\n  dword temp1;\n  int *destination_memory;\n  uint temp2;\n  int index1;\n  uint source_length;\n  int index2;\n  int *temp3;\n  uint aligned_dest_length;\n  uint aligned_size;\n  int *temp4;\n  \n  if (source_memory == (int *)0x0) {\n    destination_memory = (int *)FUN_00081e14(base_address,size);\n    return destination_memory;\n  }\n  FUNC_00082598();\n  source_length = source_memory[-1];\n  aligned_dest_length = source_length & 0xfffffffc;\n  destination_memory = source_memory + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < size) {\nLAB_0008267c:\n    *base_address = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)aligned_dest_length < (int)aligned_size) {\n    temp1 = (int)destination_memory + aligned_dest_length;\n    if (Elf32_Rel_ARRAY_20070000[141].r_info == temp1) {\n      temp2 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n      temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + aligned_dest_length)) {\n        Elf32_Rel_ARRAY_20070000[141].r_info = (int)destination_memory + aligned_size;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + aligned_dest_length) - aligned_size | 1;\n        source_memory[-1] = aligned_size | source_memory[-1] & 1U;\n        FUNC_0008259c(base_address);\n        return source_memory;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + aligned_dest_length)) {\n        index2 = *(int *)(temp1 + 0xc);\n        index1 = *(int *)(temp1 + 8);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        aligned_dest_length = temp2 + aligned_dest_length;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(source_length << 0x1f)) {\n      temp4 = (int *)((int)destination_memory - source_memory[-2]);\n      source_length = (temp4[1] & 0xfffffffcU) + aligned_dest_length;\n      if (temp1 != 0) {\n        if (temp1 == Elf32_Rel_ARRAY_20070000[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + source_length)) {\n            destination_memory = temp4 + 2;\n            index1 = *destination_memory;\n            index2 = temp4[3];\n            aligned_dest_length = aligned_dest_length - 4;\n            *(int *)(index1 + 0xc) = index2;\n            *(int *)(index2 + 8) = index1;\n            if (aligned_dest_length < 0x25) {\n              temp3 = destination_memory;\n              if (0x13 < aligned_dest_length) {\n                temp4[2] = *source_memory;\n                temp4[3] = source_memory[1];\n                if (aligned_dest_length < 0x1c) {\n                  source_memory = source_memory + 2;\n                  temp3 = temp4 + 4;\n                }\n                else {\n                  temp4[4] = source_memory[2];\n                  temp4[5] = source_memory[3];\n                  if (aligned_dest_length == 0x24) {\n                    temp4[6] = source_memory[4];\n                    temp3 = source_memory + 5;\n                    source_memory = source_memory + 6;\n                    temp4[7] = *temp3;\n                    temp3 = temp4 + 8;\n                  }\n                  else {\n                    source_memory = source_memory + 4;\n                    temp3 = temp4 + 6;\n                  }\n                }\n              }\n              *temp3 = *source_memory;\n              temp3[1] = source_memory[1];\n              temp3[2] = source_memory[2];\n            }\n            else {\n              FUN_00082438(destination_memory,source_memory);\n            }\n            Elf32_Rel_ARRAY_20070000[141].r_info = (int)temp4 + aligned_size;\n            *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = (temp2 + source_length) - aligned_size | 1;\n            temp4[1] = aligned_size | temp4[1] & 1U;\n            FUNC_0008259c(base_address);\n            return destination_memory;\n          }\n        }\n        else {\n          temp2 = temp2 + source_length;\n          if ((int)aligned_size <= (int)temp2) {\n            index2 = *(int *)(temp1 + 0xc);\n            index1 = *(int *)(temp1 + 8);\n            *(int *)(index1 + 0xc) = index2;\n            *(int *)(index2 + 8) = index1;\n            temp3 = temp4 + 2;\n            index1 = *temp3;\n            index2 = temp4[3];\n            source_length = aligned_dest_length - 4;\n            *(int *)(index1 + 0xc) = index2;\n            *(int *)(index2 + 8) = index1;\n            aligned_dest_length = temp2;\n            if (source_length < 0x25) {\n              destination_memory = temp3;\n              if (0x13 < source_length) {\n                temp4[2] = *source_memory;\n                temp4[3] = source_memory[1];\n                if (source_length < 0x1c) {\n                  source_memory = source_memory + 2;\n                  destination_memory = temp4 + 4;\n                }\n                else {\n                  temp4[4] = source_memory[2];\n                  temp4[5] = source_memory[3];\n                  if (source_length == 0x24) {\n                    temp4[6] = source_memory[4];\n                    destination_memory = source_memory + 5;\n                    source_memory = source_memory + 6;\n                    temp4[7] = *destination_memory;\n                    destination_memory = temp4 + 8;\n                  }\n                  else {\n                    source_memory = source_memory + 4;\n                    destination_memory = temp4 + 6;\n                  }\n                }\n              }\n              *destination_memory = *source_memory;\n              destination_memory[1] = source_memory[1];\n              destination_memory[2] = source_memory[2];\n              source_length = temp4[1];\n              destination_memory = temp4;\n              source_memory = temp3;\n            }\n            else {\n              FUN_00082438(temp3,source_memory);\n              source_length = temp4[1];\n              destination_memory = temp4;\n              source_memory = temp3;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)source_length) {\n        temp3 = temp4 + 2;\n        index1 = *temp3;\n        index2 = temp4[3];\n        temp2 = aligned_dest_length - 4;\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        aligned_dest_length = source_length;\n        if (temp2 < 0x25) {\n          destination_memory = temp3;\n          if (0x13 < temp2) {\n            temp4[2] = *source_memory;\n            temp4[3] = source_memory[1];\n            if (temp2 < 0x1c) {\n              source_memory = source_memory + 2;\n              destination_memory = temp4 + 4;\n            }\n            else {\n              temp4[4] = source_memory[2];\n              temp4[5] = source_memory[3];\n              if (temp2 == 0x24) {\n                temp4[6] = source_memory[4];\n                destination_memory = source_memory + 5;\n                source_memory = source_memory + 6;\n                temp4[7] = *destination_memory;\n                destination_memory = temp4 + 8;\n              }\n              else {\n                source_memory = source_memory + 4;\n                destination_memory = temp4 + 6;\n              }\n            }\n          }\n          *destination_memory = *source_memory;\n          destination_memory[1] = source_memory[1];\n          destination_memory[2] = source_memory[2];\n          source_length = temp4[1];\n          destination_memory = temp4;\n          source_memory = temp3;\n        }\n        else {\n          FUN_00082438(temp3,source_memory);\n          source_length = temp4[1];\n          destination_memory = temp4;\n          source_memory = temp3;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp4 = (int *)FUN_00081e14(base_address,size);\n    if (temp4 == (int *)0x0) goto LAB_000826a4;\n    source_length = source_memory[-1];\n    if (temp4 + -2 != (int *)((source_length & 0xfffffffe) + (int)destination_memory)) {\n      aligned_dest_length = aligned_dest_length - 4;\n      if (aligned_dest_length < 0x25) {\n        destination_memory = source_memory;\n        temp3 = temp4;\n        if (0x13 < aligned_dest_length) {\n          *temp4 = *source_memory;\n          temp4[1] = source_memory[1];\n          if (aligned_dest_length < 0x1c) {\n            destination_memory = source_memory + 2;\n            temp3 = temp4 + 2;\n          }\n          else {\n            temp4[2] = source_memory[2];\n            temp4[3] = source_memory[3];\n            if (aligned_dest_length == 0x24) {\n              temp4[4] = source_memory[4];\n              temp4[5] = source_memory[5];\n              destination_memory = source_memory + 6;\n              temp3 = temp4 + 6;\n            }\n            else {\n              destination_memory = source_memory + 4;\n              temp3 = temp4 + 4;\n            }\n          }\n        }\n        *temp3 = *destination_memory;\n        temp3[1] = destination_memory[1];\n        temp3[2] = destination_memory[2];\n      }\n      else {\n        FUN_00082438(temp4,source_memory);\n      }\n      FUN_00083d9c(base_address,source_memory);\n      goto LAB_000826a4;\n    }\n    aligned_dest_length = aligned_dest_length + (temp4[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp2 = aligned_dest_length - aligned_size;\n  temp4 = source_memory;\n  if (temp2 < 0x10) {\n    destination_memory[1] = source_length & 1 | aligned_dest_length;\n    *(uint *)((int)destination_memory + aligned_dest_length + 4) = *(uint *)((int)destination_memory + aligned_dest_length + 4) | 1;\n  }\n  else {\n    destination_memory[1] = source_length & 1 | aligned_size;\n    *(uint *)((int)destination_memory + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)destination_memory + temp2 + aligned_size + 4) = *(uint *)((int)destination_memory + temp2 + aligned_size + 4) | 1;\n    FUN_00083d9c(base_address,(int)destination_memory + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(base_address);\n  return temp4;\n}\n\n",
            "renaming": {
                "FUN_000825b0": "allocate_and_copy_memory_000825b0",
                "param_1": "base_address",
                "param_2": "source_memory",
                "param_3": "size",
                "dVar1": "temp1",
                "piVar2": "destination_memory",
                "uVar3": "temp2",
                "iVar4": "index1",
                "uVar5": "source_length",
                "iVar6": "index2",
                "piVar7": "temp3",
                "uVar8": "aligned_dest_length",
                "uVar9": "aligned_size",
                "piVar10": "temp4"
            },
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00081e14",
                "FUN_00082438",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082970": {
            "entrypoint": "0x00082970",
            "current_name": "check_and_assign_value_00082970",
            "code": "\nvoid checkAndAssignValue_00082970(int *resultPointer,undefined4 inputParameter)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_0008118c(inputParameter);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *resultPointer = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082970": "check_and_assign_value_00082970",
                "param_1": "resultPointer",
                "param_2": "inputParameter",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "called": [
                "FUN_0008118c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082994": {
            "entrypoint": "0x00082994",
            "current_name": "copy_string_00082994",
            "code": "\nvoid copy_string_00082994(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_ushort;\n  uint *next_ptr;\n  uint *current_ptr;\n  uint current_uint;\n  uint temp_uint;\n  uint *new_ptr;\n  bool is_zero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    current_ptr = src;\n    if (((uint)src & 1) != 0) {\n      current_ptr = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = current_ptr;\n    if (((uint)current_ptr & 2) != 0) {\n      src = (uint *)((int)current_ptr + 2);\n      current_ushort = *(ushort *)current_ptr;\n      is_zero = (current_ushort & 0xff) == 0;\n      if (is_zero) {\n        *(char *)dest = (char)current_ushort;\n      }\n      else {\n        *(ushort *)dest = current_ushort;\n        is_zero = (current_ushort & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_uint = *src;\n  current_ptr = src + 1;\n  new_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) goto LAB_000829f8;\n    new_ptr = dest + 1;\n    *dest = current_uint;\n    current_ptr = src + 2;\n    current_uint = src[1];\n  }\n  while( true ) {\n    next_ptr = current_ptr + 1;\n    temp_uint = *current_ptr;\n    dest = new_ptr;\n    if ((current_uint + 0xfefefeff & ~current_uint & 0x80808080) != 0) break;\n    dest = new_ptr + 1;\n    *new_ptr = current_uint;\n    current_uint = temp_uint;\n    if ((temp_uint + 0xfefefeff & ~temp_uint & 0x80808080) != 0) break;\n    current_ptr = current_ptr + 2;\n    current_uint = *next_ptr;\n    new_ptr = new_ptr + 2;\n    *dest = temp_uint;\n  }\nLAB_000829f8:\n  do {\n    *(char *)dest = (char)current_uint;\n    temp_uint = current_uint & 0xff;\n    current_uint = current_uint >> 8 | current_uint << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp_uint != 0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00082994": "copy_string_00082994",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "current_char",
                "uVar2": "current_ushort",
                "puVar3": "next_ptr",
                "puVar4": "current_ptr",
                "uVar5": "current_uint",
                "uVar6": "temp_uint",
                "puVar7": "new_ptr",
                "bVar8": "is_zero"
            },
            "calling": [
                "FUN_0008165c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082a50": {
            "entrypoint": "0x00082a50",
            "current_name": "count_trailing_zeros_00082a50",
            "code": "\nint countTrailingZeros_00082a50(uint value)\n\n{\n  int trailingZeros;\n  uint *ptrValue;\n  uint wordValue;\n  bool isZero;\n  \n  ptrValue = (uint *)(value & 0xfffffffc);\n  trailingZeros = -(value & 3);\n  wordValue = *ptrValue;\n  if ((value & 3) != 0) {\n    wordValue = wordValue | 0xffffffffU >> ((trailingZeros + 4U & 0x1f) << 3);\n  }\n  while (ptrValue = ptrValue + 1, (wordValue + 0xfefefeff & ~wordValue & 0x80808080) == 0) {\n    trailingZeros = trailingZeros + 4;\n    wordValue = *ptrValue;\n  }\n  isZero = (wordValue & 0xff) == 0;\n  if (!isZero) {\n    trailingZeros = trailingZeros + 1;\n    isZero = (wordValue & 0xff00) == 0;\n  }\n  if (!isZero) {\n    trailingZeros = trailingZeros + 1;\n    isZero = (wordValue & 0xff0000) == 0;\n  }\n  if (!isZero) {\n    trailingZeros = trailingZeros + 1;\n  }\n  return trailingZeros;\n}\n\n",
            "renaming": {
                "FUN_00082a50": "count_trailing_zeros_00082a50",
                "param_1": "value",
                "iVar1": "trailingZeros",
                "puVar2": "ptrValue",
                "uVar3": "wordValue",
                "bVar4": "isZero"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00081682"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "entrypoint": "0x00082ac0",
            "current_name": "process_data_00082ac0",
            "code": "\nint processData_00082ac0(undefined4 param1,int param2,int **param3)\n\n{\n  int *currentPtr;\n  int result;\n  int *tempPtr;\n  uint counter;\n  undefined4 *dataPtr;\n  uint tempVar1;\n  uint tempVar2;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = FUN_00083f34();\n    param3[2] = (int *)0x0;\n    param3[1] = (int *)0x0;\n    return result;\n  }\n  tempPtr = param3[2];\n  currentPtr = *param3;\n  while (tempPtr != (int *)0x0) {\n    tempVar1 = currentPtr[1];\n    tempVar2 = tempVar1 >> 2;\n    if (tempVar2 != 0) {\n      dataPtr = (undefined4 *)(*currentPtr + -4);\n      counter = 0;\n      do {\n        dataPtr = dataPtr + 1;\n        result = FUN_00083c40(param1,*dataPtr,param2);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (tempVar2 != counter);\n      tempPtr = param3[2];\n    }\n    tempPtr = (int *)((int)tempPtr - (tempVar1 & 0xfffffffc));\n    param3[2] = tempPtr;\n    currentPtr = currentPtr + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  param3[2] = (int *)0x0;\n  param3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00082ac0": "process_data_00082ac0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "piVar1": "currentPtr",
                "iVar2": "result",
                "piVar3": "tempPtr",
                "uVar4": "counter",
                "puVar5": "dataPtr",
                "uVar6": "tempVar1",
                "uVar7": "tempVar2"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00082b38": {
            "entrypoint": "0x00082b38",
            "current_name": "parse_format_00082b38",
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parseFormat_00082b38(int data,int format,int *******argList,int **argPtr)\n\n{\n  bool isLong;\n  bool isUnsigned;\n  bool isOctal;\n  char signChar;\n  bool isZeroPad;\n  int ********argArray;\n  int *argNum;\n  int result;\n  char tempChar;\n  int *******tempFormat;\n  uint digitChar;\n  int **tempPtr;\n  uint tempFlag;\n  uint nextChar;\n  int argCount;\n  int ********tempArray;\n  int tempArgCount;\n  int *******tempArgSize;\n  int *tempArg;\n  int *******tempArgPtr;\n  uint tempArgLength;\n  int *tempArgUnsigned;\n  int *******tempArgPtr;\n  undefined4 tempArgType;\n  int ********tempStrArg;\n  bool tempArgHasValue;\n  longlong tempArgValue;\n  int *******maxArgSize;\n  int *******totalArgSize;\n  int **argPtr;\n  int result;\n  char *local_c0;\n  char extraSignChar;\n  undefined extraZeroPadChar;\n  undefined extraSignChar;\n  int ********argArray;\n  int argCount;\n  int *******totalArgSize;\n  undefined tempChar;\n  char tempChar;\n  undefined extraSignChar;\n  undefined tempArray [4];\n  int *******maxArgs [16];\n  \n  if ((data != 0) && (*(int *)(data + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  tempFlag = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    tempFlag = tempFlag | 0x2000;\n    *(short *)(format + 0xc) = (short)tempFlag;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(tempFlag << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((tempFlag & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = FUN_00083808(data,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = FUN_0008378c(data,format,argList,argPtr);\n    return result;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  totalArgSize = (int *******)0x0;\n  argCount = 0;\n  result = 0;\n  argArray = (int ********)tempArray;\n  argPtr = argPtr;\n  argArray = (int ********)tempArray;\nLAB_00082b9e:\n  tempFormat = argList;\n  if ((*(char *)argList != '\\0') && (*(char *)argList != '%')) {\n    do {\n      tempFormat = (int *******)((int)tempFormat + 1);\n      if (*(char *)tempFormat == '\\0') break;\n    } while (*(char *)tempFormat != '%');\n    tempArgPtr = (int *******)((int)tempFormat - (int)argList);\n    if (tempArgPtr != (int *******)0x0) {\n      argCount = argCount + 1;\n      totalArgSize = (int *******)((int)totalArgSize + (int)tempArgPtr);\n      *argArray = argList;\n      argArray[1] = tempArgPtr;\n      if (argCount < 8) {\n        argArray = argArray + 2;\n      }\n      else {\n        if (totalArgSize == (int *******)0x0) {\n          result = result + (int)tempArgPtr;\n          argCount = 0;\n          argArray = (int ********)tempArray;\n          goto LAB_00082bee;\n        }\n        result = FUN_00082ac0(data,format,&argArray);\n        argArray = (int ********)tempArray;\n        if (result != 0) goto LAB_000833de;\n      }\n      result = result + (int)tempArgPtr;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)tempFormat != '\\0') {\n    extraSignChar = '\\0';\n    nextChar = (uint)*(byte *)((int)tempFormat + 1);\n    tempFlag = 0;\n    isZeroPad = false;\n    isUnsigned = false;\n    isLong = false;\n    isOctal = false;\n    tempArgHasValue = false;\n    tempArgPtr = (int *******)0x0;\n    totalArgSize = (int *******)0xffffffff;\n    argList = (int *******)((int)tempFormat + 1);\nLAB_00082c12:\n    argList = (int *******)((int)argList + 1);\nLAB_00082c16:\n    switch(nextChar) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (nextChar != 0) {\n        maxArgSize = (int *******)0x1;\n        totalArgSize = (int *******)0x1;\n        tempStrArg = (int ********)&tempChar;\n        tempChar = (char)nextChar;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      isOctal = true;\n      nextChar = (uint)*(byte *)argList;\n      goto LAB_00082c12;\n    case 0x2a:\n      tempArgPtr = (int *******)*argPtr;\n      argPtr = argPtr + 1;\n      if ((int)tempArgPtr < 0) {\n        tempArgPtr = (int *******)-(int)tempArgPtr;\n        goto switchD_00082c20_caseD_2d;\n      }\n      nextChar = (uint)*(byte *)argList;\n      goto LAB_00082c12;\n    case 0x2b:\n      nextChar = (uint)*(byte *)argList;\n      extraSignChar = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      tempFlag = tempFlag | 4;\n      nextChar = (uint)*(byte *)argList;\n      goto LAB_00082c12;\n    case 0x2e:\n      nextChar = (uint)*(byte *)argList;\n      tempFormat = (int *******)((int)argList + 1);\n      if (nextChar == 0x2a) {\n        nextChar = (uint)*(byte *)((int)argList + 1);\n        totalArgSize = (int *******)*argPtr;\n        argPtr = argPtr + 1;\n        argList = tempFormat;\n        if ((int)totalArgSize < 0) {\n          totalArgSize = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digitChar = nextChar - 0x30;\n      if (digitChar < 10) {\n        tempArgLength = 0;\n        do {\n          argList = (int *******)((int)tempFormat + 1);\n          nextChar = (uint)*(byte *)tempFormat;\n          tempArgLength = digitChar + tempArgLength * 10;\n          digitChar = nextChar - 0x30;\n          tempFormat = argList;\n        } while (digitChar < 10);\n        totalArgSize = (int *******)(tempArgLength | (int)tempArgLength >> 0x1f);\n      }\n      else {\n        totalArgSize = (int *******)0x0;\n        argList = tempFormat;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      tempFlag = tempFlag | 0x80;\n      nextChar = (uint)*(byte *)argList;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      isUnsigned = true;\n      if (isLong == false) goto LAB_00083028;\nLAB_00082e98:\n      argPtr = (int **)((int)argPtr + 7U & 0xfffffff8);\n      tempArg = *argPtr;\n      tempArgUnsigned = argPtr[1];\n      argPtr = argPtr + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      isUnsigned = true;\n      if (isLong != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)isUnsigned << 4;\n      argCount = (uint)isLong << 5;\n      if ((isUnsigned == 0) && (argCount = (uint)tempArgHasValue << 6, tempArgHasValue != 0)) {\n        tempArg = (int *)(uint)*(ushort *)argPtr;\n        argPtr = argPtr + 1;\n        tempArgUnsigned = (int *)0x0;\n      }\n      else {\n        result = argCount;\n        tempArg = *argPtr;\n        argPtr = argPtr + 1;\n        tempArgUnsigned = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      isUnsigned = true;\n      if (isLong != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((isUnsigned) || (tempArgHasValue == false)) {\n        result = 1;\n        tempArg = *argPtr;\n        argPtr = argPtr + 1;\n        tempArgUnsigned = (int *)0x0;\n      }\n      else {\n        tempArgUnsigned = (int *)0x0;\n        tempArg = (int *)(uint)*(ushort *)argPtr;\n        argPtr = argPtr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (isLong == false) goto LAB_00083196;\nLAB_00082fb6:\n      tempPtr = (int **)((int)argPtr + 7U & 0xfffffff8);\n      argPtr = tempPtr + 2;\n      tempArg = *tempPtr;\n      tempArgUnsigned = tempPtr[1];\n      goto LAB_00082fca;\n    case 99:\n      tempArg = *argPtr;\n      argPtr = argPtr + 1;\n      maxArgSize = (int *******)0x1;\n      tempChar = SUB41(tempArg,0);\n      totalArgSize = (int *******)0x1;\n      tempStrArg = (int ********)&tempChar;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (isLong != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((isUnsigned == false) && (tempArgHasValue != false)) {\n        tempArg = (int *)(int)*(short *)argPtr;\n        argPtr = argPtr + 1;\n        tempArgUnsigned = (int *)((int)tempArg >> 0x1f);\n      }\n      else {\n        tempArg = *argPtr;\n        argPtr = argPtr + 1;\n        tempArgUnsigned = (int *)((int)tempArg >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)tempArgUnsigned < 0) {\n        tempArgHasValue = tempArg != (int *)0x0;\n        tempArg = (int *)-(int)tempArg;\n        tempArgUnsigned = (int *)(-(int)tempArgUnsigned - (uint)tempArgHasValue);\n        extraSignChar = '-';\n        signChar = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)totalArgSize) {\n        tempFlag = tempFlag & 0xffffff7f;\n      }\n      isZeroPad = false;\n      nextChar = (uint)tempArg | (uint)tempArgUnsigned;\n      result = 1;\n      signChar = extraSignChar;\n      goto joined_r0x00082d78;\n    case 0x68:\n      tempArgHasValue = true;\n      nextChar = (uint)*(byte *)argList;\n      goto LAB_00082c12;\n    case 0x6c:\n      nextChar = (uint)*(byte *)argList;\n      if (nextChar == 0x6c) {\n        isLong = true;\n        nextChar = (uint)*(byte *)((int)argList + 1);\n        argList = (int *******)((int)argList + 1);\n      }\n      else {\n        isUnsigned = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (isLong == false) {\n        if (isUnsigned == false) {\n          if (tempArgHasValue) {\n            tempArg = *argPtr;\n            argPtr = argPtr + 1;\n            *(short *)tempArg = (short)result;\n          }\n          else {\n            tempArg = *argPtr;\n            argPtr = argPtr + 1;\n            *tempArg = result;\n          }\n        }\n        else {\n          tempArg = *argPtr;\n          argPtr = argPtr + 1;\n          *tempArg = result;\n        }\n      }\n      else {\n        tempArg = *argPtr;\n        argPtr = argPtr + 1;\n        *tempArg = result;\n        tempArg[1] = result >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (isLong == false) goto LAB_00082f2a;\nLAB_00082d42:\n      tempPtr = (int **)((int)argPtr + 7U & 0xfffffff8);\n      argPtr = tempPtr + 2;\n      tempArg = *tempPtr;\n      tempArgUnsigned = tempPtr[1];\n      result = 0;\n      break;\n    case 0x70:\n      tempArg = *argPtr;\n      argPtr = argPtr + 1;\n      extraSignChar = 0x78;\n      isZeroPad = true;\n      tempArgUnsigned = (int *)0x0;\n      extraZeroPadChar = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      isLong = true;\n      nextChar = (uint)*(byte *)argList;\n      goto LAB_00082c12;\n    case 0x73:\n      tempStrArg = (int ********)*argPtr;\n      extraSignChar = '\\0';\n      argPtr = argPtr + 1;\n      if (tempStrArg != (int ********)0x0) {\n        if ((int)totalArgSize < 0) {\n          totalArgSize = (int *******)FUN_00082a50(tempStrArg);\n          tempFormat = (int *******)0x0;\n          signChar = extraSignChar;\n        }\n        else {\n          result = FUN_00084384(tempStrArg,0,totalArgSize);\n          signChar = extraSignChar;\n          if (result == 0) {\n            tempFormat = (int *******)0x0;\n          }\n          else {\n            tempArgSize = (int *******)(result - (int)tempStrArg);\n            if ((int)totalArgSize <= (int)(int *******)(result - (int)tempStrArg)) {\n              tempArgSize = totalArgSize;\n            }\n            tempFormat = (int *******)0x0;\n            totalArgSize = tempArgSize;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < totalArgSize) {\n        totalArgSize = (int *******)0x6;\n      }\n      maxArgSize = (int *******)((uint)totalArgSize & ~((int)totalArgSize >> 0x1f));\n      tempStrArg = (int ********)&UNK_00085840;\nLAB_00083012:\n      extraSignChar = '\\0';\n      tempFormat = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!isLong) goto LAB_00082f7c;\nLAB_00082e62:\n      tempPtr = (int **)((int)argPtr + 7U & 0xfffffff8);\n      argPtr = tempPtr + 2;\n      tempArg = *tempPtr;\n      tempArgUnsigned = tempPtr[1];\n      result = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (isLong != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((isUnsigned == false) && (tempArgHasValue != false)) {\n        tempArgUnsigned = (int *)0x0;\n        tempArg = (int *)(uint)*(ushort *)argPtr;\n        argPtr = argPtr + 1;\n      }\n      else {\n        tempArg = *argPtr;\n        argPtr = argPtr + 1;\n        tempArgUnsigned = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((isOctal) && (((uint)tempArg | (uint)tempArgUnsigned) != 0)) {\n        isZeroPad = true;\n        extraZeroPadChar = 0x30;\n        result = 2;\n        extraSignChar = (char)nextChar;\n      }\n      else {\n        result = 2;\n      }\n    }\n    extraSignChar = '\\0';\n    signChar = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)totalArgSize) {\n      tempFlag = tempFlag & 0xffffff7f;\n    }\n    nextChar = (uint)tempArg | (uint)tempArgUnsigned;\njoined_r0x00082d78:\n    tempArgValue = CONCAT44(tempArgUnsigned,tempArg);\n    tempFormat = totalArgSize;\n    if ((nextChar == 0) && (totalArgSize == (int *******)0x0)) {\n      tempStrArg = (int ********)tempArray;\n      if ((result != 0) || (!isOctal)) goto LAB_00082da0;\n      tempStrArg = (int ********)(&tempChar + 1);\n      extraSignChar = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (tempArgUnsigned != (int *)0x0 || (int *)0x9 < tempArg) {\n        tempArray = (int ********)(&tempChar + 1);\n        do {\n          tempStrArg = tempArray;\n          tempArgType = (undefined4)((ulonglong)tempArgValue >> 0x20);\n          tempChar = '\\n';\n          FUN_00084750((int)tempArgValue,tempArgType,10,0);\n          *(char *)tempStrArg = tempChar + '0';\n          tempArgValue = FUN_00084750((int)tempArgValue,tempArgType,10,0);\n          tempArray = (int ********)((int)tempStrArg + -1);\n        } while (tempArgValue != 0);\n        totalArgSize = (int *******)((int)tempArray - (int)tempStrArg);\n        goto LAB_00082da0;\n      }\n      extraSignChar = (char)tempArg + '0';\n      tempStrArg = (int ********)(&tempChar + 1);\n      goto LAB_0008351e;\n    }\n    tempArray = (int ********)(&tempChar + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      tempStrArg = tempArray;\n      nextChar = (uint)tempArg & 0xf;\n      tempArg = (int *)((uint)tempArg >> 4 | (int)tempArgUnsigned << 0x1c);\n      tempArgUnsigned = (int *)((uint)tempArgUnsigned >> 4);\n      *(char *)tempStrArg = local_c0[nextChar];\n      tempArray = (int ********)((int)tempStrArg + -1);\n    } while (((uint)tempArg | (uint)tempArgUnsigned) != 0);\n    totalArgSize = (int *******)((int)tempArray - (int)tempStrArg);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (totalArgSize != (int *******)0x0) {\n    FUN_00082ac0(data,format,&argArray);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_0008337e:\n  do {\n    tempStrArg = tempArray;\n    argNum = (int *)((uint)tempArg >> 3 | (int)tempArgUnsigned << 0x1d);\n    tempArgUnsigned = (int *)((uint)tempArgUnsigned >> 3);\n    result = ((uint)tempArg & 7) + 0x30;\n    *(char *)tempStrArg = (char)result;\n    tempArray = (int ********)((int)tempStrArg + -1);\n    tempArg = argNum;\n  } while (((uint)argNum | (uint)tempArgUnsigned) != 0);\n  if (isOctal) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      totalArgSize = (int *******)((int)tempArray - (int)tempStrArg);\n    }\n    else {\n      *(undefined *)((int)tempStrArg + -1) = 0x30;\n      tempStrArg = tempArray;\n      totalArgSize = (int *******)((int)tempArray - (int)tempArray);\n    }\n  }\n  else {\nLAB_0008351e:\n    totalArgSize = (int *******)((int)tempArray - (int)tempStrArg);\n  }\nLAB_00082da0:\n  maxArgSize = totalArgSize;\n  if ((int)totalArgSize < (int)tempFormat) {\n    maxArgSize = tempFormat;\n  }\n  if (signChar != '\\0') {\n    maxArgSize = (int *******)((int)maxArgSize + 1);\n  }\nLAB_00082dba:\n  if (isZeroPad) {\n    maxArgSize = (int *******)((int)maxArgSize + 2);\n  }\n  if ((tempFlag == 0) &&\n     (tempArgSize = (int *******)((int)tempArgPtr - (int)maxArgSize), 0 < (int)tempArgSize)) {\n    if ((int)tempArgSize < 0x11) {\n      argCount = argCount + 1;\n    }\n    else {\n      do {\n        tempArgPtr = tempArgSize;\n        result = argCount + 1;\n        totalArgSize = totalArgSize + 4;\n        *argArray = (int *******)0x85808;\n        argArray[1] = (int *******)0x10;\n        if (result < 8) {\n          argCount = argCount + 2;\n          argArray = argArray + 2;\n          argCount = result;\n        }\n        else if (totalArgSize == (int *******)0x0) {\n          argCount = 1;\n          argArray = (int ********)tempArray;\n          argCount = 0;\n        }\n        else {\n          argCount = result;\n          result = FUN_00082ac0(data,format,&argArray);\n          if (result != 0) goto LAB_000833de;\n          argCount = argCount + 1;\n          argArray = (int ********)tempArray;\n        }\n        tempArgSize = tempArgPtr + -4;\n      } while (0x10 < (int)tempArgSize);\n      tempArgSize = tempArgPtr + -4;\n      argCount = argCount;\n    }\n    totalArgSize = (int *******)((int)totalArgSize + (int)tempArgSize);\n    *argArray = (int *******)0x85808;\n    argArray[1] = tempArgSize;\n    if (argCount < 8) {\n      result = argCount + 1;\n      argArray = argArray + 2;\n    }\n    else if (totalArgSize == (int *******)0x0) {\n      result = 1;\n      argCount = 0;\n      argArray = (int ********)tempArray;\n    }\n    else {\n      result = FUN_00082ac0(data,format,&argArray);\n      if (result != 0) goto LAB_000833de;\n      result = argCount + 1;\n      argArray = (int ********)tempArray;\n    }\n  }\n  else {\n    result = argCount + 1;\n  }\n  argCount = result;\n  if (extraSignChar != '\\0') {\n    totalArgSize = (int *******)((int)totalArgSize + 1);\n    argCount = 1;\n    *argArray = (int *******)&extraSignChar;\n    argArray[1] = (int *******)0x1;\n    argCount = result;\n    if (result < 8) {\n      argCount = result + 1;\n      argArray = argArray + 2;\n    }\n    else if (totalArgSize == (int *******)0x0) {\n      argCount = 0;\n      argArray = (int ********)tempArray;\n    }\n    else {\n      result = FUN_00082ac0(data,format,&argArray);\n      if (result != 0) goto LAB_000833de;\n      argCount = argCount + 1;\n      argArray = (int ********)tempArray;\n    }\n  }\n  result = argCount;\n  tempArgCount = argCount;\n  if (isZeroPad) {\n    totalArgSize = (int *******)((int)totalArgSize + 2);\n    *argArray = (int *******)&extraZeroPadChar;\n    argArray[1] = (int *******)0x2;\n    if (argCount < 8) {\n      result = argCount + 1;\n      tempArgCount = argCount;\n      argArray = argArray + 2;\n    }\n    else if (totalArgSize == (int *******)0x0) {\n      result = 1;\n      tempArgCount = 0;\n      argArray = (int ********)tempArray;\n    }\n    else {\n      argCount = argCount;\n      result = FUN_00082ac0(data,format,&argArray);\n      if (result != 0) goto LAB_000833de;\n      result = argCount + 1;\n      tempArgCount = argCount;\n      argArray = (int ********)tempArray;\n    }\n  }\n  argCount = tempArgCount;\n  if ((tempFlag == 0x80) &&\n     (tempArgSize = (int *******)((int)tempArgPtr - (int)maxArgSize), 0 < (int)tempArgSize)) {\n    if (0x10 < (int)tempArgSize) {\n      do {\n        while( true ) {\n          tempArgPtr = tempArgSize;\n          argCount = tempArgCount + 1;\n          totalArgSize = totalArgSize + 4;\n          *argArray = (int *******)&DAT_00085848;\n          argArray[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          result = tempArgCount + 2;\n          argArray = argArray + 2;\nLAB_0008348e:\n          tempArgCount = argCount;\n          tempArgSize = tempArgPtr + -4;\n          if ((int)(tempArgPtr + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (totalArgSize != (int *******)0x0) {\n          result = FUN_00082ac0(data,format,&argArray);\n          if (result == 0) {\n            result = argCount + 1;\n            argArray = (int ********)tempArray;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        tempArgCount = 0;\n        tempArgSize = tempArgPtr + -4;\n        argArray = (int ********)tempArray;\n      } while (0x10 < (int)(tempArgPtr + -4));\nLAB_000834b4:\n      tempArgSize = tempArgPtr + -4;\n    }\n    totalArgSize = (int *******)((int)totalArgSize + (int)tempArgSize);\n    *argArray = (int *******)&DAT_00085848;\n    argArray[1] = tempArgSize;\n    argCount = result;\n    if (result < 8) {\n      result = result + 1;\n      argArray = argArray + 2;\n    }\n    else if (totalArgSize == (int *******)0x0) {\n      result = 1;\n      argCount = 0;\n      argArray = (int ********)tempArray;\n    }\n    else {\n      result = FUN_00082ac0(data,format,&argArray);\n      if (result != 0) goto LAB_000833de;\n      result = argCount + 1;\n      argArray = (int ********)tempArray;\n    }\n  }\n  tempFormat = (int *******)((int)tempFormat - (int)totalArgSize);\n  tempArray = (int ********)tempArray;\n  if ((int)tempFormat < 1) {\nLAB_000832c6:\n    totalArgSize = (int *******)((int)totalArgSize + (int)totalArgSize);\n    *argArray = (int *******)tempStrArg;\n    argArray[1] = totalArgSize;\n    totalArgSize = totalArgSize;\n    argCount = result;\n    if (result < 8) goto LAB_0008345a;\n    if (totalArgSize == (int *******)0x0) {\n      argCount = 0;\n    }\n    else {\n      result = FUN_00082ac0(data,format,&argArray);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    argCount = argCount;\n    if (0x10 < (int)tempFormat) {\n      do {\n        while( true ) {\n          tempArgSize = tempFormat;\n          argCount = argCount + 1;\n          totalArgSize = totalArgSize + 4;\n          *argArray = (int *******)&DAT_00085848;\n          argArray[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          result = argCount + 2;\n          argArray = argArray + 2;\nLAB_00083282:\n          argCount = argCount;\n          tempFormat = tempArgSize + -4;\n          if ((int)(tempArgSize + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (totalArgSize != (int *******)0x0) {\n          result = FUN_00082ac0(data,format,&argArray);\n          if (result == 0) {\n            result = argCount + 1;\n            argArray = (int ********)tempArray;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        argArray = (int ********)tempArray;\n        argCount = 0;\n        tempFormat = tempArgSize + -4;\n      } while (0x10 < (int)(tempArgSize + -4));\nLAB_000832aa:\n      tempFormat = tempArgSize + -4;\n    }\n    totalArgSize = (int *******)((int)totalArgSize + (int)tempFormat);\n    *argArray = (int *******)&DAT_00085848;\n    argArray[1] = tempFormat;\n    if (result < 8) {\n      result = result + 1;\n      argArray = argArray + 2;\n      goto LAB_000832c6;\n    }\n    if (totalArgSize != (int *******)0x0) {\n      argCount = result;\n      result = FUN_00082ac0(data,format,&argArray);\n      if (result != 0) goto LAB_000833de;\n      result = argCount + 1;\n      argArray = (int ********)tempArray;\n      goto LAB_000832c6;\n    }\n    maxArgs[0] = totalArgSize;\n    argCount = 1;\n    argArray = (int ********)tempArray;\n    tempArray = (undefined  [4])tempStrArg;\nLAB_0008345a:\n    tempArray = argArray + 2;\n    totalArgSize = totalArgSize;\n  }\n  if (((tempFlag & 4) != 0) &&\n     (tempFormat = (int *******)((int)tempArgPtr - (int)maxArgSize), 0 < (int)tempFormat)) {\n    result = argCount;\n    if ((int)tempFormat < 0x11) {\n      argCount = argCount + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          argCount = result + 1;\n          totalArgSize = totalArgSize + 4;\n          *tempArray = (int *******)0x85808;\n          tempArray[1] = (int *******)0x10;\n          if (7 < argCount) break;\n          argCount = result + 2;\n          tempArray = tempArray + 2;\nLAB_00083316:\n          tempFormat = tempFormat + -4;\n          result = argCount;\n          if ((int)tempFormat < 0x11) goto LAB_0008333e;\n        }\n        if (totalArgSize != (int *******)0x0) {\n          result = FUN_00082ac0(data,format,&argArray);\n          if (result == 0) {\n            argCount = argCount + 1;\n            tempArray = (int ********)tempArray;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        tempFormat = tempFormat + -4;\n        argCount = 1;\n        result = 0;\n        tempArray = (int ********)tempArray;\n      } while (0x10 < (int)tempFormat);\n    }\nLAB_0008333e:\n    totalArgSize = (int *******)((int)totalArgSize + (int)tempFormat);\n    *tempArray = (int *******)0x85808;\n    tempArray[1] = tempFormat;\n    argCount = argCount;\n    if (7 < argCount) {\n      if (totalArgSize == (int *******)0x0) {\n        if ((int)maxArgSize < (int)tempArgPtr) {\n          maxArgSize = tempArgPtr;\n        }\n        result = result + (int)maxArgSize;\n        goto LAB_00083422;\n      }\n      result = FUN_00082ac0(data,format,&argArray);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)maxArgSize < (int)tempArgPtr) {\n    maxArgSize = tempArgPtr;\n  }\n  result = result + (int)maxArgSize;\n  if ((totalArgSize != (int *******)0x0) &&\n     (result = FUN_00082ac0(data,format,&argArray), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  argCount = 0;\n  argArray = (int ********)tempArray;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digitChar = nextChar - 0x30;\n  tempArgPtr = (int *******)0x0;\n  tempFormat = argList;\n  do {\n    argList = (int *******)((int)tempFormat + 1);\n    nextChar = (uint)*(byte *)tempFormat;\n    tempArgPtr = (int *******)(digitChar + (int)tempArgPtr * 10);\n    digitChar = nextChar - 0x30;\n    tempFormat = argList;\n  } while (digitChar < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  nextChar = (uint)*(byte *)argList;\n  if (extraSignChar == '\\0') {\n    extraSignChar = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "renaming": {
                "FUN_00082b38": "parse_format_00082b38",
                "param_1": "data",
                "param_2": "format",
                "param_3": "argList",
                "param_4": "argPtr",
                "bVar1": "isLong",
                "bVar2": "isUnsigned",
                "bVar3": "isOctal",
                "cVar4": "signChar",
                "bVar5": "isZeroPad",
                "ppppppppiVar6": "argArray",
                "piVar7": "argNum",
                "iVar8": "result",
                "cVar9": "tempChar",
                "pppppppiVar10": "tempFormat",
                "uVar11": "digitChar",
                "ppiVar12": "tempPtr",
                "uVar13": "tempFlag",
                "uVar14": "nextChar",
                "iVar15": "argCount",
                "ppppppppiVar16": "tempArray",
                "iVar17": "tempArgCount",
                "pppppppiVar18": "tempArgSize",
                "piVar19": "tempArg",
                "piVar22": "tempArgUnsigned",
                "pppppppiVar20": "tempArgPtr",
                "uVar21": "tempArgLength",
                "pppppppiVar23": "tempArgPtr",
                "uVar24": "tempArgType",
                "ppppppppiVar25": "tempStrArg",
                "bVar26": "tempArgHasValue",
                "lVar27": "tempArgValue",
                "local_dc": "maxArgSize",
                "local_d4": "totalArgSize",
                "local_c8": "argPtr",
                "local_c4": "result",
                "local_a1": "extraSignChar",
                "local_a0": "extraZeroPadChar",
                "local_9f": "extraSignChar",
                "local_9c": "argArray",
                "local_98": "argCount",
                "local_94": "totalArgSize",
                "local_90": "tempChar",
                "cStack_6a": "tempChar",
                "local_69": "extraSignChar",
                "local_68": "tempArray",
                "local_64": "maxArgs"
            },
            "calling": [
                "FUN_0008378c"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00084750",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084384",
                "FUN_0008378c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008378c": {
            "entrypoint": "0x0008378c",
            "current_name": "decode_data_0008378c",
            "code": "\nint decode_data_0008378c(undefined4 input_value,int data_address)\n\n{\n  int result;\n  int check_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort modified_value;\n  undefined2 data_value;\n  undefined *buffer;\n  undefined4 buffer_size_2;\n  undefined4 temp;\n  undefined4 address_value;\n  undefined4 data_size;\n  undefined4 other_data;\n  undefined stack_array [1024];\n  \n  other_data = *(undefined4 *)(data_address + 100);\n  address_value = *(undefined4 *)(data_address + 0x1c);\n  data_value = *(undefined2 *)(data_address + 0xe);\n  data_size = *(undefined4 *)(data_address + 0x24);\n  buffer_array[0] = stack_array;\n  modified_value = *(ushort *)(data_address + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_2 = 0x400;\n  temp = 0;\n  buffer = buffer_array[0];\n  result = FUN_00082b38(input_value,buffer_array);\n  if ((-1 < result) && (check_result = FUN_00083adc(input_value,buffer_array), check_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)modified_value << 0x19) < 0) {\n    *(ushort *)(data_address + 0xc) = *(ushort *)(data_address + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0008378c": "decode_data_0008378c",
                "param_1": "input_value",
                "param_2": "data_address",
                "iVar1": "result",
                "iVar2": "check_result",
                "local_488": "buffer_array",
                "local_480": "buffer_size",
                "local_47c": "modified_value",
                "local_47a": "data_value",
                "local_478": "buffer",
                "local_474": "buffer_size_2",
                "local_470": "temp",
                "local_46c": "address_value",
                "local_464": "data_size",
                "local_424": "other_data",
                "auStack_420": "stack_array"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083808": {
            "entrypoint": "0x00083808",
            "current_name": "update_data_00083808",
            "code": "\nundefined4 updateData_00083808(undefined4 *result,int *data)\n\n{\n  int value1;\n  int value2;\n  uint tempValue;\n  ushort tempValue2;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  tempValue2 = *(ushort *)(data + 3);\n  tempValue = (uint)tempValue2;\n  if ((int)(tempValue << 0x1c) < 0) {\n    value2 = data[4];\n  }\n  else {\n    if (-1 < (int)(tempValue << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = tempValue2 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(tempValue << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          FUN_00083d9c(result);\n          tempValue2 = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      value2 = data[4];\n      tempValue2 = tempValue2 & 0xffdb;\n      *data = value2;\n      data[1] = 0;\n    }\n    else {\n      value2 = data[4];\n    }\n    *(ushort *)(data + 3) = tempValue2 | 8;\n    tempValue = (uint)(tempValue2 | 8);\n  }\n  if ((value2 == 0) && ((tempValue & 0x280) != 0x200)) {\n    FUN_000842a4(result,data);\n    tempValue = (uint)*(ushort *)(data + 3);\n    value2 = data[4];\n  }\n  if ((tempValue & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(tempValue << 0x1e)) {\n      value1 = data[5];\n    }\n    data[2] = value1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083808": "update_data_00083808",
                "param_1": "result",
                "param_2": "data",
                "iVar1": "value1",
                "iVar2": "value2",
                "uVar3": "tempValue",
                "uVar4": "tempValue2"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_000844c4",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083974": {
            "entrypoint": "0x00083974",
            "current_name": "return_input_value_00083974",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 returnInputValue_00083974(undefined4 inputValue)\n\n{\n  return inputValue;\n}\n\n",
            "renaming": {
                "FUN_00083974": "return_input_value_00083974",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [
                "FUN_00081df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083adc": {
            "entrypoint": "0x00083adc",
            "current_name": "process_data_00083adc",
            "code": "\nundefined4 processData_00083adc(int *dataPtr,int *infoPtr)\n\n{\n  int *ptr1;\n  int var1;\n  ushort var2;\n  uint var3;\n  int var4;\n  code *functionPtr;\n  undefined4 result;\n  int var5;\n  \n  if ((dataPtr != (int *)0x0) && (dataPtr[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(infoPtr + 3) == 0) {\n    return 0;\n  }\n  var2 = *(ushort *)(infoPtr + 3);\n  if ((int)((uint)var2 << 0x1c) < 0) {\n    var5 = infoPtr[4];\n    if (var5 == 0) {\n      return 0;\n    }\n    var1 = *infoPtr;\n    if ((var2 & 3) == 0) {\n      var4 = infoPtr[5];\n    }\n    else {\n      var4 = 0;\n    }\n    *infoPtr = var5;\n    var1 = var1 - var5;\n    infoPtr[2] = var4;\n    do {\n      if (var1 < 1) {\n        return 0;\n      }\n      var4 = (*(code *)infoPtr[9])(dataPtr,infoPtr[7],var5,var1,result);\n      var1 = var1 - var4;\n      var5 = var5 + var4;\n    } while (0 < var4);\nLAB_00083a54:\n    *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(infoPtr + 3) = var2 | 0x800;\n  if ((infoPtr[1] < 1) && (infoPtr[0xf] < 1)) {\n    return 0;\n  }\n  functionPtr = (code *)infoPtr[10];\n  if (functionPtr == (code *)0x0) {\n    return 0;\n  }\n  var3 = (uint)(var2 | 0x800);\n  var5 = *dataPtr;\n  *dataPtr = 0;\n  if ((var2 & 0x1000) == 0) {\n    var1 = (*functionPtr)(dataPtr,infoPtr[7],var3 & 0x1000,1);\n    if ((var1 == -1) && (var4 = *dataPtr, var4 != 0)) {\n      if ((var4 == 0x1d) || (var4 == 0x16)) {\n        *dataPtr = var5;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    var3 = (uint)*(ushort *)(infoPtr + 3);\n    functionPtr = (code *)infoPtr[10];\n  }\n  else {\n    var1 = infoPtr[0x14];\n  }\n  if (((int)(var3 << 0x1d) < 0) && (var1 = var1 - infoPtr[1], infoPtr[0xc] != 0)) {\n    var1 = var1 - infoPtr[0xf];\n  }\n  var1 = (*functionPtr)(dataPtr,infoPtr[7],var1,0);\n  if (var1 == -1) {\n    var4 = *dataPtr;\n    if (var4 != 0) {\n      if ((var4 != 0x1d) && (var4 != 0x16)) {\n        *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) & 0xf7ff;\n      *infoPtr = infoPtr[4];\n      infoPtr[1] = 0;\n      goto LAB_00083a00;\n    }\n    var2 = *(ushort *)(infoPtr + 3) & 0xf7ff;\n    infoPtr[1] = 0;\n    *(ushort *)(infoPtr + 3) = var2;\n    *infoPtr = infoPtr[4];\n  }\n  else {\n    var2 = *(ushort *)(infoPtr + 3) & 0xf7ff;\n    *infoPtr = infoPtr[4];\n    *(ushort *)(infoPtr + 3) = var2;\n    infoPtr[1] = 0;\n  }\n  if ((int)((uint)var2 << 0x13) < 0) {\n    infoPtr[0x14] = var1;\n  }\nLAB_00083a00:\n  ptr1 = (int *)infoPtr[0xc];\n  *dataPtr = var5;\n  if (ptr1 == (int *)0x0) {\n    return 0;\n  }\n  if (ptr1 != infoPtr + 0x10) {\n    FUN_00083d9c(dataPtr);\n  }\n  infoPtr[0xc] = 0;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083adc": "process_data_00083adc",
                "param_1": "dataPtr",
                "param_2": "infoPtr",
                "piVar1": "ptr1",
                "iVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "iVar5": "var4",
                "pcVar6": "functionPtr",
                "unaff_r4": "result",
                "iVar7": "var5"
            },
            "calling": [
                "FUN_000846a4",
                "FUN_000844c4",
                "FUN_0008378c",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083b14": {
            "entrypoint": "0x00083b14",
            "current_name": "initialize_data_structures_00083b14",
            "code": "\nvoid initializeDataStructures_00083b14(int dataStructures)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(dataStructures + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(dataStructures + 4);\n    *(undefined **)(dataStructures + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(dataStructures + 0x2e4) = 3;\n    *(int *)(dataStructures + 0x2e8) = dataStructures + 0x2ec;\n    *(undefined4 *)(dataStructures + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(dataStructures + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(dataStructures + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &LAB_00084440_1;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(dataStructures + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "dataStructures",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "calling": [
                "FUN_00083808",
                "FUN_000846a4",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4"
            ],
            "called": [
                "FUN_00082504"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083c08": {
            "entrypoint": "0x00083c08",
            "current_name": "FUNC_00083c08",
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c0c": {
            "entrypoint": "0x00083c0c",
            "current_name": "FUNC_00083c0c",
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "calling": [
                "FUN_000846a4"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00083c40": {
            "entrypoint": "0x00083c40",
            "current_name": "process_data_00083c40",
            "code": "\nuint processData_00083c40(undefined4 arg1,uint arg2,byte **arg3)\n\n{\n  int result;\n  uint loopCount;\n  uint byteValue;\n  byte *bytePointer;\n  uint index;\n  byte currentByte;\n  byte byteArray [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(arg3 + 3) << 0x12)) {\n    *(ushort *)(arg3 + 3) = *(ushort *)(arg3 + 3) | 0x2000;\n    arg3[0x19] = (byte *)((uint)arg3[0x19] | 0x2000);\n  }\n  result = FUN_00084298();\n  if ((result == 1) && (arg2 - 1 < 0xff)) {\n    byteValue = arg2 & 0xff;\n    currentByte = (byte)byteValue;\n    loopCount = 1;\n  }\n  else {\n    loopCount = FUN_0008456c(arg1,&currentByte,arg2,arg3 + 0x17);\n    if (loopCount == 0xffffffff) {\n      *(ushort *)(arg3 + 3) = *(ushort *)(arg3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (loopCount == 0) {\n      return arg2;\n    }\n    byteValue = (uint)currentByte;\n  }\n  index = 0;\n  do {\n    bytePointer = arg3[2] + -1;\n    arg3[2] = bytePointer;\n    if ((int)bytePointer < 0) {\n      if ((int)arg3[6] <= (int)bytePointer) {\n        **arg3 = (byte)byteValue;\n        bytePointer = *arg3;\n        byteValue = (uint)*bytePointer;\n        if (byteValue != 10) goto LAB_00083c90;\n      }\n      result = FUN_000844c4(arg1,byteValue,arg3);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **arg3 = (byte)byteValue;\n      bytePointer = *arg3;\nLAB_00083c90:\n      *arg3 = bytePointer + 1;\n    }\n    if (loopCount <= index + 1) {\n      return arg2;\n    }\n    byteValue = (uint)byteArray[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "iVar1": "result",
                "uVar2": "loopCount",
                "uVar3": "byteValue",
                "pbVar4": "bytePointer",
                "uVar5": "index",
                "local_1c": "currentByte",
                "abStack_1b": "byteArray"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_000844c4",
                "FUN_00084298",
                "FUN_0008456c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d00": {
            "entrypoint": "0x00083d00",
            "current_name": "update_relocation_entry_00083d00",
            "code": "\nundefined4 updateRelocationEntry_00083d00(undefined4 param1,int param2)\n\n{\n  int result;\n  uint relocationType;\n  int adjustedOffset;\n  \n  FUNC_00082598();\n  relocationType = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  adjustedOffset = ((relocationType - param2) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjustedOffset) {\n    result = FUN_00082970(param1,0);\n    if (result == Elf32_Rel_ARRAY_20070000[141].r_info + relocationType) {\n      result = FUN_00082970(param1,-adjustedOffset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjustedOffset;\n        *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = relocationType - adjustedOffset | 1;\n        FUNC_0008259c(param1);\n        return 1;\n      }\n      adjustedOffset = FUN_00082970(param1,0);\n      if (0xf < (int)(adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info)) {\n        DAT_20071194 = adjustedOffset - Elf32_Rel_ARRAY_20070000[270].r_offset;\n        *(dword *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) =\n             adjustedOffset - Elf32_Rel_ARRAY_20070000[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(param1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083d00": "update_relocation_entry_00083d00",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "relocationType",
                "iVar3": "adjustedOffset"
            },
            "calling": [
                "FUN_00083d9c"
            ],
            "called": [
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "entrypoint": "0x00083d9c",
            "current_name": "update_relocation_table_00083d9c",
            "code": "\nvoid updateRelocationTable_00083d9c(undefined4 param,int relocationTable)\n\n{\n  int prevEntry;\n  bool isFirstEntry;\n  uint entryCount;\n  dword currentEntry;\n  int nextEntry;\n  uint currentOffset;\n  dword newEntry;\n  uint newEntryOffset;\n  dword prevEntryOffset;\n  \n  if (relocationTable == 0) {\n    return;\n  }\n  FUNC_00082598();\n  entryCount = *(uint *)(relocationTable + -4);\n  newEntry = relocationTable - 8;\n  currentOffset = entryCount & 0xfffffffe;\n  currentEntry = newEntry + currentOffset;\n  newEntryOffset = *(uint *)(currentEntry + 4) & 0xfffffffc;\n  if (Elf32_Rel_ARRAY_20070000[141].r_info == currentEntry) {\n    newEntryOffset = newEntryOffset + currentOffset;\n    if (-1 < (int)(entryCount << 0x1f)) {\n      newEntry = newEntry - *(int *)(relocationTable + -8);\n      nextEntry = *(int *)(newEntry + 0xc);\n      prevEntry = *(int *)(newEntry + 8);\n      newEntryOffset = newEntryOffset + *(int *)(relocationTable + -8);\n      *(int *)(prevEntry + 0xc) = nextEntry;\n      *(int *)(nextEntry + 8) = prevEntry;\n    }\n    currentEntry = Elf32_Rel_ARRAY_20070000[269].r_info;\n    *(uint *)(newEntry + 4) = newEntryOffset | 1;\n    Elf32_Rel_ARRAY_20070000[141].r_info = newEntry;\n    if (currentEntry <= newEntryOffset) {\n      FUN_00083d00(param,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(currentEntry + 4) = newEntryOffset;\n    if ((entryCount & 1) == 0) {\n      newEntry = newEntry - *(int *)(relocationTable + -8);\n      prevEntry = *(int *)(newEntry + 8);\n      currentOffset = currentOffset + *(int *)(relocationTable + -8);\n      if (prevEntry == 0x2007046c) {\n        isFirstEntry = true;\n      }\n      else {\n        nextEntry = *(int *)(newEntry + 0xc);\n        *(int *)(prevEntry + 0xc) = nextEntry;\n        *(int *)(nextEntry + 8) = prevEntry;\n        isFirstEntry = false;\n      }\n    }\n    else {\n      isFirstEntry = false;\n    }\n    if (-1 < *(int *)(currentEntry + newEntryOffset + 4) << 0x1f) {\n      currentOffset = currentOffset + newEntryOffset;\n      prevEntry = *(int *)(currentEntry + 8);\n      if ((!isFirstEntry) && (prevEntry == 0x2007046c)) {\n        Elf32_Rel_ARRAY_20070000[142].r_info = newEntry;\n        Elf32_Rel_ARRAY_20070000[143].r_offset = newEntry;\n        *(undefined4 *)(newEntry + 0xc) = 0x2007046c;\n        *(undefined4 *)(newEntry + 8) = 0x2007046c;\n        *(uint *)(newEntry + 4) = currentOffset | 1;\n        *(uint *)(newEntry + currentOffset) = currentOffset;\n        goto LAB_00083e30;\n      }\n      nextEntry = *(int *)(currentEntry + 0xc);\n      *(int *)(prevEntry + 0xc) = nextEntry;\n      *(int *)(nextEntry + 8) = prevEntry;\n    }\n    *(uint *)(newEntry + 4) = currentOffset | 1;\n    *(uint *)(newEntry + currentOffset) = currentOffset;\n    if (!isFirstEntry) {\n      if (currentOffset < 0x200) {\n        entryCount = currentOffset & 0xfffffff8;\n        prevEntry = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryCount);\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << ((int)(currentOffset >> 3) >> 2 & 0xffU);\n        *(int *)(newEntry + 8) = prevEntry;\n        *(uint *)(newEntry + 0xc) = entryCount + 0x20070464;\n        *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + entryCount) = newEntry;\n        *(dword *)(prevEntry + 0xc) = newEntry;\n        FUNC_0008259c(param);\n        return;\n      }\n      entryCount = currentOffset >> 9;\n      if (entryCount < 5) {\n        prevEntry = (currentOffset >> 6) + 0x38;\n        nextEntry = prevEntry * 2;\n      }\n      else if (entryCount < 0x15) {\n        prevEntry = entryCount + 0x5b;\n        nextEntry = prevEntry * 2;\n      }\n      else if (entryCount < 0x55) {\n        prevEntry = (currentOffset >> 0xc) + 0x6e;\n        nextEntry = prevEntry * 2;\n      }\n      else if (entryCount < 0x155) {\n        prevEntry = (currentOffset >> 0xf) + 0x77;\n        nextEntry = prevEntry * 2;\n      }\n      else if (entryCount < 0x555) {\n        prevEntry = (currentOffset >> 0x12) + 0x7c;\n        nextEntry = prevEntry * 2;\n      }\n      else {\n        nextEntry = 0xfc;\n        prevEntry = 0x7e;\n      }\n      prevEntryOffset = nextEntry * 4 + 0x20070464;\n      currentEntry = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[nextEntry];\n      if (currentEntry == prevEntryOffset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (prevEntry >> 2 & 0xffU);\n        prevEntryOffset = currentEntry;\n      }\n      else {\n        do {\n          if ((*(uint *)(currentEntry + 4) & 0xfffffffc) <= currentOffset) break;\n          currentEntry = *(dword *)(currentEntry + 8);\n        } while (prevEntryOffset != currentEntry);\n        prevEntryOffset = *(dword *)(currentEntry + 0xc);\n      }\n      *(dword *)(newEntry + 0xc) = prevEntryOffset;\n      *(dword *)(newEntry + 8) = currentEntry;\n      *(dword *)(prevEntryOffset + 8) = newEntry;\n      *(dword *)(currentEntry + 0xc) = newEntry;\n    }\n  }\nLAB_00083e30:\n  FUNC_0008259c(param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00083d9c": "update_relocation_table_00083d9c",
                "param_1": "param",
                "param_2": "relocationTable",
                "iVar1": "prevEntry",
                "bVar2": "isFirstEntry",
                "uVar3": "entryCount",
                "dVar4": "currentEntry",
                "iVar5": "nextEntry",
                "uVar6": "currentOffset",
                "dVar7": "newEntry",
                "uVar8": "newEntryOffset",
                "dVar9": "prevEntryOffset"
            },
            "calling": [
                "FUN_00083808",
                "FUN_00081e04",
                "FUN_000846a4",
                "FUN_00081e14",
                "FUN_000825b0",
                "FUN_00083adc",
                "FUN_00083f34"
            ],
            "called": [
                "FUN_00083d00",
                "FUN_0008259c",
                "FUN_00082598"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00083f34": {
            "entrypoint": "0x00083f34",
            "current_name": "process_data_00083f34",
            "code": "\nundefined4 processData_00083f34(undefined4 *output,uint *input,uint **buffer)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort mask;\n  uint temp;\n  uint *ptr1;\n  uint *ptr2;\n  uint size1;\n  uint size2;\n  uint count1;\n  uint count2;\n  uint local_var;\n  \n  if (buffer[2] != (uint *)0x0) {\n    mask = *(ushort *)(input + 3);\n    temp = (uint)mask;\n    if (((int)(temp << 0x1c) < 0) && (input[4] != 0)) {\n      ptr2 = *buffer;\n    }\n    else {\n      result = FUN_00083808(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      mask = *(ushort *)(input + 3);\n      temp = (uint)mask;\n      ptr2 = *buffer;\n    }\n    if ((mask & 2) == 0) {\n      value1 = temp & 2;\n      count1 = value1;\n      size1 = value1;\n      local_var = value1;\n      if ((temp & 1) == 0) {\n        value1 = 0;\n        count1 = 0;\n        while( true ) {\n          while (value1 == 0) {\n            count1 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          size1 = input[2];\n          if ((int)(temp << 0x16) < 0) {\n            if (value1 < size1) {\n              temp = *input;\n              size1 = value1;\n            }\n            else if ((temp & 0x480) == 0) {\n              temp = *input;\n            }\n            else {\n              result = *input - input[4];\n              size1 = result + 1 + value1;\n              size2 = (int)(input[5] * 3) / 2;\n              if (size1 <= size2) {\n                size1 = size2;\n              }\n              if ((int)(temp << 0x15) < 0) {\n                size2 = FUN_00081e14(output,size1);\n                if (size2 == 0) {\n                  *output = 0xc;\n                  mask = *(ushort *)(input + 3);\n                  goto LAB_00084030;\n                }\n                FUN_0008234c(size2,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size2 = FUN_000825b0(output);\n                if (size2 == 0) {\n                  FUN_00083d9c(output,input[4]);\n                  mask = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp = size2 + result;\n              input[4] = size2;\n              input[5] = size1;\n              *input = temp;\n              input[2] = size1 - result;\n              size1 = value1;\n            }\n            FUN_00082438(temp,count1,size1);\n            input[2] = input[2] - size1;\n            *input = *input + size1;\n            size1 = value1;\n          }\n          else if ((input[4] < *input) || (temp = input[5], value1 < temp)) {\n            if (value1 < size1) {\n              size1 = value1;\n            }\n            FUN_00082438(*input,count1,size1);\n            temp = input[2];\n            input[2] = temp - size1;\n            *input = *input + size1;\n            if ((temp - size1 == 0) && (result = FUN_00083adc(output,input), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            size1 = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              size1 = value1;\n            }\n            size1 = (*(code *)input[9])(output,input[7],count1,(size1 / temp) * temp);\n            if ((int)size1 < 1) goto LAB_0008402e;\n          }\n          ptr1 = buffer[2];\n          count1 = count1 + size1;\n          value1 = value1 - size1;\n          buffer[2] = (uint *)((int)ptr1 - size1);\n          if ((uint *)((int)ptr1 - size1) == (uint *)0x0) break;\n          temp = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            size1 = *ptr2;\n            value1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = FUN_00084384(size1,10,value1);\n            if (result == 0) {\n              count1 = value1 + 1;\n              local_var = 1;\n            }\n            else {\n              count1 = (result + 1) - size1;\n              local_var = 1;\n            }\n          }\n          size2 = *input;\n          temp = count1;\n          if (value1 <= count1) {\n            temp = value1;\n          }\n          value2 = input[5];\n          if ((input[4] < size2) && (count2 = input[2] + value2, (int)count2 < (int)temp)) {\n            FUN_00082438(size2,size1,count2);\n            *input = *input + count2;\n            result = FUN_00083adc(output,input);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp < (int)value2) {\n            FUN_00082438(size2,size1,temp);\n            input[2] = input[2] - temp;\n            *input = temp + *input;\n            count2 = temp;\n          }\n          else {\n            count2 = (*(code *)input[9])(output,input[7],size1,value2);\n            if ((int)count2 < 1) goto LAB_0008402e;\n          }\n          count1 = count1 - count2;\n          if (count1 == 0) {\n            result = FUN_00083adc(output,input);\n            if (result != 0) goto LAB_0008402e;\n            local_var = 0;\n          }\n          ptr1 = buffer[2];\n          size1 = size1 + count2;\n          value1 = value1 - count2;\n          buffer[2] = (uint *)((int)ptr1 - count2);\n        } while ((uint *)((int)ptr1 - count2) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      temp = 0;\n      do {\n        while( true ) {\n          count1 = temp;\n          if (0x7ffffbff < temp) {\n            count1 = 0x7ffffc00;\n          }\n          if (temp != 0) break;\n          value1 = *ptr2;\n          temp = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],value1,count1);\n        if (result < 1) {\nLAB_0008402e:\n          mask = *(ushort *)(input + 3);\nLAB_00084030:\n          *(ushort *)(input + 3) = mask | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = buffer[2];\n        value1 = value1 + result;\n        temp = temp - result;\n        buffer[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "param_1": "output",
                "param_2": "input",
                "param_3": "buffer",
                "iVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "mask",
                "uVar5": "temp",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar8": "size1",
                "uVar9": "size2",
                "uVar10": "count1",
                "uVar11": "count2",
                "local_2c": "local_var"
            },
            "calling": [
                "FUN_00082ac0"
            ],
            "called": [
                "FUN_0008234c",
                "FUN_00083808",
                "FUN_00083d9c",
                "FUN_000825b0",
                "FUN_00081e14",
                "FUN_00083adc",
                "FUN_00082438",
                "FUN_00084384"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084290": {
            "entrypoint": "0x00084290",
            "current_name": "get_magic_number_00084290",
            "code": "\nuint32 getMagicNumber_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "renaming": {
                "FUN_00084290": "get_magic_number_00084290",
                "undefined4": "uint32"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084298": {
            "entrypoint": "0x00084298",
            "current_name": "get_relocation_info_00084298",
            "code": "\ndword getRelocationInfo_00084298(void)\n\n{\n  return relocationArray[274].relocationInformation;\n}\n\n",
            "renaming": {
                "FUN_00084298": "get_relocation_info_00084298",
                "Elf32_Rel_ARRAY_20070000": "relocationArray",
                "r_info": "relocationInformation"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000842a4": {
            "entrypoint": "0x000842a4",
            "current_name": "process_data_000842a4",
            "code": "\nvoid processData_000842a4(int input,int *output)\n\n{\n  ushort value1;\n  int result;\n  int status;\n  uint value2;\n  bool flag;\n  undefined auxiliaryStack [4];\n  uint localValue;\n  \n  value1 = *(ushort *)(output + 3);\n  value2 = (uint)value1;\n  if ((int)(value2 << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = FUN_000846b4(input,(int)*(short *)((int)output + 0xe),auxiliaryStack);\n    if (-1 < result) {\n      flag = (localValue & 0xf000) == 0x2000;\n      if (((localValue & 0xf000) == 0x8000) && (output[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    value1 = *(ushort *)(output + 3);\n    value2 = (uint)value1;\n  }\n  *(ushort *)(output + 3) = value1 | 0x800;\n  if ((value2 & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  flag = false;\nLAB_00084300:\n  status = FUN_00081e14(input,result);\n  value1 = *(ushort *)(output + 3);\n  if (status == 0) {\n    if (-1 < (int)((uint)value1 << 0x16)) {\n      *(ushort *)(output + 3) = value1 | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(input + 0x3c) = &errorLabel;\n    *(ushort *)(output + 3) = value1 | 0x80;\n    *output = status;\n    output[4] = status;\n    output[5] = result;\n    if ((flag) && (result = FUN_000846dc(input,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "value1",
                "iVar2": "result",
                "iVar3": "status",
                "uVar4": "value2",
                "bVar5": "flag",
                "auStack_54": "auxiliaryStack",
                "local_50": "localValue",
                "LAB_00083b08_1": "errorLabel"
            },
            "calling": [
                "FUN_00083808"
            ],
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084384": {
            "entrypoint": "0x00084384",
            "current_name": "find_first_occurrence_00084384",
            "code": "\nuint * find_first_occurrence_00084384(uint *array,char target,uint length)\n\n{\n  uint temp;\n  int index;\n  uint *ptr;\n  bool found;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < length) {\n      ptr = array;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        found = index == length - 1;\n        index = index + 1;\n        if (found) goto LAB_000843dc;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (length == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (length == 0) goto LAB_000843dc;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "uVar1": "temp",
                "iVar2": "index",
                "puVar3": "ptr",
                "bVar4": "found"
            },
            "calling": [
                "FUN_00082b38",
                "FUN_00083f34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084464": {
            "entrypoint": "0x00084464",
            "current_name": "update_parameter_00084464",
            "code": "\nvoid updateParameter_00084464(int *result,int input,undefined4 value1,undefined4 value2)\n\n{\n  int returnValue;\n  ushort paramValue;\n  undefined4 unusedParam1;\n  undefined4 unusedParam2;\n  undefined4 unusedParam3;\n  undefined4 unusedParam4;\n  \n  paramValue = *(ushort *)(input + 0xc);\n  if ((int)((uint)paramValue << 0x17) < 0) {\n    FUN_00084700(result,(int)*(short *)(input + 0xe),0,2);\n    paramValue = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = paramValue & 0xefff;\n  DAT_200711bc = 0;\n  returnValue = FUN_000811cc((int)*(short *)(input + 0xe),value1,value2,value2,unusedParam1,unusedParam2,\n                       unusedParam3,unusedParam4);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084464": "update_parameter_00084464",
                "param_1": "result",
                "param_2": "input",
                "param_3": "value1",
                "param_4": "value2",
                "iVar1": "returnValue",
                "uVar2": "paramValue",
                "unaff_r4": "unusedParam1",
                "unaff_r5": "unusedParam2",
                "unaff_r6": "unusedParam3",
                "in_lr": "unusedParam4"
            },
            "calling": [],
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008449c": {
            "entrypoint": "0x0008449c",
            "current_name": "update_value_0008449c",
            "code": "\nvoid updateValue_0008449c(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort updatedValue;\n  \n  result = FUN_00084700(param1,(int)*(short *)(param2 + 0xe));\n  if (result == -1) {\n    updatedValue = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    updatedValue = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(param2 + 0x50) = result;\n  }\n  *(ushort *)(param2 + 0xc) = updatedValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008449c": "update_value_0008449c",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result",
                "uVar2": "updatedValue"
            },
            "calling": [],
            "called": [
                "FUN_00084700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000844c4": {
            "entrypoint": "0x000844c4",
            "current_name": "process_data_000844c4",
            "code": "\nuint processData_000844c4(int inputPointer,uint data,undefined4 *pointerArray,undefined4 size)\n\n{\n  ushort value;\n  uint convertedValue;\n  undefined *charPointer;\n  int length;\n  \n  if ((inputPointer != 0) && (*(int *)(inputPointer + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  value = *(ushort *)(pointerArray + 3);\n  convertedValue = (uint)value;\n  pointerArray[2] = pointerArray[6];\n  if ((-1 < (int)(convertedValue << 0x1c)) || (length = pointerArray[4], length == 0)) {\n    length = FUN_00083808(inputPointer,pointerArray,value,convertedValue,size);\n    if (length != 0) {\n      return 0xffffffff;\n    }\n    value = *(ushort *)(pointerArray + 3);\n    length = pointerArray[4];\n    convertedValue = (uint)value;\n  }\n  data = data & 0xff;\n  if ((int)(convertedValue << 0x12) < 0) {\n    charPointer = (undefined *)*pointerArray;\n    length = (int)charPointer - length;\n    if (length < (int)pointerArray[5]) {\nLAB_000844f6:\n      length = length + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    pointerArray[0x19] = pointerArray[0x19] & 0xffffdfff;\n    charPointer = (undefined *)*pointerArray;\n    *(ushort *)(pointerArray + 3) = value | 0x2000;\n    length = (int)charPointer - length;\n    if (length < (int)pointerArray[5]) goto LAB_000844f6;\n  }\n  length = FUN_00083adc(inputPointer,pointerArray);\n  if (length != 0) {\n    return 0xffffffff;\n  }\n  charPointer = (undefined *)*pointerArray;\n  length = 1;\nLAB_000844f8:\n  pointerArray[2] = pointerArray[2] + -1;\n  *pointerArray = charPointer + 1;\n  *charPointer = (char)data;\n  if (((pointerArray[5] == length) ||\n      (((int)((uint)*(ushort *)(pointerArray + 3) << 0x1f) < 0 && (data == 10)))) &&\n     (length = FUN_00083adc(inputPointer,pointerArray), length != 0)) {\n    return 0xffffffff;\n  }\n  return data;\n}\n\n",
            "renaming": {
                "FUN_000844c4": "process_data_000844c4",
                "param_1": "inputPointer",
                "param_2": "data",
                "param_3": "pointerArray",
                "param_4": "size",
                "uVar1": "value",
                "uVar2": "convertedValue",
                "puVar3": "charPointer",
                "iVar4": "length"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008456c": {
            "entrypoint": "0x0008456c",
            "current_name": "initialize_communication_0008456c",
            "code": "\nvoid initializeCommunication_0008456c(undefined4 *outputPointer,int inputSize,undefined4 inputValue,undefined4 *statusPointer)\n\n{\n  code *functionPointer;\n  undefined4 resultValue;\n  int returnValue;\n  undefined temporaryBuffer [12];\n  \n  functionPointer = DAT_20070898;\n  if (inputSize == 0) {\n    resultValue = FUN_00084290();\n    returnValue = (*functionPointer)(outputPointer,temporaryBuffer,0,resultValue,statusPointer);\n  }\n  else {\n    resultValue = FUN_00084290();\n    returnValue = (*functionPointer)(outputPointer,inputSize,inputValue,resultValue,statusPointer);\n  }\n  if (returnValue == -1) {\n    *statusPointer = 0;\n    *outputPointer = 0x8a;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008456c": "initialize_communication_0008456c",
                "param_1": "outputPointer",
                "param_2": "inputSize",
                "param_3": "inputValue",
                "param_4": "statusPointer",
                "pcVar1": "functionPointer",
                "uVar2": "resultValue",
                "iVar3": "returnValue",
                "auStack_24": "temporaryBuffer"
            },
            "calling": [
                "FUN_00083c40"
            ],
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000845bc": {
            "entrypoint": "0x000845bc",
            "current_name": "write_byte_into_memory_000845bc",
            "code": "\nundefined4 write_byte_into_memory_000845bc(undefined4 *memory_address,undefined *data_pointer,uint byte_value)\n\n{\n  if (data_pointer == (undefined *)0x0) {\n    return 0;\n  }\n  if (byte_value < 0x100) {\n    *data_pointer = (char)byte_value;\n    return 1;\n  }\n  *memory_address = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000845bc": "write_byte_into_memory_000845bc",
                "param_1": "memory_address",
                "param_2": "data_pointer",
                "param_3": "byte_value"
            },
            "calling": [
                "FUN_0008456c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846a4": {
            "entrypoint": "0x000846a4",
            "current_name": "process_param_000846a4",
            "code": "\nundefined4 processParam_000846a4(int input)\n\n{\n  dword offset;\n  undefined4 result;\n  int returnValue;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(input + 0xc) != 0) {\n      result = FUN_00083adc(offset,input);\n      if ((*(code **)(input + 0x2c) != (code *)0x0) &&\n         (returnValue = (**(code **)(input + 0x2c))(offset,*(undefined4 *)(input + 0x1c)), returnValue < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(offset,*(undefined4 *)(input + 0x10));\n      }\n      if (*(int *)(input + 0x30) != 0) {\n        if (*(int *)(input + 0x30) != input + 0x40) {\n          FUN_00083d9c(offset);\n        }\n        *(undefined4 *)(input + 0x30) = 0;\n      }\n      if (*(int *)(input + 0x44) != 0) {\n        FUN_00083d9c(offset);\n        *(undefined4 *)(input + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000846a4": "process_param_000846a4",
                "param_1": "input",
                "dVar1": "offset",
                "uVar2": "result",
                "iVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083adc",
                "FUN_00083c08",
                "FUN_00083c0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846b4": {
            "entrypoint": "0x000846b4",
            "current_name": "check_and_update_value_000846b4",
            "code": "\nvoid checkAndUpdateValue_000846b4(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int returnValue;\n  \n  DAT_200711bc = 0;\n  returnValue = FUN_000811b4(input1,input2,input2,0,input3);\n  if ((returnValue == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846b4": "check_and_update_value_000846b4",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811b4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000846dc": {
            "entrypoint": "0x000846dc",
            "current_name": "find_error_code_000846dc",
            "code": "\nvoid findErrorCode_000846dc(int *output,undefined4 input)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811be(input);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000846dc": "find_error_code_000846dc",
                "param_1": "output",
                "param_2": "input",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000842a4"
            ],
            "called": [
                "FUN_000811be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084700": {
            "entrypoint": "0x00084700",
            "current_name": "process_function_00084700",
            "code": "\nvoid processFunction_00084700(int *result,undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  int funcResult;\n  \n  DAT_200711bc = 0;\n  funcResult = FUN_000811c2(input_1,input_2,input_3);\n  if ((funcResult == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084700": "process_function_00084700",
                "param_1": "result",
                "param_2": "input_1",
                "param_3": "input_2",
                "param_4": "input_3",
                "iVar1": "funcResult"
            },
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "called": [
                "FUN_000811c2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084728": {
            "entrypoint": "0x00084728",
            "current_name": "extract_error_code_00084728",
            "code": "\nvoid extractErrorCode_00084728(int *errorCode,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c6(arg1,arg2,arg3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *errorCode = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00084728": "extract_error_code_00084728",
                "param_1": "errorCode",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000811c6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084750": {
            "entrypoint": "0x00084750",
            "current_name": "check_return_value_00084750",
            "code": "\nint checkReturnValue_00084750(int value1,int value2,int value3,int value4)\n\n{\n  int result;\n  \n  if ((value4 == 0) && (value3 == 0)) {\n    if (value2 != 0 || value1 != 0) {\n      value1 = -1;\n    }\n    return value1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00084750": "check_return_value_00084750",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00082b38"
            ],
            "called": [
                "FUN_000847ac"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0008477c": {
            "entrypoint": "0x0008477c",
            "current_name": "calculate_difference_0008477c",
            "code": "\nvoid calculate_difference_0008477c(uint num1,int num2,undefined4 low_bits,undefined4 high_bits,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_000847e0();\n  product = product * CONCAT44(high_bits,low_bits);\n  result = (uint)product;\n  *result_array = num1 - result;\n  result_array[1] = (num2 - (int)((ulonglong)product >> 0x20)) - (uint)(num1 < result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0008477c": "calculate_difference_0008477c",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "low_bits",
                "param_4": "high_bits",
                "param_5": "result_array",
                "uVar1": "result",
                "lVar2": "product"
            },
            "calling": [],
            "called": [
                "FUN_000847e0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847ac": {
            "entrypoint": "0x000847ac",
            "current_name": "subtract_values_000847ac",
            "code": "\nvoid subtractValues_000847ac(uint value1,int value2,undefined4 highPart,undefined4 lowPart,int *result)\n\n{\n  uint resultValue;\n  longlong product;\n  \n  product = FUN_00084a80();\n  product = product * CONCAT44(lowPart,highPart);\n  resultValue = (uint)product;\n  *result = value1 - resultValue;\n  result[1] = (value2 - (int)((ulonglong)product >> 0x20)) - (uint)(value1 < resultValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000847ac": "subtract_values_000847ac",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "highPart",
                "param_4": "lowPart",
                "param_5": "result",
                "uVar1": "resultValue",
                "lVar2": "product"
            },
            "calling": [
                "FUN_00084750"
            ],
            "called": [
                "FUN_00084a80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000847e0": {
            "entrypoint": "0x000847e0",
            "current_name": "division_with_carry_000847e0",
            "code": "\nundefined8 division_with_carry_000847e0(uint dividend,uint dividend_upper,uint divisor,uint divisor_upper)\n\n{\n  longlong temp;\n  uint quotient_lower;\n  uint quotient_upper;\n  uint uVar4;\n  uint uVar5;\n  int shift;\n  uint uVar7;\n  uint uVar8;\n  uint uVar9;\n  uint uVar10;\n  uint uVar11;\n  uint uVar12;\n  bool carry;\n  \n  if ((int)dividend_upper < 0) {\n    carry = dividend != 0;\n    dividend = -dividend;\n    dividend_upper = -dividend_upper - (uint)carry;\n    uVar9 = 0xffffffff;\n  }\n  else {\n    uVar9 = 0;\n  }\n  if ((int)divisor_upper < 0) {\n    uVar9 = ~uVar9;\n    carry = divisor != 0;\n    divisor = -divisor;\n    divisor_upper = -divisor_upper - (uint)carry;\n  }\n  if (divisor_upper == 0) {\n    if (dividend_upper < divisor) {\n      shift = LZCOUNT(divisor);\n      if (shift != 0) {\n        quotient_upper = dividend >> (0x20U - shift & 0xff);\n        divisor = divisor << shift;\n        dividend = dividend << shift;\n        dividend_upper = dividend_upper << shift | quotient_upper;\n      }\n      quotient_lower = divisor >> 0x10;\n      uVar4 = dividend_upper / quotient_lower;\n      uVar7 = (divisor & 0xffff) * uVar4;\n      uVar10 = dividend >> 0x10 | (dividend_upper - quotient_lower * uVar4) * 0x10000;\n      quotient_upper = uVar4;\n      if (uVar10 <= uVar7 && uVar7 - uVar10 != 0) {\n        carry = CARRY4(uVar10,divisor);\n        uVar10 = uVar10 + divisor;\n        quotient_upper = uVar4 - 1;\n        if ((carry == false) && (uVar10 <= uVar7 && uVar7 - uVar10 != 0)) {\n          quotient_upper = uVar4 - 2;\n          uVar10 = uVar10 + divisor;\n        }\n      }\n      uVar8 = (uVar10 - uVar7) / quotient_lower;\n      uVar4 = (divisor & 0xffff) * uVar8;\n      uVar7 = dividend & 0xffff | ((uVar10 - uVar7) - quotient_lower * uVar8) * 0x10000;\n      quotient_lower = uVar8;\n      if (uVar7 <= uVar4 && uVar4 - uVar7 != 0) {\n        quotient_lower = uVar8 - 1;\n        if ((CARRY4(uVar7,divisor) == false) &&\n           (uVar7 + divisor <= uVar4 && uVar4 - (uVar7 + divisor) != 0)) {\n          quotient_lower = uVar8 - 2;\n        }\n      }\n      quotient_lower = quotient_lower | quotient_upper << 0x10;\n      quotient_upper = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift = LZCOUNT(divisor);\n      if (shift == 0) {\n        dividend_upper = dividend_upper - divisor;\n        uVar4 = divisor >> 0x10;\n        uVar12 = divisor & 0xffff;\n        quotient_upper = 1;\n      }\n      else {\n        divisor = divisor << shift;\n        quotient_upper = dividend_upper >> (0x20U - shift & 0xff);\n        uVar4 = divisor >> 0x10;\n        uVar10 = quotient_upper / uVar4;\n        uVar12 = divisor & 0xffff;\n        uVar7 = uVar12 * uVar10;\n        uVar8 = dividend >> (0x20U - shift & 0xff) | dividend_upper << shift;\n        quotient_upper = uVar8 >> 0x10 | (quotient_upper - uVar4 * uVar10) * 0x10000;\n        dividend = dividend << shift;\n        quotient_lower = uVar10;\n        if (quotient_upper <= uVar7 && uVar7 - quotient_upper != 0) {\n          carry = CARRY4(quotient_upper,divisor);\n          quotient_upper = quotient_upper + divisor;\n          quotient_lower = uVar10 - 1;\n          if ((carry == false) && (quotient_upper <= uVar7 && uVar7 - quotient_upper != 0)) {\n            quotient_lower = uVar10 - 2;\n            quotient_upper = quotient_upper + divisor;\n          }\n        }\n        uVar5 = (quotient_upper - uVar7) / uVar4;\n        uVar10 = uVar12 * uVar5;\n        dividend_upper = uVar8 & 0xffff | ((quotient_upper - uVar7) - uVar4 * uVar5) * 0x10000;\n        quotient_upper = uVar5;\n        if (dividend_upper <= uVar10 && uVar10 - dividend_upper != 0) {\n          carry = CARRY4(dividend_upper,divisor);\n          dividend_upper = dividend_upper + divisor;\n          quotient_upper = uVar5 - 1;\n          if ((carry == false) && (dividend_upper <= uVar10 && uVar10 - dividend_upper != 0)) {\n            quotient_upper = uVar5 - 2;\n            dividend_upper = dividend_upper + divisor;\n          }\n        }\n        dividend_upper = dividend_upper - uVar10;\n        quotient_upper = quotient_upper | quotient_lower << 0x10;\n      }\n      quotient_lower = dividend_upper / uVar4;\n      uVar10 = uVar12 * quotient_lower;\n      uVar8 = dividend >> 0x10 | (dividend_upper - uVar4 * quotient_lower) * 0x10000;\n      uVar7 = quotient_lower;\n      if (uVar8 <= uVar10 && uVar10 - uVar8 != 0) {\n        carry = CARRY4(uVar8,divisor);\n        uVar8 = uVar8 + divisor;\n        uVar7 = quotient_lower - 1;\n        if ((carry == false) && (uVar8 <= uVar10 && uVar10 - uVar8 != 0)) {\n          uVar7 = quotient_lower - 2;\n          uVar8 = uVar8 + divisor;\n        }\n      }\n      uVar5 = (uVar8 - uVar10) / uVar4;\n      uVar12 = uVar12 * uVar5;\n      uVar4 = dividend & 0xffff | ((uVar8 - uVar10) - uVar4 * uVar5) * 0x10000;\n      quotient_lower = uVar5;\n      if (uVar4 <= uVar12 && uVar12 - uVar4 != 0) {\n        quotient_lower = uVar5 - 1;\n        if ((CARRY4(uVar4,divisor) == false) &&\n           (uVar4 + divisor <= uVar12 && uVar12 - (uVar4 + divisor) != 0)) {\n          quotient_lower = uVar5 - 2;\n        }\n      }\n      quotient_lower = quotient_lower | uVar7 << 0x10;\n    }\n  }\n  else if (dividend_upper < divisor_upper) {\n    quotient_upper = 0;\n    quotient_lower = 0;\n  }\n  else {\n    shift = LZCOUNT(divisor_upper);\n    if (shift == 0) {\n      if ((divisor_upper < dividend_upper) || (divisor <= dividend)) {\n        quotient_upper = 0;\n        quotient_lower = 1;\n      }\n      else {\n        quotient_lower = 0;\n        quotient_upper = 0;\n      }\n    }\n    else {\n      quotient_upper = 0x20 - shift;\n      uVar4 = dividend_upper >> (quotient_upper & 0xff);\n      uVar12 = divisor >> (quotient_upper & 0xff) | divisor_upper << shift;\n      uVar10 = uVar12 >> 0x10;\n      quotient_lower = uVar4 / uVar10;\n      uVar8 = (uVar12 & 0xffff) * quotient_lower;\n      uVar7 = dividend_upper << shift | dividend >> (quotient_upper & 0xff);\n      uVar4 = uVar7 >> 0x10 | (uVar4 - uVar10 * quotient_lower) * 0x10000;\n      quotient_upper = quotient_lower;\n      if (uVar4 <= uVar8 && uVar8 - uVar4 != 0) {\n        carry = CARRY4(uVar4,uVar12);\n        uVar4 = uVar4 + uVar12;\n        quotient_upper = quotient_lower - 1;\n        if ((carry == false) && (uVar4 <= uVar8 && uVar8 - uVar4 != 0)) {\n          quotient_upper = quotient_lower - 2;\n          uVar4 = uVar4 + uVar12;\n        }\n      }\n      uVar5 = (uVar4 - uVar8) / uVar10;\n      uVar11 = (uVar12 & 0xffff) * uVar5;\n      uVar4 = uVar7 & 0xffff | ((uVar4 - uVar8) - uVar10 * uVar5) * 0x10000;\n      quotient_lower = uVar5;\n      if (uVar4 <= uVar11 && uVar11 - uVar4 != 0) {\n        carry = CARRY4(uVar4,uVar12);\n        uVar4 = uVar4 + uVar12;\n        quotient_lower = uVar5 - 1;\n        if ((carry == false) && (uVar4 <= uVar11 && uVar11 - uVar4 != 0)) {\n          quotient_lower = uVar5 - 2;\n          uVar4 = uVar4 + uVar12;\n        }\n      }\n      quotient_lower = quotient_lower | quotient_upper << 0x10;\n      temp = (ulonglong)quotient_lower * (ulonglong)(divisor << shift);\n      uVar7 = (uint)((ulonglong)temp >> 0x20);\n      quotient_upper = 0;\n      if ((uVar4 - uVar11 < uVar7) ||\n         ((uVar4 - uVar11 == uVar7 && (dividend << shift < (uint)temp)))) {\n        quotient_lower = quotient_lower - 1;\n        quotient_upper = 0;\n      }\n    }\n  }\n  if (uVar9 != 0) {\n    carry = quotient_lower != 0;\n    quotient_lower = -quotient_lower;\n    quotient_upper = -quotient_upper - (uint)carry;\n  }\n  return CONCAT44(quotient_upper,quotient_lower);\n}\n\n",
            "renaming": {
                "FUN_000847e0": "division_with_carry_000847e0",
                "param_1": "dividend",
                "param_2": "dividend_upper",
                "param_3": "divisor",
                "param_4": "divisor_upper",
                "lVar1": "temp",
                "uVar2": "quotient_lower",
                "uVar3": "quotient_upper",
                "iVar6": "shift",
                "bVar13": "carry"
            },
            "calling": [
                "FUN_0008477c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00084a80": {
            "entrypoint": "0x00084a80",
            "current_name": "divide_and_remainder_00084a80",
            "code": "\nulonglong divideAndRemainder_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong temporary1;\n  uint tempResult1;\n  uint tempDivisorHigh;\n  uint tempDivisorLow;\n  uint tempMultiplication1;\n  uint tempMultiplication2;\n  uint tempQuotient1;\n  uint tempQuotient2;\n  uint tempRemainder1;\n  int bitShiftCount;\n  bool carryFlag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      bitShiftCount = LZCOUNT(quotient);\n      if (bitShiftCount == 0) {\n        divisor = divisor - quotient;\n        tempDivisorHigh = quotient >> 0x10;\n        tempMultiplication1 = quotient & 0xffff;\n        tempResult1 = 1;\n      }\n      else {\n        quotient = quotient << bitShiftCount;\n        tempQuotient2 = divisor >> (0x20U - bitShiftCount & 0xff);\n        tempDivisorHigh = quotient >> 0x10;\n        tempRemainder1 = tempQuotient2 / tempDivisorHigh;\n        tempMultiplication1 = quotient & 0xffff;\n        tempResult1 = tempMultiplication1 * tempRemainder1;\n        tempMultiplication2 = dividend >> (0x20U - bitShiftCount & 0xff) | divisor << bitShiftCount;\n        tempDivisorLow = tempMultiplication2 >> 0x10 | (tempQuotient2 - tempDivisorHigh * tempRemainder1) * 0x10000;\n        dividend = dividend << bitShiftCount;\n        tempQuotient2 = tempRemainder1;\n        if (tempDivisorLow <= tempResult1 && tempResult1 - tempDivisorLow != 0) {\n          carryFlag = CARRY4(tempDivisorLow,quotient);\n          tempDivisorLow = tempDivisorLow + quotient;\n          tempQuotient2 = tempRemainder1 - 1;\n          if ((carryFlag == false) && (tempDivisorLow <= tempResult1 && tempResult1 - tempDivisorLow != 0)) {\n            tempQuotient2 = tempRemainder1 - 2;\n            tempDivisorLow = tempDivisorLow + quotient;\n          }\n        }\n        tempQuotient1 = (tempDivisorLow - tempResult1) / tempDivisorHigh;\n        tempRemainder1 = tempMultiplication1 * tempQuotient1;\n        divisor = tempMultiplication2 & 0xffff | ((tempDivisorLow - tempResult1) - tempDivisorHigh * tempQuotient1) * 0x10000;\n        tempResult1 = tempQuotient1;\n        if (divisor <= tempRemainder1 && tempRemainder1 - divisor != 0) {\n          carryFlag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          tempResult1 = tempQuotient1 - 1;\n          if ((carryFlag == false) && (divisor <= tempRemainder1 && tempRemainder1 - divisor != 0)) {\n            tempResult1 = tempQuotient1 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - tempRemainder1;\n        tempResult1 = tempResult1 | tempQuotient2 << 0x10;\n      }\n      tempRemainder1 = divisor / tempDivisorHigh;\n      tempDivisorLow = tempMultiplication1 * tempRemainder1;\n      tempMultiplication2 = dividend >> 0x10 | (divisor - tempDivisorHigh * tempRemainder1) * 0x10000;\n      tempQuotient2 = tempRemainder1;\n      if (tempMultiplication2 <= tempDivisorLow && tempDivisorLow - tempMultiplication2 != 0) {\n        carryFlag = CARRY4(tempMultiplication2,quotient);\n        tempMultiplication2 = tempMultiplication2 + quotient;\n        tempQuotient2 = tempRemainder1 - 1;\n        if ((carryFlag == false) && (tempMultiplication2 <= tempDivisorLow && tempDivisorLow - tempMultiplication2 != 0)) {\n          tempQuotient2 = tempRemainder1 - 2;\n          tempMultiplication2 = tempMultiplication2 + quotient;\n        }\n      }\n      tempRemainder1 = (tempMultiplication2 - tempDivisorLow) / tempDivisorHigh;\n      tempMultiplication1 = tempMultiplication1 * tempRemainder1;\n      tempMultiplication2 = dividend & 0xffff | ((tempMultiplication2 - tempDivisorLow) - tempDivisorHigh * tempRemainder1) * 0x10000;\n      tempDivisorHigh = tempRemainder1;\n      if (tempMultiplication2 <= tempMultiplication1 && tempMultiplication1 - tempMultiplication2 != 0) {\n        tempDivisorHigh = tempRemainder1 - 1;\n        if ((CARRY4(tempMultiplication2,quotient) == false) &&\n           (tempMultiplication2 + quotient <= tempMultiplication1 && tempMultiplication1 - (tempMultiplication2 + quotient) != 0)) {\n          tempDivisorHigh = tempRemainder1 - 2;\n        }\n      }\n      return CONCAT44(tempResult1,tempDivisorHigh | tempQuotient2 << 0x10);\n    }\n    bitShiftCount = LZCOUNT(quotient);\n    if (bitShiftCount != 0) {\n      tempQuotient2 = dividend >> (0x20U - bitShiftCount & 0xff);\n      quotient = quotient << bitShiftCount;\n      dividend = dividend << bitShiftCount;\n      divisor = tempQuotient2 | divisor << bitShiftCount;\n    }\n    tempResult1 = quotient >> 0x10;\n    tempDivisorHigh = divisor / tempResult1;\n    tempMultiplication1 = (quotient & 0xffff) * tempDivisorHigh;\n    tempRemainder1 = dividend >> 0x10 | (divisor - tempResult1 * tempDivisorHigh) * 0x10000;\n    tempQuotient2 = tempDivisorHigh;\n    if (tempRemainder1 <= tempMultiplication1 && tempMultiplication1 - tempRemainder1 != 0) {\n      carryFlag = CARRY4(tempRemainder1,quotient);\n      tempRemainder1 = tempRemainder1 + quotient;\n      tempQuotient2 = tempDivisorHigh - 1;\n      if ((carryFlag == false) && (tempRemainder1 <= tempMultiplication1 && tempMultiplication1 - tempRemainder1 != 0)) {\n        tempQuotient2 = tempDivisorHigh - 2;\n        tempRemainder1 = tempRemainder1 + quotient;\n      }\n    }\n    tempMultiplication2 = (tempRemainder1 - tempMultiplication1) / tempResult1;\n    tempDivisorHigh = (quotient & 0xffff) * tempMultiplication2;\n    tempMultiplication1 = dividend & 0xffff | ((tempRemainder1 - tempMultiplication1) - tempResult1 * tempMultiplication2) * 0x10000;\n    tempResult1 = tempMultiplication2;\n    if (tempMultiplication1 <= tempDivisorHigh && tempDivisorHigh - tempMultiplication1 != 0) {\n      tempResult1 = tempMultiplication2 - 1;\n      if ((CARRY4(tempMultiplication1,quotient) == false) &&\n         (tempMultiplication1 + quotient <= tempDivisorHigh && tempDivisorHigh - (tempMultiplication1 + quotient) != 0)) {\n        tempResult1 = tempMultiplication2 - 2;\n      }\n    }\n    tempResult1 = tempResult1 | tempQuotient2 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    bitShiftCount = LZCOUNT(remainder);\n    if (bitShiftCount == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      tempResult1 = 0;\n    }\n    else {\n      tempResult1 = 0x20 - bitShiftCount;\n      tempQuotient2 = divisor >> (tempResult1 & 0xff);\n      tempDivisorHigh = remainder << bitShiftCount | quotient >> (tempResult1 & 0xff);\n      tempMultiplication1 = tempDivisorHigh >> 0x10;\n      tempDivisorLow = tempQuotient2 / tempMultiplication1;\n      tempRemainder1 = (tempDivisorHigh & 0xffff) * tempDivisorLow;\n      tempMultiplication2 = dividend >> (tempResult1 & 0xff) | divisor << bitShiftCount;\n      tempResult1 = tempMultiplication2 >> 0x10 | (tempQuotient2 - tempMultiplication1 * tempDivisorLow) * 0x10000;\n      tempQuotient2 = tempDivisorLow;\n      if (tempResult1 <= tempRemainder1 && tempRemainder1 - tempResult1 != 0) {\n        carryFlag = CARRY4(tempResult1,tempDivisorHigh);\n        tempResult1 = tempResult1 + tempDivisorHigh;\n        tempQuotient2 = tempDivisorLow - 1;\n        if ((carryFlag == false) && (tempResult1 <= tempRemainder1 && tempRemainder1 - tempResult1 != 0)) {\n          tempQuotient2 = tempDivisorLow - 2;\n          tempResult1 = tempResult1 + tempDivisorHigh;\n        }\n      }\n      tempDivisorLow = (tempResult1 - tempRemainder1) / tempMultiplication1;\n      tempQuotient1 = (tempDivisorHigh & 0xffff) * tempDivisorLow;\n      tempMultiplication1 = tempMultiplication2 & 0xffff | ((tempResult1 - tempRemainder1) - tempMultiplication1 * tempDivisorLow) * 0x10000;\n      tempResult1 = tempDivisorLow;\n      if (tempMultiplication1 <= tempQuotient1 && tempQuotient1 - tempMultiplication1 != 0) {\n        carryFlag = CARRY4(tempMultiplication1,tempDivisorHigh);\n        tempMultiplication1 = tempMultiplication1 + tempDivisorHigh;\n        tempResult1 = tempDivisorLow - 1;\n        if ((carryFlag == false) && (tempMultiplication1 <= tempQuotient1 && tempQuotient1 - tempMultiplication1 != 0)) {\n          tempResult1 = tempDivisorLow - 2;\n          tempMultiplication1 = tempMultiplication1 + tempDivisorHigh;\n        }\n      }\n      tempResult1 = tempResult1 | tempQuotient2 << 0x10;\n      temporary1 = (ulonglong)tempResult1 * (ulonglong)(quotient << bitShiftCount);\n      tempQuotient2 = (uint)((ulonglong)temporary1 >> 0x20);\n      if ((tempMultiplication1 - tempQuotient1 < tempQuotient2) || ((tempMultiplication1 - tempQuotient1 == tempQuotient2 && (dividend << bitShiftCount < (uint)temporary1)))\n         ) {\n        tempResult1 = tempResult1 - 1;\n      }\n    }\n  }\n  return (ulonglong)tempResult1;\n}\n\n",
            "renaming": {
                "FUN_00084a80": "divide_and_remainder_00084a80",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "lVar1": "temporary1",
                "uVar2": "tempResult1",
                "uVar3": "tempDivisorHigh",
                "uVar4": "tempDivisorLow",
                "uVar5": "tempMultiplication1",
                "uVar6": "tempMultiplication2",
                "uVar7": "tempQuotient1",
                "uVar8": "tempQuotient2",
                "uVar9": "tempRemainder1",
                "iVar10": "bitShiftCount",
                "bVar11": "carryFlag"
            },
            "calling": [
                "FUN_000847ac"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00085858": {
            "entrypoint": "0x00085858",
            "current_name": "FUNC_00085858",
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "calling": [
                "FUN_00081d7c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 104389,
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": []
}