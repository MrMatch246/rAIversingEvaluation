{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_uart_stdio_00000410",
            "code": "\nvoid initialize_uart_stdio_00000410(void)\n\n{\n  initialize_uart_stdio_00000410();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_uart_stdio_00000410",
                "uart_stdio_init": "initialize_uart_stdio"
            },
            "calling": [
                "__libc_init_array"
            ],
            "called": [
                "uart_stdio_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "update_array_offset_00000428",
            "code": "\ndword updateArrayOffset_00000428(undefined4 *outputPointer,int inputValue)\n\n{\n  undefined4 interruptFlag;\n  dword result;\n  \n  interruptFlag = irq_disable();\n  result = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((inputValue + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < inputValue + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = inputValue + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *outputPointer = 0xc;\n    result = 0xffffffff;\n  }\n  irq_restore(interruptFlag);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000428": "update_array_offset_00000428",
                "param_1": "outputPointer",
                "param_2": "inputValue",
                "uVar1": "interruptFlag",
                "local_c": "result"
            },
            "calling": [
                "_malloc_r"
            ],
            "called": [
                "irq_restore",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "read_uart_buffer_00000490",
            "code": "\nundefined4 read_uart_buffer_00000490(undefined4 unknown_param,undefined4 unknown_param,undefined4 buffer_address,undefined4 buffer_size)\n\n{\n  undefined4 read_result;\n  \n  read_result = uart_stdio_read(buffer_address,buffer_size);\n  return read_result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "read_uart_buffer_00000490",
                "param_1": "unknown_param",
                "param_2": "unknown_param",
                "param_3": "buffer_address",
                "param_4": "buffer_size",
                "uVar1": "read_result"
            },
            "calling": [
                "__sread"
            ],
            "called": [
                "uart_stdio_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "set_default_value_and_return_000004f2",
            "code": "\nundefined4 setDefaultValueAndReturn_000004f2(undefined4 *output)\n\n{\n  *output = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "set_default_value_and_return_000004f2",
                "param_1": "output"
            },
            "calling": [
                "__sseek",
                "__swrite"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_param_00000514",
            "code": "\nundefined4 initializeParam_00000514(undefined4 *param)\n\n{\n  *param = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_param_00000514",
                "param_1": "param"
            },
            "calling": [
                "__swhatbuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "validate_input_00000534",
            "code": "\nundefined4 validate_input_00000534(undefined4 *output,int input)\n\n{\n  undefined4 isValid;\n  \n  *output = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "validate_input_00000534",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "count_bits_00000566",
            "code": "\nint countBits_00000566(int input)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int result;\n  \n  byte2 = (byte)input;\n  byte3 = (byte)((uint)input >> 8);\n  byte4 = (byte)((uint)input >> 0x10);\n  byte1 = (byte)((uint)input >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (input == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "count_bits_00000566",
                "param_1": "input",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "result"
            },
            "calling": [
                "sched_run"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *ptr1,undefined4 *ptr2)\n\n{\n  if (*ptr1 == 0) {\n    *ptr2 = ptr2;\n  }\n  else {\n    *ptr2 = *(undefined4 *)*ptr1;\n    *(undefined4 **)*ptr1 = ptr2;\n  }\n  *ptr1 = (int)ptr2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "ptr1",
                "param_2": "ptr2"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_pointer_from_address_000005ca",
            "code": "\nundefined4 * extractPointerFromAddress_000005ca(int *inputPointer)\n\n{\n  undefined4 *outputPointer;\n  \n  if (*inputPointer == 0) {\n    outputPointer = (undefined4 *)0x0;\n  }\n  else {\n    outputPointer = *(undefined4 **)*inputPointer;\n    if (outputPointer == (undefined4 *)*inputPointer) {\n      *inputPointer = 0;\n    }\n    else {\n      *(undefined4 *)*inputPointer = *outputPointer;\n    }\n  }\n  return outputPointer;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_pointer_from_address_000005ca",
                "param_1": "inputPointer",
                "puVar1": "outputPointer"
            },
            "calling": [
                "sched_set_status"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "verify_memory_access_00000610",
            "code": "\nundefined4 verifyMemoryAccess_00000610(void)\n\n{\n  int inputAddress;\n  int memoryAddress;\n  undefined4 result;\n  \n  inputAddress = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  memoryAddress = bitarithm_lsb(DAT_1fff0424);\n  memoryAddress = **(int **)(&DAT_1fff03e4 + memoryAddress * 4);\n  if (inputAddress == memoryAddress + -8) {\n    result = 0;\n  }\n  else {\n    if ((inputAddress != 0) && (*(char *)(inputAddress + 4) == '\\t')) {\n      *(undefined *)(inputAddress + 4) = 10;\n    }\n    *(undefined *)(memoryAddress + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(memoryAddress + -2);\n    result = 1;\n    DAT_1fff03dc = memoryAddress + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "verify_memory_access_00000610",
                "iVar1": "inputAddress",
                "iVar2": "memoryAddress",
                "uVar3": "result"
            },
            "calling": [],
            "called": [
                "bitarithm_lsb"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_list_00000698",
            "code": "\nvoid updateList_00000698(int param,uint size)\n\n{\n  if (size < 9) {\n    if ((8 < *(byte *)(param + 4)) &&\n       (clist_lpop(&DAT_1fff03e4 + (uint)*(byte *)(param + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byte *)(param + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(sbyte *)(param + 5));\n    }\n  }\n  else if (*(byte *)(param + 4) < 9) {\n    clist_rpush(&DAT_1fff03e4 + (uint)*(byte *)(param + 5) * 4,param + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(sbyte *)(param + 5);\n  }\n  *(char *)(param + 4) = newSize;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_list_00000698",
                "param_1": "param",
                "param_2": "size",
                "(char)param_2": "newSize"
            },
            "calling": [
                "thread_create",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [
                "clist_rpush",
                "clist_lpop"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_conditions_00000738",
            "code": "\nvoid checkConditions_00000738(ushort inputValue)\n\n{\n  int irqStatus;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    irqStatus = irq_is_in();\n    if (irqStatus == 0) {\n      thread_yield_higher();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_conditions_00000738",
                "param_1": "inputValue",
                "iVar1": "irqStatus"
            },
            "calling": [
                "thread_create",
                "mutex_unlock"
            ],
            "called": [
                "irq_is_in",
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_stack_00000794",
            "code": "\nint * initializeStack_00000794(void)\n\n{\n  int outParam;\n  int index;\n  undefined4 *status;\n  uint alignedStatus;\n  int loopCounter1;\n  int loopCounter2;\n  int *stackPtr;\n  \n  irq_disable();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  sched_set_status(DAT_1fff03dc,0);\n  status = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  cpu_switch_context_exit();\n  alignedStatus = (int)status + index & 0xfffffffc;\n  stackPtr = (int *)(alignedStatus - 4);\n  *stackPtr = 0x77777777;\n  if (((uint)stackPtr & 7) != 0) {\n    stackPtr = (int *)(alignedStatus - 8);\n    *stackPtr = 0x88888888;\n  }\n  stackPtr[-1] = 0x1000000;\n  stackPtr[-2] = index << 0xd;\n  stackPtr[-3] = 0x795;\n  stackPtr = stackPtr + -4;\n  *stackPtr = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    stackPtr = stackPtr + -1;\n    *stackPtr = loopCounter2;\n  }\n  stackPtr = stackPtr + -1;\n  *stackPtr = outParam;\n  for (loopCounter1 = 0xb; 3 < loopCounter1; loopCounter1 = loopCounter1 + -1) {\n    stackPtr = stackPtr + -1;\n    *stackPtr = loopCounter1;\n  }\n  stackPtr[-1] = -3;\n  return stackPtr + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_stack_00000794",
                "extraout_r1": "outParam",
                "iVar1": "index",
                "puVar2": "status",
                "uVar3": "alignedStatus",
                "iStack_1c": "loopCounter1",
                "iStack_18": "loopCounter2",
                "piStack_14": "stackPtr"
            },
            "calling": [],
            "called": [
                "sched_set_status",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 arg1,int arg2,int arg3,int arg4)\n\n{\n  uint adjustedSize;\n  int counter2;\n  int counter1;\n  int *ptr;\n  \n  adjustedSize = arg4 + arg3 & 0xfffffffc;\n  ptr = (int *)(adjustedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(adjustedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = arg1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (counter1 = 3; 0 < counter1; counter1 = counter1 + -1) {\n    ptr = ptr + -1;\n    *ptr = counter1;\n  }\n  ptr = ptr + -1;\n  *ptr = arg2;\n  for (counter2 = 0xb; 3 < counter2; counter2 = counter2 + -1) {\n    ptr = ptr + -1;\n    *ptr = counter2;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "adjustedSize",
                "local_14": "counter2",
                "local_10": "counter1",
                "local_c": "ptr"
            },
            "calling": [
                "thread_create"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "calculate_relocation_offset_000008b8",
            "code": "\nint calculateRelocationOffset_000008b8(void)\n\n{\n  Elf32_Rel *currentRelocation;\n  \n  for (currentRelocation = (Elf32_Rel *)&DAT_1fff0000;\n      (currentRelocation->r_offset == 0xe7fee7fe && (currentRelocation < endAddress));\n      currentRelocation = (Elf32_Rel *)&currentRelocation->r_info) {\n  }\n  return ((int)endAddress - (int)currentRelocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "calculate_relocation_offset_000008b8",
                "local_c": "currentRelocation",
                "Elf32_Rel_ARRAY_1fff0200": "endAddress"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_memory_address_0000091c",
            "code": "\nuint32_t getMemoryAddress_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_memory_address_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "enable_interrupt_and_invoke_software_interrupt_00000930",
            "code": "\nvoid enable_interrupt_and_invoke_software_interrupt_00000930(void)\n\n{\n  enable_interrupt();\n  invoke_interrupt(1);\n  loop {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "enable_interrupt_and_invoke_software_interrupt_00000930",
                "irq_enable": "enable_interrupt",
                "software_interrupt": "invoke_interrupt",
                "do": "loop"
            },
            "calling": [
                "kernel_init",
                "sched_task_exit"
            ],
            "called": [
                "irq_enable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_memory_bit_0000093c",
            "code": "\n\n\nvoid set_memory_bit_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_memory_bit_0000093c"
            },
            "calling": [
                "cortexm_isr_end",
                "FUN_00001cf0",
                "_mutex_lock",
                "sched_switch",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000099c": {
            "entrypoint": "0x0000099c",
            "current_name": "initialize_system_0000099c",
            "code": "\nvoid initializeSystem_0000099c(void)\n\n{\n  undefined4 stackVariable;\n  undefined4 *stackPointer;\n  dword *dataPointer;\n  Elf32_Rel *relTablePointer;\n  \n  stackPointer = &stackVariable;\n  dataPointer = (dword *)&DAT_00007c60;\n  pre_startup();\n  relTablePointer = (Elf32_Rel *)&DAT_1fff0000;\n  while (relTablePointer < &stackVariable) {\n    relTablePointer->r_offset = 0xe7fee7fe;\n    relTablePointer = (Elf32_Rel *)((int)relTablePointer + 4);\n  }\n  relTablePointer = Elf32_Rel_ARRAY_1fff0200;\n  while (relTablePointer < (Elf32_Rel *)&DAT_1fff0350) {\n    relTablePointer->r_offset = *dataPointer;\n    dataPointer = dataPointer + 1;\n    relTablePointer = (Elf32_Rel *)&relTablePointer->r_info;\n  }\n  relTablePointer = (Elf32_Rel *)&DAT_1fff0350;\n  while (relTablePointer < (undefined4 *)0x1fff0df0) {\n    relTablePointer->r_offset = 0;\n    relTablePointer = (Elf32_Rel *)((int)relTablePointer + 4);\n  }\n  post_startup();\n  board_init();\n  __libc_init_array();\n  kernel_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000099c": "initialize_system_0000099c",
                "uStack_18": "stackVariable",
                "local_14": "stackPointer",
                "local_10": "dataPointer",
                "local_c": "relTablePointer"
            },
            "calling": [],
            "called": [
                "kernel_init",
                "board_init",
                "post_startup",
                "pre_startup",
                "__libc_init_array"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_00000a30",
            "code": "\nundefined * handle_nmi_00000a30(void)\n\n{\n  int input_register;\n  \n  trigger_panic(4,\"NMI HANDLER\");\n  return stack_pointer + -*(int *)(input_register + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_00000a30",
                "in_r3": "input_register",
                "core_panic": "trigger_panic",
                "&stack0xe000ffe0": "stack_pointer"
            },
            "calling": [],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_irq_and_return_interrupts_00000cc0",
            "code": "\nundefined4 disableIRQAndReturnInterrupts_00000cc0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 interruptsEnabled;\n  \n  core_panic(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_irq_and_return_interrupts_00000cc0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "dummy_handler"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_enabled_ir_qinterrupts_00000cd0",
            "code": "\nundefined4 checkEnabledIRQinterrupts_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)checkCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = checkIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_enabled_ir_qinterrupts_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled",
                "isCurrentModePrivileged": "checkCurrentModePrivileged",
                "isIRQinterruptsEnabled": "checkIRQinterruptsEnabled"
            },
            "calling": [
                "kernel_init",
                "kinetis_mcg_init",
                "core_panic",
                "pm_off",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock",
                "sched_task_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_enabled_00000cf0",
            "code": "\nundefined4 checkIRQinterruptsEnabled_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_enabled_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "cpu_switch_context_exit"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_privileged_00000d0c",
            "code": "\nvoid enableIRQinterruptsIfPrivileged_00000d0c(uint interruptFlags)\n\n{\n  bool isPrivileged;\n  \n  isPrivileged = (bool)isCurrentModePrivileged();\n  if (isPrivileged) {\n    enableIRQinterrupts((interruptFlags & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_privileged_00000d0c",
                "param_1": "interruptFlags",
                "bVar1": "isPrivileged"
            },
            "calling": [
                "kinetis_mcg_init",
                "thread_create",
                "_sbrk_r",
                "_mutex_lock",
                "mutex_unlock"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "sched_switch"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_sum_with_shift_00000d44",
            "code": "\nint calculateSumWithShift_00000d44(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_sum_with_shift_00000d44",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "bit_clear32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "clear_sum_00000d76",
            "code": "\nvoid clearSum_00000d76(undefined4 inputValue,undefined inputFlag)\n\n{\n  undefined4 *sumPointer;\n  \n  sumPointer = (undefined4 *)calculate_sum_with_shift_00000d44(inputValue,inputFlag);\n  *sumPointer = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "clear_sum_00000d76",
                "param_1": "inputValue",
                "param_2": "inputFlag",
                "puVar1": "sumPointer"
            },
            "calling": [
                "cpu_errata_fixes"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "clear_bit_00000d9c",
            "code": "\nvoid clearBit_00000d9c(void)\n\n{\n  bit_clear32(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "clear_bit_00000d9c"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [
                "bit_clear32"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "disable_watchdog_and_fix_cpu_errata_00000db0",
            "code": "\nvoid disable_watchdog_and_fix_cpu_errata_00000db0(void)\n\n{\n  wdog_disable();\n  cpu_errata_fixes();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "disable_watchdog_and_fix_cpu_errata_00000db0"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "wdog_disable",
                "cpu_errata_fixes"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "execute_default_dummy_handler_00000dc0",
            "code": "\nvoid execute_default_dummy_handler_00000dc0(void)\n\n{\n  dummy_handler();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "execute_default_dummy_handler_00000dc0",
                "dummy_handler_default": "dummy_handler"
            },
            "calling": [],
            "called": [
                "dummy_handler_default"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_data_00000dcc",
            "code": "\n\n\nvoid initializeData_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_data_00000dcc"
            },
            "calling": [
                "pre_startup"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_uart_00000df4",
            "code": "\nvoid initialize_uart_00000df4(void)\n\n{\n  uart_init(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_uart_00000df4"
            },
            "calling": [
                "_init"
            ],
            "called": [
                "uart_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "read_from_isrpipe_00000e14",
            "code": "\nundefined4 read_from_isrpipe_00000e14(undefined4 buffer,undefined4 size)\n\n{\n  undefined4 read_status;\n  \n  read_status = isrpipe_read(0x1fff0204,buffer,size);\n  return read_status;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "read_from_isrpipe_00000e14",
                "param_1": "buffer",
                "param_2": "size",
                "uVar1": "read_status"
            },
            "calling": [
                "_read_r"
            ],
            "called": [
                "isrpipe_read"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "write_data_to_uart_00000e38",
            "code": "\nundefined4 write_data_to_uart_00000e38(undefined4 data,undefined4 length)\n\n{\n  uart_write(0,data,length);\n  return length;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "write_data_to_uart_00000e38",
                "param_1": "data",
                "param_2": "length"
            },
            "calling": [
                "__swrite"
            ],
            "called": [
                "uart_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "disable_irq_and_loop_00000e58",
            "code": "\nvoid disable_irq_and_loop_00000e58(void)\n\n{\n  irq_disable();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "disable_irq_and_loop_00000e58"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_peripherals_00000e64",
            "code": "\n\n\nvoid initialize_peripherals_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initialize_cpu();\n  initialize_gpio_pin(0x2056,0x80);\n  initialize_gpio_pin(0x511a,0x80);\n  initialize_gpio_pin(0x2055,0x80);\n  set_gpio_pin(0x2056);\n  set_gpio_pin(0x511a);\n  set_gpio_pin(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_peripherals_00000e64",
                "cpu_init": "initialize_cpu",
                "gpio_init": "initialize_gpio_pin",
                "gpio_set": "set_gpio_pin"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "gpio_init",
                "gpio_set",
                "cpu_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "print_debug_message_00000ed8",
            "code": "\nvoid printDebugMessage_00000ed8(void)\n\n{\n  undefined4 inputValue;\n  \n  iprintf(&DAT_00006f58,inputValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "print_debug_message_00000ed8",
                "in_lr": "inputValue"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_panic_00000f04",
            "code": "\nvoid handle_panic_00000f04(char panic_type,undefined4 panic_message)\n\n{\n  undefined4 stack_size;\n  code *jump_table;\n  undefined4 panic_message_copy;\n  char panic_type_copy;\n  \n  panic_message_copy = panic_message;\n  panic_type_copy = panic_type;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_type == '\\x03') {\n      cpu_print_last_instruction();\n    }\n    iprintf(\"*** RIOT kernel panic:\\n%s\\n\\n\",panic_message_copy);\n    ps();\n    iprintf(&DAT_00006f78);\n    iprintf(\"*** halted.\\n\\n\");\n  }\n  irq_disable();\n  panic_arch();\n  jump_table = (code *)0xf4d;\n  pm_off();\n  stack_size = (int)&stack_size + 1;\n  auto_init();\n  iprintf(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  main();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_panic_00000f04",
                "param_1": "panic_type",
                "param_2": "panic_message",
                "uStack_18": "stack_size",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "local_10": "panic_message_copy",
                "local_9": "panic_type_copy"
            },
            "calling": [
                "dummy_handler_default",
                "uart_init",
                "cib_init",
                "nmi_default",
                "fmt_s32_dfp",
                "thread_add_to_list"
            ],
            "called": [
                "cpu_print_last_instruction",
                "iprintf",
                "panic_arch",
                "pm_off",
                "ps",
                "main",
                "auto_init",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_system_00000f8c",
            "code": "\nvoid initializeSystem_00000f8c(void)\n\n{\n  uint contextSwitchValue;\n  undefined4 *memoryPointer;\n  uint threadCount;\n  int stackValue;\n  int *stackPointer;\n  undefined4 cpuSwitchValue;\n  undefined4 threadPriority;\n  undefined4 threadStackSize;\n  dword elfInfo;\n  \n  irq_disable();\n  elfInfo = elfRelArray[3].r_info;\n  threadStackSize = 0;\n  threadPriority = 0xf81;\n  thread_create(&DAT_1fff0a6c,0x100,0xf,0xc);\n  elfInfo = elfRelArray[3].r_offset;\n  threadStackSize = 0;\n  threadPriority = 0xf5d;\n  threadCount = 0xc;\n  thread_create(&DAT_1fff046c,0x600,7);\n  cpuSwitchValue = 0xfd3;\n  contextSwitchValue = cpu_switch_context_exit();\n  contextSwitchValue = contextSwitchValue >> 0x1e;\n  memoryPointer = (undefined4 *)(threadCount * 0x100);\n  stackValue = (threadCount >> 0x1d) << 0x11;\n  stackPointer = &stackValue;\n  if ((contextSwitchValue & contextSwitchValue - 1) != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *memoryPointer = 0;\n  memoryPointer[1] = 0;\n  memoryPointer[2] = contextSwitchValue - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_system_00000f8c",
                "uVar1": "contextSwitchValue",
                "puVar2": "memoryPointer",
                "uVar3": "threadCount",
                "iStack_24": "stackValue",
                "piStack_20": "stackPointer",
                "uStack_1c": "cpuSwitchValue",
                "local_18": "threadPriority",
                "local_14": "threadStackSize",
                "local_10": "elfInfo",
                "Elf32_Rel_ARRAY_1fff0200": "elfRelArray"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "thread_create",
                "irq_disable",
                "cpu_switch_context_exit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_bitmask_00000fec",
            "code": "\nvoid initialize_bitmask_00000fec(undefined4 *bitmask,uint size_of_bitmask)\n\n{\n  if ((size_of_bitmask & size_of_bitmask - 1) != 0) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  *bitmask = 0;\n  bitmask[1] = 0;\n  bitmask[2] = size_of_bitmask - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_bitmask_00000fec",
                "param_1": "bitmask",
                "param_2": "size_of_bitmask",
                "param_1[1]": "bitmask[1]",
                "param_1[2]": "bitmask[2]"
            },
            "calling": [
                "thread_create"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_insert_point_00001034",
            "code": "\nvoid find_insert_point_00001034(int **list_of_pointers,int target_value)\n\n{\n  int **current_ptr;\n  \n  if (8 < *(byte *)(target_value + 4)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  for (current_ptr = list_of_pointers;\n      (*current_ptr != (int *)0x0 && (*(byte *)((int)*current_ptr + -3) <= *(byte *)(target_value + 5)));\n      current_ptr = (int **)*current_ptr) {\n  }\n  *(int **)(target_value + 8) = *current_ptr;\n  *current_ptr = (int *)(int **)(target_value + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_insert_point_00001034",
                "param_1": "list_of_pointers",
                "param_2": "target_value",
                "local_1c": "current_ptr"
            },
            "calling": [
                "_mutex_lock"
            ],
            "called": [
                "core_panic"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "count_consecutive_pointers_000010a0",
            "code": "\nint count_consecutive_pointers_000010a0(int *array_ptr)\n\n{\n  int *current_ptr;\n  \n  for (current_ptr = array_ptr; (int *)*current_ptr == current_ptr; current_ptr = current_ptr + 1) {\n  }\n  return (int)current_ptr - (int)array_ptr;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "count_consecutive_pointers_000010a0",
                "param_1": "array_ptr",
                "local_c": "current_ptr"
            },
            "calling": [
                "ps"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_thread_000010d4",
            "code": "\nint initializeThread_000010d4(uint memoryStart,int memorySize,byte byteCount,uint flag,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 irqDisabled;\n  undefined4 stackInitResult;\n  int returnValue;\n  uint alignedMemorySize;\n  undefined4 *threadDataPtr;\n  int adjustedMemorySize;\n  uint adjustedMemoryStart;\n  uint loopCounter;\n  short loopIndex1;\n  short loopIndex2;\n  \n  if (byteCount < 0x10) {\n    adjustedMemorySize = memorySize;\n    adjustedMemoryStart = memoryStart;\n    if ((memoryStart & 3) != 0) {\n      adjustedMemorySize = 4 - (memoryStart & 3);\n      adjustedMemoryStart = adjustedMemorySize + memoryStart;\n      adjustedMemorySize = memorySize - adjustedMemorySize;\n    }\n    alignedMemorySize = adjustedMemorySize - 0x30U & 0xfffffffc;\n    threadDataPtr = (undefined4 *)(alignedMemorySize + adjustedMemoryStart);\n    if ((flag & 8) == 0) {\n      *(uint *)adjustedMemoryStart = adjustedMemoryStart;\n    }\n    else {\n      for (loopCounter = adjustedMemoryStart; loopCounter < alignedMemorySize + adjustedMemoryStart; loopCounter = loopCounter + 4) {\n        *(uint *)loopCounter = loopCounter;\n      }\n    }\n    irqDisabled = irq_disable();\n    loopIndex2 = 0;\n    for (loopIndex1 = 1; loopIndex1 < 0x21; loopIndex1 = loopIndex1 + 1) {\n      if (*(int *)(&DAT_1fff0358 + loopIndex1 * 4) == 0) {\n        loopIndex2 = loopIndex1;\n        break;\n      }\n    }\n    if (loopIndex2 == 0) {\n      irq_restore(irqDisabled);\n      returnValue = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + loopIndex2 * 4) = threadDataPtr;\n      *(short *)((int)threadDataPtr + 6) = loopIndex2;\n      stackInitResult = thread_stack_init(param5,param6,adjustedMemoryStart,alignedMemorySize);\n      *threadDataPtr = stackInitResult;\n      threadDataPtr[9] = adjustedMemoryStart;\n      threadDataPtr[0xb] = memorySize;\n      threadDataPtr[10] = param7;\n      *(byte *)((int)threadDataPtr + 5) = byteCount;\n      *(undefined *)(threadDataPtr + 1) = 0;\n      threadDataPtr[2] = 0;\n      threadDataPtr[3] = 0;\n      threadDataPtr[4] = 0;\n      cib_init(threadDataPtr + 5,0);\n      threadDataPtr[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flag & 1) == 0) {\n        sched_set_status(threadDataPtr,10);\n        if ((flag & 4) == 0) {\n          irq_restore(irqDisabled);\n          sched_switch(byteCount);\n          return (int)loopIndex2;\n        }\n      }\n      else {\n        sched_set_status(threadDataPtr,1);\n      }\n      irq_restore(irqDisabled);\n      returnValue = (int)loopIndex2;\n    }\n  }\n  else {\n    returnValue = -0x16;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_thread_000010d4",
                "param_1": "memoryStart",
                "param_2": "memorySize",
                "param_3": "byteCount",
                "param_4": "flag",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "irqDisabled",
                "uVar2": "stackInitResult",
                "iVar3": "returnValue",
                "uVar4": "alignedMemorySize",
                "puVar5": "threadDataPtr",
                "local_30": "adjustedMemorySize",
                "local_2c": "adjustedMemoryStart",
                "local_10": "loopCounter",
                "local_c": "loopIndex1",
                "local_a": "loopIndex2"
            },
            "calling": [
                "kernel_init"
            ],
            "called": [
                "thread_stack_init",
                "sched_set_status",
                "cib_init",
                "irq_restore",
                "sched_switch",
                "irq_disable"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initialize_system_00001274(void)\n\n{\n  initialize_cortexm();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_kinetis_mcg();\n  initialize_peripherals();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274",
                "cortexm_init": "initialize_cortexm",
                "kinetis_mcg_init": "initialize_kinetis_mcg",
                "periph_init": "initialize_peripherals"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "kinetis_mcg_init",
                "cortexm_init",
                "periph_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "lock_mutex_0000129c",
            "code": "\nvoid lockMutex_0000129c(undefined4 mutex)\n\n{\n  lock(mutex,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "lock_mutex_0000129c",
                "param_1": "mutex",
                "_mutex_lock": "lock"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "unlock_and_increment_000012b4",
            "code": "\nundefined4 unlock_and_increment_000012b4(int mutex_handle,undefined unknown_data)\n\n{\n  undefined4 result;\n  \n  result = tsrb_add_one(mutex_handle + 4,unknown_data);\n  mutex_unlock(mutex_handle);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "unlock_and_increment_000012b4",
                "param_1": "mutex_handle",
                "param_2": "unknown_data",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "mutex_unlock",
                "tsrb_add_one"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "wait_for_data_000012e2",
            "code": "\nint waitForData_000012e2(int dataBuffer,undefined4 offset,undefined4 length)\n\n{\n  int returnValue;\n  \n  while( true ) {\n    returnValue = tsrb_get(dataBuffer + 4,offset,length);\n    if (returnValue != 0) break;\n    mutex_lock(dataBuffer);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "wait_for_data_000012e2",
                "param_1": "dataBuffer",
                "param_2": "offset",
                "param_3": "length",
                "iVar1": "returnValue"
            },
            "calling": [
                "uart_stdio_read"
            ],
            "called": [
                "tsrb_get",
                "mutex_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "inputByte"
            },
            "calling": [
                "uart_init_uart"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_yield_00001348",
            "code": "\nvoid checkAndYield_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_yield_00001348"
            },
            "calling": [
                "irq_handler_uart"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_new_value_00001360",
            "code": "\nint calculateNewValue_00001360(uint originalValue,int multiplier)\n\n{\n  return multiplier * 4 + (originalValue & 0xf0000000 | (originalValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_new_value_00001360",
                "param_1": "originalValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_new_value_to_flag_00001392",
            "code": "\nvoid setNewValueToFlag_00001392(undefined4 oldValue,undefined flagValue)\n\n{\n  undefined4 *newFlagPtr;\n  \n  newFlagPtr = (undefined4 *)calculate_new_value_00001360(oldValue,flagValue);\n  *newFlagPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_new_value_to_flag_00001392",
                "param_1": "oldValue",
                "param_2": "flagValue",
                "puVar1": "newFlagPtr"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "initialize_uart_000013b8",
            "code": "\nundefined4 initialize_UART_000013b8(int device_id,undefined4 uart_config,undefined4 pin_config,undefined4 flag_value)\n\n{\n  undefined4 result;\n  \n  if (device_id != 0) {\n    handle_assertion_failure(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + device_id * 8) = pin_config;\n  *(undefined4 *)(&DAT_1fff0b70 + device_id * 8) = flag_value;\n  initialize_UART_000013b8_pins(device_id);\n  set_new_flag_value(*(undefined4 *)(&DAT_00006ffc + device_id * 0x20),\n               *(undefined *)(device_id * 0x20 + 0x7000));\n  if ((&DAT_00007002)[device_id * 0x20] == '\\0') {\n    initialize_UART_000013b8_function(device_id,uart_config);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "initialize_uart_000013b8",
                "param_1": "device_id",
                "param_2": "uart_config",
                "param_3": "pin_config",
                "param_4": "flag_value",
                "uVar1": "result",
                "core_panic": "handle_assertion_failure",
                "uart_init_pins": "initialize_UART_pins",
                "set_new_value_to_flag_00001392": "set_new_flag_value",
                "uart_init_uart": "initialize_UART_function"
            },
            "calling": [
                "uart_stdio_init"
            ],
            "called": [
                "FUN_00001392",
                "core_panic",
                "uart_init_uart",
                "uart_init_pins"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "initialize_gpio_ports_00001448",
            "code": "\nvoid initializeGpioPorts_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    gpio_init_port(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                   *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "initialize_gpio_ports_00001448",
                "param_1": "index"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "gpio_init_port"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_memory_values_000014c4",
            "code": "\nvoid updateMemoryValues_000014c4(int index,uint value)\n\n{\n  byte *bytePtr;\n  uint uintVar1;\n  uint uintVar2;\n  \n  bytePtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  uintVar1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  bytePtr[3] = bytePtr[3] & 0xf3;\n  bytePtr[2] = (&DAT_00007001)[index * 0x20];\n  uintVar2 = uintVar1 / (value << 4);\n  *bytePtr = (byte)(uintVar2 >> 8) & 0x1f;\n  bytePtr[1] = (byte)uintVar2;\n  bytePtr[10] = (byte)((uintVar1 << 2) / value + 1 >> 1) & 0x1f;\n  bytePtr[0x10] = bytePtr[0x10] | 0x88;\n  if ((bytePtr[0x10] & 0x70) == 0) {\n    bytePtr[0x13] = 0;\n  }\n  else {\n    bytePtr[0x13] = (char)(2 << (bytePtr[0x10] >> 4 & 7)) - 1;\n  }\n  bytePtr[0x15] = 1;\n  bytePtr[0x11] = 0xc0;\n  bytePtr[3] = bytePtr[3] | 0x2c;\n  set_bit_in_memory_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_memory_values_000014c4",
                "param_1": "index",
                "param_2": "value",
                "pbVar1": "bytePtr",
                "uVar2": "uintVar1",
                "uVar3": "uintVar2"
            },
            "calling": [
                "uart_init"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_to_memory_000015d0",
            "code": "\nvoid copy_data_to_memory_000015d0(int index,int source_address,uint length)\n\n{\n  int data_address;\n  uint counter;\n  \n  data_address = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(data_address + 4));\n    *(undefined *)(data_address + 7) = *(undefined *)(counter + source_address);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_to_memory_000015d0",
                "param_1": "index",
                "param_2": "source_address",
                "param_3": "length",
                "iVar1": "data_address",
                "local_c": "counter"
            },
            "calling": [
                "uart_stdio_write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_if_condition_met_00001628",
            "code": "\nvoid executeFunctionIfConditionMet_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  checkAndYield();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_if_condition_met_00001628",
                "param_1": "index",
                "check_and_yield_00001348": "checkAndYield"
            },
            "calling": [
                "isr_uart0_rx_tx"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_uart_irq_handler_00001688",
            "code": "\nvoid initialize_uart_irq_handler_00001688(void)\n\n{\n  handle_uart_irq(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_uart_irq_handler_00001688",
                "irq_handler_uart": "handle_uart_irq"
            },
            "calling": [],
            "called": [
                "irq_handler_uart"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_new_value_00001696",
            "code": "\nint calculateNewValue_00001696(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_new_value_00001696",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016c8",
                "bit_clear8",
                "bit_set8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_new_value_000016c8",
            "code": "\nvoid setNewValue_000016c8(undefined4 input1,undefined input2)\n\n{\n  undefined4 *newValuePointer;\n  \n  newValuePointer = (undefined4 *)calculate_new_value_00001696(input1,input2);\n  *newValuePointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_new_value_000016c8",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "newValuePointer"
            },
            "calling": [
                "kinetis_mcg_init_erclk32k"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_new_value_to_pointer_000016ec",
            "code": "\nvoid setNewValueToPointer_000016ec(undefined4 inputPointer,undefined inputValue)\n\n{\n  undefined *newPointer;\n  \n  newPointer = (undefined *)calculate_new_value_00001696(inputPointer,inputValue);\n  *newPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_new_value_to_pointer_000016ec",
                "param_1": "inputPointer",
                "param_2": "inputValue",
                "puVar1": "newPointer"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 arg1,undefined arg2)\n\n{\n  undefined *ptrToNewValue;\n  \n  ptrToNewValue = (undefined *)calculate_new_value_00001696(arg1,arg2);\n  *ptrToNewValue = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "arg1",
                "param_2": "arg2",
                "puVar1": "ptrToNewValue"
            },
            "calling": [
                "kinetis_mcg_init_mcgirclk",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_disable_pll",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_bit_6_00001734",
            "code": "\nvoid clear_bit_6_00001734(void)\n\n{\n  bit_clear8(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_bit_6_00001734"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_blpi"
            ],
            "called": [
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "combine_flags_00001748",
            "code": "\nvoid combineFlags_00001748(byte inputFlag)\n\n{\n  DAT_40064003 = inputFlag | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "combine_flags_00001748",
                "param_1": "inputFlag"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_safe_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "initialize_bit_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid initializeBit_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clearBit(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "initialize_bit_00001778",
                "bit_clear8": "clearBit"
            },
            "calling": [
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fee"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_hardware_000017dc",
            "code": "\n\n\nvoid initializeHardware_000017dc(void)\n\n{\n  set_new_value_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_hardware_000017dc"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_registers_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeRegisters_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  bit_set8(&DAT_40064001,0);\n  bit_clear8(&DAT_40064000,1);\n  bit_clear8(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_registers_0000182c"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initializeSystem_000018bc(void)\n\n{\n  kinetis_mcg_set_fll_factor(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  bit_clear8(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "bit_clear8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_system_0000191c",
            "code": "\nvoid initialize_system_0000191c(void)\n\n{\n  enable_system_oscillator();\n  set_fll_factor(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_system_0000191c",
                "kinetis_mcg_enable_osc": "enable_system_oscillator",
                "kinetis_mcg_set_fll_factor": "set_fll_factor"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  kinetis_mcg_set_fll_factor(0xa0);\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_system_000019c0",
            "code": "\nvoid initialize_system_000019c0(void)\n\n{\n  enable_system_oscillator();\n  set_fll_factor(0x40);\n  clear_bit8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  disable_pll();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_system_000019c0",
                "kinetis_mcg_enable_osc": "enable_system_oscillator",
                "kinetis_mcg_set_fll_factor": "set_fll_factor",
                "bit_clear8": "clear_bit8",
                "kinetis_mcg_disable_pll": "disable_pll"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor",
                "kinetis_mcg_enable_osc",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initializeSystem_00001a18(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disablePLL();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18",
                "kinetis_mcg_disable_pll": "disablePLL"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_system_00001a3c",
            "code": "\nvoid initialize_system_00001a3c(void)\n\n{\n  bit_set8(&DAT_40064001,1);\n  disable_pll();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_system_00001a3c",
                "kinetis_mcg_disable_pll": "disable_pll"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_set8",
                "kinetis_mcg_disable_pll"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_controller_00001a60",
            "code": "\nvoid initializeController_00001a60(void)\n\n{\n  bit_clear8(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  bit_set8(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_controller_00001a60"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [
                "bit_clear8",
                "bit_set8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "kinetis_mcg_set_mode"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "configure_clock_source_00001b10",
            "code": "\nundefined4 configureClockSource_00001b10(byte clockSource)\n\n{\n  undefined4 result;\n  \n  if (clockSource < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)clockSource + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        kinetis_mcg_set_fei();\n        break;\n      case 1:\n        kinetis_mcg_set_fee();\n        break;\n      case 2:\n        kinetis_mcg_set_fbi();\n        break;\n      case 3:\n        kinetis_mcg_set_fbe();\n        break;\n      case 4:\n        kinetis_mcg_set_blpi();\n        break;\n      case 5:\n        kinetis_mcg_set_blpe();\n        break;\n      case 6:\n        kinetis_mcg_set_pbe();\n        break;\n      case 7:\n        kinetis_mcg_set_pee();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (clockSource != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "configure_clock_source_00001b10",
                "param_1": "clockSource",
                "uVar1": "result"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "kinetis_mcg_set_pee",
                "kinetis_mcg_set_fbe",
                "kinetis_mcg_set_fei",
                "kinetis_mcg_set_pbe",
                "kinetis_mcg_set_fbi",
                "kinetis_mcg_set_blpe",
                "kinetis_mcg_set_fee",
                "kinetis_mcg_set_blpi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_system_00001bb8",
            "code": "\nvoid initializeSystem_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    bit_clear8(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    bit_clear8(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  setFLLFactor(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_system_00001bb8",
                "kinetis_mcg_set_fll_factor": "setFLLFactor"
            },
            "calling": [
                "kinetis_mcg_init"
            ],
            "called": [
                "bit_clear8",
                "kinetis_mcg_set_fll_factor"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 irqFlag;\n  \n  irqFlag = disableInterrupts();\n  setSafeMode();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  initializeMCGIRCLK();\n  initializeERCLK32K();\n  setMode(7);\n  restoreInterrupts(irqFlag);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "irqFlag",
                "kinetis_mcg_set_safe_mode": "setSafeMode",
                "kinetis_mcg_init_mcgirclk": "initializeMCGIRCLK",
                "kinetis_mcg_init_erclk32k": "initializeERCLK32K",
                "kinetis_mcg_set_mode": "setMode",
                "irq_disable": "disableInterrupts",
                "irq_restore": "restoreInterrupts"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "kinetis_mcg_init_mcgirclk",
                "irq_restore",
                "irq_disable",
                "kinetis_mcg_set_mode",
                "kinetis_mcg_set_safe_mode",
                "kinetis_mcg_init_erclk32k"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_yield_00001cf0",
            "code": "\nvoid check_and_yield_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_yield_00001cf0",
                "thread_yield_higher": "yield_higher"
            },
            "calling": [
                "irq_handler"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_adjusted_value_00001d08",
            "code": "\nint calculateAdjustedValue_00001d08(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_adjusted_value_00001d08",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "bit_set32"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_bit_to1_00001d3a",
            "code": "\nvoid setBitTo1_00001d3a(undefined4 bitFieldAddress,undefined bitPosition)\n\n{\n  undefined4 *bitFieldPointer;\n  \n  bitFieldPointer = (undefined4 *)bitband_addr(bitFieldAddress,bitPosition);\n  *bitFieldPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_bit_to1_00001d3a",
                "param_1": "bitFieldAddress",
                "param_2": "bitPosition",
                "puVar1": "bitFieldPointer"
            },
            "calling": [
                "clk_en"
            ],
            "called": [
                "bitband_addr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "extract_bits_00001d5e",
            "code": "\nuint extractBits_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "extract_bits_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_00001d80",
            "code": "\nuint applyMask_00001d80(ushort input)\n\n{\n  return input & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_00001d80",
                "param_1": "input"
            },
            "calling": [
                "gpio_init",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort inputValue)\n\n{\n  return inputValue >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init_port",
                "clk_en"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "truncate_to_six_bits_00001dc0",
            "code": "\nushort truncateToSixBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "truncate_to_six_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "gpio_init",
                "gpio_init_port",
                "gpio_set"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "set_bit_in_port_num_00001ddc",
            "code": "\nvoid setBitInPortNum_00001ddc(undefined2 portNumber)\n\n{\n  char calculatedPortNum;\n  \n  calculatedPortNum = port_num(portNumber);\n  bit_set32(&DAT_40048038,calculatedPortNum + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "set_bit_in_port_num_00001ddc",
                "param_1": "portNumber",
                "cVar1": "calculatedPortNum"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "bit_set32",
                "port_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extract_bits_00001e0c(int offset,uint data)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)data >> 3) + offset * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "data"
            },
            "calling": [
                "irq_handler",
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_data_00001e44",
            "code": "\nvoid updateData_00001e44(int dataOffset,uint bitPosition,int newValue)\n\n{\n  int shiftedPosition;\n  \n  shiftedPosition = (int)bitPosition >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedPosition + dataOffset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedPosition + dataOffset * 4) * 4) & ~(0xf << ((bitPosition & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedPosition + dataOffset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedPosition + dataOffset * 4) * 4) | newValue << ((bitPosition & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_data_00001e44",
                "param_1": "dataOffset",
                "param_2": "bitPosition",
                "param_3": "newValue",
                "iVar1": "shiftedPosition"
            },
            "calling": [
                "ctx_clear"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "write_ctx_map_00001ec4",
            "code": "\nvoid write_ctx_map_00001ec4(undefined4 ctx_param,undefined4 map_param)\n\n{\n  undefined4 ctx_value;\n  \n  ctx_value = get_ctx(ctx_param,map_param);\n  write_map(ctx_param,map_param,ctx_value);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "write_ctx_map_00001ec4",
                "param_1": "ctx_param",
                "param_2": "map_param",
                "uVar1": "ctx_value"
            },
            "calling": [
                "gpio_init_port"
            ],
            "called": [
                "get_ctx",
                "write_map"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "set_gpio_status_00001eea",
            "code": "\nundefined4 set_gpio_status_00001eea(undefined2 port_handle,byte pin_status)\n\n{\n  uint pin_number;\n  int gpio_base_address;\n  int pin_index;\n  \n  gpio_init_port(port_handle,0);\n  if ((char)pin_status < '\\0') {\n    pin_number = pin_num(port_handle);\n    gpio_base_address = gpio(port_handle);\n    *(uint *)(gpio_base_address + 0x14) = *(uint *)(gpio_base_address + 0x14) | 1 << (pin_number & 0xff);\n  }\n  else {\n    pin_number = pin_num(port_handle);\n    gpio_base_address = gpio(port_handle);\n    *(uint *)(gpio_base_address + 0x14) = *(uint *)(gpio_base_address + 0x14) & ~(1 << (pin_number & 0xff));\n  }\n  gpio_base_address = port(port_handle);\n  pin_index = pin_num(port_handle);\n  *(uint *)(gpio_base_address + pin_index * 4) = pin_status & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "set_gpio_status_00001eea",
                "param_1": "port_handle",
                "param_2": "pin_status",
                "uVar1": "pin_number",
                "iVar2": "gpio_base_address",
                "iVar3": "pin_index"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "port",
                "gpio_init_port",
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_pin_value_00001f80",
            "code": "\nvoid updatePinValue_00001f80(undefined2 device,undefined4 new_value)\n\n{\n  int port_address;\n  int pin_number;\n  undefined4 port_number;\n  undefined4 pin_number2;\n  uint previous_value;\n  \n  clk_en(device);\n  port_address = port(device);\n  pin_number = pin_num(device);\n  previous_value = *(uint *)(port_address + pin_number * 4);\n  port_address = port(device);\n  pin_number = pin_num(device);\n  *(undefined4 *)(port_address + pin_number * 4) = new_value;\n  if ((previous_value & 0xf0000) != 0) {\n    port_number = port_num(device);\n    pin_number2 = pin_num(device);\n    ctx_clear(port_number,pin_number2);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_pin_value_00001f80",
                "param_1": "device",
                "param_2": "new_value",
                "iVar1": "port_address",
                "iVar2": "pin_number",
                "uVar3": "port_number",
                "uVar4": "pin_number2",
                "uVar5": "previous_value"
            },
            "calling": [
                "gpio_init",
                "uart_init_pins"
            ],
            "called": [
                "port",
                "clk_en",
                "port_num",
                "ctx_clear",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_gpio_direction_00001ff6",
            "code": "\nvoid setGPIODirection_00001ff6(undefined2 pin)\n\n{\n  uint pin_number;\n  int gpio_base_address;\n  \n  pin_number = pin_num(pin);\n  gpio_base_address = gpio(pin);\n  *(int *)(gpio_base_address + 4) = 1 << (pin_number & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_gpio_direction_00001ff6",
                "param_1": "pin",
                "uVar1": "pin_number",
                "iVar2": "gpio_base_address"
            },
            "calling": [
                "board_init"
            ],
            "called": [
                "gpio",
                "pin_num"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_bitmask_00002028",
            "code": "\nvoid process_bitmask_00002028(int base_address,undefined4 context_param)\n\n{\n  int context_index;\n  uint bitmask;\n  uint bit_position;\n  \n  bitmask = *(uint *)(base_address + 0xa0);\n  for (bit_position = 0; (int)bit_position < 0x20; bit_position = bit_position + 1) {\n    if (((bitmask & 1 << (bit_position & 0xff)) != 0) &&\n       ((*(uint *)(base_address + bit_position * 4) & 0xf0000) != 0)) {\n      *(int *)(base_address + 0xa0) = 1 << (bit_position & 0xff);\n      context_index = get_ctx(context_param,bit_position);\n      (**(code **)(&DAT_1fff0b78 + context_index * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + context_index * 0xc));\n    }\n  }\n  check_and_yield_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_bitmask_00002028",
                "param_1": "base_address",
                "param_2": "context_param",
                "iVar1": "context_index",
                "uVar2": "bitmask",
                "local_c": "bit_position"
            },
            "calling": [
                "isr_portd",
                "isr_porta",
                "isr_porte",
                "isr_portb",
                "isr_portc"
            ],
            "called": [
                "get_ctx",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "disable_irq_handler_000020b8",
            "code": "\nvoid disableIRQHandler_000020b8(void)\n\n{\n  irq_handler(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "disable_irq_handler_000020b8"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_irq_000020cc",
            "code": "\nvoid initializeIRQ_000020cc(void)\n\n{\n  handleIRQ(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_irq_000020cc",
                "irq_handler": "handleIRQ"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_irq_handler_000020e0",
            "code": "\nvoid initializeIRQHandler_000020e0(void)\n\n{\n  irq_handler(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_irq_handler_000020e0"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_irq_handler_000020f4",
            "code": "\nvoid initializeIRQHandler_000020f4(void)\n\n{\n  irq_handler(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_irq_handler_000020f4"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_interrupt_00002108",
            "code": "\nvoid initializeInterrupt_00002108(void)\n\n{\n  handleIRQ(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_interrupt_00002108",
                "irq_handler": "handleIRQ"
            },
            "calling": [],
            "called": [
                "irq_handler"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "FUNC_0000211c",
            "code": "\nvoid FUNC_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  iprintf(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",&DAT_000070b8,\n          \"state\");\n  local_20 = thread_isr_stack_usage();\n  local_24 = thread_isr_stack_start();\n  local_28 = thread_isr_stack_pointer();\n  iprintf(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n          local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = thread_measure_stack_free(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      iprintf(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n              (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n              *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  iprintf(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,&DAT_00007190,\n          local_14,local_18);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "FUNC_0000211c"
            },
            "calling": [
                "core_panic",
                "_ps_handler"
            ],
            "called": [
                "iprintf",
                "thread_isr_stack_start",
                "thread_isr_stack_usage",
                "thread_isr_stack_pointer",
                "thread_measure_stack_free"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_and_return_00002270",
            "code": "\nundefined checkEqualityAndReturn_00002270(int input)\n\n{\n  undefined uVar1;\n  int value1;\n  bool isEqual;\n  \n  value1 = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value1;\n  if (isEqual) {\n    value1 = 1;\n  }\n  uVar1 = (undefined)value1;\n  if (!isEqual) {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_and_return_00002270",
                "param_1": "input",
                "iVar2": "value1",
                "bVar3": "isEqual"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_difference_00002294",
            "code": "\nundefined checkDifference_00002294(int input)\n\n{\n  undefined result;\n  int difference;\n  bool isCorrect;\n  \n  difference = *(int *)(input + 4);\n  isCorrect = *(int *)(input + 0xc) - *(int *)(input + 8) == difference;\n  if (isCorrect) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!isCorrect) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_difference_00002294",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "difference",
                "bVar3": "isCorrect"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "update_pointer_value_000022be",
            "code": "\nvoid updatePointerValue_000022be(int *pointerArray,undefined newValue)\n\n{\n  uint currentValue;\n  \n  currentValue = originalValue;\n  originalValue = currentValue + 1;\n  *(undefined *)((currentValue & pointerArray[1] - 1U) + *pointerArray) = newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "update_pointer_value_000022be",
                "param_1": "pointerArray",
                "param_2": "newValue",
                "uVar1": "currentValue",
                "param_1[3]": "originalValue"
            },
            "calling": [
                "tsrb_add_one"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "increment_and_read_memory_000022f0",
            "code": "\nundefined incrementAndReadMemory_000022f0(int *memory)\n\n{\n  uint currentValue;\n  \n  currentValue = memory[2];\n  memory[2] = currentValue + 1;\n  return *(undefined *)((currentValue & memory[1] - 1U) + *memory);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "increment_and_read_memory_000022f0",
                "param_1": "memory",
                "uVar1": "currentValue",
                "param_1[2]": "memory[2]",
                "param_1[1]": "memory[1]"
            },
            "calling": [
                "tsrb_get"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_data_0000231c",
            "code": "\nint copyData_0000231c(undefined4 src,undefined *dst,int size)\n\n{\n  undefined temp;\n  int empty;\n  undefined *dstPtr;\n  int remainingSize;\n  \n  dstPtr = dst;\n  remainingSize = size;\n  while ((remainingSize != 0 && (empty = tsrb_empty(src), empty == 0))) {\n    temp = _pop(src);\n    *dstPtr = temp;\n    remainingSize = remainingSize + -1;\n    dstPtr = dstPtr + 1;\n  }\n  return size - remainingSize;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_data_0000231c",
                "param_1": "src",
                "param_2": "dst",
                "param_3": "size",
                "uVar1": "temp",
                "iVar2": "empty",
                "local_20": "dstPtr",
                "local_14": "remainingSize"
            },
            "calling": [
                "isrpipe_read"
            ],
            "called": [
                "_pop",
                "tsrb_empty"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "FUNC_00002364",
            "code": "\nundefined4 FUNC_00002364(undefined4 param_1,undefined param_2)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  \n  iVar1 = tsrb_full(param_1);\n  if (iVar1 == 0) {\n    _push(param_1,param_2);\n    uVar2 = 0;\n  }\n  else {\n    uVar2 = 0xffffffff;\n  }\n  return uVar2;\n}\n\n",
            "renaming": {
                "FUN_00002364": "FUNC_00002364"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "_push",
                "tsrb_full"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_real_time_clock_00002396",
            "code": "\nvoid initialize_real_time_clock_00002396(void)\n\n{\n  rtc_init();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_real_time_clock_00002396"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "rtc_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "run_shell_and_interrupt_000023a4",
            "code": "\nundefined4 run_shell_and_interrupt_000023a4(void)\n\n{\n  undefined4 status;\n  undefined buffer [128];\n  \n  startForkserver(0);\n  puts(\"Welcome to RIOT!\");\n  status = shell_run(0,buffer,0x80);\n  software_interrupt(0x3f);\n  return status;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "run_shell_and_interrupt_000023a4",
                "auStack_88": "buffer",
                "uVar1": "status"
            },
            "calling": [
                "core_panic"
            ],
            "called": [
                "startForkserver",
                "shell_run",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "invoke_software_interrupt_000023c8",
            "code": "\nvoid invokeSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "invoke_software_interrupt_000023c8"
            },
            "calling": [
                "startForkserver"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_afl_call_000023d0",
            "code": "\nundefined4 executeAflCall_000023d0(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_1fff0d98 == 0) {\n    result = aflCall(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_afl_call_000023d0",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "main"
            ],
            "called": [
                "aflCall"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "core_panic"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "FUNC_0000240c",
            "code": "\nundefined4 * FUNC_0000240c(undefined4 *param_1)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)*param_1;\n  if (puVar1 != (undefined4 *)0x0) {\n    *param_1 = *puVar1;\n  }\n  return puVar1;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "FUNC_0000240c"
            },
            "calling": [
                "mutex_unlock"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_thread_status_00002434",
            "code": "\nundefined4 updateThreadStatus_00002434(int *status,int flag)\n\n{\n  int initialStatus;\n  undefined4 irqStatus;\n  \n  irqStatus = irq_disable();\n  initialStatus = DAT_1fff03dc;\n  if (*status == 0) {\n    *status = -1;\n    irq_restore(irqStatus);\n    irqStatus = 1;\n  }\n  else if (flag == 0) {\n    irq_restore(irqStatus);\n    irqStatus = 0;\n  }\n  else {\n    sched_set_status(DAT_1fff03dc,2);\n    if (*status == -1) {\n      *status = initialStatus + 8;\n      *(undefined4 *)*status = 0;\n    }\n    else {\n      thread_add_to_list(status,initialStatus);\n    }\n    irq_restore(irqStatus);\n    thread_yield_higher();\n    irqStatus = 1;\n  }\n  return irqStatus;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_thread_status_00002434",
                "param_1": "status",
                "param_2": "flag",
                "uVar2": "irqStatus",
                "iVar1": "initialStatus"
            },
            "calling": [
                "mutex_lock"
            ],
            "called": [
                "thread_yield_higher",
                "sched_set_status",
                "irq_restore",
                "irq_disable",
                "thread_add_to_list"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "handle_list_operations_000024bc",
            "code": "\nvoid handleListOperations_000024bc(int *listPointer)\n\n{\n  undefined status;\n  undefined4 irqState;\n  int removedElement;\n  \n  irqState = irq_disable();\n  if (*listPointer == 0) {\n    irq_restore(irqState);\n  }\n  else if (*listPointer == -1) {\n    *listPointer = 0;\n    irq_restore(irqState);\n  }\n  else {\n    removedElement = list_remove_head(listPointer);\n    sched_set_status(removedElement + -8,10);\n    if (*listPointer == 0) {\n      *listPointer = -1;\n    }\n    status = *(undefined *)(removedElement + -3);\n    irq_restore(irqState);\n    sched_switch(status);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "handle_list_operations_000024bc",
                "param_1": "listPointer",
                "uVar1": "status",
                "uVar2": "irqState",
                "iVar3": "removedElement"
            },
            "calling": [
                "isrpipe_write_one"
            ],
            "called": [
                "sched_set_status",
                "irq_restore",
                "sched_switch",
                "irq_disable",
                "list_remove_head"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_data_00002538",
            "code": "\nvoid updateData_00002538(byte dataIndex,uint newValue)\n\n{\n  if ((char)dataIndex < '\\0') {\n    (&DAT_e000ed14)[dataIndex & 0xf] = (char)((newValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)dataIndex + -0x1fff1c00) = (char)((newValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_data_00002538",
                "param_1": "dataIndex",
                "param_2": "newValue"
            },
            "calling": [
                "cortexm_init"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_data_0000258c",
            "code": "\n\n\nvoid initializeData_0000258c(void)\n\n{\n  uint index;\n  \n  _DAT_e000ed08 = 0;\n  updateData(0xfffffffe,1);\n  updateData(0xfffffffb,1);\n  for (index = 0; index < 0x66; index = index + 1) {\n    updateData((int)(char)index,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_data_0000258c",
                "local_c": "index",
                "update_data_00002538": "updateData"
            },
            "calling": [
                "cpu_init"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_rtt_000025f4",
            "code": "\nvoid initialize_rtt_000025f4(void)\n\n{\n  initialize_real-time_trace();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_rtt_000025f4",
                "rtt_init": "initialize_real-time_trace"
            },
            "calling": [
                "periph_init"
            ],
            "called": [
                "rtt_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "set_system_time_00002600",
            "code": "\nundefined4 setSystemTime_00002600(undefined4 systemTime)\n\n{\n  undefined4 convertedTime;\n  \n  convertedTime = mktime(systemTime);\n  rtt_set_counter(convertedTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "set_system_time_00002600",
                "param_1": "systemTime",
                "uVar1": "convertedTime"
            },
            "calling": [
                "_rtc_settime"
            ],
            "called": [
                "rtt_set_counter",
                "mktime"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "convert_unix_time_to_struct_00002624",
            "code": "\nundefined4 convertUnixTimeToStruct_00002624(undefined4 outputStruct)\n\n{\n  undefined4 currentTime;\n  undefined4 zeroCounter;\n  \n  currentTime = rtt_get_counter();\n  zeroCounter = 0;\n  gmtime_r(&currentTime,outputStruct);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "convert_unix_time_to_struct_00002624",
                "param_1": "outputStruct",
                "local_10": "currentTime",
                "uStack_c": "zeroCounter"
            },
            "calling": [
                "_rtc_gettime"
            ],
            "called": [
                "gmtime_r",
                "rtt_get_counter"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "set_alarm_with_time_00002654",
            "code": "\nundefined4 set_alarm_with_time_00002654(undefined4 time_input,undefined4 alarm_data,undefined4 extra_param)\n\n{\n  undefined4 unix_time;\n  \n  unix_time = mktime(time_input);\n  DAT_1fff0d9c = alarm_data;\n  rtt_set_alarm(unix_time,0x26f1,extra_param);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "set_alarm_with_time_00002654",
                "param_1": "time_input",
                "param_2": "alarm_data",
                "param_3": "extra_param",
                "uVar1": "unix_time"
            },
            "calling": [
                "_rtc_setalarm"
            ],
            "called": [
                "mktime",
                "rtt_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "convert_alarm_to_local_time_00002690",
            "code": "\nundefined4 convertAlarmToLocalTime_00002690(undefined4 outputTime)\n\n{\n  undefined4 alarmTime;\n  undefined4 zero;\n  \n  alarmTime = rtt_get_alarm();\n  zero = 0;\n  gmtime_r(&alarmTime,outputTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "convert_alarm_to_local_time_00002690",
                "param_1": "outputTime",
                "local_10": "alarmTime",
                "uStack_c": "zero"
            },
            "calling": [
                "_rtc_getalarm"
            ],
            "called": [
                "rtt_get_alarm",
                "gmtime_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "clear_alarm_and_reset_data_000026c0",
            "code": "\nvoid clear_alarm_and_reset_data_000026c0(void)\n\n{\n  rtt_clear_alarm();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "clear_alarm_and_reset_data_000026c0"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_clear_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "power_on_rtt_000026d8",
            "code": "\nvoid powerOnRTT_000026d8(void)\n\n{\n  rtt_poweron();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "power_on_rtt_000026d8"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "FUNC_000026e4",
            "code": "\nvoid FUNC_000026e4(void)\n\n{\n  rtt_poweroff();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "FUNC_000026e4"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtt_poweroff"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 data)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(data);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "data"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_00002714",
            "code": "\nvoid setBit_00002714(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_00002714",
                "param_1": "byteValue"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "write_data_00002744",
            "code": "\nvoid writeData_00002744(byte byteData,uint value)\n\n{\n  if ((char)byteData < '\\0') {\n    (&DAT_e000ed14)[byteData & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteData + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "write_data_00002744",
                "param_1": "byteData",
                "param_2": "value"
            },
            "calling": [
                "rtt_set_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_yield_00002798",
            "code": "\nvoid checkAndYield_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    thread_yield_higher();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_yield_00002798"
            },
            "calling": [
                "isr_rtc"
            ],
            "called": [
                "thread_yield_higher"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "initialize_system_000027b0",
            "code": "\n\n\nvoid initializeSystem_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  rtt_poweron();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "initialize_system_000027b0"
            },
            "calling": [
                "rtc_init"
            ],
            "called": [
                "rtt_poweron"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getBaseAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c"
            },
            "calling": [
                "rtc_get_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_data_0000285c",
            "code": "\n\n\nvoid initializeData_0000285c(undefined4 data)\n\n{\n  _DAT_4003d000 = data;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "data"
            },
            "calling": [
                "rtc_set_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "FUNC_00002894",
            "code": "\n\n\nvoid FUNC_00002894(int param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  _DAT_4003d008 = param_1 + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = param_2;\n  DAT_1fff0da4 = param_3;\n  NVIC_SetPriority(0x2e,10);\n  NVIC_EnableIRQ(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "FUNC_00002894"
            },
            "calling": [
                "rtc_set_alarm"
            ],
            "called": [
                "NVIC_EnableIRQ",
                "NVIC_SetPriority"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_pointer_000028f0",
            "code": "\n\n\nint incrementPointer_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_pointer_000028f0"
            },
            "calling": [
                "rtc_get_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "disable_interrupts_00002910",
            "code": "\n\n\nvoid disableInterrupts_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "disable_interrupts_00002910"
            },
            "calling": [
                "rtc_clear_alarm"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "rtt_init",
                "rtc_poweron"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "disable_interrupts_00002970",
            "code": "\n\n\nvoid disableInterrupts_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "disable_interrupts_00002970"
            },
            "calling": [
                "rtc_poweroff"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_callbacks_00002994",
            "code": "\n\n\nvoid executeCallbacks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  cortexm_isr_end();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_callbacks_00002994"
            },
            "calling": [],
            "called": [
                "cortexm_isr_end"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "print_character_00002a00",
            "code": "\nvoid print_character_00002a00(undefined4 character)\n\n{\n  print(character);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "print_character_00002a00",
                "param_1": "character",
                "putchar": "print"
            },
            "calling": [
                "print_prompt",
                "readline"
            ],
            "called": [
                "putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_value_index_00002a18",
            "code": "\nint findValueIndex_00002a18(int *array,undefined4 searchValue)\n\n{\n  int comparisonResult;\n  int *inputArray;\n  undefined **rebootString;\n  uint index;\n  int *currentElement;\n  \n  inputArray = array;\n  rebootString = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    currentElement = (&inputArray)[index];\n    if (currentElement != (int *)0x0) {\n      for (; *currentElement != 0; currentElement = currentElement + 3) {\n        comparisonResult = strcmp(*currentElement,searchValue);\n        if (comparisonResult == 0) {\n          return currentElement[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_value_index_00002a18",
                "param_1": "array",
                "param_2": "searchValue",
                "iVar1": "comparisonResult",
                "local_18": "inputArray",
                "local_14": "rebootString",
                "local_10": "index",
                "local_c": "currentElement"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandList)\n\n{\n  int *currentCommand;\n  undefined **commandDescription;\n  uint index;\n  int *currentArgument;\n  \n  iprintf(\"%-20s %s\\n\",\"Command\",\"Description\");\n  puts(\"---------------------------------------\");\n  currentCommand = commandList;\n  commandDescription = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentArgument = (&currentCommand)[index];\n    if (currentArgument != (int *)0x0) {\n      for (; *currentArgument != 0; currentArgument = currentArgument + 3) {\n        iprintf(\"%-20s %s\\n\",*currentArgument,currentArgument[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandList",
                "local_18": "currentCommand",
                "local_14": "commandDescription",
                "local_10": "index",
                "local_c": "currentArgument"
            },
            "calling": [
                "handle_input_line"
            ],
            "called": [
                "iprintf",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_user_input_00002b10",
            "code": "\nvoid processUserInput_00002b10(undefined4 param1,byte *inputString)\n\n{\n  int comparisonResult;\n  byte *nextCharPointer;\n  byte *inputPointers [3];\n  code *handlerFunction;\n  char **commandArray;\n  uint commandCount;\n  byte quoteCharacter;\n  char *currentCharacter;\n  char *currentCommand;\n  char **commandPointers;\n  uint currentIndex;\n  int escapeCount;\n  uint validCommandCount;\n  byte *currentCharPointer;\n  \n  validCommandCount = 0;\n  escapeCount = 0;\n  currentCharPointer = inputString;\n  while( true ) {\n    inputPointers[0] = inputString;\n    inputPointers[1] = (byte *)param1;\n    if (0x20 < *currentCharPointer) {\n      if ((*currentCharPointer == 0x22) || (*currentCharPointer == 0x27)) {\n        quoteCharacter = *currentCharPointer;\n        do {\n          nextCharPointer = currentCharPointer + 1;\n          if (*nextCharPointer == 0) {\n            currentCharPointer = nextCharPointer;\n            puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextCharPointer == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentCharPointer = currentCharPointer + 2;\n            nextCharPointer = currentCharPointer;\n            if (*currentCharPointer == 0) {\n              puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPointer = nextCharPointer;\n        } while (quoteCharacter != *currentCharPointer);\n        if (0x20 < currentCharPointer[1]) {\n          puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentCharPointer == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentCharPointer = currentCharPointer + 1;\n            if (*currentCharPointer == 0) {\n              puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentCharPointer = currentCharPointer + 1;\n          if (*currentCharPointer == 0x22) {\n            puts(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentCharPointer);\n      }\n      validCommandCount = validCommandCount + 1;\n    }\n    if (*currentCharPointer == 0) break;\n    *currentCharPointer = 0;\n    currentCharPointer = currentCharPointer + 1;\n  }\n  if (validCommandCount != 0) {\n    commandCount = validCommandCount;\n    commandArray = (char **)((int)inputPointers - ((validCommandCount + 1) * 4 + 7 & 0xfffffff8));\n    commandArray[validCommandCount] = (char *)0x0;\n    currentCharPointer = inputString;\n    for (currentIndex = 0; commandPointers = commandArray, currentIndex < validCommandCount; currentIndex = currentIndex + 1) {\n      for (; *currentCharPointer == 0; currentCharPointer = currentCharPointer + 1) {\n      }\n      if ((*currentCharPointer == 0x22) || (*currentCharPointer == 0x27)) {\n        currentCharPointer = currentCharPointer + 1;\n      }\n      commandArray[currentIndex] = (char *)currentCharPointer;\n      for (; *currentCharPointer != 0; currentCharPointer = currentCharPointer + 1) {\n      }\n    }\n    for (; (escapeCount != 0 && (*commandPointers != (char *)0x0)); commandPointers = commandPointers + 1) {\n      for (currentCommand = *commandPointers; *currentCommand != '\\0'; currentCommand = currentCommand + 1) {\n        if (*currentCommand == '\\') {\n          for (currentCharacter = currentCommand; *currentCharacter != '\\0'; currentCharacter = currentCharacter + 1) {\n            *currentCharacter = currentCharacter[1];\n          }\n          escapeCount = escapeCount + -1;\n          if (escapeCount == 0) break;\n        }\n      }\n    }\n    handlerFunction = (code *)find_handler(param1,*commandArray);\n    if (handlerFunction == (code *)0x0) {\n      comparisonResult = strcmp(&DAT_00007214,*commandArray);\n      if (comparisonResult == 0) {\n        print_help(inputPointers[1]);\n      }\n      else {\n        iprintf(\"shell: command not found: %s\\n\",*commandArray);\n      }\n    }\n    else {\n      (*handlerFunction)(validCommandCount,commandArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_user_input_00002b10",
                "param_1": "param1",
                "param_2": "inputString",
                "local_48": "inputPointers",
                "local_3c": "handlerFunction",
                "local_38": "commandArray",
                "local_34": "commandCount",
                "local_2d": "quoteCharacter",
                "local_2c": "currentCharacter",
                "local_28": "currentCommand",
                "local_24": "commandPointers",
                "local_20": "currentIndex",
                "local_1c": "escapeCount",
                "local_18": "validCommandCount",
                "local_14": "currentCharPointer",
                "pbVar2": "nextCharPointer",
                "iVar1": "comparisonResult"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "iprintf",
                "find_handler",
                "puts",
                "strcmp",
                "print_help"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "read_line_00002d94",
            "code": "\nuint readLine_00002d94(undefined *buffer,int maxSize)\n\n{\n  int inputChar;\n  byte isFirstChar;\n  bool isBufferEmpty;\n  undefined *currentChar;\n  \n  currentChar = buffer;\n  while( true ) {\n    if (maxSize + -1 <= (int)currentChar - (int)buffer) {\n      return 0xffffffff;\n    }\n    inputChar = getchar();\n    if (inputChar < 0) break;\n    if ((inputChar == 0xd) || (inputChar == 10)) {\n      *currentChar = 0;\n      _putchar(0xd);\n      _putchar(10);\n      isBufferEmpty = currentChar == buffer;\n      if (isBufferEmpty) {\n        buffer = (undefined *)0x1;\n      }\n      isFirstChar = (byte)buffer;\n      if (!isBufferEmpty) {\n        isFirstChar = 0;\n      }\n      return (uint)isFirstChar;\n    }\n    if ((inputChar == 8) || (inputChar == 0x7f)) {\n      if (currentChar != buffer) {\n        currentChar = currentChar + -1;\n        *currentChar = 0;\n        _putchar(8);\n        _putchar(0x20);\n        _putchar(8);\n      }\n    }\n    else {\n      *currentChar = (char)inputChar;\n      _putchar(inputChar);\n      currentChar = currentChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "read_line_00002d94",
                "param_1": "buffer",
                "param_2": "maxSize",
                "iVar1": "inputChar",
                "bVar2": "isFirstChar",
                "bVar3": "isBufferEmpty",
                "local_c": "currentChar"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "_putchar",
                "getchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "print_character_00002e48",
            "code": "\nvoid printCharacter_00002e48(void)\n\n{\n  _putchar(0x3e);\n  _putchar(0x20);\n  fflush(*(undefined4 *)(array[16].r_offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "print_character_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "array"
            },
            "calling": [
                "shell_run"
            ],
            "called": [
                "fflush",
                "_putchar"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "input_loop_00002e6c",
            "code": "\nvoid inputLoop_00002e6c(undefined4 prompt,undefined4 buffer,undefined4 length)\n\n{\n  int readResult;\n  \n  print_prompt();\n  do {\n    readResult = readline(buffer,length);\n    if (readResult == 0) {\n      handle_input_line(prompt,buffer);\n    }\n    print_prompt();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "input_loop_00002e6c",
                "param_1": "prompt",
                "param_2": "buffer",
                "param_3": "length",
                "iVar1": "readResult"
            },
            "calling": [
                "main"
            ],
            "called": [
                "handle_input_line",
                "print_prompt",
                "readline"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "reboot_system_00002e9c",
            "code": "\nundefined4 reboot_system_00002e9c(void)\n\n{\n  system_reboot();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "reboot_system_00002e9c",
                "pm_reboot": "system_reboot"
            },
            "calling": [],
            "called": [
                "pm_reboot"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "execute_parsing_function_00002eb4",
            "code": "\nundefined4 execute_parsing_function_00002eb4(void)\n\n{\n  perform_parsing();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "execute_parsing_function_00002eb4",
                "ps": "perform_parsing"
            },
            "calling": [],
            "called": [
                "ps"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_and_print_00002ecc",
            "code": "\nvoid readFromDeviceAndPrint_00002ecc(undefined4 deviceId,int deviceInfo)\n\n{\n  undefined4 classString;\n  undefined4 deviceType;\n  undefined sensorData [8];\n  uint dataSize;\n  \n  dataSize = saul_reg_read(deviceInfo,sensorData);\n  if ((int)dataSize < 1) {\n    iprintf(\"error: failed to read from device #%i\\n\",deviceId);\n  }\n  else {\n    deviceType = *(undefined4 *)(deviceInfo + 8);\n    classString = saul_class_to_str(*(undefined *)(*(int *)(deviceInfo + 0xc) + 8));\n    iprintf(\"Reading from #%i (%s|%s)\\n\",deviceId,deviceType,classString);\n    phydat_dump(sensorData,dataSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_and_print_00002ecc",
                "param_1": "deviceId",
                "param_2": "deviceInfo",
                "uVar1": "classString",
                "uVar2": "deviceType",
                "auStack_1c": "sensorData",
                "local_14": "dataSize"
            },
            "calling": [
                "read",
                "probe_all"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "saul_reg_read",
                "phydat_dump"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "iterate_over_list_and_probe_00002f30",
            "code": "\nvoid iterateOverListAndProbe_00002f30(void)\n\n{\n  int index;\n  Node *currentNode;\n  \n  index = 0;\n  for (currentNode = DAT_1fff0db0; currentNode != (Node *)0x0; currentNode = (Node *)*currentNode) {\n    performProbe(index,currentNode);\n    printData(&DAT_00007380);\n    index = index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "iterate_over_list_and_probe_00002f30",
                "local_10": "index",
                "local_c": "currentNode",
                "undefined4": "Node",
                "probe": "performProbe",
                "puts": "printData"
            },
            "calling": [
                "read"
            ],
            "called": [
                "probe",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid printDeviceList_00002f74(void)\n\n{\n  undefined4 classString;\n  int deviceCount;\n  undefined4 *devicePtr;\n  \n  devicePtr = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    puts(\"No devices found\");\n  }\n  else {\n    puts(\"ID\\tClass\\t\\tName\");\n  }\n  for (; devicePtr != (undefined4 *)0x0; devicePtr = (undefined4 *)*devicePtr) {\n    classString = saul_class_to_str(*(undefined *)(devicePtr[3] + 8));\n    iprintf(\"#%i\\t%s\\t%s\\n\",deviceCount,classString,devicePtr[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "devicePtr",
                "uVar1": "classString"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_class_to_str",
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "print_device_information_00002fe0",
            "code": "\nvoid printDeviceInformation_00002fe0(int deviceCount,undefined4 *arguments)\n\n{\n  int comparisonResult;\n  undefined4 deviceId;\n  \n  if (deviceCount < 3) {\n    iprintf(\"usage: %s %s <device id>|all\\n\",*arguments,arguments[1]);\n  }\n  else {\n    comparisonResult = strcmp(arguments[2],&DAT_000073d4);\n    if (comparisonResult == 0) {\n      probe_all();\n    }\n    else {\n      deviceId = atoi(arguments[2]);\n      comparisonResult = findNthDevice(deviceId);\n      if (comparisonResult == 0) {\n        printErrorMessage(\"error: undefined device id given\");\n      }\n      else {\n        probe(deviceId,comparisonResult);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "print_device_information_00002fe0",
                "param_1": "deviceCount",
                "param_2": "arguments",
                "iVar1": "comparisonResult",
                "uVar2": "deviceId",
                "saul_reg_find_nth": "findNthDevice",
                "puts": "printErrorMessage"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "probe",
                "saul_reg_find_nth",
                "probe_all",
                "puts",
                "strcmp",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_with_id_and_values_0000305c",
            "code": "\nvoid writeToDeviceWithIdAndValues_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 value;\n  undefined2 valuesArray [4];\n  uint numValues;\n  int deviceId;\n  undefined4 deviceIndex;\n  int valueIndex;\n  \n  if (argc < 4) {\n    iprintf(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceIndex = atoi(argv[2]);\n    deviceId = saul_reg_find_nth(deviceIndex);\n    if (deviceId == 0) {\n      puts(\"error: undefined device given\");\n    }\n    else {\n      memset(valuesArray,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (valueIndex = 0; valueIndex < (int)numValues; valueIndex = valueIndex + 1) {\n        value = atoi(argv[valueIndex + 3]);\n        valuesArray[valueIndex] = value;\n      }\n      iprintf(\"Writing to device #%i - %s\\n\",deviceIndex,*(undefined4 *)(deviceId + 8));\n      phydat_dump(valuesArray,numValues & 0xff);\n      numValues = saul_reg_write(deviceId,valuesArray);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          iprintf(\"error: device #%i is not writable\\n\",deviceIndex);\n        }\n        else {\n          iprintf(\"error: failure to write to device #%i\\n\",deviceIndex);\n        }\n      }\n      else {\n        iprintf(\"data successfully written to device #%i\\n\",deviceIndex);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_with_id_and_values_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "value",
                "auStack_20": "valuesArray",
                "local_18": "numValues",
                "local_14": "deviceId",
                "local_10": "deviceIndex",
                "local_c": "valueIndex"
            },
            "calling": [
                "_saul"
            ],
            "called": [
                "iprintf",
                "saul_reg_write",
                "memset",
                "saul_reg_find_nth",
                "puts",
                "phydat_dump",
                "atoi"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "FUNC_0000316c",
            "code": "\nundefined4 FUNC_0000316c(int param_1,undefined4 *param_2)\n\n{\n  int iVar1;\n  \n  if (param_1 < 2) {\n    list();\n  }\n  else {\n    iVar1 = strcmp(param_2[1],&DAT_000074ec);\n    if (iVar1 == 0) {\n      read(param_1,param_2);\n    }\n    else {\n      iVar1 = strcmp(param_2[1],\"write\");\n      if (iVar1 == 0) {\n        write(param_1,param_2);\n      }\n      else {\n        iprintf(\"usage: %s read|write\\n\",*param_2);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "FUNC_0000316c"
            },
            "calling": [],
            "called": [
                "list",
                "iprintf",
                "read",
                "strcmp",
                "write"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "alarm_notification_000031e0",
            "code": "\nvoid alarmNotification_000031e0(void)\n\n{\n  puts(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "alarm_notification_000031e0"
            },
            "calling": [],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_day_of_week_000031fc",
            "code": "\nint calculateDayOfWeek_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedMonth;\n  \n  adjustedMonth = month;\n  if (month < 3) {\n    adjustedMonth = 1;\n  }\n  isLeapYear = (byte)adjustedMonth;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedMonth = year;\n  if (year < 0) {\n    adjustedMonth = year + 3;\n  }\n  return ((((adjustedMonth >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekdayOffsets + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_day_of_week_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedMonth",
                "Elf32_Rel_ARRAY_1fff0200": "weekdayOffsets"
            },
            "calling": [
                "_parse_time"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "FUNC_0000328c",
            "code": "\nundefined4 FUNC_0000328c(undefined4 *param_1,int *param_2)\n\n{\n  int iVar1;\n  int local_10;\n  short local_a;\n  \n  local_a = strtol(*param_1,&local_10,10);\n  param_2[5] = local_a + -0x76c;\n  local_a = strtol(local_10 + 1,&local_10,10);\n  param_2[4] = local_a + -1;\n  local_a = strtol(local_10 + 1,&local_10,10);\n  param_2[3] = (int)local_a;\n  local_a = strtol(param_1[1],&local_10,10);\n  param_2[2] = (int)local_a;\n  local_a = strtol(local_10 + 1,&local_10,10);\n  param_2[1] = (int)local_a;\n  local_a = strtol(local_10 + 1,&local_10,10);\n  *param_2 = (int)local_a;\n  iVar1 = dow(param_2[5] + 0x76c,param_2[4] + 1,param_2[3]);\n  param_2[6] = iVar1;\n  param_2[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "FUNC_0000328c"
            },
            "calling": [
                "_rtc_setalarm",
                "_rtc_settime"
            ],
            "called": [
                "dow",
                "strtol"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTimeArray)\n\n{\n  iprintf(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,hour,\n          minute,*dateTimeArray);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTimeArray",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "_rtc_gettime",
                "_rtc_getalarm"
            ],
            "called": [
                "iprintf"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_alarm_status_000033c0",
            "code": "\nbool get_alarm_status_000033c0(void)\n\n{\n  int status;\n  undefined alarm_buffer [36];\n  \n  status = rtc_get_alarm(alarm_buffer);\n  if (status != 0) {\n    puts(\"rtc: error getting alarm\");\n  }\n  else {\n    _print_time(alarm_buffer);\n  }\n  return status != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_alarm_status_000033c0",
                "iVar1": "status",
                "auStack_2c": "alarm_buffer"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_alarm",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_000033f4",
            "code": "\nundefined4 setAlarm_000033f4(undefined4 inputTime)\n\n{\n  int parseResult;\n  undefined4 returnCode;\n  undefined parsedTime [36];\n  \n  parseResult = _parse_time(inputTime,parsedTime);\n  if (parseResult == 0) {\n    parseResult = rtc_set_alarm(parsedTime,0x31e1,0);\n    if (parseResult == -1) {\n      puts(\"rtc: error setting alarm\");\n      returnCode = 1;\n    }\n    else {\n      returnCode = 0;\n    }\n  }\n  else {\n    returnCode = 1;\n  }\n  return returnCode;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_000033f4",
                "param_1": "inputTime",
                "iVar1": "parseResult",
                "uVar2": "returnCode",
                "auStack_2c": "parsedTime"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts",
                "_parse_time",
                "rtc_set_alarm"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "print_or_error_get_rt_ctime_00003444",
            "code": "\nbool printOrError_getRTCtime_00003444(void)\n\n{\n  int rtcResult;\n  undefined timeBuffer [36];\n  \n  rtcResult = rtc_get_time(timeBuffer);\n  if (rtcResult != 0) {\n    puts(\"rtc: error getting time\");\n  }\n  else {\n    _print_time(timeBuffer);\n  }\n  return rtcResult != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "print_or_error_get_rt_ctime_00003444",
                "iVar1": "rtcResult",
                "auStack_2c": "timeBuffer"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_get_time",
                "puts",
                "_print_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_rtc_time_00003478",
            "code": "\nundefined4 setRtcTime_00003478(undefined4 inputTime)\n\n{\n  int parseResult;\n  undefined4 returnValue;\n  undefined buffer [36];\n  \n  parseResult = _parse_time(inputTime,buffer);\n  if (parseResult == 0) {\n    parseResult = rtc_set_time(buffer);\n    if (parseResult == -1) {\n      puts(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_rtc_time_00003478",
                "param_1": "inputTime",
                "iVar1": "parseResult",
                "uVar2": "returnValue",
                "auStack_2c": "buffer"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "rtc_set_time",
                "puts",
                "_parse_time"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  printString(\"usage: rtc <command> [arguments]\");\n  printString(\"commands:\");\n  printString(\"\\tpowerOn\\t\\tpower the interface on\");\n  printString(\"\\tpowerOff\\tpower the interface off\");\n  printString(\"\\tdeactivateAlarm\\tdeactivate the current alarm\");\n  printString(\"\\tprintAlarm\\tprint the currently alarm time\");\n  printString(\"\\tsetAlarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  printString(\"\\tprintTime\\t\\tprint the current time\");\n  printString(\"\\tsetTime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0",
                "puts": "printString",
                "poweron": "powerOn",
                "poweroff": "powerOff",
                "clearalarm": "deactivateAlarm",
                "getalarm": "printAlarm",
                "setalarm": "setAlarm",
                "gettime": "printTime",
                "settime": "setTime"
            },
            "calling": [
                "_rtc_handler"
            ],
            "called": [
                "puts"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_rtc_command_00003524",
            "code": "\nundefined4 handle_rtc_command_00003524(int argc,int argv)\n\n{\n  int comparison_result;\n  undefined4 return_value;\n  \n  if (argc < 2) {\n    _rtc_usage();\n    return_value = 1;\n  }\n  else {\n    comparison_result = strncmp(*(undefined4 *)(argv + 4),\"poweron\",7);\n    if (comparison_result == 0) {\n      rtc_poweron();\n    }\n    else {\n      comparison_result = strncmp(*(undefined4 *)(argv + 4),\"poweroff\",8);\n      if (comparison_result == 0) {\n        rtc_poweroff();\n      }\n      else {\n        comparison_result = strncmp(*(undefined4 *)(argv + 4),\"clearalarm\",8);\n        if (comparison_result == 0) {\n          rtc_clear_alarm();\n        }\n        else {\n          comparison_result = strncmp(*(undefined4 *)(argv + 4),\"getalarm\",8);\n          if (comparison_result == 0) {\n            _rtc_getalarm();\n          }\n          else {\n            comparison_result = strncmp(*(undefined4 *)(argv + 4),\"setalarm\",8);\n            if ((comparison_result == 0) && (argc == 4)) {\n              _rtc_setalarm(argv + 8);\n            }\n            else {\n              comparison_result = strncmp(*(undefined4 *)(argv + 4),\"gettime\",7);\n              if (comparison_result == 0) {\n                _rtc_gettime();\n              }\n              else {\n                comparison_result = strncmp(*(undefined4 *)(argv + 4),\"settime\",7);\n                if ((comparison_result != 0) || (argc != 4)) {\n                  iprintf(\"unknown command or missing parameters: %s\\n\\n\",\n                          *(undefined4 *)(argv + 4));\n                  _rtc_usage();\n                  return 1;\n                }\n                _rtc_settime(argv + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_rtc_command_00003524",
                "param_1": "argc",
                "param_2": "argv",
                "iVar1": "comparison_result",
                "uVar2": "return_value"
            },
            "calling": [],
            "called": [
                "iprintf",
                "_rtc_setalarm",
                "rtc_clear_alarm",
                "strncmp",
                "_rtc_gettime",
                "_rtc_getalarm",
                "rtc_poweron",
                "rtc_poweroff",
                "_rtc_settime",
                "_rtc_usage"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "run_infinite_loop_00003658",
            "code": "\nvoid runInfiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "run_infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "pm_reboot"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "reset_system_00003688",
            "code": "\nvoid resetSystem_00003688(void)\n\n{\n  resetInterrupts();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "reset_system_00003688",
                "NVIC_SystemReset": "resetInterrupts"
            },
            "calling": [
                "_reboot_handler"
            ],
            "called": [
                "NVIC_SystemReset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataObjectAddress,byte numberOfDataObjects)\n\n{\n  undefined4 unitString;\n  char isBitSet;\n  uint bitMask;\n  bool isBitSetResult;\n  undefined formattedString [8];\n  int formattedStringLength;\n  char prefix;\n  byte dataObjectIndex;\n  \n  if ((dataObjectAddress == 0) || (3 < numberOfDataObjects)) {\n    puts(\"Unable to display data object\");\n  }\n  else {\n    iprintf(\"Data:\");\n    for (dataObjectIndex = 0; dataObjectIndex < numberOfDataObjects; dataObjectIndex = dataObjectIndex + 1) {\n      if (*(byte *)(dataObjectAddress + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(dataObjectAddress + 6) & 0x8018f;\n        isBitSetResult = bitMask != 0;\n        if (isBitSetResult) {\n          bitMask = 1;\n        }\n        isBitSet = (char)bitMask;\n        if (!isBitSetResult) {\n          isBitSet = '\\0';\n        }\n        if (isBitSet == '\\0') goto LAB_000036ee;\n        prefix = '\\0';\n      }\n      else {\nLAB_000036ee:\n        prefix = phydat_prefix_from_scale((int)*(char *)(dataObjectAddress + 7));\n      }\n      iprintf(&DAT_000077bc);\n      if (numberOfDataObjects < 2) {\n        iprintf(\"     \");\n      }\n      else {\n        iprintf(\"[%u] \",dataObjectIndex);\n      }\n      if (prefix == '\\0') {\n        if (*(char *)(dataObjectAddress + 7) == '\\0') {\n          iprintf(&DAT_000077d8,(int)*(short *)(dataObjectAddress + (uint)dataObjectIndex * 2));\n        }\n        else if ((*(char *)(dataObjectAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataObjectAddress + 7),4)) &&\n                (*(char *)(dataObjectAddress + 7) < '\\0')) {\n          formattedStringLength = fmt_s16_dfp(formattedString,(int)*(short *)(dataObjectAddress + (uint)dataObjectIndex * 2),\n                                 (int)*(char *)(dataObjectAddress + 7));\n          formattedString[formattedStringLength] = 0;\n          iprintf(&DAT_000077dc,formattedString);\n        }\n        else {\n          iprintf(\"%iE%i\",(int)*(short *)(dataObjectAddress + (uint)dataObjectIndex * 2),(int)*(char *)(dataObjectAddress + 7));\n        }\n      }\n      else {\n        iprintf(\"%6d %c\",(int)*(short *)(dataObjectAddress + (uint)dataObjectIndex * 2),prefix);\n      }\n      unitString = phydat_unit_to_str(*(undefined *)(dataObjectAddress + 6));\n      iprintf(&DAT_000077e8,unitString);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataObjectAddress",
                "param_2": "numberOfDataObjects",
                "uVar1": "unitString",
                "cVar2": "isBitSet",
                "uVar3": "bitMask",
                "bVar4": "isBitSetResult",
                "auStack_18": "formattedString",
                "local_10": "formattedStringLength",
                "local_a": "prefix",
                "local_9": "dataObjectIndex"
            },
            "calling": [
                "probe",
                "write"
            ],
            "called": [
                "phydat_prefix_from_scale",
                "iprintf",
                "puts",
                "fmt_s16_dfp",
                "phydat_unit_to_str"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined input)\n\n{\n  undefined *result;\n  \n  switch(input) {\n  case 2:\n    result = &DAT_000077ec;\n    break;\n  case 3:\n    result = &DAT_000077f0;\n    break;\n  case 4:\n    result = &DAT_000077f4;\n    break;\n  case 5:\n    result = &DAT_000077f8;\n    break;\n  case 6:\n    result = &DAT_000077fc;\n    break;\n  case 7:\n    result = (undefined *)0x7800;\n    break;\n  case 8:\n    result = &DAT_00007804;\n    break;\n  case 9:\n    result = &DAT_00007808;\n    break;\n  case 10:\n    result = &DAT_0000780c;\n    break;\n  case 0xb:\n    result = &DAT_00007810;\n    break;\n  case 0xc:\n    result = &DAT_00007814;\n    break;\n  case 0xd:\n    result = &DAT_00007818;\n    break;\n  case 0xe:\n    result = &DAT_0000781c;\n    break;\n  case 0xf:\n    result = &DAT_00007820;\n    break;\n  case 0x10:\n    result = &DAT_00007824;\n    break;\n  case 0x11:\n    result = &DAT_0000782c;\n    break;\n  default:\n    result = &DAT_00007834;\n    break;\n  case 0x13:\n    result = &DAT_00007830;\n    break;\n  case 0x15:\n    result = &DAT_00007828;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "input",
                "puVar1": "result"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "get_mapped_value_00003918",
            "code": "\nundefined4 getMappedValue_00003918(undefined input)\n\n{\n  undefined4 mappedValue;\n  \n  switch(input) {\n  case 2:\n    mappedValue = 0x68;\n    break;\n  case 3:\n    mappedValue = 0x6b;\n    break;\n  case 6:\n    mappedValue = 0x4d;\n    break;\n  case 9:\n    mappedValue = 0x47;\n    break;\n  case 0xc:\n    mappedValue = 0x54;\n    break;\n  case 0xf:\n    mappedValue = 0x50;\n    break;\n  case 0xf1:\n    mappedValue = 0x66;\n    break;\n  default:\n    mappedValue = 0;\n    break;\n  case 0xf4:\n    mappedValue = 0x70;\n    break;\n  case 0xf7:\n    mappedValue = 0x6e;\n    break;\n  case 0xfa:\n    mappedValue = 0x75;\n    break;\n  case 0xfd:\n    mappedValue = 0x6d;\n  }\n  return mappedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "get_mapped_value_00003918",
                "param_1": "input",
                "uVar1": "mappedValue"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "get_class_or_sense_name_000039e8",
            "code": "\nchar * getClassOrSenseName_000039e8(char inputChar)\n\n{\n  char *result;\n  \n  switch(inputChar) {\n  case '\\0':\n    result = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    result = \"ACT_ANY\";\n    break;\n  case 'B':\n    result = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    result = \"ACT_SERVO\";\n    break;\n  case 'D':\n    result = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    result = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    result = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    result = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    result = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    result = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    result = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    result = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    result = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    result = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    result = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    result = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    result = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    result = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    result = \"SENSE_UV\";\n    break;\n  case -0x74:\n    result = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    result = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    result = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    result = \"SENSE_CO2\";\n    break;\n  default:\n    if (inputChar == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    result = \"CLASS_UNKNOWN\";\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "get_class_or_sense_name_000039e8",
                "param_1": "inputChar",
                "pcVar1": "result"
            },
            "calling": [
                "list",
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_nth_element_00003d24",
            "code": "\nundefined4 * findNthElement_00003d24(int n)\n\n{\n  int counter;\n  undefined4 *current_element;\n  \n  counter = 0;\n  for (current_element = DAT_1fff0db0; (counter < n && (current_element != (undefined4 *)0x0));\n      current_element = (undefined4 *)*current_element) {\n    counter = counter + 1;\n  }\n  return current_element;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_nth_element_00003d24",
                "param_1": "n",
                "local_10": "counter",
                "local_c": "current_element"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int inputPointer,undefined4 paramValue)\n\n{\n  undefined4 returnValue;\n  \n  if (inputPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(inputPointer + 0xc))(*(undefined4 *)(inputPointer + 4),paramValue);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "inputPointer",
                "param_2": "paramValue",
                "uVar1": "returnValue"
            },
            "calling": [
                "probe"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int functionPointer,undefined4 param)\n\n{\n  undefined4 result;\n  \n  if (functionPointer == 0) {\n    result = 0xffffffed;\n  }\n  else {\n    result = (**(code **)(*(int *)(functionPointer + 0xc) + 4))(*(undefined4 *)(functionPointer + 4),param);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "functionPointer",
                "param_2": "param",
                "uVar1": "result"
            },
            "calling": [
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "calculate_digits_00003dc4",
            "code": "\nint calculateDigits_00003dc4(int startingAddress,uint number)\n\n{\n  uint dividend;\n  char *currentDigit;\n  uint base;\n  int digitCount;\n  \n  digitCount = 1;\n  if (number < 1000000000) {\n    for (base = 10; base <= number; base = base * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (startingAddress != 0) {\n    currentDigit = (char *)(digitCount + startingAddress);\n    dividend = number;\n    do {\n      currentDigit = currentDigit + -1;\n      *currentDigit = (char)(dividend % 10) + '0';\n      dividend = dividend / 10;\n    } while (dividend != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "calculate_digits_00003dc4",
                "param_1": "startingAddress",
                "param_2": "number",
                "local_20": "dividend",
                "local_14": "currentDigit",
                "local_10": "base",
                "local_c": "digitCount"
            },
            "calling": [
                "fmt_s32_dec"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "convert_to_decimal_00003e58",
            "code": "\nint convertToDecimal_00003e58(undefined *inputString,int inputNumber)\n\n{\n  int numDigits;\n  int absoluteValue;\n  undefined *updatedString;\n  \n  absoluteValue = inputNumber;\n  updatedString = inputString;\n  if (-(inputNumber >> 0x1f) != 0) {\n    if (inputString != (undefined *)0x0) {\n      updatedString = inputString + 1;\n      *inputString = 0x2d;\n    }\n    absoluteValue = -inputNumber;\n  }\n  numDigits = fmt_u32_dec(updatedString,absoluteValue);\n  return -(inputNumber >> 0x1f) + numDigits;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "convert_to_decimal_00003e58",
                "param_1": "inputString",
                "param_2": "inputNumber",
                "iVar1": "numDigits",
                "local_18": "absoluteValue",
                "local_14": "updatedString"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "fmt_u32_dec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "format_and_print_integer_00003e9e",
            "code": "\nundefined4 formatAndPrintInteger_00003e9e(undefined4 integer,short value,undefined4 formatSpecifier)\n\n{\n  undefined4 result;\n  \n  result = fmt_s32_dfp(integer,(int)value,formatSpecifier);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "format_and_print_integer_00003e9e",
                "param_1": "integer",
                "param_2": "value",
                "param_3": "formatSpecifier",
                "uVar1": "result"
            },
            "calling": [
                "phydat_dump"
            ],
            "called": [
                "fmt_s32_dfp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "format_and_pad_number_00003ec4",
            "code": "\nint formatAndPadNumber_00003ec4(undefined *outputBuffer,uint inputNumber,int paddingLength)\n\n{\n  int integerLength;\n  undefined4 decimalLength;\n  uint quotient;\n  int remainder;\n  int totalLength;\n  \n  if (paddingLength + 7 < 0 != SCARRY4(paddingLength,7)) {\n    core_panic(3,\"FAILED ASSERTION.\");\n  }\n  totalLength = 0;\n  if (paddingLength == 0) {\n    totalLength = fmt_s32_dec(outputBuffer,inputNumber);\n  }\n  else if (paddingLength < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + paddingLength * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + paddingLength * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputBuffer != (undefined *)0x0) {\n        *outputBuffer = 0x2d;\n      }\n      totalLength = 1;\n    }\n    if (outputBuffer == (undefined *)0x0) {\n      integerLength = fmt_s32_dec(0,quotient);\n      totalLength = integerLength + 1 + totalLength;\n    }\n    else {\n      integerLength = fmt_s32_dec(outputBuffer + totalLength,quotient);\n      integerLength = totalLength + integerLength;\n      totalLength = integerLength + 1;\n      outputBuffer[integerLength] = 0x2e;\n      decimalLength = fmt_s32_dec(outputBuffer + totalLength,remainder);\n      fmt_lpad(outputBuffer + totalLength,decimalLength,-paddingLength,0x30);\n    }\n    totalLength = -paddingLength + totalLength;\n  }\n  else {\n    totalLength = fmt_s32_dec(outputBuffer,inputNumber);\n    if (outputBuffer != (undefined *)0x0) {\n      memset(outputBuffer + totalLength,0x30,paddingLength);\n    }\n    totalLength = paddingLength + totalLength;\n  }\n  return totalLength;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "format_and_pad_number_00003ec4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "paddingLength",
                "iVar1": "integerLength",
                "uVar2": "decimalLength",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalLength"
            },
            "calling": [
                "fmt_s16_dfp"
            ],
            "called": [
                "core_panic",
                "memset",
                "fmt_lpad",
                "fmt_s32_dec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_pad_data_00003ff4",
            "code": "\nuint copyAndPadData_00003ff4(int destination,uint sourceLength,uint destinationLength,undefined paddingByte)\n\n{\n  uint finalLength;\n  \n  finalLength = sourceLength;\n  if ((sourceLength < destinationLength) && (finalLength = destinationLength, destination != 0)) {\n    memmove((destinationLength - sourceLength) + destination,destination,sourceLength);\n    memset(destination,paddingByte,destinationLength - sourceLength);\n  }\n  return finalLength;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_pad_data_00003ff4",
                "param_1": "destination",
                "param_2": "sourceLength",
                "param_3": "destinationLength",
                "param_4": "paddingByte",
                "uVar1": "finalLength"
            },
            "calling": [
                "fmt_s32_dfp"
            ],
            "called": [
                "memset",
                "memmove"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "convert_string_to_number_00004042",
            "code": "\nvoid convertStringToNumber_00004042(undefined4 inputString)\n\n{\n  strtol(inputString,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "convert_string_to_number_00004042",
                "param_1": "inputString"
            },
            "calling": [
                "read",
                "write"
            ],
            "called": [
                "strtol"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 process_data_0000404c(uint *data_ptr,int *info_ptr)\n\n{\n  int temp_iVar;\n  int *temp_piVar;\n  uint length_uVar;\n  ushort flag_uVar;\n  int temp_iVar;\n  code *callback_func;\n  int temp_iVar;\n  uint temp_uVar;\n  bool is_zero_bVar;\n  \n  flag_uVar = *(ushort *)(info_ptr + 3);\n  length_uVar = (uint)flag_uVar;\n  if ((int)(length_uVar << 0x1c) < 0) {\n    temp_iVar = info_ptr[4];\n    if (temp_iVar != 0) {\n      temp_iVar = length_uVar << 0x1e;\n      is_zero_bVar = temp_iVar == 0;\n      temp_iVar = *info_ptr;\n      if (is_zero_bVar) {\n        temp_iVar = info_ptr[5];\n      }\n      *info_ptr = temp_iVar;\n      if (!is_zero_bVar) {\n        temp_iVar = 0;\n      }\n      info_ptr[2] = temp_iVar;\n      for (temp_iVar = temp_iVar - temp_iVar; 0 < temp_iVar; temp_iVar = temp_iVar - temp_iVar) {\n        temp_iVar = (*(code *)info_ptr[10])(data_ptr,info_ptr[8],temp_iVar,temp_iVar);\n        if (temp_iVar < 1) {\n          *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        temp_iVar = temp_iVar + temp_iVar;\n      }\n    }\n  }\n  else {\n    if ((info_ptr[1] < 1) && (info_ptr[0x10] < 1)) {\n      return 0;\n    }\n    callback_func = (code *)info_ptr[0xb];\n    if (callback_func == (code *)0x0) {\n      return 0;\n    }\n    temp_uVar = *data_ptr;\n    *data_ptr = 0;\n    if ((flag_uVar & 0x1000) == 0) {\n      temp_iVar = (*callback_func)(data_ptr,info_ptr[8],length_uVar & 0x1000,1);\n      if ((temp_iVar == -1) && (length_uVar = *data_ptr, length_uVar != 0)) {\n        if ((length_uVar == 0x1d) || (length_uVar == 0x16)) {\n          *data_ptr = temp_uVar;\n          return 0;\n        }\n        flag_uVar = *(ushort *)(info_ptr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      temp_iVar = info_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(info_ptr + 3) << 0x1d) < 0) &&\n       (temp_iVar = temp_iVar - info_ptr[1], info_ptr[0xd] != 0)) {\n      temp_iVar = temp_iVar - info_ptr[0x10];\n    }\n    temp_iVar = (*(code *)info_ptr[0xb])(data_ptr,info_ptr[8],temp_iVar,0);\n    flag_uVar = *(ushort *)(info_ptr + 3);\n    if ((temp_iVar == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(info_ptr + 3) = flag_uVar | 0x40;\n      return 0xffffffff;\n    }\n    info_ptr[1] = 0;\n    *info_ptr = info_ptr[4];\n    if (((int)((uint)flag_uVar << 0x13) < 0) && ((temp_iVar != -1 || (*data_ptr == 0)))) {\n      info_ptr[0x15] = temp_iVar;\n    }\n    temp_piVar = (int *)info_ptr[0xd];\n    *data_ptr = temp_uVar;\n    if (temp_piVar != (int *)0x0) {\n      if (temp_piVar != info_ptr + 0x11) {\n        _free_r(data_ptr);\n      }\n      info_ptr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "iVar1": "temp_iVar",
                "piVar2": "temp_piVar",
                "uVar3": "length_uVar",
                "uVar4": "flag_uVar",
                "iVar5": "temp_iVar",
                "pcVar6": "callback_func",
                "iVar7": "temp_iVar",
                "uVar8": "temp_uVar",
                "bVar9": "is_zero_bVar"
            },
            "calling": [
                "_fflush_r",
                "__srefill_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "flush_stream_00004158",
            "code": "\nundefined4 flushStream_00004158(int streamPtr,undefined4 *flagsPtr)\n\n{\n  undefined4 result;\n  \n  if (flagsPtr[4] != 0) {\n    if ((streamPtr != 0) && (*(int *)(streamPtr + 0x18) == 0)) {\n      __sinit();\n    }\n    if (flagsPtr == &DAT_000079b8) {\n      flagsPtr = *(undefined4 **)(streamPtr + 4);\n    }\n    else if (flagsPtr == (undefined4 *)&DAT_000079d8) {\n      flagsPtr = *(undefined4 **)(streamPtr + 8);\n    }\n    else if (flagsPtr == (undefined4 *)&DAT_00007998) {\n      flagsPtr = *(undefined4 **)(streamPtr + 0xc);\n    }\n    if (*(short *)(flagsPtr + 3) != 0) {\n      if ((-1 < (int)(flagsPtr[0x19] << 0x1f)) && (-1 < (int)*(short *)(flagsPtr + 3) << 0x16)) {\n        __retarget_lock_acquire_recursive(flagsPtr[0x16]);\n      }\n      result = __sflush_r(streamPtr,flagsPtr);\n      if ((int)(flagsPtr[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(flagsPtr + 3) << 0x16) < 0) {\n        return result;\n      }\n      __retarget_lock_release_recursive(flagsPtr[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "flush_stream_00004158",
                "param_1": "streamPtr",
                "param_2": "flagsPtr",
                "uVar1": "result"
            },
            "calling": [
                "fflush",
                "__swbuf_r",
                "__srefill_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "flush_files_000041d0",
            "code": "\nuint flushFiles_000041d0(int fileDescriptor,undefined4 param2,undefined4 param3)\n\n{\n  uint result;\n  int numModified;\n  dword *relEntry;\n  int symInfo;\n  uint combinedResult;\n  int remaining;\n  undefined4 *bufferPointer;\n  \n  if (fileDescriptor == 0) {\n    bufferPointer = &DAT_000079f8;\n    relEntry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combinedResult = 0;\n    do {\n      remaining = relEntry[1];\n      symInfo = relEntry[2];\n      while (remaining = remaining + -1, -1 < remaining) {\n        if ((1 < *(ushort *)(symInfo + 0xc)) && (numModified = *(short *)(symInfo + 0xe) + 1, numModified != 0)) {\n          result = _fflush_r(0x1fff0284,symInfo,param3,numModified,bufferPointer);\n          combinedResult = combinedResult | result;\n        }\n        symInfo = symInfo + 0x68;\n      }\n      relEntry = (dword *)*relEntry;\n    } while (relEntry != (dword *)0x0);\n    return combinedResult;\n  }\n  combinedResult = _fflush_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,fileDescriptor);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "flush_files_000041d0",
                "param_1": "fileDescriptor",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "iVar2": "numModified",
                "pdVar3": "relEntry",
                "iVar4": "symInfo",
                "uVar5": "combinedResult",
                "iVar6": "remaining",
                "puVar7": "bufferPointer"
            },
            "calling": [
                "print_prompt"
            ],
            "called": [
                "_fflush_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_user_data_000041f4",
            "code": "\nvoid initializeUserData_000041f4(undefined4 *userData,undefined2 value1,undefined2 value2)\n\n{\n  *userData = 0;\n  userData[1] = 0;\n  userData[4] = 0;\n  userData[5] = 0;\n  userData[2] = 0;\n  *(undefined2 *)(userData + 3) = value1;\n  userData[0x19] = 0;\n  *(undefined2 *)((int)userData + 0xe) = value2;\n  userData[6] = 0;\n  memset(userData + 0x17,0,8);\n  userData[9] = 0x4dc9;\n  userData[10] = 0x4def;\n  userData[0xb] = 0x4e27;\n  userData[8] = userData;\n  userData[0xc] = &LAB_00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_user_data_000041f4",
                "param_1": "userData",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "memset"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_memory_00004248",
            "code": "\nundefined4 * allocateMemory_00004248(undefined4 size,int count)\n\n{\n  undefined4 *ptr;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  ptr = (undefined4 *)_malloc_r(size,offset + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = count;\n    ptr[2] = ptr + 3;\n    memset(ptr + 3,0,offset + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_memory_00004248",
                "param_1": "size",
                "param_2": "count",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "memset",
                "_malloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "acquire_recursive_lock_00004274",
            "code": "\nvoid acquireRecursiveLock_00004274(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "acquire_recursive_lock_00004274"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "release_recursive_lock_00004280",
            "code": "\nvoid releaseRecursiveLock_00004280(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "release_recursive_lock_00004280"
            },
            "calling": [
                "__sfp"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "acquire_recursive_lock_0000428c",
            "code": "\nvoid acquireRecursiveLock_0000428c(void)\n\n{\n  __retarget_lock_acquire_recursive(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "acquire_recursive_lock_0000428c"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_000042a4",
            "code": "\nvoid initializeData_000042a4(int dataPointer)\n\n{\n  undefined4 returnValue;\n  \n  __sinit_lock_acquire();\n  if (*(int *)(dataPointer + 0x18) == 0) {\n    *(undefined4 *)(dataPointer + 0x48) = 0;\n    *(undefined4 *)(dataPointer + 0x4c) = 0;\n    *(undefined4 *)(dataPointer + 0x50) = 0;\n    returnValue = 0x1fff0284;\n    *(undefined **)(dataPointer + 0x28) = &DAT_0000423d;\n    if (dataPointer == 0x1fff0284) {\n      returnValue = 1;\n    }\n    if (dataPointer == 0x1fff0284) {\n      *(undefined4 *)(dataPointer + 0x18) = returnValue;\n    }\n    returnValue = __sfp(dataPointer);\n    *(undefined4 *)(dataPointer + 4) = returnValue;\n    returnValue = __sfp(dataPointer);\n    *(undefined4 *)(dataPointer + 8) = returnValue;\n    returnValue = __sfp(dataPointer);\n    *(undefined4 *)(dataPointer + 0xc) = returnValue;\n    std(*(undefined4 *)(dataPointer + 4),4,0);\n    std(*(undefined4 *)(dataPointer + 8),9,1);\n    std(*(undefined4 *)(dataPointer + 0xc),0x12,2);\n    *(undefined4 *)(dataPointer + 0x18) = 1;\n  }\n  __retarget_lock_release_recursive(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_000042a4",
                "param_1": "dataPointer",
                "uVar1": "returnValue"
            },
            "calling": [
                "iprintf",
                "_fflush_r",
                "__swbuf_r",
                "_vfprintf_r",
                "__srefill_r",
                "__sfp",
                "puts",
                "__srget_r",
                "__swsetup_r",
                "getchar",
                "putchar"
            ],
            "called": [
                "std",
                "__sinit_lock_acquire",
                "__sfp",
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "initialize_resources_00004314",
            "code": "\nundefined4 * initializeResources_00004314(undefined4 *resourceArray)\n\n{\n  dword newResource;\n  int numResources;\n  undefined4 *currentResource;\n  dword *resourcePointer;\n  \n  __sfp_lock_acquire();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    __sinit(0x1fff0284);\n  }\n  resourcePointer = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    numResources = resourcePointer[1];\n    currentResource = (undefined4 *)resourcePointer[2];\n    while (numResources = numResources + -1, -1 < numResources) {\n      if (*(short *)(currentResource + 3) == 0) {\n        currentResource[3] = 0xffff0001;\n        currentResource[0x19] = 0;\n        __retarget_lock_init_recursive(currentResource + 0x16);\n        __sfp_lock_release();\n        currentResource[1] = 0;\n        currentResource[2] = 0;\n        currentResource[4] = 0;\n        currentResource[5] = 0;\n        *currentResource = 0;\n        currentResource[6] = 0;\n        memset(currentResource + 0x17,0,8);\n        currentResource[0xd] = 0;\n        currentResource[0xe] = 0;\n        currentResource[0x12] = 0;\n        currentResource[0x13] = 0;\n        return currentResource;\n      }\n      currentResource = currentResource + 0x1a;\n    }\n    if (*resourcePointer == 0) {\n      newResource = __sfmoreglue(resourceArray,4);\n      *resourcePointer = newResource;\n      if (newResource == 0) {\n        __sfp_lock_release();\n        *resourceArray = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    resourcePointer = (dword *)*resourcePointer;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "initialize_resources_00004314",
                "param_1": "resourceArray",
                "dVar1": "newResource",
                "iVar2": "numResources",
                "puVar3": "currentResource",
                "pdVar4": "resourcePointer"
            },
            "calling": [
                "__sinit"
            ],
            "called": [
                "__sfp_lock_acquire",
                "memset",
                "__sfp_lock_release",
                "__sfmoreglue",
                "__sinit",
                "__retarget_lock_init_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_function_000043a0",
            "code": "\nuint processFunction_000043a0(int inputValue,code *functionPtr)\n\n{\n  uint innerResult;\n  int *dataPointer;\n  int count;\n  uint result;\n  int innerCount;\n  \n  dataPointer = (int *)(inputValue + 0x48);\n  result = 0;\n  do {\n    innerCount = dataPointer[1];\n    count = dataPointer[2];\n    while (innerCount = innerCount + -1, -1 < innerCount) {\n      if ((1 < *(ushort *)(count + 0xc)) && (*(short *)(count + 0xe) != -1)) {\n        innerResult = (*functionPtr)(count);\n        result = result | innerResult;\n      }\n      count = count + 0x68;\n    }\n    dataPointer = (int *)*dataPointer;\n  } while (dataPointer != (int *)0x0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_function_000043a0",
                "param_1": "inputValue",
                "param_2": "functionPtr",
                "piVar2": "dataPointer",
                "iVar3": "count",
                "uVar4": "result",
                "iVar5": "innerCount",
                "uVar1": "innerResult"
            },
            "calling": [
                "__srefill_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "read_input_byte_00004418",
            "code": "\nuint read_input_byte_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **input_ptr_ptr;\n  byte *input_ptr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  input_ptr_ptr = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (input_ptr_ptr == (byte **)&DAT_000079b8) {\n    input_ptr_ptr = *(byte ***)(offset + 4);\n  }\n  else if (input_ptr_ptr == (byte **)&DAT_000079d8) {\n    input_ptr_ptr = *(byte ***)(offset + 8);\n  }\n  else if (input_ptr_ptr == (byte **)&DAT_00007998) {\n    input_ptr_ptr = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)input_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(input_ptr_ptr + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(input_ptr_ptr[0x16]);\n  }\n  input_ptr = input_ptr_ptr[1];\n  input_ptr_ptr[1] = input_ptr + -1;\n  if ((int)(input_ptr + -1) < 0) {\n    result = __srget_r(offset,input_ptr_ptr);\n  }\n  else {\n    input_ptr = *input_ptr_ptr;\n    *input_ptr_ptr = input_ptr + 1;\n    result = (uint)*input_ptr;\n  }\n  if ((-1 < (int)input_ptr_ptr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(input_ptr_ptr + 3) << 0x16))) {\n    __retarget_lock_release_recursive(input_ptr_ptr[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "read_input_byte_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "input_ptr_ptr",
                "pbVar4": "input_ptr"
            },
            "calling": [
                "readline"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__srget_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "convert_time_to_date_time_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * convertTimeToDateTime_0000443c(undefined4 *timeInput,uint *dateTimeOutput)\n\n{\n  int leapYears;\n  uint totalDays;\n  uint days;\n  uint years;\n  uint months;\n  undefined4 year;\n  undefined4 month;\n  uint weekDay;\n  bool isNegative;\n  \n  year = *timeInput;\n  month = timeInput[1];\n  leapYears = __aeabi_ldivmod(year,month,0x15180,0);\n  days = 0x15180;\n  __aeabi_ldivmod(year,month,0x15180,0);\n  isNegative = (int)days < 0;\n  if (isNegative) {\n    days = days + 0x15180;\n  }\n  if (isNegative) {\n    totalDays = leapYears + 0xafa6b;\n  }\n  else {\n    totalDays = leapYears + 0xafa6c;\n  }\n  dateTimeOutput[2] = days / 0xe10;\n  dateTimeOutput[1] = (days % 0xe10) / 0x3c;\n  *dateTimeOutput = (days % 0xe10) % 0x3c;\n  dateTimeOutput[6] = (totalDays + 3) % 7;\n  days = totalDays;\n  if ((int)totalDays < 0) {\n    days = totalDays - 0x23ab0;\n  }\n  totalDays = (days / 0x23ab1) * -0x23ab1 + totalDays;\n  years = ((totalDays / 0x8eac + totalDays) - totalDays / 0x5b4) - totalDays / 0x23ab0;\n  months = years / 0x16d;\n  totalDays = (months / 100 - years / 0x5b4) + totalDays + months * -0x16d;\n  weekDay = totalDays * 5 + 2;\n  years = weekDay / 0x99;\n  if (weekDay < 0x5fa) {\n    leapYears = 2;\n  }\n  else {\n    leapYears = -10;\n  }\n  weekDay = years + leapYears;\n  leapYears = (days / 0x23ab1) * 400 + months;\n  if (weekDay < 2) {\n    leapYears = leapYears + 1;\n  }\n  if (totalDays < 0x132) {\n    if (((months & 3) == 0) && (months != (months / 100) * 100)) {\n      days = 1;\n    }\n    else {\n      days = (uint)(months % 400 == 0);\n    }\n    days = totalDays + 0x3b + days;\n  }\n  else {\n    days = totalDays - 0x132;\n  }\n  dateTimeOutput[7] = days;\n  dateTimeOutput[3] = (totalDays + 1) - (years * 0x99 + 2) / 5;\n  dateTimeOutput[4] = weekDay;\n  dateTimeOutput[5] = leapYears - 0x76c;\n  dateTimeOutput[8] = 0;\n  return dateTimeOutput;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "convert_time_to_date_time_0000443c",
                "param_1": "timeInput",
                "param_2": "dateTimeOutput",
                "uVar6": "year",
                "uVar7": "month",
                "iVar1": "leapYears",
                "uVar2": "totalDays",
                "uVar3": "days",
                "uVar4": "years",
                "uVar5": "months",
                "uVar8": "weekDay",
                "bVar9": "isNegative"
            },
            "calling": [
                "rtc_get_alarm",
                "rtc_get_time"
            ],
            "called": [
                "__aeabi_ldivmod"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "initialize_and_execute_0000459c",
            "code": "\nvoid initialize_and_execute_0000459c(void)\n\n{\n  code **function_ptr;\n  int loop_index;\n  \n  function_ptr = (code **)&DAT_00007c58;\n  for (loop_index = 0; loop_index != 0; loop_index = loop_index + 1) {\n    (**function_ptr)();\n    function_ptr = function_ptr + 1;\n  }\n  _init();\n  function_ptr = (code **)&DAT_00007c58;\n  for (loop_index = 0; loop_index != 0; loop_index = loop_index + 1) {\n    (**function_ptr)();\n    function_ptr = function_ptr + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "initialize_and_execute_0000459c",
                "ppcVar1": "function_ptr",
                "iVar2": "loop_index"
            },
            "calling": [
                "reset_handler_default"
            ],
            "called": [
                "_init"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "__sfp"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "__sinit_lock_acquire",
                "_fflush_r",
                "__env_lock",
                "__sfp_lock_acquire",
                "__malloc_lock",
                "_vfprintf_r",
                "puts",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "__env_unlock",
                "_fflush_r",
                "__malloc_unlock",
                "_vfprintf_r",
                "puts",
                "__sfp_lock_release",
                "__sinit",
                "getchar",
                "putchar"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_000045ee",
            "code": "\nvoid copyAndReverse_000045ee(undefined *source,undefined *destination,int length)\n\n{\n  undefined *srcPtr;\n  undefined *destPtr;\n  \n  destPtr = destination + length;\n  if ((destination < source) && (source < destPtr)) {\n    srcPtr = source + length;\n    while (srcPtr != source) {\n      destPtr = destPtr + -1;\n      srcPtr = srcPtr + -1;\n      *srcPtr = *destPtr;\n    }\n  }\n  else {\n    source = source + -1;\n    for (; destination != destPtr; destination = destination + 1) {\n      source = source + 1;\n      *source = *destination;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_000045ee",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "puVar1": "srcPtr",
                "puVar2": "destPtr"
            },
            "calling": [
                "fmt_lpad"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "memset_with_value_00004622",
            "code": "\nvoid memset_with_value_00004622(undefined *destination,undefined value,int num_elements)\n\n{\n  undefined *end_of_destination;\n  \n  end_of_destination = destination + num_elements;\n  for (; destination != end_of_destination; destination = destination + 1) {\n    *destination = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "memset_with_value_00004622",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "num_elements",
                "puVar1": "end_of_destination"
            },
            "calling": [
                "std",
                "fmt_lpad",
                "__sfp",
                "fmt_s32_dfp",
                "__sfmoreglue",
                "write"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_calendar_00004634",
            "code": "\nvoid updateCalendar_00004634(uint *calendar,uint days,undefined4 extraDays)\n\n{\n  int daysToAdd;\n  uint tempVar;\n  uint tempVar2;\n  int daysInMonth;\n  bool isNegative;\n  uint *tempArray;\n  uint remainingDays;\n  undefined4 extraDaysTemp;\n  \n  tempArray = calendar;\n  remainingDays = days;\n  extraDaysTemp = extraDays;\n  if (0x3b < *calendar) {\n    div(&tempArray,*calendar,0x3c);\n    tempVar = calendar[1] + (int)tempArray;\n    calendar[1] = tempVar;\n    if ((int)remainingDays < 0) {\n      tempVar = tempVar - 1;\n      *calendar = remainingDays + 0x3c;\n    }\n    else {\n      *calendar = remainingDays;\n    }\n    if ((int)remainingDays < 0) {\n      calendar[1] = tempVar;\n    }\n  }\n  if (0x3b < calendar[1]) {\n    div(&tempArray,calendar[1],0x3c);\n    isNegative = (int)remainingDays < 0;\n    tempVar2 = calendar[2] + (int)tempArray;\n    calendar[2] = tempVar2;\n    tempVar = remainingDays;\n    if (isNegative) {\n      tempVar = remainingDays + 0x3c;\n      tempVar2 = tempVar2 - 1;\n    }\n    if (!isNegative) {\n      calendar[1] = tempVar;\n    }\n    if (isNegative) {\n      calendar[1] = tempVar;\n    }\n    if (isNegative) {\n      calendar[2] = tempVar2;\n    }\n  }\n  if (0x17 < calendar[2]) {\n    div(&tempArray,calendar[2],0x18);\n    isNegative = (int)remainingDays < 0;\n    tempVar2 = calendar[3] + (int)tempArray;\n    calendar[3] = tempVar2;\n    tempVar = remainingDays;\n    if (isNegative) {\n      tempVar = remainingDays + 0x18;\n      tempVar2 = tempVar2 - 1;\n    }\n    if (!isNegative) {\n      calendar[2] = tempVar;\n    }\n    if (isNegative) {\n      calendar[2] = tempVar;\n    }\n    if (isNegative) {\n      calendar[3] = tempVar2;\n    }\n  }\n  if (0xb < calendar[4]) {\n    div(&tempArray,calendar[4],0xc);\n    isNegative = (int)remainingDays < 0;\n    tempVar = calendar[5] + (int)tempArray;\n    calendar[5] = tempVar;\n    if (isNegative) {\n      remainingDays = remainingDays + 0xc;\n      tempVar = tempVar - 1;\n    }\n    if (!isNegative) {\n      calendar[4] = remainingDays;\n    }\n    if (isNegative) {\n      calendar[4] = remainingDays;\n    }\n    if (isNegative) {\n      calendar[5] = tempVar;\n    }\n  }\n  tempVar = calendar[5];\n  if ((tempVar & 3) == 0) {\n    if (tempVar == (tempVar / 100) * 100) {\n      if ((tempVar + 0x76c) % 400 == 0) {\n        daysInMonth = 0x1d;\n      }\n      else {\n        daysInMonth = 0x1c;\n      }\n    }\n    else {\n      daysInMonth = 0x1d;\n    }\n  }\n  else {\n    daysInMonth = 0x1c;\n  }\n  if ((int)calendar[3] < 1) {\n    while ((int)calendar[3] < 1) {\n      tempVar = calendar[4];\n      calendar[4] = tempVar - 1;\n      if (tempVar - 1 == 0xffffffff) {\n        tempVar2 = calendar[5];\n        tempVar = tempVar2 - 1;\n        calendar[4] = 0xb;\n        calendar[5] = tempVar;\n        if ((tempVar & 3) == 0) {\n          if (tempVar == (tempVar / 100) * 100) {\n            if ((tempVar2 + 0x76b) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n      daysToAdd = daysInMonth;\n      if (calendar[4] != 1) {\n        daysToAdd = (&DAT_000079fc)[calendar[4]];\n      }\n      calendar[3] = daysToAdd + calendar[3];\n    }\n  }\n  else {\n    while( true ) {\n      tempVar = calendar[4];\n      daysToAdd = daysInMonth;\n      if (tempVar != 1) {\n        daysToAdd = (&DAT_000079fc)[tempVar];\n      }\n      if ((int)calendar[3] <= daysToAdd) break;\n      calendar[3] = calendar[3] - daysToAdd;\n      calendar[4] = tempVar + 1;\n      if (tempVar + 1 == 0xc) {\n        tempVar2 = calendar[5];\n        tempVar = tempVar2 + 1;\n        calendar[4] = 0;\n        calendar[5] = tempVar;\n        if ((tempVar & 3) == 0) {\n          if (tempVar % 100 == 0) {\n            if ((tempVar2 + 0x76d) % 400 == 0) {\n              daysInMonth = 0x1d;\n            }\n            else {\n              daysInMonth = 0x1c;\n            }\n          }\n          else {\n            daysInMonth = 0x1d;\n          }\n        }\n        else {\n          daysInMonth = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_calendar_00004634",
                "param_1": "calendar",
                "param_2": "days",
                "param_3": "extraDays",
                "iVar1": "daysToAdd",
                "uVar2": "tempVar",
                "uVar3": "tempVar2",
                "iVar4": "daysInMonth",
                "bVar5": "isNegative",
                "local_20": "tempArray",
                "local_1c": "remainingDays",
                "uStack_18": "extraDaysTemp"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "div"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_offset_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateOffset_000047e4(int *dateInfo)\n\n{\n  longlong daysOffset;\n  longlong temp;\n  int *tzinfo;\n  uint remainder;\n  int leapYearAdj;\n  int temp1;\n  int adjustedDays;\n  uint dstStart;\n  uint loopVar1;\n  uint tzOffset;\n  int totalDays;\n  uint year;\n  uint isNegative;\n  uint dstEnd;\n  uint daysOffsetLower;\n  bool isLeapYear;\n  \n  tzinfo = (int *)__gettzinfo();\n  validate_structure(dateInfo);\n  year = dateInfo[5];\n  totalDays = dateInfo[3] + -1 + *(int *)(&DAT_00007a2c + dateInfo[4] * 4);\n  if (((1 < dateInfo[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    totalDays = totalDays + 1;\n  }\n  dateInfo[7] = totalDays;\n  if (20000 < (int)&DAT_00002710 + year) {\n    adjustedDays = -1;\n    leapYearAdj = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (loopVar1 = 0x45; (int)year < (int)loopVar1; loopVar1 = loopVar1 - 1) {\n        if ((loopVar1 & 3) == 0) {\n          if (loopVar1 == (loopVar1 / 100) * 100) {\n            if ((loopVar1 + 0x76c) % 400 == 0) {\n              adjustedDays = 0x16e;\n            }\n            else {\n              adjustedDays = 0x16d;\n            }\n          }\n          else {\n            adjustedDays = 0x16e;\n          }\n        }\n        else {\n          adjustedDays = 0x16d;\n        }\n        totalDays = totalDays - adjustedDays;\n      }\n      if ((loopVar1 & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          adjustedDays = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            adjustedDays = 0x16e;\n          }\n        }\n        else {\n          adjustedDays = 0x16e;\n        }\n      }\n      else {\n        adjustedDays = 0x16d;\n      }\n      totalDays = totalDays - adjustedDays;\n    }\n  }\n  else {\n    loopVar1 = 0x46;\n    do {\n      if ((loopVar1 & 3) == 0) {\n        if (loopVar1 % 100 == 0) {\n          if ((loopVar1 + 0x76c) % 400 == 0) {\n            adjustedDays = 0x16e;\n          }\n          else {\n            adjustedDays = 0x16d;\n          }\n        }\n        else {\n          adjustedDays = 0x16e;\n        }\n      }\n      else {\n        adjustedDays = 0x16d;\n      }\n      loopVar1 = loopVar1 + 1;\n      totalDays = totalDays + adjustedDays;\n    } while (year != loopVar1);\n  }\n  daysOffset = (longlong)totalDays * 0x15180 + (longlong)(dateInfo[2] * 0xe10 + dateInfo[1] * 0x3c + *dateInfo)\n  ;\n  daysOffsetLower = (uint)daysOffset;\n  adjustedDays = (int)((ulonglong)daysOffset >> 0x20);\n  __tz_lock();\n  _tzset_unlocked();\n  loopVar1 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = tzinfo[10];\n    adjustedDays = (uint)daysOffset + year;\n    leapYearAdj = (int)((ulonglong)daysOffset >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)daysOffset,year);\n  }\n  else {\n    dstEnd = dateInfo[8];\n    isNegative = dstEnd;\n    if (0 < (int)dstEnd) {\n      isNegative = 1;\n    }\n    if ((tzinfo[1] == dateInfo[5] + 0x76c) || (leapYearAdj = __tzcalc_limits(), leapYearAdj != 0)) {\n      tzOffset = tzinfo[0x14];\n      remainder = tzinfo[0x12];\n      dstStart = tzinfo[10];\n      loopVar1 = remainder - dstStart;\n      leapYearAdj = (tzinfo[0x13] - ((int)dstStart >> 0x1f)) - (uint)(remainder < dstStart);\n      if (((int)((adjustedDays - leapYearAdj) - (uint)(daysOffsetLower < loopVar1)) < 0 ==\n           (SBORROW4(adjustedDays,leapYearAdj) != SBORROW4(adjustedDays - leapYearAdj,(uint)(daysOffsetLower < loopVar1)))) &&\n         (temp1 = (tzinfo[0x13] - ((int)tzOffset >> 0x1f)) - (uint)(remainder < tzOffset),\n         isLeapYear = daysOffsetLower < remainder - tzOffset,\n         (int)((adjustedDays - temp1) - (uint)isLeapYear) < 0 !=\n         (SBORROW4(adjustedDays,temp1) != SBORROW4(adjustedDays - temp1,(uint)isLeapYear)))) goto LAB_00004a88;\n      remainder = tzinfo[8] - tzOffset;\n      temp1 = (tzinfo[9] - ((int)tzOffset >> 0x1f)) - (uint)((uint)tzinfo[8] < tzOffset);\n      if (*tzinfo != 0) {\n        if ((int)((adjustedDays - temp1) - (uint)(daysOffsetLower < remainder)) < 0 ==\n            (SBORROW4(adjustedDays,temp1) != SBORROW4(adjustedDays - temp1,(uint)(daysOffsetLower < remainder))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        loopVar1 = 0;\n        if ((int)dstEnd < 0) goto LAB_00004934;\nLAB_00004a14:\n        daysOffsetLower = isNegative ^ loopVar1;\n        isNegative = loopVar1;\n        if (daysOffsetLower == 1) {\n          if (loopVar1 == 0) {\n            adjustedDays = tzOffset - dstStart;\n          }\n          else {\n            adjustedDays = dstStart - tzOffset;\n          }\n          leapYearAdj = dateInfo[3];\n          *dateInfo = *dateInfo + adjustedDays;\n          temp = daysOffset + adjustedDays;\n          validate_structure(dateInfo);\n          leapYearAdj = dateInfo[3] - leapYearAdj;\n          daysOffset = daysOffset + adjustedDays;\n          if (leapYearAdj != 0) {\n            if (leapYearAdj < 2) {\n              if (leapYearAdj == -2 || leapYearAdj + 2 < 0 != SCARRY4(leapYearAdj,2)) {\n                leapYearAdj = 1;\n              }\n            }\n            else {\n              leapYearAdj = -1;\n            }\n            adjustedDays = leapYearAdj + dateInfo[7];\n            totalDays = totalDays + leapYearAdj;\n            if (adjustedDays < 0) {\n              loopVar1 = year - 1;\n              if ((loopVar1 & 3) == 0) {\n                if (loopVar1 == (loopVar1 / 100) * 100) {\n                  adjustedDays = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    adjustedDays = 0x16c;\n                  }\n                }\n                else {\n                  adjustedDays = 0x16d;\n                }\n              }\n              else {\n                adjustedDays = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  leapYearAdj = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    leapYearAdj = 0x16e;\n                  }\n                }\n                else {\n                  leapYearAdj = 0x16e;\n                }\n              }\n              else {\n                leapYearAdj = 0x16d;\n              }\n              if (leapYearAdj <= adjustedDays) {\n                adjustedDays = adjustedDays - leapYearAdj;\n              }\n            }\n            dateInfo[7] = adjustedDays;\n            daysOffset = temp;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((adjustedDays - temp1) - (uint)(daysOffsetLower < remainder)) < 0 !=\n          (SBORROW4(adjustedDays,temp1) != SBORROW4(adjustedDays - temp1,(uint)(daysOffsetLower < remainder)))) {\nLAB_0000491e:\n        if ((int)((adjustedDays - leapYearAdj) - (uint)(daysOffsetLower < loopVar1)) < 0 ==\n            (SBORROW4(adjustedDays,leapYearAdj) != SBORROW4(adjustedDays - leapYearAdj,(uint)(daysOffsetLower < loopVar1))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)dstEnd) {\n        loopVar1 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      loopVar1 = isNegative;\n      if (isNegative != 1) goto LAB_00004934;\n    }\n    year = tzinfo[0x14];\n    adjustedDays = (uint)daysOffset + year;\n    leapYearAdj = (int)((ulonglong)daysOffset >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)daysOffset,year);\n    loopVar1 = 1;\n  }\n  __tz_unlock();\n  dateInfo[8] = loopVar1;\n  dateInfo[6] = (totalDays + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(leapYearAdj,adjustedDays);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_offset_000047e4",
                "param_1": "dateInfo",
                "lVar1": "daysOffset",
                "lVar2": "temp",
                "piVar3": "tzinfo",
                "uVar4": "remainder",
                "iVar5": "leapYearAdj",
                "iVar6": "temp1",
                "iVar7": "adjustedDays",
                "uVar8": "dstStart",
                "uVar9": "loopVar1",
                "uVar10": "tzOffset",
                "iVar11": "totalDays",
                "uVar12": "year",
                "uVar13": "isNegative",
                "uVar14": "dstEnd",
                "uVar15": "daysOffsetLower",
                "bVar16": "isLeapYear"
            },
            "calling": [
                "rtc_set_time",
                "rtc_set_alarm"
            ],
            "called": [
                "_tzset_unlocked",
                "__tz_unlock",
                "__gettzinfo",
                "__tz_lock",
                "__tzcalc_limits",
                "validate_structure"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "insert_into_linked_list_00004b34",
            "code": "\nvoid insertIntoLinkedList_00004b34(undefined4 *list,int value,undefined4 param3,undefined4 param4)\n\n{\n  int *currentNode;\n  int **nextNode;\n  int **previousNode;\n  int **currentNodePointer;\n  int **nextNodePointer;\n  int **newNodePointer;\n  bool isLastNode;\n  \n  if (value == 0) {\n    return;\n  }\n  newNodePointer = (int **)(value + -4);\n  if (*(int *)(value + -4) < 0) {\n    newNodePointer = (int **)((int)newNodePointer + *(int *)(value + -4));\n  }\n  __malloc_lock();\n  currentNodePointer = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newNodePointer[1] = (int *)0x0;\n    previousNode = nextNode;\n    DAT_1fff0db4 = newNodePointer;\n  }\n  else {\n    nextNodePointer = DAT_1fff0db4;\n    if (newNodePointer < DAT_1fff0db4) {\n      previousNode = (int **)*newNodePointer;\n      currentNodePointer = (int **)((int)newNodePointer + (int)previousNode);\n      isLastNode = DAT_1fff0db4 == currentNodePointer;\n      if (isLastNode) {\n        currentNodePointer = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newNodePointer[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newNodePointer;\n      if (isLastNode) {\n        currentNodePointer = (int **)((int)currentNodePointer + (int)previousNode);\n        *newNodePointer = (int *)currentNodePointer;\n      }\n    }\n    else {\n      do {\n        currentNodePointer = nextNodePointer;\n        nextNodePointer = (int **)currentNodePointer[1];\n        if (nextNodePointer == (int **)0x0) break;\n      } while (nextNodePointer <= newNodePointer);\n      previousNode = (int **)*currentNodePointer;\n      if ((int **)((int)currentNodePointer + (int)previousNode) == newNodePointer) {\n        previousNode = (int **)((int)previousNode + (int)*newNodePointer);\n        *currentNodePointer = (int *)previousNode;\n        if (nextNodePointer == (int **)((int)currentNodePointer + (int)previousNode)) {\n          currentNode = *nextNodePointer;\n          currentNodePointer[1] = nextNodePointer[1];\n          previousNode = (int **)((int)previousNode + (int)currentNode);\n          *currentNodePointer = (int *)previousNode;\n        }\n      }\n      else if (newNodePointer < (int **)((int)currentNodePointer + (int)previousNode)) {\n        *list = 0xc;\n      }\n      else {\n        previousNode = (int **)((int)newNodePointer + (int)*newNodePointer);\n        isLastNode = nextNodePointer == previousNode;\n        if (isLastNode) {\n          previousNode = (int **)*nextNodePointer;\n          nextNodePointer = (int **)nextNodePointer[1];\n        }\n        newNodePointer[1] = (int *)nextNodePointer;\n        if (isLastNode) {\n          previousNode = (int **)((int)previousNode + (int)*newNodePointer);\n          *newNodePointer = (int *)previousNode;\n        }\n        currentNodePointer[1] = (int *)newNodePointer;\n      }\n    }\n  }\n  __malloc_unlock(list,previousNode,currentNodePointer,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "insert_into_linked_list_00004b34",
                "param_1": "list",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "currentNode",
                "extraout_r1": "nextNode",
                "ppiVar2": "previousNode",
                "ppiVar3": "currentNodePointer",
                "ppiVar4": "nextNodePointer",
                "ppiVar5": "newNodePointer",
                "bVar6": "isLastNode"
            },
            "calling": [
                "__ssrefill_r",
                "__srefill_r",
                "free",
                "__swsetup_r",
                "_realloc_r",
                "__sflush_r"
            ],
            "called": [
                "__malloc_unlock",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocateMemory_00004bd0(undefined4 *errorStatus,uint size,undefined4 param3,undefined4 param4)\n\n{\n  uint *currBlock;\n  int offset;\n  uint blockSizeDiff;\n  uint *prevBlock;\n  uint adjustedSize;\n  \n  adjustedSize = (size + 3 & 0xfffffffc) + 8;\n  if (adjustedSize < 0xc) {\n    adjustedSize = 0xc;\n  }\n  if (((int)adjustedSize < 0) || (adjustedSize < size)) {\n    *errorStatus = 0xc;\n  }\n  else {\n    __malloc_lock();\n    currBlock = DAT_1fff0db4;\n    for (prevBlock = DAT_1fff0db4; prevBlock != (uint *)0x0; prevBlock = (uint *)prevBlock[1]) {\n      blockSizeDiff = *prevBlock - adjustedSize;\n      if (-1 < (int)blockSizeDiff) {\n        if (0xb < blockSizeDiff) {\n          *prevBlock = blockSizeDiff;\n          prevBlock = (uint *)((int)prevBlock + blockSizeDiff);\n          goto LAB_00004c34;\n        }\n        if (currBlock == prevBlock) {\n          DAT_1fff0db4 = (uint *)prevBlock[1];\n        }\n        if (currBlock != prevBlock) {\n          currBlock[1] = (uint)(uint *)prevBlock[1];\n        }\n        goto LAB_00004c42;\n      }\n      currBlock = prevBlock;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = _sbrk_r(errorStatus,0,currBlock,0,param4);\n    }\n    currBlock = (uint *)_sbrk_r(errorStatus,adjustedSize);\n    if ((currBlock != (uint *)0xffffffff) &&\n       ((prevBlock = (uint *)((int)currBlock + 3U & 0xfffffffc), currBlock == prevBlock ||\n        (offset = _sbrk_r(errorStatus,(int)prevBlock - (int)currBlock), offset != -1)))) {\nLAB_00004c34:\n      *prevBlock = adjustedSize;\nLAB_00004c42:\n      __malloc_unlock(errorStatus);\n      adjustedSize = (int)prevBlock + 0xbU & 0xfffffff8;\n      offset = adjustedSize - (int)(prevBlock + 1);\n      if (offset == 0) {\n        return adjustedSize;\n      }\n      *(uint *)((int)prevBlock + offset) = (int)(prevBlock + 1) - adjustedSize;\n      return adjustedSize;\n    }\n    *errorStatus = 0xc;\n    __malloc_unlock(errorStatus);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "errorStatus",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "currBlock",
                "iVar2": "offset",
                "uVar3": "blockSizeDiff",
                "puVar4": "prevBlock",
                "uVar5": "adjustedSize"
            },
            "calling": [
                "_tzset_unlocked",
                "__smakebuf_r",
                "__submore",
                "_realloc_r",
                "__sfmoreglue"
            ],
            "called": [
                "__malloc_unlock",
                "_sbrk_r",
                "__malloc_lock"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "print_formatted_output_00004c84",
            "code": "\nvoid printFormattedOutput_00004c84(undefined4 formatString,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  dword sectionOffset;\n  undefined4 tmpParam1;\n  undefined4 tmpParam2;\n  undefined4 tmpParam3;\n  undefined4 tmpParam4;\n  \n  sectionOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  tmpParam1 = formatString;\n  tmpParam2 = arg1;\n  tmpParam3 = arg2;\n  tmpParam4 = arg3;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  _vfprintf_r(sectionOffset,*(undefined4 *)(sectionOffset + 8),formatString,&tmpParam2,tmpParam1,&tmpParam2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "print_formatted_output_00004c84",
                "param_1": "formatString",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3",
                "dVar1": "sectionOffset",
                "uVar2": "tmpParam1",
                "uStack_c": "tmpParam2",
                "uStack_8": "tmpParam3",
                "uStack_4": "tmpParam4"
            },
            "calling": [
                "cpu_print_last_instruction",
                "handle_input_line",
                "ps",
                "_print_time",
                "phydat_dump",
                "write",
                "list",
                "probe",
                "core_panic",
                "_saul",
                "read",
                "_rtc_handler",
                "print_help"
            ],
            "called": [
                "_vfprintf_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "write_char_00004cb4",
            "code": "\nuint writeChar_00004cb4(uint character)\n\n{\n  dword relOffset;\n  undefined4 *buffer;\n  uint count;\n  undefined *bufferPtr;\n  undefined4 arg4;\n  undefined4 arg5;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  buffer = *(undefined4 **)(relOffset + 8);\n  if ((relOffset != 0) && (*(int *)(relOffset + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(undefined4 **)(relOffset + 4);\n  }\n  else if (buffer == (undefined4 *)&DAT_000079d8) {\n    buffer = *(undefined4 **)(relOffset + 8);\n  }\n  else if (buffer == (undefined4 *)&DAT_00007998) {\n    buffer = *(undefined4 **)(relOffset + 0xc);\n  }\n  if ((-1 < (int)(buffer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(buffer[0x16]);\n  }\n  count = buffer[2] - 1;\n  buffer[2] = count;\n  if (((int)count < 0) && (((int)count < (int)buffer[6] || (count = character & 0xff, count == 10))))\n  {\n    character = __swbuf_r(relOffset,character,buffer,count,arg4,arg5);\n  }\n  else {\n    bufferPtr = (undefined *)*buffer;\n    *buffer = bufferPtr + 1;\n    *bufferPtr = (char)character;\n    character = character & 0xff;\n  }\n  if ((-1 < (int)(buffer[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x16))) {\n    __retarget_lock_release_recursive(buffer[0x16]);\n  }\n  return character;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "write_char_00004cb4",
                "param_1": "character",
                "dVar1": "relOffset",
                "puVar2": "buffer",
                "uVar3": "count",
                "puVar4": "bufferPtr",
                "unaff_r4": "arg4",
                "unaff_r5": "arg5"
            },
            "calling": [
                "_putchar"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_00004db8",
            "code": "\nundefined4 processData_00004db8(int input)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *stringEnd;\n  char **stringParams;\n  undefined4 returnValue;\n  char *ptr1;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit();\n  }\n  stringParams = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    __sinit(offset);\n  }\n  if (stringParams == (char **)&DAT_000079b8) {\n    stringParams = *(char ***)(offset + 4);\n  }\n  else if (stringParams == (char **)&DAT_000079d8) {\n    stringParams = *(char ***)(offset + 8);\n  }\n  else if (stringParams == (char **)&DAT_00007998) {\n    stringParams = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)stringParams[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringParams + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(stringParams[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(stringParams + 3) << 0x1c) < 0) && (stringParams[4] != (char *)0x0)) ||\n     (result = __swsetup_r(offset,stringParams), result == 0)) {\n    ptr1 = (char *)(input + -1);\n    do {\n      while( true ) {\n        ptr1 = ptr1 + 1;\n        currentChar = *ptr1;\n        stringEnd = stringParams[2] + -1;\n        stringParams[2] = stringEnd;\n        if (currentChar == '\\0') {\n          if (-1 < (int)stringEnd) {\n            ptr1 = *stringParams;\n            returnValue = 10;\n            *stringParams = ptr1 + 1;\n            *ptr1 = '\\n';\n            goto LAB_00004d64;\n          }\n          result = __swbuf_r(offset,10,stringParams);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)stringEnd < 0) && (((int)stringEnd < (int)stringParams[6] || (currentChar == '\\n')))) break;\n        stringEnd = *stringParams;\n        *stringParams = stringEnd + 1;\n        *stringEnd = currentChar;\n      }\n      result = __swbuf_r(offset,currentChar,stringParams);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)stringParams[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(stringParams + 3) << 0x16))) {\n    __retarget_lock_release_recursive(stringParams[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_00004db8",
                "param_1": "input",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "stringEnd",
                "pcVar7": "ptr1",
                "ppcVar5": "stringParams",
                "uVar6": "returnValue"
            },
            "calling": [
                "handle_input_line",
                "main",
                "phydat_dump",
                "_rtc_settime",
                "_rtc_usage",
                "write",
                "list",
                "_rtc_setalarm",
                "read",
                "_rtc_gettime",
                "_rtc_getalarm",
                "probe_all",
                "_alarm_handler",
                "print_help"
            ],
            "called": [
                "__retarget_lock_acquire_recursive",
                "__swbuf_r",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 value,int data)\n\n{\n  int readResult;\n  uint updatedValue;\n  bool isSuccessful;\n  \n  readResult = _read_r(value,(int)*(short *)(data + 0xe));\n  isSuccessful = -1 < readResult;\n  if (isSuccessful) {\n    updatedValue = *(int *)(data + 0x54) + readResult;\n  }\n  else {\n    updatedValue = *(ushort *)(data + 0xc) & 0xffffefff;\n  }\n  if (isSuccessful) {\n    *(uint *)(data + 0x54) = updatedValue;\n  }\n  if (!isSuccessful) {\n    *(short *)(data + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "value",
                "param_2": "data",
                "iVar1": "readResult",
                "uVar2": "updatedValue",
                "bVar3": "isSuccessful"
            },
            "calling": [],
            "called": [
                "_read_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "write_data_00004dee",
            "code": "\nundefined4 write_data_00004dee(undefined4 file_descriptor,int buffer_address,undefined4 data_address,undefined4 data_length)\n\n{\n  undefined4 write_result;\n  \n  if ((int)((uint)*(ushort *)(buffer_address + 0xc) << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(buffer_address + 0xe),0,2);\n  }\n  *(ushort *)(buffer_address + 0xc) = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  write_result = uart_stdio_write(data_address,data_length);\n  return write_result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "write_data_00004dee",
                "param_1": "file_descriptor",
                "param_2": "buffer_address",
                "param_3": "data_address",
                "param_4": "data_length",
                "uVar1": "write_result"
            },
            "calling": [],
            "called": [
                "_lseek_r",
                "uart_stdio_write"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_file_pointer_00004e26",
            "code": "\nvoid updateFilePointer_00004e26(undefined4 fileDescriptor,int dataStructure)\n\n{\n  int fileOffset;\n  ushort newStatusFlags;\n  bool isSeekError;\n  \n  fileOffset = _lseek_r(fileDescriptor,(int)*(short *)(dataStructure + 0xe));\n  isSeekError = fileOffset == -1;\n  if (isSeekError) {\n    newStatusFlags = *(ushort *)(dataStructure + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(dataStructure + 0x54) = fileOffset;\n    newStatusFlags = *(ushort *)(dataStructure + 0xc) | 0x1000;\n  }\n  if (isSeekError) {\n    *(ushort *)(dataStructure + 0xc) = newStatusFlags;\n  }\n  if (!isSeekError) {\n    *(ushort *)(dataStructure + 0xc) = newStatusFlags;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_file_pointer_00004e26",
                "param_1": "fileDescriptor",
                "param_2": "dataStructure",
                "iVar1": "fileOffset",
                "uVar2": "newStatusFlags",
                "bVar3": "isSeekError"
            },
            "calling": [],
            "called": [
                "_lseek_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compareByteArrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte byte1;\n  uint byte2;\n  bool isEqual;\n  \n  do {\n    byte2 = (uint)*array1;\n    byte1 = *array2;\n    isEqual = byte2 == 1;\n    if (byte2 != 0) {\n      isEqual = byte2 == byte1;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (isEqual);\n  return byte2 - byte1;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "array1",
                "param_2": "array2",
                "bVar1": "byte1",
                "uVar2": "byte2",
                "bVar3": "isEqual"
            },
            "calling": [
                "handle_input_line",
                "_saul",
                "_tzset_unlocked",
                "read",
                "find_handler",
                "strcmp"
            ],
            "called": [
                "strcmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_bytes_00004e66",
            "code": "\nint compareBytes_00004e66(byte *byteArray1,int len1,int len2)\n\n{\n  byte *ptr1;\n  int result;\n  byte *ptr2;\n  uint byteValue;\n  \n  if (len2 == 0) {\n    result = 0;\n  }\n  else {\n    ptr2 = (byte *)(len1 + -1);\n    ptr1 = byteArray1;\n    do {\n      byteValue = (uint)*ptr1;\n      ptr2 = ptr2 + 1;\n      if ((byteValue != *ptr2) || (ptr1 + 1 == byteArray1 + len2)) break;\n      ptr1 = ptr1 + 1;\n    } while (byteValue != 0);\n    result = byteValue - *ptr2;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_bytes_00004e66",
                "param_1": "byteArray1",
                "param_2": "len1",
                "param_3": "len2",
                "pbVar1": "ptr1",
                "iVar2": "result",
                "pbVar3": "ptr2",
                "uVar4": "byteValue"
            },
            "calling": [
                "_findenv_r",
                "_rtc_handler"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_integer_00004f84",
            "code": "\nuint parseInteger_00004f84(byte *inputString,byte **resultPtr,uint base)\n\n{\n  uint parsedInteger;\n  uint currentChar;\n  uint isNegative;\n  uint digitValue;\n  int comparisonResult;\n  uint maxUInt;\n  uint quotient;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputString;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxUInt = isNegative + 0x7fffffff;\n  comparisonResult = 0;\n  quotient = maxUInt / base;\n  parsedInteger = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (comparisonResult != -1) {\n      if ((quotient < parsedInteger) || ((quotient == parsedInteger && ((int)(maxUInt - base * quotient) < (int)digitValue)))) {\n        comparisonResult = -1;\n      }\n      else {\n        parsedInteger = parsedInteger * base + digitValue;\n        comparisonResult = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (comparisonResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    parsedInteger = maxUInt;\n    if (resultPtr == (byte **)0x0) {\n      return maxUInt;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      parsedInteger = -parsedInteger;\n    }\n    if (resultPtr == (byte **)0x0) {\n      return parsedInteger;\n    }\n    if (comparisonResult == 0) goto LAB_00004f64;\n  }\n  inputString = nextByte + -1;\nLAB_00004f64:\n  *resultPtr = inputString;\n  return parsedInteger;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_integer_00004f84",
                "param_1": "inputString",
                "param_2": "resultPtr",
                "param_3": "base",
                "uVar1": "parsedInteger",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digitValue",
                "iVar5": "comparisonResult",
                "uVar6": "maxUInt",
                "uVar7": "quotient",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "_parse_time",
                "atoi"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *timeZoneInfo;\n  undefined4 isLeapYear;\n  uint dayOfWeek;\n  int daysToAdd;\n  uint *timeZoneInfoPtr;\n  int numberOfDays;\n  uint isLeapYear;\n  int index;\n  int dayOffset;\n  uint isLeapYear;\n  \n  timeZoneInfo = (uint *)__gettzinfo();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    numberOfDays = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    timeZoneInfo[1] = year;\n    isLeapYear = (uint)(year % 400 == 0);\n    timeZoneInfoPtr = timeZoneInfo;\n    do {\n      dayOfWeek = timeZoneInfoPtr[5];\n      if (*(char *)(timeZoneInfoPtr + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            daysToAdd = 0;\n          }\n          else {\n            daysToAdd = 1;\n          }\n        }\n        else {\n          daysToAdd = 0;\n        }\n        daysToAdd = daysToAdd + numberOfDays + dayOfWeek + -1;\n      }\n      else if (*(char *)(timeZoneInfoPtr + 2) == 'D') {\n        daysToAdd = numberOfDays + dayOfWeek;\n      }\n      else {\n        isLeapYear = isLeapYear;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYear = 1;\n        }\n        index = 0;\n        daysToAdd = numberOfDays;\n        while( true ) {\n          index = index + 1;\n          if ((int)timeZoneInfoPtr[3] <= index) break;\n          daysToAdd = daysToAdd + *(int *)(&UNK_00007b98 + index * 4 + isLeapYear * 0x30);\n        }\n        dayOffset = dayOfWeek - (daysToAdd + 4U) % 7;\n        if (dayOffset < 0) {\n          dayOffset = dayOffset + 7;\n        }\n        for (dayOffset = (timeZoneInfoPtr[4] - 1) * 7 + dayOffset;\n            *(int *)(&UNK_00007b98 + index * 4 + isLeapYear * 0x30) <= dayOffset; dayOffset = dayOffset + -7) {\n        }\n        daysToAdd = daysToAdd + dayOffset;\n      }\n      dayOfWeek = timeZoneInfoPtr[10] + daysToAdd * 0x15180 + timeZoneInfoPtr[6];\n      timeZoneInfoPtr[8] = dayOfWeek;\n      timeZoneInfoPtr[9] = (int)dayOfWeek >> 0x1f;\n      timeZoneInfoPtr = timeZoneInfoPtr + 10;\n    } while (timeZoneInfo + 0x14 != timeZoneInfoPtr);\n    dayOfWeek = timeZoneInfo[9];\n    isLeapYear = timeZoneInfo[0x13];\n    *timeZoneInfo = (uint)((int)((dayOfWeek - isLeapYear) - (uint)(timeZoneInfo[8] < timeZoneInfo[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isLeapYear) !=\n                    SBORROW4(dayOfWeek - isLeapYear,(uint)(timeZoneInfo[8] < timeZoneInfo[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "timeZoneInfo",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeek",
                "iVar4": "daysToAdd",
                "puVar5": "timeZoneInfoPtr",
                "iVar6": "numberOfDays",
                "uVar7": "isLeapYear",
                "iVar8": "index",
                "iVar9": "dayOffset",
                "uVar10": "isLeapYear"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime"
            ],
            "called": [
                "__gettzinfo"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_starting_address_000050e8",
            "code": "\nundefined * get_starting_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_starting_address_000050e8"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_address_000050f4",
            "code": "\nundefined * getMemoryAddress_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_address_000050f4"
            },
            "calling": [
                "mktime"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "initialize_timezone_00005100",
            "code": "\nvoid initializeTimezone_00005100(void)\n\n{\n  dword offset;\n  int timezoneInfo;\n  char *environmentVariable;\n  int comparisonResult;\n  int scanResult;\n  undefined dataType;\n  char *scanStringIterator;\n  bool isFirstIteration;\n  ushort *hoursPointer;\n  int *iterator1;\n  ushort *minutesPointer;\n  int *iterator2;\n  ushort hours;\n  ushort minutes;\n  ushort seconds;\n  ushort timezoneHours;\n  ushort timezoneMinutes;\n  ushort timezoneSeconds;\n  int scanResultIterator;\n  char *scanStringResult [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  timezoneInfo = __gettzinfo();\n  environmentVariable = (char *)_getenv_r(offset,&DAT_00007a5c);\n  if (environmentVariable == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = environmentVariable;\n    DAT_1fff0ddc = environmentVariable;\n    free(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparisonResult = strcmp(), comparisonResult != 0)) {\n    free(DAT_1fff0dd4);\n    comparisonResult = strlen(environmentVariable);\n    DAT_1fff0dd4 = _malloc_r(offset,comparisonResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      strcpy(DAT_1fff0dd4,environmentVariable);\n    }\n    if (*environmentVariable == ':') {\n      environmentVariable = environmentVariable + 1;\n    }\n    comparisonResult = siscanf(environmentVariable,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&scanResultIterator);\n    if (0 < comparisonResult) {\n      scanStringIterator = environmentVariable + scanResultIterator;\n      if (environmentVariable[scanResultIterator] == '-') {\n        scanStringIterator = scanStringIterator + 1;\n        comparisonResult = -1;\n      }\n      else {\n        if (environmentVariable[scanResultIterator] == '+') {\n          scanStringIterator = scanStringIterator + 1;\n        }\n        comparisonResult = 1;\n      }\n      minutes = 0;\n      seconds = 0;\n      hoursPointer = &minutes;\n      iterator1 = &scanResultIterator;\n      minutesPointer = &seconds;\n      iterator2 = &scanResultIterator;\n      scanResult = siscanf(scanStringIterator,\"%hu%n:%hu%n:%hu%n\",&hours,&scanResultIterator,&minutes,&scanResultIterator,&seconds,\n                      &scanResultIterator);\n      if (0 < scanResult) {\n        *(uint *)(timezoneInfo + 0x28) =\n             ((uint)hours * 0xe10 + (uint)minutes * 0x3c + (uint)seconds) * comparisonResult;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        scanStringIterator = scanStringIterator + scanResultIterator;\n        comparisonResult = siscanf(scanStringIterator,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&scanResultIterator,hoursPointer,iterator1,minutesPointer,\n                        iterator2);\n        if (comparisonResult < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(timezoneInfo + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          environmentVariable = scanStringIterator + scanResultIterator;\n          if (scanStringIterator[scanResultIterator] == '-') {\n            environmentVariable = environmentVariable + 1;\n            comparisonResult = -1;\n          }\n          else {\n            if (scanStringIterator[scanResultIterator] == '+') {\n              environmentVariable = environmentVariable + 1;\n            }\n            comparisonResult = 1;\n          }\n          hours = 0;\n          minutes = 0;\n          seconds = 0;\n          scanResultIterator = 0;\n          scanResult = siscanf(environmentVariable,\"%hu%n:%hu%n:%hu%n\",&hours,&scanResultIterator,&minutes,&scanResultIterator,\n                          &seconds,&scanResultIterator);\n          if (scanResult < 1) {\n            comparisonResult = *(int *)(timezoneInfo + 0x28) + -0xe10;\n          }\n          else {\n            comparisonResult = ((uint)hours * 0xe10 + (uint)minutes * 0x3c + (uint)seconds) * comparisonResult;\n          }\n          *(int *)(timezoneInfo + 0x50) = comparisonResult;\n          environmentVariable = environmentVariable + scanResultIterator;\n          isFirstIteration = false;\n          comparisonResult = timezoneInfo;\n          while( true ) {\n            if (*environmentVariable == ',') {\n              environmentVariable = environmentVariable + 1;\n            }\n            if (*environmentVariable == 'M') {\n              scanResult = siscanf(environmentVariable,\"M%hu%n.%hu%n.%hu%n\",&timezoneHours,&scanResultIterator,&timezoneMinutes,&scanResultIterator,\n                              &timezoneSeconds,&scanResultIterator);\n              if (scanResult != 3) {\n                return;\n              }\n              if (0xb < timezoneHours - 1) {\n                return;\n              }\n              if (4 < timezoneMinutes - 1) {\n                return;\n              }\n              if (6 < timezoneSeconds) {\n                return;\n              }\n              *(uint *)(comparisonResult + 0xc) = (uint)timezoneHours;\n              *(uint *)(comparisonResult + 0x10) = (uint)timezoneMinutes;\n              *(undefined *)(comparisonResult + 8) = 0x4d;\n              *(uint *)(comparisonResult + 0x14) = (uint)timezoneSeconds;\n              scanStringIterator = environmentVariable + scanResultIterator;\n            }\n            else {\n              if (*environmentVariable == 'J') {\n                environmentVariable = environmentVariable + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              timezoneSeconds = strtoul(environmentVariable,scanStringResult,10);\n              scanStringIterator = scanStringResult[0];\n              if (scanStringResult[0] == environmentVariable) {\n                if (isFirstIteration) {\n                  *(undefined *)(timezoneInfo + 0x30) = 0x4d;\n                  *(undefined4 *)(timezoneInfo + 0x34) = 0xb;\n                  *(undefined4 *)(timezoneInfo + 0x38) = 1;\n                  *(undefined4 *)(timezoneInfo + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(timezoneInfo + 8) = 0x4d;\n                  *(undefined4 *)(timezoneInfo + 0xc) = 3;\n                  *(undefined4 *)(timezoneInfo + 0x10) = 2;\n                  *(undefined4 *)(timezoneInfo + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparisonResult + 8) = dataType;\n                *(uint *)(comparisonResult + 0x14) = (uint)timezoneSeconds;\n              }\n            }\n            hours = 2;\n            minutes = 0;\n            seconds = 0;\n            scanResultIterator = 0;\n            if (*scanStringIterator == '/') {\n              siscanf(scanStringIterator,&DAT_00007a85,&hours,&scanResultIterator,&minutes,&scanResultIterator,&seconds,\n                      &scanResultIterator);\n            }\n            *(uint *)(comparisonResult + 0x18) =\n                 (uint)hours * 0xe10 + (uint)minutes * 0x3c + (uint)seconds;\n            comparisonResult = comparisonResult + 0x28;\n            environmentVariable = scanStringIterator + scanResultIterator;\n            if (isFirstIteration) break;\n            isFirstIteration = true;\n          }\n          __tzcalc_limits(*(undefined4 *)(timezoneInfo + 4));\n          DAT_1fff0ddc = *(char **)(timezoneInfo + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(timezoneInfo + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "initialize_timezone_00005100",
                "dVar1": "offset",
                "iVar2": "timezoneInfo",
                "pcVar3": "environmentVariable",
                "iVar4": "comparisonResult",
                "iVar5": "scanResult",
                "uVar6": "dataType",
                "pcVar7": "scanStringIterator",
                "bVar8": "isFirstIteration",
                "puVar9": "hoursPointer",
                "piVar10": "iterator1",
                "puVar11": "minutesPointer",
                "piVar12": "iterator2",
                "local_3c": "hours",
                "local_3a": "minutes",
                "local_38": "seconds",
                "local_36": "timezoneHours",
                "local_34": "timezoneMinutes",
                "local_32": "timezoneSeconds",
                "local_30": "scanResultIterator",
                "local_2c": "scanStringResult"
            },
            "calling": [
                "mktime"
            ],
            "called": [
                "_getenv_r",
                "strlen",
                "strcpy",
                "siscanf",
                "__gettzinfo",
                "free",
                "_malloc_r",
                "strtoul",
                "strcmp",
                "__tzcalc_limits"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_input_00005404",
            "code": "\nuint processInput_00005404(int inputData,uint outputSize,int *buffer,undefined4 param4)\n\n{\n  int tempVar1;\n  uint tempVar2;\n  undefined *bufferPtr;\n  \n  if ((inputData != 0) && (*(int *)(inputData + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(inputData + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(inputData + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(inputData + 0xc);\n  }\n  buffer[2] = buffer[6];\n  tempVar2 = (uint)*(ushort *)(buffer + 3);\n  tempVar1 = tempVar2 << 0x1c;\n  if (((tempVar1 < 0) && (tempVar2 = buffer[4], tempVar2 != 0)) ||\n     (tempVar1 = __swsetup_r(inputData,buffer,tempVar1,tempVar2,param4), tempVar1 == 0)) {\n    tempVar1 = *buffer - buffer[4];\n    outputSize = outputSize & 0xff;\n    if ((tempVar1 < buffer[5]) || (tempVar1 = _fflush_r(inputData,buffer), tempVar1 == 0)) {\n      buffer[2] = buffer[2] + -1;\n      bufferPtr = (undefined *)*buffer;\n      *buffer = (int)(bufferPtr + 1);\n      *bufferPtr = (char)outputSize;\n      if (buffer[5] != tempVar1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return outputSize;\n        }\n        if (outputSize != 10) {\n          return outputSize;\n        }\n      }\n      tempVar1 = _fflush_r(inputData,buffer);\n      if (tempVar1 == 0) {\n        return outputSize;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_input_00005404",
                "param_1": "inputData",
                "param_2": "outputSize",
                "param_3": "buffer",
                "param_4": "param4",
                "iVar1": "tempVar1",
                "uVar2": "tempVar2",
                "puVar3": "bufferPtr"
            },
            "calling": [
                "puts",
                "putchar",
                "__sfputc_r"
            ],
            "called": [
                "_fflush_r",
                "__swsetup_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *outputPointer,undefined4 *inputPointer)\n\n{\n  ushort temp1;\n  dword offset;\n  ushort temp2;\n  uint temp3;\n  uint temp4;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    __sinit(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (inputPointer == &DAT_000079b8) {\n    inputPointer = *(undefined4 **)(offset + 4);\n  }\n  else if (inputPointer == (undefined4 *)&DAT_000079d8) {\n    inputPointer = *(undefined4 **)(offset + 8);\n  }\n  else if (inputPointer == (undefined4 *)&DAT_00007998) {\n    inputPointer = *(undefined4 **)(offset + 0xc);\n  }\n  temp3 = (uint)*(ushort *)(inputPointer + 3);\n  temp2 = *(ushort *)(inputPointer + 3);\n  if (-1 < (int)(temp3 << 0x1c)) {\n    if (-1 < (int)(temp3 << 0x1b)) {\n      *outputPointer = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp3 << 0x1d) < 0) {\n      if ((undefined4 *)inputPointer[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)inputPointer[0xd] != inputPointer + 0x11) {\n          _free_r(outputPointer);\n        }\n        inputPointer[0xd] = 0;\n      }\n      *(ushort *)(inputPointer + 3) = *(ushort *)(inputPointer + 3) & 0xffdb;\n      inputPointer[1] = 0;\n      *inputPointer = inputPointer[4];\n    }\n    *(ushort *)(inputPointer + 3) = *(ushort *)(inputPointer + 3) | 8;\n  }\n  if ((inputPointer[4] == 0) && ((*(ushort *)(inputPointer + 3) & 0x280) != 0x200)) {\n    __smakebuf_r(outputPointer,inputPointer);\n  }\n  temp1 = *(ushort *)(inputPointer + 3);\n  temp3 = (uint)temp1;\n  temp2 = *(ushort *)(inputPointer + 3);\n  temp4 = temp3 & 1;\n  if ((temp1 & 1) == 0) {\n    if (-1 < (int)(temp3 << 0x1e)) {\n      temp4 = inputPointer[5];\n    }\n    inputPointer[2] = temp4;\n  }\n  else {\n    inputPointer[2] = 0;\n    inputPointer[6] = -inputPointer[5];\n  }\n  if (inputPointer[4] != 0) {\n    return 0;\n  }\n  if ((temp1 & 0x80) == 0) {\n    return temp3 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(inputPointer + 3) = temp2 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "outputPointer",
                "param_2": "inputPointer",
                "uVar1": "temp1",
                "dVar2": "offset",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4"
            },
            "calling": [
                "__swbuf_r",
                "_vfprintf_r",
                "puts"
            ],
            "called": [
                "__smakebuf_r",
                "_free_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "perform_division_00005584",
            "code": "\nvoid performDivision_00005584(uint *resultPointer,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *resultPointer = quotient;\n  resultPointer[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "perform_division_00005584",
                "param_1": "resultPointer",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "validate_structure"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_env_variable_0000562c",
            "code": "\nint find_env_variable_0000562c(undefined4 lock,char *env_vars,int *result_index)\n\n{\n  char current_char;\n  int *rel_array_ptr;\n  int comparison_result;\n  char *current_ptr;\n  int *temp_ptr;\n  int env_var_len;\n  \n  __env_lock();\n  current_ptr = env_vars;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_ptr;\n      if (current_char == '\\0') {\n        env_var_len = (int)current_ptr - (int)env_vars;\n        rel_array_ptr = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          temp_ptr = rel_array_ptr;\n          if (*temp_ptr == 0) break;\n          comparison_result = strncmp(*temp_ptr,env_vars,env_var_len);\n          rel_array_ptr = temp_ptr + 1;\n          if ((comparison_result == 0) && (comparison_result = *temp_ptr, *(char *)(comparison_result + env_var_len) == '=')) {\n            *result_index = (int)((int)temp_ptr - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            __env_unlock(lock);\n            return comparison_result + env_var_len + 1;\n          }\n        }\n        break;\n      }\n      current_ptr = current_ptr + 1;\n    } while (current_char != '=');\n  }\n  __env_unlock(lock);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_env_variable_0000562c",
                "param_1": "lock",
                "param_2": "env_vars",
                "param_3": "result_index",
                "cVar1": "current_char",
                "piVar2": "rel_array_ptr",
                "iVar3": "comparison_result",
                "pcVar4": "current_ptr",
                "piVar5": "temp_ptr",
                "iVar6": "env_var_len"
            },
            "calling": [
                "_getenv_r"
            ],
            "called": [
                "__env_unlock",
                "__env_lock",
                "strncmp"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "find_environment_variable_000056a0",
            "code": "\nvoid find_environment_variable_000056a0(undefined4 input_param,undefined4 stack_param_1,undefined4 stack_param_2,undefined4 stack_param_3)\n\n{\n  undefined4 stack_var_1;\n  undefined4 stack_var_2;\n  \n  stack_var_1 = stack_param_1;\n  stack_var_2 = stack_param_2;\n  _findenv_r(input_param,stack_param_1,&stack_var_1,stack_param_3,input_param);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "find_environment_variable_000056a0",
                "param_1": "input_param",
                "param_2": "stack_param_1",
                "param_3": "stack_param_2",
                "param_4": "stack_param_3",
                "uStack_c": "stack_var_1",
                "uStack_8": "stack_var_2"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_findenv_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "_tzset_unlocked",
                "mktime",
                "__tzcalc_limits"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_file_permissions_000056b8",
            "code": "\nundefined4 check_file_permissions_000056b8(undefined4 file_descriptor,int file_info,undefined4 *result,uint *is_executable)\n\n{\n  int status;\n  undefined4 permission;\n  undefined stat_buffer [4];\n  uint file_permissions;\n  \n  if ((*(short *)(file_info + 0xe) < 0) ||\n     (status = _fstat_r(file_descriptor,(int)*(short *)(file_info + 0xe),stat_buffer), status < 0)) {\n    *is_executable = 0;\n    if ((int)((uint)*(ushort *)(file_info + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *is_executable = (uint)((file_permissions & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_000056f8:\n  *result = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_file_permissions_000056b8",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "result",
                "param_4": "is_executable",
                "iVar1": "status",
                "uVar2": "permission",
                "auStack_68": "stat_buffer",
                "local_64": "file_permissions"
            },
            "calling": [
                "__smakebuf_r"
            ],
            "called": [
                "_fstat_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int inputSize,int *dataBuffer)\n\n{\n  ushort result;\n  int allocatedMemory;\n  int localSize;\n  int *localBuffer;\n  \n  if (-1 < (int)((uint)*(ushort *)(dataBuffer + 3) << 0x1e)) {\n    localSize = inputSize;\n    localBuffer = dataBuffer;\n    result = __swhatbuf_r(inputSize,dataBuffer,&localSize,&localBuffer);\n    allocatedMemory = _malloc_r(inputSize,localSize);\n    if (allocatedMemory != 0) {\n      *(undefined **)(inputSize + 0x28) = &DAT_0000423d;\n      *dataBuffer = allocatedMemory;\n      *(ushort *)(dataBuffer + 3) = *(ushort *)(dataBuffer + 3) | 0x80;\n      dataBuffer[5] = localSize;\n      dataBuffer[4] = allocatedMemory;\n      if ((localBuffer != (int *)0x0) &&\n         (allocatedMemory = _isatty_r(inputSize,(int)*(short *)((int)dataBuffer + 0xe)), allocatedMemory != 0)) {\n        *(ushort *)(dataBuffer + 3) = *(ushort *)(dataBuffer + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(dataBuffer + 3) = result | *(ushort *)(dataBuffer + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(dataBuffer + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(dataBuffer + 3) = *(ushort *)(dataBuffer + 3) & 0xfffc | 2;\n  }\n  *dataBuffer = (int)dataBuffer + 0x47;\n  dataBuffer[4] = (int)dataBuffer + 0x47;\n  dataBuffer[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "inputSize",
                "param_2": "dataBuffer",
                "uVar1": "result",
                "iVar2": "allocatedMemory",
                "local_18": "localSize",
                "local_14": "localBuffer"
            },
            "calling": [
                "__srefill_r",
                "__swsetup_r"
            ],
            "called": [
                "_malloc_r",
                "_isatty_r",
                "__swhatbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "free_relocation_entries_00005780",
            "code": "\nvoid freeRelocationEntries_00005780(undefined4 offset)\n\n{\n  _free_r(relocationArray[16].targetOffset,offset);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "free_relocation_entries_00005780",
                "param_1": "offset",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray",
                "r_offset": "targetOffset"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "acquire_recursive_lock_00005790",
            "code": "\nvoid acquireRecursiveLock_00005790(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "acquire_recursive_lock_00005790"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "release_recursive_lock_0000579c",
            "code": "\nvoid releaseRecursiveLock_0000579c(void)\n\n{\n  __retarget_lock_release_recursive(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "release_recursive_lock_0000579c"
            },
            "calling": [
                "_malloc_r",
                "_free_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "write_character_to_buffer_000057a8",
            "code": "\nint write_character_to_buffer_000057a8(undefined4 stream,int character,undefined4 *buffer)\n\n{\n  int buffer_length;\n  undefined *current_position;\n  \n  buffer_length = buffer[2] + -1;\n  buffer[2] = buffer_length;\n  if ((buffer_length < 0) && ((buffer_length < (int)buffer[6] || (character == 10)))) {\n    buffer_length = __swbuf_r();\n    return buffer_length;\n  }\n  current_position = (undefined *)*buffer;\n  *buffer = current_position + 1;\n  *current_position = (char)character;\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "write_character_to_buffer_000057a8",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "iVar1": "buffer_length",
                "puVar2": "current_position"
            },
            "calling": [
                "__sfputs_r"
            ],
            "called": [
                "__swbuf_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "write_to_file_000057d2",
            "code": "\nint writeToFile_000057d2(undefined4 filePointer,undefined4 data,undefined *buffer,int bufferSize)\n\n{\n  int bytesWritten;\n  undefined *bufferEnd;\n  int bytesRemaining;\n  \n  bufferEnd = buffer + bufferSize;\n  bytesRemaining = bufferSize;\n  do {\n    if (buffer == bufferEnd) {\n      return 0;\n    }\n    bytesWritten = __sfputc_r(filePointer,*buffer,data,bufferSize,bytesRemaining);\n    bufferSize = bytesWritten + 1;\n    buffer = buffer + 1;\n  } while (bufferSize != 0);\n  return bytesWritten;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "write_to_file_000057d2",
                "param_1": "filePointer",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "bufferSize",
                "iVar1": "bytesWritten",
                "puVar2": "bufferEnd",
                "iVar3": "bytesRemaining"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "__sfputc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "print_formatted_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint print_formatted_000057f8(int output_stream,undefined4 *format_specifier,byte *string,int *args_length)\n\n{\n  int result;\n  int output_result;\n  int *args_index;\n  bool is_number;\n  byte *current_char;\n  int recursive_index;\n  byte *current_string;\n  int *args_array;\n  uint flags;\n  int precision;\n  undefined4 width;\n  int arg_width;\n  int total_length;\n  byte format_char;\n  undefined local_6f;\n  undefined local_6e;\n  undefined local_45;\n  undefined4 local_30;\n  \n  if ((output_stream != 0) && (*(int *)(output_stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (format_specifier == &DAT_000079b8) {\n    format_specifier = *(undefined4 **)(output_stream + 4);\n  }\n  else if (format_specifier == (undefined4 *)&DAT_000079d8) {\n    format_specifier = *(undefined4 **)(output_stream + 8);\n  }\n  else if (format_specifier == (undefined4 *)&DAT_00007998) {\n    format_specifier = *(undefined4 **)(output_stream + 0xc);\n  }\n  if ((-1 < (int)(format_specifier[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format_specifier + 3) << 0x16))) {\n    __retarget_lock_acquire_recursive(format_specifier[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(format_specifier + 3) << 0x1c)) || (format_specifier[4] == 0)) &&\n     (result = __swsetup_r(output_stream,format_specifier), result != 0)) {\n    if ((-1 < (int)(format_specifier[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(format_specifier + 3) << 0x16)))\n    {\n      __retarget_lock_release_recursive(format_specifier[0x16]);\n    }\n    return -1;\n  }\n  total_length = 0;\n  local_6f = 0x20;\n  local_6e = 0x30;\n  current_string = string;\n  args_array = args_length;\nLAB_0000588e:\n  current_char = current_string;\n  if (*current_char != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  current_string = current_char + 1;\n  if (*current_char == 0x25) {\nLAB_0000589a:\n    result = (int)current_char - (int)string;\n    if (result != 0) {\n      output_result = __sfputs_r(output_stream,format_specifier,string,result);\n      if (output_result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(format_specifier[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(format_specifier + 3) << 0x16))) {\n          __retarget_lock_release_recursive(format_specifier[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(format_specifier + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return total_length;\n      }\n      total_length = total_length + result;\n    }\n    if (*current_char == 0) goto LAB_00005a06;\n    precision = -1;\n    width = 0;\n    flags = 0;\n    arg_width = 0;\n    local_45 = 0;\n    local_30 = 0;\n    current_string = current_char + 1;\n    while( true ) {\n      current_char = current_string + 1;\n      result = memchr(\"#-0+ \",*current_string,5);\n      if (result == 0) break;\n      flags = 1 << (result - 0x7bfcU & 0xff) | flags;\n      current_string = current_char;\n    }\n    if ((int)(flags << 0x1b) < 0) {\n      local_45 = 0x20;\n    }\n    if ((int)(flags << 0x1c) < 0) {\n      local_45 = 0x2b;\n    }\n    if (*current_string == 0x2a) {\n      args_index = args_array + 1;\n      arg_width = *args_array;\n      args_array = args_index;\n      if (arg_width < 0) {\n        arg_width = -arg_width;\n        flags = flags | 2;\n      }\n    }\n    else {\n      is_number = false;\n      result = arg_width;\n      current_char = current_string;\n      while( true ) {\n        if (9 < *current_char - 0x30) break;\n        result = result * 10 + (*current_char - 0x30);\n        is_number = true;\n        current_char = current_char + 1;\n      }\n      if (is_number) {\n        arg_width = result;\n      }\n    }\n    if (*current_char == 0x2e) {\n      if (current_char[1] == 0x2a) {\n        precision = *args_array;\n        if (precision < 0) {\n          precision = -1;\n        }\n        current_char = current_char + 2;\n        args_array = args_array + 1;\n      }\n      else {\n        is_number = false;\n        precision = 0;\n        result = 0;\n        while( true ) {\n          current_char = current_char + 1;\n          if (9 < *current_char - 0x30) break;\n          result = result * 10 + (*current_char - 0x30);\n          is_number = true;\n        }\n        if (is_number) {\n          precision = result;\n        }\n      }\n    }\n    result = memchr(&DAT_00007c02,*current_char,3);\n    if (result != 0) {\n      flags = flags | 0x40 << (result - 0x7c02U & 0xff);\n      current_char = current_char + 1;\n    }\n    string = current_char + 1;\n    format_char = *current_char;\n    result = memchr(\"efgEFG\",format_char,6);\n    if (result == 0) {\n      recursive_index = _printf_i(output_stream,&flags,format_specifier,0x57d3,&args_array);\n      if (recursive_index == -1) goto LAB_00005a06;\n    }\n    else {\n      args_array = (int *)(((int)args_array + 7U & 0xfffffff8) + 8);\n    }\n    total_length = total_length + recursive_index;\n    current_string = string;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "print_formatted_000057f8",
                "param_1": "output_stream",
                "param_2": "format_specifier",
                "param_3": "string",
                "param_4": "args_length",
                "iVar1": "result",
                "iVar2": "output_result",
                "piVar3": "args_index",
                "bVar4": "is_number",
                "pbVar5": "current_char",
                "unaff_r7": "recursive_index",
                "pbVar6": "current_string",
                "local_8c": "args_array",
                "local_88": "flags",
                "local_84": "precision",
                "uStack_80": "width",
                "local_7c": "arg_width",
                "local_74": "total_length",
                "local_70": "format_char"
            },
            "calling": [
                "iprintf"
            ],
            "called": [
                "__sfputs_r",
                "__retarget_lock_acquire_recursive",
                "__retarget_lock_release_recursive",
                "__swsetup_r",
                "memchr",
                "__sinit",
                "_printf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_adjusted_size_00005a58",
            "code": "\nundefined4\ncalculateAdjustedSize_00005a58(undefined4 input,uint *array,uint *adjustedSize,undefined4 param_4,code *callback)\n\n{\n  int loopVar1;\n  undefined4 returnValue;\n  int loopVar2;\n  uint maxSize;\n  uint loopVar3;\n  bool isConditionMet;\n  \n  maxSize = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxSize = array[2];\n  }\n  *adjustedSize = maxSize;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *adjustedSize = maxSize + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *adjustedSize = *adjustedSize + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (loopVar1 = 0; loopVar1 < (int)(array[3] - *adjustedSize); loopVar1 = loopVar1 + 1) {\n      loopVar2 = (*callback)(input,param_4,(int)array + 0x19,1);\n      if (loopVar2 == -1) goto LAB_00005afc;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)array + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)array + maxSize + 0x44) = *(undefined *)((int)array + 0x45);\n    maxSize = maxSize + 2;\n  }\n  loopVar1 = (*callback)(input,param_4,(int)array + 0x43,maxSize);\n  if (loopVar1 == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    maxSize = array[3];\n    isConditionMet = (*array & 6) == 4;\n    if (isConditionMet) {\n      maxSize = maxSize - *adjustedSize;\n    }\n    if (isConditionMet) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxSize = maxSize + (array[2] - array[4]);\n    }\n    for (loopVar3 = 0; maxSize != loopVar3; loopVar3 = loopVar3 + 1) {\n      loopVar1 = (*callback)(input,param_4,(int)array + 0x1a,1);\n      if (loopVar1 == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_adjusted_size_00005a58",
                "param_1": "input",
                "param_2": "array",
                "param_3": "adjustedSize",
                "param_5": "callback",
                "iVar1": "loopVar1",
                "uVar2": "returnValue",
                "iVar3": "loopVar2",
                "uVar4": "maxSize",
                "uVar5": "loopVar3",
                "bVar6": "isConditionMet"
            },
            "calling": [
                "_printf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "print_formatted_value_00005b34",
            "code": "\ncode * printFormattedValue_00005b34(undefined4 formatSpecifier,uint *argPointer,undefined4 formatOptions,code *printFunction,uint **argListPointer\n                   )\n\n{\n  bool isDivisible;\n  byte formatChar;\n  int returnValue;\n  code *outputString;\n  char *digitString;\n  int result;\n  char *currentChar;\n  uint remainder;\n  uint *argPointerTemp;\n  uint base;\n  uint **ppuVar11;\n  char **ppcVar12;\n  uint stringLength;\n  char *stringEnd;\n  code *defaultPrintFunction;\n  \n  formatChar = *(byte *)(argPointer + 6);\n  currentChar = (char *)((int)argPointer + 0x43);\n  defaultPrintFunction = printFunction;\n  if (0x78 < formatChar) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)argPointer + 0x42) = formatChar;\nLAB_00005bdc:\n    currentChar = (char *)((int)argPointer + 0x42);\n    remainder = 1;\nLAB_00005d28:\n    argPointer[4] = remainder;\n    *(undefined *)((int)argPointer + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (formatChar < 99) {\n    if (formatChar == 0) goto LAB_00005d06;\n    if (formatChar == 0x58) {\n      digitString = \"0123456789ABCDEF\";\n      *(undefined *)((int)argPointer + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(formatChar) {\n  case 99:\n    remainder = **argListPointer;\n    *argListPointer = *argListPointer + 1;\n    *(char *)((int)argPointer + 0x42) = (char)remainder;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *argPointer;\n    argPointerTemp = *argListPointer;\n    if ((int)(base << 0x18) < 0) {\n      remainder = *argPointerTemp;\n      *argListPointer = argPointerTemp + 1;\n    }\n    else {\n      remainder = *argPointerTemp;\n      *argListPointer = argPointerTemp + 1;\n      if ((base & 0x40) != 0) {\n        remainder = (uint)(short)remainder;\n      }\n    }\n    if ((int)remainder < 0) {\n      remainder = -remainder;\n      *(undefined *)((int)argPointer + 0x43) = 0x2d;\n    }\n    digitString = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*argListPointer;\n    base = *argPointer;\n    remainder = argPointer[5];\n    *argListPointer = (uint *)(ppuVar11 + 1);\n    argPointerTemp = *ppuVar11;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *argPointerTemp = remainder;\n    }\n    else {\n      *(short *)argPointerTemp = (short)remainder;\n    }\nLAB_00005d06:\n    argPointer[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    argPointerTemp = *argListPointer;\n    remainder = *argPointer;\n    *argListPointer = argPointerTemp + 1;\n    if (((int)(remainder << 0x18) < 0) || (-1 < (int)(remainder << 0x19))) {\n      remainder = *argPointerTemp;\n    }\n    else {\n      remainder = (uint)*(ushort *)argPointerTemp;\n    }\n    digitString = \"0123456789ABCDEF\";\n    if (formatChar == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *argPointer = *argPointer | 0x20;\n  case 0x78:\n    digitString = \"0123456789abcdef\";\n    *(undefined *)((int)argPointer + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *argPointer;\n    remainder = **argListPointer;\n    *argListPointer = *argListPointer + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      remainder = remainder & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *argPointer = base | 0x20;\n    }\n    if (remainder == 0) {\n      *argPointer = *argPointer & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar12 = (char **)*argListPointer;\n    *argListPointer = (uint *)(ppcVar12 + 1);\n    currentChar = *ppcVar12;\n    returnValue = memchr(currentChar,0,argPointer[1],ppcVar12,formatSpecifier,argPointer,formatOptions);\n    if (returnValue != 0) {\n      argPointer[1] = returnValue - (int)currentChar;\n    }\n    remainder = argPointer[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)argPointer + 0x43) = 0;\nLAB_00005c36:\n  stringLength = argPointer[1];\n  argPointer[2] = stringLength;\n  if (-1 < (int)stringLength) {\n    *argPointer = *argPointer & 0xfffffffb;\n  }\n  stringEnd = currentChar;\n  if ((remainder != 0) || (stringLength != 0)) {\n    do {\n      stringEnd = stringEnd + -1;\n      *stringEnd = digitString[remainder - base * (remainder / base)];\n      isDivisible = base <= remainder;\n      remainder = remainder / base;\n    } while (isDivisible);\n  }\n  if (((base == 8) && ((int)(*argPointer << 0x1f) < 0)) && ((int)argPointer[1] <= (int)argPointer[4])) {\n    stringEnd[-1] = '0';\n    stringEnd = stringEnd + -1;\n  }\n  argPointer[4] = (int)currentChar - (int)stringEnd;\n  currentChar = stringEnd;\nLAB_00005c84:\n  returnValue = _printf_common(formatSpecifier,argPointer,&defaultPrintFunction,formatOptions,printFunction);\n  if ((returnValue == -1) || (returnValue = (*printFunction)(formatSpecifier,formatOptions,currentChar,argPointer[4]), returnValue == -1)) {\nLAB_00005c98:\n    outputString = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*argPointer << 0x1e) < 0) {\n      for (returnValue = 0; returnValue < (int)(argPointer[3] - (int)defaultPrintFunction); returnValue = returnValue + 1) {\n        result = (*printFunction)(formatSpecifier,formatOptions,(int)argPointer + 0x19,1);\n        if (result == -1) goto LAB_00005c98;\n      }\n    }\n    outputString = (code *)argPointer[3];\n    if ((int)(code *)argPointer[3] < (int)defaultPrintFunction) {\n      outputString = defaultPrintFunction;\n    }\n  }\n  return outputString;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "print_formatted_value_00005b34",
                "param_1": "formatSpecifier",
                "param_2": "argPointer",
                "param_3": "formatOptions",
                "param_4": "printFunction",
                "param_5": "argListPointer",
                "bVar1": "isDivisible",
                "bVar2": "formatChar",
                "iVar3": "returnValue",
                "pcVar4": "outputString",
                "pcVar5": "digitString",
                "iVar6": "result",
                "pcVar7": "currentChar",
                "uVar8": "remainder",
                "puVar9": "argPointerTemp",
                "uVar10": "base",
                "uVar13": "stringLength",
                "pcVar14": "stringEnd",
                "local_24": "defaultPrintFunction"
            },
            "calling": [
                "_vfprintf_r"
            ],
            "called": [
                "_printf_common",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "read_from_stream_00005e10",
            "code": "\nuint readFromStream_00005e10(int stream,byte **buffer)\n\n{\n  int result;\n  uint value;\n  byte *byteValue;\n  \n  if ((stream != 0) && (*(int *)(stream + 0x18) == 0)) {\n    __sinit();\n  }\n  if (buffer == (byte **)&DAT_000079b8) {\n    buffer = *(byte ***)(stream + 4);\n  }\n  else if (buffer == (byte **)&DAT_000079d8) {\n    buffer = *(byte ***)(stream + 8);\n  }\n  else if (buffer == (byte **)&DAT_00007998) {\n    buffer = *(byte ***)(stream + 0xc);\n  }\n  result = __srefill_r(stream,buffer);\n  if (result == 0) {\n    buffer[1] = buffer[1] + -1;\n    byteValue = *buffer;\n    *buffer = byteValue + 1;\n    value = (uint)*byteValue;\n  }\n  else {\n    value = 0xffffffff;\n  }\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "read_from_stream_00005e10",
                "param_1": "stream",
                "param_2": "buffer",
                "iVar1": "result",
                "uVar2": "value",
                "pbVar3": "byteValue"
            },
            "calling": [
                "getchar"
            ],
            "called": [
                "__srefill_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "scan_and_store_input_00005e68",
            "code": "\nvoid scanAndStoreInput_00005e68(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 input1_copy;\n  undefined4 input1_len;\n  undefined2 local_var1;\n  undefined2 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined *local_var5;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  \n  local_var1 = 0x204;\n  input1_copy = input1;\n  local_var3 = input1;\n  input3_copy = input3;\n  input4_copy = input4;\n  input1_len = strlen();\n  local_var5 = &LAB_00004dea_1;\n  local_var6 = 0;\n  local_var7 = 0;\n  local_var2 = 0xffff;\n  local_var4 = input1_len;\n  __ssvfiscanf_r(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&input1_copy,input2,&input3_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "scan_and_store_input_00005e68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_80": "input1_copy",
                "local_7c": "input1_len",
                "local_74": "local_var1",
                "local_72": "local_var2",
                "local_70": "local_var3",
                "local_6c": "local_var4",
                "local_5c": "local_var5",
                "local_4c": "local_var6",
                "local_38": "local_var7",
                "uStack_8": "input3_copy",
                "uStack_4": "input4_copy"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "__ssvfiscanf_r",
                "strlen"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *dest,char *src)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *src;\n    *dest = currentChar;\n    src = src + 1;\n    dest = dest + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "dest",
                "param_2": "src",
                "cVar1": "currentChar"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_null_terminator_00005ecc",
            "code": "\nchar * find_null_terminator_00005ecc(char *string)\n\n{\n  char current_char;\n  char *next_char_ptr;\n  char *current_char_ptr;\n  \n  current_char_ptr = string;\n  do {\n    next_char_ptr = current_char_ptr + 1;\n    current_char = *current_char_ptr;\n    current_char_ptr = next_char_ptr;\n  } while (current_char != '\\0');\n  return next_char_ptr + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_null_terminator_00005ecc",
                "param_1": "string",
                "cVar1": "current_char",
                "pcVar2": "next_char_ptr",
                "pcVar3": "current_char_ptr"
            },
            "calling": [
                "_tzset_unlocked",
                "siscanf"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *errorCode,byte *input,byte **output,uint base)\n\n{\n  uint result;\n  uint digit;\n  byte negative;\n  int status;\n  uint value;\n  uint maxValue;\n  byte *ptr;\n  byte *currentByte;\n  \n  currentByte = input;\n  do {\n    ptr = currentByte;\n    currentByte = ptr + 1;\n    digit = (uint)*ptr;\n    negative = (&DAT_00007a99)[digit] & 8;\n  } while (((&DAT_00007a99)[digit] & 8) != 0);\n  if (digit == 0x2d) {\n    digit = (uint)*currentByte;\n    negative = 1;\n    currentByte = ptr + 2;\n  }\n  else if (digit == 0x2b) {\n    digit = (uint)*currentByte;\n    currentByte = ptr + 2;\n  }\n  if (base == 0) {\n    if (digit != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (digit != 0x30)) goto LAB_00005f26;\n  if ((*currentByte & 0xdf) == 0x58) {\n    digit = (uint)currentByte[1];\n    base = 0x10;\n    currentByte = currentByte + 2;\n  }\n  else {\n    digit = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  status = 0;\n  maxValue = 0xffffffff / base;\n  result = 0;\n  do {\n    value = digit - 0x30;\n    if (9 < value) {\n      if (digit - 0x41 < 0x1a) {\n        value = digit - 0x37;\n      }\n      else {\n        if (0x19 < digit - 0x61) break;\n        value = digit - 0x57;\n      }\n    }\n    if ((int)base <= (int)value) break;\n    if (((status < 0) || (maxValue < result)) ||\n       ((maxValue == result && ((int)~(base * maxValue) < (int)value)))) {\n      status = -1;\n    }\n    else {\n      result = result * base + value;\n      status = 1;\n    }\n    digit = (uint)*currentByte;\n    currentByte = currentByte + 1;\n  } while( true );\n  if (status < 0) {\n    *errorCode = 0x22;\n    result = 0xffffffff;\n    if (output == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      result = -result;\n    }\n    if (output == (byte **)0x0) {\n      return result;\n    }\n    if (status == 0) goto LAB_00005fb8;\n  }\n  input = currentByte + -1;\nLAB_00005fb8:\n  *output = input;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "errorCode",
                "param_2": "input",
                "param_3": "output",
                "param_4": "base",
                "uVar1": "result",
                "uVar2": "digit",
                "bVar3": "negative",
                "iVar4": "status",
                "uVar5": "value",
                "uVar6": "maxValue",
                "pbVar7": "ptr",
                "pbVar8": "currentByte"
            },
            "calling": [
                "strtoul"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "convert_string_to_unsigned_long_00005fd8",
            "code": "\nvoid convertStringToUnsignedLong_00005fd8(undefined4 string,undefined4 endPtr,undefined4 base)\n\n{\n  _strtoul_l_isra_0(relArray[16].r_offset,string,endPtr,base);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "convert_string_to_unsigned_long_00005fd8",
                "param_1": "string",
                "param_2": "endPtr",
                "param_3": "base",
                "Elf32_Rel_ARRAY_1fff0200": "relArray"
            },
            "calling": [
                "_tzset_unlocked"
            ],
            "called": [
                "_strtoul_l.isra.0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "acquire_lock_recursive_00005fec",
            "code": "\nvoid acquireLockRecursive_00005fec(void)\n\n{\n  __retarget_lock_acquire_recursive(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "acquire_lock_recursive_00005fec"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_acquire_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "release_retarget_lock_00005ff8",
            "code": "\nvoid releaseRetargetLock_00005ff8(void)\n\n{\n  __retarget_lock_release_recursive(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "release_retarget_lock_00005ff8"
            },
            "calling": [
                "_findenv_r"
            ],
            "called": [
                "__retarget_lock_release_recursive"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * find_byte_sequence_00006010(uint *buffer,uint search_byte,uint buffer_length)\n\n{\n  byte current_byte;\n  char has_zeroed_byte;\n  char has_zeroed_byte_shift_8;\n  char has_zeroed_byte_shift_16;\n  char has_zeroed_byte_shift_24;\n  byte *next_byte_pointer;\n  uint *current_uint_pointer;\n  byte *result_byte_pointer;\n  uint byte_alignment_offset;\n  uint buffer_length_aligned;\n  uint current_uint_xor;\n  uint next_uint_xor;\n  bool next_uint_has_zeroed_byte;\n  bool next_uint_has_zeroed_byte_shift_8;\n  bool next_uint_has_zeroed_byte_shift_16;\n  bool next_uint_has_zeroed_byte_shift_24;\n  \n  search_byte = search_byte & 0xff;\n  if ((int)buffer_length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (buffer_length == 0) {\n        return (byte *)0x0;\n      }\n      current_uint_pointer = (uint *)((int)buffer + 1);\n      current_byte = *(byte *)buffer;\n      buffer_length = buffer_length - 1;\n      buffer = current_uint_pointer;\n    } while (current_byte != search_byte);\n  }\n  else {\n    byte_alignment_offset = (uint)buffer & 7;\n    while( true ) {\n      if (byte_alignment_offset == 0) {\n        byte_alignment_offset = search_byte | search_byte << 8;\n        byte_alignment_offset = byte_alignment_offset | byte_alignment_offset << 0x10;\n        buffer_length_aligned = buffer_length & 0xfffffff8;\n        do {\n          current_uint_pointer = buffer + 2;\n          buffer_length_aligned = buffer_length_aligned - 8;\n          current_uint_xor = *buffer ^ byte_alignment_offset;\n          next_uint_xor = buffer[1] ^ byte_alignment_offset;\n          has_zeroed_byte = -((char)current_uint_xor == '\\0');\n          has_zeroed_byte_shift_8 = -((char)(current_uint_xor >> 8) == '\\0');\n          has_zeroed_byte_shift_16 = -((char)(current_uint_xor >> 0x10) == '\\0');\n          has_zeroed_byte_shift_24 = -((char)(current_uint_xor >> 0x18) == '\\0');\n          current_uint_xor = CONCAT13(has_zeroed_byte_shift_24,CONCAT12(has_zeroed_byte_shift_16,CONCAT11(has_zeroed_byte_shift_8,has_zeroed_byte)));\n          next_uint_has_zeroed_byte = (char)next_uint_xor != '\\0';\n          next_uint_has_zeroed_byte_shift_8 = (char)(next_uint_xor >> 8) != '\\0';\n          next_uint_has_zeroed_byte_shift_16 = (char)(next_uint_xor >> 0x10) != '\\0';\n          next_uint_has_zeroed_byte_shift_24 = (char)(next_uint_xor >> 0x18) != '\\0';\n          next_uint_xor = CONCAT13(next_uint_has_zeroed_byte_shift_24 * has_zeroed_byte_shift_24 - !next_uint_has_zeroed_byte_shift_24,\n                            CONCAT12(next_uint_has_zeroed_byte_shift_16 * has_zeroed_byte_shift_16 - !next_uint_has_zeroed_byte_shift_16,\n                                     CONCAT11(next_uint_has_zeroed_byte_shift_8 * has_zeroed_byte_shift_8 - !next_uint_has_zeroed_byte_shift_8,next_uint_has_zeroed_byte * has_zeroed_byte - !next_uint_has_zeroed_byte)));\n          if (next_uint_xor != 0) {\n            if (current_uint_xor == 0) {\n              result_byte_pointer = (byte *)((int)buffer + 5);\n              current_uint_xor = next_uint_xor;\n            }\n            else {\n              result_byte_pointer = (byte *)((int)buffer + 1);\n            }\n            if ((current_uint_xor & 1) == 0) {\n              next_uint_has_zeroed_byte = (current_uint_xor & 0x100) == 0;\n              next_byte_pointer = result_byte_pointer + 1;\n              if (next_uint_has_zeroed_byte) {\n                next_uint_has_zeroed_byte = (current_uint_xor & 0x18000) == 0;\n                next_byte_pointer = result_byte_pointer + 2;\n              }\n              result_byte_pointer = next_byte_pointer;\n              if (next_uint_has_zeroed_byte) {\n                result_byte_pointer = result_byte_pointer + 1;\n              }\n            }\n            return result_byte_pointer + -1;\n          }\n          buffer = current_uint_pointer;\n        } while (buffer_length_aligned != 0);\n        buffer_length = buffer_length & 7;\n        goto joined_r0x00006070;\n      }\n      current_uint_pointer = (uint *)((int)buffer + 1);\n      buffer_length = buffer_length - 1;\n      if (*(byte *)buffer == search_byte) break;\n      byte_alignment_offset = (uint)current_uint_pointer & 7;\n      buffer = current_uint_pointer;\n      if (buffer_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)current_uint_pointer + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "buffer",
                "param_2": "search_byte",
                "param_3": "buffer_length",
                "bVar1": "current_byte",
                "cVar2": "has_zeroed_byte",
                "cVar3": "has_zeroed_byte_shift_8",
                "cVar4": "has_zeroed_byte_shift_16",
                "cVar5": "has_zeroed_byte_shift_24",
                "pbVar6": "next_byte_pointer",
                "puVar7": "current_uint_pointer",
                "pbVar8": "result_byte_pointer",
                "uVar9": "byte_alignment_offset",
                "uVar10": "buffer_length_aligned",
                "uVar11": "current_uint_xor",
                "uVar12": "next_uint_xor",
                "bVar13": "next_uint_has_zeroed_byte",
                "bVar14": "next_uint_has_zeroed_byte_shift_8",
                "bVar15": "next_uint_has_zeroed_byte_shift_16",
                "bVar16": "next_uint_has_zeroed_byte_shift_24"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_vfprintf_r",
                "_printf_i",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_array_000060b0",
            "code": "\nvoid copyArray_000060b0(int dstArraySize,undefined *srcArray,int srcArraySize)\n\n{\n  undefined *srcPtr;\n  undefined *srcPtrEnd;\n  undefined *dstPtr;\n  \n  srcPtrEnd = srcArray + srcArraySize;\n  dstPtr = (undefined *)(dstArraySize + -1);\n  if (srcArray != srcPtrEnd) {\n    do {\n      srcPtr = srcArray + 1;\n      dstPtr = dstPtr + 1;\n      *dstPtr = *srcArray;\n      srcArray = srcPtr;\n    } while (srcPtr != srcPtrEnd);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_array_000060b0",
                "param_1": "dstArraySize",
                "param_2": "srcArray",
                "param_3": "srcArraySize",
                "puVar1": "srcPtr",
                "puVar2": "srcPtrEnd",
                "puVar3": "dstPtr"
            },
            "calling": [
                "__submore",
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "allocate_or_reallocate_memory_000060cc",
            "code": "\nint allocate_or_reallocate_memory_000060cc(undefined4 memory_context,int source_ptr,uint size,undefined4 additional_param)\n\n{\n  int result;\n  uint usable_size;\n  \n  if (source_ptr != 0) {\n    if (size == 0) {\n      _free_r();\n      result = 0;\n    }\n    else {\n      usable_size = _malloc_usable_size_r();\n      result = source_ptr;\n      if ((usable_size < size) && (result = _malloc_r(memory_context,size), result != 0)) {\n        memcpy(result,source_ptr,size);\n        _free_r(memory_context,source_ptr);\n      }\n    }\n    return result;\n  }\n  result = _malloc_r(memory_context,size,size,additional_param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "allocate_or_reallocate_memory_000060cc",
                "param_1": "memory_context",
                "param_2": "source_ptr",
                "param_3": "size",
                "param_4": "additional_param",
                "iVar1": "result",
                "uVar2": "usable_size"
            },
            "calling": [
                "__submore"
            ],
            "called": [
                "_malloc_r",
                "_free_r",
                "memcpy",
                "_malloc_usable_size_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "handle_memory_00006192",
            "code": "\nundefined4 handleMemory_00006192(undefined4 result,undefined4 *params)\n\n{\n  if ((undefined4 *)params[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)params[13] != params + 0x11) {\n      _free_r();\n    }\n    params[1] = params[16];\n    params[13] = 0;\n    if (params[16] != 0) {\n      *params = params[15];\n      return 0;\n    }\n  }\n  *params = params[4];\n  params[1] = 0;\n  *(ushort *)(params + 3) = *(ushort *)(params + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "handle_memory_00006192",
                "param_1": "result",
                "param_2": "params",
                "param_2[0xd]": "params[13]",
                "param_2[1]": "params[1]",
                "param_2[0x10]": "params[16]",
                "param_2[0xf]": "params[15]",
                "param_2[4]": "params[4]"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "_free_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_format_string_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseFormatString_000061cc(undefined4 status,byte **inputBuffer,byte *format,int **outputParams)\n\n{\n  int result;\n  uint currentChar;\n  byte *nextChar;\n  uint flag;\n  int **outputParamsPtr;\n  undefined buffer [256];\n  uint modifierFlag;\n  undefined4 base;\n  uint originalFlag;\n  int numSuccessfulScans;\n  int numScannedChars;\n  undefined *bufferPtr;\n  int sizeFlag;\n  undefined *local_30;\n  code *local_2c;\n  \n  numSuccessfulScans = 0;\n  numScannedChars = 0;\n  local_30 = &LAB_00006118_1;\n  local_2c = __ssrefill_r + 1;\n  outputParamsPtr = outputParams;\n  bufferPtr = buffer;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      flag = (uint)*format;\n      if (flag == 0) {\n        return numSuccessfulScans;\n      }\n      currentChar = (byte)(&DAT_00007a99)[flag] & 8;\n      nextChar = format + 1;\n      if (((&DAT_00007a99)[flag] & 8) == 0) break;\n      while (((format = nextChar, 0 < (int)inputBuffer[1] ||\n              (result = (*local_2c)(status,inputBuffer), result == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**inputBuffer] << 0x1c) < 0))) {\n        numScannedChars = numScannedChars + 1;\n        inputBuffer[1] = inputBuffer[1] + -1;\n        *inputBuffer = *inputBuffer + 1;\n      }\n    }\n    if (flag == 0x25) break;\nLAB_00006352:\n    if (((int)inputBuffer[1] < 1) && (result = (*local_2c)(status,inputBuffer), result != 0))\n    goto LAB_00006380;\n    if (**inputBuffer != flag) {\n      return numSuccessfulScans;\n    }\n    *inputBuffer = *inputBuffer + 1;\n    numScannedChars = numScannedChars + 1;\n    inputBuffer[1] = inputBuffer[1] + -1;\n    format = nextChar;\n  }\n  originalFlag = currentChar;\n  modifierFlag = currentChar;\n  if (format[1] == 0x2a) {\n    nextChar = format + 2;\n    modifierFlag = 0x10;\n  }\n  while( true ) {\n    currentChar = (uint)*nextChar;\n    if (9 < currentChar - 0x30) break;\n    nextChar = nextChar + 1;\n    originalFlag = (originalFlag * 10 + currentChar) - 0x30;\n  }\n  result = memchr(&DAT_00007c02,currentChar,3);\n  if (result != 0) {\n    modifierFlag = 1 << (result - 0x7c02U & 0xff) | modifierFlag;\n    nextChar = nextChar + 1;\n  }\n  format = nextChar + 1;\n  currentChar = (uint)*nextChar;\n  if (currentChar < 0x79) {\n    if (0x57 < currentChar) {\n      switch(currentChar) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        format = (byte *)__sccl(buffer,format);\n        modifierFlag = modifierFlag | 0x40;\n        sizeFlag = 1;\n        break;\n      case 99:\n        modifierFlag = modifierFlag | 0x40;\n        sizeFlag = 0;\n        break;\n      case 100:\n      case 0x75:\n        base = 10;\nLAB_000063a0:\n        if (currentChar < 0x6f) {\n          sizeFlag = 3;\n        }\n        else {\n          sizeFlag = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        sizeFlag = 5;\n        break;\n      case 0x69:\n        base = 0;\n        sizeFlag = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(modifierFlag << 0x1b)) {\n          if ((int)(modifierFlag << 0x1f) < 0) {\n            *(short *)*outputParamsPtr = (short)numScannedChars;\n            outputParamsPtr = outputParamsPtr + 1;\n          }\n          else {\n            **outputParamsPtr = numScannedChars;\n            outputParamsPtr = outputParamsPtr + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        base = 8;\n        sizeFlag = 4;\n        break;\n      case 0x70:\n        modifierFlag = modifierFlag | 0x20;\n      case 0x58:\n      case 0x78:\n        modifierFlag = modifierFlag | 0x200;\n        base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        sizeFlag = 2;\n      }\nLAB_000063ac:\n      if (((int)inputBuffer[1] < 1) && (result = (*local_2c)(status,inputBuffer), result != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(modifierFlag << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**inputBuffer] << 0x1c) < 0) {\n          numScannedChars = numScannedChars + 1;\n          nextChar = inputBuffer[1];\n          inputBuffer[1] = nextChar + -1;\n          if ((int)(nextChar + -1) < 1) {\n            result = (*local_2c)(status,inputBuffer);\n            if (result != 0) goto LAB_00006380;\n          }\n          else {\n            *inputBuffer = *inputBuffer + 1;\n          }\n        }\n      }\n      if (sizeFlag < 3) {\n        result = _scanf_chars(status,&modifierFlag,inputBuffer,&outputParamsPtr);\n      }\n      else {\n        if (4 < sizeFlag) goto LAB_000061f6;\n        result = _scanf_i(status,&modifierFlag,inputBuffer,&outputParamsPtr);\n      }\n      if (result == 1) {\n        return numSuccessfulScans;\n      }\n      if (result == 2) {\nLAB_00006380:\n        if (numSuccessfulScans == 0) {\nLAB_00006388:\n          numSuccessfulScans = -1;\n        }\n        else if ((*(ushort *)(inputBuffer + 3) & 0x40) != 0) {\n          numSuccessfulScans = -1;\n        }\n        return numSuccessfulScans;\n      }\n      goto LAB_000061f6;\n    }\n    nextChar = format;\n    if (currentChar == 0x25) goto LAB_00006352;\n    if (currentChar < 0x26) {\n      if (currentChar != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (currentChar - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  sizeFlag = 3;\n  base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_format_string_000061cc",
                "param_1": "status",
                "param_2": "inputBuffer",
                "param_3": "format",
                "param_4": "outputParams",
                "iVar1": "result",
                "uVar2": "currentChar",
                "pbVar3": "nextChar",
                "uVar4": "flag",
                "local_2b0": "outputParamsPtr",
                "auStack_2ac": "buffer",
                "local_1ac": "modifierFlag",
                "local_1a8": "base",
                "local_1a4": "originalFlag",
                "local_1a0": "numSuccessfulScans",
                "local_19c": "numScannedChars",
                "local_198": "bufferPtr",
                "local_194": "sizeFlag"
            },
            "calling": [
                "siscanf"
            ],
            "called": [
                "__ssrefill_r",
                "__sccl",
                "memchr",
                "_scanf_chars",
                "_scanf_i"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 status,uint *data,byte **buffer,undefined4 *ptr)\n\n{\n  int result;\n  uint flag;\n  byte **ptr_to_buffer;\n  byte *temp_buffer;\n  byte *current_byte;\n  byte *next_byte;\n  int counter;\n  \n  if (data[2] == 0) {\n    if (data[6] == 0) {\n      flag = 1;\n    }\n    else {\n      flag = 0xffffffff;\n    }\n    data[2] = flag;\n  }\n  if (-1 < (int)(*data << 0x1b)) {\n    ptr_to_buffer = (byte **)*ptr;\n    *ptr = ptr_to_buffer + 1;\n    current_byte = *ptr_to_buffer;\n  }\n  counter = 0;\n  do {\n    flag = data[6];\n    if (flag != 0) {\n      if (flag == 1) {\n        if (*(char *)(data[5] + (uint)**buffer) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data & 0x10) == 0) && (data[3] = data[3] + 1, data[6] != 0)) {\n            *current_byte = 0;\n          }\n          data[4] = counter + data[4];\n          return 0;\n        }\n      }\n      else if ((flag != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**buffer] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    next_byte = current_byte;\n    if (-1 < (int)(*data << 0x1b)) {\n      next_byte = current_byte + 1;\n      *current_byte = **buffer;\n    }\n    temp_buffer = buffer[1];\n    *buffer = *buffer + 1;\n    flag = data[2] - 1;\n    buffer[1] = temp_buffer + -1;\n    counter = counter + 1;\n    data[2] = flag;\n    current_byte = next_byte;\n    if ((flag == 0) ||\n       (((int)(temp_buffer + -1) < 1 &&\n        (result = (*(code *)data[0x60])(status,buffer,flag,(code *)data[0x60],ptr),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "status",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "ptr",
                "iVar1": "result",
                "uVar2": "flag",
                "ppbVar3": "ptr_to_buffer",
                "pbVar4": "temp_buffer",
                "unaff_r6": "current_byte",
                "pbVar5": "next_byte",
                "iVar6": "counter"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 input,uint *flags,byte **data,undefined4 *output)\n\n{\n  int index;\n  undefined4 result;\n  code *function_ptr;\n  uint temp;\n  byte *byte_ptr;\n  uint limit;\n  undefined4 *output_ptr;\n  uint *data_ptr;\n  uint *temp_ptr;\n  uint *flags_ptr;\n  int counter;\n  int loop_var;\n  undefined *local_data [4];\n  \n  local_data[0] = &DAT_00007c2f;\n  local_data[1] = &DAT_00007c32;\n  local_data[2] = &DAT_00007c35;\n  function_ptr = (code *)&UNK_00004f81;\n  if (flags[6] != 3) {\n    function_ptr = (code *)&UNK_00005fd5;\n  }\n  limit = flags[2];\n  temp = limit - 1;\n  if (0x15c < temp) {\n    counter = limit - 0x15d;\n    limit = 0x15d;\n  }\n  if (0x15c < temp) {\n    flags[2] = limit;\n  }\n  flags_ptr = flags + 7;\n  if (temp < 0x15d) {\n    counter = 0;\n  }\n  *flags = *flags | 0xd00;\n  loop_var = 0;\n  temp_ptr = flags_ptr;\n  do {\n    index = memchr(local_data[loop_var],**data,2);\n    if (index != 0) {\n      if (loop_var == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        temp = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = temp;\n      }\n      else if (loop_var == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        temp = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      temp = flags[2];\n      flags[2] = temp - 1;\n      if (temp != 0) {\n        byte_ptr = *data;\n        *data = byte_ptr + 1;\n        data_ptr = (uint *)((int)temp_ptr + 1);\n        *(byte *)temp_ptr = *byte_ptr;\n        byte_ptr = data[1];\n        data[1] = byte_ptr + -1;\n        temp_ptr = data_ptr;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (index = (*(code *)flags[0x60])(input,data), index != 0)) {\n          loop_var = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    loop_var = loop_var + 1;\n  } while (loop_var != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  __sccl(flags[5],\"01234567]\" + (8 - flags[1]));\n  loop_var = 0;\n  while( true ) {\n    data_ptr = temp_ptr;\n    if (flags[2] == 0) break;\n    byte_ptr = *data;\n    temp = (uint)*byte_ptr;\n    if (*(char *)(flags[5] + temp) == '\\0') break;\n    if ((temp == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      loop_var = loop_var + 1;\n      if (counter != 0) {\n        counter = counter + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      data_ptr = (uint *)((int)temp_ptr + 1);\n      *(byte *)temp_ptr = *byte_ptr;\n    }\n    byte_ptr = data[1];\n    data[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      index = (*(code *)flags[0x60])(input,data);\n      if (index != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    flags[2] = flags[2] - 1;\n    temp_ptr = data_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (flags_ptr < data_ptr) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)data_ptr + -1),data);\n      data_ptr = (uint *)((int)data_ptr + -1);\n    }\n    if (data_ptr == flags_ptr) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)data_ptr = 0;\n    result = (*function_ptr)(input,flags_ptr,0,flags[1]);\n    output_ptr = (undefined4 *)*output;\n    temp = *flags;\n    *output = output_ptr + 1;\n    output_ptr = (undefined4 *)*output_ptr;\n    if ((temp & 0x20) == 0) {\n      if ((int)(temp << 0x1f) < 0) {\n        *(short *)output_ptr = (short)result;\n      }\n      else {\n        *output_ptr = result;\n      }\n    }\n    else {\n      *output_ptr = result;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)data_ptr + flags[4] + (loop_var - (int)flags_ptr));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "index",
                "uVar2": "result",
                "pcVar3": "function_ptr",
                "uVar4": "temp",
                "pbVar5": "byte_ptr",
                "uVar6": "limit",
                "puVar7": "output_ptr",
                "puVar8": "data_ptr",
                "puVar9": "temp_ptr",
                "puVar10": "flags_ptr",
                "unaff_r9": "counter",
                "iVar11": "loop_var",
                "local_34": "local_data"
            },
            "calling": [
                "__ssvfiscanf_r"
            ],
            "called": [
                "__sccl",
                "memchr"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *data,undefined4 *info,undefined4 value,undefined4 count)\n\n{\n  undefined2 status;\n  int result;\n  undefined4 temp;\n  ushort flags;\n  uint shiftedValue;\n  \n  if ((data != (undefined4 *)0x0) && (data[6] == 0)) {\n    __sinit();\n  }\n  if (info == &DAT_000079b8) {\n    info = (undefined4 *)data[1];\n  }\n  else if (info == (undefined4 *)&DAT_000079d8) {\n    info = (undefined4 *)data[2];\n  }\n  else if (info == (undefined4 *)&DAT_00007998) {\n    info = (undefined4 *)data[3];\n  }\n  flags = *(ushort *)(info + 3);\n  info[1] = 0;\n  shiftedValue = (uint)*(ushort *)(info + 3);\n  if ((int)(shiftedValue << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(shiftedValue << 0x1d) < 0) {\n    if ((undefined4 *)info[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)info[0xd] != info + 0x11) {\n        _free_r(data);\n      }\n      info[1] = info[0x10];\n      info[0xd] = 0;\n      if (info[0x10] != 0) {\n        *info = info[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(shiftedValue << 0x1b)) {\n      *data = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(shiftedValue << 0x1c) < 0) {\n      result = _fflush_r(data,info,shiftedValue << 0x1c,shiftedValue,count);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      info[2] = 0;\n      *(ushort *)(info + 3) = *(ushort *)(info + 3) & 0xfff7;\n      info[6] = 0;\n    }\n    *(ushort *)(info + 3) = *(ushort *)(info + 3) | 4;\n  }\n  if (info[4] == 0) {\n    __smakebuf_r(data,info);\n  }\n  flags = *(ushort *)(info + 3);\n  status = *(undefined2 *)(info + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(info + 3) = 1;\n    _fwalk(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(info + 3) = status;\n    if ((flags & 9) == 9) {\n      __sflush_r(data,info);\n    }\n  }\n  temp = info[4];\n  *info = temp;\n  result = (*(code *)info[9])(data,info[8],temp,info[5]);\n  info[1] = result;\n  if (0 < result) {\n    return 0;\n  }\n  flags = *(ushort *)(info + 3);\n  if (result != 0) {\n    temp = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (result != 0) {\n    info[1] = temp;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(info + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "data",
                "param_2": "info",
                "param_3": "value",
                "param_4": "count",
                "uVar1": "status",
                "iVar2": "result",
                "uVar3": "temp",
                "uVar4": "flags",
                "uVar5": "shiftedValue"
            },
            "calling": [
                "__srget_r"
            ],
            "called": [
                "_fflush_r",
                "_fwalk",
                "__smakebuf_r",
                "_free_r",
                "__sflush_r",
                "__sinit"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "decode_bytes_0000687c",
            "code": "\nbyte * decode_bytes_0000687c(int length,byte *bytes)\n\n{\n  byte *result;\n  uint upper_bound;\n  int counter;\n  uint current_byte;\n  uint decoded_byte;\n  uint next_byte;\n  bool is_reversed;\n  \n  current_byte = (uint)*bytes;\n  is_reversed = current_byte == 0x5e;\n  if (is_reversed) {\n    current_byte = (uint)bytes[1];\n    bytes = bytes + 2;\n  }\n  else {\n    bytes = bytes + 1;\n  }\n  counter = length + -1;\n  do {\n    counter = counter + 1;\n    *(bool *)counter = is_reversed;\n  } while (counter != length + 0xff);\n  if (current_byte == 0) {\n    result = bytes + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      decoded_byte = current_byte;\n      *(bool *)(length + decoded_byte) = !is_reversed;\n      bytes = bytes + 1;\n      while( true ) {\n        current_byte = (uint)bytes[-1];\n        if (current_byte != 0x2d) break;\n        next_byte = (uint)*bytes;\n        if ((next_byte == 0x5d) || (upper_bound = decoded_byte, (int)next_byte < (int)decoded_byte)) goto LAB_000068aa;\n        do {\n          upper_bound = upper_bound + 1;\n          *(bool *)(length + upper_bound) = !is_reversed;\n        } while ((int)upper_bound < (int)next_byte);\n        counter = ~decoded_byte + next_byte;\n        if ((int)next_byte <= (int)decoded_byte) {\n          counter = 0;\n        }\n        decoded_byte = decoded_byte + 1 + counter;\n        bytes = bytes + 2;\n      }\n      result = bytes;\n    } while ((current_byte != 0x5d) && (result = bytes + -1, current_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "decode_bytes_0000687c",
                "param_1": "length",
                "param_2": "bytes",
                "pbVar1": "result",
                "uVar2": "upper_bound",
                "iVar3": "counter",
                "uVar4": "current_byte",
                "uVar5": "decoded_byte",
                "uVar6": "next_byte",
                "bVar7": "is_reversed"
            },
            "calling": [
                "__ssvfiscanf_r",
                "_scanf_i"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_or_resize_memory_000068f0",
            "code": "\nundefined4 allocate_or_resize_memory_000068f0(undefined4 size,int *memory_block)\n\n{\n  int new_memory_block;\n  int current_size;\n  \n  if ((int *)memory_block[0xd] == memory_block + 0x11) {\n    new_memory_block = allocate_memory(size,0x400);\n    if (new_memory_block != 0) {\n      memory_block[0xe] = 0x400;\n      memory_block[0xd] = new_memory_block;\n      *(undefined *)(new_memory_block + 0x3ff) = *(undefined *)((int)memory_block + 0x46);\n      *(undefined *)(new_memory_block + 0x3fe) = *(undefined *)((int)memory_block + 0x45);\n      *(undefined *)(new_memory_block + 0x3fd) = *(undefined *)(memory_block + 0x11);\n      *memory_block = new_memory_block + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = memory_block[0xe];\n    new_memory_block = resize_memory(size,(int *)memory_block[0xd],current_size << 1);\n    if (new_memory_block != 0) {\n      memcpy(new_memory_block + current_size,new_memory_block,current_size);\n      memory_block[0xd] = new_memory_block;\n      memory_block[0xe] = current_size << 1;\n      *memory_block = new_memory_block + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_or_resize_memory_000068f0",
                "param_1": "size",
                "param_2": "memory_block",
                "iVar1": "new_memory_block",
                "iVar2": "current_size",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "resize_memory"
            },
            "calling": [],
            "called": [
                "_malloc_r",
                "memcpy",
                "_realloc_r"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_sum_00006964",
            "code": "\nint calculateSum_00006964(undefined4 input,int array)\n\n{\n  int sum;\n  \n  sum = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    sum = sum + *(int *)(array + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_sum_00006964",
                "param_1": "input",
                "param_2": "array",
                "iVar1": "sum"
            },
            "calling": [
                "_realloc_r"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "calculate_result_00006974",
            "code": "\nundefined8 calculate_result_00006974(int dividend_high,int dividend_low,int divisor_high,int divisor_low)\n\n{\n  int neg_dividend_low;\n  undefined8 result;\n  undefined temp [8];\n  \n  if ((divisor_low == 0) && (divisor_high == 0)) {\n    if (dividend_low < 0) {\n      dividend_high = 0;\n      dividend_low = -0x80000000;\n    }\n    else if (dividend_low != 0 || dividend_high != 0) {\n      dividend_low = 0x7fffffff;\n      dividend_high = -1;\n    }\n    return CONCAT44(dividend_low,dividend_high);\n  }\n  if (dividend_low < 0) {\n    neg_dividend_low = -dividend_low - (uint)(dividend_high != 0);\n    if (divisor_low < 0) {\n      result = __udivmoddi4(-dividend_high,neg_dividend_low,-divisor_high,-divisor_low - (uint)(divisor_high != 0),temp);\n      return result;\n    }\n    result = __udivmoddi4(-dividend_high,neg_dividend_low,divisor_high,divisor_low,temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (divisor_low < 0) {\n    result = __udivmoddi4(dividend_high,dividend_low,-divisor_high,-divisor_low - (uint)(divisor_high != 0),temp);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = __udivmoddi4();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "calculate_result_00006974",
                "param_1": "dividend_high",
                "param_2": "dividend_low",
                "param_3": "divisor_high",
                "param_4": "divisor_low",
                "iVar1": "neg_dividend_low",
                "uVar2": "result",
                "local_8": "temp"
            },
            "calling": [
                "gmtime_r"
            ],
            "called": [
                "__udivmoddi4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "integer_division_with_remainders_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong integerDivisionWithRemainders_00006a14(uint dividend,uint dividend_upper_bits,uint divisor,uint divisor_upper_bits,uint *quotient_array)\n\n{\n  code *unreachable_function;\n  uint quotient;\n  int shift_amount;\n  uint dividend_shifted;\n  uint dividend_shifted_remainder;\n  uint dividend_divisor_quotient_lower;\n  uint dividend_divisor_quotient_upper;\n  uint divisor_shifted;\n  uint dividend_divisor_shifted_remainder;\n  uint divisor_quotient;\n  bool bVar10;\n  ulonglong result;\n  \n  if (divisor_upper_bits == 0) {\n    if (dividend_upper_bits < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      dividend_divisor_quotient_lower = divisor;\n      if (shift_amount != 0) {\n        dividend_divisor_quotient_lower = divisor << shift_amount;\n        dividend_upper_bits = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper_bits << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      dividend_divisor_quotient_upper = dividend_divisor_quotient_lower >> 0x10;\n      dividend_divisor_shifted_remainder = dividend_upper_bits / dividend_divisor_quotient_upper;\n      dividend_shifted = dividend >> 0x10 | (dividend_upper_bits - dividend_divisor_quotient_upper * dividend_divisor_shifted_remainder) * 0x10000;\n      quotient = dividend_divisor_shifted_remainder * (dividend_divisor_quotient_lower & 0xffff);\n      dividend_shifted_remainder = dividend_divisor_shifted_remainder;\n      if (dividend_shifted <= quotient && quotient - dividend_shifted != 0) {\n        bVar10 = CARRY4(dividend_divisor_quotient_lower,dividend_shifted);\n        dividend_shifted = dividend_divisor_quotient_lower + dividend_shifted;\n        dividend_shifted_remainder = dividend_divisor_shifted_remainder - 1;\n        if ((bVar10 == false) && (dividend_shifted <= quotient && quotient - dividend_shifted != 0)) {\n          dividend_shifted_remainder = dividend_divisor_shifted_remainder - 2;\n          dividend_shifted = dividend_shifted + dividend_divisor_quotient_lower;\n        }\n      }\n      dividend_divisor_shifted_remainder = (dividend_shifted - quotient) / dividend_divisor_quotient_upper;\n      dividend_divisor_quotient_upper = dividend & 0xffff | ((dividend_shifted - quotient) - dividend_divisor_quotient_upper * dividend_divisor_shifted_remainder) * 0x10000;\n      dividend_shifted = dividend_divisor_shifted_remainder * (dividend_divisor_quotient_lower & 0xffff);\n      quotient = dividend_divisor_shifted_remainder;\n      if (dividend_divisor_quotient_upper <= dividend_shifted && dividend_shifted - dividend_divisor_quotient_upper != 0) {\n        bVar10 = CARRY4(dividend_divisor_quotient_lower,dividend_divisor_quotient_upper);\n        dividend_divisor_quotient_upper = dividend_divisor_quotient_lower + dividend_divisor_quotient_upper;\n        quotient = dividend_divisor_shifted_remainder - 1;\n        if ((bVar10 == false) && (dividend_divisor_quotient_upper <= dividend_shifted && dividend_shifted - dividend_divisor_quotient_upper != 0)) {\n          quotient = dividend_divisor_shifted_remainder - 2;\n          dividend_divisor_quotient_upper = dividend_divisor_quotient_upper + dividend_divisor_quotient_lower;\n        }\n      }\n      dividend_divisor_quotient_upper = dividend_divisor_quotient_upper - dividend_shifted;\n      quotient = quotient | dividend_shifted_remainder << 0x10;\n      dividend_divisor_quotient_lower = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        unreachable_function = (code *)software_udf(0xff,0x6abc);\n        result = (*unreachable_function)();\n        return result;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_upper_bits = dividend_upper_bits - divisor;\n        divisor_quotient = divisor >> 0x10;\n        divisor_shifted = divisor & 0xffff;\n        dividend_divisor_quotient_lower = 1;\n        dividend_shifted_remainder = divisor;\n      }\n      else {\n        dividend_shifted_remainder = divisor << shift_amount;\n        divisor_quotient = dividend_shifted_remainder >> 0x10;\n        quotient = dividend_upper_bits >> (0x20U - shift_amount & 0xff);\n        dividend_divisor_quotient_lower = dividend >> (0x20U - shift_amount & 0xff) | dividend_upper_bits << shift_amount;\n        dividend_shifted = quotient / divisor_quotient;\n        divisor_shifted = dividend_shifted_remainder & 0xffff;\n        dividend_divisor_shifted_remainder = dividend_divisor_quotient_lower >> 0x10 | (quotient - divisor_quotient * dividend_shifted) * 0x10000;\n        dividend_divisor_quotient_upper = dividend_shifted * divisor_shifted;\n        dividend = dividend << shift_amount;\n        quotient = dividend_shifted;\n        if (dividend_divisor_shifted_remainder <= dividend_divisor_quotient_upper && dividend_divisor_quotient_upper - dividend_divisor_shifted_remainder != 0) {\n          bVar10 = CARRY4(dividend_shifted_remainder,dividend_divisor_shifted_remainder);\n          dividend_divisor_shifted_remainder = dividend_shifted_remainder + dividend_divisor_shifted_remainder;\n          quotient = dividend_shifted - 1;\n          if ((bVar10 == false) && (dividend_divisor_shifted_remainder <= dividend_divisor_quotient_upper && dividend_divisor_quotient_upper - dividend_divisor_shifted_remainder != 0)) {\n            quotient = dividend_shifted - 2;\n            dividend_divisor_shifted_remainder = dividend_divisor_shifted_remainder + dividend_shifted_remainder;\n          }\n        }\n        dividend_shifted = (dividend_divisor_shifted_remainder - dividend_divisor_quotient_upper) / divisor_quotient;\n        dividend_upper_bits = dividend_divisor_quotient_lower & 0xffff | ((dividend_divisor_shifted_remainder - dividend_divisor_quotient_upper) - divisor_quotient * dividend_shifted) * 0x10000;\n        dividend_divisor_quotient_upper = dividend_shifted * divisor_shifted;\n        dividend_divisor_quotient_lower = dividend_shifted;\n        if (dividend_upper_bits <= dividend_divisor_quotient_upper && dividend_divisor_quotient_upper - dividend_upper_bits != 0) {\n          bVar10 = CARRY4(dividend_shifted_remainder,dividend_upper_bits);\n          dividend_upper_bits = dividend_shifted_remainder + dividend_upper_bits;\n          dividend_divisor_quotient_lower = dividend_shifted - 1;\n          if ((bVar10 == false) && (dividend_upper_bits <= dividend_divisor_quotient_upper && dividend_divisor_quotient_upper - dividend_upper_bits != 0)) {\n            dividend_divisor_quotient_lower = dividend_shifted - 2;\n            dividend_upper_bits = dividend_upper_bits + dividend_shifted_remainder;\n          }\n        }\n        dividend_upper_bits = dividend_upper_bits - dividend_divisor_quotient_upper;\n        dividend_divisor_quotient_lower = dividend_divisor_quotient_lower | quotient << 0x10;\n      }\n      dividend_divisor_shifted_remainder = dividend_upper_bits / divisor_quotient;\n      dividend_divisor_quotient_upper = dividend >> 0x10 | (dividend_upper_bits - divisor_quotient * dividend_divisor_shifted_remainder) * 0x10000;\n      quotient = divisor_shifted * dividend_divisor_shifted_remainder;\n      dividend_shifted = dividend_divisor_shifted_remainder;\n      if (dividend_divisor_quotient_upper <= quotient && quotient - dividend_divisor_quotient_upper != 0) {\n        bVar10 = CARRY4(dividend_shifted_remainder,dividend_divisor_quotient_upper);\n        dividend_divisor_quotient_upper = dividend_shifted_remainder + dividend_divisor_quotient_upper;\n        dividend_shifted = dividend_divisor_shifted_remainder - 1;\n        if ((bVar10 == false) && (dividend_divisor_quotient_upper <= quotient && quotient - dividend_divisor_quotient_upper != 0)) {\n          dividend_shifted = dividend_divisor_shifted_remainder - 2;\n          dividend_divisor_quotient_upper = dividend_divisor_quotient_upper + dividend_shifted_remainder;\n        }\n      }\n      dividend_divisor_shifted_remainder = (dividend_divisor_quotient_upper - quotient) / divisor_quotient;\n      dividend_divisor_quotient_upper = dividend & 0xffff | ((dividend_divisor_quotient_upper - quotient) - divisor_quotient * dividend_divisor_shifted_remainder) * 0x10000;\n      divisor_shifted = divisor_shifted * dividend_divisor_shifted_remainder;\n      quotient = dividend_divisor_shifted_remainder;\n      if (dividend_divisor_quotient_upper <= divisor_shifted && divisor_shifted - dividend_divisor_quotient_upper != 0) {\n        bVar10 = CARRY4(dividend_shifted_remainder,dividend_divisor_quotient_upper);\n        dividend_divisor_quotient_upper = dividend_shifted_remainder + dividend_divisor_quotient_upper;\n        quotient = dividend_divisor_shifted_remainder - 1;\n        if ((bVar10 == false) && (dividend_divisor_quotient_upper <= divisor_shifted && divisor_shifted - dividend_divisor_quotient_upper != 0)) {\n          quotient = dividend_divisor_shifted_remainder - 2;\n          dividend_divisor_quotient_upper = dividend_divisor_quotient_upper + dividend_shifted_remainder;\n        }\n      }\n      dividend_divisor_quotient_upper = dividend_divisor_quotient_upper - divisor_shifted;\n      quotient = quotient | dividend_shifted << 0x10;\n    }\n    if (quotient_array != (uint *)0x0) {\n      *quotient_array = dividend_divisor_quotient_upper >> LZCOUNT(divisor);\n      quotient_array[1] = 0;\n    }\n  }\n  else if (dividend_upper_bits < divisor_upper_bits) {\n    if (quotient_array != (uint *)0x0) {\n      *quotient_array = dividend;\n      quotient_array[1] = dividend_upper_bits;\n      return 0;\n    }\n    quotient = 0;\n    dividend_divisor_quotient_lower = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_upper_bits);\n    if (shift_amount != 0) {\n      divisor_shifted = 0x20 - shift_amount;\n      dividend_shifted = divisor >> (divisor_shifted & 0xff) | divisor_upper_bits << shift_amount;\n      divisor_quotient = dividend_shifted >> 0x10;\n      quotient = dividend_upper_bits >> (divisor_shifted & 0xff);\n      dividend_divisor_quotient_lower = dividend >> (divisor_shifted & 0xff) | dividend_upper_bits << shift_amount;\n      dividend_divisor_quotient_upper = quotient / divisor_quotient;\n      dividend_shifted_remainder = dividend_divisor_quotient_lower >> 0x10 | (quotient - divisor_quotient * dividend_divisor_quotient_upper) * 0x10000;\n      dividend_divisor_shifted_remainder = dividend_divisor_quotient_upper * (dividend_shifted & 0xffff);\n      dividend = dividend << shift_amount;\n      quotient = dividend_divisor_quotient_upper;\n      if (dividend_shifted_remainder <= dividend_divisor_shifted_remainder && dividend_divisor_shifted_remainder - dividend_shifted_remainder != 0) {\n        bVar10 = CARRY4(dividend_shifted,dividend_shifted_remainder);\n        dividend_shifted_remainder = dividend_shifted + dividend_shifted_remainder;\n        quotient = dividend_divisor_quotient_upper - 1;\n        if ((bVar10 == false) && (dividend_shifted_remainder <= dividend_divisor_shifted_remainder && dividend_divisor_shifted_remainder - dividend_shifted_remainder != 0)) {\n          quotient = dividend_divisor_quotient_upper - 2;\n          dividend_shifted_remainder = dividend_shifted_remainder + dividend_shifted;\n        }\n      }\n      dividend_divisor_quotient_upper = (dividend_shifted_remainder - dividend_divisor_shifted_remainder) / divisor_quotient;\n      dividend_shifted_remainder = dividend_divisor_quotient_lower & 0xffff | ((dividend_shifted_remainder - dividend_divisor_shifted_remainder) - divisor_quotient * dividend_divisor_quotient_upper) * 0x10000;\n      dividend_divisor_shifted_remainder = dividend_divisor_quotient_upper * (dividend_shifted & 0xffff);\n      dividend_divisor_quotient_lower = dividend_divisor_quotient_upper;\n      if (dividend_shifted_remainder <= dividend_divisor_shifted_remainder && dividend_divisor_shifted_remainder - dividend_shifted_remainder != 0) {\n        bVar10 = CARRY4(dividend_shifted,dividend_shifted_remainder);\n        dividend_shifted_remainder = dividend_shifted + dividend_shifted_remainder;\n        dividend_divisor_quotient_lower = dividend_divisor_quotient_upper - 1;\n        if ((bVar10 == false) && (dividend_shifted_remainder <= dividend_divisor_shifted_remainder && dividend_divisor_shifted_remainder - dividend_shifted_remainder != 0)) {\n          dividend_divisor_quotient_lower = dividend_divisor_quotient_upper - 2;\n          dividend_shifted_remainder = dividend_shifted_remainder + dividend_shifted;\n        }\n      }\n      dividend_divisor_quotient_lower = dividend_divisor_quotient_lower | quotient << 0x10;\n      result = (ulonglong)dividend_divisor_quotient_lower * (ulonglong)(divisor << shift_amount);\n      if (CONCAT44(dividend_shifted_remainder - dividend_divisor_shifted_remainder,dividend) < result) {\n        result = result - CONCAT44(dividend_shifted,divisor << shift_amount);\n        dividend_divisor_quotient_lower = dividend_divisor_quotient_lower - 1;\n      }\n      if (quotient_array != (uint *)0x0) {\n        quotient = ((dividend_shifted_remainder - dividend_divisor_shifted_remainder) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *quotient_array = quotient << (divisor_shifted & 0xff) | dividend - (uint)result >> shift_amount;\n        quotient_array[1] = quotient >> shift_amount;\n      }\n      return (ulonglong)dividend_divisor_quotient_lower;\n    }\n    if ((divisor_upper_bits < dividend_upper_bits) || (divisor <= dividend)) {\n      bVar10 = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_upper_bits = (dividend_upper_bits - divisor_upper_bits) - (uint)bVar10;\n      quotient = 1;\n    }\n    else {\n      quotient = 0;\n    }\n    dividend_divisor_quotient_lower = 0;\n    if (quotient_array != (uint *)0x0) {\n      *quotient_array = dividend;\n      quotient_array[1] = dividend_upper_bits;\n    }\n  }\n  return CONCAT44(dividend_divisor_quotient_lower,quotient);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "integer_division_with_remainders_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_upper_bits",
                "param_3": "divisor",
                "param_4": "divisor_upper_bits",
                "param_5": "quotient_array",
                "UNRECOVERED_JUMPTABLE": "unreachable_function",
                "uVar1": "quotient",
                "iVar2": "shift_amount",
                "uVar3": "dividend_shifted",
                "uVar4": "dividend_shifted_remainder",
                "uVar5": "dividend_divisor_quotient_lower",
                "uVar6": "dividend_divisor_quotient_upper",
                "uVar7": "divisor_shifted",
                "uVar8": "dividend_divisor_shifted_remainder",
                "uVar9": "divisor_quotient",
                "uVar11": "result"
            },
            "calling": [
                "__aeabi_ldivmod"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 129115,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_0000099c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001448",
            "FUN_000015d0",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ],
        [
            "FUN_00000d76",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_00001628",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00002028",
            "FUN_0000258c"
        ],
        [
            "FUN_000013b8",
            "FUN_000017dc"
        ]
    ],
    "locked_functions": []
}