{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_system_00000410",
            "code": "\nvoid initialize_system_00000410(void)\n\n{\n  FUN_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_system_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "validate_and_update_offset_00000428",
            "code": "\ndword validate_and_update_offset_00000428(undefined4 *output_param,int input_offset)\n\n{\n  undefined4 result;\n  dword updated_offset;\n  \n  result = FUN_00000cd0();\n  updated_offset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((input_offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < input_offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = input_offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *output_param = 0xc;\n    updated_offset = 0xffffffff;\n  }\n  FUN_00000d0c(result);\n  return updated_offset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "validate_and_update_offset_00000428",
                "param_1": "output_param",
                "param_2": "input_offset",
                "uVar1": "result",
                "local_c": "updated_offset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "extract_data_from_binary_00000490",
            "code": "\nundefined4 extract_data_from_binary_00000490(undefined4 input_param_1,undefined4 input_param_2,undefined4 data_param_1,undefined4 data_param_2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00000e14(data_param_1,data_param_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "extract_data_from_binary_00000490",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "data_param_1",
                "param_4": "data_param_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_000004f2",
            "code": "\nundefined4 initializeValueAndReturn_000004f2(undefined4 *resultPointer)\n\n{\n  *resultPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "resultPointer"
            },
            "calling": [
                "FUN_00004dee",
                "FUN_00004e26"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_value_and_return_00000514",
            "code": "\nundefined4 initialize_value_and_return_00000514(undefined4 *output_value_ptr)\n\n{\n  *output_value_ptr = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_value_and_return_00000514",
                "param_1": "output_value_ptr"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_input_validity_00000534",
            "code": "\nundefined4 checkInputValidity_00000534(undefined4 *result,int inputValue)\n\n{\n  undefined4 isValid;\n  \n  *result = 0;\n  if (((inputValue == 0) || (inputValue == 1)) || (inputValue == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_input_validity_00000534",
                "param_1": "result",
                "param_2": "inputValue",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "convert_int_to_byte_00000566",
            "code": "\nint convertIntToByte_00000566(int inputInt)\n\n{\n  byte byte1;\n  byte byte2;\n  byte byte3;\n  byte byte4;\n  int convertedInt;\n  \n  byte2 = (byte)inputInt;\n  byte3 = (byte)((uint)inputInt >> 8);\n  byte4 = (byte)((uint)inputInt >> 0x10);\n  byte1 = (byte)((uint)inputInt >> 0x18);\n  convertedInt = LZCOUNT((uint)(byte)((((((((byte2 & 1) << 1 | byte2 >> 1 & 1) << 1 | byte2 >> 2 & 1) << 1\n                                  | byte2 >> 3 & 1) << 1 | byte2 >> 4 & 1) << 1 | byte2 >> 5 & 1) <<\n                                1 | byte2 >> 6 & 1) << 1 | byte2 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte3 & 1) << 1 | byte3 >> 1 & 1) << 1 | byte3 >> 2 & 1) << 1\n                                  | byte3 >> 3 & 1) << 1 | byte3 >> 4 & 1) << 1 | byte3 >> 5 & 1) <<\n                                1 | byte3 >> 6 & 1) << 1 | byte3 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte4 & 1) << 1 | byte4 >> 1 & 1) << 1 | byte4 >> 2 & 1) << 1\n                                  | byte4 >> 3 & 1) << 1 | byte4 >> 4 & 1) << 1 | byte4 >> 5 & 1) <<\n                                1 | byte4 >> 6 & 1) << 1 | byte4 >> 7) << 8 |\n                  (uint)(byte)((((((((byte1 & 1) << 1 | byte1 >> 1 & 1) << 1 | byte1 >> 2 & 1) << 1\n                                  | byte1 >> 3 & 1) << 1 | byte1 >> 4 & 1) << 1 | byte1 >> 5 & 1) <<\n                                1 | byte1 >> 6 & 1) << 1 | byte1 >> 7));\n  if (inputInt == 0) {\n    convertedInt = -1;\n  }\n  return convertedInt;\n}\n\n",
            "renaming": {
                "FUN_00000566": "convert_int_to_byte_00000566",
                "param_1": "inputInt",
                "bVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "byte3",
                "bVar4": "byte4",
                "iVar5": "convertedInt"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *ptr_1,undefined4 *ptr_2)\n\n{\n  if (*ptr_1 == 0) {\n    *ptr_2 = ptr_2;\n  }\n  else {\n    *ptr_2 = *(undefined4 *)*ptr_1;\n    *(undefined4 **)*ptr_1 = ptr_2;\n  }\n  *ptr_1 = (int)ptr_2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "ptr_1",
                "param_2": "ptr_2",
                "(int)param_2": "(int)ptr_2"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_from_pointer_000005ca",
            "code": "\nundefined4 * extractValueFromPointer_000005ca(int *ptr)\n\n{\n  undefined4 *extractedValue;\n  \n  if (*ptr == 0) {\n    extractedValue = (undefined4 *)0x0;\n  }\n  else {\n    extractedValue = *(undefined4 **)*ptr;\n    if (extractedValue == (undefined4 *)*ptr) {\n      *ptr = 0;\n    }\n    else {\n      *(undefined4 *)*ptr = *extractedValue;\n    }\n  }\n  return extractedValue;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_from_pointer_000005ca",
                "param_1": "ptr",
                "puVar1": "extractedValue"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "verify_and_modify_data_00000610",
            "code": "\nundefined4 verifyAndModifyData_00000610(void)\n\n{\n  int inputValue;\n  int index;\n  undefined4 result;\n  \n  inputValue = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  index = FUN_00000566(DAT_1fff0424);\n  index = **(int **)(&DAT_1fff03e4 + index * 4);\n  if (inputValue == index + -8) {\n    result = 0;\n  }\n  else {\n    if ((inputValue != 0) && (*(char *)(inputValue + 4) == '\\t')) {\n      *(undefined *)(inputValue + 4) = 10;\n    }\n    *(undefined *)(index + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(index + -2);\n    result = 1;\n    DAT_1fff03dc = index + -8;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000610": "verify_and_modify_data_00000610",
                "iVar1": "inputValue",
                "iVar2": "index",
                "uVar3": "result"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_flag_00000698",
            "code": "\nvoid updateFlag_00000698(int flagAddress,uint newFlagValue)\n\n{\n  if (newFlagValue < 9) {\n    if ((8 < *(FlagData *)(flagAddress + 4)) &&\n       (FUN_000005ca(&DAT_1fff03e4 + (uint)*(FlagData *)(flagAddress + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(FlagData *)(flagAddress + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(Index *)(flagAddress + 5));\n    }\n  }\n  else if (*(FlagData *)(flagAddress + 4) < 9) {\n    FUN_0000058e(&DAT_1fff03e4 + (uint)*(FlagData *)(flagAddress + 5) * 4,flagAddress + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(Index *)(flagAddress + 5);\n  }\n  *(char *)(flagAddress + 4) = (char)newFlagValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_flag_00000698",
                "param_1": "flagAddress",
                "param_2": "newFlagValue",
                "byte": "FlagData",
                "sbyte": "Index"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000794"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_and_execute_function_00000738",
            "code": "\nvoid checkAndExecuteFunction_00000738(ushort inputValue)\n\n{\n  int result;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    result = FUN_00000d2a();\n    if (result == 0) {\n      FUN_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_and_execute_function_00000738",
                "param_1": "inputValue",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_00000d2a",
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_data_00000794",
            "code": "\nint * initializeData_00000794(void)\n\n{\n  int returnValue;\n  int tempVar1;\n  undefined4 *pointerVar2;\n  uint maskedAddress;\n  int loopCounter1;\n  int loopCounter2;\n  int *pointerStack;\n  \n  FUN_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  FUN_00000698(DAT_1fff03dc,0);\n  pointerVar2 = &DAT_1fff03dc;\n  tempVar1 = 0;\n  DAT_1fff03dc = 0;\n  FUN_00000930();\n  maskedAddress = (int)pointerVar2 + tempVar1 & 0xfffffffc;\n  pointerStack = (int *)(maskedAddress - 4);\n  *pointerStack = 0x77777777;\n  if (((uint)pointerStack & 7) != 0) {\n    pointerStack = (int *)(maskedAddress - 8);\n    *pointerStack = 0x88888888;\n  }\n  pointerStack[-1] = 0x1000000;\n  pointerStack[-2] = tempVar1 << 0xd;\n  pointerStack[-3] = 0x795;\n  pointerStack = pointerStack + -4;\n  *pointerStack = 0;\n  for (loopCounter2 = 3; 0 < loopCounter2; loopCounter2 = loopCounter2 + -1) {\n    pointerStack = pointerStack + -1;\n    *pointerStack = loopCounter2;\n  }\n  pointerStack = pointerStack + -1;\n  *pointerStack = returnValue;\n  for (loopCounter1 = 0xb; 3 < loopCounter1; loopCounter1 = loopCounter1 + -1) {\n    pointerStack = pointerStack + -1;\n    *pointerStack = loopCounter1;\n  }\n  pointerStack[-1] = -3;\n  return pointerStack + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_data_00000794",
                "extraout_r1": "returnValue",
                "iVar1": "tempVar1",
                "puVar2": "pointerVar2",
                "uVar3": "maskedAddress",
                "iStack_1c": "loopCounter1",
                "iStack_18": "loopCounter2",
                "piStack_14": "pointerStack"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_memory_000007dc",
            "code": "\nint * initializeMemory_000007dc(undefined4 param1,int param2,int param3,int param4)\n\n{\n  uint alignedSize;\n  int count1;\n  int count2;\n  int *ptr;\n  \n  alignedSize = param4 + param3 & 0xfffffffc;\n  ptr = (int *)(alignedSize - 4);\n  *ptr = 0x77777777;\n  if (((uint)ptr & 7) != 0) {\n    ptr = (int *)(alignedSize - 8);\n    *ptr = 0x88888888;\n  }\n  ptr[-1] = 0x1000000;\n  ptr[-2] = param1;\n  ptr[-3] = 0x795;\n  ptr = ptr + -4;\n  *ptr = 0;\n  for (count2 = 3; 0 < count2; count2 = count2 + -1) {\n    ptr = ptr + -1;\n    *ptr = count2;\n  }\n  ptr = ptr + -1;\n  *ptr = param2;\n  for (count1 = 0xb; 3 < count1; count1 = count1 + -1) {\n    ptr = ptr + -1;\n    *ptr = count1;\n  }\n  ptr[-1] = -3;\n  return ptr + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_memory_000007dc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "alignedSize",
                "local_14": "count1",
                "local_10": "count2",
                "local_c": "ptr",
                "local_1": "i"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "count_reloc_entries_000008b8",
            "code": "\nint count_reloc_entries_000008b8(void)\n\n{\n  Elf32_Rel *reloc_entry;\n  \n  for (reloc_entry = (Elf32_Rel *)&DAT_1fff0000;\n      (reloc_entry->r_offset == 0xe7fee7fe && (reloc_entry < Elf32_Rel_ARRAY_1fff0200));\n      reloc_entry = (Elf32_Rel *)&reloc_entry->r_info) {\n  }\n  return ((int)Elf32_Rel_ARRAY_1fff0200 - (int)reloc_entry >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "count_reloc_entries_000008b8",
                "local_c": "reloc_entry"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 get_main_stack_pointer_00000900(void)\n\n{\n  undefined4 stack_pointer;\n  \n  stack_pointer = getMainStackPointer();\n  return stack_pointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "stack_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_magic_number_0000091c",
            "code": "\nundefined4 getMagicNumber_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_magic_number_0000091c"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "run_infinite_loop_00000930",
            "code": "\nvoid run_infinite_loop_00000930(void)\n\n{\n  FUN_00000cf0();\n  trigger_software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "run_infinite_loop_00000930",
                "software_interrupt": "trigger_software_interrupt"
            },
            "calling": [
                "FUN_00000f8c",
                "FUN_00000794"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "set_memory_flag_0000093c",
            "code": "\n\n\nvoid setMemoryFlag_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "set_memory_flag_0000093c"
            },
            "calling": [
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00000738",
                "FUN_00002434",
                "FUN_00001348"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  FUN_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  FUN_00000e64();\n  FUN_0000459c();\n  FUN_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000f8c",
                "FUN_00000990",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000db0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "get_nmi_handler_pointer_00000a30",
            "code": "\nundefined * getNMIHandlerPointer_00000a30(void)\n\n{\n  int inputValue;\n  \n  FUN_00000f04(4,\"NMI HANDLER\");\n  return stackBaseAddress + -*(int *)(inputValue + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "get_nmi_handler_pointer_00000a30",
                "in_r3": "inputValue",
                "&stack0xe000ffe0": "stackBaseAddress"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_interrupts_and_get_irq_status_00000cc0",
            "code": "\nundefined4 disableInterruptsAndGetIRQStatus_00000cc0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 isIRQInterruptsEnabledFlag;\n  \n  FUN_00000f04(10,\"DUMMY HANDLER\");\n  isIRQInterruptsEnabledFlag = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    isIRQInterruptsEnabledFlag = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return isIRQInterruptsEnabledFlag;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_interrupts_and_get_irq_status_00000cc0",
                "bVar1": "isCurrentModePrivileged",
                "uVar2": "isIRQInterruptsEnabledFlag"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "get_interrupt_status_00000cd0",
            "code": "\nundefined4 getInterruptStatus_00000cd0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "get_interrupt_status_00000cd0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000428",
                "FUN_00000f8c",
                "FUN_00000f04",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434",
                "FUN_00000e58",
                "FUN_00000794"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_ir_qinterrupts_enabled_00000cf0",
            "code": "\nundefined4 checkIRQinterruptsEnabled_00000cf0(void)\n\n{\n  bool isCurrentModePrivileged;\n  undefined4 isIRQinterruptsEnabled;\n  \n  enableIRQinterrupts();\n  isIRQinterruptsEnabled = 0;\n  isCurrentModePrivileged = (bool)isCurrentModePrivileged();\n  if (isCurrentModePrivileged) {\n    isIRQinterruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return isIRQinterruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_ir_qinterrupts_enabled_00000cf0",
                "uVar2": "isIRQinterruptsEnabled",
                "bVar1": "isCurrentModePrivileged"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_interrupts_if_privileged_00000d0c",
            "code": "\nvoid enableInterruptsIfPrivileged_00000d0c(uint interruptFlags)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    enableInterrupts((interruptFlags & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_interrupts_if_privileged_00000d0c",
                "param_1": "interruptFlags",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_00000428",
                "FUN_000010d4",
                "FUN_00001c84",
                "FUN_000024bc",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculateOffset_00000d44(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_pointer_to_zero_00000d76",
            "code": "\nvoid initializePointerToZero_00000d76(undefined4 input1,undefined input2)\n\n{\n  undefined4 *pointerToResult;\n  \n  pointerToResult = (undefined4 *)FUN_00000d44(input1,input2);\n  *pointerToResult = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_pointer_to_zero_00000d76",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "pointerToResult"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_memory_00000d9c",
            "code": "\nvoid initializeMemory_00000d9c(void)\n\n{\n  FUN_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_memory_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_system_00000db0",
            "code": "\nvoid initializeSystem_00000db0(void)\n\n{\n  FUN_00000dcc();\n  FUN_00000d9c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "initialize_application_00000dc0",
            "code": "\nvoid initializeApplication_00000dc0(void)\n\n{\n  FUN_00000cc0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "initialize_application_00000dc0"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_memory_00000dcc",
            "code": "\n\n\nvoid initializeMemory_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_memory_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_device_00000df4",
            "code": "\nvoid initialize_device_00000df4(void)\n\n{\n  FUN_000013b8(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_device_00000df4"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "process_data_00000e14",
            "code": "\nundefined4 processData_00000e14(undefined4 data,undefined4 length)\n\n{\n  undefined4 result;\n  \n  result = FUN_000012e2(0x1fff0204,data,length);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "process_data_00000e14",
                "param_1": "data",
                "param_2": "length",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "execute_and_return_second_param_00000e38",
            "code": "\nundefined4 execute_and_return_second_param_00000e38(undefined4 execution_parameter,undefined4 return_value)\n\n{\n  FUN_000015d0(0,execution_parameter,return_value);\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "execute_and_return_second_param_00000e38",
                "param_1": "execution_parameter",
                "param_2": "return_value"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "infinite_loop_00000e58",
            "code": "\nvoid infiniteLoop_00000e58(void)\n\n{\n  FUN_00000cd0();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "infinite_loop_00000e58"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_memory_00000e64",
            "code": "\n\n\nvoid initializeMemory_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  FUN_00001274();\n  FUN_00001eea(0x2056,0x80);\n  FUN_00001eea(0x511a,0x80);\n  FUN_00001eea(0x2055,0x80);\n  FUN_00001ff6(0x2056);\n  FUN_00001ff6(0x511a);\n  FUN_00001ff6(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_memory_00000e64"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001eea",
                "FUN_00001274",
                "FUN_00001ff6"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 savedLinkRegister;\n  \n  FUN_00004c84(&DAT_00006f58,savedLinkRegister);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "savedLinkRegister"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "handle_kernel_panic_00000f04",
            "code": "\nvoid handleKernelPanic_00000f04(char panicFlag,undefined4 panicMessage)\n\n{\n  undefined4 localStackFrame;\n  code *jumpTable;\n  undefined4 messagePtr;\n  char flag;\n  \n  messagePtr = panicMessage;\n  flag = panicFlag;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panicFlag == '\\x03') {\n      FUN_00000ed8();\n    }\n    FUN_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",messagePtr);\n    FUN_0000211c();\n    FUN_00004c84(&DAT_00006f78);\n    FUN_00004c84(\"*** halted.\\n\\n\");\n  }\n  FUN_00000cd0();\n  FUNC_00000ef8();\n  jumpTable = (code *)0xf4d;\n  FUN_00000e58();\n  localStackFrame = (int)&localStackFrame + 1;\n  FUNC_00002400();\n  FUN_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  FUN_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "handle_kernel_panic_00000f04",
                "param_1": "panicFlag",
                "param_2": "panicMessage",
                "uStack_18": "localStackFrame",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "local_10": "messagePtr",
                "local_9": "flag"
            },
            "calling": [
                "FUN_00000a30",
                "FUN_000013b8",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_00001034",
                "FUN_00000fec"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_000023a4",
                "FUN_00000ef8",
                "FUN_00002400",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_00000e58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_memory_layout_00000f8c",
            "code": "\nvoid initializeMemoryLayout_00000f8c(void)\n\n{\n  uint shiftedVal;\n  undefined4 *ptrToData;\n  uint loopCounter;\n  int stackVar1;\n  int *ptrStackVar;\n  undefined4 tempVar4;\n  undefined4 tempVar3;\n  undefined4 tempVar2;\n  dword tempVar1;\n  \n  FUN_00000cd0();\n  tempVar1 = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  tempVar2 = 0;\n  tempVar3 = 0xf81;\n  FUN_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  tempVar1 = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  tempVar2 = 0;\n  tempVar3 = 0xf5d;\n  loopCounter = 0xc;\n  FUN_000010d4(&DAT_1fff046c,0x600,7);\n  tempVar4 = 0xfd3;\n  shiftedVal = FUN_00000930();\n  shiftedVal = shiftedVal >> 0x1e;\n  ptrToData = (undefined4 *)(loopCounter * 0x100);\n  stackVar1 = (loopCounter >> 0x1d) << 0x11;\n  ptrStackVar = &stackVar1;\n  if ((shiftedVal & shiftedVal - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *ptrToData = 0;\n  ptrToData[1] = 0;\n  ptrToData[2] = shiftedVal - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_memory_layout_00000f8c",
                "local_10": "tempVar1",
                "local_14": "tempVar2",
                "local_18": "tempVar3",
                "iStack_24": "stackVar1",
                "piStack_20": "ptrStackVar",
                "uStack_1c": "tempVar4",
                "uVar1": "shiftedVal",
                "puVar2": "ptrToData",
                "uVar3": "loopCounter"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000930",
                "FUN_000010d4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_ptr_with_size_00000fec",
            "code": "\nvoid initializePtrWithSize_00000fec(undefined4 *ptr,uint size)\n\n{\n  if ((size & size - 1) != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *ptr = 0;\n  ptr[1] = 0;\n  ptr[2] = size - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_ptr_with_size_00000fec",
                "param_1": "ptr",
                "param_2": "size",
                "param_1[1]": "ptr[1]",
                "param_1[2]": "ptr[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_suitable_slot_00001034",
            "code": "\nvoid findSuitableSlot_00001034(int **slotArray,int slotIndex)\n\n{\n  int **currentSlot;\n  \n  if (8 < *(byte *)(slotIndex + 4)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentSlot = slotArray;\n      (*currentSlot != (int *)0x0 && (*(byte *)((int)*currentSlot + -3) <= *(byte *)(slotIndex + 5)));\n      currentSlot = (int **)*currentSlot) {\n  }\n  *(int **)(slotIndex + 8) = *currentSlot;\n  *currentSlot = (int *)(int **)(slotIndex + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_suitable_slot_00001034",
                "param_1": "slotArray",
                "param_2": "slotIndex",
                "local_1c": "currentSlot"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "count_matching_pointers_000010a0",
            "code": "\nint count_matching_pointers_000010a0(int *list_of_pointers)\n\n{\n  int *current_pointer;\n  \n  for (current_pointer = list_of_pointers; (int *)*current_pointer == current_pointer; current_pointer = current_pointer + 1) {\n  }\n  return (int)current_pointer - (int)list_of_pointers;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "count_matching_pointers_000010a0",
                "param_1": "list_of_pointers",
                "local_c": "current_pointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_data_structure_000010d4",
            "code": "\nint initializeDataStructure_000010d4(uint inputData,int size,byte byteCount,uint options,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 result;\n  undefined4 uVar2;\n  int errorCode;\n  uint adjustedSize;\n  undefined4 *ptrArray;\n  int adjustedSize;\n  uint adjustedPtr;\n  uint loopVar1;\n  short loopVar2;\n  short nonZeroIndex;\n  \n  if (byteCount < 0x10) {\n    adjustedSize = size;\n    adjustedPtr = inputData;\n    if ((inputData & 3) != 0) {\n      adjustedSize = 4 - (inputData & 3);\n      adjustedPtr = adjustedSize + inputData;\n      adjustedSize = size - adjustedSize;\n    }\n    adjustedSize = adjustedSize - 0x30U & 0xfffffffc;\n    ptrArray = (undefined4 *)(adjustedSize + adjustedPtr);\n    if ((options & 8) == 0) {\n      *(uint *)adjustedPtr = adjustedPtr;\n    }\n    else {\n      for (loopVar1 = adjustedPtr; loopVar1 < adjustedSize + adjustedPtr; loopVar1 = loopVar1 + 4) {\n        *(uint *)loopVar1 = loopVar1;\n      }\n    }\n    result = FUN_00000cd0();\n    nonZeroIndex = 0;\n    for (loopVar2 = 1; loopVar2 < 0x21; loopVar2 = loopVar2 + 1) {\n      if (*(int *)(&DAT_1fff0358 + loopVar2 * 4) == 0) {\n        nonZeroIndex = loopVar2;\n        break;\n      }\n    }\n    if (nonZeroIndex == 0) {\n      FUN_00000d0c(result);\n      errorCode = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + nonZeroIndex * 4) = ptrArray;\n      *(short *)((int)ptrArray + 6) = nonZeroIndex;\n      uVar2 = FUN_000007dc(param5,param6,adjustedPtr,adjustedSize);\n      *ptrArray = uVar2;\n      ptrArray[9] = adjustedPtr;\n      ptrArray[0xb] = size;\n      ptrArray[10] = param7;\n      *(byte *)((int)ptrArray + 5) = byteCount;\n      *(undefined *)(ptrArray + 1) = 0;\n      ptrArray[2] = 0;\n      ptrArray[3] = 0;\n      ptrArray[4] = 0;\n      FUN_00000fec(ptrArray + 5,0);\n      ptrArray[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((options & 1) == 0) {\n        FUN_00000698(ptrArray,10);\n        if ((options & 4) == 0) {\n          FUN_00000d0c(result);\n          FUN_00000738(byteCount);\n          return (int)nonZeroIndex;\n        }\n      }\n      else {\n        FUN_00000698(ptrArray,1);\n      }\n      FUN_00000d0c(result);\n      errorCode = (int)nonZeroIndex;\n    }\n  }\n  else {\n    errorCode = -0x16;\n  }\n  return errorCode;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_data_structure_000010d4",
                "param_1": "inputData",
                "param_2": "size",
                "param_3": "byteCount",
                "param_4": "options",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "iVar3": "errorCode",
                "uVar4": "adjustedSize",
                "puVar5": "ptrArray",
                "local_30": "adjustedSize",
                "local_2c": "adjustedPtr",
                "local_10": "loopVar1",
                "local_c": "loopVar2",
                "local_a": "nonZeroIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_000007dc",
                "FUN_00000738",
                "FUN_00000fec",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_system_00001274",
            "code": "\nvoid initializeSystem_00001274(void)\n\n{\n  FUN_0000258c();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  FUN_00001c84();\n  FUN_00002396();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_system_00001274"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_0000258c",
                "FUN_00001c84",
                "FUN_00002396"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "initialize_function_0000129c",
            "code": "\nvoid initializeFunction_0000129c(undefined4 parameter)\n\n{\n  FUN_00002434(parameter,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "initialize_function_0000129c",
                "param_1": "parameter"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "process_data_000012b4",
            "code": "\nundefined4 processData_000012b4(int dataOffset,undefined data)\n\n{\n  undefined4 result;\n  \n  result = FUN_00002364(dataOffset + 4,data);\n  FUN_000024bc(dataOffset);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "process_data_000012b4",
                "param_1": "dataOffset",
                "param_2": "data",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000024bc",
                "FUN_00002364"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "check_status_and_execute_000012e2",
            "code": "\nint checkStatusAndExecute_000012e2(int input,undefined4 param2,undefined4 param3)\n\n{\n  int status;\n  \n  while( true ) {\n    status = FUN_0000231c(input + 4,param2,param3);\n    if (status != 0) break;\n    FUN_0000129c(input);\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "check_status_and_execute_000012e2",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "status"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000231c",
                "FUN_0000129c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_in_memory_00001318",
            "code": "\nvoid setBitInMemory_00001318(byte byteToSet)\n\n{\n  *(int *)(((uint)(int)(char)byteToSet >> 5) * 4 + -0x1fff1f00) = 1 << (byteToSet & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_in_memory_00001318",
                "param_1": "byteToSet"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "check_and_call_function_00001348",
            "code": "\nvoid checkAndCallFunction_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "check_and_call_function_00001348"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculateOffset_00001360(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "set_pointer_to_value_00001392",
            "code": "\nvoid setPointerToValue_00001392(undefined4 inputPointer,undefined unusedParameter)\n\n{\n  undefined4 *outputPointer;\n  \n  outputPointer = (undefined4 *)FUN_00001360(inputPointer,unusedParameter);\n  *outputPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "set_pointer_to_value_00001392",
                "param_1": "inputPointer",
                "param_2": "unusedParameter",
                "puVar1": "outputPointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_data_000013b8",
            "code": "\nundefined4 updateData_000013b8(int index,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = data1;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = data2;\n  FUN_00001448(index);\n  FUN_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    FUN_000014c4(index,value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_data_000013b8",
                "param_1": "index",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00001448",
                "FUN_000014c4",
                "FUN_00001392"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "update_data_00001448",
            "code": "\nvoid updateData_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    FUN_00001f80(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "update_data_00001448",
                "param_1": "index"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_data_000014c4",
            "code": "\nvoid updateData_000014c4(int index,uint divisor)\n\n{\n  byte *dataPtr;\n  uint value1;\n  uint result;\n  \n  dataPtr = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value1 = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  dataPtr[3] = dataPtr[3] & 0xf3;\n  dataPtr[2] = (&DAT_00007001)[index * 0x20];\n  result = value1 / (divisor << 4);\n  *dataPtr = (byte)(result >> 8) & 0x1f;\n  dataPtr[1] = (byte)result;\n  dataPtr[10] = (byte)((value1 << 2) / divisor + 1 >> 1) & 0x1f;\n  dataPtr[0x10] = dataPtr[0x10] | 0x88;\n  if ((dataPtr[0x10] & 0x70) == 0) {\n    dataPtr[0x13] = 0;\n  }\n  else {\n    dataPtr[0x13] = (char)(2 << (dataPtr[0x10] >> 4 & 7)) - 1;\n  }\n  dataPtr[0x15] = 1;\n  dataPtr[0x11] = 0xc0;\n  dataPtr[3] = dataPtr[3] | 0x2c;\n  FUN_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_data_000014c4",
                "param_1": "index",
                "param_2": "divisor",
                "pbVar1": "dataPtr",
                "uVar2": "value1",
                "uVar3": "result"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_to_memory_000015d0",
            "code": "\nvoid copyDataToMemory_000015d0(int arrayIndex,int sourceAddress,uint length)\n\n{\n  int elementPointer;\n  uint currentIndex;\n  \n  elementPointer = *(int *)(&DAT_00006fe4 + arrayIndex * 0x20);\n  for (currentIndex = 0; currentIndex < length; currentIndex = currentIndex + 1) {\n    do {\n    } while (-1 < *(char *)(elementPointer + 4));\n    *(undefined *)(elementPointer + 7) = *(undefined *)(currentIndex + sourceAddress);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_to_memory_000015d0",
                "param_1": "arrayIndex",
                "param_2": "sourceAddress",
                "param_3": "length",
                "iVar1": "elementPointer",
                "local_c": "currentIndex"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "execute_function_00001628",
            "code": "\nvoid executeFunction_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  FUN_00001348();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "execute_function_00001628",
                "param_1": "index"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_system_00001688",
            "code": "\nvoid initializeSystem_00001688(void)\n\n{\n  FUN_00001628(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_system_00001688"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculateOffset_00001696(uint base,int multiplier)\n\n{\n  return multiplier * 4 + (base & 0xf0000000 | (base & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "base",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_000016c8",
                "FUN_00001710"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "set_flag_000016c8",
            "code": "\nvoid setFlag_000016c8(undefined4 ptr_to_data,undefined data)\n\n{\n  undefined4 *ptr_to_result;\n  \n  ptr_to_result = (undefined4 *)FUN_00001696(ptr_to_data,data);\n  *ptr_to_result = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "set_flag_000016c8",
                "param_1": "ptr_to_data",
                "param_2": "data",
                "puVar1": "ptr_to_result"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_flag_000016ec",
            "code": "\nvoid setFlag_000016ec(undefined4 input1,undefined input2)\n\n{\n  undefined *flagPtr;\n  \n  flagPtr = (undefined *)FUN_00001696(input1,input2);\n  *flagPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_flag_000016ec",
                "param_1": "input1",
                "param_2": "input2",
                "puVar1": "flagPtr"
            },
            "calling": [
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 memoryAddress,undefined valueToClear)\n\n{\n  undefined *pointerToMemory;\n  \n  pointerToMemory = (undefined *)FUN_00001696(memoryAddress,valueToClear);\n  *pointerToMemory = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "memoryAddress",
                "param_2": "valueToClear",
                "puVar1": "pointerToMemory"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_00001778",
                "FUN_0000182c",
                "FUN_00001734",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "initialize_memory_00001734",
            "code": "\nvoid initializeMemory_00001734(void)\n\n{\n  FUN_00001710(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "initialize_memory_00001734"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_00001a3c",
                "FUN_00001a18"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "update_config_00001748",
            "code": "\nvoid updateConfig_00001748(byte newConfigValue)\n\n{\n  DAT_40064003 = newConfigValue | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "update_config_00001748",
                "param_1": "newConfigValue"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c",
                "FUN_00001bb8",
                "FUN_00001960",
                "FUN_000018bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "update_and_send_data_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid updateAndSendData_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  FUN_00001710(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "update_and_send_data_00001778"
            },
            "calling": [
                "FUN_000019c0",
                "FUN_0000191c"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_system_000017dc",
            "code": "\n\n\nvoid initializeSystem_000017dc(void)\n\n{\n  FUN_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_system_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "initialize_data_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid initializeData_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  FUN_000016ec(&DAT_40064001,0);\n  FUN_00001710(&DAT_40064000,1);\n  FUN_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "initialize_data_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_function_000018bc",
            "code": "\nvoid initializeFunction_000018bc(void)\n\n{\n  FUN_00001748(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  FUN_00001710(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_function_000018bc"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_and_verify_hardware_0000191c",
            "code": "\nvoid initializeAndVerifyHardware_0000191c(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_and_verify_hardware_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_device_00001960",
            "code": "\nvoid initializeDevice_00001960(void)\n\n{\n  FUN_00001748(0xa0);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_device_00001960"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "initialize_system_000019c0",
            "code": "\nvoid initializeSystem_000019c0(void)\n\n{\n  FUN_00001778();\n  FUN_00001748(0x40);\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "initialize_system_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_system_00001a18",
            "code": "\nvoid initializeSystem_00001a18(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_system_00001a18"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_data_00001a3c",
            "code": "\nvoid initializeData_00001a3c(void)\n\n{\n  FUN_000016ec(&DAT_40064001,1);\n  FUN_00001734();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_data_00001a3c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_hardware_00001a60",
            "code": "\nvoid initializeHardware_00001a60(void)\n\n{\n  FUN_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  FUN_000016ec(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_hardware_00001a60"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "execute_operations_00001b10",
            "code": "\nundefined4 executeOperations_00001b10(byte input)\n\n{\n  undefined4 result;\n  \n  if (input < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)input + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        FUN_000018bc();\n        break;\n      case 1:\n        FUN_0000191c();\n        break;\n      case 2:\n        FUN_00001960();\n        break;\n      case 3:\n        FUN_000019c0();\n        break;\n      case 4:\n        FUN_00001a18();\n        break;\n      case 5:\n        FUN_00001a3c();\n        break;\n      case 6:\n        FUN_00001a60();\n        break;\n      case 7:\n        FUN_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (input != DAT_1fff0b74);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "execute_operations_00001b10",
                "param_1": "input",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001ad4",
                "FUN_000019c0",
                "FUN_00001a60",
                "FUN_0000191c",
                "FUN_00001a3c",
                "FUN_00001960",
                "FUN_00001a18",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "initialize_hardware_00001bb8",
            "code": "\nvoid initializeHardware_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    FUN_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    FUN_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  FUN_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "initialize_hardware_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001748",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initializeSystem_00001c84(void)\n\n{\n  undefined4 returnValue;\n  \n  returnValue = FUN_00000cd0();\n  FUN_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  FUN_0000182c();\n  FUN_000017dc();\n  FUN_00001b10(7);\n  FUN_00000d0c(returnValue);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000017dc",
                "FUN_00000d0c",
                "FUN_0000182c",
                "FUN_00001bb8",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_execute_function_00001cf0",
            "code": "\nvoid checkAndExecuteFunction_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_execute_function_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculateOffset_00001d08(uint inputValue,int multiplier)\n\n{\n  return multiplier * 4 + (inputValue & 0xf0000000 | (inputValue & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "inputValue",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "mark_result_as_successful_00001d3a",
            "code": "\nvoid markResultAsSuccessful_00001d3a(undefined4 resultPointer,undefined unknownParameter)\n\n{\n  undefined4 *resultPointerAux;\n  \n  resultPointerAux = (undefined4 *)FUN_00001d08(resultPointer,unknownParameter);\n  *resultPointerAux = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "mark_result_as_successful_00001d3a",
                "param_1": "resultPointer",
                "param_2": "unknownParameter",
                "puVar1": "resultPointerAux"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "apply_mask_and_set_default_00001d5e",
            "code": "\nuint applyMaskAndSetDefault_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "apply_mask_and_set_default_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_bitmask_00001d80",
            "code": "\nuint applyBitmask_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_bitmask_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "clip_to_six_bits_00001dc0",
            "code": "\nushort clipToSixBits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "clip_to_six_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001eea",
                "FUN_00001ff6"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "update_data_00001ddc",
            "code": "\nvoid updateData_00001ddc(undefined2 input)\n\n{\n  char result;\n  \n  result = FUN_00001da2(input);\n  FUN_00001d3a(&DAT_40048038,result + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "update_data_00001ddc",
                "param_1": "input",
                "cVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001d3a",
                "FUN_00001da2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nunsigned_integer extract_bits_00001e0c(integer index,unsigned_integer data)\n\n{\n  return *(unsigned_integer *)(&DAT_1fff0bd8 + (((integer)data >> 3) + index * 4) * 4) >> ((data & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "index",
                "param_2": "data",
                "int": "integer",
                "uint": "unsigned_integer"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bitwise_value_00001e44",
            "code": "\nvoid updateBitwiseValue_00001e44(int offset,uint bitPosition,int newValue)\n\n{\n  int shiftedBitPosition;\n  \n  shiftedBitPosition = (int)bitPosition >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (shiftedBitPosition + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedBitPosition + offset * 4) * 4) & ~(0xf << ((bitPosition & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (shiftedBitPosition + offset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (shiftedBitPosition + offset * 4) * 4) | newValue << ((bitPosition & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bitwise_value_00001e44",
                "param_1": "offset",
                "param_2": "bitPosition",
                "param_3": "newValue",
                "iVar1": "shiftedBitPosition"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "process_and_execute_00001ec4",
            "code": "\nvoid processAndExecute_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 result;\n  \n  result = FUN_00001e0c(input1,input2);\n  FUN_00001e44(input1,input2,result);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "process_and_execute_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_status_00001eea",
            "code": "\nundefined4 updateStatus_00001eea(undefined2 param1,byte param2)\n\n{\n  uint index;\n  int ptr1;\n  int ptr2;\n  \n  FUN_00001f80(param1,0);\n  if ((char)param2 < '\\0') {\n    index = FUN_00001dc0(param1);\n    ptr1 = FUN_00001d80(param1);\n    *(uint *)(ptr1 + 0x14) = *(uint *)(ptr1 + 0x14) | 1 << (index & 0xff);\n  }\n  else {\n    index = FUN_00001dc0(param1);\n    ptr1 = FUN_00001d80(param1);\n    *(uint *)(ptr1 + 0x14) = *(uint *)(ptr1 + 0x14) & ~(1 << (index & 0xff));\n  }\n  ptr1 = FUN_00001d5e(param1);\n  ptr2 = FUN_00001dc0(param1);\n  *(uint *)(ptr1 + ptr2 * 4) = param2 & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_status_00001eea",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "index",
                "iVar2": "ptr1",
                "iVar3": "ptr2"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001f80",
                "FUN_00001d80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_value_in_memory_00001f80",
            "code": "\nvoid updateValueInMemory_00001f80(undefined2 param1,undefined4 param2)\n\n{\n  int var1;\n  int var2;\n  undefined4 var3;\n  undefined4 var4;\n  uint var5;\n  \n  FUN_00001ddc(param1);\n  var1 = FUN_00001d5e(param1);\n  var2 = FUN_00001dc0(param1);\n  var5 = *(uint *)(var1 + var2 * 4);\n  var1 = FUN_00001d5e(param1);\n  var2 = FUN_00001dc0(param1);\n  *(undefined4 *)(var1 + var2 * 4) = param2;\n  if ((var5 & 0xf0000) != 0) {\n    var3 = FUN_00001da2(param1);\n    var4 = FUN_00001dc0(param1);\n    FUN_00001ec4(var3,var4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_value_in_memory_00001f80",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "var1",
                "iVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "uVar5": "var5"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001ddc",
                "FUN_00001d5e",
                "FUN_00001ec4",
                "FUN_00001da2",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bit_00001ff6",
            "code": "\nvoid setBit_00001ff6(undefined2 input)\n\n{\n  uint result;\n  int offset;\n  \n  result = FUN_00001dc0(input);\n  offset = FUN_00001d80(input);\n  *(int *)(offset + 4) = 1 << (result & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bit_00001ff6",
                "param_1": "input",
                "uVar1": "result",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_flags_00002028",
            "code": "\nvoid processFlags_00002028(int dataPtr,undefined4 configParam)\n\n{\n  int result;\n  uint flags;\n  uint bitIndex;\n  \n  flags = *(uint *)(dataPtr + 0xa0);\n  for (bitIndex = 0; (int)bitIndex < 0x20; bitIndex = bitIndex + 1) {\n    if (((flags & 1 << (bitIndex & 0xff)) != 0) &&\n       ((*(uint *)(dataPtr + bitIndex * 4) & 0xf0000) != 0)) {\n      *(int *)(dataPtr + 0xa0) = 1 << (bitIndex & 0xff);\n      result = FUN_00001e0c(configParam,bitIndex);\n      (**(code **)(&DAT_1fff0b78 + result * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + result * 0xc));\n    }\n  }\n  FUN_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_flags_00002028",
                "param_1": "dataPtr",
                "param_2": "configParam",
                "iVar1": "result",
                "uVar2": "flags",
                "local_c": "bitIndex"
            },
            "calling": [
                "FUN_000020e0",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020f4",
                "FUN_000020b8"
            ],
            "called": [
                "FUN_00001cf0",
                "FUN_00001e0c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_memory_000020b8",
            "code": "\nvoid initializeMemory_000020b8(void)\n\n{\n  FUN_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_memory_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "initialize_memory_000020cc",
            "code": "\nvoid initializeMemory_000020cc(void)\n\n{\n  FUN_00002028(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "initialize_memory_000020cc"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_memory_000020e0",
            "code": "\nvoid initializeMemory_000020e0(void)\n\n{\n  FUN_00002028(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_memory_000020e0"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_hardware_000020f4",
            "code": "\nvoid initializeHardware_000020f4(void)\n\n{\n  FUN_00002028(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_hardware_000020f4"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_memory_00002108",
            "code": "\nvoid initializeMemory_00002108(void)\n\n{\n  FUN_00002028(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_memory_00002108"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_info_0000211c",
            "code": "\nvoid printProcessInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 formatString;\n  int stackSize;\n  int stackUsed;\n  dword baseAddress;\n  uint index;\n  undefined4 *functionPointer;\n  undefined4 currentAddress;\n  undefined4 stackBase;\n  int totalStackSize;\n  short processIndex;\n  int totalStackUsed;\n  int totalMemoryUsed;\n  \n  formatString = 0x515f;\n  totalMemoryUsed = 0;\n  totalStackUsed = 0;\n  FUN_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  totalStackSize = FUN_000008b8();\n  stackBase = FUN_0000091c();\n  currentAddress = FUN_00000900();\n  FUN_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               totalStackSize,stackBase,currentAddress);\n  totalMemoryUsed = totalMemoryUsed + 0x200;\n  if (0 < totalStackSize) {\n    totalStackUsed = totalStackSize + totalStackUsed;\n  }\n  for (processIndex = 1; processIndex < 0x21; processIndex = processIndex + 1) {\n    functionPointer = *(undefined4 **)(&DAT_1fff0358 + processIndex * 4);\n    if (functionPointer != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(functionPointer + 1);\n      baseAddress = (&relocationTable[4].r_offset)[index];\n      stackUsed = (int)&formatString + (uint)(8 < index);\n      stackSize = functionPointer[0xb];\n      totalMemoryUsed = stackSize + totalMemoryUsed;\n      iVar1 = FUN_000010a0(functionPointer[9]);\n      stackSize = stackSize - iVar1;\n      totalStackUsed = stackSize + totalStackUsed;\n      FUN_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)functionPointer + 6),functionPointer[10],baseAddress,stackUsed,\n                   *(undefined *)((int)functionPointer + 5),functionPointer[0xb],stackSize,functionPointer[9],*functionPointer);\n    }\n  }\n  FUN_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,totalMemoryUsed,totalStackUsed);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "local_40": "formatString",
                "local_3c": "stackSize",
                "local_38": "stackUsed",
                "local_34": "baseAddress",
                "local_30": "index",
                "local_2c": "functionPointer",
                "local_28": "currentAddress",
                "local_24": "stackBase",
                "local_20": "totalStackSize",
                "local_1a": "processIndex",
                "local_18": "totalStackUsed",
                "local_14": "totalMemoryUsed",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable"
            },
            "calling": [
                "FUN_00000f04",
                "FUN_00002eb4"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_0000091c",
                "FUN_000010a0",
                "FUN_00000900",
                "FUN_000008b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int value;\n  bool isEqual;\n  \n  value = *(int *)(input + 0xc);\n  isEqual = *(int *)(input + 8) == value;\n  if (isEqual) {\n    value = 1;\n  }\n  result = (undefined)value;\n  if (!isEqual) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value",
                "bVar3": "isEqual",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "validate_difference_00002294",
            "code": "\nundefined validateDifference_00002294(int ptr)\n\n{\n  undefined result;\n  int difference;\n  bool isDifferenceValid;\n  \n  difference = *(int *)(ptr + 4);\n  isDifferenceValid = *(int *)(ptr + 0xc) - *(int *)(ptr + 8) == difference;\n  if (isDifferenceValid) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!isDifferenceValid) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "validate_difference_00002294",
                "param_1": "ptr",
                "uVar1": "result",
                "iVar2": "difference",
                "bVar3": "isDifferenceValid"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_and_insert_value_000022be",
            "code": "\nvoid incrementAndInsertValue_000022be(int *array,undefined value)\n\n{\n  uint currentIndex;\n  \n  currentIndex = array[3];\n  array[3] = currentIndex + 1;\n  *(undefined *)((currentIndex & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_and_insert_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "currentIndex"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "extract_and_increment_value_000022f0",
            "code": "\nundefined extractAndIncrementValue_000022f0(int *data)\n\n{\n  uint value;\n  \n  value = index;\n  index = value + 1;\n  return *(undefined *)((value & mask - 1U) + *data);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "extract_and_increment_value_000022f0",
                "param_1": "data",
                "uVar1": "value",
                "param_1[1]": "mask",
                "param_1[2]": "index"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_count_0000231c",
            "code": "\nint copyAndCount_0000231c(undefined4 arg,undefined *dest,int size)\n\n{\n  undefined byteValue;\n  int result;\n  undefined *destPtr;\n  int remainingSize;\n  \n  destPtr = dest;\n  remainingSize = size;\n  while ((remainingSize != 0 && (result = FUN_00002270(arg), result == 0))) {\n    byteValue = FUN_000022f0(arg);\n    *destPtr = byteValue;\n    remainingSize = remainingSize + -1;\n    destPtr = destPtr + 1;\n  }\n  return size - remainingSize;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_count_0000231c",
                "param_1": "arg",
                "param_2": "dest",
                "param_3": "size",
                "uVar1": "byteValue",
                "iVar2": "result",
                "local_20": "destPtr",
                "local_14": "remainingSize"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "validate_and_process_data_00002364",
            "code": "\nundefined4 validate_and_process_data_00002364(undefined4 data,undefined additional_data)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  result = FUN_00002294(data);\n  if (result == 0) {\n    FUN_000022be(data,additional_data);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00002364": "validate_and_process_data_00002364",
                "param_1": "data",
                "param_2": "additional_data",
                "iVar1": "result",
                "uVar2": "return_value"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00002294",
                "FUN_000022be"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_00002396",
            "code": "\nvoid initialize_00002396(void)\n\n{\n  FUN_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initializeSystem_000023a4(void)\n\n{\n  undefined4 uVar1;\n  undefined buffer [128];\n  \n  FUN_000023d0(0);\n  FUN_00004db8(\"Welcome to RIOT!\");\n  uVar1 = FUN_00002e6c(0,buffer,0x80);\n  triggerInterrupt(0x3f);\n  return uVar1;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "buffer",
                "software_interrupt": "triggerInterrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000023d0",
                "FUN_00002e6c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "execute_software_interrupt_000023c8",
            "code": "\nvoid executeSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "execute_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "initialize_component_000023d0",
            "code": "\nundefined4 initializeComponent_000023d0(undefined4 input)\n\n{\n  undefined4 returnValue;\n  \n  if (DAT_1fff0d98 == 0) {\n    returnValue = FUN_000023c8(1,input,0);\n  }\n  else {\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "initialize_component_000023d0",
                "param_1": "input",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "copy_pointer_0000240c",
            "code": "\nundefined4 * copyPointer_0000240c(undefined4 *sourcePointer)\n\n{\n  undefined4 *destinationPointer;\n  \n  destinationPointer = (undefined4 *)*sourcePointer;\n  if (destinationPointer != (undefined4 *)0x0) {\n    *sourcePointer = *destinationPointer;\n  }\n  return destinationPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "copy_pointer_0000240c",
                "param_1": "sourcePointer",
                "puVar1": "destinationPointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "validate_input_00002434",
            "code": "\nundefined4 validateInput_00002434(int *input_ptr,int flag)\n\n{\n  int data;\n  undefined4 result;\n  \n  result = FUN_00000cd0();\n  data = DAT_1fff03dc;\n  if (*input_ptr == 0) {\n    *input_ptr = -1;\n    FUN_00000d0c(result);\n    result = 1;\n  }\n  else if (flag == 0) {\n    FUN_00000d0c(result);\n    result = 0;\n  }\n  else {\n    FUN_00000698(DAT_1fff03dc,2);\n    if (*input_ptr == -1) {\n      *input_ptr = data + 8;\n      *(undefined4 *)*input_ptr = 0;\n    }\n    else {\n      FUN_00001034(input_ptr,data);\n    }\n    FUN_00000d0c(result);\n    FUN_0000093c();\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002434": "validate_input_00002434",
                "param_1": "input_ptr",
                "param_2": "flag",
                "uVar2": "result",
                "iVar1": "data"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "process_parameter_000024bc",
            "code": "\nvoid processParameter_000024bc(int *inputParam)\n\n{\n  undefined undefinedVar;\n  undefined4 functionResult;\n  int tempVar;\n  \n  functionResult = FUN_00000cd0();\n  if (*inputParam == 0) {\n    FUN_00000d0c(functionResult);\n  }\n  else if (*inputParam == -1) {\n    *inputParam = 0;\n    FUN_00000d0c(functionResult);\n  }\n  else {\n    tempVar = FUN_0000240c(inputParam);\n    FUN_00000698(tempVar + -8,10);\n    if (*inputParam == 0) {\n      *inputParam = -1;\n    }\n    undefinedVar = *(undefined *)(tempVar + -3);\n    FUN_00000d0c(functionResult);\n    FUN_00000738(undefinedVar);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "process_parameter_000024bc",
                "param_1": "inputParam",
                "uVar1": "undefinedVar",
                "uVar2": "functionResult",
                "iVar3": "tempVar"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000698",
                "FUN_0000240c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "update_byte_00002538",
            "code": "\nvoid updateByte_00002538(byte inputByte,uint newByte)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((newByte & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((newByte & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "update_byte_00002538",
                "param_1": "inputByte",
                "param_2": "newByte"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_data_0000258c",
            "code": "\n\n\nvoid initializeData_0000258c(void)\n\n{\n  uint counter;\n  \n  _DAT_e000ed08 = 0;\n  FUN_00002538(0xfffffffe,1);\n  FUN_00002538(0xfffffffb,1);\n  for (counter = 0; counter < 0x66; counter = counter + 1) {\n    FUN_00002538((int)(char)counter,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_data_0000258c",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_system_000025f4",
            "code": "\nvoid initializeSystem_000025f4(void)\n\n{\n  FUN_000027b0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_system_000025f4"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_and_process_00002600",
            "code": "\nundefined4 initializeAndProcess_00002600(undefined4 inputData)\n\n{\n  undefined4 processedData;\n  \n  processedData = FUN_000047e4(inputData);\n  FUN_0000285c(processedData);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_and_process_00002600",
                "param_1": "inputData",
                "uVar1": "processedData"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_0000285c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "initialize_function_00002624",
            "code": "\nundefined4 initializeFunction_00002624(undefined4 inputParam)\n\n{\n  undefined4 result;\n  undefined4 counter;\n  \n  result = FUN_0000281c();\n  counter = 0;\n  FUN_0000443c(&result,inputParam);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "initialize_function_00002624",
                "param_1": "inputParam",
                "local_10": "result",
                "uStack_c": "counter"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_function_00002654",
            "code": "\nundefined4 initializeFunction_00002654(undefined4 inputParam,undefined4 outputParam,undefined4 additionalParam)\n\n{\n  undefined4 result;\n  \n  result = FUN_000047e4(inputParam);\n  DAT_1fff0d9c = outputParam;\n  FUN_00002894(result,0x26f1,additionalParam);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_function_00002654",
                "param_1": "inputParam",
                "param_2": "outputParam",
                "param_3": "additionalParam",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_00002894",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "decompiled_function_00002690",
            "code": "\nundefined4 decompiledFunction_00002690(undefined4 inputParameter)\n\n{\n  undefined4 result;\n  undefined4 tempVar;\n  \n  result = FUN_000028f0();\n  tempVar = 0;\n  FUN_0000443c(&result,inputParameter);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "decompiled_function_00002690",
                "param_1": "inputParameter",
                "local_10": "result",
                "uStack_c": "tempVar"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "initialize_data_000026c0",
            "code": "\nvoid initializeData_000026c0(void)\n\n{\n  FUN_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "initialize_data_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_system_000026d8",
            "code": "\nvoid initializeSystem_000026d8(void)\n\n{\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_system_000026d8"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "initialize_system_000026e4",
            "code": "\nvoid initialize_system_000026e4(void)\n\n{\n  FUN_00002970();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "initialize_system_000026e4"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "call_callback_function_000026f0",
            "code": "\nvoid callCallbackFunction_000026f0(undefined4 callbackParam)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParam);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "call_callback_function_000026f0",
                "param_1": "callbackParam"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_in_memory_00002714",
            "code": "\nvoid setBitInMemory_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_in_memory_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "store_data_00002744",
            "code": "\nvoid storeData_00002744(byte dataIndex,uint value)\n\n{\n  if ((char)dataIndex < '\\0') {\n    (&DAT_e000ed14)[dataIndex & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)dataIndex + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "store_data_00002744",
                "param_1": "dataIndex",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "check_and_call_function_00002798",
            "code": "\nvoid checkAndCallFunction_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    FUN_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "check_and_call_function_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "set_control_bits_000027b0",
            "code": "\n\n\nvoid setControlBits_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  FUN_0000294c();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "set_control_bits_000027b0"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_global_data_value_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getGlobalDataValue_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_global_data_value_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_flags_0000285c",
            "code": "\n\n\nvoid initializeFlags_0000285c(undefined4 newValue)\n\n{\n  _DAT_4003d000 = newValue;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_flags_0000285c",
                "param_1": "newValue"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int inputValue,undefined4 dataValue1,undefined4 dataValue2)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = dataValue1;\n  DAT_1fff0da4 = dataValue2;\n  FUN_00002744(0x2e,10);\n  FUN_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "inputValue",
                "param_2": "dataValue1",
                "param_3": "dataValue2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "increment_and_return_global_variable_000028f0",
            "code": "\n\n\nint incrementAndReturnGlobalVariable_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "increment_and_return_global_variable_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_flags_00002910",
            "code": "\n\n\nvoid clearFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_flag_0000294c",
            "code": "\n\n\nvoid setFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_flag_0000294c"
            },
            "calling": [
                "FUN_000027b0",
                "FUN_000026d8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_callbacks_00002994",
            "code": "\n\n\nvoid executeCallbacks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  FUN_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_callbacks_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "initialize_function_00002a00",
            "code": "\nvoid initializeFunction_00002a00(undefined4 input)\n\n{\n  FUN_00004cb4(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "initialize_function_00002a00",
                "param_1": "input"
            },
            "calling": [
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_valid_entry_00002a18",
            "code": "\nint find_valid_entry_00002a18(int *entry_list,undefined4 target_value)\n\n{\n  int iVar1;\n  int *current_entry;\n  undefined **reboot_message;\n  uint iteration_count;\n  int *current_value;\n  \n  current_entry = entry_list;\n  reboot_message = &PTR_s_reboot_00007300;\n  iteration_count = 0;\n  do {\n    if (1 < iteration_count) {\n      return 0;\n    }\n    current_value = (&current_entry)[iteration_count];\n    if (current_value != (int *)0x0) {\n      for (; *current_value != 0; current_value = current_value + 3) {\n        iVar1 = FUN_00004e52(*current_value,target_value);\n        if (iVar1 == 0) {\n          return current_value[2];\n        }\n      }\n    }\n    iteration_count = iteration_count + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_valid_entry_00002a18",
                "param_1": "entry_list",
                "param_2": "target_value",
                "local_18": "current_entry",
                "local_14": "reboot_message",
                "local_10": "iteration_count",
                "local_c": "current_value"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandList)\n\n{\n  int *currentCommand;\n  undefined **commandDescription;\n  uint index;\n  int *currentArgument;\n  \n  FUN_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  FUN_00004db8(\"---------------------------------------\");\n  currentCommand = commandList;\n  commandDescription = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentArgument = (&currentCommand)[index];\n    if (currentArgument != (int *)0x0) {\n      for (; *currentArgument != 0; currentArgument = currentArgument + 3) {\n        FUN_00004c84(\"%-20s %s\\n\",*currentArgument,currentArgument[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandList",
                "local_18": "currentCommand",
                "local_14": "commandDescription",
                "local_10": "index",
                "local_c": "currentArgument"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_string_00002b10",
            "code": "\nvoid processString_00002b10(undefined4 param,byte *inputString)\n\n{\n  int result;\n  byte *nextChar;\n  byte *strParams [3];\n  code *functionPtr;\n  char **strArgs;\n  uint numArgs;\n  byte quoteChar;\n  char *currentChar;\n  char *currentStr;\n  char **currentArg;\n  uint index;\n  int escapeCount;\n  uint quoteCount;\n  byte *strPtr;\n  \n  quoteCount = 0;\n  escapeCount = 0;\n  strPtr = inputString;\n  while( true ) {\n    strParams[0] = inputString;\n    strParams[1] = (byte *)param;\n    if (0x20 < *strPtr) {\n      if ((*strPtr == 0x22) || (*strPtr == 0x27)) {\n        quoteChar = *strPtr;\n        do {\n          nextChar = strPtr + 1;\n          if (*nextChar == 0) {\n            strPtr = nextChar;\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*nextChar == 0x5c) {\n            escapeCount = escapeCount + 1;\n            strPtr = strPtr + 2;\n            nextChar = strPtr;\n            if (*strPtr == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          strPtr = nextChar;\n        } while (quoteChar != *strPtr);\n        if (0x20 < strPtr[1]) {\n          FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*strPtr == 0x5c) {\n            escapeCount = escapeCount + 1;\n            strPtr = strPtr + 1;\n            if (*strPtr == 0) {\n              FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          strPtr = strPtr + 1;\n          if (*strPtr == 0x22) {\n            FUN_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *strPtr);\n      }\n      quoteCount = quoteCount + 1;\n    }\n    if (*strPtr == 0) break;\n    *strPtr = 0;\n    strPtr = strPtr + 1;\n  }\n  if (quoteCount != 0) {\n    numArgs = quoteCount;\n    strArgs = (char **)((int)strParams - ((quoteCount + 1) * 4 + 7 & 0xfffffff8));\n    strArgs[quoteCount] = (char *)0x0;\n    strPtr = inputString;\n    for (index = 0; currentArg = strArgs, index < quoteCount; index = index + 1) {\n      for (; *strPtr == 0; strPtr = strPtr + 1) {\n      }\n      if ((*strPtr == 0x22) || (*strPtr == 0x27)) {\n        strPtr = strPtr + 1;\n      }\n      strArgs[index] = (char *)strPtr;\n      for (; *strPtr != 0; strPtr = strPtr + 1) {\n      }\n    }\n    for (; (escapeCount != 0 && (*currentArg != (char *)0x0)); currentArg = currentArg + 1) {\n      for (currentStr = *currentArg; *currentStr != '\\0'; currentStr = currentStr + 1) {\n        if (*currentStr == '\\') {\n          for (currentChar = currentStr; *currentChar != '\\0'; currentChar = currentChar + 1) {\n            *currentChar = currentChar[1];\n          }\n          escapeCount = escapeCount + -1;\n          if (escapeCount == 0) break;\n        }\n      }\n    }\n    functionPtr = (code *)FUN_00002a18(param,*strArgs);\n    if (functionPtr == (code *)0x0) {\n      result = FUN_00004e52(&DAT_00007214,*strArgs);\n      if (result == 0) {\n        FUN_00002a88(strParams[1]);\n      }\n      else {\n        FUN_00004c84(\"shell: command not found: %s\\n\",*strArgs);\n      }\n    }\n    else {\n      (*functionPtr)(quoteCount,strArgs);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_string_00002b10",
                "param_1": "param",
                "param_2": "inputString",
                "iVar1": "result",
                "pbVar2": "nextChar",
                "local_48": "strParams",
                "local_3c": "functionPtr",
                "local_38": "strArgs",
                "local_34": "numArgs",
                "local_2d": "quoteChar",
                "local_2c": "currentChar",
                "local_28": "currentStr",
                "local_24": "currentArg",
                "local_20": "index",
                "local_1c": "escapeCount",
                "local_18": "quoteCount",
                "local_14": "strPtr"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002a88",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "reverse_and_normalize_string_00002d94",
            "code": "\nuint reverseAndNormalizeString_00002d94(undefined *inputString,int maxLength)\n\n{\n  int inputChar;\n  byte outputChar;\n  bool isFirstChar;\n  undefined *outputString;\n  \n  outputString = inputString;\n  while( true ) {\n    if (maxLength + -1 <= (int)outputString - (int)inputString) {\n      return 0xffffffff;\n    }\n    inputChar = FUN_00004418();\n    if (inputChar < 0) break;\n    if ((inputChar == 0xd) || (inputChar == 10)) {\n      *outputString = 0;\n      FUN_00002a00(0xd);\n      FUN_00002a00(10);\n      isFirstChar = outputString == inputString;\n      if (isFirstChar) {\n        inputString = (undefined *)0x1;\n      }\n      outputChar = (byte)inputString;\n      if (!isFirstChar) {\n        outputChar = 0;\n      }\n      return (uint)outputChar;\n    }\n    if ((inputChar == 8) || (inputChar == 0x7f)) {\n      if (outputString != inputString) {\n        outputString = outputString + -1;\n        *outputString = 0;\n        FUN_00002a00(8);\n        FUN_00002a00(0x20);\n        FUN_00002a00(8);\n      }\n    }\n    else {\n      *outputString = (char)inputChar;\n      FUN_00002a00(inputChar);\n      outputString = outputString + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "reverse_and_normalize_string_00002d94",
                "param_1": "inputString",
                "param_2": "maxLength",
                "iVar1": "inputChar",
                "bVar2": "outputChar",
                "bVar3": "isFirstChar",
                "local_c": "outputString"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "initialize_components_00002e48",
            "code": "\nvoid initializeComponents_00002e48(void)\n\n{\n  FUN_00002a00(0x3e);\n  FUN_00002a00(0x20);\n  FUN_000041d0(*(undefined4 *)(relocatedArray[16].r_offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "initialize_components_00002e48",
                "Elf32_Rel_ARRAY_1fff0200": "relocatedArray"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00002a00",
                "FUN_000041d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "function_name_00002e6c",
            "code": "\nvoid functionName_00002e6c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  int loopResult;\n  \n  FUN_00002e48();\n  do {\n    loopResult = FUN_00002d94(param2,param3);\n    if (loopResult == 0) {\n      FUN_00002b10(param1,param2);\n    }\n    FUN_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "function_name_00002e6c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "loopResult"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002b10",
                "FUN_00002e48",
                "FUN_00002d94"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_initialization_00002e9c",
            "code": "\nundefined4 executeInitialization_00002e9c(void)\n\n{\n  FUN_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_initialization_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "initialize_system_00002eb4",
            "code": "\nundefined4 initializeSystem_00002eb4(void)\n\n{\n  FUN_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "initialize_system_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceAddress)\n\n{\n  undefined4 info;\n  undefined4 deviceType;\n  undefined readBuffer [8];\n  uint readResult;\n  \n  readResult = FUN_00003d64(deviceAddress,readBuffer);\n  if ((int)readResult < 1) {\n    FUN_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceType = *(undefined4 *)(deviceAddress + 8);\n    info = FUN_000039e8(*(undefined *)(*(int *)(deviceAddress + 0xc) + 8));\n    FUN_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceType,info);\n    FUN_00003694(readBuffer,readResult & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceAddress",
                "uVar1": "info",
                "uVar2": "deviceType",
                "auStack_1c": "readBuffer",
                "local_14": "readResult"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_00003d64",
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00003694"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "iterate_and_execute_00002f30",
            "code": "\nvoid iterateAndExecute_00002f30(void)\n\n{\n  int index;\n  undefined4 *currentPtr;\n  \n  index = 0;\n  for (currentPtr = DAT_1fff0db0; currentPtr != (undefined4 *)0x0; currentPtr = (undefined4 *)*currentPtr) {\n    FUN_00002ecc(index,currentPtr);\n    FUN_00004db8(&DAT_00007380);\n    index = index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "iterate_and_execute_00002f30",
                "local_10": "index",
                "local_c": "currentPtr"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_info_00002f74",
            "code": "\nvoid printDeviceInfo_00002f74(void)\n\n{\n  undefined4 deviceClass;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    FUN_00004db8(\"No devices found\");\n  }\n  else {\n    FUN_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    deviceClass = FUN_000039e8(*(undefined *)(deviceList[3] + 8));\n    FUN_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,deviceClass,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_info_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "deviceClass"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_000039e8",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "check_device_and_execute_00002fe0",
            "code": "\nvoid checkDeviceAndExecute_00002fe0(int argumentCount,undefined4 *arguments)\n\n{\n  int result;\n  undefined4 deviceId;\n  \n  if (argumentCount < 3) {\n    FUN_00004c84(\"usage: %s %s <device id>|all\\n\",*arguments,arguments[1]);\n  }\n  else {\n    result = FUN_00004e52(arguments[2],&DAT_000073d4);\n    if (result == 0) {\n      FUN_00002f30();\n    }\n    else {\n      deviceId = FUN_00004042(arguments[2]);\n      result = FUN_00003d24(deviceId);\n      if (result == 0) {\n        FUN_00004db8(\"error: undefined device id given\");\n      }\n      else {\n        FUN_00002ecc(deviceId,result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "check_device_and_execute_00002fe0",
                "param_1": "argumentCount",
                "param_2": "arguments",
                "iVar1": "result",
                "uVar2": "deviceId"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00002ecc",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00004e52",
                "FUN_00002f30"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 newValue;\n  undefined2 dataBuffer [4];\n  uint numValues;\n  int device;\n  undefined4 deviceId;\n  int i;\n  \n  if (argc < 4) {\n    FUN_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceId = FUN_00004042(argv[2]);\n    device = FUN_00003d24(deviceId);\n    if (device == 0) {\n      FUN_00004db8(\"error: undefined device given\");\n    }\n    else {\n      FUN_00004622(dataBuffer,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (i = 0; i < (int)numValues; i = i + 1) {\n        newValue = FUN_00004042(argv[i + 3]);\n        dataBuffer[i] = newValue;\n      }\n      FUN_00004c84(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(device + 8));\n      FUN_00003694(dataBuffer,numValues & 0xff);\n      numValues = FUN_00003d94(device,dataBuffer);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          FUN_00004c84(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          FUN_00004c84(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        FUN_00004c84(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "newValue",
                "auStack_20": "dataBuffer",
                "local_18": "numValues",
                "local_14": "device",
                "local_10": "deviceId",
                "local_c": "i"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00004042",
                "FUN_00003d24",
                "FUN_00003d94",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_input_0000316c",
            "code": "\nundefined4 processInput_0000316c(int inputCount,undefined4 *inputArray)\n\n{\n  int result;\n  \n  if (inputCount < 2) {\n    FUN_00002f74();\n  }\n  else {\n    result = FUN_00004e52(inputArray[1],&DAT_000074ec);\n    if (result == 0) {\n      FUN_00002fe0(inputCount,inputArray);\n    }\n    else {\n      result = FUN_00004e52(inputArray[1],\"write\");\n      if (result == 0) {\n        FUN_0000305c(inputCount,inputArray);\n      }\n      else {\n        FUN_00004c84(\"usage: %s read|write\\n\",*inputArray);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_input_0000316c",
                "param_1": "inputCount",
                "param_2": "inputArray",
                "iVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_00004c84",
                "FUN_00002fe0",
                "FUN_0000305c",
                "FUN_00004e52",
                "FUN_00002f74"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  FUN_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int day)\n\n{\n  byte isLeapYear;\n  int adjustedYear;\n  \n  adjustedYear = month;\n  if (month < 3) {\n    adjustedYear = 1;\n  }\n  isLeapYear = (byte)adjustedYear;\n  if (2 < month) {\n    isLeapYear = 0;\n  }\n  year = year - (uint)isLeapYear;\n  adjustedYear = year;\n  if (year < 0) {\n    adjustedYear = year + 3;\n  }\n  return ((((adjustedYear >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)weekdayOffsets + (month + -1) * 4 + 0x50) + day) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "day",
                "bVar1": "isLeapYear",
                "iVar2": "adjustedYear",
                "Elf32_Rel_ARRAY_1fff0200": "weekdayOffsets"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "process_data_0000328c",
            "code": "\nundefined4 process_data_0000328c(undefined4 *input_array,int *output_array)\n\n{\n  int result;\n  int index;\n  short value;\n  \n  value = FUN_00004f84(*input_array,&index,10);\n  output_array[5] = value + -0x76c;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_array[4] = value + -1;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_array[3] = (int)value;\n  value = FUN_00004f84(input_array[1],&index,10);\n  output_array[2] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  output_array[1] = (int)value;\n  value = FUN_00004f84(index + 1,&index,10);\n  *output_array = (int)value;\n  result = FUN_000031fc(output_array[5] + 0x76c,output_array[4] + 1,output_array[3]);\n  output_array[6] = result;\n  output_array[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "process_data_0000328c",
                "param_1": "input_array",
                "param_2": "output_array",
                "iVar1": "result",
                "local_10": "index",
                "local_a": "value"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_00004f84",
                "FUN_000031fc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTime)\n\n{\n  FUN_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTime",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "check_alarm_000033c0",
            "code": "\nbool checkAlarm_000033c0(void)\n\n{\n  int errorFlag;\n  undefined buffer [36];\n  \n  errorFlag = FUN_00002690(buffer);\n  if (errorFlag != 0) {\n    FUN_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    FUN_00003378(buffer);\n  }\n  return errorFlag != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "check_alarm_000033c0",
                "iVar1": "errorFlag",
                "auStack_2c": "buffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002690",
                "FUN_00003378",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "initialize_alarm_000033f4",
            "code": "\nundefined4 initializeAlarm_000033f4(undefined4 input)\n\n{\n  int result;\n  undefined4 returnValue;\n  undefined alarmData [36];\n  \n  result = FUN_0000328c(input,alarmData);\n  if (result == 0) {\n    result = FUN_00002654(alarmData,0x31e1,0);\n    if (result == -1) {\n      FUN_00004db8(\"rtc: error setting alarm\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "initialize_alarm_000033f4",
                "param_1": "input",
                "iVar1": "result",
                "uVar2": "returnValue",
                "auStack_2c": "alarmData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002654",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_time_and_handle_error_00003444",
            "code": "\nbool getTimeAndHandleError_00003444(void)\n\n{\n  int returnValue;\n  undefined timeData [36];\n  \n  returnValue = FUN_00002624(timeData);\n  if (returnValue != 0) {\n    FUN_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    FUN_00003378(timeData);\n  }\n  return returnValue != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_time_and_handle_error_00003444",
                "auStack_2c": "timeData",
                "iVar1": "returnValue"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00003378",
                "FUN_00004db8",
                "FUN_00002624"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "set_time_from_stack_00003478",
            "code": "\nundefined4 setTimeFromStack_00003478(undefined4 inputValue)\n\n{\n  int stackCopyResult;\n  undefined4 returnValue;\n  undefined stackBuffer [36];\n  \n  stackCopyResult = FUN_0000328c(inputValue,stackBuffer);\n  if (stackCopyResult == 0) {\n    stackCopyResult = FUN_00002600(stackBuffer);\n    if (stackCopyResult == -1) {\n      FUN_00004db8(\"rtc: error setting time\");\n      returnValue = 1;\n    }\n    else {\n      returnValue = 0;\n    }\n  }\n  else {\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003478": "set_time_from_stack_00003478",
                "param_1": "inputValue",
                "iVar1": "stackCopyResult",
                "uVar2": "returnValue",
                "auStack_2c": "stackBuffer"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000328c",
                "FUN_00002600",
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "print_usage_000034c0",
            "code": "\nundefined4 printUsage_000034c0(void)\n\n{\n  FUN_00004db8(\"usage: rtc <command> [arguments]\");\n  FUN_00004db8(\"commands:\");\n  FUN_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUN_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUN_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUN_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUN_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUN_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUN_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "print_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int commandType,int commandData)\n\n{\n  int resultCode;\n  undefined4 returnValue;\n  \n  if (commandType < 2) {\n    FUN_000034c0();\n    returnValue = 1;\n  }\n  else {\n    resultCode = FUN_00004e66(*(undefined4 *)(commandData + 4),\"poweron\",7);\n    if (resultCode == 0) {\n      FUN_000026d8();\n    }\n    else {\n      resultCode = FUN_00004e66(*(undefined4 *)(commandData + 4),\"poweroff\",8);\n      if (resultCode == 0) {\n        FUN_000026e4();\n      }\n      else {\n        resultCode = FUN_00004e66(*(undefined4 *)(commandData + 4),\"clearalarm\",8);\n        if (resultCode == 0) {\n          FUN_000026c0();\n        }\n        else {\n          resultCode = FUN_00004e66(*(undefined4 *)(commandData + 4),\"getalarm\",8);\n          if (resultCode == 0) {\n            FUN_000033c0();\n          }\n          else {\n            resultCode = FUN_00004e66(*(undefined4 *)(commandData + 4),\"setalarm\",8);\n            if ((resultCode == 0) && (commandType == 4)) {\n              FUN_000033f4(commandData + 8);\n            }\n            else {\n              resultCode = FUN_00004e66(*(undefined4 *)(commandData + 4),\"gettime\",7);\n              if (resultCode == 0) {\n                FUN_00003444();\n              }\n              else {\n                resultCode = FUN_00004e66(*(undefined4 *)(commandData + 4),\"settime\",7);\n                if ((resultCode != 0) || (commandType != 4)) {\n                  FUN_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandData + 4));\n                  FUN_000034c0();\n                  return 1;\n                }\n                FUN_00003478(commandData + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "commandType",
                "param_2": "commandData",
                "iVar1": "resultCode",
                "uVar2": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_00004c84",
                "FUN_00004e66",
                "FUN_000026c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_000033c0",
                "FUN_000026d8",
                "FUN_00003478",
                "FUN_000026e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "run_infinite_loop_00003658",
            "code": "\nvoid runInfiniteLoop_00003658(void)\n\n{\n  executeSynchronizationBarrier(0xf);\n  executeSynchronizationBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "run_infinite_loop_00003658",
                "DataSynchronizationBarrier": "executeSynchronizationBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "initialize_application_00003688",
            "code": "\nvoid initialize_application_00003688(void)\n\n{\n  FUN_00003658();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "initialize_application_00003688"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int address,byte size)\n\n{\n  undefined4 result;\n  char bitFlag;\n  uint bitMask;\n  bool isBitSet;\n  undefined buffer [8];\n  int bufferLength;\n  char character;\n  byte index;\n  \n  if ((address == 0) || (3 < size)) {\n    FUN_00004db8(\"Unable to display data object\");\n  }\n  else {\n    FUN_00004c84(\"Data:\");\n    for (index = 0; index < size; index = index + 1) {\n      if (*(byte *)(address + 6) < 0x14) {\n        bitMask = 1 << (uint)*(byte *)(address + 6) & 0x8018f;\n        isBitSet = bitMask != 0;\n        if (isBitSet) {\n          bitMask = 1;\n        }\n        bitFlag = (char)bitMask;\n        if (!isBitSet) {\n          bitFlag = '\\0';\n        }\n        if (bitFlag == '\\0') goto LAB_000036ee;\n        character = '\\0';\n      }\n      else {\nLAB_000036ee:\n        character = FUN_00003918((int)*(char *)(address + 7));\n      }\n      FUN_00004c84(&DAT_000077bc);\n      if (size < 2) {\n        FUN_00004c84(\"     \");\n      }\n      else {\n        FUN_00004c84(\"[%u] \",index);\n      }\n      if (character == '\\0') {\n        if (*(char *)(address + 7) == '\\0') {\n          FUN_00004c84(&DAT_000077d8,(int)*(short *)(address + (uint)index * 2));\n        }\n        else if ((*(char *)(address + 7) + 4 < 0 == SCARRY4((int)*(char *)(address + 7),4)) &&\n                (*(char *)(address + 7) < '\\0')) {\n          bufferLength = FUN_00003e9e(buffer,(int)*(short *)(address + (uint)index * 2),\n                                  (int)*(char *)(address + 7));\n          buffer[bufferLength] = 0;\n          FUN_00004c84(&DAT_000077dc,buffer);\n        }\n        else {\n          FUN_00004c84(\"%iE%i\",(int)*(short *)(address + (uint)index * 2),\n                       (int)*(char *)(address + 7));\n        }\n      }\n      else {\n        FUN_00004c84(\"%6d %c\",(int)*(short *)(address + (uint)index * 2),character);\n      }\n      result = FUN_00003810(*(undefined *)(address + 6));\n      FUN_00004c84(&DAT_000077e8,result);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "address",
                "param_2": "size",
                "uVar1": "result",
                "cVar2": "bitFlag",
                "uVar3": "bitMask",
                "bVar4": "isBitSet",
                "auStack_18": "buffer",
                "local_10": "bufferLength",
                "local_a": "character",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004c84",
                "FUN_00004db8",
                "FUN_00003918",
                "FUN_00003e9e",
                "FUN_00003810"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined inputValue)\n\n{\n  undefined *resultAddress;\n  \n  switch(inputValue) {\n  case 2:\n    resultAddress = &DAT_000077ec;\n    break;\n  case 3:\n    resultAddress = &DAT_000077f0;\n    break;\n  case 4:\n    resultAddress = &DAT_000077f4;\n    break;\n  case 5:\n    resultAddress = &DAT_000077f8;\n    break;\n  case 6:\n    resultAddress = &DAT_000077fc;\n    break;\n  case 7:\n    resultAddress = (undefined *)0x7800;\n    break;\n  case 8:\n    resultAddress = &DAT_00007804;\n    break;\n  case 9:\n    resultAddress = &DAT_00007808;\n    break;\n  case 10:\n    resultAddress = &DAT_0000780c;\n    break;\n  case 0xb:\n    resultAddress = &DAT_00007810;\n    break;\n  case 0xc:\n    resultAddress = &DAT_00007814;\n    break;\n  case 0xd:\n    resultAddress = &DAT_00007818;\n    break;\n  case 0xe:\n    resultAddress = &DAT_0000781c;\n    break;\n  case 0xf:\n    resultAddress = &DAT_00007820;\n    break;\n  case 0x10:\n    resultAddress = &DAT_00007824;\n    break;\n  case 0x11:\n    resultAddress = &DAT_0000782c;\n    break;\n  default:\n    resultAddress = &DAT_00007834;\n    break;\n  case 0x13:\n    resultAddress = &DAT_00007830;\n    break;\n  case 0x15:\n    resultAddress = &DAT_00007828;\n  }\n  return resultAddress;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "inputValue",
                "puVar1": "resultAddress"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "convert_value_00003918",
            "code": "\nundefined4 convertValue_00003918(undefined inputValue)\n\n{\n  undefined4 convertedValue;\n  \n  switch(inputValue) {\n  case 2:\n    convertedValue = 0x68;\n    break;\n  case 3:\n    convertedValue = 0x6b;\n    break;\n  case 6:\n    convertedValue = 0x4d;\n    break;\n  case 9:\n    convertedValue = 0x47;\n    break;\n  case 0xc:\n    convertedValue = 0x54;\n    break;\n  case 0xf:\n    convertedValue = 0x50;\n    break;\n  case 0xf1:\n    convertedValue = 0x66;\n    break;\n  default:\n    convertedValue = 0;\n    break;\n  case 0xf4:\n    convertedValue = 0x70;\n    break;\n  case 0xf7:\n    convertedValue = 0x6e;\n    break;\n  case 0xfa:\n    convertedValue = 0x75;\n    break;\n  case 0xfd:\n    convertedValue = 0x6d;\n  }\n  return convertedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "convert_value_00003918",
                "param_1": "inputValue",
                "uVar1": "convertedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "map_input_to_name_000039e8",
            "code": "\nchar * mapInputToName_000039e8(char input)\n\n{\n  char *output;\n  \n  switch(input) {\n  case '\\0':\n    output = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    output = \"ACT_ANY\";\n    break;\n  case 'B':\n    output = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    output = \"ACT_SERVO\";\n    break;\n  case 'D':\n    output = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    output = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    output = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    output = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    output = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    output = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    output = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    output = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    output = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    output = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    output = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    output = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    output = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    output = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    output = \"SENSE_UV\";\n    break;\n  case -0x74:\n    output = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    output = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    output = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    output = \"SENSE_CO2\";\n    break;\n  default:\n    if (input == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    output = \"CLASS_UNKNOWN\";\n  }\n  return output;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "map_input_to_name_000039e8",
                "param_1": "input",
                "pcVar1": "output"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_00002f74"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_element_00003d24",
            "code": "\nundefined4 * findElement_00003d24(int numberOfElements)\n\n{\n  int count;\n  undefined4 *currentElement;\n  \n  count = 0;\n  for (currentElement = DAT_1fff0db0; (count < numberOfElements && (currentElement != (undefined4 *)0x0));\n      currentElement = (undefined4 *)*currentElement) {\n    count = count + 1;\n  }\n  return currentElement;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_element_00003d24",
                "param_1": "numberOfElements",
                "local_10": "count",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_function_00003d64",
            "code": "\nundefined4 executeFunction_00003d64(int functionPointer,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(functionPointer + 0xc))(*(undefined4 *)(functionPointer + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_function_00003d64",
                "param_1": "functionPointer",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int functionPointer,undefined4 param)\n\n{\n  undefined4 returnValue;\n  \n  if (functionPointer == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(functionPointer + 0xc) + 4))(*(undefined4 *)(functionPointer + 4),param);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "functionPointer",
                "param_2": "param",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "calculate_num_digits_00003dc4",
            "code": "\nint calculateNumDigits_00003dc4(int startValue,uint maxValue)\n\n{\n  uint remainder;\n  char *currentDigit;\n  uint powerOfTen;\n  int numDigits;\n  \n  numDigits = 1;\n  if (maxValue < 1000000000) {\n    for (powerOfTen = 10; powerOfTen <= maxValue; powerOfTen = powerOfTen * 10) {\n      numDigits = numDigits + 1;\n    }\n  }\n  else {\n    numDigits = 10;\n  }\n  if (startValue != 0) {\n    currentDigit = (char *)(numDigits + startValue);\n    remainder = maxValue;\n    do {\n      currentDigit = currentDigit + -1;\n      *currentDigit = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return numDigits;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "calculate_num_digits_00003dc4",
                "param_1": "startValue",
                "param_2": "maxValue",
                "local_20": "remainder",
                "local_14": "currentDigit",
                "local_10": "powerOfTen",
                "local_c": "numDigits"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "calculate_sum_with_sign_00003e58",
            "code": "\nint calculate_sum_with_sign_00003e58(undefined *input_string,int input_number)\n\n{\n  int sum_with_sign;\n  int abs_input_number;\n  undefined *modified_input_string;\n  \n  abs_input_number = input_number;\n  modified_input_string = input_string;\n  if (-(input_number >> 0x1f) != 0) {\n    if (input_string != (undefined *)0x0) {\n      modified_input_string = input_string + 1;\n      *input_string = 0x2d;\n    }\n    abs_input_number = -input_number;\n  }\n  sum_with_sign = FUN_00003dc4(modified_input_string,abs_input_number);\n  return -(input_number >> 0x1f) + sum_with_sign;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "calculate_sum_with_sign_00003e58",
                "param_1": "input_string",
                "param_2": "input_number",
                "local_18": "abs_input_number",
                "local_14": "modified_input_string",
                "iVar1": "sum_with_sign"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "process_data_00003e9e",
            "code": "\nundefined4 processData_00003e9e(undefined4 input,short value,undefined4 output)\n\n{\n  undefined4 result;\n  \n  result = FUN_00003ec4(input,(int)value,output);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "process_data_00003e9e",
                "param_1": "input",
                "param_2": "value",
                "param_3": "output",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "calculate_decimal_length_00003ec4",
            "code": "\nint calculate_decimal_length_00003ec4(undefined *output_buffer,uint input_number,int decimal_places)\n\n{\n  int digit_count;\n  undefined4 decimal_part_length;\n  uint dividend;\n  int dividend_remainder;\n  int total_characters;\n  \n  if (decimal_places + 7 < 0 != SCARRY4(decimal_places,7)) {\n    FUN_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  total_characters = 0;\n  if (decimal_places == 0) {\n    total_characters = FUN_00003e58(output_buffer,input_number);\n  }\n  else if (decimal_places < 1) {\n    dividend = input_number / *(uint *)(&DAT_00007978 + decimal_places * -4);\n    dividend_remainder = input_number - *(uint *)(&DAT_00007978 + decimal_places * -4) * dividend;\n    if (dividend_remainder < 0) {\n      dividend_remainder = -dividend_remainder;\n    }\n    if ((dividend == 0) && ((int)input_number < 0)) {\n      if (output_buffer != (undefined *)0x0) {\n        *output_buffer = 0x2d;\n      }\n      total_characters = 1;\n    }\n    if (output_buffer == (undefined *)0x0) {\n      digit_count = FUN_00003e58(0,dividend);\n      total_characters = digit_count + 1 + total_characters;\n    }\n    else {\n      digit_count = FUN_00003e58(output_buffer + total_characters,dividend);\n      digit_count = total_characters + digit_count;\n      total_characters = digit_count + 1;\n      output_buffer[digit_count] = 0x2e;\n      decimal_part_length = FUN_00003e58(output_buffer + total_characters,dividend_remainder);\n      FUN_00003ff4(output_buffer + total_characters,decimal_part_length,-decimal_places,0x30);\n    }\n    total_characters = -decimal_places + total_characters;\n  }\n  else {\n    total_characters = FUN_00003e58(output_buffer,input_number);\n    if (output_buffer != (undefined *)0x0) {\n      FUN_00004622(output_buffer + total_characters,0x30,decimal_places);\n    }\n    total_characters = decimal_places + total_characters;\n  }\n  return total_characters;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "calculate_decimal_length_00003ec4",
                "param_1": "output_buffer",
                "param_2": "input_number",
                "param_3": "decimal_places",
                "iVar1": "digit_count",
                "uVar2": "decimal_part_length",
                "uVar3": "dividend",
                "local_10": "dividend_remainder",
                "local_c": "total_characters"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00000f04",
                "FUN_00003e58",
                "FUN_00003ff4",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "calculate_new_value_00003ff4",
            "code": "\nuint calculate_new_value_00003ff4(int input_value,uint lower_threshold,uint upper_threshold,undefined undefined_value)\n\n{\n  uint new_value;\n  \n  new_value = lower_threshold;\n  if ((lower_threshold < upper_threshold) && (new_value = upper_threshold, input_value != 0)) {\n    FUN_000045ee((upper_threshold - lower_threshold) + input_value,input_value,lower_threshold);\n    FUN_00004622(input_value,undefined_value,upper_threshold - lower_threshold);\n  }\n  return new_value;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "calculate_new_value_00003ff4",
                "param_1": "input_value",
                "param_2": "lower_threshold",
                "param_3": "upper_threshold",
                "param_4": "undefined_value",
                "uVar1": "new_value"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "initialize_counter_00004042",
            "code": "\nvoid initializeCounter_00004042(undefined4 counter)\n\n{\n  FUN_00004f84(counter,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "initialize_counter_00004042",
                "param_1": "counter"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 process_data_0000404c(uint *data_ptr,int *info_ptr)\n\n{\n  int result;\n  int *aux_ptr;\n  uint temp_var;\n  ushort flags;\n  int temp;\n  code *function_ptr;\n  int count;\n  uint orig_data;\n  bool bVar9;\n  \n  flags = *(ushort *)(info_ptr + 3);\n  temp_var = (uint)flags;\n  if ((int)(temp_var << 0x1c) < 0) {\n    result = info_ptr[4];\n    if (result != 0) {\n      temp = temp_var << 0x1e;\n      bVar9 = temp == 0;\n      count = *info_ptr;\n      if (bVar9) {\n        temp = info_ptr[5];\n      }\n      *info_ptr = result;\n      if (!bVar9) {\n        temp = 0;\n      }\n      info_ptr[2] = temp;\n      for (count = count - result; 0 < count; count = count - temp) {\n        temp = (*(code *)info_ptr[10])(data_ptr,info_ptr[8],result,count);\n        if (temp < 1) {\n          *(ushort *)(info_ptr + 3) = *(ushort *)(info_ptr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        result = result + temp;\n      }\n    }\n  }\n  else {\n    if ((info_ptr[1] < 1) && (info_ptr[0x10] < 1)) {\n      return 0;\n    }\n    function_ptr = (code *)info_ptr[0xb];\n    if (function_ptr == (code *)0x0) {\n      return 0;\n    }\n    orig_data = *data_ptr;\n    *data_ptr = 0;\n    if ((flags & 0x1000) == 0) {\n      result = (*function_ptr)(data_ptr,info_ptr[8],temp_var & 0x1000,1);\n      if ((result == -1) && (temp_var = *data_ptr, temp_var != 0)) {\n        if ((temp_var == 0x1d) || (temp_var == 0x16)) {\n          *data_ptr = orig_data;\n          return 0;\n        }\n        flags = *(ushort *)(info_ptr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      result = info_ptr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(info_ptr + 3) << 0x1d) < 0) &&\n       (result = result - info_ptr[1], info_ptr[0xd] != 0)) {\n      result = result - info_ptr[0x10];\n    }\n    result = (*(code *)info_ptr[0xb])(data_ptr,info_ptr[8],result,0);\n    flags = *(ushort *)(info_ptr + 3);\n    if ((result == -1) &&\n       ((0x1d < *data_ptr || (-1 < (int)((0x20400001U >> (*data_ptr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(info_ptr + 3) = flags | 0x40;\n      return 0xffffffff;\n    }\n    info_ptr[1] = 0;\n    *info_ptr = info_ptr[4];\n    if (((int)((uint)flags << 0x13) < 0) && ((result != -1 || (*data_ptr == 0)))) {\n      info_ptr[0x15] = result;\n    }\n    aux_ptr = (int *)info_ptr[0xd];\n    *data_ptr = orig_data;\n    if (aux_ptr != (int *)0x0) {\n      if (aux_ptr != info_ptr + 0x11) {\n        FUN_00004b34(data_ptr);\n      }\n      info_ptr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "data_ptr",
                "param_2": "info_ptr",
                "iVar1": "result",
                "piVar2": "aux_ptr",
                "uVar3": "temp_var",
                "uVar4": "flags",
                "iVar5": "temp",
                "pcVar6": "function_ptr",
                "iVar7": "count",
                "uVar8": "orig_data"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int input,undefined4 *output)\n\n{\n  undefined4 result;\n  \n  if (output[4] != 0) {\n    if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n      FUN_000042a4();\n    }\n    if (output == &DAT_000079b8) {\n      output = *(undefined4 **)(input + 4);\n    }\n    else if (output == (undefined4 *)&DAT_000079d8) {\n      output = *(undefined4 **)(input + 8);\n    }\n    else if (output == (undefined4 *)&DAT_00007998) {\n      output = *(undefined4 **)(input + 0xc);\n    }\n    if (*(short *)(output + 3) != 0) {\n      if ((-1 < (int)(output[0x19] << 0x1f)) && (-1 < (int)*(short *)(output + 3) << 0x16)) {\n        FUNC_000045e8(output[0x16]);\n      }\n      result = FUN_0000404c(input,output);\n      if ((int)(output[0x19] << 0x1f) < 0) {\n        return result;\n      }\n      if ((int)((uint)*(ushort *)(output + 3) << 0x16) < 0) {\n        return result;\n      }\n      FUNC_000045ec(output[0x16]);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "result"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocations_000041d0",
            "code": "\nuint processRelocations_000041d0(int baseAddress,undefined4 offset,undefined4 size)\n\n{\n  uint result;\n  int numEntries;\n  dword *currentEntry;\n  int currentOffset;\n  uint accumulatedResult;\n  int count;\n  undefined4 *symbolTable;\n  \n  if (baseAddress == 0) {\n    symbolTable = &DAT_000079f8;\n    currentEntry = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    accumulatedResult = 0;\n    do {\n      count = currentEntry[1];\n      currentOffset = currentEntry[2];\n      while (count = count + -1, -1 < count) {\n        if ((1 < *(ushort *)(currentOffset + 0xc)) && (numEntries = *(short *)(currentOffset + 0xe) + 1, numEntries != 0)) {\n          result = FUN_00004158(0x1fff0284,currentOffset,size,numEntries,symbolTable);\n          accumulatedResult = accumulatedResult | result;\n        }\n        currentOffset = currentOffset + 0x68;\n      }\n      currentEntry = (dword *)*currentEntry;\n    } while (currentEntry != (dword *)0x0);\n    return accumulatedResult;\n  }\n  accumulatedResult = FUN_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,baseAddress);\n  return accumulatedResult;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocations_000041d0",
                "param_1": "baseAddress",
                "param_2": "offset",
                "param_3": "size",
                "uVar1": "result",
                "iVar2": "numEntries",
                "pdVar3": "currentEntry",
                "iVar4": "currentOffset",
                "uVar5": "accumulatedResult",
                "iVar6": "count",
                "puVar7": "symbolTable"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_param_000041f4",
            "code": "\nvoid initializeParam_000041f4(undefined4 *paramArray,undefined2 value1,undefined2 value2)\n\n{\n  *paramArray = 0;\n  paramArray[1] = 0;\n  paramArray[4] = 0;\n  paramArray[5] = 0;\n  paramArray[2] = 0;\n  *(undefined2 *)(paramArray + 3) = value1;\n  paramArray[0x19] = 0;\n  *(undefined2 *)((int)paramArray + 0xe) = value2;\n  paramArray[6] = 0;\n  FUN_00004622(paramArray + 0x17,0,8);\n  paramArray[9] = 0x4dc9;\n  paramArray[10] = 0x4def;\n  paramArray[0xb] = 0x4e27;\n  paramArray[8] = paramArray;\n  paramArray[0xc] = &LAB_00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_param_000041f4",
                "param_1": "paramArray",
                "param_2": "value1",
                "param_3": "value2"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "initialize_pointer_and_values_00004248",
            "code": "\nundefined4 * initializePointerAndValues_00004248(undefined4 baseAddress,int count)\n\n{\n  undefined4 *ptr;\n  int offset;\n  \n  offset = (count + -1) * 0x68;\n  ptr = (undefined4 *)FUN_00004bd0(baseAddress,offset + 0x74);\n  if (ptr != (undefined4 *)0x0) {\n    *ptr = 0;\n    ptr[1] = count;\n    ptr[2] = ptr + 3;\n    FUN_00004622(ptr + 3,0,offset + 0x68);\n  }\n  return ptr;\n}\n\n",
            "renaming": {
                "FUN_00004248": "initialize_pointer_and_values_00004248",
                "param_1": "baseAddress",
                "param_2": "count",
                "puVar1": "ptr",
                "iVar2": "offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_structure_00004274",
            "code": "\nvoid initialize_data_structure_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_structure_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_data_000042a4",
            "code": "\nvoid initializeData_000042a4(int data)\n\n{\n  undefined4 status;\n  \n  FUN_0000428c();\n  if (*(int *)(data + 0x18) == 0) {\n    *(undefined4 *)(data + 0x48) = 0;\n    *(undefined4 *)(data + 0x4c) = 0;\n    *(undefined4 *)(data + 0x50) = 0;\n    status = 0x1fff0284;\n    *(undefined **)(data + 0x28) = &DAT_0000423d;\n    if (data == 0x1fff0284) {\n      status = 1;\n    }\n    if (data == 0x1fff0284) {\n      *(undefined4 *)(data + 0x18) = status;\n    }\n    status = FUN_00004314(data);\n    *(undefined4 *)(data + 4) = status;\n    status = FUN_00004314(data);\n    *(undefined4 *)(data + 8) = status;\n    status = FUN_00004314(data);\n    *(undefined4 *)(data + 0xc) = status;\n    FUN_000041f4(*(undefined4 *)(data + 4),4,0);\n    FUN_000041f4(*(undefined4 *)(data + 8),9,1);\n    FUN_000041f4(*(undefined4 *)(data + 0xc),0x12,2);\n    *(undefined4 *)(data + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_data_000042a4",
                "param_1": "data",
                "uVar1": "status"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004c84",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00004314",
                "FUN_00004cb4",
                "FUN_00005404",
                "FUN_00006768",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_00004314",
                "FUN_0000428c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "find_relocation_00004314",
            "code": "\nundefined4 * findRelocation_00004314(undefined4 *result)\n\n{\n  dword dataCount;\n  int iterationCount;\n  undefined4 *relocationEntry;\n  dword *relocationArray;\n  \n  FUN_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUN_000042a4(0x1fff0284);\n  }\n  relocationArray = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iterationCount = relocationArray[1];\n    relocationEntry = (undefined4 *)relocationArray[2];\n    while (iterationCount = iterationCount + -1, -1 < iterationCount) {\n      if (*(short *)(relocationEntry + 3) == 0) {\n        relocationEntry[3] = 0xffff0001;\n        relocationEntry[0x19] = 0;\n        FUNC_000045e4(relocationEntry + 0x16);\n        FUN_00004280();\n        relocationEntry[1] = 0;\n        relocationEntry[2] = 0;\n        relocationEntry[4] = 0;\n        relocationEntry[5] = 0;\n        *relocationEntry = 0;\n        relocationEntry[6] = 0;\n        FUN_00004622(relocationEntry + 0x17,0,8);\n        relocationEntry[0xd] = 0;\n        relocationEntry[0xe] = 0;\n        relocationEntry[0x12] = 0;\n        relocationEntry[0x13] = 0;\n        return relocationEntry;\n      }\n      relocationEntry = relocationEntry + 0x1a;\n    }\n    if (*relocationArray == 0) {\n      dataCount = FUN_00004248(result,4);\n      *relocationArray = dataCount;\n      if (dataCount == 0) {\n        FUN_00004280();\n        *result = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    relocationArray = (dword *)*relocationArray;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "find_relocation_00004314",
                "param_1": "result",
                "dVar1": "dataCount",
                "iVar2": "iterationCount",
                "puVar3": "relocationEntry",
                "pdVar4": "relocationArray"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004248",
                "FUN_00004274",
                "FUN_000042a4",
                "FUN_00004280",
                "FUN_00004622",
                "FUN_000045e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint processData_000043a0(int inputAddress,code *callbackFunction)\n\n{\n  uint result;\n  int *currentAddress;\n  int dataAddress;\n  uint combinedResult;\n  int counter;\n  \n  currentAddress = (int *)(inputAddress + 0x48);\n  combinedResult = 0;\n  do {\n    counter = currentAddress[1];\n    dataAddress = currentAddress[2];\n    while (counter = counter + -1, -1 < counter) {\n      if ((1 < *(ushort *)(dataAddress + 0xc)) && (*(short *)(dataAddress + 0xe) != -1)) {\n        result = (*callbackFunction)(dataAddress);\n        combinedResult = combinedResult | result;\n      }\n      dataAddress = dataAddress + 0x68;\n    }\n    currentAddress = (int *)*currentAddress;\n  } while (currentAddress != (int *)0x0);\n  return combinedResult;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "inputAddress",
                "param_2": "callbackFunction",
                "piVar2": "currentAddress",
                "iVar3": "dataAddress",
                "uVar1": "result",
                "uVar4": "combinedResult",
                "iVar5": "counter"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "decode_and_update_data_00004418",
            "code": "\nuint decode_and_update_data_00004418(void)\n\n{\n  dword data_offset;\n  uint result;\n  byte **data_array;\n  byte *data_pointer;\n  \n  data_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_array = *(byte ***)(data_offset + 4);\n  if ((data_offset != 0) && (*(int *)(data_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_array == (byte **)&DAT_000079b8) {\n    data_array = *(byte ***)(data_offset + 4);\n  }\n  else if (data_array == (byte **)&DAT_000079d8) {\n    data_array = *(byte ***)(data_offset + 8);\n  }\n  else if (data_array == (byte **)&DAT_00007998) {\n    data_array = *(byte ***)(data_offset + 0xc);\n  }\n  if ((-1 < (int)data_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x16))) {\n    FUNC_000045e8(data_array[0x16]);\n  }\n  data_pointer = data_array[1];\n  data_array[1] = data_pointer + -1;\n  if ((int)(data_pointer + -1) < 0) {\n    result = FUN_00005e10(data_offset,data_array);\n  }\n  else {\n    data_pointer = *data_array;\n    *data_array = data_pointer + 1;\n    result = (uint)*data_pointer;\n  }\n  if ((-1 < (int)data_array[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(data_array + 3) << 0x16))) {\n    FUNC_000045ec(data_array[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "decode_and_update_data_00004418",
                "dVar1": "data_offset",
                "uVar2": "result",
                "ppbVar3": "data_array",
                "pbVar4": "data_pointer"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "calculate_date_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * calculateDateComponents_0000443c(undefined4 *dateArray,uint *resultArray)\n\n{\n  int tempVar;\n  uint totalDays;\n  uint days;\n  uint temp1;\n  uint temp2;\n  undefined4 param1Value;\n  undefined4 param2Value;\n  uint temp3;\n  bool isNegative;\n  \n  param1Value = *dateArray;\n  param2Value = dateArray[1];\n  tempVar = FUN_00006974(param1Value,param2Value,0x15180,0);\n  days = 0x15180;\n  FUN_00006974(param1Value,param2Value,0x15180,0);\n  isNegative = (int)days < 0;\n  if (isNegative) {\n    days = days + 0x15180;\n  }\n  if (isNegative) {\n    totalDays = tempVar + 0xafa6b;\n  }\n  else {\n    totalDays = tempVar + 0xafa6c;\n  }\n  resultArray[2] = days / 0xe10;\n  resultArray[1] = (days % 0xe10) / 0x3c;\n  *resultArray = (days % 0xe10) % 0x3c;\n  resultArray[6] = (totalDays + 3) % 7;\n  days = totalDays;\n  if ((int)totalDays < 0) {\n    days = totalDays - 0x23ab0;\n  }\n  totalDays = (days / 0x23ab1) * -0x23ab1 + totalDays;\n  temp1 = ((totalDays / 0x8eac + totalDays) - totalDays / 0x5b4) - totalDays / 0x23ab0;\n  temp2 = temp1 / 0x16d;\n  totalDays = (temp2 / 100 - temp1 / 0x5b4) + totalDays + temp2 * -0x16d;\n  temp3 = totalDays * 5 + 2;\n  temp1 = temp3 / 0x99;\n  if (temp3 < 0x5fa) {\n    tempVar = 2;\n  }\n  else {\n    tempVar = -10;\n  }\n  temp3 = temp1 + tempVar;\n  tempVar = (days / 0x23ab1) * 400 + temp2;\n  if (temp3 < 2) {\n    tempVar = tempVar + 1;\n  }\n  if (totalDays < 0x132) {\n    if (((temp2 & 3) == 0) && (temp2 != (temp2 / 100) * 100)) {\n      days = 1;\n    }\n    else {\n      days = (uint)(temp2 % 400 == 0);\n    }\n    days = totalDays + 0x3b + days;\n  }\n  else {\n    days = totalDays - 0x132;\n  }\n  resultArray[7] = days;\n  resultArray[3] = (totalDays + 1) - (temp1 * 0x99 + 2) / 5;\n  resultArray[4] = temp3;\n  resultArray[5] = tempVar - 0x76c;\n  resultArray[8] = 0;\n  return resultArray;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "calculate_date_components_0000443c",
                "param_1": "dateArray",
                "param_2": "resultArray",
                "uVar2": "totalDays",
                "uVar3": "days",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "param1Value",
                "uVar7": "param2Value",
                "uVar8": "temp3",
                "bVar9": "isNegative",
                "iVar1": "tempVar"
            },
            "calling": [
                "FUN_00002690",
                "FUN_00002624"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "execute_code_blocks_twice_0000459c",
            "code": "\nvoid executeCodeBlocksTwice_0000459c(void)\n\n{\n  code **codeBlockPointer;\n  int iterationCount;\n  \n  codeBlockPointer = (code **)&DAT_00007c58;\n  for (iterationCount = 0; iterationCount != 0; iterationCount = iterationCount + 1) {\n    (**codeBlockPointer)();\n    codeBlockPointer = codeBlockPointer + 1;\n  }\n  FUN_00000410();\n  codeBlockPointer = (code **)&DAT_00007c58;\n  for (iterationCount = 0; iterationCount != 0; iterationCount = iterationCount + 1) {\n    (**codeBlockPointer)();\n    codeBlockPointer = codeBlockPointer + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "execute_code_blocks_twice_0000459c",
                "ppcVar1": "codeBlockPointer",
                "iVar2": "iterationCount"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004274",
                "FUN_00005fec",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_000057f8",
                "FUN_00005790"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00005ff8",
                "FUN_0000579c",
                "FUN_00004158",
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000042a4",
                "FUN_000057f8",
                "FUN_00004280"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "copy_and_reverse_array_000045ee",
            "code": "\nvoid copyAndReverseArray_000045ee(undefined *sourceArray,undefined *destinationArray,int arraySize)\n\n{\n  undefined *sourcePtr;\n  undefined *destinationPtr;\n  \n  destinationPtr = destinationArray + arraySize;\n  if ((destinationArray < sourceArray) && (sourceArray < destinationPtr)) {\n    sourcePtr = sourceArray + arraySize;\n    while (sourcePtr != sourceArray) {\n      destinationPtr = destinationPtr + -1;\n      sourcePtr = sourcePtr + -1;\n      *sourcePtr = *destinationPtr;\n    }\n  }\n  else {\n    sourceArray = sourceArray + -1;\n    for (; destinationArray != destinationPtr; destinationArray = destinationArray + 1) {\n      sourceArray = sourceArray + 1;\n      *sourceArray = *destinationArray;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "copy_and_reverse_array_000045ee",
                "param_1": "sourceArray",
                "param_2": "destinationArray",
                "param_3": "arraySize",
                "puVar1": "sourcePtr",
                "puVar2": "destinationPtr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "memset_array_00004622",
            "code": "\nvoid memset_array_00004622(undefined *array,undefined value,int length)\n\n{\n  undefined *end_of_array;\n  \n  end_of_array = array + length;\n  for (; array != end_of_array; array = array + 1) {\n    *array = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "memset_array_00004622",
                "param_1": "array",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "end_of_array"
            },
            "calling": [
                "FUN_00004248",
                "FUN_000041f4",
                "FUN_00004314",
                "FUN_00003ec4",
                "FUN_00003ff4",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "adjust_date_time_00004634",
            "code": "\nvoid adjustDateTime_00004634(uint *dateTime,uint offset,undefined4 unknown)\n\n{\n  int daysInMonth;\n  uint dayOfMonth;\n  uint year;\n  int daysToAdd;\n  bool isNegativeOffset;\n  uint *temp;\n  uint month;\n  undefined4 unknownStack;\n  \n  temp = dateTime;\n  month = offset;\n  unknownStack = unknown;\n  if (0x3b < *dateTime) {\n    FUN_00005584(&temp,*dateTime,0x3c);\n    dayOfMonth = dateTime[1] + (int)temp;\n    dateTime[1] = dayOfMonth;\n    if ((int)month < 0) {\n      dayOfMonth = dayOfMonth - 1;\n      *dateTime = month + 0x3c;\n    }\n    else {\n      *dateTime = month;\n    }\n    if ((int)month < 0) {\n      dateTime[1] = dayOfMonth;\n    }\n  }\n  if (0x3b < dateTime[1]) {\n    FUN_00005584(&temp,dateTime[1],0x3c);\n    isNegativeOffset = (int)month < 0;\n    year = dateTime[2] + (int)temp;\n    dateTime[2] = year;\n    dayOfMonth = month;\n    if (isNegativeOffset) {\n      dayOfMonth = month + 0x3c;\n      year = year - 1;\n    }\n    if (!isNegativeOffset) {\n      dateTime[1] = dayOfMonth;\n    }\n    if (isNegativeOffset) {\n      dateTime[1] = dayOfMonth;\n    }\n    if (isNegativeOffset) {\n      dateTime[2] = year;\n    }\n  }\n  if (0x17 < dateTime[2]) {\n    FUN_00005584(&temp,dateTime[2],0x18);\n    isNegativeOffset = (int)month < 0;\n    year = dateTime[3] + (int)temp;\n    dateTime[3] = year;\n    dayOfMonth = month;\n    if (isNegativeOffset) {\n      dayOfMonth = month + 0x18;\n      year = year - 1;\n    }\n    if (!isNegativeOffset) {\n      dateTime[2] = dayOfMonth;\n    }\n    if (isNegativeOffset) {\n      dateTime[2] = dayOfMonth;\n    }\n    if (isNegativeOffset) {\n      dateTime[3] = year;\n    }\n  }\n  if (0xb < dateTime[4]) {\n    FUN_00005584(&temp,dateTime[4],0xc);\n    isNegativeOffset = (int)month < 0;\n    dayOfMonth = dateTime[5] + (int)temp;\n    dateTime[5] = dayOfMonth;\n    if (isNegativeOffset) {\n      month = month + 0xc;\n      dayOfMonth = dayOfMonth - 1;\n    }\n    if (!isNegativeOffset) {\n      dateTime[4] = month;\n    }\n    if (isNegativeOffset) {\n      dateTime[4] = month;\n    }\n    if (isNegativeOffset) {\n      dateTime[5] = dayOfMonth;\n    }\n  }\n  dayOfMonth = dateTime[5];\n  if ((dayOfMonth & 3) == 0) {\n    if (dayOfMonth == (dayOfMonth / 100) * 100) {\n      if ((dayOfMonth + 0x76c) % 400 == 0) {\n        daysToAdd = 0x1d;\n      }\n      else {\n        daysToAdd = 0x1c;\n      }\n    }\n    else {\n      daysToAdd = 0x1d;\n    }\n  }\n  else {\n    daysToAdd = 0x1c;\n  }\n  if ((int)dateTime[3] < 1) {\n    while ((int)dateTime[3] < 1) {\n      dayOfMonth = dateTime[4];\n      dateTime[4] = dayOfMonth - 1;\n      if (dayOfMonth - 1 == 0xffffffff) {\n        year = dateTime[5];\n        dayOfMonth = year - 1;\n        dateTime[4] = 0xb;\n        dateTime[5] = dayOfMonth;\n        if ((dayOfMonth & 3) == 0) {\n          if (dayOfMonth == (dayOfMonth / 100) * 100) {\n            if ((year + 0x76b) % 400 == 0) {\n              daysToAdd = 0x1d;\n            }\n            else {\n              daysToAdd = 0x1c;\n            }\n          }\n          else {\n            daysToAdd = 0x1d;\n          }\n        }\n        else {\n          daysToAdd = 0x1c;\n        }\n      }\n      daysInMonth = daysToAdd;\n      if (dateTime[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateTime[4]];\n      }\n      dateTime[3] = daysInMonth + dateTime[3];\n    }\n  }\n  else {\n    while( true ) {\n      dayOfMonth = dateTime[4];\n      daysInMonth = daysToAdd;\n      if (dayOfMonth != 1) {\n        daysInMonth = (&DAT_000079fc)[dayOfMonth];\n      }\n      if ((int)dateTime[3] <= daysInMonth) break;\n      dateTime[3] = dateTime[3] - daysInMonth;\n      dateTime[4] = dayOfMonth + 1;\n      if (dayOfMonth + 1 == 0xc) {\n        year = dateTime[5];\n        dayOfMonth = year + 1;\n        dateTime[4] = 0;\n        dateTime[5] = dayOfMonth;\n        if ((dayOfMonth & 3) == 0) {\n          if (dayOfMonth % 100 == 0) {\n            if ((year + 0x76d) % 400 == 0) {\n              daysToAdd = 0x1d;\n            }\n            else {\n              daysToAdd = 0x1c;\n            }\n          }\n          else {\n            daysToAdd = 0x1d;\n          }\n        }\n        else {\n          daysToAdd = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "adjust_date_time_00004634",
                "param_1": "dateTime",
                "param_2": "offset",
                "param_3": "unknown",
                "iVar1": "daysInMonth",
                "uVar2": "dayOfMonth",
                "uVar3": "year",
                "iVar4": "daysToAdd",
                "bVar5": "isNegativeOffset",
                "local_20": "temp",
                "local_1c": "month",
                "uStack_18": "unknownStack"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_weekday_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateWeekday_000047e4(int *date)\n\n{\n  longlong totalDays;\n  longlong adjustedDays;\n  int *timeInfo;\n  uint dayOffset;\n  int leapYearOffset;\n  int var_6;\n  int var_7;\n  uint var_8;\n  uint var_9;\n  uint var_10;\n  int totalYears;\n  uint daysSince2000;\n  uint isNegative;\n  uint var_14;\n  uint partLow;\n  bool bVar16;\n  \n  timeInfo = (int *)FUN_000056b0();\n  FUN_00004634(date);\n  daysSince2000 = date[5];\n  totalYears = date[3] + -1 + *(int *)(&DAT_00007a2c + date[4] * 4);\n  if (((1 < date[4]) && ((daysSince2000 & 3) == 0)) &&\n     ((daysSince2000 != (daysSince2000 / 100) * 100 || (daysSince2000 + 0x76c == ((daysSince2000 + 0x76c) / 400) * 400)))) {\n    totalYears = totalYears + 1;\n  }\n  date[7] = totalYears;\n  if (20000 < (int)&DAT_00002710 + daysSince2000) {\n    var_7 = -1;\n    leapYearOffset = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)daysSince2000 < 0x47) {\n    if (daysSince2000 != 0x46) {\n      for (var_9 = 0x45; (int)daysSince2000 < (int)var_9; var_9 = var_9 - 1) {\n        if ((var_9 & 3) == 0) {\n          if (var_9 == (var_9 / 100) * 100) {\n            if ((var_9 + 0x76c) % 400 == 0) {\n              var_7 = 0x16e;\n            }\n            else {\n              var_7 = 0x16d;\n            }\n          }\n          else {\n            var_7 = 0x16e;\n          }\n        }\n        else {\n          var_7 = 0x16d;\n        }\n        totalYears = totalYears - var_7;\n      }\n      if ((var_9 & 3) == 0) {\n        if (daysSince2000 == (daysSince2000 / 100) * 100) {\n          var_7 = 0x16d;\n          if ((daysSince2000 + 0x76c) % 400 == 0) {\n            var_7 = 0x16e;\n          }\n        }\n        else {\n          var_7 = 0x16e;\n        }\n      }\n      else {\n        var_7 = 0x16d;\n      }\n      totalYears = totalYears - var_7;\n    }\n  }\n  else {\n    var_9 = 0x46;\n    do {\n      if ((var_9 & 3) == 0) {\n        if (var_9 % 100 == 0) {\n          if ((var_9 + 0x76c) % 400 == 0) {\n            var_7 = 0x16e;\n          }\n          else {\n            var_7 = 0x16d;\n          }\n        }\n        else {\n          var_7 = 0x16e;\n        }\n      }\n      else {\n        var_7 = 0x16d;\n      }\n      var_9 = var_9 + 1;\n      totalYears = totalYears + var_7;\n    } while (daysSince2000 != var_9);\n  }\n  totalDays = (longlong)totalYears * 0x15180 + (longlong)(date[2] * 0xe10 + date[1] * 0x3c + *date)\n  ;\n  partLow = (uint)totalDays;\n  var_7 = (int)((ulonglong)totalDays >> 0x20);\n  FUN_000050e8();\n  FUN_00005100();\n  var_9 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    daysSince2000 = timeInfo[10];\n    var_7 = (uint)totalDays + daysSince2000;\n    leapYearOffset = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)daysSince2000 >> 0x1f) + (uint)CARRY4((uint)totalDays,daysSince2000);\n  }\n  else {\n    var_14 = date[8];\n    isNegative = var_14;\n    if (0 < (int)var_14) {\n      isNegative = 1;\n    }\n    if ((timeInfo[1] == date[5] + 0x76c) || (leapYearOffset = FUN_00004f98(), leapYearOffset != 0)) {\n      var_10 = timeInfo[0x14];\n      dayOffset = timeInfo[0x12];\n      var_8 = timeInfo[10];\n      var_9 = dayOffset - var_8;\n      leapYearOffset = (timeInfo[0x13] - ((int)var_8 >> 0x1f)) - (uint)(dayOffset < var_8);\n      if (((int)((var_7 - leapYearOffset) - (uint)(partLow < var_9)) < 0 ==\n           (SBORROW4(var_7,leapYearOffset) != SBORROW4(var_7 - leapYearOffset,(uint)(partLow < var_9)))) &&\n         (var_6 = (timeInfo[0x13] - ((int)var_10 >> 0x1f)) - (uint)(dayOffset < var_10),\n         bVar16 = partLow < dayOffset - var_10,\n         (int)((var_7 - var_6) - (uint)bVar16) < 0 !=\n         (SBORROW4(var_7,var_6) != SBORROW4(var_7 - var_6,(uint)bVar16)))) goto LAB_00004a88;\n      dayOffset = timeInfo[8] - var_10;\n      var_6 = (timeInfo[9] - ((int)var_10 >> 0x1f)) - (uint)((uint)timeInfo[8] < var_10);\n      if (*timeInfo != 0) {\n        if ((int)((var_7 - var_6) - (uint)(partLow < dayOffset)) < 0 ==\n            (SBORROW4(var_7,var_6) != SBORROW4(var_7 - var_6,(uint)(partLow < dayOffset))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        var_9 = 0;\n        if ((int)var_14 < 0) goto LAB_00004934;\nLAB_00004a14:\n        partLow = isNegative ^ var_9;\n        isNegative = var_9;\n        if (partLow == 1) {\n          if (var_9 == 0) {\n            var_7 = var_10 - var_8;\n          }\n          else {\n            var_7 = var_8 - var_10;\n          }\n          leapYearOffset = date[3];\n          *date = *date + var_7;\n          adjustedDays = totalDays + var_7;\n          FUN_00004634(date);\n          leapYearOffset = date[3] - leapYearOffset;\n          totalDays = totalDays + var_7;\n          if (leapYearOffset != 0) {\n            if (leapYearOffset < 2) {\n              if (leapYearOffset == -2 || leapYearOffset + 2 < 0 != SCARRY4(leapYearOffset,2)) {\n                leapYearOffset = 1;\n              }\n            }\n            else {\n              leapYearOffset = -1;\n            }\n            var_7 = leapYearOffset + date[7];\n            totalYears = totalYears + leapYearOffset;\n            if (var_7 < 0) {\n              var_9 = daysSince2000 - 1;\n              if ((var_9 & 3) == 0) {\n                if (var_9 == (var_9 / 100) * 100) {\n                  var_7 = 0x16d;\n                  if ((daysSince2000 + 0x76b) % 400 != 0) {\n                    var_7 = 0x16c;\n                  }\n                }\n                else {\n                  var_7 = 0x16d;\n                }\n              }\n              else {\n                var_7 = 0x16c;\n              }\n            }\n            else {\n              if ((daysSince2000 & 3) == 0) {\n                if (daysSince2000 == (daysSince2000 / 100) * 100) {\n                  leapYearOffset = 0x16d;\n                  if ((daysSince2000 + 0x76c) % 400 == 0) {\n                    leapYearOffset = 0x16e;\n                  }\n                }\n                else {\n                  leapYearOffset = 0x16e;\n                }\n              }\n              else {\n                leapYearOffset = 0x16d;\n              }\n              if (leapYearOffset <= var_7) {\n                var_7 = var_7 - leapYearOffset;\n              }\n            }\n            date[7] = var_7;\n            totalDays = adjustedDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((var_7 - var_6) - (uint)(partLow < dayOffset)) < 0 !=\n          (SBORROW4(var_7,var_6) != SBORROW4(var_7 - var_6,(uint)(partLow < dayOffset)))) {\nLAB_0000491e:\n        if ((int)((var_7 - leapYearOffset) - (uint)(partLow < var_9)) < 0 ==\n            (SBORROW4(var_7,leapYearOffset) != SBORROW4(var_7 - leapYearOffset,(uint)(partLow < var_9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)var_14) {\n        var_9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      var_9 = isNegative;\n      if (isNegative != 1) goto LAB_00004934;\n    }\n    daysSince2000 = timeInfo[0x14];\n    var_7 = (uint)totalDays + daysSince2000;\n    leapYearOffset = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)daysSince2000 >> 0x1f) + (uint)CARRY4((uint)totalDays,daysSince2000);\n    var_9 = 1;\n  }\n  FUN_000050f4();\n  date[8] = var_9;\n  date[6] = (totalYears + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(leapYearOffset,var_7);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_weekday_000047e4",
                "param_1": "date",
                "lVar1": "totalDays",
                "lVar2": "adjustedDays",
                "piVar3": "timeInfo",
                "uVar4": "dayOffset",
                "iVar5": "leapYearOffset",
                "iVar6": "var_6",
                "iVar7": "var_7",
                "uVar8": "var_8",
                "uVar9": "var_9",
                "uVar10": "var_10",
                "iVar11": "totalYears",
                "uVar12": "daysSince2000",
                "uVar13": "isNegative",
                "uVar14": "var_14",
                "uVar15": "partLow"
            },
            "calling": [
                "FUN_00002654",
                "FUN_00002600"
            ],
            "called": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "update_data_00004b34",
            "code": "\nvoid updateData_00004b34(undefined4 *output,int length,undefined4 param3,undefined4 param4)\n\n{\n  int *tempVar1;\n  int **extraOutput1;\n  int **ptr1;\n  int **ptr2;\n  int **ptr3;\n  int **ptr4;\n  bool flag1;\n  \n  if (length == 0) {\n    return;\n  }\n  ptr4 = (int **)(length + -4);\n  if (*(int *)(length + -4) < 0) {\n    ptr4 = (int **)((int)ptr4 + *(int *)(length + -4));\n  }\n  FUN_00005790();\n  ptr2 = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    ptr4[1] = (int *)0x0;\n    ptr1 = extraOutput1;\n    DAT_1fff0db4 = ptr4;\n  }\n  else {\n    ptr3 = DAT_1fff0db4;\n    if (ptr4 < DAT_1fff0db4) {\n      ptr1 = (int **)*ptr4;\n      ptr2 = (int **)((int)ptr4 + (int)ptr1);\n      flag1 = DAT_1fff0db4 == ptr2;\n      if (flag1) {\n        ptr2 = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      ptr4[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = ptr4;\n      if (flag1) {\n        ptr2 = (int **)((int)ptr2 + (int)ptr1);\n        *ptr4 = (int *)ptr2;\n      }\n    }\n    else {\n      do {\n        ptr2 = ptr3;\n        ptr3 = (int **)ptr2[1];\n        if (ptr3 == (int **)0x0) break;\n      } while (ptr3 <= ptr4);\n      ptr1 = (int **)*ptr2;\n      if ((int **)((int)ptr2 + (int)ptr1) == ptr4) {\n        ptr1 = (int **)((int)ptr1 + (int)*ptr4);\n        *ptr2 = (int *)ptr1;\n        if (ptr3 == (int **)((int)ptr2 + (int)ptr1)) {\n          tempVar1 = *ptr3;\n          ptr2[1] = ptr3[1];\n          ptr1 = (int **)((int)ptr1 + (int)tempVar1);\n          *ptr2 = (int *)ptr1;\n        }\n      }\n      else if (ptr4 < (int **)((int)ptr2 + (int)ptr1)) {\n        *output = 0xc;\n      }\n      else {\n        ptr1 = (int **)((int)ptr4 + (int)*ptr4);\n        flag1 = ptr3 == ptr1;\n        if (flag1) {\n          ptr1 = (int **)*ptr3;\n          ptr3 = (int **)ptr3[1];\n        }\n        ptr4[1] = (int *)ptr3;\n        if (flag1) {\n          ptr1 = (int **)((int)ptr1 + (int)*ptr4);\n          *ptr4 = (int *)ptr1;\n        }\n        ptr2[1] = (int *)ptr4;\n      }\n    }\n  }\n  FUN_0000579c(output,ptr1,ptr2,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "update_data_00004b34",
                "param_1": "output",
                "param_2": "length",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "tempVar1",
                "extraout_r1": "extraOutput1",
                "ppiVar2": "ptr1",
                "ppiVar3": "ptr2",
                "ppiVar4": "ptr3",
                "ppiVar5": "ptr4",
                "bVar6": "flag1"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_000054a8",
                "FUN_00006192",
                "FUN_00006768",
                "FUN_000060cc",
                "FUN_00005780"
            ],
            "called": [
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_memory_00004bd0",
            "code": "\nuint allocate_memory_00004bd0(undefined4 *dst_ptr,uint size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *prev;\n  int offset;\n  uint diff;\n  uint *curr;\n  uint alloc_size;\n  \n  alloc_size = (size + 3 & 0xfffffffc) + 8;\n  if (alloc_size < 0xc) {\n    alloc_size = 0xc;\n  }\n  if (((int)alloc_size < 0) || (alloc_size < size)) {\n    *dst_ptr = 0xc;\n  }\n  else {\n    FUN_00005790();\n    prev = DAT_1fff0db4;\n    for (curr = DAT_1fff0db4; curr != (uint *)0x0; curr = (uint *)curr[1]) {\n      diff = *curr - alloc_size;\n      if (-1 < (int)diff) {\n        if (0xb < diff) {\n          *curr = diff;\n          curr = (uint *)((int)curr + diff);\n          goto LAB_00004c34;\n        }\n        if (prev == curr) {\n          DAT_1fff0db4 = (uint *)curr[1];\n        }\n        if (prev != curr) {\n          prev[1] = (uint)(uint *)curr[1];\n        }\n        goto LAB_00004c42;\n      }\n      prev = curr;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = FUN_00000428(dst_ptr,0,prev,0,param_4);\n    }\n    prev = (uint *)FUN_00000428(dst_ptr,alloc_size);\n    if ((prev != (uint *)0xffffffff) &&\n       ((curr = (uint *)((int)prev + 3U & 0xfffffffc), prev == curr ||\n        (offset = FUN_00000428(dst_ptr,(int)curr - (int)prev), offset != -1)))) {\nLAB_00004c34:\n      *curr = alloc_size;\nLAB_00004c42:\n      FUN_0000579c(dst_ptr);\n      alloc_size = (int)curr + 0xbU & 0xfffffff8;\n      offset = alloc_size - (int)(curr + 1);\n      if (offset == 0) {\n        return alloc_size;\n      }\n      *(uint *)((int)curr + offset) = (int)(curr + 1) - alloc_size;\n      return alloc_size;\n    }\n    *dst_ptr = 0xc;\n    FUN_0000579c(dst_ptr);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_memory_00004bd0",
                "param_1": "dst_ptr",
                "param_2": "size",
                "puVar1": "prev",
                "iVar2": "offset",
                "uVar3": "diff",
                "puVar4": "curr",
                "uVar5": "alloc_size"
            },
            "calling": [
                "FUN_00005700",
                "FUN_00004248",
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00000428",
                "FUN_0000579c",
                "FUN_00005790"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "perform_action_00004c84",
            "code": "\nvoid performAction_00004c84(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  dword offset;\n  undefined4 input1_cpy;\n  undefined4 input2_cpy;\n  undefined4 input3_cpy;\n  undefined4 input4_cpy;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  input1_cpy = input1;\n  input2_cpy = input2;\n  input3_cpy = input3;\n  input4_cpy = input4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  FUN_000057f8(offset,*(undefined4 *)(offset + 8),input1,&input2_cpy,input1_cpy,&input2_cpy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "perform_action_00004c84",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "dVar1": "offset",
                "uVar2": "input1_cpy",
                "uStack_c": "input2_cpy",
                "uStack_8": "input3_cpy",
                "uStack_4": "input4_cpy"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_00000ed8",
                "FUN_0000211c",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00002f74",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_00002ecc",
                "FUN_00002fe0",
                "FUN_00003524",
                "FUN_0000316c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_input_00004cb4",
            "code": "\nuint processInput_00004cb4(uint input)\n\n{\n  dword relOffset;\n  undefined4 *currentPtr;\n  uint counter;\n  undefined *dataPtr;\n  undefined4 param_4;\n  undefined4 param_5;\n  \n  relOffset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  currentPtr = *(undefined4 **)(relOffset + 8);\n  if ((relOffset != 0) && (*(int *)(relOffset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (currentPtr == &DAT_000079b8) {\n    currentPtr = *(undefined4 **)(relOffset + 4);\n  }\n  else if (currentPtr == (undefined4 *)&DAT_000079d8) {\n    currentPtr = *(undefined4 **)(relOffset + 8);\n  }\n  else if (currentPtr == (undefined4 *)&DAT_00007998) {\n    currentPtr = *(undefined4 **)(relOffset + 0xc);\n  }\n  if ((-1 < (int)(currentPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(currentPtr + 3) << 0x16))) {\n    FUNC_000045e8(currentPtr[0x16]);\n  }\n  counter = currentPtr[2] - 1;\n  currentPtr[2] = counter;\n  if (((int)counter < 0) && (((int)counter < (int)currentPtr[6] || (counter = input & 0xff, counter == 10))))\n  {\n    input = FUN_00005404(relOffset,input,currentPtr,counter,param_4,param_5);\n  }\n  else {\n    dataPtr = (undefined *)*currentPtr;\n    *currentPtr = dataPtr + 1;\n    *dataPtr = (char)input;\n    input = input & 0xff;\n  }\n  if ((-1 < (int)(currentPtr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(currentPtr + 3) << 0x16))) {\n    FUNC_000045ec(currentPtr[0x16]);\n  }\n  return input;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_input_00004cb4",
                "param_1": "input",
                "dVar1": "relOffset",
                "puVar2": "currentPtr",
                "uVar3": "counter",
                "puVar4": "dataPtr",
                "unaff_r4": "param_4",
                "unaff_r5": "param_5"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "parse_and_process_data_00004db8",
            "code": "\nundefined4 parseAndProcessData_00004db8(int dataSize)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *stringPtr;\n  char **dataPtr;\n  undefined4 returnValue;\n  char *currentByte;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  dataPtr = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    FUN_000042a4(offset);\n  }\n  if (dataPtr == (char **)&DAT_000079b8) {\n    dataPtr = *(char ***)(offset + 4);\n  }\n  else if (dataPtr == (char **)&DAT_000079d8) {\n    dataPtr = *(char ***)(offset + 8);\n  }\n  else if (dataPtr == (char **)&DAT_00007998) {\n    dataPtr = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(dataPtr + 3) << 0x1c) < 0) && (dataPtr[4] != (char *)0x0)) ||\n     (result = FUN_000054a8(offset,dataPtr), result == 0)) {\n    currentByte = (char *)(dataSize + -1);\n    do {\n      while( true ) {\n        currentByte = currentByte + 1;\n        currentChar = *currentByte;\n        stringPtr = dataPtr[2] + -1;\n        dataPtr[2] = stringPtr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)stringPtr) {\n            currentByte = *dataPtr;\n            returnValue = 10;\n            *dataPtr = currentByte + 1;\n            *currentByte = '\\n';\n            goto LAB_00004d64;\n          }\n          result = FUN_00005404(offset,10,dataPtr);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)stringPtr < 0) && (((int)stringPtr < (int)dataPtr[6] || (currentChar == '\\n')))) break;\n        stringPtr = *dataPtr;\n        *dataPtr = stringPtr + 1;\n        *stringPtr = currentChar;\n      }\n      result = FUN_00005404(offset,currentChar,dataPtr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045ec(dataPtr[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "parse_and_process_data_00004db8",
                "param_1": "dataSize",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "stringPtr",
                "ppcVar5": "dataPtr",
                "uVar6": "returnValue",
                "pcVar7": "currentByte"
            },
            "calling": [
                "FUN_000023a4",
                "FUN_00003694",
                "FUN_00002b10",
                "FUN_000033c0",
                "FUN_0000305c",
                "FUN_00002a88",
                "FUN_00003478",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003444",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00005404",
                "FUN_000042a4",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_value_00004dc8",
            "code": "\nvoid updateValue_00004dc8(undefined4 input1,int input2)\n\n{\n  int result;\n  uint updatedValue;\n  bool isPositive;\n  \n  result = FUN_00000490(input1,(int)*(short *)(input2 + 0xe));\n  isPositive = -1 < result;\n  if (isPositive) {\n    updatedValue = *(int *)(input2 + 0x54) + result;\n  }\n  else {\n    updatedValue = *(ushort *)(input2 + 0xc) & 0xffffefff;\n  }\n  if (isPositive) {\n    *(uint *)(input2 + 0x54) = updatedValue;\n  }\n  if (!isPositive) {\n    *(short *)(input2 + 0xc) = (short)updatedValue;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_value_00004dc8",
                "param_1": "input1",
                "param_2": "input2",
                "iVar1": "result",
                "uVar2": "updatedValue",
                "bVar3": "isPositive"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 process_data_00004dee(undefined4 input_value,int buffer_address,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 result;\n  \n  if ((int)((uint)*(ushort *)(buffer_address + 0xc) << 0x17) < 0) {\n    FUN_000004f2(input_value,(int)*(short *)(buffer_address + 0xe),0,2);\n  }\n  *(ushort *)(buffer_address + 0xc) = *(ushort *)(buffer_address + 0xc) & 0xefff;\n  result = FUN_00000e38(param3,param4);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "input_value",
                "param_2": "buffer_address",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_data_00004e26",
            "code": "\nvoid updateData_00004e26(undefined4 param,int data)\n\n{\n  int result;\n  ushort flag;\n  bool isNegative;\n  \n  result = FUN_000004f2(param,(int)*(short *)(data + 0xe));\n  isNegative = result == -1;\n  if (isNegative) {\n    flag = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(data + 0x54) = result;\n    flag = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (isNegative) {\n    *(ushort *)(data + 0xc) = flag;\n  }\n  if (!isNegative) {\n    *(ushort *)(data + 0xc) = flag;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_data_00004e26",
                "param_1": "param",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "flag",
                "bVar3": "isNegative"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_bytes_00004e52",
            "code": "\nint compareBytes_00004e52(byte *buffer1,byte *buffer2)\n\n{\n  byte byte1;\n  uint byte2;\n  bool isEqual;\n  \n  do {\n    byte2 = (uint)*buffer1;\n    byte1 = *buffer2;\n    isEqual = byte2 == 1;\n    if (byte2 != 0) {\n      isEqual = byte2 == byte1;\n    }\n    buffer1 = buffer1 + 1;\n    buffer2 = buffer2 + 1;\n  } while (isEqual);\n  return byte2 - byte1;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_bytes_00004e52",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "bVar1": "byte1",
                "uVar2": "byte2",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_0000316c",
                "FUN_00004e52",
                "FUN_00002a18"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_bytes_00004e66",
            "code": "\nint compareBytes_00004e66(byte *inputArray,int startIndex,int size)\n\n{\n  byte *currentByte;\n  int difference;\n  byte *nextByte;\n  uint temp;\n  \n  if (size == 0) {\n    difference = 0;\n  }\n  else {\n    nextByte = (byte *)(startIndex + -1);\n    currentByte = inputArray;\n    do {\n      temp = (uint)*currentByte;\n      nextByte = nextByte + 1;\n      if ((temp != *nextByte) || (currentByte + 1 == inputArray + size)) break;\n      currentByte = currentByte + 1;\n    } while (temp != 0);\n    difference = temp - *nextByte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_bytes_00004e66",
                "param_1": "inputArray",
                "param_2": "startIndex",
                "param_3": "size",
                "pbVar1": "currentByte",
                "iVar2": "difference",
                "pbVar3": "nextByte",
                "uVar4": "temp"
            },
            "calling": [
                "FUN_0000562c",
                "FUN_00003524"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "parse_number_from_string_00004f84",
            "code": "\nuint parseNumberFromString_00004f84(byte *inputString,byte **outputPointer,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  uint isNegative;\n  uint digit;\n  int compareResult;\n  uint maximumValue;\n  uint divisionResult;\n  byte *currentByte;\n  byte *nextByte;\n  \n  nextByte = inputString;\n  do {\n    currentByte = nextByte;\n    nextByte = currentByte + 1;\n    currentChar = (uint)*currentByte;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextByte;\n    isNegative = 1;\n    nextByte = currentByte + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextByte;\n    nextByte = currentByte + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextByte & 0xdf) == 0x58) {\n    currentChar = (uint)nextByte[1];\n    base = 0x10;\n    nextByte = nextByte + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maximumValue = isNegative + 0x7fffffff;\n  compareResult = 0;\n  divisionResult = maximumValue / base;\n  result = 0;\n  do {\n    digit = currentChar - 0x30;\n    if (9 < digit) {\n      if (currentChar - 0x41 < 0x1a) {\n        digit = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digit = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (compareResult != -1) {\n      if ((divisionResult < result) || ((divisionResult == result && ((int)(maximumValue - base * divisionResult) < (int)digit)))) {\n        compareResult = -1;\n      }\n      else {\n        result = result * base + digit;\n        compareResult = 1;\n      }\n    }\n    currentChar = (uint)*nextByte;\n    nextByte = nextByte + 1;\n  } while( true );\n  if (compareResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maximumValue;\n    if (outputPointer == (byte **)0x0) {\n      return maximumValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (outputPointer == (byte **)0x0) {\n      return result;\n    }\n    if (compareResult == 0) goto LAB_00004f64;\n  }\n  inputString = nextByte + -1;\nLAB_00004f64:\n  *outputPointer = inputString;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "parse_number_from_string_00004f84",
                "param_1": "inputString",
                "param_2": "outputPointer",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "digit",
                "iVar5": "compareResult",
                "uVar6": "maximumValue",
                "uVar7": "divisionResult",
                "pbVar8": "currentByte",
                "pbVar9": "nextByte"
            },
            "calling": [
                "FUN_0000328c",
                "FUN_00004042"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *resultArray;\n  undefined4 isLeapYear;\n  uint dayOfWeek;\n  int temp;\n  uint *tempArray;\n  int totalDays;\n  uint leapYearFlag;\n  int index;\n  int daysToAdd;\n  uint isLeap;\n  \n  resultArray = (uint *)FUN_000056b0();\n  if ((int)year < 0x7b2) {\n    isLeapYear = 0;\n  }\n  else {\n    totalDays = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    resultArray[1] = year;\n    isLeap = (uint)(year % 400 == 0);\n    tempArray = resultArray;\n    do {\n      dayOfWeek = tempArray[5];\n      if (*(char *)(tempArray + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            temp = 0;\n          }\n          else {\n            temp = 1;\n          }\n        }\n        else {\n          temp = 0;\n        }\n        temp = temp + totalDays + dayOfWeek + -1;\n      }\n      else if (*(char *)(tempArray + 2) == 'D') {\n        temp = totalDays + dayOfWeek;\n      }\n      else {\n        leapYearFlag = isLeap;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          leapYearFlag = 1;\n        }\n        index = 0;\n        temp = totalDays;\n        while( true ) {\n          index = index + 1;\n          if ((int)tempArray[3] <= index) break;\n          temp = temp + *(int *)(&monthOffset + index * 4 + leapYearFlag * 0x30);\n        }\n        daysToAdd = dayOfWeek - (temp + 4U) % 7;\n        if (daysToAdd < 0) {\n          daysToAdd = daysToAdd + 7;\n        }\n        for (daysToAdd = (tempArray[4] - 1) * 7 + daysToAdd;\n            *(int *)(&monthOffset + index * 4 + leapYearFlag * 0x30) <= daysToAdd; daysToAdd = daysToAdd + -7) {\n        }\n        temp = temp + daysToAdd;\n      }\n      dayOfWeek = tempArray[10] + temp * 0x15180 + tempArray[6];\n      tempArray[8] = dayOfWeek;\n      tempArray[9] = (int)dayOfWeek >> 0x1f;\n      tempArray = tempArray + 10;\n    } while (resultArray + 0x14 != tempArray);\n    dayOfWeek = resultArray[9];\n    isLeap = resultArray[0x13];\n    *resultArray = (uint)((int)((dayOfWeek - isLeap) - (uint)(resultArray[8] < resultArray[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,isLeap) !=\n                    SBORROW4(dayOfWeek - isLeap,(uint)(resultArray[8] < resultArray[0x12]))));\n    isLeapYear = 1;\n  }\n  return isLeapYear;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "resultArray",
                "uVar2": "isLeapYear",
                "uVar3": "dayOfWeek",
                "iVar4": "temp",
                "puVar5": "tempArray",
                "iVar6": "totalDays",
                "uVar7": "leapYearFlag",
                "iVar8": "index",
                "iVar9": "daysToAdd",
                "uVar10": "isLeap",
                "UNK_00007b98": "monthOffset"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_memory_address_000050e8",
            "code": "\nundefined * get_memory_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_memory_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_starting_pointer_000050f4",
            "code": "\nundefined * getStartingPointer_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_starting_pointer_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "parse_input_data_00005100",
            "code": "\nvoid parseInputData_00005100(void)\n\n{\n  dword offset;\n  int result;\n  char *inputString;\n  int returnValue;\n  int parseReturnValue;\n  undefined dataType;\n  char *dataString;\n  bool isMultiple;\n  ushort *pLocal3a;\n  int *pLocal30;\n  ushort *pLocal38;\n  int *pLocal30_2;\n  ushort hour;\n  ushort minute;\n  ushort second;\n  ushort year;\n  ushort month;\n  ushort day;\n  int tempVar;\n  char *pathArray [2];\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  result = FUN_000056b0();\n  inputString = (char *)FUN_000056a0(offset,&DAT_00007a5c);\n  if (inputString == (char *)0x0) {\n    Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_00007a5f;\n    Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = inputString;\n    DAT_1fff0ddc = inputString;\n    FUN_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (returnValue = FUN_00004e52(), returnValue != 0)) {\n    FUN_00005780(DAT_1fff0dd4);\n    returnValue = FUN_00005ecc(inputString);\n    DAT_1fff0dd4 = FUN_00004bd0(offset,returnValue + 1);\n    if (DAT_1fff0dd4 != 0) {\n      FUN_00005ebc(DAT_1fff0dd4,inputString);\n    }\n    if (*inputString == ':') {\n      inputString = inputString + 1;\n    }\n    returnValue = FUN_00005e68(inputString,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&tempVar);\n    if (0 < returnValue) {\n      dataString = inputString + tempVar;\n      if (inputString[tempVar] == '-') {\n        dataString = dataString + 1;\n        returnValue = -1;\n      }\n      else {\n        if (inputString[tempVar] == '+') {\n          dataString = dataString + 1;\n        }\n        returnValue = 1;\n      }\n      minute = 0;\n      second = 0;\n      pLocal3a = &minute;\n      pLocal30 = &tempVar;\n      pLocal38 = &second;\n      pLocal30_2 = &tempVar;\n      parseReturnValue = FUN_00005e68(dataString,\"%hu%n:%hu%n:%hu%n\",&hour,&tempVar,&minute,&tempVar,\n                           &second,&tempVar);\n      if (0 < parseReturnValue) {\n        *(uint *)(result + 0x28) =\n             ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * returnValue;\n        Elf32_Rel_ARRAY_1fff0200[28].r_info = (dword)&DAT_1fff0dc7;\n        dataString = dataString + tempVar;\n        returnValue = FUN_00005e68(dataString,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&tempVar,pLocal3a,pLocal30,pLocal38,\n                             pLocal30_2);\n        if (returnValue < 1) {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = Elf32_Rel_ARRAY_1fff0200[28].r_info;\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          Elf32_Rel_ARRAY_1fff0200[29].r_offset = (dword)&DAT_1fff0dbc;\n          inputString = dataString + tempVar;\n          if (dataString[tempVar] == '-') {\n            inputString = inputString + 1;\n            returnValue = -1;\n          }\n          else {\n            if (dataString[tempVar] == '+') {\n              inputString = inputString + 1;\n            }\n            returnValue = 1;\n          }\n          hour = 0;\n          minute = 0;\n          second = 0;\n          tempVar = 0;\n          parseReturnValue = FUN_00005e68(inputString,\"%hu%n:%hu%n:%hu%n\",&hour,&tempVar,&minute,&tempVar,\n                               &second,&tempVar);\n          if (parseReturnValue < 1) {\n            returnValue = *(int *)(result + 0x28) + -0xe10;\n          }\n          else {\n            returnValue = ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * returnValue;\n          }\n          *(int *)(result + 0x50) = returnValue;\n          inputString = inputString + tempVar;\n          isMultiple = false;\n          returnValue = result;\n          while( true ) {\n            if (*inputString == ',') {\n              inputString = inputString + 1;\n            }\n            if (*inputString == 'M') {\n              parseReturnValue = FUN_00005e68(inputString,\"M%hu%n.%hu%n.%hu%n\",&year,&tempVar,&month,\n                                   &tempVar,&day,&tempVar);\n              if (parseReturnValue != 3) {\n                return;\n              }\n              if (0xb < year - 1) {\n                return;\n              }\n              if (4 < month - 1) {\n                return;\n              }\n              if (6 < day) {\n                return;\n              }\n              *(uint *)(returnValue + 0xc) = (uint)year;\n              *(uint *)(returnValue + 0x10) = (uint)month;\n              *(undefined *)(returnValue + 8) = 0x4d;\n              *(uint *)(returnValue + 0x14) = (uint)day;\n              dataString = inputString + tempVar;\n            }\n            else {\n              if (*inputString == 'J') {\n                inputString = inputString + 1;\n                dataType = 0x4a;\n              }\n              else {\n                dataType = 0x44;\n              }\n              day = FUN_00005fd8(inputString,pathArray,10);\n              dataString = pathArray[0];\n              if (pathArray[0] == inputString) {\n                if (isMultiple) {\n                  *(undefined *)(result + 0x30) = 0x4d;\n                  *(undefined4 *)(result + 0x34) = 0xb;\n                  *(undefined4 *)(result + 0x38) = 1;\n                  *(undefined4 *)(result + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(result + 8) = 0x4d;\n                  *(undefined4 *)(result + 0xc) = 3;\n                  *(undefined4 *)(result + 0x10) = 2;\n                  *(undefined4 *)(result + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(returnValue + 8) = dataType;\n                *(uint *)(returnValue + 0x14) = (uint)day;\n              }\n            }\n            hour = 2;\n            minute = 0;\n            second = 0;\n            tempVar = 0;\n            if (*dataString == '/') {\n              FUN_00005e68(dataString,&DAT_00007a85,&hour,&tempVar,&minute,&tempVar,&second,\n                           &tempVar);\n            }\n            *(uint *)(returnValue + 0x18) =\n                 (uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second;\n            returnValue = returnValue + 0x28;\n            inputString = dataString + tempVar;\n            if (isMultiple) break;\n            isMultiple = true;\n          }\n          FUN_00004f98(*(undefined4 *)(result + 4));\n          DAT_1fff0ddc = *(char **)(result + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(result + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "parse_input_data_00005100",
                "dVar1": "offset",
                "iVar2": "result",
                "pcVar3": "inputString",
                "iVar4": "returnValue",
                "iVar5": "parseReturnValue",
                "uVar6": "dataType",
                "pcVar7": "dataString",
                "bVar8": "isMultiple",
                "puVar9": "pLocal3a",
                "piVar10": "pLocal30",
                "puVar11": "pLocal38",
                "piVar12": "pLocal30_2",
                "local_3c": "hour",
                "local_3a": "minute",
                "local_38": "second",
                "local_36": "year",
                "local_34": "month",
                "local_32": "day",
                "local_30": "tempVar",
                "local_2c": "pathArray"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00005fd8",
                "FUN_00004f98",
                "FUN_00005ebc",
                "FUN_00004bd0",
                "FUN_00005e68",
                "FUN_000056b0",
                "FUN_00005780",
                "FUN_000056a0",
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int input,uint value,int *buffer,undefined4 param)\n\n{\n  int length;\n  uint ushortValue;\n  undefined *bytePtr;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (buffer == &DAT_000079b8) {\n    buffer = *(int **)(input + 4);\n  }\n  else if (buffer == (int *)&DAT_000079d8) {\n    buffer = *(int **)(input + 8);\n  }\n  else if (buffer == (int *)&DAT_00007998) {\n    buffer = *(int **)(input + 0xc);\n  }\n  buffer[2] = buffer[6];\n  ushortValue = (uint)*(ushort *)(buffer + 3);\n  length = ushortValue << 0x1c;\n  if (((length < 0) && (ushortValue = buffer[4], ushortValue != 0)) ||\n     (length = FUN_000054a8(input,buffer,length,ushortValue,param), length == 0)) {\n    length = *buffer - buffer[4];\n    value = value & 0xff;\n    if ((length < buffer[5]) || (length = FUN_00004158(input,buffer), length == 0)) {\n      buffer[2] = buffer[2] + -1;\n      bytePtr = (undefined *)*buffer;\n      *buffer = (int)(bytePtr + 1);\n      *bytePtr = (char)value;\n      if (buffer[5] != length + 1) {\n        if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x1f)) {\n          return value;\n        }\n        if (value != 10) {\n          return value;\n        }\n      }\n      length = FUN_00004158(input,buffer);\n      if (length == 0) {\n        return value;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "input",
                "param_2": "value",
                "param_3": "buffer",
                "param_4": "param",
                "iVar1": "length",
                "uVar2": "ushortValue",
                "puVar3": "bytePtr"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00004cb4",
                "FUN_000057a8"
            ],
            "called": [
                "FUN_00004158",
                "FUN_000054a8",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_relocation_000054a8",
            "code": "\nuint processRelocation_000054a8(undefined4 *resultPointer,undefined4 *relocationEntry)\n\n{\n  ushort currentValue;\n  dword offset;\n  ushort value;\n  uint mask;\n  uint temp;\n  \n  offset = relocationArray[16].r_offset;\n  if ((relocationArray[16].r_offset != 0) &&\n     (*(int *)(relocationArray[16].r_offset + 0x18) == 0)) {\n    FUN_000042a4(relocationArray[16].r_offset);\n  }\n  if (relocationEntry == &DAT_000079b8) {\n    relocationEntry = *(undefined4 **)(offset + 4);\n  }\n  else if (relocationEntry == (undefined4 *)&DAT_000079d8) {\n    relocationEntry = *(undefined4 **)(offset + 8);\n  }\n  else if (relocationEntry == (undefined4 *)&DAT_00007998) {\n    relocationEntry = *(undefined4 **)(offset + 0xc);\n  }\n  mask = (uint)*(ushort *)(relocationEntry + 3);\n  value = *(ushort *)(relocationEntry + 3);\n  if (-1 < (int)(mask << 0x1c)) {\n    if (-1 < (int)(mask << 0x1b)) {\n      *resultPointer = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(mask << 0x1d) < 0) {\n      if ((undefined4 *)relocationEntry[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)relocationEntry[0xd] != relocationEntry + 0x11) {\n          FUN_00004b34(resultPointer);\n        }\n        relocationEntry[0xd] = 0;\n      }\n      *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) & 0xffdb;\n      relocationEntry[1] = 0;\n      *relocationEntry = relocationEntry[4];\n    }\n    *(ushort *)(relocationEntry + 3) = *(ushort *)(relocationEntry + 3) | 8;\n  }\n  if ((relocationEntry[4] == 0) && ((*(ushort *)(relocationEntry + 3) & 0x280) != 0x200)) {\n    FUN_00005700(resultPointer,relocationEntry);\n  }\n  currentValue = *(ushort *)(relocationEntry + 3);\n  mask = (uint)currentValue;\n  value = *(ushort *)(relocationEntry + 3);\n  temp = mask & 1;\n  if ((currentValue & 1) == 0) {\n    if (-1 < (int)(mask << 0x1e)) {\n      temp = relocationEntry[5];\n    }\n    relocationEntry[2] = temp;\n  }\n  else {\n    relocationEntry[2] = 0;\n    relocationEntry[6] = -relocationEntry[5];\n  }\n  if (relocationEntry[4] != 0) {\n    return 0;\n  }\n  if ((currentValue & 0x80) == 0) {\n    return mask & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(relocationEntry + 3) = value | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_relocation_000054a8",
                "param_1": "resultPointer",
                "param_2": "relocationEntry",
                "uVar1": "currentValue",
                "dVar2": "offset",
                "uVar3": "value",
                "uVar4": "mask",
                "uVar5": "temp",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005700",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "calculate_quotient_and_remainder_00005584",
            "code": "\nvoid calculateQuotientAndRemainder_00005584(uint *quotientAndRemainder,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *quotientAndRemainder = quotient;\n  quotientAndRemainder[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "calculate_quotient_and_remainder_00005584",
                "param_1": "quotientAndRemainder",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "find_next_equal_character_0000562c",
            "code": "\nint find_next_equal_character_0000562c(undefined4 param_1,char *string,int *result_index)\n\n{\n  char current_char;\n  int *rel_offset_ptr;\n  int result;\n  char *current_ptr;\n  int *piVar5;\n  int relative_offset;\n  \n  FUN_00005fec();\n  current_ptr = string;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      current_char = *current_ptr;\n      if (current_char == '\\0') {\n        relative_offset = (int)current_ptr - (int)string;\n        rel_offset_ptr = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          piVar5 = rel_offset_ptr;\n          if (*piVar5 == 0) break;\n          result = FUN_00004e66(*piVar5,string,relative_offset);\n          rel_offset_ptr = piVar5 + 1;\n          if ((result == 0) && (result = *piVar5, *(char *)(result + relative_offset) == '=')) {\n            *result_index = (int)((int)piVar5 - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            FUN_00005ff8(param_1);\n            return result + relative_offset + 1;\n          }\n        }\n        break;\n      }\n      current_ptr = current_ptr + 1;\n    } while (current_char != '=');\n  }\n  FUN_00005ff8(param_1);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "find_next_equal_character_0000562c",
                "param_2": "string",
                "param_3": "result_index",
                "cVar1": "current_char",
                "piVar2": "rel_offset_ptr",
                "iVar3": "result",
                "pcVar4": "current_ptr",
                "iVar6": "relative_offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "initialize_stack_and_call_function_000056a0",
            "code": "\nvoid initializeStackAndCallFunction_000056a0(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined4 stackVariable1;\n  undefined4 stackVariable2;\n  \n  stackVariable1 = inputParam2;\n  stackVariable2 = inputParam3;\n  FUN_0000562c(inputParam1,inputParam2,&stackVariable1,inputParam4,inputParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "initialize_stack_and_call_function_000056a0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "uStack_c": "stackVariable1",
                "uStack_8": "stackVariable2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_default_value_000056b0",
            "code": "\nuint32_t get_default_value_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_default_value_000056b0",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_00004f98",
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "check_permissions_000056b8",
            "code": "\nundefined4 checkPermissions_000056b8(undefined4 param1,int param2,undefined4 *result,uint *status)\n\n{\n  int errorCode;\n  undefined4 permission;\n  undefined auxiliaryStack [4];\n  uint localValue;\n  \n  if ((*(short *)(param2 + 0xe) < 0) ||\n     (errorCode = FUN_00000514(param1,(int)*(short *)(param2 + 0xe),auxiliaryStack), errorCode < 0)) {\n    *status = 0;\n    if ((int)((uint)*(ushort *)(param2 + 0xc) << 0x18) < 0) {\n      permission = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *status = (uint)((localValue & 0xf000) == 0x2000);\n  }\n  permission = 0x400;\nLAB_000056f8:\n  *result = permission;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "check_permissions_000056b8",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "result",
                "param_4": "status",
                "iVar1": "errorCode",
                "uVar2": "permission",
                "auStack_68": "auxiliaryStack",
                "local_64": "localValue"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "process_data_00005700",
            "code": "\nvoid processData_00005700(int inputValue,int *outputArray)\n\n{\n  ushort result;\n  int status;\n  int tempValue;\n  int *tempArray;\n  \n  if (-1 < (int)((uint)*(ushort *)(outputArray + 3) << 0x1e)) {\n    tempValue = inputValue;\n    tempArray = outputArray;\n    result = FUN_000056b8(inputValue,outputArray,&tempValue,&tempArray);\n    status = FUN_00004bd0(inputValue,tempValue);\n    if (status != 0) {\n      *(undefined **)(inputValue + 0x28) = &DAT_0000423d;\n      *outputArray = status;\n      *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) | 0x80;\n      outputArray[5] = tempValue;\n      outputArray[4] = status;\n      if ((tempArray != (int *)0x0) &&\n         (status = FUN_00000534(inputValue,(int)*(short *)((int)outputArray + 0xe)), status != 0)) {\n        *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(outputArray + 3) = result | *(ushort *)(outputArray + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(outputArray + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(outputArray + 3) = *(ushort *)(outputArray + 3) & 0xfffc | 2;\n  }\n  *outputArray = (int)outputArray + 0x47;\n  outputArray[4] = (int)outputArray + 0x47;\n  outputArray[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "process_data_00005700",
                "param_1": "inputValue",
                "param_2": "outputArray",
                "uVar1": "result",
                "iVar2": "status",
                "local_18": "tempValue",
                "local_14": "tempArray"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00000534",
                "FUN_00004bd0",
                "FUN_000056b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "perform_relocation_00005780",
            "code": "\nvoid performRelocation_00005780(undefined4 data)\n\n{\n  FUN_00004b34(relocationTable[16].r_offset,data);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "perform_relocation_00005780",
                "param_1": "data",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initialize_data_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "decrement_and_update_index_000057a8",
            "code": "\nint decrementAndUpdateIndex_000057a8(undefined4 ptr1,int value,undefined4 *ptrArray)\n\n{\n  int index;\n  undefined *ptr;\n  \n  index = ptrArray[2] + -1;\n  ptrArray[2] = index;\n  if ((index < 0) && ((index < (int)ptrArray[6] || (value == 10)))) {\n    index = FUN_00005404();\n    return index;\n  }\n  ptr = (undefined *)*ptrArray;\n  *ptrArray = ptr + 1;\n  *ptr = character;\n  return value;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "decrement_and_update_index_000057a8",
                "param_1": "ptr1",
                "param_2": "value",
                "param_3": "ptrArray",
                "iVar1": "index",
                "puVar2": "ptr",
                "(char)param_2": "character"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint processData_000057d2(undefined4 input,undefined4 size,undefined *data,int length)\n\n{\n  int result;\n  undefined *endPointer;\n  int remainingLength;\n  \n  endPointer = data + length;\n  remainingLength = length;\n  do {\n    if (data == endPointer) {\n      return 0;\n    }\n    result = FUN_000057a8(input,*data,size,length,remainingLength);\n    length = result + 1;\n    data = data + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "input",
                "param_2": "size",
                "param_3": "data",
                "param_4": "length",
                "puVar2": "endPointer",
                "iVar3": "remainingLength",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "parse_input_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint parseInput_000057f8(int input,undefined4 *flags,byte *inputString,int *output)\n\n{\n  int length;\n  int result;\n  int *ptr;\n  bool isNumber;\n  byte *currChar;\n  int temp;\n  byte *nextChar;\n  int *output_Ptr;\n  uint ctrlFlags;\n  int precision;\n  undefined4 unused;\n  int width;\n  int totalLength;\n  byte specifier;\n  undefined flagSpace;\n  undefined flagPlus;\n  undefined flagZero;\n  undefined4 unused2;\n  \n  if ((input != 0) && (*(int *)(input + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (flags == &DAT_000079b8) {\n    flags = *(undefined4 **)(input + 4);\n  }\n  else if (flags == (undefined4 *)&DAT_000079d8) {\n    flags = *(undefined4 **)(input + 8);\n  }\n  else if (flags == (undefined4 *)&DAT_00007998) {\n    flags = *(undefined4 **)(input + 0xc);\n  }\n  if ((-1 < (int)(flags[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(flags + 3) << 0x16))) {\n    FUNC_000045e8(flags[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(flags + 3) << 0x1c)) || (flags[4] == 0)) &&\n     (length = FUN_000054a8(input,flags), length != 0)) {\n    if ((-1 < (int)(flags[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(flags + 3) << 0x16)))\n    {\n      FUNC_000045ec(flags[0x16]);\n    }\n    return -1;\n  }\n  totalLength = 0;\n  flagSpace = 0x20;\n  flagPlus = 0x30;\n  nextChar = inputString;\n  output_Ptr = output;\nLAB_0000588e:\n  currChar = nextChar;\n  if (*currChar != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  nextChar = currChar + 1;\n  if (*currChar == 0x25) {\nLAB_0000589a:\n    length = (int)currChar - (int)inputString;\n    if (length != 0) {\n      result = FUN_000057d2(input,flags,inputString,length);\n      if (result == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(flags[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(flags + 3) << 0x16))) {\n          FUNC_000045ec(flags[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(flags + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalLength;\n      }\n      totalLength = totalLength + length;\n    }\n    if (*currChar == 0) goto LAB_00005a06;\n    precision = -1;\n    unused = 0;\n    ctrlFlags = 0;\n    width = 0;\n    flagZero = 0;\n    unused2 = 0;\n    nextChar = currChar + 1;\n    while( true ) {\n      currChar = nextChar + 1;\n      length = FUN_00006010(\"#-0+ \",*nextChar,5);\n      if (length == 0) break;\n      ctrlFlags = 1 << (length - 0x7bfcU & 0xff) | ctrlFlags;\n      nextChar = currChar;\n    }\n    if ((int)(ctrlFlags << 0x1b) < 0) {\n      flagZero = 0x20;\n    }\n    if ((int)(ctrlFlags << 0x1c) < 0) {\n      flagZero = 0x2b;\n    }\n    if (*nextChar == 0x2a) {\n      ptr = output_Ptr + 1;\n      width = *output_Ptr;\n      output_Ptr = ptr;\n      if (width < 0) {\n        width = -width;\n        ctrlFlags = ctrlFlags | 2;\n      }\n    }\n    else {\n      isNumber = false;\n      length = width;\n      currChar = nextChar;\n      while( true ) {\n        if (9 < *currChar - 0x30) break;\n        length = length * 10 + (*currChar - 0x30);\n        isNumber = true;\n        currChar = currChar + 1;\n      }\n      if (isNumber) {\n        width = length;\n      }\n    }\n    if (*currChar == 0x2e) {\n      if (currChar[1] == 0x2a) {\n        precision = *output_Ptr;\n        if (precision < 0) {\n          precision = -1;\n        }\n        currChar = currChar + 2;\n        output_Ptr = output_Ptr + 1;\n      }\n      else {\n        isNumber = false;\n        precision = 0;\n        length = 0;\n        while( true ) {\n          currChar = currChar + 1;\n          if (9 < *currChar - 0x30) break;\n          length = length * 10 + (*currChar - 0x30);\n          isNumber = true;\n        }\n        if (isNumber) {\n          precision = length;\n        }\n      }\n    }\n    length = FUN_00006010(&DAT_00007c02,*currChar,3);\n    if (length != 0) {\n      ctrlFlags = ctrlFlags | 0x40 << (length - 0x7c02U & 0xff);\n      currChar = currChar + 1;\n    }\n    inputString = currChar + 1;\n    specifier = *currChar;\n    length = FUN_00006010(\"efgEFG\",specifier,6);\n    if (length == 0) {\n      temp = FUN_00005b34(input,&ctrlFlags,flags,0x57d3,&output_Ptr);\n      if (temp == -1) goto LAB_00005a06;\n    }\n    else {\n      output_Ptr = (int *)(((int)output_Ptr + 7U & 0xfffffff8) + 8);\n    }\n    totalLength = totalLength + temp;\n    nextChar = inputString;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "parse_input_000057f8",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "inputString",
                "param_4": "output",
                "iVar1": "length",
                "iVar2": "result",
                "piVar3": "ptr",
                "bVar4": "isNumber",
                "pbVar5": "currChar",
                "unaff_r7": "temp",
                "pbVar6": "nextChar",
                "local_8c": "output_Ptr",
                "local_88": "ctrlFlags",
                "local_84": "precision",
                "uStack_80": "unused",
                "local_7c": "width",
                "local_74": "totalLength",
                "local_70": "specifier",
                "local_6f": "flagSpace",
                "local_6e": "flagPlus",
                "local_45": "flagZero",
                "local_30": "unused2"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_00005b34",
                "FUN_000045ec",
                "FUN_000054a8",
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_data_length_00005a58",
            "code": "\nundefined4\ncalculateDataLength_00005a58(undefined4 value,uint *parameters,uint *result,undefined4 param_4,code *callback)\n\n{\n  int i;\n  undefined4 status;\n  int temp;\n  uint maxValue;\n  uint counter;\n  bool check;\n  \n  maxValue = parameters[4];\n  if ((int)parameters[4] < (int)parameters[2]) {\n    maxValue = parameters[2];\n  }\n  *result = maxValue;\n  if (*(char *)((int)parameters + 0x43) != '\\0') {\n    *result = maxValue + 1;\n  }\n  if ((int)(*parameters << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*parameters & 6) == 0) {\n    for (i = 0; i < (int)(parameters[3] - *result); i = i + 1) {\n      temp = (*callback)(value,param_4,(int)parameters + 0x19,1);\n      if (temp == -1) goto errorLabel;\n    }\n  }\n  maxValue = (uint)*(byte *)((int)parameters + 0x43);\n  if (maxValue != 0) {\n    maxValue = 1;\n  }\n  if ((int)(*parameters << 0x1a) < 0) {\n    *(undefined *)((int)parameters + maxValue + 0x43) = 0x30;\n    *(undefined *)((int)parameters + maxValue + 0x44) = *(undefined *)((int)parameters + 0x45);\n    maxValue = maxValue + 2;\n  }\n  i = (*callback)(value,param_4,(int)parameters + 0x43,maxValue);\n  if (i == -1) {\nerrorLabel:\n    status = 0xffffffff;\n  }\n  else {\n    maxValue = parameters[3];\n    check = (*parameters & 6) == 4;\n    if (check) {\n      maxValue = maxValue - *result;\n    }\n    if (check) {\n      maxValue = maxValue & ~((int)maxValue >> 0x1f);\n    }\n    else {\n      maxValue = 0;\n    }\n    if ((int)parameters[4] < (int)parameters[2]) {\n      maxValue = maxValue + (parameters[2] - parameters[4]);\n    }\n    for (counter = 0; maxValue != counter; counter = counter + 1) {\n      i = (*callback)(value,param_4,(int)parameters + 0x1a,1);\n      if (i == -1) goto errorLabel;\n    }\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_data_length_00005a58",
                "param_1": "value",
                "param_2": "parameters",
                "param_3": "result",
                "param_5": "callback",
                "iVar1": "i",
                "uVar2": "status",
                "iVar3": "temp",
                "uVar4": "maxValue",
                "uVar5": "counter",
                "bVar6": "check",
                "LAB_00005afc": "errorLabel"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_and_print_number_00005b34",
            "code": "\ncode * formatAndPrintNumber_00005b34(undefined4 param1,uint *number,undefined4 param3,code *printFunction,uint **dataPtr\n                   )\n\n{\n  bool isDivisible;\n  byte currentChar;\n  int result;\n  code *returnAddress;\n  char *digits;\n  int returnValue;\n  char *currentPtr;\n  uint remainder;\n  uint *currentDataPtr;\n  uint base;\n  uint **ppuVar11;\n  char **ppcVar12;\n  uint length;\n  char *outputPtr;\n  code *formattingFunction;\n  \n  currentChar = *(byte *)(number + 6);\n  currentPtr = (char *)((int)number + 0x43);\n  formattingFunction = printFunction;\n  if (0x78 < currentChar) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)number + 0x42) = currentChar;\nLAB_00005bdc:\n    currentPtr = (char *)((int)number + 0x42);\n    remainder = 1;\nLAB_00005d28:\n    number[4] = remainder;\n    *(undefined *)((int)number + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (currentChar < 99) {\n    if (currentChar == 0) goto LAB_00005d06;\n    if (currentChar == 0x58) {\n      digits = \"0123456789ABCDEF\";\n      *(undefined *)((int)number + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(currentChar) {\n  case 99:\n    remainder = **dataPtr;\n    *dataPtr = *dataPtr + 1;\n    *(char *)((int)number + 0x42) = (char)remainder;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *number;\n    currentDataPtr = *dataPtr;\n    if ((int)(base << 0x18) < 0) {\n      remainder = *currentDataPtr;\n      *dataPtr = currentDataPtr + 1;\n    }\n    else {\n      remainder = *currentDataPtr;\n      *dataPtr = currentDataPtr + 1;\n      if ((base & 0x40) != 0) {\n        remainder = (uint)(short)remainder;\n      }\n    }\n    if ((int)remainder < 0) {\n      remainder = -remainder;\n      *(undefined *)((int)number + 0x43) = 0x2d;\n    }\n    digits = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*dataPtr;\n    base = *number;\n    remainder = number[5];\n    *dataPtr = (uint *)(ppuVar11 + 1);\n    currentDataPtr = *ppuVar11;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *currentDataPtr = remainder;\n    }\n    else {\n      *(short *)currentDataPtr = (short)remainder;\n    }\nLAB_00005d06:\n    number[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    currentDataPtr = *dataPtr;\n    remainder = *number;\n    *dataPtr = currentDataPtr + 1;\n    if (((int)(remainder << 0x18) < 0) || (-1 < (int)(remainder << 0x19))) {\n      remainder = *currentDataPtr;\n    }\n    else {\n      remainder = (uint)*(ushort *)currentDataPtr;\n    }\n    digits = \"0123456789ABCDEF\";\n    if (currentChar == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *number = *number | 0x20;\n  case 0x78:\n    digits = \"0123456789abcdef\";\n    *(undefined *)((int)number + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *number;\n    remainder = **dataPtr;\n    *dataPtr = *dataPtr + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      remainder = remainder & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *number = base | 0x20;\n    }\n    if (remainder == 0) {\n      *number = *number & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar12 = (char **)*dataPtr;\n    *dataPtr = (uint *)(ppcVar12 + 1);\n    currentPtr = *ppcVar12;\n    result = FUN_00006010(currentPtr,0,number[1],ppcVar12,param1,number,param3);\n    if (result != 0) {\n      number[1] = result - (int)currentPtr;\n    }\n    remainder = number[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)number + 0x43) = 0;\nLAB_00005c36:\n  length = number[1];\n  number[2] = length;\n  if (-1 < (int)length) {\n    *number = *number & 0xfffffffb;\n  }\n  outputPtr = currentPtr;\n  if ((remainder != 0) || (length != 0)) {\n    do {\n      outputPtr = outputPtr + -1;\n      *outputPtr = digits[remainder - base * (remainder / base)];\n      isDivisible = base <= remainder;\n      remainder = remainder / base;\n    } while (isDivisible);\n  }\n  if (((base == 8) && ((int)(*number << 0x1f) < 0)) && ((int)number[1] <= (int)number[4])) {\n    outputPtr[-1] = '0';\n    outputPtr = outputPtr + -1;\n  }\n  number[4] = (int)currentPtr - (int)outputPtr;\n  currentPtr = outputPtr;\nLAB_00005c84:\n  result = FUN_00005a58(param1,number,&formattingFunction,param3,printFunction);\n  if ((result == -1) || (result = (*printFunction)(param1,param3,currentPtr,number[4]), result == -1)) {\nLAB_00005c98:\n    returnAddress = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*number << 0x1e) < 0) {\n      for (result = 0; result < (int)(number[3] - (int)formattingFunction); result = result + 1) {\n        returnValue = (*printFunction)(param1,param3,(int)number + 0x19,1);\n        if (returnValue == -1) goto LAB_00005c98;\n      }\n    }\n    returnAddress = (code *)number[3];\n    if ((int)(code *)number[3] < (int)formattingFunction) {\n      returnAddress = formattingFunction;\n    }\n  }\n  return returnAddress;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_and_print_number_00005b34",
                "param_1": "param1",
                "param_2": "number",
                "param_3": "param3",
                "param_4": "printFunction",
                "param_5": "dataPtr",
                "bVar1": "isDivisible",
                "bVar2": "currentChar",
                "iVar3": "result",
                "pcVar4": "returnAddress",
                "pcVar5": "digits",
                "iVar6": "returnValue",
                "pcVar7": "currentPtr",
                "uVar8": "remainder",
                "puVar9": "currentDataPtr",
                "uVar10": "base",
                "uVar13": "length",
                "pcVar14": "outputPtr",
                "local_24": "formattingFunction"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00005a58",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "decode_data_00005e10",
            "code": "\nuint decode_data_00005e10(int input_data,byte **data_ptr)\n\n{\n  int result;\n  uint decoded_value;\n  byte *byte_ptr;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x18) == 0)) {\n    FUN_000042a4();\n  }\n  if (data_ptr == (byte **)&DAT_000079b8) {\n    data_ptr = *(byte ***)(input_data + 4);\n  }\n  else if (data_ptr == (byte **)&DAT_000079d8) {\n    data_ptr = *(byte ***)(input_data + 8);\n  }\n  else if (data_ptr == (byte **)&DAT_00007998) {\n    data_ptr = *(byte ***)(input_data + 0xc);\n  }\n  result = FUN_00006768(input_data,data_ptr);\n  if (result == 0) {\n    data_ptr[1] = data_ptr[1] + -1;\n    byte_ptr = *data_ptr;\n    *data_ptr = byte_ptr + 1;\n    decoded_value = (uint)*byte_ptr;\n  }\n  else {\n    decoded_value = 0xffffffff;\n  }\n  return decoded_value;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "decode_data_00005e10",
                "param_1": "input_data",
                "param_2": "data_ptr",
                "iVar1": "result",
                "uVar2": "decoded_value",
                "pbVar3": "byte_ptr"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_00006768",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_binary_function_00005e68",
            "code": "\nvoid processBinaryFunction_00005e68(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 input1_copy;\n  undefined4 result1;\n  undefined2 constant1;\n  undefined2 constant2;\n  undefined4 input1_copy2;\n  undefined4 result2;\n  undefined *pointer1;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  \n  constant1 = 0x204;\n  input1_copy = input1;\n  input1_copy2 = input1;\n  input3_copy = input3;\n  input4_copy = input4;\n  result1 = FUN_00005ecc();\n  pointer1 = &LAB_00004dea_1;\n  constant3 = 0;\n  constant4 = 0;\n  constant2 = 0xffff;\n  result2 = result1;\n  FUN_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&input1_copy,input2,&input3_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_binary_function_00005e68",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "local_80": "input1_copy",
                "local_7c": "result1",
                "local_74": "constant1",
                "local_72": "constant2",
                "local_70": "input1_copy2",
                "local_6c": "result2",
                "local_5c": "pointer1",
                "local_4c": "constant3",
                "local_38": "constant4",
                "uStack_8": "input3_copy",
                "uStack_4": "input4_copy"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_000061cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copyString_00005ebc(char *destination,char *source)\n\n{\n  char currentChar;\n  \n  do {\n    currentChar = *source;\n    *destination = currentChar;\n    source = source + 1;\n    destination = destination + 1;\n  } while (currentChar != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "currentChar"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_null_terminator_00005ecc",
            "code": "\nchar * findNullTerminator_00005ecc(char *string)\n\n{\n  char currentChar;\n  char *nextChar;\n  char *currentPosition;\n  \n  currentPosition = string;\n  do {\n    nextChar = currentPosition + 1;\n    currentChar = *currentPosition;\n    currentPosition = nextChar;\n  } while (currentChar != '\\0');\n  return nextChar + (-1 - (int)string);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_null_terminator_00005ecc",
                "param_1": "string",
                "cVar1": "currentChar",
                "pcVar2": "nextChar",
                "pcVar3": "currentPosition"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_number_00005edc",
            "code": "\nuint parseNumber_00005edc(undefined4 *result,byte *input,byte **nextPtr,uint base)\n\n{\n  uint parsedNumber;\n  uint currentChar;\n  byte negative;\n  int validInput;\n  uint digitValue;\n  uint maxValue;\n  byte *currentPtr;\n  byte *nextPtr;\n  \n  nextPtr = input;\n  do {\n    currentPtr = nextPtr;\n    nextPtr = currentPtr + 1;\n    currentChar = (uint)*currentPtr;\n    negative = (&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextPtr;\n    negative = 1;\n    nextPtr = currentPtr + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextPtr;\n    nextPtr = currentPtr + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00005f26;\n  if ((*nextPtr & 0xdf) == 0x58) {\n    currentChar = (uint)nextPtr[1];\n    base = 0x10;\n    nextPtr = nextPtr + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  validInput = 0;\n  maxValue = 0xffffffff / base;\n  parsedNumber = 0;\n  do {\n    digitValue = currentChar - 0x30;\n    if (9 < digitValue) {\n      if (currentChar - 0x41 < 0x1a) {\n        digitValue = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        digitValue = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)digitValue) break;\n    if (((validInput < 0) || (maxValue < parsedNumber)) ||\n       ((maxValue == parsedNumber && ((int)~(base * maxValue) < (int)digitValue)))) {\n      validInput = -1;\n    }\n    else {\n      parsedNumber = parsedNumber * base + digitValue;\n      validInput = 1;\n    }\n    currentChar = (uint)*nextPtr;\n    nextPtr = nextPtr + 1;\n  } while( true );\n  if (validInput < 0) {\n    *result = 0x22;\n    parsedNumber = 0xffffffff;\n    if (nextPtr == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      parsedNumber = -parsedNumber;\n    }\n    if (nextPtr == (byte **)0x0) {\n      return parsedNumber;\n    }\n    if (validInput == 0) goto LAB_00005fb8;\n  }\n  input = nextPtr + -1;\nLAB_00005fb8:\n  *nextPtr = input;\n  return parsedNumber;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_number_00005edc",
                "param_1": "result",
                "param_2": "input",
                "param_3": "nextPtr",
                "param_4": "base",
                "uVar1": "parsedNumber",
                "uVar2": "currentChar",
                "bVar3": "negative",
                "iVar4": "validInput",
                "uVar5": "digitValue",
                "uVar6": "maxValue",
                "pbVar7": "currentPtr",
                "pbVar8": "nextPtr"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "execute_relocation_function_00005fd8",
            "code": "\nvoid executeRelocationFunction_00005fd8(undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  FUN_00005edc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,value1,value2,value3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "execute_relocation_function_00005fd8",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_memory_00005fec",
            "code": "\nvoid initializeMemory_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_memory_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_first_occurrence_00006010",
            "code": "\nbyte * find_first_occurrence_00006010(uint *input_array,uint target_byte,uint array_length)\n\n{\n  byte current_byte;\n  char is_uVar11_zero;\n  char is_uVar11_shift_8_zero;\n  char is_uVar11_shift_16_zero;\n  char is_uVar11_shift_24_zero;\n  byte *updated_pointer;\n  uint *updated_input_array_pointer;\n  byte *result_pointer;\n  uint offset;\n  uint aligned_length;\n  uint xored_value;\n  uint xored_value_2;\n  bool is_uVar12_zero;\n  bool is_uVar12_shift_8_zero;\n  bool is_uVar12_shift_16_zero;\n  bool is_uVar12_shift_24_zero;\n  \n  target_byte = target_byte & 0xff;\n  if ((int)array_length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n      updated_input_array_pointer = (uint *)((int)input_array + 1);\n      current_byte = *(byte *)input_array;\n      array_length = array_length - 1;\n      input_array = updated_input_array_pointer;\n    } while (current_byte != target_byte);\n  }\n  else {\n    offset = (uint)input_array & 7;\n    while( true ) {\n      if (offset == 0) {\n        offset = target_byte | target_byte << 8;\n        offset = offset | offset << 0x10;\n        aligned_length = array_length & 0xfffffff8;\n        do {\n          updated_input_array_pointer = input_array + 2;\n          aligned_length = aligned_length - 8;\n          xored_value = *input_array ^ offset;\n          xored_value_2 = input_array[1] ^ offset;\n          is_uVar11_zero = -((char)xored_value == '\\0');\n          is_uVar11_shift_8_zero = -((char)(xored_value >> 8) == '\\0');\n          is_uVar11_shift_16_zero = -((char)(xored_value >> 0x10) == '\\0');\n          is_uVar11_shift_24_zero = -((char)(xored_value >> 0x18) == '\\0');\n          xored_value = CONCAT13(is_uVar11_shift_24_zero,CONCAT12(is_uVar11_shift_16_zero,CONCAT11(is_uVar11_shift_8_zero,is_uVar11_zero)));\n          is_uVar12_zero = (char)xored_value_2 != '\\0';\n          is_uVar12_shift_8_zero = (char)(xored_value_2 >> 8) != '\\0';\n          is_uVar12_shift_16_zero = (char)(xored_value_2 >> 0x10) != '\\0';\n          is_uVar12_shift_24_zero = (char)(xored_value_2 >> 0x18) != '\\0';\n          xored_value_2 = CONCAT13(is_uVar12_shift_24_zero * is_uVar11_shift_24_zero - !is_uVar12_shift_24_zero,\n                            CONCAT12(is_uVar12_shift_16_zero * is_uVar11_shift_16_zero - !is_uVar12_shift_16_zero,\n                                     CONCAT11(is_uVar12_shift_8_zero * is_uVar11_shift_8_zero - !is_uVar12_shift_8_zero,is_uVar12_zero * is_uVar11_zero - !is_uVar12_zero)));\n          if (xored_value_2 != 0) {\n            if (xored_value == 0) {\n              result_pointer = (byte *)((int)input_array + 5);\n              xored_value = xored_value_2;\n            }\n            else {\n              result_pointer = (byte *)((int)input_array + 1);\n            }\n            if ((xored_value & 1) == 0) {\n              is_uVar12_zero = (xored_value & 0x100) == 0;\n              updated_pointer = result_pointer + 1;\n              if (is_uVar12_zero) {\n                is_uVar12_zero = (xored_value & 0x18000) == 0;\n                updated_pointer = result_pointer + 2;\n              }\n              result_pointer = updated_pointer;\n              if (is_uVar12_zero) {\n                result_pointer = result_pointer + 1;\n              }\n            }\n            return result_pointer + -1;\n          }\n          input_array = updated_input_array_pointer;\n        } while (aligned_length != 0);\n        array_length = array_length & 7;\n        goto joined_r0x00006070;\n      }\n      updated_input_array_pointer = (uint *)((int)input_array + 1);\n      array_length = array_length - 1;\n      if (*(byte *)input_array == target_byte) break;\n      offset = (uint)updated_input_array_pointer & 7;\n      input_array = updated_input_array_pointer;\n      if (array_length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)updated_input_array_pointer + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_first_occurrence_00006010",
                "param_1": "input_array",
                "param_2": "target_byte",
                "param_3": "array_length",
                "bVar1": "current_byte",
                "cVar2": "is_uVar11_zero",
                "cVar3": "is_uVar11_shift_8_zero",
                "cVar4": "is_uVar11_shift_16_zero",
                "cVar5": "is_uVar11_shift_24_zero",
                "pbVar6": "updated_pointer",
                "puVar7": "updated_input_array_pointer",
                "pbVar8": "result_pointer",
                "uVar9": "offset",
                "uVar10": "aligned_length",
                "uVar11": "xored_value",
                "uVar12": "xored_value_2",
                "bVar13": "is_uVar12_zero",
                "bVar14": "is_uVar12_shift_8_zero",
                "bVar15": "is_uVar12_shift_16_zero",
                "bVar16": "is_uVar12_shift_24_zero"
            },
            "calling": [
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_and_shift_000060b0",
            "code": "\nvoid copy_and_shift_000060b0(int dest_size,undefined *src_data,int src_size)\n\n{\n  undefined *src_ptr;\n  undefined *src_end;\n  undefined *dest_ptr;\n  \n  src_end = src_data + src_size;\n  dest_ptr = (undefined *)(dest_size + -1);\n  if (src_data != src_end) {\n    do {\n      src_ptr = src_data + 1;\n      dest_ptr = dest_ptr + 1;\n      *dest_ptr = *src_data;\n      src_data = src_ptr;\n    } while (src_ptr != src_end);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_and_shift_000060b0",
                "param_1": "dest_size",
                "param_2": "src_data",
                "param_3": "src_size",
                "puVar1": "src_ptr",
                "puVar2": "src_end",
                "puVar3": "dest_ptr"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "process_data_000060cc",
            "code": "\nint processData_000060cc(undefined4 input,int size,uint threshold,undefined4 param_4)\n\n{\n  int returnValue;\n  uint randomValue;\n  \n  if (size != 0) {\n    if (threshold == 0) {\n      FUN_00004b34();\n      returnValue = 0;\n    }\n    else {\n      randomValue = FUN_00006964();\n      returnValue = size;\n      if ((randomValue < threshold) && (returnValue = FUN_00004bd0(input,threshold), returnValue != 0)) {\n        FUN_000060b0(returnValue,size,threshold);\n        FUN_00004b34(input,size);\n      }\n    }\n    return returnValue;\n  }\n  returnValue = FUN_00004bd0(input,threshold,threshold,param_4);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "process_data_000060cc",
                "param_1": "input",
                "param_2": "size",
                "param_3": "threshold",
                "iVar1": "returnValue",
                "uVar2": "randomValue"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_00004b34",
                "FUN_00006964"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "process_data_00006192",
            "code": "\nundefined4 processData_00006192(undefined4 input,undefined4 *dataPtr)\n\n{\n  if ((undefined4 *)dataPtr[0xd] != (undefined4 *)0x0) {\n    if ((undefined4 *)dataPtr[0xd] != dataPtr + 0x11) {\n      FUN_00004b34();\n    }\n    dataPtr[1] = dataPtr[0x10];\n    dataPtr[0xd] = 0;\n    if (dataPtr[0x10] != 0) {\n      *dataPtr = dataPtr[0xf];\n      return 0;\n    }\n  }\n  *dataPtr = dataPtr[4];\n  dataPtr[1] = 0;\n  *(ushort *)(dataPtr + 3) = *(ushort *)(dataPtr + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "process_data_00006192",
                "param_1": "input",
                "param_2": "dataPtr"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "parse_data_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint parseData_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int index;\n  uint ch;\n  byte *nextByte;\n  uint chFlag;\n  int **outputList;\n  undefined stack [256];\n  uint flag;\n  undefined4 base;\n  uint tempFlag;\n  int result;\n  int count;\n  undefined *localData;\n  int format;\n  undefined *callback;\n  code *operationFunc;\n  \n  result = 0;\n  count = 0;\n  callback = &LAB_00006118_1;\n  operationFunc = FUN_00006192 + 1;\n  outputList = param4;\n  localData = stack;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      chFlag = (uint)*param3;\n      if (chFlag == 0) {\n        return result;\n      }\n      ch = (byte)(&DAT_00007a99)[chFlag] & 8;\n      nextByte = param3 + 1;\n      if (((&DAT_00007a99)[chFlag] & 8) == 0) break;\n      while (((param3 = nextByte, 0 < (int)param2[1] ||\n              (index = (*operationFunc)(param1,param2), index == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        count = count + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (chFlag == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (index = (*operationFunc)(param1,param2), index != 0))\n    goto LAB_00006380;\n    if (**param2 != chFlag) {\n      return result;\n    }\n    *param2 = *param2 + 1;\n    count = count + 1;\n    param2[1] = param2[1] + -1;\n    param3 = nextByte;\n  }\n  tempFlag = ch;\n  flag = ch;\n  if (param3[1] == 0x2a) {\n    nextByte = param3 + 2;\n    flag = 0x10;\n  }\n  while( true ) {\n    ch = (uint)*nextByte;\n    if (9 < ch - 0x30) break;\n    nextByte = nextByte + 1;\n    tempFlag = (tempFlag * 10 + ch) - 0x30;\n  }\n  index = FUN_00006010(&DAT_00007c02,ch,3);\n  if (index != 0) {\n    flag = 1 << (index - 0x7c02U & 0xff) | flag;\n    nextByte = nextByte + 1;\n  }\n  param3 = nextByte + 1;\n  ch = (uint)*nextByte;\n  if (ch < 0x79) {\n    if (0x57 < ch) {\n      switch(ch) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)FUN_0000687c(stack,param3);\n        flag = flag | 0x40;\n        format = 1;\n        break;\n      case 99:\n        flag = flag | 0x40;\n        format = 0;\n        break;\n      case 100:\n      case 0x75:\n        base = 10;\nLAB_000063a0:\n        if (ch < 0x6f) {\n          format = 3;\n        }\n        else {\n          format = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        format = 5;\n        break;\n      case 0x69:\n        base = 0;\n        format = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flag << 0x1b)) {\n          if ((int)(flag << 0x1f) < 0) {\n            *(short *)*outputList = (short)count;\n            outputList = outputList + 1;\n          }\n          else {\n            **outputList = count;\n            outputList = outputList + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        base = 8;\n        format = 4;\n        break;\n      case 0x70:\n        flag = flag | 0x20;\n      case 0x58:\n      case 0x78:\n        flag = flag | 0x200;\n        base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        format = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (index = (*operationFunc)(param1,param2), index != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flag << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          count = count + 1;\n          nextByte = param2[1];\n          param2[1] = nextByte + -1;\n          if ((int)(nextByte + -1) < 1) {\n            index = (*operationFunc)(param1,param2);\n            if (index != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (format < 3) {\n        index = FUN_000064bc(param1,&flag,param2,&outputList);\n      }\n      else {\n        if (4 < format) goto LAB_000061f6;\n        index = FUN_0000656c(param1,&flag,param2,&outputList);\n      }\n      if (index == 1) {\n        return result;\n      }\n      if (index == 2) {\nLAB_00006380:\n        if (result == 0) {\nLAB_00006388:\n          result = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          result = -1;\n        }\n        return result;\n      }\n      goto LAB_000061f6;\n    }\n    nextByte = param3;\n    if (ch == 0x25) goto LAB_00006352;\n    if (ch < 0x26) {\n      if (ch != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (ch - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  format = 3;\n  base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "parse_data_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "index",
                "uVar2": "ch",
                "pbVar3": "nextByte",
                "uVar4": "chFlag",
                "local_2b0": "outputList",
                "auStack_2ac": "stack",
                "local_1ac": "flag",
                "local_1a8": "base",
                "local_1a4": "tempFlag",
                "local_1a0": "result",
                "local_19c": "count",
                "local_198": "localData",
                "local_194": "format",
                "local_30": "callback",
                "local_2c": "operationFunc"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_000064bc",
                "FUN_0000656c",
                "FUN_00006192",
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_data,uint *state,byte **buffer,undefined4 *output)\n\n{\n  int result;\n  uint temp;\n  byte **pointer_buffer;\n  byte *current_byte;\n  byte *unaff_byte;\n  byte *next_byte;\n  int counter;\n  \n  if (state[2] == 0) {\n    if (state[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    state[2] = temp;\n  }\n  if (-1 < (int)(*state << 0x1b)) {\n    pointer_buffer = (byte **)*output;\n    *output = pointer_buffer + 1;\n    unaff_byte = *pointer_buffer;\n  }\n  counter = 0;\n  do {\n    temp = state[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(state[5] + (uint)**buffer) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*state & 0x10) == 0) && (state[3] = state[3] + 1, state[6] != 0)) {\n            *unaff_byte = 0;\n          }\n          state[4] = counter + state[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**buffer] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    next_byte = unaff_byte;\n    if (-1 < (int)(*state << 0x1b)) {\n      next_byte = unaff_byte + 1;\n      *unaff_byte = **buffer;\n    }\n    current_byte = buffer[1];\n    *buffer = *buffer + 1;\n    temp = state[2] - 1;\n    buffer[1] = current_byte + -1;\n    counter = counter + 1;\n    state[2] = temp;\n    unaff_byte = next_byte;\n    if ((temp == 0) ||\n       (((int)(current_byte + -1) < 1 &&\n        (result = (*(code *)state[0x60])(input_data,buffer,temp,(code *)state[0x60],output),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_data",
                "param_2": "state",
                "param_3": "buffer",
                "param_4": "output",
                "iVar1": "result",
                "iVar6": "counter",
                "uVar2": "temp",
                "ppbVar3": "pointer_buffer",
                "pbVar4": "current_byte",
                "unaff_r6": "unaff_byte",
                "pbVar5": "next_byte"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "process_data_0000656c",
            "code": "\nundefined4 processData_0000656c(undefined4 input,uint *flags,byte **data,undefined4 *status)\n\n{\n  int result;\n  undefined4 processedData;\n  code *transformation;\n  uint tempFlag;\n  byte *tempData;\n  uint originalDataLength;\n  undefined4 *statusPtr;\n  uint *dataPtr;\n  uint *tempDataPtr;\n  uint *flagPtr;\n  int tempCount;\n  int counter;\n  undefined *local_34 [4];\n  \n  local_34[0] = &DAT_00007c2f;\n  local_34[1] = &DAT_00007c32;\n  local_34[2] = &DAT_00007c35;\n  transformation = (code *)&blankTransformation;\n  if (flags[6] != 3) {\n    transformation = (code *)&defaultTransformation;\n  }\n  originalDataLength = flags[2];\n  tempFlag = originalDataLength - 1;\n  if (0x15c < tempFlag) {\n    tempCount = originalDataLength - 0x15d;\n    originalDataLength = 0x15d;\n  }\n  if (0x15c < tempFlag) {\n    flags[2] = originalDataLength;\n  }\n  flagPtr = flags + 7;\n  if (tempFlag < 0x15d) {\n    tempCount = 0;\n  }\n  *flags = *flags | 0xd00;\n  counter = 0;\n  tempDataPtr = flagPtr;\n  do {\n    result = FUN_00006010(local_34[counter],**data,2);\n    if (result != 0) {\n      if (counter == 1) {\n        if (flags[1] == 0) {\n          flags[1] = 8;\n          *flags = *flags | 0x200;\n        }\n        tempFlag = *flags & 0xfffffaff;\nLAB_000065f4:\n        *flags = tempFlag;\n      }\n      else if (counter == 2) {\n        if ((*flags & 0x600) != 0x200) goto LAB_00006624;\n        flags[1] = 0x10;\n        tempFlag = *flags | 0x100;\n        goto LAB_000065f4;\n      }\n      tempFlag = flags[2];\n      flags[2] = tempFlag - 1;\n      if (tempFlag != 0) {\n        tempData = *data;\n        *data = tempData + 1;\n        dataPtr = (uint *)((int)tempDataPtr + 1);\n        *(byte *)tempDataPtr = *tempData;\n        tempData = data[1];\n        data[1] = tempData + -1;\n        tempDataPtr = dataPtr;\n        if (((int)(tempData + -1) < 1) &&\n           (result = (*(code *)flags[0x60])(input,data), result != 0)) {\n          counter = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    counter = counter + 1;\n  } while (counter != 3);\n  if (flags[1] == 0) {\n    flags[1] = 10;\n  }\n  FUN_0000687c(flags[5],\"01234567]\" + (8 - flags[1]));\n  counter = 0;\n  while( true ) {\n    dataPtr = tempDataPtr;\n    if (flags[2] == 0) break;\n    tempData = *data;\n    tempFlag = (uint)*tempData;\n    if (*(char *)(flags[5] + tempFlag) == '\\0') break;\n    if ((tempFlag == 0x30) && ((int)(*flags << 0x14) < 0)) {\n      counter = counter + 1;\n      if (tempCount != 0) {\n        tempCount = tempCount + -1;\n        flags[2] = flags[2] + 1;\n      }\n    }\n    else {\n      *flags = *flags & 0xfffff6ff;\n      dataPtr = (uint *)((int)tempDataPtr + 1);\n      *(byte *)tempDataPtr = *tempData;\n    }\n    tempData = data[1];\n    data[1] = tempData + -1;\n    if ((int)(tempData + -1) < 1) {\n      result = (*(code *)flags[0x60])(input,data);\n      if (result != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    flags[2] = flags[2] - 1;\n    tempDataPtr = dataPtr;\n  }\nLAB_000066ca:\n  if ((int)(*flags << 0x17) < 0) {\n    if (flagPtr < dataPtr) {\n      (*(code *)flags[0x5f])(input,*(byte *)((int)dataPtr + -1),data);\n      dataPtr = (uint *)((int)dataPtr + -1);\n    }\n    if (dataPtr == flagPtr) {\n      return 1;\n    }\n  }\n  if ((*flags & 0x10) == 0) {\n    *(byte *)dataPtr = 0;\n    processedData = (*transformation)(input,flagPtr,0,flags[1]);\n    statusPtr = (undefined4 *)*status;\n    tempFlag = *flags;\n    *status = statusPtr + 1;\n    statusPtr = (undefined4 *)*statusPtr;\n    if ((tempFlag & 0x20) == 0) {\n      if ((int)(tempFlag << 0x1f) < 0) {\n        *(short *)statusPtr = (short)processedData;\n      }\n      else {\n        *statusPtr = processedData;\n      }\n    }\n    else {\n      *statusPtr = processedData;\n    }\n    flags[3] = flags[3] + 1;\n  }\n  flags[4] = (uint)((int)dataPtr + flags[4] + (counter - (int)flagPtr));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "process_data_0000656c",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "data",
                "param_4": "status",
                "iVar1": "result",
                "uVar2": "processedData",
                "pcVar3": "transformation",
                "uVar4": "tempFlag",
                "pbVar5": "tempData",
                "uVar6": "originalDataLength",
                "puVar7": "statusPtr",
                "puVar8": "dataPtr",
                "puVar9": "tempDataPtr",
                "puVar10": "flagPtr",
                "unaff_r9": "tempCount",
                "iVar11": "counter",
                "&UNK_00004f81": "&blankTransformation",
                "&UNK_00005fd5": "&defaultTransformation"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00006010",
                "FUN_0000687c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *inputArray,undefined4 *lookupArray,undefined4 param_3,undefined4 param_4)\n\n{\n  undefined2 temp1;\n  int temp2;\n  undefined4 temp3;\n  ushort flags;\n  uint value;\n  \n  if ((inputArray != (undefined4 *)0x0) && (inputArray[6] == 0)) {\n    FUN_000042a4();\n  }\n  if (lookupArray == &DAT_000079b8) {\n    lookupArray = (undefined4 *)inputArray[1];\n  }\n  else if (lookupArray == (undefined4 *)&DAT_000079d8) {\n    lookupArray = (undefined4 *)inputArray[2];\n  }\n  else if (lookupArray == (undefined4 *)&DAT_00007998) {\n    lookupArray = (undefined4 *)inputArray[3];\n  }\n  flags = *(ushort *)(lookupArray + 3);\n  lookupArray[1] = 0;\n  value = (uint)*(ushort *)(lookupArray + 3);\n  if ((int)(value << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(value << 0x1d) < 0) {\n    if ((undefined4 *)lookupArray[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)lookupArray[0xd] != lookupArray + 0x11) {\n        FUN_00004b34(inputArray);\n      }\n      lookupArray[1] = lookupArray[0x10];\n      lookupArray[0xd] = 0;\n      if (lookupArray[0x10] != 0) {\n        *lookupArray = lookupArray[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(value << 0x1b)) {\n      *inputArray = 9;\n      flags = flags | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(value << 0x1c) < 0) {\n      temp2 = FUN_00004158(inputArray,lookupArray,value << 0x1c,value,param_4);\n      if (temp2 != 0) {\n        return 0xffffffff;\n      }\n      lookupArray[2] = 0;\n      *(ushort *)(lookupArray + 3) = *(ushort *)(lookupArray + 3) & 0xfff7;\n      lookupArray[6] = 0;\n    }\n    *(ushort *)(lookupArray + 3) = *(ushort *)(lookupArray + 3) | 4;\n  }\n  if (lookupArray[4] == 0) {\n    FUN_00005700(inputArray,lookupArray);\n  }\n  flags = *(ushort *)(lookupArray + 3);\n  temp1 = *(undefined2 *)(lookupArray + 3);\n  if ((flags & 3) != 0) {\n    *(undefined2 *)(lookupArray + 3) = 1;\n    FUN_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(lookupArray + 3) = temp1;\n    if ((flags & 9) == 9) {\n      FUN_0000404c(inputArray,lookupArray);\n    }\n  }\n  temp3 = lookupArray[4];\n  *lookupArray = temp3;\n  temp2 = (*(code *)lookupArray[9])(inputArray,lookupArray[8],temp3,lookupArray[5]);\n  lookupArray[1] = temp2;\n  if (0 < temp2) {\n    return 0;\n  }\n  flags = *(ushort *)(lookupArray + 3);\n  if (temp2 != 0) {\n    temp3 = 0;\n  }\n  else {\n    flags = flags | 0x20;\n  }\n  if (temp2 != 0) {\n    lookupArray[1] = temp3;\n    flags = flags | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(lookupArray + 3) = flags;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "inputArray",
                "param_2": "lookupArray",
                "uVar1": "temp1",
                "iVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "flags",
                "uVar5": "value",
                "param_2[0xd]": "lookupArray[0xd]",
                "param_2[0x10]": "lookupArray[0x10]",
                "param_2[0xf]": "lookupArray[0xf]"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_00005700",
                "FUN_000043a0",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_00004b34",
                "FUN_000042a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "extract_boolean_array_0000687c",
            "code": "\nbyte * extractBooleanArray_0000687c(int size,byte *byteArray)\n\n{\n  byte *result;\n  uint temp;\n  int counter;\n  uint currentByte;\n  uint start;\n  uint end;\n  bool isXor;\n  \n  currentByte = (uint)*byteArray;\n  isXor = currentByte == 0x5e;\n  if (isXor) {\n    currentByte = (uint)byteArray[1];\n    byteArray = byteArray + 2;\n  }\n  else {\n    byteArray = byteArray + 1;\n  }\n  counter = size + -1;\n  do {\n    counter = counter + 1;\n    *(bool *)counter = isXor;\n  } while (counter != size + 0xff);\n  if (currentByte == 0) {\n    result = byteArray + -1;\n  }\n  else {\nLAB_000068aa:\n    do {\n      start = currentByte;\n      *(bool *)(size + start) = !isXor;\n      byteArray = byteArray + 1;\n      while( true ) {\n        currentByte = (uint)byteArray[-1];\n        if (currentByte != 0x2d) break;\n        end = (uint)*byteArray;\n        if ((end == 0x5d) || (temp = start, (int)end < (int)start)) goto LAB_000068aa;\n        do {\n          temp = temp + 1;\n          *(bool *)(size + temp) = !isXor;\n        } while ((int)temp < (int)end);\n        counter = ~start + end;\n        if ((int)end <= (int)start) {\n          counter = 0;\n        }\n        start = start + 1 + counter;\n        byteArray = byteArray + 2;\n      }\n      result = byteArray;\n    } while ((currentByte != 0x5d) && (result = byteArray + -1, currentByte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "extract_boolean_array_0000687c",
                "param_1": "size",
                "param_2": "byteArray",
                "pbVar1": "result",
                "uVar2": "temp",
                "iVar3": "counter",
                "uVar4": "currentByte",
                "uVar5": "start",
                "uVar6": "end",
                "bVar7": "isXor"
            },
            "calling": [
                "FUN_0000656c",
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "initialize_buffer_000068f0",
            "code": "\nundefined4 initializeBuffer_000068f0(undefined4 param1,int *buffer)\n\n{\n  int allocatedBuffer;\n  int bufferSize;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    allocatedBuffer = FUN_00004bd0(param1,0x400);\n    if (allocatedBuffer != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = allocatedBuffer;\n      *(undefined *)(allocatedBuffer + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(allocatedBuffer + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(allocatedBuffer + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = allocatedBuffer + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    bufferSize = buffer[0xe];\n    allocatedBuffer = FUN_000060cc(param1,(int *)buffer[0xd],bufferSize << 1);\n    if (allocatedBuffer != 0) {\n      FUN_000060b0(allocatedBuffer + bufferSize,allocatedBuffer,bufferSize);\n      buffer[0xd] = allocatedBuffer;\n      buffer[0xe] = bufferSize << 1;\n      *buffer = allocatedBuffer + bufferSize;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "initialize_buffer_000068f0",
                "param_1": "param1",
                "param_2": "buffer",
                "iVar1": "allocatedBuffer",
                "iVar2": "bufferSize"
            },
            "calling": [],
            "called": [
                "FUN_000060b0",
                "FUN_00004bd0",
                "FUN_000060cc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "calculate_value_00006964",
            "code": "\nint calculateValue_00006964(undefined4 param,int value)\n\n{\n  int sum;\n  \n  sum = *(int *)(value + -4) + -4;\n  if (*(int *)(value + -4) < 0) {\n    sum = sum + *(int *)(value + sum);\n  }\n  return sum;\n}\n\n",
            "renaming": {
                "FUN_00006964": "calculate_value_00006964",
                "param_1": "param",
                "param_2": "value",
                "iVar1": "sum"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "get_bounded_value_00006974",
            "code": "\nundefined8 getBoundedValue_00006974(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int negated_input_2_abs_input_1;\n  undefined8 result;\n  undefined concatenated_value [8];\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 < 0) {\n      input_1 = 0;\n      input_2 = -0x80000000;\n    }\n    else if (input_2 != 0 || input_1 != 0) {\n      input_2 = 0x7fffffff;\n      input_1 = -1;\n    }\n    return CONCAT44(input_2,input_1);\n  }\n  if (input_2 < 0) {\n    negated_input_2_abs_input_1 = -input_2 - (uint)(input_1 != 0);\n    if (input_4 < 0) {\n      result = FUN_00006a14(-input_1,negated_input_2_abs_input_1,-input_3,-input_4 - (uint)(input_3 != 0),concatenated_value);\n      return result;\n    }\n    result = FUN_00006a14(-input_1,negated_input_2_abs_input_1,input_3,input_4,concatenated_value);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (input_4 < 0) {\n    result = FUN_00006a14(input_1,input_2,-input_3,-input_4 - (uint)(input_3 != 0),concatenated_value);\n    return CONCAT44(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = FUN_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "get_bounded_value_00006974",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "iVar1": "negated_input_2_abs_input_1",
                "uVar2": "result",
                "local_8": "concatenated_value"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "improved_division_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong improved_division_00006a14(uint dividend,uint divisor,uint quotient1,uint quotient2,uint *remainder)\n\n{\n  code *jump_table;\n  uint temp1;\n  int shift_amount;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  uint temp8;\n  bool carry;\n  ulonglong result;\n  \n  if (quotient2 == 0) {\n    if (divisor < quotient1) {\n      shift_amount = LZCOUNT(quotient1);\n      temp4 = quotient1;\n      if (shift_amount != 0) {\n        temp4 = quotient1 << shift_amount;\n        divisor = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      temp5 = temp4 >> 0x10;\n      temp7 = divisor / temp5;\n      temp2 = dividend >> 0x10 | (divisor - temp5 * temp7) * 0x10000;\n      temp1 = temp7 * (temp4 & 0xffff);\n      temp3 = temp7;\n      if (temp2 <= temp1 && temp1 - temp2 != 0) {\n        carry = CARRY4(temp4,temp2);\n        temp2 = temp4 + temp2;\n        temp3 = temp7 - 1;\n        if ((carry == false) && (temp2 <= temp1 && temp1 - temp2 != 0)) {\n          temp3 = temp7 - 2;\n          temp2 = temp2 + temp4;\n        }\n      }\n      temp7 = (temp2 - temp1) / temp5;\n      temp5 = dividend & 0xffff | ((temp2 - temp1) - temp5 * temp7) * 0x10000;\n      temp2 = temp7 * (temp4 & 0xffff);\n      temp1 = temp7;\n      if (temp5 <= temp2 && temp2 - temp5 != 0) {\n        carry = CARRY4(temp4,temp5);\n        temp5 = temp4 + temp5;\n        temp1 = temp7 - 1;\n        if ((carry == false) && (temp5 <= temp2 && temp2 - temp5 != 0)) {\n          temp1 = temp7 - 2;\n          temp5 = temp5 + temp4;\n        }\n      }\n      temp5 = temp5 - temp2;\n      temp1 = temp1 | temp3 << 0x10;\n      temp4 = 0;\n    }\n    else {\n      if (quotient1 == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_amount = LZCOUNT(quotient1);\n      if (shift_amount == 0) {\n        divisor = divisor - quotient1;\n        temp8 = quotient1 >> 0x10;\n        temp6 = quotient1 & 0xffff;\n        temp4 = 1;\n        temp3 = quotient1;\n      }\n      else {\n        temp3 = quotient1 << shift_amount;\n        temp8 = temp3 >> 0x10;\n        temp1 = divisor >> (0x20U - shift_amount & 0xff);\n        temp4 = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        temp2 = temp1 / temp8;\n        temp6 = temp3 & 0xffff;\n        temp7 = temp4 >> 0x10 | (temp1 - temp8 * temp2) * 0x10000;\n        temp5 = temp2 * temp6;\n        dividend = dividend << shift_amount;\n        temp1 = temp2;\n        if (temp7 <= temp5 && temp5 - temp7 != 0) {\n          carry = CARRY4(temp3,temp7);\n          temp7 = temp3 + temp7;\n          temp1 = temp2 - 1;\n          if ((carry == false) && (temp7 <= temp5 && temp5 - temp7 != 0)) {\n            temp1 = temp2 - 2;\n            temp7 = temp7 + temp3;\n          }\n        }\n        temp2 = (temp7 - temp5) / temp8;\n        divisor = temp4 & 0xffff | ((temp7 - temp5) - temp8 * temp2) * 0x10000;\n        temp5 = temp2 * temp6;\n        temp4 = temp2;\n        if (divisor <= temp5 && temp5 - divisor != 0) {\n          carry = CARRY4(temp3,divisor);\n          divisor = temp3 + divisor;\n          temp4 = temp2 - 1;\n          if ((carry == false) && (divisor <= temp5 && temp5 - divisor != 0)) {\n            temp4 = temp2 - 2;\n            divisor = divisor + temp3;\n          }\n        }\n        divisor = divisor - temp5;\n        temp4 = temp4 | temp1 << 0x10;\n      }\n      temp7 = divisor / temp8;\n      temp5 = dividend >> 0x10 | (divisor - temp8 * temp7) * 0x10000;\n      temp1 = temp6 * temp7;\n      temp2 = temp7;\n      if (temp5 <= temp1 && temp1 - temp5 != 0) {\n        carry = CARRY4(temp3,temp5);\n        temp5 = temp3 + temp5;\n        temp2 = temp7 - 1;\n        if ((carry == false) && (temp5 <= temp1 && temp1 - temp5 != 0)) {\n          temp2 = temp7 - 2;\n          temp5 = temp5 + temp3;\n        }\n      }\n      temp7 = (temp5 - temp1) / temp8;\n      temp5 = dividend & 0xffff | ((temp5 - temp1) - temp8 * temp7) * 0x10000;\n      temp6 = temp6 * temp7;\n      temp1 = temp7;\n      if (temp5 <= temp6 && temp6 - temp5 != 0) {\n        carry = CARRY4(temp3,temp5);\n        temp5 = temp3 + temp5;\n        temp1 = temp7 - 1;\n        if ((carry == false) && (temp5 <= temp6 && temp6 - temp5 != 0)) {\n          temp1 = temp7 - 2;\n          temp5 = temp5 + temp3;\n        }\n      }\n      temp5 = temp5 - temp6;\n      temp1 = temp1 | temp2 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp5 >> LZCOUNT(quotient1);\n      remainder[1] = 0;\n    }\n  }\n  else if (divisor < quotient2) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = divisor;\n      return 0;\n    }\n    temp1 = 0;\n    temp4 = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(quotient2);\n    if (shift_amount != 0) {\n      temp6 = 0x20 - shift_amount;\n      temp2 = quotient1 >> (temp6 & 0xff) | quotient2 << shift_amount;\n      temp8 = temp2 >> 0x10;\n      temp1 = divisor >> (temp6 & 0xff);\n      temp4 = dividend >> (temp6 & 0xff) | divisor << shift_amount;\n      temp5 = temp1 / temp8;\n      temp3 = temp4 >> 0x10 | (temp1 - temp8 * temp5) * 0x10000;\n      temp7 = temp5 * (temp2 & 0xffff);\n      dividend = dividend << shift_amount;\n      temp1 = temp5;\n      if (temp3 <= temp7 && temp7 - temp3 != 0) {\n        carry = CARRY4(temp2,temp3);\n        temp3 = temp2 + temp3;\n        temp1 = temp5 - 1;\n        if ((carry == false) && (temp3 <= temp7 && temp7 - temp3 != 0)) {\n          temp1 = temp5 - 2;\n          temp3 = temp3 + temp2;\n        }\n      }\n      temp5 = (temp3 - temp7) / temp8;\n      temp3 = temp4 & 0xffff | ((temp3 - temp7) - temp8 * temp5) * 0x10000;\n      temp7 = temp5 * (temp2 & 0xffff);\n      temp4 = temp5;\n      if (temp3 <= temp7 && temp7 - temp3 != 0) {\n        carry = CARRY4(temp2,temp3);\n        temp3 = temp2 + temp3;\n        temp4 = temp5 - 1;\n        if ((carry == false) && (temp3 <= temp7 && temp7 - temp3 != 0)) {\n          temp4 = temp5 - 2;\n          temp3 = temp3 + temp2;\n        }\n      }\n      temp4 = temp4 | temp1 << 0x10;\n      result = (ulonglong)temp4 * (ulonglong)(quotient1 << shift_amount);\n      if (CONCAT44(temp3 - temp7,dividend) < result) {\n        result = result - CONCAT44(temp2,quotient1 << shift_amount);\n        temp4 = temp4 - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        temp1 = ((temp3 - temp7) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = temp1 << (temp6 & 0xff) | dividend - (uint)result >> shift_amount;\n        remainder[1] = temp1 >> shift_amount;\n      }\n      return (ulonglong)temp4;\n    }\n    if ((quotient2 < divisor) || (quotient1 <= dividend)) {\n      carry = dividend < quotient1;\n      dividend = dividend - quotient1;\n      divisor = (divisor - quotient2) - (uint)carry;\n      temp1 = 1;\n    }\n    else {\n      temp1 = 0;\n    }\n    temp4 = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = divisor;\n    }\n  }\n  return CONCAT44(temp4,temp1);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "improved_division_00006a14",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient1",
                "param_4": "quotient2",
                "param_5": "remainder",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uVar1": "temp1",
                "iVar2": "shift_amount",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "uVar9": "temp8",
                "bVar10": "carry",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 143461,
    "layers": [
        [
            "FUN_00000410",
            "FUN_00000428",
            "FUN_00000490",
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000794",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_00000930",
            "FUN_0000093c",
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000d76",
            "FUN_00000d9c",
            "FUN_00000db0",
            "FUN_00000dc0",
            "FUN_00000dcc",
            "FUN_00000df4",
            "FUN_00000e14",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00000e64",
            "FUN_00000ed8",
            "FUN_00000f04",
            "FUN_00000f8c",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000010a0",
            "FUN_000010d4",
            "FUN_00001274",
            "FUN_0000129c",
            "FUN_000012b4",
            "FUN_000012e2",
            "FUN_00001318",
            "FUN_00001348",
            "FUN_00001360",
            "FUN_00001392",
            "FUN_000013b8",
            "FUN_00001448",
            "FUN_000014c4",
            "FUN_000015d0",
            "FUN_00001628",
            "FUN_00001688",
            "FUN_00001696",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001734",
            "FUN_00001748",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_0000191c",
            "FUN_00001960",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001a60",
            "FUN_00001ad4",
            "FUN_00001b10",
            "FUN_00001bb8",
            "FUN_00001c84",
            "FUN_00001cf0",
            "FUN_00001d08",
            "FUN_00001d3a",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001ddc",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00001ec4",
            "FUN_00001eea",
            "FUN_00001f80",
            "FUN_00001ff6",
            "FUN_00002028",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_0000211c",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_00002396",
            "FUN_000023a4",
            "FUN_000023c8",
            "FUN_000023d0",
            "FUN_0000240c",
            "FUN_00002434",
            "FUN_000024bc",
            "FUN_00002538",
            "FUN_0000258c",
            "FUN_000025f4",
            "FUN_00002600",
            "FUN_00002624",
            "FUN_00002654",
            "FUN_00002690",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_00002894",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_00002994",
            "FUN_00002a00",
            "FUN_00002a18",
            "FUN_00002a88",
            "FUN_00002b10",
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_00002e6c",
            "FUN_00002e9c",
            "FUN_00002eb4",
            "FUN_00002ecc",
            "FUN_00002f30",
            "FUN_00002f74",
            "FUN_00002fe0",
            "FUN_0000305c",
            "FUN_0000316c",
            "FUN_000031e0",
            "FUN_000031fc",
            "FUN_0000328c",
            "FUN_00003378",
            "FUN_000033c0",
            "FUN_000033f4",
            "FUN_00003444",
            "FUN_00003478",
            "FUN_000034c0",
            "FUN_00003524",
            "FUN_00003658",
            "FUN_00003688",
            "FUN_00003694",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00003e58",
            "FUN_00003e9e",
            "FUN_00003ec4",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_0000404c",
            "FUN_00004158",
            "FUN_000041d0",
            "FUN_000041f4",
            "FUN_00004248",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000042a4",
            "FUN_00004314",
            "FUN_000043a0",
            "FUN_00004418",
            "FUN_0000443c",
            "FUN_0000459c",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004634",
            "FUN_000047e4",
            "FUN_00004b34",
            "FUN_00004bd0",
            "FUN_00004c84",
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_00004dc8",
            "FUN_00004dee",
            "FUN_00004e26",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_00004f98",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005100",
            "FUN_00005404",
            "FUN_000054a8",
            "FUN_00005584",
            "FUN_0000562c",
            "FUN_000056a0",
            "FUN_000056b0",
            "FUN_000056b8",
            "FUN_00005700",
            "FUN_00005780",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_000057a8",
            "FUN_000057d2",
            "FUN_000057f8",
            "FUN_00005a58",
            "FUN_00005b34",
            "FUN_00005e10",
            "FUN_00005e68",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fd8",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000060cc",
            "FUN_00006192",
            "FUN_000061cc",
            "FUN_000064bc",
            "FUN_0000656c",
            "FUN_00006768",
            "FUN_0000687c",
            "FUN_000068f0",
            "FUN_00006964",
            "FUN_00006974",
            "FUN_00006a14"
        ]
    ],
    "locked_functions": []
}