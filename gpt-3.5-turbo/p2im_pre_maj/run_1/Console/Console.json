{
    "functions": {
        "FUN_00000410": {
            "entrypoint": "0x00000410",
            "current_name": "initialize_memory_00000410",
            "code": "\nvoid initialize_memory_00000410(void)\n\n{\n  initialize_memory_00000410_00000df4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000410": "initialize_memory_00000410"
            },
            "calling": [
                "FUN_0000459c"
            ],
            "called": [
                "FUN_00000df4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000428": {
            "entrypoint": "0x00000428",
            "current_name": "modify_rel_offset_00000428",
            "code": "\ndword modify_rel_offset_00000428(undefined4 *result,int offset)\n\n{\n  undefined4 interruptStatus;\n  dword modifiedOffset;\n  \n  interruptStatus = check_interrupt_status_00000cd0();\n  modifiedOffset = Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  if ((offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset < 0x20030001) &&\n     (0x1fff0def < offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset)) {\n    Elf32_Rel_ARRAY_1fff0200[0].r_offset = offset + Elf32_Rel_ARRAY_1fff0200[0].r_offset;\n  }\n  else {\n    *result = 0xc;\n    modifiedOffset = 0xffffffff;\n  }\n  enable_ir_qinterrupts_if_needed_00000d0c(interruptStatus);\n  return modifiedOffset;\n}\n\n",
            "renaming": {
                "FUN_00000428": "modify_rel_offset_00000428",
                "param_1": "result",
                "param_2": "offset",
                "uVar1": "interruptStatus",
                "local_c": "modifiedOffset"
            },
            "calling": [
                "FUN_00004bd0"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000490": {
            "entrypoint": "0x00000490",
            "current_name": "copy_and_count_00000490",
            "code": "\nundefined4 copy_and_count_00000490(undefined4 input_1,undefined4 input_2,undefined4 data_1,undefined4 data_2)\n\n{\n  undefined4 result;\n  \n  result = copy_and_count_00000490_00000e14(data_1,data_2);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000490": "copy_and_count_00000490",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "data_1",
                "param_4": "data_2",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00004dc8"
            ],
            "called": [
                "FUN_00000e14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000004f2": {
            "entrypoint": "0x000004f2",
            "current_name": "initialize_value_and_return_000004f2",
            "code": "\nundefined4 initializeValueAndReturn_000004f2(undefined4 *outputPointer)\n\n{\n  *outputPointer = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000004f2": "initialize_value_and_return_000004f2",
                "param_1": "outputPointer"
            },
            "calling": [
                "FUN_00004e26",
                "FUN_00004dee"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000514": {
            "entrypoint": "0x00000514",
            "current_name": "initialize_value_00000514",
            "code": "\nundefined4 initializeValue_00000514(undefined4 *output)\n\n{\n  *output = 0x13;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00000514": "initialize_value_00000514",
                "param_1": "output"
            },
            "calling": [
                "FUN_000056b8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000534": {
            "entrypoint": "0x00000534",
            "current_name": "check_input_00000534",
            "code": "\nundefined4 checkInput_00000534(undefined4 *output,int input)\n\n{\n  undefined4 isValid;\n  \n  *output = 0;\n  if (((input == 0) || (input == 1)) || (input == 2)) {\n    isValid = 1;\n  }\n  else {\n    isValid = 0;\n  }\n  return isValid;\n}\n\n",
            "renaming": {
                "FUN_00000534": "check_input_00000534",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "isValid"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000566": {
            "entrypoint": "0x00000566",
            "current_name": "convert_byte_to_int_00000566",
            "code": "\nint convertByteToInt_00000566(int inputValue)\n\n{\n  byte byte_4;\n  byte byte_1;\n  byte byte_2;\n  byte byte_3;\n  int result;\n  \n  byte_1 = (byte)inputValue;\n  byte_2 = (byte)((uint)inputValue >> 8);\n  byte_3 = (byte)((uint)inputValue >> 0x10);\n  byte_4 = (byte)((uint)inputValue >> 0x18);\n  result = LZCOUNT((uint)(byte)((((((((byte_1 & 1) << 1 | byte_1 >> 1 & 1) << 1 | byte_1 >> 2 & 1) << 1\n                                  | byte_1 >> 3 & 1) << 1 | byte_1 >> 4 & 1) << 1 | byte_1 >> 5 & 1) <<\n                                1 | byte_1 >> 6 & 1) << 1 | byte_1 >> 7) << 0x18 |\n                  (uint)(byte)((((((((byte_2 & 1) << 1 | byte_2 >> 1 & 1) << 1 | byte_2 >> 2 & 1) << 1\n                                  | byte_2 >> 3 & 1) << 1 | byte_2 >> 4 & 1) << 1 | byte_2 >> 5 & 1) <<\n                                1 | byte_2 >> 6 & 1) << 1 | byte_2 >> 7) << 0x10 |\n                  (uint)(byte)((((((((byte_3 & 1) << 1 | byte_3 >> 1 & 1) << 1 | byte_3 >> 2 & 1) << 1\n                                  | byte_3 >> 3 & 1) << 1 | byte_3 >> 4 & 1) << 1 | byte_3 >> 5 & 1) <<\n                                1 | byte_3 >> 6 & 1) << 1 | byte_3 >> 7) << 8 |\n                  (uint)(byte)((((((((byte_4 & 1) << 1 | byte_4 >> 1 & 1) << 1 | byte_4 >> 2 & 1) << 1\n                                  | byte_4 >> 3 & 1) << 1 | byte_4 >> 4 & 1) << 1 | byte_4 >> 5 & 1) <<\n                                1 | byte_4 >> 6 & 1) << 1 | byte_4 >> 7));\n  if (inputValue == 0) {\n    result = -1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00000566": "convert_byte_to_int_00000566",
                "param_1": "inputValue",
                "bVar1": "byte_4",
                "bVar2": "byte_1",
                "bVar3": "byte_2",
                "bVar4": "byte_3",
                "iVar5": "result"
            },
            "calling": [
                "FUN_00000610"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000058e": {
            "entrypoint": "0x0000058e",
            "current_name": "update_pointer_0000058e",
            "code": "\nvoid updatePointer_0000058e(int *ptrToPointer,undefined4 *ptrToUpdate)\n\n{\n  if (*ptrToPointer == 0) {\n    *ptrToUpdate = ptrToUpdate;\n  }\n  else {\n    *ptrToUpdate = *(undefined4 *)*ptrToPointer;\n    *(undefined4 **)*ptrToPointer = ptrToUpdate;\n  }\n  *ptrToPointer = (int)ptrToUpdate;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000058e": "update_pointer_0000058e",
                "param_1": "ptrToPointer",
                "param_2": "ptrToUpdate"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000005ca": {
            "entrypoint": "0x000005ca",
            "current_name": "extract_value_from_ptr_000005ca",
            "code": "\nundefined4 * extractValueFromPtr_000005ca(int *inputPtr)\n\n{\n  undefined4 *outputPtr;\n  \n  if (*inputPtr == 0) {\n    outputPtr = (undefined4 *)0x0;\n  }\n  else {\n    outputPtr = *(undefined4 **)*inputPtr;\n    if (outputPtr == (undefined4 *)*inputPtr) {\n      *inputPtr = 0;\n    }\n    else {\n      *(undefined4 *)*inputPtr = *outputPtr;\n    }\n  }\n  return outputPtr;\n}\n\n",
            "renaming": {
                "FUN_000005ca": "extract_value_from_ptr_000005ca",
                "param_1": "inputPtr",
                "puVar1": "outputPtr"
            },
            "calling": [
                "FUN_00000698"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000610": {
            "entrypoint": "0x00000610",
            "current_name": "convert_and_modify_values_00000610",
            "code": "\nundefined4 convertAndModifyValues_00000610(void)\n\n{\n  int originalValue;\n  int convertedValue;\n  undefined4 returnValue;\n  \n  originalValue = DAT_1fff03dc;\n  DAT_1fff0354 = 0;\n  convertedValue = convert_byte_to_int_00000566(DAT_1fff0424);\n  convertedValue = **(int **)(&DAT_1fff03e4 + convertedValue * 4);\n  if (originalValue == convertedValue + -8) {\n    returnValue = 0;\n  }\n  else {\n    if ((originalValue != 0) && (*(char *)(originalValue + 4) == '\\t')) {\n      *(undefined *)(originalValue + 4) = 10;\n    }\n    *(undefined *)(convertedValue + -4) = 9;\n    DAT_1fff03e0 = *(undefined2 *)(convertedValue + -2);\n    returnValue = 1;\n    DAT_1fff03dc = convertedValue + -8;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00000610": "convert_and_modify_values_00000610",
                "iVar1": "originalValue",
                "iVar2": "convertedValue",
                "uVar3": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_00000566"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000698": {
            "entrypoint": "0x00000698",
            "current_name": "update_value_00000698",
            "code": "\nvoid updateValue_00000698(int data,uint newValue)\n\n{\n  if (newValue < 9) {\n    if ((8 < *(byteValue *)(data + 4)) &&\n       (extractValue(&DAT_1fff03e4 + (uint)*(byteValue *)(data + 5) * 4),\n       *(int *)(&DAT_1fff03e4 + (uint)*(byteValue *)(data + 5) * 4) == 0)) {\n      DAT_1fff0424 = DAT_1fff0424 & ~(1 << *(signedByte *)(data + 5));\n    }\n  }\n  else if (*(byteValue *)(data + 4) < 9) {\n    updatePointer(&DAT_1fff03e4 + (uint)*(byteValue *)(data + 5) * 4,data + 8);\n    DAT_1fff0424 = DAT_1fff0424 | 1 << *(signedByte *)(data + 5);\n  }\n  *(char *)(data + 4) = (char)newValue;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000698": "update_value_00000698",
                "param_1": "data",
                "param_2": "newValue",
                "byte": "byteValue",
                "sbyte": "signedByte",
                "extract_value_from_ptr_000005ca": "extractValue",
                "update_pointer_0000058e": "updatePointer"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_000005ca",
                "FUN_0000058e"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000738": {
            "entrypoint": "0x00000738",
            "current_name": "check_memory_protection_00000738",
            "code": "\nvoid checkMemoryProtection_00000738(ushort inputValue)\n\n{\n  int exceptionNumber;\n  \n  if ((*(byte *)(DAT_1fff03dc + 4) < 9) || (inputValue < *(byte *)(DAT_1fff03dc + 5))) {\n    exceptionNumber = get_exception_number_00000d2a();\n    if (exceptionNumber == 0) {\n      enable_memory_protection_0000093c();\n    }\n    else {\n      DAT_1fff0354 = 1;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000738": "check_memory_protection_00000738",
                "param_1": "inputValue",
                "iVar1": "exceptionNumber"
            },
            "calling": [
                "FUN_000010d4",
                "FUN_000024bc"
            ],
            "called": [
                "FUN_0000093c",
                "FUN_00000d2a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000794": {
            "entrypoint": "0x00000794",
            "current_name": "initialize_array_00000794",
            "code": "\nint * initializeArray_00000794(void)\n\n{\n  int extraOutput1;\n  int index;\n  undefined4 *pointer;\n  uint sum;\n  int outerLoop;\n  int innerLoop;\n  int *arrayPtr;\n  \n  check_interrupt_status_00000cd0();\n  *(undefined4 *)(&DAT_1fff0358 + DAT_1fff03e0 * 4) = 0;\n  DAT_1fff0350 = DAT_1fff0350 + -1;\n  update_value_00000698(DAT_1fff03dc,0);\n  pointer = &DAT_1fff03dc;\n  index = 0;\n  DAT_1fff03dc = 0;\n  main_loop_00000930();\n  sum = (int)pointer + index & 0xfffffffc;\n  arrayPtr = (int *)(sum - 4);\n  *arrayPtr = 0x77777777;\n  if (((uint)arrayPtr & 7) != 0) {\n    arrayPtr = (int *)(sum - 8);\n    *arrayPtr = 0x88888888;\n  }\n  arrayPtr[-1] = 0x1000000;\n  arrayPtr[-2] = index << 0xd;\n  arrayPtr[-3] = 0x795;\n  arrayPtr = arrayPtr + -4;\n  *arrayPtr = 0;\n  for (innerLoop = 3; 0 < innerLoop; innerLoop = innerLoop + -1) {\n    arrayPtr = arrayPtr + -1;\n    *arrayPtr = innerLoop;\n  }\n  arrayPtr = arrayPtr + -1;\n  *arrayPtr = extraOutput1;\n  for (outerLoop = 0xb; 3 < outerLoop; outerLoop = outerLoop + -1) {\n    arrayPtr = arrayPtr + -1;\n    *arrayPtr = outerLoop;\n  }\n  arrayPtr[-1] = -3;\n  return arrayPtr + -1;\n}\n\n",
            "renaming": {
                "FUN_00000794": "initialize_array_00000794",
                "extraout_r1": "extraOutput1",
                "iVar1": "index",
                "puVar2": "pointer",
                "uVar3": "sum",
                "iStack_1c": "outerLoop",
                "iStack_18": "innerLoop",
                "piStack_14": "arrayPtr"
            },
            "calling": [],
            "called": [
                "FUN_00000cd0",
                "FUN_00000698",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000007dc": {
            "entrypoint": "0x000007dc",
            "current_name": "initialize_data_000007dc",
            "code": "\nint * initializeData_000007dc(undefined4 arg1,int arg2,int arg3,int arg4)\n\n{\n  uint adjustedSize;\n  int outerLoop;\n  int innerLoop;\n  int *arrayPointer;\n  \n  adjustedSize = arg4 + arg3 & 0xfffffffc;\n  arrayPointer = (int *)(adjustedSize - 4);\n  *arrayPointer = 0x77777777;\n  if (((uint)arrayPointer & 7) != 0) {\n    arrayPointer = (int *)(adjustedSize - 8);\n    *arrayPointer = 0x88888888;\n  }\n  arrayPointer[-1] = 0x1000000;\n  arrayPointer[-2] = arg1;\n  arrayPointer[-3] = 0x795;\n  arrayPointer = arrayPointer + -4;\n  *arrayPointer = 0;\n  for (innerLoop = 3; 0 < innerLoop; innerLoop = innerLoop + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = innerLoop;\n  }\n  arrayPointer = arrayPointer + -1;\n  *arrayPointer = arg2;\n  for (outerLoop = 0xb; 3 < outerLoop; outerLoop = outerLoop + -1) {\n    arrayPointer = arrayPointer + -1;\n    *arrayPointer = outerLoop;\n  }\n  arrayPointer[-1] = -3;\n  return arrayPointer + -1;\n}\n\n",
            "renaming": {
                "FUN_000007dc": "initialize_data_000007dc",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "adjustedSize",
                "local_14": "outerLoop",
                "local_10": "innerLoop",
                "local_c": "arrayPointer"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000008b8": {
            "entrypoint": "0x000008b8",
            "current_name": "count_elf_relocations_000008b8",
            "code": "\nint countElfRelocations_000008b8(void)\n\n{\n  Elf32_Rel *currentRelocation;\n  \n  for (currentRelocation = (Elf32_Rel *)&DAT_1fff0000;\n      (currentRelocation->offset == 0xe7fee7fe && (currentRelocation < relocationArray));\n      currentRelocation = (Elf32_Rel *)&currentRelocation->info) {\n  }\n  return ((int)relocationArray - (int)currentRelocation >> 2) << 2;\n}\n\n",
            "renaming": {
                "FUN_000008b8": "count_elf_relocations_000008b8",
                "local_c": "currentRelocation",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray",
                "r_offset": "offset",
                "r_info": "info"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000900": {
            "entrypoint": "0x00000900",
            "current_name": "get_main_stack_pointer_00000900",
            "code": "\nundefined4 getMainStackPointer_00000900(void)\n\n{\n  undefined4 mainStackPointer;\n  \n  mainStackPointer = getMainStackPointer_00000900();\n  return mainStackPointer;\n}\n\n",
            "renaming": {
                "FUN_00000900": "get_main_stack_pointer_00000900",
                "uVar1": "mainStackPointer"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000091c": {
            "entrypoint": "0x0000091c",
            "current_name": "get_flag_value_0000091c",
            "code": "\nuint32_t getFlagValue_0000091c(void)\n\n{\n  return 0x1fff0000;\n}\n\n",
            "renaming": {
                "FUN_0000091c": "get_flag_value_0000091c",
                "undefined4": "uint32_t"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000930": {
            "entrypoint": "0x00000930",
            "current_name": "main_loop_00000930",
            "code": "\nvoid main_loop_00000930(void)\n\n{\n  check_irq_interrupts();\n  trigger_software_interrupt(1);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000930": "main_loop_00000930",
                "check_irq_interrupts_00000cf0": "check_irq_interrupts",
                "software_interrupt": "trigger_software_interrupt"
            },
            "calling": [
                "FUN_00000794",
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000093c": {
            "entrypoint": "0x0000093c",
            "current_name": "enable_memory_protection_0000093c",
            "code": "\n\n\nvoid enableMemoryProtection_0000093c(void)\n\n{\n  _DAT_e000ed04 = _DAT_e000ed04 | 0x10000000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000093c": "enable_memory_protection_0000093c"
            },
            "calling": [
                "FUN_00000738",
                "FUN_00001348",
                "FUN_00002798",
                "FUN_00001cf0",
                "FUN_00002434"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000990": {
            "entrypoint": "0x00000990",
            "current_name": "FUNC_00000990",
            "code": "\nvoid FUNC_00000990(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000990": "FUNC_00000990"
            },
            "calling": [
                "entry"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "entry": {
            "entrypoint": "0x0000099c",
            "current_name": "entry",
            "code": "\nvoid entry(void)\n\n{\n  undefined4 uStack_18;\n  undefined4 *local_14;\n  dword *local_10;\n  Elf32_Rel *local_c;\n  \n  local_14 = &uStack_18;\n  local_10 = (dword *)&DAT_00007c60;\n  initialize_system_00000db0();\n  local_c = (Elf32_Rel *)&DAT_1fff0000;\n  while (local_c < &uStack_18) {\n    local_c->r_offset = 0xe7fee7fe;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  local_c = Elf32_Rel_ARRAY_1fff0200;\n  while (local_c < (Elf32_Rel *)&DAT_1fff0350) {\n    local_c->r_offset = *local_10;\n    local_10 = local_10 + 1;\n    local_c = (Elf32_Rel *)&local_c->r_info;\n  }\n  local_c = (Elf32_Rel *)&DAT_1fff0350;\n  while (local_c < (undefined4 *)0x1fff0df0) {\n    local_c->r_offset = 0;\n    local_c = (Elf32_Rel *)((int)local_c + 4);\n  }\n  FUNC_00000990();\n  initialize_system_00000e64();\n  initialize_and_execute_functions_0000459c();\n  initialize_data_00000f8c();\n  return;\n}\n\n",
            "renaming": {},
            "calling": [],
            "called": [
                "FUN_00000db0",
                "FUN_0000459c",
                "FUN_00000e64",
                "FUN_00000990",
                "FUN_00000f8c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000a30": {
            "entrypoint": "0x00000a30",
            "current_name": "handle_nmi_interrupt_00000a30",
            "code": "\nundefined * handle_NMI_interrupt_00000a30(void)\n\n{\n  integer register_value;\n  \n  handle_kernel_panic(4,\"NMI HANDLER\");\n  return &stack0xe000ffe0 + -*(integer *)(register_value + 0x4c);\n}\n\n",
            "renaming": {
                "FUN_00000a30": "handle_nmi_interrupt_00000a30",
                "in_r3": "register_value",
                "kernel_panic_handler_00000f04": "handle_kernel_panic",
                "int": "integer"
            },
            "calling": [],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cc0": {
            "entrypoint": "0x00000cc0",
            "current_name": "disable_irq_and_return_interrupts_00000cc0",
            "code": "\nundefined4 disableIRQAndReturnInterrupts_00000cc0(void)\n\n{\n  bool isCurrentModePrivilegedResult;\n  undefined4 interruptsEnabled;\n  \n  kernel_panic_handler_00000f04(10,\"DUMMY HANDLER\");\n  interruptsEnabled = 0;\n  isCurrentModePrivilegedResult = (bool)checkIfCurrentModePrivileged();\n  if (isCurrentModePrivilegedResult) {\n    interruptsEnabled = checkIfIRQInterruptsEnabled();\n  }\n  disableIRQinterrupts();\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cc0": "disable_irq_and_return_interrupts_00000cc0",
                "bVar1": "isCurrentModePrivilegedResult",
                "uVar2": "interruptsEnabled",
                "isCurrentModePrivileged": "checkIfCurrentModePrivileged",
                "isIRQinterruptsEnabled": "checkIfIRQInterruptsEnabled"
            },
            "calling": [
                "FUN_00000dc0"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cd0": {
            "entrypoint": "0x00000cd0",
            "current_name": "check_interrupt_status_00000cd0",
            "code": "\nundefined4 checkInterruptStatus_00000cd0(void)\n\n{\n  bool isPrivileged;\n  undefined4 interruptStatus;\n  \n  interruptStatus = 0;\n  isPrivileged = (bool)isPrivilegedMode();\n  if (isPrivileged) {\n    interruptStatus = areIRQinterruptsEnabled();\n  }\n  turnOffIRQinterrupts();\n  return interruptStatus;\n}\n\n",
            "renaming": {
                "FUN_00000cd0": "check_interrupt_status_00000cd0",
                "uVar2": "interruptStatus",
                "bVar1": "isPrivileged",
                "isCurrentModePrivileged": "isPrivilegedMode",
                "isIRQinterruptsEnabled": "areIRQinterruptsEnabled",
                "disableIRQinterrupts": "turnOffIRQinterrupts"
            },
            "calling": [
                "FUN_00000e58",
                "FUN_00001c84",
                "FUN_00000794",
                "FUN_00000f04",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc",
                "FUN_00000f8c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000cf0": {
            "entrypoint": "0x00000cf0",
            "current_name": "check_irq_interrupts_00000cf0",
            "code": "\nundefined4 checkIRQInterrupts_00000cf0(void)\n\n{\n  bool isPrivilegedMode;\n  undefined4 interruptsEnabled;\n  \n  enableIRQinterrupts();\n  interruptsEnabled = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    interruptsEnabled = isIRQinterruptsEnabled();\n  }\n  return interruptsEnabled;\n}\n\n",
            "renaming": {
                "FUN_00000cf0": "check_irq_interrupts_00000cf0",
                "bVar1": "isPrivilegedMode",
                "uVar2": "interruptsEnabled"
            },
            "calling": [
                "FUN_00000930"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d0c": {
            "entrypoint": "0x00000d0c",
            "current_name": "enable_ir_qinterrupts_if_needed_00000d0c",
            "code": "\nvoid enableIRQinterruptsIfNeeded_00000d0c(uint interruptFlag)\n\n{\n  bool isPrivilegedMode;\n  \n  isPrivilegedMode = (bool)checkPrivilegedMode();\n  if (isPrivilegedMode) {\n    enableInterrupts((interruptFlag & 1) == 1);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d0c": "enable_ir_qinterrupts_if_needed_00000d0c",
                "param_1": "interruptFlag",
                "bVar1": "isPrivilegedMode",
                "isCurrentModePrivileged": "checkPrivilegedMode",
                "enableIRQinterrupts": "enableInterrupts"
            },
            "calling": [
                "FUN_00001c84",
                "FUN_00002434",
                "FUN_000010d4",
                "FUN_00000428",
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d2a": {
            "entrypoint": "0x00000d2a",
            "current_name": "get_exception_number_00000d2a",
            "code": "\nuint getExceptionNumber_00000d2a(void)\n\n{\n  bool isPrivilegedMode;\n  uint exceptionNumber;\n  \n  exceptionNumber = 0;\n  isPrivilegedMode = (bool)isCurrentModePrivileged();\n  if (isPrivilegedMode) {\n    exceptionNumber = getCurrentExceptionNumber();\n    exceptionNumber = exceptionNumber & 0x1f;\n  }\n  return exceptionNumber;\n}\n\n",
            "renaming": {
                "FUN_00000d2a": "get_exception_number_00000d2a",
                "bVar1": "isPrivilegedMode",
                "uVar2": "exceptionNumber"
            },
            "calling": [
                "FUN_00000738"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d44": {
            "entrypoint": "0x00000d44",
            "current_name": "calculate_offset_00000d44",
            "code": "\nint calculate_offset_00000d44(uint offset,int multiplier)\n\n{\n  return multiplier * 4 + (offset & 0xf0000000 | (offset & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00000d44": "calculate_offset_00000d44",
                "param_1": "offset",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00000d76"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d76": {
            "entrypoint": "0x00000d76",
            "current_name": "initialize_memory_00000d76",
            "code": "\nvoid initializeMemory_00000d76(undefined4 dataPointer,undefined offset)\n\n{\n  undefined4 *memoryLocation;\n  \n  memoryLocation = (undefined4 *)calculate_offset_00000d44(dataPointer,offset);\n  *memoryLocation = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d76": "initialize_memory_00000d76",
                "param_1": "dataPointer",
                "param_2": "offset",
                "puVar1": "memoryLocation"
            },
            "calling": [
                "FUN_00000d9c"
            ],
            "called": [
                "FUN_00000d44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000d9c": {
            "entrypoint": "0x00000d9c",
            "current_name": "initialize_memory_00000d9c",
            "code": "\nvoid initialize_memory_00000d9c(void)\n\n{\n  initialize_memory_00000d9c_00000d76(0x40048040,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000d9c": "initialize_memory_00000d9c"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [
                "FUN_00000d76"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000db0": {
            "entrypoint": "0x00000db0",
            "current_name": "initialize_system_00000db0",
            "code": "\nvoid initialize_system_00000db0(void)\n\n{\n  initialize_global_values();\n  initialize_memory();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000db0": "initialize_system_00000db0",
                "initialize_global_values_00000dcc": "initialize_global_values",
                "initialize_memory_00000d9c": "initialize_memory"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000d9c",
                "FUN_00000dcc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dc0": {
            "entrypoint": "0x00000dc0",
            "current_name": "disable_irq_and_return_interrupts_00000dc0",
            "code": "\nvoid disable_irq_and_return_interrupts_00000dc0(void)\n\n{\n  disable_irq_and_return_interrupts_00000dc0_impl();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dc0": "disable_irq_and_return_interrupts_00000dc0",
                "disable_irq_and_return_interrupts_00000cc0": "disable_irq_and_return_interrupts_impl"
            },
            "calling": [],
            "called": [
                "FUN_00000cc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000dcc": {
            "entrypoint": "0x00000dcc",
            "current_name": "initialize_global_values_00000dcc",
            "code": "\n\n\nvoid initializeGlobalValues_00000dcc(void)\n\n{\n  _DAT_4005200e = 0xd928;\n  _DAT_40052000 = 0xd2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000dcc": "initialize_global_values_00000dcc"
            },
            "calling": [
                "FUN_00000db0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000df4": {
            "entrypoint": "0x00000df4",
            "current_name": "initialize_memory_00000df4",
            "code": "\nvoid initialize_memory_00000df4(void)\n\n{\n  update_memory(0,0x1c200,0x12b5,0x1fff0204);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000df4": "initialize_memory_00000df4",
                "update_memory_000013b8": "update_memory"
            },
            "calling": [
                "FUN_00000410"
            ],
            "called": [
                "FUN_000013b8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e14": {
            "entrypoint": "0x00000e14",
            "current_name": "copy_and_count_00000e14",
            "code": "\nundefined4 copyAndCount_00000e14(undefined4 sourceAddress,undefined4 destinationAddress)\n\n{\n  undefined4 copyCount;\n  \n  copyCount = copy_and_count_loop_000012e2(0x1fff0204,sourceAddress,destinationAddress);\n  return copyCount;\n}\n\n",
            "renaming": {
                "FUN_00000e14": "copy_and_count_00000e14",
                "param_1": "sourceAddress",
                "param_2": "destinationAddress",
                "uVar1": "copyCount"
            },
            "calling": [
                "FUN_00000490"
            ],
            "called": [
                "FUN_000012e2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e38": {
            "entrypoint": "0x00000e38",
            "current_name": "copy_data_and_return_00000e38",
            "code": "\nundefined4 copy_data_and_return_00000e38(undefined4 source,undefined4 destination)\n\n{\n  copy_data_000015d0(0,source,destination);\n  return destination;\n}\n\n",
            "renaming": {
                "FUN_00000e38": "copy_data_and_return_00000e38",
                "param_1": "source",
                "param_2": "destination"
            },
            "calling": [
                "FUN_00004dee"
            ],
            "called": [
                "FUN_000015d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e58": {
            "entrypoint": "0x00000e58",
            "current_name": "run_infinite_loop_00000e58",
            "code": "\nvoid run_infinite_loop_00000e58(void)\n\n{\n  check_interrupt_status();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00000e58": "run_infinite_loop_00000e58",
                "check_interrupt_status_00000cd0": "check_interrupt_status"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00000cd0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000e64": {
            "entrypoint": "0x00000e64",
            "current_name": "initialize_system_00000e64",
            "code": "\n\n\nvoid initializeSystem_00000e64(void)\n\n{\n  _DAT_40048038 = _DAT_40048038 | 0x200;\n  _DAT_40049048 = _DAT_40049048 & 0xfefff8ff;\n  initializeAndConfigureSystem();\n  updateMaskAndValue(0x2056,0x80);\n  updateMaskAndValue(0x511a,0x80);\n  updateMaskAndValue(0x2055,0x80);\n  setBitsUsingMask(0x2056);\n  setBitsUsingMask(0x511a);\n  setBitsUsingMask(0x2055);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000e64": "initialize_system_00000e64",
                "initialize_and_configure_system_00001274": "initializeAndConfigureSystem",
                "update_mask_and_value_00001eea": "updateMaskAndValue",
                "set_bits_using_mask_00001ff6": "setBitsUsingMask"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001274"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000ed8": {
            "entrypoint": "0x00000ed8",
            "current_name": "initialize_data_00000ed8",
            "code": "\nvoid initializeData_00000ed8(void)\n\n{\n  undefined4 stackPointer;\n  \n  process_data_with_offset_00004c84(&DAT_00006f58,stackPointer);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ed8": "initialize_data_00000ed8",
                "in_lr": "stackPointer"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_00000ed8(void)\n\n{\n  undefined4 in_lr;\n  \n  FUNC_00004c84(&DAT_00006f58,in_lr);\n  return;\n}\n\n"
        },
        "FUN_00000ef8": {
            "entrypoint": "0x00000ef8",
            "current_name": "FUNC_00000ef8",
            "code": "\nvoid FUNC_00000ef8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000ef8": "FUNC_00000ef8"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_00000f04": {
            "entrypoint": "0x00000f04",
            "current_name": "kernel_panic_handler_00000f04",
            "code": "\nvoid kernel_panic_handler_00000f04(char panic_type,undefined4 panic_message)\n\n{\n  undefined4 local_variable;\n  code *jump_table;\n  undefined4 panic_message_copy;\n  char panic_type_copy;\n  \n  panic_message_copy = panic_message;\n  panic_type_copy = panic_type;\n  if (DAT_1fff0468 == 0) {\n    DAT_1fff0468 = 1;\n    if (panic_type == '\\x03') {\n      initialize_data_00000ed8();\n    }\n    process_data_with_offset_00004c84(\"*** RIOT kernel panic:\\n%s\\n\\n\",panic_message_copy);\n    print_process_info_0000211c();\n    process_data_with_offset_00004c84(&DAT_00006f78);\n    process_data_with_offset_00004c84(\"*** halted.\\n\\n\");\n  }\n  check_interrupt_status_00000cd0();\n  FUNC_00000ef8();\n  jump_table = (code *)0xf4d;\n  run_infinite_loop_00000e58();\n  local_variable = (int)&local_variable + 1;\n  FUNC_00002400();\n  process_data_with_offset_00004c84(\"main(): This is RIOT! (Version: 2018.04-vm-HEAD)\\n\");\n  initialize_system_000023a4();\n                    /* WARNING: Could not recover jumptable at 0x00000f7a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f04": "kernel_panic_handler_00000f04",
                "param_1": "panic_type",
                "param_2": "panic_message",
                "uStack_18": "local_variable",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "local_10": "panic_message_copy",
                "local_9": "panic_type_copy"
            },
            "calling": [
                "FUN_00000fec",
                "FUN_00000cc0",
                "FUN_00003ec4",
                "FUN_000013b8",
                "FUN_00001034",
                "FUN_00000a30"
            ],
            "called": [
                "FUN_0000211c",
                "FUN_00000e58",
                "FUN_00000ed8",
                "FUN_00002400",
                "FUN_00000cd0",
                "FUN_00004c84",
                "FUN_00000ef8",
                "FUN_000023a4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000f8c": {
            "entrypoint": "0x00000f8c",
            "current_name": "initialize_data_00000f8c",
            "code": "\nvoid initialize_data_00000f8c(void)\n\n{\n  uint loop_result;\n  undefined4 *data_structure_ptr;\n  uint data_size;\n  int flag;\n  int *flag_address;\n  undefined4 loop_counter;\n  undefined4 local_18;\n  undefined4 local_14;\n  dword local_10;\n  \n  check_interrupt_status_00000cd0();\n  local_10 = Elf32_Rel_ARRAY_1fff0200[3].r_info;\n  local_14 = 0;\n  local_18 = 0xf81;\n  initialize_data_00000f8c_structure_000010d4(&DAT_1fff0a6c,0x100,0xf,0xc);\n  local_10 = Elf32_Rel_ARRAY_1fff0200[3].r_offset;\n  local_14 = 0;\n  local_18 = 0xf5d;\n  data_size = 0xc;\n  initialize_data_00000f8c_structure_000010d4(&DAT_1fff046c,0x600,7);\n  loop_counter = 0xfd3;\n  loop_result = main_loop_00000930();\n  loop_result = loop_result >> 0x1e;\n  data_structure_ptr = (undefined4 *)(data_size * 0x100);\n  flag = (data_size >> 0x1d) << 0x11;\n  flag_address = &flag;\n  if ((loop_result & loop_result - 1) != 0) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *data_structure_ptr = 0;\n  data_structure_ptr[1] = 0;\n  data_structure_ptr[2] = loop_result - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000f8c": "initialize_data_00000f8c",
                "iStack_24": "flag",
                "piStack_20": "flag_address",
                "uStack_1c": "loop_counter",
                "uVar1": "loop_result",
                "puVar2": "data_structure_ptr",
                "uVar3": "data_size"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000cd0",
                "FUN_000010d4",
                "FUN_00000930"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00000fec": {
            "entrypoint": "0x00000fec",
            "current_name": "initialize_parameter_00000fec",
            "code": "\nvoid initializeParameter_00000fec(undefined4 *output,uint input)\n\n{\n  if ((input & input - 1) != 0) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *output = 0;\n  output[1] = 0;\n  output[2] = input - 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00000fec": "initialize_parameter_00000fec",
                "param_1": "output",
                "param_2": "input",
                "param_1[1]": "output[1]",
                "param_1[2]": "output[2]"
            },
            "calling": [
                "FUN_000010d4"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001034": {
            "entrypoint": "0x00001034",
            "current_name": "find_closest_pointer_00001034",
            "code": "\nvoid findClosestPointer_00001034(int **pointerArray,int currentIndex)\n\n{\n  int **currentPointer;\n  \n  if (8 < *(byte *)(currentIndex + 4)) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  for (currentPointer = pointerArray;\n      (*currentPointer != (int *)0x0 && (*(byte *)((int)*currentPointer + -3) <= *(byte *)(currentIndex + 5)));\n      currentPointer = (int **)*currentPointer) {\n  }\n  *(int **)(currentIndex + 8) = *currentPointer;\n  *currentPointer = (int *)(int **)(currentIndex + 8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001034": "find_closest_pointer_00001034",
                "param_1": "pointerArray",
                "param_2": "currentIndex",
                "local_1c": "currentPointer"
            },
            "calling": [
                "FUN_00002434"
            ],
            "called": [
                "FUN_00000f04"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010a0": {
            "entrypoint": "0x000010a0",
            "current_name": "find_index_difference_000010a0",
            "code": "\nint find_index_difference_000010a0(int *array)\n\n{\n  int *current_element;\n  \n  for (current_element = array; (int *)*current_element == current_element; current_element = current_element + 1) {\n  }\n  return (int)current_element - (int)array;\n}\n\n",
            "renaming": {
                "FUN_000010a0": "find_index_difference_000010a0",
                "param_1": "array",
                "local_c": "current_element"
            },
            "calling": [
                "FUN_0000211c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000010d4": {
            "entrypoint": "0x000010d4",
            "current_name": "initialize_data_structure_000010d4",
            "code": "\nint initializeDataStructure_000010d4(uint dataAddress,int dataSize,byte byteCount,uint flags,undefined4 param5,\n                undefined4 param6,undefined4 param7)\n\n{\n  undefined4 status;\n  undefined4 initializedValue;\n  int result;\n  uint alignedSize;\n  undefined4 *structPointer;\n  int alignedDataSize;\n  uint alignedDataAddress;\n  uint loopIndex;\n  short loopCounter;\n  short availableIndex;\n  \n  if (byteCount < 0x10) {\n    alignedDataSize = dataSize;\n    alignedDataAddress = dataAddress;\n    if ((dataAddress & 3) != 0) {\n      alignedDataSize = 4 - (dataAddress & 3);\n      alignedDataAddress = alignedDataSize + dataAddress;\n      alignedDataSize = dataSize - alignedDataSize;\n    }\n    alignedSize = alignedDataSize - 0x30U & 0xfffffffc;\n    structPointer = (undefined4 *)(alignedSize + alignedDataAddress);\n    if ((flags & 8) == 0) {\n      *(uint *)alignedDataAddress = alignedDataAddress;\n    }\n    else {\n      for (loopIndex = alignedDataAddress; loopIndex < alignedSize + alignedDataAddress; loopIndex = loopIndex + 4) {\n        *(uint *)loopIndex = loopIndex;\n      }\n    }\n    status = check_interrupt_status_00000cd0();\n    availableIndex = 0;\n    for (loopCounter = 1; loopCounter < 0x21; loopCounter = loopCounter + 1) {\n      if (*(int *)(&DAT_1fff0358 + loopCounter * 4) == 0) {\n        availableIndex = loopCounter;\n        break;\n      }\n    }\n    if (availableIndex == 0) {\n      enable_ir_qinterrupts_if_needed_00000d0c(status);\n      result = -0x8b;\n    }\n    else {\n      *(undefined4 **)(&DAT_1fff0358 + availableIndex * 4) = structPointer;\n      *(short *)((int)structPointer + 6) = availableIndex;\n      initializedValue = initialize_data_000007dc(param5,param6,alignedDataAddress,alignedSize);\n      *structPointer = initializedValue;\n      structPointer[9] = alignedDataAddress;\n      structPointer[0xb] = dataSize;\n      structPointer[10] = param7;\n      *(byte *)((int)structPointer + 5) = byteCount;\n      *(undefined *)(structPointer + 1) = 0;\n      structPointer[2] = 0;\n      structPointer[3] = 0;\n      structPointer[4] = 0;\n      initialize_parameter_00000fec(structPointer + 5,0);\n      structPointer[8] = 0;\n      DAT_1fff0350 = DAT_1fff0350 + 1;\n      if ((flags & 1) == 0) {\n        update_value_00000698(structPointer,10);\n        if ((flags & 4) == 0) {\n          enable_ir_qinterrupts_if_needed_00000d0c(status);\n          check_memory_protection_00000738(byteCount);\n          return (int)availableIndex;\n        }\n      }\n      else {\n        update_value_00000698(structPointer,1);\n      }\n      enable_ir_qinterrupts_if_needed_00000d0c(status);\n      result = (int)availableIndex;\n    }\n  }\n  else {\n    result = -0x16;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000010d4": "initialize_data_structure_000010d4",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "param_3": "byteCount",
                "param_4": "flags",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "status",
                "uVar2": "initializedValue",
                "iVar3": "result",
                "uVar4": "alignedSize",
                "puVar5": "structPointer",
                "local_30": "alignedDataSize",
                "local_2c": "alignedDataAddress",
                "local_10": "loopIndex",
                "local_c": "loopCounter",
                "local_a": "availableIndex"
            },
            "calling": [
                "FUN_00000f8c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000fec",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_000007dc",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001274": {
            "entrypoint": "0x00001274",
            "current_name": "initialize_and_configure_system_00001274",
            "code": "\nvoid initialize_and_configure_system_00001274(void)\n\n{\n  initialize_memory();\n  DAT_4007e000 = DAT_4007e000 | 0x28;\n  initialize_system();\n  initialize_memory_control();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001274": "initialize_and_configure_system_00001274",
                "initialize_memory_0000258c": "initialize_memory",
                "initialize_system_00001c84": "initialize_system",
                "initialize_memory_control_00002396": "initialize_memory_control"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001c84",
                "FUN_00002396",
                "FUN_0000258c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000129c": {
            "entrypoint": "0x0000129c",
            "current_name": "update_interrupt_status_0000129c",
            "code": "\nvoid update_interrupt_status_0000129c(undefined4 interrupt_status)\n\n{\n  update_interrupt_status_0000129c(interrupt_status,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000129c": "update_interrupt_status_0000129c",
                "param_1": "interrupt_status",
                "update_interrupt_status_00002434": "update_interrupt_status"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002434"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012b4": {
            "entrypoint": "0x000012b4",
            "current_name": "handle_subtraction_000012b4",
            "code": "\nundefined4 handle_subtraction_000012b4(int input_value,undefined input_param)\n\n{\n  undefined4 subtraction_result;\n  \n  subtraction_result = process_subtraction_00002364(input_value + 4,input_param);\n  handle_interrupt_000024bc(input_value);\n  return subtraction_result;\n}\n\n",
            "renaming": {
                "FUN_000012b4": "handle_subtraction_000012b4",
                "param_1": "input_value",
                "param_2": "input_param",
                "uVar1": "subtraction_result"
            },
            "calling": [],
            "called": [
                "FUN_00002364",
                "FUN_000024bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000012e2": {
            "entrypoint": "0x000012e2",
            "current_name": "copy_and_count_loop_000012e2",
            "code": "\nint copy_and_count_loop_000012e2(int input_buffer,undefined4 output_buffer,undefined4 buffer_size)\n\n{\n  int error_code;\n  \n  while( true ) {\n    error_code = copy_and_count_0000231c(input_buffer + 4,output_buffer,buffer_size);\n    if (error_code != 0) break;\n    update_interrupt_status_0000129c(input_buffer);\n  }\n  return error_code;\n}\n\n",
            "renaming": {
                "FUN_000012e2": "copy_and_count_loop_000012e2",
                "param_1": "input_buffer",
                "param_2": "output_buffer",
                "param_3": "buffer_size",
                "iVar1": "error_code"
            },
            "calling": [
                "FUN_00000e14"
            ],
            "called": [
                "FUN_0000129c",
                "FUN_0000231c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001318": {
            "entrypoint": "0x00001318",
            "current_name": "set_bit_value_00001318",
            "code": "\nvoid setBitValue_00001318(byte byteValue)\n\n{\n  *(int *)(((uint)(int)(char)byteValue >> 5) * 4 + -0x1fff1f00) = 1 << (byteValue & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001318": "set_bit_value_00001318",
                "param_1": "byteValue"
            },
            "calling": [
                "FUN_000014c4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001348": {
            "entrypoint": "0x00001348",
            "current_name": "initialize_memory_protection_00001348",
            "code": "\nvoid initializeMemoryProtection_00001348(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enableMemoryProtection();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001348": "initialize_memory_protection_00001348",
                "enable_memory_protection_0000093c": "enableMemoryProtection"
            },
            "calling": [
                "FUN_00001628"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001360": {
            "entrypoint": "0x00001360",
            "current_name": "calculate_offset_00001360",
            "code": "\nint calculate_offset_00001360(uint data,int multiplier)\n\n{\n  return multiplier * 4 + (data & 0xf0000000 | (data & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001360": "calculate_offset_00001360",
                "param_1": "data",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001392"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001392": {
            "entrypoint": "0x00001392",
            "current_name": "initialize_memory_00001392",
            "code": "\nvoid initializeMemory_00001392(undefined4 offset,undefined data)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001360(offset,data);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001392": "initialize_memory_00001392",
                "param_1": "offset",
                "param_2": "data",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001360"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000013b8": {
            "entrypoint": "0x000013b8",
            "current_name": "update_memory_000013b8",
            "code": "\nundefined4 update_memory_000013b8(int index,undefined4 config_value,undefined4 new_ptr,undefined4 new_dat)\n\n{\n  undefined4 result;\n  \n  if (index != 0) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  *(undefined4 *)(&DAT_1fff0b6c + index * 8) = new_ptr;\n  *(undefined4 *)(&DAT_1fff0b70 + index * 8) = new_dat;\n  perform_updation_00001448(index);\n  initialize_memory_00001392(*(undefined4 *)(&DAT_00006ffc + index * 0x20),\n               *(undefined *)(index * 0x20 + 0x7000));\n  if ((&DAT_00007002)[index * 0x20] == '\\0') {\n    update_configuration_000014c4(index,config_value);\n    result = 0;\n  }\n  else {\n    result = 0xffffffff;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000013b8": "update_memory_000013b8",
                "param_1": "index",
                "param_2": "config_value",
                "param_3": "new_ptr",
                "param_4": "new_dat",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00000df4"
            ],
            "called": [
                "FUN_000014c4",
                "FUN_00000f04",
                "FUN_00001392",
                "FUN_00001448"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001448": {
            "entrypoint": "0x00001448",
            "current_name": "perform_updation_00001448",
            "code": "\nvoid performUpdation_00001448(int index)\n\n{\n  if (*(short *)(&DAT_00006fec + index * 0x20) != -1) {\n    updateOffsetAndValue(*(undefined2 *)(&DAT_00006fec + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff0 + index * 0x20));\n  }\n  if (*(short *)(&DAT_00006fee + index * 0x20) != -1) {\n    updateOffsetAndValue(*(undefined2 *)(&DAT_00006fee + index * 0x20),\n                 *(undefined4 *)(&DAT_00006ff4 + index * 0x20));\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001448": "perform_updation_00001448",
                "param_1": "index",
                "update_offset_and_value_00001f80": "updateOffsetAndValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001f80"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000014c4": {
            "entrypoint": "0x000014c4",
            "current_name": "update_configuration_000014c4",
            "code": "\nvoid updateConfiguration_000014c4(int index,uint divider)\n\n{\n  byte *dataPointer;\n  uint value;\n  uint shiftedValue;\n  \n  dataPointer = *(byte **)(&DAT_00006fe4 + index * 0x20);\n  value = *(uint *)(&DAT_00006fe8 + index * 0x20);\n  dataPointer[3] = dataPointer[3] & 0xf3;\n  dataPointer[2] = (&DAT_00007001)[index * 0x20];\n  shiftedValue = value / (divider << 4);\n  *dataPointer = (byte)(shiftedValue >> 8) & 0x1f;\n  dataPointer[1] = (byte)shiftedValue;\n  dataPointer[10] = (byte)((value << 2) / divider + 1 >> 1) & 0x1f;\n  dataPointer[0x10] = dataPointer[0x10] | 0x88;\n  if ((dataPointer[0x10] & 0x70) == 0) {\n    dataPointer[0x13] = 0;\n  }\n  else {\n    dataPointer[0x13] = (char)(2 << (dataPointer[0x10] >> 4 & 7)) - 1;\n  }\n  dataPointer[0x15] = 1;\n  dataPointer[0x11] = 0xc0;\n  dataPointer[3] = dataPointer[3] | 0x2c;\n  set_bit_value_00001318((int)(char)(&DAT_00006ff8)[index * 0x20]);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000014c4": "update_configuration_000014c4",
                "param_1": "index",
                "param_2": "divider",
                "pbVar1": "dataPointer",
                "uVar2": "value",
                "uVar3": "shiftedValue"
            },
            "calling": [
                "FUN_000013b8"
            ],
            "called": [
                "FUN_00001318"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000015d0": {
            "entrypoint": "0x000015d0",
            "current_name": "copy_data_000015d0",
            "code": "\nvoid copy_data_000015d0(int index,int source_address,uint length)\n\n{\n  int data_address;\n  uint counter;\n  \n  data_address = *(int *)(&DAT_00006fe4 + index * 0x20);\n  for (counter = 0; counter < length; counter = counter + 1) {\n    do {\n    } while (-1 < *(char *)(data_address + 4));\n    *(undefined *)(data_address + 7) = *(undefined *)(counter + source_address);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000015d0": "copy_data_000015d0",
                "param_1": "index",
                "param_2": "source_address",
                "param_3": "length",
                "iVar1": "data_address",
                "local_c": "counter"
            },
            "calling": [
                "FUN_00000e38"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001628": {
            "entrypoint": "0x00001628",
            "current_name": "check_and_initialize_00001628",
            "code": "\nvoid checkAndInitialize_00001628(int index)\n\n{\n  if (((*(byte *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 4) & 0x20) != 0) &&\n     (*(int *)(&DAT_1fff0b6c + index * 8) != 0)) {\n    (**(code **)(&DAT_1fff0b6c + index * 8))\n              (*(undefined4 *)(&DAT_1fff0b70 + index * 8),\n               *(undefined *)(*(int *)(&DAT_00006fe4 + index * 0x20) + 7));\n  }\n  initializeMemoryProtection();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001628": "check_and_initialize_00001628",
                "param_1": "index",
                "initialize_memory_protection_00001348": "initializeMemoryProtection"
            },
            "calling": [
                "FUN_00001688"
            ],
            "called": [
                "FUN_00001348"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001688": {
            "entrypoint": "0x00001688",
            "current_name": "initialize_check_00001688",
            "code": "\nvoid initialize_check_00001688(void)\n\n{\n  check_and_initialize(0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001688": "initialize_check_00001688",
                "check_and_initialize_00001628": "check_and_initialize"
            },
            "calling": [],
            "called": [
                "FUN_00001628"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001696": {
            "entrypoint": "0x00001696",
            "current_name": "calculate_offset_00001696",
            "code": "\nint calculate_offset_00001696(uint input_value,int multiplier)\n\n{\n  return multiplier * 4 + (input_value & 0xf0000000 | (input_value & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001696": "calculate_offset_00001696",
                "param_1": "input_value",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_000016ec",
                "FUN_00001710",
                "FUN_000016c8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016c8": {
            "entrypoint": "0x000016c8",
            "current_name": "write_offset_to_memory_000016c8",
            "code": "\nvoid writeOffsetToMemory_000016c8(undefined4 offset_address,undefined value)\n\n{\n  undefined4 *offset_ptr;\n  \n  offset_ptr = (undefined4 *)calculate_offset_00001696(offset_address,value);\n  *offset_ptr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016c8": "write_offset_to_memory_000016c8",
                "param_1": "offset_address",
                "param_2": "value",
                "puVar1": "offset_ptr"
            },
            "calling": [
                "FUN_000017dc"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000016ec": {
            "entrypoint": "0x000016ec",
            "current_name": "set_offset_to_value_000016ec",
            "code": "\nvoid setOffsetToValue_000016ec(undefined4 offset,undefined value)\n\n{\n  undefined *offsetPtr;\n  \n  offsetPtr = (undefined *)calculate_offset_00001696(offset,value);\n  *offsetPtr = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000016ec": "set_offset_to_value_000016ec",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "offsetPtr"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a3c",
                "FUN_00001a60"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001710": {
            "entrypoint": "0x00001710",
            "current_name": "clear_memory_00001710",
            "code": "\nvoid clearMemory_00001710(undefined4 offset,undefined value)\n\n{\n  undefined *ptrToMemory;\n  \n  ptrToMemory = (undefined *)calculate_offset_00001696(offset,value);\n  *ptrToMemory = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001710": "clear_memory_00001710",
                "param_1": "offset",
                "param_2": "value",
                "puVar1": "ptrToMemory"
            },
            "calling": [
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_00001778",
                "FUN_00001a60",
                "FUN_000018bc",
                "FUN_000019c0",
                "FUN_00001734"
            ],
            "called": [
                "FUN_00001696"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001734": {
            "entrypoint": "0x00001734",
            "current_name": "clear_memory_00001734",
            "code": "\nvoid clearMemory_00001734(void)\n\n{\n  clearMemory_00001734Block(&DAT_40064005,6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001734": "clear_memory_00001734",
                "clear_memory_00001710": "clearMemoryBlock"
            },
            "calling": [
                "FUN_00001a18",
                "FUN_00001a3c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001748": {
            "entrypoint": "0x00001748",
            "current_name": "merge_and_mask_bits_00001748",
            "code": "\nvoid mergeAndMaskBits_00001748(byte inputByte)\n\n{\n  DAT_40064003 = inputByte | DAT_40064003 & 0x1f;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001748": "merge_and_mask_bits_00001748",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_00001960",
                "FUN_00001bb8",
                "FUN_000018bc",
                "FUN_000019c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001778": {
            "entrypoint": "0x00001778",
            "current_name": "clear_and_set_memory_00001778",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000179c) */\n/* WARNING: Removing unreachable block (ram,0x000017b2) */\n/* WARNING: Removing unreachable block (ram,0x000017c0) */\n\nvoid clearAndSetMemory_00001778(void)\n\n{\n  DAT_40064001 = DAT_40064001 & 0xcf | 0x20;\n  clearMemory(&DAT_40064001,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001778": "clear_and_set_memory_00001778",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_0000191c",
                "FUN_000019c0"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000017dc": {
            "entrypoint": "0x000017dc",
            "current_name": "initialize_memory_000017dc",
            "code": "\n\n\nvoid initializeMemory_000017dc(void)\n\n{\n  write_offset_to_memory_000016c8(&DAT_4004803c,0x1d);\n  if ((_DAT_4003d010 & 0x100) == 0) {\n    _DAT_4003d010 = 0x104;\n  }\n  _DAT_40047000 = _DAT_40047000 & 0xfff3ffff | 0x80000;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000017dc": "initialize_memory_000017dc"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000182c": {
            "entrypoint": "0x0000182c",
            "current_name": "clear_memory_and_set_offset_0000182c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0000187c) */\n/* WARNING: Removing unreachable block (ram,0x0000186a) */\n/* WARNING: Removing unreachable block (ram,0x00001898) */\n\nvoid clearMemoryAndSetOffset_0000182c(void)\n\n{\n  DAT_40064008 = DAT_40064008 & 0xd0;\n  set_offset_to_value_000016ec(&DAT_40064001,0);\n  clear_memory_00001710(&DAT_40064000,1);\n  clear_memory_00001710(&DAT_40064000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000182c": "clear_memory_and_set_offset_0000182c"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000018bc": {
            "entrypoint": "0x000018bc",
            "current_name": "initialize_system_000018bc",
            "code": "\nvoid initializeSystem_000018bc(void)\n\n{\n  mergeAndMaskBits(0xa0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  clearMemory(&DAT_40064001,1);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000018bc": "initialize_system_000018bc",
                "merge_and_mask_bits_00001748": "mergeAndMaskBits",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000191c": {
            "entrypoint": "0x0000191c",
            "current_name": "initialize_memory_0000191c",
            "code": "\nvoid initializeMemory_0000191c(void)\n\n{\n  clear_and_set_memory_00001778();\n  merge_and_mask_bits_00001748(0x40);\n  DAT_40064000 = DAT_40064000 & 0x3b;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000191c": "initialize_memory_0000191c"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001778",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001960": {
            "entrypoint": "0x00001960",
            "current_name": "initialize_system_00001960",
            "code": "\nvoid initializeSystem_00001960(void)\n\n{\n  mergeAndMaskBits(0xa0);\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x44;\n  do {\n  } while ((DAT_40064006 & 0xc) != 4);\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  DAT_1fff0b74 = 2;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001960": "initialize_system_00001960",
                "merge_and_mask_bits_00001748": "mergeAndMaskBits",
                "clear_memory_00001710": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000019c0": {
            "entrypoint": "0x000019c0",
            "current_name": "clear_and_merge_memory_000019c0",
            "code": "\nvoid clearAndMergeMemory_000019c0(void)\n\n{\n  clear_and_set_memory_00001778();\n  merge_and_mask_bits_00001748(0x40);\n  clear_memory_00001710(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3b | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  clear_memory_00001734();\n  DAT_1fff0b74 = 3;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000019c0": "clear_and_merge_memory_000019c0"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001778",
                "FUN_00001748",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a18": {
            "entrypoint": "0x00001a18",
            "current_name": "initialize_memory_00001a18",
            "code": "\nvoid initializeMemory_00001a18(void)\n\n{\n  setOffsetToValue(&DAT_40064001,1);\n  clearMemory();\n  DAT_1fff0b74 = 4;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a18": "initialize_memory_00001a18",
                "set_offset_to_value_000016ec": "setOffsetToValue",
                "clear_memory_00001734": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a3c": {
            "entrypoint": "0x00001a3c",
            "current_name": "initialize_memory_00001a3c",
            "code": "\nvoid initializeMemory_00001a3c(void)\n\n{\n  set_offset_to_value_000016ec(&DAT_40064001,1);\n  clearMemory();\n  DAT_1fff0b74 = 5;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a3c": "initialize_memory_00001a3c",
                "clear_memory_00001734": "clearMemory"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001734"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001a60": {
            "entrypoint": "0x00001a60",
            "current_name": "initialize_memory_00001a60",
            "code": "\nvoid initializeMemory_00001a60(void)\n\n{\n  clearMemory(&DAT_40064001,1);\n  DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n  do {\n  } while ((DAT_40064006 & 0xc) != 8);\n  setOffsetToValue(&DAT_40064005,6);\n  do {\n  } while ((DAT_40064006 & 0x20) == 0);\n  do {\n  } while ((DAT_40064006 & 0x40) == 0);\n  DAT_1fff0b74 = 6;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001a60": "initialize_memory_00001a60",
                "clear_memory_00001710": "clearMemory",
                "set_offset_to_value_000016ec": "setOffsetToValue"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [
                "FUN_000016ec",
                "FUN_00001710"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ad4": {
            "entrypoint": "0x00001ad4",
            "current_name": "initialize_data_00001ad4",
            "code": "\nvoid initializeData_00001ad4(void)\n\n{\n  DAT_40064000 = DAT_40064000 & 0x3f;\n  do {\n  } while ((DAT_40064006 & 0xc) != 0xc);\n  DAT_1fff0b74 = 7;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ad4": "initialize_data_00001ad4"
            },
            "calling": [
                "FUN_00001b10"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001b10": {
            "entrypoint": "0x00001b10",
            "current_name": "initialize_components_00001b10",
            "code": "\nundefined4 initialize_components_00001b10(byte component_index)\n\n{\n  undefined4 return_value;\n  \n  if (component_index < 8) {\n    do {\n      switch((&DAT_00007004)[(uint)component_index + (uint)DAT_1fff0b74 * 8]) {\n      case 0:\n        initialize_system_000018bc();\n        break;\n      case 1:\n        initialize_memory_0000191c();\n        break;\n      case 2:\n        initialize_system_00001960();\n        break;\n      case 3:\n        clear_and_merge_memory_000019c0();\n        break;\n      case 4:\n        initialize_memory_00001a18();\n        break;\n      case 5:\n        initialize_memory_00001a3c();\n        break;\n      case 6:\n        initialize_memory_00001a60();\n        break;\n      case 7:\n        initialize_data_00001ad4();\n        break;\n      default:\n        return 0xffffffff;\n      }\n    } while (component_index != DAT_1fff0b74);\n    return_value = 0;\n  }\n  else {\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "renaming": {
                "FUN_00001b10": "initialize_components_00001b10",
                "param_1": "component_index",
                "uVar1": "return_value"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001a18",
                "FUN_0000191c",
                "FUN_00001ad4",
                "FUN_00001960",
                "FUN_00001a3c",
                "FUN_00001a60",
                "FUN_000019c0",
                "FUN_000018bc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001bb8": {
            "entrypoint": "0x00001bb8",
            "current_name": "clear_memory_and_merge_bits_00001bb8",
            "code": "\nvoid clearMemoryAndMergeBits_00001bb8(void)\n\n{\n  if ((DAT_40064001 & 2) != 0) {\n    clear_memory_00001710(&DAT_40064001,1);\n  }\n  if ((DAT_40064005 & 0x40) != 0) {\n    if ((DAT_40064000 & 0xc0) == 0) {\n      DAT_40064000 = DAT_40064000 & 0x3f | 0x80;\n      do {\n      } while ((DAT_40064006 & 0xc) != 8);\n    }\n    clear_memory_00001710(&DAT_40064005,6);\n    do {\n    } while ((DAT_40064006 & 0x20) != 0);\n  }\n  merge_and_mask_bits_00001748(0);\n  DAT_40064000 = DAT_40064000 & 0x3b | 4;\n  do {\n  } while ((DAT_40064006 & 0x10) == 0);\n  do {\n  } while ((DAT_40064006 & 0xc) != 0);\n  DAT_1fff0b74 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001bb8": "clear_memory_and_merge_bits_00001bb8"
            },
            "calling": [
                "FUN_00001c84"
            ],
            "called": [
                "FUN_00001710",
                "FUN_00001748"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001c84": {
            "entrypoint": "0x00001c84",
            "current_name": "initialize_system_00001c84",
            "code": "\n\n\nvoid initialize_system_00001c84(void)\n\n{\n  undefined4 interruptStatus;\n  \n  interruptStatus = check_interrupt_status_00000cd0();\n  clear_memory_and_merge_bits_00001bb8();\n  _DAT_40048044 = 0x220000;\n  DAT_4006400c = 0;\n  DAT_40064000 = DAT_40064000 & 199 | 0x38;\n  DAT_40064004 = 0x13;\n  DAT_40064005 = 0;\n  clear_memory_and_set_offset_0000182c();\n  initializeMemory();\n  initializeComponents(7);\n  enableInterruptsIfNeeded(interruptStatus);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001c84": "initialize_system_00001c84",
                "uVar1": "interruptStatus",
                "initialize_memory_000017dc": "initializeMemory",
                "initialize_components_00001b10": "initializeComponents",
                "enable_ir_qinterrupts_if_needed_00000d0c": "enableInterruptsIfNeeded"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001bb8",
                "FUN_0000182c",
                "FUN_000017dc",
                "FUN_00001b10"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001cf0": {
            "entrypoint": "0x00001cf0",
            "current_name": "check_and_enable_memory_protection_00001cf0",
            "code": "\nvoid check_and_enable_memory_protection_00001cf0(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_memory_protection_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001cf0": "check_and_enable_memory_protection_00001cf0"
            },
            "calling": [
                "FUN_00002028"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d08": {
            "entrypoint": "0x00001d08",
            "current_name": "calculate_offset_00001d08",
            "code": "\nint calculateOffset_00001d08(uint input,int multiplier)\n\n{\n  return multiplier * 4 + (input & 0xf0000000 | (input & 0xfffff) << 5) + 0x2000000;\n}\n\n",
            "renaming": {
                "FUN_00001d08": "calculate_offset_00001d08",
                "param_1": "input",
                "param_2": "multiplier"
            },
            "calling": [
                "FUN_00001d3a"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d3a": {
            "entrypoint": "0x00001d3a",
            "current_name": "set_offset_to1_00001d3a",
            "code": "\nvoid setOffsetTo1_00001d3a(undefined4 argument1,undefined argument2)\n\n{\n  undefined4 *offsetPointer;\n  \n  offsetPointer = (undefined4 *)calculate_offset_00001d08(argument1,argument2);\n  *offsetPointer = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001d3a": "set_offset_to1_00001d3a",
                "param_1": "argument1",
                "param_2": "argument2",
                "puVar1": "offsetPointer"
            },
            "calling": [
                "FUN_00001ddc"
            ],
            "called": [
                "FUN_00001d08"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d5e": {
            "entrypoint": "0x00001d5e",
            "current_name": "generate_mask_00001d5e",
            "code": "\nuint generateMask_00001d5e(ushort inputValue)\n\n{\n  return inputValue & 0x7000 | 0x40048000;\n}\n\n",
            "renaming": {
                "FUN_00001d5e": "generate_mask_00001d5e",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001d80": {
            "entrypoint": "0x00001d80",
            "current_name": "apply_mask_and_set_bits_00001d80",
            "code": "\nuint applyMaskAndSetBits_00001d80(ushort inputValue)\n\n{\n  return inputValue & 0x1c0 | 0x400ff000;\n}\n\n",
            "renaming": {
                "FUN_00001d80": "apply_mask_and_set_bits_00001d80",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001da2": {
            "entrypoint": "0x00001da2",
            "current_name": "extract_bits_00001da2",
            "code": "\nushort extractBits_00001da2(ushort input)\n\n{\n  return input >> 6 & 7;\n}\n\n",
            "renaming": {
                "FUN_00001da2": "extract_bits_00001da2",
                "param_1": "input"
            },
            "calling": [
                "FUN_00001f80",
                "FUN_00001ddc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001dc0": {
            "entrypoint": "0x00001dc0",
            "current_name": "mask_low6_bits_00001dc0",
            "code": "\nushort maskLow6Bits_00001dc0(ushort inputValue)\n\n{\n  return inputValue & 0x3f;\n}\n\n",
            "renaming": {
                "FUN_00001dc0": "mask_low6_bits_00001dc0",
                "param_1": "inputValue"
            },
            "calling": [
                "FUN_00001ff6",
                "FUN_00001eea",
                "FUN_00001f80"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ddc": {
            "entrypoint": "0x00001ddc",
            "current_name": "set_offset_based_on_bits_00001ddc",
            "code": "\nvoid setOffsetBasedOnBits_00001ddc(undefined2 bitValue)\n\n{\n  char extractedBits;\n  \n  extractedBits = extract_bits_00001da2(bitValue);\n  set_offset_to1_00001d3a(&DAT_40048038,extractedBits + '\\t');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ddc": "set_offset_based_on_bits_00001ddc",
                "param_1": "bitValue",
                "cVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001d3a"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e0c": {
            "entrypoint": "0x00001e0c",
            "current_name": "extract_bits_00001e0c",
            "code": "\nuint extractBits_00001e0c(int offset,uint value)\n\n{\n  return *(uint *)(&DAT_1fff0bd8 + (((int)value >> 3) + offset * 4) * 4) >> ((value & 7) << 2)\n         & 0xf;\n}\n\n",
            "renaming": {
                "FUN_00001e0c": "extract_bits_00001e0c",
                "param_1": "offset",
                "param_2": "value"
            },
            "calling": [
                "FUN_00002028",
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001e44": {
            "entrypoint": "0x00001e44",
            "current_name": "update_bits_00001e44",
            "code": "\nvoid updateBits_00001e44(int baseAddressOffset,uint bitPosition,int newValue)\n\n{\n  int numSegments;\n  \n  numSegments = (int)bitPosition >> 3;\n  *(uint *)(&DAT_1fff0bd8 + (numSegments + baseAddressOffset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (numSegments + baseAddressOffset * 4) * 4) & ~(0xf << ((bitPosition & 7) << 2));\n  *(uint *)(&DAT_1fff0bd8 + (numSegments + baseAddressOffset * 4) * 4) =\n       *(uint *)(&DAT_1fff0bd8 + (numSegments + baseAddressOffset * 4) * 4) | newValue << ((bitPosition & 7) << 2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001e44": "update_bits_00001e44",
                "param_1": "baseAddressOffset",
                "param_2": "bitPosition",
                "param_3": "newValue",
                "iVar1": "numSegments"
            },
            "calling": [
                "FUN_00001ec4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ec4": {
            "entrypoint": "0x00001ec4",
            "current_name": "update_bits_00001ec4",
            "code": "\nvoid updateBits_00001ec4(undefined4 input1,undefined4 input2)\n\n{\n  undefined4 extractedBits;\n  \n  extractedBits = extract_bits_00001e0c(input1,input2);\n  update_bits_00001e44(input1,input2,extractedBits);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ec4": "update_bits_00001ec4",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "extractedBits"
            },
            "calling": [
                "FUN_00001f80"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001e44"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001eea": {
            "entrypoint": "0x00001eea",
            "current_name": "update_mask_and_value_00001eea",
            "code": "\nundefined4 updateMaskAndValue_00001eea(undefined2 param1,byte param2)\n\n{\n  uint maskBits;\n  int maskAndSetBits;\n  int offset;\n  \n  updateOffsetAndValue(param1,0);\n  if ((char)param2 < '\\0') {\n    maskBits = maskLow6Bits(param1);\n    maskAndSetBits = applyMaskAndSetBits(param1);\n    *(uint *)(maskAndSetBits + 0x14) = *(uint *)(maskAndSetBits + 0x14) | 1 << (maskBits & 0xff);\n  }\n  else {\n    maskBits = maskLow6Bits(param1);\n    maskAndSetBits = applyMaskAndSetBits(param1);\n    *(uint *)(maskAndSetBits + 0x14) = *(uint *)(maskAndSetBits + 0x14) & ~(1 << (maskBits & 0xff));\n  }\n  maskAndSetBits = generateMask(param1);\n  offset = maskLow6Bits(param1);\n  *(uint *)(maskAndSetBits + offset * 4) = param2 & 0x23 | 0x100;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00001eea": "update_mask_and_value_00001eea",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "maskBits",
                "iVar2": "maskAndSetBits",
                "iVar3": "offset",
                "update_offset_and_value_00001f80": "updateOffsetAndValue",
                "mask_low6_bits_00001dc0": "maskLow6Bits",
                "apply_mask_and_set_bits_00001d80": "applyMaskAndSetBits",
                "generate_mask_00001d5e": "generateMask"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001f80",
                "FUN_00001d5e",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001f80": {
            "entrypoint": "0x00001f80",
            "current_name": "update_offset_and_value_00001f80",
            "code": "\nvoid updateOffsetAndValue_00001f80(undefined2 param_offset,undefined4 param_value)\n\n{\n  int maskOffset;\n  int bitMask;\n  undefined4 extractedBits;\n  undefined4 maskBits;\n  uint savedValue;\n  \n  set_offset_based_on_bits_00001ddc(param_offset);\n  maskOffset = generate_mask_00001d5e(param_offset);\n  bitMask = mask_low6_bits_00001dc0(param_offset);\n  savedValue = *(uint *)(maskOffset + bitMask * 4);\n  maskOffset = generate_mask_00001d5e(param_offset);\n  bitMask = mask_low6_bits_00001dc0(param_offset);\n  *(undefined4 *)(maskOffset + bitMask * 4) = param_value;\n  if ((savedValue & 0xf0000) != 0) {\n    extractedBits = extract_bits_00001da2(param_offset);\n    maskBits = mask_low6_bits_00001dc0(param_offset);\n    update_bits_00001ec4(extractedBits,maskBits);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001f80": "update_offset_and_value_00001f80",
                "param_1": "param_offset",
                "param_2": "param_value",
                "iVar1": "maskOffset",
                "iVar2": "bitMask",
                "uVar3": "extractedBits",
                "uVar4": "maskBits",
                "uVar5": "savedValue"
            },
            "calling": [
                "FUN_00001eea",
                "FUN_00001448"
            ],
            "called": [
                "FUN_00001da2",
                "FUN_00001ec4",
                "FUN_00001dc0",
                "FUN_00001d5e",
                "FUN_00001ddc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00001ff6": {
            "entrypoint": "0x00001ff6",
            "current_name": "set_bits_using_mask_00001ff6",
            "code": "\nvoid setBitsUsingMask_00001ff6(undefined2 input)\n\n{\n  uint maskedBits;\n  int maskedResult;\n  \n  maskedBits = mask_low6_bits_00001dc0(input);\n  maskedResult = apply_mask_and_set_bits_00001d80(input);\n  *(int *)(maskedResult + 4) = 1 << (maskedBits & 0xff);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00001ff6": "set_bits_using_mask_00001ff6",
                "param_1": "input",
                "uVar1": "maskedBits",
                "iVar2": "maskedResult"
            },
            "calling": [
                "FUN_00000e64"
            ],
            "called": [
                "FUN_00001d80",
                "FUN_00001dc0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002028": {
            "entrypoint": "0x00002028",
            "current_name": "process_bits_00002028",
            "code": "\nvoid processBits_00002028(int input,undefined4 data)\n\n{\n  int result;\n  uint bits;\n  uint index;\n  \n  bits = *(uint *)(input + 0xa0);\n  for (index = 0; (int)index < 0x20; index = index + 1) {\n    if (((bits & 1 << (index & 0xff)) != 0) &&\n       ((*(uint *)(input + index * 4) & 0xf0000) != 0)) {\n      *(int *)(input + 0xa0) = 1 << (index & 0xff);\n      result = extract_bits_00001e0c(data,index);\n      (**(code **)(&DAT_1fff0b78 + result * 0xc))(*(undefined4 *)(&DAT_1fff0b7c + result * 0xc));\n    }\n  }\n  check_and_enable_memory_protection_00001cf0();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002028": "process_bits_00002028",
                "param_1": "input",
                "param_2": "data",
                "iVar1": "result",
                "uVar2": "bits",
                "local_c": "index"
            },
            "calling": [
                "FUN_000020b8",
                "FUN_00002108",
                "FUN_000020cc",
                "FUN_000020e0",
                "FUN_000020f4"
            ],
            "called": [
                "FUN_00001e0c",
                "FUN_00001cf0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020b8": {
            "entrypoint": "0x000020b8",
            "current_name": "initialize_device_000020b8",
            "code": "\nvoid initializeDevice_000020b8(void)\n\n{\n  process_bits_00002028(0x40049000,0);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020b8": "initialize_device_000020b8"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020cc": {
            "entrypoint": "0x000020cc",
            "current_name": "process_memory_000020cc",
            "code": "\nvoid processMemory_000020cc(void)\n\n{\n  processBits(0x4004a000,1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020cc": "process_memory_000020cc",
                "process_bits_00002028": "processBits"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020e0": {
            "entrypoint": "0x000020e0",
            "current_name": "initialize_process_000020e0",
            "code": "\nvoid initializeProcess_000020e0(void)\n\n{\n  processBits(0x4004b000,2);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020e0": "initialize_process_000020e0",
                "process_bits_00002028": "processBits"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000020f4": {
            "entrypoint": "0x000020f4",
            "current_name": "initialize_bits_000020f4",
            "code": "\nvoid initializeBits_000020f4(void)\n\n{\n  processBits(0x4004c000,3);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000020f4": "initialize_bits_000020f4",
                "process_bits_00002028": "processBits"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002108": {
            "entrypoint": "0x00002108",
            "current_name": "initialize_process_00002108",
            "code": "\nvoid initializeProcess_00002108(void)\n\n{\n  processBits(0x4004d000,4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002108": "initialize_process_00002108",
                "process_bits_00002028": "processBits"
            },
            "calling": [],
            "called": [
                "FUN_00002028"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000211c": {
            "entrypoint": "0x0000211c",
            "current_name": "print_process_info_0000211c",
            "code": "\nvoid printProcessInfo_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 formatString;\n  int relocationCount;\n  int offset;\n  dword relocationOffset;\n  uint index;\n  undefined4 *relocationEntry;\n  undefined4 flagValue;\n  undefined4 mainStackPointer;\n  int relocationSum;\n  short iteration;\n  int totalStackUsage;\n  int currentStackUsage;\n  \n  formatString = 0x515f;\n  currentStackUsage = 0;\n  totalStackUsage = 0;\n  process_data_with_offset_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  relocationSum = count_elf_relocations_000008b8();\n  mainStackPointer = get_flag_value_0000091c();\n  flagValue = get_main_stack_pointer_00000900();\n  process_data_with_offset_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               relocationSum,mainStackPointer,flagValue);\n  currentStackUsage = currentStackUsage + 0x200;\n  if (0 < relocationSum) {\n    totalStackUsage = relocationSum + totalStackUsage;\n  }\n  for (iteration = 1; iteration < 0x21; iteration = iteration + 1) {\n    relocationEntry = *(undefined4 **)(&DAT_1fff0358 + iteration * 4);\n    if (relocationEntry != (undefined4 *)0x0) {\n      index = (uint)*(byte *)(relocationEntry + 1);\n      relocationOffset = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[index];\n      offset = (int)&formatString + (uint)(8 < index);\n      relocationCount = relocationEntry[0xb];\n      currentStackUsage = relocationCount + currentStackUsage;\n      iVar1 = find_index_difference_000010a0(relocationEntry[9]);\n      relocationCount = relocationCount - iVar1;\n      totalStackUsage = relocationCount + totalStackUsage;\n      process_data_with_offset_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)relocationEntry + 6),relocationEntry[10],relocationOffset,offset,\n                   *(undefined *)((int)relocationEntry + 5),relocationEntry[0xb],relocationCount,relocationEntry[9],*relocationEntry);\n    }\n  }\n  process_data_with_offset_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,currentStackUsage,totalStackUsage);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000211c": "print_process_info_0000211c",
                "local_40": "formatString",
                "local_3c": "relocationCount",
                "local_38": "offset",
                "local_34": "relocationOffset",
                "local_30": "index",
                "local_2c": "relocationEntry",
                "local_28": "flagValue",
                "local_24": "mainStackPointer",
                "local_20": "relocationSum",
                "local_1a": "iteration",
                "local_18": "totalStackUsage",
                "local_14": "currentStackUsage"
            },
            "calling": [
                "FUN_00002eb4",
                "FUN_00000f04"
            ],
            "called": [
                "FUN_000010a0",
                "FUN_00004c84",
                "FUN_000008b8",
                "FUN_00000900",
                "FUN_0000091c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_0000211c(void)\n\n{\n  int iVar1;\n  undefined2 local_40;\n  int local_3c;\n  int local_38;\n  dword local_34;\n  uint local_30;\n  undefined4 *local_2c;\n  undefined4 local_28;\n  undefined4 local_24;\n  int local_20;\n  short local_1a;\n  int local_18;\n  int local_14;\n  \n  local_40 = 0x515f;\n  local_14 = 0;\n  local_18 = 0;\n  FUNC_00004c84(\"\\tpid | %-21s| %-9sQ | pri | stack  ( used) | base addr  | current     \\n\",\n               &DAT_000070b8,\"state\");\n  local_20 = count_elf_relocations_000008b8();\n  local_24 = get_flag_value_0000091c();\n  local_28 = get_main_stack_pointer_00000900();\n  FUNC_00004c84(\"\\t  - | isr_stack            | -        - |   - | %6i (%5i) | %10p | %10p\\n\",0x200,\n               local_20,local_24,local_28);\n  local_14 = local_14 + 0x200;\n  if (0 < local_20) {\n    local_18 = local_20 + local_18;\n  }\n  for (local_1a = 1; local_1a < 0x21; local_1a = local_1a + 1) {\n    local_2c = *(undefined4 **)(&DAT_1fff0358 + local_1a * 4);\n    if (local_2c != (undefined4 *)0x0) {\n      local_30 = (uint)*(byte *)(local_2c + 1);\n      local_34 = (&Elf32_Rel_ARRAY_1fff0200[4].r_offset)[local_30];\n      local_38 = (int)&local_40 + (uint)(8 < local_30);\n      local_3c = local_2c[0xb];\n      local_14 = local_3c + local_14;\n      iVar1 = find_index_difference_000010a0(local_2c[9]);\n      local_3c = local_3c - iVar1;\n      local_18 = local_3c + local_18;\n      FUNC_00004c84(\"\\t%3hi | %-20s | %-8s %.1s | %3i | %6i (%5i) | %10p | %10p \\n\",\n                   (int)*(short *)((int)local_2c + 6),local_2c[10],local_34,local_38,\n                   *(undefined *)((int)local_2c + 5),local_2c[0xb],local_3c,local_2c[9],*local_2c);\n    }\n  }\n  FUNC_00004c84(\"\\t%5s %-21s|%13s%6s %6i (%5i)\\n\",&DAT_00007190,&DAT_00007194,&DAT_00007190,\n               &DAT_00007190,local_14,local_18);\n  return;\n}\n\n"
        },
        "FUN_00002270": {
            "entrypoint": "0x00002270",
            "current_name": "check_equality_00002270",
            "code": "\nundefined checkEquality_00002270(int input)\n\n{\n  undefined result;\n  int value1;\n  bool isMatch;\n  \n  value1 = *(int *)(input + 0xc);\n  isMatch = *(int *)(input + 8) == value1;\n  if (isMatch) {\n    value1 = 1;\n  }\n  result = (undefined)value1;\n  if (!isMatch) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002270": "check_equality_00002270",
                "param_1": "input",
                "iVar2": "value1",
                "bVar3": "isMatch",
                "uVar1": "result"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002294": {
            "entrypoint": "0x00002294",
            "current_name": "check_subtraction_result_00002294",
            "code": "\nundefined checkSubtractionResult_00002294(int inputParameter)\n\n{\n  undefined result;\n  int difference;\n  bool isSameDifference;\n  \n  difference = *(int *)(inputParameter + 4);\n  isSameDifference = *(int *)(inputParameter + 0xc) - *(int *)(inputParameter + 8) == difference;\n  if (isSameDifference) {\n    difference = 1;\n  }\n  result = (undefined)difference;\n  if (!isSameDifference) {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00002294": "check_subtraction_result_00002294",
                "param_1": "inputParameter",
                "uVar1": "result",
                "iVar2": "difference",
                "bVar3": "isSameDifference"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022be": {
            "entrypoint": "0x000022be",
            "current_name": "increment_array_and_store_value_000022be",
            "code": "\nvoid incrementArrayAndStoreValue_000022be(int *array,undefined value)\n\n{\n  uint index;\n  \n  index = array[3];\n  array[3] = index + 1;\n  *(undefined *)((index & array[1] - 1U) + *array) = value;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000022be": "increment_array_and_store_value_000022be",
                "param_1": "array",
                "param_2": "value",
                "uVar1": "index"
            },
            "calling": [
                "FUN_00002364"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000022f0": {
            "entrypoint": "0x000022f0",
            "current_name": "retrieve_value_with_offset_000022f0",
            "code": "\nundefined retrieveValueWithOffset_000022f0(int *array)\n\n{\n  uint offset;\n  \n  offset = count;\n  count = offset + 1;\n  return *(undefined *)((offset & mask - 1U) + *array);\n}\n\n",
            "renaming": {
                "FUN_000022f0": "retrieve_value_with_offset_000022f0",
                "param_1": "array",
                "uVar1": "offset",
                "param_1[1]": "mask",
                "param_1[2]": "count"
            },
            "calling": [
                "FUN_0000231c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000231c": {
            "entrypoint": "0x0000231c",
            "current_name": "copy_and_count_0000231c",
            "code": "\nint copyAndCount_0000231c(undefined4 source,undefined *destination,int length)\n\n{\n  undefined value;\n  int equalityCheckResult;\n  undefined *destPtr;\n  int remainingLength;\n  \n  destPtr = destination;\n  remainingLength = length;\n  while ((remainingLength != 0 && (equalityCheckResult = check_equality_00002270(source), equalityCheckResult == 0))) {\n    value = retrieve_value_with_offset_000022f0(source);\n    *destPtr = value;\n    remainingLength = remainingLength + -1;\n    destPtr = destPtr + 1;\n  }\n  return length - remainingLength;\n}\n\n",
            "renaming": {
                "FUN_0000231c": "copy_and_count_0000231c",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "length",
                "uVar1": "value",
                "iVar2": "equalityCheckResult",
                "local_20": "destPtr",
                "local_14": "remainingLength"
            },
            "calling": [
                "FUN_000012e2"
            ],
            "called": [
                "FUN_00002270",
                "FUN_000022f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002364": {
            "entrypoint": "0x00002364",
            "current_name": "process_subtraction_00002364",
            "code": "\nundefined4 processSubtraction_00002364(undefined4 input_1,undefined input_2)\n\n{\n  int result;\n  undefined4 returnValue;\n  \n  result = check_subtraction_result_00002294(input_1);\n  if (result == 0) {\n    increment_array_and_store_value_000022be(input_1,input_2);\n    returnValue = 0;\n  }\n  else {\n    returnValue = 0xffffffff;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002364": "process_subtraction_00002364",
                "param_1": "input_1",
                "param_2": "input_2",
                "iVar1": "result",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_000022be",
                "FUN_00002294"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002396": {
            "entrypoint": "0x00002396",
            "current_name": "initialize_memory_control_00002396",
            "code": "\nvoid initialize_memory_control_00002396(void)\n\n{\n  initialize_memory_control_00002396_000025f4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002396": "initialize_memory_control_00002396"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_000025f4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023a4": {
            "entrypoint": "0x000023a4",
            "current_name": "initialize_system_000023a4",
            "code": "\nundefined4 initialize_system_000023a4(void)\n\n{\n  undefined4 result;\n  undefined data_buffer [128];\n  \n  handle_interrupt(0);\n  print_welcome_message(\"Welcome to RIOT!\");\n  result = relocate_data(0,data_buffer,0x80);\n  trigger_interrupt(0x3f);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000023a4": "initialize_system_000023a4",
                "auStack_88": "data_buffer",
                "uVar1": "result",
                "execute_interrupt_handler_000023d0": "handle_interrupt",
                "process_data_and_print_00004db8": "print_welcome_message",
                "process_relocation_loop_00002e6c": "relocate_data",
                "software_interrupt": "trigger_interrupt"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002e6c",
                "FUN_000023d0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023c8": {
            "entrypoint": "0x000023c8",
            "current_name": "trigger_software_interrupt_000023c8",
            "code": "\nvoid triggerSoftwareInterrupt_000023c8(void)\n\n{\n  software_interrupt(0x3f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000023c8": "trigger_software_interrupt_000023c8"
            },
            "calling": [
                "FUN_000023d0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000023d0": {
            "entrypoint": "0x000023d0",
            "current_name": "execute_interrupt_handler_000023d0",
            "code": "\nundefined4 execute_interrupt_handler_000023d0(undefined4 input_parameter)\n\n{\n  undefined4 output_value;\n  \n  if (DAT_1fff0d98 == 0) {\n    output_value = trigger_software_interrupt_000023c8(1,input_parameter,0);\n  }\n  else {\n    output_value = 0;\n  }\n  return output_value;\n}\n\n",
            "renaming": {
                "FUN_000023d0": "execute_interrupt_handler_000023d0",
                "param_1": "input_parameter",
                "uVar1": "output_value"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000023c8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002400": {
            "entrypoint": "0x00002400",
            "current_name": "FUNC_00002400",
            "code": "\nvoid FUNC_00002400(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002400": "FUNC_00002400"
            },
            "calling": [
                "FUN_00000f04"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_0000240c": {
            "entrypoint": "0x0000240c",
            "current_name": "extract_pointer_0000240c",
            "code": "\nundefined4 * extractPointer_0000240c(undefined4 *inputPointer)\n\n{\n  undefined4 *nextPointer;\n  \n  nextPointer = (undefined4 *)*inputPointer;\n  if (nextPointer != (undefined4 *)0x0) {\n    *inputPointer = *nextPointer;\n  }\n  return nextPointer;\n}\n\n",
            "renaming": {
                "FUN_0000240c": "extract_pointer_0000240c",
                "param_1": "inputPointer",
                "puVar1": "nextPointer"
            },
            "calling": [
                "FUN_000024bc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002434": {
            "entrypoint": "0x00002434",
            "current_name": "update_interrupt_status_00002434",
            "code": "\nundefined4 updateInterruptStatus_00002434(int *statusPointer,int flag)\n\n{\n  int tempVariable;\n  undefined4 returnValue;\n  \n  returnValue = check_interrupt_status_00000cd0();\n  tempVariable = DAT_1fff03dc;\n  if (*statusPointer == 0) {\n    *statusPointer = -1;\n    enable_ir_qinterrupts_if_needed_00000d0c(returnValue);\n    returnValue = 1;\n  }\n  else if (flag == 0) {\n    enable_ir_qinterrupts_if_needed_00000d0c(returnValue);\n    returnValue = 0;\n  }\n  else {\n    update_value_00000698(DAT_1fff03dc,2);\n    if (*statusPointer == -1) {\n      *statusPointer = tempVariable + 8;\n      *(undefined4 *)*statusPointer = 0;\n    }\n    else {\n      find_closest_pointer_00001034(statusPointer,tempVariable);\n    }\n    enable_ir_qinterrupts_if_needed_00000d0c(returnValue);\n    enable_memory_protection_0000093c();\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00002434": "update_interrupt_status_00002434",
                "param_1": "statusPointer",
                "param_2": "flag",
                "iVar1": "tempVariable",
                "uVar2": "returnValue"
            },
            "calling": [
                "FUN_0000129c"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000cd0",
                "FUN_00001034",
                "FUN_0000093c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000024bc": {
            "entrypoint": "0x000024bc",
            "current_name": "handle_interrupt_000024bc",
            "code": "\nvoid handleInterrupt_000024bc(int *interruptFlag)\n\n{\n  undefined interruptValue;\n  undefined4 interruptStatus;\n  int pointer;\n  \n  interruptStatus = getInterruptStatus();\n  if (*interruptFlag == 0) {\n    enableInterruptsIfNeeded(interruptStatus);\n  }\n  else if (*interruptFlag == -1) {\n    *interruptFlag = 0;\n    enableInterruptsIfNeeded(interruptStatus);\n  }\n  else {\n    pointer = extractPointer(interruptFlag);\n    updateValue(pointer + -8,10);\n    if (*interruptFlag == 0) {\n      *interruptFlag = -1;\n    }\n    interruptValue = *(undefined *)(pointer + -3);\n    enableInterruptsIfNeeded(interruptStatus);\n    checkMemoryProtection(interruptValue);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000024bc": "handle_interrupt_000024bc",
                "param_1": "interruptFlag",
                "uVar1": "interruptValue",
                "uVar2": "interruptStatus",
                "iVar3": "pointer",
                "check_interrupt_status_00000cd0": "getInterruptStatus",
                "enable_ir_qinterrupts_if_needed_00000d0c": "enableInterruptsIfNeeded",
                "extract_pointer_0000240c": "extractPointer",
                "update_value_00000698": "updateValue",
                "check_memory_protection_00000738": "checkMemoryProtection"
            },
            "calling": [
                "FUN_000012b4"
            ],
            "called": [
                "FUN_00000d0c",
                "FUN_00000738",
                "FUN_00000cd0",
                "FUN_0000240c",
                "FUN_00000698"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002538": {
            "entrypoint": "0x00002538",
            "current_name": "set_byte_value_00002538",
            "code": "\nvoid setByteValue_00002538(byte inputByte,uint value)\n\n{\n  if ((char)inputByte < '\\0') {\n    (&DAT_e000ed14)[inputByte & 0xf] = (char)((value & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)inputByte + -0x1fff1c00) = (char)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002538": "set_byte_value_00002538",
                "param_1": "inputByte",
                "param_2": "value"
            },
            "calling": [
                "FUN_0000258c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000258c": {
            "entrypoint": "0x0000258c",
            "current_name": "initialize_memory_0000258c",
            "code": "\n\n\nvoid initializeMemory_0000258c(void)\n\n{\n  uint byteIndex;\n  \n  _DAT_e000ed08 = 0;\n  set_byte_value_00002538(0xfffffffe,1);\n  set_byte_value_00002538(0xfffffffb,1);\n  for (byteIndex = 0; byteIndex < 0x66; byteIndex = byteIndex + 1) {\n    set_byte_value_00002538((int)(char)byteIndex,1);\n  }\n  _DAT_e000ed10 = _DAT_e000ed10 | 0x10;\n  _DAT_e000ed14 = _DAT_e000ed14 | 0x200;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000258c": "initialize_memory_0000258c",
                "local_c": "byteIndex"
            },
            "calling": [
                "FUN_00001274"
            ],
            "called": [
                "FUN_00002538"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000025f4": {
            "entrypoint": "0x000025f4",
            "current_name": "initialize_memory_control_000025f4",
            "code": "\nvoid initializeMemoryControl_000025f4(void)\n\n{\n  enableMemoryControl();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000025f4": "initialize_memory_control_000025f4",
                "enable_memory_control_000027b0": "enableMemoryControl"
            },
            "calling": [
                "FUN_00002396"
            ],
            "called": [
                "FUN_000027b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002600": {
            "entrypoint": "0x00002600",
            "current_name": "initialize_and_calculate_date_time_00002600",
            "code": "\nundefined4 initializeAndCalculateDateTime_00002600(undefined4 startDate)\n\n{\n  undefined4 dateTime;\n  \n  dateTime = calculateDateTime(startDate);\n  initializeData(dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002600": "initialize_and_calculate_date_time_00002600",
                "param_1": "startDate",
                "uVar1": "dateTime",
                "calculate_date_time_000047e4": "calculateDateTime",
                "initialize_data_0000285c": "initializeData"
            },
            "calling": [
                "FUN_00003478"
            ],
            "called": [
                "FUN_0000285c",
                "FUN_000047e4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002624": {
            "entrypoint": "0x00002624",
            "current_name": "extract_date_time_components_00002624",
            "code": "\nundefined4 extractDateTimeComponents_00002624(undefined4 input)\n\n{\n  undefined4 baseAddress;\n  undefined4 stackVariable;\n  \n  baseAddress = get_base_address_0000281c();\n  stackVariable = 0;\n  get_date_time_components_0000443c(&baseAddress,input);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002624": "extract_date_time_components_00002624",
                "param_1": "input",
                "local_10": "baseAddress",
                "uStack_c": "stackVariable"
            },
            "calling": [
                "FUN_00003444"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_0000281c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002654": {
            "entrypoint": "0x00002654",
            "current_name": "initialize_data_00002654",
            "code": "\nundefined4 initializeData_00002654(undefined4 dateTime,undefined4 dataPtr,undefined4 value)\n\n{\n  undefined4 calculatedDateTime;\n  \n  calculatedDateTime = calculate_date_time_000047e4(dateTime);\n  DAT_1fff0d9c = dataPtr;\n  initialize_data_00002894(calculatedDateTime,0x26f1,value);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002654": "initialize_data_00002654",
                "param_1": "dateTime",
                "param_2": "dataPtr",
                "param_3": "value",
                "uVar1": "calculatedDateTime"
            },
            "calling": [
                "FUN_000033f4"
            ],
            "called": [
                "FUN_000047e4",
                "FUN_00002894"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002690": {
            "entrypoint": "0x00002690",
            "current_name": "initialize_date_time_00002690",
            "code": "\nundefined4 initializeDateTime_00002690(undefined4 inputValue)\n\n{\n  undefined4 incrementedValue;\n  undefined4 initializedValue;\n  \n  incrementedValue = get_incremented_value_000028f0();\n  initializedValue = 0;\n  get_date_time_components_0000443c(&incrementedValue,inputValue);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002690": "initialize_date_time_00002690",
                "param_1": "inputValue",
                "local_10": "incrementedValue",
                "uStack_c": "initializedValue"
            },
            "calling": [
                "FUN_000033c0"
            ],
            "called": [
                "FUN_0000443c",
                "FUN_000028f0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026c0": {
            "entrypoint": "0x000026c0",
            "current_name": "clear_and_reset_flags_000026c0",
            "code": "\nvoid clear_and_reset_flags_000026c0(void)\n\n{\n  clear_flags_00002910();\n  DAT_1fff0d9c = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026c0": "clear_and_reset_flags_000026c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002910"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026d8": {
            "entrypoint": "0x000026d8",
            "current_name": "initialize_register_flag_000026d8",
            "code": "\nvoid initialize_register_flag_000026d8(void)\n\n{\n  set_register_flag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026d8": "initialize_register_flag_000026d8",
                "set_register_flag_0000294c": "set_register_flag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026e4": {
            "entrypoint": "0x000026e4",
            "current_name": "clear_interrupt_flag_000026e4",
            "code": "\nvoid clearInterruptFlag_000026e4(void)\n\n{\n  clearInterruptFlag_000026e4();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026e4": "clear_interrupt_flag_000026e4",
                "clear_interrupt_flag_00002970": "clearInterruptFlag"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00002970"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000026f0": {
            "entrypoint": "0x000026f0",
            "current_name": "execute_callback_000026f0",
            "code": "\nvoid executeCallback_000026f0(undefined4 callbackParameter)\n\n{\n  if (DAT_1fff0d9c != (code *)0x0) {\n    (*DAT_1fff0d9c)(callbackParameter);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000026f0": "execute_callback_000026f0",
                "param_1": "callbackParameter"
            },
            "calling": [],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002714": {
            "entrypoint": "0x00002714",
            "current_name": "set_bit_value_00002714",
            "code": "\nvoid setBitValue_00002714(byte inputByte)\n\n{\n  *(int *)(((uint)(int)(char)inputByte >> 5) * 4 + -0x1fff1f00) = 1 << (inputByte & 0x1f);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002714": "set_bit_value_00002714",
                "param_1": "inputByte"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002744": {
            "entrypoint": "0x00002744",
            "current_name": "update_byte_value_00002744",
            "code": "\nvoid updateByteValue_00002744(byte byteIndex,uint newValue)\n\n{\n  if ((char)byteIndex < '\\0') {\n    (&DAT_e000ed14)[byteIndex & 0xf] = (char)((newValue & 0xff) << 4);\n  }\n  else {\n    *(char *)((char)byteIndex + -0x1fff1c00) = (char)((newValue & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002744": "update_byte_value_00002744",
                "param_1": "byteIndex",
                "param_2": "newValue"
            },
            "calling": [
                "FUN_00002894"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002798": {
            "entrypoint": "0x00002798",
            "current_name": "enable_memory_protection_if_needed_00002798",
            "code": "\nvoid enable_memory_protection_if_needed_00002798(void)\n\n{\n  if (DAT_1fff0354 != 0) {\n    enable_memory_protection_0000093c();\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002798": "enable_memory_protection_if_needed_00002798"
            },
            "calling": [
                "FUN_00002994"
            ],
            "called": [
                "FUN_0000093c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000027b0": {
            "entrypoint": "0x000027b0",
            "current_name": "enable_memory_control_000027b0",
            "code": "\n\n\nvoid enableMemoryControl_000027b0(void)\n\n{\n  _DAT_4004803c = _DAT_4004803c | 0x20000000;\n  if ((_DAT_4003d014 & 1) != 0) {\n    _DAT_4003d000 = 0;\n  }\n  _DAT_4003d010 = 0x104;\n  _DAT_4003d008 = 0xffffff42;\n  _DAT_4003d01c = 0;\n  setFlag();\n  return;\n}\n\n",
            "renaming": {
                "FUN_000027b0": "enable_memory_control_000027b0",
                "set_register_flag_0000294c": "setFlag"
            },
            "calling": [
                "FUN_000025f4"
            ],
            "called": [
                "FUN_0000294c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000281c": {
            "entrypoint": "0x0000281c",
            "current_name": "get_base_address_0000281c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00002840) */\n/* WARNING: Removing unreachable block (ram,0x0000284c) */\n\n\nundefined4 getBaseAddress_0000281c(void)\n\n{\n  return _DAT_4003d000;\n}\n\n",
            "renaming": {
                "FUN_0000281c": "get_base_address_0000281c"
            },
            "calling": [
                "FUN_00002624"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000285c": {
            "entrypoint": "0x0000285c",
            "current_name": "initialize_data_0000285c",
            "code": "\n\n\nvoid initializeData_0000285c(undefined4 dataValue)\n\n{\n  _DAT_4003d000 = dataValue;\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000285c": "initialize_data_0000285c",
                "param_1": "dataValue"
            },
            "calling": [
                "FUN_00002600"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002894": {
            "entrypoint": "0x00002894",
            "current_name": "initialize_data_00002894",
            "code": "\n\n\nvoid initializeData_00002894(int inputValue,undefined4 dataValue1,undefined4 dataValue2)\n\n{\n  _DAT_4003d008 = inputValue + -1;\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb | 4;\n  DAT_1fff0da0 = dataValue1;\n  DAT_1fff0da4 = dataValue2;\n  update_byte_value_00002744(0x2e,10);\n  set_bit_value_00002714(0x2e);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002894": "initialize_data_00002894",
                "param_1": "inputValue",
                "param_2": "dataValue1",
                "param_3": "dataValue2"
            },
            "calling": [
                "FUN_00002654"
            ],
            "called": [
                "FUN_00002714",
                "FUN_00002744"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000028f0": {
            "entrypoint": "0x000028f0",
            "current_name": "get_incremented_value_000028f0",
            "code": "\n\n\nint getIncrementedValue_000028f0(void)\n\n{\n  return _DAT_4003d008 + 1;\n}\n\n",
            "renaming": {
                "FUN_000028f0": "get_incremented_value_000028f0"
            },
            "calling": [
                "FUN_00002690"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002910": {
            "entrypoint": "0x00002910",
            "current_name": "clear_flags_00002910",
            "code": "\n\n\nvoid clearFlags_00002910(void)\n\n{\n  _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n  _DAT_4003d008 = 0;\n  DAT_1fff0da0 = 0;\n  DAT_1fff0da4 = 0;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002910": "clear_flags_00002910"
            },
            "calling": [
                "FUN_000026c0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000294c": {
            "entrypoint": "0x0000294c",
            "current_name": "set_register_flag_0000294c",
            "code": "\n\n\nvoid setRegisterFlag_0000294c(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 | 0x10;\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000294c": "set_register_flag_0000294c"
            },
            "calling": [
                "FUN_000026d8",
                "FUN_000027b0"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002970": {
            "entrypoint": "0x00002970",
            "current_name": "clear_interrupt_flag_00002970",
            "code": "\n\n\nvoid clearInterruptFlag_00002970(void)\n\n{\n  _DAT_4003d014 = _DAT_4003d014 & 0xffffffef;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002970": "clear_interrupt_flag_00002970"
            },
            "calling": [
                "FUN_000026e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002994": {
            "entrypoint": "0x00002994",
            "current_name": "execute_memory_protection_checks_00002994",
            "code": "\n\n\nvoid executeMemoryProtectionChecks_00002994(void)\n\n{\n  if (((_DAT_4003d014 & 4) != 0) && (DAT_1fff0da0 != (code *)0x0)) {\n    _DAT_4003d01c = _DAT_4003d01c & 0xfffffffb;\n    (*DAT_1fff0da0)(DAT_1fff0da4);\n  }\n  if (((_DAT_4003d014 & 2) != 0) && (DAT_1fff0da8 != (code *)0x0)) {\n    (*DAT_1fff0da8)(DAT_1fff0dac);\n  }\n  enable_memory_protection_if_needed_00002798();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002994": "execute_memory_protection_checks_00002994"
            },
            "calling": [],
            "called": [
                "FUN_00002798"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a00": {
            "entrypoint": "0x00002a00",
            "current_name": "process_input_00002a00",
            "code": "\nvoid processInput_00002a00(undefined4 input)\n\n{\n  processInput_00002a00Implementation(input);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a00": "process_input_00002a00",
                "param_1": "input",
                "process_input_00004cb4": "processInputImplementation"
            },
            "calling": [
                "FUN_00002d94",
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004cb4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a18": {
            "entrypoint": "0x00002a18",
            "current_name": "find_value_in_array_00002a18",
            "code": "\nint findValueInArray_00002a18(int *array,undefined4 value)\n\n{\n  int comparisonResult;\n  int *currentArray;\n  undefined **rebootStringPointer;\n  uint index;\n  int *currentElement;\n  \n  currentArray = array;\n  rebootStringPointer = &PTR_s_reboot_00007300;\n  index = 0;\n  do {\n    if (1 < index) {\n      return 0;\n    }\n    currentElement = (&currentArray)[index];\n    if (currentElement != (int *)0x0) {\n      for (; *currentElement != 0; currentElement = currentElement + 3) {\n        comparisonResult = compare_byte_arrays_00004e52(*currentElement,value);\n        if (comparisonResult == 0) {\n          return currentElement[2];\n        }\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002a18": "find_value_in_array_00002a18",
                "param_1": "array",
                "param_2": "value",
                "iVar1": "comparisonResult",
                "local_18": "currentArray",
                "local_14": "rebootStringPointer",
                "local_10": "index",
                "local_c": "currentElement"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002a88": {
            "entrypoint": "0x00002a88",
            "current_name": "print_command_descriptions_00002a88",
            "code": "\nvoid printCommandDescriptions_00002a88(int *commandList)\n\n{\n  int *currentCommand;\n  undefined **commandName;\n  uint index;\n  int *currentParameters;\n  \n  process_data_with_offset_00004c84(\"%-20s %s\\n\",\"Command\",\"Description\");\n  process_data_and_print_00004db8(\"---------------------------------------\");\n  currentCommand = commandList;\n  commandName = &PTR_s_reboot_00007300;\n  for (index = 0; index < 2; index = index + 1) {\n    currentParameters = (&currentCommand)[index];\n    if (currentParameters != (int *)0x0) {\n      for (; *currentParameters != 0; currentParameters = currentParameters + 3) {\n        process_data_with_offset_00004c84(\"%-20s %s\\n\",*currentParameters,currentParameters[1]);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002a88": "print_command_descriptions_00002a88",
                "param_1": "commandList",
                "local_18": "currentCommand",
                "local_14": "commandName",
                "local_10": "index",
                "local_c": "currentParameters"
            },
            "calling": [
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002b10": {
            "entrypoint": "0x00002b10",
            "current_name": "process_input_00002b10",
            "code": "\nvoid processInput_00002b10(undefined4 param,byte *input)\n\n{\n  int iVar1;\n  byte *pbVar2;\n  byte *inputArray [3];\n  code *functionPtr;\n  char **commandArray;\n  uint commandCount;\n  byte quoteChar;\n  char *escapeChar;\n  char *currentCommand;\n  char **commandPtrArray;\n  uint index;\n  int escapeCount;\n  uint quoteCount;\n  byte *currentChar;\n  \n  quoteCount = 0;\n  escapeCount = 0;\n  currentChar = input;\n  while( true ) {\n    inputArray[0] = input;\n    inputArray[1] = (byte *)param;\n    if (0x20 < *currentChar) {\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        quoteChar = *currentChar;\n        do {\n          pbVar2 = currentChar + 1;\n          if (*pbVar2 == 0) {\n            currentChar = pbVar2;\n            process_data_and_print_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n          if (*pbVar2 == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentChar = currentChar + 2;\n            pbVar2 = currentChar;\n            if (*currentChar == 0) {\n              process_data_and_print_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentChar = pbVar2;\n        } while (quoteChar != *currentChar);\n        if (0x20 < currentChar[1]) {\n          process_data_and_print_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n          return;\n        }\n      }\n      else {\n        do {\n          if (*currentChar == 0x5c) {\n            escapeCount = escapeCount + 1;\n            currentChar = currentChar + 1;\n            if (*currentChar == 0) {\n              process_data_and_print_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n              return;\n            }\n          }\n          currentChar = currentChar + 1;\n          if (*currentChar == 0x22) {\n            process_data_and_print_00004db8(Elf32_Rel_ARRAY_1fff0200[9].r_info);\n            return;\n          }\n        } while (0x20 < *currentChar);\n      }\n      quoteCount = quoteCount + 1;\n    }\n    if (*currentChar == 0) break;\n    *currentChar = 0;\n    currentChar = currentChar + 1;\n  }\n  if (quoteCount != 0) {\n    commandCount = quoteCount;\n    commandArray = (char **)((int)inputArray - ((quoteCount + 1) * 4 + 7 & 0xfffffff8));\n    commandArray[quoteCount] = (char *)0x0;\n    currentChar = input;\n    for (index = 0; commandPtrArray = commandArray, index < quoteCount; index = index + 1) {\n      for (; *currentChar == 0; currentChar = currentChar + 1) {\n      }\n      if ((*currentChar == 0x22) || (*currentChar == 0x27)) {\n        currentChar = currentChar + 1;\n      }\n      commandArray[index] = (char *)currentChar;\n      for (; *currentChar != 0; currentChar = currentChar + 1) {\n      }\n    }\n    for (; (escapeCount != 0 && (*commandPtrArray != (char *)0x0)); commandPtrArray = commandPtrArray + 1) {\n      for (currentCommand = *commandPtrArray; *currentCommand != '\\0'; currentCommand = currentCommand + 1) {\n        if (*currentCommand == '\\') {\n          for (escapeChar = currentCommand; *escapeChar != '\\0'; escapeChar = escapeChar + 1) {\n            *escapeChar = escapeChar[1];\n          }\n          escapeCount = escapeCount + -1;\n          if (escapeCount == 0) break;\n        }\n      }\n    }\n    functionPtr = (code *)find_value_in_array_00002a18(param,*commandArray);\n    if (functionPtr == (code *)0x0) {\n      iVar1 = compare_byte_arrays_00004e52(&DAT_00007214,*commandArray);\n      if (iVar1 == 0) {\n        print_command_descriptions_00002a88(inputArray[1]);\n      }\n      else {\n        process_data_with_offset_00004c84(\"shell: command not found: %s\\n\",*commandArray);\n      }\n    }\n    else {\n      (*functionPtr)(quoteCount,commandArray);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002b10": "process_input_00002b10",
                "param_1": "param",
                "param_2": "input",
                "local_48": "inputArray",
                "local_3c": "functionPtr",
                "local_38": "commandArray",
                "local_34": "commandCount",
                "local_2d": "quoteChar",
                "local_2c": "escapeChar",
                "local_28": "currentCommand",
                "local_24": "commandPtrArray",
                "local_20": "index",
                "local_1c": "escapeCount",
                "local_18": "quoteCount",
                "local_14": "currentChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_00002a88"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002d94": {
            "entrypoint": "0x00002d94",
            "current_name": "process_input_00002d94",
            "code": "\nuint processInput_00002d94(undefined *inputBuffer,int inputBufferSize)\n\n{\n  int processedData;\n  byte byteValue;\n  bool isInputBufferEmpty;\n  undefined *currentInputChar;\n  \n  currentInputChar = inputBuffer;\n  while( true ) {\n    if (inputBufferSize + -1 <= (int)currentInputChar - (int)inputBuffer) {\n      return 0xffffffff;\n    }\n    processedData = process_and_extract_data_00004418();\n    if (processedData < 0) break;\n    if ((processedData == 0xd) || (processedData == 10)) {\n      *currentInputChar = 0;\n      process_input_00002a00(0xd);\n      process_input_00002a00(10);\n      isInputBufferEmpty = currentInputChar == inputBuffer;\n      if (isInputBufferEmpty) {\n        inputBuffer = (undefined *)0x1;\n      }\n      byteValue = (byte)inputBuffer;\n      if (!isInputBufferEmpty) {\n        byteValue = 0;\n      }\n      return (uint)byteValue;\n    }\n    if ((processedData == 8) || (processedData == 0x7f)) {\n      if (currentInputChar != inputBuffer) {\n        currentInputChar = currentInputChar + -1;\n        *currentInputChar = 0;\n        process_input_00002a00(8);\n        process_input_00002a00(0x20);\n        process_input_00002a00(8);\n      }\n    }\n    else {\n      *currentInputChar = (char)processedData;\n      process_input_00002a00(processedData);\n      currentInputChar = currentInputChar + 1;\n    }\n  }\n  return 1;\n}\n\n",
            "renaming": {
                "FUN_00002d94": "process_input_00002d94",
                "param_1": "inputBuffer",
                "param_2": "inputBufferSize",
                "iVar1": "processedData",
                "bVar2": "byteValue",
                "bVar3": "isInputBufferEmpty",
                "local_c": "currentInputChar"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_00004418",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e48": {
            "entrypoint": "0x00002e48",
            "current_name": "process_relocation_00002e48",
            "code": "\nvoid process_relocation_00002e48(void)\n\n{\n  send_input(0x3e);\n  send_input(0x20);\n  process_relocation_00002e48_entries_000041d0(*(undefined4 *)(relocation_array[16].offset + 8));\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002e48": "process_relocation_00002e48",
                "process_input_00002a00": "send_input",
                "Elf32_Rel_ARRAY_1fff0200": "relocation_array",
                "r_offset": "offset"
            },
            "calling": [
                "FUN_00002e6c"
            ],
            "called": [
                "FUN_000041d0",
                "FUN_00002a00"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e6c": {
            "entrypoint": "0x00002e6c",
            "current_name": "process_relocation_loop_00002e6c",
            "code": "\nvoid process_relocation_loop_00002e6c(undefined4 relocation_param,undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  int input_result;\n  \n  process_relocation_00002e48();\n  do {\n    input_result = process_input_00002d94(input_param_1,input_param_2);\n    if (input_result == 0) {\n      process_input_00002b10(relocation_param,input_param_1);\n    }\n    process_relocation_00002e48();\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00002e6c": "process_relocation_loop_00002e6c",
                "param_1": "relocation_param",
                "param_2": "input_param_1",
                "param_3": "input_param_2",
                "iVar1": "input_result"
            },
            "calling": [
                "FUN_000023a4"
            ],
            "called": [
                "FUN_00002d94",
                "FUN_00002b10",
                "FUN_00002e48"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002e9c": {
            "entrypoint": "0x00002e9c",
            "current_name": "execute_infinite_loop_00002e9c",
            "code": "\nundefined4 execute_infinite_loop_00002e9c(void)\n\n{\n  execute_infinite_loop_00002e9c_00003688();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002e9c": "execute_infinite_loop_00002e9c"
            },
            "calling": [],
            "called": [
                "FUN_00003688"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002eb4": {
            "entrypoint": "0x00002eb4",
            "current_name": "print_process_info_00002eb4",
            "code": "\nundefined4 print_process_info_00002eb4(void)\n\n{\n  print_process_info_00002eb4_0000211c();\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00002eb4": "print_process_info_00002eb4"
            },
            "calling": [],
            "called": [
                "FUN_0000211c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002ecc": {
            "entrypoint": "0x00002ecc",
            "current_name": "read_from_device_00002ecc",
            "code": "\nvoid readFromDevice_00002ecc(undefined4 deviceNumber,int deviceStruct)\n\n{\n  undefined4 description;\n  undefined4 deviceName;\n  undefined dataBuffer [8];\n  uint dataSize;\n  \n  dataSize = execute_code_00003d64(deviceStruct,dataBuffer);\n  if ((int)dataSize < 1) {\n    process_data_with_offset_00004c84(\"error: failed to read from device #%i\\n\",deviceNumber);\n  }\n  else {\n    deviceName = *(undefined4 *)(deviceStruct + 8);\n    description = map_param_to_description_000039e8(*(undefined *)(*(int *)(deviceStruct + 0xc) + 8));\n    process_data_with_offset_00004c84(\"Reading from #%i (%s|%s)\\n\",deviceNumber,deviceName,description);\n    display_data_object_00003694(dataBuffer,dataSize & 0xff);\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002ecc": "read_from_device_00002ecc",
                "param_1": "deviceNumber",
                "param_2": "deviceStruct",
                "uVar1": "description",
                "uVar2": "deviceName",
                "auStack_1c": "dataBuffer",
                "local_14": "dataSize"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_00002f30"
            ],
            "called": [
                "FUN_000039e8",
                "FUN_00003694",
                "FUN_00003d64",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f30": {
            "entrypoint": "0x00002f30",
            "current_name": "iterate_devices_and_process_data_00002f30",
            "code": "\nvoid iterate_devices_and_process_data_00002f30(void)\n\n{\n  int device_index;\n  undefined4 *device_addr;\n  \n  device_index = 0;\n  for (device_addr = DAT_1fff0db0; device_addr != (undefined4 *)0x0; device_addr = (undefined4 *)*device_addr) {\n    read_data_from_device(device_index,device_addr);\n    process_and_print_data(&DAT_00007380);\n    device_index = device_index + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f30": "iterate_devices_and_process_data_00002f30",
                "local_10": "device_index",
                "local_c": "device_addr",
                "read_from_device_00002ecc": "read_data_from_device",
                "process_data_and_print_00004db8": "process_and_print_data"
            },
            "calling": [
                "FUN_00002fe0"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002f74": {
            "entrypoint": "0x00002f74",
            "current_name": "print_device_list_00002f74",
            "code": "\nvoid printDeviceList_00002f74(void)\n\n{\n  undefined4 description;\n  int deviceCount;\n  undefined4 *deviceList;\n  \n  deviceList = DAT_1fff0db0;\n  deviceCount = 0;\n  if (DAT_1fff0db0 == (undefined4 *)0x0) {\n    process_data_and_print_00004db8(\"No devices found\");\n  }\n  else {\n    process_data_and_print_00004db8(\"ID\\tClass\\t\\tName\");\n  }\n  for (; deviceList != (undefined4 *)0x0; deviceList = (undefined4 *)*deviceList) {\n    description = map_param_to_description_000039e8(*(undefined *)(deviceList[3] + 8));\n    process_data_with_offset_00004c84(\"#%i\\t%s\\t%s\\n\",deviceCount,description,deviceList[2]);\n    deviceCount = deviceCount + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002f74": "print_device_list_00002f74",
                "local_18": "deviceCount",
                "local_14": "deviceList",
                "uVar1": "description"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_000039e8",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00002fe0": {
            "entrypoint": "0x00002fe0",
            "current_name": "process_device_data_00002fe0",
            "code": "\nvoid process_device_data_00002fe0(int device_count,undefined4 *arguments)\n\n{\n  int comparison_result;\n  undefined4 device_id;\n  \n  if (device_count < 3) {\n    display_usage_message(\"usage: %s %s <device id>|all\\n\",*arguments,arguments[1]);\n  }\n  else {\n    comparison_result = compare_device_id(arguments[2],&DAT_000073d4);\n    if (comparison_result == 0) {\n      process_all_devices_data();\n    }\n    else {\n      device_id = parse_device_id(arguments[2]);\n      comparison_result = search_device_id(device_id);\n      if (comparison_result == 0) {\n        display_error_message(\"error: undefined device id given\");\n      }\n      else {\n        read_device_data(device_id,comparison_result);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00002fe0": "process_device_data_00002fe0",
                "param_1": "device_count",
                "param_2": "arguments",
                "iVar1": "comparison_result",
                "uVar2": "device_id",
                "process_data_with_offset_00004c84": "display_usage_message",
                "compare_byte_arrays_00004e52": "compare_device_id",
                "iterate_devices_and_process_data_00002f30": "process_all_devices_data",
                "convert_string_to_number_00004042": "parse_device_id",
                "find_item_in_list_00003d24": "search_device_id",
                "process_data_and_print_00004db8": "display_error_message",
                "read_from_device_00002ecc": "read_device_data"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00004e52",
                "FUN_00003d24",
                "FUN_00002ecc",
                "FUN_00002f30",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000305c": {
            "entrypoint": "0x0000305c",
            "current_name": "write_to_device_0000305c",
            "code": "\nvoid writeToDevice_0000305c(int argc,undefined4 *argv)\n\n{\n  undefined2 convertedValue;\n  undefined2 valuesArray [4];\n  uint numValues;\n  int deviceIndex;\n  undefined4 deviceId;\n  int index;\n  \n  if (argc < 4) {\n    process_data_with_offset_00004c84(\"usage: %s %s <device id> <value 0> [<value 1> [<value 2]]\\n\",*argv,argv[1]);\n  }\n  else {\n    deviceId = convert_string_to_number_00004042(argv[2]);\n    deviceIndex = find_item_in_list_00003d24(deviceId);\n    if (deviceIndex == 0) {\n      process_data_and_print_00004db8(\"error: undefined device given\");\n    }\n    else {\n      set_memory_region_00004622(valuesArray,0,8);\n      if (5 < argc) {\n        argc = 6;\n      }\n      numValues = argc - 3;\n      for (index = 0; index < (int)numValues; index = index + 1) {\n        convertedValue = convert_string_to_number_00004042(argv[index + 3]);\n        valuesArray[index] = convertedValue;\n      }\n      process_data_with_offset_00004c84(\"Writing to device #%i - %s\\n\",deviceId,*(undefined4 *)(deviceIndex + 8));\n      display_data_object_00003694(valuesArray,numValues & 0xff);\n      numValues = execute_function_00003d94(deviceIndex,valuesArray);\n      if ((int)numValues < 1) {\n        if (numValues == -0x86) {\n          process_data_with_offset_00004c84(\"error: device #%i is not writable\\n\",deviceId);\n        }\n        else {\n          process_data_with_offset_00004c84(\"error: failure to write to device #%i\\n\",deviceId);\n        }\n      }\n      else {\n        process_data_with_offset_00004c84(\"data successfully written to device #%i\\n\",deviceId);\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000305c": "write_to_device_0000305c",
                "param_1": "argc",
                "param_2": "argv",
                "uVar1": "convertedValue",
                "auStack_20": "valuesArray",
                "local_18": "numValues",
                "local_14": "deviceIndex",
                "local_10": "deviceId",
                "local_c": "index"
            },
            "calling": [
                "FUN_0000316c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003694",
                "FUN_00003d94",
                "FUN_00003d24",
                "FUN_00004622",
                "FUN_00004c84",
                "FUN_00004042"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000316c": {
            "entrypoint": "0x0000316c",
            "current_name": "process_device_command_0000316c",
            "code": "\nundefined4 process_device_command_0000316c(int command_count,undefined4 *command_array)\n\n{\n  int result;\n  \n  if (command_count < 2) {\n    print_device_list();\n  }\n  else {\n    result = compare_byte_arrays(command_array[1],&DAT_000074ec);\n    if (result == 0) {\n      process_device_data(command_count,command_array);\n    }\n    else {\n      result = compare_byte_arrays(command_array[1],\"write\");\n      if (result == 0) {\n        write_to_device(command_count,command_array);\n      }\n      else {\n        print_usage(\"usage: %s read|write\\n\",*command_array);\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000316c": "process_device_command_0000316c",
                "param_1": "command_count",
                "param_2": "command_array",
                "iVar1": "result",
                "print_device_list_00002f74": "print_device_list",
                "compare_byte_arrays_00004e52": "compare_byte_arrays",
                "process_device_data_00002fe0": "process_device_data",
                "write_to_device_0000305c": "write_to_device",
                "process_data_with_offset_00004c84": "print_usage"
            },
            "calling": [],
            "called": [
                "FUN_00002f74",
                "FUN_00002fe0",
                "FUN_00004e52",
                "FUN_00004c84",
                "FUN_0000305c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000031e0": {
            "entrypoint": "0x000031e0",
            "current_name": "ring_alarm_000031e0",
            "code": "\nvoid ringAlarm_000031e0(void)\n\n{\n  process_data_and_print_00004db8(\"The alarm rang\");\n  return;\n}\n\n",
            "renaming": {
                "FUN_000031e0": "ring_alarm_000031e0"
            },
            "calling": [],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nvoid FUN_000031e0(void)\n\n{\n  FUNC_00004db8(\"The alarm rang\");\n  return;\n}\n\n"
        },
        "FUN_000031fc": {
            "entrypoint": "0x000031fc",
            "current_name": "calculate_weekday_000031fc",
            "code": "\nint calculateWeekday_000031fc(int year,int month,int weekdayOffset)\n\n{\n  byte lowerBound;\n  int adjustedMonth;\n  \n  adjustedMonth = month;\n  if (month < 3) {\n    adjustedMonth = 1;\n  }\n  lowerBound = (byte)adjustedMonth;\n  if (2 < month) {\n    lowerBound = 0;\n  }\n  year = year - (uint)lowerBound;\n  adjustedMonth = year;\n  if (year < 0) {\n    adjustedMonth = year + 3;\n  }\n  return ((((adjustedMonth >> 2) + year) - year / 100) + year / 400 +\n          *(int *)((int)monthOffsetArr + (month + -1) * 4 + 0x50) + weekdayOffset) % 7;\n}\n\n",
            "renaming": {
                "FUN_000031fc": "calculate_weekday_000031fc",
                "param_1": "year",
                "param_2": "month",
                "param_3": "weekdayOffset",
                "bVar1": "lowerBound",
                "iVar2": "adjustedMonth",
                "Elf32_Rel_ARRAY_1fff0200": "monthOffsetArr"
            },
            "calling": [
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000328c": {
            "entrypoint": "0x0000328c",
            "current_name": "parse_date_and_calculate_weekday_0000328c",
            "code": "\nundefined4 parseDateAndCalculateWeekday_0000328c(undefined4 *dateString,int *parsedDate)\n\n{\n  int weekday;\n  int index;\n  short numberFromConversion;\n  \n  numberFromConversion = convert_string_to_number_00004f84(*dateString,&index,10);\n  parsedDate[5] = numberFromConversion + -0x76c;\n  numberFromConversion = convert_string_to_number_00004f84(index + 1,&index,10);\n  parsedDate[4] = numberFromConversion + -1;\n  numberFromConversion = convert_string_to_number_00004f84(index + 1,&index,10);\n  parsedDate[3] = (int)numberFromConversion;\n  numberFromConversion = convert_string_to_number_00004f84(dateString[1],&index,10);\n  parsedDate[2] = (int)numberFromConversion;\n  numberFromConversion = convert_string_to_number_00004f84(index + 1,&index,10);\n  parsedDate[1] = (int)numberFromConversion;\n  numberFromConversion = convert_string_to_number_00004f84(index + 1,&index,10);\n  *parsedDate = (int)numberFromConversion;\n  weekday = calculate_weekday_000031fc(parsedDate[5] + 0x76c,parsedDate[4] + 1,parsedDate[3]);\n  parsedDate[6] = weekday;\n  parsedDate[8] = -1;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000328c": "parse_date_and_calculate_weekday_0000328c",
                "param_1": "dateString",
                "param_2": "parsedDate",
                "iVar1": "weekday",
                "local_10": "index",
                "local_a": "numberFromConversion"
            },
            "calling": [
                "FUN_000033f4",
                "FUN_00003478"
            ],
            "called": [
                "FUN_000031fc",
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003378": {
            "entrypoint": "0x00003378",
            "current_name": "print_date_time_00003378",
            "code": "\nundefined4 printDateTime_00003378(undefined4 *dateTime)\n\n{\n  process_data_with_offset_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",year + 0x76c,month + 1,day,\n               hour,minute,*dateTime);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00003378": "print_date_time_00003378",
                "param_1": "dateTime",
                "param_1[5]": "year",
                "param_1[4]": "month",
                "param_1[3]": "day",
                "param_1[2]": "hour",
                "param_1[1]": "minute"
            },
            "calling": [
                "FUN_00003444",
                "FUN_000033c0"
            ],
            "called": [
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003378(undefined4 *param_1)\n\n{\n  FUNC_00004c84(\"%04i-%02i-%02i %02i:%02i:%02i\\n\",param_1[5] + 0x76c,param_1[4] + 1,param_1[3],\n               param_1[2],param_1[1],*param_1);\n  return 0;\n}\n\n"
        },
        "FUN_000033c0": {
            "entrypoint": "0x000033c0",
            "current_name": "get_date_time_and_print_or_error_000033c0",
            "code": "\nbool getDateTimeAndPrintOrError_000033c0(void)\n\n{\n  int result;\n  undefined dateTimeBuffer [36];\n  \n  result = initialize_date_time_00002690(dateTimeBuffer);\n  if (result != 0) {\n    process_data_and_print_00004db8(\"rtc: error getting alarm\");\n  }\n  else {\n    print_date_time_00003378(dateTimeBuffer);\n  }\n  return result != 0;\n}\n\n",
            "renaming": {
                "FUN_000033c0": "get_date_time_and_print_or_error_000033c0",
                "auStack_2c": "dateTimeBuffer",
                "iVar1": "result"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002690",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000033f4": {
            "entrypoint": "0x000033f4",
            "current_name": "set_alarm_and_return_status_000033f4",
            "code": "\nundefined4 setAlarmAndReturnStatus_000033f4(undefined4 inputDate)\n\n{\n  int parsingResult;\n  undefined4 status;\n  undefined parsedDate [36];\n  \n  parsingResult = parseDateAndCalculateWeekday(inputDate,parsedDate);\n  if (parsingResult == 0) {\n    parsingResult = initializeData(parsedDate,0x31e1,0);\n    if (parsingResult == -1) {\n      process_data_and_print_00004db8(\"rtc: error setting alarm\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_000033f4": "set_alarm_and_return_status_000033f4",
                "param_1": "inputDate",
                "iVar1": "parsingResult",
                "uVar2": "status",
                "auStack_2c": "parsedDate",
                "parse_date_and_calculate_weekday_0000328c": "parseDateAndCalculateWeekday",
                "initialize_data_00002654": "initializeData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002654",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000033f4(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_date_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_data_00002654(auStack_2c,0x31e1,0);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting alarm\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_00003444": {
            "entrypoint": "0x00003444",
            "current_name": "get_time_and_print_data_00003444",
            "code": "\nbool getTimeAndPrintData_00003444(void)\n\n{\n  int errorCode;\n  undefined dateTimeComponents [36];\n  \n  errorCode = extract_date_time_components_00002624(dateTimeComponents);\n  if (errorCode != 0) {\n    process_data_and_print_00004db8(\"rtc: error getting time\");\n  }\n  else {\n    print_date_time_00003378(dateTimeComponents);\n  }\n  return errorCode != 0;\n}\n\n",
            "renaming": {
                "FUN_00003444": "get_time_and_print_data_00003444",
                "auStack_2c": "dateTimeComponents",
                "iVar1": "errorCode"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002624",
                "FUN_00003378"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003478": {
            "entrypoint": "0x00003478",
            "current_name": "initialize_date_time_and_return_status_00003478",
            "code": "\nundefined4 initializeDateTimeAndReturnStatus_00003478(undefined4 inputDate)\n\n{\n  int parseDateResult;\n  undefined4 status;\n  undefined dateData [36];\n  \n  parseDateResult = parse_date_and_calculate_weekday_0000328c(inputDate,dateData);\n  if (parseDateResult == 0) {\n    parseDateResult = initialize_and_calculate_date_time_00002600(dateData);\n    if (parseDateResult == -1) {\n      process_data_and_print_00004db8(\"rtc: error setting time\");\n      status = 1;\n    }\n    else {\n      status = 0;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003478": "initialize_date_time_and_return_status_00003478",
                "param_1": "inputDate",
                "iVar1": "parseDateResult",
                "uVar2": "status",
                "auStack_2c": "dateData"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00002600",
                "FUN_0000328c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00003478(undefined4 param_1)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  undefined auStack_2c [36];\n  \n  iVar1 = parse_date_and_calculate_weekday_0000328c(param_1,auStack_2c);\n  if (iVar1 == 0) {\n    iVar1 = initialize_and_calculate_date_time_00002600(auStack_2c);\n    if (iVar1 == -1) {\n      FUNC_00004db8(\"rtc: error setting time\");\n      uVar2 = 1;\n    }\n    else {\n      uVar2 = 0;\n    }\n  }\n  else {\n    uVar2 = 1;\n  }\n  return uVar2;\n}\n\n"
        },
        "FUN_000034c0": {
            "entrypoint": "0x000034c0",
            "current_name": "display_usage_000034c0",
            "code": "\nundefined4 displayUsage_000034c0(void)\n\n{\n  process_data_and_print_00004db8(\"usage: rtc <command> [arguments]\");\n  process_data_and_print_00004db8(\"commands:\");\n  process_data_and_print_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  process_data_and_print_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  process_data_and_print_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  process_data_and_print_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  process_data_and_print_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  process_data_and_print_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  process_data_and_print_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000034c0": "display_usage_000034c0"
            },
            "calling": [
                "FUN_00003524"
            ],
            "called": [
                "FUN_00004db8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_000034c0(void)\n\n{\n  FUNC_00004db8(\"usage: rtc <command> [arguments]\");\n  FUNC_00004db8(\"commands:\");\n  FUNC_00004db8(\"\\tpoweron\\t\\tpower the interface on\");\n  FUNC_00004db8(\"\\tpoweroff\\tpower the interface off\");\n  FUNC_00004db8(\"\\tclearalarm\\tdeactivate the current alarm\");\n  FUNC_00004db8(\"\\tgetalarm\\tprint the currently alarm time\");\n  FUNC_00004db8(\"\\tsetalarm YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset an alarm for the specified time\");\n  FUNC_00004db8(\"\\tgettime\\t\\tprint the current time\");\n  FUNC_00004db8(\"\\tsettime YYYY-MM-DD HH:MM:SS\\n\\t\\t\\tset the current time\");\n  return 0;\n}\n\n"
        },
        "FUN_00003524": {
            "entrypoint": "0x00003524",
            "current_name": "handle_command_00003524",
            "code": "\nundefined4 handleCommand_00003524(int numParams,int commandParams)\n\n{\n  int result;\n  undefined4 status;\n  \n  if (numParams < 2) {\n    display_usage_000034c0();\n    status = 1;\n  }\n  else {\n    result = compare_and_subtract_00004e66(*(undefined4 *)(commandParams + 4),\"poweron\",7);\n    if (result == 0) {\n      initialize_register_flag_000026d8();\n    }\n    else {\n      result = compare_and_subtract_00004e66(*(undefined4 *)(commandParams + 4),\"poweroff\",8);\n      if (result == 0) {\n        clear_interrupt_flag_000026e4();\n      }\n      else {\n        result = compare_and_subtract_00004e66(*(undefined4 *)(commandParams + 4),\"clearalarm\",8);\n        if (result == 0) {\n          clear_and_reset_flags_000026c0();\n        }\n        else {\n          result = compare_and_subtract_00004e66(*(undefined4 *)(commandParams + 4),\"getalarm\",8);\n          if (result == 0) {\n            get_date_time_and_print_or_error_000033c0();\n          }\n          else {\n            result = compare_and_subtract_00004e66(*(undefined4 *)(commandParams + 4),\"setalarm\",8);\n            if ((result == 0) && (numParams == 4)) {\n              set_alarm_and_return_status_000033f4(commandParams + 8);\n            }\n            else {\n              result = compare_and_subtract_00004e66(*(undefined4 *)(commandParams + 4),\"gettime\",7);\n              if (result == 0) {\n                get_time_and_print_data_00003444();\n              }\n              else {\n                result = compare_and_subtract_00004e66(*(undefined4 *)(commandParams + 4),\"settime\",7);\n                if ((result != 0) || (numParams != 4)) {\n                  process_data_with_offset_00004c84(\"unknown command or missing parameters: %s\\n\\n\",\n                               *(undefined4 *)(commandParams + 4));\n                  display_usage_000034c0();\n                  return 1;\n                }\n                initialize_date_time_and_return_status_00003478(commandParams + 8);\n              }\n            }\n          }\n        }\n      }\n    }\n    status = 0;\n  }\n  return status;\n}\n\n",
            "renaming": {
                "FUN_00003524": "handle_command_00003524",
                "param_1": "numParams",
                "param_2": "commandParams",
                "iVar1": "result",
                "uVar2": "status"
            },
            "calling": [],
            "called": [
                "FUN_000034c0",
                "FUN_000033f4",
                "FUN_00003478",
                "FUN_00003444",
                "FUN_00004e66",
                "FUN_00004c84",
                "FUN_000026d8",
                "FUN_000026e4",
                "FUN_000033c0",
                "FUN_000026c0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003658": {
            "entrypoint": "0x00003658",
            "current_name": "infinite_loop_00003658",
            "code": "\nvoid infiniteLoop_00003658(void)\n\n{\n  syncBarrier(0xf);\n  syncBarrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00003658": "infinite_loop_00003658",
                "DataSynchronizationBarrier": "syncBarrier"
            },
            "calling": [
                "FUN_00003688"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003688": {
            "entrypoint": "0x00003688",
            "current_name": "execute_infinite_loop_00003688",
            "code": "\nvoid execute_infinite_loop_00003688(void)\n\n{\n  run_infinite_loop();\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003688": "execute_infinite_loop_00003688",
                "infinite_loop_00003658": "run_infinite_loop"
            },
            "calling": [
                "FUN_00002e9c"
            ],
            "called": [
                "FUN_00003658"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003694": {
            "entrypoint": "0x00003694",
            "current_name": "display_data_object_00003694",
            "code": "\nvoid displayDataObject_00003694(int dataAddress,byte dataLength)\n\n{\n  undefined4 memoryAddress;\n  char flagChar;\n  uint flagValue;\n  bool isFlagSet;\n  undefined decimalString [8];\n  int stringLength;\n  char mapValue;\n  byte index;\n  \n  if ((dataAddress == 0) || (3 < dataLength)) {\n    process_data_and_print_00004db8(\"Unable to display data object\");\n  }\n  else {\n    process_data_with_offset_00004c84(\"Data:\");\n    for (index = 0; index < dataLength; index = index + 1) {\n      if (*(byte *)(dataAddress + 6) < 0x14) {\n        flagValue = 1 << (uint)*(byte *)(dataAddress + 6) & 0x8018f;\n        isFlagSet = flagValue != 0;\n        if (isFlagSet) {\n          flagValue = 1;\n        }\n        flagChar = (char)flagValue;\n        if (!isFlagSet) {\n          flagChar = '\\0';\n        }\n        if (flagChar == '\\0') goto LAB_000036ee;\n        mapValue = '\\0';\n      }\n      else {\nLAB_000036ee:\n        mapValue = map_parameter_value_00003918((int)*(char *)(dataAddress + 7));\n      }\n      process_data_with_offset_00004c84(&DAT_000077bc);\n      if (dataLength < 2) {\n        process_data_with_offset_00004c84(\"     \");\n      }\n      else {\n        process_data_with_offset_00004c84(\"[%u] \",index);\n      }\n      if (mapValue == '\\0') {\n        if (*(char *)(dataAddress + 7) == '\\0') {\n          process_data_with_offset_00004c84(&DAT_000077d8,(int)*(short *)(dataAddress + (uint)index * 2));\n        }\n        else if ((*(char *)(dataAddress + 7) + 4 < 0 == SCARRY4((int)*(char *)(dataAddress + 7),4)) &&\n                (*(char *)(dataAddress + 7) < '\\0')) {\n          stringLength = convert_to_decimal_string_00003e9e(decimalString,(int)*(short *)(dataAddress + (uint)index * 2),\n                                  (int)*(char *)(dataAddress + 7));\n          decimalString[stringLength] = 0;\n          process_data_with_offset_00004c84(&DAT_000077dc,decimalString);\n        }\n        else {\n          process_data_with_offset_00004c84(\"%iE%i\",(int)*(short *)(dataAddress + (uint)index * 2),\n                       (int)*(char *)(dataAddress + 7));\n        }\n      }\n      else {\n        process_data_with_offset_00004c84(\"%6d %c\",(int)*(short *)(dataAddress + (uint)index * 2),mapValue);\n      }\n      memoryAddress = get_memory_address_00003810(*(undefined *)(dataAddress + 6));\n      process_data_with_offset_00004c84(&DAT_000077e8,memoryAddress);\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00003694": "display_data_object_00003694",
                "param_1": "dataAddress",
                "param_2": "dataLength",
                "uVar1": "memoryAddress",
                "cVar2": "flagChar",
                "uVar3": "flagValue",
                "bVar4": "isFlagSet",
                "auStack_18": "decimalString",
                "local_10": "stringLength",
                "local_a": "mapValue",
                "local_9": "index"
            },
            "calling": [
                "FUN_00002ecc",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004db8",
                "FUN_00003e9e",
                "FUN_00003918",
                "FUN_00003810",
                "FUN_00004c84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003810": {
            "entrypoint": "0x00003810",
            "current_name": "get_memory_address_00003810",
            "code": "\nundefined * getMemoryAddress_00003810(undefined input_value)\n\n{\n  undefined *memory_address;\n  \n  switch(input_value) {\n  case 2:\n    memory_address = &DAT_000077ec;\n    break;\n  case 3:\n    memory_address = &DAT_000077f0;\n    break;\n  case 4:\n    memory_address = &DAT_000077f4;\n    break;\n  case 5:\n    memory_address = &DAT_000077f8;\n    break;\n  case 6:\n    memory_address = &DAT_000077fc;\n    break;\n  case 7:\n    memory_address = (undefined *)0x7800;\n    break;\n  case 8:\n    memory_address = &DAT_00007804;\n    break;\n  case 9:\n    memory_address = &DAT_00007808;\n    break;\n  case 10:\n    memory_address = &DAT_0000780c;\n    break;\n  case 0xb:\n    memory_address = &DAT_00007810;\n    break;\n  case 0xc:\n    memory_address = &DAT_00007814;\n    break;\n  case 0xd:\n    memory_address = &DAT_00007818;\n    break;\n  case 0xe:\n    memory_address = &DAT_0000781c;\n    break;\n  case 0xf:\n    memory_address = &DAT_00007820;\n    break;\n  case 0x10:\n    memory_address = &DAT_00007824;\n    break;\n  case 0x11:\n    memory_address = &DAT_0000782c;\n    break;\n  default:\n    memory_address = &DAT_00007834;\n    break;\n  case 0x13:\n    memory_address = &DAT_00007830;\n    break;\n  case 0x15:\n    memory_address = &DAT_00007828;\n  }\n  return memory_address;\n}\n\n",
            "renaming": {
                "FUN_00003810": "get_memory_address_00003810",
                "param_1": "input_value",
                "puVar1": "memory_address"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003918": {
            "entrypoint": "0x00003918",
            "current_name": "map_parameter_value_00003918",
            "code": "\nundefined4 mapParameterValue_00003918(undefined parameter)\n\n{\n  undefined4 mappedValue;\n  \n  switch(parameter) {\n  case 2:\n    mappedValue = 0x68;\n    break;\n  case 3:\n    mappedValue = 0x6b;\n    break;\n  case 6:\n    mappedValue = 0x4d;\n    break;\n  case 9:\n    mappedValue = 0x47;\n    break;\n  case 0xc:\n    mappedValue = 0x54;\n    break;\n  case 0xf:\n    mappedValue = 0x50;\n    break;\n  case 0xf1:\n    mappedValue = 0x66;\n    break;\n  default:\n    mappedValue = 0;\n    break;\n  case 0xf4:\n    mappedValue = 0x70;\n    break;\n  case 0xf7:\n    mappedValue = 0x6e;\n    break;\n  case 0xfa:\n    mappedValue = 0x75;\n    break;\n  case 0xfd:\n    mappedValue = 0x6d;\n  }\n  return mappedValue;\n}\n\n",
            "renaming": {
                "FUN_00003918": "map_parameter_value_00003918",
                "param_1": "parameter",
                "uVar1": "mappedValue"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000039e8": {
            "entrypoint": "0x000039e8",
            "current_name": "map_param_to_description_000039e8",
            "code": "\nchar * mapParamToDescription_000039e8(char param)\n\n{\n  char *description;\n  \n  switch(param) {\n  case '\\0':\n    description = \"CLASS_UNDEF\";\n    break;\n  case '@':\n    description = \"ACT_ANY\";\n    break;\n  case 'B':\n    description = \"ACT_LED_RGB\";\n    break;\n  case 'C':\n    description = \"ACT_SERVO\";\n    break;\n  case 'D':\n    description = \"ACT_MOTOR\";\n    break;\n  case 'E':\n    description = \"ACT_SWITCH\";\n    break;\n  case 'F':\n    description = \"ACT_DIMMER\";\n    break;\n  case -0x80:\n    description = \"SENSE_ANY\";\n    break;\n  case -0x7f:\n    description = \"SENSE_BTN\";\n    break;\n  case -0x7e:\n    description = \"SENSE_TEMP\";\n    break;\n  case -0x7d:\n    description = \"SENSE_HUM\";\n    break;\n  case -0x7c:\n    description = \"SENSE_LIGHT\";\n    break;\n  case -0x7b:\n    description = \"SENSE_ACCEL\";\n    break;\n  case -0x7a:\n    description = \"SENSE_MAG\";\n    break;\n  case -0x79:\n    description = \"SENSE_GYRO\";\n    break;\n  case -0x78:\n    description = \"SENSE_COLOR\";\n    break;\n  case -0x77:\n    description = \"SENSE_PRESS\";\n    break;\n  case -0x76:\n    description = \"SENSE_ANALOG\";\n    break;\n  case -0x75:\n    description = \"SENSE_UV\";\n    break;\n  case -0x74:\n    description = \"SENSE_OBJTEMP\";\n    break;\n  case -0x73:\n    description = \"SENSE_PULSE_COUNT\";\n    break;\n  case -0x72:\n    description = \"SENSE_DISTANCE\";\n    break;\n  case -0x71:\n    description = \"SENSE_CO2\";\n    break;\n  default:\n    if (param == -1) {\n      return \"CLASS_ANY\";\n    }\n  case '\\x01':\n  case '\\x02':\n  case '\\x03':\n  case '\\x04':\n  case '\\x05':\n  case '\\x06':\n  case '\\a':\n  case '\\b':\n  case '\\t':\n  case '\\n':\n  case '\\v':\n  case '\\f':\n  case '\\r':\n  case '\\x0e':\n  case '\\x0f':\n  case '\\x10':\n  case '\\x11':\n  case '\\x12':\n  case '\\x13':\n  case '\\x14':\n  case '\\x15':\n  case '\\x16':\n  case '\\x17':\n  case '\\x18':\n  case '\\x19':\n  case '\\x1a':\n  case '\\x1b':\n  case '\\x1c':\n  case '\\x1d':\n  case '\\x1e':\n  case '\\x1f':\n  case ' ':\n  case '!':\n  case '\\\"':\n  case '#':\n  case '$':\n  case '%':\n  case '&':\n  case '\\'':\n  case '(':\n  case ')':\n  case '*':\n  case '+':\n  case ',':\n  case '-':\n  case '.':\n  case '/':\n  case '0':\n  case '1':\n  case '2':\n  case '3':\n  case '4':\n  case '5':\n  case '6':\n  case '7':\n  case '8':\n  case '9':\n  case ':':\n  case ';':\n  case '<':\n  case '=':\n  case '>':\n  case '?':\n  case 'A':\n  case 'G':\n  case 'H':\n  case 'I':\n  case 'J':\n  case 'K':\n  case 'L':\n  case 'M':\n  case 'N':\n  case 'O':\n  case 'P':\n  case 'Q':\n  case 'R':\n  case 'S':\n  case 'T':\n  case 'U':\n  case 'V':\n  case 'W':\n  case 'X':\n  case 'Y':\n  case 'Z':\n  case '[':\n  case '\\':\n  case ']':\n  case '^':\n  case '_':\n  case '`':\n  case 'a':\n  case 'b':\n  case 'c':\n  case 'd':\n  case 'e':\n  case 'f':\n  case 'g':\n  case 'h':\n  case 'i':\n  case 'j':\n  case 'k':\n  case 'l':\n  case 'm':\n  case 'n':\n  case 'o':\n  case 'p':\n  case 'q':\n  case 'r':\n  case 's':\n  case 't':\n  case 'u':\n  case 'v':\n  case 'w':\n  case 'x':\n  case 'y':\n  case 'z':\n  case '{':\n  case '|':\n  case '}':\n  case '~':\n  case '\\x7f':\n    description = \"CLASS_UNKNOWN\";\n  }\n  return description;\n}\n\n",
            "renaming": {
                "FUN_000039e8": "map_param_to_description_000039e8",
                "param_1": "param",
                "pcVar1": "description"
            },
            "calling": [
                "FUN_00002f74",
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d24": {
            "entrypoint": "0x00003d24",
            "current_name": "find_item_in_list_00003d24",
            "code": "\nundefined4 * findItemInList_00003d24(int listSize)\n\n{\n  int count;\n  undefined4 *currentItem;\n  \n  count = 0;\n  for (currentItem = DAT_1fff0db0; (count < listSize && (currentItem != (undefined4 *)0x0));\n      currentItem = (undefined4 *)*currentItem) {\n    count = count + 1;\n  }\n  return currentItem;\n}\n\n",
            "renaming": {
                "FUN_00003d24": "find_item_in_list_00003d24",
                "param_1": "listSize",
                "local_10": "count",
                "local_c": "currentItem"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d64": {
            "entrypoint": "0x00003d64",
            "current_name": "execute_code_00003d64",
            "code": "\nundefined4 executeCode_00003d64(int ptrToFunction,undefined4 inputParam)\n\n{\n  undefined4 returnValue;\n  \n  if (ptrToFunction == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (***(code ***)(ptrToFunction + 0xc))(*(undefined4 *)(ptrToFunction + 4),inputParam);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d64": "execute_code_00003d64",
                "param_1": "ptrToFunction",
                "param_2": "inputParam",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_00002ecc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003d94": {
            "entrypoint": "0x00003d94",
            "current_name": "execute_function_00003d94",
            "code": "\nundefined4 executeFunction_00003d94(int input,undefined4 output)\n\n{\n  undefined4 returnValue;\n  \n  if (input == 0) {\n    returnValue = 0xffffffed;\n  }\n  else {\n    returnValue = (**(code **)(*(int *)(input + 0xc) + 4))(*(undefined4 *)(input + 4),output);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00003d94": "execute_function_00003d94",
                "param_1": "input",
                "param_2": "output",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_0000305c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003dc4": {
            "entrypoint": "0x00003dc4",
            "current_name": "count_digits_00003dc4",
            "code": "\nint countDigits_00003dc4(int inputOffset,uint inputNumber)\n\n{\n  uint remainder;\n  char *outputBuffer;\n  uint multiplier;\n  int digitCount;\n  \n  digitCount = 1;\n  if (inputNumber < 1000000000) {\n    for (multiplier = 10; multiplier <= inputNumber; multiplier = multiplier * 10) {\n      digitCount = digitCount + 1;\n    }\n  }\n  else {\n    digitCount = 10;\n  }\n  if (inputOffset != 0) {\n    outputBuffer = (char *)(digitCount + inputOffset);\n    remainder = inputNumber;\n    do {\n      outputBuffer = outputBuffer + -1;\n      *outputBuffer = (char)(remainder % 10) + '0';\n      remainder = remainder / 10;\n    } while (remainder != 0);\n  }\n  return digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003dc4": "count_digits_00003dc4",
                "param_1": "inputOffset",
                "param_2": "inputNumber",
                "local_20": "remainder",
                "local_14": "outputBuffer",
                "local_10": "multiplier",
                "local_c": "digitCount"
            },
            "calling": [
                "FUN_00003e58"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e58": {
            "entrypoint": "0x00003e58",
            "current_name": "count_digits_with_sign_00003e58",
            "code": "\nint countDigitsWithSign_00003e58(undefined *numberArray,int number)\n\n{\n  int digitCount;\n  int absNumber;\n  undefined *numberPtr;\n  \n  absNumber = number;\n  numberPtr = numberArray;\n  if (-(number >> 0x1f) != 0) {\n    if (numberArray != (undefined *)0x0) {\n      numberPtr = numberArray + 1;\n      *numberArray = 0x2d;\n    }\n    absNumber = -number;\n  }\n  digitCount = count_digits_00003dc4(numberPtr,absNumber);\n  return -(number >> 0x1f) + digitCount;\n}\n\n",
            "renaming": {
                "FUN_00003e58": "count_digits_with_sign_00003e58",
                "param_1": "numberArray",
                "param_2": "number",
                "iVar1": "digitCount",
                "local_18": "absNumber",
                "local_14": "numberPtr"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_00003dc4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003e9e": {
            "entrypoint": "0x00003e9e",
            "current_name": "convert_to_decimal_string_00003e9e",
            "code": "\nundefined4 convertToDecimalString_00003e9e(undefined4 input,short number,undefined4 buffer)\n\n{\n  undefined4 result;\n  \n  result = convert_to_decimal_string_00003ec4(input,(int)number,buffer);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00003e9e": "convert_to_decimal_string_00003e9e",
                "param_1": "input",
                "param_2": "number",
                "param_3": "buffer",
                "uVar1": "result"
            },
            "calling": [
                "FUN_00003694"
            ],
            "called": [
                "FUN_00003ec4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ec4": {
            "entrypoint": "0x00003ec4",
            "current_name": "convert_to_decimal_string_00003ec4",
            "code": "\nint convertToDecimalString_00003ec4(undefined *outputString,uint inputNumber,int precision)\n\n{\n  int digitsCount;\n  undefined4 decimalDigitsCount;\n  uint quotient;\n  int remainder;\n  int totalDigitsCount;\n  \n  if (precision + 7 < 0 != SCARRY4(precision,7)) {\n    kernel_panic_handler_00000f04(3,\"FAILED ASSERTION.\");\n  }\n  totalDigitsCount = 0;\n  if (precision == 0) {\n    totalDigitsCount = count_digits_with_sign_00003e58(outputString,inputNumber);\n  }\n  else if (precision < 1) {\n    quotient = inputNumber / *(uint *)(&DAT_00007978 + precision * -4);\n    remainder = inputNumber - *(uint *)(&DAT_00007978 + precision * -4) * quotient;\n    if (remainder < 0) {\n      remainder = -remainder;\n    }\n    if ((quotient == 0) && ((int)inputNumber < 0)) {\n      if (outputString != (undefined *)0x0) {\n        *outputString = 0x2d;\n      }\n      totalDigitsCount = 1;\n    }\n    if (outputString == (undefined *)0x0) {\n      digitsCount = count_digits_with_sign_00003e58(0,quotient);\n      totalDigitsCount = digitsCount + 1 + totalDigitsCount;\n    }\n    else {\n      digitsCount = count_digits_with_sign_00003e58(outputString + totalDigitsCount,quotient);\n      digitsCount = totalDigitsCount + digitsCount;\n      totalDigitsCount = digitsCount + 1;\n      outputString[digitsCount] = 0x2e;\n      decimalDigitsCount = count_digits_with_sign_00003e58(outputString + totalDigitsCount,remainder);\n      copy_and_set_memory_region_00003ff4(outputString + totalDigitsCount,decimalDigitsCount,-precision,0x30);\n    }\n    totalDigitsCount = -precision + totalDigitsCount;\n  }\n  else {\n    totalDigitsCount = count_digits_with_sign_00003e58(outputString,inputNumber);\n    if (outputString != (undefined *)0x0) {\n      set_memory_region_00004622(outputString + totalDigitsCount,0x30,precision);\n    }\n    totalDigitsCount = precision + totalDigitsCount;\n  }\n  return totalDigitsCount;\n}\n\n",
            "renaming": {
                "FUN_00003ec4": "convert_to_decimal_string_00003ec4",
                "param_1": "outputString",
                "param_2": "inputNumber",
                "param_3": "precision",
                "iVar1": "digitsCount",
                "uVar2": "decimalDigitsCount",
                "uVar3": "quotient",
                "local_10": "remainder",
                "local_c": "totalDigitsCount"
            },
            "calling": [
                "FUN_00003e9e"
            ],
            "called": [
                "FUN_00003e58",
                "FUN_00004622",
                "FUN_00000f04",
                "FUN_00003ff4"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00003ff4": {
            "entrypoint": "0x00003ff4",
            "current_name": "copy_and_set_memory_region_00003ff4",
            "code": "\nuint copyAndSetMemoryRegion_00003ff4(int offset,uint srcAddress,uint dstAddress,undefined memoryValue)\n\n{\n  uint newDstAddress;\n  \n  newDstAddress = srcAddress;\n  if ((srcAddress < dstAddress) && (newDstAddress = dstAddress, offset != 0)) {\n    reverse_and_copy_000045ee((dstAddress - srcAddress) + offset,offset,srcAddress);\n    set_memory_region_00004622(offset,memoryValue,dstAddress - srcAddress);\n  }\n  return newDstAddress;\n}\n\n",
            "renaming": {
                "FUN_00003ff4": "copy_and_set_memory_region_00003ff4",
                "param_1": "offset",
                "param_2": "srcAddress",
                "param_3": "dstAddress",
                "param_4": "memoryValue",
                "uVar1": "newDstAddress"
            },
            "calling": [
                "FUN_00003ec4"
            ],
            "called": [
                "FUN_000045ee",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004042": {
            "entrypoint": "0x00004042",
            "current_name": "convert_string_to_number_00004042",
            "code": "\nvoid convertStringToNumber_00004042(undefined4 inputString)\n\n{\n  convert_string_to_number_00004f84(inputString,0,10);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004042": "convert_string_to_number_00004042",
                "param_1": "inputString"
            },
            "calling": [
                "FUN_00002fe0",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_00004f84"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000404c": {
            "entrypoint": "0x0000404c",
            "current_name": "process_data_0000404c",
            "code": "\nundefined4 processData_0000404c(uint *dataPtr,int *infoPtr)\n\n{\n  int result;\n  int *pointer;\n  uint size;\n  ushort flag;\n  int increment;\n  code *functionPtr;\n  int count;\n  uint temp;\n  bool isZero;\n  \n  flag = *(ushort *)(infoPtr + 3);\n  size = (uint)flag;\n  if ((int)(size << 0x1c) < 0) {\n    result = infoPtr[4];\n    if (result != 0) {\n      increment = size << 0x1e;\n      isZero = increment == 0;\n      count = *infoPtr;\n      if (isZero) {\n        increment = infoPtr[5];\n      }\n      *infoPtr = result;\n      if (!isZero) {\n        increment = 0;\n      }\n      infoPtr[2] = increment;\n      for (count = count - result; 0 < count; count = count - increment) {\n        increment = (*(code *)infoPtr[10])(dataPtr,infoPtr[8],result,count);\n        if (increment < 1) {\n          *(ushort *)(infoPtr + 3) = *(ushort *)(infoPtr + 3) | 0x40;\n          return 0xffffffff;\n        }\n        result = result + increment;\n      }\n    }\n  }\n  else {\n    if ((infoPtr[1] < 1) && (infoPtr[0x10] < 1)) {\n      return 0;\n    }\n    functionPtr = (code *)infoPtr[0xb];\n    if (functionPtr == (code *)0x0) {\n      return 0;\n    }\n    temp = *dataPtr;\n    *dataPtr = 0;\n    if ((flag & 0x1000) == 0) {\n      result = (*functionPtr)(dataPtr,infoPtr[8],size & 0x1000,1);\n      if ((result == -1) && (size = *dataPtr, size != 0)) {\n        if ((size == 0x1d) || (size == 0x16)) {\n          *dataPtr = temp;\n          return 0;\n        }\n        flag = *(ushort *)(infoPtr + 3);\n        goto LAB_00004104;\n      }\n    }\n    else {\n      result = infoPtr[0x15];\n    }\n    if (((int)((uint)*(ushort *)(infoPtr + 3) << 0x1d) < 0) &&\n       (result = result - infoPtr[1], infoPtr[0xd] != 0)) {\n      result = result - infoPtr[0x10];\n    }\n    result = (*(code *)infoPtr[0xb])(dataPtr,infoPtr[8],result,0);\n    flag = *(ushort *)(infoPtr + 3);\n    if ((result == -1) &&\n       ((0x1d < *dataPtr || (-1 < (int)((0x20400001U >> (*dataPtr & 0xff)) << 0x1f))))) {\nLAB_00004104:\n      *(ushort *)(infoPtr + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n    infoPtr[1] = 0;\n    *infoPtr = infoPtr[4];\n    if (((int)((uint)flag << 0x13) < 0) && ((result != -1 || (*dataPtr == 0)))) {\n      infoPtr[0x15] = result;\n    }\n    pointer = (int *)infoPtr[0xd];\n    *dataPtr = temp;\n    if (pointer != (int *)0x0) {\n      if (pointer != infoPtr + 0x11) {\n        update_data_00004b34(dataPtr);\n      }\n      infoPtr[0xd] = 0;\n      return 0;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000404c": "process_data_0000404c",
                "param_1": "dataPtr",
                "param_2": "infoPtr",
                "iVar1": "result",
                "piVar2": "pointer",
                "uVar3": "size",
                "uVar4": "flag",
                "iVar5": "increment",
                "pcVar6": "functionPtr",
                "iVar7": "count",
                "uVar8": "temp",
                "bVar9": "isZero"
            },
            "calling": [
                "FUN_00004158",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004158": {
            "entrypoint": "0x00004158",
            "current_name": "process_data_00004158",
            "code": "\nundefined4 processData_00004158(int inputStructPtr,undefined4 *outputStructPtr)\n\n{\n  undefined4 returnValue;\n  \n  if (outputStructPtr[4] != 0) {\n    if ((inputStructPtr != 0) && (*(int *)(inputStructPtr + 0x18) == 0)) {\n      initialize_memory_and_process_data_000042a4();\n    }\n    if (outputStructPtr == &DAT_000079b8) {\n      outputStructPtr = *(undefined4 **)(inputStructPtr + 4);\n    }\n    else if (outputStructPtr == (undefined4 *)&DAT_000079d8) {\n      outputStructPtr = *(undefined4 **)(inputStructPtr + 8);\n    }\n    else if (outputStructPtr == (undefined4 *)&DAT_00007998) {\n      outputStructPtr = *(undefined4 **)(inputStructPtr + 0xc);\n    }\n    if (*(short *)(outputStructPtr + 3) != 0) {\n      if ((-1 < (int)(outputStructPtr[0x19] << 0x1f)) && (-1 < (int)*(short *)(outputStructPtr + 3) << 0x16)) {\n        FUNC_000045e8(outputStructPtr[0x16]);\n      }\n      returnValue = process_data_0000404c(inputStructPtr,outputStructPtr);\n      if ((int)(outputStructPtr[0x19] << 0x1f) < 0) {\n        return returnValue;\n      }\n      if ((int)((uint)*(ushort *)(outputStructPtr + 3) << 0x16) < 0) {\n        return returnValue;\n      }\n      FUNC_000045ec(outputStructPtr[0x16]);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004158": "process_data_00004158",
                "param_1": "inputStructPtr",
                "param_2": "outputStructPtr",
                "uVar1": "returnValue"
            },
            "calling": [
                "FUN_000041d0",
                "FUN_00005404",
                "FUN_00006768"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 FUN_00004158(int param_1,undefined4 *param_2)\n\n{\n  undefined4 uVar1;\n  \n  if (param_2[4] != 0) {\n    if ((param_1 != 0) && (*(int *)(param_1 + 0x18) == 0)) {\n      FUNC_000042a4();\n    }\n    if (param_2 == &DAT_000079b8) {\n      param_2 = *(undefined4 **)(param_1 + 4);\n    }\n    else if (param_2 == (undefined4 *)&DAT_000079d8) {\n      param_2 = *(undefined4 **)(param_1 + 8);\n    }\n    else if (param_2 == (undefined4 *)&DAT_00007998) {\n      param_2 = *(undefined4 **)(param_1 + 0xc);\n    }\n    if (*(short *)(param_2 + 3) != 0) {\n      if ((-1 < (int)(param_2[0x19] << 0x1f)) && (-1 < (int)*(short *)(param_2 + 3) << 0x16)) {\n        FUNC_000045e8(param_2[0x16]);\n      }\n      uVar1 = process_data_0000404c(param_1,param_2);\n      if ((int)(param_2[0x19] << 0x1f) < 0) {\n        return uVar1;\n      }\n      if ((int)((uint)*(ushort *)(param_2 + 3) << 0x16) < 0) {\n        return uVar1;\n      }\n      FUNC_000045ec(param_2[0x16]);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_000041d0": {
            "entrypoint": "0x000041d0",
            "current_name": "process_relocation_entries_000041d0",
            "code": "\nuint process_relocation_entries_000041d0(int address,undefined4 offset,undefined4 size)\n\n{\n  uint result;\n  int count;\n  dword *reloc_entries;\n  int entry;\n  uint combined_result;\n  int remaining_count;\n  undefined4 *data_ptr;\n  \n  if (address == 0) {\n    data_ptr = &DAT_000079f8;\n    reloc_entries = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n    combined_result = 0;\n    do {\n      remaining_count = reloc_entries[1];\n      entry = reloc_entries[2];\n      while (remaining_count = remaining_count + -1, -1 < remaining_count) {\n        if ((1 < *(ushort *)(entry + 0xc)) && (count = *(short *)(entry + 0xe) + 1, count != 0)) {\n          result = process_data_00004158(0x1fff0284,entry,size,count,data_ptr);\n          combined_result = combined_result | result;\n        }\n        entry = entry + 0x68;\n      }\n      reloc_entries = (dword *)*reloc_entries;\n    } while (reloc_entries != (dword *)0x0);\n    return combined_result;\n  }\n  combined_result = process_data_00004158(Elf32_Rel_ARRAY_1fff0200[16].r_offset,address);\n  return combined_result;\n}\n\n",
            "renaming": {
                "FUN_000041d0": "process_relocation_entries_000041d0",
                "param_1": "address",
                "param_2": "offset",
                "param_3": "size",
                "uVar1": "result",
                "iVar2": "count",
                "pdVar3": "reloc_entries",
                "iVar4": "entry",
                "uVar5": "combined_result",
                "iVar6": "remaining_count",
                "puVar7": "data_ptr"
            },
            "calling": [
                "FUN_00002e48"
            ],
            "called": [
                "FUN_00004158"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000041f4": {
            "entrypoint": "0x000041f4",
            "current_name": "initialize_memory_000041f4",
            "code": "\nvoid initializeMemory_000041f4(undefined4 *memory,undefined2 value1,undefined2 value2)\n\n{\n  *memory = 0;\n  memory[1] = 0;\n  memory[4] = 0;\n  memory[5] = 0;\n  memory[2] = 0;\n  *(undefined2 *)(memory + 3) = value1;\n  memory[0x19] = 0;\n  *(undefined2 *)((int)memory + 0xe) = value2;\n  memory[6] = 0;\n  setMemoryRegion(memory + 0x17,0,8);\n  memory[9] = 0x4dc9;\n  memory[10] = 0x4def;\n  memory[0xb] = 0x4e27;\n  memory[8] = memory;\n  memory[0xc] = &LAB_00004e4a_1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_000041f4": "initialize_memory_000041f4",
                "param_1": "memory",
                "param_2": "value1",
                "param_3": "value2",
                "set_memory_region_00004622": "setMemoryRegion"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004248": {
            "entrypoint": "0x00004248",
            "current_name": "allocate_and_initialize_memory_00004248",
            "code": "\nundefined4 * allocate_and_initialize_memory_00004248(undefined4 memory_param,int size_param)\n\n{\n  undefined4 *memory_ptr;\n  int memory_offset;\n  \n  memory_offset = (size_param + -1) * 0x68;\n  memory_ptr = (undefined4 *)allocate_and_initialize_memory_00004248_00004bd0(memory_param,memory_offset + 0x74);\n  if (memory_ptr != (undefined4 *)0x0) {\n    *memory_ptr = 0;\n    memory_ptr[1] = size_param;\n    memory_ptr[2] = memory_ptr + 3;\n    set_memory_region_00004622(memory_ptr + 3,0,memory_offset + 0x68);\n  }\n  return memory_ptr;\n}\n\n",
            "renaming": {
                "FUN_00004248": "allocate_and_initialize_memory_00004248",
                "param_1": "memory_param",
                "param_2": "size_param",
                "puVar1": "memory_ptr",
                "iVar2": "memory_offset"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00004622"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004274": {
            "entrypoint": "0x00004274",
            "current_name": "initialize_data_00004274",
            "code": "\nvoid initializeData_00004274(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004274": "initialize_data_00004274"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004280": {
            "entrypoint": "0x00004280",
            "current_name": "initialize_data_00004280",
            "code": "\nvoid initializeData_00004280(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0dec);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004280": "initialize_data_00004280"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000428c": {
            "entrypoint": "0x0000428c",
            "current_name": "initialize_memory_0000428c",
            "code": "\nvoid initializeMemory_0000428c(void)\n\n{\n  FUNC_000045e8(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000428c": "initialize_memory_0000428c"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000042a4": {
            "entrypoint": "0x000042a4",
            "current_name": "initialize_memory_and_process_data_000042a4",
            "code": "\nvoid initialize_memory_and_process_data_000042a4(int memory_block_address)\n\n{\n  undefined4 status;\n  \n  initialize_memory();\n  if (*(int *)(memory_block_address + 0x18) == 0) {\n    *(undefined4 *)(memory_block_address + 0x48) = 0;\n    *(undefined4 *)(memory_block_address + 0x4c) = 0;\n    *(undefined4 *)(memory_block_address + 0x50) = 0;\n    status = 0x1fff0284;\n    *(undefined **)(memory_block_address + 0x28) = &DAT_0000423d;\n    if (memory_block_address == 0x1fff0284) {\n      status = 1;\n    }\n    if (memory_block_address == 0x1fff0284) {\n      *(undefined4 *)(memory_block_address + 0x18) = status;\n    }\n    status = FUNC_00004314(memory_block_address);\n    *(undefined4 *)(memory_block_address + 4) = status;\n    status = FUNC_00004314(memory_block_address);\n    *(undefined4 *)(memory_block_address + 8) = status;\n    status = FUNC_00004314(memory_block_address);\n    *(undefined4 *)(memory_block_address + 0xc) = status;\n    initialize_memory_segment(*(undefined4 *)(memory_block_address + 4),4,0);\n    initialize_memory_segment(*(undefined4 *)(memory_block_address + 8),9,1);\n    initialize_memory_segment(*(undefined4 *)(memory_block_address + 0xc),0x12,2);\n    *(undefined4 *)(memory_block_address + 0x18) = 1;\n  }\n  FUNC_000045ec(0x1fff0de7);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000042a4": "initialize_memory_and_process_data_000042a4",
                "param_1": "memory_block_address",
                "uVar1": "status",
                "initialize_memory_0000428c": "initialize_memory",
                "initialize_memory_000041f4": "initialize_memory_segment"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005404",
                "FUN_00005e10",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_00004c84",
                "FUN_00004cb4",
                "FUN_00004314",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000041f4",
                "FUN_000045ec",
                "FUN_0000428c",
                "FUN_00004314"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004314": {
            "entrypoint": "0x00004314",
            "current_name": "FUNC_00004314",
            "code": "\nundefined4 * FUNC_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    initialize_memory_and_process_data_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        set_memory_region_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_memory_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_00004314": "FUNC_00004314"
            },
            "calling": [
                "FUN_000042a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004622",
                "FUN_000045e4",
                "FUN_00004280",
                "FUN_00004248",
                "FUN_00004274"
            ],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": [],
            "code_backup": "\nundefined4 * FUN_00004314(undefined4 *param_1)\n\n{\n  dword dVar1;\n  int iVar2;\n  undefined4 *puVar3;\n  dword *pdVar4;\n  \n  initialize_data_00004274();\n  if (Elf32_Rel_ARRAY_1fff0200[19].r_info == 0) {\n    FUNC_000042a4(0x1fff0284);\n  }\n  pdVar4 = &Elf32_Rel_ARRAY_1fff0200[0x19].r_info;\n  do {\n    iVar2 = pdVar4[1];\n    puVar3 = (undefined4 *)pdVar4[2];\n    while (iVar2 = iVar2 + -1, -1 < iVar2) {\n      if (*(short *)(puVar3 + 3) == 0) {\n        puVar3[3] = 0xffff0001;\n        puVar3[0x19] = 0;\n        FUNC_000045e4(puVar3 + 0x16);\n        initialize_data_00004280();\n        puVar3[1] = 0;\n        puVar3[2] = 0;\n        puVar3[4] = 0;\n        puVar3[5] = 0;\n        *puVar3 = 0;\n        puVar3[6] = 0;\n        set_memory_region_00004622(puVar3 + 0x17,0,8);\n        puVar3[0xd] = 0;\n        puVar3[0xe] = 0;\n        puVar3[0x12] = 0;\n        puVar3[0x13] = 0;\n        return puVar3;\n      }\n      puVar3 = puVar3 + 0x1a;\n    }\n    if (*pdVar4 == 0) {\n      dVar1 = allocate_and_initialize_memory_00004248(param_1,4);\n      *pdVar4 = dVar1;\n      if (dVar1 == 0) {\n        initialize_data_00004280();\n        *param_1 = 0xc;\n        return (undefined4 *)0x0;\n      }\n    }\n    pdVar4 = (dword *)*pdVar4;\n  } while( true );\n}\n\n"
        },
        "FUN_000043a0": {
            "entrypoint": "0x000043a0",
            "current_name": "process_data_000043a0",
            "code": "\nuint process_data_000043a0(int input_data,code *callback_func)\n\n{\n  uint result;\n  int *data_ptr;\n  int offset;\n  uint combined_result;\n  int count;\n  \n  data_ptr = (int *)(input_data + 0x48);\n  combined_result = 0;\n  do {\n    count = data_ptr[1];\n    offset = data_ptr[2];\n    while (count = count + -1, -1 < count) {\n      if ((1 < *(ushort *)(offset + 0xc)) && (*(short *)(offset + 0xe) != -1)) {\n        result = (*callback_func)(offset);\n        combined_result = combined_result | result;\n      }\n      offset = offset + 0x68;\n    }\n    data_ptr = (int *)*data_ptr;\n  } while (data_ptr != (int *)0x0);\n  return combined_result;\n}\n\n",
            "renaming": {
                "FUN_000043a0": "process_data_000043a0",
                "param_1": "input_data",
                "param_2": "callback_func",
                "uVar1": "result",
                "piVar2": "data_ptr",
                "iVar3": "offset",
                "uVar4": "combined_result",
                "iVar5": "count"
            },
            "calling": [
                "FUN_00006768"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004418": {
            "entrypoint": "0x00004418",
            "current_name": "process_and_extract_data_00004418",
            "code": "\nuint process_and_extract_data_00004418(void)\n\n{\n  dword offset;\n  uint result;\n  byte **dataPtr;\n  byte *bytePtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  dataPtr = *(byte ***)(offset + 4);\n  if ((offset != 0) && (*(int *)(offset + 0x18) == 0)) {\n    initialize_memory_and_process_data_000042a4();\n  }\n  if (dataPtr == (byte **)&DAT_000079b8) {\n    dataPtr = *(byte ***)(offset + 4);\n  }\n  else if (dataPtr == (byte **)&DAT_000079d8) {\n    dataPtr = *(byte ***)(offset + 8);\n  }\n  else if (dataPtr == (byte **)&DAT_00007998) {\n    dataPtr = *(byte ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  bytePtr = dataPtr[1];\n  dataPtr[1] = bytePtr + -1;\n  if ((int)(bytePtr + -1) < 0) {\n    result = process_and_extract_byte_00005e10(offset,dataPtr);\n  }\n  else {\n    bytePtr = *dataPtr;\n    *dataPtr = bytePtr + 1;\n    result = (uint)*bytePtr;\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045ec(dataPtr[0x16]);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004418": "process_and_extract_data_00004418",
                "dVar1": "offset",
                "uVar2": "result",
                "ppbVar3": "dataPtr",
                "pbVar4": "bytePtr"
            },
            "calling": [
                "FUN_00002d94"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005e10",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000443c": {
            "entrypoint": "0x0000443c",
            "current_name": "get_date_time_components_0000443c",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000044a8) */\n\nuint * getDateTimeComponents_0000443c(undefined4 *dateTime,uint *dateTimeComponents)\n\n{\n  int remainder;\n  uint var1;\n  uint var2;\n  uint var3;\n  uint var4;\n  undefined4 param1;\n  undefined4 param2;\n  uint var5;\n  bool isNegative;\n  \n  param1 = *dateTime;\n  param2 = dateTime[1];\n  remainder = divide_and_remainder_00006974(param1,param2,0x15180,0);\n  var2 = 0x15180;\n  divide_and_remainder_00006974(param1,param2,0x15180,0);\n  isNegative = (int)var2 < 0;\n  if (isNegative) {\n    var2 = var2 + 0x15180;\n  }\n  if (isNegative) {\n    var1 = remainder + 0xafa6b;\n  }\n  else {\n    var1 = remainder + 0xafa6c;\n  }\n  dateTimeComponents[2] = var2 / 0xe10;\n  dateTimeComponents[1] = (var2 % 0xe10) / 0x3c;\n  *dateTimeComponents = (var2 % 0xe10) % 0x3c;\n  dateTimeComponents[6] = (var1 + 3) % 7;\n  var2 = var1;\n  if ((int)var1 < 0) {\n    var2 = var1 - 0x23ab0;\n  }\n  var1 = (var2 / 0x23ab1) * -0x23ab1 + var1;\n  var3 = ((var1 / 0x8eac + var1) - var1 / 0x5b4) - var1 / 0x23ab0;\n  var4 = var3 / 0x16d;\n  var1 = (var4 / 100 - var3 / 0x5b4) + var1 + var4 * -0x16d;\n  var5 = var1 * 5 + 2;\n  var3 = var5 / 0x99;\n  if (var5 < 0x5fa) {\n    remainder = 2;\n  }\n  else {\n    remainder = -10;\n  }\n  var5 = var3 + remainder;\n  remainder = (var2 / 0x23ab1) * 400 + var4;\n  if (var5 < 2) {\n    remainder = remainder + 1;\n  }\n  if (var1 < 0x132) {\n    if (((var4 & 3) == 0) && (var4 != (var4 / 100) * 100)) {\n      var2 = 1;\n    }\n    else {\n      var2 = (uint)(var4 % 400 == 0);\n    }\n    var2 = var1 + 0x3b + var2;\n  }\n  else {\n    var2 = var1 - 0x132;\n  }\n  dateTimeComponents[7] = var2;\n  dateTimeComponents[3] = (var1 + 1) - (var3 * 0x99 + 2) / 5;\n  dateTimeComponents[4] = var5;\n  dateTimeComponents[5] = remainder - 0x76c;\n  dateTimeComponents[8] = 0;\n  return dateTimeComponents;\n}\n\n",
            "renaming": {
                "FUN_0000443c": "get_date_time_components_0000443c",
                "param_1": "dateTime",
                "param_2": "dateTimeComponents",
                "iVar1": "remainder",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "param1",
                "uVar7": "param2",
                "uVar8": "var5",
                "bVar9": "isNegative"
            },
            "calling": [
                "FUN_00002624",
                "FUN_00002690"
            ],
            "called": [
                "FUN_00006974"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000459c": {
            "entrypoint": "0x0000459c",
            "current_name": "initialize_and_execute_functions_0000459c",
            "code": "\nvoid initialize_and_execute_functions_0000459c(void)\n\n{\n  code **function_pointers;\n  int index;\n  \n  function_pointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  }\n  initialize_memory_00000410();\n  function_pointers = (code **)&DAT_00007c58;\n  for (index = 0; index != 0; index = index + 1) {\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000459c": "initialize_and_execute_functions_0000459c",
                "ppcVar1": "function_pointers",
                "iVar2": "index"
            },
            "calling": [
                "entry"
            ],
            "called": [
                "FUN_00000410"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000045e4": {
            "entrypoint": "0x000045e4",
            "current_name": "FUNC_000045e4",
            "code": "\nvoid FUNC_000045e4(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e4": "FUNC_000045e4"
            },
            "calling": [
                "FUN_00004314"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045e8": {
            "entrypoint": "0x000045e8",
            "current_name": "FUNC_000045e8",
            "code": "\nvoid FUNC_000045e8(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045e8": "FUNC_000045e8"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_00004158",
                "FUN_00005790",
                "FUN_00004cb4",
                "FUN_0000428c",
                "FUN_00005fec",
                "FUN_000057f8",
                "FUN_00004274"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ec": {
            "entrypoint": "0x000045ec",
            "current_name": "FUNC_000045ec",
            "code": "\nvoid FUNC_000045ec(void)\n\n{\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ec": "FUNC_000045ec"
            },
            "calling": [
                "FUN_00004418",
                "FUN_00004db8",
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_00005ff8",
                "FUN_00004cb4",
                "FUN_00004280",
                "FUN_000057f8",
                "FUN_0000579c"
            ],
            "called": [],
            "improved": false,
            "skipped": true,
            "imported": false,
            "tags": []
        },
        "FUN_000045ee": {
            "entrypoint": "0x000045ee",
            "current_name": "reverse_and_copy_000045ee",
            "code": "\nvoid reverseAndCopy_000045ee(undefined *dest,undefined *src,int length)\n\n{\n  undefined *destPtr;\n  undefined *srcPtr;\n  \n  srcPtr = src + length;\n  if ((src < dest) && (dest < srcPtr)) {\n    destPtr = dest + length;\n    while (destPtr != dest) {\n      srcPtr = srcPtr + -1;\n      destPtr = destPtr + -1;\n      *destPtr = *srcPtr;\n    }\n  }\n  else {\n    dest = dest + -1;\n    for (; src != srcPtr; src = src + 1) {\n      dest = dest + 1;\n      *dest = *src;\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000045ee": "reverse_and_copy_000045ee",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "destPtr",
                "puVar2": "srcPtr"
            },
            "calling": [
                "FUN_00003ff4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004622": {
            "entrypoint": "0x00004622",
            "current_name": "set_memory_region_00004622",
            "code": "\nvoid setMemoryRegion_00004622(undefined *memoryPointer,undefined value,int length)\n\n{\n  undefined *endPointer;\n  \n  endPointer = memoryPointer + length;\n  for (; memoryPointer != endPointer; memoryPointer = memoryPointer + 1) {\n    *memoryPointer = value;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004622": "set_memory_region_00004622",
                "param_1": "memoryPointer",
                "param_2": "value",
                "param_3": "length",
                "puVar1": "endPointer"
            },
            "calling": [
                "FUN_00003ec4",
                "FUN_000041f4",
                "FUN_00003ff4",
                "FUN_0000305c",
                "FUN_00004314",
                "FUN_00004248"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004634": {
            "entrypoint": "0x00004634",
            "current_name": "update_date_time_00004634",
            "code": "\nvoid updateDateTime_00004634(uint *dateTime,uint daysToAdd,undefined4 uStack_18)\n\n{\n  int daysInMonth;\n  uint currentDay;\n  uint currentMonth;\n  int currentYear;\n  bool isNegative;\n  uint *quotient;\n  uint remainder;\n  undefined4 uStack_18;\n  \n  quotient = dateTime;\n  remainder = daysToAdd;\n  uStack_18 = uStack_18;\n  if (0x3b < *dateTime) {\n    divide_and_update_00005584(&quotient,*dateTime,0x3c);\n    currentDay = dateTime[1] + (int)quotient;\n    dateTime[1] = currentDay;\n    if ((int)remainder < 0) {\n      currentDay = currentDay - 1;\n      *dateTime = remainder + 0x3c;\n    }\n    else {\n      *dateTime = remainder;\n    }\n    if ((int)remainder < 0) {\n      dateTime[1] = currentDay;\n    }\n  }\n  if (0x3b < dateTime[1]) {\n    divide_and_update_00005584(&quotient,dateTime[1],0x3c);\n    isNegative = (int)remainder < 0;\n    currentMonth = dateTime[2] + (int)quotient;\n    dateTime[2] = currentMonth;\n    currentDay = remainder;\n    if (isNegative) {\n      currentDay = remainder + 0x3c;\n      currentMonth = currentMonth - 1;\n    }\n    if (!isNegative) {\n      dateTime[1] = currentDay;\n    }\n    if (isNegative) {\n      dateTime[1] = currentDay;\n    }\n    if (isNegative) {\n      dateTime[2] = currentMonth;\n    }\n  }\n  if (0x17 < dateTime[2]) {\n    divide_and_update_00005584(&quotient,dateTime[2],0x18);\n    isNegative = (int)remainder < 0;\n    currentMonth = dateTime[3] + (int)quotient;\n    dateTime[3] = currentMonth;\n    currentDay = remainder;\n    if (isNegative) {\n      currentDay = remainder + 0x18;\n      currentMonth = currentMonth - 1;\n    }\n    if (!isNegative) {\n      dateTime[2] = currentDay;\n    }\n    if (isNegative) {\n      dateTime[2] = currentDay;\n    }\n    if (isNegative) {\n      dateTime[3] = currentMonth;\n    }\n  }\n  if (0xb < dateTime[4]) {\n    divide_and_update_00005584(&quotient,dateTime[4],0xc);\n    isNegative = (int)remainder < 0;\n    currentDay = dateTime[5] + (int)quotient;\n    dateTime[5] = currentDay;\n    if (isNegative) {\n      remainder = remainder + 0xc;\n      currentDay = currentDay - 1;\n    }\n    if (!isNegative) {\n      dateTime[4] = remainder;\n    }\n    if (isNegative) {\n      dateTime[4] = remainder;\n    }\n    if (isNegative) {\n      dateTime[5] = currentDay;\n    }\n  }\n  currentDay = dateTime[5];\n  if ((currentDay & 3) == 0) {\n    if (currentDay == (currentDay / 100) * 100) {\n      if ((currentDay + 0x76c) % 400 == 0) {\n        currentYear = 0x1d;\n      }\n      else {\n        currentYear = 0x1c;\n      }\n    }\n    else {\n      currentYear = 0x1d;\n    }\n  }\n  else {\n    currentYear = 0x1c;\n  }\n  if ((int)dateTime[3] < 1) {\n    while ((int)dateTime[3] < 1) {\n      currentDay = dateTime[4];\n      dateTime[4] = currentDay - 1;\n      if (currentDay - 1 == 0xffffffff) {\n        currentMonth = dateTime[5];\n        currentDay = currentMonth - 1;\n        dateTime[4] = 0xb;\n        dateTime[5] = currentDay;\n        if ((currentDay & 3) == 0) {\n          if (currentDay == (currentDay / 100) * 100) {\n            if ((currentMonth + 0x76b) % 400 == 0) {\n              currentYear = 0x1d;\n            }\n            else {\n              currentYear = 0x1c;\n            }\n          }\n          else {\n            currentYear = 0x1d;\n          }\n        }\n        else {\n          currentYear = 0x1c;\n        }\n      }\n      daysInMonth = currentYear;\n      if (dateTime[4] != 1) {\n        daysInMonth = (&DAT_000079fc)[dateTime[4]];\n      }\n      dateTime[3] = daysInMonth + dateTime[3];\n    }\n  }\n  else {\n    while( true ) {\n      currentDay = dateTime[4];\n      daysInMonth = currentYear;\n      if (currentDay != 1) {\n        daysInMonth = (&DAT_000079fc)[currentDay];\n      }\n      if ((int)dateTime[3] <= daysInMonth) break;\n      dateTime[3] = dateTime[3] - daysInMonth;\n      dateTime[4] = currentDay + 1;\n      if (currentDay + 1 == 0xc) {\n        currentMonth = dateTime[5];\n        currentDay = currentMonth + 1;\n        dateTime[4] = 0;\n        dateTime[5] = currentDay;\n        if ((currentDay & 3) == 0) {\n          if (currentDay % 100 == 0) {\n            if ((currentMonth + 0x76d) % 400 == 0) {\n              currentYear = 0x1d;\n            }\n            else {\n              currentYear = 0x1c;\n            }\n          }\n          else {\n            currentYear = 0x1d;\n          }\n        }\n        else {\n          currentYear = 0x1c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004634": "update_date_time_00004634",
                "param_1": "dateTime",
                "param_2": "daysToAdd",
                "param_3": "uStack_18",
                "iVar1": "daysInMonth",
                "uVar2": "currentDay",
                "uVar3": "currentMonth",
                "iVar4": "currentYear",
                "bVar5": "isNegative",
                "local_20": "quotient",
                "local_1c": "remainder"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005584"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000047e4": {
            "entrypoint": "0x000047e4",
            "current_name": "calculate_date_time_000047e4",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00004ab2) */\n\nundefined8 calculateDateTime_000047e4(int *dateTime)\n\n{\n  longlong totalDays;\n  longlong updatedTotalDays;\n  int *memoryAddress;\n  uint tempVar4;\n  int tempVar5;\n  int tempVar6;\n  int tempVar7;\n  uint tempVar8;\n  uint tempVar9;\n  uint tempVar10;\n  int numLeapYears;\n  uint year;\n  uint isLeapYear;\n  uint numMonths;\n  uint currentDay;\n  bool isMultipleOf4;\n  \n  memoryAddress = (int *)get_memory_address_000056b0();\n  update_date_time_00004634(dateTime);\n  year = dateTime[5];\n  numLeapYears = dateTime[3] + -1 + *(int *)(&DAT_00007a2c + dateTime[4] * 4);\n  if (((1 < dateTime[4]) && ((year & 3) == 0)) &&\n     ((year != (year / 100) * 100 || (year + 0x76c == ((year + 0x76c) / 400) * 400)))) {\n    numLeapYears = numLeapYears + 1;\n  }\n  dateTime[7] = numLeapYears;\n  if (20000 < (int)&DAT_00002710 + year) {\n    tempVar7 = -1;\n    tempVar5 = -1;\n    goto LAB_00004aba;\n  }\n  if ((int)year < 0x47) {\n    if (year != 0x46) {\n      for (tempVar9 = 0x45; (int)year < (int)tempVar9; tempVar9 = tempVar9 - 1) {\n        if ((tempVar9 & 3) == 0) {\n          if (tempVar9 == (tempVar9 / 100) * 100) {\n            if ((tempVar9 + 0x76c) % 400 == 0) {\n              tempVar7 = 0x16e;\n            }\n            else {\n              tempVar7 = 0x16d;\n            }\n          }\n          else {\n            tempVar7 = 0x16e;\n          }\n        }\n        else {\n          tempVar7 = 0x16d;\n        }\n        numLeapYears = numLeapYears - tempVar7;\n      }\n      if ((tempVar9 & 3) == 0) {\n        if (year == (year / 100) * 100) {\n          tempVar7 = 0x16d;\n          if ((year + 0x76c) % 400 == 0) {\n            tempVar7 = 0x16e;\n          }\n        }\n        else {\n          tempVar7 = 0x16e;\n        }\n      }\n      else {\n        tempVar7 = 0x16d;\n      }\n      numLeapYears = numLeapYears - tempVar7;\n    }\n  }\n  else {\n    tempVar9 = 0x46;\n    do {\n      if ((tempVar9 & 3) == 0) {\n        if (tempVar9 % 100 == 0) {\n          if ((tempVar9 + 0x76c) % 400 == 0) {\n            tempVar7 = 0x16e;\n          }\n          else {\n            tempVar7 = 0x16d;\n          }\n        }\n        else {\n          tempVar7 = 0x16e;\n        }\n      }\n      else {\n        tempVar7 = 0x16d;\n      }\n      tempVar9 = tempVar9 + 1;\n      numLeapYears = numLeapYears + tempVar7;\n    } while (year != tempVar9);\n  }\n  totalDays = (longlong)numLeapYears * 0x15180 + (longlong)(dateTime[2] * 0xe10 + dateTime[1] * 0x3c + *dateTime)\n  ;\n  currentDay = (uint)totalDays;\n  tempVar7 = (int)((ulonglong)totalDays >> 0x20);\n  get_starting_address_000050e8();\n  process_key_00005100();\n  tempVar9 = DAT_1fff0dd8;\n  if (DAT_1fff0dd8 == 0) {\nLAB_00004934:\n    year = memoryAddress[10];\n    tempVar7 = (uint)totalDays + year;\n    tempVar5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)totalDays,year);\n  }\n  else {\n    numMonths = dateTime[8];\n    isLeapYear = numMonths;\n    if (0 < (int)numMonths) {\n      isLeapYear = 1;\n    }\n    if ((memoryAddress[1] == dateTime[5] + 0x76c) || (tempVar5 = calculate_day_of_week_00004f98(), tempVar5 != 0)) {\n      tempVar10 = memoryAddress[0x14];\n      tempVar4 = memoryAddress[0x12];\n      tempVar8 = memoryAddress[10];\n      tempVar9 = tempVar4 - tempVar8;\n      tempVar5 = (memoryAddress[0x13] - ((int)tempVar8 >> 0x1f)) - (uint)(tempVar4 < tempVar8);\n      if (((int)((tempVar7 - tempVar5) - (uint)(currentDay < tempVar9)) < 0 ==\n           (SBORROW4(tempVar7,tempVar5) != SBORROW4(tempVar7 - tempVar5,(uint)(currentDay < tempVar9)))) &&\n         (tempVar6 = (memoryAddress[0x13] - ((int)tempVar10 >> 0x1f)) - (uint)(tempVar4 < tempVar10),\n         isMultipleOf4 = currentDay < tempVar4 - tempVar10,\n         (int)((tempVar7 - tempVar6) - (uint)isMultipleOf4) < 0 !=\n         (SBORROW4(tempVar7,tempVar6) != SBORROW4(tempVar7 - tempVar6,(uint)isMultipleOf4)))) goto LAB_00004a88;\n      tempVar4 = memoryAddress[8] - tempVar10;\n      tempVar6 = (memoryAddress[9] - ((int)tempVar10 >> 0x1f)) - (uint)((uint)memoryAddress[8] < tempVar10);\n      if (*memoryAddress != 0) {\n        if ((int)((tempVar7 - tempVar6) - (uint)(currentDay < tempVar4)) < 0 ==\n            (SBORROW4(tempVar7,tempVar6) != SBORROW4(tempVar7 - tempVar6,(uint)(currentDay < tempVar4))))\n        goto LAB_0000491e;\nLAB_0000492a:\n        tempVar9 = 0;\n        if ((int)numMonths < 0) goto LAB_00004934;\nLAB_00004a14:\n        currentDay = isLeapYear ^ tempVar9;\n        isLeapYear = tempVar9;\n        if (currentDay == 1) {\n          if (tempVar9 == 0) {\n            tempVar7 = tempVar10 - tempVar8;\n          }\n          else {\n            tempVar7 = tempVar8 - tempVar10;\n          }\n          tempVar5 = dateTime[3];\n          *dateTime = *dateTime + tempVar7;\n          updatedTotalDays = totalDays + tempVar7;\n          update_date_time_00004634(dateTime);\n          tempVar5 = dateTime[3] - tempVar5;\n          totalDays = totalDays + tempVar7;\n          if (tempVar5 != 0) {\n            if (tempVar5 < 2) {\n              if (tempVar5 == -2 || tempVar5 + 2 < 0 != SCARRY4(tempVar5,2)) {\n                tempVar5 = 1;\n              }\n            }\n            else {\n              tempVar5 = -1;\n            }\n            tempVar7 = tempVar5 + dateTime[7];\n            numLeapYears = numLeapYears + tempVar5;\n            if (tempVar7 < 0) {\n              tempVar9 = year - 1;\n              if ((tempVar9 & 3) == 0) {\n                if (tempVar9 == (tempVar9 / 100) * 100) {\n                  tempVar7 = 0x16d;\n                  if ((year + 0x76b) % 400 != 0) {\n                    tempVar7 = 0x16c;\n                  }\n                }\n                else {\n                  tempVar7 = 0x16d;\n                }\n              }\n              else {\n                tempVar7 = 0x16c;\n              }\n            }\n            else {\n              if ((year & 3) == 0) {\n                if (year == (year / 100) * 100) {\n                  tempVar5 = 0x16d;\n                  if ((year + 0x76c) % 400 == 0) {\n                    tempVar5 = 0x16e;\n                  }\n                }\n                else {\n                  tempVar5 = 0x16e;\n                }\n              }\n              else {\n                tempVar5 = 0x16d;\n              }\n              if (tempVar5 <= tempVar7) {\n                tempVar7 = tempVar7 - tempVar5;\n              }\n            }\n            dateTime[7] = tempVar7;\n            totalDays = updatedTotalDays;\n          }\n        }\n        goto LAB_00004a88;\n      }\n      if ((int)((tempVar7 - tempVar6) - (uint)(currentDay < tempVar4)) < 0 !=\n          (SBORROW4(tempVar7,tempVar6) != SBORROW4(tempVar7 - tempVar6,(uint)(currentDay < tempVar4)))) {\nLAB_0000491e:\n        if ((int)((tempVar7 - tempVar5) - (uint)(currentDay < tempVar9)) < 0 ==\n            (SBORROW4(tempVar7,tempVar5) != SBORROW4(tempVar7 - tempVar5,(uint)(currentDay < tempVar9))))\n        goto LAB_0000492a;\n      }\n      if (-1 < (int)numMonths) {\n        tempVar9 = 1;\n        goto LAB_00004a14;\n      }\n    }\n    else {\nLAB_00004a88:\n      tempVar9 = isLeapYear;\n      if (isLeapYear != 1) goto LAB_00004934;\n    }\n    year = memoryAddress[0x14];\n    tempVar7 = (uint)totalDays + year;\n    tempVar5 = (int)((ulonglong)totalDays >> 0x20) +\n            ((int)year >> 0x1f) + (uint)CARRY4((uint)totalDays,year);\n    tempVar9 = 1;\n  }\n  get_memory_location_000050f4();\n  dateTime[8] = tempVar9;\n  dateTime[6] = (numLeapYears + 4U) % 7;\nLAB_00004aba:\n  return CONCAT44(tempVar5,tempVar7);\n}\n\n",
            "renaming": {
                "FUN_000047e4": "calculate_date_time_000047e4",
                "param_1": "dateTime",
                "lVar1": "totalDays",
                "lVar2": "updatedTotalDays",
                "piVar3": "memoryAddress",
                "uVar4": "tempVar4",
                "iVar5": "tempVar5",
                "iVar6": "tempVar6",
                "iVar7": "tempVar7",
                "uVar8": "tempVar8",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "iVar11": "numLeapYears",
                "uVar12": "year",
                "uVar13": "isLeapYear",
                "uVar14": "numMonths",
                "uVar15": "currentDay",
                "bVar16": "isMultipleOf4"
            },
            "calling": [
                "FUN_00002600",
                "FUN_00002654"
            ],
            "called": [
                "FUN_00005100",
                "FUN_000050e8",
                "FUN_00004f98",
                "FUN_000050f4",
                "FUN_00004634",
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004b34": {
            "entrypoint": "0x00004b34",
            "current_name": "update_data_00004b34",
            "code": "\nvoid updateData_00004b34(undefined4 *output,int inputSize,undefined4 param3,undefined4 param4)\n\n{\n  int *tempVar1;\n  int **ppiVar6;\n  int **currentNode;\n  int **previousNode;\n  int **nextNode;\n  int **newNode;\n  bool isMatch;\n  \n  if (inputSize == 0) {\n    return;\n  }\n  newNode = (int **)(inputSize + -4);\n  if (*(int *)(inputSize + -4) < 0) {\n    newNode = (int **)((int)newNode + *(int *)(inputSize + -4));\n  }\n  initialize_data_00005790();\n  previousNode = (int **)&DAT_1fff0db4;\n  if (DAT_1fff0db4 == (int **)0x0) {\n    newNode[1] = (int *)0x0;\n    currentNode = ppiVar6;\n    DAT_1fff0db4 = newNode;\n  }\n  else {\n    nextNode = DAT_1fff0db4;\n    if (newNode < DAT_1fff0db4) {\n      currentNode = (int **)*newNode;\n      previousNode = (int **)((int)newNode + (int)currentNode);\n      isMatch = DAT_1fff0db4 == previousNode;\n      if (isMatch) {\n        previousNode = (int **)*DAT_1fff0db4;\n        DAT_1fff0db4 = (int **)DAT_1fff0db4[1];\n      }\n      newNode[1] = (int *)DAT_1fff0db4;\n      DAT_1fff0db4 = newNode;\n      if (isMatch) {\n        previousNode = (int **)((int)previousNode + (int)currentNode);\n        *newNode = (int *)previousNode;\n      }\n    }\n    else {\n      do {\n        previousNode = nextNode;\n        nextNode = (int **)previousNode[1];\n        if (nextNode == (int **)0x0) break;\n      } while (nextNode <= newNode);\n      currentNode = (int **)*previousNode;\n      if ((int **)((int)previousNode + (int)currentNode) == newNode) {\n        currentNode = (int **)((int)currentNode + (int)*newNode);\n        *previousNode = (int *)currentNode;\n        if (nextNode == (int **)((int)previousNode + (int)currentNode)) {\n          tempVar1 = *nextNode;\n          previousNode[1] = nextNode[1];\n          currentNode = (int **)((int)currentNode + (int)tempVar1);\n          *previousNode = (int *)currentNode;\n        }\n      }\n      else if (newNode < (int **)((int)previousNode + (int)currentNode)) {\n        *output = 0xc;\n      }\n      else {\n        currentNode = (int **)((int)newNode + (int)*newNode);\n        isMatch = nextNode == currentNode;\n        if (isMatch) {\n          currentNode = (int **)*nextNode;\n          nextNode = (int **)nextNode[1];\n        }\n        newNode[1] = (int *)nextNode;\n        if (isMatch) {\n          currentNode = (int **)((int)currentNode + (int)*newNode);\n          *newNode = (int *)currentNode;\n        }\n        previousNode[1] = (int *)newNode;\n      }\n    }\n  }\n  initialize_data_0000579c(output,currentNode,previousNode,param4);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004b34": "update_data_00004b34",
                "param_1": "output",
                "param_2": "inputSize",
                "param_3": "param3",
                "param_4": "param4",
                "piVar1": "tempVar1",
                "extraout_r1": "ppiVar6",
                "ppiVar2": "currentNode",
                "ppiVar3": "previousNode",
                "ppiVar4": "nextNode",
                "ppiVar5": "newNode",
                "bVar6": "isMatch"
            },
            "calling": [
                "FUN_0000404c",
                "FUN_00006192",
                "FUN_00005780",
                "FUN_000054a8",
                "FUN_00006768",
                "FUN_000060cc"
            ],
            "called": [
                "FUN_00005790",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004bd0": {
            "entrypoint": "0x00004bd0",
            "current_name": "allocate_and_initialize_memory_00004bd0",
            "code": "\nuint allocate_and_initialize_memory_00004bd0(undefined4 *output,uint input_size,undefined4 param_3,undefined4 param_4)\n\n{\n  uint *previous_block;\n  int difference;\n  uint block_difference;\n  uint *current_block;\n  uint aligned_size;\n  \n  aligned_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (aligned_size < 0xc) {\n    aligned_size = 0xc;\n  }\n  if (((int)aligned_size < 0) || (aligned_size < input_size)) {\n    *output = 0xc;\n  }\n  else {\n    initialize_data_00005790();\n    previous_block = DAT_1fff0db4;\n    for (current_block = DAT_1fff0db4; current_block != (uint *)0x0; current_block = (uint *)current_block[1]) {\n      block_difference = *current_block - aligned_size;\n      if (-1 < (int)block_difference) {\n        if (0xb < block_difference) {\n          *current_block = block_difference;\n          current_block = (uint *)((int)current_block + block_difference);\n          goto LAB_00004c34;\n        }\n        if (previous_block == current_block) {\n          DAT_1fff0db4 = (uint *)current_block[1];\n        }\n        if (previous_block != current_block) {\n          previous_block[1] = (uint)(uint *)current_block[1];\n        }\n        goto LAB_00004c42;\n      }\n      previous_block = current_block;\n    }\n    if (DAT_1fff0db8 == 0) {\n      DAT_1fff0db8 = modify_rel_offset_00000428(output,0,previous_block,0,param_4);\n    }\n    previous_block = (uint *)modify_rel_offset_00000428(output,aligned_size);\n    if ((previous_block != (uint *)0xffffffff) &&\n       ((current_block = (uint *)((int)previous_block + 3U & 0xfffffffc), previous_block == current_block ||\n        (difference = modify_rel_offset_00000428(output,(int)current_block - (int)previous_block), difference != -1)))) {\nLAB_00004c34:\n      *current_block = aligned_size;\nLAB_00004c42:\n      initialize_data_0000579c(output);\n      aligned_size = (int)current_block + 0xbU & 0xfffffff8;\n      difference = aligned_size - (int)(current_block + 1);\n      if (difference == 0) {\n        return aligned_size;\n      }\n      *(uint *)((int)current_block + difference) = (int)(current_block + 1) - aligned_size;\n      return aligned_size;\n    }\n    *output = 0xc;\n    initialize_data_0000579c(output);\n  }\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_00004bd0": "allocate_and_initialize_memory_00004bd0",
                "param_1": "output",
                "param_2": "input_size",
                "puVar1": "previous_block",
                "iVar2": "difference",
                "uVar3": "block_difference",
                "puVar4": "current_block",
                "uVar5": "aligned_size"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000068f0",
                "FUN_000060cc",
                "FUN_00005700",
                "FUN_00004248"
            ],
            "called": [
                "FUN_00005790",
                "FUN_00000428",
                "FUN_0000579c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004c84": {
            "entrypoint": "0x00004c84",
            "current_name": "process_data_with_offset_00004c84",
            "code": "\nvoid process_data_with_offset_00004c84(undefined4 input_param,undefined4 param_2,undefined4 param_3,undefined4 param_4)\n\n{\n  dword data_offset;\n  undefined4 input_param_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  \n  data_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  input_param_copy = input_param;\n  param_2_copy = param_2;\n  param_3_copy = param_3;\n  param_4_copy = param_4;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  process_data_000057f8(data_offset,*(undefined4 *)(data_offset + 8),input_param,&param_2_copy,input_param_copy,&param_2_copy);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004c84": "process_data_with_offset_00004c84",
                "param_1": "input_param",
                "dVar1": "data_offset",
                "uVar2": "input_param_copy",
                "uStack_c": "param_2_copy",
                "uStack_8": "param_3_copy",
                "uStack_4": "param_4_copy"
            },
            "calling": [
                "FUN_00000ed8",
                "FUN_00003694",
                "FUN_00002fe0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_0000211c",
                "FUN_00002f74",
                "FUN_00003524",
                "FUN_00002ecc",
                "FUN_0000316c",
                "FUN_00000f04",
                "FUN_00003378",
                "FUN_0000305c"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057f8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004cb4": {
            "entrypoint": "0x00004cb4",
            "current_name": "process_input_00004cb4",
            "code": "\nuint process_input_00004cb4(uint input_value)\n\n{\n  dword rel_offset;\n  undefined4 *data_ptr;\n  uint counter;\n  undefined *ptr;\n  undefined4 unused_reg4;\n  undefined4 unused_reg5;\n  \n  rel_offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  data_ptr = *(undefined4 **)(rel_offset + 8);\n  if ((rel_offset != 0) && (*(int *)(rel_offset + 0x18) == 0)) {\n    initialize_memory_and_process_data_000042a4();\n  }\n  if (data_ptr == &DAT_000079b8) {\n    data_ptr = *(undefined4 **)(rel_offset + 4);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_000079d8) {\n    data_ptr = *(undefined4 **)(rel_offset + 8);\n  }\n  else if (data_ptr == (undefined4 *)&DAT_00007998) {\n    data_ptr = *(undefined4 **)(rel_offset + 0xc);\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045e8(data_ptr[0x16]);\n  }\n  counter = data_ptr[2] - 1;\n  data_ptr[2] = counter;\n  if (((int)counter < 0) && (((int)counter < (int)data_ptr[6] || (counter = input_value & 0xff, counter == 10))))\n  {\n    input_value = process_data_00005404(rel_offset,input_value,data_ptr,counter,unused_reg4,unused_reg5);\n  }\n  else {\n    ptr = (undefined *)*data_ptr;\n    *data_ptr = ptr + 1;\n    *ptr = (char)input_value;\n    input_value = input_value & 0xff;\n  }\n  if ((-1 < (int)(data_ptr[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(data_ptr + 3) << 0x16))) {\n    FUNC_000045ec(data_ptr[0x16]);\n  }\n  return input_value;\n}\n\n",
            "renaming": {
                "FUN_00004cb4": "process_input_00004cb4",
                "param_1": "input_value",
                "dVar1": "rel_offset",
                "puVar2": "data_ptr",
                "uVar3": "counter",
                "puVar4": "ptr",
                "unaff_r4": "unused_reg4",
                "unaff_r5": "unused_reg5"
            },
            "calling": [
                "FUN_00002a00"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004db8": {
            "entrypoint": "0x00004db8",
            "current_name": "process_data_and_print_00004db8",
            "code": "\nundefined4 processDataAndPrint_00004db8(int inputSize)\n\n{\n  char currentChar;\n  dword offset;\n  int result;\n  char *strPtr;\n  char **dataPtr;\n  undefined4 returnValue;\n  char *inputPtr;\n  \n  offset = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_data_000042a4();\n  }\n  dataPtr = *(char ***)(offset + 8);\n  if (*(int *)(offset + 0x18) == 0) {\n    initialize_memory_and_process_data_000042a4(offset);\n  }\n  if (dataPtr == (char **)&DAT_000079b8) {\n    dataPtr = *(char ***)(offset + 4);\n  }\n  else if (dataPtr == (char **)&DAT_000079d8) {\n    dataPtr = *(char ***)(offset + 8);\n  }\n  else if (dataPtr == (char **)&DAT_00007998) {\n    dataPtr = *(char ***)(offset + 0xc);\n  }\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045e8(dataPtr[0x16]);\n  }\n  if ((((int)((uint)*(ushort *)(dataPtr + 3) << 0x1c) < 0) && (dataPtr[4] != (char *)0x0)) ||\n     (result = process_data_000054a8(offset,dataPtr), result == 0)) {\n    inputPtr = (char *)(inputSize + -1);\n    do {\n      while( true ) {\n        inputPtr = inputPtr + 1;\n        currentChar = *inputPtr;\n        strPtr = dataPtr[2] + -1;\n        dataPtr[2] = strPtr;\n        if (currentChar == '\\0') {\n          if (-1 < (int)strPtr) {\n            inputPtr = *dataPtr;\n            returnValue = 10;\n            *dataPtr = inputPtr + 1;\n            *inputPtr = '\\n';\n            goto LAB_00004d64;\n          }\n          result = process_data_00005404(offset,10,dataPtr);\n          if (result != -1) {\n            returnValue = 10;\n            goto LAB_00004d64;\n          }\n          goto LAB_00004d60;\n        }\n        if (((int)strPtr < 0) && (((int)strPtr < (int)dataPtr[6] || (currentChar == '\\n')))) break;\n        strPtr = *dataPtr;\n        *dataPtr = strPtr + 1;\n        *strPtr = currentChar;\n      }\n      result = process_data_00005404(offset,currentChar,dataPtr);\n    } while (result != -1);\n  }\nLAB_00004d60:\n  returnValue = 0xffffffff;\nLAB_00004d64:\n  if ((-1 < (int)dataPtr[0x19] << 0x1f) && (-1 < (int)((uint)*(ushort *)(dataPtr + 3) << 0x16))) {\n    FUNC_000045ec(dataPtr[0x16]);\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004db8": "process_data_and_print_00004db8",
                "param_1": "inputSize",
                "cVar1": "currentChar",
                "dVar2": "offset",
                "iVar3": "result",
                "pcVar4": "strPtr",
                "pcVar7": "inputPtr",
                "ppcVar5": "dataPtr",
                "uVar6": "returnValue"
            },
            "calling": [
                "FUN_00003694",
                "FUN_00003478",
                "FUN_00002fe0",
                "FUN_000031e0",
                "FUN_00002b10",
                "FUN_00002a88",
                "FUN_000033f4",
                "FUN_00002f74",
                "FUN_000034c0",
                "FUN_00003444",
                "FUN_00002f30",
                "FUN_0000305c",
                "FUN_000033c0",
                "FUN_000023a4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00005404",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dc8": {
            "entrypoint": "0x00004dc8",
            "current_name": "update_count_and_offset_00004dc8",
            "code": "\nvoid updateCountAndOffset_00004dc8(undefined4 sourceData,int destinationData)\n\n{\n  int copyCount;\n  uint offset;\n  bool isCopySuccessful;\n  \n  copyCount = copy_and_count_00000490(sourceData,(int)*(short *)(destinationData + 0xe));\n  isCopySuccessful = -1 < copyCount;\n  if (isCopySuccessful) {\n    offset = *(int *)(destinationData + 0x54) + copyCount;\n  }\n  else {\n    offset = *(ushort *)(destinationData + 0xc) & 0xffffefff;\n  }\n  if (isCopySuccessful) {\n    *(uint *)(destinationData + 0x54) = offset;\n  }\n  if (!isCopySuccessful) {\n    *(short *)(destinationData + 0xc) = (short)offset;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004dc8": "update_count_and_offset_00004dc8",
                "param_1": "sourceData",
                "param_2": "destinationData",
                "iVar1": "copyCount",
                "uVar2": "offset",
                "bVar3": "isCopySuccessful"
            },
            "calling": [],
            "called": [
                "FUN_00000490"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004dee": {
            "entrypoint": "0x00004dee",
            "current_name": "process_data_00004dee",
            "code": "\nundefined4 processData_00004dee(undefined4 input,int dataPtr,undefined4 outputPtr,undefined4 copyPtr)\n\n{\n  undefined4 returnValue;\n  \n  if ((int)((uint)*(ushort *)(dataPtr + 0xc) << 0x17) < 0) {\n    initialize_value_and_return_000004f2(input,(int)*(short *)(dataPtr + 0xe),0,2);\n  }\n  *(ushort *)(dataPtr + 0xc) = *(ushort *)(dataPtr + 0xc) & 0xefff;\n  returnValue = copy_data_and_return_00000e38(outputPtr,copyPtr);\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00004dee": "process_data_00004dee",
                "param_1": "input",
                "param_2": "dataPtr",
                "param_3": "outputPtr",
                "param_4": "copyPtr",
                "uVar1": "returnValue"
            },
            "calling": [],
            "called": [
                "FUN_000004f2",
                "FUN_00000e38"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e26": {
            "entrypoint": "0x00004e26",
            "current_name": "update_value_00004e26",
            "code": "\nvoid updateValue_00004e26(undefined4 value1,int pointer)\n\n{\n  int initializedValue;\n  ushort newShort;\n  bool isNegative;\n  \n  initializedValue = initialize_value_and_return_000004f2(value1,(int)*(short *)(pointer + 0xe));\n  isNegative = initializedValue == -1;\n  if (isNegative) {\n    newShort = *(ushort *)(pointer + 0xc) & 0xefff;\n  }\n  else {\n    *(int *)(pointer + 0x54) = initializedValue;\n    newShort = *(ushort *)(pointer + 0xc) | 0x1000;\n  }\n  if (isNegative) {\n    *(ushort *)(pointer + 0xc) = newShort;\n  }\n  if (!isNegative) {\n    *(ushort *)(pointer + 0xc) = newShort;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00004e26": "update_value_00004e26",
                "param_1": "value1",
                "param_2": "pointer",
                "iVar1": "initializedValue",
                "uVar2": "newShort",
                "bVar3": "isNegative"
            },
            "calling": [],
            "called": [
                "FUN_000004f2"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e52": {
            "entrypoint": "0x00004e52",
            "current_name": "compare_byte_arrays_00004e52",
            "code": "\nint compareByteArrays_00004e52(byte *array1,byte *array2)\n\n{\n  byte currentByte1;\n  uint currentByte2;\n  bool isEqual;\n  \n  do {\n    currentByte2 = (uint)*array1;\n    currentByte1 = *array2;\n    isEqual = currentByte2 == 1;\n    if (currentByte2 != 0) {\n      isEqual = currentByte2 == currentByte1;\n    }\n    array1 = array1 + 1;\n    array2 = array2 + 1;\n  } while (isEqual);\n  return currentByte2 - currentByte1;\n}\n\n",
            "renaming": {
                "FUN_00004e52": "compare_byte_arrays_00004e52",
                "param_1": "array1",
                "param_2": "array2",
                "bVar1": "currentByte1",
                "uVar2": "currentByte2",
                "bVar3": "isEqual"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00002a18",
                "FUN_00004e52",
                "FUN_00002fe0",
                "FUN_0000316c",
                "FUN_00002b10"
            ],
            "called": [
                "FUN_00004e52"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004e66": {
            "entrypoint": "0x00004e66",
            "current_name": "compare_and_subtract_00004e66",
            "code": "\nint compareAndSubtract_00004e66(byte *data,int index,int length)\n\n{\n  byte *currentByte;\n  int difference;\n  byte *nextByte;\n  uint value;\n  \n  if (length == 0) {\n    difference = 0;\n  }\n  else {\n    nextByte = (byte *)(index + -1);\n    currentByte = data;\n    do {\n      value = (uint)*currentByte;\n      nextByte = nextByte + 1;\n      if ((value != *nextByte) || (currentByte + 1 == data + length)) break;\n      currentByte = currentByte + 1;\n    } while (value != 0);\n    difference = value - *nextByte;\n  }\n  return difference;\n}\n\n",
            "renaming": {
                "FUN_00004e66": "compare_and_subtract_00004e66",
                "param_1": "data",
                "param_2": "index",
                "param_3": "length",
                "pbVar1": "currentByte",
                "iVar2": "difference",
                "pbVar3": "nextByte",
                "uVar4": "value"
            },
            "calling": [
                "FUN_00003524",
                "FUN_0000562c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f84": {
            "entrypoint": "0x00004f84",
            "current_name": "convert_string_to_number_00004f84",
            "code": "\nuint convertStringToNumber_00004f84(byte *inputString,byte **outputString,uint base)\n\n{\n  uint result;\n  uint currentChar;\n  uint isNegative;\n  uint currentDigit;\n  int comparisonResult;\n  uint maxResultValue;\n  uint maxDivisor;\n  byte *currentPtr;\n  byte *nextPtr;\n  \n  nextPtr = inputString;\n  do {\n    currentPtr = nextPtr;\n    nextPtr = currentPtr + 1;\n    currentChar = (uint)*currentPtr;\n    isNegative = (byte)(&DAT_00007a99)[currentChar] & 8;\n  } while (((&DAT_00007a99)[currentChar] & 8) != 0);\n  if (currentChar == 0x2d) {\n    currentChar = (uint)*nextPtr;\n    isNegative = 1;\n    nextPtr = currentPtr + 2;\n  }\n  else if (currentChar == 0x2b) {\n    currentChar = (uint)*nextPtr;\n    nextPtr = currentPtr + 2;\n  }\n  if (base == 0) {\n    if (currentChar != 0x30) {\n      base = 10;\n      goto LAB_00004ed6;\n    }\n  }\n  else if ((base != 0x10) || (currentChar != 0x30)) goto LAB_00004ed6;\n  if ((*nextPtr & 0xdf) == 0x58) {\n    currentChar = (uint)nextPtr[1];\n    base = 0x10;\n    nextPtr = nextPtr + 2;\n  }\n  else {\n    currentChar = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00004ed6:\n  maxResultValue = isNegative + 0x7fffffff;\n  comparisonResult = 0;\n  maxDivisor = maxResultValue / base;\n  result = 0;\n  do {\n    currentDigit = currentChar - 0x30;\n    if (9 < currentDigit) {\n      if (currentChar - 0x41 < 0x1a) {\n        currentDigit = currentChar - 0x37;\n      }\n      else {\n        if (0x19 < currentChar - 0x61) break;\n        currentDigit = currentChar - 0x57;\n      }\n    }\n    if ((int)base <= (int)currentDigit) break;\n    if (comparisonResult != -1) {\n      if ((maxDivisor < result) || ((maxDivisor == result && ((int)(maxResultValue - base * maxDivisor) < (int)currentDigit)))) {\n        comparisonResult = -1;\n      }\n      else {\n        result = result * base + currentDigit;\n        comparisonResult = 1;\n      }\n    }\n    currentChar = (uint)*nextPtr;\n    nextPtr = nextPtr + 1;\n  } while( true );\n  if (comparisonResult == -1) {\n    *(undefined4 *)Elf32_Rel_ARRAY_1fff0200[16].r_offset = 0x22;\n    result = maxResultValue;\n    if (outputString == (byte **)0x0) {\n      return maxResultValue;\n    }\n  }\n  else {\n    if (isNegative != 0) {\n      result = -result;\n    }\n    if (outputString == (byte **)0x0) {\n      return result;\n    }\n    if (comparisonResult == 0) goto LAB_00004f64;\n  }\n  inputString = nextPtr + -1;\nLAB_00004f64:\n  *outputString = inputString;\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f84": "convert_string_to_number_00004f84",
                "param_1": "inputString",
                "param_2": "outputString",
                "param_3": "base",
                "uVar1": "result",
                "uVar2": "currentChar",
                "uVar3": "isNegative",
                "uVar4": "currentDigit",
                "iVar5": "comparisonResult",
                "uVar6": "maxResultValue",
                "uVar7": "maxDivisor",
                "pbVar8": "currentPtr",
                "pbVar9": "nextPtr"
            },
            "calling": [
                "FUN_00004042",
                "FUN_0000328c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00004f98": {
            "entrypoint": "0x00004f98",
            "current_name": "calculate_day_of_week_00004f98",
            "code": "\nundefined4 calculateDayOfWeek_00004f98(uint year)\n\n{\n  uint *memoryAddress;\n  undefined4 result;\n  uint dayOfWeek;\n  int accumulatedDays;\n  uint *calendarTable;\n  int baseDays;\n  uint isLeapYear;\n  int monthIndex;\n  int daysOffset;\n  uint leapYearOffset;\n  \n  memoryAddress = (uint *)get_memory_address_000056b0();\n  if ((int)year < 0x7b2) {\n    result = 0;\n  }\n  else {\n    baseDays = (year - 0x7b2) * 0x16d + ((int)(year - 0x7b1) >> 2) +\n            (year - 0x76d) / 0xffffff9c + (year - 0x641) / 400;\n    memoryAddress[1] = year;\n    leapYearOffset = (uint)(year % 400 == 0);\n    calendarTable = memoryAddress;\n    do {\n      dayOfWeek = calendarTable[5];\n      if (*(char *)(calendarTable + 2) == 'J') {\n        if ((((year & 3) == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n          if ((int)dayOfWeek < 0x3c) {\n            accumulatedDays = 0;\n          }\n          else {\n            accumulatedDays = 1;\n          }\n        }\n        else {\n          accumulatedDays = 0;\n        }\n        accumulatedDays = accumulatedDays + baseDays + dayOfWeek + -1;\n      }\n      else if (*(char *)(calendarTable + 2) == 'D') {\n        accumulatedDays = baseDays + dayOfWeek;\n      }\n      else {\n        isLeapYear = leapYearOffset;\n        if (((year & 3) == 0) && (year % 100 != 0)) {\n          isLeapYear = 1;\n        }\n        monthIndex = 0;\n        accumulatedDays = baseDays;\n        while( true ) {\n          monthIndex = monthIndex + 1;\n          if ((int)calendarTable[3] <= monthIndex) break;\n          accumulatedDays = accumulatedDays + *(int *)(&monthOffsets + monthIndex * 4 + isLeapYear * 0x30);\n        }\n        daysOffset = dayOfWeek - (accumulatedDays + 4U) % 7;\n        if (daysOffset < 0) {\n          daysOffset = daysOffset + 7;\n        }\n        for (daysOffset = (calendarTable[4] - 1) * 7 + daysOffset;\n            *(int *)(&monthOffsets + monthIndex * 4 + isLeapYear * 0x30) <= daysOffset; daysOffset = daysOffset + -7) {\n        }\n        accumulatedDays = accumulatedDays + daysOffset;\n      }\n      dayOfWeek = calendarTable[10] + accumulatedDays * 0x15180 + calendarTable[6];\n      calendarTable[8] = dayOfWeek;\n      calendarTable[9] = (int)dayOfWeek >> 0x1f;\n      calendarTable = calendarTable + 10;\n    } while (memoryAddress + 0x14 != calendarTable);\n    dayOfWeek = memoryAddress[9];\n    leapYearOffset = memoryAddress[0x13];\n    *memoryAddress = (uint)((int)((dayOfWeek - leapYearOffset) - (uint)(memoryAddress[8] < memoryAddress[0x12])) < 0 !=\n                    (SBORROW4(dayOfWeek,leapYearOffset) !=\n                    SBORROW4(dayOfWeek - leapYearOffset,(uint)(memoryAddress[8] < memoryAddress[0x12]))));\n    result = 1;\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00004f98": "calculate_day_of_week_00004f98",
                "param_1": "year",
                "puVar1": "memoryAddress",
                "uVar2": "result",
                "uVar3": "dayOfWeek",
                "iVar4": "accumulatedDays",
                "puVar5": "calendarTable",
                "iVar6": "baseDays",
                "uVar7": "isLeapYear",
                "iVar8": "monthIndex",
                "iVar9": "daysOffset",
                "uVar10": "leapYearOffset",
                "UNK_00007b98": "monthOffsets"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4"
            ],
            "called": [
                "FUN_000056b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050e8": {
            "entrypoint": "0x000050e8",
            "current_name": "get_starting_address_000050e8",
            "code": "\nundefined * get_starting_address_000050e8(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050e8": "get_starting_address_000050e8"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000050f4": {
            "entrypoint": "0x000050f4",
            "current_name": "get_memory_location_000050f4",
            "code": "\nundefined * getMemoryLocation_000050f4(void)\n\n{\n  return &DAT_1fff0deb;\n}\n\n",
            "renaming": {
                "FUN_000050f4": "get_memory_location_000050f4"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005100": {
            "entrypoint": "0x00005100",
            "current_name": "process_key_00005100",
            "code": "\nvoid processKey_00005100(void)\n\n{\n  dword offset;\n  int memoryAddress;\n  char *keyString;\n  int comparisonResult;\n  int parseResult;\n  undefined relocationType;\n  char *parsedData;\n  bool isRelocation;\n  ushort *parsedDataPtr1;\n  int *parsedDataPtr2;\n  ushort *parsedDataPtr3;\n  int *parsedDataPtr4;\n  ushort hour;\n  ushort minute;\n  ushort second;\n  ushort day;\n  ushort month;\n  ushort year;\n  int offsetResult;\n  char *parsedDataArray [2];\n  \n  offset = relocationArray[16].r_offset;\n  memoryAddress = get_memory_address_000056b0();\n  keyString = (char *)identify_and_process_key_000056a0(offset,&DAT_00007a5c);\n  if (keyString == (char *)0x0) {\n    relocationArray[28].r_info = (dword)&DAT_00007a5f;\n    relocationArray[29].r_offset = (dword)&DAT_00007a5f;\n    DAT_1fff0dd8 = keyString;\n    DAT_1fff0ddc = keyString;\n    update_offset_with_parameter_00005780(DAT_1fff0dd4);\n    DAT_1fff0dd4 = 0;\n  }\n  else if ((DAT_1fff0dd4 == 0) || (comparisonResult = compare_byte_arrays_00004e52(), comparisonResult != 0)) {\n    update_offset_with_parameter_00005780(DAT_1fff0dd4);\n    comparisonResult = find_last_character_00005ecc(keyString);\n    DAT_1fff0dd4 = allocate_and_initialize_memory_00004bd0(offset,comparisonResult + 1);\n    if (DAT_1fff0dd4 != 0) {\n      copy_string_00005ebc(DAT_1fff0dd4,keyString);\n    }\n    if (*keyString == ':') {\n      keyString = keyString + 1;\n    }\n    comparisonResult = process_binary_data_00005e68(keyString,\"%10[^0-9,+-]%n\",&DAT_1fff0dc7,&offsetResult);\n    if (0 < comparisonResult) {\n      parsedData = keyString + offsetResult;\n      if (keyString[offsetResult] == '-') {\n        parsedData = parsedData + 1;\n        comparisonResult = -1;\n      }\n      else {\n        if (keyString[offsetResult] == '+') {\n          parsedData = parsedData + 1;\n        }\n        comparisonResult = 1;\n      }\n      minute = 0;\n      second = 0;\n      parsedDataPtr1 = &minute;\n      parsedDataPtr2 = &offsetResult;\n      parsedDataPtr3 = &second;\n      parsedDataPtr4 = &offsetResult;\n      parseResult = process_binary_data_00005e68(parsedData,\"%hu%n:%hu%n:%hu%n\",&hour,&offsetResult,&minute,&offsetResult,\n                           &second,&offsetResult);\n      if (0 < parseResult) {\n        *(uint *)(memoryAddress + 0x28) =\n             ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * comparisonResult;\n        relocationArray[28].r_info = (dword)&DAT_1fff0dc7;\n        parsedData = parsedData + offsetResult;\n        comparisonResult = process_binary_data_00005e68(parsedData,\"%10[^0-9,+-]%n\",&DAT_1fff0dbc,&offsetResult,parsedDataPtr1,parsedDataPtr2,parsedDataPtr3,\n                             parsedDataPtr4);\n        if (comparisonResult < 1) {\n          relocationArray[29].r_offset = relocationArray[28].r_info;\n          DAT_1fff0ddc = *(char **)(memoryAddress + 0x28);\n          DAT_1fff0dd8 = (char *)0x0;\n        }\n        else {\n          relocationArray[29].r_offset = (dword)&DAT_1fff0dbc;\n          keyString = parsedData + offsetResult;\n          if (parsedData[offsetResult] == '-') {\n            keyString = keyString + 1;\n            comparisonResult = -1;\n          }\n          else {\n            if (parsedData[offsetResult] == '+') {\n              keyString = keyString + 1;\n            }\n            comparisonResult = 1;\n          }\n          hour = 0;\n          minute = 0;\n          second = 0;\n          offsetResult = 0;\n          parseResult = process_binary_data_00005e68(keyString,\"%hu%n:%hu%n:%hu%n\",&hour,&offsetResult,&minute,&offsetResult,\n                               &second,&offsetResult);\n          if (parseResult < 1) {\n            comparisonResult = *(int *)(memoryAddress + 0x28) + -0xe10;\n          }\n          else {\n            comparisonResult = ((uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second) * comparisonResult;\n          }\n          *(int *)(memoryAddress + 0x50) = comparisonResult;\n          keyString = keyString + offsetResult;\n          isRelocation = false;\n          comparisonResult = memoryAddress;\n          while( true ) {\n            if (*keyString == ',') {\n              keyString = keyString + 1;\n            }\n            if (*keyString == 'M') {\n              parseResult = process_binary_data_00005e68(keyString,\"M%hu%n.%hu%n.%hu%n\",&day,&offsetResult,&month,\n                                   &offsetResult,&year,&offsetResult);\n              if (parseResult != 3) {\n                return;\n              }\n              if (0xb < day - 1) {\n                return;\n              }\n              if (4 < month - 1) {\n                return;\n              }\n              if (6 < year) {\n                return;\n              }\n              *(uint *)(comparisonResult + 0xc) = (uint)day;\n              *(uint *)(comparisonResult + 0x10) = (uint)month;\n              *(undefined *)(comparisonResult + 8) = 0x4d;\n              *(uint *)(comparisonResult + 0x14) = (uint)year;\n              parsedData = keyString + offsetResult;\n            }\n            else {\n              if (*keyString == 'J') {\n                keyString = keyString + 1;\n                relocationType = 0x4a;\n              }\n              else {\n                relocationType = 0x44;\n              }\n              year = parse_and_process_relocation_entry_00005fd8(keyString,parsedDataArray,10);\n              parsedData = parsedDataArray[0];\n              if (parsedDataArray[0] == keyString) {\n                if (isRelocation) {\n                  *(undefined *)(memoryAddress + 0x30) = 0x4d;\n                  *(undefined4 *)(memoryAddress + 0x34) = 0xb;\n                  *(undefined4 *)(memoryAddress + 0x38) = 1;\n                  *(undefined4 *)(memoryAddress + 0x3c) = 0;\n                }\n                else {\n                  *(undefined *)(memoryAddress + 8) = 0x4d;\n                  *(undefined4 *)(memoryAddress + 0xc) = 3;\n                  *(undefined4 *)(memoryAddress + 0x10) = 2;\n                  *(undefined4 *)(memoryAddress + 0x14) = 0;\n                }\n              }\n              else {\n                *(undefined *)(comparisonResult + 8) = relocationType;\n                *(uint *)(comparisonResult + 0x14) = (uint)year;\n              }\n            }\n            hour = 2;\n            minute = 0;\n            second = 0;\n            offsetResult = 0;\n            if (*parsedData == '/') {\n              process_binary_data_00005e68(parsedData,&DAT_00007a85,&hour,&offsetResult,&minute,&offsetResult,&second,\n                           &offsetResult);\n            }\n            *(uint *)(comparisonResult + 0x18) =\n                 (uint)hour * 0xe10 + (uint)minute * 0x3c + (uint)second;\n            comparisonResult = comparisonResult + 0x28;\n            keyString = parsedData + offsetResult;\n            if (isRelocation) break;\n            isRelocation = true;\n          }\n          calculate_day_of_week_00004f98(*(undefined4 *)(memoryAddress + 4));\n          DAT_1fff0ddc = *(char **)(memoryAddress + 0x28);\n          DAT_1fff0dd8 = (char *)(*(int *)(memoryAddress + 0x50) - (int)DAT_1fff0ddc);\n          if (DAT_1fff0dd8 != (char *)0x0) {\n            DAT_1fff0dd8 = (char *)0x1;\n          }\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005100": "process_key_00005100",
                "dVar1": "offset",
                "iVar2": "memoryAddress",
                "pcVar3": "keyString",
                "iVar4": "comparisonResult",
                "iVar5": "parseResult",
                "uVar6": "relocationType",
                "pcVar7": "parsedData",
                "bVar8": "isRelocation",
                "puVar9": "parsedDataPtr1",
                "piVar10": "parsedDataPtr2",
                "puVar11": "parsedDataPtr3",
                "piVar12": "parsedDataPtr4",
                "local_3c": "hour",
                "local_3a": "minute",
                "local_38": "second",
                "local_36": "day",
                "local_34": "month",
                "local_32": "year",
                "local_30": "offsetResult",
                "local_2c": "parsedDataArray",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray"
            },
            "calling": [
                "FUN_000047e4"
            ],
            "called": [
                "FUN_00005ecc",
                "FUN_00004e52",
                "FUN_00005e68",
                "FUN_00004bd0",
                "FUN_00005780",
                "FUN_00004f98",
                "FUN_00005fd8",
                "FUN_00005ebc",
                "FUN_000056b0",
                "FUN_000056a0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005404": {
            "entrypoint": "0x00005404",
            "current_name": "process_data_00005404",
            "code": "\nuint processData_00005404(int dataPointer,uint inputValue,int *data,undefined4 flag)\n\n{\n  int iVar1;\n  uint uVar2;\n  undefined *puVar3;\n  \n  if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n    initializeMemory();\n  }\n  if (data == &DAT_000079b8) {\n    data = *(int **)(dataPointer + 4);\n  }\n  else if (data == (int *)&DAT_000079d8) {\n    data = *(int **)(dataPointer + 8);\n  }\n  else if (data == (int *)&DAT_00007998) {\n    data = *(int **)(dataPointer + 0xc);\n  }\n  data[2] = data[6];\n  uVar2 = (uint)*(ushort *)(data + 3);\n  iVar1 = uVar2 << 0x1c;\n  if (((iVar1 < 0) && (uVar2 = data[4], uVar2 != 0)) ||\n     (iVar1 = processData_000054042(dataPointer,data,iVar1,uVar2,flag), iVar1 == 0)) {\n    iVar1 = *data - data[4];\n    inputValue = inputValue & 0xff;\n    if ((iVar1 < data[5]) || (iVar1 = processData_000054043(dataPointer,data), iVar1 == 0)) {\n      data[2] = data[2] + -1;\n      puVar3 = (undefined *)*data;\n      *data = (int)(puVar3 + 1);\n      *puVar3 = (char)inputValue;\n      if (data[5] != iVar1 + 1) {\n        if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x1f)) {\n          return inputValue;\n        }\n        if (inputValue != 10) {\n          return inputValue;\n        }\n      }\n      iVar1 = processData_000054043(dataPointer,data);\n      if (iVar1 == 0) {\n        return inputValue;\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00005404": "process_data_00005404",
                "param_1": "dataPointer",
                "param_2": "inputValue",
                "param_3": "data",
                "param_4": "flag",
                "initialize_memory_and_process_data_000042a4": "initializeMemory",
                "process_data_000054a8": "processData2",
                "process_data_00004158": "processData3"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_000057a8",
                "FUN_00004cb4"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004158",
                "FUN_000054a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000054a8": {
            "entrypoint": "0x000054a8",
            "current_name": "process_data_000054a8",
            "code": "\nuint processData_000054a8(undefined4 *output,undefined4 *input)\n\n{\n  ushort temp1;\n  dword temp2;\n  ushort temp3;\n  uint temp4;\n  uint temp5;\n  \n  temp2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    initialize_memory_and_process_data_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (input == &DAT_000079b8) {\n    input = *(undefined4 **)(temp2 + 4);\n  }\n  else if (input == (undefined4 *)&DAT_000079d8) {\n    input = *(undefined4 **)(temp2 + 8);\n  }\n  else if (input == (undefined4 *)&DAT_00007998) {\n    input = *(undefined4 **)(temp2 + 0xc);\n  }\n  temp4 = (uint)*(ushort *)(input + 3);\n  temp3 = *(ushort *)(input + 3);\n  if (-1 < (int)(temp4 << 0x1c)) {\n    if (-1 < (int)(temp4 << 0x1b)) {\n      *output = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(temp4 << 0x1d) < 0) {\n      if ((undefined4 *)input[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)input[0xd] != input + 0x11) {\n          update_data_00004b34(output);\n        }\n        input[0xd] = 0;\n      }\n      *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xffdb;\n      input[1] = 0;\n      *input = input[4];\n    }\n    *(ushort *)(input + 3) = *(ushort *)(input + 3) | 8;\n  }\n  if ((input[4] == 0) && ((*(ushort *)(input + 3) & 0x280) != 0x200)) {\n    initialize_and_allocate_memory_00005700(output,input);\n  }\n  temp1 = *(ushort *)(input + 3);\n  temp4 = (uint)temp1;\n  temp3 = *(ushort *)(input + 3);\n  temp5 = temp4 & 1;\n  if ((temp1 & 1) == 0) {\n    if (-1 < (int)(temp4 << 0x1e)) {\n      temp5 = input[5];\n    }\n    input[2] = temp5;\n  }\n  else {\n    input[2] = 0;\n    input[6] = -input[5];\n  }\n  if (input[4] != 0) {\n    return 0;\n  }\n  if ((temp1 & 0x80) == 0) {\n    return temp4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(input + 3) = temp3 | 0x40;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000054a8": "process_data_000054a8",
                "param_1": "output",
                "param_2": "input",
                "uVar1": "temp1",
                "dVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5"
            },
            "calling": [
                "FUN_00004db8",
                "FUN_00005404",
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": [],
            "code_backup": "\nuint FUN_000054a8(undefined4 *param_1,undefined4 *param_2)\n\n{\n  ushort uVar1;\n  dword dVar2;\n  ushort uVar3;\n  uint uVar4;\n  uint uVar5;\n  \n  dVar2 = Elf32_Rel_ARRAY_1fff0200[16].r_offset;\n  if ((Elf32_Rel_ARRAY_1fff0200[16].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_1fff0200[16].r_offset + 0x18) == 0)) {\n    FUNC_000042a4(Elf32_Rel_ARRAY_1fff0200[16].r_offset);\n  }\n  if (param_2 == &DAT_000079b8) {\n    param_2 = *(undefined4 **)(dVar2 + 4);\n  }\n  else if (param_2 == (undefined4 *)&DAT_000079d8) {\n    param_2 = *(undefined4 **)(dVar2 + 8);\n  }\n  else if (param_2 == (undefined4 *)&DAT_00007998) {\n    param_2 = *(undefined4 **)(dVar2 + 0xc);\n  }\n  uVar4 = (uint)*(ushort *)(param_2 + 3);\n  uVar3 = *(ushort *)(param_2 + 3);\n  if (-1 < (int)(uVar4 << 0x1c)) {\n    if (-1 < (int)(uVar4 << 0x1b)) {\n      *param_1 = 9;\n      goto LAB_000054d8;\n    }\n    if ((int)(uVar4 << 0x1d) < 0) {\n      if ((undefined4 *)param_2[0xd] != (undefined4 *)0x0) {\n        if ((undefined4 *)param_2[0xd] != param_2 + 0x11) {\n          update_data_00004b34(param_1);\n        }\n        param_2[0xd] = 0;\n      }\n      *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) & 0xffdb;\n      param_2[1] = 0;\n      *param_2 = param_2[4];\n    }\n    *(ushort *)(param_2 + 3) = *(ushort *)(param_2 + 3) | 8;\n  }\n  if ((param_2[4] == 0) && ((*(ushort *)(param_2 + 3) & 0x280) != 0x200)) {\n    initialize_and_allocate_memory_00005700(param_1,param_2);\n  }\n  uVar1 = *(ushort *)(param_2 + 3);\n  uVar4 = (uint)uVar1;\n  uVar3 = *(ushort *)(param_2 + 3);\n  uVar5 = uVar4 & 1;\n  if ((uVar1 & 1) == 0) {\n    if (-1 < (int)(uVar4 << 0x1e)) {\n      uVar5 = param_2[5];\n    }\n    param_2[2] = uVar5;\n  }\n  else {\n    param_2[2] = 0;\n    param_2[6] = -param_2[5];\n  }\n  if (param_2[4] != 0) {\n    return 0;\n  }\n  if ((uVar1 & 0x80) == 0) {\n    return uVar4 & 0x80;\n  }\nLAB_000054d8:\n  *(ushort *)(param_2 + 3) = uVar3 | 0x40;\n  return 0xffffffff;\n}\n\n"
        },
        "FUN_00005584": {
            "entrypoint": "0x00005584",
            "current_name": "divide_and_update_00005584",
            "code": "\nvoid divideAndUpdate_00005584(uint *result,uint dividend,uint divisor)\n\n{\n  uint remainder;\n  uint quotient;\n  \n  quotient = dividend / divisor;\n  remainder = dividend - divisor * quotient;\n  if ((int)dividend < 0) {\n    if (0 < (int)remainder) {\n      quotient = quotient - 1;\n      remainder = remainder + divisor;\n    }\n  }\n  else if ((int)remainder < 0) {\n    quotient = quotient + 1;\n    remainder = remainder - divisor;\n  }\n  *result = quotient;\n  result[1] = remainder;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005584": "divide_and_update_00005584",
                "param_1": "result",
                "param_2": "dividend",
                "param_3": "divisor",
                "uVar1": "remainder",
                "uVar2": "quotient"
            },
            "calling": [
                "FUN_00004634"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000562c": {
            "entrypoint": "0x0000562c",
            "current_name": "identify_key_0000562c",
            "code": "\nint identifyKey_0000562c(undefined4 device,char *str,int *result)\n\n{\n  char currentChar;\n  int *ptrList;\n  int comparisonResult;\n  char *currPtr;\n  int *ptr;\n  int offset;\n  \n  initialize_device_00005fec();\n  currPtr = str;\n  if (Elf32_Rel_ARRAY_1fff0200[41].r_offset != 0) {\n    do {\n      currentChar = *currPtr;\n      if (currentChar == '\\0') {\n        offset = (int)currPtr - (int)str;\n        ptrList = (int *)Elf32_Rel_ARRAY_1fff0200[41].r_offset;\n        while( true ) {\n          ptr = ptrList;\n          if (*ptr == 0) break;\n          comparisonResult = compare_and_subtract_00004e66(*ptr,str,offset);\n          ptrList = ptr + 1;\n          if ((comparisonResult == 0) && (comparisonResult = *ptr, *(char *)(comparisonResult + offset) == '=')) {\n            *result = (int)((int)ptr - Elf32_Rel_ARRAY_1fff0200[41].r_offset) >> 2;\n            initialize_memory_00005ff8(device);\n            return comparisonResult + offset + 1;\n          }\n        }\n        break;\n      }\n      currPtr = currPtr + 1;\n    } while (currentChar != '=');\n  }\n  initialize_memory_00005ff8(device);\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000562c": "identify_key_0000562c",
                "param_1": "device",
                "param_2": "str",
                "param_3": "result",
                "cVar1": "currentChar",
                "piVar2": "ptrList",
                "iVar3": "comparisonResult",
                "pcVar4": "currPtr",
                "piVar5": "ptr",
                "iVar6": "offset"
            },
            "calling": [
                "FUN_000056a0"
            ],
            "called": [
                "FUN_00005ff8",
                "FUN_00004e66",
                "FUN_00005fec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056a0": {
            "entrypoint": "0x000056a0",
            "current_name": "identify_and_process_key_000056a0",
            "code": "\nvoid identify_and_process_key_000056a0(undefined4 input_arg_1,undefined4 input_arg_2,undefined4 input_arg_3,undefined4 input_arg_4)\n\n{\n  undefined4 temp_1;\n  undefined4 temp_2;\n  \n  temp_1 = input_arg_2;\n  temp_2 = input_arg_3;\n  identify_key_0000562c(input_arg_1,input_arg_2,&temp_1,input_arg_4,input_arg_1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_000056a0": "identify_and_process_key_000056a0",
                "param_1": "input_arg_1",
                "param_2": "input_arg_2",
                "param_3": "input_arg_3",
                "param_4": "input_arg_4",
                "uStack_c": "temp_1",
                "uStack_8": "temp_2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_0000562c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b0": {
            "entrypoint": "0x000056b0",
            "current_name": "get_memory_address_000056b0",
            "code": "\nundefined4 getMemoryAddress_000056b0(void)\n\n{\n  return 0x1fff02f0;\n}\n\n",
            "renaming": {
                "FUN_000056b0": "get_memory_address_000056b0"
            },
            "calling": [
                "FUN_00005100",
                "FUN_000047e4",
                "FUN_00004f98"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000056b8": {
            "entrypoint": "0x000056b8",
            "current_name": "initialize_output_status_000056b8",
            "code": "\nundefined4 initialize_output_status_000056b8(undefined4 input_value,int input_array,undefined4 *output_status,uint *output_value)\n\n{\n  int error_code;\n  undefined4 status_flag;\n  undefined temporary_array [4];\n  uint local_value;\n  \n  if ((*(short *)(input_array + 0xe) < 0) ||\n     (error_code = initialize_value_00000514(input_value,(int)*(short *)(input_array + 0xe),temporary_array), error_code < 0)) {\n    *output_value = 0;\n    if ((int)((uint)*(ushort *)(input_array + 0xc) << 0x18) < 0) {\n      status_flag = 0x40;\n      goto LAB_000056f8;\n    }\n  }\n  else {\n    *output_value = (uint)((local_value & 0xf000) == 0x2000);\n  }\n  status_flag = 0x400;\nLAB_000056f8:\n  *output_status = status_flag;\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_000056b8": "initialize_output_status_000056b8",
                "param_1": "input_value",
                "param_2": "input_array",
                "param_3": "output_status",
                "param_4": "output_value",
                "iVar1": "error_code",
                "uVar2": "status_flag",
                "auStack_68": "temporary_array",
                "local_64": "local_value"
            },
            "calling": [
                "FUN_00005700"
            ],
            "called": [
                "FUN_00000514"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005700": {
            "entrypoint": "0x00005700",
            "current_name": "initialize_and_allocate_memory_00005700",
            "code": "\nvoid initialize_and_allocate_memory_00005700(int memory_block_address,int *memory_info)\n\n{\n  ushort output_status;\n  int memory_allocation_result;\n  int memory_size;\n  int *input_check_result;\n  \n  if (-1 < (int)((uint)*(ushort *)(memory_info + 3) << 0x1e)) {\n    memory_size = memory_block_address;\n    input_check_result = memory_info;\n    output_status = initialize_output_status_000056b8(memory_block_address,memory_info,&memory_size,&input_check_result);\n    memory_allocation_result = allocate_and_initialize_memory_00004bd0(memory_block_address,memory_size);\n    if (memory_allocation_result != 0) {\n      *(undefined **)(memory_block_address + 0x28) = &DAT_0000423d;\n      *memory_info = memory_allocation_result;\n      *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) | 0x80;\n      memory_info[5] = memory_size;\n      memory_info[4] = memory_allocation_result;\n      if ((input_check_result != (int *)0x0) &&\n         (memory_allocation_result = check_input_00000534(memory_block_address,(int)*(short *)((int)memory_info + 0xe)), memory_allocation_result != 0)) {\n        *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) & 0xfffc | 1;\n      }\n      *(ushort *)(memory_info + 3) = output_status | *(ushort *)(memory_info + 3);\n      return;\n    }\n    if ((int)(short)*(ushort *)(memory_info + 3) << 0x16 < 0) {\n      return;\n    }\n    *(ushort *)(memory_info + 3) = *(ushort *)(memory_info + 3) & 0xfffc | 2;\n  }\n  *memory_info = (int)memory_info + 0x47;\n  memory_info[4] = (int)memory_info + 0x47;\n  memory_info[5] = 1;\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005700": "initialize_and_allocate_memory_00005700",
                "param_1": "memory_block_address",
                "param_2": "memory_info",
                "uVar1": "output_status",
                "iVar2": "memory_allocation_result",
                "local_18": "memory_size",
                "local_14": "input_check_result"
            },
            "calling": [
                "FUN_000054a8",
                "FUN_00006768"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_000056b8",
                "FUN_00000534"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005780": {
            "entrypoint": "0x00005780",
            "current_name": "update_offset_with_parameter_00005780",
            "code": "\nvoid updateOffsetWithParameter_00005780(undefined4 parameter)\n\n{\n  update_data_00004b34(relocationArray[16].r_offset,parameter);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005780": "update_offset_with_parameter_00005780",
                "param_1": "parameter",
                "Elf32_Rel_ARRAY_1fff0200": "relocationArray"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005790": {
            "entrypoint": "0x00005790",
            "current_name": "initialize_data_00005790",
            "code": "\nvoid initializeData_00005790(void)\n\n{\n  FUNC_000045e8(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005790": "initialize_data_00005790"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000579c": {
            "entrypoint": "0x0000579c",
            "current_name": "initialize_data_0000579c",
            "code": "\nvoid initializeData_0000579c(void)\n\n{\n  FUNC_000045ec(&DAT_1fff0de8);\n  return;\n}\n\n",
            "renaming": {
                "FUN_0000579c": "initialize_data_0000579c"
            },
            "calling": [
                "FUN_00004bd0",
                "FUN_00004b34"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057a8": {
            "entrypoint": "0x000057a8",
            "current_name": "process_and_track_data_000057a8",
            "code": "\nint process_and_track_data_000057a8(undefined4 input,int character,undefined4 *data_array)\n\n{\n  int index;\n  undefined *current_element;\n  \n  index = data_array[2] + -1;\n  data_array[2] = index;\n  if ((index < 0) && ((index < (int)data_array[6] || (character == 10)))) {\n    index = process_data_00005404();\n    return index;\n  }\n  current_element = (undefined *)*data_array;\n  *data_array = current_element + 1;\n  *current_element = (char)character;\n  return character;\n}\n\n",
            "renaming": {
                "FUN_000057a8": "process_and_track_data_000057a8",
                "param_1": "input",
                "param_2": "character",
                "param_3": "data_array",
                "iVar1": "index",
                "puVar2": "current_element"
            },
            "calling": [
                "FUN_000057d2"
            ],
            "called": [
                "FUN_00005404"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057d2": {
            "entrypoint": "0x000057d2",
            "current_name": "process_data_000057d2",
            "code": "\nint processData_000057d2(undefined4 param1,undefined4 param2,undefined *dataPtr,int length)\n\n{\n  int result;\n  undefined *endPtr;\n  int currentLength;\n  \n  endPtr = dataPtr + length;\n  currentLength = length;\n  do {\n    if (dataPtr == endPtr) {\n      return 0;\n    }\n    result = process_and_track_data_000057a8(param1,*dataPtr,param2,length,currentLength);\n    length = result + 1;\n    dataPtr = dataPtr + 1;\n  } while (length != 0);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000057d2": "process_data_000057d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "dataPtr",
                "param_4": "length",
                "iVar1": "result",
                "puVar2": "endPtr",
                "iVar3": "currentLength"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_000057a8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000057f8": {
            "entrypoint": "0x000057f8",
            "current_name": "process_data_000057f8",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x000059f0) */\n\nint processData_000057f8(int data,undefined4 *paramArray,byte *byteArray,int *resultArray)\n\n{\n  int var1;\n  int var2;\n  int *pointerVar;\n  bool isTrue;\n  byte *bytePointer;\n  int unaff_r7;\n  byte *bytePointer2;\n  int *localArray;\n  uint flag;\n  int intValue;\n  undefined4 uStack_80;\n  int localVar;\n  int totalSize;\n  byte localByte;\n  undefined localByte1;\n  undefined localByte2;\n  undefined localByte3;\n  undefined4 localVar2;\n  \n  if ((data != 0) && (*(int *)(data + 0x18) == 0)) {\n    initialize_memory_and_process_data_000042a4();\n  }\n  if (paramArray == &DAT_000079b8) {\n    paramArray = *(undefined4 **)(data + 4);\n  }\n  else if (paramArray == (undefined4 *)&DAT_000079d8) {\n    paramArray = *(undefined4 **)(data + 8);\n  }\n  else if (paramArray == (undefined4 *)&DAT_00007998) {\n    paramArray = *(undefined4 **)(data + 0xc);\n  }\n  if ((-1 < (int)(paramArray[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramArray + 3) << 0x16))) {\n    FUNC_000045e8(paramArray[0x16]);\n  }\n  if (((-1 < (int)((uint)*(ushort *)(paramArray + 3) << 0x1c)) || (paramArray[4] == 0)) &&\n     (var1 = process_data_000054a8(data,paramArray), var1 != 0)) {\n    if ((-1 < (int)(paramArray[0x19] << 0x1f)) && (-1 < (int)((uint)*(ushort *)(paramArray + 3) << 0x16)))\n    {\n      FUNC_000045ec(paramArray[0x16]);\n    }\n    return -1;\n  }\n  totalSize = 0;\n  localByte1 = 0x20;\n  localByte2 = 0x30;\n  bytePointer2 = byteArray;\n  localArray = resultArray;\nLAB_0000588e:\n  bytePointer = bytePointer2;\n  if (*bytePointer != 0) goto code_r0x00005896;\n  goto LAB_0000589a;\ncode_r0x00005896:\n  bytePointer2 = bytePointer + 1;\n  if (*bytePointer == 0x25) {\nLAB_0000589a:\n    var1 = (int)bytePointer - (int)byteArray;\n    if (var1 != 0) {\n      var2 = process_data_000057d2(data,paramArray,byteArray,var1);\n      if (var2 == -1) {\nLAB_00005a06:\n        if ((-1 < (int)(paramArray[0x19] << 0x1f)) &&\n           (-1 < (int)((uint)*(ushort *)(paramArray + 3) << 0x16))) {\n          FUNC_000045ec(paramArray[0x16]);\n        }\n        if ((int)((uint)*(ushort *)(paramArray + 3) << 0x19) < 0) {\n          return -1;\n        }\n        return totalSize;\n      }\n      totalSize = totalSize + var1;\n    }\n    if (*bytePointer == 0) goto LAB_00005a06;\n    intValue = -1;\n    uStack_80 = 0;\n    flag = 0;\n    localVar = 0;\n    localByte3 = 0;\n    localVar2 = 0;\n    bytePointer2 = bytePointer + 1;\n    while( true ) {\n      bytePointer = bytePointer2 + 1;\n      var1 = find_byte_sequence_00006010(\"#-0+ \",*bytePointer2,5);\n      if (var1 == 0) break;\n      flag = 1 << (var1 - 0x7bfcU & 0xff) | flag;\n      bytePointer2 = bytePointer;\n    }\n    if ((int)(flag << 0x1b) < 0) {\n      localByte3 = 0x20;\n    }\n    if ((int)(flag << 0x1c) < 0) {\n      localByte3 = 0x2b;\n    }\n    if (*bytePointer2 == 0x2a) {\n      pointerVar = localArray + 1;\n      localVar = *localArray;\n      localArray = pointerVar;\n      if (localVar < 0) {\n        localVar = -localVar;\n        flag = flag | 2;\n      }\n    }\n    else {\n      isTrue = false;\n      var1 = localVar;\n      bytePointer = bytePointer2;\n      while( true ) {\n        if (9 < *bytePointer - 0x30) break;\n        var1 = var1 * 10 + (*bytePointer - 0x30);\n        isTrue = true;\n        bytePointer = bytePointer + 1;\n      }\n      if (isTrue) {\n        localVar = var1;\n      }\n    }\n    if (*bytePointer == 0x2e) {\n      if (bytePointer[1] == 0x2a) {\n        intValue = *localArray;\n        if (intValue < 0) {\n          intValue = -1;\n        }\n        bytePointer = bytePointer + 2;\n        localArray = localArray + 1;\n      }\n      else {\n        isTrue = false;\n        intValue = 0;\n        var1 = 0;\n        while( true ) {\n          bytePointer = bytePointer + 1;\n          if (9 < *bytePointer - 0x30) break;\n          var1 = var1 * 10 + (*bytePointer - 0x30);\n          isTrue = true;\n        }\n        if (isTrue) {\n          intValue = var1;\n        }\n      }\n    }\n    var1 = find_byte_sequence_00006010(&DAT_00007c02,*bytePointer,3);\n    if (var1 != 0) {\n      flag = flag | 0x40 << (var1 - 0x7c02U & 0xff);\n      bytePointer = bytePointer + 1;\n    }\n    byteArray = bytePointer + 1;\n    localByte = *bytePointer;\n    var1 = find_byte_sequence_00006010(\"efgEFG\",localByte,6);\n    if (var1 == 0) {\n      unaff_r7 = format_data_00005b34(data,&flag,paramArray,0x57d3,&localArray);\n      if (unaff_r7 == -1) goto LAB_00005a06;\n    }\n    else {\n      localArray = (int *)(((int)localArray + 7U & 0xfffffff8) + 8);\n    }\n    totalSize = totalSize + unaff_r7;\n    bytePointer2 = byteArray;\n  }\n  goto LAB_0000588e;\n}\n\n",
            "renaming": {
                "FUN_000057f8": "process_data_000057f8",
                "param_1": "data",
                "param_2": "paramArray",
                "param_3": "byteArray",
                "param_4": "resultArray",
                "iVar1": "var1",
                "iVar2": "var2",
                "piVar3": "pointerVar",
                "bVar4": "isTrue",
                "pbVar5": "bytePointer",
                "pbVar6": "bytePointer2",
                "local_8c": "localArray",
                "local_88": "flag",
                "local_84": "intValue",
                "local_7c": "localVar",
                "local_74": "totalSize",
                "local_70": "localByte",
                "local_6f": "localByte1",
                "local_6e": "localByte2",
                "local_45": "localByte3",
                "local_30": "localVar2"
            },
            "calling": [
                "FUN_00004c84"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_000057d2",
                "FUN_00005b34",
                "FUN_000054a8",
                "FUN_000045ec",
                "FUN_00006010",
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005a58": {
            "entrypoint": "0x00005a58",
            "current_name": "calculate_new_size_00005a58",
            "code": "\nundefined4\ncalculateNewSize_00005a58(undefined4 input1,uint *array,uint *result,undefined4 input2,code *callback)\n\n{\n  int index;\n  undefined4 returnValue;\n  int tempVar;\n  uint maxSize;\n  uint counter;\n  bool condition;\n  \n  maxSize = array[4];\n  if ((int)array[4] < (int)array[2]) {\n    maxSize = array[2];\n  }\n  *result = maxSize;\n  if (*(char *)((int)array + 0x43) != '\\0') {\n    *result = maxSize + 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *result = *result + 2;\n  }\n  if ((*array & 6) == 0) {\n    for (index = 0; index < (int)(array[3] - *result); index = index + 1) {\n      tempVar = (*callback)(input1,input2,(int)array + 0x19,1);\n      if (tempVar == -1) goto LAB_00005afc;\n    }\n  }\n  maxSize = (uint)*(byte *)((int)array + 0x43);\n  if (maxSize != 0) {\n    maxSize = 1;\n  }\n  if ((int)(*array << 0x1a) < 0) {\n    *(undefined *)((int)array + maxSize + 0x43) = 0x30;\n    *(undefined *)((int)array + maxSize + 0x44) = *(undefined *)((int)array + 0x45);\n    maxSize = maxSize + 2;\n  }\n  index = (*callback)(input1,input2,(int)array + 0x43,maxSize);\n  if (index == -1) {\nLAB_00005afc:\n    returnValue = 0xffffffff;\n  }\n  else {\n    maxSize = array[3];\n    condition = (*array & 6) == 4;\n    if (condition) {\n      maxSize = maxSize - *result;\n    }\n    if (condition) {\n      maxSize = maxSize & ~((int)maxSize >> 0x1f);\n    }\n    else {\n      maxSize = 0;\n    }\n    if ((int)array[4] < (int)array[2]) {\n      maxSize = maxSize + (array[2] - array[4]);\n    }\n    for (counter = 0; maxSize != counter; counter = counter + 1) {\n      index = (*callback)(input1,input2,(int)array + 0x1a,1);\n      if (index == -1) goto LAB_00005afc;\n    }\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "renaming": {
                "FUN_00005a58": "calculate_new_size_00005a58",
                "param_1": "input1",
                "param_2": "array",
                "param_3": "result",
                "param_4": "input2",
                "param_5": "callback",
                "iVar1": "index",
                "uVar2": "returnValue",
                "iVar3": "tempVar",
                "uVar4": "maxSize",
                "uVar5": "counter",
                "bVar6": "condition"
            },
            "calling": [
                "FUN_00005b34"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005b34": {
            "entrypoint": "0x00005b34",
            "current_name": "format_data_00005b34",
            "code": "\ncode * formatData_00005b34(undefined4 input_data,uint *output_data,undefined4 size,code *callback,uint **pointer\n                   )\n\n{\n  bool is_greater;\n  byte byte_value;\n  int result;\n  code *retval;\n  char *hex_chars;\n  int status;\n  char *ptr;\n  uint quotient;\n  uint *pointer_ptr;\n  uint base;\n  uint **ppuVar11;\n  char **ppcVar12;\n  uint length;\n  char *output_ptr;\n  code *local_var;\n  \n  byte_value = *(byte *)(output_data + 6);\n  ptr = (char *)((int)output_data + 0x43);\n  local_var = callback;\n  if (0x78 < byte_value) {\nswitchD_00005b70_caseD_65:\n    *(byte *)((int)output_data + 0x42) = byte_value;\nLAB_00005bdc:\n    ptr = (char *)((int)output_data + 0x42);\n    quotient = 1;\nLAB_00005d28:\n    output_data[4] = quotient;\n    *(undefined *)((int)output_data + 0x43) = 0;\n    goto LAB_00005c84;\n  }\n  if (byte_value < 99) {\n    if (byte_value == 0) goto LAB_00005d06;\n    if (byte_value == 0x58) {\n      hex_chars = \"0123456789ABCDEF\";\n      *(undefined *)((int)output_data + 0x45) = 0x58;\n      goto LAB_00005ca8;\n    }\n    goto switchD_00005b70_caseD_65;\n  }\n  switch(byte_value) {\n  case 99:\n    quotient = **pointer;\n    *pointer = *pointer + 1;\n    *(char *)((int)output_data + 0x42) = (char)quotient;\n    goto LAB_00005bdc;\n  case 100:\n  case 0x69:\n    base = *output_data;\n    pointer_ptr = *pointer;\n    if ((int)(base << 0x18) < 0) {\n      quotient = *pointer_ptr;\n      *pointer = pointer_ptr + 1;\n    }\n    else {\n      quotient = *pointer_ptr;\n      *pointer = pointer_ptr + 1;\n      if ((base & 0x40) != 0) {\n        quotient = (uint)(short)quotient;\n      }\n    }\n    if ((int)quotient < 0) {\n      quotient = -quotient;\n      *(undefined *)((int)output_data + 0x43) = 0x2d;\n    }\n    hex_chars = \"0123456789ABCDEF\";\n    base = 10;\n    goto LAB_00005c36;\n  default:\n    goto switchD_00005b70_caseD_65;\n  case 0x6e:\n    ppuVar11 = (uint **)*pointer;\n    base = *output_data;\n    quotient = output_data[5];\n    *pointer = (uint *)(ppuVar11 + 1);\n    pointer_ptr = *ppuVar11;\n    if (((int)(base << 0x18) < 0) || (-1 < (int)(base << 0x19))) {\n      *pointer_ptr = quotient;\n    }\n    else {\n      *(short *)pointer_ptr = (short)quotient;\n    }\nLAB_00005d06:\n    output_data[4] = 0;\n    goto LAB_00005c84;\n  case 0x6f:\n  case 0x75:\n    pointer_ptr = *pointer;\n    quotient = *output_data;\n    *pointer = pointer_ptr + 1;\n    if (((int)(quotient << 0x18) < 0) || (-1 < (int)(quotient << 0x19))) {\n      quotient = *pointer_ptr;\n    }\n    else {\n      quotient = (uint)*(ushort *)pointer_ptr;\n    }\n    hex_chars = \"0123456789ABCDEF\";\n    if (byte_value == 0x6f) {\n      base = 8;\n    }\n    else {\n      base = 10;\n    }\n    break;\n  case 0x70:\n    *output_data = *output_data | 0x20;\n  case 0x78:\n    hex_chars = \"0123456789abcdef\";\n    *(undefined *)((int)output_data + 0x45) = 0x78;\nLAB_00005ca8:\n    base = *output_data;\n    quotient = **pointer;\n    *pointer = *pointer + 1;\n    if ((-1 < (int)(base << 0x18)) && ((int)(base << 0x19) < 0)) {\n      quotient = quotient & 0xffff;\n    }\n    if ((int)(base << 0x1f) < 0) {\n      *output_data = base | 0x20;\n    }\n    if (quotient == 0) {\n      *output_data = *output_data & 0xffffffdf;\n    }\n    base = 0x10;\n    break;\n  case 0x73:\n    ppcVar12 = (char **)*pointer;\n    *pointer = (uint *)(ppcVar12 + 1);\n    ptr = *ppcVar12;\n    result = find_byte_sequence_00006010(ptr,0,output_data[1],ppcVar12,input_data,output_data,size);\n    if (result != 0) {\n      output_data[1] = result - (int)ptr;\n    }\n    quotient = output_data[1];\n    goto LAB_00005d28;\n  }\n  *(undefined *)((int)output_data + 0x43) = 0;\nLAB_00005c36:\n  length = output_data[1];\n  output_data[2] = length;\n  if (-1 < (int)length) {\n    *output_data = *output_data & 0xfffffffb;\n  }\n  output_ptr = ptr;\n  if ((quotient != 0) || (length != 0)) {\n    do {\n      output_ptr = output_ptr + -1;\n      *output_ptr = hex_chars[quotient - base * (quotient / base)];\n      is_greater = base <= quotient;\n      quotient = quotient / base;\n    } while (is_greater);\n  }\n  if (((base == 8) && ((int)(*output_data << 0x1f) < 0)) && ((int)output_data[1] <= (int)output_data[4])) {\n    output_ptr[-1] = '0';\n    output_ptr = output_ptr + -1;\n  }\n  output_data[4] = (int)ptr - (int)output_ptr;\n  ptr = output_ptr;\nLAB_00005c84:\n  result = calculate_new_size_00005a58(input_data,output_data,&local_var,size,callback);\n  if ((result == -1) || (result = (*callback)(input_data,size,ptr,output_data[4]), result == -1)) {\nLAB_00005c98:\n    retval = (code *)0xffffffff;\n  }\n  else {\n    if ((int)(*output_data << 0x1e) < 0) {\n      for (result = 0; result < (int)(output_data[3] - (int)local_var); result = result + 1) {\n        status = (*callback)(input_data,size,(int)output_data + 0x19,1);\n        if (status == -1) goto LAB_00005c98;\n      }\n    }\n    retval = (code *)output_data[3];\n    if ((int)(code *)output_data[3] < (int)local_var) {\n      retval = local_var;\n    }\n  }\n  return retval;\n}\n\n",
            "renaming": {
                "FUN_00005b34": "format_data_00005b34",
                "param_1": "input_data",
                "param_2": "output_data",
                "param_3": "size",
                "param_4": "callback",
                "param_5": "pointer",
                "bVar1": "is_greater",
                "bVar2": "byte_value",
                "iVar3": "result",
                "pcVar4": "retval",
                "pcVar5": "hex_chars",
                "iVar6": "status",
                "pcVar7": "ptr",
                "uVar8": "quotient",
                "puVar9": "pointer_ptr",
                "uVar10": "base",
                "uVar13": "length",
                "pcVar14": "output_ptr",
                "local_24": "local_var"
            },
            "calling": [
                "FUN_000057f8"
            ],
            "called": [
                "FUN_00006010",
                "FUN_00005a58"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e10": {
            "entrypoint": "0x00005e10",
            "current_name": "process_and_extract_byte_00005e10",
            "code": "\nuint processAndExtractByte_00005e10(int dataPointer,byte **byteArrayPointer)\n\n{\n  int dataProcessingResult;\n  uint extractedByte;\n  byte *bytePointer;\n  \n  if ((dataPointer != 0) && (*(int *)(dataPointer + 0x18) == 0)) {\n    initialize_memory_and_process_data_000042a4();\n  }\n  if (byteArrayPointer == (byte **)&DAT_000079b8) {\n    byteArrayPointer = *(byte ***)(dataPointer + 4);\n  }\n  else if (byteArrayPointer == (byte **)&DAT_000079d8) {\n    byteArrayPointer = *(byte ***)(dataPointer + 8);\n  }\n  else if (byteArrayPointer == (byte **)&DAT_00007998) {\n    byteArrayPointer = *(byte ***)(dataPointer + 0xc);\n  }\n  dataProcessingResult = process_data_00006768(dataPointer,byteArrayPointer);\n  if (dataProcessingResult == 0) {\n    byteArrayPointer[1] = byteArrayPointer[1] + -1;\n    bytePointer = *byteArrayPointer;\n    *byteArrayPointer = bytePointer + 1;\n    extractedByte = (uint)*bytePointer;\n  }\n  else {\n    extractedByte = 0xffffffff;\n  }\n  return extractedByte;\n}\n\n",
            "renaming": {
                "FUN_00005e10": "process_and_extract_byte_00005e10",
                "param_1": "dataPointer",
                "param_2": "byteArrayPointer",
                "iVar1": "dataProcessingResult",
                "uVar2": "extractedByte",
                "pbVar3": "bytePointer"
            },
            "calling": [
                "FUN_00004418"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_00006768"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005e68": {
            "entrypoint": "0x00005e68",
            "current_name": "process_binary_data_00005e68",
            "code": "\nvoid processBinaryData_00005e68(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4)\n\n{\n  undefined4 processedParam1;\n  undefined4 lastCharacter;\n  undefined2 bufferSize;\n  undefined2 initialValue;\n  undefined4 processedParam2;\n  undefined4 lastCharacterCopy;\n  undefined *stringPointer;\n  undefined4 initializedValue1;\n  undefined4 initializedValue2;\n  undefined4 stackParam1;\n  undefined4 stackParam2;\n  \n  bufferSize = 0x204;\n  processedParam1 = inputParam1;\n  processedParam2 = inputParam1;\n  stackParam1 = inputParam3;\n  stackParam2 = inputParam4;\n  lastCharacter = find_last_character_00005ecc();\n  stringPointer = &LAB_00004dea_1;\n  initializedValue1 = 0;\n  initializedValue2 = 0;\n  initialValue = 0xffff;\n  lastCharacterCopy = lastCharacter;\n  decode_and_process_000061cc(Elf32_Rel_ARRAY_1fff0200[16].r_offset,&processedParam1,inputParam2,&stackParam1);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005e68": "process_binary_data_00005e68",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "local_80": "processedParam1",
                "local_7c": "lastCharacter",
                "local_74": "bufferSize",
                "local_72": "initialValue",
                "local_70": "processedParam2",
                "local_6c": "lastCharacterCopy",
                "local_5c": "stringPointer",
                "local_4c": "initializedValue1",
                "local_38": "initializedValue2",
                "uStack_8": "stackParam1",
                "uStack_4": "stackParam2"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_000061cc",
                "FUN_00005ecc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ebc": {
            "entrypoint": "0x00005ebc",
            "current_name": "copy_string_00005ebc",
            "code": "\nvoid copy_string_00005ebc(char *destination,char *source)\n\n{\n  char current_char;\n  \n  do {\n    current_char = *source;\n    *destination = current_char;\n    source = source + 1;\n    destination = destination + 1;\n  } while (current_char != '\\0');\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ebc": "copy_string_00005ebc",
                "param_1": "destination",
                "param_2": "source",
                "cVar1": "current_char"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ecc": {
            "entrypoint": "0x00005ecc",
            "current_name": "find_last_character_00005ecc",
            "code": "\nchar * find_last_character_00005ecc(char *str)\n\n{\n  char character;\n  char *next_character;\n  char *current_character;\n  \n  current_character = str;\n  do {\n    next_character = current_character + 1;\n    character = *current_character;\n    current_character = next_character;\n  } while (character != '\\0');\n  return next_character + (-1 - (int)str);\n}\n\n",
            "renaming": {
                "FUN_00005ecc": "find_last_character_00005ecc",
                "param_1": "str",
                "pcVar2": "next_character",
                "pcVar3": "current_character",
                "cVar1": "character"
            },
            "calling": [
                "FUN_00005100",
                "FUN_00005e68"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005edc": {
            "entrypoint": "0x00005edc",
            "current_name": "parse_unsigned_int_00005edc",
            "code": "\nuint parseUnsignedInt_00005edc(undefined4 *result,byte *str,byte **endptr,uint base)\n\n{\n  uint value;\n  uint ch;\n  byte negative;\n  int invalid;\n  uint digit;\n  uint maxDiv;\n  byte *currentChar;\n  byte *nextChar;\n  \n  nextChar = str;\n  do {\n    currentChar = nextChar;\n    nextChar = currentChar + 1;\n    ch = (uint)*currentChar;\n    negative = (&DAT_00007a99)[ch] & 8;\n  } while (((&DAT_00007a99)[ch] & 8) != 0);\n  if (ch == 0x2d) {\n    ch = (uint)*nextChar;\n    negative = 1;\n    nextChar = currentChar + 2;\n  }\n  else if (ch == 0x2b) {\n    ch = (uint)*nextChar;\n    nextChar = currentChar + 2;\n  }\n  if (base == 0) {\n    if (ch != 0x30) {\n      base = 10;\n      goto LAB_00005f26;\n    }\n  }\n  else if ((base != 0x10) || (ch != 0x30)) goto LAB_00005f26;\n  if ((*nextChar & 0xdf) == 0x58) {\n    ch = (uint)nextChar[1];\n    base = 0x10;\n    nextChar = nextChar + 2;\n  }\n  else {\n    ch = 0x30;\n    if (base == 0) {\n      base = 8;\n    }\n  }\nLAB_00005f26:\n  invalid = 0;\n  maxDiv = 0xffffffff / base;\n  value = 0;\n  do {\n    digit = ch - 0x30;\n    if (9 < digit) {\n      if (ch - 0x41 < 0x1a) {\n        digit = ch - 0x37;\n      }\n      else {\n        if (0x19 < ch - 0x61) break;\n        digit = ch - 0x57;\n      }\n    }\n    if ((int)base <= (int)digit) break;\n    if (((invalid < 0) || (maxDiv < value)) ||\n       ((maxDiv == value && ((int)~(base * maxDiv) < (int)digit)))) {\n      invalid = -1;\n    }\n    else {\n      value = value * base + digit;\n      invalid = 1;\n    }\n    ch = (uint)*nextChar;\n    nextChar = nextChar + 1;\n  } while( true );\n  if (invalid < 0) {\n    *result = 0x22;\n    value = 0xffffffff;\n    if (endptr == (byte **)0x0) {\n      return 0xffffffff;\n    }\n  }\n  else {\n    if (negative != 0) {\n      value = -value;\n    }\n    if (endptr == (byte **)0x0) {\n      return value;\n    }\n    if (invalid == 0) goto LAB_00005fb8;\n  }\n  str = nextChar + -1;\nLAB_00005fb8:\n  *endptr = str;\n  return value;\n}\n\n",
            "renaming": {
                "FUN_00005edc": "parse_unsigned_int_00005edc",
                "param_1": "result",
                "param_2": "str",
                "param_3": "endptr",
                "param_4": "base",
                "uVar1": "value",
                "uVar2": "ch",
                "bVar3": "negative",
                "iVar4": "invalid",
                "uVar5": "digit",
                "uVar6": "maxDiv",
                "pbVar7": "currentChar",
                "pbVar8": "nextChar"
            },
            "calling": [
                "FUN_00005fd8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fd8": {
            "entrypoint": "0x00005fd8",
            "current_name": "parse_and_process_relocation_entry_00005fd8",
            "code": "\nvoid parseAndProcessRelocationEntry_00005fd8(undefined4 sourceAddress,undefined4 destinationAddress,undefined4 length)\n\n{\n  parse_unsigned_int_00005edc(relocationTable[16].relocationOffset,sourceAddress,destinationAddress,length);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fd8": "parse_and_process_relocation_entry_00005fd8",
                "param_1": "sourceAddress",
                "param_2": "destinationAddress",
                "param_3": "length",
                "Elf32_Rel_ARRAY_1fff0200": "relocationTable",
                "r_offset": "relocationOffset"
            },
            "calling": [
                "FUN_00005100"
            ],
            "called": [
                "FUN_00005edc"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005fec": {
            "entrypoint": "0x00005fec",
            "current_name": "initialize_device_00005fec",
            "code": "\nvoid initialize_device_00005fec(void)\n\n{\n  FUNC_000045e8(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005fec": "initialize_device_00005fec"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045e8"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00005ff8": {
            "entrypoint": "0x00005ff8",
            "current_name": "initialize_memory_00005ff8",
            "code": "\nvoid initializeMemory_00005ff8(void)\n\n{\n  FUNC_000045ec(0x1fff0de6);\n  return;\n}\n\n",
            "renaming": {
                "FUN_00005ff8": "initialize_memory_00005ff8"
            },
            "calling": [
                "FUN_0000562c"
            ],
            "called": [
                "FUN_000045ec"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006010": {
            "entrypoint": "0x00006010",
            "current_name": "find_byte_sequence_00006010",
            "code": "\nbyte * findByteSequence_00006010(uint *dataArray,uint targetByte,uint length)\n\n{\n  byte currentByte;\n  char isZero1;\n  char isZero2;\n  char isZero3;\n  char isZero4;\n  byte *nextBytePointer;\n  uint *currentWordPointer;\n  byte *resultByte;\n  uint arrayOffset;\n  uint alignedLength;\n  uint temp1;\n  uint temp2;\n  bool isNonZero1;\n  bool isNonZero2;\n  bool isNonZero3;\n  bool isNonZero4;\n  \n  targetByte = targetByte & 0xff;\n  if ((int)length < 0x10) {\njoined_r0x00006070:\n    do {\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n      currentWordPointer = (uint *)((int)dataArray + 1);\n      currentByte = *(byte *)dataArray;\n      length = length - 1;\n      dataArray = currentWordPointer;\n    } while (currentByte != targetByte);\n  }\n  else {\n    arrayOffset = (uint)dataArray & 7;\n    while( true ) {\n      if (arrayOffset == 0) {\n        arrayOffset = targetByte | targetByte << 8;\n        arrayOffset = arrayOffset | arrayOffset << 0x10;\n        alignedLength = length & 0xfffffff8;\n        do {\n          currentWordPointer = dataArray + 2;\n          alignedLength = alignedLength - 8;\n          temp1 = *dataArray ^ arrayOffset;\n          temp2 = dataArray[1] ^ arrayOffset;\n          isZero1 = -((char)temp1 == '\\0');\n          isZero2 = -((char)(temp1 >> 8) == '\\0');\n          isZero3 = -((char)(temp1 >> 0x10) == '\\0');\n          isZero4 = -((char)(temp1 >> 0x18) == '\\0');\n          temp1 = CONCAT13(isZero4,CONCAT12(isZero3,CONCAT11(isZero2,isZero1)));\n          isNonZero1 = (char)temp2 != '\\0';\n          isNonZero2 = (char)(temp2 >> 8) != '\\0';\n          isNonZero3 = (char)(temp2 >> 0x10) != '\\0';\n          isNonZero4 = (char)(temp2 >> 0x18) != '\\0';\n          temp2 = CONCAT13(isNonZero4 * isZero4 - !isNonZero4,\n                            CONCAT12(isNonZero3 * isZero3 - !isNonZero3,\n                                     CONCAT11(isNonZero2 * isZero2 - !isNonZero2,isNonZero1 * isZero1 - !isNonZero1)));\n          if (temp2 != 0) {\n            if (temp1 == 0) {\n              resultByte = (byte *)((int)dataArray + 5);\n              temp1 = temp2;\n            }\n            else {\n              resultByte = (byte *)((int)dataArray + 1);\n            }\n            if ((temp1 & 1) == 0) {\n              isNonZero1 = (temp1 & 0x100) == 0;\n              nextBytePointer = resultByte + 1;\n              if (isNonZero1) {\n                isNonZero1 = (temp1 & 0x18000) == 0;\n                nextBytePointer = resultByte + 2;\n              }\n              resultByte = nextBytePointer;\n              if (isNonZero1) {\n                resultByte = resultByte + 1;\n              }\n            }\n            return resultByte + -1;\n          }\n          dataArray = currentWordPointer;\n        } while (alignedLength != 0);\n        length = length & 7;\n        goto joined_r0x00006070;\n      }\n      currentWordPointer = (uint *)((int)dataArray + 1);\n      length = length - 1;\n      if (*(byte *)dataArray == targetByte) break;\n      arrayOffset = (uint)currentWordPointer & 7;\n      dataArray = currentWordPointer;\n      if (length == 0) {\n        return (byte *)0x0;\n      }\n    }\n  }\n  return (byte *)((int)currentWordPointer + -1);\n}\n\n",
            "renaming": {
                "FUN_00006010": "find_byte_sequence_00006010",
                "param_1": "dataArray",
                "param_2": "targetByte",
                "param_3": "length",
                "bVar1": "currentByte",
                "cVar2": "isZero1",
                "cVar3": "isZero2",
                "cVar4": "isZero3",
                "cVar5": "isZero4",
                "pbVar6": "nextBytePointer",
                "puVar7": "currentWordPointer",
                "pbVar8": "resultByte",
                "uVar9": "arrayOffset",
                "uVar10": "alignedLength",
                "uVar11": "temp1",
                "uVar12": "temp2",
                "bVar13": "isNonZero1",
                "bVar14": "isNonZero2",
                "bVar15": "isNonZero3",
                "bVar16": "isNonZero4"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_00005b34",
                "FUN_0000656c",
                "FUN_000057f8"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060b0": {
            "entrypoint": "0x000060b0",
            "current_name": "copy_data_000060b0",
            "code": "\nvoid copyData_000060b0(int destOffset,undefined *sourceData,int dataLength)\n\n{\n  undefined *currentSource;\n  undefined *endSource;\n  undefined *currentDest;\n  \n  endSource = sourceData + dataLength;\n  currentDest = (undefined *)(destOffset + -1);\n  if (sourceData != endSource) {\n    do {\n      currentSource = sourceData + 1;\n      currentDest = currentDest + 1;\n      *currentDest = *sourceData;\n      sourceData = currentSource;\n    } while (currentSource != endSource);\n    return;\n  }\n  return;\n}\n\n",
            "renaming": {
                "FUN_000060b0": "copy_data_000060b0",
                "param_1": "destOffset",
                "param_2": "sourceData",
                "param_3": "dataLength",
                "puVar1": "currentSource",
                "puVar2": "endSource",
                "puVar3": "currentDest"
            },
            "calling": [
                "FUN_000068f0",
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000060cc": {
            "entrypoint": "0x000060cc",
            "current_name": "allocate_and_copy_data_000060cc",
            "code": "\nint allocateAndCopyData_000060cc(undefined4 ptr,int size,uint count,undefined4 param)\n\n{\n  int result;\n  uint sum;\n  \n  if (size != 0) {\n    if (count == 0) {\n      update_data_00004b34();\n      result = 0;\n    }\n    else {\n      sum = add_negative_or_index_00006964();\n      result = size;\n      if ((sum < count) && (result = allocate_and_initialize_memory_00004bd0(ptr,count), result != 0)) {\n        copy_data_000060b0(result,size,count);\n        update_data_00004b34(ptr,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_initialize_memory_00004bd0(ptr,count,count,param);\n  return result;\n}\n\n",
            "renaming": {
                "FUN_000060cc": "allocate_and_copy_data_000060cc",
                "param_1": "ptr",
                "param_2": "size",
                "param_3": "count",
                "param_4": "param",
                "iVar1": "result",
                "uVar2": "sum"
            },
            "calling": [
                "FUN_000068f0"
            ],
            "called": [
                "FUN_00004bd0",
                "FUN_00006964",
                "FUN_00004b34",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006192": {
            "entrypoint": "0x00006192",
            "current_name": "update_data_if_not_null_00006192",
            "code": "\nundefined4 updateDataIfNotNull_00006192(undefined4 data,undefined4 *ptrArray)\n\n{\n  if ((undefined4 *)ptrArray[13] != (undefined4 *)0x0) {\n    if ((undefined4 *)ptrArray[13] != ptrArray + 0x11) {\n      updateData();\n    }\n    ptrArray[1] = ptrArray[16];\n    ptrArray[13] = 0;\n    if (ptrArray[16] != 0) {\n      *ptrArray = ptrArray[15];\n      return 0;\n    }\n  }\n  *ptrArray = ptrArray[4];\n  ptrArray[1] = 0;\n  *(ushort *)(ptrArray + 3) = *(ushort *)(ptrArray + 3) | 0x20;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006192": "update_data_if_not_null_00006192",
                "param_1": "data",
                "param_2": "ptrArray",
                "update_data_00004b34": "updateData",
                "param_2[0xd]": "ptrArray[13]",
                "param_2[1]": "ptrArray[1]",
                "param_2[0x10]": "ptrArray[16]",
                "param_2[0xf]": "ptrArray[15]",
                "param_2[4]": "ptrArray[4]"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_00004b34"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000061cc": {
            "entrypoint": "0x000061cc",
            "current_name": "decode_and_process_000061cc",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006482) */\n\nint decode_and_process_000061cc(undefined4 param1,byte **param2,byte *param3,int **param4)\n\n{\n  int loopCounter;\n  uint currentByte;\n  byte *nextByte;\n  uint byteValue;\n  int **resultPointer;\n  undefined stackArray [256];\n  uint flags;\n  undefined4 base;\n  uint tempFlags;\n  int returnValue;\n  int count;\n  undefined *localArray;\n  int type;\n  undefined *localFunction;\n  code *updateDataFunction;\n  \n  returnValue = 0;\n  count = 0;\n  localFunction = &LAB_00006118_1;\n  updateDataFunction = update_data_if_not_null_00006192 + 1;\n  resultPointer = param4;\n  localArray = stackArray;\nLAB_000061f6:\n  while( true ) {\n    while( true ) {\n      byteValue = (uint)*param3;\n      if (byteValue == 0) {\n        return returnValue;\n      }\n      currentByte = (byte)(&DAT_00007a99)[byteValue] & 8;\n      nextByte = param3 + 1;\n      if (((&DAT_00007a99)[byteValue] & 8) == 0) break;\n      while (((param3 = nextByte, 0 < (int)param2[1] ||\n              (loopCounter = (*updateDataFunction)(param1,param2), loopCounter == 0)) &&\n             ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0))) {\n        count = count + 1;\n        param2[1] = param2[1] + -1;\n        *param2 = *param2 + 1;\n      }\n    }\n    if (byteValue == 0x25) break;\nLAB_00006352:\n    if (((int)param2[1] < 1) && (loopCounter = (*updateDataFunction)(param1,param2), loopCounter != 0))\n    goto LAB_00006380;\n    if (**param2 != byteValue) {\n      return returnValue;\n    }\n    *param2 = *param2 + 1;\n    count = count + 1;\n    param2[1] = param2[1] + -1;\n    param3 = nextByte;\n  }\n  tempFlags = currentByte;\n  flags = currentByte;\n  if (param3[1] == 0x2a) {\n    nextByte = param3 + 2;\n    flags = 0x10;\n  }\n  while( true ) {\n    currentByte = (uint)*nextByte;\n    if (9 < currentByte - 0x30) break;\n    nextByte = nextByte + 1;\n    tempFlags = (tempFlags * 10 + currentByte) - 0x30;\n  }\n  loopCounter = find_byte_sequence_00006010(&DAT_00007c02,currentByte,3);\n  if (loopCounter != 0) {\n    flags = 1 << (loopCounter - 0x7c02U & 0xff) | flags;\n    nextByte = nextByte + 1;\n  }\n  param3 = nextByte + 1;\n  currentByte = (uint)*nextByte;\n  if (currentByte < 0x79) {\n    if (0x57 < currentByte) {\n      switch(currentByte) {\n      default:\n        goto switchD_000062c0_caseD_59;\n      case 0x5b:\n        param3 = (byte *)decode_buffer_0000687c(stackArray,param3);\n        flags = flags | 0x40;\n        type = 1;\n        break;\n      case 99:\n        flags = flags | 0x40;\n        type = 0;\n        break;\n      case 100:\n      case 0x75:\n        base = 10;\nLAB_000063a0:\n        if (currentByte < 0x6f) {\n          type = 3;\n        }\n        else {\n          type = 4;\n        }\n        break;\n      case 0x65:\n      case 0x66:\n      case 0x67:\nswitchD_000062c0_caseD_65:\n        type = 5;\n        break;\n      case 0x69:\n        base = 0;\n        type = 3;\n        break;\n      case 0x6e:\n        if (-1 < (int)(flags << 0x1b)) {\n          if ((int)(flags << 0x1f) < 0) {\n            *(short *)*resultPointer = (short)count;\n            resultPointer = resultPointer + 1;\n          }\n          else {\n            **resultPointer = count;\n            resultPointer = resultPointer + 1;\n          }\n        }\n        goto LAB_000061f6;\n      case 0x6f:\n        base = 8;\n        type = 4;\n        break;\n      case 0x70:\n        flags = flags | 0x20;\n      case 0x58:\n      case 0x78:\n        flags = flags | 0x200;\n        base = 0x10;\n        goto LAB_000063a0;\n      case 0x73:\n        type = 2;\n      }\nLAB_000063ac:\n      if (((int)param2[1] < 1) && (loopCounter = (*updateDataFunction)(param1,param2), loopCounter != 0))\n      goto LAB_00006380;\n      if (-1 < (int)(flags << 0x19)) {\n        while ((int)((uint)(byte)(&DAT_00007a99)[**param2] << 0x1c) < 0) {\n          count = count + 1;\n          nextByte = param2[1];\n          param2[1] = nextByte + -1;\n          if ((int)(nextByte + -1) < 1) {\n            loopCounter = (*updateDataFunction)(param1,param2);\n            if (loopCounter != 0) goto LAB_00006380;\n          }\n          else {\n            *param2 = *param2 + 1;\n          }\n        }\n      }\n      if (type < 3) {\n        loopCounter = process_data_000064bc(param1,&flags,param2,&resultPointer);\n      }\n      else {\n        if (4 < type) goto LAB_000061f6;\n        loopCounter = decode_and_process_000061cc_data_0000656c(param1,&flags,param2,&resultPointer);\n      }\n      if (loopCounter == 1) {\n        return returnValue;\n      }\n      if (loopCounter == 2) {\nLAB_00006380:\n        if (returnValue == 0) {\nLAB_00006388:\n          returnValue = -1;\n        }\n        else if ((*(ushort *)(param2 + 3) & 0x40) != 0) {\n          returnValue = -1;\n        }\n        return returnValue;\n      }\n      goto LAB_000061f6;\n    }\n    nextByte = param3;\n    if (currentByte == 0x25) goto LAB_00006352;\n    if (currentByte < 0x26) {\n      if (currentByte != 0) goto switchD_000062c0_caseD_59;\n      goto LAB_00006388;\n    }\n    if (currentByte - 0x45 < 3) goto switchD_000062c0_caseD_65;\n  }\nswitchD_000062c0_caseD_59:\n  type = 3;\n  base = 10;\n  goto LAB_000063ac;\n}\n\n",
            "renaming": {
                "FUN_000061cc": "decode_and_process_000061cc",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "loopCounter",
                "uVar2": "currentByte",
                "pbVar3": "nextByte",
                "uVar4": "byteValue",
                "local_2b0": "resultPointer",
                "auStack_2ac": "stackArray",
                "local_1ac": "flags",
                "local_1a8": "base",
                "local_1a4": "tempFlags",
                "local_1a0": "returnValue",
                "local_19c": "count",
                "local_198": "localArray",
                "local_194": "type",
                "local_30": "localFunction",
                "local_2c": "updateDataFunction"
            },
            "calling": [
                "FUN_00005e68"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006192",
                "FUN_000064bc",
                "FUN_00006010",
                "FUN_0000656c"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000064bc": {
            "entrypoint": "0x000064bc",
            "current_name": "process_data_000064bc",
            "code": "\nundefined4 process_data_000064bc(undefined4 input_value,uint *data,byte **buffer,undefined4 *output_value)\n\n{\n  int result;\n  uint temp;\n  byte **ptr_to_byte_ptr;\n  byte *byte_ptr1;\n  byte *byte_ptr2;\n  byte *byte_ptr3;\n  int counter;\n  \n  if (data[2] == 0) {\n    if (data[6] == 0) {\n      temp = 1;\n    }\n    else {\n      temp = 0xffffffff;\n    }\n    data[2] = temp;\n  }\n  if (-1 < (int)(*data << 0x1b)) {\n    ptr_to_byte_ptr = (byte **)*output_value;\n    *output_value = ptr_to_byte_ptr + 1;\n    byte_ptr2 = *ptr_to_byte_ptr;\n  }\n  counter = 0;\n  do {\n    temp = data[6];\n    if (temp != 0) {\n      if (temp == 1) {\n        if (*(char *)(data[5] + (uint)**buffer) == '\\0') {\n          if (counter == 0) {\n            return 1;\n          }\nLAB_0000654a:\n          if (((*data & 0x10) == 0) && (data[3] = data[3] + 1, data[6] != 0)) {\n            *byte_ptr2 = 0;\n          }\n          data[4] = counter + data[4];\n          return 0;\n        }\n      }\n      else if ((temp != 2) || ((int)((uint)(byte)(&DAT_00007a99)[**buffer] << 0x1c) < 0))\n      goto LAB_0000654a;\n    }\n    byte_ptr3 = byte_ptr2;\n    if (-1 < (int)(*data << 0x1b)) {\n      byte_ptr3 = byte_ptr2 + 1;\n      *byte_ptr2 = **buffer;\n    }\n    byte_ptr1 = buffer[1];\n    *buffer = *buffer + 1;\n    temp = data[2] - 1;\n    buffer[1] = byte_ptr1 + -1;\n    counter = counter + 1;\n    data[2] = temp;\n    byte_ptr2 = byte_ptr3;\n    if ((temp == 0) ||\n       (((int)(byte_ptr1 + -1) < 1 &&\n        (result = (*(code *)data[0x60])(input_value,buffer,temp,(code *)data[0x60],output_value),\n        result != 0)))) goto LAB_0000654a;\n  } while( true );\n}\n\n",
            "renaming": {
                "FUN_000064bc": "process_data_000064bc",
                "param_1": "input_value",
                "param_2": "data",
                "param_3": "buffer",
                "param_4": "output_value",
                "iVar1": "result",
                "uVar2": "temp",
                "ppbVar3": "ptr_to_byte_ptr",
                "pbVar4": "byte_ptr1",
                "unaff_r6": "byte_ptr2",
                "pbVar5": "byte_ptr3",
                "iVar6": "counter"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000656c": {
            "entrypoint": "0x0000656c",
            "current_name": "decode_and_process_data_0000656c",
            "code": "\nundefined4 decode_and_process_data_0000656c(undefined4 param,uint *input,byte **data,undefined4 *output)\n\n{\n  int result;\n  undefined4 decoded_value;\n  code *decode_function;\n  uint counter;\n  byte *byte_ptr;\n  uint temp;\n  undefined4 *output_ptr;\n  uint *data_ptr;\n  uint *next_data_ptr;\n  uint *constant_ptr;\n  int remaining_bytes;\n  int iteration;\n  undefined *local_constants [4];\n  \n  local_constants[0] = &DAT_00007c2f;\n  local_constants[1] = &DAT_00007c32;\n  local_constants[2] = &DAT_00007c35;\n  decode_function = (code *)&UNK_00004f81;\n  if (input[6] != 3) {\n    decode_function = (code *)&UNK_00005fd5;\n  }\n  temp = input[2];\n  counter = temp - 1;\n  if (0x15c < counter) {\n    remaining_bytes = temp - 0x15d;\n    temp = 0x15d;\n  }\n  if (0x15c < counter) {\n    input[2] = temp;\n  }\n  constant_ptr = input + 7;\n  if (counter < 0x15d) {\n    remaining_bytes = 0;\n  }\n  *input = *input | 0xd00;\n  iteration = 0;\n  next_data_ptr = constant_ptr;\n  do {\n    result = find_byte_sequence_00006010(local_constants[iteration],**data,2);\n    if (result != 0) {\n      if (iteration == 1) {\n        if (input[1] == 0) {\n          input[1] = 8;\n          *input = *input | 0x200;\n        }\n        counter = *input & 0xfffffaff;\nLAB_000065f4:\n        *input = counter;\n      }\n      else if (iteration == 2) {\n        if ((*input & 0x600) != 0x200) goto LAB_00006624;\n        input[1] = 0x10;\n        counter = *input | 0x100;\n        goto LAB_000065f4;\n      }\n      counter = input[2];\n      input[2] = counter - 1;\n      if (counter != 0) {\n        byte_ptr = *data;\n        *data = byte_ptr + 1;\n        data_ptr = (uint *)((int)next_data_ptr + 1);\n        *(byte *)next_data_ptr = *byte_ptr;\n        byte_ptr = data[1];\n        data[1] = byte_ptr + -1;\n        next_data_ptr = data_ptr;\n        if (((int)(byte_ptr + -1) < 1) &&\n           (result = (*(code *)input[0x60])(param,data), result != 0)) {\n          iteration = 0;\n          goto LAB_000066ca;\n        }\n      }\n    }\nLAB_00006624:\n    iteration = iteration + 1;\n  } while (iteration != 3);\n  if (input[1] == 0) {\n    input[1] = 10;\n  }\n  decode_buffer_0000687c(input[5],\"01234567]\" + (8 - input[1]));\n  iteration = 0;\n  while( true ) {\n    data_ptr = next_data_ptr;\n    if (input[2] == 0) break;\n    byte_ptr = *data;\n    counter = (uint)*byte_ptr;\n    if (*(char *)(input[5] + counter) == '\\0') break;\n    if ((counter == 0x30) && ((int)(*input << 0x14) < 0)) {\n      iteration = iteration + 1;\n      if (remaining_bytes != 0) {\n        remaining_bytes = remaining_bytes + -1;\n        input[2] = input[2] + 1;\n      }\n    }\n    else {\n      *input = *input & 0xfffff6ff;\n      data_ptr = (uint *)((int)next_data_ptr + 1);\n      *(byte *)next_data_ptr = *byte_ptr;\n    }\n    byte_ptr = data[1];\n    data[1] = byte_ptr + -1;\n    if ((int)(byte_ptr + -1) < 1) {\n      result = (*(code *)input[0x60])(param,data);\n      if (result != 0) break;\n    }\n    else {\n      *data = *data + 1;\n    }\n    input[2] = input[2] - 1;\n    next_data_ptr = data_ptr;\n  }\nLAB_000066ca:\n  if ((int)(*input << 0x17) < 0) {\n    if (constant_ptr < data_ptr) {\n      (*(code *)input[0x5f])(param,*(byte *)((int)data_ptr + -1),data);\n      data_ptr = (uint *)((int)data_ptr + -1);\n    }\n    if (data_ptr == constant_ptr) {\n      return 1;\n    }\n  }\n  if ((*input & 0x10) == 0) {\n    *(byte *)data_ptr = 0;\n    decoded_value = (*decode_function)(param,constant_ptr,0,input[1]);\n    output_ptr = (undefined4 *)*output;\n    counter = *input;\n    *output = output_ptr + 1;\n    output_ptr = (undefined4 *)*output_ptr;\n    if ((counter & 0x20) == 0) {\n      if ((int)(counter << 0x1f) < 0) {\n        *(short *)output_ptr = (short)decoded_value;\n      }\n      else {\n        *output_ptr = decoded_value;\n      }\n    }\n    else {\n      *output_ptr = decoded_value;\n    }\n    input[3] = input[3] + 1;\n  }\n  input[4] = (uint)((int)data_ptr + input[4] + (iteration - (int)constant_ptr));\n  return 0;\n}\n\n",
            "renaming": {
                "FUN_0000656c": "decode_and_process_data_0000656c",
                "param_1": "param",
                "param_2": "input",
                "param_3": "data",
                "param_4": "output",
                "iVar1": "result",
                "uVar2": "decoded_value",
                "pcVar3": "decode_function",
                "uVar4": "counter",
                "pbVar5": "byte_ptr",
                "uVar6": "temp",
                "puVar7": "output_ptr",
                "puVar8": "data_ptr",
                "puVar9": "next_data_ptr",
                "puVar10": "constant_ptr",
                "unaff_r9": "remaining_bytes",
                "iVar11": "iteration",
                "local_34": "local_constants"
            },
            "calling": [
                "FUN_000061cc"
            ],
            "called": [
                "FUN_0000687c",
                "FUN_00006010"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006768": {
            "entrypoint": "0x00006768",
            "current_name": "process_data_00006768",
            "code": "\nundefined4\nprocessData_00006768(undefined4 *inputData,undefined4 *outputData,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 tempVar1;\n  int tempVar2;\n  undefined4 tempVar3;\n  ushort tempVar4;\n  uint tempVar5;\n  \n  if ((inputData != (undefined4 *)0x0) && (inputData[6] == 0)) {\n    initialize_memory_and_process_data_000042a4();\n  }\n  if (outputData == &DAT_000079b8) {\n    outputData = (undefined4 *)inputData[1];\n  }\n  else if (outputData == (undefined4 *)&DAT_000079d8) {\n    outputData = (undefined4 *)inputData[2];\n  }\n  else if (outputData == (undefined4 *)&DAT_00007998) {\n    outputData = (undefined4 *)inputData[3];\n  }\n  tempVar4 = *(ushort *)(outputData + 3);\n  outputData[1] = 0;\n  tempVar5 = (uint)*(ushort *)(outputData + 3);\n  if ((int)(tempVar5 << 0x1a) < 0) {\n    return 0xffffffff;\n  }\n  if ((int)(tempVar5 << 0x1d) < 0) {\n    if ((undefined4 *)outputData[0xd] != (undefined4 *)0x0) {\n      if ((undefined4 *)outputData[0xd] != outputData + 0x11) {\n        update_data_00004b34(inputData);\n      }\n      outputData[1] = outputData[0x10];\n      outputData[0xd] = 0;\n      if (outputData[0x10] != 0) {\n        *outputData = outputData[0xf];\n        return 0;\n      }\n    }\n  }\n  else {\n    if (-1 < (int)(tempVar5 << 0x1b)) {\n      *inputData = 9;\n      tempVar4 = tempVar4 | 0x40;\n      goto LAB_000067b8;\n    }\n    if ((int)(tempVar5 << 0x1c) < 0) {\n      tempVar2 = process_data_00004158(inputData,outputData,tempVar5 << 0x1c,tempVar5,param4);\n      if (tempVar2 != 0) {\n        return 0xffffffff;\n      }\n      outputData[2] = 0;\n      *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) & 0xfff7;\n      outputData[6] = 0;\n    }\n    *(ushort *)(outputData + 3) = *(ushort *)(outputData + 3) | 4;\n  }\n  if (outputData[4] == 0) {\n    initialize_and_allocate_memory_00005700(inputData,outputData);\n  }\n  tempVar4 = *(ushort *)(outputData + 3);\n  tempVar1 = *(undefined2 *)(outputData + 3);\n  if ((tempVar4 & 3) != 0) {\n    *(undefined2 *)(outputData + 3) = 1;\n    process_data_000043a0(0x1fff0284,&LAB_00006754_1);\n    *(undefined2 *)(outputData + 3) = tempVar1;\n    if ((tempVar4 & 9) == 9) {\n      process_data_0000404c(inputData,outputData);\n    }\n  }\n  tempVar3 = outputData[4];\n  *outputData = tempVar3;\n  tempVar2 = (*(code *)outputData[9])(inputData,outputData[8],tempVar3,outputData[5]);\n  outputData[1] = tempVar2;\n  if (0 < tempVar2) {\n    return 0;\n  }\n  tempVar4 = *(ushort *)(outputData + 3);\n  if (tempVar2 != 0) {\n    tempVar3 = 0;\n  }\n  else {\n    tempVar4 = tempVar4 | 0x20;\n  }\n  if (tempVar2 != 0) {\n    outputData[1] = tempVar3;\n    tempVar4 = tempVar4 | 0x40;\n  }\nLAB_000067b8:\n  *(ushort *)(outputData + 3) = tempVar4;\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_00006768": "process_data_00006768",
                "param_1": "inputData",
                "param_2": "outputData",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "tempVar1",
                "iVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "uVar5": "tempVar5"
            },
            "calling": [
                "FUN_00005e10"
            ],
            "called": [
                "FUN_000042a4",
                "FUN_0000404c",
                "FUN_00004158",
                "FUN_000043a0",
                "FUN_00004b34",
                "FUN_00005700"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_0000687c": {
            "entrypoint": "0x0000687c",
            "current_name": "decode_buffer_0000687c",
            "code": "\nbyte * decode_buffer_0000687c(int buffer_size,byte *buffer)\n\n{\n  byte *result;\n  uint current_byte;\n  int i;\n  uint next_byte;\n  uint start_index;\n  uint end_index;\n  bool is_caret;\n  \n  next_byte = (uint)*buffer;\n  is_caret = next_byte == 0x5e;\n  if (is_caret) {\n    next_byte = (uint)buffer[1];\n    buffer = buffer + 2;\n  }\n  else {\n    buffer = buffer + 1;\n  }\n  i = buffer_size + -1;\n  do {\n    i = i + 1;\n    *(bool *)i = is_caret;\n  } while (i != buffer_size + 0xff);\n  if (next_byte == 0) {\n    result = buffer + -1;\n  }\n  else {\nloop_start:\n    do {\n      start_index = next_byte;\n      *(bool *)(buffer_size + start_index) = !is_caret;\n      buffer = buffer + 1;\n      while( true ) {\n        next_byte = (uint)buffer[-1];\n        if (next_byte != 0x2d) break;\n        end_index = (uint)*buffer;\n        if ((end_index == 0x5d) || (current_byte = start_index, (int)end_index < (int)start_index)) goto loop_start;\n        do {\n          current_byte = current_byte + 1;\n          *(bool *)(buffer_size + current_byte) = !is_caret;\n        } while ((int)current_byte < (int)end_index);\n        i = ~start_index + end_index;\n        if ((int)end_index <= (int)start_index) {\n          i = 0;\n        }\n        start_index = start_index + 1 + i;\n        buffer = buffer + 2;\n      }\n      result = buffer;\n    } while ((next_byte != 0x5d) && (result = buffer + -1, next_byte != 0));\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_0000687c": "decode_buffer_0000687c",
                "param_1": "buffer_size",
                "param_2": "buffer",
                "pbVar1": "result",
                "uVar2": "current_byte",
                "iVar3": "i",
                "uVar4": "next_byte",
                "uVar5": "start_index",
                "uVar6": "end_index",
                "bVar7": "is_caret",
                "LAB_000068aa": "loop_start"
            },
            "calling": [
                "FUN_000061cc",
                "FUN_0000656c"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_000068f0": {
            "entrypoint": "0x000068f0",
            "current_name": "allocate_and_copy_data_000068f0",
            "code": "\nundefined4 allocate_and_copy_data_000068f0(undefined4 param,int *buffer)\n\n{\n  int new_alloc_addr;\n  int current_size;\n  \n  if ((int *)buffer[0xd] == buffer + 0x11) {\n    new_alloc_addr = allocate_and_initialize_memory(param,0x400);\n    if (new_alloc_addr != 0) {\n      buffer[0xe] = 0x400;\n      buffer[0xd] = new_alloc_addr;\n      *(undefined *)(new_alloc_addr + 0x3ff) = *(undefined *)((int)buffer + 0x46);\n      *(undefined *)(new_alloc_addr + 0x3fe) = *(undefined *)((int)buffer + 0x45);\n      *(undefined *)(new_alloc_addr + 0x3fd) = *(undefined *)(buffer + 0x11);\n      *buffer = new_alloc_addr + 0x3fd;\n      return 0;\n    }\n  }\n  else {\n    current_size = buffer[0xe];\n    new_alloc_addr = allocate_and_copy_data_000068f0(param,(int *)buffer[0xd],current_size << 1);\n    if (new_alloc_addr != 0) {\n      copy_data(new_alloc_addr + current_size,new_alloc_addr,current_size);\n      buffer[0xd] = new_alloc_addr;\n      buffer[0xe] = current_size << 1;\n      *buffer = new_alloc_addr + current_size;\n      return 0;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "renaming": {
                "FUN_000068f0": "allocate_and_copy_data_000068f0",
                "param_1": "param",
                "param_2": "buffer",
                "iVar1": "new_alloc_addr",
                "iVar2": "current_size",
                "allocate_and_initialize_memory_00004bd0": "allocate_and_initialize_memory",
                "allocate_and_copy_data_000060cc": "allocate_and_copy_data",
                "copy_data_000060b0": "copy_data"
            },
            "calling": [],
            "called": [
                "FUN_00004bd0",
                "FUN_000060cc",
                "FUN_000060b0"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006964": {
            "entrypoint": "0x00006964",
            "current_name": "add_negative_or_index_00006964",
            "code": "\nint addNegativeOrIndex_00006964(undefined4 param1,int param2)\n\n{\n  int result;\n  \n  result = *(int *)(param2 + -4) + -4;\n  if (*(int *)(param2 + -4) < 0) {\n    result = result + *(int *)(param2 + result);\n  }\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006964": "add_negative_or_index_00006964",
                "param_1": "param1",
                "param_2": "param2",
                "iVar1": "result"
            },
            "calling": [
                "FUN_000060cc"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006974": {
            "entrypoint": "0x00006974",
            "current_name": "divide_and_remainder_00006974",
            "code": "\nundefined8 divideAndRemainder_00006974(int dividend,int divisor,int divided,int remainder)\n\n{\n  int absDivisor;\n  undefined8 result;\n  undefined temp [8];\n  \n  if ((remainder == 0) && (divided == 0)) {\n    if (divisor < 0) {\n      dividend = 0;\n      divisor = -0x80000000;\n    }\n    else if (divisor != 0 || dividend != 0) {\n      divisor = 0x7fffffff;\n      dividend = -1;\n    }\n    return combineInts(divisor,dividend);\n  }\n  if (divisor < 0) {\n    absDivisor = -divisor - (uint)(dividend != 0);\n    if (remainder < 0) {\n      result = divide_with_remainder_00006a14(-dividend,absDivisor,-divided,-remainder - (uint)(divided != 0),temp);\n      return result;\n    }\n    result = divide_with_remainder_00006a14(-dividend,absDivisor,divided,remainder,temp);\n    return combineInts(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  if (remainder < 0) {\n    result = divide_with_remainder_00006a14(dividend,divisor,-divided,-remainder - (uint)(divided != 0),temp);\n    return combineInts(-(int)((ulonglong)result >> 0x20) - (uint)((int)result != 0),-(int)result);\n  }\n  result = divide_with_remainder_00006a14();\n  return result;\n}\n\n",
            "renaming": {
                "FUN_00006974": "divide_and_remainder_00006974",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "divided",
                "param_4": "remainder",
                "iVar1": "absDivisor",
                "uVar2": "result",
                "local_8": "temp",
                "CONCAT44": "combineInts"
            },
            "calling": [
                "FUN_0000443c"
            ],
            "called": [
                "FUN_00006a14"
            ],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        },
        "FUN_00006a14": {
            "entrypoint": "0x00006a14",
            "current_name": "divide_with_remainder_00006a14",
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00006ca0) */\n\nulonglong divide_with_remainder_00006a14(uint dividend,uint dividend_high,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *jump_table;\n  uint quotient_high;\n  int shift;\n  uint tmp1;\n  uint tmp2;\n  uint quotient;\n  uint tmp3;\n  uint tmp4;\n  uint tmp5;\n  uint tmp6;\n  bool carry;\n  ulonglong result;\n  \n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift = LZCOUNT(divisor);\n      quotient = divisor;\n      if (shift != 0) {\n        quotient = divisor << shift;\n        dividend_high = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        dividend = dividend << shift;\n      }\n      tmp3 = quotient >> 0x10;\n      tmp5 = dividend_high / tmp3;\n      tmp1 = dividend >> 0x10 | (dividend_high - tmp3 * tmp5) * 0x10000;\n      quotient_high = tmp5 * (quotient & 0xffff);\n      tmp2 = tmp5;\n      if (tmp1 <= quotient_high && quotient_high - tmp1 != 0) {\n        carry = CARRY4(quotient,tmp1);\n        tmp1 = quotient + tmp1;\n        tmp2 = tmp5 - 1;\n        if ((carry == false) && (tmp1 <= quotient_high && quotient_high - tmp1 != 0)) {\n          tmp2 = tmp5 - 2;\n          tmp1 = tmp1 + quotient;\n        }\n      }\n      tmp5 = (tmp1 - quotient_high) / tmp3;\n      tmp3 = dividend & 0xffff | ((tmp1 - quotient_high) - tmp3 * tmp5) * 0x10000;\n      tmp1 = tmp5 * (quotient & 0xffff);\n      quotient_high = tmp5;\n      if (tmp3 <= tmp1 && tmp1 - tmp3 != 0) {\n        carry = CARRY4(quotient,tmp3);\n        tmp3 = quotient + tmp3;\n        quotient_high = tmp5 - 1;\n        if ((carry == false) && (tmp3 <= tmp1 && tmp1 - tmp3 != 0)) {\n          quotient_high = tmp5 - 2;\n          tmp3 = tmp3 + quotient;\n        }\n      }\n      tmp3 = tmp3 - tmp1;\n      quotient_high = quotient_high | tmp2 << 0x10;\n      quotient = 0;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x6abc);\n        result = (*jump_table)();\n        return result;\n      }\n      shift = LZCOUNT(divisor);\n      if (shift == 0) {\n        dividend_high = dividend_high - divisor;\n        tmp6 = divisor >> 0x10;\n        tmp4 = divisor & 0xffff;\n        quotient = 1;\n        tmp2 = divisor;\n      }\n      else {\n        tmp2 = divisor << shift;\n        tmp6 = tmp2 >> 0x10;\n        quotient_high = dividend_high >> (0x20U - shift & 0xff);\n        quotient = dividend >> (0x20U - shift & 0xff) | dividend_high << shift;\n        tmp1 = quotient_high / tmp6;\n        tmp4 = tmp2 & 0xffff;\n        tmp5 = quotient >> 0x10 | (quotient_high - tmp6 * tmp1) * 0x10000;\n        tmp3 = tmp1 * tmp4;\n        dividend = dividend << shift;\n        quotient_high = tmp1;\n        if (tmp5 <= tmp3 && tmp3 - tmp5 != 0) {\n          carry = CARRY4(tmp2,tmp5);\n          tmp5 = tmp2 + tmp5;\n          quotient_high = tmp1 - 1;\n          if ((carry == false) && (tmp5 <= tmp3 && tmp3 - tmp5 != 0)) {\n            quotient_high = tmp1 - 2;\n            tmp5 = tmp5 + tmp2;\n          }\n        }\n        tmp1 = (tmp5 - tmp3) / tmp6;\n        dividend_high = quotient & 0xffff | ((tmp5 - tmp3) - tmp6 * tmp1) * 0x10000;\n        tmp3 = tmp1 * tmp4;\n        quotient = tmp1;\n        if (dividend_high <= tmp3 && tmp3 - dividend_high != 0) {\n          carry = CARRY4(tmp2,dividend_high);\n          dividend_high = tmp2 + dividend_high;\n          quotient = tmp1 - 1;\n          if ((carry == false) && (dividend_high <= tmp3 && tmp3 - dividend_high != 0)) {\n            quotient = tmp1 - 2;\n            dividend_high = dividend_high + tmp2;\n          }\n        }\n        dividend_high = dividend_high - tmp3;\n        quotient = quotient | quotient_high << 0x10;\n      }\n      tmp5 = dividend_high / tmp6;\n      tmp3 = dividend >> 0x10 | (dividend_high - tmp6 * tmp5) * 0x10000;\n      quotient_high = tmp4 * tmp5;\n      tmp1 = tmp5;\n      if (tmp3 <= quotient_high && quotient_high - tmp3 != 0) {\n        carry = CARRY4(tmp2,tmp3);\n        tmp3 = tmp2 + tmp3;\n        tmp1 = tmp5 - 1;\n        if ((carry == false) && (tmp3 <= quotient_high && quotient_high - tmp3 != 0)) {\n          tmp1 = tmp5 - 2;\n          tmp3 = tmp3 + tmp2;\n        }\n      }\n      tmp5 = (tmp3 - quotient_high) / tmp6;\n      tmp3 = dividend & 0xffff | ((tmp3 - quotient_high) - tmp6 * tmp5) * 0x10000;\n      tmp4 = tmp4 * tmp5;\n      quotient_high = tmp5;\n      if (tmp3 <= tmp4 && tmp4 - tmp3 != 0) {\n        carry = CARRY4(tmp2,tmp3);\n        tmp3 = tmp2 + tmp3;\n        quotient_high = tmp5 - 1;\n        if ((carry == false) && (tmp3 <= tmp4 && tmp4 - tmp3 != 0)) {\n          quotient_high = tmp5 - 2;\n          tmp3 = tmp3 + tmp2;\n        }\n      }\n      tmp3 = tmp3 - tmp4;\n      quotient_high = quotient_high | tmp1 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = tmp3 >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n      return 0;\n    }\n    quotient_high = 0;\n    quotient = 0;\n  }\n  else {\n    shift = LZCOUNT(divisor_high);\n    if (shift != 0) {\n      tmp4 = 0x20 - shift;\n      tmp1 = divisor >> (tmp4 & 0xff) | divisor_high << shift;\n      tmp6 = tmp1 >> 0x10;\n      quotient_high = dividend_high >> (tmp4 & 0xff);\n      quotient = dividend >> (tmp4 & 0xff) | dividend_high << shift;\n      tmp3 = quotient_high / tmp6;\n      tmp2 = quotient >> 0x10 | (quotient_high - tmp6 * tmp3) * 0x10000;\n      tmp5 = tmp3 * (tmp1 & 0xffff);\n      dividend = dividend << shift;\n      quotient_high = tmp3;\n      if (tmp2 <= tmp5 && tmp5 - tmp2 != 0) {\n        carry = CARRY4(tmp1,tmp2);\n        tmp2 = tmp1 + tmp2;\n        quotient_high = tmp3 - 1;\n        if ((carry == false) && (tmp2 <= tmp5 && tmp5 - tmp2 != 0)) {\n          quotient_high = tmp3 - 2;\n          tmp2 = tmp2 + tmp1;\n        }\n      }\n      tmp3 = (tmp2 - tmp5) / tmp6;\n      tmp2 = quotient & 0xffff | ((tmp2 - tmp5) - tmp6 * tmp3) * 0x10000;\n      tmp5 = tmp3 * (tmp1 & 0xffff);\n      quotient = tmp3;\n      if (tmp2 <= tmp5 && tmp5 - tmp2 != 0) {\n        carry = CARRY4(tmp1,tmp2);\n        tmp2 = tmp1 + tmp2;\n        quotient = tmp3 - 1;\n        if ((carry == false) && (tmp2 <= tmp5 && tmp5 - tmp2 != 0)) {\n          quotient = tmp3 - 2;\n          tmp2 = tmp2 + tmp1;\n        }\n      }\n      quotient = quotient | quotient_high << 0x10;\n      result = (ulonglong)quotient * (ulonglong)(divisor << shift);\n      if (CONCAT44(tmp2 - tmp5,dividend) < result) {\n        result = result - CONCAT44(tmp1,divisor << shift);\n        quotient = quotient - 1;\n      }\n      if (remainder != (uint *)0x0) {\n        quotient_high = ((tmp2 - tmp5) - (int)(result >> 0x20)) - (uint)(dividend < (uint)result);\n        *remainder = quotient_high << (tmp4 & 0xff) | dividend - (uint)result >> shift;\n        remainder[1] = quotient_high >> shift;\n      }\n      return (ulonglong)quotient;\n    }\n    if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n      carry = dividend < divisor;\n      dividend = dividend - divisor;\n      dividend_high = (dividend_high - divisor_high) - (uint)carry;\n      quotient_high = 1;\n    }\n    else {\n      quotient_high = 0;\n    }\n    quotient = 0;\n    if (remainder != (uint *)0x0) {\n      *remainder = dividend;\n      remainder[1] = dividend_high;\n    }\n  }\n  return CONCAT44(quotient,quotient_high);\n}\n\n",
            "renaming": {
                "FUN_00006a14": "divide_with_remainder_00006a14",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "uVar1": "quotient_high",
                "iVar2": "shift",
                "uVar3": "tmp1",
                "uVar4": "tmp2",
                "uVar5": "quotient",
                "uVar6": "tmp3",
                "uVar7": "tmp4",
                "uVar8": "tmp5",
                "uVar9": "tmp6",
                "bVar10": "carry",
                "uVar11": "result"
            },
            "calling": [
                "FUN_00006974"
            ],
            "called": [],
            "improved": true,
            "skipped": false,
            "imported": false,
            "tags": []
        }
    },
    "used_tokens": 133834,
    "layers": [
        [
            "FUN_000004f2",
            "FUN_00000514",
            "FUN_00000534",
            "FUN_00000566",
            "FUN_0000058e",
            "FUN_000005ca",
            "FUN_000007dc",
            "FUN_000008b8",
            "FUN_00000900",
            "FUN_0000091c",
            "FUN_0000093c",
            "FUN_00000cd0",
            "FUN_00000cf0",
            "FUN_00000d0c",
            "FUN_00000d2a",
            "FUN_00000d44",
            "FUN_00000dcc",
            "FUN_000010a0",
            "FUN_00001318",
            "FUN_00001360",
            "FUN_000015d0",
            "FUN_00001696",
            "FUN_00001748",
            "FUN_00001ad4",
            "FUN_00001d08",
            "FUN_00001d5e",
            "FUN_00001d80",
            "FUN_00001da2",
            "FUN_00001dc0",
            "FUN_00001e0c",
            "FUN_00001e44",
            "FUN_00002270",
            "FUN_00002294",
            "FUN_000022be",
            "FUN_000022f0",
            "FUN_000023c8",
            "FUN_0000240c",
            "FUN_00002538",
            "FUN_000026f0",
            "FUN_00002714",
            "FUN_00002744",
            "FUN_0000281c",
            "FUN_0000285c",
            "FUN_000028f0",
            "FUN_00002910",
            "FUN_0000294c",
            "FUN_00002970",
            "FUN_000031fc",
            "FUN_00003658",
            "FUN_00003810",
            "FUN_00003918",
            "FUN_000039e8",
            "FUN_00003d24",
            "FUN_00003d64",
            "FUN_00003d94",
            "FUN_00003dc4",
            "FUN_00004274",
            "FUN_00004280",
            "FUN_0000428c",
            "FUN_000043a0",
            "FUN_000045ee",
            "FUN_00004622",
            "FUN_00004e52",
            "FUN_00004e66",
            "FUN_00004f84",
            "FUN_000050e8",
            "FUN_000050f4",
            "FUN_00005584",
            "FUN_000056b0",
            "FUN_00005790",
            "FUN_0000579c",
            "FUN_00005a58",
            "FUN_00005ebc",
            "FUN_00005ecc",
            "FUN_00005edc",
            "FUN_00005fec",
            "FUN_00005ff8",
            "FUN_00006010",
            "FUN_000060b0",
            "FUN_000064bc",
            "FUN_0000687c",
            "FUN_00006964",
            "FUN_00006a14"
        ],
        [
            "FUN_00000428",
            "FUN_00000610",
            "FUN_00000698",
            "FUN_00000738",
            "FUN_00000930",
            "FUN_00000d76",
            "FUN_00000e38",
            "FUN_00000e58",
            "FUN_00001348",
            "FUN_00001392",
            "FUN_000014c4",
            "FUN_000016c8",
            "FUN_000016ec",
            "FUN_00001710",
            "FUN_00001cf0",
            "FUN_00001d3a",
            "FUN_00001ec4",
            "FUN_00001ff6",
            "FUN_0000231c",
            "FUN_00002364",
            "FUN_000023d0",
            "FUN_0000258c",
            "FUN_000026c0",
            "FUN_000026d8",
            "FUN_000026e4",
            "FUN_00002798",
            "FUN_000027b0",
            "FUN_00002894",
            "FUN_00002a18",
            "FUN_0000328c",
            "FUN_00003688",
            "FUN_00003e58",
            "FUN_00003ff4",
            "FUN_00004042",
            "FUN_000041f4",
            "FUN_00004634",
            "FUN_00004b34",
            "FUN_00004e26",
            "FUN_00004f98",
            "FUN_0000562c",
            "FUN_000056b8",
            "FUN_00005b34",
            "FUN_00005fd8",
            "FUN_0000656c",
            "FUN_00006974"
        ],
        [
            "FUN_00000794",
            "FUN_00000d9c",
            "FUN_00001628",
            "FUN_00001734",
            "FUN_00001778",
            "FUN_000017dc",
            "FUN_0000182c",
            "FUN_000018bc",
            "FUN_00001960",
            "FUN_00001a60",
            "FUN_00001bb8",
            "FUN_00001ddc",
            "FUN_00002028",
            "FUN_000024bc",
            "FUN_000025f4",
            "FUN_00002994",
            "FUN_00002e9c",
            "FUN_0000404c",
            "FUN_0000443c",
            "FUN_00004bd0",
            "FUN_00004dee",
            "FUN_000056a0",
            "FUN_00005780",
            "FUN_00006192"
        ],
        [
            "FUN_00000db0",
            "FUN_000012b4",
            "FUN_00001688",
            "FUN_0000191c",
            "FUN_000019c0",
            "FUN_00001a18",
            "FUN_00001a3c",
            "FUN_00001f80",
            "FUN_000020b8",
            "FUN_000020cc",
            "FUN_000020e0",
            "FUN_000020f4",
            "FUN_00002108",
            "FUN_00002396",
            "FUN_00002624",
            "FUN_00002690",
            "FUN_00004248",
            "FUN_00005700",
            "FUN_000060cc",
            "FUN_000061cc"
        ],
        [
            "FUN_00001448",
            "FUN_00001b10",
            "FUN_00001eea",
            "FUN_00005e68",
            "FUN_000068f0"
        ],
        [
            "FUN_00001c84",
            "FUN_00005100"
        ],
        [
            "FUN_00001274",
            "FUN_000047e4"
        ],
        [
            "FUN_00000e64",
            "FUN_00002600",
            "FUN_00002654"
        ],
        [
            "FUN_000031e0",
            "FUN_000033f4",
            "FUN_00003478",
            "FUN_000034c0"
        ],
        [
            "FUN_00000ed8",
            "FUN_0000211c",
            "FUN_00003378"
        ],
        [
            "FUN_00002eb4"
        ],
        [
            "FUN_00004158",
            "FUN_00004314",
            "FUN_000054a8"
        ],
        [
            "FUN_000041d0",
            "FUN_000042a4"
        ],
        [
            "FUN_00005404",
            "FUN_00006768"
        ],
        [
            "FUN_00004cb4",
            "FUN_00004db8",
            "FUN_000057a8",
            "FUN_00005e10"
        ],
        [
            "FUN_00002a00",
            "FUN_000033c0",
            "FUN_00003444",
            "FUN_00004418",
            "FUN_000057d2"
        ],
        [
            "FUN_00002d94",
            "FUN_00002e48",
            "FUN_000057f8"
        ],
        [
            "FUN_00004c84"
        ],
        [
            "FUN_00002a88",
            "FUN_00002f74",
            "FUN_00003524"
        ],
        [
            "FUN_00002b10"
        ],
        [
            "FUN_00002e6c"
        ],
        [
            "FUN_000023a4"
        ],
        [
            "FUN_00000f04"
        ],
        [
            "FUN_00000a30",
            "FUN_00000cc0",
            "FUN_00000fec",
            "FUN_00001034",
            "FUN_000013b8",
            "FUN_00003ec4"
        ],
        [
            "FUN_00000dc0",
            "FUN_00000df4",
            "FUN_000010d4",
            "FUN_00002434",
            "FUN_00003e9e"
        ],
        [
            "FUN_00000410",
            "FUN_00000f8c",
            "FUN_0000129c",
            "FUN_00003694"
        ],
        [
            "FUN_000012e2",
            "FUN_00002ecc",
            "FUN_0000305c",
            "FUN_0000459c"
        ],
        [
            "FUN_00000e14",
            "FUN_00002f30"
        ],
        [
            "FUN_00000490",
            "FUN_00002fe0"
        ],
        [
            "FUN_0000316c",
            "FUN_00004dc8"
        ]
    ],
    "locked_functions": []
}